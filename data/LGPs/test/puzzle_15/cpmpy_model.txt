```python
# 0. Preliminaries
from cpmpy import *

def add_comparable_constraints(comparable_category_values, comparing_function, var1, var2):
    comparable_category_vars = list(comparable_category_values.keys())
    return [((e1 == var1) & (e2 == var2))
          .implies(comparing_function(comparable_category_values[e1], comparable_category_values[e2]))
          for e1 in comparable_category_vars for e2 in comparable_category_vars]

m = Model()

# 1. Variables (all variables that have the same integer value correspond to the same object)
_790, _800, _810, _820 = prices = intvar(1, 4, shape=4)
aquamarine, blue_topaz, rhodolite, tourmaline = gems = intvar(1, 4, shape=4)
collins, knox, osborne, underwood = claims = intvar(1, 4, shape=4)

# 2. Comparable values (helper dictionaries for comparisons)
prices_values = {_790: 790, _800: 800, _810: 810, _820: 820}  # in dollars

# 3. Constraints (all different per category and problem constraints)
m += AllDifferent(prices)
m += AllDifferent(gems)
m += AllDifferent(claims)

# The blue topaz sold for 10 dollars more than the gem found in the Osborne claim.
m += add_comparable_constraints(prices_values, lambda var1, var2: var1 == var2 + 10, var1=blue_topaz, var2=osborne)

# The rhodolite went for $820.
m += (rhodolite == _820)

# The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim.
m += Xor([tourmaline == _810, tourmaline == underwood])

# Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800.
m += Xor([(collins == _790) & (aquamarine == _800), (collins == _800) & (aquamarine == _790)])

# The end. You can take it from here.
```