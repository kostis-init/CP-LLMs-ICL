```python
# 0. Preliminaries
from cpmpy import *

def add_comparable_constraints(comparable_category_values, comparing_function, var1, var2):
    comparable_category_vars = list(comparable_category_values.keys())
    return [((e1 == var1) & (e2 == var2))
          .implies(comparing_function(comparable_category_values[e1], comparable_category_values[e2]))
          for e1 in comparable_category_vars for e2 in comparable_category_vars]

m = Model()

# 1. Variables (all variables that have the same integer value correspond to the same object)
anna, delores, wilma, yvonne = names = intvar(1, 4, shape=4)
_25000, _30000, _35000, _40000 = scholarships = intvar(1, 4, shape=4)
biology, mathematics, physics, theology = majors = intvar(1, 4, shape=4)

# 2. Comparable values (helper dictionaries for comparisons)
scholarships_values = {_25000: 25000, _30000: 30000, _35000: 35000, _40000: 40000} # in dollars

# 3. Constraints (all different per category and problem constraints)
m += AllDifferent(names)
m += AllDifferent(scholarships)
m += AllDifferent(majors)

# The student who will major in Physics was awarded $5000 less than the student who will major in Biology.
m += add_comparable_constraints(scholarships_values, lambda var1, var2: var1 == var2 - 5000, var1=physics, var2=biology)

# Wilma will major in Mathematics.
m += (wilma == mathematics)

# Delores was awarded $5000 more than Anna.
m += add_comparable_constraints(scholarships_values, lambda var1, var2: var1 == var2 + 5000, var1=delores, var2=anna)

# Anna was awarded some amount less than the person who will major in Mathematics.
m += add_comparable_constraints(scholarships_values, lambda var1, var2: var1 < var2, var1=anna, var2=mathematics)

# Wilma is either the person who received the 35000 dollars scholarship or the person who received the 25000 dollars scholarship.
m += Xor([wilma == _35000, wilma == _25000])

# The end. You can take it from here.
```