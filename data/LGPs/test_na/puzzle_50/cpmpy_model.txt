```python
# 0. Preliminaries
from cpmpy import *

def add_comparable_constraints(comparable_category_values, comparing_function, var1, var2):
    comparable_category_vars = list(comparable_category_values.keys())
    return [((e1 == var1) & (e2 == var2))
          .implies(comparing_function(comparable_category_values[e1], comparable_category_values[e2]))
          for e1 in comparable_category_vars for e2 in comparable_category_vars]

m = Model()

# 1. Variables (all variables that have the same integer value correspond to the same object)
beulah, debra, ginger, hannah = clients = intvar(1, 4, shape=4)
_150, _160, _170, _180 = prices = intvar(1, 4, shape=4)
lynda, pam, vicki, yvonne = masseuses = intvar(1, 4, shape=4)

# 2. Comparable values (helper dictionaries for comparisons)
prices_values = {_150: 150, _160: 160, _170: 170, _180: 180}  # in dollars

# 3. Constraints (all different per category and problem constraints)
m += AllDifferent(clients)
m += AllDifferent(prices)
m += AllDifferent(masseuses)

# Ginger was either the person who paid $160 or Vicki's client.
m += Xor([ginger == _160, ginger == vicki])

# Beulah paid 10 dollars more than Yvonne's client.
m += add_comparable_constraints(prices_values, lambda var1, var2: var1 == var2 + 10, var1=beulah, var2=yvonne)

# Hannah paid less than Debra.
m += add_comparable_constraints(prices_values, lambda var1, var2: var1 < var2, var1=hannah, var2=debra)

# Vicki's client paid more than Debra.
m += add_comparable_constraints(prices_values, lambda var1, var2: var1 > var2, var1=vicki, var2=debra)

# Debra paid less than Pam's client.
m += add_comparable_constraints(prices_values, lambda var1, var2: var1 < var2, var1=debra, var2=pam)

# The end. You can take it from here.
```