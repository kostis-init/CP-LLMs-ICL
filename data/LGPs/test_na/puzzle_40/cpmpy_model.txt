```python
# 0. Preliminaries
from cpmpy import *

def add_comparable_constraints(comparable_category_values, comparing_function, var1, var2):
    comparable_category_vars = list(comparable_category_values.keys())
    return [((e1 == var1) & (e2 == var2))
          .implies(comparing_function(comparable_category_values[e1], comparable_category_values[e2]))
          for e1 in comparable_category_vars for e2 in comparable_category_vars]

m = Model()

# 1. Variables (all variables that have the same integer value correspond to the same object)
danielson, estrada, ingram, nolan = customers = intvar(1, 4, shape=4)
october_5, october_6, october_7, october_8 = delivery_dates = intvar(1, 4, shape=4)
baseball_glove, bowling_pin, sports_car, turtle = cake_shapes = intvar(1, 4, shape=4)

# 2. Comparable values (helper dictionaries for comparisons)
delivery_dates_values = {october_5: 5, october_6: 6, october_7: 7, october_8: 8} # in October dates

# 3. Constraints (all different per category and problem constraints)
m += AllDifferent(customers)
m += AllDifferent(delivery_dates)
m += AllDifferent(cake_shapes)

# Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car.
m += add_comparable_constraints(delivery_dates_values, lambda var1, var2: var1 == var2 - 1, var1=danielson, var2=sports_car)

# The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake.
m += add_comparable_constraints(delivery_dates_values, lambda var1, var2: var1 == var2 - 2, var1=turtle, var2=ingram)

# The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake.
m += Xor([bowling_pin == october_5, bowling_pin == ingram])

# Mrs. Nolan's cake will be in the shape of a sports car.
m += nolan == sports_car

# The October 7 delivery will be in the shape of a bowling pin.
m += october_7 == bowling_pin

# The end. You can take it from here.
```