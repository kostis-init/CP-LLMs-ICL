{"doc_id": "-804075997", "document": "A hotel employs cleaners and receptionists. Cleaners earn $500 per week and receptionists earn $350 per week. The hotel requires a minimum of 100 workers of whom at least 20 must be receptionists. To keep the hotel clean and running smoothly, the number of receptionists should be at least a third of the number of cleaners. The hotel wants to keep the weekly wage bill below $30000. Formulate a LP to minimize the wage bill.", "order_mapping": {"cleaners": 0, "receptionists": 1, "Cleaners": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "wage bill", "terms": {"Cleaners": "500", "receptionists": "350"}}, "const_declarations": [{"type": "sum", "direction": "minimum", "limit": "100", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "receptionists", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "receptionists", "direction": "at least", "param": "third", "y_var": "cleaners", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "below", "limit": "30000", "terms": {"Cleaners": "500", "receptionists": "350"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [500.0, 350.0], "constraints": [[-1.0, -1.0, -100.0], [0.0, -1.0, -20.0], [0.3333333333333333, -1.0, 0.0], [500.0, 350.0, 30000.0]]}, "solution": null, "cpmpy_code": "from cpmpy import Model, intvar\n\n# Decision Variables\nCleaners = intvar(0, 999999999)  # number of cleaners\nReceptionists = intvar(0, 999999999)  # number of receptionists\n\n# Constraints\nm = Model()\n\n# The hotel requires a minimum of 100 workers:\nm += Cleaners + Receptionists >= 100\n# At least 20 must be receptionists:\nm += Receptionists >= 20\n# The number of receptionists should be at least a third of the number of cleaners:\nm += Receptionists >= (1/3) * Cleaners\n# The hotel wants to keep the weekly wage bill below $30000 (Cleaners earn $500 per week and receptionists earn $350 per week):\nm += 500 * Cleaners + 350 * Receptionists <= 30000\n\n# Objective\n# Minimize the total wage bill (Cleaners earn $500 per week and receptionists earn $350 per week):\nm.minimize(500 * Cleaners + 350 * Receptionists)", "pseudo_model": "Decision Variables:\n- Number of cleaners employed: Cleaners\n- Number of receptionists employed: Receptionists\n\nConstraints:\n- Total number of workers should be at least 100:\n  Cleaners + Receptionists >= 100\n- At least 20 workers must be receptionists:\n  Receptionists >= 20\n- The number of receptionists should be at least a third of the number of cleaners:\n  Receptionists >= 1/3 * Cleaners\n- Total wage bill should be below $30000 (Cleaners earn $500 per week and receptionists earn $350 per week):\n  500 * Cleaners + 350 * Receptionists <= 30000\n\nObjective: \n- Minimize the total wage bill (Cleaners earn $500 per week and receptionists earn $350 per week):\n  500 * Cleaners + 350 * Receptionists", "direct_solution": "The given problem is unsatisfiable, because at least 100 employees are needed, so the hotel will need to account for at least 100 * 350 (the lowest wage possible) dollars. This is equal to 35000 dollars which is above the budget limit already.\n\n### FINAL ANSWER: UNSATISFIABLE", "entities": [{"start": 16, "end": 24, "word": "cleaners", "entity_group": "VAR", "score": 0.9986799219758882}, {"start": 29, "end": 42, "word": "receptionists", "entity_group": "VAR", "score": 0.9988617051831198}, {"start": 45, "end": 53, "word": "Cleaners", "entity_group": "VAR", "score": 0.999690171036805}, {"start": 54, "end": 58, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9853591130909966}, {"start": 61, "end": 64, "word": "500", "entity_group": "PARAM", "score": 0.99970138224846}, {"start": 78, "end": 91, "word": "receptionists", "entity_group": "VAR", "score": 0.9998138318120751}, {"start": 92, "end": 96, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9654600401986982}, {"start": 99, "end": 102, "word": "350", "entity_group": "PARAM", "score": 0.9996313657056087}, {"start": 135, "end": 142, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9985354163146888}, {"start": 146, "end": 149, "word": "100", "entity_group": "LIMIT", "score": 0.9996864912111043}, {"start": 166, "end": 174, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985278983751713}, {"start": 175, "end": 177, "word": "20", "entity_group": "LIMIT", "score": 0.99960816623387}, {"start": 186, "end": 199, "word": "receptionists", "entity_group": "VAR", "score": 0.9998268421379964}, {"start": 263, "end": 276, "word": "receptionists", "entity_group": "VAR", "score": 0.9995470170779236}, {"start": 287, "end": 295, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9970857619899148}, {"start": 298, "end": 303, "word": "third", "entity_group": "PARAM", "score": 0.9969859299606754}, {"start": 321, "end": 329, "word": "cleaners", "entity_group": "VAR", "score": 0.9995703915829094}, {"start": 360, "end": 376, "word": "weekly wage bill", "entity_group": "OBJ_NAME", "score": 0.3010483269318996}, {"start": 377, "end": 382, "word": "below", "entity_group": "CONST_DIR", "score": 0.9844275447035292}, {"start": 385, "end": 390, "word": "30000", "entity_group": "LIMIT", "score": 0.9996847593578517}, {"start": 411, "end": 419, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987589269542354}, {"start": 420, "end": 433, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.6142171259011224}]}
{"doc_id": "1292442966", "document": "A retired professor wants to invest up to $50000 in the airline and railway industries. Each dollar invested in the airline industry yields a $0.30 profit and each dollar invested in the railway industry yields a $0.10 profit. A minimum of $10000 must be invested in the railway industry and at least 25% of all money invested must be in the airline industry. Formulate a LP that can be used to maximize the professor's profit.", "order_mapping": {"airline": 0, "railway industries": 1, "airline industry": 0, "railway industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"airline industry": "0.30", "railway industry": "0.10"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "50000", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10000", "var": "railway industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "25", "var": "airline industry", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-0.3, -0.1], "constraints": [[1.0, 1.0, 50000.0], [0.0, -1.0, -10000.0], [-0.75, 0.25, 0.0]]}, "solution": {"x": 40000, "y": 10000}, "cpmpy_code": "from cpmpy import Model, intvar\n\n# Decision Variables (one for each industry)\nAirline = intvar(0, 999999999)  # investment in the airline industry\nRailway = intvar(0, 999999999)  # investment in the railway industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $50000:\nm += Airline + Railway <= 50000\n# Minimum investment of $10000 in the railway industry:\nm += Railway >= 10000\n# At least 25% of all money invested must be in the airline industry:\nm += Airline >= 0.25 * (Airline + Railway)\n\n# Objective\n# Maximize profit ($0.30 profit per dollar invested in the airline industry, $0.10 profit per dollar invested in the railway industry):\nm.maximize(0.30 * Airline + 0.10 * Railway)", "pseudo_model": "Decision Variables:\n- Amount invested in the airline industry: Airline\n- Amount invested in the railway industry: Railway\n\nConstraints:\n- Total investment should not exceed 50000 dollars:\n  Airline + Railway <= 50000\n- Minimum investment of 10000 dollars in the railway industry:\n  Railway >= 10000\n- At least 25% of all money invested must be in the airline industry:\n  Airline >= 0.25 * (Airline + Railway)\n\nObjective:\n- Maximize profit ($0.30 profit per dollar invested in the airline industry, $0.10 profit per dollar invested in the railway industry):\n  0.30 * Airline + 0.10 * Railway", "direct_solution": "To maximize profits from investing in the airline and railway industries, we need to consider the constraints and profits from each investment.\n\nConstraints:\n1. Total investment (A + R) must not exceed $50,000.\n2. At least $10,000 must be invested in the railway industry (R >= 10,000).\n3. At least 25% of the total investment must be in the airline industry (A >= 0.25(A + R)).\n\nProfit from each dollar:\n- $0.30 from the airline industry.\n- $0.10 from the railway industry.\n\nGiven the higher profit from the airline industry, we aim to invest as much as possible there, while meeting all constraints.\n\nPlan:\n1. Start with the minimum for R at $10,000, to satisfy constraint 2.\n2. Allocate the remaining funds to A, ensuring it's at least 25% of the total investment to meet constraint 3.\n\nInvestment calculation:\n- With R = $10,000, we invest the remainder in A. Given the budget cap of $50,000, A could go up to $40,000 considering we've allocated $10,000 to railways already.\n\nConfirming the allocation meets all conditions:\n- Total investment = $10,000 (R) + $40,000 (A) = $50,000.\n- A = $40,000 is 80% of the total investment, satisfying the condition that A should be at least 25%.\n- R = $10,000 meets the minimum requirement for railway investment.\n\nMax profit calculation:\n- Profit = 0.3(A) + 0.1(R)\n- Profit = 0.3 * $40,000 + 0.1 * $10,000\n- Profit = $12,000 + $1,000 = $13,000\n\nTherefore, to maximize profit, the professor should invest $40,000 in the airline industry and $10,000 in the railway industry, resulting in a maximum profit of $13,000.\n\n### FINAL ANSWER: {\"airline\": 40000, \"railway\": 10000}", "entities": [{"start": 36, "end": 41, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9902402111706514}, {"start": 44, "end": 49, "word": "50000", "entity_group": "LIMIT", "score": 0.9995577168735041}, {"start": 57, "end": 64, "word": "airline", "entity_group": "VAR", "score": 0.9995661341980406}, {"start": 69, "end": 87, "word": "railway industries", "entity_group": "VAR", "score": 0.9998089424353076}, {"start": 118, "end": 134, "word": "airline industry", "entity_group": "VAR", "score": 0.9999836836353314}, {"start": 146, "end": 150, "word": "0.30", "entity_group": "PARAM", "score": 0.9959303662664033}, {"start": 151, "end": 157, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9963967546697222}, {"start": 190, "end": 206, "word": "railway industry", "entity_group": "VAR", "score": 0.9999494383613068}, {"start": 218, "end": 222, "word": "0.10", "entity_group": "PARAM", "score": 0.9990436413987523}, {"start": 223, "end": 229, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9988680385558959}, {"start": 234, "end": 241, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9971790945750996}, {"start": 247, "end": 252, "word": "10000", "entity_group": "LIMIT", "score": 0.9992626693182555}, {"start": 277, "end": 293, "word": "railway industry", "entity_group": "VAR", "score": 0.9998601391314909}, {"start": 298, "end": 306, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986668030367138}, {"start": 307, "end": 311, "word": "25 %", "entity_group": "LIMIT", "score": 0.7211058237945084}, {"start": 349, "end": 365, "word": "airline industry", "entity_group": "VAR", "score": 0.9999761715798245}, {"start": 403, "end": 411, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9960792996056441}, {"start": 429, "end": 435, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999609452149409}]}
{"doc_id": "46292831", "document": "You are playing a game where a short shot is worth 2 points and a long shot is worth 5 points. In total, you can take at most 14 shots. You must take at least 5 short shots and 2 long shots, but time restricts taking more than 8 of either type. How many of each shot must you take, assuming all your shots get points, to maximize your score? What is your maximum score?", "order_mapping": {"short shot": 0, "long shot": 1, "short shots": 0, "long shots": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "score", "terms": {"short shot": "2", "long shot": "5"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "14", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "short shots", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "long shots", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "8", "var": "short shots", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "8", "var": "long shots", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.0, -5.0], "constraints": [[1.0, 1.0, 14.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -2.0], [1.0, 0.0, 8.0], [0.0, 1.0, 8.0]]}, "solution": {"x": 6, "y": 8}, "cpmpy_code": "from cpmpy import Model, intvar\n\n# Decision Variables\nShortShots = intvar(0, 999999999)  # Number of short shots taken\nLongShots = intvar(0, 999999999)  # Number of long shots taken\n\n# Constraints\nm = Model()\n\n# At most 14 shots should be taken:\nm += ShortShots + LongShots <= 14\n# At least 5 short shots should be taken:\nm += ShortShots >= 5\n# At least 2 long shots should be taken:\nm += LongShots >= 2\n# At most 8 short shots should be taken:\nm += ShortShots <= 8\n# At most 8 long shots should be taken:\nm += LongShots <= 8\n\n# Objective\n# Maximize score (2 points for short shots, 5 points for long shots):\nm.maximize(2 * ShortShots + 5 * LongShots)", "pseudo_model": "Decision Variables:\n- Number of short shots taken: Short\n- Number of long shots taken: Long\n\nConstraints:\n- Total number of shots should not exceed 14:\n  Short + Long <= 14\n- At least 5 short shots should be taken:\n  Short >= 5\n- At least 2 long shots should be taken:\n  Long >= 2\n- At most 8 short shots should be taken:\n  Short <= 8\n- At most 8 long shots should be taken:\n  Long <= 8\n\nObjective:\n- Maximize score (2 points for short shots, 5 points for long shots):\n  2 * Short + 5 * Long", "direct_solution": "Maximizing the score in the game requires finding the optimal number of short shots (S) and long shots (L) within the constraints:\n\n1. Total shots (S + L) \u2264 14.\n2. S \u2265 5 (minimum 5 short shots).\n3. L \u2265 2 (minimum 2 long shots).\n4. S \u2264 8 (no more than 8 short shots).\n5. L \u2264 8 (no more than 8 long shots).\n\nGiven:\n- Short shots (S) are worth 2 points each.\n- Long shots (L) are worth 5 points each.\n\nTo maximize the score:\n- Aim to take as many long shots as possible because they contribute more to the total score.\n\nStep 1: Given the constraints, maximize long shots:\n- The maximum allowable long shots are 8 (L = 8), based on the constraints.\n\nStep 2: Determine the number of short shots:\n- With 8 long shots taken (L = 8), we have a balance for 6 more shots to reach the total of 14. This fits within the constraint for short shots, so S = 6.\n\nVerification:\n- Total shots: 6 (short) + 8 (long) = 14, which is within the maximum allowed.\n- Short shots: S = 6 is above the minimum required and does not exceed the maximum limit.\n- Long shots: L = 8 also meets the requirements.\n\nConclusion:\n- To maximize the score, taking 6 short shots and 8 long shots is optimal.\n\nMaximum Score Calculation: \n- Score = 2*S + 5*L = 2*6 + 5*8 = 12 + 40 = 52 points.\n\nTherefore, to get the maximum score, the player should take 6 short shots and 8 long shots.\n\n### FINAL ANSWER: {\"short shots\": 6, \"long shots\": 8}", "entities": [{"start": 31, "end": 41, "word": "short shot", "entity_group": "VAR", "score": 0.9996932665776833}, {"start": 51, "end": 52, "word": "2", "entity_group": "PARAM", "score": 0.9997081026875398}, {"start": 53, "end": 59, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9772412904186255}, {"start": 66, "end": 75, "word": "long shot", "entity_group": "VAR", "score": 0.9998703088135148}, {"start": 85, "end": 86, "word": "5", "entity_group": "PARAM", "score": 0.9995590671892455}, {"start": 87, "end": 93, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9763195772411267}, {"start": 120, "end": 127, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988275762589949}, {"start": 128, "end": 130, "word": "14", "entity_group": "LIMIT", "score": 0.9997268690283705}, {"start": 153, "end": 161, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983894966345526}, {"start": 162, "end": 163, "word": "5", "entity_group": "LIMIT", "score": 0.999560074041804}, {"start": 164, "end": 175, "word": "short shots", "entity_group": "VAR", "score": 0.9998188317645035}, {"start": 180, "end": 181, "word": "2", "entity_group": "LIMIT", "score": 0.9997148425705695}, {"start": 182, "end": 192, "word": "long shots", "entity_group": "VAR", "score": 0.9999152058078185}, {"start": 221, "end": 230, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9960263235925875}, {"start": 231, "end": 232, "word": "8", "entity_group": "LIMIT", "score": 0.9974588038215327}, {"start": 328, "end": 336, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989974092932207}, {"start": 342, "end": 347, "word": "score", "entity_group": "OBJ_NAME", "score": 0.9990442346002414}]}
{"doc_id": "-1087235958", "document": "A hot dog store sells two products: its regular hot-dog, and a premium hot-dog with more toppings. The store makes x1 regular hot-dogs a day at a profit of $3 each and x2 premium hot-dogs a day at a profit of $5 each. (x1 and x2 are unknowns and they both must be greater than or equal to 0). Currently, the demand is limited to at most 100 regular hot-dogs per day and at most 250 premium hot-dogs per day. Also, the store can make a maximum of 300 hot-dogs of either type per day. How many of each hot-dog should be made to maximize profit?", "order_mapping": {"regular hot-dog": 0, "premium hot-dog": 1, "regular hot-dogs": 0, "premium hot-dogs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular hot-dogs": "3", "premium hot-dogs": "5"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "regular hot-dogs", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "250", "var": "premium hot-dogs", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-3.0, -5.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 250.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 50, "y": 250}, "cpmpy_code": "from cpmpy import Model, intvar\n\n# Decision Variables\nRegularHotDogs = intvar(0, 999999999)  # Number of regular hot-dogs made per day\nPremiumHotDogs = intvar(0, 999999999)  # Number of premium hot-dogs made per day\n\n# Constraints\nm = Model()\n\n# Total number of regular and premium hot-dogs made should not exceed 300 per day:\nm += RegularHotDogs + PremiumHotDogs <= 300\n# Number of regular hot-dogs made should be at most 100 per day:\nm += RegularHotDogs <= 100\n# Number of premium hot-dogs made should be at most 250 per day:\nm += PremiumHotDogs <= 250\n\n# Objective\n# Maximize profit (3 dollars per regular hot-dog, 5 dollars per premium hot-dog):\nm.maximize(3 * RegularHotDogs + 5 * PremiumHotDogs)", "pseudo_model": "Decision Variables:\n- Number of regular hot-dogs made per day: RegularHotDogs\n- Number of premium hot-dogs made per day: PremiumHotDogs\n\nConstraints:\n- Total number of regular and premium hot-dogs made should not exceed 300 per day:\n  RegularHotDogs + PremiumHotDogs <= 300\n- At most 100 regular hot-dogs per day:\n  RegularHotDogs <= 100\n- At most 250 premium hot-dogs per day:\n  PremiumHotDogs <= 250\n\nObjective:\n- Maximize profit (3 dollars per regular hot-dog, 5 dollars per premium hot-dog):\n  3 * RegularHotDogs + 5 * PremiumHotDogs", "direct_solution": "To maximize profit for the hot dog store, we need to consider the profit per hot dog and the constraints on how many of each type of hot dog can be made per day.\n\nProfit for each type:\n- Regular hot dog (x1) profit: $3\n- Premium hot dog (x2) profit: $5\n\nConstraints:\n1. x1 <= 100 (cannot make more than 100 regular hot dogs per day)\n2. x2 <= 250 (cannot make more than 250 premium hot dogs per day)\n3. x1 + x2 <= 300 (overall, cannot make more than 300 hot dogs per day)\n4. x1 >= 0 and x2 >= 0 (cannot make negative numbers of hot dogs)\n\nTo maximize profit, we aim to sell more of the item that generates a higher profit, which is the premium hot dog at $5 profit per unit. Therefore, we should prioritize producing premium hot dogs up to their demand limit or the store's production capacity, followed by producing regular hot dogs with any remaining capacity.\n\nFirst, prioritize premium hot dogs: \n- Produce x2 = 250 premium hot dogs (maximizing the number within its demand limit).\n\nThen, consider the total limit constraint of 300 hot dogs per day:\n- Having produced 250 premium hot dogs, we have capacity for 50 more hot dogs of any type. Since premium hot dogs are already at their limit of 250, we produce regular hot dogs with the remaining capacity.\n\nThus, produce x1 = 50 regular hot dogs, which does not exceed their demand limit of 100.\n\nBy doing this, the store maximizes its profit while adhering to the constraints:\n\nMaximum profit calculation:\n- Profit from regular hot dogs = 50 * $3 = $150\n- Profit from premium hot dogs = 250 * $5 = $1250\n- Total profit = $150 + $1250 = $1400\n\nTherefore, to maximize profit, the store should make 50 regular hot dogs and 250 premium hot dogs per day.\n\n### FINAL ANSWER: {\"regular hot dogs\": 50, \"premium hot dogs\": 250}", "entities": [{"start": 41, "end": 58, "word": "regular hot - dog", "entity_group": "VAR", "score": 0.9981743717886826}, {"start": 67, "end": 84, "word": "premium hot - dog", "entity_group": "VAR", "score": 0.9875368564146159}, {"start": 125, "end": 143, "word": "regular hot - dogs", "entity_group": "VAR", "score": 0.9965958906207398}, {"start": 155, "end": 161, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992261185579826}, {"start": 167, "end": 168, "word": "3", "entity_group": "PARAM", "score": 0.9993600524321363}, {"start": 181, "end": 199, "word": "premium hot - dogs", "entity_group": "VAR", "score": 0.9979621441500768}, {"start": 211, "end": 217, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9986945716223878}, {"start": 223, "end": 224, "word": "5", "entity_group": "PARAM", "score": 0.9990207176428318}, {"start": 347, "end": 354, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989202750768348}, {"start": 355, "end": 358, "word": "100", "entity_group": "LIMIT", "score": 0.9996319206220932}, {"start": 359, "end": 377, "word": "regular hot - dogs", "entity_group": "VAR", "score": 0.9981321287430223}, {"start": 390, "end": 397, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988869180158552}, {"start": 398, "end": 401, "word": "250", "entity_group": "LIMIT", "score": 0.9996338341106665}, {"start": 402, "end": 420, "word": "premium hot - dogs", "entity_group": "VAR", "score": 0.9971843568973253}, {"start": 459, "end": 466, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9978128268363936}, {"start": 470, "end": 473, "word": "300", "entity_group": "LIMIT", "score": 0.9992072776305131}, {"start": 555, "end": 563, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985377919008193}, {"start": 564, "end": 570, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996738742003188}]}
{"doc_id": "-530221061", "document": "A hedge fund is attempting to determine where its assets should be invested during the current year. At present, $3,200,000 is available for investment in stocks, options, security swaps, and futures. The annual rate of return on each type of investment is known to be: stocks, 11%; options, 30%; security swaps, 5%; futures, 15%. To ensure that the hedge fund\u2019s portfolio is not too risky, the hedge fund\u2019s investment manager has placed the following three restrictions on the hedge fund\u2019s portfolio: a The amount invested in futures cannot exceed the amount invested in stocks. b At most 35% of the total amount invested may be in futures. c The amount invested in options cannot exceed the amount invested in security swaps.  The hedge fund\u2019s objective is to maximize the annual return on its investment portfolio. Formulate an LP that will enable the hedge fund to meet this goal.", "order_mapping": {"stocks": 0, "options": 1, "security swaps": 2, "futures": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"stocks": "11%", "options": "30%", "security swaps": "5%", "futures": "15%"}}, "const_declarations": [{"type": "xy", "x_var": "futures", "direction": "cannot exceed", "y_var": "stocks", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "At most", "limit": "35%", "var": "futures", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "options", "direction": "cannot exceed", "y_var": "security swaps", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "available", "limit": "3,200,000", "operator": "LESS_OR_EQUAL"}], "explanation": "The hedge fund's LP model can be formulated as follows:\n\nVariables:\n- x: Dollars invested in stocks\n- y: Dollars invested in options\n- z: Dollars invested in security swaps\n- w: Dollars invested in futures\n\nObjective:\n- Maximize the annual return on the investment portfolio. The objective function is: Maximize 0.11x + 0.30y + 0.05z + 0.15w\n\nConstraints:\n1. The total amount available for investment is $3,200,000: x + y + z + w <= 3200000\n2. The amount invested in futures cannot exceed the amount invested in stocks: w <= x\n3. At most 35% of the total amount invested may be in futures: w <= 0.35(x + y + z + w)\n4. The amount invested in options cannot exceed the amount invested in security swaps: y <= z\n\nFormulation:\nMaximize: 0.11x + 0.30y + 0.05z + 0.15w\nConstraints:\nx + y + z + w <= 3200000\nw <= x\nw <= 0.35(x + y + z + w)\ny <= z", "canonical": {"objective": [-0.11, -0.3, -0.05, -0.15], "constraints": [[1.0, 1.0, 1.0, 1.0, 3200000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [-0.35, -0.35, -0.35, 0.65, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 0, "y": 1600000, "z": 1600000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in stocks: Stocks\n- Amount invested in options: Options\n- Amount invested in security swaps: SecuritySwaps\n- Amount invested in futures: Futures\n\nConstraints:\n- Total amount invested should not exceed $3,200,000:\n  Stocks + Options + SecuritySwaps + Futures <= 3200000\n- The amount invested in futures cannot exceed the amount invested in stocks:\n  Futures <= Stocks\n- At most 35% of the total amount invested may be in futures:\n  Futures <= 0.35 * (Stocks + Options + SecuritySwaps + Futures)\n- The amount invested in options cannot exceed the amount invested in security swaps:\n  Options <= SecuritySwaps\n\nObjective:\n- Maximize the annual return on investment (11% for stocks, 30% for options, 5% for security swaps, 15% for futures):\n  0.11 * Stocks + 0.30 * Options + 0.05 * SecuritySwaps + 0.15 * Futures\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStocks = intvar(0, 999999999)  # Amount invested in stocks\nOptions = intvar(0, 999999999)  # Amount invested in options\nSecuritySwaps = intvar(0, 999999999)  # Amount invested in security swaps\nFutures = intvar(0, 999999999)  # Amount invested in futures\n\n# Constraints\nm = Model()\n\n# Total amount invested should not exceed $3,200,000:\nm += Stocks + Options + SecuritySwaps + Futures <= 3200000\n# The amount invested in futures cannot exceed the amount invested in stocks:\nm += Futures <= Stocks\n# At most 35% of the total amount invested may be in futures:\nm += Futures <= 0.35 * (Stocks + Options + SecuritySwaps + Futures)\n# The amount invested in options cannot exceed the amount invested in security swaps:\nm += Options <= SecuritySwaps\n\n# Objective\n# Maximize the annual return on investment:\nm.maximize(0.11 * Stocks + 0.30 * Options + 0.05 * SecuritySwaps + 0.15 * Futures)\n", "entities": [{"start": 117, "end": 126, "word": "3,200,000", "entity_group": "LIMIT", "score": 0.9996750028477414}, {"start": 130, "end": 139, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988954264153554}, {"start": 158, "end": 164, "word": "stocks", "entity_group": "VAR", "score": 0.9996919029072431}, {"start": 167, "end": 174, "word": "options", "entity_group": "VAR", "score": 0.9996643009797989}, {"start": 177, "end": 191, "word": "security swaps", "entity_group": "VAR", "score": 0.9999770723484755}, {"start": 198, "end": 205, "word": "futures", "entity_group": "VAR", "score": 0.9996456525287722}, {"start": 227, "end": 233, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9840254836595067}, {"start": 278, "end": 284, "word": "stocks", "entity_group": "VAR", "score": 0.9994580394774447}, {"start": 287, "end": 291, "word": "11 %", "entity_group": "PARAM", "score": 0.994958236805741}, {"start": 294, "end": 301, "word": "options", "entity_group": "VAR", "score": 0.9994070991760653}, {"start": 304, "end": 308, "word": "30 %", "entity_group": "PARAM", "score": 0.9904065832316455}, {"start": 311, "end": 325, "word": "security swaps", "entity_group": "VAR", "score": 0.9999387090916662}, {"start": 328, "end": 331, "word": "5 %", "entity_group": "PARAM", "score": 0.9929761247117355}, {"start": 334, "end": 341, "word": "futures", "entity_group": "VAR", "score": 0.9981099004583747}, {"start": 344, "end": 348, "word": "15 %", "entity_group": "PARAM", "score": 0.9808757323120384}, {"start": 552, "end": 559, "word": "futures", "entity_group": "VAR", "score": 0.9993911578287413}, {"start": 560, "end": 574, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9815022009361414}, {"start": 598, "end": 604, "word": "stocks", "entity_group": "VAR", "score": 0.9996464543308173}, {"start": 609, "end": 616, "word": "At most", "entity_group": "CONST_DIR", "score": 0.9979969352563235}, {"start": 617, "end": 621, "word": "35 %", "entity_group": "LIMIT", "score": 0.9736760770515166}, {"start": 661, "end": 668, "word": "futures", "entity_group": "VAR", "score": 0.9996435744894919}, {"start": 696, "end": 703, "word": "options", "entity_group": "VAR", "score": 0.9993757706180969}, {"start": 704, "end": 718, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9809160628282125}, {"start": 742, "end": 756, "word": "security swaps", "entity_group": "VAR", "score": 0.9999689075102104}, {"start": 793, "end": 801, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9678591664687901}, {"start": 813, "end": 819, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9931194167563582}]}
{"doc_id": "-648989842", "document": "A jacket company makes winter jackets and rain jackets. Due to factory limitations, at most 60 winter jackets and 70 rain jackets can be made daily. Projections indicate a demand of at least 30 winter jackets and 35 rain jackets daily. To satisfy a contract with a retail store, a total of at least 80 jackets must be made daily. Because the factory wants to get rid of material, each winter jacket sold results in a $5 loss. However, each rain jacket sold results in a $50 profit. How many of each type of jacket should be made daily to maximize profit?", "order_mapping": {"winter jackets": 0, "rain jackets": 1, "winter jacket": 0, "rain jacket": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"winter jacket": "5", "rain jacket": "50"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "60", "var": "winter jackets", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "rain jackets", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "winter jackets", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "35", "var": "rain jackets", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "80", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of winter jackets made daily\n- y: Number of rain jackets made daily\n\nObjective:\n- The company aims to maximize its profit. Each winter jacket sold results in a $5 loss, and each rain jacket sold results in a $50 profit. Therefore, the objective function is: Maximize 50y - 5x\n\nConstraints:\n- At most 60 winter jackets and 70 rain jackets can be made daily, leading to the constraints: x <= 60 and y <= 70.\n- There is a demand for at least 30 winter jackets and 35 rain jackets daily, resulting in the constraints: x >= 30 and y >= 35.\n- A total of at least 80 jackets must be made daily, leading to the constraint: x + y >= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50y - 5x\nConstraints:\nx <= 60\ny <= 70\nx >= 30\ny >= 35\nx + y >= 80", "canonical": {"objective": [5.0, -50.0], "constraints": [[1.0, 0.0, 60.0], [0.0, 1.0, 70.0], [-1.0, 0.0, -30.0], [0.0, -1.0, -35.0], [-1.0, -1.0, -80.0]]}, "solution": {"x": 30, "y": 70}, "pseudo_model": "\nDecision Variables:\n- Number of winter jackets made daily: WinterJackets\n- Number of rain jackets made daily: RainJackets\n\nConstraints:\n- At most 60 winter jackets can be made daily:\n  WinterJackets <= 60\n- At most 70 rain jackets can be made daily:\n  RainJackets <= 70\n- Demand of at least 30 winter jackets daily:\n  WinterJackets >= 30\n- Demand of at least 35 rain jackets daily:\n  RainJackets >= 35\n- A total of at least 80 jackets must be made daily:\n  WinterJackets + RainJackets >= 80\n\nObjective:\n- Maximize profit (Winter jackets result in a $5 loss, hence -5 for winter jackets and $50 profit for rain jackets):\n  -5 * WinterJackets + 50 * RainJackets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWinterJackets = intvar(0, 999999999)  # Number of winter jackets made daily\nRainJackets = intvar(0, 999999999)  # Number of rain jackets made daily\n\n# Constraints\nm = Model()\n\n# At most 60 winter jackets can be made daily:\nm += WinterJackets <= 60\n# At most 70 rain jackets can be made daily:\nm += RainJackets <= 70\n# Demand of at least 30 winter jackets daily:\nm += WinterJackets >= 30\n# Demand of at least 35 rain jackets daily:\nm += RainJackets >= 35\n# A total of at least 80 jackets must be made daily:\nm += WinterJackets + RainJackets >= 80\n\n# Objective\n# Maximize profit (Note: Winter jackets result in a $5 loss, hence -5 for winter jackets and $50 profit for rain jackets):\nm.maximize(-5 * WinterJackets + 50 * RainJackets)\n", "entities": [{"start": 23, "end": 37, "word": "winter jackets", "entity_group": "VAR", "score": 0.9999215273508792}, {"start": 42, "end": 54, "word": "rain jackets", "entity_group": "VAR", "score": 0.9999878382833133}, {"start": 86, "end": 93, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985870462268939}, {"start": 94, "end": 96, "word": "60", "entity_group": "LIMIT", "score": 0.9994867566969872}, {"start": 97, "end": 111, "word": "winter jackets", "entity_group": "VAR", "score": 0.999963820222441}, {"start": 116, "end": 118, "word": "70", "entity_group": "LIMIT", "score": 0.999592148949731}, {"start": 119, "end": 131, "word": "rain jackets", "entity_group": "VAR", "score": 0.9999346450360445}, {"start": 185, "end": 193, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986081259653694}, {"start": 194, "end": 196, "word": "30", "entity_group": "LIMIT", "score": 0.9994420384611681}, {"start": 197, "end": 211, "word": "winter jackets", "entity_group": "VAR", "score": 0.9999696971736484}, {"start": 216, "end": 218, "word": "35", "entity_group": "LIMIT", "score": 0.9992349367607442}, {"start": 219, "end": 231, "word": "rain jackets", "entity_group": "VAR", "score": 0.9999504007913516}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998624230502082}, {"start": 304, "end": 306, "word": "80", "entity_group": "LIMIT", "score": 0.9997254161060987}, {"start": 392, "end": 405, "word": "winter jacket", "entity_group": "VAR", "score": 0.9999779955465953}, {"start": 426, "end": 427, "word": "5", "entity_group": "PARAM", "score": 0.9995263012450877}, {"start": 428, "end": 432, "word": "loss", "entity_group": "OBJ_NAME", "score": 0.9780846131244332}, {"start": 450, "end": 461, "word": "rain jacket", "entity_group": "VAR", "score": 0.9999856390419057}, {"start": 482, "end": 484, "word": "50", "entity_group": "PARAM", "score": 0.9989468511447197}, {"start": 485, "end": 491, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998748212675869}, {"start": 550, "end": 558, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996274983878918}, {"start": 559, "end": 565, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999061523269036}]}
{"doc_id": "39272600", "document": "A butcher shop has 1000 grams of ground meat to make both burgers and sausages. Each burger requires 20 grams of ground meat while each sausage requires 10 grams of ground meat. Past sales have indicated that at least three times the number of sausages are needed than burgers. There also needs to be at least 10 burgers made. Each burger is sold for a profit of $5 and each sausage is sold for a profit of $3. How many of each item should be made in order to maximize profit?", "order_mapping": {"burgers": 0, "sausages": 1, "burger": 0, "sausage": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"burger": "5", "sausage": "3"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"burger": "20", "sausage": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "sausages", "direction": "at least", "param": "three", "y_var": "burgers", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "burgers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of burgers\n- y: Number of sausages\n\nObjective:\n- The butcher shop aims to maximize its profit. Each burger is sold for a profit of $5 and each sausage is sold for a profit of $3. Therefore, the objective function is: Maximize 5x + 3y\n\nConstraints:\n- The butcher shop has 1000 grams of ground meat available, so the constraint is: 20x + 10y <= 1000.\n- Past sales have indicated that at least three times the number of sausages are needed than burgers, leading to the constraint: y >= 3x.\n- There needs to be at least 10 burgers made, resulting in the constraint: x >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3y\nConstraints:\n20x + 10y <= 1000\ny >= 3x\nx >= 10", "canonical": {"objective": [-5.0, -3.0], "constraints": [[20.0, 10.0, 1000.0], [3.0, -1.0, 0.0], [-1.0, 0.0, -10.0]]}, "solution": {"x": 10, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of burgers made: Burgers\n- Number of sausages made: Sausages\n\nConstraints:\n- Total ground meat used should not exceed 1000 grams (20 grams per burger, 10 grams per sausage):\n  20 * Burgers + 10 * Sausages <= 1000\n- At least three times the number of sausages are needed than burgers:\n  Sausages >= 3 * Burgers\n- There needs to be at least 10 burgers made:\n  Burgers >= 10\n\nObjective:\n- Maximize profit (5 dollars per burger, 3 dollars per sausage):\n  5 * Burgers + 3 * Sausages\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurgers = intvar(0, 999999999)  # Number of burgers made\nSausages = intvar(0, 999999999)  # Number of sausages made\n\n# Constraints\nm = Model()\n\n# Total ground meat used should not exceed 1000 grams (20g per burger, 10g per sausage):\nm += 20 * Burgers + 10 * Sausages <= 1000\n# At least three times the number of sausages are needed than burgers:\nm += Sausages >= 3 * Burgers\n# There needs to be at least 10 burgers made:\nm += Burgers >= 10\n\n# Objective\n# Maximize profit (5 dollars per burger, 3 dollars per sausage):\nm.maximize(5 * Burgers + 3 * Sausages)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.9984180646975452}, {"start": 19, "end": 23, "word": "1000", "entity_group": "LIMIT", "score": 0.9986531396081935}, {"start": 58, "end": 65, "word": "burgers", "entity_group": "VAR", "score": 0.9996731850099541}, {"start": 70, "end": 78, "word": "sausages", "entity_group": "VAR", "score": 0.9998172330429415}, {"start": 86, "end": 92, "word": "burger", "entity_group": "VAR", "score": 0.9996193614111892}, {"start": 102, "end": 104, "word": "20", "entity_group": "PARAM", "score": 0.9995702053302421}, {"start": 137, "end": 144, "word": "sausage", "entity_group": "VAR", "score": 0.9996420923211456}, {"start": 154, "end": 156, "word": "10", "entity_group": "PARAM", "score": 0.9996136750804455}, {"start": 211, "end": 219, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987698817272047}, {"start": 220, "end": 225, "word": "three", "entity_group": "PARAM", "score": 0.9959377424394716}, {"start": 246, "end": 254, "word": "sausages", "entity_group": "VAR", "score": 0.9995527392642493}, {"start": 271, "end": 278, "word": "burgers", "entity_group": "VAR", "score": 0.9996911617586827}, {"start": 304, "end": 312, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981418561476771}, {"start": 313, "end": 315, "word": "10", "entity_group": "LIMIT", "score": 0.9996877259449344}, {"start": 316, "end": 323, "word": "burgers", "entity_group": "VAR", "score": 0.9995422220246876}, {"start": 336, "end": 342, "word": "burger", "entity_group": "VAR", "score": 0.9996913332894665}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998360454163303}, {"start": 369, "end": 370, "word": "5", "entity_group": "PARAM", "score": 0.999658576105577}, {"start": 380, "end": 387, "word": "sausage", "entity_group": "VAR", "score": 0.9998227980441855}, {"start": 402, "end": 408, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995966975382384}, {"start": 414, "end": 415, "word": "3", "entity_group": "PARAM", "score": 0.9994370263068536}, {"start": 467, "end": 475, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852783764065}, {"start": 476, "end": 482, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818178479}]}
{"doc_id": "-813109867", "document": "A cruise ship can carry at most 500 passengers. They offer luxury tickets as well as regular tickets. The cruise ship reserves at least 100 luxury tickets. However, at least 2 times as many passengers prefer to buy regular tickets than the luxury tickets. A profit of $500 is made per luxury ticket and a profit of $300 is made per regular ticket. How many of each type of ticket should be sold in order to maximize profit? What is that profit?", "order_mapping": {"luxury tickets": 0, "regular tickets": 1, "luxury ticket": 0, "regular ticket": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"luxury ticket": "500", "regular ticket": "300"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "luxury tickets", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "2", "y_var": "luxury tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of luxury tickets\n- y: Number of regular tickets\n\nObjective:\n- The cruise ship aims to maximize its profit. A profit of $500 is made per luxury ticket and a profit of $300 is made per regular ticket. Therefore, the objective function is: Maximize 500x + 300y\n\nConstraints:\n- The cruise ship can carry at most 500 passengers, so the constraint is: x + y <= 500.\n- At least 100 luxury tickets need to be reserved, leading to the constraint: x >= 100.\n- At least 2 times as many passengers prefer to buy regular tickets than the luxury tickets, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 300y\nConstraints:\nx + y <= 500\nx >= 100\ny >= 2x", "canonical": {"objective": [-500.0, -300.0], "constraints": [[1.0, 1.0, 500.0], [-1.0, 0.0, -100.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 166, "y": 334}, "pseudo_model": "\nDecision Variables:\n- Number of luxury tickets sold: LuxuryTickets\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of passengers (luxury and regular tickets) should not exceed 500:\n  LuxuryTickets + RegularTickets <= 500\n- At least 100 luxury tickets should be reserved:\n  LuxuryTickets >= 100\n- At least 2 times as many regular tickets as luxury tickets should be sold:\n  RegularTickets >= 2 * LuxuryTickets\n\nObjective:\n- Maximize profit ($500 profit per luxury ticket, $300 profit per regular ticket):\n  500 * LuxuryTickets + 300 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLuxuryTickets = intvar(0, 999999999)  # Number of luxury tickets sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# The cruise ship can carry at most 500 passengers:\nm += LuxuryTickets + RegularTickets <= 500\n# The cruise ship reserves at least 100 luxury tickets:\nm += LuxuryTickets >= 100\n# At least 2 times as many passengers prefer to buy regular tickets than the luxury tickets:\nm += RegularTickets >= 2 * LuxuryTickets\n\n# Objective\n# Maximize profit ($500 per luxury ticket, $300 per regular ticket):\nm.maximize(500 * LuxuryTickets + 300 * RegularTickets)\n", "entities": [{"start": 24, "end": 31, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988719274999011}, {"start": 32, "end": 35, "word": "500", "entity_group": "LIMIT", "score": 0.9997093821683463}, {"start": 60, "end": 74, "word": "luxury tickets", "entity_group": "VAR", "score": 0.9999093509194773}, {"start": 86, "end": 101, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999452639128537}, {"start": 129, "end": 137, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987284284443811}, {"start": 138, "end": 141, "word": "100", "entity_group": "LIMIT", "score": 0.9993158952249008}, {"start": 142, "end": 156, "word": "luxury tickets", "entity_group": "VAR", "score": 0.9999698955136932}, {"start": 169, "end": 177, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973639752071294}, {"start": 178, "end": 179, "word": "2", "entity_group": "PARAM", "score": 0.998325468041365}, {"start": 219, "end": 234, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999773807459154}, {"start": 244, "end": 258, "word": "luxury tickets", "entity_group": "VAR", "score": 0.9999781184191078}, {"start": 263, "end": 269, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999776684547488}, {"start": 275, "end": 278, "word": "500", "entity_group": "PARAM", "score": 0.99958947770704}, {"start": 291, "end": 304, "word": "luxury ticket", "entity_group": "VAR", "score": 0.9999657349188952}, {"start": 311, "end": 317, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999708874040228}, {"start": 323, "end": 326, "word": "300", "entity_group": "PARAM", "score": 0.9996160950878382}, {"start": 339, "end": 353, "word": "regular ticket", "entity_group": "VAR", "score": 0.9999615302043096}, {"start": 415, "end": 423, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9978759054098442}, {"start": 424, "end": 430, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99981409039745}]}
{"doc_id": "-172104674", "document": "There is only 2000 grams of lettuce that is needed to make both the caesar and house salad. The profit per caesar salad is $5 and the profit per house salad is $8. The caesar salad contains 20 grams of lettuce and the house salad contains 30 grams of lettuce. The house salad is much more popular and at least three times the amount of house salads needs to be made than the caesar salads. However, a minimum of 8 caesar salads needs to be made. How many of each salad should me made in order to maximize profit?", "order_mapping": {"caesar": 0, "house salad": 1, "caesar salad": 0, "house salads": 1, "caesar salads": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"caesar salad": "5", "house salad": "8"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "2000", "terms": {"caesar salad": "20", "house salad": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "house salads", "direction": "at least", "param": "three", "y_var": "caesar salads", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "8", "var": "caesar salads", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of caesar salads\n- y: Number of house salads\n\nObjective:\n- The goal is to maximize the profit. The profit per caesar salad is $5 and the profit per house salad is $8. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- There is only 2000 grams of lettuce available, so the constraint is: 20x + 30y <= 2000.\n- The house salad needs to be made at least three times the amount of caesar salads, leading to the constraint: y >= 3x.\n- A minimum of 8 caesar salads needs to be made, resulting in the constraint: x >= 8.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\n20x + 30y <= 2000\ny >= 3x\nx >= 8", "canonical": {"objective": [-5.0, -8.0], "constraints": [[20.0, 30.0, 2000.0], [3.0, -1.0, 0.0], [-1.0, 0.0, -8.0]]}, "solution": {"x": 10, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of caesar salads made: CaesarSalads\n- Number of house salads made: HouseSalads\n\nConstraints:\n- Total lettuce used should not exceed 2000 grams (20g per caesar salad, 30g per house salad):\n  20 * CaesarSalads + 30 * HouseSalads <= 2000\n- At least three times the amount of house salads needs to be made than the caesar salads:\n  HouseSalads >= 3 * CaesarSalads\n- A minimum of 8 caesar salads needs to be made:\n  CaesarSalads >= 8\n\nObjective:\n- Maximize profit (5 dollars per caesar salad, 8 dollars per house salad):\n  5 * CaesarSalads + 8 * HouseSalads\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCaesarSalads = intvar(0, 999999999)  # Number of caesar salads made\nHouseSalads = intvar(0, 999999999)  # Number of house salads made\n\n# Constraints\nm = Model()\n\n# Total lettuce used should not exceed 2000 grams (20g per caesar salad, 30g per house salad):\nm += 20 * CaesarSalads + 30 * HouseSalads <= 2000\n# At least three times the amount of house salads needs to be made than the caesar salads:\nm += HouseSalads >= 3 * CaesarSalads\n# A minimum of 8 caesar salads needs to be made:\nm += CaesarSalads >= 8\n\n# Objective\n# Maximize profit (5 dollars per caesar salad, 8 dollars per house salad):\nm.maximize(5 * CaesarSalads + 8 * HouseSalads)\n", "entities": [{"start": 9, "end": 13, "word": "only", "entity_group": "CONST_DIR", "score": 0.9971816735241902}, {"start": 14, "end": 18, "word": "2000", "entity_group": "LIMIT", "score": 0.998829994803259}, {"start": 68, "end": 74, "word": "caesar", "entity_group": "VAR", "score": 0.9991614398057742}, {"start": 79, "end": 90, "word": "house salad", "entity_group": "VAR", "score": 0.9999101993625552}, {"start": 97, "end": 103, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999539485866747}, {"start": 108, "end": 120, "word": "caesar salad", "entity_group": "VAR", "score": 0.9999727825903324}, {"start": 126, "end": 127, "word": "5", "entity_group": "PARAM", "score": 0.9996402382225789}, {"start": 136, "end": 142, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999365812663392}, {"start": 147, "end": 158, "word": "house salad", "entity_group": "VAR", "score": 0.9997565728554045}, {"start": 164, "end": 165, "word": "8", "entity_group": "PARAM", "score": 0.9997352761754416}, {"start": 172, "end": 184, "word": "caesar salad", "entity_group": "VAR", "score": 0.999982419003862}, {"start": 194, "end": 196, "word": "20", "entity_group": "PARAM", "score": 0.9995941454138071}, {"start": 222, "end": 233, "word": "house salad", "entity_group": "VAR", "score": 0.9999357441976234}, {"start": 243, "end": 245, "word": "30", "entity_group": "PARAM", "score": 0.9992891709836743}, {"start": 269, "end": 280, "word": "house salad", "entity_group": "VAR", "score": 0.9999191821430684}, {"start": 306, "end": 314, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985008630012462}, {"start": 315, "end": 326, "word": "three times", "entity_group": "PARAM", "score": 0.6303325474569612}, {"start": 341, "end": 353, "word": "house salads", "entity_group": "VAR", "score": 0.9999330360267994}, {"start": 380, "end": 393, "word": "caesar salads", "entity_group": "VAR", "score": 0.9999671798469011}, {"start": 408, "end": 415, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.995840735148989}, {"start": 419, "end": 420, "word": "8", "entity_group": "LIMIT", "score": 0.9992098045141111}, {"start": 421, "end": 434, "word": "caesar salads", "entity_group": "VAR", "score": 0.9999686693792202}, {"start": 504, "end": 512, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961839145440745}, {"start": 513, "end": 519, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996485453519418}]}
{"doc_id": "-1943415390", "document": "George has $1000000 to invest in the oil and gas, tech, mining, and retail industries. George is a smart investor and he knows the amount invested in the retail industry cannot exceed the amount invested in the oil and gas industry. Also the amount invested in the tech industry cannot exceed the amount invested in the mining industry. Finally at most 28% of the total amount invested can be in the retail industry. The return on investment in each of the industries is as follows: oil and gas, 6%; tech, 8%; mining, 9%; retail, 11%. George wants to maximize his return. Formulate a LP that will allow him to achieve this goal.", "order_mapping": {"oil and gas": 0, "tech": 1, "mining": 2, "retail industries": 3, "retail industry": 3, "tech industry": 1, "mining industry": 2, "retail": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"oil and gas": "6%", "tech": "8%", "mining": "9%", "retail": "11%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "1000000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "28%", "var": "retail industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "retail industry", "direction": "cannot exceed", "y_var": "oil and gas", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "tech industry", "direction": "cannot exceed", "y_var": "mining industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in oil and gas industry\n- y: Dollars invested in tech industry\n- z: Dollars invested in mining industry\n- w: Dollars invested in retail industry\n\nObjective:\n- George wants to maximize his return. The return on investment in each of the industries is as follows: oil and gas, 6%; tech, 8%; mining, 9%; retail, 11%. Therefore, the objective function is: Maximize 0.06x + 0.08y + 0.09z + 0.11w\n\nConstraints:\n- George has $1,000,000 to invest, so the constraint is: x + y + z + w <= 1000000.\n- At most 28% of the total amount invested can be in the retail industry, leading to the constraint: w <= 0.28(x + y + z + w).\n- The amount invested in the retail industry cannot exceed the amount invested in the oil and gas industry, leading to the constraint: w <= x.\n- The amount invested in the tech industry cannot exceed the amount invested in the mining industry, leading to the constraint: y <= z.\n\nFormulation:\nMaximize: 0.06x + 0.08y + 0.09z + 0.11w\nConstraints:\nx + y + z + w <= 1000000\nw <= 0.28(x + y + z + w)\nw <= x\ny <= z", "canonical": {"objective": [-0.06, -0.08, -0.09, -0.11], "constraints": [[1.0, 1.0, 1.0, 1.0, 1000000.0], [-0.28, -0.28, -0.28, 0.72, 0.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 0, "y": 0, "z": 1000000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the oil and gas industry: OilAndGas\n- Amount invested in the tech industry: Tech\n- Amount invested in the mining industry: Mining\n- Amount invested in the retail industry: Retail\n\nConstraints:\n- Total amount invested should not exceed $1000000:\n  OilAndGas + Tech + Mining + Retail <= 1000000\n- The amount invested in the retail industry cannot exceed the amount invested in the oil and gas industry:\n  Retail <= OilAndGas\n- The amount invested in the tech industry cannot exceed the amount invested in the mining industry:\n  Tech <= Mining\n- At most 28% of the total amount invested can be in the retail industry:\n  Retail <= 0.28 * (OilAndGas + Tech + Mining + Retail)\n\nObjective:\n- Maximize return (6% for oil and gas, 8% for tech, 9% for mining, 11% for retail):\n  0.06 * OilAndGas + 0.08 * Tech + 0.09 * Mining + 0.11 * Retail\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOilAndGas = intvar(0, 999999999)  # Amount invested in the oil and gas industry\nTech = intvar(0, 999999999)  # Amount invested in the tech industry\nMining = intvar(0, 999999999)  # Amount invested in the mining industry\nRetail = intvar(0, 999999999)  # Amount invested in the retail industry\n\n# Constraints\nm = Model()\n\n# Total amount invested should not exceed $1000000:\nm += OilAndGas + Tech + Mining + Retail <= 1000000\n# The amount invested in the retail industry cannot exceed the amount invested in the oil and gas industry:\nm += Retail <= OilAndGas\n# The amount invested in the tech industry cannot exceed the amount invested in the mining industry:\nm += Tech <= Mining\n# At most 28% of the total amount invested can be in the retail industry:\nm += Retail <= 0.28 * (OilAndGas + Tech + Mining + Retail)\n\n# Objective\n# Maximize return (6% for oil and gas, 8% for tech, 9% for mining, 11% for retail):\nm.maximize(0.06 * OilAndGas + 0.08 * Tech + 0.09 * Mining + 0.11 * Retail)\n", "entities": [{"start": 7, "end": 10, "word": "has", "entity_group": "CONST_DIR", "score": 0.9931272267601552}, {"start": 13, "end": 20, "word": "1000000", "entity_group": "LIMIT", "score": 0.9995404065006979}, {"start": 38, "end": 49, "word": "oil and gas", "entity_group": "VAR", "score": 0.9990997420316047}, {"start": 52, "end": 56, "word": "tech", "entity_group": "VAR", "score": 0.9998045527830747}, {"start": 59, "end": 65, "word": "mining", "entity_group": "VAR", "score": 0.9997461512147212}, {"start": 72, "end": 89, "word": "retail industries", "entity_group": "VAR", "score": 0.9999883002137588}, {"start": 159, "end": 174, "word": "retail industry", "entity_group": "VAR", "score": 0.9999693623168867}, {"start": 175, "end": 189, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9874437493145927}, {"start": 217, "end": 228, "word": "oil and gas", "entity_group": "VAR", "score": 0.998846544580635}, {"start": 272, "end": 285, "word": "tech industry", "entity_group": "VAR", "score": 0.9999107479141418}, {"start": 286, "end": 300, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9864033430076531}, {"start": 328, "end": 343, "word": "mining industry", "entity_group": "VAR", "score": 0.9999215245679978}, {"start": 354, "end": 361, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990686670350866}, {"start": 362, "end": 366, "word": "28 %", "entity_group": "LIMIT", "score": 0.9701938480111734}, {"start": 410, "end": 425, "word": "retail industry", "entity_group": "VAR", "score": 0.9999474370480183}, {"start": 432, "end": 438, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9962183960849174}, {"start": 495, "end": 506, "word": "oil and gas", "entity_group": "VAR", "score": 0.9943358584408254}, {"start": 509, "end": 512, "word": "6 %", "entity_group": "PARAM", "score": 0.9836978600889925}, {"start": 515, "end": 519, "word": "tech", "entity_group": "VAR", "score": 0.9990251978005315}, {"start": 522, "end": 525, "word": "8 %", "entity_group": "PARAM", "score": 0.9871713563413047}, {"start": 528, "end": 534, "word": "mining", "entity_group": "VAR", "score": 0.9986030081369497}, {"start": 537, "end": 540, "word": "9 %", "entity_group": "PARAM", "score": 0.9871742721695621}, {"start": 543, "end": 549, "word": "retail", "entity_group": "VAR", "score": 0.9971288975563385}, {"start": 552, "end": 556, "word": "11 %", "entity_group": "PARAM", "score": 0.9885484871868067}, {"start": 575, "end": 583, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995908850840594}, {"start": 588, "end": 594, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9987754945322147}]}
{"doc_id": "1641244902", "document": "A bubble tea store sells peach and mango flavored drinks. The store can make at most 150 drinks total. To stay in business, they must sell at least 60 mango drinks and 40 peach drinks. Due to fruit shortages however, they can make at most 120 mango drinks and at most 70 peach drinks. The profit per mango drink is $2 and the profit per peach drink is $3. How many of each drink should they sell to maximize profit?", "order_mapping": {"peach": 0, "mango": 1, "mango drinks": 1, "peach drinks": 0, "mango drink": 1, "peach drink": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mango drink": "2", "peach drink": "3"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "mango drinks", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "120", "var": "mango drinks", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "peach drinks", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "peach drinks", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of peach drinks\n- y: Number of mango drinks\n\nObjective:\n- The store aims to maximize its profit. The profit per peach drink is $3 and the profit per mango drink is $2. Therefore, the objective function is: Maximize 3x + 2y\n\nConstraints:\n- The store can make at most 150 drinks total, leading to the constraint: x + y <= 150.\n- At least 60 mango drinks and 40 peach drinks must be sold, resulting in the constraints: y >= 60 and x >= 40.\n- Due to fruit shortages, the store can make at most 120 mango drinks and at most 70 peach drinks, leading to the constraints: y <= 120 and x <= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 2y\nConstraints:\nx + y <= 150\ny >= 60\nx >= 40\ny <= 120\nx <= 70", "canonical": {"objective": [-3.0, -2.0], "constraints": [[1.0, 1.0, 150.0], [0.0, -1.0, -60.0], [-1.0, 0.0, -40.0], [0.0, 1.0, 120.0], [1.0, 0.0, 70.0]]}, "solution": {"x": 70, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of mango drinks sold: MangoDrinks\n- Number of peach drinks sold: PeachDrinks\n\nConstraints:\n- Total number of drinks made should not exceed 150:\n  MangoDrinks + PeachDrinks <= 150\n- At least 60 mango drinks must be sold:\n  MangoDrinks >= 60\n- At least 40 peach drinks must be sold:\n  PeachDrinks >= 40\n- At most 120 mango drinks can be made:\n  MangoDrinks <= 120\n- At most 70 peach drinks can be made:\n  PeachDrinks <= 70\n\nObjective:\n- Maximize profit (2 dollars per mango drink, 3 dollars per peach drink):\n  2 * MangoDrinks + 3 * PeachDrinks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMangoDrinks = intvar(0, 999999999)  # Number of mango drinks sold\nPeachDrinks = intvar(0, 999999999)  # Number of peach drinks sold\n\n# Constraints\nm = Model()\n\n# The store can make at most 150 drinks total:\nm += MangoDrinks + PeachDrinks <= 150\n# They must sell at least 60 mango drinks:\nm += MangoDrinks >= 60\n# They must sell at least 40 peach drinks:\nm += PeachDrinks >= 40\n# They can make at most 120 mango drinks:\nm += MangoDrinks <= 120\n# They can make at most 70 peach drinks:\nm += PeachDrinks <= 70\n\n# Objective\n# Maximize profit (2 dollars per mango drink, 3 dollars per peach drink):\nm.maximize(2 * MangoDrinks + 3 * PeachDrinks)\n", "entities": [{"start": 25, "end": 30, "word": "peach", "entity_group": "VAR", "score": 0.9993458194813468}, {"start": 35, "end": 40, "word": "mango", "entity_group": "VAR", "score": 0.9989597587554384}, {"start": 78, "end": 85, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987913677722998}, {"start": 86, "end": 89, "word": "150", "entity_group": "LIMIT", "score": 0.9996223363368301}, {"start": 142, "end": 150, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988571148992558}, {"start": 151, "end": 153, "word": "60", "entity_group": "LIMIT", "score": 0.9995328111836301}, {"start": 154, "end": 166, "word": "mango drinks", "entity_group": "VAR", "score": 0.9999589456906194}, {"start": 171, "end": 173, "word": "40", "entity_group": "LIMIT", "score": 0.9994443525560601}, {"start": 174, "end": 186, "word": "peach drinks", "entity_group": "VAR", "score": 0.9999565194961231}, {"start": 236, "end": 243, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985679585442025}, {"start": 244, "end": 247, "word": "120", "entity_group": "LIMIT", "score": 0.9995370898072565}, {"start": 248, "end": 260, "word": "mango drinks", "entity_group": "VAR", "score": 0.999953474265487}, {"start": 265, "end": 272, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988568148724941}, {"start": 273, "end": 275, "word": "70", "entity_group": "LIMIT", "score": 0.9992848302379023}, {"start": 276, "end": 288, "word": "peach drinks", "entity_group": "VAR", "score": 0.9999512169045779}, {"start": 295, "end": 301, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999621630290076}, {"start": 306, "end": 317, "word": "mango drink", "entity_group": "VAR", "score": 0.9999539888404811}, {"start": 323, "end": 324, "word": "2", "entity_group": "PARAM", "score": 0.9996126240675324}, {"start": 333, "end": 339, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999938205495578}, {"start": 344, "end": 355, "word": "peach drink", "entity_group": "VAR", "score": 0.9999105339355407}, {"start": 361, "end": 362, "word": "3", "entity_group": "PARAM", "score": 0.9996638541146025}, {"start": 408, "end": 416, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995899089792601}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269817457224}]}
{"doc_id": "1838049901", "document": "A luggage company makes carry-on and large suitcases in their factory. A different team produces each kind of suitcase and each team has a different maximum production rate: 15 carry-on suitcases per day and 20 large suitcases per day respectively. Both teams require use of a sewing machine and this machine can process at most 25 suitcases per day of either type. While the carry-on suitcases generate a profit of $100 per suitcase, the large suitcases generate a profit of $150 per suitcase. Assuming the company can sell all the suitcases they make, how many of each type of suitcase should they make to maximize profit?", "order_mapping": {"carry-on": 0, "large suitcases": 1, "carry-on suitcases": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carry-on suitcases": "100", "large suitcases": "150"}}, "const_declarations": [{"type": "upperbound", "direction": "maximum", "limit": "15", "var": "carry-on suitcases", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "maximum", "limit": "20", "var": "large suitcases", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "25", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of carry-on suitcases produced per day\n- y: Number of large suitcases produced per day\n\nObjective:\n- The company aims to maximize its profit. The profit generated by each carry-on suitcase is $100, and the profit generated by each large suitcase is $150. Therefore, the objective function is: Maximize 100x + 150y\n\nConstraints:\n- The maximum production rate for carry-on suitcases is 15 per day, leading to the constraint: x <= 15.\n- The maximum production rate for large suitcases is 20 per day, leading to the constraint: y <= 20.\n- The sewing machine can process at most 25 suitcases per day of either type, leading to the constraint: x + y <= 25.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 150y\nConstraints:\nx <= 15\ny <= 20\nx + y <= 25", "canonical": {"objective": [-100.0, -150.0], "constraints": [[1.0, 0.0, 15.0], [0.0, 1.0, 20.0], [1.0, 1.0, 25.0]]}, "solution": {"x": 5, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of carry-on suitcases made per day: CarryOnSuitcases\n- Number of large suitcases made per day: LargeSuitcases\n\nConstraints:\n- Maximum production rate for carry-on suitcases is 15 per day:\n  CarryOnSuitcases <= 15\n- Maximum production rate for large suitcases is 20 per day:\n  LargeSuitcases <= 20\n- The sewing machine can process at most 25 suitcases per day of either type:\n  CarryOnSuitcases + LargeSuitcases <= 25\n\nObjective:\n- Maximize profit ($100 per carry-on suitcase, $150 per large suitcase):\n  100 * CarryOnSuitcases + 150 * LargeSuitcases\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarryOnSuitcases = intvar(0, 999999999)  # Number of carry-on suitcases made per day\nLargeSuitcases = intvar(0, 999999999)  # Number of large suitcases made per day\n\n# Constraints\nm = Model()\n\n# Maximum production rate for carry-on suitcases is 15 per day:\nm += CarryOnSuitcases <= 15\n# Maximum production rate for large suitcases is 20 per day:\nm += LargeSuitcases <= 20\n# The sewing machine can process at most 25 suitcases per day of either type:\nm += CarryOnSuitcases + LargeSuitcases <= 25\n\n# Objective\n# Maximize profit ($100 per carry-on suitcase, $150 per large suitcase):\nm.maximize(100 * CarryOnSuitcases + 150 * LargeSuitcases)\n", "entities": [{"start": 24, "end": 34, "word": "carry - on", "entity_group": "VAR", "score": 0.9977141767914052}, {"start": 39, "end": 54, "word": "large suitcases", "entity_group": "VAR", "score": 0.9999802585491236}, {"start": 152, "end": 159, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9989838827478666}, {"start": 178, "end": 180, "word": "15", "entity_group": "LIMIT", "score": 0.99969438180852}, {"start": 181, "end": 201, "word": "carry - on suitcases", "entity_group": "VAR", "score": 0.9989998937968428}, {"start": 214, "end": 216, "word": "20", "entity_group": "LIMIT", "score": 0.9996808928013379}, {"start": 217, "end": 232, "word": "large suitcases", "entity_group": "VAR", "score": 0.9998154253497201}, {"start": 328, "end": 335, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991175481905563}, {"start": 336, "end": 338, "word": "25", "entity_group": "LIMIT", "score": 0.9997001085575661}, {"start": 384, "end": 404, "word": "carry - on suitcases", "entity_group": "VAR", "score": 0.9985973280838051}, {"start": 416, "end": 422, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999391707039509}, {"start": 428, "end": 431, "word": "100", "entity_group": "PARAM", "score": 0.9992115724171513}, {"start": 451, "end": 466, "word": "large suitcases", "entity_group": "VAR", "score": 0.9999195971971533}, {"start": 478, "end": 484, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999242617571781}, {"start": 490, "end": 493, "word": "150", "entity_group": "PARAM", "score": 0.9988042186417133}, {"start": 623, "end": 631, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994486420044434}, {"start": 632, "end": 638, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999936906031927}]}
{"doc_id": "556594261", "document": "A banana farmer has to transport his bananas using cars and motor bikes. Each car can take 100 bananas and each bike can take 30 bananas. The cost of running each car is $10 per trip and the cost of running each bike is $6 per trip. The farmer wants to spend at most $200 on transporting his bananas. Due to traffic laws, the number of cars must be less than the number of bikes. Formulate a LP to maximize the number of bananas that can be transported.", "order_mapping": {"cars": 0, "motor bikes": 1, "car": 0, "bike": 1, "bikes": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "bananas", "terms": {"car": "100", "bike": "30"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "200", "terms": {"car": "10", "bike": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "cars", "direction": "less than", "y_var": "bikes", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cars\n- y: Number of motor bikes\n\nObjective:\n- The farmer aims to maximize the number of bananas that can be transported. Each car can take 100 bananas and each bike can take 30 bananas. Therefore, the objective function is: Maximize 100x + 30y\n\nConstraints:\n- The farmer wants to spend at most $200 on transporting his bananas. The cost of running each car is $10 per trip and the cost of running each bike is $6 per trip. This leads to the constraint: 10x + 6y <= 200.\n- Due to traffic laws, the number of cars must be less than the number of bikes, resulting in the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 30y\nConstraints:\n10x + 6y <= 200\nx <= y", "canonical": {"objective": [-100.0, -30.0], "constraints": [[10.0, 6.0, 200.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 12, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of cars used: Cars\n- Number of bikes used: Bikes\n\nConstraints:\n- Total cost of running cars and bikes should not exceed $200 (cost per car is $10, cost per bike is $6):\n  10 * Cars + 6 * Bikes <= 200\n- The number of cars must be less than the number of bikes:\n  Cars < Bikes\n\nObjective:\n- Maximize the number of bananas transported (100 bananas per car, 30 bananas per bike):\n  100 * Cars + 30 * Bikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCars = intvar(0, 999999999)  # Number of cars used\nBikes = intvar(0, 999999999)  # Number of bikes used\n\n# Constraints\nm = Model()\n\n# The cost of running cars and bikes should not exceed $200:\nm += 10 * Cars + 6 * Bikes <= 200\n# The number of cars must be less than the number of bikes:\nm += Cars < Bikes\n\n# Objective\n# Maximize the number of bananas transported (100 bananas per car, 30 bananas per bike):\nm.maximize(100 * Cars + 30 * Bikes)\n", "entities": [{"start": 51, "end": 55, "word": "cars", "entity_group": "VAR", "score": 0.9996614678969694}, {"start": 60, "end": 71, "word": "motor bikes", "entity_group": "VAR", "score": 0.9999842340779915}, {"start": 79, "end": 82, "word": "car", "entity_group": "VAR", "score": 0.9988829442358611}, {"start": 92, "end": 95, "word": "100", "entity_group": "PARAM", "score": 0.9996822277031762}, {"start": 96, "end": 103, "word": "bananas", "entity_group": "OBJ_NAME", "score": 0.9970079329254705}, {"start": 113, "end": 117, "word": "bike", "entity_group": "VAR", "score": 0.9996072804049587}, {"start": 127, "end": 129, "word": "30", "entity_group": "PARAM", "score": 0.999626332783776}, {"start": 130, "end": 137, "word": "bananas", "entity_group": "OBJ_NAME", "score": 0.9976255060772977}, {"start": 165, "end": 168, "word": "car", "entity_group": "VAR", "score": 0.9988153839296444}, {"start": 174, "end": 176, "word": "10", "entity_group": "PARAM", "score": 0.9995704327526505}, {"start": 215, "end": 219, "word": "bike", "entity_group": "VAR", "score": 0.9995638369393022}, {"start": 225, "end": 226, "word": "6", "entity_group": "PARAM", "score": 0.9995788821781136}, {"start": 264, "end": 271, "word": "at most", "entity_group": "CONST_DIR", "score": 0.996348109651398}, {"start": 274, "end": 277, "word": "200", "entity_group": "LIMIT", "score": 0.9988112975316519}, {"start": 344, "end": 348, "word": "cars", "entity_group": "VAR", "score": 0.9985883408085436}, {"start": 357, "end": 366, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9923501081040621}, {"start": 381, "end": 386, "word": "bikes", "entity_group": "VAR", "score": 0.9997682289469162}, {"start": 407, "end": 415, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203905548766}, {"start": 430, "end": 437, "word": "bananas", "entity_group": "OBJ_NAME", "score": 0.9974323860967436}]}
{"doc_id": "-424578953", "document": "The mayor has a budget of up to $3500 to invest in city infrastructure. He can invest his money on roads and housing. Each dollar invested in housing yields a $0.95 profit.  Each dollar invested on roads yields a $0.32 profit. No less than $750 must be in housing and no less than 24% of all money invested must be in roads. Formulate an LP that can be used to maximize total profit earned from his investment.", "order_mapping": {"roads": 0, "housing": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"housing": "0.95", "roads": "0.32"}}, "const_declarations": [{"type": "sum", "direction": "budget", "limit": "3500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "No less than", "limit": "750", "var": "housing", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "no less than", "limit": "24%", "var": "roads", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in roads\n- y: Dollars invested in housing\n\nObjective:\n- The mayor aims to maximize the total profit earned from his investment. Each dollar invested in housing yields a $0.95 profit, and each dollar invested in roads yields a $0.32 profit. Therefore, the objective function is: Maximize 0.95y + 0.32x\n\nConstraints:\n- The mayor's budget is up to $3500, so the constraint is: x + y <= 3500.\n- No less than $750 must be invested in housing, leading to the constraint: y >= 750.\n- At least 24% of all money invested must be in roads, leading to the constraint: x >= 0.24(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.95y + 0.32x\nConstraints:\nx + y <= 3500\ny >= 750\nx >= 0.24(x + y)", "canonical": {"objective": [-0.32, -0.95], "constraints": [[1.0, 1.0, 3500.0], [0.0, -1.0, -750.0], [-0.76, 0.24, 0.0]]}, "solution": {"x": 840, "y": 2660}, "pseudo_model": "\nDecision Variables:\n- Money invested in housing: Housing\n- Money invested in roads: Roads\n\nConstraints:\n- Total investment should not exceed 3500 dollars:\n  Housing + Roads <= 3500\n- At least 750 dollars must be invested in housing:\n  Housing >= 750\n- At least 24% of all money invested must be in roads:\n  Roads >= 0.24 * (Housing + Roads)\n\nObjective:\n- Maximize total profit (0.95 profit per dollar invested in housing, 0.32 profit per dollar invested in roads):\n  0.95 * Housing + 0.32 * Roads\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHousing = intvar(0, 999999999)  # Money invested in housing\nRoads = intvar(0, 999999999)  # Money invested in roads\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $3500:\nm += Housing + Roads <= 3500\n# No less than $750 must be in housing:\nm += Housing >= 750\n# No less than 24% of all money invested must be in roads:\nm += Roads >= 0.24 * (Housing + Roads)\n\n# Objective\n# Maximize total profit (0.95 profit per dollar invested in housing, 0.32 profit per dollar invested in roads):\nm.maximize(0.95 * Housing + 0.32 * Roads)\n", "entities": [{"start": 16, "end": 22, "word": "budget", "entity_group": "CONST_DIR", "score": 0.996328655319678}, {"start": 34, "end": 38, "word": "3500", "entity_group": "LIMIT", "score": 0.9985370301210151}, {"start": 101, "end": 106, "word": "roads", "entity_group": "VAR", "score": 0.9996338728411529}, {"start": 111, "end": 118, "word": "housing", "entity_group": "VAR", "score": 0.9996584661595584}, {"start": 145, "end": 152, "word": "housing", "entity_group": "VAR", "score": 0.9997000275975906}, {"start": 164, "end": 168, "word": "0.95", "entity_group": "PARAM", "score": 0.9982076328424969}, {"start": 169, "end": 175, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995219207997375}, {"start": 202, "end": 207, "word": "roads", "entity_group": "VAR", "score": 0.9997182207083308}, {"start": 219, "end": 223, "word": "0.32", "entity_group": "PARAM", "score": 0.9985638430176339}, {"start": 224, "end": 230, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995875046632441}, {"start": 233, "end": 245, "word": "No less than", "entity_group": "CONST_DIR", "score": 0.9810282871245435}, {"start": 248, "end": 251, "word": "750", "entity_group": "LIMIT", "score": 0.999532222922424}, {"start": 263, "end": 270, "word": "housing", "entity_group": "VAR", "score": 0.999617524279411}, {"start": 275, "end": 287, "word": "no less than", "entity_group": "CONST_DIR", "score": 0.9945695683998066}, {"start": 288, "end": 292, "word": "24 %", "entity_group": "LIMIT", "score": 0.9315528928232905}, {"start": 326, "end": 331, "word": "roads", "entity_group": "VAR", "score": 0.9998048524239593}, {"start": 370, "end": 378, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9915047735681372}, {"start": 385, "end": 391, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999406881204722}]}
{"doc_id": "168484030", "document": "A restaurant employs waiters earning $147 per week and cooks earning $290 per week. It is required to keep the weekly wage bill below $17,600. The restaurant requires a minimum of 50 staff, of whom at least 12 must be cooks. Union regulations require that the number of cooks should be at least one third the number of waiters. Formulate a LP to minimize the wage bill.", "order_mapping": {"waiters": 0, "cooks": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "wage bill", "terms": {"waiters": "147", "cooks": "290"}}, "const_declarations": [{"type": "linear", "direction": "below", "limit": "17,600", "terms": {"waiters": "147", "cooks": "290"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "cooks", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "cooks", "direction": "at least", "param": "one third", "y_var": "waiters", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of waiters\n- y: Number of cooks\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both waiters and cooks. Given that waiters earn $147 per week and cooks earn $290 per week, the objective function is: Minimize 147x + 290y\n\nConstraints:\n- The total wage bill needs to be kept below $17,600, leading to the constraint: 147x + 290y <= 17600.\n- The restaurant must have a minimum of 50 staff, so the constraint is: x + y >= 50.\n- At least 12 of the staff must be cooks, leading to the constraint: y >= 12.\n- Union regulations require that the number of cooks should be at least one third the number of waiters, resulting in the constraint: y >= 1/3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 147x + 290y\nConstraints:\n147x + 290y <= 17600\nx + y >= 50\ny >= 12\ny >= 1/3x", "canonical": {"objective": [147.0, 290.0], "constraints": [[147.0, 290.0, 17600.0], [-1.0, -1.0, -50.0], [0.0, -1.0, -12.0], [0.3333333333333333, -1.0, 0.0]]}, "solution": {"x": 37, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of waiters employed: Waiters\n- Number of cooks employed: Cooks\n\nConstraints:\n- Weekly wage bill should be below $17,600:\n  147 * Waiters + 290 * Cooks <= 17600\n- Minimum of 50 staff required:\n  Waiters + Cooks >= 50\n- At least 12 cooks required:\n  Cooks >= 12\n- Number of cooks should be at least one third the number of waiters (Union regulations):\n  Cooks >= 1/3 * Waiters\n\nObjective:\n- Minimize the wage bill (Waiters earn $147 per week and cooks earn $290 per week):\n  147 * Waiters + 290 * Cooks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWaiters = intvar(0, 999999999)  # Number of waiters employed\nCooks = intvar(0, 999999999)  # Number of cooks employed\n\n# Constraints\nm = Model()\n\n# The weekly wage bill should be kept below $17,600:\nm += 147 * Waiters + 290 * Cooks <= 17600\n# The restaurant requires a minimum of 50 staff:\nm += Waiters + Cooks >= 50\n# At least 12 staff must be cooks:\nm += Cooks >= 12\n# Union regulations require that the number of cooks should be at least one third the number of waiters:\nm += Cooks >= (1/3) * Waiters\n\n# Objective\n# Minimize the wage bill (Waiters earn $147 per week and cooks earn $290 per week):\nm.minimize(147 * Waiters + 290 * Cooks)\n", "entities": [{"start": 21, "end": 28, "word": "waiters", "entity_group": "VAR", "score": 0.9984566800179179}, {"start": 29, "end": 36, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.983708858260816}, {"start": 39, "end": 42, "word": "147", "entity_group": "PARAM", "score": 0.9996302800103924}, {"start": 56, "end": 61, "word": "cooks", "entity_group": "VAR", "score": 0.9997544559389575}, {"start": 62, "end": 69, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9689633650061059}, {"start": 72, "end": 75, "word": "290", "entity_group": "PARAM", "score": 0.9993994069702214}, {"start": 121, "end": 130, "word": "wage bill", "entity_group": "OBJ_NAME", "score": 0.6576995784260815}, {"start": 131, "end": 136, "word": "below", "entity_group": "CONST_DIR", "score": 0.9849627432821079}, {"start": 139, "end": 145, "word": "17,600", "entity_group": "LIMIT", "score": 0.9997067117441653}, {"start": 174, "end": 181, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9939776374276201}, {"start": 185, "end": 187, "word": "50", "entity_group": "LIMIT", "score": 0.9994950035014135}, {"start": 204, "end": 212, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985142372462505}, {"start": 213, "end": 215, "word": "12", "entity_group": "LIMIT", "score": 0.9997070224073739}, {"start": 224, "end": 229, "word": "cooks", "entity_group": "VAR", "score": 0.9997189051889999}, {"start": 277, "end": 282, "word": "cooks", "entity_group": "VAR", "score": 0.9990099962126192}, {"start": 293, "end": 301, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997712114926336}, {"start": 302, "end": 311, "word": "one third", "entity_group": "PARAM", "score": 0.9093812174230983}, {"start": 326, "end": 333, "word": "waiters", "entity_group": "VAR", "score": 0.9997274900779037}, {"start": 354, "end": 362, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998673534144425}, {"start": 363, "end": 376, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.6142008559448296}]}
{"doc_id": "-1660993798", "document": "Frank has up to $5000 to invest in the cigarette and tobacco industries. After talking to his friends, he has decided that at least 40% of all the money invested must be in the cigarette industry and that at least $1000 must be invested in the tobacco industry. Each dollar invested in the cigarette industry yields a $0.30 profit while each dollar invested in the tobacco industry yields a $0.45 profit. Formulate a LP to maximize Frank's investment.", "order_mapping": {"cigarette": 0, "tobacco industries": 1, "cigarette industry": 0, "tobacco industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "investment", "terms": {"cigarette industry": "0.30", "tobacco industry": "0.45"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "5000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40", "var": "cigarette industry", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "1000", "var": "tobacco industry", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the cigarette industry\n- y: Dollars invested in the tobacco industry\n\nObjective:\n- Frank wants to maximize his investment. Each dollar invested in the cigarette industry yields a $0.30 profit, and each dollar invested in the tobacco industry yields a $0.45 profit. Therefore, the objective function is: Maximize 0.30x + 0.45y\n\nConstraints:\n- Frank can invest up to $5000 in total, so the constraint is: x + y <= 5000.\n- At least 40% of all the money invested must be in the cigarette industry, leading to the constraint: x >= 0.40(x + y).\n- At least $1000 must be invested in the tobacco industry, leading to the constraint: y >= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.30x + 0.45y\nConstraints:\nx + y <= 5000\nx >= 0.40(x + y)\ny >= 1000", "canonical": {"objective": [-0.3, -0.45], "constraints": [[1.0, 1.0, 5000.0], [-0.6, 0.4, 0.0], [0.0, -1.0, -1000.0]]}, "solution": {"x": 2000, "y": 3000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the cigarette industry: Cigarette\n- Amount invested in the tobacco industry: Tobacco\n\nConstraints:\n- Total investment should not exceed 5000 dollars:\n  Cigarette + Tobacco <= 5000\n- At least 40% of all money invested must be in the cigarette industry:\n  Cigarette >= 0.40 * (Cigarette + Tobacco)\n- At least 1000 dollars must be invested in the tobacco industry:\n  Tobacco >= 1000\n\nObjective:\n- Maximize profit (0.30 profit per dollar invested in the cigarette industry, 0.45 profit per dollar invested in the tobacco industry):\n  0.30 * Cigarette + 0.45 * Tobacco\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCigarette = intvar(0, 999999999)  # Amount invested in the cigarette industry\nTobacco = intvar(0, 999999999)  # Amount invested in the tobacco industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $5000:\nm += Cigarette + Tobacco <= 5000\n# At least 40% of all the money invested must be in the cigarette industry:\nm += Cigarette >= 0.40 * (Cigarette + Tobacco)\n# At least $1000 must be invested in the tobacco industry:\nm += Tobacco >= 1000\n\n# Objective\n# Maximize profit (0.30 profit per dollar invested in the cigarette industry, 0.45 profit per dollar invested in the tobacco industry):\nm.maximize(0.30 * Cigarette + 0.45 * Tobacco)\n", "entities": [{"start": 10, "end": 15, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9816778073955367}, {"start": 18, "end": 22, "word": "5000", "entity_group": "LIMIT", "score": 0.9989914377135699}, {"start": 40, "end": 49, "word": "cigarette", "entity_group": "VAR", "score": 0.9992919834793064}, {"start": 54, "end": 72, "word": "tobacco industries", "entity_group": "VAR", "score": 0.9998406167376368}, {"start": 126, "end": 134, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989653094376725}, {"start": 135, "end": 139, "word": "40 %", "entity_group": "LIMIT", "score": 0.7239111511367633}, {"start": 181, "end": 199, "word": "cigarette industry", "entity_group": "VAR", "score": 0.9998793117732987}, {"start": 209, "end": 217, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9952468586371743}, {"start": 220, "end": 224, "word": "1000", "entity_group": "LIMIT", "score": 0.9992034496346753}, {"start": 249, "end": 265, "word": "tobacco industry", "entity_group": "VAR", "score": 0.9998713843022624}, {"start": 296, "end": 314, "word": "cigarette industry", "entity_group": "VAR", "score": 0.9999422230225317}, {"start": 326, "end": 330, "word": "0.30", "entity_group": "PARAM", "score": 0.9969295318842939}, {"start": 331, "end": 337, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9959669751213956}, {"start": 372, "end": 388, "word": "tobacco industry", "entity_group": "VAR", "score": 0.9999456161087809}, {"start": 400, "end": 404, "word": "0.45", "entity_group": "PARAM", "score": 0.9986629352593482}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9979577530139403}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992864156072486}, {"start": 450, "end": 460, "word": "investment", "entity_group": "OBJ_NAME", "score": 0.9982575458784448}]}
{"doc_id": "424152750", "document": "A long haul bus carries at most 100 passengers. A profit of $50 is made for each premium class seat with extra leg room and a profit of $30 is made on each regular class seat. The bus reserves at least 30 seats for the premium class seats. However, at least twice as many passengers prefer to save money and travel by regular class than by premium class. How many seats of each type should be sold in order to maximize profit?", "order_mapping": {"premium class": 0, "regular class": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium class": "50", "regular class": "30"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "premium class", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular class", "direction": "at least", "param": "twice", "y_var": "premium class", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium class seats sold\n- y: Number of regular class seats sold\n\nObjective:\n- The bus company aims to maximize its profit. A profit of $50 is made for each premium class seat and a profit of $30 is made on each regular class seat. Therefore, the objective function is: Maximize 50x + 30y\n\nConstraints:\n- The bus can carry at most 100 passengers, so the constraint is: x + y <= 100.\n- At least 30 seats are reserved for the premium class, leading to the constraint: x >= 30.\n- At least twice as many passengers prefer to travel by regular class than by premium class, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 30y\nConstraints:\nx + y <= 100\nx >= 30\ny >= 2x", "canonical": {"objective": [-50.0, -30.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -30.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 33, "y": 67}, "pseudo_model": "\nDecision Variables:\n- Number of premium class seats sold: PremiumClass\n- Number of regular class seats sold: RegularClass\n\nConstraints:\n- Total number of seats sold (premium + regular) should not exceed 100:\n  PremiumClass + RegularClass <= 100\n- At least 30 seats are reserved for the premium class:\n  PremiumClass >= 30\n- At least twice as many passengers prefer regular class than premium class:\n  RegularClass >= 2 * PremiumClass\n\nObjective:\n- Maximize profit ($50 profit per premium class seat, $30 profit per regular class seat):\n  50 * PremiumClass + 30 * RegularClass\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumClass = intvar(0, 999999999)  # Number of premium class seats sold\nRegularClass = intvar(0, 999999999)  # Number of regular class seats sold\n\n# Constraints\nm = Model()\n\n# The bus carries at most 100 passengers:\nm += PremiumClass + RegularClass <= 100\n# At least 30 seats are reserved for the premium class:\nm += PremiumClass >= 30\n# At least twice as many passengers prefer regular class than premium class:\nm += RegularClass >= 2 * PremiumClass\n\n# Objective\n# Maximize profit ($50 profit per premium class seat, $30 profit per regular class seat):\nm.maximize(50 * PremiumClass + 30 * RegularClass)\n", "entities": [{"start": 24, "end": 31, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989419276713887}, {"start": 32, "end": 35, "word": "100", "entity_group": "LIMIT", "score": 0.9996927709794166}, {"start": 51, "end": 57, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999407586997267}, {"start": 63, "end": 65, "word": "50", "entity_group": "PARAM", "score": 0.9997031994186322}, {"start": 83, "end": 96, "word": "premium class", "entity_group": "VAR", "score": 0.9999753348567756}, {"start": 128, "end": 134, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999667531289593}, {"start": 140, "end": 142, "word": "30", "entity_group": "PARAM", "score": 0.9994832445303822}, {"start": 159, "end": 172, "word": "regular class", "entity_group": "VAR", "score": 0.9999363504042659}, {"start": 197, "end": 205, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983663402453026}, {"start": 206, "end": 208, "word": "30", "entity_group": "LIMIT", "score": 0.9997397887788096}, {"start": 223, "end": 236, "word": "premium class", "entity_group": "VAR", "score": 0.9999856502680539}, {"start": 255, "end": 263, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973995349857084}, {"start": 264, "end": 269, "word": "twice", "entity_group": "PARAM", "score": 0.9956548026870585}, {"start": 324, "end": 337, "word": "regular class", "entity_group": "VAR", "score": 0.9998010490526766}, {"start": 346, "end": 359, "word": "premium class", "entity_group": "VAR", "score": 0.9998700110429862}, {"start": 417, "end": 425, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.996185237486461}, {"start": 426, "end": 432, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912505945}]}
{"doc_id": "-262805213", "document": "Each month, a video-game store owner can spend at most $30000 on consoles and discs. A console costs the store owner $300 and a disc costs $30. Each console is sold for a profit of $200 while each disc is sold for a profit of $30. The store owner estimates that a minimum of 20 but at most 50 consoles are sold each month. He also estimates that the number of discs sold is at most five times the number of consoles sold. How many of each, consoles and discs, should be sold in order to maximize the profit?", "order_mapping": {"consoles": 0, "discs": 1, "console": 0, "disc": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"console": "200", "disc": "30"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "30000", "terms": {"console": "300", "disc": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "20", "var": "consoles", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "consoles", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "discs", "direction": "at most", "param": "five", "y_var": "consoles", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of consoles sold\n- y: Number of discs sold\n\nObjective:\n- The store owner aims to maximize the profit. Each console is sold for a profit of $200 while each disc is sold for a profit of $30. Therefore, the objective function is: Maximize 200x + 30y\n\nConstraints:\n- The store owner can spend at most $30000, so the constraint is: 300x + 30y <= 30000.\n- The store owner estimates that a minimum of 20 but at most 50 consoles are sold each month, leading to the constraints: 20 <= x <= 50.\n- The number of discs sold is at most five times the number of consoles sold, resulting in the constraint: y <= 5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 30y\nConstraints:\n300x + 30y <= 30000\n20 <= x <= 50\ny <= 5x", "canonical": {"objective": [-200.0, -30.0], "constraints": [[300.0, 30.0, 30000.0], [-5.0, 1.0, 0.0], [-1.0, 0.0, -20.0], [1.0, 0.0, 50.0]]}, "solution": {"x": 50, "y": 250}, "pseudo_model": "\nDecision Variables:\n- Number of consoles sold: Consoles\n- Number of discs sold: Discs\n\nConstraints:\n- Spending limit of $30000 (console costs $300 and disc costs $30):\n  300 * Consoles + 30 * Discs <= 30000\n- At least 20 consoles are sold each month but at most 50:\n  20 <= Consoles <= 50\n- Number of discs sold is at most five times the number of consoles sold:\n  Discs <= 5 * Consoles\n\nObjective:\n- Maximize profit ($200 profit per console, $30 profit per disc):\n  200 * Consoles + 30 * Discs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nConsoles = intvar(0, 999999999)  # Number of consoles sold\nDiscs = intvar(0, 999999999)  # Number of discs sold\n\n# Constraints\nm = Model()\n\n# Spending limit of $30000 (console costs $300 and disc costs $30):\nm += 300 * Consoles + 30 * Discs <= 30000\n# At least 20 consoles are sold each month but at most 50:\nm += Consoles >= 20\nm += Consoles <= 50\n# Number of discs sold is at most five times the number of consoles sold:\nm += Discs <= 5 * Consoles\n\n# Objective\n# Maximize profit ($200 profit per console, $30 profit per disc):\nm.maximize(200 * Consoles + 30 * Discs)\n", "entities": [{"start": 50, "end": 57, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9946769136038275}, {"start": 60, "end": 65, "word": "30000", "entity_group": "LIMIT", "score": 0.9993193217962075}, {"start": 69, "end": 77, "word": "consoles", "entity_group": "VAR", "score": 0.9996366298079253}, {"start": 82, "end": 87, "word": "discs", "entity_group": "VAR", "score": 0.9998230091158783}, {"start": 92, "end": 99, "word": "console", "entity_group": "VAR", "score": 0.9997297895564092}, {"start": 124, "end": 127, "word": "300", "entity_group": "PARAM", "score": 0.9995774369620489}, {"start": 134, "end": 138, "word": "disc", "entity_group": "VAR", "score": 0.9995052517004696}, {"start": 147, "end": 149, "word": "30", "entity_group": "PARAM", "score": 0.9996985192110983}, {"start": 157, "end": 164, "word": "console", "entity_group": "VAR", "score": 0.9994271110128347}, {"start": 179, "end": 185, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998001160601361}, {"start": 191, "end": 194, "word": "200", "entity_group": "PARAM", "score": 0.999629177540895}, {"start": 206, "end": 210, "word": "disc", "entity_group": "VAR", "score": 0.9997874656635426}, {"start": 225, "end": 231, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996555687151484}, {"start": 237, "end": 239, "word": "30", "entity_group": "PARAM", "score": 0.9996811725785968}, {"start": 275, "end": 282, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9971130682973309}, {"start": 286, "end": 288, "word": "20", "entity_group": "LIMIT", "score": 0.999493594677595}, {"start": 293, "end": 300, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986952230449401}, {"start": 301, "end": 303, "word": "50", "entity_group": "LIMIT", "score": 0.999610310922525}, {"start": 304, "end": 312, "word": "consoles", "entity_group": "VAR", "score": 0.9994518201920785}, {"start": 372, "end": 377, "word": "discs", "entity_group": "VAR", "score": 0.9994829864062158}, {"start": 386, "end": 393, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9969882754529364}, {"start": 394, "end": 398, "word": "five", "entity_group": "PARAM", "score": 0.9937272009493164}, {"start": 419, "end": 427, "word": "consoles", "entity_group": "VAR", "score": 0.9991263839653733}, {"start": 454, "end": 462, "word": "consoles", "entity_group": "VAR", "score": 0.9992991139582589}, {"start": 467, "end": 472, "word": "discs", "entity_group": "VAR", "score": 0.9997362189252207}, {"start": 502, "end": 510, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970533990570982}, {"start": 515, "end": 521, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620238983442}]}
{"doc_id": "1492393031", "document": "A company is deciding how to run its tv commercials. They can be run during movies, sports games, or comedy shows. The cost for a  commercial as well as the expected audience reach is given. During movies, a commercial costs $1000 and attracts 25000 viewers. During sports games, a commercial costs $5000 and attracts 100000 viewers. During comedy shows, a commercial costs $2000 and attracts 45000 peoples. The sports broadcaster limits the number of commercials during sports games from a single company to five. In order to attract a wide range of people, at most a third of all commercials should occur during comedy shows and a minimum of 15% should occur during movies. If the weekly budget is $50000, how many commercials should be run in each of the three possible choices in order to maximize audience.", "order_mapping": {"movies": 0, "sports games": 1, "comedy shows": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "audience", "terms": {"movies": "25000", "sports games": "100000", "comedy shows": "45000"}}, "const_declarations": [{"type": "upperbound", "direction": "limits the number", "limit": "five", "var": "sports games", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "comedy shows", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "15%", "var": "movies", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "50000", "terms": {"movies": "1000", "sports games": "5000", "comedy shows": "2000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of commercials during movies\n- y: Number of commercials during sports games\n- z: Number of commercials during comedy shows\n\nObjective:\n- The company aims to maximize the audience reach. The expected audience reach for each type of commercial is given: movies - 25000 viewers, sports games - 100000 viewers, comedy shows - 45000 viewers. Therefore, the objective function is: Maximize 25000x + 100000y + 45000z\n\nConstraints:\n- The weekly budget is $50000, so the cost constraint is: 1000x + 5000y + 2000z <= 50000.\n- The sports broadcaster limits the number of commercials during sports games to five, leading to the constraint: y <= 5.\n- At most a third of all commercials should occur during comedy shows, resulting in the constraint: z <= (x + y + z)/3.\n- At least 15% of commercials should occur during movies, leading to the constraint: x >= 0.15(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25000x + 100000y + 45000z\nConstraints:\n1000x + 5000y + 2000z <= 50000\ny <= 5\nz <= (x + y + z)/3\nx >= 0.15(x + y + z)", "canonical": {"objective": [-25000.0, -100000.0, -45000.0], "constraints": [[1000.0, 5000.0, 2000.0, 50000.0], [0.0, 1.0, 0.0, 5.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.85, 0.15, 0.15, 0.0]]}, "solution": {"x": 50, "y": 0, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of commercials during movies: Movies\n- Number of commercials during sports games: SportsGames\n- Number of commercials during comedy shows: ComedyShows\n\nConstraints:\n- Weekly budget should not exceed $50000:\n  1000 * Movies + 5000 * SportsGames + 2000 * ComedyShows <= 50000\n- At most 5 commercials during sports games:\n  SportsGames <= 5\n- At most a third of all commercials should occur during comedy shows:\n  ComedyShows <= 1/3 * (Movies + SportsGames + ComedyShows)\n- A minimum of 15% of all commercials should occur during movies:\n  Movies >= 0.15 * (Movies + SportsGames + ComedyShows)\n\nObjective:\n- Maximize audience (25000 viewers per commercial during movies, 100000 viewers per commercial during sports games, 45000 viewers per commercial during comedy shows):\n  25000 * Movies + 100000 * SportsGames + 45000 * ComedyShows\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMovies = intvar(0, 999999999)  # Number of commercials during movies\nSportsGames = intvar(0, 999999999)  # Number of commercials during sports games\nComedyShows = intvar(0, 999999999)  # Number of commercials during comedy shows\n\n# Constraints\nm = Model()\n\n# Weekly budget constraint ($50000):\nm += 1000 * Movies + 5000 * SportsGames + 2000 * ComedyShows <= 50000\n# Sports broadcaster limits the number of commercials during sports games to five:\nm += SportsGames <= 5\n# At most a third of all commercials should occur during comedy shows:\nm += ComedyShows <= (1/3) * (Movies + SportsGames + ComedyShows)\n# A minimum of 15% of all commercials should occur during movies:\nm += Movies >= 0.15 * (Movies + SportsGames + ComedyShows)\n\n# Objective\n# Maximize audience (25000 viewers per commercial during movies, 100000 viewers per commercial during sports games, 45000 viewers per commercial during comedy shows):\nm.maximize(25000 * Movies + 100000 * SportsGames + 45000 * ComedyShows)\n", "entities": [{"start": 77, "end": 83, "word": "movies", "entity_group": "VAR", "score": 0.9996561639879274}, {"start": 86, "end": 98, "word": "sports games", "entity_group": "VAR", "score": 0.9999702594914965}, {"start": 104, "end": 116, "word": "comedy shows", "entity_group": "VAR", "score": 0.9999810437359767}, {"start": 202, "end": 208, "word": "movies", "entity_group": "VAR", "score": 0.9995284427690825}, {"start": 232, "end": 236, "word": "1000", "entity_group": "PARAM", "score": 0.9992689310821591}, {"start": 250, "end": 255, "word": "25000", "entity_group": "PARAM", "score": 0.9995519766418242}, {"start": 256, "end": 263, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9867278393485481}, {"start": 273, "end": 285, "word": "sports games", "entity_group": "VAR", "score": 0.9999712779816033}, {"start": 309, "end": 313, "word": "5000", "entity_group": "PARAM", "score": 0.9995326921379156}, {"start": 327, "end": 333, "word": "100000", "entity_group": "PARAM", "score": 0.9995519431299131}, {"start": 334, "end": 341, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9867278392394142}, {"start": 351, "end": 363, "word": "comedy shows", "entity_group": "VAR", "score": 0.9999711648128604}, {"start": 387, "end": 391, "word": "2000", "entity_group": "PARAM", "score": 0.9995873723996487}, {"start": 405, "end": 410, "word": "45000", "entity_group": "PARAM", "score": 0.9996577079291272}, {"start": 411, "end": 418, "word": "peoples", "entity_group": "OBJ_NAME", "score": 0.9912674402553163}, {"start": 444, "end": 461, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9387131551073139}, {"start": 484, "end": 496, "word": "sports games", "entity_group": "VAR", "score": 0.9999720269453689}, {"start": 522, "end": 526, "word": "five", "entity_group": "LIMIT", "score": 0.9979387448760323}, {"start": 574, "end": 581, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9962847853698148}, {"start": 584, "end": 589, "word": "third", "entity_group": "LIMIT", "score": 0.9188711876416679}, {"start": 629, "end": 641, "word": "comedy shows", "entity_group": "VAR", "score": 0.9999794650414725}, {"start": 648, "end": 655, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9927192339733254}, {"start": 659, "end": 663, "word": "15 %", "entity_group": "LIMIT", "score": 0.9337282734636648}, {"start": 684, "end": 690, "word": "movies", "entity_group": "VAR", "score": 0.9998069905074397}, {"start": 707, "end": 713, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9989493851850287}, {"start": 719, "end": 724, "word": "50000", "entity_group": "LIMIT", "score": 0.9995758719293344}, {"start": 812, "end": 820, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9983635954330012}, {"start": 821, "end": 829, "word": "audience", "entity_group": "OBJ_NAME", "score": 0.9963178061233645}]}
{"doc_id": "-990899936", "document": "A keyboard factory makes regular and mechanical keyboards. Projections indicate a demand of at least 165 regular keyboards and 70 mechanical keyboards each day. Because of the manual labor involved, at most 300 regular keyboards and 150 mechanical keyboards can be made each day. To satisfy a contract with an electronics shop, at least 250 keyboards of either type must be made each day. The factory makes a profit of $30 per regular keyboard and $60 per mechanical keyboard. How many of each keyboard should the factory make to maximize profit?", "order_mapping": {"regular": 0, "mechanical keyboards": 1, "regular keyboards": 0, "regular keyboard": 0, "mechanical keyboard": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular keyboard": "30", "mechanical keyboard": "60"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "165", "var": "regular keyboards", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "70", "var": "mechanical keyboards", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "300", "var": "regular keyboards", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "mechanical keyboards", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "250", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular keyboards produced\n- y: Number of mechanical keyboards produced\n\nObjective:\n- The factory aims to maximize its profit. The profit per regular keyboard is $30 and the profit per mechanical keyboard is $60. Therefore, the objective function is: Maximize 30x + 60y\n\nConstraints:\n- At least 165 regular keyboards and 70 mechanical keyboards must be produced each day, leading to the constraints: x >= 165 and y >= 70.\n- At most 300 regular keyboards and 150 mechanical keyboards can be made each day, resulting in the constraints: x <= 300 and y <= 150.\n- To satisfy the contract with the electronics shop, at least 250 keyboards of either type must be made each day, leading to the constraint: x + y >= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 60y\nConstraints:\nx >= 165\ny >= 70\nx <= 300\ny <= 150\nx + y >= 250", "canonical": {"objective": [-30.0, -60.0], "constraints": [[-1.0, 0.0, -165.0], [0.0, -1.0, -70.0], [1.0, 0.0, 300.0], [0.0, 1.0, 150.0], [-1.0, -1.0, -250.0]]}, "solution": {"x": 300, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of regular keyboards made per day: RegularKeyboards\n- Number of mechanical keyboards made per day: MechanicalKeyboards\n\nConstraints:\n- Demand constraints:\n  - At least 165 regular keyboards: RegularKeyboards >= 165\n  - At least 70 mechanical keyboards: MechanicalKeyboards >= 70\n\n- Production capacity constraints:\n  - At most 300 regular keyboards: RegularKeyboards <= 300\n  - At most 150 mechanical keyboards: MechanicalKeyboards <= 150\n\n- Contract requirement:\n  - At least 250 keyboards of either type per day: RegularKeyboards + MechanicalKeyboards >= 250\n\nObjective:\n- Maximize profit (30 dollars per regular keyboard, 60 dollars per mechanical keyboard):\n  30 * RegularKeyboards + 60 * MechanicalKeyboards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularKeyboards = intvar(0, 999999999)  # Number of regular keyboards made per day\nMechanicalKeyboards = intvar(0, 999999999)  # Number of mechanical keyboards made per day\n\n# Constraints\nm = Model()\n\n# Demand constraints:\nm += RegularKeyboards >= 165  # At least 165 regular keyboards\nm += MechanicalKeyboards >= 70  # At least 70 mechanical keyboards\n\n# Production capacity constraints:\nm += RegularKeyboards <= 300  # At most 300 regular keyboards\nm += MechanicalKeyboards <= 150  # At most 150 mechanical keyboards\n\n# Contract requirement:\nm += RegularKeyboards + MechanicalKeyboards >= 250  # At least 250 keyboards of either type\n\n# Objective\n# Maximize profit (30 dollars per regular keyboard, 60 dollars per mechanical keyboard):\nm.maximize(30 * RegularKeyboards + 60 * MechanicalKeyboards)\n", "entities": [{"start": 25, "end": 32, "word": "regular", "entity_group": "VAR", "score": 0.9994435821328743}, {"start": 37, "end": 57, "word": "mechanical keyboards", "entity_group": "VAR", "score": 0.9999801840432018}, {"start": 93, "end": 101, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985836298834544}, {"start": 102, "end": 105, "word": "165", "entity_group": "LIMIT", "score": 0.9994525856043639}, {"start": 106, "end": 123, "word": "regular keyboards", "entity_group": "VAR", "score": 0.9999737088365322}, {"start": 128, "end": 130, "word": "70", "entity_group": "LIMIT", "score": 0.9996769962423031}, {"start": 131, "end": 151, "word": "mechanical keyboards", "entity_group": "VAR", "score": 0.9999660516762175}, {"start": 202, "end": 209, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987450789756712}, {"start": 210, "end": 213, "word": "300", "entity_group": "LIMIT", "score": 0.9995840311464679}, {"start": 214, "end": 231, "word": "regular keyboards", "entity_group": "VAR", "score": 0.9999730321731201}, {"start": 236, "end": 239, "word": "150", "entity_group": "LIMIT", "score": 0.9996624090264847}, {"start": 240, "end": 260, "word": "mechanical keyboards", "entity_group": "VAR", "score": 0.9999771724639746}, {"start": 333, "end": 341, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988594285245397}, {"start": 342, "end": 345, "word": "250", "entity_group": "LIMIT", "score": 0.9996974064249119}, {"start": 415, "end": 421, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999889394131142}, {"start": 427, "end": 429, "word": "30", "entity_group": "PARAM", "score": 0.9991518714892225}, {"start": 434, "end": 450, "word": "regular keyboard", "entity_group": "VAR", "score": 0.999973527273253}, {"start": 457, "end": 459, "word": "60", "entity_group": "PARAM", "score": 0.9994439371575945}, {"start": 464, "end": 483, "word": "mechanical keyboard", "entity_group": "VAR", "score": 0.999972932308185}, {"start": 539, "end": 547, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994938024516942}, {"start": 548, "end": 554, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277472233759}]}
{"doc_id": "-1746220922", "document": "A hockey arena can hold at most 300 people and has both heated and regular seats. A profit of $30 is made on each heated seat and a profit of $20 is made on each regular seat. The arena reserves a minimum of 50 seats to be heated seats. However, since it is not too cold, at least 3 times as many people prefer to sit in regular seats. How many of each type of seat must be sold in order to maximize profit? What is the maximum profit?", "order_mapping": {"heated": 0, "regular seats": 1, "heated seat": 0, "regular seat": 1, "heated seats": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"heated seat": "30", "regular seat": "20"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "50", "var": "heated seats", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular seats", "direction": "at least", "param": "3", "y_var": "heated seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of heated seats\n- y: Number of regular seats\n\nObjective:\n- The objective is to maximize the profit. The profit made on each heated seat is $30 and on each regular seat is $20. Therefore, the objective function is: Maximize 30x + 20y\n\nConstraints:\n- The arena can hold at most 300 people, so the constraint is: x + y <= 300.\n- A minimum of 50 seats are reserved to be heated seats, leading to the constraint: x >= 50.\n- At least 3 times as many people prefer to sit in regular seats than heated seats, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 20y\nConstraints:\nx + y <= 300\nx >= 50\ny >= 3x", "canonical": {"objective": [-30.0, -20.0], "constraints": [[1.0, 1.0, 300.0], [-1.0, 0.0, -50.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 75, "y": 225}, "pseudo_model": "\nDecision Variables:\n- Number of heated seats sold: HeatedSeats\n- Number of regular seats sold: RegularSeats\n\nConstraints:\n- Total number of seats sold (heated + regular) should not exceed 300:\n  HeatedSeats + RegularSeats <= 300\n- At least 50 seats must be heated:\n  HeatedSeats >= 50\n- The number of regular seats sold must be at least 3 times the number of heated seats sold:\n  RegularSeats >= 3 * HeatedSeats\n\nObjective:\n- Maximize profit ($30 profit per heated seat, $20 profit per regular seat):\n  30 * HeatedSeats + 20 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeatedSeats = intvar(0, 999999999)  # Number of heated seats sold\nRegularSeats = intvar(0, 999999999)  # Number of regular seats sold\n\n# Constraints\nm = Model()\n\n# The arena can hold at most 300 people:\nm += HeatedSeats + RegularSeats <= 300\n# A minimum of 50 seats must be heated seats:\nm += HeatedSeats >= 50\n# At least 3 times as many people prefer to sit in regular seats as in heated seats:\nm += RegularSeats >= 3 * HeatedSeats\n\n# Objective\n# Maximize profit ($30 profit per heated seat, $20 profit per regular seat):\nm.maximize(30 * HeatedSeats + 20 * RegularSeats)\n", "entities": [{"start": 24, "end": 31, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998676523142705}, {"start": 32, "end": 35, "word": "300", "entity_group": "LIMIT", "score": 0.9985738532201828}, {"start": 56, "end": 62, "word": "heated", "entity_group": "VAR", "score": 0.9997742390127461}, {"start": 67, "end": 80, "word": "regular seats", "entity_group": "VAR", "score": 0.9999736011557028}, {"start": 85, "end": 91, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999040740887192}, {"start": 97, "end": 99, "word": "30", "entity_group": "PARAM", "score": 0.9994577265236627}, {"start": 116, "end": 127, "word": "heated seat", "entity_group": "VAR", "score": 0.9998820064407549}, {"start": 134, "end": 140, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998256093585423}, {"start": 146, "end": 148, "word": "20", "entity_group": "PARAM", "score": 0.9995342138808088}, {"start": 165, "end": 177, "word": "regular seat", "entity_group": "VAR", "score": 0.9998668041276317}, {"start": 201, "end": 208, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9949060802222953}, {"start": 212, "end": 214, "word": "50", "entity_group": "LIMIT", "score": 0.9996757407535145}, {"start": 227, "end": 239, "word": "heated seats", "entity_group": "VAR", "score": 0.9999235708834051}, {"start": 279, "end": 287, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982266744053047}, {"start": 288, "end": 289, "word": "3", "entity_group": "PARAM", "score": 0.9981804242817418}, {"start": 328, "end": 341, "word": "regular seats", "entity_group": "VAR", "score": 0.9996372941914854}, {"start": 399, "end": 407, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9966242375393356}, {"start": 408, "end": 414, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996399619597578}]}
{"doc_id": "-1324368967", "document": "Lucy has $30000 to invest in the automotive and textile industries. The money invested in the automotive industry earns 10% while the money invested in the textile industry earns 8%. She has decided that the money invested in the automotive industry be at least three times as much as the money invested in the textile industry. However, the money invested in the automotive industry must be at most $24000. How much should she invest in each industry in order to maximize profit?", "order_mapping": {"automotive": 0, "textile industries": 1, "automotive industry": 0, "textile industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"automotive industry": "10%", "textile industry": "8%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "30000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "automotive industry", "direction": "at least", "param": "three", "y_var": "textile industry", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "24000", "var": "automotive industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the automotive industry\n- y: Dollars invested in the textile industry\n\nObjective:\n- Lucy aims to maximize her profit. The money invested in the automotive industry earns 10% while the money invested in the textile industry earns 8%. Therefore, the objective function is: Maximize 0.10x + 0.08y\n\nConstraints:\n- Lucy has $30000 to invest, so the constraint is: x + y <= 30000.\n- The money invested in the automotive industry must be at least three times as much as the money invested in the textile industry, leading to the constraint: x >= 3y.\n- The money invested in the automotive industry must be at most $24000, resulting in the constraint: x <= 24000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.10x + 0.08y\nConstraints:\nx + y <= 30000\nx >= 3y\nx <= 24000", "canonical": {"objective": [-0.1, -0.08], "constraints": [[1.0, 1.0, 30000.0], [-1.0, 3.0, 0.0], [1.0, 0.0, 24000.0]]}, "solution": {"x": 24000, "y": 6000}, "pseudo_model": "\nDecision Variables:\n- Money invested in the automotive industry: Automotive\n- Money invested in the textile industry: Textile\n\nConstraints:\n- Total investment should not exceed $30000:\n  Automotive + Textile <= 30000\n- Money invested in the automotive industry should be at least three times as much as in the textile industry:\n  Automotive >= 3 * Textile\n- Money invested in the automotive industry must be at most $24000:\n  Automotive <= 24000\n\nObjective:\n- Maximize profit (10% from automotive industry, 8% from textile industry):\n  0.10 * Automotive + 0.08 * Textile\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAutomotive = intvar(0, 999999999)  # Money invested in the automotive industry\nTextile = intvar(0, 999999999)  # Money invested in the textile industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $30000:\nm += Automotive + Textile <= 30000\n# Money invested in the automotive industry should be at least three times as much as in the textile industry:\nm += Automotive >= 3 * Textile\n# Money invested in the automotive industry must be at most $24000:\nm += Automotive <= 24000\n\n# Objective\n# Maximize profit (10% from automotive industry, 8% from textile industry):\nm.maximize(0.10 * Automotive + 0.08 * Textile)\n", "entities": [{"start": 5, "end": 8, "word": "has", "entity_group": "CONST_DIR", "score": 0.9941248665209953}, {"start": 11, "end": 16, "word": "30000", "entity_group": "LIMIT", "score": 0.9993320791580836}, {"start": 34, "end": 44, "word": "automotive", "entity_group": "VAR", "score": 0.9994004560306734}, {"start": 49, "end": 67, "word": "textile industries", "entity_group": "VAR", "score": 0.9998373458867253}, {"start": 96, "end": 115, "word": "automotive industry", "entity_group": "VAR", "score": 0.9999213763386473}, {"start": 116, "end": 121, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9949573003837157}, {"start": 122, "end": 126, "word": "10 %", "entity_group": "PARAM", "score": 0.9874440968861787}, {"start": 159, "end": 175, "word": "textile industry", "entity_group": "VAR", "score": 0.9998931794767338}, {"start": 176, "end": 181, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9864291442552907}, {"start": 182, "end": 185, "word": "8 %", "entity_group": "PARAM", "score": 0.9714383883875586}, {"start": 235, "end": 254, "word": "automotive industry", "entity_group": "VAR", "score": 0.9998778380553908}, {"start": 258, "end": 266, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9938997629986851}, {"start": 267, "end": 272, "word": "three", "entity_group": "PARAM", "score": 0.9967109346929139}, {"start": 316, "end": 332, "word": "textile industry", "entity_group": "VAR", "score": 0.99991023095097}, {"start": 371, "end": 390, "word": "automotive industry", "entity_group": "VAR", "score": 0.9998826205592312}, {"start": 399, "end": 406, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9949720720674373}, {"start": 409, "end": 414, "word": "24000", "entity_group": "LIMIT", "score": 0.9996643375053997}, {"start": 473, "end": 481, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9938382215249928}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997283316322069}]}
{"doc_id": "1280519471", "document": "A kitchen appliance store sells only fridges and stoves. They have 1000 sq ft of floor space available. A fridge requires 10 sq ft of floor space while a stove requires 15 sq ft of floor space. The profit per fridge is $400 and the profit per stove is $500. Management requires at least 40% of all appliances in stock be fridges. While a fridge ties up $1000 in capital, a stove ties up $1200 in capital. The store wants to have a maximum of $40000 worth of capital tied up at any time. Formulate a LP in order to maximize the store's profit.", "order_mapping": {"fridges": 0, "stoves": 1, "fridge": 0, "stove": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fridge": "400", "stove": "500"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"fridge": "10", "stove": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "fridges", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "40000", "terms": {"fridge": "1000", "stove": "1200"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of fridges\n- y: Number of stoves\n\nObjective:\n- The store aims to maximize its profit. The profit per fridge is $400 and the profit per stove is $500. Therefore, the objective function is: Maximize 400x + 500y\n\nConstraints:\n- The store has 1000 sq ft of floor space available, with each fridge requiring 10 sq ft and each stove requiring 15 sq ft. This leads to the constraint: 10x + 15y <= 1000.\n- Management requires at least 40% of all appliances in stock to be fridges, resulting in the constraint: x >= 0.4(x + y).\n- Each fridge ties up $1000 in capital and each stove ties up $1200 in capital. The store wants to have a maximum of $40000 worth of capital tied up at any time, leading to the constraint: 1000x + 1200y <= 40000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 500y\nConstraints:\n10x + 15y <= 1000\nx >= 0.4(x + y)\n1000x + 1200y <= 40000", "canonical": {"objective": [-400.0, -500.0], "constraints": [[10.0, 15.0, 1000.0], [-0.6, 0.4, 0.0], [1000.0, 1200.0, 40000.0]]}, "solution": {"x": 16, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of fridges: Fridges\n- Number of stoves: Stoves\n\nConstraints:\n- Floor space constraint (10 sq ft per fridge, 15 sq ft per stove, total available is 1000 sq ft):\n  10 * Fridges + 15 * Stoves <= 1000\n- At least 40% of all appliances must be fridges:\n  Fridges >= 0.4 * (Fridges + Stoves)\n- Capital tied up constraint ($1000 per fridge, $1200 per stove, maximum capital is $40000):\n  1000 * Fridges + 1200 * Stoves <= 40000\n\nObjective:\n- Maximize profit ($400 per fridge, $500 per stove):\n  400 * Fridges + 500 * Stoves\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFridges = intvar(0, 999999999)  # Number of fridges\nStoves = intvar(0, 999999999)  # Number of stoves\n\n# Constraints\nm = Model()\n\n# Floor space constraint (fridges require 10 sq ft, stoves require 15 sq ft, total available is 1000 sq ft):\nm += 10 * Fridges + 15 * Stoves <= 1000\n# At least 40% of all appliances must be fridges:\nm += Fridges >= 0.4 * (Fridges + Stoves)\n# Capital tied up constraint (fridges tie up $1000 each, stoves tie up $1200 each, maximum capital is $40000):\nm += 1000 * Fridges + 1200 * Stoves <= 40000\n\n# Objective\n# Maximize profit ($400 per fridge, $500 per stove):\nm.maximize(400 * Fridges + 500 * Stoves)\n", "entities": [{"start": 37, "end": 44, "word": "fridges", "entity_group": "VAR", "score": 0.9997190430599083}, {"start": 49, "end": 55, "word": "stoves", "entity_group": "VAR", "score": 0.9987153389352172}, {"start": 68, "end": 72, "word": "1000", "entity_group": "LIMIT", "score": 0.999704750919519}, {"start": 94, "end": 103, "word": "available", "entity_group": "CONST_DIR", "score": 0.99935195384944}, {"start": 108, "end": 114, "word": "fridge", "entity_group": "VAR", "score": 0.9997053764490963}, {"start": 124, "end": 126, "word": "10", "entity_group": "PARAM", "score": 0.9996568354167299}, {"start": 156, "end": 161, "word": "stove", "entity_group": "VAR", "score": 0.9997369638204963}, {"start": 171, "end": 173, "word": "15", "entity_group": "PARAM", "score": 0.9995128806846953}, {"start": 201, "end": 207, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998356975426163}, {"start": 212, "end": 218, "word": "fridge", "entity_group": "VAR", "score": 0.9991900915160568}, {"start": 224, "end": 227, "word": "400", "entity_group": "PARAM", "score": 0.9991616062384298}, {"start": 236, "end": 242, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998896199171953}, {"start": 247, "end": 252, "word": "stove", "entity_group": "VAR", "score": 0.9992179522986864}, {"start": 258, "end": 261, "word": "500", "entity_group": "PARAM", "score": 0.9996513323849565}, {"start": 284, "end": 292, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990971529106729}, {"start": 293, "end": 297, "word": "40 %", "entity_group": "LIMIT", "score": 0.9102939397199638}, {"start": 328, "end": 335, "word": "fridges", "entity_group": "VAR", "score": 0.9995322485371061}, {"start": 346, "end": 352, "word": "fridge", "entity_group": "VAR", "score": 0.9998370017854434}, {"start": 363, "end": 367, "word": "1000", "entity_group": "PARAM", "score": 0.9996737709987608}, {"start": 383, "end": 388, "word": "stove", "entity_group": "VAR", "score": 0.9996189861856148}, {"start": 399, "end": 403, "word": "1200", "entity_group": "PARAM", "score": 0.9995771809819565}, {"start": 443, "end": 450, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9944594122641162}, {"start": 456, "end": 461, "word": "40000", "entity_group": "LIMIT", "score": 0.9971730356486034}, {"start": 528, "end": 536, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9960722244608241}, {"start": 550, "end": 556, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999962542489292}]}
{"doc_id": "1144883424", "document": "A company is looking to diversify its investments and has $300000 to invest in a 12 month commitment. They can invest in the paper industry yielding a 2% return or in the glass industry yielding a 5% return. The board of directors requires that a minimum of 30% of the investment be placed in the paper industry and that at most 50% of the investment be placed in the glass industry. How much money should the company invest in each industry to maximize its return on investments?", "order_mapping": {"paper industry": 0, "glass industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"paper industry": "2%", "glass industry": "5%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "30%", "var": "paper industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "50%", "var": "glass industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the paper industry\n- y: Dollars invested in the glass industry\n\nObjective:\n- The company aims to maximize its return on investments. The paper industry yields a 2% return and the glass industry yields a 5% return. Therefore, the objective function is: Maximize 0.02x + 0.05y\n\nConstraints:\n- The company has $300,000 to invest, so the constraint is: x + y <= 300000.\n- A minimum of 30% of the investment must be placed in the paper industry, leading to the constraint: x >= 0.30(x + y).\n- At most 50% of the investment may be placed in the glass industry, leading to the constraint: y <= 0.50(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.02x + 0.05y\nConstraints:\nx + y <= 300000\nx >= 0.30(x + y)\ny <= 0.50(x + y)", "canonical": {"objective": [-0.02, -0.05], "constraints": [[1.0, 1.0, 300000.0], [-0.7, 0.3, 0.0], [-0.5, 0.5, 0.0]]}, "solution": {"x": 150000, "y": 150000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the paper industry: PaperIndustry\n- Amount invested in the glass industry: GlassIndustry\n\nConstraints:\n- Total investment should be exactly $300000:\n  PaperIndustry + GlassIndustry == 300000\n- A minimum of 30% of the investment must be in the paper industry:\n  PaperIndustry >= 0.30 * 300000\n- At most 50% of the investment can be in the glass industry:\n  GlassIndustry <= 0.50 * 300000\n\nObjective:\n- Maximize return on investments (2% from paper industry, 5% from glass industry):\n  0.02 * PaperIndustry + 0.05 * GlassIndustry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPaperIndustry = intvar(0, 999999999)  # Amount invested in the paper industry\nGlassIndustry = intvar(0, 999999999)  # Amount invested in the glass industry\n\n# Constraints\nm = Model()\n\n# Total investment should be exactly $300000:\nm += PaperIndustry + GlassIndustry == 300000\n# A minimum of 30% of the investment must be in the paper industry:\nm += PaperIndustry >= 0.30 * 300000\n# At most 50% of the investment can be in the glass industry:\nm += GlassIndustry <= 0.50 * 300000\n\n# Objective\n# Maximize return on investments (2% from paper industry, 5% from glass industry):\nm.maximize(0.02 * PaperIndustry + 0.05 * GlassIndustry)\n", "entities": [{"start": 54, "end": 57, "word": "has", "entity_group": "CONST_DIR", "score": 0.9915905680190028}, {"start": 60, "end": 66, "word": "300000", "entity_group": "LIMIT", "score": 0.9996124215690545}, {"start": 127, "end": 141, "word": "paper industry", "entity_group": "VAR", "score": 0.9999800443254567}, {"start": 153, "end": 156, "word": "2 %", "entity_group": "PARAM", "score": 0.5938619396902669}, {"start": 157, "end": 163, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9875963395004734}, {"start": 174, "end": 188, "word": "glass industry", "entity_group": "VAR", "score": 0.9999747963561036}, {"start": 200, "end": 203, "word": "5 %", "entity_group": "PARAM", "score": 0.7389951076280264}, {"start": 204, "end": 210, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9711249977816159}, {"start": 252, "end": 259, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9941580555905982}, {"start": 263, "end": 267, "word": "30 %", "entity_group": "LIMIT", "score": 0.8994051214279202}, {"start": 303, "end": 317, "word": "paper industry", "entity_group": "VAR", "score": 0.9999862504583591}, {"start": 327, "end": 334, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987774633705861}, {"start": 335, "end": 339, "word": "50 %", "entity_group": "LIMIT", "score": 0.9493701717692876}, {"start": 375, "end": 389, "word": "glass industry", "entity_group": "VAR", "score": 0.9999793602510325}, {"start": 453, "end": 461, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994475009595188}, {"start": 466, "end": 472, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9933370334512511}]}
{"doc_id": "-589883453", "document": "A soup kitchen has 50000 ml of soup to serve. They sell both individual servings and family servings. An individual serving has 250 ml of soup while a family serving has 1200 ml of soup. The soup kitchen knows that they need to make at least three times the number of individual servings than the family servings. They also know that that they need to make at least 10 family servings. Each individual serving is sold for a profit of $3 and each family serving is sold for a profit of $10. How many of each type of serving needs to be made in order to maximize profit?", "order_mapping": {"individual servings": 0, "family servings": 1, "individual serving": 0, "family serving": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"family serving": "10", "individual serving": "3"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "50000", "terms": {"individual serving": "250", "family serving": "1200"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "individual servings", "direction": "at least", "param": "three", "y_var": "family servings", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "family servings", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of individual servings\n- y: Number of family servings\n\nObjective:\n- The soup kitchen aims to maximize its profit. Each individual serving is sold for a profit of $3 and each family serving is sold for a profit of $10. Therefore, the objective function is: Maximize 3x + 10y\n\nConstraints:\n- The soup kitchen has 50000 ml of soup available, so the constraint is: 250x + 1200y <= 50000.\n- The soup kitchen needs to make at least three times the number of individual servings than the family servings, leading to the constraint: x >= 3y.\n- The soup kitchen needs to make at least 10 family servings, resulting in the constraint: y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 10y\nConstraints:\n250x + 1200y <= 50000\nx >= 3y\ny >= 10", "canonical": {"objective": [-3.0, -10.0], "constraints": [[250.0, 1200.0, 50000.0], [-1.0, 3.0, 0.0], [0.0, -1.0, -10.0]]}, "solution": {"x": 152, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of individual servings made: IndividualServings\n- Number of family servings made: FamilyServings\n\nConstraints:\n- Total volume of soup used should not exceed 50000 ml (250 ml per individual serving, 1200 ml per family serving):\n  250 * IndividualServings + 1200 * FamilyServings <= 50000\n- At least three times the number of individual servings than the family servings:\n  IndividualServings >= 3 * FamilyServings\n- At least 10 family servings:\n  FamilyServings >= 10\n\nObjective:\n- Maximize profit (3 dollars per individual serving, 10 dollars per family serving):\n  3 * IndividualServings + 10 * FamilyServings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIndividualServings = intvar(0, 999999999)  # Number of individual servings made\nFamilyServings = intvar(0, 999999999)  # Number of family servings made\n\n# Constraints\nm = Model()\n\n# Total volume of soup used should not exceed 50000 ml:\nm += 250 * IndividualServings + 1200 * FamilyServings <= 50000\n# Need to make at least three times the number of individual servings than the family servings:\nm += IndividualServings >= 3 * FamilyServings\n# Need to make at least 10 family servings:\nm += FamilyServings >= 10\n\n# Objective\n# Maximize profit (3 dollars per individual serving, 10 dollars per family serving):\nm.maximize(3 * IndividualServings + 10 * FamilyServings)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.993863687996105}, {"start": 19, "end": 24, "word": "50000", "entity_group": "LIMIT", "score": 0.9988473630455672}, {"start": 62, "end": 81, "word": "individual servings", "entity_group": "VAR", "score": 0.9999742677053207}, {"start": 86, "end": 101, "word": "family servings", "entity_group": "VAR", "score": 0.9999823671829862}, {"start": 107, "end": 125, "word": "individual serving", "entity_group": "VAR", "score": 0.9999290800867787}, {"start": 130, "end": 133, "word": "250", "entity_group": "PARAM", "score": 0.9997020244630417}, {"start": 153, "end": 167, "word": "family serving", "entity_group": "VAR", "score": 0.9999710415027898}, {"start": 172, "end": 176, "word": "1200", "entity_group": "PARAM", "score": 0.9996470625460993}, {"start": 236, "end": 244, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998355707588136}, {"start": 245, "end": 250, "word": "three", "entity_group": "PARAM", "score": 0.9935279400264572}, {"start": 271, "end": 290, "word": "individual servings", "entity_group": "VAR", "score": 0.9998864462020906}, {"start": 300, "end": 315, "word": "family servings", "entity_group": "VAR", "score": 0.9999788234536859}, {"start": 361, "end": 369, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985275470869506}, {"start": 370, "end": 372, "word": "10", "entity_group": "LIMIT", "score": 0.9993030113698854}, {"start": 373, "end": 388, "word": "family servings", "entity_group": "VAR", "score": 0.9999642166131382}, {"start": 396, "end": 414, "word": "individual serving", "entity_group": "VAR", "score": 0.999916118740483}, {"start": 429, "end": 435, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998802241336002}, {"start": 441, "end": 442, "word": "3", "entity_group": "PARAM", "score": 0.9996657685674584}, {"start": 452, "end": 466, "word": "family serving", "entity_group": "VAR", "score": 0.9999842287504052}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.996772161603132}, {"start": 493, "end": 495, "word": "10", "entity_group": "PARAM", "score": 0.9996009600752183}, {"start": 560, "end": 568, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9949482298485589}, {"start": 569, "end": 575, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996634200134423}]}
{"doc_id": "1045126906", "document": "A small town has $100000 available to invest in a 12-month commitment.  They have decided to invest in both the mining and logging industries. After consulting an advisor, the town has decided to invest a minimum of 30% in the mining industry and at most 55% in the logging industry. The money placed in the mining industry yields a 9% return and the money placed in the logging industry yields a 5% return. How much should the town invest in each industry to maximize its return on investment?", "order_mapping": {"mining": 0, "logging industries": 1, "mining industry": 0, "logging industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"mining industry": "9", "logging industry": "5"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "30", "var": "mining industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "55", "var": "logging industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the mining industry\n- y: Dollars invested in the logging industry\n\nObjective:\n- The town aims to maximize its return on investment. The money placed in the mining industry yields a 9% return and the money placed in the logging industry yields a 5% return. Therefore, the objective function is: Maximize 0.09x + 0.05y\n\nConstraints:\n- The total amount available for investment is $100,000, so the constraint is: x + y <= 100000.\n- The town has decided to invest a minimum of 30% in the mining industry, leading to the constraint: x >= 0.30(x + y).\n- At most 55% of the total investment may be in the logging industry, leading to the constraint: y <= 0.55(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.09x + 0.05y\nConstraints:\nx + y <= 100000\nx >= 0.30(x + y)\ny <= 0.55(x + y)", "canonical": {"objective": [-0.09, -0.05], "constraints": [[1.0, 1.0, 100000.0], [-0.7, 0.3, 0.0], [-0.55, 0.44999999999999996, 0.0]]}, "solution": {"x": 100000, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the mining industry: MiningInvestment\n- Amount invested in the logging industry: LoggingInvestment\n\nConstraints:\n- Total investment should be exactly $100000:\n  MiningInvestment + LoggingInvestment == 100000\n- At least 30% of the total investment must be in the mining industry:\n  MiningInvestment >= 0.30 * 100000\n- At most 55% of the total investment can be in the logging industry:\n  LoggingInvestment <= 0.55 * 100000\n\nObjective:\n- Maximize return on investment (9% from mining, 5% from logging):\n  0.09 * MiningInvestment + 0.05 * LoggingInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Total investment available\ntotal_investment = 100000\n\n# Decision Variables\nMiningInvestment = intvar(0, total_investment)  # Investment in the mining industry\nLoggingInvestment = intvar(0, total_investment)  # Investment in the logging industry\n\n# Constraints\nm = Model()\n\n# The total investment should be exactly $100000:\nm += MiningInvestment + LoggingInvestment == total_investment\n# At least 30% in the mining industry:\nm += MiningInvestment >= 0.30 * total_investment\n# At most 55% in the logging industry:\nm += LoggingInvestment <= 0.55 * total_investment\n\n# Objective\n# Maximize return on investment (9% from mining, 5% from logging):\nm.maximize(0.09 * MiningInvestment + 0.05 * LoggingInvestment)\n", "entities": [{"start": 19, "end": 25, "word": "100000", "entity_group": "LIMIT", "score": 0.9992675892285856}, {"start": 26, "end": 35, "word": "available", "entity_group": "CONST_DIR", "score": 0.997871556982543}, {"start": 115, "end": 121, "word": "mining", "entity_group": "VAR", "score": 0.9995725901509778}, {"start": 126, "end": 144, "word": "logging industries", "entity_group": "VAR", "score": 0.9998892723416384}, {"start": 210, "end": 217, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9915426970145432}, {"start": 221, "end": 225, "word": "30 %", "entity_group": "LIMIT", "score": 0.8527375015585277}, {"start": 233, "end": 248, "word": "mining industry", "entity_group": "VAR", "score": 0.9999705440493833}, {"start": 253, "end": 260, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9978710133828235}, {"start": 261, "end": 263, "word": "55", "entity_group": "LIMIT", "score": 0.9997911869782777}, {"start": 273, "end": 289, "word": "logging industry", "entity_group": "VAR", "score": 0.9998772839726016}, {"start": 316, "end": 331, "word": "mining industry", "entity_group": "VAR", "score": 0.9999847092396735}, {"start": 341, "end": 344, "word": "9 %", "entity_group": "PARAM", "score": 0.5233858076840374}, {"start": 345, "end": 351, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9711217606107704}, {"start": 380, "end": 396, "word": "logging industry", "entity_group": "VAR", "score": 0.9999496886565147}, {"start": 406, "end": 409, "word": "5 %", "entity_group": "PARAM", "score": 0.5500209425741643}, {"start": 410, "end": 416, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9961341292996808}, {"start": 471, "end": 479, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989809796788631}, {"start": 484, "end": 490, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9955548535043617}]}
{"doc_id": "-474676810", "document": "A retired teacher is deciding where to invest his money. He has $300000 available and has decided to invest in the energy, telecom, utilities, and health care industries. The annual rate of return on an investment in each of the industries is as follows: energy, 5%; telecom, 8%; utilities, 3%; health care, 9%. A financial advisor has given him the following advice. The amount invested in the health care industry cannot exceed the amount invested in the energy industry. Also, the amount invested in the telecom industry cannot exceed the amount invested in the utilities industry. Finally, at most 33% of the total amount of money can be invested in the health care industry. Formulate an LP to maximize his return on investment.", "order_mapping": {"energy": 0, "telecom": 1, "utilities": 2, "health care": 3, "energy industry": 0, "telecom industry": 1, "utilities industry": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"energy": "5%", "telecom": "8%", "utilities": "3%", "health care": "9%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "300000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "health care", "direction": "cannot exceed", "y_var": "energy industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "telecom industry", "direction": "cannot exceed", "y_var": "utilities industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "33", "var": "health care", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the energy industry\n- y: Dollars invested in the telecom industry\n- z: Dollars invested in the utilities industry\n- w: Dollars invested in the health care industry\n\nObjective:\n- The retired teacher aims to maximize his return on investment. The annual rate of return on an investment in each of the industries is as follows: energy, 5%; telecom, 8%; utilities, 3%; health care, 9%. Therefore, the objective function is: Maximize 0.05x + 0.08y + 0.03z + 0.09w\n\nConstraints:\n- The total amount available for investment is $300,000, so the constraint is: x + y + z + w <= 300000.\n- The amount invested in the health care industry cannot exceed the amount invested in the energy industry, leading to the constraint: w <= x.\n- The amount invested in the telecom industry cannot exceed the amount invested in the utilities industry, resulting in the constraint: y <= z.\n- At most 33% of the total amount of money can be invested in the health care industry, leading to the constraint: w <= 0.33(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.08y + 0.03z + 0.09w\nConstraints:\nx + y + z + w <= 300000\nw <= x\ny <= z\nw <= 0.33(x + y + z + w)", "canonical": {"objective": [-0.05, -0.08, -0.03, -0.09], "constraints": [[1.0, 1.0, 1.0, 1.0, 300000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.33, -0.33, -0.33, 0.6699999999999999, 0.0]]}, "solution": {"x": 99099, "y": 50901, "z": 50901, "w": 99099}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the energy industry: Energy\n- Amount invested in the telecom industry: Telecom\n- Amount invested in the utilities industry: Utilities\n- Amount invested in the health care industry: HealthCare\n\nConstraints:\n- Total investment should not exceed $300000:\n  Energy + Telecom + Utilities + HealthCare <= 300000\n- The amount invested in health care cannot exceed the amount invested in energy:\n  HealthCare <= Energy\n- The amount invested in telecom cannot exceed the amount invested in utilities:\n  Telecom <= Utilities\n- At most 33% of the total investment can be in health care:\n  HealthCare <= 0.33 * (Energy + Telecom + Utilities + HealthCare)\n\nObjective:\n- Maximize return on investment (5% for energy, 8% for telecom, 3% for utilities, 9% for health care):\n  0.05 * Energy + 0.08 * Telecom + 0.03 * Utilities + 0.09 * HealthCare\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEnergy = intvar(0, 999999999)  # Amount invested in the energy industry\nTelecom = intvar(0, 999999999)  # Amount invested in the telecom industry\nUtilities = intvar(0, 999999999)  # Amount invested in the utilities industry\nHealthCare = intvar(0, 999999999)  # Amount invested in the health care industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $300000:\nm += Energy + Telecom + Utilities + HealthCare <= 300000\n# The amount invested in the health care industry cannot exceed the amount invested in the energy industry:\nm += HealthCare <= Energy\n# The amount invested in the telecom industry cannot exceed the amount invested in the utilities industry:\nm += Telecom <= Utilities\n# At most 33% of the total amount of money can be invested in the health care industry:\nm += HealthCare <= 0.33 * (Energy + Telecom + Utilities + HealthCare)\n\n# Objective\n# Maximize return on investment (5% for energy, 8% for telecom, 3% for utilities, 9% for health care):\nm.maximize(0.05 * Energy + 0.08 * Telecom + 0.03 * Utilities + 0.09 * HealthCare)\n", "entities": [{"start": 67, "end": 73, "word": "300000", "entity_group": "LIMIT", "score": 0.9988698462816196}, {"start": 74, "end": 83, "word": "available", "entity_group": "CONST_DIR", "score": 0.9921782469740782}, {"start": 117, "end": 123, "word": "energy", "entity_group": "VAR", "score": 0.9978517952500012}, {"start": 126, "end": 133, "word": "telecom", "entity_group": "VAR", "score": 0.9997845830038719}, {"start": 136, "end": 145, "word": "utilities", "entity_group": "VAR", "score": 0.9997727511822864}, {"start": 152, "end": 163, "word": "health care", "entity_group": "VAR", "score": 0.9999879492722525}, {"start": 196, "end": 202, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9930355773271208}, {"start": 262, "end": 268, "word": "energy", "entity_group": "VAR", "score": 0.9994495599013365}, {"start": 271, "end": 274, "word": "5 %", "entity_group": "PARAM", "score": 0.9916623929597997}, {"start": 277, "end": 284, "word": "telecom", "entity_group": "VAR", "score": 0.9985401602413378}, {"start": 287, "end": 290, "word": "8 %", "entity_group": "PARAM", "score": 0.9901447702766503}, {"start": 293, "end": 302, "word": "utilities", "entity_group": "VAR", "score": 0.9989833039861761}, {"start": 305, "end": 308, "word": "3 %", "entity_group": "PARAM", "score": 0.9779446636654848}, {"start": 311, "end": 322, "word": "health care", "entity_group": "VAR", "score": 0.9998336297695272}, {"start": 325, "end": 328, "word": "9 %", "entity_group": "PARAM", "score": 0.9852388472729665}, {"start": 415, "end": 426, "word": "health care", "entity_group": "VAR", "score": 0.9999635228179818}, {"start": 436, "end": 450, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9864659178846644}, {"start": 478, "end": 493, "word": "energy industry", "entity_group": "VAR", "score": 0.9999800716885613}, {"start": 530, "end": 546, "word": "telecom industry", "entity_group": "VAR", "score": 0.9999728026098981}, {"start": 547, "end": 561, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9893304705993434}, {"start": 589, "end": 607, "word": "utilities industry", "entity_group": "VAR", "score": 0.9999235848602757}, {"start": 620, "end": 627, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981400924687045}, {"start": 628, "end": 632, "word": "33 %", "entity_group": "LIMIT", "score": 0.7588246345882075}, {"start": 685, "end": 696, "word": "health care", "entity_group": "VAR", "score": 0.9999789903031906}, {"start": 727, "end": 735, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996303038349147}, {"start": 740, "end": 746, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9967482417802188}]}
{"doc_id": "-65073877", "document": "A young entrepreneur has $500000 available to invest in a 12-month commitment. He can either invest in the healthcare industry which yields a 4% return or in the energy sector which yields an 8% return. His father has advised him that a minimum of 60% of the investment be placed in the healthcare industry. Due to recent issues in the energy sector, he has decided that at most 35% of his investment be placed in the energy sector. How much should he invest in each area in order to maximize his return on investments?", "order_mapping": {"healthcare industry": 0, "energy sector": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"healthcare industry": "4", "energy sector": "8"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "500000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "60", "var": "healthcare industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "35", "var": "energy sector", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the healthcare industry\n- y: Dollars invested in the energy sector\n\nObjective:\n- The entrepreneur aims to maximize his return on investments. The healthcare industry yields a 4% return and the energy sector yields an 8% return. Therefore, the objective function is: Maximize 0.04x + 0.08y\n\nConstraints:\n- The total amount available for investment is $500,000, so the constraint is: x + y <= 500000.\n- A minimum of 60% of the investment should be placed in the healthcare industry, leading to the constraint: x >= 0.60(x + y).\n- At most 35% of the investment should be placed in the energy sector, leading to the constraint: y <= 0.35(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.04x + 0.08y\nConstraints:\nx + y <= 500000\nx >= 0.60(x + y)\ny <= 0.35(x + y)", "canonical": {"objective": [-0.04, -0.08], "constraints": [[1.0, 1.0, 500000.0], [-0.4, 0.6, 0.0], [-0.35, 0.65, 0.0]]}, "solution": {"x": 325000, "y": 175000}, "pseudo_model": "\nDecision Variables:\n- Amount to invest in the healthcare industry: Healthcare\n- Amount to invest in the energy sector: Energy\n\nConstraints:\n- Total investment should not exceed $500000:\n  Healthcare + Energy <= 500000\n- A minimum of 60% of the investment should be placed in the healthcare industry:\n  Healthcare >= 0.60 * (Healthcare + Energy)\n- At most 35% of his investment should be placed in the energy sector:\n  Energy <= 0.35 * (Healthcare + Energy)\n\nObjective:\n- Maximize return on investments (4% return from healthcare, 8% return from energy):\n  0.04 * Healthcare + 0.08 * Energy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHealthcare = intvar(0, 500000)  # Amount to invest in the healthcare industry\nEnergy = intvar(0, 500000)  # Amount to invest in the energy sector\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $500000:\nm += Healthcare + Energy <= 500000\n# A minimum of 60% of the investment should be placed in the healthcare industry:\nm += Healthcare >= 0.60 * (Healthcare + Energy)\n# At most 35% of his investment should be placed in the energy sector:\nm += Energy <= 0.35 * (Healthcare + Energy)\n\n# Objective\n# Maximize return on investments (4% return from healthcare, 8% return from energy):\nm.maximize(0.04 * Healthcare + 0.08 * Energy)\n", "entities": [{"start": 27, "end": 33, "word": "500000", "entity_group": "LIMIT", "score": 0.9990425524532709}, {"start": 34, "end": 43, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978719107920634}, {"start": 111, "end": 130, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999794422870053}, {"start": 146, "end": 149, "word": "4 %", "entity_group": "PARAM", "score": 0.526158574486343}, {"start": 150, "end": 156, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9991315696623458}, {"start": 167, "end": 180, "word": "energy sector", "entity_group": "VAR", "score": 0.9999513418566848}, {"start": 197, "end": 200, "word": "8 %", "entity_group": "PARAM", "score": 0.5651494341815329}, {"start": 201, "end": 207, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9996103775177074}, {"start": 244, "end": 251, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9951300474609374}, {"start": 255, "end": 259, "word": "60 %", "entity_group": "LIMIT", "score": 0.8891041244420406}, {"start": 295, "end": 314, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999783577461417}, {"start": 381, "end": 388, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988885984828066}, {"start": 389, "end": 393, "word": "35 %", "entity_group": "LIMIT", "score": 0.629324251280549}, {"start": 429, "end": 442, "word": "energy sector", "entity_group": "VAR", "score": 0.9999833418690437}, {"start": 496, "end": 504, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9969387123201185}, {"start": 509, "end": 515, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9967253781738284}]}
{"doc_id": "-683593010", "document": "A wine company sells two products. Its regular wine and a premium aged wine. The company makes x1 bottles of the regular wine per day and x2 bottled of the premium wine per day (x1 and x2 are unknown values greater than or equal to 0). The profit per bottle of regular wine is $20 ad the profit per bottle of the premium wine is $50. Current demand for the wine is at most 80 bottles of the regular wine per day and at most 50 bottles of the premium wine per day. The company only has enough supply to make 120 bottles of either type each day. How many bottles of each wine, regular and premium, should the company make to maximize profit?", "order_mapping": {"regular wine": 0, "premium aged wine": 1, "premium wine": 1, "regular": 0, "premium": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular wine": "20", "premium wine": "50"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "80", "var": "regular wine", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "premium wine", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "120", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of bottles of regular wine produced per day\n- x2: Number of bottles of premium wine produced per day\n\nObjective:\n- The company aims to maximize its profit. The profit per bottle of regular wine is $20 and the profit per bottle of the premium wine is $50. Therefore, the objective function is: Maximize 20x1 + 50x2\n\nConstraints:\n- The demand for the regular wine is at most 80 bottles per day, leading to the constraint: x1 <= 80.\n- The demand for the premium wine is at most 50 bottles per day, leading to the constraint: x2 <= 50.\n- The company has a supply constraint and can only produce up to 120 bottles of either type each day, leading to the constraint: x1 + x2 <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x1 + 50x2\nConstraints:\nx1 <= 80\nx2 <= 50\nx1 + x2 <= 120", "canonical": {"objective": [-20.0, -50.0], "constraints": [[1.0, 0.0, 80.0], [0.0, 1.0, 50.0], [1.0, 1.0, 120.0]]}, "solution": {"x": 70, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of regular wine made per day: RegularWine\n- Number of bottles of premium wine made per day: PremiumWine\n\nConstraints:\n- Total number of bottles made should not exceed 120 per day:\n  RegularWine + PremiumWine <= 120\n- At most 80 bottles of regular wine per day:\n  RegularWine <= 80\n- At most 50 bottles of premium wine per day:\n  PremiumWine <= 50\n\nObjective:\n- Maximize profit (20 dollars per bottle of regular wine, 50 dollars per bottle of premium wine):\n  20 * RegularWine + 50 * PremiumWine\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularWine = intvar(0, 999999999)  # Number of bottles of regular wine made per day\nPremiumWine = intvar(0, 999999999)  # Number of bottles of premium wine made per day\n\n# Constraints\nm = Model()\n\n# Total number of bottles made should not exceed 120 per day:\nm += RegularWine + PremiumWine <= 120\n# Number of bottles of regular wine made should be at most 80 per day:\nm += RegularWine <= 80\n# Number of bottles of premium wine made should be at most 50 per day:\nm += PremiumWine <= 50\n\n# Objective\n# Maximize profit (20 dollars per bottle of regular wine, 50 dollars per bottle of premium wine):\nm.maximize(20 * RegularWine + 50 * PremiumWine)\n", "entities": [{"start": 40, "end": 52, "word": "regular wine", "entity_group": "VAR", "score": 0.9999800300751862}, {"start": 59, "end": 76, "word": "premium aged wine", "entity_group": "VAR", "score": 0.9994980849649931}, {"start": 115, "end": 127, "word": "regular wine", "entity_group": "VAR", "score": 0.9999709709630896}, {"start": 158, "end": 170, "word": "premium wine", "entity_group": "VAR", "score": 0.9999215086099074}, {"start": 245, "end": 251, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999208274217579}, {"start": 266, "end": 278, "word": "regular wine", "entity_group": "VAR", "score": 0.9999224786213772}, {"start": 284, "end": 286, "word": "20", "entity_group": "PARAM", "score": 0.9996388864351602}, {"start": 294, "end": 300, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999650845465127}, {"start": 319, "end": 331, "word": "premium wine", "entity_group": "VAR", "score": 0.9999037197655914}, {"start": 337, "end": 339, "word": "50", "entity_group": "PARAM", "score": 0.999618219367377}, {"start": 373, "end": 380, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987846999826369}, {"start": 381, "end": 383, "word": "80", "entity_group": "LIMIT", "score": 0.9996942137008749}, {"start": 399, "end": 411, "word": "regular wine", "entity_group": "VAR", "score": 0.9999763630700312}, {"start": 424, "end": 431, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990510970538488}, {"start": 432, "end": 434, "word": "50", "entity_group": "LIMIT", "score": 0.9997213369717647}, {"start": 450, "end": 462, "word": "premium wine", "entity_group": "VAR", "score": 0.9999275436860765}, {"start": 485, "end": 489, "word": "only", "entity_group": "CONST_DIR", "score": 0.9957046968628797}, {"start": 516, "end": 519, "word": "120", "entity_group": "LIMIT", "score": 0.9996102833685945}, {"start": 586, "end": 593, "word": "regular", "entity_group": "VAR", "score": 0.9995448427934492}, {"start": 598, "end": 605, "word": "premium", "entity_group": "VAR", "score": 0.9997011630013403}, {"start": 635, "end": 643, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988893035331093}, {"start": 644, "end": 650, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277217247311}]}
{"doc_id": "1524239940", "document": "An electronics store must determine how many monitors and gaming stations to keep in stock. A monitor requires 8 sq ft of floor space, whereas a gaming station requires 12 sq ft. The store has 150 sq ft of floor space available. The profit per monitor sold is $40 and the profit per gaming station sold is $80. The store stocks only monitors and gaming stations. Marketing requirements dictate that at least 40% of all items in stock be gaming stations. Finally, a monitor ties up $180 in capital, and a gaming station, $260. The store wants to have a maximum of $4,000 worth of capital tied up at any time. Formulate an LP that can be used to maximize profit.", "order_mapping": {"monitors": 0, "gaming stations": 1, "monitor": 0, "gaming station": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"monitor": "40", "gaming station": "80"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"monitor": "8", "gaming station": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "gaming stations", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "4,000", "terms": {"monitor": "180", "gaming station": "260"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of monitors\n- y: Number of gaming stations\n\nObjective:\n- The store aims to maximize its profit. The profit per monitor sold is $40 and the profit per gaming station sold is $80. Therefore, the objective function is: Maximize 40x + 80y\n\nConstraints:\n- The store has 150 sq ft of floor space available, and each monitor requires 8 sq ft and each gaming station requires 12 sq ft. This leads to the constraint: 8x + 12y <= 150.\n- Marketing requirements dictate that at least 40% of all items in stock be gaming stations, resulting in the constraint: y >= 0.4(x + y).\n- A monitor ties up $180 in capital, and a gaming station ties up $260. The store wants to have a maximum of $4,000 worth of capital tied up at any time, leading to the constraint: 180x + 260y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 80y\nConstraints:\n8x + 12y <= 150\ny >= 0.4(x + y)\n180x + 260y <= 4000", "canonical": {"objective": [-40.0, -80.0], "constraints": [[8.0, 12.0, 150.0], [0.4, -0.6, 0.0], [180.0, 260.0, 4000.0]]}, "solution": {"x": 0, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Number of monitors to keep in stock: Monitors\n- Number of gaming stations to keep in stock: GamingStations\n\nConstraints:\n- Total floor space used by monitors and gaming stations should not exceed 150 sq ft:\n  8 * Monitors + 12 * GamingStations <= 150\n- At least 40% of all items in stock must be gaming stations:\n  GamingStations >= 0.4 * (Monitors + GamingStations)\n- Total capital tied up by monitors and gaming stations should not exceed $4,000:\n  180 * Monitors + 260 * GamingStations <= 4000\n\nObjective:\n- Maximize profit (Profit per monitor is $40, profit per gaming station is $80):\n  40 * Monitors + 80 * GamingStations\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMonitors = intvar(0, 999999999)  # Number of monitors to keep in stock\nGamingStations = intvar(0, 999999999)  # Number of gaming stations to keep in stock\n\n# Constraints\nm = Model()\n\n# The store has 150 sq ft of floor space available (Monitors require 8 sq ft, Gaming Stations require 12 sq ft):\nm += 8 * Monitors + 12 * GamingStations <= 150\n# Marketing requirements dictate that at least 40% of all items in stock be gaming stations:\nm += GamingStations >= 0.4 * (Monitors + GamingStations)\n# The store wants to have a maximum of $4,000 worth of capital tied up at any time (Monitors tie up $180, Gaming Stations tie up $260):\nm += 180 * Monitors + 260 * GamingStations <= 4000\n\n# Objective\n# Maximize profit (Profit per monitor sold is $40, profit per gaming station sold is $80):\nm.maximize(40 * Monitors + 80 * GamingStations)\n", "entities": [{"start": 45, "end": 53, "word": "monitors", "entity_group": "VAR", "score": 0.9989137838506842}, {"start": 58, "end": 73, "word": "gaming stations", "entity_group": "VAR", "score": 0.9999773970579704}, {"start": 95, "end": 102, "word": "monitor", "entity_group": "VAR", "score": 0.9995433703857827}, {"start": 112, "end": 113, "word": "8", "entity_group": "PARAM", "score": 0.99959153059089}, {"start": 147, "end": 161, "word": "gaming station", "entity_group": "VAR", "score": 0.9999656589931344}, {"start": 171, "end": 173, "word": "12", "entity_group": "PARAM", "score": 0.9996156164798358}, {"start": 196, "end": 199, "word": "150", "entity_group": "LIMIT", "score": 0.9996378050096845}, {"start": 221, "end": 230, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996071493343899}, {"start": 237, "end": 243, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999064381155135}, {"start": 248, "end": 255, "word": "monitor", "entity_group": "VAR", "score": 0.999386678618683}, {"start": 266, "end": 268, "word": "40", "entity_group": "PARAM", "score": 0.9995712875219974}, {"start": 277, "end": 283, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999380550667563}, {"start": 288, "end": 302, "word": "gaming station", "entity_group": "VAR", "score": 0.9999062160982739}, {"start": 313, "end": 315, "word": "80", "entity_group": "PARAM", "score": 0.9995908975972702}, {"start": 340, "end": 348, "word": "monitors", "entity_group": "VAR", "score": 0.9997087822797087}, {"start": 353, "end": 368, "word": "gaming stations", "entity_group": "VAR", "score": 0.9999829514842713}, {"start": 407, "end": 415, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989183477230615}, {"start": 416, "end": 420, "word": "40 %", "entity_group": "LIMIT", "score": 0.9011615433937884}, {"start": 446, "end": 461, "word": "gaming stations", "entity_group": "VAR", "score": 0.9999795675775109}, {"start": 476, "end": 483, "word": "monitor", "entity_group": "VAR", "score": 0.9994347445155042}, {"start": 494, "end": 497, "word": "180", "entity_group": "PARAM", "score": 0.9995762349181001}, {"start": 517, "end": 531, "word": "gaming station", "entity_group": "VAR", "score": 0.9998152197858639}, {"start": 536, "end": 539, "word": "260", "entity_group": "PARAM", "score": 0.9996657917952605}, {"start": 568, "end": 575, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9946789602057579}, {"start": 581, "end": 586, "word": "4,000", "entity_group": "LIMIT", "score": 0.9984394142440742}, {"start": 662, "end": 670, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9931770878204628}, {"start": 671, "end": 677, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998856570334067}]}
{"doc_id": "-823020274", "document": "You are playing a game where you have to throw a ball at a target. Throwing a small ball is worth 5 points and throwing a large ball is worth 2 points. You can throw at most 20 balls total. You must also throw at least 6 small balls and 5 large balls. You cannot throw more than 12 of either type. Assuming you always hit the target, how many balls of each type should you throw to maximize your score? What is that score?", "order_mapping": {"small ball": 0, "large ball": 1, "small balls": 0, "large balls": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "score", "terms": {"small ball": "5", "large ball": "2"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "20", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "6", "var": "small balls", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "large balls", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "12", "var": "small balls", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "12", "var": "large balls", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small balls thrown\n- y: Number of large balls thrown\n\nObjective:\n- The goal is to maximize the score, where throwing a small ball is worth 5 points and throwing a large ball is worth 2 points. Therefore, the objective function is: Maximize 5x + 2y\n\nConstraints:\n- The total number of balls thrown should be at most 20, leading to the constraint: x + y <= 20.\n- At least 6 small balls and 5 large balls must be thrown, resulting in the constraints: x >= 6 and y >= 5.\n- No more than 12 of either type of ball can be thrown, leading to the constraints: x <= 12 and y <= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 2y\nConstraints:\nx + y <= 20\nx >= 6\ny >= 5\nx <= 12\ny <= 12", "canonical": {"objective": [-5.0, -2.0], "constraints": [[1.0, 1.0, 20.0], [-1.0, 0.0, -6.0], [0.0, -1.0, -5.0], [1.0, 0.0, 12.0], [0.0, 1.0, 12.0]]}, "solution": {"x": 12, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of small balls thrown: SmallBalls\n- Number of large balls thrown: LargeBalls\n\nConstraints:\n- Total number of balls thrown should not exceed 20:\n  SmallBalls + LargeBalls <= 20\n- At least 6 small balls should be thrown:\n  SmallBalls >= 6\n- At least 5 large balls should be thrown:\n  LargeBalls >= 5\n- No more than 12 small balls should be thrown:\n  SmallBalls <= 12\n- No more than 12 large balls should be thrown:\n  LargeBalls <= 12\n\nObjective:\n- Maximize score (5 points for small balls, 2 points for large balls):\n  5 * SmallBalls + 2 * LargeBalls\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBalls = intvar(0, 999999999)  # Number of small balls thrown\nLargeBalls = intvar(0, 999999999)  # Number of large balls thrown\n\n# Constraints\nm = Model()\n\n# Total number of balls thrown should not exceed 20:\nm += SmallBalls + LargeBalls <= 20\n# At least 6 small balls should be thrown:\nm += SmallBalls >= 6\n# At least 5 large balls should be thrown:\nm += LargeBalls >= 5\n# No more than 12 small balls should be thrown:\nm += SmallBalls <= 12\n# No more than 12 large balls should be thrown:\nm += LargeBalls <= 12\n\n# Objective\n# Maximize score (5 points for small balls, 2 points for large balls):\nm.maximize(5 * SmallBalls + 2 * LargeBalls)\n", "entities": [{"start": 79, "end": 89, "word": "small ball", "entity_group": "VAR", "score": 0.9997587148974919}, {"start": 99, "end": 100, "word": "5", "entity_group": "PARAM", "score": 0.9995156597209917}, {"start": 101, "end": 107, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9823199037953221}, {"start": 123, "end": 133, "word": "large ball", "entity_group": "VAR", "score": 0.9996431494075192}, {"start": 143, "end": 144, "word": "2", "entity_group": "PARAM", "score": 0.9996155248316074}, {"start": 145, "end": 151, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9882889019482131}, {"start": 168, "end": 175, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9980704681451709}, {"start": 176, "end": 178, "word": "20", "entity_group": "LIMIT", "score": 0.9997159137701488}, {"start": 213, "end": 221, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982264951232855}, {"start": 222, "end": 223, "word": "6", "entity_group": "LIMIT", "score": 0.9995215016284112}, {"start": 224, "end": 235, "word": "small balls", "entity_group": "VAR", "score": 0.9998694603310814}, {"start": 240, "end": 241, "word": "5", "entity_group": "LIMIT", "score": 0.9996600025805127}, {"start": 242, "end": 253, "word": "large balls", "entity_group": "VAR", "score": 0.9999086828701491}, {"start": 274, "end": 283, "word": "more than", "entity_group": "CONST_DIR", "score": 0.993579890576134}, {"start": 284, "end": 286, "word": "12", "entity_group": "LIMIT", "score": 0.9993020656542246}, {"start": 389, "end": 397, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992285455255981}, {"start": 403, "end": 408, "word": "score", "entity_group": "OBJ_NAME", "score": 0.9994258185126484}]}
{"doc_id": "1045884097", "document": "A film production company wants to advertise the release of their new movie using ads in three areas: malls, bus stops, and theatres. They have a weekly advertising budget of $30000. The cost of an ad in each area and their audience reach is given. An ad in a mall costs $5000 and reaches 50000 viewers. An ad at a bus stop costs $1000 and reaches 10000 viewers. An ad in a theatre costs $3000 and reaches 20000 viewers. The city limits the number of ads at a bus stop from a single company to 20. In order to maintain balance, at most a third of the total number of ads should be in theatres and a minimum of 20% of ads should be in malls. How many ads should be run in each of the three areas in order to maximize viewership?", "order_mapping": {"malls": 0, "bus stops": 1, "theatres": 2, "mall": 0, "bus stop": 1, "theatre": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"mall": "50000", "bus stop": "10000", "theatre": "20000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "30000", "terms": {"mall": "5000", "bus stop": "1000", "theatre": "3000"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "limits the number", "limit": "20", "var": "bus stop", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "theatres", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "20%", "var": "malls", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads in malls\n- y: Number of ads at bus stops\n- z: Number of ads in theatres\n\nObjective:\n- The film production company aims to maximize viewership. The audience reach for each ad in the respective areas is given as: malls - 50000 viewers, bus stops - 10000 viewers, theatres - 20000 viewers. Therefore, the objective function is: Maximize 50000x + 10000y + 20000z\n\nConstraints:\n- The weekly advertising budget is $30000, leading to the constraint: 5000x + 1000y + 3000z <= 30000.\n- The city limits the number of ads at a bus stop from a single company to 20, resulting in the constraint: y <= 20.\n- At most a third of the total number of ads should be in theatres, leading to the constraint: z <= (x + y + z)/3.\n- A minimum of 20% of ads should be in malls, resulting in the constraint: x >= 0.20(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50000x + 10000y + 20000z\nConstraints:\n5000x + 1000y + 3000z <= 30000\ny <= 20\nz <= (x + y + z)/3\nx >= 0.20(x + y + z)", "canonical": {"objective": [-50000.0, -10000.0, -20000.0], "constraints": [[5000.0, 1000.0, 3000.0, 30000.0], [0.0, 1.0, 0.0, 20.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.8, 0.2, 0.2, 0.0]]}, "solution": {"x": 6, "y": 0, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of ads in malls: MallAds\n- Number of ads at bus stops: BusStopAds\n- Number of ads in theatres: TheatreAds\n\nConstraints:\n- Weekly advertising budget should not exceed $30000:\n  5000 * MallAds + 1000 * BusStopAds + 3000 * TheatreAds <= 30000\n- At most 20 ads at bus stops:\n  BusStopAds <= 20\n- At most a third of the total number of ads should be in theatres:\n  TheatreAds <= 1/3 * (MallAds + BusStopAds + TheatreAds)\n- A minimum of 20% of ads should be in malls:\n  MallAds >= 0.20 * (MallAds + BusStopAds + TheatreAds)\n\nObjective:\n- Maximize viewership (50000 viewers per mall ad, 10000 viewers per bus stop ad, 20000 viewers per theatre ad):\n  50000 * MallAds + 10000 * BusStopAds + 20000 * TheatreAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMallAds = intvar(0, 999999999)  # Number of ads in malls\nBusStopAds = intvar(0, 999999999)  # Number of ads at bus stops\nTheatreAds = intvar(0, 999999999)  # Number of ads in theatres\n\n# Constraints\nm = Model()\n\n# Weekly advertising budget constraint ($30000):\nm += 5000 * MallAds + 1000 * BusStopAds + 3000 * TheatreAds <= 30000\n# City limits the number of ads at a bus stop to 20:\nm += BusStopAds <= 20\n# At most a third of the total number of ads should be in theatres:\nm += TheatreAds <= (1/3) * (MallAds + BusStopAds + TheatreAds)\n# A minimum of 20% of ads should be in malls:\nm += MallAds >= 0.20 * (MallAds + BusStopAds + TheatreAds)\n\n# Objective\n# Maximize viewership (50000 viewers per mall ad, 10000 viewers per bus stop ad, 20000 viewers per theatre ad):\nm.maximize(50000 * MallAds + 10000 * BusStopAds + 20000 * TheatreAds)\n", "entities": [{"start": 103, "end": 108, "word": "malls", "entity_group": "VAR", "score": 0.999567542325222}, {"start": 111, "end": 120, "word": "bus stops", "entity_group": "VAR", "score": 0.9999824227652717}, {"start": 127, "end": 135, "word": "theatres", "entity_group": "VAR", "score": 0.9992863174806418}, {"start": 169, "end": 175, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9909472120394941}, {"start": 181, "end": 186, "word": "30000", "entity_group": "LIMIT", "score": 0.9996381055340309}, {"start": 267, "end": 271, "word": "mall", "entity_group": "VAR", "score": 0.9997667483020202}, {"start": 280, "end": 284, "word": "5000", "entity_group": "PARAM", "score": 0.9987350559221115}, {"start": 297, "end": 302, "word": "50000", "entity_group": "PARAM", "score": 0.9995180994402146}, {"start": 303, "end": 310, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9925471266762315}, {"start": 324, "end": 332, "word": "bus stop", "entity_group": "VAR", "score": 0.9999342466784943}, {"start": 341, "end": 345, "word": "1000", "entity_group": "PARAM", "score": 0.9992634110347841}, {"start": 358, "end": 363, "word": "10000", "entity_group": "PARAM", "score": 0.9996795535322798}, {"start": 364, "end": 371, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9923711283430372}, {"start": 385, "end": 392, "word": "theatre", "entity_group": "VAR", "score": 0.9997563197275624}, {"start": 401, "end": 405, "word": "3000", "entity_group": "PARAM", "score": 0.9987350463325383}, {"start": 418, "end": 423, "word": "20000", "entity_group": "PARAM", "score": 0.9993541852811726}, {"start": 424, "end": 431, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9948559951304804}, {"start": 443, "end": 460, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9664162169665932}, {"start": 473, "end": 481, "word": "bus stop", "entity_group": "VAR", "score": 0.9999582005799753}, {"start": 507, "end": 509, "word": "20", "entity_group": "LIMIT", "score": 0.9994424030190965}, {"start": 543, "end": 550, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974313753590122}, {"start": 553, "end": 558, "word": "third", "entity_group": "LIMIT", "score": 0.9897929989522146}, {"start": 599, "end": 607, "word": "theatres", "entity_group": "VAR", "score": 0.9997042793457122}, {"start": 614, "end": 621, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9979227909598406}, {"start": 625, "end": 629, "word": "20 %", "entity_group": "LIMIT", "score": 0.9680219558799827}, {"start": 650, "end": 655, "word": "malls", "entity_group": "VAR", "score": 0.9997740278801518}, {"start": 724, "end": 732, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9984898330601576}, {"start": 733, "end": 743, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9980237685507114}]}
{"doc_id": "-1880270232", "document": "You decide to take part in a math contest with algebra questions worth 1 point each and calculus questions worth 3 points each. In this contest, you can answer at most 25 questions. In addition, you must answer at least 10 algebra questions and at least 6 calculus questions. Time restricts you from answering more than 15 of either type. Assuming all your answers are correct, how many of each type of question should you answer to maximize your score? What is your maximum score?", "order_mapping": {"algebra questions": 0, "calculus questions": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "score", "terms": {"algebra questions": "1", "calculus questions": "3"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "25", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "algebra questions", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "6", "var": "calculus questions", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "15", "var": "algebra questions", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "15", "var": "calculus questions", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of algebra questions answered\n- y: Number of calculus questions answered\n\nObjective:\n- The goal is to maximize the score, where algebra questions are worth 1 point each and calculus questions are worth 3 points each. Therefore, the objective function is: Maximize x + 3y\n\nConstraints:\n- The total number of questions answered should be at most 25, leading to the constraint: x + y <= 25.\n- At least 10 algebra questions must be answered, resulting in the constraint: x >= 10.\n- At least 6 calculus questions must be answered, leading to the constraint: y >= 6.\n- You cannot answer more than 15 algebra questions, leading to the constraint: x <= 15.\n- You cannot answer more than 15 calculus questions, leading to the constraint: y <= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 3y\nConstraints:\nx + y <= 25\nx >= 10\ny >= 6\nx <= 15\ny <= 15", "canonical": {"objective": [-1.0, -3.0], "constraints": [[1.0, 1.0, 25.0], [-1.0, 0.0, -10.0], [0.0, -1.0, -6.0], [1.0, 0.0, 15.0], [0.0, 1.0, 15.0]]}, "solution": {"x": 10, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of algebra questions answered: AlgebraQuestions\n- Number of calculus questions answered: CalculusQuestions\n\nConstraints:\n- Total number of questions answered should not exceed 25:\n  AlgebraQuestions + CalculusQuestions <= 25\n- At least 10 algebra questions must be answered:\n  AlgebraQuestions >= 10\n- At least 6 calculus questions must be answered:\n  CalculusQuestions >= 6\n- Cannot answer more than 15 of either type of question:\n  AlgebraQuestions <= 15\n  CalculusQuestions <= 15\n\nObjective:\n- Maximize score (1 point per algebra question, 3 points per calculus question):\n  1 * AlgebraQuestions + 3 * CalculusQuestions\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlgebraQuestions = intvar(0, 999999999)  # Number of algebra questions answered\nCalculusQuestions = intvar(0, 999999999)  # Number of calculus questions answered\n\n# Constraints\nm = Model()\n\n# You can answer at most 25 questions in total:\nm += AlgebraQuestions + CalculusQuestions <= 25\n# You must answer at least 10 algebra questions:\nm += AlgebraQuestions >= 10\n# You must answer at least 6 calculus questions:\nm += CalculusQuestions >= 6\n# You cannot answer more than 15 of either type of question:\nm += AlgebraQuestions <= 15\nm += CalculusQuestions <= 15\n\n# Objective\n# Maximize your score (1 point per algebra question, 3 points per calculus question):\nm.maximize(1 * AlgebraQuestions + 3 * CalculusQuestions)\n", "entities": [{"start": 47, "end": 64, "word": "algebra questions", "entity_group": "VAR", "score": 0.999961763504246}, {"start": 71, "end": 72, "word": "1", "entity_group": "PARAM", "score": 0.998069142513491}, {"start": 73, "end": 78, "word": "point", "entity_group": "OBJ_NAME", "score": 0.9756098238971158}, {"start": 88, "end": 106, "word": "calculus questions", "entity_group": "VAR", "score": 0.9999810541756147}, {"start": 113, "end": 114, "word": "3", "entity_group": "PARAM", "score": 0.9996155286524572}, {"start": 115, "end": 121, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9890416063379228}, {"start": 162, "end": 169, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986785169531162}, {"start": 170, "end": 172, "word": "25", "entity_group": "LIMIT", "score": 0.9997088319686581}, {"start": 215, "end": 223, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988455064330235}, {"start": 224, "end": 226, "word": "10", "entity_group": "LIMIT", "score": 0.9995532688365636}, {"start": 227, "end": 244, "word": "algebra questions", "entity_group": "VAR", "score": 0.9999558164156187}, {"start": 249, "end": 257, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988553361201682}, {"start": 258, "end": 259, "word": "6", "entity_group": "LIMIT", "score": 0.9993326681718474}, {"start": 260, "end": 278, "word": "calculus questions", "entity_group": "VAR", "score": 0.9999514094222508}, {"start": 315, "end": 324, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9955131179105601}, {"start": 325, "end": 327, "word": "15", "entity_group": "LIMIT", "score": 0.99908925830049}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993087658589979}, {"start": 454, "end": 459, "word": "score", "entity_group": "OBJ_NAME", "score": 0.999387162552428}]}
{"doc_id": "2134273494", "document": "A movie theatre can seat at most 100 people. A profit of $15 is made on each moving seat ticket and a profit of $10 is made on each regular seat ticket. The theatre reserves at least 15 seats to be moving seats. However, because many people find them nauseating, at least 3 times as many people prefer sitting in regular seats than in moving seats. How many tickets for each type of seat must be sold in order to maximize profit?", "order_mapping": {"moving seat": 0, "regular seat": 1, "moving seats": 0, "regular seats": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"moving seat": "15", "regular seat": "10"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "moving seats", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular seats", "direction": "at least", "param": "3", "y_var": "moving seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of moving seat tickets sold\n- y: Number of regular seat tickets sold\n\nObjective:\n- The theatre aims to maximize its profit. A profit of $15 is made on each moving seat ticket and a profit of $10 is made on each regular seat ticket. Therefore, the objective function is: Maximize 15x + 10y\n\nConstraints:\n- The theatre can seat at most 100 people, so the constraint is: x + y <= 100.\n- At least 15 seats need to be reserved for moving seats, leading to the constraint: x >= 15.\n- At least 3 times as many people prefer sitting in regular seats than in moving seats, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 15x + 10y\nConstraints:\nx + y <= 100\nx >= 15\ny >= 3x", "canonical": {"objective": [-15.0, -10.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -15.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 25, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Number of moving seat tickets sold: MovingSeats\n- Number of regular seat tickets sold: RegularSeats\n\nConstraints:\n- Total number of tickets sold should not exceed 100:\n  MovingSeats + RegularSeats <= 100\n- At least 15 moving seat tickets must be sold:\n  MovingSeats >= 15\n- At least 3 times as many regular seat tickets as moving seat tickets must be sold:\n  RegularSeats >= 3 * MovingSeats\n\nObjective:\n- Maximize profit ($15 profit per moving seat ticket, $10 profit per regular seat ticket):\n  15 * MovingSeats + 10 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMovingSeats = intvar(0, 999999999)  # Number of moving seat tickets sold\nRegularSeats = intvar(0, 999999999)  # Number of regular seat tickets sold\n\n# Constraints\nm = Model()\n\n# The theatre can seat at most 100 people:\nm += MovingSeats + RegularSeats <= 100\n# At least 15 seats must be moving seats:\nm += MovingSeats >= 15\n# At least 3 times as many people prefer sitting in regular seats than in moving seats:\nm += RegularSeats >= 3 * MovingSeats\n\n# Objective\n# Maximize profit ($15 profit per moving seat ticket, $10 profit per regular seat ticket):\nm.maximize(15 * MovingSeats + 10 * RegularSeats)\n", "entities": [{"start": 25, "end": 32, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988628821469554}, {"start": 33, "end": 36, "word": "100", "entity_group": "LIMIT", "score": 0.9996258009590144}, {"start": 48, "end": 54, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999404892678865}, {"start": 60, "end": 62, "word": "15", "entity_group": "PARAM", "score": 0.999568371665243}, {"start": 79, "end": 90, "word": "moving seat", "entity_group": "VAR", "score": 0.9999794481707422}, {"start": 104, "end": 110, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999556126873025}, {"start": 116, "end": 118, "word": "10", "entity_group": "PARAM", "score": 0.9994832371224065}, {"start": 135, "end": 147, "word": "regular seat", "entity_group": "VAR", "score": 0.9999214702493097}, {"start": 178, "end": 186, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997911869026678}, {"start": 187, "end": 189, "word": "15", "entity_group": "LIMIT", "score": 0.9997187936580969}, {"start": 202, "end": 214, "word": "moving seats", "entity_group": "VAR", "score": 0.999889334792684}, {"start": 270, "end": 278, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979565129865874}, {"start": 279, "end": 280, "word": "3", "entity_group": "PARAM", "score": 0.9981677928086096}, {"start": 320, "end": 333, "word": "regular seats", "entity_group": "VAR", "score": 0.9995074299663963}, {"start": 342, "end": 354, "word": "moving seats", "entity_group": "VAR", "score": 0.9998693643964807}, {"start": 421, "end": 429, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852252863357}, {"start": 430, "end": 436, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912468631}]}
{"doc_id": "-514173020", "document": "A cruise ship has at most 800 rooms. A profit of $200 is made on each single room and a profit of $1200 is made on each couple's room. The cruise ship reserves at least 125 rooms for single rooms. However, a minimum of twice as many passengers prefer to travel as a couple and stay in a couple's room than stay in a single's room. Determine how many rooms of each type must be sold in order to maximize the profit for the cruise ship. What is the maximum profit?", "order_mapping": {"single room": 0, "couple's room": 1, "single rooms": 0, "single's room": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"single room": "200", "couple's room": "1200"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "800", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "125", "var": "single rooms", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "couple's room", "direction": "minimum", "param": "twice", "y_var": "single's room", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of single rooms\n- y: Number of couple's rooms\n\nObjective:\n- The cruise ship aims to maximize its profit. A profit of $200 is made on each single room and a profit of $1200 is made on each couple's room. Therefore, the objective function is: Maximize 200x + 1200y\n\nConstraints:\n- The cruise ship has at most 800 rooms, so the constraint is: x + y <= 800.\n- At least 125 rooms are reserved for single rooms, leading to the constraint: x >= 125.\n- A minimum of twice as many passengers prefer to travel as a couple and stay in a couple's room than stay in a single's room, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 1200y\nConstraints:\nx + y <= 800\nx >= 125\ny >= 2x", "canonical": {"objective": [-200.0, -1200.0], "constraints": [[1.0, 1.0, 800.0], [-1.0, 0.0, -125.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 125, "y": 675}, "pseudo_model": "\nDecision Variables:\n- Number of single rooms sold: SingleRoom\n- Number of couple's rooms sold: CouplesRoom\n\nConstraints:\n- Total number of rooms (single + couple's) should not exceed 800:\n  SingleRoom + CouplesRoom <= 800\n- At least 125 rooms are reserved for single rooms:\n  SingleRoom >= 125\n- A minimum of twice as many passengers prefer to travel as a couple than stay in a single room:\n  CouplesRoom >= 2 * SingleRoom\n\nObjective:\n- Maximize profit ($200 profit per single room, $1200 profit per couple's room):\n  200 * SingleRoom + 1200 * CouplesRoom\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSingleRoom = intvar(0, 999999999)  # Number of single rooms sold\nCouplesRoom = intvar(0, 999999999)  # Number of couple's rooms sold\n\n# Constraints\nm = Model()\n\n# The cruise ship has at most 800 rooms:\nm += SingleRoom + CouplesRoom <= 800\n# At least 125 rooms are reserved for single rooms:\nm += SingleRoom >= 125\n# A minimum of twice as many passengers prefer to travel as a couple than stay in a single room:\nm += CouplesRoom >= 2 * SingleRoom\n\n# Objective\n# Maximize profit ($200 profit per single room, $1200 profit per couple's room):\nm.maximize(200 * SingleRoom + 1200 * CouplesRoom)\n", "entities": [{"start": 18, "end": 25, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989203474429974}, {"start": 26, "end": 29, "word": "800", "entity_group": "LIMIT", "score": 0.9996827195294972}, {"start": 40, "end": 46, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999398737398965}, {"start": 52, "end": 55, "word": "200", "entity_group": "PARAM", "score": 0.9993909153861438}, {"start": 72, "end": 83, "word": "single room", "entity_group": "VAR", "score": 0.9997956787412473}, {"start": 90, "end": 96, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999264122666646}, {"start": 102, "end": 106, "word": "1200", "entity_group": "PARAM", "score": 0.9995530906257499}, {"start": 123, "end": 137, "word": "couple 's room", "entity_group": "VAR", "score": 0.9928836707807126}, {"start": 165, "end": 173, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987984493764996}, {"start": 174, "end": 177, "word": "125", "entity_group": "LIMIT", "score": 0.9996976302665407}, {"start": 188, "end": 200, "word": "single rooms", "entity_group": "VAR", "score": 0.9998935715533233}, {"start": 215, "end": 222, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9990714824207373}, {"start": 226, "end": 231, "word": "twice", "entity_group": "PARAM", "score": 0.9955642968366829}, {"start": 294, "end": 308, "word": "couple 's room", "entity_group": "VAR", "score": 0.9956614361919428}, {"start": 324, "end": 338, "word": "single 's room", "entity_group": "VAR", "score": 0.9942344861630534}, {"start": 404, "end": 412, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985641253611991}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998993093812459}]}
{"doc_id": "-1239927123", "document": "A hockey store can spend at most $20000 on hockey sticks and pucks. A hockey stick costs the store $75 and is sold for a profit of $50. A puck costs the store $2 and is sold for a profit of $5. The store owner estimates that at least 50 but at most 110 hockey sticks are sold each month. The owner also estimates that the number of pucks sold is at most three times the number of hockey sticks sold. How many of each item, hockey sticks and pucks, should be sold in order to maximize profit?", "order_mapping": {"hockey sticks": 0, "pucks": 1, "hockey stick": 0, "puck": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hockey stick": "50", "puck": "5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "20000", "terms": {"hockey stick": "75", "puck": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "hockey sticks", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "110", "var": "hockey sticks", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "pucks", "direction": "at most", "param": "three", "y_var": "hockey sticks", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hockey sticks sold\n- y: Number of pucks sold\n\nObjective:\n- The store aims to maximize its profit. A hockey stick is sold for a profit of $50 and a puck is sold for a profit of $5. Therefore, the objective function is: Maximize 50x + 5y\n\nConstraints:\n- The store can spend at most $20000 on hockey sticks and pucks, so the constraint is: 75x + 2y <= 20000.\n- The number of hockey sticks sold should be at least 50 and at most 110, leading to the constraints: 50 <= x <= 110.\n- The number of pucks sold should be at most three times the number of hockey sticks sold, resulting in the constraint: y <= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 5y\nConstraints:\n75x + 2y <= 20000\n50 <= x <= 110\ny <= 3x", "canonical": {"objective": [-50.0, -5.0], "constraints": [[75.0, 2.0, 20000.0], [-3.0, 1.0, 0.0], [-1.0, 0.0, -50.0], [1.0, 0.0, 110.0]]}, "solution": {"x": 110, "y": 330}, "pseudo_model": "\nDecision Variables:\n- Number of hockey sticks sold: HockeySticks\n- Number of pucks sold: Pucks\n\nConstraints:\n- The store can spend at most $20000 on hockey sticks and pucks:\n  75 * HockeySticks + 2 * Pucks <= 20000\n- At least 50 but at most 110 hockey sticks are sold each month:\n  50 <= HockeySticks <= 110\n- The number of pucks sold is at most three times the number of hockey sticks sold:\n  Pucks <= 3 * HockeySticks\n\nObjective:\n- Maximize profit ($50 profit per hockey stick, $5 profit per puck):\n  50 * HockeySticks + 5 * Pucks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHockeySticks = intvar(0, 999999999)  # Number of hockey sticks sold\nPucks = intvar(0, 999999999)  # Number of pucks sold\n\n# Constraints\nm = Model()\n\n# The store can spend at most $20000 on hockey sticks ($75 each) and pucks ($2 each):\nm += 75 * HockeySticks + 2 * Pucks <= 20000\n# At least 50 but at most 110 hockey sticks are sold each month:\nm += HockeySticks >= 50\nm += HockeySticks <= 110\n# The number of pucks sold is at most three times the number of hockey sticks sold:\nm += Pucks <= 3 * HockeySticks\n\n# Objective\n# Maximize profit ($50 profit per hockey stick, $5 profit per puck):\nm.maximize(50 * HockeySticks + 5 * Pucks)\n", "entities": [{"start": 25, "end": 32, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9959582576256494}, {"start": 35, "end": 40, "word": "20000", "entity_group": "LIMIT", "score": 0.9990461297783916}, {"start": 44, "end": 57, "word": "hockey sticks", "entity_group": "VAR", "score": 0.9999730495784116}, {"start": 62, "end": 67, "word": "pucks", "entity_group": "VAR", "score": 0.9995946266211836}, {"start": 72, "end": 84, "word": "hockey stick", "entity_group": "VAR", "score": 0.9999838037472032}, {"start": 103, "end": 105, "word": "75", "entity_group": "PARAM", "score": 0.9989058423995117}, {"start": 124, "end": 130, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999705370683185}, {"start": 136, "end": 138, "word": "50", "entity_group": "PARAM", "score": 0.9997388551865817}, {"start": 143, "end": 147, "word": "puck", "entity_group": "VAR", "score": 0.9998069789178385}, {"start": 166, "end": 167, "word": "2", "entity_group": "PARAM", "score": 0.9996372856271092}, {"start": 186, "end": 192, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995372734895716}, {"start": 198, "end": 199, "word": "5", "entity_group": "PARAM", "score": 0.9996791796108592}, {"start": 233, "end": 241, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998971845345525}, {"start": 242, "end": 244, "word": "50", "entity_group": "LIMIT", "score": 0.9994639535821402}, {"start": 249, "end": 256, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988949555179201}, {"start": 257, "end": 260, "word": "110", "entity_group": "LIMIT", "score": 0.9994303641813289}, {"start": 261, "end": 274, "word": "hockey sticks", "entity_group": "VAR", "score": 0.999866237433126}, {"start": 341, "end": 346, "word": "pucks", "entity_group": "VAR", "score": 0.9994816703395248}, {"start": 355, "end": 362, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9977861007027501}, {"start": 363, "end": 368, "word": "three", "entity_group": "PARAM", "score": 0.9952977191973958}, {"start": 389, "end": 402, "word": "hockey sticks", "entity_group": "VAR", "score": 0.999940443491187}, {"start": 434, "end": 447, "word": "hockey sticks", "entity_group": "VAR", "score": 0.9999639169037257}, {"start": 452, "end": 457, "word": "pucks", "entity_group": "VAR", "score": 0.999667809442589}, {"start": 487, "end": 495, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.996185251881307}, {"start": 496, "end": 502, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912550554}]}
{"doc_id": "1536366618", "document": "A sandwich store makes peanut butter sandwiches and chocolate spread sandwiches. The store only has enough bread to make at most 150 sandwiches. To stay in business, they must sell at least 45 peanut butter sandwiches and at least 65 chocolate spread sandwiches. However, they only have enough spread, peanut butter and chocolate, to make at most 80 peanut butter sandwiches and at most 100 chocolate spread sandwiches. The profit per peanut butter sandwich is $3 and the profit per chocolate spread sandwich is $2. How many of each sandwich should the store sell to maximize profit?", "order_mapping": {"peanut butter sandwiches": 0, "chocolate spread sandwiches": 1, "peanut butter sandwich": 0, "chocolate spread sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peanut butter sandwich": "3", "chocolate spread sandwich": "2"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "45", "var": "peanut butter sandwiches", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "65", "var": "chocolate spread sandwiches", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "peanut butter sandwiches", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "chocolate spread sandwiches", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of peanut butter sandwiches\n- y: Number of chocolate spread sandwiches\n\nObjective:\n- The store aims to maximize its profit. The profit per peanut butter sandwich is $3 and the profit per chocolate spread sandwich is $2. Therefore, the objective function is: Maximize 3x + 2y\n\nConstraints:\n- The store can make at most 150 sandwiches, so the constraint is: x + y <= 150.\n- The store must sell at least 45 peanut butter sandwiches, leading to the constraint: x >= 45.\n- The store must sell at least 65 chocolate spread sandwiches, leading to the constraint: y >= 65.\n- The store can make at most 80 peanut butter sandwiches, leading to the constraint: x <= 80.\n- The store can make at most 100 chocolate spread sandwiches, leading to the constraint: y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 2y\nConstraints:\nx + y <= 150\nx >= 45\ny >= 65\nx <= 80\ny <= 100", "canonical": {"objective": [-3.0, -2.0], "constraints": [[1.0, 1.0, 150.0], [-1.0, 0.0, -45.0], [0.0, -1.0, -65.0], [1.0, 0.0, 80.0], [0.0, 1.0, 100.0]]}, "solution": {"x": 80, "y": 70}, "pseudo_model": "\nDecision Variables:\n- Number of peanut butter sandwiches sold: PeanutButterSandwiches\n- Number of chocolate spread sandwiches sold: ChocolateSpreadSandwiches\n\nConstraints:\n- Total number of sandwiches made should not exceed 150:\n  PeanutButterSandwiches + ChocolateSpreadSandwiches <= 150\n- At least 45 peanut butter sandwiches must be sold:\n  PeanutButterSandwiches >= 45\n- At least 65 chocolate spread sandwiches must be sold:\n  ChocolateSpreadSandwiches >= 65\n- At most 80 peanut butter sandwiches can be made due to limited spread:\n  PeanutButterSandwiches <= 80\n- At most 100 chocolate spread sandwiches can be made due to limited spread:\n  ChocolateSpreadSandwiches <= 100\n\nObjective:\n- Maximize profit (3 dollars per peanut butter sandwich, 2 dollars per chocolate spread sandwich):\n  3 * PeanutButterSandwiches + 2 * ChocolateSpreadSandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeanutButterSandwiches = intvar(0, 999999999)  # Number of peanut butter sandwiches\nChocolateSpreadSandwiches = intvar(0, 999999999)  # Number of chocolate spread sandwiches\n\n# Constraints\nm = Model()\n\n# The store only has enough bread to make at most 150 sandwiches:\nm += PeanutButterSandwiches + ChocolateSpreadSandwiches <= 150\n# They must sell at least 45 peanut butter sandwiches:\nm += PeanutButterSandwiches >= 45\n# They must sell at least 65 chocolate spread sandwiches:\nm += ChocolateSpreadSandwiches >= 65\n# They only have enough spread to make at most 80 peanut butter sandwiches:\nm += PeanutButterSandwiches <= 80\n# They only have enough spread to make at most 100 chocolate spread sandwiches:\nm += ChocolateSpreadSandwiches <= 100\n\n# Objective\n# Maximize profit (3 dollars per peanut butter sandwich, 2 dollars per chocolate spread sandwich):\nm.maximize(3 * PeanutButterSandwiches + 2 * ChocolateSpreadSandwiches)\n", "entities": [{"start": 23, "end": 47, "word": "peanut butter sandwiches", "entity_group": "VAR", "score": 0.9992360004341533}, {"start": 52, "end": 79, "word": "chocolate spread sandwiches", "entity_group": "VAR", "score": 0.9983648759634461}, {"start": 122, "end": 129, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985957740297475}, {"start": 130, "end": 133, "word": "150", "entity_group": "LIMIT", "score": 0.9997259898539983}, {"start": 184, "end": 192, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989713342571971}, {"start": 193, "end": 195, "word": "45", "entity_group": "LIMIT", "score": 0.9995549815215726}, {"start": 196, "end": 220, "word": "peanut butter sandwiches", "entity_group": "VAR", "score": 0.9995071774265357}, {"start": 225, "end": 233, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999068034660866}, {"start": 234, "end": 236, "word": "65", "entity_group": "LIMIT", "score": 0.99882071743089}, {"start": 237, "end": 264, "word": "chocolate spread sandwiches", "entity_group": "VAR", "score": 0.9994432190420254}, {"start": 346, "end": 353, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988068044655849}, {"start": 354, "end": 356, "word": "80", "entity_group": "LIMIT", "score": 0.9995649449714148}, {"start": 357, "end": 381, "word": "peanut butter sandwiches", "entity_group": "VAR", "score": 0.9995285637636024}, {"start": 386, "end": 393, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989286899827174}, {"start": 394, "end": 397, "word": "100", "entity_group": "LIMIT", "score": 0.9982980864869602}, {"start": 398, "end": 425, "word": "chocolate spread sandwiches", "entity_group": "VAR", "score": 0.999447804353304}, {"start": 432, "end": 438, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999871358957562}, {"start": 443, "end": 465, "word": "peanut butter sandwich", "entity_group": "VAR", "score": 0.999117051967169}, {"start": 471, "end": 472, "word": "3", "entity_group": "PARAM", "score": 0.9993748458351603}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386756622832}, {"start": 492, "end": 517, "word": "chocolate spread sandwich", "entity_group": "VAR", "score": 0.9986784545076128}, {"start": 523, "end": 524, "word": "2", "entity_group": "PARAM", "score": 0.9994415090827489}, {"start": 578, "end": 586, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994859155828357}, {"start": 587, "end": 593, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277417441317}]}
{"doc_id": "-1736245984", "document": "A bookstore can display and sell at most 500 books. A profit of $5 is made on each hardcover book and a profit of $2 is made on each paperback book. The bookstore makes sure a minimum of 50 books displayed are hardcover. However, due to their convenience, at least 5 times as many reader prefer paperback books to hardcover books. Assuming the bookstore can sell all their books, how many of each book type, hardcover and softcover, should be displayed and sold in order to maximize profit?", "order_mapping": {"hardcover book": 0, "paperback book": 1, "hardcover": 0, "paperback books": 1, "hardcover books": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hardcover book": "5", "paperback book": "2"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "50", "var": "hardcover", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "paperback books", "direction": "at least", "param": "5", "y_var": "hardcover books", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hardcover books displayed and sold\n- y: Number of paperback books displayed and sold\n\nObjective:\n- The objective is to maximize the profit. The profit made on each hardcover book is $5 and on each paperback book is $2. Therefore, the objective function is: Maximize 5x + 2y\n\nConstraints:\n- The total number of books displayed and sold cannot exceed 500, leading to the constraint: x + y <= 500.\n- A minimum of 50 books displayed must be hardcover, leading to the constraint: x >= 50.\n- Due to reader preferences, at least 5 times as many readers prefer paperback books to hardcover books, resulting in the constraint: y >= 5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 2y\nConstraints:\nx + y <= 500\nx >= 50\ny >= 5x", "canonical": {"objective": [-5.0, -2.0], "constraints": [[1.0, 1.0, 500.0], [-1.0, 0.0, -50.0], [5.0, -1.0, 0.0]]}, "solution": {"x": 83, "y": 417}, "pseudo_model": "\nDecision Variables:\n- Number of hardcover books: HardcoverBooks\n- Number of paperback books: PaperbackBooks\n\nConstraints:\n- Total number of books (hardcover + paperback) should not exceed 500:\n  HardcoverBooks + PaperbackBooks <= 500\n- At least 50 hardcover books must be displayed:\n  HardcoverBooks >= 50\n- For every hardcover book, there must be at least 5 paperback books due to reader preference:\n  PaperbackBooks >= 5 * HardcoverBooks\n\nObjective:\n- Maximize profit (5 dollars profit per hardcover book, 2 dollars profit per paperback book):\n  5 * HardcoverBooks + 2 * PaperbackBooks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHardcoverBooks = intvar(0, 999999999)  # Number of hardcover books\nPaperbackBooks = intvar(0, 999999999)  # Number of paperback books\n\n# Constraints\nm = Model()\n\n# The bookstore can display and sell at most 500 books:\nm += HardcoverBooks + PaperbackBooks <= 500\n# A minimum of 50 books displayed must be hardcover:\nm += HardcoverBooks >= 50\n# At least 5 times as many readers prefer paperback books to hardcover books:\nm += PaperbackBooks >= 5 * HardcoverBooks\n\n# Objective\n# Maximize profit ($5 profit per hardcover book, $2 profit per paperback book):\nm.maximize(5 * HardcoverBooks + 2 * PaperbackBooks)\n", "entities": [{"start": 33, "end": 40, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988611293617446}, {"start": 41, "end": 44, "word": "500", "entity_group": "LIMIT", "score": 0.9996820842869344}, {"start": 55, "end": 61, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999848376328056}, {"start": 67, "end": 68, "word": "5", "entity_group": "PARAM", "score": 0.9994638541525701}, {"start": 85, "end": 99, "word": "hardcover book", "entity_group": "VAR", "score": 0.9999666472004606}, {"start": 106, "end": 112, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998795843819984}, {"start": 118, "end": 119, "word": "2", "entity_group": "PARAM", "score": 0.9996261442050971}, {"start": 136, "end": 150, "word": "paperback book", "entity_group": "VAR", "score": 0.9998124834259022}, {"start": 180, "end": 187, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9941825664549641}, {"start": 191, "end": 193, "word": "50", "entity_group": "LIMIT", "score": 0.9996301068330776}, {"start": 214, "end": 223, "word": "hardcover", "entity_group": "VAR", "score": 0.9996534535814751}, {"start": 263, "end": 271, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980370229740222}, {"start": 272, "end": 273, "word": "5", "entity_group": "PARAM", "score": 0.9981544845140697}, {"start": 302, "end": 317, "word": "paperback books", "entity_group": "VAR", "score": 0.9998336424034195}, {"start": 321, "end": 336, "word": "hardcover books", "entity_group": "VAR", "score": 0.9999802101400594}, {"start": 485, "end": 493, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995440267660302}, {"start": 494, "end": 500, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9991236384607343}]}
{"doc_id": "-1128760069", "document": "A food truck sells tacos and burritos. To stay in business, they must sell at least 50 tacos and at least 30 burritos. However, they only have enough supplies to make at most 80 tacos and at most 50 burritos. Given their tight schedule, they can also cook at most 100 items total. The profit per taco is $3 and the profit per burrito is $6. How many of each item should they sell to maximize profit?", "order_mapping": {"tacos": 0, "burritos": 1, "taco": 0, "burrito": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"taco": "3", "burrito": "6"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "50", "var": "tacos", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "burritos", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "tacos", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "burritos", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tacos sold\n- y: Number of burritos sold\n\nObjective:\n- The food truck aims to maximize its profit. The profit per taco is $3 and the profit per burrito is $6. Therefore, the objective function is: Maximize 3x + 6y\n\nConstraints:\n- The food truck must sell at least 50 tacos and at least 30 burritos, leading to the constraints: x >= 50 and y >= 30.\n- They can make at most 80 tacos and at most 50 burritos due to supply constraints, resulting in the constraints: x <= 80 and y <= 50.\n- They can cook at most 100 items total, leading to the constraint: x + y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 6y\nConstraints:\nx >= 50\ny >= 30\nx <= 80\ny <= 50\nx + y <= 100", "canonical": {"objective": [-3.0, -6.0], "constraints": [[-1.0, 0.0, -50.0], [0.0, -1.0, -30.0], [1.0, 0.0, 80.0], [0.0, 1.0, 50.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 50, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of tacos sold: Tacos\n- Number of burritos sold: Burritos\n\nConstraints:\n- Must sell at least 50 tacos:\n  Tacos >= 50\n- Must sell at least 30 burritos:\n  Burritos >= 30\n- Can make at most 80 tacos:\n  Tacos <= 80\n- Can make at most 50 burritos:\n  Burritos <= 50\n- Can cook at most 100 items total:\n  Tacos + Burritos <= 100\n\nObjective:\n- Maximize profit (3 dollars per taco, 6 dollars per burrito):\n  3 * Tacos + 6 * Burritos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTacos = intvar(0, 999999999)  # Number of tacos sold\nBurritos = intvar(0, 999999999)  # Number of burritos sold\n\n# Constraints\nm = Model()\n\n# Must sell at least 50 tacos:\nm += Tacos >= 50\n# Must sell at least 30 burritos:\nm += Burritos >= 30\n# Can make at most 80 tacos:\nm += Tacos <= 80\n# Can make at most 50 burritos:\nm += Burritos <= 50\n# Can cook at most 100 items total:\nm += Tacos + Burritos <= 100\n\n# Objective\n# Maximize profit (3 dollars per taco, 6 dollars per burrito):\nm.maximize(3 * Tacos + 6 * Burritos)\n", "entities": [{"start": 19, "end": 24, "word": "tacos", "entity_group": "VAR", "score": 0.99956993643215}, {"start": 29, "end": 37, "word": "burritos", "entity_group": "VAR", "score": 0.9994241654109374}, {"start": 77, "end": 85, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990154284018535}, {"start": 86, "end": 88, "word": "50", "entity_group": "LIMIT", "score": 0.9996996024208241}, {"start": 89, "end": 94, "word": "tacos", "entity_group": "VAR", "score": 0.9993163894397826}, {"start": 99, "end": 107, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988870932977755}, {"start": 108, "end": 110, "word": "30", "entity_group": "LIMIT", "score": 0.9997493456504282}, {"start": 111, "end": 119, "word": "burritos", "entity_group": "VAR", "score": 0.9993085870945245}, {"start": 137, "end": 141, "word": "only", "entity_group": "CONST_DIR", "score": 0.9855474368188447}, {"start": 171, "end": 178, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998940063023188}, {"start": 179, "end": 181, "word": "80", "entity_group": "LIMIT", "score": 0.9997121671851934}, {"start": 182, "end": 187, "word": "tacos", "entity_group": "VAR", "score": 0.9989288015300619}, {"start": 192, "end": 199, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989653886814773}, {"start": 200, "end": 202, "word": "50", "entity_group": "LIMIT", "score": 0.999750385075634}, {"start": 203, "end": 211, "word": "burritos", "entity_group": "VAR", "score": 0.9995095716227076}, {"start": 262, "end": 269, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987846000841611}, {"start": 270, "end": 273, "word": "100", "entity_group": "LIMIT", "score": 0.9997393654333492}, {"start": 292, "end": 298, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999899234361332}, {"start": 303, "end": 307, "word": "taco", "entity_group": "VAR", "score": 0.9991622515700732}, {"start": 313, "end": 314, "word": "3", "entity_group": "PARAM", "score": 0.999346963426249}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998239681828303}, {"start": 334, "end": 341, "word": "burrito", "entity_group": "VAR", "score": 0.9983777760556537}, {"start": 347, "end": 348, "word": "6", "entity_group": "PARAM", "score": 0.9994255863740704}, {"start": 393, "end": 401, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995899089792601}, {"start": 402, "end": 408, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269817457224}]}
{"doc_id": "-1583408116", "document": "A farmer has 30 acres available to grow carrots and beets. He must grow a minimum of 3 acres of carrots and 5 acres of beets. Beets sell better so he prefers to plant more beets than carrots. However, due to labor constraints, he can only plant at most 2 times the quantity of beets as carrots. If the profit per acre of carrots is $500 and the profit per acre of beets is $400, how many acres of each should the farmer plant to maximize profit?", "order_mapping": {"carrots": 0, "beets": 1, "Beets": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carrots": "500", "beets": "400"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "30", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "3", "var": "carrots", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5", "var": "beets", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "beets", "direction": "at most", "param": "2", "y_var": "carrots", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of carrots\n- y: Acres of beets\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of carrots is $500 and the profit per acre of beets is $400. Therefore, the objective function is: Maximize 500x + 400y\n\nConstraints:\n- The farmer has 30 acres available for planting, so the constraint is: x + y <= 30.\n- The farmer must grow a minimum of 3 acres of carrots and 5 acres of beets, leading to the constraints: x >= 3 and y >= 5.\n- Due to labor constraints, the farmer can only plant at most 2 times the quantity of beets as carrots, resulting in the constraint: y <= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 400y\nConstraints:\nx + y <= 30\nx >= 3\ny >= 5\ny <= 2x", "canonical": {"objective": [-500.0, -400.0], "constraints": [[1.0, 1.0, 30.0], [-1.0, 0.0, -3.0], [0.0, -1.0, -5.0], [-2.0, 1.0, 0.0]]}, "solution": {"x": 25, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of acres planted with carrots: Carrots\n- Number of acres planted with beets: Beets\n\nConstraints:\n- Total acres planted should not exceed 30:\n  Carrots + Beets <= 30\n- At least 3 acres of carrots:\n  Carrots >= 3\n- At least 5 acres of beets:\n  Beets >= 5\n- Beets planted should be at most 2 times the quantity of carrots planted:\n  Beets <= 2 * Carrots\n\nObjective:\n- Maximize profit (500 dollars per acre of carrots, 400 dollars per acre of beets):\n  500 * Carrots + 400 * Beets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # Number of acres planted with carrots\nBeets = intvar(0, 999999999)  # Number of acres planted with beets\n\n# Constraints\nm = Model()\n\n# Total acres planted should not exceed 30:\nm += Carrots + Beets <= 30\n# At least 3 acres of carrots:\nm += Carrots >= 3\n# At least 5 acres of beets:\nm += Beets >= 5\n# Beets planted should be at most 2 times the quantity of carrots planted:\nm += Beets <= 2 * Carrots\n\n# Objective\n# Maximize profit (500 dollars per acre of carrots, 400 dollars per acre of beets):\nm.maximize(500 * Carrots + 400 * Beets)\n", "entities": [{"start": 13, "end": 15, "word": "30", "entity_group": "LIMIT", "score": 0.9995308667999099}, {"start": 22, "end": 31, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992901589859086}, {"start": 40, "end": 47, "word": "carrots", "entity_group": "VAR", "score": 0.9992967992577224}, {"start": 52, "end": 57, "word": "beets", "entity_group": "VAR", "score": 0.9989941200279051}, {"start": 75, "end": 82, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9970486447151458}, {"start": 86, "end": 87, "word": "3", "entity_group": "LIMIT", "score": 0.9997814741545931}, {"start": 97, "end": 104, "word": "carrots", "entity_group": "VAR", "score": 0.998880651333581}, {"start": 109, "end": 110, "word": "5", "entity_group": "LIMIT", "score": 0.9996778432363389}, {"start": 120, "end": 125, "word": "beets", "entity_group": "VAR", "score": 0.9996328971957167}, {"start": 128, "end": 133, "word": "Beets", "entity_group": "VAR", "score": 0.9997416739794988}, {"start": 134, "end": 138, "word": "sell", "entity_group": "OBJ_NAME", "score": 0.9121799487943875}, {"start": 174, "end": 179, "word": "beets", "entity_group": "VAR", "score": 0.999619751086413}, {"start": 185, "end": 192, "word": "carrots", "entity_group": "VAR", "score": 0.9996033622375027}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974524437622132}, {"start": 258, "end": 259, "word": "2", "entity_group": "PARAM", "score": 0.998030208350968}, {"start": 282, "end": 287, "word": "beets", "entity_group": "VAR", "score": 0.9994806504454962}, {"start": 291, "end": 298, "word": "carrots", "entity_group": "VAR", "score": 0.9997804577182534}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998995444242064}, {"start": 327, "end": 334, "word": "carrots", "entity_group": "VAR", "score": 0.9994952128922175}, {"start": 340, "end": 343, "word": "500", "entity_group": "PARAM", "score": 0.999380999208618}, {"start": 352, "end": 358, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355064788751}, {"start": 371, "end": 376, "word": "beets", "entity_group": "VAR", "score": 0.9992838139769245}, {"start": 382, "end": 385, "word": "400", "entity_group": "PARAM", "score": 0.9996451587839122}, {"start": 438, "end": 446, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534739831}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "199345366", "document": "There is only 5000 grams of a rare flower extract needed to make both youth and adult doses. Youth doses contain 20 grams of extract and adult doses contain 35 grams. Demand is such that at least three times as many youth doses are needed than the adult doses. A minimum of 10 adult doses need to be made. Youth doses are sold for a profit of $5 while adult doses are sold at a profit of $3. How many of each dose should be prepared to maximize profit?", "order_mapping": {"youth": 0, "adult doses": 1, "Youth doses": 0, "youth doses": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Youth doses": "5", "adult doses": "3"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "5000", "terms": {"Youth doses": "20", "adult doses": "35"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "youth doses", "direction": "at least", "param": "three", "y_var": "adult doses", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10", "var": "adult doses", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of youth doses\n- y: Number of adult doses\n\nObjective:\n- The goal is to maximize the profit from selling the doses. Youth doses are sold for a profit of $5 each, and adult doses are sold for a profit of $3 each. Therefore, the objective function is: Maximize 5x + 3y\n\nConstraints:\n- There are only 5000 grams of the rare flower extract available, so the constraint is: 20x + 35y <= 5000.\n- The demand requires at least three times as many youth doses as adult doses, leading to the constraint: x >= 3y.\n- A minimum of 10 adult doses need to be made, resulting in the constraint: y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3y\nConstraints:\n20x + 35y <= 5000\nx >= 3y\ny >= 10", "canonical": {"objective": [-5.0, -3.0], "constraints": [[20.0, 35.0, 5000.0], [-1.0, 3.0, 0.0], [0.0, -1.0, -10.0]]}, "solution": {"x": 232, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of youth doses prepared: YouthDoses\n- Number of adult doses prepared: AdultDoses\n\nConstraints:\n- Total weight of the rare flower extract used should not exceed 5000 grams (20 grams per youth dose, 35 grams per adult dose):\n  20 * YouthDoses + 35 * AdultDoses <= 5000\n- At least three times as many youth doses are needed than the adult doses:\n  YouthDoses >= 3 * AdultDoses\n- A minimum of 10 adult doses need to be made:\n  AdultDoses >= 10\n\nObjective:\n- Maximize profit (5 dollars per youth dose, 3 dollars per adult dose):\n  5 * YouthDoses + 3 * AdultDoses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nYouthDoses = intvar(0, 999999999)  # Number of youth doses prepared\nAdultDoses = intvar(0, 999999999)  # Number of adult doses prepared\n\n# Constraints\nm = Model()\n\n# Total weight of the rare flower extract used should not exceed 5000 grams:\nm += 20 * YouthDoses + 35 * AdultDoses <= 5000\n# At least three times as many youth doses are needed than the adult doses:\nm += YouthDoses >= 3 * AdultDoses\n# A minimum of 10 adult doses need to be made:\nm += AdultDoses >= 10\n\n# Objective\n# Maximize profit (5 dollars per youth dose, 3 dollars per adult dose):\nm.maximize(5 * YouthDoses + 3 * AdultDoses)\n", "entities": [{"start": 9, "end": 13, "word": "only", "entity_group": "CONST_DIR", "score": 0.9951024777216284}, {"start": 14, "end": 18, "word": "5000", "entity_group": "LIMIT", "score": 0.9985811024638106}, {"start": 70, "end": 75, "word": "youth", "entity_group": "VAR", "score": 0.9989978637906999}, {"start": 80, "end": 91, "word": "adult doses", "entity_group": "VAR", "score": 0.9999271539631173}, {"start": 94, "end": 105, "word": "Youth doses", "entity_group": "VAR", "score": 0.9999837645721448}, {"start": 114, "end": 116, "word": "20", "entity_group": "PARAM", "score": 0.9996399064683296}, {"start": 138, "end": 149, "word": "adult doses", "entity_group": "VAR", "score": 0.9999433938833006}, {"start": 158, "end": 160, "word": "35", "entity_group": "PARAM", "score": 0.9996662988046687}, {"start": 189, "end": 197, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979893919587953}, {"start": 198, "end": 203, "word": "three", "entity_group": "PARAM", "score": 0.9936479004109121}, {"start": 218, "end": 229, "word": "youth doses", "entity_group": "VAR", "score": 0.9999824233525964}, {"start": 250, "end": 261, "word": "adult doses", "entity_group": "VAR", "score": 0.999887840781949}, {"start": 266, "end": 273, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9965202849086965}, {"start": 277, "end": 279, "word": "10", "entity_group": "LIMIT", "score": 0.998619869944993}, {"start": 280, "end": 291, "word": "adult doses", "entity_group": "VAR", "score": 0.9999266111278259}, {"start": 310, "end": 321, "word": "Youth doses", "entity_group": "VAR", "score": 0.9999760888330593}, {"start": 337, "end": 343, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999481821575812}, {"start": 349, "end": 350, "word": "5", "entity_group": "PARAM", "score": 0.9994837895012831}, {"start": 357, "end": 368, "word": "adult doses", "entity_group": "VAR", "score": 0.9999185169241056}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993747149931616}, {"start": 395, "end": 396, "word": "3", "entity_group": "PARAM", "score": 0.9994357883564365}, {"start": 443, "end": 451, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800851728}, {"start": 452, "end": 458, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147306236481}]}
{"doc_id": "856152554", "document": "A shoe company makes black and blue shoes. The company can make at most 150 black shoes and at most 100 blue shoes everyday. Long-term projections indicate an expected demand of at least 75 black shoes and 60 blue shoes each day. The company has a contract with a store, and a minimum of 125 shoes must be shipped each day. If each black shoe sold results in a $3 loss, but each blue shoe sold results in a $6 profit, how many of each type of shoe should be made daily to maximize net profits?", "order_mapping": {"black": 0, "blue shoes": 1, "black shoes": 0, "black shoe": 0, "blue shoe": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "net profits", "terms": {"black shoe": "3", "blue shoe": "6"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "150", "var": "black shoes", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "blue shoes", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "75", "var": "black shoes", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "blue shoes", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "125", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of black shoes made daily\n- y: Number of blue shoes made daily\n\nObjective:\n- The company aims to maximize its net profits. Each black shoe sold results in a $3 loss, but each blue shoe sold results in a $6 profit. Therefore, the objective function is: Maximize 6y - 3x\n\nConstraints:\n- The company can make at most 150 black shoes and at most 100 blue shoes everyday, leading to the constraints: x <= 150 and y <= 100.\n- Long-term projections indicate an expected demand of at least 75 black shoes and 60 blue shoes each day, resulting in the constraints: x >= 75 and y >= 60.\n- A minimum of 125 shoes must be shipped each day, leading to the constraint: x + y >= 125.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 6y - 3x\nConstraints:\nx <= 150\ny <= 100\nx >= 75\ny >= 60\nx + y >= 125", "canonical": {"objective": [3.0, -6.0], "constraints": [[1.0, 0.0, 150.0], [0.0, 1.0, 100.0], [-1.0, 0.0, -75.0], [0.0, -1.0, -60.0], [-1.0, -1.0, -125.0]]}, "solution": {"x": 75, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of black shoes made per day: BlackShoes\n- Number of blue shoes made per day: BlueShoes\n\nConstraints:\n- At most 150 black shoes and at most 100 blue shoes can be made every day:\n  BlackShoes <= 150\n  BlueShoes <= 100\n- Expected demand of at least 75 black shoes and 60 blue shoes each day:\n  BlackShoes >= 75\n  BlueShoes >= 60\n- A minimum of 125 shoes must be shipped each day:\n  BlackShoes + BlueShoes >= 125\n\nObjective:\n- Maximize net profits (considering $3 loss per black shoe and $6 profit per blue shoe):\n  -3 * BlackShoes + 6 * BlueShoes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlackShoes = intvar(0, 999999999)  # Number of black shoes made per day\nBlueShoes = intvar(0, 999999999)  # Number of blue shoes made per day\n\n# Constraints\nm = Model()\n\n# The company can make at most 150 black shoes and at most 100 blue shoes every day:\nm += BlackShoes <= 150\nm += BlueShoes <= 100\n\n# Expected demand of at least 75 black shoes and 60 blue shoes each day:\nm += BlackShoes >= 75\nm += BlueShoes >= 60\n\n# A minimum of 125 shoes must be shipped each day:\nm += BlackShoes + BlueShoes >= 125\n\n# Objective\n# Maximize net profits (each black shoe sold results in a $3 loss, but each blue shoe sold results in a $6 profit):\n# Note: Since black shoes result in a loss, we subtract the cost from the profit of blue shoes.\nm.maximize(-3 * BlackShoes + 6 * BlueShoes)\n", "entities": [{"start": 21, "end": 26, "word": "black", "entity_group": "VAR", "score": 0.9991806138689581}, {"start": 31, "end": 41, "word": "blue shoes", "entity_group": "VAR", "score": 0.9999832785802724}, {"start": 65, "end": 72, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987458348924722}, {"start": 73, "end": 76, "word": "150", "entity_group": "LIMIT", "score": 0.9995550557849878}, {"start": 77, "end": 88, "word": "black shoes", "entity_group": "VAR", "score": 0.9999447997192744}, {"start": 93, "end": 100, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988216892083681}, {"start": 101, "end": 104, "word": "100", "entity_group": "LIMIT", "score": 0.9995794280639629}, {"start": 105, "end": 115, "word": "blue shoes", "entity_group": "VAR", "score": 0.9999575178317418}, {"start": 182, "end": 190, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984600854292369}, {"start": 191, "end": 193, "word": "75", "entity_group": "LIMIT", "score": 0.9994511569408036}, {"start": 194, "end": 205, "word": "black shoes", "entity_group": "VAR", "score": 0.9999735521380912}, {"start": 210, "end": 212, "word": "60", "entity_group": "LIMIT", "score": 0.9996088650472231}, {"start": 213, "end": 223, "word": "blue shoes", "entity_group": "VAR", "score": 0.9999803839907002}, {"start": 283, "end": 290, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.99466552441817}, {"start": 294, "end": 297, "word": "125", "entity_group": "LIMIT", "score": 0.99974063683142}, {"start": 339, "end": 349, "word": "black shoe", "entity_group": "VAR", "score": 0.9999662007295403}, {"start": 370, "end": 371, "word": "3", "entity_group": "PARAM", "score": 0.9995060247460031}, {"start": 372, "end": 376, "word": "loss", "entity_group": "OBJ_NAME", "score": 0.9798437317424505}, {"start": 388, "end": 397, "word": "blue shoe", "entity_group": "VAR", "score": 0.9999490169964531}, {"start": 418, "end": 419, "word": "6", "entity_group": "PARAM", "score": 0.9988508251016274}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998546446199384}, {"start": 483, "end": 491, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998420652439287}, {"start": 492, "end": 503, "word": "net profits", "entity_group": "OBJ_NAME", "score": 0.9822778841926985}]}
{"doc_id": "1615543212", "document": "Avian cosmetics makes luxury beauty products whose main customers are wealthy women, both young girls and middle-aged women. In order to promote their product line, they decided to invest in short commercial spots on two types of programs: concerts and cinema. While each concert commercial is seen by 9 million young girls and 4 million middle-aged women, each cinema commercial is seen by 5 million young girls and 45 million middle-aged women. A 1-minute concert ad costs $80,000, and a 1-minute cinema ad costs $30,000. Avian would like the commercials to be seen by at least 86 million young girls and 72 million middle-aged women. Use linear programming to determine how Avian cosmetics can meet its advertising requirements at minimum cost.", "order_mapping": {"concerts": 0, "cinema": 1, "concert commercial": 0, "cinema commercial": 1, "concert ad": 0, "cinema ad": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"cinema ad": "30,000", "concert ad": "80,000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "86", "terms": {"concert commercial": "9", "cinema commercial": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "72", "terms": {"concert commercial": "4", "cinema commercial": "45"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of concert commercials\n- y: Number of cinema commercials\n\nObjective:\n- Avian cosmetics aims to minimize its advertising costs. The cost of a 1-minute concert ad is $80,000, and the cost of a 1-minute cinema ad is $30,000. Therefore, the objective function is: Minimize 80000x + 30000y\n\nConstraints:\n- The commercials need to be seen by at least 86 million young girls and 72 million middle-aged women. Each concert commercial is seen by 9 million young girls and 4 million middle-aged women, and each cinema commercial is seen by 5 million young girls and 45 million middle-aged women. This leads to the constraints: 9x + 5y >= 86 and 4x + 45y >= 72.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 80000x + 30000y\nConstraints:\n9x + 5y >= 86\n4x + 45y >= 72", "canonical": {"objective": [80000.0, 30000.0], "constraints": [[-9.0, -5.0, -86.0], [-4.0, -45.0, -72.0]]}, "solution": {"x": 0, "y": 18}, "pseudo_model": "\nDecision Variables:\n- Number of 1-minute concert ads: ConcertAds\n- Number of 1-minute cinema ads: CinemaAds\n\nConstraints:\n- Commercials to be seen by at least 86 million young girls:\n  9 * ConcertAds + 5 * CinemaAds >= 86\n- Commercials to be seen by at least 72 million middle-aged women:\n  4 * ConcertAds + 45 * CinemaAds >= 72\n\nObjective:\n- Minimize cost ($80,000 per concert ad, $30,000 per cinema ad):\n  80000 * ConcertAds + 30000 * CinemaAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nConcertAds = intvar(0, 999999999)  # Number of 1-minute concert ads\nCinemaAds = intvar(0, 999999999)  # Number of 1-minute cinema ads\n\n# Constraints\nm = Model()\n\n# Commercials to be seen by at least 86 million young girls:\nm += 9 * ConcertAds + 5 * CinemaAds >= 86\n# Commercials to be seen by at least 72 million middle-aged women:\nm += 4 * ConcertAds + 45 * CinemaAds >= 72\n\n# Objective\n# Minimize cost ($80,000 per concert ad, $30,000 per cinema ad):\nm.minimize(80000 * ConcertAds + 30000 * CinemaAds)\n", "entities": [{"start": 246, "end": 254, "word": "concerts", "entity_group": "VAR", "score": 0.999624534274795}, {"start": 259, "end": 265, "word": "cinema", "entity_group": "VAR", "score": 0.9997127976510717}, {"start": 279, "end": 297, "word": "concert commercial", "entity_group": "VAR", "score": 0.9999138859620206}, {"start": 309, "end": 310, "word": "9", "entity_group": "PARAM", "score": 0.9995182392254347}, {"start": 335, "end": 336, "word": "4", "entity_group": "PARAM", "score": 0.9997122889349334}, {"start": 372, "end": 389, "word": "cinema commercial", "entity_group": "VAR", "score": 0.9999851033158534}, {"start": 401, "end": 402, "word": "5", "entity_group": "PARAM", "score": 0.9995182502785528}, {"start": 427, "end": 429, "word": "45", "entity_group": "PARAM", "score": 0.9997122146828135}, {"start": 473, "end": 483, "word": "concert ad", "entity_group": "VAR", "score": 0.9999501626509594}, {"start": 484, "end": 489, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994332556030429}, {"start": 492, "end": 498, "word": "80,000", "entity_group": "PARAM", "score": 0.9995666572820252}, {"start": 518, "end": 527, "word": "cinema ad", "entity_group": "VAR", "score": 0.9999771226080483}, {"start": 528, "end": 533, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995429045475105}, {"start": 536, "end": 542, "word": "30,000", "entity_group": "PARAM", "score": 0.9994894203223735}, {"start": 592, "end": 600, "word": "at least", "entity_group": "CONST_DIR", "score": 0.99883938389308}, {"start": 601, "end": 603, "word": "86", "entity_group": "LIMIT", "score": 0.9994337789003233}, {"start": 628, "end": 630, "word": "72", "entity_group": "LIMIT", "score": 0.9995465596920605}, {"start": 758, "end": 765, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9883528231266757}, {"start": 766, "end": 770, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986507206300791}]}
{"doc_id": "-99634492", "document": "A fruit farmer has two small farms where he grows apples, oranges, and pears. It costs $500 per day to operate farm 1 and $400 per day to operate farm 2. In a day, farm 1 yields 10 apples, 15 oranges, and 5 pears. In a day, farm 2 yields 7 apples, 8 oranges, and 9 pears. The farmer must provide 50 apples, 60 oranges, and 55 pears to the market. Formulate a LP to minimize the farmer's cost.", "order_mapping": {"farm 1": 0, "farm 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"farm 1": "500", "farm 2": "400"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "50", "terms": {"farm 1": "10", "farm 2": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "60", "terms": {"farm 1": "15", "farm 2": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "55", "terms": {"farm 1": "5", "farm 2": "9"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Days of operation for farm 1\n- y: Days of operation for farm 2\n\nObjective:\n- The farmer aims to minimize his cost. It costs $500 per day to operate farm 1 and $400 per day to operate farm 2. Therefore, the objective function is: Minimize 500x + 400y\n\nConstraints:\n- The farmer must provide 50 apples to the market, which can be formulated as: 10x + 7y >= 50\n- The farmer must provide 60 oranges to the market, which can be formulated as: 15x + 8y >= 60\n- The farmer must provide 55 pears to the market, which can be formulated as: 5x + 9y >= 55\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 400y\nConstraints:\n10x + 7y >= 50\n15x + 8y >= 60\n5x + 9y >= 55", "canonical": {"objective": [500.0, 400.0], "constraints": [[-10.0, -7.0, -50.0], [-15.0, -8.0, -60.0], [-5.0, -9.0, -55.0]]}, "solution": {"x": 1, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of days farm 1 operates: Farm1Days\n- Number of days farm 2 operates: Farm2Days\n\nConstraints:\n- To provide at least 50 apples:\n  10 * Farm1Days + 7 * Farm2Days >= 50\n- To provide at least 60 oranges:\n  15 * Farm1Days + 8 * Farm2Days >= 60\n- To provide at least 55 pears:\n  5 * Farm1Days + 9 * Farm2Days >= 55\n\nObjective:\n- Minimize the farmer's cost ($500 per day for farm 1, $400 per day for farm 2):\n  500 * Farm1Days + 400 * Farm2Days\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFarm1Days = intvar(0, 999999999)  # Number of days farm 1 operates\nFarm2Days = intvar(0, 999999999)  # Number of days farm 2 operates\n\n# Constraints\nm = Model()\n\n# The farmer must provide at least 50 apples:\nm += 10 * Farm1Days + 7 * Farm2Days >= 50\n# The farmer must provide at least 60 oranges:\nm += 15 * Farm1Days + 8 * Farm2Days >= 60\n# The farmer must provide at least 55 pears:\nm += 5 * Farm1Days + 9 * Farm2Days >= 55\n\n# Objective\n# Minimize the farmer's cost ($500 per day for farm 1, $400 per day for farm 2):\nm.minimize(500 * Farm1Days + 400 * Farm2Days)\n", "entities": [{"start": 84, "end": 89, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996416238879501}, {"start": 92, "end": 95, "word": "500", "entity_group": "PARAM", "score": 0.9997011525927019}, {"start": 115, "end": 121, "word": "farm 1", "entity_group": "VAR", "score": 0.9997909515506979}, {"start": 128, "end": 131, "word": "400", "entity_group": "PARAM", "score": 0.9997213492322291}, {"start": 151, "end": 157, "word": "farm 2", "entity_group": "VAR", "score": 0.9997627052507962}, {"start": 171, "end": 177, "word": "farm 1", "entity_group": "VAR", "score": 0.9998560455830363}, {"start": 185, "end": 187, "word": "10", "entity_group": "PARAM", "score": 0.9993291370860091}, {"start": 197, "end": 199, "word": "15", "entity_group": "PARAM", "score": 0.9996933675741329}, {"start": 214, "end": 215, "word": "5", "entity_group": "PARAM", "score": 0.9995244394615449}, {"start": 235, "end": 241, "word": "farm 2", "entity_group": "VAR", "score": 0.999855665100692}, {"start": 249, "end": 250, "word": "7", "entity_group": "PARAM", "score": 0.9993287173605101}, {"start": 260, "end": 261, "word": "8", "entity_group": "PARAM", "score": 0.9996933474594362}, {"start": 276, "end": 277, "word": "9", "entity_group": "PARAM", "score": 0.9996301419562346}, {"start": 302, "end": 309, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9929866325871898}, {"start": 310, "end": 312, "word": "50", "entity_group": "LIMIT", "score": 0.9984227520817444}, {"start": 322, "end": 324, "word": "60", "entity_group": "LIMIT", "score": 0.9994666724915697}, {"start": 339, "end": 341, "word": "55", "entity_group": "LIMIT", "score": 0.9995840555886303}, {"start": 382, "end": 390, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9990593793574463}, {"start": 405, "end": 409, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9985686462616123}]}
{"doc_id": "-2138783197", "document": "A store manufactures 2 types of tools, hammers and screwdrivers, which require the use of two machines, a lathe and a CNG. It takes 28 minutes on the lathe and 82 minutes on CNG machine to manufacture a package of hammers, while it takes 23 minutes on the lathe and 76 minutes on the CNG machine to manufacture a package of screwdrivers. Each machine is available for a maximum of 720 minutes on any day. The manufacturer can sell a package of hammers at a profit of $72 and a package of screwdrivers at a profit of $70. Assuming that he can sell all the tools he manufactures, how many packages of each type should the store owner produce in a day in order to maximize his profit? Determine the maximum profit.", "order_mapping": {"hammers": 0, "screwdrivers": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hammers": "72", "screwdrivers": "70"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "720", "terms": {"hammers": "28", "screwdrivers": "76"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "720", "terms": {"hammers": "82", "screwdrivers": "23"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of hammers\n- y: Number of packages of screwdrivers\n\nObjective:\n- The store owner aims to maximize his profit. The profit from selling a package of hammers is $72 and the profit from selling a package of screwdrivers is $70. Therefore, the objective function is: Maximize 72x + 70y\n\nConstraints:\n- The time taken to manufacture the packages of hammers and screwdrivers on the lathe and CNG machines must not exceed the available time of 720 minutes. This leads to the constraints: 28x + 23y <= 720 (lathe) and 82x + 76y <= 720 (CNG).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 72x + 70y\nConstraints:\n28x + 23y <= 720\n82x + 76y <= 720", "canonical": {"objective": [-72.0, -70.0], "constraints": [[28.0, 23.0, 720.0], [82.0, 76.0, 720.0]]}, "solution": {"x": 6, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of packages of hammers produced per day: Hammers\n- Number of packages of screwdrivers produced per day: Screwdrivers\n\nConstraints:\n- Lathe machine time for hammers and screwdrivers should not exceed 720 minutes per day:\n  28 * Hammers + 23 * Screwdrivers <= 720\n- CNG machine time for hammers and screwdrivers should not exceed 720 minutes per day:\n  82 * Hammers + 76 * Screwdrivers <= 720\n\nObjective:\n- Maximize profit (72 dollars per package of hammers, 70 dollars per package of screwdrivers):\n  72 * Hammers + 70 * Screwdrivers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHammers = intvar(0, 999999999)  # Number of packages of hammers produced per day\nScrewdrivers = intvar(0, 999999999)  # Number of packages of screwdrivers produced per day\n\n# Constraints\nm = Model()\n\n# Lathe machine time constraint (28 minutes for hammers, 23 minutes for screwdrivers, maximum of 720 minutes):\nm += 28 * Hammers + 23 * Screwdrivers <= 720\n# CNG machine time constraint (82 minutes for hammers, 76 minutes for screwdrivers, maximum of 720 minutes):\nm += 82 * Hammers + 76 * Screwdrivers <= 720\n\n# Objective\n# Maximize profit (72 dollars per package of hammers, 70 dollars per package of screwdrivers):\nm.maximize(72 * Hammers + 70 * Screwdrivers)\n", "entities": [{"start": 40, "end": 47, "word": "hammers", "entity_group": "VAR", "score": 0.9995028978226035}, {"start": 52, "end": 64, "word": "screwdrivers", "entity_group": "VAR", "score": 0.9996388342713363}, {"start": 136, "end": 138, "word": "28", "entity_group": "PARAM", "score": 0.9997211667932815}, {"start": 164, "end": 166, "word": "82", "entity_group": "PARAM", "score": 0.9997396941250108}, {"start": 218, "end": 225, "word": "hammers", "entity_group": "VAR", "score": 0.9997870928899004}, {"start": 243, "end": 245, "word": "23", "entity_group": "PARAM", "score": 0.9997096788612082}, {"start": 271, "end": 273, "word": "76", "entity_group": "PARAM", "score": 0.9996550002992792}, {"start": 329, "end": 341, "word": "screwdrivers", "entity_group": "VAR", "score": 0.99969775682909}, {"start": 376, "end": 383, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9971718413635237}, {"start": 387, "end": 390, "word": "720", "entity_group": "LIMIT", "score": 0.9997108682441143}, {"start": 451, "end": 458, "word": "hammers", "entity_group": "VAR", "score": 0.9991229089001231}, {"start": 464, "end": 470, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994404139829887}, {"start": 476, "end": 478, "word": "72", "entity_group": "PARAM", "score": 0.9993958837548672}, {"start": 496, "end": 508, "word": "screwdrivers", "entity_group": "VAR", "score": 0.9995127277752965}, {"start": 514, "end": 520, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9984966961209284}, {"start": 526, "end": 528, "word": "70", "entity_group": "PARAM", "score": 0.9996529197834056}, {"start": 672, "end": 680, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9923990483040284}, {"start": 685, "end": 691, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999179864248325}]}
{"doc_id": "-504122344", "document": "A furniture maker creates two types of tables, standing table and dining table. It takes 2 hours to produce the parts of a standing table and 4 hours for those of a dining table. In addition, it takes 1 hour and 2.5 hours to assemble a dining table and standing table respectively. Finally, polishing a dining table takes 1.5 hours whereas polishing a standing table requires 2 hours. Every month, there are a total of 6000 hours available for producing the parts, 3000 hours for assembling the parts, and 4500 hours for polishing the tables. If the profit made on a standing table is $45 and the profit on a dining table $95, how many of each type of tables should be manufactured  to maximize the total monthly profit?", "order_mapping": {"standing table": 0, "dining table": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"standing table": "45", "dining table": "95"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "6000", "terms": {"standing table": "2", "dining table": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"dining table": "1", "standing table": "2.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4500", "terms": {"dining table": "1.5", "standing table": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of standing tables to be manufactured\n- y: Number of dining tables to be manufactured\n\nObjective:\n- The furniture maker aims to maximize the total monthly profit. The profit made on a standing table is $45 and the profit on a dining table is $95. Therefore, the objective function is: Maximize 45x + 95y\n\nConstraints:\n- Production of parts: 2x + 4y <= 6000 (available hours for producing the parts)\n- Assembly: 2.5x + y <= 3000 (available hours for assembling the parts)\n- Polishing: 2x + 1.5y <= 4500 (available hours for polishing the tables)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 45x + 95y\nConstraints:\n2x + 4y <= 6000\n2.5x + y <= 3000\n2x + 1.5y <= 4500", "canonical": {"objective": [-45.0, -95.0], "constraints": [[2.0, 4.0, 6000.0], [2.5, 1.0, 3000.0], [2.0, 1.5, 4500.0]]}, "solution": {"x": 0, "y": 1500}, "pseudo_model": "\nDecision Variables:\n- Number of standing tables manufactured: StandingTable\n- Number of dining tables manufactured: DiningTable\n\nConstraints:\n- Total hours for producing parts should not exceed 6000 hours:\n  2 * StandingTable + 4 * DiningTable <= 6000\n- Total hours for assembling should not exceed 3000 hours:\n  2.5 * StandingTable + 1 * DiningTable <= 3000\n- Total hours for polishing should not exceed 4500 hours:\n  2 * StandingTable + 1.5 * DiningTable <= 4500\n\nObjective:\n- Maximize total monthly profit (Profit: $45 per standing table, $95 per dining table):\n  45 * StandingTable + 95 * DiningTable\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStandingTable = intvar(0, 999999999)  # Number of standing tables manufactured\nDiningTable = intvar(0, 999999999)  # Number of dining tables manufactured\n\n# Constraints\nm = Model()\n\n# Total hours available for producing the parts of tables (6000 hours):\nm += 2 * StandingTable + 4 * DiningTable <= 6000\n# Total hours available for assembling the tables (3000 hours):\nm += 2.5 * StandingTable + 1 * DiningTable <= 3000\n# Total hours available for polishing the tables (4500 hours):\nm += 2 * StandingTable + 1.5 * DiningTable <= 4500\n\n# Objective\n# Maximize total monthly profit (Profit: $45 per standing table, $95 per dining table):\nm.maximize(45 * StandingTable + 95 * DiningTable)\n", "entities": [{"start": 48, "end": 62, "word": "standing table", "entity_group": "VAR", "score": 0.9999724112493701}, {"start": 67, "end": 79, "word": "dining table", "entity_group": "VAR", "score": 0.9999786912273368}, {"start": 91, "end": 92, "word": "2", "entity_group": "PARAM", "score": 0.999260971121325}, {"start": 125, "end": 139, "word": "standing table", "entity_group": "VAR", "score": 0.9999423223458043}, {"start": 144, "end": 145, "word": "4", "entity_group": "PARAM", "score": 0.9995757784842617}, {"start": 167, "end": 179, "word": "dining table", "entity_group": "VAR", "score": 0.9998891285837426}, {"start": 205, "end": 206, "word": "1", "entity_group": "PARAM", "score": 0.9988839966661877}, {"start": 216, "end": 219, "word": "2.5", "entity_group": "PARAM", "score": 0.9996906294146675}, {"start": 240, "end": 252, "word": "dining table", "entity_group": "VAR", "score": 0.9998234572198378}, {"start": 257, "end": 271, "word": "standing table", "entity_group": "VAR", "score": 0.9999624408004654}, {"start": 309, "end": 321, "word": "dining table", "entity_group": "VAR", "score": 0.9997776506272162}, {"start": 328, "end": 331, "word": "1.5", "entity_group": "PARAM", "score": 0.9994001074700393}, {"start": 358, "end": 372, "word": "standing table", "entity_group": "VAR", "score": 0.9999548255724022}, {"start": 382, "end": 383, "word": "2", "entity_group": "PARAM", "score": 0.9995804621821915}, {"start": 427, "end": 431, "word": "6000", "entity_group": "LIMIT", "score": 0.9997634733218218}, {"start": 438, "end": 447, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991625497343782}, {"start": 474, "end": 478, "word": "3000", "entity_group": "LIMIT", "score": 0.9996585741422709}, {"start": 516, "end": 520, "word": "4500", "entity_group": "LIMIT", "score": 0.9996639515694334}, {"start": 561, "end": 567, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998714922419053}, {"start": 578, "end": 592, "word": "standing table", "entity_group": "VAR", "score": 0.9999459770880925}, {"start": 598, "end": 600, "word": "45", "entity_group": "PARAM", "score": 0.9996081969234417}, {"start": 609, "end": 615, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999378186986225}, {"start": 621, "end": 633, "word": "dining table", "entity_group": "VAR", "score": 0.9999423961764932}, {"start": 636, "end": 638, "word": "95", "entity_group": "PARAM", "score": 0.9996489832825839}, {"start": 699, "end": 707, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995642876901192}, {"start": 726, "end": 732, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999577383789569}]}
{"doc_id": "971456192", "document": "A laundromat mixes cans of product from two companies, Omega and Omini, to create a new mixture. A can from Omega costs $30 while a can from Omini costs $40. A can from Omega contains 3 units of water, 5 units of detergent, and 6 units of bleach. A can from Omini contains 5 units of water, 6 units of detergent, and 5 units of bleach. The new mixture must contain at least 30 units of water, 35 units of detergent, and 40 units of bleach. How many cans from each brand should be used to create the mixture at minimum cost?", "order_mapping": {"Omega": 0, "Omini": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Omega": "30", "Omini": "40"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"Omega": "3", "Omini": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "35", "terms": {"Omega": "5", "Omini": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"Omega": "6", "Omini": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans from Omega\n- y: Number of cans from Omini\n\nObjective:\n- The laundromat aims to minimize the cost of creating the mixture. A can from Omega costs $30 while a can from Omini costs $40. Therefore, the objective function is: Minimize 30x + 40y\n\nConstraints:\n- The new mixture must contain at least 30 units of water, 35 units of detergent, and 40 units of bleach. This leads to the following constraints:\n    - 3x + 5y >= 30 (water constraint)\n    - 5x + 6y >= 35 (detergent constraint)\n    - 6x + 5y >= 40 (bleach constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 30x + 40y\nConstraints:\n3x + 5y >= 30\n5x + 6y >= 35\n6x + 5y >= 40", "canonical": {"objective": [30.0, 40.0], "constraints": [[-3.0, -5.0, -30.0], [-5.0, -6.0, -35.0], [-6.0, -5.0, -40.0]]}, "solution": {"x": 5, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of cans from Omega: Omega\n- Number of cans from Omini: Omini\n\nConstraints:\n- The new mixture must contain at least 30 units of water:\n  3 * Omega + 5 * Omini >= 30\n- The new mixture must contain at least 35 units of detergent:\n  5 * Omega + 6 * Omini >= 35\n- The new mixture must contain at least 40 units of bleach:\n  6 * Omega + 5 * Omini >= 40\n\nObjective:\n- Minimize cost ($30 per can from Omega, $40 per can from Omini):\n  30 * Omega + 40 * Omini\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOmega = intvar(0, 999999999)  # Number of cans from Omega\nOmini = intvar(0, 999999999)  # Number of cans from Omini\n\n# Constraints\nm = Model()\n\n# The new mixture must contain at least 30 units of water:\nm += 3 * Omega + 5 * Omini >= 30\n# The new mixture must contain at least 35 units of detergent:\nm += 5 * Omega + 6 * Omini >= 35\n# The new mixture must contain at least 40 units of bleach:\nm += 6 * Omega + 5 * Omini >= 40\n\n# Objective\n# Minimize cost ($30 per can from Omega, $40 per can from Omini):\nm.minimize(30 * Omega + 40 * Omini)\n", "entities": [{"start": 56, "end": 61, "word": "Omega", "entity_group": "VAR", "score": 0.9964697261318748}, {"start": 66, "end": 71, "word": "Omini", "entity_group": "VAR", "score": 0.999816124154482}, {"start": 111, "end": 116, "word": "Omega", "entity_group": "VAR", "score": 0.9989405769596942}, {"start": 117, "end": 122, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9940516216150731}, {"start": 125, "end": 127, "word": "30", "entity_group": "PARAM", "score": 0.9993747859766142}, {"start": 145, "end": 150, "word": "Omini", "entity_group": "VAR", "score": 0.999621670384102}, {"start": 151, "end": 156, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9918019559814006}, {"start": 159, "end": 161, "word": "40", "entity_group": "PARAM", "score": 0.9996267056405272}, {"start": 175, "end": 180, "word": "Omega", "entity_group": "VAR", "score": 0.9996189979616174}, {"start": 190, "end": 191, "word": "3", "entity_group": "PARAM", "score": 0.9996617064504695}, {"start": 209, "end": 210, "word": "5", "entity_group": "PARAM", "score": 0.9997351843769471}, {"start": 236, "end": 237, "word": "6", "entity_group": "PARAM", "score": 0.9995426446405217}, {"start": 267, "end": 272, "word": "Omini", "entity_group": "VAR", "score": 0.9996328508279527}, {"start": 282, "end": 283, "word": "5", "entity_group": "PARAM", "score": 0.9996618810165466}, {"start": 301, "end": 302, "word": "6", "entity_group": "PARAM", "score": 0.999735196553216}, {"start": 328, "end": 329, "word": "5", "entity_group": "PARAM", "score": 0.9994075209122185}, {"start": 377, "end": 385, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992162424170342}, {"start": 386, "end": 388, "word": "30", "entity_group": "LIMIT", "score": 0.9997491120308802}, {"start": 406, "end": 408, "word": "35", "entity_group": "LIMIT", "score": 0.9997467003420433}, {"start": 434, "end": 436, "word": "40", "entity_group": "LIMIT", "score": 0.9992643924108567}, {"start": 525, "end": 532, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9940955709605471}, {"start": 533, "end": 537, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9980202410050345}]}
{"doc_id": "2091753729", "document": "A company manufactures two calculators: scientific and graphing, using silicon, plastic, and silver. To make a scientific calculator, 2 grams of silicon, 4 grams of plastic, and 1 gram of silver are needed. The profit per scientific calculator is $6. To make a graphing calculator, 4 grams of silicon, 6 grams of plastic, and 2 grams of silver are needed. The profit per graphing calculator is $8. Even though the company can sell as many calculators as it produces, there is only 100 grams of silicon, 200 grams of plastic, and 50 grams of silver available. Formulate a LP to maximize profit.", "order_mapping": {"scientific": 0, "graphing": 1, "scientific calculator": 1, "graphing calculator": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"scientific calculator": "6", "graphing calculator": "8"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "100", "terms": {"scientific calculator": "2", "graphing calculator": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "only", "limit": "200", "terms": {"graphing calculator": "6", "scientific calculator": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"scientific calculator": "1", "graphing calculator": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of scientific calculators produced\n- y: Number of graphing calculators produced\n\nObjective:\n- The company aims to maximize its profit. The profit per scientific calculator is $6 and the profit per graphing calculator is $8. Therefore, the objective function is: Maximize 6x + 8y\n\nConstraints:\n- The company has limited resources: 100 grams of silicon, 200 grams of plastic, and 50 grams of silver. The usage of resources for each type of calculator can be represented as:\n  - 2x + 4y <= 100 (silicon constraint)\n  - 4x + 6y <= 200 (plastic constraint)\n  - x + 2y <= 50 (silver constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 6x + 8y\nConstraints:\n2x + 4y <= 100\n4x + 6y <= 200\nx + 2y <= 50", "canonical": {"objective": [-6.0, -8.0], "constraints": [[2.0, 4.0, 100.0], [4.0, 6.0, 200.0], [1.0, 2.0, 50.0]]}, "solution": {"x": 50, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of scientific calculators produced: Scientific\n- Number of graphing calculators produced: Graphing\n\nConstraints:\n- Silicon usage for both types of calculators should not exceed 100 grams:\n  2 * Scientific + 4 * Graphing <= 100\n- Plastic usage for both types of calculators should not exceed 200 grams:\n  4 * Scientific + 6 * Graphing <= 200\n- Silver usage for both types of calculators should not exceed 50 grams:\n  1 * Scientific + 2 * Graphing <= 50\n\nObjective:\n- Maximize profit (6 dollars per scientific calculator, 8 dollars per graphing calculator):\n  6 * Scientific + 8 * Graphing\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nScientific = intvar(0, 999999999)  # Number of scientific calculators produced\nGraphing = intvar(0, 999999999)  # Number of graphing calculators produced\n\n# Constraints\nm = Model()\n\n# Silicon constraint (100 grams available):\nm += 2 * Scientific + 4 * Graphing <= 100\n# Plastic constraint (200 grams available):\nm += 4 * Scientific + 6 * Graphing <= 200\n# Silver constraint (50 grams available):\nm += 1 * Scientific + 2 * Graphing <= 50\n\n# Objective\n# Maximize profit (6 dollars per scientific calculator, 8 dollars per graphing calculator):\nm.maximize(6 * Scientific + 8 * Graphing)\n", "entities": [{"start": 41, "end": 51, "word": "scientific", "entity_group": "VAR", "score": 0.9995119962425555}, {"start": 56, "end": 64, "word": "graphing", "entity_group": "VAR", "score": 0.999723117382893}, {"start": 116, "end": 137, "word": "scientific calculator", "entity_group": "VAR", "score": 0.9998114732141304}, {"start": 140, "end": 141, "word": "2", "entity_group": "PARAM", "score": 0.9996930159090729}, {"start": 161, "end": 162, "word": "4", "entity_group": "PARAM", "score": 0.9997345967033381}, {"start": 186, "end": 187, "word": "1", "entity_group": "PARAM", "score": 0.9995714236335372}, {"start": 220, "end": 226, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999209863832824}, {"start": 231, "end": 252, "word": "scientific calculator", "entity_group": "VAR", "score": 0.9997084867565188}, {"start": 258, "end": 259, "word": "6", "entity_group": "PARAM", "score": 0.9996474201658457}, {"start": 272, "end": 291, "word": "graphing calculator", "entity_group": "VAR", "score": 0.9997628731905429}, {"start": 294, "end": 295, "word": "4", "entity_group": "PARAM", "score": 0.9996707583332819}, {"start": 315, "end": 316, "word": "6", "entity_group": "PARAM", "score": 0.9997345478360278}, {"start": 340, "end": 341, "word": "2", "entity_group": "PARAM", "score": 0.9996924908925073}, {"start": 375, "end": 381, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999209899885464}, {"start": 386, "end": 405, "word": "graphing calculator", "entity_group": "VAR", "score": 0.9996814468880633}, {"start": 411, "end": 412, "word": "8", "entity_group": "PARAM", "score": 0.9997233320341113}, {"start": 494, "end": 498, "word": "only", "entity_group": "CONST_DIR", "score": 0.9963163790907937}, {"start": 499, "end": 502, "word": "100", "entity_group": "LIMIT", "score": 0.9988666649030271}, {"start": 522, "end": 525, "word": "200", "entity_group": "LIMIT", "score": 0.9997544751057575}, {"start": 549, "end": 551, "word": "50", "entity_group": "LIMIT", "score": 0.999654238522062}, {"start": 568, "end": 577, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978086556480181}, {"start": 598, "end": 606, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994119848742253}, {"start": 607, "end": 613, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995116611392297}]}
{"doc_id": "681150852", "document": "A peanut farmer has to send his product to the city. He can transport his peanut packages on the train which can take 80 packages per trip or by truck which can take 50 packages per trip. The cost per train trip is $50 and the cost per truck trip is $40. He wants to spend at most $3000 and the number of train trips must not exceed the number of truck trips. Formulate a LP to maximize the number of peanut packages that can be transported.", "order_mapping": {"train": 0, "truck": 1, "train trip": 0, "truck trip": 1, "train trips": 0, "truck trips": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of peanut packages", "terms": {"train": "80", "truck": "50"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "3000", "terms": {"train trip": "50", "truck trip": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "train trips", "direction": "must not exceed", "y_var": "truck trips", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of train trips\n- y: Number of truck trips\n\nObjective:\n- The farmer aims to maximize the number of peanut packages that can be transported. The train can take 80 packages per trip and the truck can take 50 packages per trip. Therefore, the objective function is: Maximize 80x + 50y\n\nConstraints:\n- The farmer wants to spend at most $3000, so the cost constraint is: 50x + 40y <= 3000.\n- The number of train trips must not exceed the number of truck trips, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 80x + 50y\nConstraints:\n50x + 40y <= 3000\nx <= y", "canonical": {"objective": [-80.0, -50.0], "constraints": [[50.0, 40.0, 3000.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 32, "y": 35}, "pseudo_model": "\nDecision Variables:\n- Number of train trips: TrainTrips\n- Number of truck trips: TruckTrips\n\nConstraints:\n- Total cost of trips should not exceed $3000 (cost per train trip is $50, cost per truck trip is $40):\n  50 * TrainTrips + 40 * TruckTrips <= 3000\n- Number of train trips must not exceed the number of truck trips:\n  TrainTrips <= TruckTrips\n\nObjective:\n- Maximize the number of peanut packages transported (80 packages per train trip, 50 packages per truck trip):\n  80 * TrainTrips + 50 * TruckTrips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrainTrips = intvar(0, 999999999)  # Number of train trips\nTruckTrips = intvar(0, 999999999)  # Number of truck trips\n\n# Constraints\nm = Model()\n\n# The cost for the trips should not exceed $3000 ($50 per train trip, $40 per truck trip):\nm += 50 * TrainTrips + 40 * TruckTrips <= 3000\n# The number of train trips must not exceed the number of truck trips:\nm += TrainTrips <= TruckTrips\n\n# Objective\n# Maximize the number of peanut packages transported (80 packages per train trip, 50 packages per truck trip):\nm.maximize(80 * TrainTrips + 50 * TruckTrips)\n", "entities": [{"start": 98, "end": 103, "word": "train", "entity_group": "VAR", "score": 0.9993442852176022}, {"start": 119, "end": 121, "word": "80", "entity_group": "PARAM", "score": 0.9996952636588272}, {"start": 122, "end": 130, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.9967442561320179}, {"start": 146, "end": 151, "word": "truck", "entity_group": "VAR", "score": 0.9937831334425301}, {"start": 167, "end": 169, "word": "50", "entity_group": "PARAM", "score": 0.9995566067875951}, {"start": 170, "end": 178, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.9939275601033176}, {"start": 203, "end": 213, "word": "train trip", "entity_group": "VAR", "score": 0.9999779952269379}, {"start": 219, "end": 221, "word": "50", "entity_group": "PARAM", "score": 0.9996496779137264}, {"start": 239, "end": 249, "word": "truck trip", "entity_group": "VAR", "score": 0.9999425909332694}, {"start": 255, "end": 257, "word": "40", "entity_group": "PARAM", "score": 0.9996736909178084}, {"start": 278, "end": 285, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9966218245471362}, {"start": 288, "end": 292, "word": "3000", "entity_group": "LIMIT", "score": 0.9994740099944803}, {"start": 311, "end": 322, "word": "train trips", "entity_group": "VAR", "score": 0.9999197016967978}, {"start": 323, "end": 338, "word": "must not exceed", "entity_group": "CONST_DIR", "score": 0.9911423138981463}, {"start": 353, "end": 364, "word": "truck trips", "entity_group": "VAR", "score": 0.9999693756043737}, {"start": 385, "end": 393, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993350215167104}, {"start": 398, "end": 423, "word": "number of peanut packages", "entity_group": "OBJ_NAME", "score": 0.9751537994909462}]}
{"doc_id": "-1176603373", "document": "Emma makes fancy dresses and suits in her shop. Both of these items require use of a sewing machine and embroidery machine. A dress requires 2 hours on the sewing machine and 4 hours on the embroidery machine. A suit requires 1 hour on the sewing machine and 1 hour on the embroidery machine. In a week, there are 30 hours available on the sewing machine and 50 hours available on the embroidery machine.  If the profit per dress is $500 and the profit per suit is $800, what should the weekly production be to maximize profit?", "order_mapping": {"dresses": 0, "suits": 1, "dress": 0, "suit": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"dress": "500", "suit": "800"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "30", "terms": {"dress": "2", "suit": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"dress": "4", "suit": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of dresses produced per week\n- y: Number of suits produced per week\n\nObjective:\n- The objective is to maximize the weekly profit. The profit per dress is $500 and the profit per suit is $800. Therefore, the objective function is: Maximize 500x + 800y\n\nConstraints:\n- The production of dresses and suits should not exceed the available hours on the sewing machine, which translates to the constraint: 2x + y <= 30.\n- The production of dresses and suits should not exceed the available hours on the embroidery machine, leading to the constraint: 4x + y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 800y\nConstraints:\n2x + y <= 30\n4x + y <= 50", "canonical": {"objective": [-500.0, -800.0], "constraints": [[2.0, 1.0, 30.0], [4.0, 1.0, 50.0]]}, "solution": {"x": 0, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of dresses made per week: Dresses\n- Number of suits made per week: Suits\n\nConstraints:\n- Sewing machine hours for dresses and suits should not exceed 30 hours per week:\n  2 * Dresses + 1 * Suits <= 30\n- Embroidery machine hours for dresses and suits should not exceed 50 hours per week:\n  4 * Dresses + 1 * Suits <= 50\n\nObjective:\n- Maximize profit (500 dollars per dress, 800 dollars per suit):\n  500 * Dresses + 800 * Suits\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDresses = intvar(0, 999999999)  # Number of dresses made per week\nSuits = intvar(0, 999999999)  # Number of suits made per week\n\n# Constraints\nm = Model()\n\n# Total hours used on the sewing machine should not exceed 30 hours per week:\nm += 2 * Dresses + 1 * Suits <= 30\n# Total hours used on the embroidery machine should not exceed 50 hours per week:\nm += 4 * Dresses + 1 * Suits <= 50\n\n# Objective\n# Maximize profit (500 dollars per dress, 800 dollars per suit):\nm.maximize(500 * Dresses + 800 * Suits)\n", "entities": [{"start": 17, "end": 24, "word": "dresses", "entity_group": "VAR", "score": 0.9996076083135725}, {"start": 29, "end": 34, "word": "suits", "entity_group": "VAR", "score": 0.9988518791841345}, {"start": 128, "end": 133, "word": "dress", "entity_group": "VAR", "score": 0.9997130820093943}, {"start": 143, "end": 144, "word": "2", "entity_group": "PARAM", "score": 0.9993266101120819}, {"start": 177, "end": 178, "word": "4", "entity_group": "PARAM", "score": 0.9996642510586209}, {"start": 215, "end": 219, "word": "suit", "entity_group": "VAR", "score": 0.9997681554762287}, {"start": 229, "end": 230, "word": "1", "entity_group": "PARAM", "score": 0.9973911244583104}, {"start": 262, "end": 263, "word": "1", "entity_group": "PARAM", "score": 0.9995930959949105}, {"start": 319, "end": 321, "word": "30", "entity_group": "LIMIT", "score": 0.9995810500031254}, {"start": 328, "end": 337, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991687448283199}, {"start": 364, "end": 366, "word": "50", "entity_group": "LIMIT", "score": 0.9996191056652352}, {"start": 373, "end": 382, "word": "available", "entity_group": "CONST_DIR", "score": 0.998934571020728}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996422978647257}, {"start": 429, "end": 434, "word": "dress", "entity_group": "VAR", "score": 0.9995387262592373}, {"start": 440, "end": 443, "word": "500", "entity_group": "PARAM", "score": 0.999162505470233}, {"start": 452, "end": 458, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999094567805057}, {"start": 463, "end": 467, "word": "suit", "entity_group": "VAR", "score": 0.9991319763900834}, {"start": 473, "end": 476, "word": "800", "entity_group": "PARAM", "score": 0.9996032331278542}, {"start": 519, "end": 527, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993393604278421}, {"start": 528, "end": 534, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999445799962448}]}
{"doc_id": "-298923797", "document": "A company has international employees earning $500 per week and local employees earning $1200 per week. The projects require at least 50 employees, of whom at least 12 have to be local employees. Due to corporate law, the number of local employees should be at least a third of the number of international employees. It is also required to keep the weekly wage bill below $40000. Formulate a LP to minimize the wage bill.", "order_mapping": {"international employees": 0, "local employees": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"international employees": "500", "local employees": "1200"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "local employees", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "local employees", "direction": "at least", "param": "third", "y_var": "international employees", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "below", "limit": "40000", "terms": {"international employees": "500", "local employees": "1200"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of international employees\n- y: Number of local employees\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both international and local employees. Given that international employees earn $500 per week and local employees earn $1200 per week, the objective function is: Minimize 500x + 1200y\n\nConstraints:\n- The company needs to have at least 50 employees in total, forming the constraint: x + y >= 50.\n- At least 12 employees must be local, hence the constraint: y >= 12.\n- To comply with corporate law, the number of local employees should be at least a third of the number of international employees: y >= 1/3x.\n- To control costs, the total wages for all employees need to be kept below $40000 per week, leading to the constraint: 500x + 1200y <= 40000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 1200y\nConstraints:\nx + y >= 50\ny >= 12\ny >= 1/3x\n500x + 1200y <= 40000", "canonical": {"objective": [500.0, 1200.0], "constraints": [[-1.0, -1.0, -50.0], [0.0, -1.0, -12.0], [0.3333333333333333, -1.0, 0.0], [500.0, 1200.0, 40000.0]]}, "solution": {"x": 37, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of international employees: InternationalEmployees\n- Number of local employees: LocalEmployees\n\nConstraints:\n- Total number of employees should be at least 50:\n  InternationalEmployees + LocalEmployees >= 50\n- At least 12 employees must be local:\n  LocalEmployees >= 12\n- The number of local employees should be at least a third of the number of international employees:\n  LocalEmployees >= 1/3 * InternationalEmployees\n- Weekly wage bill should be below $40000:\n  500 * InternationalEmployees + 1200 * LocalEmployees <= 40000\n\nObjective:\n- Minimize the wage bill:\n  500 * InternationalEmployees + 1200 * LocalEmployees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nInternationalEmployees = intvar(0, 999999999)  # Number of international employees\nLocalEmployees = intvar(0, 999999999)  # Number of local employees\n\n# Constraints\nm = Model()\n\n# The projects require at least 50 employees:\nm += InternationalEmployees + LocalEmployees >= 50\n# At least 12 have to be local employees:\nm += LocalEmployees >= 12\n# The number of local employees should be at least a third of the number of international employees:\nm += LocalEmployees >= (1/3) * InternationalEmployees\n# Keep the weekly wage bill below $40000:\nm += 500 * InternationalEmployees + 1200 * LocalEmployees <= 40000\n\n# Objective\n# Minimize the wage bill:\nm.minimize(500 * InternationalEmployees + 1200 * LocalEmployees)\n", "entities": [{"start": 14, "end": 37, "word": "international employees", "entity_group": "VAR", "score": 0.9999847693379977}, {"start": 38, "end": 45, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9940672095692121}, {"start": 48, "end": 51, "word": "500", "entity_group": "PARAM", "score": 0.9995703878858733}, {"start": 65, "end": 80, "word": "local employees", "entity_group": "VAR", "score": 0.999934736299682}, {"start": 81, "end": 88, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9891757219900466}, {"start": 91, "end": 95, "word": "1200", "entity_group": "PARAM", "score": 0.999401378042999}, {"start": 128, "end": 136, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987931433561996}, {"start": 137, "end": 139, "word": "50", "entity_group": "LIMIT", "score": 0.9997118849714646}, {"start": 160, "end": 168, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982045345742275}, {"start": 169, "end": 171, "word": "12", "entity_group": "LIMIT", "score": 0.9996771058530558}, {"start": 183, "end": 198, "word": "local employees", "entity_group": "VAR", "score": 0.9999098149459864}, {"start": 238, "end": 253, "word": "local employees", "entity_group": "VAR", "score": 0.999900110715828}, {"start": 264, "end": 272, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997349790309611}, {"start": 275, "end": 280, "word": "third", "entity_group": "PARAM", "score": 0.993165214904404}, {"start": 298, "end": 321, "word": "international employees", "entity_group": "VAR", "score": 0.9999800793223599}, {"start": 373, "end": 378, "word": "below", "entity_group": "CONST_DIR", "score": 0.9959216226697674}, {"start": 381, "end": 386, "word": "40000", "entity_group": "LIMIT", "score": 0.9997038085363893}, {"start": 407, "end": 415, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987589269542352}, {"start": 416, "end": 429, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.6142171259011224}]}
{"doc_id": "658868371", "document": "My cousin sells two different coffee blends: the Drummondville blend and the Victoriaville blend. Each blend contains both arabica and robusta coffee beans. A bag of the Drummondville blend contains 600 grams of arabica beans and 400 grams of robusta beans, whereas a bag of the Victoriaville blend contains 375 grams of arabica beans and 625 grams of robusta beans. The profit from each bag of Drummondville sold is $5 and the profit from each bag of Victoriaville blend sold is $7. If his total production must not exceed his available stock of 24000 grams of arabica beans and 17000 grams of robusta beans, how many bags of each type of blend should be blended to maximize profits? Formulate and solve.", "order_mapping": {"Drummondville blend": 0, "Victoriaville blend": 1, "Drummondville": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"Drummondville": "5", "Victoriaville blend": "7"}}, "const_declarations": [{"type": "linear", "direction": "available stock", "limit": "24000", "terms": {"Drummondville blend": "600", "Victoriaville blend": "375"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available stock", "limit": "17000", "terms": {"Drummondville blend": "400", "Victoriaville blend": "625"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of Drummondville blend\n- y: Number of bags of Victoriaville blend\n\nObjective:\n- The cousin aims to maximize his profits. The profit from each bag of Drummondville sold is $5 and the profit from each bag of Victoriaville blend sold is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The total production must not exceed the available stock of 24000 grams of arabica beans, leading to the constraint: 600x + 375y <= 24000.\n- The total production must not exceed the available stock of 17000 grams of robusta beans, leading to the constraint: 400x + 625y <= 17000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n600x + 375y <= 24000\n400x + 625y <= 17000", "canonical": {"objective": [-5.0, -7.0], "constraints": [[600.0, 375.0, 24000.0], [400.0, 625.0, 17000.0]]}, "solution": {"x": 36, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of Drummondville blend bags: Drummondville\n- Number of Victoriaville blend bags: Victoriaville\n\nConstraints:\n- Total arabica beans used should not exceed 24000 grams:\n  600 * Drummondville + 375 * Victoriaville <= 24000\n- Total robusta beans used should not exceed 17000 grams:\n  400 * Drummondville + 625 * Victoriaville <= 17000\n\nObjective:\n- Maximize profits (5 dollars per Drummondville blend bag, 7 dollars per Victoriaville blend bag):\n  5 * Drummondville + 7 * Victoriaville\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDrummondville = intvar(0, 999999999)  # Number of Drummondville blend bags\nVictoriaville = intvar(0, 999999999)  # Number of Victoriaville blend bags\n\n# Constraints\nm = Model()\n\n# Total arabica beans used should not exceed 24000 grams:\nm += 600 * Drummondville + 375 * Victoriaville <= 24000\n# Total robusta beans used should not exceed 17000 grams:\nm += 400 * Drummondville + 625 * Victoriaville <= 17000\n\n# Objective\n# Maximize profits (5 dollars per Drummondville blend bag, 7 dollars per Victoriaville blend bag):\nm.maximize(5 * Drummondville + 7 * Victoriaville)\n", "entities": [{"start": 50, "end": 69, "word": "Drummondville blend", "entity_group": "VAR", "score": 0.9999798338221155}, {"start": 78, "end": 97, "word": "Victoriaville blend", "entity_group": "VAR", "score": 0.9999771882862207}, {"start": 173, "end": 192, "word": "Drummondville blend", "entity_group": "VAR", "score": 0.9999616959099894}, {"start": 202, "end": 205, "word": "600", "entity_group": "PARAM", "score": 0.9997263166468433}, {"start": 233, "end": 236, "word": "400", "entity_group": "PARAM", "score": 0.999660215804582}, {"start": 283, "end": 302, "word": "Victoriaville blend", "entity_group": "VAR", "score": 0.9999675202499353}, {"start": 312, "end": 315, "word": "375", "entity_group": "PARAM", "score": 0.9997262943661652}, {"start": 343, "end": 346, "word": "625", "entity_group": "PARAM", "score": 0.9995984505004718}, {"start": 376, "end": 382, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999084294436255}, {"start": 400, "end": 413, "word": "Drummondville", "entity_group": "VAR", "score": 0.9986341267631773}, {"start": 424, "end": 425, "word": "5", "entity_group": "PARAM", "score": 0.9994850419118142}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999066922937858}, {"start": 458, "end": 477, "word": "Victoriaville blend", "entity_group": "VAR", "score": 0.9999674930845215}, {"start": 488, "end": 489, "word": "7", "entity_group": "PARAM", "score": 0.9997369383413022}, {"start": 536, "end": 551, "word": "available stock", "entity_group": "CONST_DIR", "score": 0.9642387547400838}, {"start": 555, "end": 560, "word": "24000", "entity_group": "LIMIT", "score": 0.9997340083365328}, {"start": 588, "end": 593, "word": "17000", "entity_group": "LIMIT", "score": 0.9996080490819269}, {"start": 676, "end": 684, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998285843979217}, {"start": 685, "end": 692, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996551253069235}]}
{"doc_id": "1314557513", "document": "A chemical plant produces two types of compounds, Alnolyte and Blenzoate. To produce each type of compound, we need to use both an automatic device and a human-operated device. On a given day, each processing device is available for at most 500 minutes. To extract a package of Alnolyte, it takes 5 minutes of processing on the automatic device and 4 minutes on human-operated device. To extract a package of Blenzoate, the automatic device needs to be run for 7 minutes and the human-operated device for 3 minutes. The manufacturer can sell a package of Alnolyte for a revenue of $7 and Blenzoate for a revenue of $10. Assuming that the plant can sell all the compounds it produces, how many packages of each type should be produced daily in order to maximize the revenue?", "order_mapping": {"Alnolyte": 0, "Blenzoate": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"Alnolyte": "7", "Blenzoate": "10"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"Alnolyte": "5", "Blenzoate": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "500", "terms": {"Alnolyte": "4", "Blenzoate": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of Alnolyte\n- y: Number of packages of Blenzoate\n\nObjective:\n- The chemical plant aims to maximize its revenue. The revenue from selling a package of Alnolyte is $7 and from selling a package of Blenzoate is $10. Therefore, the objective function is: Maximize 7x + 10y\n\nConstraints:\n- The processing time for Alnolyte and Blenzoate on the automatic and human-operated devices must not exceed 500 minutes each. This leads to the following constraints:\n    - 5x + 7y <= 500 (automatic device)\n    - 4x + 3y <= 500 (human-operated device)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 10y\nConstraints:\n5x + 7y <= 500\n4x + 3y <= 500", "canonical": {"objective": [-7.0, -10.0], "constraints": [[5.0, 7.0, 500.0], [4.0, 3.0, 500.0]]}, "solution": {"x": 2, "y": 70}, "pseudo_model": "\nDecision Variables:\n- Number of packages of Alnolyte produced daily: Alnolyte\n- Number of packages of Blenzoate produced daily: Blenzoate\n\nConstraints:\n- Total automatic device usage for Alnolyte and Blenzoate should not exceed 500 minutes daily:\n  5 * Alnolyte + 7 * Blenzoate <= 500\n- Total human-operated device usage for Alnolyte and Blenzoate should not exceed 500 minutes daily:\n  4 * Alnolyte + 3 * Blenzoate <= 500\n\nObjective:\n- Maximize revenue (7 dollars per package of Alnolyte, 10 dollars per package of Blenzoate):\n  7 * Alnolyte + 10 * Blenzoate\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlnolyte = intvar(0, 999999999)  # Number of packages of Alnolyte produced daily\nBlenzoate = intvar(0, 999999999)  # Number of packages of Blenzoate produced daily\n\n# Constraints\nm = Model()\n\n# Automatic device usage for both compounds should not exceed 500 minutes daily:\nm += 5 * Alnolyte + 7 * Blenzoate <= 500\n# Human-operated device usage for both compounds should not exceed 500 minutes daily:\nm += 4 * Alnolyte + 3 * Blenzoate <= 500\n\n# Objective\n# Maximize revenue (7 dollars per package of Alnolyte, 10 dollars per package of Blenzoate):\nm.maximize(7 * Alnolyte + 10 * Blenzoate)\n", "entities": [{"start": 51, "end": 59, "word": "Alnolyte", "entity_group": "VAR", "score": 0.9987979913445698}, {"start": 64, "end": 73, "word": "Blenzoate", "entity_group": "VAR", "score": 0.9996566069192556}, {"start": 240, "end": 247, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9962365499254141}, {"start": 248, "end": 251, "word": "500", "entity_group": "LIMIT", "score": 0.9997800628854894}, {"start": 286, "end": 294, "word": "Alnolyte", "entity_group": "VAR", "score": 0.9987861024128664}, {"start": 306, "end": 307, "word": "5", "entity_group": "PARAM", "score": 0.9995472804574598}, {"start": 358, "end": 359, "word": "4", "entity_group": "PARAM", "score": 0.9996315965223345}, {"start": 421, "end": 430, "word": "Blenzoate", "entity_group": "VAR", "score": 0.9997022552861463}, {"start": 474, "end": 475, "word": "7", "entity_group": "PARAM", "score": 0.999697142855252}, {"start": 520, "end": 521, "word": "3", "entity_group": "PARAM", "score": 0.9996852381723483}, {"start": 571, "end": 579, "word": "Alnolyte", "entity_group": "VAR", "score": 0.9989698902910509}, {"start": 586, "end": 593, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9781913534608467}, {"start": 599, "end": 600, "word": "7", "entity_group": "PARAM", "score": 0.9996460183514392}, {"start": 605, "end": 614, "word": "Blenzoate", "entity_group": "VAR", "score": 0.9992603107792736}, {"start": 621, "end": 628, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9924381047517145}, {"start": 634, "end": 636, "word": "10", "entity_group": "PARAM", "score": 0.9995115362216749}, {"start": 772, "end": 780, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995627259071748}, {"start": 785, "end": 792, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9984584386392429}]}
{"doc_id": "-644178025", "document": "A student group makes chocolate chip and oatmeal cookies. To make a batch of chocolate chip cookies, it take 10 minutes to gather the ingredients, 20 minutes to mix them, and 50 minutes for baking. To make a batch of oatmeal cookies, it takes 8 minutes to gather the ingredients, 15 minutes to mix them, and 30 minutes for baking.  Per week, the group has 1000 minutes to gather ingredients, 1200 minutes for mixing, and 3000 minutes for baking. If the profit per batch of chocolate chip cookies is $12 and the profit per batch of oatmeal cookies is $15, how many batches of each should be made to maximize profit?", "order_mapping": {"chocolate chip": 0, "oatmeal cookies": 1, "chocolate chip cookies": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chocolate chip cookies": "12", "oatmeal cookies": "15"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"chocolate chip cookies": "10", "oatmeal cookies": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "1200", "terms": {"chocolate chip cookies": "20", "oatmeal cookies": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "3000", "terms": {"chocolate chip cookies": "50", "oatmeal cookies": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Batches of chocolate chip cookies\n- y: Batches of oatmeal cookies\n\nObjective:\n- The student group aims to maximize its profit. The profit per batch of chocolate chip cookies is $12 and the profit per batch of oatmeal cookies is $15. Therefore, the objective function is: Maximize 12x + 15y\n\nConstraints:\n- The group has 1000 minutes to gather ingredients per week, so the constraint is: 10x + 8y <= 1000.\n- The group has 1200 minutes for mixing per week, leading to the constraint: 20x + 15y <= 1200.\n- The group has 3000 minutes for baking per week, resulting in the constraint: 50x + 30y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 15y\nConstraints:\n10x + 8y <= 1000\n20x + 15y <= 1200\n50x + 30y <= 3000", "canonical": {"objective": [-12.0, -15.0], "constraints": [[10.0, 8.0, 1000.0], [20.0, 15.0, 1200.0], [50.0, 30.0, 3000.0]]}, "solution": {"x": 0, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate chip cookie batches: ChocolateChipBatches\n- Number of oatmeal cookie batches: OatmealBatches\n\nConstraints:\n- Time constraints for gathering ingredients (1000 minutes per week):\n  10 * ChocolateChipBatches + 8 * OatmealBatches <= 1000\n- Time constraints for mixing (1200 minutes per week):\n  20 * ChocolateChipBatches + 15 * OatmealBatches <= 1200\n- Time constraints for baking (3000 minutes per week):\n  50 * ChocolateChipBatches + 30 * OatmealBatches <= 3000\n\nObjective:\n- Maximize profit ($12 per batch of chocolate chip cookies, $15 per batch of oatmeal cookies):\n  12 * ChocolateChipBatches + 15 * OatmealBatches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateChipBatches = intvar(0, 999999999)  # Number of chocolate chip cookie batches\nOatmealBatches = intvar(0, 999999999)  # Number of oatmeal cookie batches\n\n# Constraints\nm = Model()\n\n# Time constraints for gathering ingredients (1000 minutes per week):\nm += 10 * ChocolateChipBatches + 8 * OatmealBatches <= 1000\n# Time constraints for mixing (1200 minutes per week):\nm += 20 * ChocolateChipBatches + 15 * OatmealBatches <= 1200\n# Time constraints for baking (3000 minutes per week):\nm += 50 * ChocolateChipBatches + 30 * OatmealBatches <= 3000\n\n# Objective\n# Maximize profit ($12 per batch of chocolate chip cookies, $15 per batch of oatmeal cookies):\nm.maximize(12 * ChocolateChipBatches + 15 * OatmealBatches)\n", "entities": [{"start": 22, "end": 36, "word": "chocolate chip", "entity_group": "VAR", "score": 0.9997681540079739}, {"start": 41, "end": 56, "word": "oatmeal cookies", "entity_group": "VAR", "score": 0.9999373195462777}, {"start": 78, "end": 100, "word": "chocolate chip cookies", "entity_group": "VAR", "score": 0.9954232469735429}, {"start": 111, "end": 113, "word": "10", "entity_group": "PARAM", "score": 0.9992541046362816}, {"start": 150, "end": 152, "word": "20", "entity_group": "PARAM", "score": 0.9996600298387421}, {"start": 179, "end": 181, "word": "50", "entity_group": "PARAM", "score": 0.9995520197065819}, {"start": 222, "end": 237, "word": "oatmeal cookies", "entity_group": "VAR", "score": 0.9997667834404864}, {"start": 249, "end": 250, "word": "8", "entity_group": "PARAM", "score": 0.9994401500307144}, {"start": 287, "end": 289, "word": "15", "entity_group": "PARAM", "score": 0.9996600298655616}, {"start": 316, "end": 318, "word": "30", "entity_group": "PARAM", "score": 0.9993355306146163}, {"start": 361, "end": 364, "word": "has", "entity_group": "CONST_DIR", "score": 0.9930282368271924}, {"start": 365, "end": 369, "word": "1000", "entity_group": "LIMIT", "score": 0.9987806290669611}, {"start": 402, "end": 406, "word": "1200", "entity_group": "LIMIT", "score": 0.9996653092457054}, {"start": 432, "end": 436, "word": "3000", "entity_group": "LIMIT", "score": 0.9989518074265702}, {"start": 465, "end": 471, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999473962726494}, {"start": 485, "end": 507, "word": "chocolate chip cookies", "entity_group": "VAR", "score": 0.9980881087717188}, {"start": 513, "end": 515, "word": "12", "entity_group": "PARAM", "score": 0.999163397744821}, {"start": 524, "end": 530, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998779508240756}, {"start": 544, "end": 559, "word": "oatmeal cookies", "entity_group": "VAR", "score": 0.9997814242221038}, {"start": 565, "end": 567, "word": "15", "entity_group": "PARAM", "score": 0.9997202106957508}, {"start": 613, "end": 621, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 622, "end": 628, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}]}
{"doc_id": "92354356", "document": "Lisa can invest in NFTs and crypto-currency up to $5000. Each dollar invested in NFTs yields $0.30 profit, and each dollar invested in a crypto-currency yields $0.40 profit. A minimum of 25% of all money invested must be in NFTs, and at least $2300 must be in crypto-currency. How can Lisa maximize her profit?", "order_mapping": {"NFTs": 0, "crypto-currency": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"NFTs": "0.30", "crypto-currency": "0.40"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "5000", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2300", "var": "crypto-currency", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "25%", "var": "NFTs", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in NFTs\n- y: Dollars invested in crypto-currency\n\nObjective:\n- Lisa aims to maximize her profit. Each dollar invested in NFTs yields $0.30 profit, and each dollar invested in crypto-currency yields $0.40 profit. Therefore, the objective function is: Maximize 0.30x + 0.40y\n\nConstraints:\n- Lisa can invest up to $5000 in total, so the constraint is: x + y <= 5000.\n- At least $2300 must be invested in crypto-currency, leading to the constraint: y >= 2300.\n- At least 25% of all money invested must be in NFTs, which translates to: x >= 0.25(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.30x + 0.40y\nConstraints:\nx + y <= 5000\ny >= 2300\nx >= 0.25(x + y)", "canonical": {"objective": [-0.3, -0.4], "constraints": [[1.0, 1.0, 5000.0], [0.0, -1.0, -2300.0], [-0.75, 0.25, 0.0]]}, "solution": {"x": 1250, "y": 3750}, "pseudo_model": "\nDecision Variables:\n- Amount invested in NFTs: NFTs\n- Amount invested in crypto-currency: CryptoCurrency\n\nConstraints:\n- Total investment should not exceed 5000 dollars:\n  NFTs + CryptoCurrency <= 5000\n- At least 2300 dollars must be in crypto-currency:\n  CryptoCurrency >= 2300\n- A minimum of 25% of all money invested must be in NFTs:\n  NFTs >= 0.25 * (NFTs + CryptoCurrency)\n\nObjective:\n- Maximize profit ($0.30 profit per dollar invested in NFTs, $0.40 profit per dollar invested in crypto-currency):\n  0.30 * NFTs + 0.40 * CryptoCurrency\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNFTs = intvar(0, 999999999)  # Amount invested in NFTs\nCryptoCurrency = intvar(0, 999999999)  # Amount invested in crypto-currency\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $5000:\nm += NFTs + CryptoCurrency <= 5000\n# At least $2300 must be in crypto-currency:\nm += CryptoCurrency >= 2300\n# A minimum of 25% of all money invested must be in NFTs:\nm += NFTs >= 0.25 * (NFTs + CryptoCurrency)\n\n# Objective\n# Maximize profit ($0.30 profit per dollar invested in NFTs, $0.40 profit per dollar invested in crypto-currency):\nm.maximize(0.30 * NFTs + 0.40 * CryptoCurrency)\n", "entities": [{"start": 19, "end": 23, "word": "NFTs", "entity_group": "VAR", "score": 0.9997784807867425}, {"start": 28, "end": 45, "word": "crypto - currency", "entity_group": "VAR", "score": 0.9928225004798608}, {"start": 46, "end": 51, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9912632267534711}, {"start": 54, "end": 58, "word": "5000", "entity_group": "LIMIT", "score": 0.9992489321441573}, {"start": 85, "end": 89, "word": "NFTs", "entity_group": "VAR", "score": 0.9997643214033658}, {"start": 99, "end": 103, "word": "0.30", "entity_group": "PARAM", "score": 0.9995415460813795}, {"start": 104, "end": 110, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997078609769549}, {"start": 143, "end": 160, "word": "crypto - currency", "entity_group": "VAR", "score": 0.999373221270262}, {"start": 170, "end": 174, "word": "0.40", "entity_group": "PARAM", "score": 0.9995257956427923}, {"start": 175, "end": 181, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993794586295507}, {"start": 186, "end": 193, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9982805625528468}, {"start": 197, "end": 201, "word": "25 %", "entity_group": "LIMIT", "score": 0.9372907441509288}, {"start": 235, "end": 239, "word": "NFTs", "entity_group": "VAR", "score": 0.9996693204334243}, {"start": 246, "end": 254, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9968566746082401}, {"start": 257, "end": 261, "word": "2300", "entity_group": "LIMIT", "score": 0.9982769656619942}, {"start": 273, "end": 290, "word": "crypto - currency", "entity_group": "VAR", "score": 0.9990138243687204}, {"start": 306, "end": 314, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9931394067503161}, {"start": 319, "end": 325, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998559558124204}]}
{"doc_id": "30492189", "document": "Bob has a small coffee shop. He mainly sells cups of coffee and tea. It takes 5 minutes to make a cup of coffee and 3 minutes to make a cup of tea. Bob only has 500 minutes a week to make drinks (coffee and tea). In addition, Bob only has enough product to make 300 total cups per week. He makes a profit of $1 on each cup of coffee and a profit of $2 on each cup of tea. How many cups of coffee and tea should Bob make each week to maximize profit, assuming he sells all his cups?", "order_mapping": {"coffee": 0, "tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"coffee": "1", "tea": "2"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "500", "terms": {"coffee": "5", "tea": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "300", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cups of coffee\n- y: Number of cups of tea\n\nObjective:\n- Bob aims to maximize his profit. He makes a profit of $1 on each cup of coffee and a profit of $2 on each cup of tea. Therefore, the objective function is: Maximize x + 2y\n\nConstraints:\n- Bob only has 500 minutes a week to make drinks (coffee and tea). Making a cup of coffee takes 5 minutes and making a cup of tea takes 3 minutes, leading to the constraint: 5x + 3y <= 500.\n- Bob only has enough product to make 300 total cups per week, resulting in the constraint: x + y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 2y\nConstraints:\n5x + 3y <= 500\nx + y <= 300", "canonical": {"objective": [-1.0, -2.0], "constraints": [[5.0, 3.0, 500.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 0, "y": 166}, "pseudo_model": "\nDecision Variables:\n- Number of cups of coffee made each week: Coffee\n- Number of cups of tea made each week: Tea\n\nConstraints:\n- Total time to make drinks should not exceed 500 minutes per week (5 minutes per cup of coffee, 3 minutes per cup of tea):\n  5 * Coffee + 3 * Tea <= 500\n- Total number of cups made should not exceed 300 per week:\n  Coffee + Tea <= 300\n\nObjective:\n- Maximize profit (1 dollar profit per cup of coffee, 2 dollars profit per cup of tea):\n  1 * Coffee + 2 * Tea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoffee = intvar(0, 999999999)  # Number of cups of coffee made per week\nTea = intvar(0, 999999999)  # Number of cups of tea made per week\n\n# Constraints\nm = Model()\n\n# Bob only has 500 minutes a week to make drinks:\nm += 5 * Coffee + 3 * Tea <= 500\n# Bob only has enough product to make 300 total cups per week:\nm += Coffee + Tea <= 300\n\n# Objective\n# Maximize profit (1 dollar per cup of coffee, 2 dollars per cup of tea):\nm.maximize(1 * Coffee + 2 * Tea)\n", "entities": [{"start": 54, "end": 60, "word": "coffee", "entity_group": "VAR", "score": 0.998897052637799}, {"start": 65, "end": 68, "word": "tea", "entity_group": "VAR", "score": 0.9991483474374011}, {"start": 80, "end": 81, "word": "5", "entity_group": "PARAM", "score": 0.9996965176268559}, {"start": 107, "end": 113, "word": "coffee", "entity_group": "VAR", "score": 0.9975024199176012}, {"start": 118, "end": 119, "word": "3", "entity_group": "PARAM", "score": 0.9996576703425303}, {"start": 145, "end": 148, "word": "tea", "entity_group": "VAR", "score": 0.9991495777400468}, {"start": 155, "end": 159, "word": "only", "entity_group": "CONST_DIR", "score": 0.9965592985100138}, {"start": 164, "end": 167, "word": "500", "entity_group": "LIMIT", "score": 0.9997526862623827}, {"start": 200, "end": 206, "word": "coffee", "entity_group": "VAR", "score": 0.9973001860026921}, {"start": 211, "end": 214, "word": "tea", "entity_group": "VAR", "score": 0.9986576309422337}, {"start": 237, "end": 241, "word": "only", "entity_group": "CONST_DIR", "score": 0.9937741615795829}, {"start": 269, "end": 272, "word": "300", "entity_group": "LIMIT", "score": 0.9994574340867097}, {"start": 306, "end": 312, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998175221455848}, {"start": 318, "end": 319, "word": "1", "entity_group": "PARAM", "score": 0.9995539693884197}, {"start": 335, "end": 341, "word": "coffee", "entity_group": "VAR", "score": 0.9994393030822661}, {"start": 348, "end": 354, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998165390326144}, {"start": 360, "end": 361, "word": "2", "entity_group": "PARAM", "score": 0.999698953425042}, {"start": 377, "end": 380, "word": "tea", "entity_group": "VAR", "score": 0.9993386421732001}, {"start": 400, "end": 406, "word": "coffee", "entity_group": "VAR", "score": 0.9993284738496989}, {"start": 411, "end": 414, "word": "tea", "entity_group": "VAR", "score": 0.9990538347308411}, {"start": 444, "end": 452, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9955978677749627}, {"start": 453, "end": 459, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996154255778031}]}
{"doc_id": "1804684770", "document": "A pharmacist wants to mix two drugs in such a way to create a mixture that contains at least 5 units of pain killer and 12 units of fever reliever. The amount of pain killer and fever reliever in drug A is 3 units/mg and 2.5 units/mg respectively. On the other hand, the amount of pain killer and fever reliever in drug B is 2 units/mg and 3.5 units/mg respectively. It costs $0.50 per mg to purchase drug A and $0.30 per mg to purchase drug B. Formulate a LP to minimize cost of such a mixture.", "order_mapping": {"drug A": 0, "drug B": 1, "drug B.": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"drug A": "0.50", "drug B.": "0.30"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "5", "terms": {"drug A": "3", "drug B": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "12", "terms": {"drug A": "2.5", "drug B": "3.5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Amount of drug A (in mg)\n- y: Amount of drug B (in mg)\n\nObjective:\n- The pharmacist wants to minimize the cost of the mixture. It costs $0.50 per mg to purchase drug A and $0.30 per mg to purchase drug B. Therefore, the objective function is: Minimize 0.50x + 0.30y\n\nConstraints:\n- The mixture should contain at least 5 units of pain killer, leading to the constraint: 3x + 2y >= 5.\n- The mixture should contain at least 12 units of fever reliever, leading to the constraint: 2.5x + 3.5y >= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.50x + 0.30y\nConstraints:\n3x + 2y >= 5\n2.5x + 3.5y >= 12", "canonical": {"objective": [0.5, 0.3], "constraints": [[-3.0, -2.0, -5.0], [-2.5, -3.5, -12.0]]}, "solution": {"x": 0, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Amount of drug A in mg: DrugA\n- Amount of drug B in mg: DrugB\n\nConstraints:\n- The mixture must contain at least 5 units of pain killer:\n  3 * DrugA + 2 * DrugB >= 5\n- The mixture must contain at least 12 units of fever reliever:\n  2.5 * DrugA + 3.5 * DrugB >= 12\n\nObjective:\n- Minimize the cost of the mixture (0.50 dollars per mg for drug A and 0.30 dollars per mg for drug B):\n  0.50 * DrugA + 0.30 * DrugB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDrugA = intvar(0, 999999999)  # Amount of drug A in mg\nDrugB = intvar(0, 999999999)  # Amount of drug B in mg\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 5 units of pain killer:\nm += 3 * DrugA + 2 * DrugB >= 5\n# The mixture must contain at least 12 units of fever reliever:\nm += 2.5 * DrugA + 3.5 * DrugB >= 12\n\n# Objective\n# Minimize the cost of the mixture (0.50 dollars per mg for drug A and 0.30 dollars per mg for drug B):\nm.minimize(0.50 * DrugA + 0.30 * DrugB)\n", "entities": [{"start": 84, "end": 92, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986579436471564}, {"start": 93, "end": 94, "word": "5", "entity_group": "LIMIT", "score": 0.9997019582981492}, {"start": 120, "end": 122, "word": "12", "entity_group": "LIMIT", "score": 0.9995781834485471}, {"start": 197, "end": 203, "word": "drug A", "entity_group": "VAR", "score": 0.9998730973039948}, {"start": 207, "end": 208, "word": "3", "entity_group": "PARAM", "score": 0.9994191946011945}, {"start": 224, "end": 227, "word": "2.5", "entity_group": "PARAM", "score": 0.9997199257159342}, {"start": 322, "end": 328, "word": "drug B", "entity_group": "VAR", "score": 0.9998967244346441}, {"start": 332, "end": 333, "word": "2", "entity_group": "PARAM", "score": 0.999515610805207}, {"start": 349, "end": 352, "word": "3.5", "entity_group": "PARAM", "score": 0.9997368869432418}, {"start": 382, "end": 387, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996891103839431}, {"start": 390, "end": 394, "word": "0.50", "entity_group": "PARAM", "score": 0.9993239970352615}, {"start": 414, "end": 420, "word": "drug A", "entity_group": "VAR", "score": 0.9995830421057251}, {"start": 427, "end": 431, "word": "0.30", "entity_group": "PARAM", "score": 0.999675631926935}, {"start": 451, "end": 458, "word": "drug B.", "entity_group": "VAR", "score": 0.9998626443090984}, {"start": 477, "end": 485, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9934834462919898}, {"start": 486, "end": 490, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9627013653172172}]}
{"doc_id": "-1341619224", "document": "A farmer must allocate his farming equipment between his two farms, a beet farm and a carrot farm. The revenue per acre of beets is $200 and the revenue per acre of carrots is $340. He has one tractor, one plow, and one combine. Each equipment can be used for 10 hours a day divided in any way between his two farms. On his beet farm, harvesting an acre of beets requires 0.6 hours on the tractor, 0.3 hours on the plow, and 0.2 hours on the combine. On his carrot farm, harvesting an acre of carrots requires 0.7 hours on the tractor, 0.25 hours on the plow, and 0.1 hours on the combine. How should the farmer allocate his equipment between his farms to maximize his revenue?", "order_mapping": {"beet farm": 0, "carrot farm": 1, "beets": 0, "carrots": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"beets": "200", "carrots": "340"}}, "const_declarations": [], "explanation": "Variables:\n- x: Acres of land allocated to beets\n- y: Acres of land allocated to carrots\n\nObjective:\n- The farmer aims to maximize his revenue. The revenue per acre of beets is $200 and the revenue per acre of carrots is $340. Therefore, the objective function is: Maximize 200x + 340y\n\nConstraints:\n- The farmer has one tractor, one plow, and one combine, each of which can be used for 10 hours a day. The time allocation for each equipment on both farms can be represented as:\n    - 0.6x + 0.7y <= 10 (tractor)\n    - 0.3x + 0.25y <= 10 (plow)\n    - 0.2x + 0.1y <= 10 (combine)\n- Non-negativity constraints: x >= 0, y >= 0\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 340y\nConstraints:\n0.6x + 0.7y <= 10\n0.3x + 0.25y <= 10\n0.2x + 0.1y <= 10\nx >= 0\ny >= 0", "canonical": {"objective": [-200.0, -340.0], "constraints": [[0.6, 0.7, 10.0], [0.3, 0.25, 10.0], [0.2, 0.1, 10.0]]}, "solution": {"x": 0, "y": 14}, "pseudo_model": "", "cpmpy_code": "", "entities": [{"start": 71, "end": 80, "word": "beet farm", "entity_group": "VAR", "score": 0.9999603292384625}, {"start": 87, "end": 98, "word": "carrot farm", "entity_group": "VAR", "score": 0.9999198999420706}, {"start": 105, "end": 112, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9996162729061331}, {"start": 125, "end": 130, "word": "beets", "entity_group": "VAR", "score": 0.9991215747912792}, {"start": 136, "end": 139, "word": "200", "entity_group": "PARAM", "score": 0.9992125375556561}, {"start": 148, "end": 155, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9988172218052344}, {"start": 168, "end": 175, "word": "carrots", "entity_group": "VAR", "score": 0.9991542309902747}, {"start": 181, "end": 184, "word": "340", "entity_group": "PARAM", "score": 0.999589934215713}, {"start": 252, "end": 267, "word": "can be used for", "entity_group": "CONST_DIR", "score": 0.9756881865894087}, {"start": 268, "end": 270, "word": "10", "entity_group": "LIMIT", "score": 0.9997100881685341}, {"start": 333, "end": 342, "word": "beet farm", "entity_group": "VAR", "score": 0.9999750643515372}, {"start": 367, "end": 372, "word": "beets", "entity_group": "VAR", "score": 0.9996718294929612}, {"start": 382, "end": 385, "word": "0.6", "entity_group": "PARAM", "score": 0.9996711405333178}, {"start": 409, "end": 412, "word": "0.3", "entity_group": "PARAM", "score": 0.9996508809043732}, {"start": 437, "end": 440, "word": "0.2", "entity_group": "PARAM", "score": 0.9995674728400743}, {"start": 471, "end": 482, "word": "carrot farm", "entity_group": "VAR", "score": 0.9999720514557215}, {"start": 507, "end": 514, "word": "carrots", "entity_group": "VAR", "score": 0.9996718294929612}, {"start": 524, "end": 527, "word": "0.7", "entity_group": "PARAM", "score": 0.999671140533318}, {"start": 551, "end": 555, "word": "0.25", "entity_group": "PARAM", "score": 0.9996508809043737}, {"start": 580, "end": 583, "word": "0.1", "entity_group": "PARAM", "score": 0.9996596655855396}, {"start": 673, "end": 681, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991111021322329}, {"start": 686, "end": 693, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9992202052923055}]}
{"doc_id": "-441849133", "document": "A wine company offers two promotion packages, package A and package B. Each promotion package consists of some combination of red and white wines. Package A has 2 bottles of red wine and 1 bottle of white wine, and yields a profit of $120. In comparison, package B has 2 bottles of red wine and 3 bottles of white wine, and yields a profit of $200. However, the company only has 1000 bottles of red wine and 800 bottles of white wine. Find the best mix of packages to achieve maximum profit.", "order_mapping": {"package A": 0, "package B.": 1, "Package A": 0, "package B": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"Package A": "120", "package B": "200"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "1000", "terms": {"Package A": "2", "package B": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "only", "limit": "800", "terms": {"package B": "3", "Package A": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of package A\n- y: Number of package B\n\nObjective:\n- The company aims to maximize its profit. Package A yields a profit of $120 and package B yields a profit of $200. Therefore, the objective function is: Maximize 120x + 200y\n\nConstraints:\n- The company has 1000 bottles of red wine available, so the constraint is: 2x + 2y <= 1000.\n- The company has 800 bottles of white wine available, leading to the constraint: x + 3y <= 800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 120x + 200y\nConstraints:\n2x + 2y <= 1000\nx + 3y <= 800", "canonical": {"objective": [-120.0, -200.0], "constraints": [[2.0, 2.0, 1000.0], [1.0, 3.0, 800.0]]}, "solution": {"x": 350, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of Package A sold: PackageA\n- Number of Package B sold: PackageB\n\nConstraints:\n- Total red wine bottles used by both packages should not exceed 1000:\n  2*PackageA + 2*PackageB <= 1000\n- Total white wine bottles used by both packages should not exceed 800:\n  PackageA + 3*PackageB <= 800\n\nObjective:\n- Maximize profit (Package A yields a profit of $120, Package B yields a profit of $200):\n  120*PackageA + 200*PackageB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPackageA = intvar(0, 999999999)  # Number of Package A sold\nPackageB = intvar(0, 999999999)  # Number of Package B sold\n\n# Constraints\nm = Model()\n\n# The company only has 1000 bottles of red wine:\nm += 2*PackageA + 2*PackageB <= 1000\n# The company only has 800 bottles of white wine:\nm += PackageA + 3*PackageB <= 800\n\n# Objective\n# Maximize profit (Package A yields a profit of $120, Package B yields a profit of $200):\nm.maximize(120*PackageA + 200*PackageB)\n", "entities": [{"start": 47, "end": 56, "word": "package A", "entity_group": "VAR", "score": 0.9999762386539278}, {"start": 61, "end": 71, "word": "package B.", "entity_group": "VAR", "score": 0.9999810985654638}, {"start": 149, "end": 158, "word": "Package A", "entity_group": "VAR", "score": 0.999976617768943}, {"start": 163, "end": 164, "word": "2", "entity_group": "PARAM", "score": 0.9997195923586605}, {"start": 189, "end": 190, "word": "1", "entity_group": "PARAM", "score": 0.9995848281906234}, {"start": 227, "end": 233, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994066474201312}, {"start": 239, "end": 242, "word": "120", "entity_group": "PARAM", "score": 0.9996517017061801}, {"start": 261, "end": 270, "word": "package B", "entity_group": "VAR", "score": 0.9999220668491587}, {"start": 275, "end": 276, "word": "2", "entity_group": "PARAM", "score": 0.9997197938511689}, {"start": 301, "end": 302, "word": "3", "entity_group": "PARAM", "score": 0.9997056331559225}, {"start": 340, "end": 346, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992762250190843}, {"start": 352, "end": 355, "word": "200", "entity_group": "PARAM", "score": 0.9996679970520448}, {"start": 380, "end": 384, "word": "only", "entity_group": "CONST_DIR", "score": 0.9985372525346204}, {"start": 389, "end": 393, "word": "1000", "entity_group": "LIMIT", "score": 0.9997978537366463}, {"start": 418, "end": 421, "word": "800", "entity_group": "LIMIT", "score": 0.9997082365343413}, {"start": 487, "end": 494, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9862426640274723}, {"start": 495, "end": 501, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999864982756479}]}
{"doc_id": "-2145484718", "document": "A candy company makes 3 different sized gift boxes: small, medium, and large. These gift boxes are made by their mall kiosk and flagship store location. The mall kiosk costs $150 to operate per hour and can make 5 small gift boxes, 6 medium gift boxes, and 2 large gift boxes in that hour. The flagship store costs $500 to operate per hour and can make 10 small gift boxes, 15 medium gift boxes, and 9 large gift boxes in that hour. To meet demands, the company must make a minimum of 80 small gift boxes, 100 medium gift boxes, and 50 large gift boxes per day. Formulate a LP to minimize cost.", "order_mapping": {"mall kiosk": 0, "flagship store": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"flagship store": "500", "mall kiosk": "150"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "80", "terms": {"mall kiosk": "5", "flagship store": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "100", "terms": {"mall kiosk": "6", "flagship store": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"mall kiosk": "2", "flagship store": "9"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours of operation for the mall kiosk\n- y: Hours of operation for the flagship store\n\nObjective:\n- The company aims to minimize its cost. The mall kiosk costs $150 to operate per hour and the flagship store costs $500 to operate per hour. Therefore, the objective function is: Minimize 150x + 500y\n\nConstraints:\n- To meet demands, the company must make a minimum of 80 small gift boxes, 100 medium gift boxes, and 50 large gift boxes per day. This leads to the following constraints:\n    - 5x + 10y >= 80 (for small gift boxes)\n    - 6x + 15y >= 100 (for medium gift boxes)\n    - 2x + 9y >= 50 (for large gift boxes)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 150x + 500y\nConstraints:\n5x + 10y >= 80\n6x + 15y >= 100\n2x + 9y >= 50", "canonical": {"objective": [150.0, 500.0], "constraints": [[-5.0, -10.0, -80.0], [-6.0, -15.0, -100.0], [-2.0, -9.0, -50.0]]}, "solution": {"x": 8, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Hours the mall kiosk operates: MallKioskHours\n- Hours the flagship store operates: FlagshipStoreHours\n\nConstraints:\n- To meet the demand for small gift boxes (80 minimum):\n  5 * MallKioskHours + 10 * FlagshipStoreHours >= 80\n- To meet the demand for medium gift boxes (100 minimum):\n  6 * MallKioskHours + 15 * FlagshipStoreHours >= 100\n- To meet the demand for large gift boxes (50 minimum):\n  2 * MallKioskHours + 9 * FlagshipStoreHours >= 50\n\nObjective:\n- Minimize cost ($150 per hour for mall kiosk, $500 per hour for flagship store):\n  150 * MallKioskHours + 500 * FlagshipStoreHours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMallKioskHours = intvar(0, 999999999)  # Number of hours the mall kiosk operates\nFlagshipStoreHours = intvar(0, 999999999)  # Number of hours the flagship store operates\n\n# Constraints\nm = Model()\n\n# To meet the demand for small gift boxes:\nm += 5 * MallKioskHours + 10 * FlagshipStoreHours >= 80\n# To meet the demand for medium gift boxes:\nm += 6 * MallKioskHours + 15 * FlagshipStoreHours >= 100\n# To meet the demand for large gift boxes:\nm += 2 * MallKioskHours + 9 * FlagshipStoreHours >= 50\n\n# Objective\n# Minimize cost ($150 per hour for mall kiosk, $500 per hour for flagship store):\nm.minimize(150 * MallKioskHours + 500 * FlagshipStoreHours)\n", "entities": [{"start": 117, "end": 127, "word": "mall kiosk", "entity_group": "VAR", "score": 0.9999534148060184}, {"start": 132, "end": 146, "word": "flagship store", "entity_group": "VAR", "score": 0.9999954880057415}, {"start": 162, "end": 172, "word": "mall kiosk", "entity_group": "VAR", "score": 0.9998724821640459}, {"start": 173, "end": 178, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9987939334157108}, {"start": 181, "end": 184, "word": "150", "entity_group": "PARAM", "score": 0.9996089011191225}, {"start": 218, "end": 219, "word": "5", "entity_group": "PARAM", "score": 0.9994444834483508}, {"start": 239, "end": 240, "word": "6", "entity_group": "PARAM", "score": 0.9996634683133352}, {"start": 265, "end": 266, "word": "2", "entity_group": "PARAM", "score": 0.9996490133292417}, {"start": 303, "end": 317, "word": "flagship store", "entity_group": "VAR", "score": 0.9999439211039615}, {"start": 318, "end": 323, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993708430514673}, {"start": 326, "end": 329, "word": "500", "entity_group": "PARAM", "score": 0.9996089235543286}, {"start": 363, "end": 365, "word": "10", "entity_group": "PARAM", "score": 0.9994445069833068}, {"start": 385, "end": 387, "word": "15", "entity_group": "PARAM", "score": 0.9996634635079512}, {"start": 412, "end": 413, "word": "9", "entity_group": "PARAM", "score": 0.9996490128686133}, {"start": 488, "end": 495, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9980382281587115}, {"start": 499, "end": 501, "word": "80", "entity_group": "LIMIT", "score": 0.9992194013164902}, {"start": 521, "end": 524, "word": "100", "entity_group": "LIMIT", "score": 0.9996034655391336}, {"start": 549, "end": 551, "word": "50", "entity_group": "LIMIT", "score": 0.9995942419810985}, {"start": 597, "end": 605, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9984406354049599}, {"start": 606, "end": 610, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9918118547099706}]}
{"doc_id": "-134578212", "document": "A keyboard company produces two types of analog synthesizer keyboards, one with 61 keys and another with 81 keys. Both keyboards are sold for $1500 and $2500 respectively. There are about 3000 oscillator chips available every day from which the 61 key version requires 8 chips while the 81 key version requires 16 chips. The company has a total 8 working hours a day.  Both of these synthesizers require a production time of 1.5 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?", "order_mapping": {"61 keys": 0, "81 keys": 1, "61 key version": 0, "81 key version": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total revenue", "terms": {"61 keys": "1500", "81 keys": "2500"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"61 key version": "8", "81 key version": "16"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "total", "limit": "8", "terms": {"61 key version": "1.5", "81 key version": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of 61 key synthesizer keyboards produced\n- y: Quantity of 81 key synthesizer keyboards produced\n\nObjective:\n- The company aims to maximize its total revenue. Both keyboards are sold for $1500 and $2500 respectively. Therefore, the objective function is: Maximize 1500x + 2500y\n\nConstraints:\n- There are about 3000 oscillator chips available every day, where the 61 key version requires 8 chips and the 81 key version requires 16 chips. This leads to the constraint: 8x + 16y <= 3000.\n- The company has a total of 8 working hours a day, and both synthesizers require a production time of 1.5 hours. This results in the constraint: 1.5x + 1.5y <= 8.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1500x + 2500y\nConstraints:\n8x + 16y <= 3000\n1.5x + 1.5y <= 8", "canonical": {"objective": [-1500.0, -2500.0], "constraints": [[8.0, 16.0, 3000.0], [1.5, 1.5, 8.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of 61-key synthesizers produced: Keys61\n- Number of 81-key synthesizers produced: Keys81\n\nConstraints:\n- Total oscillator chips used should not exceed 3000 (61-key uses 8 chips, 81-key uses 16 chips):\n  8 * Keys61 + 16 * Keys81 <= 3000\n- Total production time should not exceed 8 hours (both synthesizers require 1.5 hours each):\n  1.5 * Keys61 + 1.5 * Keys81 <= 8\n\nObjective:\n- Maximize total revenue (61-key sold for $1500, 81-key sold for $2500):\n  1500 * Keys61 + 2500 * Keys81\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKeys61 = intvar(0, 999999999)  # Number of 61-key synthesizers produced\nKeys81 = intvar(0, 999999999)  # Number of 81-key synthesizers produced\n\n# Constraints\nm = Model()\n\n# Oscillator chips constraint (3000 chips available, 61-key uses 8 chips, 81-key uses 16 chips):\nm += 8 * Keys61 + 16 * Keys81 <= 3000\n# Working hours constraint (8 hours available, both synthesizers require 1.5 hours each):\nm += 1.5 * Keys61 + 1.5 * Keys81 <= 8\n\n# Objective\n# Maximize total revenue (61-key sold for $1500, 81-key sold for $2500):\nm.maximize(1500 * Keys61 + 2500 * Keys81)\n", "entities": [{"start": 81, "end": 88, "word": "61 keys", "entity_group": "VAR", "score": 0.9998472210256956}, {"start": 106, "end": 113, "word": "81 keys", "entity_group": "VAR", "score": 0.9998601933431701}, {"start": 135, "end": 139, "word": "sold", "entity_group": "OBJ_NAME", "score": 0.9851324827474875}, {"start": 146, "end": 150, "word": "1500", "entity_group": "PARAM", "score": 0.9995760916984222}, {"start": 157, "end": 161, "word": "2500", "entity_group": "PARAM", "score": 0.9997607929403135}, {"start": 193, "end": 197, "word": "3000", "entity_group": "LIMIT", "score": 0.9987795302705792}, {"start": 215, "end": 224, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989443634458451}, {"start": 250, "end": 264, "word": "61 key version", "entity_group": "VAR", "score": 0.9992850891779596}, {"start": 274, "end": 275, "word": "8", "entity_group": "PARAM", "score": 0.9995604035173008}, {"start": 292, "end": 306, "word": "81 key version", "entity_group": "VAR", "score": 0.9984192206784035}, {"start": 316, "end": 318, "word": "16", "entity_group": "PARAM", "score": 0.9990848911733642}, {"start": 345, "end": 350, "word": "total", "entity_group": "CONST_DIR", "score": 0.9983595051592976}, {"start": 351, "end": 352, "word": "8", "entity_group": "LIMIT", "score": 0.9982113777491896}, {"start": 431, "end": 434, "word": "1.5", "entity_group": "PARAM", "score": 0.9995181849678315}, {"start": 514, "end": 522, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988632957531043}, {"start": 527, "end": 540, "word": "total revenue", "entity_group": "OBJ_NAME", "score": 0.9933008228157453}]}
{"doc_id": "-888993455", "document": "Fiber and iron can be obtained in two supplement drinks. One is orange flavored and costs $8 per serving. The other is apple flavored and costs $5 per serving. One serving of the orange flavored drink contains 4 grams of fiber and 5 grams of iron. One serving of the apple flavored drink contains 6 grams of fiber and 3 grams of iron. In a day, it is recommended to get a minimum of 13 grams of fiber and iron each. Find the mix and formulate a LP to minimize cost.", "order_mapping": {"orange flavored": 0, "apple flavored": 1, "orange flavored drink": 0, "apple flavored drink": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"orange flavored": "8", "apple flavored": "5"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "13", "terms": {"orange flavored drink": "4", "apple flavored drink": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "13", "terms": {"orange flavored drink": "5", "apple flavored drink": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of orange flavored drink\n- y: Number of servings of apple flavored drink\n\nObjective:\n- The goal is to minimize the cost of the supplement drinks. The cost of one serving of the orange flavored drink is $8, and the cost of one serving of the apple flavored drink is $5. Therefore, the objective function is: Minimize 8x + 5y\n\nConstraints:\n- The minimum recommended intake of fiber and iron is 13 grams each. This leads to the constraints: 4x + 6y >= 13 (fiber) and 5x + 3y >= 13 (iron).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 8x + 5y\nConstraints:\n4x + 6y >= 13\n5x + 3y >= 13", "canonical": {"objective": [8.0, 5.0], "constraints": [[-4.0, -6.0, -13.0], [-5.0, -3.0, -13.0]]}, "solution": {"x": 2, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of servings of the orange flavored drink: OrangeFlavored\n- Number of servings of the apple flavored drink: AppleFlavored\n\nConstraints:\n- To meet the minimum requirement of 13 grams of fiber:\n  4 * OrangeFlavored + 6 * AppleFlavored >= 13\n- To meet the minimum requirement of 13 grams of iron:\n  5 * OrangeFlavored + 3 * AppleFlavored >= 13\n\nObjective:\n- Minimize cost (8 dollars per serving of the orange flavored drink, 5 dollars per serving of the apple flavored drink):\n  8 * OrangeFlavored + 5 * AppleFlavored\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOrangeFlavored = intvar(0, 999999999)  # Number of servings of the orange flavored drink\nAppleFlavored = intvar(0, 999999999)  # Number of servings of the apple flavored drink\n\n# Constraints\nm = Model()\n\n# Minimum of 13 grams of fiber:\nm += 4 * OrangeFlavored + 6 * AppleFlavored >= 13\n# Minimum of 13 grams of iron:\nm += 5 * OrangeFlavored + 3 * AppleFlavored >= 13\n\n# Objective\n# Minimize cost (8 dollars per serving of the orange flavored drink, 5 dollars per serving of the apple flavored drink):\nm.minimize(8 * OrangeFlavored + 5 * AppleFlavored)\n", "entities": [{"start": 65, "end": 80, "word": "orange flavored", "entity_group": "VAR", "score": 0.9995459239755097}, {"start": 85, "end": 90, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9966866487027766}, {"start": 93, "end": 94, "word": "8", "entity_group": "PARAM", "score": 0.9993790347412532}, {"start": 122, "end": 136, "word": "apple flavored", "entity_group": "VAR", "score": 0.9997271851277225}, {"start": 141, "end": 146, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999155026704971}, {"start": 149, "end": 150, "word": "5", "entity_group": "PARAM", "score": 0.9993010087101418}, {"start": 184, "end": 205, "word": "orange flavored drink", "entity_group": "VAR", "score": 0.9973044032248515}, {"start": 215, "end": 216, "word": "4", "entity_group": "PARAM", "score": 0.9997226238836076}, {"start": 236, "end": 237, "word": "5", "entity_group": "PARAM", "score": 0.9997276215543083}, {"start": 273, "end": 293, "word": "apple flavored drink", "entity_group": "VAR", "score": 0.9974757841784316}, {"start": 303, "end": 304, "word": "6", "entity_group": "PARAM", "score": 0.99972259342684}, {"start": 324, "end": 325, "word": "3", "entity_group": "PARAM", "score": 0.9996862048766505}, {"start": 380, "end": 387, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9973404787664835}, {"start": 391, "end": 393, "word": "13", "entity_group": "LIMIT", "score": 0.9997496264380291}, {"start": 460, "end": 468, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9908825268081498}, {"start": 469, "end": 473, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9897823013121436}]}
{"doc_id": "-642701442", "document": "George buys sneakers and boots for resale. Each sneaker costs him $150 and each boot costs him $200. He knows the monthly demand for these shoes, both sneakers and boots, is at most 50. Also, George does not want to spend more than $8750 buying these shoes. If the profit per sneaker sold is $50 and the profit per boot sold is $80, how many of each should he buy to maximize his profit?", "order_mapping": {"sneakers": 0, "boots": 1, "sneaker": 0, "boot": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sneaker": "50", "boot": "80"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "more than", "limit": "8750", "terms": {"sneaker": "150", "boot": "200"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sneakers bought\n- y: Number of boots bought\n\nObjective:\n- George wants to maximize his profit. The profit per sneaker sold is $50 and the profit per boot sold is $80. Therefore, the objective function is: Maximize 50x + 80y\n\nConstraints:\n- The monthly demand for shoes is at most 50, so the constraint is: x + y <= 50.\n- George does not want to spend more than $8750 buying these shoes, leading to the constraint: 150x + 200y <= 8750.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 80y\nConstraints:\nx + y <= 50\n150x + 200y <= 8750", "canonical": {"objective": [-50.0, -80.0], "constraints": [[1.0, 1.0, 50.0], [150.0, 200.0, 8750.0]]}, "solution": {"x": 1, "y": 43}, "pseudo_model": "\nDecision Variables:\n- Number of sneakers bought for resale: Sneakers\n- Number of boots bought for resale: Boots\n\nConstraints:\n- Total number of sneakers and boots bought should not exceed 50:\n  Sneakers + Boots <= 50\n- Total cost of buying sneakers and boots should not exceed $8750 (sneakers cost $150 each, boots cost $200 each):\n  150 * Sneakers + 200 * Boots <= 8750\n\nObjective:\n- Maximize profit ($50 profit per sneaker sold, $80 profit per boot sold):\n  50 * Sneakers + 80 * Boots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSneakers = intvar(0, 999999999)  # Number of sneakers bought for resale\nBoots = intvar(0, 999999999)  # Number of boots bought for resale\n\n# Constraints\nm = Model()\n\n# The monthly demand for both sneakers and boots is at most 50:\nm += Sneakers + Boots <= 50\n# George does not want to spend more than $8750 buying these shoes:\nm += 150 * Sneakers + 200 * Boots <= 8750\n\n# Objective\n# Maximize profit ($50 profit per sneaker sold, $80 profit per boot sold):\nm.maximize(50 * Sneakers + 80 * Boots)\n", "entities": [{"start": 12, "end": 20, "word": "sneakers", "entity_group": "VAR", "score": 0.9998048393484134}, {"start": 25, "end": 30, "word": "boots", "entity_group": "VAR", "score": 0.9993230289962506}, {"start": 49, "end": 56, "word": "sneaker", "entity_group": "VAR", "score": 0.9995043115444063}, {"start": 69, "end": 72, "word": "150", "entity_group": "PARAM", "score": 0.9997493262817532}, {"start": 82, "end": 86, "word": "boot", "entity_group": "VAR", "score": 0.999827871201534}, {"start": 99, "end": 102, "word": "200", "entity_group": "PARAM", "score": 0.9997535776763231}, {"start": 156, "end": 164, "word": "sneakers", "entity_group": "VAR", "score": 0.9997723402170984}, {"start": 169, "end": 174, "word": "boots", "entity_group": "VAR", "score": 0.9993452993260221}, {"start": 180, "end": 187, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976994117335963}, {"start": 188, "end": 190, "word": "50", "entity_group": "LIMIT", "score": 0.9996851648849948}, {"start": 230, "end": 239, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9907556487126665}, {"start": 242, "end": 246, "word": "8750", "entity_group": "LIMIT", "score": 0.9993237242265223}, {"start": 275, "end": 281, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999255658361937}, {"start": 286, "end": 293, "word": "sneaker", "entity_group": "VAR", "score": 0.9986812312145584}, {"start": 304, "end": 306, "word": "50", "entity_group": "PARAM", "score": 0.9995965170761628}, {"start": 315, "end": 321, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386216308722}, {"start": 326, "end": 330, "word": "boot", "entity_group": "VAR", "score": 0.9990377006135018}, {"start": 341, "end": 343, "word": "80", "entity_group": "PARAM", "score": 0.9996530547371272}, {"start": 380, "end": 388, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997891554491865}, {"start": 393, "end": 399, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999262561753153}]}
{"doc_id": "243869483", "document": "Cacaotier has 30,000 grams of cocoa available to make gourmet truffles and chocolate bars. Consumer research determines that at least twice the amount of the chocolate bars are needed than the gourmet truffles and there needs to be at least 10 gourmet truffles made. Each gourmet truffle weighs 700 grams and is sold for a profit of $7. In contrast, a chocolate bar weighs 300 grams each and sells for a profit of $3. How many of each product should Cacaotier prepare to obtain the maximum profit?", "order_mapping": {"gourmet truffles": 0, "chocolate bars": 1, "gourmet truffle": 0, "chocolate bar": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"gourmet truffle": "7", "chocolate bar": "3"}}, "const_declarations": [{"type": "xby", "x_var": "chocolate bars", "direction": "at least", "param": "twice", "y_var": "gourmet truffles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "gourmet truffles", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "30,000", "terms": {"gourmet truffle": "700", "chocolate bar": "300"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of gourmet truffles\n- y: Number of chocolate bars\n\nObjective:\n- Cacaotier wants to maximize the profit. Each gourmet truffle is sold for a profit of $7, and each chocolate bar is sold for a profit of $3. Therefore, the objective function is: Maximize 7x + 3y\n\nConstraints:\n- Cacaotier has 30,000 grams of cocoa available. Each gourmet truffle weighs 700 grams and each chocolate bar weighs 300 grams. This gives the constraint: 700x + 300y <= 30000.\n- Consumer research determines that at least twice the amount of the chocolate bars are needed than the gourmet truffles, leading to the constraint: y >= 2x.\n- There needs to be at least 10 gourmet truffles made, resulting in the constraint: x >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 3y\nConstraints:\n700x + 300y <= 30000\ny >= 2x\nx >= 10", "canonical": {"objective": [-7.0, -3.0], "constraints": [[700.0, 300.0, 30000.0], [2.0, -1.0, 0.0], [-1.0, 0.0, -10.0]]}, "solution": {"x": 21, "y": 51}, "pseudo_model": "\nDecision Variables:\n- Number of gourmet truffles made: GourmetTruffles\n- Number of chocolate bars made: ChocolateBars\n\nConstraints:\n- At least twice the amount of chocolate bars as gourmet truffles:\n  ChocolateBars >= 2 * GourmetTruffles\n- At least 10 gourmet truffles must be made:\n  GourmetTruffles >= 10\n- Total weight of products made should not exceed 30,000 grams (700 grams per gourmet truffle, 300 grams per chocolate bar):\n  700 * GourmetTruffles + 300 * ChocolateBars <= 30000\n\nObjective:\n- Maximize profit (7 dollars per gourmet truffle, 3 dollars per chocolate bar):\n  7 * GourmetTruffles + 3 * ChocolateBars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGourmetTruffles = intvar(0, 999999999)  # Number of gourmet truffles made\nChocolateBars = intvar(0, 999999999)  # Number of chocolate bars made\n\n# Constraints\nm = Model()\n\n# At least twice the amount of chocolate bars are needed than the gourmet truffles:\nm += ChocolateBars >= 2 * GourmetTruffles\n# There needs to be at least 10 gourmet truffles made:\nm += GourmetTruffles >= 10\n# Total weight of products made should not exceed 30,000 grams (700 grams per gourmet truffle, 300 grams per chocolate bar):\nm += 700 * GourmetTruffles + 300 * ChocolateBars <= 30000\n\n# Objective\n# Maximize profit (7 dollars per gourmet truffle, 3 dollars per chocolate bar):\nm.maximize(7 * GourmetTruffles + 3 * ChocolateBars)\n", "entities": [{"start": 14, "end": 20, "word": "30,000", "entity_group": "LIMIT", "score": 0.9997397516088947}, {"start": 36, "end": 45, "word": "available", "entity_group": "CONST_DIR", "score": 0.9968652877221964}, {"start": 54, "end": 70, "word": "gourmet truffles", "entity_group": "VAR", "score": 0.9999797043057543}, {"start": 75, "end": 89, "word": "chocolate bars", "entity_group": "VAR", "score": 0.9999780896210068}, {"start": 126, "end": 134, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9975660570053659}, {"start": 135, "end": 140, "word": "twice", "entity_group": "PARAM", "score": 0.9933482739717332}, {"start": 159, "end": 173, "word": "chocolate bars", "entity_group": "VAR", "score": 0.999981533684069}, {"start": 194, "end": 210, "word": "gourmet truffles", "entity_group": "VAR", "score": 0.999973184211816}, {"start": 233, "end": 241, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983285129924417}, {"start": 242, "end": 244, "word": "10", "entity_group": "LIMIT", "score": 0.9992561988073886}, {"start": 245, "end": 261, "word": "gourmet truffles", "entity_group": "VAR", "score": 0.9999693663906681}, {"start": 274, "end": 289, "word": "gourmet truffle", "entity_group": "VAR", "score": 0.9999838191966017}, {"start": 297, "end": 300, "word": "700", "entity_group": "PARAM", "score": 0.9995827670857348}, {"start": 325, "end": 331, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997127920445519}, {"start": 337, "end": 338, "word": "7", "entity_group": "PARAM", "score": 0.9995035353348031}, {"start": 357, "end": 370, "word": "chocolate bar", "entity_group": "VAR", "score": 0.9999211897561685}, {"start": 378, "end": 381, "word": "300", "entity_group": "PARAM", "score": 0.9996622045443825}, {"start": 409, "end": 415, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996321101531916}, {"start": 421, "end": 422, "word": "3", "entity_group": "PARAM", "score": 0.9992967314057434}, {"start": 489, "end": 496, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9866512953262256}, {"start": 497, "end": 503, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998976222324293}]}
{"doc_id": "-1164473054", "document": "Jack makes rings and necklaces using gems, each requiring the use of a heating machine and a polishing machine. On any day the heating machine is available for at the most 15 hours and the polishing machine for at the most 12 hours. It takes 1 hour on the heating machine and 2 hours on the polishing machine to make a ring. It takes 3 hours on the heating machine and 4 hours on the polishing machine to make a necklace. The profit from the sale of a ring is $50 and the profit from the sale of a necklace is $75. Assuming Jack can sell all the rings and necklaces he makes, how should he schedule his daily production in order to maximize his profit?", "order_mapping": {"rings": 0, "necklaces": 1, "ring": 0, "necklace": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"ring": "50", "necklace": "75"}}, "const_declarations": [{"type": "linear", "direction": "at the most", "limit": "15", "terms": {"necklace": "3", "ring": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at the most", "limit": "12", "terms": {"ring": "2", "necklace": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of rings made\n- y: Number of necklaces made\n\nObjective:\n- Jack aims to maximize his profit. The profit from the sale of a ring is $50 and the profit from the sale of a necklace is $75. Therefore, the objective function is: Maximize 50x + 75y\n\nConstraints:\n- The heating machine is available for at most 15 hours and the polishing machine for at most 12 hours. It takes 1 hour on the heating machine and 2 hours on the polishing machine to make a ring, and 3 hours on the heating machine and 4 hours on the polishing machine to make a necklace. This leads to the constraints: x + 3y <= 15 and 2x + 4y <= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 75y\nConstraints:\nx + 3y <= 15\n2x + 4y <= 12", "canonical": {"objective": [-50.0, -75.0], "constraints": [[1.0, 3.0, 15.0], [2.0, 4.0, 12.0]]}, "solution": {"x": 6, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of rings made per day: Rings\n- Number of necklaces made per day: Necklaces\n\nConstraints:\n- Heating machine usage for rings and necklaces should not exceed 15 hours per day:\n  1 * Rings + 3 * Necklaces <= 15\n- Polishing machine usage for rings and necklaces should not exceed 12 hours per day:\n  2 * Rings + 4 * Necklaces <= 12\n\nObjective:\n- Maximize profit ($50 profit per ring, $75 profit per necklace):\n  50 * Rings + 75 * Necklaces\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRings = intvar(0, 999999999)  # Number of rings made per day\nNecklaces = intvar(0, 999999999)  # Number of necklaces made per day\n\n# Constraints\nm = Model()\n\n# Heating machine constraints (1 hour for a ring, 3 hours for a necklace, at most 15 hours available):\nm += 1 * Rings + 3 * Necklaces <= 15\n# Polishing machine constraints (2 hours for a ring, 4 hours for a necklace, at most 12 hours available):\nm += 2 * Rings + 4 * Necklaces <= 12\n\n# Objective\n# Maximize profit ($50 per ring, $75 per necklace):\nm.maximize(50 * Rings + 75 * Necklaces)\n", "entities": [{"start": 11, "end": 16, "word": "rings", "entity_group": "VAR", "score": 0.9992133315553235}, {"start": 21, "end": 30, "word": "necklaces", "entity_group": "VAR", "score": 0.9992855154708201}, {"start": 162, "end": 173, "word": "at the most", "entity_group": "CONST_DIR", "score": 0.9913107358610025}, {"start": 174, "end": 176, "word": "15", "entity_group": "LIMIT", "score": 0.9997458680020854}, {"start": 213, "end": 224, "word": "at the most", "entity_group": "CONST_DIR", "score": 0.9937350671102578}, {"start": 225, "end": 227, "word": "12", "entity_group": "LIMIT", "score": 0.9997198502264636}, {"start": 245, "end": 246, "word": "1", "entity_group": "PARAM", "score": 0.9995634752001468}, {"start": 279, "end": 280, "word": "2", "entity_group": "PARAM", "score": 0.9996713313404341}, {"start": 322, "end": 326, "word": "ring", "entity_group": "VAR", "score": 0.9986721861151154}, {"start": 338, "end": 339, "word": "3", "entity_group": "PARAM", "score": 0.9996540828653013}, {"start": 373, "end": 374, "word": "4", "entity_group": "PARAM", "score": 0.9996537692632685}, {"start": 416, "end": 424, "word": "necklace", "entity_group": "VAR", "score": 0.9993076629737707}, {"start": 431, "end": 437, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998491349813824}, {"start": 457, "end": 461, "word": "ring", "entity_group": "VAR", "score": 0.9992882349740434}, {"start": 467, "end": 469, "word": "50", "entity_group": "PARAM", "score": 0.9995641492600293}, {"start": 478, "end": 484, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998957122078818}, {"start": 504, "end": 512, "word": "necklace", "entity_group": "VAR", "score": 0.9991610678938149}, {"start": 518, "end": 520, "word": "75", "entity_group": "PARAM", "score": 0.9997299931543319}, {"start": 554, "end": 559, "word": "rings", "entity_group": "VAR", "score": 0.9997986934121823}, {"start": 564, "end": 573, "word": "necklaces", "entity_group": "VAR", "score": 0.99955809543005}, {"start": 641, "end": 649, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9975534830398595}, {"start": 654, "end": 660, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999534458253344}]}
{"doc_id": "-1544558203", "document": "You have $300000 available to invest in a 12-month commitment. You can either invest in real estate or the pharmaceuticals industry. The money placed in real estate yields a 5% return, while the money placed in the pharmaceuticals industry yields a 10% return. You have been advised to place at least 30% of the investment in real estate. Due to recent issues with the pharmaceutical industry, you have decided that at most 35% of the investment be placed in the pharmaceuticals industry. How much should you invest in each area to maximize your return on investment?", "order_mapping": {"real estate": 0, "pharmaceuticals industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"real estate": "5%", "pharmaceuticals industry": "10%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "300000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "real estate", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "35%", "var": "pharmaceuticals industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in real estate\n- y: Dollars invested in the pharmaceuticals industry\n\nObjective:\n- The goal is to maximize the return on investment. The return on real estate investment is 5% and the return on the pharmaceuticals industry investment is 10%. Therefore, the objective function is: Maximize 0.05x + 0.10y\n\nConstraints:\n- The total amount available for investment is $300,000, so the constraint is: x + y <= 300000.\n- At least 30% of the investment should be in real estate, leading to the constraint: x >= 0.30(x + y).\n- At most 35% of the investment should be in the pharmaceuticals industry, leading to the constraint: y <= 0.35(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.10y\nConstraints:\nx + y <= 300000\nx >= 0.30(x + y)\ny <= 0.35(x + y)", "canonical": {"objective": [-0.05, -0.1], "constraints": [[1.0, 1.0, 300000.0], [-0.7, 0.3, 0.0], [-0.35, 0.65, 0.0]]}, "solution": {"x": 195000, "y": 105000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in real estate: RealEstate\n- Amount invested in the pharmaceuticals industry: Pharmaceuticals\n\nConstraints:\n- Total investment should not exceed $300000:\n  RealEstate + Pharmaceuticals <= 300000\n- At least 30% of the investment should be in real estate:\n  RealEstate >= 0.30 * (RealEstate + Pharmaceuticals)\n- At most 35% of the investment should be in the pharmaceuticals industry:\n  Pharmaceuticals <= 0.35 * (RealEstate + Pharmaceuticals)\n\nObjective:\n- Maximize return on investment (5% from real estate, 10% from pharmaceuticals):\n  0.05 * RealEstate + 0.10 * Pharmaceuticals\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRealEstate = intvar(0, 999999999)  # Amount invested in real estate\nPharmaceuticals = intvar(0, 999999999)  # Amount invested in the pharmaceuticals industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $300000:\nm += RealEstate + Pharmaceuticals <= 300000\n# At least 30% of the investment should be in real estate:\nm += RealEstate >= 0.30 * (RealEstate + Pharmaceuticals)\n# At most 35% of the investment should be in the pharmaceuticals industry:\nm += Pharmaceuticals <= 0.35 * (RealEstate + Pharmaceuticals)\n\n# Objective\n# Maximize return on investment (5% from real estate, 10% from pharmaceuticals):\nm.maximize(0.05 * RealEstate + 0.10 * Pharmaceuticals)\n", "entities": [{"start": 11, "end": 17, "word": "300000", "entity_group": "LIMIT", "score": 0.9989053612512976}, {"start": 18, "end": 27, "word": "available", "entity_group": "CONST_DIR", "score": 0.9959571680017204}, {"start": 92, "end": 103, "word": "real estate", "entity_group": "VAR", "score": 0.9999599867729977}, {"start": 111, "end": 135, "word": "pharmaceuticals industry", "entity_group": "VAR", "score": 0.9999811882283343}, {"start": 158, "end": 169, "word": "real estate", "entity_group": "VAR", "score": 0.9999642881084826}, {"start": 179, "end": 182, "word": "5 %", "entity_group": "PARAM", "score": 0.9278897466437083}, {"start": 183, "end": 189, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9980979836528183}, {"start": 222, "end": 246, "word": "pharmaceuticals industry", "entity_group": "VAR", "score": 0.9999821844896417}, {"start": 256, "end": 260, "word": "10 %", "entity_group": "PARAM", "score": 0.9367269428964168}, {"start": 261, "end": 267, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9941792099535651}, {"start": 301, "end": 309, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987788947585555}, {"start": 310, "end": 314, "word": "30 %", "entity_group": "LIMIT", "score": 0.9855629591166924}, {"start": 336, "end": 347, "word": "real estate", "entity_group": "VAR", "score": 0.9999392712289704}, {"start": 428, "end": 435, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990332462098998}, {"start": 436, "end": 440, "word": "35 %", "entity_group": "LIMIT", "score": 0.9294709046585858}, {"start": 476, "end": 500, "word": "pharmaceuticals industry", "entity_group": "VAR", "score": 0.9999813378646321}, {"start": 546, "end": 554, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994275069136167}, {"start": 560, "end": 566, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9952801252269373}]}
{"doc_id": "-1384211970", "document": "To pay his monthly rent for his beach house, Roy needs to find at least 50 seashells and 30 crabs. There are two beaches that Roy frequents: Bonzai Beach and Marina Beach. Each day at Bonzai beach, Roy finds 3 seashells and 5 crabs. Each day at Marina Beach, Roy finds 7 seashells and 2 crabs. Formulate an LP to help Roy meet his requirements while spending a minimal amount of time in the mines.", "order_mapping": {"Bonzai Beach": 0, "Marina Beach": 1, "Bonzai beach": 0}, "obj_declaration": {"type": "objvar", "direction": "minimal", "name": "amount of time", "vars": ["Bonzai Beach", "Marina Beach"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"Bonzai beach": "3", "Marina Beach": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"Bonzai beach": "5", "Marina Beach": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Amount of time spent at Bonzai Beach\n- y: Amount of time spent at Marina Beach\n\nObjective:\n- Roy wants to minimize the amount of time spent at the beaches. Therefore, the objective function is: Minimize x + y\n\nConstraints:\n- Roy needs to find at least 50 seashells, which can be formulated as: 3x + 7y >= 50\n- Roy needs to find at least 30 crabs, which can be formulated as: 5x + 2y >= 30\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + y\nConstraints:\n3x + 7y >= 50\n5x + 2y >= 30", "canonical": {"objective": [1.0, 1.0], "constraints": [[-3.0, -7.0, -50.0], [-5.0, -2.0, -30.0]]}, "solution": {"x": 4, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of days spent at Bonzai Beach: DaysAtBonzai\n- Number of days spent at Marina Beach: DaysAtMarina\n\nConstraints:\n- To meet the requirement of at least 50 seashells:\n  3 * DaysAtBonzai + 7 * DaysAtMarina >= 50\n- To meet the requirement of at least 30 crabs:\n  5 * DaysAtBonzai + 2 * DaysAtMarina >= 30\n\nObjective:\n- Minimize the total amount of time spent (in days):\n  DaysAtBonzai + DaysAtMarina\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaysAtBonzai = intvar(0, 999999999)  # Number of days spent at Bonzai Beach\nDaysAtMarina = intvar(0, 999999999)  # Number of days spent at Marina Beach\n\n# Constraints\nm = Model()\n\n# To meet the requirement of at least 50 seashells:\nm += 3 * DaysAtBonzai + 7 * DaysAtMarina >= 50\n# To meet the requirement of at least 30 crabs:\nm += 5 * DaysAtBonzai + 2 * DaysAtMarina >= 30\n\n# Objective\n# Minimize the total amount of time spent (in days):\nm.minimize(DaysAtBonzai + DaysAtMarina)\n", "entities": [{"start": 64, "end": 72, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989380918017045}, {"start": 73, "end": 75, "word": "50", "entity_group": "LIMIT", "score": 0.9993918459079887}, {"start": 90, "end": 92, "word": "30", "entity_group": "LIMIT", "score": 0.9997315187113724}, {"start": 144, "end": 156, "word": "Bonzai Beach", "entity_group": "VAR", "score": 0.9999447407299789}, {"start": 161, "end": 173, "word": "Marina Beach", "entity_group": "VAR", "score": 0.9999809392305109}, {"start": 188, "end": 200, "word": "Bonzai beach", "entity_group": "VAR", "score": 0.9999602119321883}, {"start": 213, "end": 214, "word": "3", "entity_group": "PARAM", "score": 0.9993922393922943}, {"start": 229, "end": 230, "word": "5", "entity_group": "PARAM", "score": 0.9997216864188495}, {"start": 251, "end": 263, "word": "Marina Beach", "entity_group": "VAR", "score": 0.9999468815109328}, {"start": 276, "end": 277, "word": "7", "entity_group": "PARAM", "score": 0.9994712383683041}, {"start": 292, "end": 293, "word": "2", "entity_group": "PARAM", "score": 0.9996668463984396}, {"start": 369, "end": 376, "word": "minimal", "entity_group": "OBJ_DIR", "score": 0.9971798520211479}, {"start": 377, "end": 391, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9742074965567772}]}
{"doc_id": "-1547892789", "document": "An electronics store sells two web cams: a standard definition one and a high definition one. The standard definition web-cam costs the store $150 and yields a profit of $100. The high definition web-cam costs the store $250 and yields a profit of $125. The store owner does not want to invest more than $40000 in web-cam inventory and estimates a total monthly demand of at most 275 web-cams. How many web-cams of either type should be stocked in order to maximize profit?", "order_mapping": {"standard definition": 0, "high definition": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"standard definition": "100", "high definition": "125"}}, "const_declarations": [{"type": "linear", "direction": "more than", "limit": "40000", "terms": {"standard definition": "150", "high definition": "250"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "275", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of standard definition webcams\n- y: Number of high definition webcams\n\nObjective:\n- The store aims to maximize its profit. The standard definition webcam yields a profit of $100 and the high definition webcam yields a profit of $125. Therefore, the objective function is: Maximize 100x + 125y\n\nConstraints:\n- The store owner does not want to invest more than $40000 in webcam inventory, leading to the constraint: 150x + 250y <= 40000.\n- The total monthly demand should be at most 275 webcams, resulting in the constraint: x + y <= 275.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 125y\nConstraints:\n150x + 250y <= 40000\nx + y <= 275", "canonical": {"objective": [-100.0, -125.0], "constraints": [[150.0, 250.0, 40000.0], [1.0, 1.0, 275.0]]}, "solution": {"x": 265, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of standard definition web-cams stocked: StandardDefinition\n- Number of high definition web-cams stocked: HighDefinition\n\nConstraints:\n- The total investment in web-cam inventory should not exceed $40000:\n  150 * StandardDefinition + 250 * HighDefinition <= 40000\n- The total monthly demand of web-cams should not exceed 275:\n  StandardDefinition + HighDefinition <= 275\n\nObjective:\n- Maximize profit ($100 profit per standard definition web-cam, $125 profit per high definition web-cam):\n  100 * StandardDefinition + 125 * HighDefinition\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStandardDefinition = intvar(0, 999999999)  # Number of standard definition web-cams stocked\nHighDefinition = intvar(0, 999999999)  # Number of high definition web-cams stocked\n\n# Constraints\nm = Model()\n\n# The total cost of inventory (standard definition web-cams cost $150 each, high definition web-cams cost $250 each) should not exceed $40000:\nm += 150 * StandardDefinition + 250 * HighDefinition <= 40000\n# The total monthly demand of web-cams should not exceed 275:\nm += StandardDefinition + HighDefinition <= 275\n\n# Objective\n# Maximize profit ($100 profit per standard definition web-cam, $125 profit per high definition web-cam):\nm.maximize(100 * StandardDefinition + 125 * HighDefinition)\n", "entities": [{"start": 44, "end": 63, "word": "standard definition", "entity_group": "VAR", "score": 0.999879073560073}, {"start": 74, "end": 89, "word": "high definition", "entity_group": "VAR", "score": 0.999973757166799}, {"start": 100, "end": 119, "word": "standard definition", "entity_group": "VAR", "score": 0.9999875409541681}, {"start": 148, "end": 151, "word": "150", "entity_group": "PARAM", "score": 0.9995365164146115}, {"start": 165, "end": 171, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996106414042366}, {"start": 177, "end": 180, "word": "100", "entity_group": "PARAM", "score": 0.9997037152365137}, {"start": 187, "end": 202, "word": "high definition", "entity_group": "VAR", "score": 0.9999898164241449}, {"start": 231, "end": 234, "word": "250", "entity_group": "PARAM", "score": 0.9995365164146112}, {"start": 248, "end": 254, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996409198525825}, {"start": 260, "end": 263, "word": "125", "entity_group": "PARAM", "score": 0.9996664825975009}, {"start": 306, "end": 315, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9907780949407985}, {"start": 318, "end": 323, "word": "40000", "entity_group": "LIMIT", "score": 0.9996826679359925}, {"start": 387, "end": 394, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989937878296891}, {"start": 395, "end": 398, "word": "275", "entity_group": "LIMIT", "score": 0.9995463623181171}, {"start": 477, "end": 485, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9946628327077289}, {"start": 486, "end": 492, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990907017272325}]}
{"doc_id": "2108333249", "document": "A factory uses two types of apples, green and red, to make a large batch of pie filling. Green apples consist of 5% sugar and 16% fiber and red apples consists of 25% sugar and 8% fiber. They need to make sure the filling has a minimum of 12 kg of sugar and 5 kg of fiber. If green apples cost $9 per kg and red apples cost $7 per kg, how many kg of each apple should be used to make the filling at minimum cost? What is the minimum cost?", "order_mapping": {"green": 0, "red": 1, "Green apples": 0, "red apples": 1, "green apples": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"green apples": "9", "red apples": "7"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "12", "terms": {"Green apples": "5%", "red apples": "25%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "5", "terms": {"Green apples": "16%", "red apples": "8%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of green apples\n- y: kg of red apples\n\nObjective:\n- The factory aims to minimize the cost of the apples used. Green apples cost $9 per kg and red apples cost $7 per kg. Therefore, the objective function is: Minimize 9x + 7y\n\nConstraints:\n- The filling must have a minimum of 12 kg of sugar, which can be formulated as: 0.05x + 0.25y >= 12\n- The filling must have a minimum of 5 kg of fiber, which can be formulated as: 0.16x + 0.08y >= 5\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 9x + 7y\nConstraints:\n0.05x + 0.25y >= 12\n0.16x + 0.08y >= 5", "canonical": {"objective": [9.0, 7.0], "constraints": [[-0.05, -0.25, -12.0], [-0.16, -0.08, -5.0]]}, "solution": {"x": 8, "y": 47}, "pseudo_model": "\nDecision Variables:\n- kg of green apples used: GreenApples\n- kg of red apples used: RedApples\n\nConstraints:\n- The filling needs a minimum of 12 kg of sugar (5% from green apples and 25% from red apples):\n  0.05 * GreenApples + 0.25 * RedApples >= 12\n- The filling needs a minimum of 5 kg of fiber (16% from green apples and 8% from red apples):\n  0.16 * GreenApples + 0.08 * RedApples >= 5\n\nObjective:\n- Minimize cost (green apples cost $9 per kg and red apples cost $7 per kg):\n  9 * GreenApples + 7 * RedApples\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGreenApples = intvar(0, 999999999)  # kg of green apples used\nRedApples = intvar(0, 999999999)  # kg of red apples used\n\n# Constraints\nm = Model()\n\n# The filling needs a minimum of 12 kg of sugar:\nm += 0.05 * GreenApples + 0.25 * RedApples >= 12\n# The filling needs a minimum of 5 kg of fiber:\nm += 0.16 * GreenApples + 0.08 * RedApples >= 5\n\n# Objective\n# Minimize cost (green apples cost $9 per kg and red apples cost $7 per kg):\nm.minimize(9 * GreenApples + 7 * RedApples)\n", "entities": [{"start": 37, "end": 42, "word": "green", "entity_group": "VAR", "score": 0.9991869032095546}, {"start": 47, "end": 50, "word": "red", "entity_group": "VAR", "score": 0.9993605843176768}, {"start": 92, "end": 104, "word": "Green apples", "entity_group": "VAR", "score": 0.9999307536139288}, {"start": 116, "end": 119, "word": "5 %", "entity_group": "PARAM", "score": 0.9689292054222277}, {"start": 130, "end": 134, "word": "16 %", "entity_group": "PARAM", "score": 0.9930325280147956}, {"start": 145, "end": 155, "word": "red apples", "entity_group": "VAR", "score": 0.9999469076031918}, {"start": 168, "end": 172, "word": "25 %", "entity_group": "PARAM", "score": 0.9873782672489149}, {"start": 183, "end": 186, "word": "8 %", "entity_group": "PARAM", "score": 0.9901237496759115}, {"start": 236, "end": 243, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9987766816529348}, {"start": 247, "end": 249, "word": "12", "entity_group": "LIMIT", "score": 0.9997574967626257}, {"start": 266, "end": 267, "word": "5", "entity_group": "LIMIT", "score": 0.999657983126041}, {"start": 285, "end": 297, "word": "green apples", "entity_group": "VAR", "score": 0.9998496867508118}, {"start": 298, "end": 302, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984107728038437}, {"start": 305, "end": 306, "word": "9", "entity_group": "PARAM", "score": 0.9995082239680663}, {"start": 318, "end": 328, "word": "red apples", "entity_group": "VAR", "score": 0.9999082393070621}, {"start": 329, "end": 333, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989455524108893}, {"start": 336, "end": 337, "word": "7", "entity_group": "PARAM", "score": 0.9995656772344872}, {"start": 411, "end": 418, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9894056684930516}, {"start": 419, "end": 423, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9985493480449078}]}
{"doc_id": "959302629", "document": "A sandwich store sells tuna salad and chicken salad sandwiches. Both sandwiches require time to mix the ingredients and time to put together the sandwich. To make a tuna salad sandwich requires 3 minutes to mix the ingredients and 5 minutes to put together the sandwich. To make a chicken salad sandwich requires 5 minutes to mix the ingredients and 6 minutes to put together the sandwich. In a day, there are 300 minutes available for mixing the ingredients and 400 minutes available for putting together sandwiches. If the profit per tuna salad sandwich is $2 and the profit per chicken salad sandwich is $3, how many of each should be made to maximize profit?", "order_mapping": {"tuna salad": 0, "chicken salad sandwiches": 1, "tuna salad sandwich": 0, "chicken salad sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chicken salad sandwich": "3", "tuna salad sandwich": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"tuna salad sandwich": "3", "chicken salad sandwich": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"tuna salad sandwich": "5", "chicken salad sandwich": "6"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tuna salad sandwiches\n- y: Number of chicken salad sandwiches\n\nObjective:\n- The sandwich store aims to maximize its profit. The profit per tuna salad sandwich is $2 and the profit per chicken salad sandwich is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- There are 300 minutes available for mixing the ingredients, and each tuna salad sandwich requires 3 minutes, and each chicken salad sandwich requires 5 minutes. This leads to the constraint: 3x + 5y <= 300.\n- There are 400 minutes available for putting together sandwiches, and each tuna salad sandwich requires 5 minutes, and each chicken salad sandwich requires 6 minutes. This results in the constraint: 5x + 6y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\n3x + 5y <= 300\n5x + 6y <= 400", "canonical": {"objective": [-2.0, -3.0], "constraints": [[3.0, 5.0, 300.0], [5.0, 6.0, 400.0]]}, "solution": {"x": 28, "y": 43}, "pseudo_model": "\nDecision Variables:\n- Number of tuna salad sandwiches made: TunaSaladSandwiches\n- Number of chicken salad sandwiches made: ChickenSaladSandwiches\n\nConstraints:\n- Total minutes available for mixing the ingredients should not exceed 300 minutes:\n  3 * TunaSaladSandwiches + 5 * ChickenSaladSandwiches <= 300\n- Total minutes available for putting together the sandwiches should not exceed 400 minutes:\n  5 * TunaSaladSandwiches + 6 * ChickenSaladSandwiches <= 400\n\nObjective:\n- Maximize profit (2 dollars per tuna salad sandwich, 3 dollars per chicken salad sandwich):\n  2 * TunaSaladSandwiches + 3 * ChickenSaladSandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTunaSaladSandwiches = intvar(0, 999999999)  # Number of tuna salad sandwiches made\nChickenSaladSandwiches = intvar(0, 999999999)  # Number of chicken salad sandwiches made\n\n# Constraints\nm = Model()\n\n# Total minutes available for mixing the ingredients (300 minutes):\nm += 3 * TunaSaladSandwiches + 5 * ChickenSaladSandwiches <= 300\n# Total minutes available for putting together the sandwiches (400 minutes):\nm += 5 * TunaSaladSandwiches + 6 * ChickenSaladSandwiches <= 400\n\n# Objective\n# Maximize profit (2 dollars per tuna salad sandwich, 3 dollars per chicken salad sandwich):\nm.maximize(2 * TunaSaladSandwiches + 3 * ChickenSaladSandwiches)\n", "entities": [{"start": 23, "end": 33, "word": "tuna salad", "entity_group": "VAR", "score": 0.999749022379699}, {"start": 38, "end": 62, "word": "chicken salad sandwiches", "entity_group": "VAR", "score": 0.9967433656998146}, {"start": 167, "end": 186, "word": "tuna salad sandwich", "entity_group": "VAR", "score": 0.995778920628062}, {"start": 196, "end": 197, "word": "3", "entity_group": "PARAM", "score": 0.9995523880989364}, {"start": 233, "end": 234, "word": "5", "entity_group": "PARAM", "score": 0.9996561916326915}, {"start": 284, "end": 306, "word": "chicken salad sandwich", "entity_group": "VAR", "score": 0.9957789206280541}, {"start": 316, "end": 317, "word": "5", "entity_group": "PARAM", "score": 0.999552388098934}, {"start": 353, "end": 354, "word": "6", "entity_group": "PARAM", "score": 0.9996561916343009}, {"start": 415, "end": 418, "word": "300", "entity_group": "LIMIT", "score": 0.9997237125221135}, {"start": 427, "end": 436, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996512969645646}, {"start": 468, "end": 471, "word": "400", "entity_group": "LIMIT", "score": 0.9997356601150639}, {"start": 480, "end": 489, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988560777231759}, {"start": 531, "end": 537, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999230929048998}, {"start": 542, "end": 561, "word": "tuna salad sandwich", "entity_group": "VAR", "score": 0.99731720511419}, {"start": 567, "end": 568, "word": "2", "entity_group": "PARAM", "score": 0.9991928346383444}, {"start": 577, "end": 583, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350319309774}, {"start": 588, "end": 610, "word": "chicken salad sandwich", "entity_group": "VAR", "score": 0.9965544158376045}, {"start": 616, "end": 617, "word": "3", "entity_group": "PARAM", "score": 0.9993582181196221}, {"start": 655, "end": 663, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 664, "end": 670, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-1043307800", "document": "A restaurant makes chicken and goat curry. One serving of chicken curry requires 1 unit of tomatoes, 2 units of curry paste, and 3 units of water. One serving of goat curry requires 2 units of tomatoes, 3 units of curry paste, and 1 unit of water. The restaurant has available 20 units of tomatoes, 30 units of curry paste, and 25 units of water. If the profit per serving of chicken curry is $5 and the profit per serving of goat curry is $7, how many of each should be made to maximize profit?", "order_mapping": {"chicken": 0, "goat": 1, "chicken curry": 0, "goat curry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chicken curry": "5", "goat curry": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "20", "terms": {"chicken curry": "1", "goat curry": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "30", "terms": {"chicken curry": "2", "goat curry": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "25", "terms": {"chicken curry": "3", "goat curry": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of chicken curry\n- y: Number of servings of goat curry\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per serving of chicken curry is $5 and the profit per serving of goat curry is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The availability of ingredients limits the production of each type of curry. The constraints are:\n  - 1 unit of tomatoes is required for each serving of chicken curry and 2 units for each serving of goat curry. The constraint is: x + 2y <= 20\n  - 2 units of curry paste is required for each serving of chicken curry and 3 units for each serving of goat curry. The constraint is: 2x + 3y <= 30\n  - 3 units of water is required for each serving of chicken curry and 1 unit for each serving of goat curry. The constraint is: 3x + y <= 25\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\nx + 2y <= 20\n2x + 3y <= 30\n3x + y <= 25", "canonical": {"objective": [-5.0, -7.0], "constraints": [[1.0, 2.0, 20.0], [2.0, 3.0, 30.0], [3.0, 1.0, 25.0]]}, "solution": {"x": 6, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of chicken curry servings made: ChickenCurry\n- Number of goat curry servings made: GoatCurry\n\nConstraints:\n- Limit on tomatoes (20 units available):\n  1 * ChickenCurry + 2 * GoatCurry <= 20\n- Limit on curry paste (30 units available):\n  2 * ChickenCurry + 3 * GoatCurry <= 30\n- Limit on water (25 units available):\n  3 * ChickenCurry + 1 * GoatCurry <= 25\n\nObjective:\n- Maximize profit (5 dollars per serving of chicken curry, 7 dollars per serving of goat curry):\n  5 * ChickenCurry + 7 * GoatCurry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChickenCurry = intvar(0, 999999999)  # Number of chicken curry servings made\nGoatCurry = intvar(0, 999999999)  # Number of goat curry servings made\n\n# Constraints\nm = Model()\n\n# The restaurant has available 20 units of tomatoes:\nm += 1 * ChickenCurry + 2 * GoatCurry <= 20\n# The restaurant has available 30 units of curry paste:\nm += 2 * ChickenCurry + 3 * GoatCurry <= 30\n# The restaurant has available 25 units of water:\nm += 3 * ChickenCurry + 1 * GoatCurry <= 25\n\n# Objective\n# Maximize profit (5 dollars per serving of chicken curry, 7 dollars per serving of goat curry):\nm.maximize(5 * ChickenCurry + 7 * GoatCurry)\n", "entities": [{"start": 19, "end": 26, "word": "chicken", "entity_group": "VAR", "score": 0.9988242531883296}, {"start": 31, "end": 35, "word": "goat", "entity_group": "VAR", "score": 0.9994114847055632}, {"start": 59, "end": 72, "word": "chicken curry", "entity_group": "VAR", "score": 0.9999703795550413}, {"start": 82, "end": 83, "word": "1", "entity_group": "PARAM", "score": 0.9990175883802577}, {"start": 103, "end": 104, "word": "2", "entity_group": "PARAM", "score": 0.9997327088433815}, {"start": 132, "end": 133, "word": "3", "entity_group": "PARAM", "score": 0.9996289495730066}, {"start": 166, "end": 176, "word": "goat curry", "entity_group": "VAR", "score": 0.9999740704622176}, {"start": 186, "end": 187, "word": "2", "entity_group": "PARAM", "score": 0.9995426623343039}, {"start": 208, "end": 209, "word": "3", "entity_group": "PARAM", "score": 0.9997390202086327}, {"start": 237, "end": 238, "word": "1", "entity_group": "PARAM", "score": 0.9990392478146388}, {"start": 274, "end": 283, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987186790074837}, {"start": 284, "end": 286, "word": "20", "entity_group": "LIMIT", "score": 0.9993937831385378}, {"start": 307, "end": 309, "word": "30", "entity_group": "LIMIT", "score": 0.9997588191689595}, {"start": 337, "end": 339, "word": "25", "entity_group": "LIMIT", "score": 0.9994600217593798}, {"start": 364, "end": 370, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998923520415253}, {"start": 386, "end": 399, "word": "chicken curry", "entity_group": "VAR", "score": 0.9999339931527745}, {"start": 405, "end": 406, "word": "5", "entity_group": "PARAM", "score": 0.9996331120778102}, {"start": 415, "end": 421, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998869705832126}, {"start": 437, "end": 447, "word": "goat curry", "entity_group": "VAR", "score": 0.9999065211447427}, {"start": 453, "end": 454, "word": "7", "entity_group": "PARAM", "score": 0.999713856054396}, {"start": 492, "end": 500, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 501, "end": 507, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "688677284", "document": "A bakery makes chocolate and blueberry muffins, each requiring both sugar and butter. The bakery has 6000 grams of sugar and 4000 grams of butter available. Chocolate muffins require 30 grams of sugar and 10 grams of butter, while blueberry muffins require 20 grams of sugar and 15 grams of butter. Assuming all other ingredients are available, what is the maximum number of muffins that can be made?", "order_mapping": {"chocolate": 0, "blueberry muffins": 1, "Chocolate muffins": 0}, "obj_declaration": {"type": "objvar", "direction": "maximum", "name": "number of muffins", "vars": ["Chocolate muffins", "blueberry muffins"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "6000", "terms": {"Chocolate muffins": "30", "blueberry muffins": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"Chocolate muffins": "10", "blueberry muffins": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate muffins\n- y: Number of blueberry muffins\n\nObjective:\n- The bakery wants to maximize the total number of muffins produced. Therefore, the objective function is: Maximize x + y\n\nConstraints:\n- The bakery has 6000 grams of sugar available, and chocolate muffins require 30 grams of sugar and blueberry muffins require 20 grams of sugar. So, the constraint is: 30x + 20y <= 6000.\n- The bakery has 4000 grams of butter available, and chocolate muffins require 10 grams of butter and blueberry muffins require 15 grams of butter. So, the constraint is: 10x + 15y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + y\nConstraints:\n30x + 20y <= 6000\n10x + 15y <= 4000", "canonical": {"objective": [-1.0, -1.0], "constraints": [[30.0, 20.0, 6000.0], [10.0, 15.0, 4000.0]]}, "solution": {"x": 40, "y": 240}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate muffins made: ChocolateMuffins\n- Number of blueberry muffins made: BlueberryMuffins\n\nConstraints:\n- Sugar constraint (6000 grams available):\n  30 * ChocolateMuffins + 20 * BlueberryMuffins <= 6000\n- Butter constraint (4000 grams available):\n  10 * ChocolateMuffins + 15 * BlueberryMuffins <= 4000\n\nObjective:\n- Maximize the total number of muffins made:\n  ChocolateMuffins + BlueberryMuffins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateMuffins = intvar(0, 999999999)  # Number of chocolate muffins made\nBlueberryMuffins = intvar(0, 999999999)  # Number of blueberry muffins made\n\n# Constraints\nm = Model()\n\n# Sugar constraint: 30g for chocolate and 20g for blueberry, total available 6000g\nm += 30 * ChocolateMuffins + 20 * BlueberryMuffins <= 6000\n# Butter constraint: 10g for chocolate and 15g for blueberry, total available 4000g\nm += 10 * ChocolateMuffins + 15 * BlueberryMuffins <= 4000\n\n# Objective\n# Maximize the total number of muffins made\nm.maximize(ChocolateMuffins + BlueberryMuffins)\n", "entities": [{"start": 15, "end": 24, "word": "chocolate", "entity_group": "VAR", "score": 0.9990456956978467}, {"start": 29, "end": 46, "word": "blueberry muffins", "entity_group": "VAR", "score": 0.9999763410167005}, {"start": 103, "end": 107, "word": "6000", "entity_group": "LIMIT", "score": 0.9997416813282352}, {"start": 127, "end": 131, "word": "4000", "entity_group": "LIMIT", "score": 0.99973506202099}, {"start": 148, "end": 157, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986826819847587}, {"start": 160, "end": 177, "word": "Chocolate muffins", "entity_group": "VAR", "score": 0.999974061459219}, {"start": 186, "end": 188, "word": "30", "entity_group": "PARAM", "score": 0.9997064838714875}, {"start": 208, "end": 210, "word": "10", "entity_group": "PARAM", "score": 0.9997337117567003}, {"start": 235, "end": 252, "word": "blueberry muffins", "entity_group": "VAR", "score": 0.9999768624719857}, {"start": 261, "end": 263, "word": "20", "entity_group": "PARAM", "score": 0.9997079993007235}, {"start": 283, "end": 285, "word": "15", "entity_group": "PARAM", "score": 0.9997190561353593}, {"start": 363, "end": 370, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9888352701598009}, {"start": 371, "end": 388, "word": "number of muffins", "entity_group": "OBJ_NAME", "score": 0.9904144775975814}]}
{"doc_id": "-1987579295", "document": "A small wood shop that specializes in kitchen tools and can make a maximum of 30 cutting boards and 50 knife handles in a week. It takes a worker 5 hours to make a cutting board and 10 hours to make a knife handle. The profit on a cutting board is $100 and the profit on a knife handle is $250.  The total number of hours by all of the employees is at most 200 hours per week. Formulate an LP problem in order to maximize profit.", "order_mapping": {"cutting boards": 0, "knife handles": 1, "cutting board": 0, "knife handle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cutting board": "100", "knife handle": "250"}}, "const_declarations": [{"type": "upperbound", "direction": "maximum", "limit": "30", "var": "cutting boards", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "maximum", "limit": "50", "var": "knife handles", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "200", "terms": {"cutting board": "5", "knife handle": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cutting boards produced\n- y: Number of knife handles produced\n\nObjective:\n- The wood shop aims to maximize its profit. The profit on a cutting board is $100 and the profit on a knife handle is $250. Therefore, the objective function is: Maximize 100x + 250y\n\nConstraints:\n- The wood shop can make a maximum of 30 cutting boards in a week, leading to the constraint: x <= 30.\n- The wood shop can make a maximum of 50 knife handles in a week, leading to the constraint: y <= 50.\n- The total number of hours worked by all employees is at most 200 hours per week. It takes 5 hours to make a cutting board and 10 hours to make a knife handle, resulting in the constraint: 5x + 10y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 250y\nConstraints:\nx <= 30\ny <= 50\n5x + 10y <= 200", "canonical": {"objective": [-100.0, -250.0], "constraints": [[1.0, 0.0, 30.0], [0.0, 1.0, 50.0], [5.0, 10.0, 200.0]]}, "solution": {"x": 0, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of cutting boards made per week: CuttingBoards\n- Number of knife handles made per week: KnifeHandles\n\nConstraints:\n- Maximum of 30 cutting boards per week:\n  CuttingBoards <= 30\n- Maximum of 50 knife handles per week:\n  KnifeHandles <= 50\n- Total work hours should not exceed 200 hours per week (5 hours per cutting board, 10 hours per knife handle):\n  5 * CuttingBoards + 10 * KnifeHandles <= 200\n\nObjective:\n- Maximize profit ($100 profit per cutting board, $250 profit per knife handle):\n  100 * CuttingBoards + 250 * KnifeHandles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCuttingBoards = intvar(0, 999999999)  # Number of cutting boards made per week\nKnifeHandles = intvar(0, 999999999)  # Number of knife handles made per week\n\n# Constraints\nm = Model()\n\n# The shop can make a maximum of 30 cutting boards per week:\nm += CuttingBoards <= 30\n# The shop can make a maximum of 50 knife handles per week:\nm += KnifeHandles <= 50\n# The total number of hours by all of the employees is at most 200 hours per week (5 hours per cutting board, 10 hours per knife handle):\nm += 5 * CuttingBoards + 10 * KnifeHandles <= 200\n\n# Objective\n# Maximize profit ($100 profit per cutting board, $250 profit per knife handle):\nm.maximize(100 * CuttingBoards + 250 * KnifeHandles)\n", "entities": [{"start": 67, "end": 74, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9955589780526426}, {"start": 78, "end": 80, "word": "30", "entity_group": "LIMIT", "score": 0.9996982603431233}, {"start": 81, "end": 95, "word": "cutting boards", "entity_group": "VAR", "score": 0.9999419653637209}, {"start": 100, "end": 102, "word": "50", "entity_group": "LIMIT", "score": 0.9993064456908005}, {"start": 103, "end": 116, "word": "knife handles", "entity_group": "VAR", "score": 0.9997992556008773}, {"start": 147, "end": 148, "word": "5", "entity_group": "PARAM", "score": 0.9996048145569756}, {"start": 165, "end": 178, "word": "cutting board", "entity_group": "VAR", "score": 0.9992108779357756}, {"start": 183, "end": 185, "word": "10", "entity_group": "PARAM", "score": 0.9996394556707857}, {"start": 202, "end": 214, "word": "knife handle", "entity_group": "VAR", "score": 0.9993014734862967}, {"start": 221, "end": 227, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999868422517668}, {"start": 233, "end": 246, "word": "cutting board", "entity_group": "VAR", "score": 0.9999288434352127}, {"start": 252, "end": 255, "word": "100", "entity_group": "PARAM", "score": 0.9995308908912065}, {"start": 264, "end": 270, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999356371680111}, {"start": 276, "end": 288, "word": "knife handle", "entity_group": "VAR", "score": 0.9996441095570427}, {"start": 294, "end": 297, "word": "250", "entity_group": "PARAM", "score": 0.9995462927133745}, {"start": 353, "end": 360, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998983340033356}, {"start": 361, "end": 364, "word": "200", "entity_group": "LIMIT", "score": 0.9997515596789426}, {"start": 418, "end": 426, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9875922319642458}, {"start": 427, "end": 433, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9971200941451337}]}
{"doc_id": "1954410196", "document": "A syrup factory makes chocolate and caramel syrup. They can make at most 15 tons of each per week. In addition, they must make at least 2 tons of chocolate syrup and at least 3 tons of caramel syrup per week. Each ton of chocolate and caramel syrup requires 3 hours on the heating machine. The heating machine is available for at most 50 hours per week. If the profit per ton of chocolate syrup is $500 and the profit per ton of caramel syrup is $350, how many tons of each should be made to maximize profit?", "order_mapping": {"chocolate": 0, "caramel syrup": 1, "chocolate syrup": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chocolate syrup": "500", "caramel syrup": "350"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "15", "var": "chocolate", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "15", "var": "caramel syrup", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "chocolate syrup", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "caramel syrup", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50", "terms": {"chocolate": "3", "caramel syrup": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Tons of chocolate syrup made\n- y: Tons of caramel syrup made\n\nObjective:\n- The factory aims to maximize its profit. The profit per ton of chocolate syrup is $500 and the profit per ton of caramel syrup is $350. Therefore, the objective function is: Maximize 500x + 350y\n\nConstraints:\n- The factory can make at most 15 tons of each syrup per week, leading to the constraints: x <= 15 and y <= 15.\n- The factory must make at least 2 tons of chocolate syrup and at least 3 tons of caramel syrup per week, resulting in the constraints: x >= 2 and y >= 3.\n- Each ton of chocolate and caramel syrup requires 3 hours on the heating machine, and the heating machine is available for at most 50 hours per week. This leads to the constraint: 3x + 3y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 350y\nConstraints:\nx <= 15\ny <= 15\nx >= 2\ny >= 3\n3x + 3y <= 50", "canonical": {"objective": [-500.0, -350.0], "constraints": [[1.0, 0.0, 15.0], [0.0, 1.0, 15.0], [-1.0, 0.0, -2.0], [0.0, -1.0, -3.0], [3.0, 3.0, 50.0]]}, "solution": {"x": 13, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Tons of chocolate syrup made per week: ChocolateSyrup\n- Tons of caramel syrup made per week: CaramelSyrup\n\nConstraints:\n- At most 15 tons of chocolate syrup per week:\n  ChocolateSyrup <= 15\n- At most 15 tons of caramel syrup per week:\n  CaramelSyrup <= 15\n- At least 2 tons of chocolate syrup per week:\n  ChocolateSyrup >= 2\n- At least 3 tons of caramel syrup per week:\n  CaramelSyrup >= 3\n- Heating machine time for both syrups should not exceed 50 hours per week (3 hours per ton for each syrup):\n  3 * ChocolateSyrup + 3 * CaramelSyrup <= 50\n\nObjective:\n- Maximize profit ($500 per ton of chocolate syrup, $350 per ton of caramel syrup):\n  500 * ChocolateSyrup + 350 * CaramelSyrup\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateSyrup = intvar(0, 999999999)  # Tons of chocolate syrup made per week\nCaramelSyrup = intvar(0, 999999999)  # Tons of caramel syrup made per week\n\n# Constraints\nm = Model()\n\n# Can make at most 15 tons of chocolate syrup per week:\nm += ChocolateSyrup <= 15\n# Can make at most 15 tons of caramel syrup per week:\nm += CaramelSyrup <= 15\n# Must make at least 2 tons of chocolate syrup per week:\nm += ChocolateSyrup >= 2\n# Must make at least 3 tons of caramel syrup per week:\nm += CaramelSyrup >= 3\n# Each ton of syrup requires 3 hours on the heating machine, which is available for at most 50 hours per week:\nm += 3 * ChocolateSyrup + 3 * CaramelSyrup <= 50\n\n# Objective\n# Maximize profit ($500 per ton of chocolate syrup, $350 per ton of caramel syrup):\nm.maximize(500 * ChocolateSyrup + 350 * CaramelSyrup)\n", "entities": [{"start": 22, "end": 31, "word": "chocolate", "entity_group": "VAR", "score": 0.9992926268330278}, {"start": 36, "end": 49, "word": "caramel syrup", "entity_group": "VAR", "score": 0.9999787683326359}, {"start": 66, "end": 73, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991283946820572}, {"start": 74, "end": 76, "word": "15", "entity_group": "LIMIT", "score": 0.9997237112804648}, {"start": 130, "end": 138, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989438784256516}, {"start": 139, "end": 140, "word": "2", "entity_group": "LIMIT", "score": 0.9996926185214563}, {"start": 149, "end": 164, "word": "chocolate syrup", "entity_group": "VAR", "score": 0.9999562023232982}, {"start": 169, "end": 177, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987626452174778}, {"start": 178, "end": 179, "word": "3", "entity_group": "LIMIT", "score": 0.9996919524576955}, {"start": 188, "end": 201, "word": "caramel syrup", "entity_group": "VAR", "score": 0.9999732646876154}, {"start": 225, "end": 234, "word": "chocolate", "entity_group": "VAR", "score": 0.9995813672769089}, {"start": 239, "end": 252, "word": "caramel syrup", "entity_group": "VAR", "score": 0.9999643120513912}, {"start": 262, "end": 263, "word": "3", "entity_group": "PARAM", "score": 0.9996024760301165}, {"start": 332, "end": 339, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985459451954362}, {"start": 340, "end": 342, "word": "50", "entity_group": "LIMIT", "score": 0.9997584513616112}, {"start": 367, "end": 373, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998887766153296}, {"start": 385, "end": 400, "word": "chocolate syrup", "entity_group": "VAR", "score": 0.9999348077232452}, {"start": 406, "end": 409, "word": "500", "entity_group": "PARAM", "score": 0.9996061588354316}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999911436983617}, {"start": 436, "end": 449, "word": "caramel syrup", "entity_group": "VAR", "score": 0.9999428277900203}, {"start": 455, "end": 458, "word": "350", "entity_group": "PARAM", "score": 0.9996352392466579}, {"start": 501, "end": 509, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 510, "end": 516, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}]}
{"doc_id": "557507017", "document": "Banana sells two types of subscription software packages: a student version and a professional version which will cost $750 and $3000 to produce respectively. The marketing department estimates that they can sell at most 350 licenses for both versions combined a month. The profit per student version is $400 and the profit per professional version is $1500. If Banana does not want to spend more than $500000, how many of each software package should they produce to maximize the profits.", "order_mapping": {"student version": 0, "professional version": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"student version": "400", "professional version": "1500"}}, "const_declarations": [{"type": "linear", "direction": "more than", "limit": "500000", "terms": {"student version": "750", "professional version": "3000"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "350", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of student version software packages produced\n- y: Number of professional version software packages produced\n\nObjective:\n- The company aims to maximize its profits. The profit per student version is $400 and the profit per professional version is $1500. Therefore, the objective function is: Maximize 400x + 1500y\n\nConstraints:\n- The total cost of production should not exceed $500,000, leading to the constraint: 750x + 3000y <= 500000.\n- The company can sell at most 350 licenses for both versions combined a month, resulting in the constraint: x + y <= 350.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 1500y\nConstraints:\n750x + 3000y <= 500000\nx + y <= 350", "canonical": {"objective": [-400.0, -1500.0], "constraints": [[750.0, 3000.0, 500000.0], [1.0, 1.0, 350.0]]}, "solution": {"x": 242, "y": 106}, "pseudo_model": "\nDecision Variables:\n- Number of student version packages produced: StudentVersion\n- Number of professional version packages produced: ProfessionalVersion\n\nConstraints:\n- Total production cost should not exceed $500000:\n  750 * StudentVersion + 3000 * ProfessionalVersion <= 500000\n- At most 350 licenses for both versions combined can be sold a month:\n  StudentVersion + ProfessionalVersion <= 350\n\nObjective:\n- Maximize profits (Profit per student version is $400, and per professional version is $1500):\n  400 * StudentVersion + 1500 * ProfessionalVersion\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStudentVersion = intvar(0, 999999999)  # Number of student version packages produced\nProfessionalVersion = intvar(0, 999999999)  # Number of professional version packages produced\n\n# Constraints\nm = Model()\n\n# Total production cost should not exceed $500000:\n# Cost of producing student version is $750 each, and professional version is $3000 each\nm += 750 * StudentVersion + 3000 * ProfessionalVersion <= 500000\n\n# They can sell at most 350 licenses for both versions combined a month:\nm += StudentVersion + ProfessionalVersion <= 350\n\n# Objective\n# Maximize profits (Profit per student version is $400, and per professional version is $1500):\nm.maximize(400 * StudentVersion + 1500 * ProfessionalVersion)\n", "entities": [{"start": 61, "end": 76, "word": "student version", "entity_group": "VAR", "score": 0.9999705222072458}, {"start": 83, "end": 103, "word": "professional version", "entity_group": "VAR", "score": 0.9985312300617909}, {"start": 122, "end": 125, "word": "750", "entity_group": "PARAM", "score": 0.9989846837427455}, {"start": 132, "end": 136, "word": "3000", "entity_group": "PARAM", "score": 0.9995839617430439}, {"start": 217, "end": 224, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989375710422167}, {"start": 225, "end": 228, "word": "350", "entity_group": "LIMIT", "score": 0.9997298145158484}, {"start": 279, "end": 285, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999002697400315}, {"start": 290, "end": 305, "word": "student version", "entity_group": "VAR", "score": 0.9999766289455361}, {"start": 311, "end": 314, "word": "400", "entity_group": "PARAM", "score": 0.9995664237671517}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999926287502093}, {"start": 334, "end": 354, "word": "professional version", "entity_group": "VAR", "score": 0.9999383177619815}, {"start": 360, "end": 364, "word": "1500", "entity_group": "PARAM", "score": 0.999756219395629}, {"start": 400, "end": 409, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9916474470812461}, {"start": 412, "end": 418, "word": "500000", "entity_group": "LIMIT", "score": 0.9995928185967091}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987886284539936}, {"start": 491, "end": 498, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996017981380562}]}
{"doc_id": "1466742521", "document": "To make their sausages and burger patties, a factory uses two machines, a meat-grinder and a meat-packer. To produce one batch of sausages requires 2 hours on the meat-grinder and 3 hours on the meat-packer. To produce one batch of burger patties requires 4 hours on the meat-grinder and 1.5 hours on the meat-packer. Each machine runs for at most 3000 hours per year. If the profit per batch of sausages is $200 and the profit per batch of burger patties is $250, how many batches of each should be made to maximize profit?", "order_mapping": {"sausages": 0, "burger patties": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sausages": "200", "burger patties": "250"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "3000", "terms": {"sausages": "2", "burger patties": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "3000", "terms": {"sausages": "3", "burger patties": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of batches of sausages\n- y: Number of batches of burger patties\n\nObjective:\n- The factory aims to maximize its profit. The profit per batch of sausages is $200 and the profit per batch of burger patties is $250. Therefore, the objective function is: Maximize 200x + 250y\n\nConstraints:\n- The meat-grinder and meat-packer can run for at most 3000 hours per year. The time required to produce one batch of sausages and burger patties on the meat-grinder and meat-packer can be represented as: 2x + 4y <= 3000 and 3x + 1.5y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 250y\nConstraints:\n2x + 4y <= 3000\n3x + 1.5y <= 3000", "canonical": {"objective": [-200.0, -250.0], "constraints": [[2.0, 4.0, 3000.0], [3.0, 1.5, 3000.0]]}, "solution": {"x": 832, "y": 334}, "pseudo_model": "\nDecision Variables:\n- Number of batches of sausages produced: Sausages\n- Number of batches of burger patties produced: BurgerPatties\n\nConstraints:\n- Meat-grinder usage for both products should not exceed 3000 hours per year:\n  2 * Sausages + 4 * BurgerPatties <= 3000\n- Meat-packer usage for both products should not exceed 3000 hours per year:\n  3 * Sausages + 1.5 * BurgerPatties <= 3000\n\nObjective:\n- Maximize profit (200 dollars per batch of sausages, 250 dollars per batch of burger patties):\n  200 * Sausages + 250 * BurgerPatties\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSausages = intvar(0, 999999999)  # Number of batches of sausages\nBurgerPatties = intvar(0, 999999999)  # Number of batches of burger patties\n\n# Constraints\nm = Model()\n\n# Machine hours constraints\n# Meat-grinder: 2 hours for sausages, 4 hours for burger patties, at most 3000 hours per year\nm += 2 * Sausages + 4 * BurgerPatties <= 3000\n# Meat-packer: 3 hours for sausages, 1.5 hours for burger patties, at most 3000 hours per year\nm += 3 * Sausages + 1.5 * BurgerPatties <= 3000\n\n# Objective\n# Maximize profit ($200 per batch of sausages, $250 per batch of burger patties)\nm.maximize(200 * Sausages + 250 * BurgerPatties)\n", "entities": [{"start": 14, "end": 22, "word": "sausages", "entity_group": "VAR", "score": 0.9996217340505675}, {"start": 27, "end": 41, "word": "burger patties", "entity_group": "VAR", "score": 0.9999823580297841}, {"start": 137, "end": 145, "word": "sausages", "entity_group": "VAR", "score": 0.9994498535188249}, {"start": 155, "end": 156, "word": "2", "entity_group": "PARAM", "score": 0.9996634769937276}, {"start": 189, "end": 190, "word": "3", "entity_group": "PARAM", "score": 0.9997058800301322}, {"start": 244, "end": 258, "word": "burger patties", "entity_group": "VAR", "score": 0.9999641026469211}, {"start": 268, "end": 269, "word": "4", "entity_group": "PARAM", "score": 0.9994224122203323}, {"start": 302, "end": 305, "word": "1.5", "entity_group": "PARAM", "score": 0.9997060546505071}, {"start": 357, "end": 364, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991924493897196}, {"start": 365, "end": 369, "word": "3000", "entity_group": "LIMIT", "score": 0.9997172699311614}, {"start": 394, "end": 400, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269871016582}, {"start": 414, "end": 422, "word": "sausages", "entity_group": "VAR", "score": 0.9994035598659975}, {"start": 428, "end": 431, "word": "200", "entity_group": "PARAM", "score": 0.9990145287425519}, {"start": 440, "end": 446, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998698244259684}, {"start": 460, "end": 474, "word": "burger patties", "entity_group": "VAR", "score": 0.999938510367908}, {"start": 480, "end": 483, "word": "250", "entity_group": "PARAM", "score": 0.999745746056999}, {"start": 529, "end": 537, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 538, "end": 544, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}]}
{"doc_id": "745349252", "document": "A small business makes soccer balls and basket balls by hand. The profit per soccer ball is $5, and the profit per basket ball is $8. To make one soccer ball, 20 minutes of sewing and 10 minutes of quality checking is required. To make a basket ball 15 minutes of sewing and 12 minutes of quality checking is required. In a month, 5000 minutes of sewing time and 4500 minutes of quality checking time is available. How many of each ball should be made to maximize profit?", "order_mapping": {"soccer balls": 0, "basket balls": 1, "soccer ball": 0, "basket ball": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"soccer ball": "5", "basket ball": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"soccer ball": "20", "basket ball": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4500", "terms": {"soccer ball": "10", "basket ball": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of soccer balls made\n- y: Number of basket balls made\n\nObjective:\n- The small business aims to maximize its profit. The profit per soccer ball is $5, and the profit per basket ball is $8. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- The available sewing time is 5000 minutes, and to make one soccer ball, 20 minutes of sewing is required, and to make a basket ball, 15 minutes of sewing is required. This leads to the constraint: 20x + 15y <= 5000.\n- The available quality checking time is 4500 minutes, and to make one soccer ball, 10 minutes of quality checking is required, and to make a basket ball, 12 minutes of quality checking is required. This leads to the constraint: 10x + 12y <= 4500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\n20x + 15y <= 5000\n10x + 12y <= 4500", "canonical": {"objective": [-5.0, -8.0], "constraints": [[20.0, 15.0, 5000.0], [10.0, 12.0, 4500.0]]}, "solution": {"x": 0, "y": 333}, "pseudo_model": "\nDecision Variables:\n- Number of soccer balls made: SoccerBalls\n- Number of basket balls made: BasketBalls\n\nConstraints:\n- Sewing time for soccer balls and basket balls should not exceed 5000 minutes per month:\n  20 * SoccerBalls + 15 * BasketBalls <= 5000\n- Quality checking time for soccer balls and basket balls should not exceed 4500 minutes per month:\n  10 * SoccerBalls + 12 * BasketBalls <= 4500\n\nObjective:\n- Maximize profit (5 dollars per soccer ball, 8 dollars per basket ball):\n  5 * SoccerBalls + 8 * BasketBalls\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSoccerBalls = intvar(0, 999999999)  # Number of soccer balls made\nBasketBalls = intvar(0, 999999999)  # Number of basket balls made\n\n# Constraints\nm = Model()\n\n# Sewing time constraint (5000 minutes available per month):\nm += 20 * SoccerBalls + 15 * BasketBalls <= 5000\n# Quality checking time constraint (4500 minutes available per month):\nm += 10 * SoccerBalls + 12 * BasketBalls <= 4500\n\n# Objective\n# Maximize profit (5 dollars per soccer ball, 8 dollars per basket ball):\nm.maximize(5 * SoccerBalls + 8 * BasketBalls)\n", "entities": [{"start": 23, "end": 35, "word": "soccer balls", "entity_group": "VAR", "score": 0.9999743674909681}, {"start": 40, "end": 52, "word": "basket balls", "entity_group": "VAR", "score": 0.9999884363006033}, {"start": 67, "end": 73, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998731760124074}, {"start": 78, "end": 89, "word": "soccer ball", "entity_group": "VAR", "score": 0.9999583888585631}, {"start": 95, "end": 96, "word": "5", "entity_group": "PARAM", "score": 0.9997436747990152}, {"start": 107, "end": 113, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999117995598675}, {"start": 118, "end": 129, "word": "basket ball", "entity_group": "VAR", "score": 0.9999376918452506}, {"start": 135, "end": 136, "word": "8", "entity_group": "PARAM", "score": 0.9997221775064887}, {"start": 151, "end": 162, "word": "soccer ball", "entity_group": "VAR", "score": 0.9999661619011614}, {"start": 165, "end": 167, "word": "20", "entity_group": "PARAM", "score": 0.9996968619520944}, {"start": 190, "end": 192, "word": "10", "entity_group": "PARAM", "score": 0.9997251012690131}, {"start": 245, "end": 256, "word": "basket ball", "entity_group": "VAR", "score": 0.9999566780583407}, {"start": 257, "end": 259, "word": "15", "entity_group": "PARAM", "score": 0.999211429239868}, {"start": 282, "end": 284, "word": "12", "entity_group": "PARAM", "score": 0.9997253825935395}, {"start": 340, "end": 344, "word": "5000", "entity_group": "LIMIT", "score": 0.9997254366735885}, {"start": 372, "end": 376, "word": "4500", "entity_group": "LIMIT", "score": 0.9996281809615901}, {"start": 413, "end": 422, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977349733050668}, {"start": 465, "end": 473, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040364571}, {"start": 474, "end": 480, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "-332037700", "document": "A clothing company makes blue and dark blue t-shirts. A blue t-shirt requires 3 unit of dye, 5 units of water, and 30 worker minutes. A dark blue t-shirt requires 5 units of dye, 4 units of water, and 25 worker minutes. The company only has 1000 units of dye, 1200 units of water, and 8000 worker minutes available. If the profit per blue t-shirt is $10 and the profit per dark blue t-shirt is $15, how many of each should be made to maximize profit?", "order_mapping": {"blue": 0, "dark blue t-shirts": 1, "blue t-shirt": 0, "dark blue t-shirt": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"dark blue t-shirt": "15", "blue t-shirt": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"blue t-shirt": "3", "dark blue t-shirt": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"blue t-shirt": "5", "dark blue t-shirt": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "8000", "terms": {"blue t-shirt": "30", "dark blue t-shirt": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of blue t-shirts\n- y: Number of dark blue t-shirts\n\nObjective:\n- The company aims to maximize its profit. The profit per blue t-shirt is $10 and the profit per dark blue t-shirt is $15. Therefore, the objective function is: Maximize 10x + 15y\n\nConstraints:\n- The company has limited resources: 1000 units of dye, 1200 units of water, and 8000 worker minutes. The constraints are:\n    - 3x + 5y <= 1000 (dye constraint)\n    - 5x + 4y <= 1200 (water constraint)\n    - 30x + 25y <= 8000 (worker minutes constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 15y\nConstraints:\n3x + 5y <= 1000\n5x + 4y <= 1200\n30x + 25y <= 8000", "canonical": {"objective": [-10.0, -15.0], "constraints": [[3.0, 5.0, 1000.0], [5.0, 4.0, 1200.0], [30.0, 25.0, 8000.0]]}, "solution": {"x": 153, "y": 108}, "pseudo_model": "\nDecision Variables:\n- Number of blue t-shirts made: BlueTShirts\n- Number of dark blue t-shirts made: DarkBlueTShirts\n\nConstraints:\n- Dye usage for blue and dark blue t-shirts should not exceed 1000 units:\n  3 * BlueTShirts + 5 * DarkBlueTShirts <= 1000\n- Water usage for blue and dark blue t-shirts should not exceed 1200 units:\n  5 * BlueTShirts + 4 * DarkBlueTShirts <= 1200\n- Worker minutes for blue and dark blue t-shirts should not exceed 8000 minutes:\n  30 * BlueTShirts + 25 * DarkBlueTShirts <= 8000\n\nObjective:\n- Maximize profit ($10 per blue t-shirt and $15 per dark blue t-shirt):\n  10 * BlueTShirts + 15 * DarkBlueTShirts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueTShirts = intvar(0, 999999999)  # Number of blue t-shirts made\nDarkBlueTShirts = intvar(0, 999999999)  # Number of dark blue t-shirts made\n\n# Constraints\nm = Model()\n\n# Dye constraint: 3 units for a blue t-shirt and 5 units for a dark blue t-shirt, 1000 units available in total\nm += 3 * BlueTShirts + 5 * DarkBlueTShirts <= 1000\n# Water constraint: 5 units for a blue t-shirt and 4 units for a dark blue t-shirt, 1200 units available in total\nm += 5 * BlueTShirts + 4 * DarkBlueTShirts <= 1200\n# Worker minutes constraint: 30 minutes for a blue t-shirt and 25 minutes for a dark blue t-shirt, 8000 minutes available in total\nm += 30 * BlueTShirts + 25 * DarkBlueTShirts <= 8000\n\n# Objective\n# Maximize profit ($10 per blue t-shirt and $15 per dark blue t-shirt)\nm.maximize(10 * BlueTShirts + 15 * DarkBlueTShirts)\n", "entities": [{"start": 25, "end": 29, "word": "blue", "entity_group": "VAR", "score": 0.9997093068260872}, {"start": 34, "end": 54, "word": "dark blue t - shirts", "entity_group": "VAR", "score": 0.9984583432408598}, {"start": 59, "end": 73, "word": "blue t - shirt", "entity_group": "VAR", "score": 0.998767261697042}, {"start": 83, "end": 84, "word": "3", "entity_group": "PARAM", "score": 0.9996430886811124}, {"start": 99, "end": 100, "word": "5", "entity_group": "PARAM", "score": 0.9997332552370448}, {"start": 122, "end": 124, "word": "30", "entity_group": "PARAM", "score": 0.9994463047155531}, {"start": 144, "end": 163, "word": "dark blue t - shirt", "entity_group": "VAR", "score": 0.9982461275501329}, {"start": 173, "end": 174, "word": "5", "entity_group": "PARAM", "score": 0.999712755002619}, {"start": 190, "end": 191, "word": "4", "entity_group": "PARAM", "score": 0.9997388181829066}, {"start": 213, "end": 215, "word": "25", "entity_group": "PARAM", "score": 0.9994133016959175}, {"start": 254, "end": 258, "word": "1000", "entity_group": "LIMIT", "score": 0.9997563853484855}, {"start": 274, "end": 278, "word": "1200", "entity_group": "LIMIT", "score": 0.9997484580020728}, {"start": 300, "end": 304, "word": "8000", "entity_group": "LIMIT", "score": 0.9955937970305632}, {"start": 320, "end": 329, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988342586810127}, {"start": 339, "end": 345, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999735463683607}, {"start": 350, "end": 364, "word": "blue t - shirt", "entity_group": "VAR", "score": 0.997876926074075}, {"start": 370, "end": 372, "word": "10", "entity_group": "PARAM", "score": 0.9990702219758597}, {"start": 381, "end": 387, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350940231456}, {"start": 392, "end": 411, "word": "dark blue t - shirt", "entity_group": "VAR", "score": 0.9983205866526044}, {"start": 417, "end": 419, "word": "15", "entity_group": "PARAM", "score": 0.998995375221803}, {"start": 457, "end": 465, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-261693695", "document": "A paper company makes lined paper and graph paper. All paper has to go through a cutting machine and a line-printing machine. A ream of lined paper requires 2 minutes on the cutting machine and 6 minutes on the line-printing machine. A ream of graph paper requires 2 minutes on the cutting machine and 10 minutes on the line-printing machine. In a week, each machine is available for 3500 minutes. There is a profit of $11 per ream of lined paper and a profit of $13 per ream of graph paper. How many reams of each should the company make to maximize profit?", "order_mapping": {"lined paper": 0, "graph paper": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lined paper": "11", "graph paper": "13"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3500", "terms": {"lined paper": "2", "graph paper": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"lined paper": "6", "graph paper": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of reams of lined paper\n- y: Number of reams of graph paper\n\nObjective:\n- The company aims to maximize its profit. The profit per ream of lined paper is $11 and the profit per ream of graph paper is $13. Therefore, the objective function is: Maximize 11x + 13y\n\nConstraints:\n- Each machine is available for 3500 minutes in a week. A ream of lined paper requires 2 minutes on the cutting machine and 6 minutes on the line-printing machine, leading to the constraint: 2x + 6y <= 3500.\n- Similarly, a ream of graph paper requires 2 minutes on the cutting machine and 10 minutes on the line-printing machine, resulting in the constraint: 2x + 10y <= 3500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 11x + 13y\nConstraints:\n2x + 6y <= 3500\n2x + 10y <= 3500", "canonical": {"objective": [-11.0, -13.0], "constraints": [[2.0, 6.0, 3500.0], [2.0, 10.0, 3500.0]]}, "solution": {"x": 1750, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of reams of lined paper: LinedPaper\n- Number of reams of graph paper: GraphPaper\n\nConstraints:\n- Cutting machine time for both types of paper should not exceed 3500 minutes per week:\n  2 * LinedPaper + 2 * GraphPaper <= 3500\n- Line-printing machine time should not exceed 3500 minutes per week:\n  6 * LinedPaper + 10 * GraphPaper <= 3500\n\nObjective:\n- Maximize profit ($11 per ream of lined paper, $13 per ream of graph paper):\n  11 * LinedPaper + 13 * GraphPaper\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLinedPaper = intvar(0, 999999999)  # Number of reams of lined paper\nGraphPaper = intvar(0, 999999999)  # Number of reams of graph paper\n\n# Constraints\nm = Model()\n\n# Cutting machine time constraint (2 minutes per ream for both types of paper, 3500 minutes available per week):\nm += 2 * LinedPaper + 2 * GraphPaper <= 3500\n# Line-printing machine time constraint (6 minutes per ream of lined paper, 10 minutes per ream of graph paper, 3500 minutes available per week):\nm += 6 * LinedPaper + 10 * GraphPaper <= 3500\n\n# Objective\n# Maximize profit ($11 per ream of lined paper, $13 per ream of graph paper):\nm.maximize(11 * LinedPaper + 13 * GraphPaper)\n", "entities": [{"start": 22, "end": 33, "word": "lined paper", "entity_group": "VAR", "score": 0.9999418889607937}, {"start": 38, "end": 49, "word": "graph paper", "entity_group": "VAR", "score": 0.9999726619819436}, {"start": 140, "end": 151, "word": "lined paper", "entity_group": "VAR", "score": 0.9999842858235698}, {"start": 161, "end": 162, "word": "2", "entity_group": "PARAM", "score": 0.9995652889797605}, {"start": 198, "end": 199, "word": "6", "entity_group": "PARAM", "score": 0.9996812130522033}, {"start": 251, "end": 262, "word": "graph paper", "entity_group": "VAR", "score": 0.9999817189429168}, {"start": 272, "end": 273, "word": "2", "entity_group": "PARAM", "score": 0.9995203670364947}, {"start": 309, "end": 311, "word": "10", "entity_group": "PARAM", "score": 0.9996816441463354}, {"start": 381, "end": 390, "word": "available", "entity_group": "CONST_DIR", "score": 0.9974577830984248}, {"start": 395, "end": 399, "word": "3500", "entity_group": "LIMIT", "score": 0.99975763943407}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993587738469629}, {"start": 433, "end": 435, "word": "11", "entity_group": "PARAM", "score": 0.9995133649685243}, {"start": 448, "end": 459, "word": "lined paper", "entity_group": "VAR", "score": 0.9999665248313901}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998391399489767}, {"start": 478, "end": 480, "word": "13", "entity_group": "PARAM", "score": 0.9996870964518416}, {"start": 493, "end": 504, "word": "graph paper", "entity_group": "VAR", "score": 0.9999526504767293}, {"start": 557, "end": 565, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993497511518207}, {"start": 566, "end": 572, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998151744374345}]}
{"doc_id": "635994932", "document": "A snow removal company uses their equipment in two cities and gets paid per kilogram of snow they remove. In the northern city, the net revenue per kilogram of snow is $2. In the southern city, the net revenue per kilogram of snow is $1.50. The company has one snow plow, one truck, and one shovel. Each item can be used for at most 500 minutes per day. At the northern city, to remove 1 kilogram of snow requires 2 minutes on the snow plow, 1 minute on the truck, and 5 minutes with the shovel. At the southern city, to remove 1 kilogram of snow requires 1 minute on the snow plow, 3 minutes on the truck, and 2 minutes with the shovel. How many kilograms of snow should be removed from each city to maximize profit?", "order_mapping": {"northern city": 0, "southern city": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"northern city": "2", "southern city": "1.50"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"northern city": "2", "southern city": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "500", "terms": {"northern city": "1", "southern city": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "500", "terms": {"northern city": "5", "southern city": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Kilograms of snow removed in the northern city\n- y: Kilograms of snow removed in the southern city\n\nObjective:\n- The company aims to maximize its profit. The net revenue per kilogram of snow is $2 in the northern city and $1.50 in the southern city. Therefore, the objective function is: Maximize 2x + 1.50y\n\nConstraints:\n- The company has limited equipment usage. Each item can be used for at most 500 minutes per day. The time taken to remove snow in each city is given, and the constraints can be formulated as follows:\n  - 2x + y <= 500 (snow plow and truck time in the northern city)\n  - x + 3y <= 500 (snow plow and truck time in the southern city)\n  - 5x + 2y <= 500 (snow plow and shovel time in the northern city)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 1.50y\nConstraints:\n2x + y <= 500\nx + 3y <= 500\n5x + 2y <= 500", "canonical": {"objective": [-2.0, -1.5], "constraints": [[2.0, 1.0, 500.0], [1.0, 3.0, 500.0], [5.0, 2.0, 500.0]]}, "solution": {"x": 38, "y": 154}, "pseudo_model": "\nDecision Variables:\n- Kilograms of snow removed from the northern city: NorthernCity\n- Kilograms of snow removed from the southern city: SouthernCity\n\nConstraints:\n- Snow plow usage for both cities should not exceed 500 minutes per day:\n  2 * NorthernCity + 1 * SouthernCity <= 500\n- Truck usage for both cities should not exceed 500 minutes per day:\n  1 * NorthernCity + 3 * SouthernCity <= 500\n- Shovel usage for both cities should not exceed 500 minutes per day:\n  5 * NorthernCity + 2 * SouthernCity <= 500\n\nObjective:\n- Maximize profit (2 dollars per kilogram in northern city, 1.5 dollars per kilogram in southern city):\n  2 * NorthernCity + 1.5 * SouthernCity\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNorthernCity = intvar(0, 999999999)  # Kilograms of snow removed from the northern city\nSouthernCity = intvar(0, 999999999)  # Kilograms of snow removed from the southern city\n\n# Constraints\nm = Model()\n\n# Equipment usage constraints (each item can be used for at most 500 minutes per day)\n# Snow plow: 2 minutes in northern city + 1 minute in southern city per kilogram\nm += 2 * NorthernCity + 1 * SouthernCity <= 500\n# Truck: 1 minute in northern city + 3 minutes in southern city per kilogram\nm += 1 * NorthernCity + 3 * SouthernCity <= 500\n# Shovel: 5 minutes in northern city + 2 minutes in southern city per kilogram\nm += 5 * NorthernCity + 2 * SouthernCity <= 500\n\n# Objective\n# Maximize profit (2 dollars per kilogram in northern city, 1.5 dollars per kilogram in southern city)\nm.maximize(2 * NorthernCity + 1.5 * SouthernCity)\n", "entities": [{"start": 114, "end": 127, "word": "northern city", "entity_group": "VAR", "score": 0.999895797969173}, {"start": 134, "end": 145, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9916764757853648}, {"start": 172, "end": 173, "word": "2", "entity_group": "PARAM", "score": 0.9995815135985345}, {"start": 183, "end": 196, "word": "southern city", "entity_group": "VAR", "score": 0.999866226082515}, {"start": 203, "end": 214, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9916764757929211}, {"start": 241, "end": 245, "word": "1.50", "entity_group": "PARAM", "score": 0.9996708126880679}, {"start": 335, "end": 342, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989400772859702}, {"start": 343, "end": 346, "word": "500", "entity_group": "LIMIT", "score": 0.9997161155342397}, {"start": 372, "end": 385, "word": "northern city", "entity_group": "VAR", "score": 0.9998085802123217}, {"start": 426, "end": 427, "word": "2", "entity_group": "PARAM", "score": 0.9996822876405963}, {"start": 455, "end": 456, "word": "1", "entity_group": "PARAM", "score": 0.9993318613347615}, {"start": 483, "end": 484, "word": "5", "entity_group": "PARAM", "score": 0.9996321371740052}, {"start": 518, "end": 531, "word": "southern city", "entity_group": "VAR", "score": 0.9998629292049669}, {"start": 572, "end": 573, "word": "1", "entity_group": "PARAM", "score": 0.9995995110705358}, {"start": 600, "end": 601, "word": "3", "entity_group": "PARAM", "score": 0.9996791516919893}, {"start": 629, "end": 630, "word": "2", "entity_group": "PARAM", "score": 0.9996531356631444}, {"start": 720, "end": 728, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990217208530153}, {"start": 729, "end": 735, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999093222799401}]}
{"doc_id": "-50294932", "document": "A rich lawyer has $1000000 available for investment. He wants to invest in the gold, diamond, ruby, and sapphire industries. The annual rate of return for each industry is known to be: gold, 3%; diamond, 5%; ruby, 6%; sapphire 10%. To make his investments more spread out, he wants to ensure the amount invested in the sapphire industry does not exceed the amount invested in the gold industry. Also the amount invested in the diamond industry cannot exceed the amount invested in the ruby industry. Finally, a maximum of 40% can be invested in the sapphire industry. How should the lawyer invest his money to maximize his return?", "order_mapping": {"gold": 0, "diamond": 1, "ruby": 2, "sapphire": 3, "sapphire industry": 3, "gold industry": 0, "diamond industry": 1, "ruby industry": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"gold": "3%", "diamond": "5%", "ruby": "6%", "sapphire": "10%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "1000000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "diamond industry", "direction": "cannot exceed", "y_var": "ruby industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "maximum", "limit": "40%", "var": "sapphire industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the gold industry\n- y: Dollars invested in the diamond industry\n- z: Dollars invested in the ruby industry\n- w: Dollars invested in the sapphire industry\n\nObjective:\n- The lawyer aims to maximize his return on investment. The annual rate of return for each industry is known to be: gold, 3%; diamond, 5%; ruby, 6%; sapphire, 10%. Therefore, the objective function is: Maximize 0.03x + 0.05y + 0.06z + 0.10w\n\nConstraints:\n- The total amount available for investment is $1,000,000, so the constraint is: x + y + z + w <= 1000000.\n- The amount invested in the sapphire industry cannot exceed the amount invested in the gold industry, leading to the constraint: w <= x.\n- The amount invested in the diamond industry cannot exceed the amount invested in the ruby industry, resulting in the constraint: y <= z.\n- A maximum of 40% can be invested in the sapphire industry, leading to the constraint: w <= 0.40(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.03x + 0.05y + 0.06z + 0.10w\nConstraints:\nx + y + z + w <= 1000000\nw <= x\ny <= z\nw <= 0.40(x + y + z + w)", "canonical": {"objective": [-0.03, -0.05, -0.06, -0.1], "constraints": [[1.0, 1.0, 1.0, 1.0, 1000000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.4, -0.4, -0.4, 0.6, 0.0]]}, "solution": {"x": 400000, "y": 0, "z": 200000, "w": 400000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the gold industry: Gold\n- Amount invested in the diamond industry: Diamond\n- Amount invested in the ruby industry: Ruby\n- Amount invested in the sapphire industry: Sapphire\n\nConstraints:\n- Total investment should not exceed $1000000:\n  Gold + Diamond + Ruby + Sapphire <= 1000000\n- The amount invested in the sapphire industry does not exceed the amount invested in the gold industry:\n  Sapphire <= Gold\n- The amount invested in the diamond industry cannot exceed the amount invested in the ruby industry:\n  Diamond <= Ruby\n- A maximum of 40% can be invested in the sapphire industry:\n  Sapphire <= 0.4 * 1000000\n\nObjective:\n- Maximize return (3% for gold, 5% for diamond, 6% for ruby, 10% for sapphire):\n  0.03 * Gold + 0.05 * Diamond + 0.06 * Ruby + 0.10 * Sapphire\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGold = intvar(0, 999999999)  # Amount invested in the gold industry\nDiamond = intvar(0, 999999999)  # Amount invested in the diamond industry\nRuby = intvar(0, 999999999)  # Amount invested in the ruby industry\nSapphire = intvar(0, 999999999)  # Amount invested in the sapphire industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $1000000:\nm += Gold + Diamond + Ruby + Sapphire <= 1000000\n# The amount invested in the sapphire industry does not exceed the amount invested in the gold industry:\nm += Sapphire <= Gold\n# The amount invested in the diamond industry cannot exceed the amount invested in the ruby industry:\nm += Diamond <= Ruby\n# A maximum of 40% can be invested in the sapphire industry:\nm += Sapphire <= 0.4 * (Gold + Diamond + Ruby + Sapphire)\n# Objective\n# Maximize return (3% for gold, 5% for diamond, 6% for ruby, 10% for sapphire):\nm.maximize(0.03 * Gold + 0.05 * Diamond + 0.06 * Ruby + 0.10 * Sapphire)\n", "entities": [{"start": 20, "end": 27, "word": "1000000", "entity_group": "LIMIT", "score": 0.9985885855426108}, {"start": 28, "end": 37, "word": "available", "entity_group": "CONST_DIR", "score": 0.9964788063950402}, {"start": 81, "end": 85, "word": "gold", "entity_group": "VAR", "score": 0.9989542712884506}, {"start": 88, "end": 95, "word": "diamond", "entity_group": "VAR", "score": 0.9996816273275295}, {"start": 98, "end": 102, "word": "ruby", "entity_group": "VAR", "score": 0.999676599736987}, {"start": 109, "end": 117, "word": "sapphire", "entity_group": "VAR", "score": 0.9992691168258577}, {"start": 150, "end": 156, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9971774791197419}, {"start": 192, "end": 196, "word": "gold", "entity_group": "VAR", "score": 0.9994747415513411}, {"start": 199, "end": 202, "word": "3 %", "entity_group": "PARAM", "score": 0.9888050499629932}, {"start": 205, "end": 212, "word": "diamond", "entity_group": "VAR", "score": 0.9986029963596588}, {"start": 215, "end": 218, "word": "5 %", "entity_group": "PARAM", "score": 0.9871776937289507}, {"start": 221, "end": 225, "word": "ruby", "entity_group": "VAR", "score": 0.9989881601801258}, {"start": 228, "end": 231, "word": "6 %", "entity_group": "PARAM", "score": 0.9732594171748364}, {"start": 234, "end": 242, "word": "sapphire", "entity_group": "VAR", "score": 0.9979149378347175}, {"start": 243, "end": 247, "word": "10 %", "entity_group": "PARAM", "score": 0.9877487476118889}, {"start": 338, "end": 355, "word": "sapphire industry", "entity_group": "VAR", "score": 0.9999103836384969}, {"start": 356, "end": 371, "word": "does not exceed", "entity_group": "CONST_DIR", "score": 0.988570699256652}, {"start": 399, "end": 412, "word": "gold industry", "entity_group": "VAR", "score": 0.9998825659304523}, {"start": 447, "end": 463, "word": "diamond industry", "entity_group": "VAR", "score": 0.999910426300987}, {"start": 464, "end": 478, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9885191242360543}, {"start": 506, "end": 519, "word": "ruby industry", "entity_group": "VAR", "score": 0.999911316734519}, {"start": 534, "end": 541, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9961241395782494}, {"start": 545, "end": 549, "word": "40 %", "entity_group": "LIMIT", "score": 0.9635487534474211}, {"start": 573, "end": 590, "word": "sapphire industry", "entity_group": "VAR", "score": 0.9999057656028153}, {"start": 635, "end": 643, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992540250199863}, {"start": 648, "end": 654, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9992546681768383}]}
{"doc_id": "-1380201245", "document": "Jane has a field of 200 acres to grow tulips and daffodils. The bulbs for tulips cost $10 per acre while the bulbs for daffodils cost $5 per acre. Jane has $1500 to spend on bulbs. If the profit per acre of tulips is $325 and the profit per acre of daffodils is $200, how many acres of each should be grown to maximize profit?", "order_mapping": {"tulips": 0, "daffodils": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"tulips": "325", "daffodils": "200"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "1500", "terms": {"tulips": "10", "daffodils": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of tulips\n- y: Acres of daffodils\n\nObjective:\n- Jane wants to maximize her profit. The profit per acre of tulips is $325 and the profit per acre of daffodils is $200. Therefore, the objective function is: Maximize 325x + 200y\n\nConstraints:\n- Jane has a field of 200 acres, so the constraint is: x + y <= 200.\n- Jane has $1500 to spend on bulbs, which translates to the constraint: 10x + 5y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 325x + 200y\nConstraints:\nx + y <= 200\n10x + 5y <= 1500", "canonical": {"objective": [-325.0, -200.0], "constraints": [[1.0, 1.0, 200.0], [10.0, 5.0, 1500.0]]}, "solution": {"x": 100, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of acres for tulips: Tulips\n- Number of acres for daffodils: Daffodils\n\nConstraints:\n- Total acres used should not exceed 200:\n  Tulips + Daffodils <= 200\n- Total cost for bulbs should not exceed $1500 ($10 per acre for tulips, $5 per acre for daffodils):\n  10 * Tulips + 5 * Daffodils <= 1500\n\nObjective:\n- Maximize profit ($325 per acre for tulips, $200 per acre for daffodils):\n  325 * Tulips + 200 * Daffodils\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTulips = intvar(0, 999999999)  # Number of acres for tulips\nDaffodils = intvar(0, 999999999)  # Number of acres for daffodils\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 200:\nm += Tulips + Daffodils <= 200\n# Total cost for bulbs should not exceed $1500 ($10 per acre for tulips, $5 per acre for daffodils):\nm += 10 * Tulips + 5 * Daffodils <= 1500\n\n# Objective\n# Maximize profit ($325 per acre for tulips, $200 per acre for daffodils):\nm.maximize(325 * Tulips + 200 * Daffodils)\n", "entities": [{"start": 5, "end": 8, "word": "has", "entity_group": "CONST_DIR", "score": 0.995988012445858}, {"start": 20, "end": 23, "word": "200", "entity_group": "LIMIT", "score": 0.9996469956708138}, {"start": 38, "end": 44, "word": "tulips", "entity_group": "VAR", "score": 0.9987097674397166}, {"start": 49, "end": 58, "word": "daffodils", "entity_group": "VAR", "score": 0.9994832955475775}, {"start": 75, "end": 81, "word": "tulips", "entity_group": "VAR", "score": 0.9994038325016619}, {"start": 89, "end": 91, "word": "10", "entity_group": "PARAM", "score": 0.9990354073828464}, {"start": 121, "end": 130, "word": "daffodils", "entity_group": "VAR", "score": 0.9991789764209771}, {"start": 138, "end": 139, "word": "5", "entity_group": "PARAM", "score": 0.9994855203196303}, {"start": 156, "end": 159, "word": "has", "entity_group": "CONST_DIR", "score": 0.9938574756633246}, {"start": 162, "end": 166, "word": "1500", "entity_group": "LIMIT", "score": 0.9995056289395038}, {"start": 194, "end": 200, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999301954150243}, {"start": 213, "end": 219, "word": "tulips", "entity_group": "VAR", "score": 0.9994952128912147}, {"start": 225, "end": 228, "word": "325", "entity_group": "PARAM", "score": 0.9992430237606286}, {"start": 237, "end": 243, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713132}, {"start": 256, "end": 265, "word": "daffodils", "entity_group": "VAR", "score": 0.9994301094745145}, {"start": 271, "end": 274, "word": "200", "entity_group": "PARAM", "score": 0.9995941446297246}, {"start": 319, "end": 327, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 328, "end": 334, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1333121150", "document": "A toy company makes toys and knows that most of their customers are young boys and girls. To reach these groups, the company has decided to purchase commercial spots on cartoons and kids-movies. Each cartoon is seen by 2 millions young boys and 1 million young girls. Each kids-movie is seen by 4 million young boys and 6 million young girls. The company wants their commercials to be seen by at least 30 million young boys and 40 million young girls. If a commercial during a cartoon costs $5000 and a commercial during a kids-movie costs $12000, how many of each should be purchased to minimize cost?", "order_mapping": {"cartoons": 0, "kids-movies": 1, "cartoon": 0, "kids-movie": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"kids-movie": "12000", "cartoon": "5000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"cartoon": "2", "kids-movie": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"cartoon": "1", "kids-movie": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of commercial spots purchased on cartoons\n- y: Number of commercial spots purchased on kids-movies\n\nObjective:\n- The company wants to minimize the cost of purchasing commercial spots. Given that a commercial during a cartoon costs $5000 and a commercial during a kids-movie costs $12000, the objective function is: Minimize 5000x + 12000y\n\nConstraints:\n- The commercials need to be seen by at least 30 million young boys and 40 million young girls. Each cartoon is seen by 2 million young boys and 1 million young girls, and each kids-movie is seen by 4 million young boys and 6 million young girls. This leads to the constraints: 2x + 4y >= 30 and x + 6y >= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5000x + 12000y\nConstraints:\n2x + 4y >= 30\nx + 6y >= 40", "canonical": {"objective": [5000.0, 12000.0], "constraints": [[-2.0, -4.0, -30.0], [-1.0, -6.0, -40.0]]}, "solution": {"x": 1, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of commercials during cartoons: Cartoons\n- Number of commercials during kids-movies: KidsMovies\n\nConstraints:\n- Commercials should reach at least 30 million young boys:\n  2 * Cartoons + 4 * KidsMovies >= 30\n- Commercials should reach at least 40 million young girls:\n  1 * Cartoons + 6 * KidsMovies >= 40\n\nObjective:\n- Minimize cost ($5000 per commercial during a cartoon, $12000 per commercial during a kids-movie):\n  5000 * Cartoons + 12000 * KidsMovies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCartoons = intvar(0, 999999999)  # Number of commercials during cartoons\nKidsMovies = intvar(0, 999999999)  # Number of commercials during kids-movies\n\n# Constraints\nm = Model()\n\n# Commercials should reach at least 30 million young boys:\nm += 2 * Cartoons + 4 * KidsMovies >= 30\n# Commercials should reach at least 40 million young girls:\nm += 1 * Cartoons + 6 * KidsMovies >= 40\n\n# Objective\n# Minimize cost ($5000 per commercial during a cartoon, $12000 per commercial during a kids-movie):\nm.minimize(5000 * Cartoons + 12000 * KidsMovies)\n", "entities": [{"start": 171, "end": 179, "word": "cartoons", "entity_group": "VAR", "score": 0.9994788241129022}, {"start": 184, "end": 197, "word": "kids - movies", "entity_group": "VAR", "score": 0.9992883851242416}, {"start": 205, "end": 212, "word": "cartoon", "entity_group": "VAR", "score": 0.9996702110908064}, {"start": 224, "end": 225, "word": "2", "entity_group": "PARAM", "score": 0.9996159113480937}, {"start": 250, "end": 251, "word": "1", "entity_group": "PARAM", "score": 0.9997265532422601}, {"start": 279, "end": 291, "word": "kids - movie", "entity_group": "VAR", "score": 0.9995302504450014}, {"start": 303, "end": 304, "word": "4", "entity_group": "PARAM", "score": 0.9992519841609422}, {"start": 328, "end": 329, "word": "6", "entity_group": "PARAM", "score": 0.9996034198962671}, {"start": 402, "end": 410, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989446678984879}, {"start": 411, "end": 413, "word": "30", "entity_group": "LIMIT", "score": 0.9994486489685691}, {"start": 437, "end": 439, "word": "40", "entity_group": "LIMIT", "score": 0.9990463168927154}, {"start": 487, "end": 494, "word": "cartoon", "entity_group": "VAR", "score": 0.9993289973800685}, {"start": 495, "end": 500, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9984823890414053}, {"start": 503, "end": 507, "word": "5000", "entity_group": "PARAM", "score": 0.9996237388472201}, {"start": 534, "end": 546, "word": "kids - movie", "entity_group": "VAR", "score": 0.9989050170997595}, {"start": 547, "end": 552, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995563189801729}, {"start": 555, "end": 560, "word": "12000", "entity_group": "PARAM", "score": 0.9995973591799232}, {"start": 603, "end": 611, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987916422894024}, {"start": 612, "end": 616, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987763006781244}]}
{"doc_id": "1652531585", "document": "A flower grower has 120 acres of agricultural land in which he wants to plant tulips and orchids. The seed for tulips costs $15 per acre whereas the seed for orchids costs $40 per acre. The profit per acre of tulips is $75 whereas the profit for orchids is $105 an acre. If the grower has a maximum budget of $1200 to spend on seeds, determine how many tulips and orchids he needs to plant to maximize his profit.", "order_mapping": {"tulips": 0, "orchids": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"tulips": "75", "orchids": "105"}}, "const_declarations": [{"type": "linear", "direction": "maximum budget", "limit": "1200", "terms": {"tulips": "15", "orchids": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "120", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land planted with tulips\n- y: Acres of land planted with orchids\n\nObjective:\n- The grower aims to maximize his profit. The profit per acre of tulips is $75, and the profit for orchids is $105 an acre. Therefore, the objective function is: Maximize 75x + 105y\n\nConstraints:\n- The grower has a maximum budget of $1200 to spend on seeds, leading to the constraint: 15x + 40y <= 1200.\n- The grower has 120 acres of agricultural land available, so the constraint is: x + y <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 75x + 105y\nConstraints:\n15x + 40y <= 1200\nx + y <= 120", "canonical": {"objective": [-75.0, -105.0], "constraints": [[15.0, 40.0, 1200.0], [1.0, 1.0, 120.0]]}, "solution": {"x": 80, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of acres planted with tulips: Tulips\n- Number of acres planted with orchids: Orchids\n\nConstraints:\n- Total acres planted should not exceed 120:\n  Tulips + Orchids <= 120\n- Total cost for seeds should not exceed $1200 ($15 per acre for tulips, $40 per acre for orchids):\n  15 * Tulips + 40 * Orchids <= 1200\n\nObjective:\n- Maximize profit ($75 profit per acre for tulips, $105 profit per acre for orchids):\n  75 * Tulips + 105 * Orchids\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTulips = intvar(0, 999999999)  # Number of acres planted with tulips\nOrchids = intvar(0, 999999999)  # Number of acres planted with orchids\n\n# Constraints\nm = Model()\n\n# The total number of acres for tulips and orchids should not exceed 120:\nm += Tulips + Orchids <= 120\n# The total cost for seeds should not exceed $1200 ($15 per acre for tulips, $40 per acre for orchids):\nm += 15 * Tulips + 40 * Orchids <= 1200\n\n# Objective\n# Maximize profit ($75 profit per acre for tulips, $105 profit per acre for orchids):\nm.maximize(75 * Tulips + 105 * Orchids)\n", "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.995215544710634}, {"start": 20, "end": 23, "word": "120", "entity_group": "LIMIT", "score": 0.9987381075088247}, {"start": 78, "end": 84, "word": "tulips", "entity_group": "VAR", "score": 0.9990996253238252}, {"start": 89, "end": 96, "word": "orchids", "entity_group": "VAR", "score": 0.9957828034652226}, {"start": 112, "end": 118, "word": "tulips", "entity_group": "VAR", "score": 0.9996943121930928}, {"start": 127, "end": 129, "word": "15", "entity_group": "PARAM", "score": 0.9991002504691008}, {"start": 160, "end": 167, "word": "orchids", "entity_group": "VAR", "score": 0.9996304209788263}, {"start": 176, "end": 178, "word": "40", "entity_group": "PARAM", "score": 0.998965493002698}, {"start": 194, "end": 200, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999006377698272}, {"start": 213, "end": 219, "word": "tulips", "entity_group": "VAR", "score": 0.9990753832922107}, {"start": 225, "end": 227, "word": "75", "entity_group": "PARAM", "score": 0.9991271409809332}, {"start": 240, "end": 246, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997971728326308}, {"start": 251, "end": 258, "word": "orchids", "entity_group": "VAR", "score": 0.9996016481580902}, {"start": 264, "end": 267, "word": "105", "entity_group": "PARAM", "score": 0.999163847736806}, {"start": 298, "end": 312, "word": "maximum budget", "entity_group": "CONST_DIR", "score": 0.9323315270210348}, {"start": 318, "end": 322, "word": "1200", "entity_group": "LIMIT", "score": 0.998717132844827}, {"start": 362, "end": 368, "word": "tulips", "entity_group": "VAR", "score": 0.9998199390432954}, {"start": 373, "end": 380, "word": "orchids", "entity_group": "VAR", "score": 0.9991923957886787}, {"start": 402, "end": 410, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9986874704586837}, {"start": 415, "end": 421, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998674610905796}]}
{"doc_id": "780267130", "document": "A gardener has a field of 100 square feet in which he plants sunflowers and roses. The seed for sunflowers costs $67 per square foot. The seed for roses costs $52 per square foot. The gardener has available a budget of $6500 to spend on seeds. The profit per square foot of sunflowers is $450 and the profit per square foot of roses is $100. Find the optimal solution for the gardener in order to maximize profit.", "order_mapping": {"sunflowers": 0, "roses": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sunflowers": "450", "roses": "100"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "6500", "terms": {"sunflowers": "67", "roses": "52"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Square feet of sunflowers planted\n- y: Square feet of roses planted\n\nObjective:\n- The gardener aims to maximize his profit. The profit per square foot of sunflowers is $450 and the profit per square foot of roses is $100. Therefore, the objective function is: Maximize 450x + 100y\n\nConstraints:\n- The gardener has a field of 100 square feet, so the constraint is: x + y <= 100.\n- The gardener has a budget of $6500 to spend on seeds. The seed for sunflowers costs $67 per square foot and the seed for roses costs $52 per square foot, leading to the constraint: 67x + 52y <= 6500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 450x + 100y\nConstraints:\nx + y <= 100\n67x + 52y <= 6500", "canonical": {"objective": [-450.0, -100.0], "constraints": [[1.0, 1.0, 100.0], [67.0, 52.0, 6500.0]]}, "solution": {"x": 97, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Square feet of sunflowers planted: Sunflowers\n- Square feet of roses planted: Roses\n\nConstraints:\n- Total area planted should not exceed 100 square feet:\n  Sunflowers + Roses <= 100\n- The gardener's budget for seeds should not exceed $6500 (Cost per square foot: $67 for sunflowers, $52 for roses):\n  67 * Sunflowers + 52 * Roses <= 6500\n\nObjective:\n- Maximize profit (Profit per square foot: $450 for sunflowers, $100 for roses):\n  450 * Sunflowers + 100 * Roses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSunflowers = intvar(0, 999999999)  # Square feet of sunflowers planted\nRoses = intvar(0, 999999999)  # Square feet of roses planted\n\n# Constraints\nm = Model()\n\n# Total area planted should not exceed 100 square feet:\nm += Sunflowers + Roses <= 100\n# The gardener's budget for seeds should not exceed $6500:\nm += 67 * Sunflowers + 52 * Roses <= 6500\n\n# Objective\n# Maximize profit (Profit per square foot: $450 for sunflowers, $100 for roses):\nm.maximize(450 * Sunflowers + 100 * Roses)\n", "entities": [{"start": 11, "end": 14, "word": "has", "entity_group": "CONST_DIR", "score": 0.9926452337955973}, {"start": 26, "end": 29, "word": "100", "entity_group": "LIMIT", "score": 0.9990167844451613}, {"start": 61, "end": 71, "word": "sunflowers", "entity_group": "VAR", "score": 0.9994553813197505}, {"start": 76, "end": 81, "word": "roses", "entity_group": "VAR", "score": 0.9995798532040824}, {"start": 97, "end": 107, "word": "sunflowers", "entity_group": "VAR", "score": 0.9996656678469034}, {"start": 116, "end": 118, "word": "67", "entity_group": "PARAM", "score": 0.9970930240430468}, {"start": 150, "end": 155, "word": "roses", "entity_group": "VAR", "score": 0.9995938169566819}, {"start": 164, "end": 166, "word": "52", "entity_group": "PARAM", "score": 0.9970930875332479}, {"start": 214, "end": 220, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9879553804332432}, {"start": 226, "end": 230, "word": "6500", "entity_group": "LIMIT", "score": 0.9987023576733783}, {"start": 255, "end": 261, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994221879302558}, {"start": 281, "end": 291, "word": "sunflowers", "entity_group": "VAR", "score": 0.9991327578887257}, {"start": 297, "end": 300, "word": "450", "entity_group": "PARAM", "score": 0.9991085059843314}, {"start": 309, "end": 315, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998401485223721}, {"start": 335, "end": 340, "word": "roses", "entity_group": "VAR", "score": 0.9976430859044351}, {"start": 346, "end": 349, "word": "100", "entity_group": "PARAM", "score": 0.9994955010392907}, {"start": 407, "end": 415, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9952988731955527}, {"start": 416, "end": 422, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993697583333178}]}
{"doc_id": "-1628312989", "document": "The Notorious Desk company wants to promote a new brand of wine and wants to market it using a total market budget of $87,000. To do so, the company needs to decide how much to allocate on each of its two advertising channels: (1) morning TV show and (2) social media. Each day, it costs the company $1,000 and $2000 to run advertisement spots on morning TV show and social media respectively. The expected daily reach, based on past ratings, is 15,000 viewers for each morning show spot and 30,000 internet users for a social media spot. The chief marketer knows from her experience that both channels are key to the success of the product launch. She wants to plan at least 4 but no more than 7 morning show spots. In addition, the social media spots needs to be at least 30 due to pricing tier policy. How many times should each of the media channels be used to maximize the reach of  the campaign?", "order_mapping": {"morning TV show": 0, "social media": 1, "morning TV": 0, "morning show": 0, "social media spot": 1, "social media spots": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "reach", "terms": {"morning show": "15,000", "social media spot": "30,000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "87,000", "terms": {"morning TV": "1,000", "social media": "2000"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "4", "var": "morning show", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "7", "var": "morning show", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "social media spots", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of morning TV show spots\n- y: Number of social media spots\n\nObjective:\n- The company aims to maximize the reach of the campaign. The expected daily reach for each morning show spot is 15,000 viewers and for each social media spot is 30,000 internet users. Therefore, the objective function is: Maximize 15000x + 30000y\n\nConstraints:\n- The total market budget available is $87,000, so the constraint is: 1000x + 2000y <= 87000.\n- The company wants to plan at least 4 but no more than 7 morning show spots, leading to the constraints: 4 <= x <= 7.\n- The social media spots need to be at least 30 due to pricing tier policy, resulting in the constraint: y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 15000x + 30000y\nConstraints:\n1000x + 2000y <= 87000\n4 <= x <= 7\ny >= 30", "canonical": {"objective": [-15000.0, -30000.0], "constraints": [[1000.0, 2000.0, 87000.0], [0.0, -1.0, -30.0], [-1.0, 0.0, -4.0], [1.0, 0.0, 7.0]]}, "solution": {"x": 5, "y": 41}, "pseudo_model": "\nDecision Variables:\n- Number of morning TV show spots: MorningShowSpots\n- Number of social media spots: SocialMediaSpots\n\nConstraints:\n- Total budget should not exceed $87,000 (Morning TV show spots cost $1,000 each, social media spots cost $2,000 each):\n  1000 * MorningShowSpots + 2000 * SocialMediaSpots <= 87000\n- At least 4 but no more than 7 morning show spots:\n  MorningShowSpots >= 4\n  MorningShowSpots <= 7\n- At least 30 social media spots:\n  SocialMediaSpots >= 30\n\nObjective:\n- Maximize reach (15,000 viewers per morning show spot, 30,000 users per social media spot):\n  15000 * MorningShowSpots + 30000 * SocialMediaSpots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMorningShowSpots = intvar(0, 999999999)  # Number of morning TV show spots\nSocialMediaSpots = intvar(0, 999999999)  # Number of social media spots\n\n# Constraints\nm = Model()\n\n# Total budget constraint ($87,000):\nm += 1000 * MorningShowSpots + 2000 * SocialMediaSpots <= 87000\n# At least 4 but no more than 7 morning show spots:\nm += MorningShowSpots >= 4\nm += MorningShowSpots <= 7\n# At least 30 social media spots:\nm += SocialMediaSpots >= 30\n\n# Objective\n# Maximize reach (15,000 viewers per morning show spot, 30,000 users per social media spot):\nm.maximize(15000 * MorningShowSpots + 30000 * SocialMediaSpots)\n", "entities": [{"start": 108, "end": 114, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9919970308651846}, {"start": 120, "end": 126, "word": "87,000", "entity_group": "LIMIT", "score": 0.9993724035912778}, {"start": 237, "end": 252, "word": "morning TV show", "entity_group": "VAR", "score": 0.9993559388110156}, {"start": 263, "end": 275, "word": "social media", "entity_group": "VAR", "score": 0.9999777110370633}, {"start": 312, "end": 317, "word": "1,000", "entity_group": "PARAM", "score": 0.9995616133176483}, {"start": 324, "end": 328, "word": "2000", "entity_group": "PARAM", "score": 0.999730585635667}, {"start": 359, "end": 369, "word": "morning TV", "entity_group": "VAR", "score": 0.9999931437321972}, {"start": 379, "end": 391, "word": "social media", "entity_group": "VAR", "score": 0.9999772817089388}, {"start": 426, "end": 431, "word": "reach", "entity_group": "OBJ_NAME", "score": 0.9994615135959466}, {"start": 461, "end": 467, "word": "15,000", "entity_group": "PARAM", "score": 0.9996961653940061}, {"start": 485, "end": 497, "word": "morning show", "entity_group": "VAR", "score": 0.9999891485902367}, {"start": 507, "end": 513, "word": "30,000", "entity_group": "PARAM", "score": 0.9997285217465968}, {"start": 535, "end": 552, "word": "social media spot", "entity_group": "VAR", "score": 0.9977622876319442}, {"start": 684, "end": 692, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990051581510366}, {"start": 693, "end": 694, "word": "4", "entity_group": "LIMIT", "score": 0.9993038032022029}, {"start": 699, "end": 711, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9965322183968119}, {"start": 712, "end": 713, "word": "7", "entity_group": "LIMIT", "score": 0.9993754727737139}, {"start": 714, "end": 726, "word": "morning show", "entity_group": "VAR", "score": 0.9999752414214591}, {"start": 753, "end": 771, "word": "social media spots", "entity_group": "VAR", "score": 0.9998166180398631}, {"start": 784, "end": 792, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978213265015375}, {"start": 793, "end": 795, "word": "30", "entity_group": "LIMIT", "score": 0.9992199662752701}, {"start": 885, "end": 893, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9977951669129992}, {"start": 898, "end": 903, "word": "reach", "entity_group": "OBJ_NAME", "score": 0.9883686661836052}]}
{"doc_id": "-1716301675", "document": "A smoothies store makes blueberry and chocolate smoothies. All smoothies have to go through a preparation phase and a blending phase. A blueberry smoothies requires 3 minutes of preparation and 2 minutes of blending. A chocolate smoothie requires 5 minutes of preparation and 1 minute of blending. The store has 1000 minutes available for preparation and 750 minutes available for blending. If the profit per blueberry smoothie is $2 and the profit per chocolate smoothie is $3, how many of each should be made to maximize profit?", "order_mapping": {"blueberry": 0, "chocolate smoothies": 1, "blueberry smoothies": 0, "chocolate smoothie": 1, "blueberry smoothie": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chocolate smoothie": "3", "blueberry smoothie": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"blueberry smoothies": "3", "chocolate smoothie": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "750", "terms": {"blueberry smoothies": "2", "chocolate smoothie": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of blueberry smoothies\n- y: Number of chocolate smoothies\n\nObjective:\n- The store aims to maximize its profit. The profit per blueberry smoothie is $2 and the profit per chocolate smoothie is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- The store has 1000 minutes available for preparation, and each blueberry smoothie requires 3 minutes of preparation and each chocolate smoothie requires 5 minutes of preparation. This leads to the constraint: 3x + 5y <= 1000.\n- The store has 750 minutes available for blending, and each blueberry smoothie requires 2 minutes of blending and each chocolate smoothie requires 1 minute of blending. This results in the constraint: 2x + y <= 750.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\n3x + 5y <= 1000\n2x + y <= 750", "canonical": {"objective": [-2.0, -3.0], "constraints": [[3.0, 5.0, 1000.0], [2.0, 1.0, 750.0]]}, "solution": {"x": 333, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of blueberry smoothies made: BlueberrySmoothies\n- Number of chocolate smoothies made: ChocolateSmoothies\n\nConstraints:\n- Total preparation time should not exceed 1000 minutes:\n  3 * BlueberrySmoothies + 5 * ChocolateSmoothies <= 1000\n- Total blending time should not exceed 750 minutes:\n  2 * BlueberrySmoothies + 1 * ChocolateSmoothies <= 750\n\nObjective:\n- Maximize profit (2 dollars per blueberry smoothie, 3 dollars per chocolate smoothie):\n  2 * BlueberrySmoothies + 3 * ChocolateSmoothies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueberrySmoothies = intvar(0, 999999999)  # Number of blueberry smoothies made\nChocolateSmoothies = intvar(0, 999999999)  # Number of chocolate smoothies made\n\n# Constraints\nm = Model()\n\n# Total preparation time for all smoothies should not exceed 1000 minutes:\n# (3 minutes per blueberry smoothie, 5 minutes per chocolate smoothie)\nm += 3 * BlueberrySmoothies + 5 * ChocolateSmoothies <= 1000\n\n# Total blending time for all smoothies should not exceed 750 minutes:\n# (2 minutes per blueberry smoothie, 1 minute per chocolate smoothie)\nm += 2 * BlueberrySmoothies + 1 * ChocolateSmoothies <= 750\n\n# Objective\n# Maximize profit (2 dollars per blueberry smoothie, 3 dollars per chocolate smoothie):\nm.maximize(2 * BlueberrySmoothies + 3 * ChocolateSmoothies)\n", "entities": [{"start": 24, "end": 33, "word": "blueberry", "entity_group": "VAR", "score": 0.999064509611049}, {"start": 38, "end": 57, "word": "chocolate smoothies", "entity_group": "VAR", "score": 0.9998304507157427}, {"start": 138, "end": 157, "word": "blueberry smoothies", "entity_group": "VAR", "score": 0.9999808978537982}, {"start": 167, "end": 168, "word": "3", "entity_group": "PARAM", "score": 0.9997145246552162}, {"start": 196, "end": 197, "word": "2", "entity_group": "PARAM", "score": 0.9996969534511861}, {"start": 222, "end": 240, "word": "chocolate smoothie", "entity_group": "VAR", "score": 0.9999816337881284}, {"start": 250, "end": 251, "word": "5", "entity_group": "PARAM", "score": 0.9997291464240249}, {"start": 279, "end": 280, "word": "1", "entity_group": "PARAM", "score": 0.9992251245739159}, {"start": 316, "end": 320, "word": "1000", "entity_group": "LIMIT", "score": 0.9997444628555208}, {"start": 329, "end": 338, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985949923273151}, {"start": 359, "end": 362, "word": "750", "entity_group": "LIMIT", "score": 0.9997516894955848}, {"start": 371, "end": 380, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988916950157409}, {"start": 403, "end": 409, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999456924654153}, {"start": 414, "end": 432, "word": "blueberry smoothie", "entity_group": "VAR", "score": 0.9999634066420875}, {"start": 438, "end": 439, "word": "2", "entity_group": "PARAM", "score": 0.9996143846214187}, {"start": 448, "end": 454, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350839611651}, {"start": 459, "end": 477, "word": "chocolate smoothie", "entity_group": "VAR", "score": 0.999961100863681}, {"start": 483, "end": 484, "word": "3", "entity_group": "PARAM", "score": 0.999673544576852}, {"start": 522, "end": 530, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 531, "end": 537, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "239372788", "document": "An electronics repair shop fixes old phones and laptops. Each phone requires 20 minutes of inspection and 30 minutes of fixing. Each laptop requires 30 minutes of inspection and 50 minutes of fixing. The store makes a profit of $50 per phone repaired and a profit of $60 per laptop repaired. If there are 6000 minutes available for inspection and 7000 minutes available for fixing, how many of each should the shop repair to maximize profit?", "order_mapping": {"phones": 0, "laptops": 1, "phone": 0, "laptop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"phone": "50", "laptop": "60"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "6000", "terms": {"phone": "20", "laptop": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "7000", "terms": {"phone": "30", "laptop": "50"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of phones repaired\n- y: Number of laptops repaired\n\nObjective:\n- The repair shop aims to maximize its profit. The profit per phone repaired is $50 and the profit per laptop repaired is $60. Therefore, the objective function is: Maximize 50x + 60y\n\nConstraints:\n- The total time available for inspection is 6000 minutes, and each phone requires 20 minutes of inspection and each laptop requires 30 minutes of inspection. This leads to the constraint: 20x + 30y <= 6000.\n- The total time available for fixing is 7000 minutes, and each phone requires 30 minutes of fixing and each laptop requires 50 minutes of fixing. This results in the constraint: 30x + 50y <= 7000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 60y\nConstraints:\n20x + 30y <= 6000\n30x + 50y <= 7000", "canonical": {"objective": [-50.0, -60.0], "constraints": [[20.0, 30.0, 6000.0], [30.0, 50.0, 7000.0]]}, "solution": {"x": 233, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of phones repaired: Phones\n- Number of laptops repaired: Laptops\n\nConstraints:\n- Total inspection time for phones and laptops should not exceed 6000 minutes:\n  20 * Phones + 30 * Laptops <= 6000\n- Total fixing time for phones and laptops should not exceed 7000 minutes:\n  30 * Phones + 50 * Laptops <= 7000\n\nObjective:\n- Maximize profit ($50 per phone repaired and $60 per laptop repaired):\n  50 * Phones + 60 * Laptops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPhones = intvar(0, 999999999)  # Number of phones repaired\nLaptops = intvar(0, 999999999)  # Number of laptops repaired\n\n# Constraints\nm = Model()\n\n# Total inspection time for phones and laptops should not exceed 6000 minutes:\n# (20 minutes for each phone and 30 minutes for each laptop)\nm += 20 * Phones + 30 * Laptops <= 6000\n\n# Total fixing time for phones and laptops should not exceed 7000 minutes:\n# (30 minutes for each phone and 50 minutes for each laptop)\nm += 30 * Phones + 50 * Laptops <= 7000\n\n# Objective\n# Maximize profit ($50 per phone repaired and $60 per laptop repaired):\nm.maximize(50 * Phones + 60 * Laptops)\n", "entities": [{"start": 37, "end": 43, "word": "phones", "entity_group": "VAR", "score": 0.9996995780128027}, {"start": 48, "end": 55, "word": "laptops", "entity_group": "VAR", "score": 0.9997664067661262}, {"start": 63, "end": 68, "word": "phone", "entity_group": "VAR", "score": 0.9995975776516719}, {"start": 78, "end": 80, "word": "20", "entity_group": "PARAM", "score": 0.999715219474402}, {"start": 107, "end": 109, "word": "30", "entity_group": "PARAM", "score": 0.9996980057814465}, {"start": 135, "end": 141, "word": "laptop", "entity_group": "VAR", "score": 0.9996379591035743}, {"start": 151, "end": 153, "word": "30", "entity_group": "PARAM", "score": 0.9996949990703052}, {"start": 180, "end": 182, "word": "50", "entity_group": "PARAM", "score": 0.9996128775693706}, {"start": 221, "end": 227, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998914179042482}, {"start": 233, "end": 235, "word": "50", "entity_group": "PARAM", "score": 0.9995189069599385}, {"start": 240, "end": 245, "word": "phone", "entity_group": "VAR", "score": 0.9994122195186737}, {"start": 261, "end": 267, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999805000294491}, {"start": 273, "end": 275, "word": "60", "entity_group": "PARAM", "score": 0.999149944938621}, {"start": 280, "end": 286, "word": "laptop", "entity_group": "VAR", "score": 0.9995531549500003}, {"start": 311, "end": 315, "word": "6000", "entity_group": "LIMIT", "score": 0.9997234420457837}, {"start": 324, "end": 333, "word": "available", "entity_group": "CONST_DIR", "score": 0.998062212894545}, {"start": 353, "end": 357, "word": "7000", "entity_group": "LIMIT", "score": 0.9997516294298981}, {"start": 366, "end": 375, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981042051594472}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993395338958379}, {"start": 441, "end": 447, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998151565305161}]}
{"doc_id": "-1547439005", "document": "At the suggestion of a dietitian, Jamie wants to eat a diet which contains a minimum of 100 units of proteins and 60 units of fat. She can eat chicken and beef to supplement her current vegetable based diet. Chicken costs $3.4 per unit and beef costs $7.5 per unit. One unit of chicken has 10 units of proteins and 6 units of fat. One unit of beef has 30 units of proteins and 40 units of fat. Formulate this as a linear programming problem. Find the minimum cost for a diet that consists of a mixture of these two meats and also meets the minimal nutritional requirements.", "order_mapping": {"chicken": 0, "beef": 1, "Chicken": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Chicken": "3.4", "beef": "7.5"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "100", "terms": {"chicken": "10", "beef": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "60", "terms": {"chicken": "6", "beef": "40"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of chicken to be eaten\n- y: Units of beef to be eaten\n\nObjective:\n- Jamie wants to minimize the cost of her diet. Chicken costs $3.4 per unit and beef costs $7.5 per unit. Therefore, the objective function is: Minimize 3.4x + 7.5y\n\nConstraints:\n- Jamie needs to consume a minimum of 100 units of proteins, which can be formulated as: 10x + 30y >= 100.\n- She also needs to consume a minimum of 60 units of fat, which can be formulated as: 6x + 40y >= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3.4x + 7.5y\nConstraints:\n10x + 30y >= 100\n6x + 40y >= 60", "canonical": {"objective": [3.4, 7.5], "constraints": [[-10.0, -30.0, -100.0], [-6.0, -40.0, -60.0]]}, "solution": {"x": 1, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of units of chicken: Chicken\n- Number of units of beef: Beef\n\nConstraints:\n- To meet a minimum of 100 units of proteins:\n  10 * Chicken + 30 * Beef >= 100\n- To meet a minimum of 60 units of fat:\n  6 * Chicken + 40 * Beef >= 60\n\nObjective:\n- Minimize the total cost of the diet:\n  3.4 * Chicken + 7.5 * Beef\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChicken = intvar(0, 999999999)  # Number of units of chicken\nBeef = intvar(0, 999999999)  # Number of units of beef\n\n# Constraints\nm = Model()\n\n# Minimum of 100 units of proteins:\nm += 10 * Chicken + 30 * Beef >= 100\n# Minimum of 60 units of fat:\nm += 6 * Chicken + 40 * Beef >= 60\n\n# Objective\n# Minimize cost (Chicken costs $3.4 per unit, Beef costs $7.5 per unit):\nm.minimize(3.4 * Chicken + 7.5 * Beef)\n", "entities": [{"start": 78, "end": 85, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9976151432542703}, {"start": 89, "end": 92, "word": "100", "entity_group": "LIMIT", "score": 0.999770931639466}, {"start": 115, "end": 117, "word": "60", "entity_group": "LIMIT", "score": 0.9996539172972063}, {"start": 145, "end": 152, "word": "chicken", "entity_group": "VAR", "score": 0.9994170174479298}, {"start": 157, "end": 161, "word": "beef", "entity_group": "VAR", "score": 0.9993555633887847}, {"start": 211, "end": 218, "word": "Chicken", "entity_group": "VAR", "score": 0.9997396820583021}, {"start": 219, "end": 224, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9969554507366815}, {"start": 227, "end": 230, "word": "3.4", "entity_group": "PARAM", "score": 0.9995629644788723}, {"start": 244, "end": 248, "word": "beef", "entity_group": "VAR", "score": 0.9997309662305903}, {"start": 249, "end": 254, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9946855892749067}, {"start": 257, "end": 260, "word": "7.5", "entity_group": "PARAM", "score": 0.999298428345291}, {"start": 284, "end": 291, "word": "chicken", "entity_group": "VAR", "score": 0.9985125427155156}, {"start": 296, "end": 298, "word": "10", "entity_group": "PARAM", "score": 0.9997355519649727}, {"start": 321, "end": 322, "word": "6", "entity_group": "PARAM", "score": 0.9996808278505166}, {"start": 350, "end": 354, "word": "beef", "entity_group": "VAR", "score": 0.9987835950285262}, {"start": 359, "end": 361, "word": "30", "entity_group": "PARAM", "score": 0.9997360350041}, {"start": 384, "end": 386, "word": "40", "entity_group": "PARAM", "score": 0.9996703029349073}, {"start": 460, "end": 467, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9784566795079546}, {"start": 468, "end": 472, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9976599057058287}]}
{"doc_id": "928775045", "document": "In a company, two types of teams can be formed: a small team and a large team. A small team can preform 8 tasks per hour, requires 1 supervisor, and costs $5000. A large team can preform 20 tasks per hour, requires 3 supervisors, and costs $15000. The company wants to competes 100 tasks per hour with a maximum of 10 supervisors. How many of each type of team, small and large, need to be formed in order to minimize cost and meet the requirements?", "order_mapping": {"small team": 0, "large team": 1, "small": 0, "large": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"small team": "5000", "large team": "15000"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "10", "terms": {"small team": "1", "large team": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small teams\n- y: Number of large teams\n\nObjective:\n- The company aims to minimize the cost of forming the teams. The cost of a small team is $5000 and the cost of a large team is $15000. Therefore, the objective function is: Minimize 5000x + 15000y\n\nConstraints:\n- The company wants to complete 100 tasks per hour, and a small team can perform 8 tasks per hour and a large team can perform 20 tasks per hour. This leads to the constraint: 8x + 20y >= 100.\n- Each small team requires 1 supervisor and each large team requires 3 supervisors. The company has a maximum of 10 supervisors, leading to the constraint: x + 3y <= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5000x + 15000y\nConstraints:\n8x + 20y >= 100\nx + 3y <= 10", "canonical": {"objective": [5000.0, 15000.0], "constraints": [[-8.0, -20.0, -100.0], [1.0, 3.0, 10.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of small teams: SmallTeams\n- Number of large teams: LargeTeams\n\nConstraints:\n- Complete 100 tasks per hour:\n  8 * SmallTeams + 20 * LargeTeams >= 100\n- Maximum of 10 supervisors:\n  1 * SmallTeams + 3 * LargeTeams <= 10\n\nObjective:\n- Minimize cost ($5000 for a small team, $15000 for a large team):\n  5000 * SmallTeams + 15000 * LargeTeams\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallTeams = intvar(0, 999999999)  # Number of small teams\nLargeTeams = intvar(0, 999999999)  # Number of large teams\n\n# Constraints\nm = Model()\n\n# The company wants to complete 100 tasks per hour:\nm += 8 * SmallTeams + 20 * LargeTeams >= 100\n# With a maximum of 10 supervisors:\nm += 1 * SmallTeams + 3 * LargeTeams <= 10\n\n# Objective\n# Minimize cost ($5000 for a small team, $15000 for a large team):\nm.minimize(5000 * SmallTeams + 15000 * LargeTeams)\n", "entities": [{"start": 52, "end": 62, "word": "small team", "entity_group": "VAR", "score": 0.9999301331549637}, {"start": 69, "end": 79, "word": "large team", "entity_group": "VAR", "score": 0.9999789746424966}, {"start": 84, "end": 94, "word": "small team", "entity_group": "VAR", "score": 0.9999837182880633}, {"start": 107, "end": 108, "word": "8", "entity_group": "PARAM", "score": 0.9995563231047345}, {"start": 135, "end": 136, "word": "1", "entity_group": "PARAM", "score": 0.9985791769227367}, {"start": 154, "end": 159, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9981693536363496}, {"start": 162, "end": 166, "word": "5000", "entity_group": "PARAM", "score": 0.999682668749767}, {"start": 171, "end": 181, "word": "large team", "entity_group": "VAR", "score": 0.9999609368054171}, {"start": 194, "end": 196, "word": "20", "entity_group": "PARAM", "score": 0.9996313434810312}, {"start": 223, "end": 224, "word": "3", "entity_group": "PARAM", "score": 0.9995062675784343}, {"start": 243, "end": 248, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9973690924597046}, {"start": 251, "end": 256, "word": "15000", "entity_group": "PARAM", "score": 0.999739655752581}, {"start": 280, "end": 288, "word": "competes", "entity_group": "CONST_DIR", "score": 0.9891566194605089}, {"start": 289, "end": 292, "word": "100", "entity_group": "LIMIT", "score": 0.9989653618670618}, {"start": 315, "end": 322, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9920398315474275}, {"start": 326, "end": 328, "word": "10", "entity_group": "LIMIT", "score": 0.9994337458414512}, {"start": 375, "end": 380, "word": "small", "entity_group": "VAR", "score": 0.9995852627481124}, {"start": 385, "end": 390, "word": "large", "entity_group": "VAR", "score": 0.9995634696068638}, {"start": 423, "end": 431, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9625400886455464}, {"start": 432, "end": 436, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9848918644235012}]}
{"doc_id": "-1168130319", "document": "You are buying trucks to transport goods and will keep them in your parking lot. A small truck costs $5000, takes 1 parking spot, and can carry 10 boxes. A large truck costs $8000, takes 2 parking spots, and can carry 15 boxes. You have a $100000 limit and have at most 15 parking spots. How many of each truck should be purchased to maximize the number of boxes you can carry?", "order_mapping": {"small truck": 0, "large truck": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of boxes", "terms": {"small truck": "10", "large truck": "15"}}, "const_declarations": [{"type": "linear", "direction": "limit", "limit": "100000", "terms": {"small truck": "5000", "large truck": "8000"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "15", "terms": {"small truck": "1", "large truck": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small trucks\n- y: Number of large trucks\n\nObjective:\n- The goal is to maximize the number of boxes that can be carried. A small truck can carry 10 boxes, and a large truck can carry 15 boxes. Therefore, the objective function is: Maximize 10x + 15y\n\nConstraints:\n- The total cost of the trucks should not exceed the $100,000 limit, leading to the constraint: 5000x + 8000y <= 100000.\n- The total number of parking spots used by the trucks should be at most 15, leading to the constraint: x + 2y <= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 15y\nConstraints:\n5000x + 8000y <= 100000\nx + 2y <= 15", "canonical": {"objective": [-10.0, -15.0], "constraints": [[5000.0, 8000.0, 100000.0], [1.0, 2.0, 15.0]]}, "solution": {"x": 15, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of small trucks purchased: SmallTruck\n- Number of large trucks purchased: LargeTruck\n\nConstraints:\n- Total cost for small and large trucks should not exceed $100000:\n  5000 * SmallTruck + 8000 * LargeTruck <= 100000\n- Total parking spots taken by small and large trucks should not exceed 15:\n  1 * SmallTruck + 2 * LargeTruck <= 15\n\nObjective:\n- Maximize the number of boxes that can be carried (10 boxes per small truck, 15 boxes per large truck):\n  10 * SmallTruck + 15 * LargeTruck\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallTruck = intvar(0, 999999999)  # Number of small trucks purchased\nLargeTruck = intvar(0, 999999999)  # Number of large trucks purchased\n\n# Constraints\nm = Model()\n\n# Total cost of small and large trucks should not exceed $100000:\nm += 5000 * SmallTruck + 8000 * LargeTruck <= 100000\n# Total parking spots taken by small and large trucks should not exceed 15:\nm += 1 * SmallTruck + 2 * LargeTruck <= 15\n\n# Objective\n# Maximize the number of boxes that can be carried (10 boxes per small truck, 15 boxes per large truck):\nm.maximize(10 * SmallTruck + 15 * LargeTruck)\n", "entities": [{"start": 84, "end": 95, "word": "small truck", "entity_group": "VAR", "score": 0.9998626321102723}, {"start": 104, "end": 108, "word": "5000", "entity_group": "PARAM", "score": 0.9997210532261002}, {"start": 117, "end": 118, "word": "1", "entity_group": "PARAM", "score": 0.9987222992137484}, {"start": 148, "end": 150, "word": "10", "entity_group": "PARAM", "score": 0.9994101619617426}, {"start": 151, "end": 156, "word": "boxes", "entity_group": "OBJ_NAME", "score": 0.9990254529702824}, {"start": 161, "end": 172, "word": "large truck", "entity_group": "VAR", "score": 0.9999802613675636}, {"start": 181, "end": 185, "word": "8000", "entity_group": "PARAM", "score": 0.9996692793019679}, {"start": 194, "end": 195, "word": "2", "entity_group": "PARAM", "score": 0.999400247146989}, {"start": 226, "end": 228, "word": "15", "entity_group": "PARAM", "score": 0.9995994971252022}, {"start": 229, "end": 234, "word": "boxes", "entity_group": "OBJ_NAME", "score": 0.998559913024067}, {"start": 250, "end": 256, "word": "100000", "entity_group": "LIMIT", "score": 0.9948770509439596}, {"start": 257, "end": 262, "word": "limit", "entity_group": "CONST_DIR", "score": 0.9887251890379541}, {"start": 272, "end": 279, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998837871402018}, {"start": 280, "end": 282, "word": "15", "entity_group": "LIMIT", "score": 0.9991838495294731}, {"start": 345, "end": 353, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999622893827677}, {"start": 358, "end": 373, "word": "number of boxes", "entity_group": "OBJ_NAME", "score": 0.9893867464018767}]}
{"doc_id": "124450166", "document": "A fashion company makes two types of bags: hand-bags and backpacks. Each hand-bag requires 6 minutes of sewing while each backpack requires 7 minutes of sewing. Each hand-bag requires 3 minutes of painting while each backpack requires 5 minutes of painting. There are 400 minutes available for sewing and 600 minutes available for painting. The profit per hand-bag is $75 and the profit per backpack is $60. How many of each type of bag should the company make in order to maximize profit?", "order_mapping": {"hand-bags": 0, "backpacks": 1, "hand-bag": 0, "backpack": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hand-bag": "75", "backpack": "60"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"hand-bag": "6", "backpack": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"hand-bag": "3", "backpack": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hand-bags\n- y: Number of backpacks\n\nObjective:\n- The company aims to maximize its profit. The profit per hand-bag is $75 and the profit per backpack is $60. Therefore, the objective function is: Maximize 75x + 60y\n\nConstraints:\n- Each hand-bag requires 6 minutes of sewing, and each backpack requires 7 minutes of sewing. With 400 minutes available for sewing, the constraint is: 6x + 7y <= 400.\n- Each hand-bag requires 3 minutes of painting, and each backpack requires 5 minutes of painting. With 600 minutes available for painting, the constraint is: 3x + 5y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 75x + 60y\nConstraints:\n6x + 7y <= 400\n3x + 5y <= 600", "canonical": {"objective": [-75.0, -60.0], "constraints": [[6.0, 7.0, 400.0], [3.0, 5.0, 600.0]]}, "solution": {"x": 66, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of hand-bags made: HandBags\n- Number of backpacks made: Backpacks\n\nConstraints:\n- Total sewing time for hand-bags and backpacks should not exceed 400 minutes:\n  6 * HandBags + 7 * Backpacks <= 400\n- Total painting time for hand-bags and backpacks should not exceed 600 minutes:\n  3 * HandBags + 5 * Backpacks <= 600\n\nObjective:\n- Maximize profit (75 dollars per hand-bag, 60 dollars per backpack):\n  75 * HandBags + 60 * Backpacks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHandBags = intvar(0, 999999999)  # Number of hand-bags made\nBackpacks = intvar(0, 999999999)  # Number of backpacks made\n\n# Constraints\nm = Model()\n\n# Total sewing time for hand-bags and backpacks should not exceed 400 minutes:\nm += 6 * HandBags + 7 * Backpacks <= 400\n# Total painting time for hand-bags and backpacks should not exceed 600 minutes:\nm += 3 * HandBags + 5 * Backpacks <= 600\n\n# Objective\n# Maximize profit (75 dollars per hand-bag, 60 dollars per backpack):\nm.maximize(75 * HandBags + 60 * Backpacks)\n", "entities": [{"start": 44, "end": 55, "word": "hand - bags", "entity_group": "VAR", "score": 0.9994792713684032}, {"start": 60, "end": 69, "word": "backpacks", "entity_group": "VAR", "score": 0.9998324433628218}, {"start": 77, "end": 87, "word": "hand - bag", "entity_group": "VAR", "score": 0.9994927081035055}, {"start": 97, "end": 98, "word": "6", "entity_group": "PARAM", "score": 0.9996735575502991}, {"start": 128, "end": 136, "word": "backpack", "entity_group": "VAR", "score": 0.9997220259113044}, {"start": 146, "end": 147, "word": "7", "entity_group": "PARAM", "score": 0.9995994142679011}, {"start": 173, "end": 183, "word": "hand - bag", "entity_group": "VAR", "score": 0.9994132741122684}, {"start": 193, "end": 194, "word": "3", "entity_group": "PARAM", "score": 0.9996058598254832}, {"start": 226, "end": 234, "word": "backpack", "entity_group": "VAR", "score": 0.9996840615112356}, {"start": 244, "end": 245, "word": "5", "entity_group": "PARAM", "score": 0.9993429240719809}, {"start": 278, "end": 281, "word": "400", "entity_group": "LIMIT", "score": 0.9997776369624516}, {"start": 290, "end": 299, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993441706453836}, {"start": 315, "end": 318, "word": "600", "entity_group": "LIMIT", "score": 0.9997099391372636}, {"start": 327, "end": 336, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987261816362583}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999495562317579}, {"start": 367, "end": 377, "word": "hand - bag", "entity_group": "VAR", "score": 0.9984655492667031}, {"start": 383, "end": 385, "word": "75", "entity_group": "PARAM", "score": 0.9990902565104279}, {"start": 394, "end": 400, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998470913060343}, {"start": 405, "end": 413, "word": "backpack", "entity_group": "VAR", "score": 0.9990143080222649}, {"start": 419, "end": 421, "word": "60", "entity_group": "PARAM", "score": 0.9995067795799929}, {"start": 489, "end": 497, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993210574349483}, {"start": 498, "end": 504, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147077}]}
{"doc_id": "-963690780", "document": "A candy shop makes a mixture of candy using sour drops and sour belts. Each sour drop has 2 units of sourness and 4 units of flavoring. Each sour belt has 4 units of sourness and 3 units of flavoring. The shop want to make sure the mixture contains at least 30 units of sourness and 40 units of flavoring.  The mixture can also contain at most 5 sour belts. If it costs $0.50 per sour drop and $0.40 per sour belt, how many of each should be used to minimize cost of the mixture?", "order_mapping": {"sour drops": 0, "sour belts": 1, "sour drop": 0, "sour belt": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"sour drop": "0.50", "sour belt": "0.40"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"sour drop": "2", "sour belt": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"sour drop": "4", "sour belt": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "sour belts", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sour drops\n- y: Number of sour belts\n\nObjective:\n- The candy shop aims to minimize the cost of the mixture. Given that each sour drop costs $0.50 and each sour belt costs $0.40, the objective function is: Minimize 0.50x + 0.40y\n\nConstraints:\n- The mixture must contain at least 30 units of sourness, leading to the constraint: 2x + 4y >= 30.\n- The mixture must contain at least 40 units of flavoring, leading to the constraint: 4x + 3y >= 40.\n- The mixture can contain at most 5 sour belts, leading to the constraint: y <= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.50x + 0.40y\nConstraints:\n2x + 4y >= 30\n4x + 3y >= 40\ny <= 5", "canonical": {"objective": [0.5, 0.4], "constraints": [[-2.0, -4.0, -30.0], [-4.0, -3.0, -40.0], [0.0, 1.0, 5.0]]}, "solution": {"x": 7, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of sour drops used in the mixture: SourDrops\n- Number of sour belts used in the mixture: SourBelts\n\nConstraints:\n- The mixture must contain at least 30 units of sourness:\n  2 * SourDrops + 4 * SourBelts >= 30\n- The mixture must contain at least 40 units of flavoring:\n  4 * SourDrops + 3 * SourBelts >= 40\n- The mixture can contain at most 5 sour belts:\n  SourBelts <= 5\n\nObjective:\n- Minimize cost of the mixture (0.50 dollars per sour drop, 0.40 dollars per sour belt):\n  0.50 * SourDrops + 0.40 * SourBelts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSourDrops = intvar(0, 999999999)  # Number of sour drops used in the mixture\nSourBelts = intvar(0, 999999999)  # Number of sour belts used in the mixture\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 30 units of sourness:\nm += 2 * SourDrops + 4 * SourBelts >= 30\n# The mixture must contain at least 40 units of flavoring:\nm += 4 * SourDrops + 3 * SourBelts >= 40\n# The mixture can contain at most 5 sour belts:\nm += SourBelts <= 5\n\n# Objective\n# Minimize cost of the mixture (0.50 dollars per sour drop, 0.40 dollars per sour belt):\nm.minimize(0.50 * SourDrops + 0.40 * SourBelts)\n", "entities": [{"start": 44, "end": 54, "word": "sour drops", "entity_group": "VAR", "score": 0.9999498365068792}, {"start": 59, "end": 69, "word": "sour belts", "entity_group": "VAR", "score": 0.9999861183126412}, {"start": 77, "end": 86, "word": "sour drop", "entity_group": "VAR", "score": 0.9999843852113109}, {"start": 91, "end": 92, "word": "2", "entity_group": "PARAM", "score": 0.9997229992537126}, {"start": 115, "end": 116, "word": "4", "entity_group": "PARAM", "score": 0.9996587750520315}, {"start": 143, "end": 152, "word": "sour belt", "entity_group": "VAR", "score": 0.9999790617142558}, {"start": 157, "end": 158, "word": "4", "entity_group": "PARAM", "score": 0.9997361752528521}, {"start": 181, "end": 182, "word": "3", "entity_group": "PARAM", "score": 0.9995105205433928}, {"start": 252, "end": 260, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991844170993769}, {"start": 261, "end": 263, "word": "30", "entity_group": "LIMIT", "score": 0.9997588968906185}, {"start": 286, "end": 288, "word": "40", "entity_group": "LIMIT", "score": 0.9995652932223287}, {"start": 339, "end": 346, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998604734409785}, {"start": 347, "end": 348, "word": "5", "entity_group": "LIMIT", "score": 0.999625371152491}, {"start": 349, "end": 359, "word": "sour belts", "entity_group": "VAR", "score": 0.999971462683635}, {"start": 368, "end": 373, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9989847631025227}, {"start": 376, "end": 380, "word": "0.50", "entity_group": "PARAM", "score": 0.9996299602036238}, {"start": 385, "end": 394, "word": "sour drop", "entity_group": "VAR", "score": 0.9999671543645081}, {"start": 401, "end": 405, "word": "0.40", "entity_group": "PARAM", "score": 0.9996068738676538}, {"start": 410, "end": 419, "word": "sour belt", "entity_group": "VAR", "score": 0.9999726528605677}, {"start": 457, "end": 465, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9947874673674876}, {"start": 466, "end": 470, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.990736921033973}]}
{"doc_id": "-1830924888", "document": "A store sells two types of donuts, regular and jelly-filled.  The store pays a baker $4 and $6 for each unit of a regular and jelly-filled donut respectively. The store makes a profit of $2 per regular donut and a profit of $3 per jelly-filled donut. In a month, the store owner expects to sell at most 1000 donuts and wants to spend at most $5000 in buying donuts from the bakery. How many of each type of donut should be bought in order to maximize the total monthly profit?", "order_mapping": {"regular": 0, "jelly-filled": 1, "jelly-filled donut": 1, "regular donut": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular donut": "2", "jelly-filled donut": "3"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "5000", "terms": {"regular": "4", "jelly-filled donut": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "1000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular donuts bought\n- y: Number of jelly-filled donuts bought\n\nObjective:\n- The store owner aims to maximize the total monthly profit. The profit per regular donut is $2 and the profit per jelly-filled donut is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- The store wants to spend at most $5000 in buying donuts from the bakery, leading to the constraint: 4x + 6y <= 5000.\n- The store expects to sell at most 1000 donuts in a month, resulting in the constraint: x + y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\n4x + 6y <= 5000\nx + y <= 1000", "canonical": {"objective": [-2.0, -3.0], "constraints": [[4.0, 6.0, 5000.0], [1.0, 1.0, 1000.0]]}, "solution": {"x": 500, "y": 500}, "pseudo_model": "\nDecision Variables:\n- Number of regular donuts bought: RegularDonuts\n- Number of jelly-filled donuts bought: JellyFilledDonuts\n\nConstraints:\n- Total number of donuts bought should not exceed 1000:\n  RegularDonuts + JellyFilledDonuts <= 1000\n- Total cost of buying donuts should not exceed $5000 ($4 for regular, $6 for jelly-filled):\n  4 * RegularDonuts + 6 * JellyFilledDonuts <= 5000\n\nObjective:\n- Maximize profit ($2 profit per regular donut, $3 profit per jelly-filled donut):\n  2 * RegularDonuts + 3 * JellyFilledDonuts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularDonuts = intvar(0, 999999999)  # Number of regular donuts bought\nJellyFilledDonuts = intvar(0, 999999999)  # Number of jelly-filled donuts bought\n\n# Constraints\nm = Model()\n\n# The total number of donuts bought should not exceed 1000:\nm += RegularDonuts + JellyFilledDonuts <= 1000\n# The total cost of buying donuts should not exceed $5000 ($4 for regular, $6 for jelly-filled):\nm += 4 * RegularDonuts + 6 * JellyFilledDonuts <= 5000\n\n# Objective\n# Maximize profit ($2 profit per regular donut, $3 profit per jelly-filled donut):\nm.maximize(2 * RegularDonuts + 3 * JellyFilledDonuts)\n", "entities": [{"start": 36, "end": 43, "word": "regular", "entity_group": "VAR", "score": 0.9994438426184025}, {"start": 48, "end": 62, "word": "jelly - filled", "entity_group": "VAR", "score": 0.9990115654905312}, {"start": 90, "end": 91, "word": "4", "entity_group": "PARAM", "score": 0.9996150794307389}, {"start": 98, "end": 99, "word": "6", "entity_group": "PARAM", "score": 0.9996968636515039}, {"start": 119, "end": 126, "word": "regular", "entity_group": "VAR", "score": 0.9997281803462439}, {"start": 131, "end": 151, "word": "jelly - filled donut", "entity_group": "VAR", "score": 0.9981556120282833}, {"start": 185, "end": 191, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998607777714769}, {"start": 197, "end": 198, "word": "2", "entity_group": "PARAM", "score": 0.9994918752483491}, {"start": 203, "end": 216, "word": "regular donut", "entity_group": "VAR", "score": 0.9999759703946905}, {"start": 223, "end": 229, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998323910944038}, {"start": 235, "end": 236, "word": "3", "entity_group": "PARAM", "score": 0.9995608794003374}, {"start": 241, "end": 261, "word": "jelly - filled donut", "entity_group": "VAR", "score": 0.9976836032274202}, {"start": 309, "end": 316, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986560377547169}, {"start": 317, "end": 321, "word": "1000", "entity_group": "LIMIT", "score": 0.9993851617732671}, {"start": 348, "end": 355, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9932421401352898}, {"start": 358, "end": 362, "word": "5000", "entity_group": "LIMIT", "score": 0.9989065944172714}, {"start": 458, "end": 466, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9955061826884537}, {"start": 485, "end": 491, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999153493931059}]}
{"doc_id": "-661974449", "document": "A furniture company sells two types of tables \u2013 a dinning table and a coffee table. They cost $250 and $150 to make respectively. The company estimates that the total monthly demand of these two types of tables combined will be at most 200 units. The monthly manufacturing budget on tables is $20000. Determine the number of units of each type of tables the company should make to get maximum profit if the profit on each dinning table and coffee table are $200 and $100 respectively.", "order_mapping": {"dinning table": 0, "coffee table": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"dinning table": "200", "coffee table": "100"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "20000", "terms": {"dinning table": "250", "coffee table": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of dining tables produced\n- y: Number of coffee tables produced\n\nObjective:\n- The company aims to maximize its profit. The profit on each dining table is $200 and on each coffee table is $100. Therefore, the objective function is: Maximize 200x + 100y\n\nConstraints:\n- The monthly manufacturing budget for tables is $20,000, leading to the constraint: 250x + 150y <= 20000.\n- The total monthly demand for both types of tables combined will be at most 200 units, resulting in the constraint: x + y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 100y\nConstraints:\n250x + 150y <= 20000\nx + y <= 200", "canonical": {"objective": [-200.0, -100.0], "constraints": [[250.0, 150.0, 20000.0], [1.0, 1.0, 200.0]]}, "solution": {"x": 80, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of dinning tables made per month: DinningTables\n- Number of coffee tables made per month: CoffeeTables\n\nConstraints:\n- Total number of tables made should not exceed 200 units per month:\n  DinningTables + CoffeeTables <= 200\n- The monthly manufacturing budget on tables should not exceed $20000 (250 dollars to make a dinning table, 150 dollars to make a coffee table):\n  250 * DinningTables + 150 * CoffeeTables <= 20000\n\nObjective:\n- Maximize profit (200 dollars profit per dinning table, 100 dollars profit per coffee table):\n  200 * DinningTables + 100 * CoffeeTables\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDinningTables = intvar(0, 999999999)  # Number of dinning tables made per month\nCoffeeTables = intvar(0, 999999999)  # Number of coffee tables made per month\n\n# Constraints\nm = Model()\n\n# Total number of tables made should not exceed 200 units per month:\nm += DinningTables + CoffeeTables <= 200\n# The monthly manufacturing budget on tables should not exceed $20000:\nm += 250 * DinningTables + 150 * CoffeeTables <= 20000\n\n# Objective\n# Maximize profit (200 dollars per dinning table, 100 dollars per coffee table):\nm.maximize(200 * DinningTables + 100 * CoffeeTables)\n", "entities": [{"start": 50, "end": 63, "word": "dinning table", "entity_group": "VAR", "score": 0.9999596826660524}, {"start": 70, "end": 82, "word": "coffee table", "entity_group": "VAR", "score": 0.9998610998304194}, {"start": 97, "end": 100, "word": "250", "entity_group": "PARAM", "score": 0.9977477842962829}, {"start": 107, "end": 110, "word": "150", "entity_group": "PARAM", "score": 0.9995195775683907}, {"start": 232, "end": 239, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998325045759658}, {"start": 240, "end": 243, "word": "200", "entity_group": "LIMIT", "score": 0.9997633411768442}, {"start": 278, "end": 284, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9958647232103244}, {"start": 300, "end": 305, "word": "20000", "entity_group": "LIMIT", "score": 0.9978740530895013}, {"start": 392, "end": 399, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9894194102903706}, {"start": 400, "end": 406, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999310434012939}, {"start": 414, "end": 420, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997915371721049}, {"start": 429, "end": 442, "word": "dinning table", "entity_group": "VAR", "score": 0.9999762801679759}, {"start": 447, "end": 459, "word": "coffee table", "entity_group": "VAR", "score": 0.999983839443273}, {"start": 466, "end": 469, "word": "200", "entity_group": "PARAM", "score": 0.9997061454660654}, {"start": 476, "end": 479, "word": "100", "entity_group": "PARAM", "score": 0.9997228216976104}]}
{"doc_id": "764032993", "document": "You have participated in a math contest. There are two types of problems to solve: long answer questions and multiple choice questions. Long answer questions are worth 10 points and multiple choice questions are worth 2 points. In total, you have enough time to answer at most 15 questions. You need to answer at least 5 long answer questions and 7 multiple choice questions, but time restricts answering more than 11 of either type. How many of each type of questions do you need to answer to maximize your score? What is your maximum score? Assume all of your answers are correct.", "order_mapping": {"long answer questions": 0, "multiple choice questions": 1, "Long answer questions": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "score", "terms": {"Long answer questions": "10", "multiple choice questions": "2"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "15", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "long answer questions", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "7", "var": "multiple choice questions", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "11", "var": "long answer questions", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "11", "var": "multiple choice questions", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of long answer questions\n- y: Number of multiple choice questions\n\nObjective:\n- The goal is to maximize the score. Long answer questions are worth 10 points and multiple choice questions are worth 2 points. Therefore, the objective function is: Maximize 10x + 2y\n\nConstraints:\n- The total number of questions answered should be at most 15, leading to the constraint: x + y <= 15.\n- At least 5 long answer questions need to be answered, resulting in the constraint: x >= 5.\n- At least 7 multiple choice questions need to be answered, leading to the constraint: y >= 7.\n- No more than 11 of either type of question can be answered, resulting in the constraints: x <= 11 and y <= 11.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 2y\nConstraints:\nx + y <= 15\nx >= 5\ny >= 7\nx <= 11\ny <= 11", "canonical": {"objective": [-10.0, -2.0], "constraints": [[1.0, 1.0, 15.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -7.0], [1.0, 0.0, 11.0], [0.0, 1.0, 11.0]]}, "solution": {"x": 8, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of long answer questions answered: LongAnswer\n- Number of multiple choice questions answered: MultipleChoice\n\nConstraints:\n- Total number of questions answered should not exceed 15:\n  LongAnswer + MultipleChoice <= 15\n- At least 5 long answer questions should be answered:\n  LongAnswer >= 5\n- At least 7 multiple choice questions should be answered:\n  MultipleChoice >= 7\n- At most 11 long answer questions can be answered:\n  LongAnswer <= 11\n- At most 11 multiple choice questions can be answered:\n  MultipleChoice <= 11\n\nObjective:\n- Maximize score (10 points for long answer questions, 2 points for multiple choice questions):\n  10 * LongAnswer + 2 * MultipleChoice\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLongAnswer = intvar(0, 999999999)  # Number of long answer questions answered\nMultipleChoice = intvar(0, 999999999)  # Number of multiple choice questions answered\n\n# Constraints\nm = Model()\n\n# Total number of questions answered should not exceed 15:\nm += LongAnswer + MultipleChoice <= 15\n# At least 5 long answer questions should be answered:\nm += LongAnswer >= 5\n# At least 7 multiple choice questions should be answered:\nm += MultipleChoice >= 7\n# At most 11 long answer questions can be answered:\nm += LongAnswer <= 11\n# At most 11 multiple choice questions can be answered:\nm += MultipleChoice <= 11\n\n# Objective\n# Maximize score (10 points for long answer questions, 2 points for multiple choice questions):\nm.maximize(10 * LongAnswer + 2 * MultipleChoice)\n", "entities": [{"start": 85, "end": 106, "word": "long answer questions", "entity_group": "VAR", "score": 0.9995007904164551}, {"start": 111, "end": 136, "word": "multiple choice questions", "entity_group": "VAR", "score": 0.9991888547969126}, {"start": 139, "end": 160, "word": "Long answer questions", "entity_group": "VAR", "score": 0.999574157726446}, {"start": 171, "end": 173, "word": "10", "entity_group": "PARAM", "score": 0.9997443645797686}, {"start": 174, "end": 180, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9483901400930373}, {"start": 185, "end": 210, "word": "multiple choice questions", "entity_group": "VAR", "score": 0.9995876232494406}, {"start": 221, "end": 222, "word": "2", "entity_group": "PARAM", "score": 0.9997278353946281}, {"start": 223, "end": 229, "word": "points", "entity_group": "OBJ_NAME", "score": 0.884402720615128}, {"start": 274, "end": 281, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99865202894115}, {"start": 282, "end": 284, "word": "15", "entity_group": "LIMIT", "score": 0.9997344942680978}, {"start": 316, "end": 324, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989256007916443}, {"start": 325, "end": 326, "word": "5", "entity_group": "LIMIT", "score": 0.9994826661576531}, {"start": 327, "end": 348, "word": "long answer questions", "entity_group": "VAR", "score": 0.999589575483653}, {"start": 353, "end": 354, "word": "7", "entity_group": "LIMIT", "score": 0.9995873658817961}, {"start": 355, "end": 380, "word": "multiple choice questions", "entity_group": "VAR", "score": 0.9996153953023169}, {"start": 412, "end": 421, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9969712193995433}, {"start": 422, "end": 424, "word": "11", "entity_group": "LIMIT", "score": 0.9974178009690179}, {"start": 502, "end": 510, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990379981488036}, {"start": 516, "end": 521, "word": "score", "entity_group": "OBJ_NAME", "score": 0.9995558392110254}]}
{"doc_id": "1310506563", "document": "A man wants to sell his berries at the market down the river. He can either use a boat to carry it down stream or have his neighbor carry it. A boat can take 200 units of berries per trip and cost $30 per trip. His neighbor can take 40 units of berries per trip and costs $8. The man does not want to spend more than $500 and the number of boat trips cannot exceed the number of trips his neighbor does. Formulate a LP to maximize the number of berries he can transport to the market?", "order_mapping": {"boat": 0, "neighbor": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of berries", "terms": {"boat": "200", "neighbor": "40"}}, "const_declarations": [{"type": "linear", "direction": "not want to spend more than", "limit": "500", "terms": {"boat": "30", "neighbor": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "boat", "direction": "cannot exceed", "y_var": "neighbor", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of boat trips\n- y: Number of neighbor trips\n\nObjective:\n- The man wants to maximize the number of berries he can transport to the market. The boat can carry 200 units of berries per trip and the neighbor can carry 40 units of berries per trip. Therefore, the objective function is: Maximize 200x + 40y\n\nConstraints:\n- The man does not want to spend more than $500, so the cost constraint is: 30x + 8y <= 500.\n- The number of boat trips cannot exceed the number of trips his neighbor does, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 40y\nConstraints:\n30x + 8y <= 500\nx <= y", "canonical": {"objective": [-200.0, -40.0], "constraints": [[30.0, 8.0, 500.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 13, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of boat trips: BoatTrips\n- Number of neighbor trips: NeighborTrips\n\nConstraints:\n- The total cost should not exceed $500 (30 dollars per boat trip, 8 dollars per neighbor trip):\n  30 * BoatTrips + 8 * NeighborTrips <= 500\n- The number of boat trips cannot exceed the number of trips his neighbor does:\n  BoatTrips <= NeighborTrips\n\nObjective:\n- Maximize the number of berries transported to the market (200 units per boat trip, 40 units per neighbor trip):\n  200 * BoatTrips + 40 * NeighborTrips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBoatTrips = intvar(0, 999999999)  # Number of boat trips\nNeighborTrips = intvar(0, 999999999)  # Number of neighbor trips\n\n# Constraints\nm = Model()\n\n# The total cost should not exceed $500:\nm += 30 * BoatTrips + 8 * NeighborTrips <= 500\n# The number of boat trips cannot exceed the number of trips his neighbor does:\nm += BoatTrips <= NeighborTrips\n\n# Objective\n# Maximize the number of berries transported to the market (200 units per boat trip, 40 units per neighbor trip):\nm.maximize(200 * BoatTrips + 40 * NeighborTrips)\n", "entities": [{"start": 83, "end": 87, "word": "boat", "entity_group": "VAR", "score": 0.9996554843360687}, {"start": 124, "end": 132, "word": "neighbor", "entity_group": "VAR", "score": 0.9996758868229676}, {"start": 146, "end": 150, "word": "boat", "entity_group": "VAR", "score": 0.999494938478316}, {"start": 160, "end": 163, "word": "200", "entity_group": "PARAM", "score": 0.9996079084879118}, {"start": 173, "end": 180, "word": "berries", "entity_group": "OBJ_NAME", "score": 0.9974983823864252}, {"start": 201, "end": 203, "word": "30", "entity_group": "PARAM", "score": 0.9996066463801446}, {"start": 219, "end": 227, "word": "neighbor", "entity_group": "VAR", "score": 0.9996879747299404}, {"start": 237, "end": 239, "word": "40", "entity_group": "PARAM", "score": 0.9995665039539894}, {"start": 249, "end": 256, "word": "berries", "entity_group": "OBJ_NAME", "score": 0.999122730199053}, {"start": 278, "end": 279, "word": "8", "entity_group": "PARAM", "score": 0.9997354470160336}, {"start": 295, "end": 322, "word": "not want to spend more than", "entity_group": "CONST_DIR", "score": 0.9420064247245812}, {"start": 325, "end": 328, "word": "500", "entity_group": "LIMIT", "score": 0.9995788288223622}, {"start": 347, "end": 351, "word": "boat", "entity_group": "VAR", "score": 0.9995001702263926}, {"start": 358, "end": 372, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.988009025003379}, {"start": 397, "end": 405, "word": "neighbor", "entity_group": "VAR", "score": 0.9997369765145939}, {"start": 431, "end": 439, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995912138976932}, {"start": 444, "end": 461, "word": "number of berries", "entity_group": "OBJ_NAME", "score": 0.9824445318490099}]}
{"doc_id": "2050370749", "document": "A small factory makes plush toys in a small and large size using cotton. To make a small plush requires 5 units of cotton and 10 minutes of worker time. To make a large plush requires 8 units of cotton and 12 minutes of worker time. In a day, there are 250 units of cotton available and 500 minutes of worker time. If the profit per small plush is $3 and the profit per large plush is $5, how many of each should be made to maximize profit?", "order_mapping": {"small": 0, "large": 1, "small plush": 0, "large plush": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large plush": "5", "small plush": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "250", "terms": {"small plush": "5", "large plush": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"small plush": "10", "large plush": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small plush toys\n- y: Number of large plush toys\n\nObjective:\n- The factory aims to maximize its profit. The profit per small plush is $3 and the profit per large plush is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The factory has 250 units of cotton available, and each small plush requires 5 units and each large plush requires 8 units. This leads to the constraint: 5x + 8y <= 250.\n- The factory has 500 minutes of worker time available, and each small plush requires 10 minutes and each large plush requires 12 minutes. This leads to the constraint: 10x + 12y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n5x + 8y <= 250\n10x + 12y <= 500", "canonical": {"objective": [-3.0, -5.0], "constraints": [[5.0, 8.0, 250.0], [10.0, 12.0, 500.0]]}, "solution": {"x": 2, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of small plush toys made: SmallPlush\n- Number of large plush toys made: LargePlush\n\nConstraints:\n- Cotton usage for small and large plush toys should not exceed 250 units:\n  5 * SmallPlush + 8 * LargePlush <= 250\n- Worker time for small and large plush toys should not exceed 500 minutes:\n  10 * SmallPlush + 12 * LargePlush <= 500\n\nObjective:\n- Maximize profit, with $3 profit per small plush and $5 profit per large plush:\n  3 * SmallPlush + 5 * LargePlush\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallPlush = intvar(0, 999999999)  # Number of small plush toys made\nLargePlush = intvar(0, 999999999)  # Number of large plush toys made\n\n# Constraints\nm = Model()\n\n# Cotton constraint: 5 units for a small plush and 8 units for a large plush, 250 units available per day\nm += 5 * SmallPlush + 8 * LargePlush <= 250\n# Worker time constraint: 10 minutes for a small plush and 12 minutes for a large plush, 500 minutes available per day\nm += 10 * SmallPlush + 12 * LargePlush <= 500\n\n# Objective\n# Maximize profit: $3 per small plush and $5 per large plush\nm.maximize(3 * SmallPlush + 5 * LargePlush)\n", "entities": [{"start": 38, "end": 43, "word": "small", "entity_group": "VAR", "score": 0.9996805400282702}, {"start": 48, "end": 53, "word": "large", "entity_group": "VAR", "score": 0.9995122842518998}, {"start": 84, "end": 95, "word": "small plush", "entity_group": "VAR", "score": 0.9998773429617435}, {"start": 105, "end": 106, "word": "5", "entity_group": "PARAM", "score": 0.9996769951338986}, {"start": 127, "end": 129, "word": "10", "entity_group": "PARAM", "score": 0.9997214049434584}, {"start": 165, "end": 176, "word": "large plush", "entity_group": "VAR", "score": 0.9999153841948182}, {"start": 186, "end": 187, "word": "8", "entity_group": "PARAM", "score": 0.9996769951319822}, {"start": 208, "end": 210, "word": "12", "entity_group": "PARAM", "score": 0.9996884934819216}, {"start": 257, "end": 260, "word": "250", "entity_group": "LIMIT", "score": 0.9996983514659585}, {"start": 277, "end": 286, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983682003041111}, {"start": 291, "end": 294, "word": "500", "entity_group": "LIMIT", "score": 0.9996157658333463}, {"start": 327, "end": 333, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9991305004608659}, {"start": 338, "end": 349, "word": "small plush", "entity_group": "VAR", "score": 0.9997466322035607}, {"start": 355, "end": 356, "word": "3", "entity_group": "PARAM", "score": 0.9994604646145188}, {"start": 365, "end": 371, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999311801079378}, {"start": 376, "end": 387, "word": "large plush", "entity_group": "VAR", "score": 0.9997357856519082}, {"start": 393, "end": 394, "word": "5", "entity_group": "PARAM", "score": 0.9996338548372047}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 441, "end": 447, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "966407725", "document": "Northwest Golden Bakery wishes to make some cakes that have some chocolate and strawberry toppings. Each chocolate topping contains 1 gram of sugar and 2 grams of butter; each strawberry topping contains 0.5 grams of sugar and 0.7 grams of butter. For health reasons, the cake will have at most 5 chocolate toppings. To make a tasty cake, at least 10 grams of sugar and 15 grams of butter must be used in the toppings of the cake. If it costs $2 to make one chocolate topping and $3 for one strawberry topping, what is the optimal combination of chocolate and strawberry toppings to minimize the cost?", "order_mapping": {"strawberry toppings": 0, "chocolate topping": 1, "strawberry topping": 0, "chocolate toppings": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"chocolate topping": "2", "strawberry topping": "3"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "5", "var": "chocolate toppings", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "10", "terms": {"strawberry topping": "0.5", "chocolate topping": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"chocolate topping": "2", "strawberry topping": "0.7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate toppings\n- y: Number of strawberry toppings\n\nObjective:\n- The bakery aims to minimize the cost of making the cakes. Given that it costs $2 to make one chocolate topping and $3 for one strawberry topping, the objective function is: Minimize 2x + 3y\n\nConstraints:\n- The cake will have at most 5 chocolate toppings, leading to the constraint: x <= 5.\n- At least 10 grams of sugar and 15 grams of butter must be used in the toppings of the cake. This translates to the constraints: 1x + 0.5y >= 10 and 2x + 0.7y >= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 3y\nConstraints:\nx <= 5\nx + 0.5y >= 10\n2x + 0.7y >= 15", "canonical": {"objective": [2.0, 3.0], "constraints": [[1.0, 0.0, 5.0], [-1.0, -0.5, -10.0], [-2.0, -0.7, -15.0]]}, "solution": {"x": 5, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate toppings: ChocolateToppings\n- Number of strawberry toppings: StrawberryToppings\n\nConstraints:\n- At most 5 chocolate toppings:\n  ChocolateToppings <= 5\n- At least 10 grams of sugar must be used (1g per chocolate topping, 0.5g per strawberry topping):\n  1 * ChocolateToppings + 0.5 * StrawberryToppings >= 10\n- At least 15 grams of butter must be used (2g per chocolate topping, 0.7g per strawberry topping):\n  2 * ChocolateToppings + 0.7 * StrawberryToppings >= 15\n\nObjective:\n- Minimize cost ($2 per chocolate topping, $3 per strawberry topping):\n  2 * ChocolateToppings + 3 * StrawberryToppings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateToppings = intvar(0, 999999999)  # Number of chocolate toppings\nStrawberryToppings = intvar(0, 999999999)  # Number of strawberry toppings\n\n# Constraints\nm = Model()\n\n# At most 5 chocolate toppings:\nm += ChocolateToppings <= 5\n# At least 10 grams of sugar must be used (1g per chocolate topping, 0.5g per strawberry topping):\nm += 1 * ChocolateToppings + 0.5 * StrawberryToppings >= 10\n# At least 15 grams of butter must be used (2g per chocolate topping, 0.7g per strawberry topping):\nm += 2 * ChocolateToppings + 0.7 * StrawberryToppings >= 15\n\n# Objective\n# Minimize cost ($2 per chocolate topping, $3 per strawberry topping):\nm.minimize(2 * ChocolateToppings + 3 * StrawberryToppings)\n", "entities": [{"start": 79, "end": 98, "word": "strawberry toppings", "entity_group": "VAR", "score": 0.9999790943261945}, {"start": 106, "end": 123, "word": "chocolate topping", "entity_group": "VAR", "score": 0.9999844048696}, {"start": 133, "end": 134, "word": "1", "entity_group": "PARAM", "score": 0.9996228525070338}, {"start": 153, "end": 154, "word": "2", "entity_group": "PARAM", "score": 0.9997041514280038}, {"start": 178, "end": 196, "word": "strawberry topping", "entity_group": "VAR", "score": 0.9999790303238856}, {"start": 206, "end": 209, "word": "0.5", "entity_group": "PARAM", "score": 0.9997333717480162}, {"start": 229, "end": 232, "word": "0.7", "entity_group": "PARAM", "score": 0.9996520069977134}, {"start": 291, "end": 298, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983807885111566}, {"start": 299, "end": 300, "word": "5", "entity_group": "LIMIT", "score": 0.9992747240307414}, {"start": 301, "end": 319, "word": "chocolate toppings", "entity_group": "VAR", "score": 0.9999557541666971}, {"start": 345, "end": 353, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989828563595714}, {"start": 354, "end": 356, "word": "10", "entity_group": "LIMIT", "score": 0.999757097838101}, {"start": 376, "end": 378, "word": "15", "entity_group": "LIMIT", "score": 0.9997424471464678}, {"start": 444, "end": 449, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991804216080772}, {"start": 452, "end": 453, "word": "2", "entity_group": "PARAM", "score": 0.9997113872889126}, {"start": 466, "end": 483, "word": "chocolate topping", "entity_group": "VAR", "score": 0.9999521278370491}, {"start": 490, "end": 491, "word": "3", "entity_group": "PARAM", "score": 0.9997572429168916}, {"start": 500, "end": 518, "word": "strawberry topping", "entity_group": "VAR", "score": 0.9999858241861345}, {"start": 570, "end": 589, "word": "strawberry toppings", "entity_group": "VAR", "score": 0.9999775376743851}, {"start": 593, "end": 601, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986186474090378}, {"start": 606, "end": 610, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9979479945292029}]}
{"doc_id": "1862750461", "document": "Joel is on a strict diet and insists on only drinking chocolate protein shakes and vanilla meal replacement smoothies. He want to save money and minimize cost but must get enough protein and carbs, and not too much fat. Chocolate protein shakes cost $8 per serving and contain 35 units of protein, 20 units of carbs, and 3 units of fat. Meal replacement smoothies cost $10 per serving and contain 15 units of protein, 25 units of carbs, and 10 units of fat. John requires at least 150 units of protein and 130 units of carbs but must not eat more than 50 units of fat each day. Formulate the problem as an LP problem in order to minimize cost.", "order_mapping": {"chocolate protein shakes": 0, "meal replacement smoothies": 1, "Chocolate protein shakes": 0, "Meal replacement smoothies": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Chocolate protein shakes": "8", "Meal replacement smoothies": "10"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"Chocolate protein shakes": "35", "Meal replacement smoothies": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "not eat more than", "limit": "50", "terms": {"Chocolate protein shakes": "3", "Meal replacement smoothies": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "130", "terms": {"Chocolate protein shakes": "20", "Meal replacement smoothies": "25"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of chocolate protein shakes\n- y: Number of servings of meal replacement smoothies\n\nObjective:\n- Minimize the cost while meeting the dietary requirements. Chocolate protein shakes cost $8 per serving and meal replacement smoothies cost $10 per serving. The objective function is: Minimize 8x + 10y\n\nConstraints:\n- Joel requires at least 150 units of protein, which translates to the constraint: 35x + 15y >= 150.\n- Joel requires at least 130 units of carbs, leading to the constraint: 20x + 25y >= 130.\n- Joel must not consume more than 50 units of fat, resulting in the constraint: 3x + 10y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 8x + 10y\nConstraints:\n35x + 15y >= 150\n20x + 25y >= 130\n3x + 10y <= 50", "canonical": {"objective": [8.0, 10.0], "constraints": [[-35.0, -15.0, -150.0], [-20.0, -25.0, -130.0], [3.0, 10.0, 50.0]]}, "solution": {"x": 4, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate protein shakes: ChocolateShakes\n- Number of meal replacement smoothies: MealSmoothies\n\nConstraints:\n- Joel requires at least 150 units of protein:\n  35 * ChocolateShakes + 15 * MealSmoothies >= 150\n- Joel must not consume more than 50 units of fat:\n  3 * ChocolateShakes + 10 * MealSmoothies <= 50\n- Joel requires at least 130 units of carbs:\n  20 * ChocolateShakes + 25 * MealSmoothies >= 130\n\nObjective:\n- Minimize cost ($8 per chocolate shake and $10 per meal smoothie):\n  8 * ChocolateShakes + 10 * MealSmoothies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateShakes = intvar(0, 999999999)  # Number of chocolate protein shakes\nMealSmoothies = intvar(0, 999999999)  # Number of meal replacement smoothies\n\n# Constraints\nm = Model()\n\n# Joel requires at least 150 units of protein:\nm += 35 * ChocolateShakes + 15 * MealSmoothies >= 150\n# Joel must not consume more than 50 units of fat:\nm += 3 * ChocolateShakes + 10 * MealSmoothies <= 50\n# Joel requires at least 130 units of carbs:\nm += 20 * ChocolateShakes + 25 * MealSmoothies >= 130\n\n# Objective\n# Minimize cost ($8 per chocolate shake and $10 per meal smoothie):\nm.minimize(8 * ChocolateShakes + 10 * MealSmoothies)\n", "entities": [{"start": 54, "end": 78, "word": "chocolate protein shakes", "entity_group": "VAR", "score": 0.9995719090220259}, {"start": 91, "end": 117, "word": "meal replacement smoothies", "entity_group": "VAR", "score": 0.9995691976270376}, {"start": 146, "end": 154, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.6284159507931538}, {"start": 155, "end": 159, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9971770881276469}, {"start": 223, "end": 247, "word": "Chocolate protein shakes", "entity_group": "VAR", "score": 0.9996982995274148}, {"start": 248, "end": 252, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9979958236865182}, {"start": 255, "end": 256, "word": "8", "entity_group": "PARAM", "score": 0.9994313173407757}, {"start": 281, "end": 283, "word": "35", "entity_group": "PARAM", "score": 0.9997044026571593}, {"start": 303, "end": 305, "word": "20", "entity_group": "PARAM", "score": 0.9997412521005364}, {"start": 327, "end": 328, "word": "3", "entity_group": "PARAM", "score": 0.9996840176476408}, {"start": 344, "end": 370, "word": "Meal replacement smoothies", "entity_group": "VAR", "score": 0.9973181849514915}, {"start": 371, "end": 375, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9962865928141337}, {"start": 378, "end": 380, "word": "10", "entity_group": "PARAM", "score": 0.9992801401622221}, {"start": 405, "end": 407, "word": "15", "entity_group": "PARAM", "score": 0.9997044026575193}, {"start": 427, "end": 429, "word": "25", "entity_group": "PARAM", "score": 0.9997412521005342}, {"start": 451, "end": 453, "word": "10", "entity_group": "PARAM", "score": 0.999636768159202}, {"start": 483, "end": 491, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991933618447634}, {"start": 492, "end": 495, "word": "150", "entity_group": "LIMIT", "score": 0.9997533707327767}, {"start": 517, "end": 520, "word": "130", "entity_group": "LIMIT", "score": 0.999740033006531}, {"start": 545, "end": 562, "word": "not eat more than", "entity_group": "CONST_DIR", "score": 0.959720768097254}, {"start": 563, "end": 565, "word": "50", "entity_group": "LIMIT", "score": 0.9997463805613007}, {"start": 641, "end": 649, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9008371396724507}, {"start": 650, "end": 654, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.8835497988262879}]}
{"doc_id": "-1348328225", "document": "A bike shop sells two models of a bike: a mountain bike and a road bike. The mountain bike costs $750 and yields a profit of $300. The road bike costs $1000 and yields a profit of $500. The bike shop owner knows that the monthly demand will be at most 150 bikes. He also wants to make sure that there is at most $40000 worth of bikes in stock. How many bikes of each type should be stocked in order to maximize profit?", "order_mapping": {"mountain bike": 0, "road bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"road bike": "500", "mountain bike": "300"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "40000", "terms": {"mountain bike": "750", "road bike": "1000"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "150", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of mountain bikes\n- y: Number of road bikes\n\nObjective:\n- The bike shop owner wants to maximize the profit. The mountain bike costs $750 and yields a profit of $300, while the road bike costs $1000 and yields a profit of $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- The total value of bikes in stock should be at most $40000, leading to the constraint: 750x + 1000y <= 40000.\n- The monthly demand will be at most 150 bikes, resulting in the constraint: x + y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\n750x + 1000y <= 40000\nx + y <= 150", "canonical": {"objective": [-300.0, -500.0], "constraints": [[750.0, 1000.0, 40000.0], [1.0, 1.0, 150.0]]}, "solution": {"x": 0, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of mountain bikes stocked: MountainBikes\n- Number of road bikes stocked: RoadBikes\n\nConstraints:\n- Total number of bikes stocked should not exceed 150:\n  MountainBikes + RoadBikes <= 150\n- The total cost of bikes in stock should not exceed $40000 (mountain bike costs $750, road bike costs $1000):\n  750 * MountainBikes + 1000 * RoadBikes <= 40000\n\nObjective:\n- Maximize profit ($300 profit per mountain bike, $500 profit per road bike):\n  300 * MountainBikes + 500 * RoadBikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMountainBikes = intvar(0, 999999999)  # Number of mountain bikes stocked\nRoadBikes = intvar(0, 999999999)  # Number of road bikes stocked\n\n# Constraints\nm = Model()\n\n# Total number of bikes stocked should not exceed 150:\nm += MountainBikes + RoadBikes <= 150\n# The total cost of bikes in stock should not exceed $40000:\nm += 750 * MountainBikes + 1000 * RoadBikes <= 40000\n\n# Objective\n# Maximize profit ($300 profit per mountain bike, $500 profit per road bike):\nm.maximize(300 * MountainBikes + 500 * RoadBikes)\n", "entities": [{"start": 43, "end": 56, "word": "mountain bike", "entity_group": "VAR", "score": 0.9999590255341604}, {"start": 63, "end": 72, "word": "road bike", "entity_group": "VAR", "score": 0.999976737483504}, {"start": 79, "end": 92, "word": "mountain bike", "entity_group": "VAR", "score": 0.9999809725174444}, {"start": 101, "end": 104, "word": "750", "entity_group": "PARAM", "score": 0.9996763089748162}, {"start": 118, "end": 124, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997705510132681}, {"start": 130, "end": 133, "word": "300", "entity_group": "PARAM", "score": 0.9996905982473876}, {"start": 140, "end": 149, "word": "road bike", "entity_group": "VAR", "score": 0.9999830084518809}, {"start": 158, "end": 162, "word": "1000", "entity_group": "PARAM", "score": 0.9996763276592324}, {"start": 176, "end": 182, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997705510124623}, {"start": 188, "end": 191, "word": "500", "entity_group": "PARAM", "score": 0.9997314527433411}, {"start": 252, "end": 259, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988971854049625}, {"start": 260, "end": 263, "word": "150", "entity_group": "LIMIT", "score": 0.9997429355745445}, {"start": 313, "end": 320, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974600856890306}, {"start": 323, "end": 328, "word": "40000", "entity_group": "LIMIT", "score": 0.9994264642520971}, {"start": 413, "end": 421, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9946628327077289}, {"start": 422, "end": 428, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990907017272325}]}
{"doc_id": "-438005028", "document": "The TrainAcrossCanada (TAC) can host up to 400 passengers on a scenic train ride. Sleeper class seats, which come with a bed, are sold for a $500 profit each while regular tickets are sold for a $200 profit each.  However, due to the high costs, more than 5 times as many passengers prefer to travel by regular seating than by sleeper class and will sleep sitting up. However, there are at least 50 seats reserved for sleeper class passengers. Determine how many tickets of each type must be sold in order to maximize the profit for the TAC. What is the maximum profit?", "order_mapping": {"Sleeper class": 0, "regular tickets": 1, "regular seating": 1, "sleeper class": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Sleeper class": "500", "regular tickets": "200"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "400", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "sleeper class", "direction": "more than", "param": "5 times", "y_var": "regular seating", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "sleeper class", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sleeper class tickets sold\n- y: Number of regular tickets sold\n\nObjective:\n- The TAC aims to maximize its profit. Sleeper class seats are sold for a $500 profit each, and regular tickets are sold for a $200 profit each. Therefore, the objective function is: Maximize 500x + 200y\n\nConstraints:\n- The train can host up to 400 passengers, so the constraint is: x + y <= 400.\n- More than 5 times as many passengers prefer to travel by regular seating than by sleeper class, leading to the constraint: x <= 1/5y.\n- There are at least 50 seats reserved for sleeper class passengers, resulting in the constraint: x >= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 200y\nConstraints:\nx + y <= 400\nx <= 1/5y\nx >= 50", "canonical": {"objective": [-500.0, -200.0], "constraints": [[1.0, 1.0, 400.0], [1.0, -0.2, 0.0], [-1.0, 0.0, -50.0]]}, "solution": {"x": 66, "y": 334}, "pseudo_model": "\nDecision Variables:\n- Number of sleeper class tickets sold: SleeperClass\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of passengers (sleeper class and regular tickets combined) should not exceed 400:\n  SleeperClass + RegularTickets <= 400\n- Regular tickets sold should be at least 5 times the number of sleeper class tickets sold:\n  RegularTickets >= 5 * SleeperClass\n- At least 50 seats are reserved for sleeper class passengers:\n  SleeperClass >= 50\n\nObjective:\n- Maximize profit (500 dollars per sleeper class ticket, 200 dollars per regular ticket):\n  500 * SleeperClass + 200 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSleeperClass = intvar(0, 999999999)  # Number of sleeper class tickets sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of passengers should not exceed 400:\nm += SleeperClass + RegularTickets <= 400\n# More than 5 times as many passengers prefer regular seating than sleeper class:\nm += RegularTickets >= 5 * SleeperClass\n# At least 50 seats are reserved for sleeper class passengers:\nm += SleeperClass >= 50\n\n# Objective\n# Maximize profit (500 dollars per sleeper class ticket, 200 dollars per regular ticket):\nm.maximize(500 * SleeperClass + 200 * RegularTickets)\n", "entities": [{"start": 39, "end": 44, "word": "up to", "entity_group": "CONST_DIR", "score": 0.99903305919655}, {"start": 45, "end": 48, "word": "400", "entity_group": "LIMIT", "score": 0.9996000529220997}, {"start": 85, "end": 98, "word": "Sleeper class", "entity_group": "VAR", "score": 0.9999810752768896}, {"start": 148, "end": 151, "word": "500", "entity_group": "PARAM", "score": 0.999147156189492}, {"start": 152, "end": 158, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999482955806213}, {"start": 170, "end": 185, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999410579627463}, {"start": 203, "end": 206, "word": "200", "entity_group": "PARAM", "score": 0.9978811231544595}, {"start": 207, "end": 213, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995545790673627}, {"start": 255, "end": 264, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9965370765424785}, {"start": 265, "end": 272, "word": "5 times", "entity_group": "PARAM", "score": 0.8148419273844049}, {"start": 312, "end": 327, "word": "regular seating", "entity_group": "VAR", "score": 0.9993066034865737}, {"start": 336, "end": 349, "word": "sleeper class", "entity_group": "VAR", "score": 0.9997206057226332}, {"start": 398, "end": 406, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990345231919993}, {"start": 407, "end": 409, "word": "50", "entity_group": "LIMIT", "score": 0.9997691099208385}, {"start": 429, "end": 442, "word": "sleeper class", "entity_group": "VAR", "score": 0.9999873567345556}, {"start": 521, "end": 529, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9984581301587565}, {"start": 534, "end": 540, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997188420109004}]}
{"doc_id": "-1682514824", "document": "A nut farmer has 80 acres of land on which he grows almonds and pecans. The net revenue per acre of almonds is $500 and the net revenue per acre of pecans is $600. Each acre of almonds requires 1.5 days worth of labor and $200 in maintenance costs. Each acre of pecans requires 3 days worth of labor and $250 in maintenance costs. The farmer has $10000 available to spend on maintenance costs and 275 days worth of labor available. How many acres of each should be grown in order to maximize net revenue?", "order_mapping": {"almonds": 0, "pecans": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "net revenue", "terms": {"almonds": "500", "pecans": "600"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "10000", "terms": {"almonds": "200", "pecans": "250"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "275", "terms": {"almonds": "1.5", "pecans": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of almonds\n- y: Acres of pecans\n\nObjective:\n- The farmer aims to maximize the net revenue. The net revenue per acre of almonds is $500 and the net revenue per acre of pecans is $600. Therefore, the objective function is: Maximize 500x + 600y\n\nConstraints:\n- The total maintenance cost available is $10,000, so the constraint is: 200x + 250y <= 10000.\n- The total labor available is 275 days, leading to the constraint: 1.5x + 3y <= 275.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 600y\nConstraints:\n200x + 250y <= 10000\n1.5x + 3y <= 275", "canonical": {"objective": [-500.0, -600.0], "constraints": [[200.0, 250.0, 10000.0], [1.5, 3.0, 275.0]]}, "solution": {"x": 50, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of acres of almonds grown: Almonds\n- Number of acres of pecans grown: Pecans\n\nConstraints:\n- Total acres of almonds and pecans should not exceed 80:\n  Almonds + Pecans <= 80\n- Maintenance cost for almonds and pecans should not exceed $10000:\n  200 * Almonds + 250 * Pecans <= 10000\n- Labor days for almonds and pecans should not exceed 275 days:\n  1.5 * Almonds + 3 * Pecans <= 275\n\nObjective:\n- Maximize net revenue (Net revenue per acre: $500 for almonds, $600 for pecans):\n  500 * Almonds + 600 * Pecans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlmonds = intvar(0, 80)  # Number of acres of almonds\nPecans = intvar(0, 80)  # Number of acres of pecans\n\n# Constraints\nm = Model()\n\n# Total acres should not exceed 80:\nm += Almonds + Pecans <= 80\n# Maintenance cost constraint ($200 per acre for almonds, $250 per acre for pecans, $10000 available):\nm += 200 * Almonds + 250 * Pecans <= 10000\n# Labor constraint (1.5 days per acre for almonds, 3 days per acre for pecans, 275 days available):\nm += 1.5 * Almonds + 3 * Pecans <= 275\n\n# Objective\n# Maximize net revenue ($500 per acre for almonds, $600 per acre for pecans):\nm.maximize(500 * Almonds + 600 * Pecans)\n", "entities": [{"start": 13, "end": 16, "word": "has", "entity_group": "CONST_DIR", "score": 0.9931396298113047}, {"start": 17, "end": 19, "word": "80", "entity_group": "LIMIT", "score": 0.9988936101774936}, {"start": 52, "end": 59, "word": "almonds", "entity_group": "VAR", "score": 0.9993856015154969}, {"start": 64, "end": 70, "word": "pecans", "entity_group": "VAR", "score": 0.9997206940178321}, {"start": 77, "end": 88, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9912926233193329}, {"start": 101, "end": 108, "word": "almonds", "entity_group": "VAR", "score": 0.9996589271645624}, {"start": 114, "end": 117, "word": "500", "entity_group": "PARAM", "score": 0.9995323087977561}, {"start": 126, "end": 137, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9936990890893224}, {"start": 150, "end": 156, "word": "pecans", "entity_group": "VAR", "score": 0.999675270992623}, {"start": 162, "end": 165, "word": "600", "entity_group": "PARAM", "score": 0.999603469401239}, {"start": 181, "end": 188, "word": "almonds", "entity_group": "VAR", "score": 0.9996060091609162}, {"start": 198, "end": 201, "word": "1.5", "entity_group": "PARAM", "score": 0.9996823761382169}, {"start": 228, "end": 231, "word": "200", "entity_group": "PARAM", "score": 0.9995053593423732}, {"start": 268, "end": 274, "word": "pecans", "entity_group": "VAR", "score": 0.9987553103925172}, {"start": 284, "end": 285, "word": "3", "entity_group": "PARAM", "score": 0.9996797143417885}, {"start": 312, "end": 315, "word": "250", "entity_group": "PARAM", "score": 0.9995786086150829}, {"start": 356, "end": 361, "word": "10000", "entity_group": "LIMIT", "score": 0.9987151938643944}, {"start": 362, "end": 371, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987288833026965}, {"start": 406, "end": 409, "word": "275", "entity_group": "LIMIT", "score": 0.9995056714980332}, {"start": 430, "end": 439, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992017663713633}, {"start": 493, "end": 501, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985282972915297}, {"start": 502, "end": 513, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9809817412557331}]}
{"doc_id": "-2061445103", "document": "An consumer electronics business needs to determine the level of production of its two hottest video game consoles, which are the PX7 and Silent X, ahead of the holiday season. Making one PX7 console requires 3 hours of labor and yields a $40 profit. On the other hand, one Silent X console can be produced in 7 hours and offers a greater profit of $75. Given the demand forecast, the business decides to produce at least twice as many PX7 consoles as Silent X ones. In addition, it can spend up to 48 hours a week to manufacture these consoles. Can you help the business determine the number of each console to produced each week to obtain the maximum profit?", "order_mapping": {"PX7": 0, "Silent X": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"PX7": "40", "Silent X": "75"}}, "const_declarations": [{"type": "linear", "direction": "up to", "limit": "48", "terms": {"PX7": "3", "Silent X": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "PX7", "direction": "at least", "param": "twice", "y_var": "Silent X", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of PX7 consoles produced per week\n- y: Number of Silent X consoles produced per week\n\nObjective:\n- The business aims to maximize its profit. Making one PX7 console yields a $40 profit, and one Silent X console yields a $75 profit. Therefore, the objective function is: Maximize 40x + 75y\n\nConstraints:\n- The business can spend up to 48 hours a week on production. Making one PX7 console requires 3 hours of labor and one Silent X console requires 7 hours. This leads to the constraint: 3x + 7y <= 48.\n- The business decides to produce at least twice as many PX7 consoles as Silent X ones, resulting in the constraint: x >= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 75y\nConstraints:\n3x + 7y <= 48\nx >= 2y", "canonical": {"objective": [-40.0, -75.0], "constraints": [[3.0, 7.0, 48.0], [-1.0, 2.0, 0.0]]}, "solution": {"x": 16, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of PX7 consoles produced: PX7\n- Number of Silent X consoles produced: SilentX\n\nConstraints:\n- Total labor hours for producing PX7 and Silent X should not exceed 48 hours per week:\n  3 * PX7 + 7 * SilentX <= 48\n- Produce at least twice as many PX7 consoles as Silent X ones:\n  PX7 >= 2 * SilentX\n\nObjective:\n- Maximize profit (40 dollars per PX7 console, 75 dollars per Silent X console):\n  40 * PX7 + 75 * SilentX\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPX7 = intvar(0, 999999999)  # Number of PX7 consoles produced\nSilentX = intvar(0, 999999999)  # Number of Silent X consoles produced\n\n# Constraints\nm = Model()\n\n# Total labor hours should not exceed 48 hours per week:\nm += 3 * PX7 + 7 * SilentX <= 48\n# The business decides to produce at least twice as many PX7 consoles as Silent X ones:\nm += PX7 >= 2 * SilentX\n\n# Objective\n# Maximize profit (40 dollars per PX7 console, 75 dollars per Silent X console):\nm.maximize(40 * PX7 + 75 * SilentX)\n", "entities": [{"start": 131, "end": 134, "word": "PX7", "entity_group": "VAR", "score": 0.9994848538193555}, {"start": 139, "end": 147, "word": "Silent X", "entity_group": "VAR", "score": 0.9999815876549101}, {"start": 191, "end": 194, "word": "PX7", "entity_group": "VAR", "score": 0.9991929007115659}, {"start": 212, "end": 213, "word": "3", "entity_group": "PARAM", "score": 0.9993468833053444}, {"start": 244, "end": 246, "word": "40", "entity_group": "PARAM", "score": 0.9990179499840173}, {"start": 247, "end": 253, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996644752168423}, {"start": 280, "end": 288, "word": "Silent X", "entity_group": "VAR", "score": 0.9999968460376134}, {"start": 316, "end": 317, "word": "7", "entity_group": "PARAM", "score": 0.9996499548279244}, {"start": 345, "end": 351, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.995060305127793}, {"start": 357, "end": 359, "word": "75", "entity_group": "PARAM", "score": 0.999645832192331}, {"start": 422, "end": 430, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9971534235351451}, {"start": 431, "end": 436, "word": "twice", "entity_group": "PARAM", "score": 0.9945342948995708}, {"start": 445, "end": 448, "word": "PX7", "entity_group": "VAR", "score": 0.9997858167996908}, {"start": 461, "end": 469, "word": "Silent X", "entity_group": "VAR", "score": 0.9999949098687194}, {"start": 504, "end": 509, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9988658827636849}, {"start": 510, "end": 512, "word": "48", "entity_group": "LIMIT", "score": 0.9995316981955584}, {"start": 657, "end": 664, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9955256179553534}, {"start": 665, "end": 671, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999409135073682}]}
{"doc_id": "252364506", "document": "Lily's dog requires his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 20 units of calcium, 30 units of vitamin mix, and 50 units of meat. A local brand costs $30 per bag and contains 5 units of calcium, 8 units of vitamin mix, and 20 units of meat. A specialty health brand costs $50 per bag and contains 15 units of calcium, 20 units of vitamin mix, and 10 units of meat. How many bags of each brand should Lily mix in order to minimize cost while also meeting the taste and health requirements.", "order_mapping": {"local brand": 0, "specialty health brand": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"local brand": "30", "specialty health brand": "50"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "20", "terms": {"local brand": "5", "specialty health brand": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "30", "terms": {"local brand": "8", "specialty health brand": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"local brand": "20", "specialty health brand": "10"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of local brand\n- y: Number of bags of specialty health brand\n\nObjective:\n- Lily wants to minimize the cost while meeting the taste and health requirements. The local brand costs $30 per bag and the specialty health brand costs $50 per bag. Therefore, the objective function is: Minimize 30x + 50y\n\nConstraints:\n- The mix needs to have a minimum of 20 units of calcium, 30 units of vitamin mix, and 50 units of meat. The local brand contains 5 units of calcium, 8 units of vitamin mix, and 20 units of meat per bag, while the specialty health brand contains 15 units of calcium, 20 units of vitamin mix, and 10 units of meat per bag. These lead to the following constraints:\n    - 5x + 15y >= 20 (calcium constraint)\n    - 8x + 20y >= 30 (vitamin mix constraint)\n    - 20x + 10y >= 50 (meat constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 30x + 50y\nConstraints:\n5x + 15y >= 20\n8x + 20y >= 30\n20x + 10y >= 50", "canonical": {"objective": [30.0, 50.0], "constraints": [[-5.0, -15.0, -20.0], [-8.0, -20.0, -30.0], [-20.0, -10.0, -50.0]]}, "solution": {"x": 2, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of local brand bags: LocalBrand\n- Number of specialty health brand bags: SpecialtyHealthBrand\n\nConstraints:\n- Minimum of 20 units of calcium required:\n  5 * LocalBrand + 15 * SpecialtyHealthBrand >= 20\n- Minimum of 30 units of vitamin mix required:\n  8 * LocalBrand + 20 * SpecialtyHealthBrand >= 30\n- Minimum of 50 units of meat required:\n  20 * LocalBrand + 10 * SpecialtyHealthBrand >= 50\n\nObjective:\n- Minimize cost (30 dollars per local brand bag, 50 dollars per specialty health brand bag):\n  30 * LocalBrand + 50 * SpecialtyHealthBrand\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLocalBrand = intvar(0, 999999999)  # Number of local brand bags\nSpecialtyHealthBrand = intvar(0, 999999999)  # Number of specialty health brand bags\n\n# Constraints\nm = Model()\n\n# Minimum of 20 units of calcium:\nm += 5 * LocalBrand + 15 * SpecialtyHealthBrand >= 20\n# Minimum of 30 units of vitamin mix:\nm += 8 * LocalBrand + 20 * SpecialtyHealthBrand >= 30\n# Minimum of 50 units of meat:\nm += 20 * LocalBrand + 10 * SpecialtyHealthBrand >= 50\n\n# Objective\n# Minimize cost (30 dollars per local brand bag, 50 dollars per specialty health brand bag):\nm.minimize(30 * LocalBrand + 50 * SpecialtyHealthBrand)\n", "entities": [{"start": 132, "end": 139, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9985124599906849}, {"start": 143, "end": 145, "word": "20", "entity_group": "LIMIT", "score": 0.9997694675160544}, {"start": 165, "end": 167, "word": "30", "entity_group": "LIMIT", "score": 0.9997666679159923}, {"start": 195, "end": 197, "word": "50", "entity_group": "LIMIT", "score": 0.9995601563656188}, {"start": 216, "end": 227, "word": "local brand", "entity_group": "VAR", "score": 0.9999109701941633}, {"start": 228, "end": 233, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9984233668955723}, {"start": 236, "end": 238, "word": "30", "entity_group": "PARAM", "score": 0.9996292977756597}, {"start": 260, "end": 261, "word": "5", "entity_group": "PARAM", "score": 0.9997042759375208}, {"start": 281, "end": 282, "word": "8", "entity_group": "PARAM", "score": 0.9997409038733552}, {"start": 310, "end": 312, "word": "20", "entity_group": "PARAM", "score": 0.9996297356425536}, {"start": 331, "end": 353, "word": "specialty health brand", "entity_group": "VAR", "score": 0.9986860526062947}, {"start": 354, "end": 359, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992675561593899}, {"start": 362, "end": 364, "word": "50", "entity_group": "PARAM", "score": 0.9995319457931177}, {"start": 386, "end": 388, "word": "15", "entity_group": "PARAM", "score": 0.9997042771793069}, {"start": 408, "end": 410, "word": "20", "entity_group": "PARAM", "score": 0.9997409199953333}, {"start": 438, "end": 440, "word": "10", "entity_group": "PARAM", "score": 0.9995932182871511}, {"start": 513, "end": 521, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9733926241278871}, {"start": 522, "end": 526, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9940298876376397}]}
{"doc_id": "-1984936485", "document": "A soup store sell two soups: a crab soup and a lobster soup. The soups are made using water, crab meat, and lobster meat. A serving of crab soup requires 7 units of water and 8 units of crab meat. A serving of lobster soup requires 10 units of water and 5 units of lobster meat. There is 80 units of water available, 65 units of crab meat available, and 55 units of lobster meat available. The profit per serving of crab soup is $3 and the profit per serving of lobster soup is $5. Formulate as a LP to maximize profit.", "order_mapping": {"crab soup": 0, "lobster soup": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"crab soup": "3", "lobster soup": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "80", "terms": {"crab soup": "7", "lobster soup": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "65", "terms": {"crab soup": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "55", "terms": {"lobster soup": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of crab soup\n- y: Number of servings of lobster soup\n\nObjective:\n- The store aims to maximize its profit. The profit per serving of crab soup is $3 and the profit per serving of lobster soup is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The availability of resources limits the production of soups. The constraints are:\n    - 7x + 10y <= 80 (water constraint)\n    - 8x <= 65 (crab meat constraint)\n    - 5y <= 55 (lobster meat constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n7x + 10y <= 80\n8x <= 65\n5y <= 55", "canonical": {"objective": [-3.0, -5.0], "constraints": [[7.0, 10.0, 80.0], [8.0, 0.0, 65.0], [0.0, 5.0, 55.0]]}, "solution": {"x": 0, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of servings of crab soup: CrabSoup\n- Number of servings of lobster soup: LobsterSoup\n\nConstraints:\n- Water usage for both soups should not exceed 80 units:\n  7 * CrabSoup + 10 * LobsterSoup <= 80\n- Crab meat usage should not exceed 65 units:\n  8 * CrabSoup <= 65\n- Lobster meat usage should not exceed 55 units:\n  5 * LobsterSoup <= 55\n\nObjective:\n- Maximize profit (3 dollars per serving of crab soup, 5 dollars per serving of lobster soup):\n  3 * CrabSoup + 5 * LobsterSoup\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCrabSoup = intvar(0, 999999999)  # Number of servings of crab soup\nLobsterSoup = intvar(0, 999999999)  # Number of servings of lobster soup\n\n# Constraints\nm = Model()\n\n# Water constraint: 7 units per serving of crab soup and 10 units per serving of lobster soup, 80 units available\nm += 7 * CrabSoup + 10 * LobsterSoup <= 80\n# Crab meat constraint: 8 units per serving of crab soup, 65 units available\nm += 8 * CrabSoup <= 65\n# Lobster meat constraint: 5 units per serving of lobster soup, 55 units available\nm += 5 * LobsterSoup <= 55\n\n# Objective\n# Maximize profit: $3 per serving of crab soup and $5 per serving of lobster soup\nm.maximize(3 * CrabSoup + 5 * LobsterSoup)\n", "entities": [{"start": 32, "end": 41, "word": "crab soup", "entity_group": "VAR", "score": 0.9999677749499667}, {"start": 48, "end": 60, "word": "lobster soup", "entity_group": "VAR", "score": 0.9999636587593326}, {"start": 140, "end": 149, "word": "crab soup", "entity_group": "VAR", "score": 0.9999779843427639}, {"start": 159, "end": 160, "word": "7", "entity_group": "PARAM", "score": 0.9996107400864067}, {"start": 180, "end": 181, "word": "8", "entity_group": "PARAM", "score": 0.9997294148902608}, {"start": 216, "end": 228, "word": "lobster soup", "entity_group": "VAR", "score": 0.9999794725433332}, {"start": 238, "end": 240, "word": "10", "entity_group": "PARAM", "score": 0.9996107629033268}, {"start": 260, "end": 261, "word": "5", "entity_group": "PARAM", "score": 0.9997409633371014}, {"start": 295, "end": 297, "word": "80", "entity_group": "LIMIT", "score": 0.9997090976451222}, {"start": 313, "end": 322, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989055995432378}, {"start": 325, "end": 327, "word": "65", "entity_group": "LIMIT", "score": 0.9997369141994036}, {"start": 347, "end": 356, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988474552697418}, {"start": 363, "end": 365, "word": "55", "entity_group": "LIMIT", "score": 0.9996903264444432}, {"start": 388, "end": 397, "word": "available", "entity_group": "CONST_DIR", "score": 0.9997041721343508}, {"start": 404, "end": 410, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998062209384129}, {"start": 426, "end": 435, "word": "crab soup", "entity_group": "VAR", "score": 0.9999331081080339}, {"start": 441, "end": 442, "word": "3", "entity_group": "PARAM", "score": 0.9996361272860683}, {"start": 451, "end": 457, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998864984740953}, {"start": 473, "end": 485, "word": "lobster soup", "entity_group": "VAR", "score": 0.9998050043083522}, {"start": 491, "end": 492, "word": "5", "entity_group": "PARAM", "score": 0.999704848916871}, {"start": 516, "end": 524, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9981300478232494}, {"start": 525, "end": 531, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998059420200918}]}
{"doc_id": "-1206801469", "document": "Young Bucks needs to allocate resources at its two plants Alpha and Beta to produce two products: cement and stucco. To meet customer demands, at least 100 tons of cement and 80 tons of stucco must be produced daily. Running the plant Alpha costs $40 per hour and yields 3 tons of cement and 2 ton of stucco. Running the plant Beta for an hour costs $100 and produces 5 tons of cement and 4 tons of stucco. Determine the daily production plan at its plants that will minimize the cost of meeting the demands.", "order_mapping": {"Alpha": 0, "Beta": 1, "plant Alpha": 0, "plant Beta": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"plant Beta": "100", "plant Alpha": "40"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"plant Alpha": "3", "plant Beta": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"plant Alpha": "2", "plant Beta": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours of operation for plant Alpha\n- y: Hours of operation for plant Beta\n\nObjective:\n- The objective is to minimize the cost of meeting the demands. The cost of running plant Alpha for an hour is $40 and for plant Beta is $100. Therefore, the objective function is: Minimize 40x + 100y\n\nConstraints:\n- At least 100 tons of cement must be produced daily, which translates to: 3x + 5y >= 100\n- At least 80 tons of stucco must be produced daily, leading to the constraint: 2x + 4y >= 80\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 40x + 100y\nConstraints:\n3x + 5y >= 100\n2x + 4y >= 80", "canonical": {"objective": [40.0, 100.0], "constraints": [[-3.0, -5.0, -100.0], [-2.0, -4.0, -80.0]]}, "solution": {"x": 40, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Hours to run plant Alpha: HoursAlpha\n- Hours to run plant Beta: HoursBeta\n\nConstraints:\n- To meet customer demands, at least 100 tons of cement must be produced daily:\n  3 * HoursAlpha + 5 * HoursBeta >= 100\n- At least 80 tons of stucco must be produced daily:\n  2 * HoursAlpha + 4 * HoursBeta >= 80\n\nObjective:\n- Minimize the cost of meeting the demands (Running the plant Alpha costs $40 per hour, plant Beta costs $100 per hour):\n  40 * HoursAlpha + 100 * HoursBeta\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHoursAlpha = intvar(0, 999999999)  # Hours to run plant Alpha\nHoursBeta = intvar(0, 999999999)  # Hours to run plant Beta\n\n# Constraints\nm = Model()\n\n# At least 100 tons of cement must be produced daily:\nm += 3 * HoursAlpha + 5 * HoursBeta >= 100\n# At least 80 tons of stucco must be produced daily:\nm += 2 * HoursAlpha + 4 * HoursBeta >= 80\n\n# Objective\n# Minimize the cost of meeting the demands (Running the plant Alpha costs $40 per hour, plant Beta costs $100 per hour):\nm.minimize(40 * HoursAlpha + 100 * HoursBeta)\n", "entities": [{"start": 58, "end": 63, "word": "Alpha", "entity_group": "VAR", "score": 0.9995627705736071}, {"start": 68, "end": 72, "word": "Beta", "entity_group": "VAR", "score": 0.9995634873575974}, {"start": 146, "end": 154, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991205832269382}, {"start": 155, "end": 158, "word": "100", "entity_group": "LIMIT", "score": 0.9997532153047681}, {"start": 178, "end": 180, "word": "80", "entity_group": "LIMIT", "score": 0.9997606013335966}, {"start": 233, "end": 244, "word": "plant Alpha", "entity_group": "VAR", "score": 0.9999531722735534}, {"start": 245, "end": 250, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999421014578348}, {"start": 253, "end": 255, "word": "40", "entity_group": "PARAM", "score": 0.9997407193677019}, {"start": 276, "end": 277, "word": "3", "entity_group": "PARAM", "score": 0.9997369273883732}, {"start": 297, "end": 298, "word": "2", "entity_group": "PARAM", "score": 0.9995503221078307}, {"start": 327, "end": 337, "word": "plant Beta", "entity_group": "VAR", "score": 0.9999268967300936}, {"start": 350, "end": 355, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991301907278236}, {"start": 358, "end": 361, "word": "100", "entity_group": "PARAM", "score": 0.9991788567452711}, {"start": 375, "end": 376, "word": "5", "entity_group": "PARAM", "score": 0.9997503534378425}, {"start": 396, "end": 397, "word": "4", "entity_group": "PARAM", "score": 0.9996795348022417}, {"start": 475, "end": 483, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9936337876158876}, {"start": 488, "end": 492, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9949552742668126}]}
{"doc_id": "-625466875", "document": "A woodshop makes dining tables and desks. Each dining table requires 2 hours of woodworking, 3 boxes of nails, and 1 unit of varnish. Each desk requires 3 hours of woodworking, 4 boxes of nails, and 2 units of varnish. There are 100 hours of woodworking available, 75 boxes of nails available, and 80 units of varnish available. If each dining table yields a profit of $350 and each desk yields a profit of $400, how many of each should be made to maximize profit?", "order_mapping": {"dining tables": 0, "desks": 1, "dining table": 0, "desk": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"desk": "400", "dining table": "350"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"dining table": "2", "desk": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "75", "terms": {"dining table": "3", "desk": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "80", "terms": {"dining table": "1", "desk": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of dining tables to be made\n- y: Number of desks to be made\n\nObjective:\n- The woodshop aims to maximize its profit. Each dining table yields a profit of $350 and each desk yields a profit of $400. Therefore, the objective function is: Maximize 350x + 400y\n\nConstraints:\n- Each dining table requires 2 hours of woodworking and each desk requires 3 hours of woodworking. The total available woodworking hours is 100, leading to the constraint: 2x + 3y <= 100.\n- Each dining table requires 3 boxes of nails and each desk requires 4 boxes of nails. The total available boxes of nails is 75, leading to the constraint: 3x + 4y <= 75.\n- Each dining table requires 1 unit of varnish and each desk requires 2 units of varnish. The total available units of varnish is 80, leading to the constraint: x + 2y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 350x + 400y\nConstraints:\n2x + 3y <= 100\n3x + 4y <= 75\nx + 2y <= 80", "canonical": {"objective": [-350.0, -400.0], "constraints": [[2.0, 3.0, 100.0], [3.0, 4.0, 75.0], [1.0, 2.0, 80.0]]}, "solution": {"x": 25, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of dining tables made: DiningTables\n- Number of desks made: Desks\n\nConstraints:\n- Woodworking hours constraint (100 hours available):\n  2 * DiningTables + 3 * Desks <= 100\n- Boxes of nails constraint (75 boxes available):\n  3 * DiningTables + 4 * Desks <= 75\n- Units of varnish constraint (80 units available):\n  1 * DiningTables + 2 * Desks <= 80\n\nObjective:\n- Maximize profit ($350 per dining table, $400 per desk):\n  350 * DiningTables + 400 * Desks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDiningTables = intvar(0, 999999999)  # Number of dining tables made\nDesks = intvar(0, 999999999)  # Number of desks made\n\n# Constraints\nm = Model()\n\n# Woodworking hours constraint (100 hours available):\nm += 2 * DiningTables + 3 * Desks <= 100\n# Boxes of nails constraint (75 boxes available):\nm += 3 * DiningTables + 4 * Desks <= 75\n# Units of varnish constraint (80 units available):\nm += 1 * DiningTables + 2 * Desks <= 80\n\n# Objective\n# Maximize profit ($350 per dining table, $400 per desk):\nm.maximize(350 * DiningTables + 400 * Desks)\n", "entities": [{"start": 17, "end": 30, "word": "dining tables", "entity_group": "VAR", "score": 0.9999784147811813}, {"start": 35, "end": 40, "word": "desks", "entity_group": "VAR", "score": 0.9997357217169461}, {"start": 48, "end": 60, "word": "dining table", "entity_group": "VAR", "score": 0.9999829955043202}, {"start": 70, "end": 71, "word": "2", "entity_group": "PARAM", "score": 0.9995294505870675}, {"start": 95, "end": 96, "word": "3", "entity_group": "PARAM", "score": 0.999734699303643}, {"start": 118, "end": 119, "word": "1", "entity_group": "PARAM", "score": 0.9993226165651297}, {"start": 143, "end": 147, "word": "desk", "entity_group": "VAR", "score": 0.9994311211427522}, {"start": 157, "end": 158, "word": "3", "entity_group": "PARAM", "score": 0.9996372240773089}, {"start": 182, "end": 183, "word": "4", "entity_group": "PARAM", "score": 0.9997347648904842}, {"start": 205, "end": 206, "word": "2", "entity_group": "PARAM", "score": 0.9995762172942202}, {"start": 236, "end": 239, "word": "100", "entity_group": "LIMIT", "score": 0.9997230345104622}, {"start": 261, "end": 270, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992013823958104}, {"start": 273, "end": 275, "word": "75", "entity_group": "LIMIT", "score": 0.9996745637976089}, {"start": 291, "end": 300, "word": "available", "entity_group": "CONST_DIR", "score": 0.9984998026396996}, {"start": 307, "end": 309, "word": "80", "entity_group": "LIMIT", "score": 0.9996286924848093}, {"start": 327, "end": 336, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994489300660878}, {"start": 347, "end": 359, "word": "dining table", "entity_group": "VAR", "score": 0.9999914005504362}, {"start": 369, "end": 375, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999132435502419}, {"start": 381, "end": 384, "word": "350", "entity_group": "PARAM", "score": 0.999714908957948}, {"start": 394, "end": 398, "word": "desk", "entity_group": "VAR", "score": 0.9998316449502627}, {"start": 408, "end": 414, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997894242976464}, {"start": 420, "end": 423, "word": "400", "entity_group": "PARAM", "score": 0.999492452004933}, {"start": 461, "end": 469, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995748698003112}, {"start": 470, "end": 476, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998307256802953}]}
{"doc_id": "1229481587", "document": "A film agency wants to promote their new movie. They want to maximize the exposure with a budget of at most $500000. To do so, the agency needs to decide how much of the budget to spend on each of its two most effective media: (1) social media adverts and (2) magazine covers. Each social media advert costs $3000; each magazine cover costs $6000. The agency director knows from experience that it is important to use both media. The movie exposure is 100000 viewers for each social media posting and 54000 readers for each magazine cover. He makes a decision that at least 10 but at most 20 social media posts be ordered, and that at least 24 magazine covers should be contracted. How many times should each of the two media be used to obtain maximum exposure while staying within the budget?", "order_mapping": {"social media": 0, "magazine covers": 1, "magazine cover": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "exposure", "terms": {"social media": "100000", "magazine cover": "54000"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500000", "terms": {"social media": "3000", "magazine cover": "6000"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "social media", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "20", "var": "social media", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "24", "var": "magazine covers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of social media adverts\n- y: Number of magazine covers\n\nObjective:\n- The film agency aims to maximize the exposure. Each social media advert reaches 100,000 viewers and each magazine cover reaches 54,000 readers. Therefore, the objective function is: Maximize 100000x + 54000y\n\nConstraints:\n- The budget for promotion is at most $500,000, leading to the constraint: 3000x + 6000y <= 500000.\n- The agency should order at least 10 but at most 20 social media posts, resulting in the constraints: 10 <= x <= 20.\n- At least 24 magazine covers should be contracted, leading to the constraint: y >= 24.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100000x + 54000y\nConstraints:\n3000x + 6000y <= 500000\n10 <= x <= 20\ny >= 24", "canonical": {"objective": [-100000.0, -54000.0], "constraints": [[3000.0, 6000.0, 500000.0], [0.0, -1.0, -24.0], [-1.0, 0.0, -10.0], [1.0, 0.0, 20.0]]}, "solution": {"x": 20, "y": 73}, "pseudo_model": "\nDecision Variables:\n- Number of social media adverts: SocialMedia\n- Number of magazine covers: MagazineCovers\n\nConstraints:\n- Total cost should not exceed $500000, with each social media advert costing $3000 and each magazine cover costing $6000:\n  3000 * SocialMedia + 6000 * MagazineCovers <= 500000\n- Number of social media adverts should be at least 10 but at most 20:\n  10 <= SocialMedia <= 20\n- Number of magazine covers should be at least 24:\n  MagazineCovers >= 24\n\nObjective:\n- Maximize exposure, with 100000 viewers per social media posting and 54000 readers per magazine cover:\n  Maximize(100000 * SocialMedia + 54000 * MagazineCovers)\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSocialMedia = intvar(0, 999999999)  # Number of social media adverts\nMagazineCovers = intvar(0, 999999999)  # Number of magazine covers\n\n# Constraints\nm = Model()\n\n# Budget constraint: $3000 per social media advert and $6000 per magazine cover, total budget at most $500000\nm += 3000 * SocialMedia + 6000 * MagazineCovers <= 500000\n# At least 10 but at most 20 social media posts\nm += SocialMedia >= 10\nm += SocialMedia <= 20\n# At least 24 magazine covers\nm += MagazineCovers >= 24\n\n# Objective\n# Maximize exposure: 100000 viewers per social media posting and 54000 readers per magazine cover\nm.maximize(100000 * SocialMedia + 54000 * MagazineCovers)\n", "entities": [{"start": 75, "end": 83, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9871465066045074}, {"start": 101, "end": 108, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9938820094107402}, {"start": 111, "end": 117, "word": "500000", "entity_group": "LIMIT", "score": 0.99822622496646}, {"start": 238, "end": 250, "word": "social media", "entity_group": "VAR", "score": 0.9999907351604497}, {"start": 269, "end": 284, "word": "magazine covers", "entity_group": "VAR", "score": 0.9999759032670948}, {"start": 292, "end": 304, "word": "social media", "entity_group": "VAR", "score": 0.9998407320478105}, {"start": 320, "end": 324, "word": "3000", "entity_group": "PARAM", "score": 0.999733213078578}, {"start": 332, "end": 346, "word": "magazine cover", "entity_group": "VAR", "score": 0.9999137794701827}, {"start": 355, "end": 359, "word": "6000", "entity_group": "PARAM", "score": 0.9994789625941394}, {"start": 455, "end": 463, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9992096003311135}, {"start": 467, "end": 473, "word": "100000", "entity_group": "PARAM", "score": 0.9996180677885594}, {"start": 491, "end": 503, "word": "social media", "entity_group": "VAR", "score": 0.9999878104255603}, {"start": 516, "end": 521, "word": "54000", "entity_group": "PARAM", "score": 0.9997132869436957}, {"start": 539, "end": 553, "word": "magazine cover", "entity_group": "VAR", "score": 0.9998974442298769}, {"start": 581, "end": 589, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989399731652753}, {"start": 590, "end": 592, "word": "10", "entity_group": "LIMIT", "score": 0.9995822654098745}, {"start": 597, "end": 604, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990493282389485}, {"start": 605, "end": 607, "word": "20", "entity_group": "LIMIT", "score": 0.9994659557281826}, {"start": 608, "end": 620, "word": "social media", "entity_group": "VAR", "score": 0.9999401925590218}, {"start": 649, "end": 657, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988008877260501}, {"start": 658, "end": 660, "word": "24", "entity_group": "LIMIT", "score": 0.9995725767878807}, {"start": 661, "end": 676, "word": "magazine covers", "entity_group": "VAR", "score": 0.9997841418794029}, {"start": 762, "end": 769, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9829810475229663}, {"start": 770, "end": 778, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9994960686664272}]}
{"doc_id": "1101417478", "document": "A patient with weak bones has been told to drink milk and eat cheese in order to meet his calcium and vitamin D requirements. In one serving of milk, there are 10 grams of calcium and 5 grams of Vitamin D. In one serving of cheese, there are 8 grams of calcium and 6 grams of vitamin D. The patient must get at least 100 grams of calcium and 80 grams of Vitamin D per day. If a serving of milk costs $2 and a serving of cheese costs $4, how many servings of each should the patient eat to minimize cost?", "order_mapping": {"milk": 0, "cheese": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"milk": "2", "cheese": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"milk": "10", "cheese": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"milk": "5", "cheese": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Servings of milk\n- y: Servings of cheese\n\nObjective:\n- The patient aims to minimize the cost. Given that a serving of milk costs $2 and a serving of cheese costs $4, the objective function is: Minimize 2x + 4y\n\nConstraints:\n- The patient must get at least 100 grams of calcium per day, which translates to: 10x + 8y >= 100.\n- The patient must get at least 80 grams of Vitamin D per day, leading to the constraint: 5x + 6y >= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 4y\nConstraints:\n10x + 8y >= 100\n5x + 6y >= 80", "canonical": {"objective": [2.0, 4.0], "constraints": [[-10.0, -8.0, -100.0], [-5.0, -6.0, -80.0]]}, "solution": {"x": 16, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of servings of milk: Milk\n- Number of servings of cheese: Cheese\n\nConstraints:\n- To meet the calcium requirement (at least 100 grams per day):\n  10 * Milk + 8 * Cheese >= 100\n- To meet the Vitamin D requirement (at least 80 grams per day):\n  5 * Milk + 6 * Cheese >= 80\n\nObjective:\n- Minimize cost (2 dollars per serving of milk, 4 dollars per serving of cheese):\n  2 * Milk + 4 * Cheese\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMilk = intvar(0, 999999999)  # Number of servings of milk\nCheese = intvar(0, 999999999)  # Number of servings of cheese\n\n# Constraints\nm = Model()\n\n# The patient must get at least 100 grams of calcium per day:\nm += 10 * Milk + 8 * Cheese >= 100\n# The patient must get at least 80 grams of Vitamin D per day:\nm += 5 * Milk + 6 * Cheese >= 80\n\n# Objective\n# Minimize cost (2 dollars per serving of milk, 4 dollars per serving of cheese):\nm.minimize(2 * Milk + 4 * Cheese)\n", "entities": [{"start": 49, "end": 53, "word": "milk", "entity_group": "VAR", "score": 0.9995167139473391}, {"start": 62, "end": 68, "word": "cheese", "entity_group": "VAR", "score": 0.9997430346384659}, {"start": 145, "end": 149, "word": "milk", "entity_group": "VAR", "score": 0.9976379971712777}, {"start": 162, "end": 164, "word": "10", "entity_group": "PARAM", "score": 0.9997459113318831}, {"start": 186, "end": 187, "word": "5", "entity_group": "PARAM", "score": 0.999740379703559}, {"start": 226, "end": 232, "word": "cheese", "entity_group": "VAR", "score": 0.9961533278648375}, {"start": 245, "end": 246, "word": "8", "entity_group": "PARAM", "score": 0.9997459126707884}, {"start": 268, "end": 269, "word": "6", "entity_group": "PARAM", "score": 0.9996933683918833}, {"start": 311, "end": 319, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989142492900944}, {"start": 320, "end": 323, "word": "100", "entity_group": "LIMIT", "score": 0.9997469257577494}, {"start": 345, "end": 347, "word": "80", "entity_group": "LIMIT", "score": 0.9997376693693741}, {"start": 393, "end": 397, "word": "milk", "entity_group": "VAR", "score": 0.999617184872354}, {"start": 398, "end": 403, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9939281113272587}, {"start": 406, "end": 407, "word": "2", "entity_group": "PARAM", "score": 0.9992803162998863}, {"start": 425, "end": 431, "word": "cheese", "entity_group": "VAR", "score": 0.9992325865004501}, {"start": 432, "end": 437, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9965316559322422}, {"start": 440, "end": 441, "word": "4", "entity_group": "PARAM", "score": 0.9995748291751265}, {"start": 496, "end": 504, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986791604739925}, {"start": 505, "end": 509, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987583304818873}]}
{"doc_id": "1040469781", "document": "A tech company makes two type of electronics: phones and laptops. Demand is high but production is limited by silicon chip availability, engineering time, and assembly time. Each phone requires 2 silicon chips, 5 hours of engineering time, and 3 hours of assembly time. Each laptop requires 4 silicon chips, 6 hours of engineering time, and 1 hour of assembly time. The company can buy 200 silicon chips per week, and has available 250 hours of engineering and 300 hours of assembly. The profit per phone is $300 and the profit per laptop is $500. Formulate a LP to maximize the company's profit if they want to produce at least 30 units of phones and at least 30 units of laptops each week.", "order_mapping": {"phones": 0, "laptops": 1, "phone": 0, "laptop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"phone": "300", "laptop": "500"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "250", "terms": {"phone": "5", "laptop": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"phone": "3", "laptop": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "phones", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "laptops", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of phones produced per week\n- y: Number of laptops produced per week\n\nObjective:\n- The company aims to maximize its profit. The profit per phone is $300 and the profit per laptop is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- The availability of silicon chips limits production. Each phone requires 2 silicon chips and each laptop requires 4 silicon chips. The company can buy 200 silicon chips per week, leading to the constraint: 2x + 4y <= 200.\n- The engineering time available is 250 hours per week. Each phone requires 5 hours of engineering time and each laptop requires 6 hours, resulting in the constraint: 5x + 6y <= 250.\n- The assembly time available is 300 hours per week. Each phone requires 3 hours of assembly time and each laptop requires 1 hour, leading to the constraint: 3x + y <= 300.\n- The company wants to produce at least 30 units of phones and at least 30 units of laptops each week, resulting in the constraints: x >= 30 and y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\n2x + 4y <= 200\n5x + 6y <= 250\n3x + y <= 300\nx >= 30\ny >= 30", "canonical": {"objective": [-300.0, -500.0], "constraints": [[2.0, 4.0, 200.0], [5.0, 6.0, 250.0], [3.0, 1.0, 300.0], [-1.0, 0.0, -30.0], [0.0, -1.0, -30.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of phones produced per week: Phones\n- Number of laptops produced per week: Laptops\n\nConstraints:\n- Silicon chips are limited to 200 per week (2 per phone, 4 per laptop):\n  2 * Phones + 4 * Laptops <= 200\n- Engineering time is limited to 250 hours per week (5 hours per phone, 6 hours per laptop):\n  5 * Phones + 6 * Laptops <= 250\n- Assembly time is limited to 300 hours per week (3 hours per phone, 1 hour per laptop):\n  3 * Phones + 1 * Laptops <= 300\n- At least 30 phones must be produced per week:\n  Phones >= 30\n- At least 30 laptops must be produced per week:\n  Laptops >= 30\n\nObjective:\n- Maximize profit ($300 per phone, $500 per laptop):\n  300 * Phones + 500 * Laptops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPhones = intvar(0, 999999999)  # Number of phones produced per week\nLaptops = intvar(0, 999999999)  # Number of laptops produced per week\n\n# Constraints\nm = Model()\n\n# Silicon chip constraint (200 chips available, 2 per phone, 4 per laptop):\nm += 2 * Phones + 4 * Laptops <= 200\n# Engineering time constraint (250 hours available, 5 hours per phone, 6 hours per laptop):\nm += 5 * Phones + 6 * Laptops <= 250\n# Assembly time constraint (300 hours available, 3 hours per phone, 1 hour per laptop):\nm += 3 * Phones + 1 * Laptops <= 300\n# At least 30 units of phones must be produced:\nm += Phones >= 30\n# At least 30 units of laptops must be produced:\nm += Laptops >= 30\n\n# Objective\n# Maximize profit ($300 per phone, $500 per laptop):\nm.maximize(300 * Phones + 500 * Laptops)\n", "entities": [{"start": 47, "end": 53, "word": "phones", "entity_group": "VAR", "score": 0.9996008188282244}, {"start": 58, "end": 65, "word": "laptops", "entity_group": "VAR", "score": 0.9997305561673692}, {"start": 184, "end": 189, "word": "phone", "entity_group": "VAR", "score": 0.9997789900197143}, {"start": 199, "end": 200, "word": "2", "entity_group": "PARAM", "score": 0.9939814254436781}, {"start": 217, "end": 218, "word": "5", "entity_group": "PARAM", "score": 0.9994900758859452}, {"start": 251, "end": 252, "word": "3", "entity_group": "PARAM", "score": 0.9996807639467236}, {"start": 283, "end": 289, "word": "laptop", "entity_group": "VAR", "score": 0.9997948754674932}, {"start": 299, "end": 300, "word": "4", "entity_group": "PARAM", "score": 0.9953958392160487}, {"start": 317, "end": 318, "word": "6", "entity_group": "PARAM", "score": 0.9993515573012043}, {"start": 351, "end": 352, "word": "1", "entity_group": "PARAM", "score": 0.999523322752261}, {"start": 389, "end": 396, "word": "can buy", "entity_group": "CONST_DIR", "score": 0.9892554687712444}, {"start": 397, "end": 400, "word": "200", "entity_group": "LIMIT", "score": 0.9997214673379822}, {"start": 434, "end": 443, "word": "available", "entity_group": "CONST_DIR", "score": 0.9971292229126106}, {"start": 444, "end": 447, "word": "250", "entity_group": "LIMIT", "score": 0.9991157004662541}, {"start": 473, "end": 476, "word": "300", "entity_group": "LIMIT", "score": 0.9996125998066956}, {"start": 501, "end": 507, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997295547669385}, {"start": 512, "end": 517, "word": "phone", "entity_group": "VAR", "score": 0.9992468005266703}, {"start": 523, "end": 526, "word": "300", "entity_group": "PARAM", "score": 0.9991332338423996}, {"start": 535, "end": 541, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999865560074995}, {"start": 546, "end": 552, "word": "laptop", "entity_group": "VAR", "score": 0.998631774160792}, {"start": 558, "end": 561, "word": "500", "entity_group": "PARAM", "score": 0.9996164808272567}, {"start": 582, "end": 590, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999364843656101}, {"start": 606, "end": 612, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995210578587838}, {"start": 637, "end": 645, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990527302303445}, {"start": 646, "end": 648, "word": "30", "entity_group": "LIMIT", "score": 0.9996761036932356}, {"start": 658, "end": 664, "word": "phones", "entity_group": "VAR", "score": 0.9990523946014043}, {"start": 669, "end": 677, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992585279698852}, {"start": 678, "end": 680, "word": "30", "entity_group": "LIMIT", "score": 0.999775086202179}, {"start": 690, "end": 697, "word": "laptops", "entity_group": "VAR", "score": 0.9995465645487915}]}
{"doc_id": "-1676008055", "document": "John and William run a woodshop where they make chairs and nightstands. Each chair takes 2 hours of John's time and 4 hours of William's time. Each nightstand takes 5 hours of John's time and 4 hours of William's time. In a week, John has 30 hours available and William has 40 hours available. If they get $300 profit per chair sold and $500 profit per nightstand sold, how many of each should they make to maximize profits?", "order_mapping": {"chairs": 0, "nightstands": 1, "chair": 0, "nightstand": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"nightstand": "500", "chair": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "30", "terms": {"chair": "2", "nightstand": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "40", "terms": {"chair": "4", "nightstand": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chairs to be made\n- y: Number of nightstands to be made\n\nObjective:\n- The woodshop aims to maximize its profits. The profit per chair sold is $300 and the profit per nightstand sold is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- John has 30 hours available and each chair takes 2 hours, while each nightstand takes 5 hours. This leads to the constraint: 2x + 5y <= 30.\n- William has 40 hours available and each chair takes 4 hours, while each nightstand takes 4 hours. This results in the constraint: 4x + 4y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\n2x + 5y <= 30\n4x + 4y <= 40", "canonical": {"objective": [-300.0, -500.0], "constraints": [[2.0, 5.0, 30.0], [4.0, 4.0, 40.0]]}, "solution": {"x": 7, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of chairs made: Chairs\n- Number of nightstands made: Nightstands\n\nConstraints:\n- John's time constraint (30 hours available):\n  2 * Chairs + 5 * Nightstands <= 30\n- William's time constraint (40 hours available):\n  4 * Chairs + 4 * Nightstands <= 40\n\nObjective:\n- Maximize profits ($300 per chair, $500 per nightstand):\n  300 * Chairs + 500 * Nightstands\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChairs = intvar(0, 999999999)  # Number of chairs made\nNightstands = intvar(0, 999999999)  # Number of nightstands made\n\n# Constraints\nm = Model()\n\n# John's time constraint (30 hours available):\nm += 2 * Chairs + 5 * Nightstands <= 30\n# William's time constraint (40 hours available):\nm += 4 * Chairs + 4 * Nightstands <= 40\n\n# Objective\n# Maximize profits ($300 per chair, $500 per nightstand):\nm.maximize(300 * Chairs + 500 * Nightstands)\n", "entities": [{"start": 48, "end": 54, "word": "chairs", "entity_group": "VAR", "score": 0.9996414108610496}, {"start": 59, "end": 70, "word": "nightstands", "entity_group": "VAR", "score": 0.9998176147106641}, {"start": 78, "end": 83, "word": "chair", "entity_group": "VAR", "score": 0.9996719767588914}, {"start": 90, "end": 91, "word": "2", "entity_group": "PARAM", "score": 0.999655311859721}, {"start": 118, "end": 119, "word": "4", "entity_group": "PARAM", "score": 0.9996819028938646}, {"start": 152, "end": 162, "word": "nightstand", "entity_group": "VAR", "score": 0.9997317964417737}, {"start": 169, "end": 170, "word": "5", "entity_group": "PARAM", "score": 0.9996221321660658}, {"start": 197, "end": 198, "word": "4", "entity_group": "PARAM", "score": 0.9996818617679344}, {"start": 247, "end": 249, "word": "30", "entity_group": "LIMIT", "score": 0.9997097617881866}, {"start": 256, "end": 265, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985081782366653}, {"start": 282, "end": 284, "word": "40", "entity_group": "LIMIT", "score": 0.9997374384776162}, {"start": 291, "end": 300, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993524425090655}, {"start": 317, "end": 320, "word": "300", "entity_group": "PARAM", "score": 0.9997197324399996}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992180274282064}, {"start": 332, "end": 337, "word": "chair", "entity_group": "VAR", "score": 0.9992856585782977}, {"start": 349, "end": 352, "word": "500", "entity_group": "PARAM", "score": 0.9997293393373932}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9989689807784099}, {"start": 364, "end": 374, "word": "nightstand", "entity_group": "VAR", "score": 0.9995881110976393}, {"start": 419, "end": 427, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998825687071025}, {"start": 428, "end": 435, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.999647432287255}]}
{"doc_id": "-1815789258", "document": "A glass artist makes glass dogs and cats. Each piece requires time heating, molding, and cooling. A glass dog requires 10 minutes of heating, 30 minutes of molding, and 20 minutes of cooling. A glass cat requires 15 minutes of heating, 20 minutes of molding, and 15 minutes of cooling. In his shop, he has 1000 minutes available for heating, 1500 minutes available for molding, and 1200 minutes available for cooling. If the profit per glass dog is $50 and the profit per glass cat is $40, how many of each should he make to maximize his profits?", "order_mapping": {"glass dogs": 0, "cats": 1, "glass dog": 0, "glass cat": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"glass dog": "50", "glass cat": "40"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"glass dog": "10", "glass cat": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"glass dog": "30", "glass cat": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"glass dog": "20", "glass cat": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of glass dogs\n- y: Number of glass cats\n\nObjective:\n- The glass artist wants to maximize his profits. The profit per glass dog is $50 and the profit per glass cat is $40. Therefore, the objective function is: Maximize 50x + 40y\n\nConstraints:\n- The available time for heating, molding, and cooling must not be exceeded. This leads to the following constraints:\n    - 10x + 15y <= 1000 (heating)\n    - 30x + 20y <= 1500 (molding)\n    - 20x + 15y <= 1200 (cooling)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 40y\nConstraints:\n10x + 15y <= 1000\n30x + 20y <= 1500\n20x + 15y <= 1200", "canonical": {"objective": [-50.0, -40.0], "constraints": [[10.0, 15.0, 1000.0], [30.0, 20.0, 1500.0], [20.0, 15.0, 1200.0]]}, "solution": {"x": 10, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of glass dogs made: GlassDogs\n- Number of glass cats made: GlassCats\n\nConstraints:\n- Heating time limit (1000 minutes):\n  10 * GlassDogs + 15 * GlassCats <= 1000\n- Molding time limit (1500 minutes):\n  30 * GlassDogs + 20 * GlassCats <= 1500\n- Cooling time limit (1200 minutes):\n  20 * GlassDogs + 15 * GlassCats <= 1200\n\nObjective:\n- Maximize profits ($50 per glass dog, $40 per glass cat):\n  50 * GlassDogs + 40 * GlassCats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGlassDogs = intvar(0, 999999999)  # Number of glass dogs made\nGlassCats = intvar(0, 999999999)  # Number of glass cats made\n\n# Constraints\nm = Model()\n\n# Time constraints for heating, molding, and cooling\n# Heating: 10 minutes per dog, 15 minutes per cat, 1000 minutes available\nm += 10 * GlassDogs + 15 * GlassCats <= 1000\n# Molding: 30 minutes per dog, 20 minutes per cat, 1500 minutes available\nm += 30 * GlassDogs + 20 * GlassCats <= 1500\n# Cooling: 20 minutes per dog, 15 minutes per cat, 1200 minutes available\nm += 20 * GlassDogs + 15 * GlassCats <= 1200\n\n# Objective\n# Maximize profits ($50 per glass dog, $40 per glass cat)\nm.maximize(50 * GlassDogs + 40 * GlassCats)\n", "entities": [{"start": 21, "end": 31, "word": "glass dogs", "entity_group": "VAR", "score": 0.9999668333081158}, {"start": 36, "end": 40, "word": "cats", "entity_group": "VAR", "score": 0.9995105355881819}, {"start": 104, "end": 113, "word": "glass dog", "entity_group": "VAR", "score": 0.9999670201320949}, {"start": 123, "end": 125, "word": "10", "entity_group": "PARAM", "score": 0.9996673866248255}, {"start": 147, "end": 149, "word": "30", "entity_group": "PARAM", "score": 0.9997267414772201}, {"start": 175, "end": 177, "word": "20", "entity_group": "PARAM", "score": 0.9995974307831589}, {"start": 201, "end": 210, "word": "glass cat", "entity_group": "VAR", "score": 0.9999213134911559}, {"start": 220, "end": 222, "word": "15", "entity_group": "PARAM", "score": 0.9996520437035862}, {"start": 244, "end": 246, "word": "20", "entity_group": "PARAM", "score": 0.9997267744248698}, {"start": 272, "end": 274, "word": "15", "entity_group": "PARAM", "score": 0.999589086852923}, {"start": 317, "end": 321, "word": "1000", "entity_group": "LIMIT", "score": 0.9997810060139661}, {"start": 330, "end": 339, "word": "available", "entity_group": "CONST_DIR", "score": 0.999154379458516}, {"start": 354, "end": 358, "word": "1500", "entity_group": "LIMIT", "score": 0.9997253458963677}, {"start": 367, "end": 376, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991961137105185}, {"start": 395, "end": 399, "word": "1200", "entity_group": "LIMIT", "score": 0.9997071789802443}, {"start": 408, "end": 417, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992478332890868}, {"start": 439, "end": 445, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999947242508262}, {"start": 450, "end": 459, "word": "glass dog", "entity_group": "VAR", "score": 0.9998858361915011}, {"start": 465, "end": 467, "word": "50", "entity_group": "PARAM", "score": 0.9996674923175449}, {"start": 476, "end": 482, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999137057561625}, {"start": 487, "end": 496, "word": "glass cat", "entity_group": "VAR", "score": 0.9996814961799015}, {"start": 502, "end": 504, "word": "40", "entity_group": "PARAM", "score": 0.9996726497174697}, {"start": 542, "end": 550, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997496280031353}, {"start": 555, "end": 562, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996931119900722}]}
{"doc_id": "918472951", "document": "In a labor camp, the company makes soup and sandwiches. They need to ensure workers get at least 2000 calories, 100 grams of protein, and 100 grams of carbs. A can of soup costs $1 and contains 200 calories, 5 grams of protein, and 4 grams of carbs. One sandwich costs $3 and contains 250 calories, 10 grams of protein, and 15 grams of carbs. What is the minimum cost diet that the company can provide for its workers?", "order_mapping": {"soup": 0, "sandwiches": 1, "sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"soup": "1", "sandwich": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "2000", "terms": {"soup": "200", "sandwich": "250"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "100", "terms": {"soup": "5", "sandwich": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "100", "terms": {"soup": "4", "sandwich": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans of soup\n- y: Number of sandwiches\n\nObjective:\n- The company aims to minimize the cost of providing the workers' diet. A can of soup costs $1 and one sandwich costs $3. Therefore, the objective function is: Minimize x + 3y\n\nConstraints:\n- The diet must provide at least 2000 calories, which can be formulated as: 200x + 250y >= 2000.\n- The diet must provide at least 100 grams of protein, leading to the constraint: 5x + 10y >= 100.\n- The diet must provide at least 100 grams of carbs, resulting in the constraint: 4x + 15y >= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 3y\nConstraints:\n200x + 250y >= 2000\n5x + 10y >= 100\n4x + 15y >= 100", "canonical": {"objective": [1.0, 3.0], "constraints": [[-200.0, -250.0, -2000.0], [-5.0, -10.0, -100.0], [-4.0, -15.0, -100.0]]}, "solution": {"x": 14, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of cans of soup: Soup\n- Number of sandwiches: Sandwich\n\nConstraints:\n- At least 2000 calories required:\n  200 * Soup + 250 * Sandwich >= 2000\n- At least 100 grams of protein required:\n  5 * Soup + 10 * Sandwich >= 100\n- At least 100 grams of carbs required:\n  4 * Soup + 15 * Sandwich >= 100\n\nObjective:\n- Minimize cost (1 dollar per can of soup, 3 dollars per sandwich):\n  1 * Soup + 3 * Sandwich\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSoup = intvar(0, 999999999)  # Number of cans of soup\nSandwich = intvar(0, 999999999)  # Number of sandwiches\n\n# Constraints\nm = Model()\n\n# Ensure workers get at least 2000 calories:\nm += 200 * Soup + 250 * Sandwich >= 2000\n# Ensure workers get at least 100 grams of protein:\nm += 5 * Soup + 10 * Sandwich >= 100\n# Ensure workers get at least 100 grams of carbs:\nm += 4 * Soup + 15 * Sandwich >= 100\n\n# Objective\n# Minimize cost (1 dollar per can of soup, 3 dollars per sandwich):\nm.minimize(1 * Soup + 3 * Sandwich)\n", "entities": [{"start": 36, "end": 40, "word": "soup", "entity_group": "VAR", "score": 0.9972454876019655}, {"start": 45, "end": 55, "word": "sandwiches", "entity_group": "VAR", "score": 0.9995373300510346}, {"start": 90, "end": 98, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989370267002258}, {"start": 99, "end": 103, "word": "2000", "entity_group": "LIMIT", "score": 0.9996997309679005}, {"start": 115, "end": 118, "word": "100", "entity_group": "LIMIT", "score": 0.9997203288968032}, {"start": 142, "end": 145, "word": "100", "entity_group": "LIMIT", "score": 0.9995335617192048}, {"start": 172, "end": 176, "word": "soup", "entity_group": "VAR", "score": 0.9996196606261005}, {"start": 177, "end": 182, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.996922325673155}, {"start": 185, "end": 186, "word": "1", "entity_group": "PARAM", "score": 0.9995382120274982}, {"start": 200, "end": 203, "word": "200", "entity_group": "PARAM", "score": 0.9996883690084882}, {"start": 215, "end": 216, "word": "5", "entity_group": "PARAM", "score": 0.9997042614299415}, {"start": 240, "end": 241, "word": "4", "entity_group": "PARAM", "score": 0.9995673652685207}, {"start": 263, "end": 271, "word": "sandwich", "entity_group": "VAR", "score": 0.9996595361277233}, {"start": 272, "end": 277, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.996972923895381}, {"start": 280, "end": 281, "word": "3", "entity_group": "PARAM", "score": 0.9996499035134381}, {"start": 295, "end": 298, "word": "250", "entity_group": "PARAM", "score": 0.9996263617605693}, {"start": 310, "end": 312, "word": "10", "entity_group": "PARAM", "score": 0.9997042476608884}, {"start": 336, "end": 338, "word": "15", "entity_group": "PARAM", "score": 0.9995544267258285}, {"start": 368, "end": 375, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9812209937179348}, {"start": 376, "end": 380, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9978062316964227}]}
{"doc_id": "-14279558", "document": "A factory has workers who knit scarfs and toques by hand. The factory has 250000 knitting minutes available. A scarf takes 20 minutes to knit and a toque takes 30 minutes to knit. The factory must make at least 5000 scarfs and at least 3000 toques. If the profit per scarf is $20 and the profit per toque is $25, how many of each should be made to maximize profit?", "order_mapping": {"scarfs": 0, "toques": 1, "scarf": 0, "toque": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"scarf": "20", "toque": "25"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "250000", "terms": {"scarf": "20", "toque": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5000", "var": "scarfs", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3000", "var": "toques", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of scarfs\n- y: Number of toques\n\nObjective:\n- The factory aims to maximize its profit. The profit per scarf is $20 and the profit per toque is $25. Therefore, the objective function is: Maximize 20x + 25y\n\nConstraints:\n- The factory has 250,000 knitting minutes available. A scarf takes 20 minutes to knit and a toque takes 30 minutes to knit, leading to the constraint: 20x + 30y <= 250000.\n- The factory must make at least 5000 scarfs, resulting in the constraint: x >= 5000.\n- The factory must make at least 3000 toques, leading to the constraint: y >= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 25y\nConstraints:\n20x + 30y <= 250000\nx >= 5000\ny >= 3000", "canonical": {"objective": [-20.0, -25.0], "constraints": [[20.0, 30.0, 250000.0], [-1.0, 0.0, -5000.0], [0.0, -1.0, -3000.0]]}, "solution": {"x": 8000, "y": 3000}, "pseudo_model": "\nDecision Variables:\n- Number of scarfs made: Scarfs\n- Number of toques made: Toques\n\nConstraints:\n- Total knitting minutes (20 minutes per scarf and 30 minutes per toque) should not exceed 250000:\n  20 * Scarfs + 30 * Toques <= 250000\n- At least 5000 scarfs should be made:\n  Scarfs >= 5000\n- At least 3000 toques should be made:\n  Toques >= 3000\n\nObjective:\n- Maximize profit (20 dollars per scarf, 25 dollars per toque):\n  20 * Scarfs + 25 * Toques\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nScarfs = intvar(0, 999999999)  # Number of scarfs made\nToques = intvar(0, 999999999)  # Number of toques made\n\n# Constraints\nm = Model()\n\n# Total knitting minutes should not exceed 250000:\nm += 20 * Scarfs + 30 * Toques <= 250000\n# At least 5000 scarfs should be made:\nm += Scarfs >= 5000\n# At least 3000 toques should be made:\nm += Toques >= 3000\n\n# Objective\n# Maximize profit (20 dollars per scarf, 25 dollars per toque):\nm.maximize(20 * Scarfs + 25 * Toques)\n", "entities": [{"start": 31, "end": 37, "word": "scarfs", "entity_group": "VAR", "score": 0.998722484868221}, {"start": 42, "end": 48, "word": "toques", "entity_group": "VAR", "score": 0.9991453320603332}, {"start": 75, "end": 81, "word": "250000", "entity_group": "LIMIT", "score": 0.9993286743084616}, {"start": 99, "end": 108, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996739881876751}, {"start": 113, "end": 118, "word": "scarf", "entity_group": "VAR", "score": 0.9994664298683266}, {"start": 125, "end": 127, "word": "20", "entity_group": "PARAM", "score": 0.9996794717311837}, {"start": 150, "end": 155, "word": "toque", "entity_group": "VAR", "score": 0.9995500046482657}, {"start": 162, "end": 164, "word": "30", "entity_group": "PARAM", "score": 0.9991165034449163}, {"start": 205, "end": 213, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999075577633056}, {"start": 214, "end": 218, "word": "5000", "entity_group": "LIMIT", "score": 0.9996916931704517}, {"start": 219, "end": 225, "word": "scarfs", "entity_group": "VAR", "score": 0.9985019306535567}, {"start": 230, "end": 238, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989502879271779}, {"start": 239, "end": 243, "word": "3000", "entity_group": "LIMIT", "score": 0.9997474123187793}, {"start": 244, "end": 250, "word": "toques", "entity_group": "VAR", "score": 0.9995238802179387}, {"start": 260, "end": 266, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998833433415664}, {"start": 271, "end": 276, "word": "scarf", "entity_group": "VAR", "score": 0.9986986419861185}, {"start": 282, "end": 284, "word": "20", "entity_group": "PARAM", "score": 0.9993478814005308}, {"start": 293, "end": 299, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465452}, {"start": 304, "end": 309, "word": "toque", "entity_group": "VAR", "score": 0.9990975872183067}, {"start": 315, "end": 317, "word": "25", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 355, "end": 363, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 364, "end": 370, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "1173275251", "document": "In order to get some extra amino acids, Cindy drinks orange juice and apple juice. A glass of orange juice contains 2 units of Lysine, 3 units of Alanine, 5 units of Methionine, and 7 units of Glycine. A glass of apple juice contains 5 units of Lysine, 5 units of Alanine, 2 units of Methionine, and 1 unit of Glycine. She requires at least 30 units of Lysine, at least 40 units of Alanine, and at most 50 units of Methionine. How many glasses of each juice should she drink to minimize the amount of Glycine she gets.", "order_mapping": {"orange juice": 0, "apple juice": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of Glycine", "terms": {"orange juice": "7", "apple juice": "1"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"orange juice": "2", "apple juice": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"orange juice": "3", "apple juice": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50", "terms": {"orange juice": "5", "apple juice": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Glasses of orange juice\n- y: Glasses of apple juice\n\nObjective:\n- Cindy wants to minimize the amount of Glycine she gets. A glass of orange juice contains 7 units of Glycine, and a glass of apple juice contains 1 unit of Glycine. Therefore, the objective function is: Minimize 7x + y\n\nConstraints:\n- Cindy requires at least 30 units of Lysine, which translates to the constraint: 2x + 5y >= 30.\n- She also needs at least 40 units of Alanine, leading to the constraint: 3x + 5y >= 40.\n- Additionally, she can have at most 50 units of Methionine, resulting in the constraint: 5x + 2y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 7x + y\nConstraints:\n2x + 5y >= 30\n3x + 5y >= 40\n5x + 2y <= 50", "canonical": {"objective": [7.0, 1.0], "constraints": [[-2.0, -5.0, -30.0], [-3.0, -5.0, -40.0], [5.0, 2.0, 50.0]]}, "solution": {"x": 0, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of glasses of orange juice: OrangeJuice\n- Number of glasses of apple juice: AppleJuice\n\nConstraints:\n- Lysine requirement (at least 30 units):\n  2 * OrangeJuice + 5 * AppleJuice >= 30\n- Alanine requirement (at least 40 units):\n  3 * OrangeJuice + 5 * AppleJuice >= 40\n- Methionine requirement (at most 50 units):\n  5 * OrangeJuice + 2 * AppleJuice <= 50\n\nObjective:\n- Minimize the amount of Glycine (7 units from orange juice, 1 unit from apple juice):\n  7 * OrangeJuice + 1 * AppleJuice\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOrangeJuice = intvar(0, 999999999)  # Number of glasses of orange juice\nAppleJuice = intvar(0, 999999999)  # Number of glasses of apple juice\n\n# Constraints\nm = Model()\n\n# Lysine requirement (at least 30 units):\nm += 2 * OrangeJuice + 5 * AppleJuice >= 30\n# Alanine requirement (at least 40 units):\nm += 3 * OrangeJuice + 5 * AppleJuice >= 40\n# Methionine requirement (at most 50 units):\nm += 5 * OrangeJuice + 2 * AppleJuice <= 50\n\n# Objective\n# Minimize the amount of Glycine (7 units from orange juice, 1 unit from apple juice):\nm.minimize(7 * OrangeJuice + 1 * AppleJuice)\n", "entities": [{"start": 54, "end": 66, "word": "orange juice", "entity_group": "VAR", "score": 0.9999772717597114}, {"start": 71, "end": 82, "word": "apple juice", "entity_group": "VAR", "score": 0.999979937799067}, {"start": 96, "end": 108, "word": "orange juice", "entity_group": "VAR", "score": 0.9999762858492315}, {"start": 118, "end": 119, "word": "2", "entity_group": "PARAM", "score": 0.9995917963516397}, {"start": 138, "end": 139, "word": "3", "entity_group": "PARAM", "score": 0.9997442174986536}, {"start": 159, "end": 160, "word": "5", "entity_group": "PARAM", "score": 0.9997473111092157}, {"start": 187, "end": 188, "word": "7", "entity_group": "PARAM", "score": 0.9996305033411796}, {"start": 198, "end": 205, "word": "Glycine", "entity_group": "OBJ_NAME", "score": 0.9949307154212435}, {"start": 219, "end": 230, "word": "apple juice", "entity_group": "VAR", "score": 0.9999719897384917}, {"start": 240, "end": 241, "word": "5", "entity_group": "PARAM", "score": 0.9995918018416301}, {"start": 260, "end": 261, "word": "5", "entity_group": "PARAM", "score": 0.9997442174986536}, {"start": 281, "end": 282, "word": "2", "entity_group": "PARAM", "score": 0.9997473144842768}, {"start": 309, "end": 310, "word": "1", "entity_group": "PARAM", "score": 0.9988883624011035}, {"start": 319, "end": 326, "word": "Glycine", "entity_group": "OBJ_NAME", "score": 0.9964236072727843}, {"start": 342, "end": 350, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991344122274027}, {"start": 351, "end": 353, "word": "30", "entity_group": "LIMIT", "score": 0.9997904319739667}, {"start": 372, "end": 380, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992134171964568}, {"start": 381, "end": 383, "word": "40", "entity_group": "LIMIT", "score": 0.9997640000374871}, {"start": 407, "end": 414, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990283339472509}, {"start": 415, "end": 417, "word": "50", "entity_group": "LIMIT", "score": 0.9997419521021803}, {"start": 491, "end": 499, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993166246411365}, {"start": 504, "end": 521, "word": "amount of Glycine", "entity_group": "OBJ_NAME", "score": 0.9917108572517053}]}
{"doc_id": "1727707716", "document": "A smoothie store sells two types of smoothies - a small and a large size. Both contain only ice cream and peanut butter. Each small smoothie requires 2 units of ice cream and 1 unit of peanut butter. Each large smoothie requires 3 units of ice cream and 2 units of peanut butter. The company only has a total of 20 units of ice cream and 18 units of peanut butter. If the profit per small smoothie is $3 and the profit per large smoothie is $5, how many of each should the store sell to maximize profit?", "order_mapping": {"small": 0, "large size": 1, "small smoothie": 0, "large smoothie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"small smoothie": "3", "large smoothie": "5"}}, "const_declarations": [{"type": "linear", "direction": "total", "limit": "20", "terms": {"small smoothie": "2", "large smoothie": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "total", "limit": "18", "terms": {"small smoothie": "1", "large smoothie": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small smoothies to sell\n- y: Number of large smoothies to sell\n\nObjective:\n- The store aims to maximize its profit. The profit per small smoothie is $3 and the profit per large smoothie is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The store has a total of 20 units of ice cream and each small smoothie requires 2 units, and each large smoothie requires 3 units. This leads to the constraint: 2x + 3y <= 20.\n- The store has a total of 18 units of peanut butter and each small smoothie requires 1 unit, and each large smoothie requires 2 units. This leads to the constraint: x + 2y <= 18.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n2x + 3y <= 20\nx + 2y <= 18", "canonical": {"objective": [-3.0, -5.0], "constraints": [[2.0, 3.0, 20.0], [1.0, 2.0, 18.0]]}, "solution": {"x": 1, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of small smoothies sold: SmallSmoothie\n- Number of large smoothies sold: LargeSmoothie\n\nConstraints:\n- Total units of ice cream used should not exceed 20 (2 units per small, 3 units per large):\n  2 * SmallSmoothie + 3 * LargeSmoothie <= 20\n- Total units of peanut butter used should not exceed 18 (1 unit per small, 2 units per large):\n  1 * SmallSmoothie + 2 * LargeSmoothie <= 18\n\nObjective:\n- Maximize profit (3 dollars per small smoothie, 5 dollars per large smoothie):\n  3 * SmallSmoothie + 5 * LargeSmoothie\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallSmoothie = intvar(0, 999999999)  # Number of small smoothies sold\nLargeSmoothie = intvar(0, 999999999)  # Number of large smoothies sold\n\n# Constraints\nm = Model()\n\n# Total units of ice cream used should not exceed 20:\nm += 2 * SmallSmoothie + 3 * LargeSmoothie <= 20\n# Total units of peanut butter used should not exceed 18:\nm += 1 * SmallSmoothie + 2 * LargeSmoothie <= 18\n\n# Objective\n# Maximize profit (3 dollars per small smoothie, 5 dollars per large smoothie):\nm.maximize(3 * SmallSmoothie + 5 * LargeSmoothie)\n", "entities": [{"start": 50, "end": 55, "word": "small", "entity_group": "VAR", "score": 0.9996871249539516}, {"start": 62, "end": 72, "word": "large size", "entity_group": "VAR", "score": 0.9999569924359025}, {"start": 128, "end": 142, "word": "small smoothie", "entity_group": "VAR", "score": 0.9999358145084571}, {"start": 152, "end": 153, "word": "2", "entity_group": "PARAM", "score": 0.9997137271969597}, {"start": 177, "end": 178, "word": "1", "entity_group": "PARAM", "score": 0.9993556392783876}, {"start": 208, "end": 222, "word": "large smoothie", "entity_group": "VAR", "score": 0.999936440724983}, {"start": 232, "end": 233, "word": "3", "entity_group": "PARAM", "score": 0.9997167298712862}, {"start": 257, "end": 258, "word": "2", "entity_group": "PARAM", "score": 0.9996435134635413}, {"start": 307, "end": 312, "word": "total", "entity_group": "CONST_DIR", "score": 0.9983428713633163}, {"start": 316, "end": 318, "word": "20", "entity_group": "LIMIT", "score": 0.9997793607375937}, {"start": 342, "end": 344, "word": "18", "entity_group": "LIMIT", "score": 0.9996638055521828}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9991302850926147}, {"start": 388, "end": 402, "word": "small smoothie", "entity_group": "VAR", "score": 0.9998275082939914}, {"start": 408, "end": 409, "word": "3", "entity_group": "PARAM", "score": 0.999471815453668}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999922176156566}, {"start": 429, "end": 443, "word": "large smoothie", "entity_group": "VAR", "score": 0.9998136424666356}, {"start": 449, "end": 450, "word": "5", "entity_group": "PARAM", "score": 0.9996338486854879}, {"start": 495, "end": 503, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 504, "end": 510, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "556123470", "document": "A florist has 40 acres to grow sunflowers and roses. To ensure the flowers grow, the florist must use plant nutrition to feed the flowers. Sunflowers require 5 kg of plant nutrition per acre while roses require 8 kg of plant nutrition per acre. Due to the high cost of the plant nutrition, the florist wants to use at most 230 kg of plant nutrition. If the profit per acre of sunflowers is $200 and the profit per acre of roses is $375, how many acres of each should the florist grow to maximize profit?", "order_mapping": {"sunflowers": 0, "roses": 1, "Sunflowers": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sunflowers": "200", "roses": "375"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "40", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "230", "terms": {"Sunflowers": "5", "roses": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of sunflowers\n- y: Acres of roses\n\nObjective:\n- The florist aims to maximize profit. The profit per acre of sunflowers is $200 and the profit per acre of roses is $375. Therefore, the objective function is: Maximize 200x + 375y\n\nConstraints:\n- The florist has 40 acres available for growing sunflowers and roses, leading to the constraint: x + y <= 40.\n- The total plant nutrition available is at most 230 kg, and sunflowers require 5 kg per acre while roses require 8 kg per acre. This results in the constraint: 5x + 8y <= 230.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 375y\nConstraints:\nx + y <= 40\n5x + 8y <= 230", "canonical": {"objective": [-200.0, -375.0], "constraints": [[1.0, 1.0, 40.0], [5.0, 8.0, 230.0]]}, "solution": {"x": 1, "y": 28}, "pseudo_model": "\nDecision Variables:\n- Number of acres used to grow sunflowers: Sunflowers\n- Number of acres used to grow roses: Roses\n\nConstraints:\n- Total acres used should not exceed 40:\n  Sunflowers + Roses <= 40\n- Total plant nutrition used should not exceed 230 kg (5 kg per acre for sunflowers, 8 kg per acre for roses):\n  5 * Sunflowers + 8 * Roses <= 230\n\nObjective:\n- Maximize profit (200 dollars per acre for sunflowers, 375 dollars per acre for roses):\n  200 * Sunflowers + 375 * Roses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSunflowers = intvar(0, 999999999)  # Number of acres used to grow sunflowers\nRoses = intvar(0, 999999999)  # Number of acres used to grow roses\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 40:\nm += Sunflowers + Roses <= 40\n# Total plant nutrition used should not exceed 230 kg (5 kg per acre for sunflowers, 8 kg per acre for roses):\nm += 5 * Sunflowers + 8 * Roses <= 230\n\n# Objective\n# Maximize profit (200 dollars per acre for sunflowers, 375 dollars per acre for roses):\nm.maximize(200 * Sunflowers + 375 * Roses)\n", "entities": [{"start": 10, "end": 13, "word": "has", "entity_group": "CONST_DIR", "score": 0.9910990767145468}, {"start": 14, "end": 16, "word": "40", "entity_group": "LIMIT", "score": 0.9987862712734217}, {"start": 31, "end": 41, "word": "sunflowers", "entity_group": "VAR", "score": 0.998185921455647}, {"start": 46, "end": 51, "word": "roses", "entity_group": "VAR", "score": 0.9995166984908844}, {"start": 142, "end": 152, "word": "Sunflowers", "entity_group": "VAR", "score": 0.9996749041251375}, {"start": 161, "end": 162, "word": "5", "entity_group": "PARAM", "score": 0.9997058178601165}, {"start": 200, "end": 205, "word": "roses", "entity_group": "VAR", "score": 0.9992864732691742}, {"start": 214, "end": 215, "word": "8", "entity_group": "PARAM", "score": 0.9996359610245839}, {"start": 320, "end": 327, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989555512118105}, {"start": 328, "end": 331, "word": "230", "entity_group": "LIMIT", "score": 0.9995660285660493}, {"start": 363, "end": 369, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998530945525486}, {"start": 382, "end": 392, "word": "sunflowers", "entity_group": "VAR", "score": 0.9994952128906848}, {"start": 398, "end": 401, "word": "200", "entity_group": "PARAM", "score": 0.9992430237606286}, {"start": 410, "end": 416, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713132}, {"start": 429, "end": 434, "word": "roses", "entity_group": "VAR", "score": 0.9994301095794499}, {"start": 440, "end": 443, "word": "375", "entity_group": "PARAM", "score": 0.9995941446295008}, {"start": 496, "end": 504, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534739831}, {"start": 505, "end": 511, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "-1998648387", "document": "An oil company produces economical, regular and premium grades of oil. Each tanker of economical grade oil produces a net revenue of $500, each tanker of regular grade oil produces a net revenue of $1020, and each tanker of premium grade oil produces a net revenue of $920. To produce a tanker of economical grade oil, 4 units of compound A and 2 units of compound B are required. To produce a tanker of regular grade oil, 5 units of compound A and 1 unit of compound B are required. To produce a tanker of premium grade oil, 8 units of compound A and 1 unit of compound B are required. Currently the company has 200  units of compound A and 100 units of compound B to process. How many full or partial tankers of each oil grade should the company produce so that net revenue is maximized?", "order_mapping": {"economical": 0, "regular": 1, "premium": 2, "economical grade oil": 0, "regular grade oil": 1, "premium grade oil": 2}, "obj_declaration": {"type": "objective", "direction": "maximized", "name": "net revenue", "terms": {"economical grade oil": "500", "regular grade oil": "1020", "premium grade oil": "920"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "200", "terms": {"economical grade oil": "4", "regular grade oil": "5", "premium grade oil": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "100", "terms": {"economical grade oil": "2", "regular grade oil": "1", "premium grade oil": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tankers of economical grade oil\n- y: Number of tankers of regular grade oil\n- z: Number of tankers of premium grade oil\n\nObjective:\n- The company aims to maximize its net revenue. Each tanker of economical grade oil produces a net revenue of $500, each tanker of regular grade oil produces a net revenue of $1020, and each tanker of premium grade oil produces a net revenue of $920. Therefore, the objective function is: Maximize 500x + 1020y + 920z\n\nConstraints:\n- The company has 200 units of compound A and 100 units of compound B available. The usage of compound A and B to produce each type of oil leads to the following constraints:\n    - 4x + 5y + 8z <= 200 (for compound A)\n    - 2x + y + z <= 100 (for compound B)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 1020y + 920z\nConstraints:\n4x + 5y + 8z <= 200\n2x + y + z <= 100", "canonical": {"objective": [-500.0, -1020.0, -920.0], "constraints": [[4.0, 5.0, 8.0, 200.0], [2.0, 1.0, 1.0, 100.0]]}, "solution": {"x": 0, "y": 40, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of tankers of economical grade oil: Economical\n- Number of tankers of regular grade oil: Regular\n- Number of tankers of premium grade oil: Premium\n\nConstraints:\n- Compound A usage should not exceed 200 units:\n  4*Economical + 5*Regular + 8*Premium <= 200\n- Compound B usage should not exceed 100 units:\n  2*Economical + 1*Regular + 1*Premium <= 100\n\nObjective:\n- Maximize net revenue (500 dollars per economical grade oil tanker, 1020 dollars per regular grade oil tanker, 920 dollars per premium grade oil tanker):\n  500*Economical + 1020*Regular + 920*Premium\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEconomical = intvar(0, 999999999)  # Number of tankers of economical grade oil\nRegular = intvar(0, 999999999)  # Number of tankers of regular grade oil\nPremium = intvar(0, 999999999)  # Number of tankers of premium grade oil\n\n# Constraints\nm = Model()\n\n# Compound A constraint (200 units available):\nm += 4*Economical + 5*Regular + 8*Premium <= 200\n# Compound B constraint (100 units available):\nm += 2*Economical + 1*Regular + 1*Premium <= 100\n\n# Objective\n# Maximize net revenue:\nm.maximize(500*Economical + 1020*Regular + 920*Premium)\n", "entities": [{"start": 24, "end": 34, "word": "economical", "entity_group": "VAR", "score": 0.999725400429629}, {"start": 37, "end": 44, "word": "regular", "entity_group": "VAR", "score": 0.9994081155280923}, {"start": 49, "end": 56, "word": "premium", "entity_group": "VAR", "score": 0.9997347113294371}, {"start": 88, "end": 108, "word": "economical grade oil", "entity_group": "VAR", "score": 0.9996470403306837}, {"start": 120, "end": 131, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9323162013634662}, {"start": 137, "end": 140, "word": "500", "entity_group": "PARAM", "score": 0.9996294571581257}, {"start": 158, "end": 175, "word": "regular grade oil", "entity_group": "VAR", "score": 0.9997327086173698}, {"start": 187, "end": 198, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.8869450685384027}, {"start": 204, "end": 208, "word": "1020", "entity_group": "PARAM", "score": 0.9996013826892777}, {"start": 230, "end": 247, "word": "premium grade oil", "entity_group": "VAR", "score": 0.9990335216537592}, {"start": 259, "end": 270, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.8743493795218221}, {"start": 276, "end": 279, "word": "920", "entity_group": "PARAM", "score": 0.9994815162637084}, {"start": 305, "end": 325, "word": "economical grade oil", "entity_group": "VAR", "score": 0.9987581328469143}, {"start": 328, "end": 329, "word": "4", "entity_group": "PARAM", "score": 0.9996983151996333}, {"start": 354, "end": 355, "word": "2", "entity_group": "PARAM", "score": 0.9996661681797083}, {"start": 414, "end": 431, "word": "regular grade oil", "entity_group": "VAR", "score": 0.9987581327373521}, {"start": 434, "end": 435, "word": "5", "entity_group": "PARAM", "score": 0.9996980204180338}, {"start": 460, "end": 461, "word": "1", "entity_group": "PARAM", "score": 0.9994326741958357}, {"start": 519, "end": 536, "word": "premium grade oil", "entity_group": "VAR", "score": 0.9938799783050598}, {"start": 539, "end": 540, "word": "8", "entity_group": "PARAM", "score": 0.999681036830578}, {"start": 565, "end": 566, "word": "1", "entity_group": "PARAM", "score": 0.9994326741987383}, {"start": 623, "end": 626, "word": "has", "entity_group": "CONST_DIR", "score": 0.9991061953743956}, {"start": 627, "end": 630, "word": "200", "entity_group": "LIMIT", "score": 0.9985776603335587}, {"start": 655, "end": 658, "word": "100", "entity_group": "LIMIT", "score": 0.9996463762717579}, {"start": 778, "end": 789, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9690096834870361}, {"start": 793, "end": 802, "word": "maximized", "entity_group": "OBJ_DIR", "score": 0.9995867938031107}]}
{"doc_id": "781521487", "document": "A smoothie store makes fruit and vegetable smoothies. It takes 5 minutes on the cutting machine and 5 minutes on the blending machine to make a fruit smoothie. It takes 7 minutes on the cutting machine and 4 minutes on the blending machine to make a vegetable smoothie. The profit per fruit smoothie is $4 and the profit per vegetable smoothie is $5. If both the cutting machine and blending machine are available for at most 400 minutes per day, how many of each smoothie should be made to maximize profit?", "order_mapping": {"fruit": 0, "vegetable smoothies": 1, "fruit smoothie": 0, "vegetable smoothie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fruit smoothie": "4", "vegetable smoothie": "5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "400", "terms": {"fruit smoothie": "5", "vegetable smoothie": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "400", "terms": {"fruit smoothie": "5", "vegetable smoothie": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of fruit smoothies\n- y: Number of vegetable smoothies\n\nObjective:\n- The smoothie store aims to maximize its profit. The profit per fruit smoothie is $4 and the profit per vegetable smoothie is $5. Therefore, the objective function is: Maximize 4x + 5y\n\nConstraints:\n- The cutting and blending machines are available for at most 400 minutes per day. The time taken to make each smoothie type on the cutting and blending machines are given. These constraints can be formulated as:\n    - 5x + 7y <= 400 (cutting machine constraint)\n    - 5x + 4y <= 400 (blending machine constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 5y\nConstraints:\n5x + 7y <= 400\n5x + 4y <= 400", "canonical": {"objective": [-4.0, -5.0], "constraints": [[5.0, 7.0, 400.0], [5.0, 4.0, 400.0]]}, "solution": {"x": 80, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of fruit smoothies made per day: FruitSmoothies\n- Number of vegetable smoothies made per day: VegetableSmoothies\n\nConstraints:\n- Total time on the cutting machine should not exceed 400 minutes per day (5 minutes for a fruit smoothie and 7 minutes for a vegetable smoothie):\n  5 * FruitSmoothies + 7 * VegetableSmoothies <= 400\n- Total time on the blending machine should not exceed 400 minutes per day (5 minutes for a fruit smoothie and 4 minutes for a vegetable smoothie):\n  5 * FruitSmoothies + 4 * VegetableSmoothies <= 400\n\nObjective:\n- Maximize profit (4 dollars per fruit smoothie, 5 dollars per vegetable smoothie):\n  4 * FruitSmoothies + 5 * VegetableSmoothies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFruitSmoothies = intvar(0, 999999999)  # Number of fruit smoothies made per day\nVegetableSmoothies = intvar(0, 999999999)  # Number of vegetable smoothies made per day\n\n# Constraints\nm = Model()\n\n# Total time on the cutting machine should not exceed 400 minutes per day:\n# 5 minutes for a fruit smoothie and 7 minutes for a vegetable smoothie\nm += 5 * FruitSmoothies + 7 * VegetableSmoothies <= 400\n\n# Total time on the blending machine should not exceed 400 minutes per day:\n# 5 minutes for a fruit smoothie and 4 minutes for a vegetable smoothie\nm += 5 * FruitSmoothies + 4 * VegetableSmoothies <= 400\n\n# Objective\n# Maximize profit (4 dollars per fruit smoothie, 5 dollars per vegetable smoothie):\nm.maximize(4 * FruitSmoothies + 5 * VegetableSmoothies)\n", "entities": [{"start": 23, "end": 28, "word": "fruit", "entity_group": "VAR", "score": 0.99930027196253}, {"start": 33, "end": 52, "word": "vegetable smoothies", "entity_group": "VAR", "score": 0.9999568192932726}, {"start": 64, "end": 65, "word": "5", "entity_group": "PARAM", "score": 0.9996241883404058}, {"start": 101, "end": 102, "word": "5", "entity_group": "PARAM", "score": 0.9996571661166354}, {"start": 145, "end": 159, "word": "fruit smoothie", "entity_group": "VAR", "score": 0.9987799260192949}, {"start": 171, "end": 172, "word": "7", "entity_group": "PARAM", "score": 0.9996030211905496}, {"start": 208, "end": 209, "word": "4", "entity_group": "PARAM", "score": 0.9996580963134247}, {"start": 252, "end": 270, "word": "vegetable smoothie", "entity_group": "VAR", "score": 0.9994476877445243}, {"start": 277, "end": 283, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999854850526786}, {"start": 288, "end": 302, "word": "fruit smoothie", "entity_group": "VAR", "score": 0.9999776803622754}, {"start": 308, "end": 309, "word": "4", "entity_group": "PARAM", "score": 0.9996181264064153}, {"start": 318, "end": 324, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999346646535918}, {"start": 329, "end": 347, "word": "vegetable smoothie", "entity_group": "VAR", "score": 0.999962182485735}, {"start": 353, "end": 354, "word": "5", "entity_group": "PARAM", "score": 0.9997564535114799}, {"start": 424, "end": 431, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998927539168179}, {"start": 432, "end": 435, "word": "400", "entity_group": "LIMIT", "score": 0.9997768773193786}, {"start": 498, "end": 506, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994907089477179}, {"start": 507, "end": 513, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998862371700117}]}
{"doc_id": "-1379759497", "document": "A logging company has operations in opposite ends of the country. The company cuts three specific trees: Elm, Oak, and Aspen. The west side operation costs $500 to operate per day and produces 10 elm trees 10 oak trees, and 3 aspen trees daily. The east side operation costs $400 to operate per day and produces 8 elm trees, 3 oak trees, and 7 aspen trees daily. The logging company must provide a paper pulp with 30 elm trees, 20 oak trees, and 20 aspen trees per week. How many days a week should each operation be run in order to minimize cost while meeting the requirements.", "order_mapping": {"west side": 0, "east side": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"west side": "500", "east side": "400"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "30", "terms": {"west side": "10", "east side": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "20", "terms": {"west side": "10", "east side": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "20", "terms": {"west side": "3", "east side": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Days of operation for the west side\n- y: Days of operation for the east side\n\nObjective:\n- The logging company aims to minimize its operating costs. The west side operation costs $500 per day and the east side operation costs $400 per day. Therefore, the objective function is: Minimize 500x + 400y\n\nConstraints:\n- The company must provide a paper pulp with 30 elm trees per week, which translates to: 10x + 8y >= 30\n- The company must provide a paper pulp with 20 oak trees per week, leading to the constraint: 10x + 3y >= 20\n- The company must provide a paper pulp with 20 aspen trees per week, resulting in the constraint: 3x + 7y >= 20\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 400y\nConstraints:\n10x + 8y >= 30\n10x + 3y >= 20\n3x + 7y >= 20", "canonical": {"objective": [500.0, 400.0], "constraints": [[-10.0, -8.0, -30.0], [-10.0, -3.0, -20.0], [-3.0, -7.0, -20.0]]}, "solution": {"x": 2, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of days the west side operation runs per week: WestSideDays\n- Number of days the east side operation runs per week: EastSideDays\n\nConstraints:\n- To meet the weekly requirement of 30 elm trees:\n  10 * WestSideDays + 8 * EastSideDays >= 30\n- To meet the weekly requirement of 20 oak trees:\n  10 * WestSideDays + 3 * EastSideDays >= 20\n- To meet the weekly requirement of 20 aspen trees:\n  3 * WestSideDays + 7 * EastSideDays >= 20\n\nObjective:\n- Minimize the total operational cost:\n  500 * WestSideDays + 400 * EastSideDays\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWestSideDays = intvar(0, 7)  # Number of days the west side operation runs per week\nEastSideDays = intvar(0, 7)  # Number of days the east side operation runs per week\n\n# Constraints\nm = Model()\n\n# Elm trees requirement per week:\nm += 10 * WestSideDays + 8 * EastSideDays >= 30\n# Oak trees requirement per week:\nm += 10 * WestSideDays + 3 * EastSideDays >= 20\n# Aspen trees requirement per week:\nm += 3 * WestSideDays + 7 * EastSideDays >= 20\n\n# Objective\n# Minimize cost (West side operation costs $500 per day, East side operation costs $400 per day):\nm.minimize(500 * WestSideDays + 400 * EastSideDays)\n", "entities": [{"start": 135, "end": 144, "word": "west side", "entity_group": "VAR", "score": 0.9999627406304585}, {"start": 155, "end": 160, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9968788217815877}, {"start": 163, "end": 166, "word": "500", "entity_group": "PARAM", "score": 0.9997253896420402}, {"start": 199, "end": 201, "word": "10", "entity_group": "PARAM", "score": 0.9995546078543167}, {"start": 212, "end": 214, "word": "10", "entity_group": "PARAM", "score": 0.9996284871903874}, {"start": 231, "end": 232, "word": "3", "entity_group": "PARAM", "score": 0.9982181515504065}, {"start": 257, "end": 266, "word": "east side", "entity_group": "VAR", "score": 0.9999565806179999}, {"start": 277, "end": 282, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991074278028801}, {"start": 285, "end": 288, "word": "400", "entity_group": "PARAM", "score": 0.9997253894501882}, {"start": 321, "end": 322, "word": "8", "entity_group": "PARAM", "score": 0.999589993748932}, {"start": 335, "end": 336, "word": "3", "entity_group": "PARAM", "score": 0.9994657096153376}, {"start": 353, "end": 354, "word": "7", "entity_group": "PARAM", "score": 0.9982480431767752}, {"start": 400, "end": 407, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9948822862801446}, {"start": 426, "end": 428, "word": "30", "entity_group": "LIMIT", "score": 0.9986913216244656}, {"start": 441, "end": 443, "word": "20", "entity_group": "LIMIT", "score": 0.9994656466227778}, {"start": 460, "end": 462, "word": "20", "entity_group": "LIMIT", "score": 0.9992080390085983}, {"start": 548, "end": 556, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9735960914807732}, {"start": 557, "end": 561, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9922242859454887}]}
{"doc_id": "724147587", "document": "A farmer has 50 acres of land on which he grows lettuce and spinach. Per acre of lettuce, it cost $10 in watering costs and 2 days of picking time. Per acre of spinach, it costs $12 in watering costs and 1 day of picking time. The farmer has a total of $5000 available for watering costs and 300 days available for picking. If the profit per acre of lettuce is $50 and the profit per acre of spinach is $55, how many acres of each should be grown to maximize profit?", "order_mapping": {"lettuce": 0, "spinach": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"spinach": "55", "lettuce": "50"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5000", "terms": {"lettuce": "10", "spinach": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"lettuce": "2", "spinach": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of lettuce\n- y: Acres of spinach\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of lettuce is $50 and the profit per acre of spinach is $55. Therefore, the objective function is: Maximize 50x + 55y\n\nConstraints:\n- The farmer has 50 acres of land available, so the constraint is: x + y <= 50.\n- The total available budget for watering costs is $5000, leading to the constraint: 10x + 12y <= 5000.\n- The total available picking time is 300 days, resulting in the constraint: 2x + y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 55y\nConstraints:\nx + y <= 50\n10x + 12y <= 5000\n2x + y <= 300", "canonical": {"objective": [-50.0, -55.0], "constraints": [[1.0, 1.0, 50.0], [10.0, 12.0, 5000.0], [2.0, 1.0, 300.0]]}, "solution": {"x": 0, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Acres of lettuce grown: Lettuce\n- Acres of spinach grown: Spinach\n\nConstraints:\n- Total acres of lettuce and spinach should not exceed 50:\n  Lettuce + Spinach <= 50\n- Watering cost for all acres should not exceed $5000 ($10 per acre of lettuce, $12 per acre of spinach):\n  10 * Lettuce + 12 * Spinach <= 5000\n- Picking time for all acres should not exceed 300 days (2 days per acre of lettuce, 1 day per acre of spinach):\n  2 * Lettuce + 1 * Spinach <= 300\n\nObjective:\n- Maximize profit ($50 profit per acre of lettuce, $55 profit per acre of spinach):\n  50 * Lettuce + 55 * Spinach\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLettuce = intvar(0, 999999999)  # Acres of lettuce\nSpinach = intvar(0, 999999999)  # Acres of spinach\n\n# Constraints\nm = Model()\n\n# Total acres of lettuce and spinach should not exceed 50:\nm += Lettuce + Spinach <= 50\n# Watering cost for all acres should not exceed $5000 ($10 per acre of lettuce, $12 per acre of spinach):\nm += 10 * Lettuce + 12 * Spinach <= 5000\n# Picking time for all acres should not exceed 300 days (2 days per acre of lettuce, 1 day per acre of spinach):\nm += 2 * Lettuce + 1 * Spinach <= 300\n\n# Objective\n# Maximize profit ($50 profit per acre of lettuce, $55 profit per acre of spinach):\nm.maximize(50 * Lettuce + 55 * Spinach)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9911483532667343}, {"start": 13, "end": 15, "word": "50", "entity_group": "LIMIT", "score": 0.9986823637642961}, {"start": 48, "end": 55, "word": "lettuce", "entity_group": "VAR", "score": 0.9985892610382356}, {"start": 60, "end": 67, "word": "spinach", "entity_group": "VAR", "score": 0.9997046220563007}, {"start": 82, "end": 89, "word": "lettuce", "entity_group": "VAR", "score": 0.9977506174870201}, {"start": 102, "end": 104, "word": "10", "entity_group": "PARAM", "score": 0.9997118852302423}, {"start": 127, "end": 128, "word": "2", "entity_group": "PARAM", "score": 0.99929018042497}, {"start": 164, "end": 171, "word": "spinach", "entity_group": "VAR", "score": 0.9945568113763984}, {"start": 185, "end": 187, "word": "12", "entity_group": "PARAM", "score": 0.9996956610814506}, {"start": 210, "end": 211, "word": "1", "entity_group": "PARAM", "score": 0.9989403244893568}, {"start": 262, "end": 266, "word": "5000", "entity_group": "LIMIT", "score": 0.9989831526658852}, {"start": 267, "end": 276, "word": "available", "entity_group": "CONST_DIR", "score": 0.9941133013543558}, {"start": 300, "end": 303, "word": "300", "entity_group": "LIMIT", "score": 0.9997123464517681}, {"start": 309, "end": 318, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991429327037482}, {"start": 340, "end": 346, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999408910552531}, {"start": 359, "end": 366, "word": "lettuce", "entity_group": "VAR", "score": 0.9993061161940403}, {"start": 372, "end": 374, "word": "50", "entity_group": "PARAM", "score": 0.9991383623431176}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999325424351373}, {"start": 402, "end": 409, "word": "spinach", "entity_group": "VAR", "score": 0.9991191532431641}, {"start": 415, "end": 417, "word": "55", "entity_group": "PARAM", "score": 0.9995553751880566}, {"start": 462, "end": 470, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 471, "end": 477, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1119351614", "document": "A clothing designer manufactures three dresses: long, short, and mini. These dresses are produced in two different factories: a local one, and a foreign one. Running the local factory for an hour costs $600 and produces 23 long dresses, 11 short dresses, and 13 mini dresses. Running the foreign factory for an hour costs $300 and yields 15 long dresses, 30 short dresses, and 15 mini dresses. To meet customer demands, a minimum of 74 long dresses, 34 short dresses, and 26 mini dresses must be produced daily. Graphically determine a daily production plan that minimizes the cost of meeting the clothing designer\u2019s daily demands.", "order_mapping": {"local factory": 0, "mini dresses": 1, "foreign factory": 2}, "obj_declaration": {"type": "objective", "direction": "minimizes", "name": "cost", "terms": {"local factory": "600", "foreign factory": "300"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "74", "terms": {"local factory": "23", "foreign factory": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "34", "terms": {"local factory": "11", "foreign factory": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "26", "terms": {"local factory": "13", "foreign factory": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours of operation for the local factory\n- y: Hours of operation for the foreign factory\n\nObjective:\n- The clothing designer aims to minimize the cost of meeting the daily demands. Running the local factory for an hour costs $600 and running the foreign factory for an hour costs $300. Therefore, the objective function is: Minimize 600x + 300y\n\nConstraints:\n- To meet customer demands, a minimum of 74 long dresses, 34 short dresses, and 26 mini dresses must be produced daily. This leads to the following constraints:\n    - 23x + 15y >= 74 (for long dresses)\n    - 11x + 30y >= 34 (for short dresses)\n    - 13x + 15y >= 26 (for mini dresses)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 600x + 300y\nConstraints:\n23x + 15y >= 74\n11x + 30y >= 34\n13x + 15y >= 26", "canonical": {"objective": [600.0, 300.0, 0.0], "constraints": [[-23.0, -15.0, 0.0, -74.0], [-11.0, -30.0, 0.0, -34.0], [-13.0, -15.0, 0.0, -26.0]]}, "solution": {"x": 0, "y": 5, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Hours the local factory runs: LocalFactoryHours\n- Hours the foreign factory runs: ForeignFactoryHours\n\nConstraints:\n- To meet the demand for long dresses (at least 74):\n  23 * LocalFactoryHours + 15 * ForeignFactoryHours >= 74\n- To meet the demand for short dresses (at least 34):\n  11 * LocalFactoryHours + 30 * ForeignFactoryHours >= 34\n- To meet the demand for mini dresses (at least 26):\n  13 * LocalFactoryHours + 15 * ForeignFactoryHours >= 26\n\nObjective:\n- Minimize the total cost (Running the local factory costs $600 per hour, running the foreign factory costs $300 per hour):\n  600 * LocalFactoryHours + 300 * ForeignFactoryHours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLocalFactoryHours = intvar(0, 999999999)  # Hours the local factory runs\nForeignFactoryHours = intvar(0, 999999999)  # Hours the foreign factory runs\n\n# Constraints\nm = Model()\n\n# To meet the demand for long dresses:\nm += 23 * LocalFactoryHours + 15 * ForeignFactoryHours >= 74\n# To meet the demand for short dresses:\nm += 11 * LocalFactoryHours + 30 * ForeignFactoryHours >= 34\n# To meet the demand for mini dresses:\nm += 13 * LocalFactoryHours + 15 * ForeignFactoryHours >= 26\n\n# Objective\n# Minimize the total cost (Running the local factory costs $600 per hour, running the foreign factory costs $300 per hour):\nm.minimize(600 * LocalFactoryHours + 300 * ForeignFactoryHours)\n", "entities": [{"start": 177, "end": 190, "word": "local factory", "entity_group": "VAR", "score": 0.9998534680260325}, {"start": 203, "end": 208, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992679949920573}, {"start": 211, "end": 214, "word": "600", "entity_group": "PARAM", "score": 0.9993761956078924}, {"start": 228, "end": 230, "word": "23", "entity_group": "PARAM", "score": 0.9997332855361519}, {"start": 246, "end": 248, "word": "11", "entity_group": "PARAM", "score": 0.9995891995665958}, {"start": 269, "end": 271, "word": "13", "entity_group": "PARAM", "score": 0.9996628625891741}, {"start": 277, "end": 284, "word": "dresses", "entity_group": "VAR", "score": 0.9222824292306218}, {"start": 299, "end": 314, "word": "foreign factory", "entity_group": "VAR", "score": 0.9999258307918415}, {"start": 327, "end": 332, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992533615138202}, {"start": 335, "end": 338, "word": "300", "entity_group": "PARAM", "score": 0.9994755667490868}, {"start": 350, "end": 352, "word": "15", "entity_group": "PARAM", "score": 0.9996776505696398}, {"start": 368, "end": 370, "word": "30", "entity_group": "PARAM", "score": 0.9995893216478925}, {"start": 391, "end": 393, "word": "15", "entity_group": "PARAM", "score": 0.9996162951484473}, {"start": 394, "end": 406, "word": "mini dresses", "entity_group": "VAR", "score": 0.401782352920761}, {"start": 438, "end": 445, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9966576117508976}, {"start": 449, "end": 451, "word": "74", "entity_group": "LIMIT", "score": 0.9993913598985866}, {"start": 467, "end": 469, "word": "34", "entity_group": "LIMIT", "score": 0.9995160709481269}, {"start": 490, "end": 492, "word": "26", "entity_group": "LIMIT", "score": 0.9996750666864562}, {"start": 582, "end": 591, "word": "minimizes", "entity_group": "OBJ_DIR", "score": 0.9933608421811807}, {"start": 596, "end": 600, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9950566782667656}]}
{"doc_id": "-1021533410", "document": "A woodshop makes tables and chairs, using two processes: crafting and polishing. For each table, the woodworkers spend 5 hours crafting and 2 hours polishing. For each chair, the woodworkers spend 2 hours crafting and 1 hour polishing. On any day, there is a maximum of 25 crafting hours available and 15 polishing hours available. The profit from the sale of each table is $1000 and the profit from the sale of each chair is $300. The woodshop can sell everything they make. How should they schedule daily production in order to maximize profit?", "order_mapping": {"tables": 0, "chairs": 1, "table": 0, "chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"table": "1000", "chair": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "25", "terms": {"table": "5", "chair": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "15", "terms": {"table": "2", "chair": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tables produced\n- y: Number of chairs produced\n\nObjective:\n- The woodshop aims to maximize its profit. The profit from the sale of each table is $1000 and the profit from the sale of each chair is $300. Therefore, the objective function is: Maximize 1000x + 300y\n\nConstraints:\n- The woodworkers have a maximum of 25 crafting hours available, and each table requires 5 hours and each chair requires 2 hours for crafting. This leads to the constraint: 5x + 2y <= 25.\n- There are also 15 polishing hours available, and each table requires 2 hours and each chair requires 1 hour for polishing. This results in the constraint: 2x + y <= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1000x + 300y\nConstraints:\n5x + 2y <= 25\n2x + y <= 15", "canonical": {"objective": [-1000.0, -300.0], "constraints": [[5.0, 2.0, 25.0], [2.0, 1.0, 15.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of tables made per day: Tables\n- Number of chairs made per day: Chairs\n\nConstraints:\n- Crafting hours (5 hours per table, 2 hours per chair) should not exceed 25 hours per day:\n  5 * Tables + 2 * Chairs <= 25\n- Polishing hours (2 hours per table, 1 hour per chair) should not exceed 15 hours per day:\n  2 * Tables + 1 * Chairs <= 15\n\nObjective:\n- Maximize profit ($1000 profit per table, $300 profit per chair):\n  1000 * Tables + 300 * Chairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTables = intvar(0, 999999999)  # Number of tables made per day\nChairs = intvar(0, 999999999)  # Number of chairs made per day\n\n# Constraints\nm = Model()\n\n# Crafting hours constraint (5 hours for a table, 2 hours for a chair, max 25 hours available):\nm += 5 * Tables + 2 * Chairs <= 25\n# Polishing hours constraint (2 hours for a table, 1 hour for a chair, max 15 hours available):\nm += 2 * Tables + 1 * Chairs <= 15\n\n# Objective\n# Maximize profit ($1000 per table, $300 per chair):\nm.maximize(1000 * Tables + 300 * Chairs)\n", "entities": [{"start": 17, "end": 23, "word": "tables", "entity_group": "VAR", "score": 0.9989829426644378}, {"start": 28, "end": 34, "word": "chairs", "entity_group": "VAR", "score": 0.9996469028649165}, {"start": 93, "end": 98, "word": "table", "entity_group": "VAR", "score": 0.9997993697984835}, {"start": 123, "end": 124, "word": "5", "entity_group": "PARAM", "score": 0.9996177000477224}, {"start": 144, "end": 145, "word": "2", "entity_group": "PARAM", "score": 0.9993549231423253}, {"start": 173, "end": 178, "word": "chair", "entity_group": "VAR", "score": 0.9998235638803045}, {"start": 203, "end": 204, "word": "2", "entity_group": "PARAM", "score": 0.9996590989541243}, {"start": 224, "end": 225, "word": "1", "entity_group": "PARAM", "score": 0.9981589439440874}, {"start": 278, "end": 280, "word": "25", "entity_group": "LIMIT", "score": 0.9993952253273888}, {"start": 296, "end": 305, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982850827415143}, {"start": 310, "end": 312, "word": "15", "entity_group": "LIMIT", "score": 0.9989173224900345}, {"start": 329, "end": 338, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991289370272217}, {"start": 345, "end": 351, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998343022635029}, {"start": 374, "end": 379, "word": "table", "entity_group": "VAR", "score": 0.999247721577545}, {"start": 385, "end": 389, "word": "1000", "entity_group": "PARAM", "score": 0.9996213980017254}, {"start": 398, "end": 404, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999202534637099}, {"start": 427, "end": 432, "word": "chair", "entity_group": "VAR", "score": 0.9980486089808887}, {"start": 438, "end": 441, "word": "300", "entity_group": "PARAM", "score": 0.9997413484182692}, {"start": 543, "end": 551, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9979851631978022}, {"start": 552, "end": 558, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997295254659694}]}
{"doc_id": "-1374720410", "document": "A factory makes backpacks and handbags using a special machine. This machine must be operated for at least 3000 minutes per week. Each backpack takes 20 minutes on the machine while each handbag takes 15 minutes on the machine. The factory must make a minimum of 180 items total. If the cost for producing a backpack is $5 and the cost for producing a handbag is $8, how many of each should be made to minimize costs?", "order_mapping": {"backpacks": 0, "handbags": 1, "backpack": 0, "handbag": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"handbag": "8", "backpack": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "3000", "terms": {"backpack": "20", "handbag": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "180", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of backpacks made\n- y: Number of handbags made\n\nObjective:\n- The factory aims to minimize its costs. Given that the cost for producing a backpack is $5 and the cost for producing a handbag is $8, the objective function is: Minimize 5x + 8y\n\nConstraints:\n- The machine must be operated for at least 3000 minutes per week. Each backpack takes 20 minutes on the machine while each handbag takes 15 minutes on the machine, leading to the constraint: 20x + 15y >= 3000.\n- The factory must make a minimum of 180 items total, resulting in the constraint: x + y >= 180.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 8y\nConstraints:\n20x + 15y >= 3000\nx + y >= 180", "canonical": {"objective": [5.0, 8.0], "constraints": [[-20.0, -15.0, -3000.0], [-1.0, -1.0, -180.0]]}, "solution": {"x": 180, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of backpacks made: Backpacks\n- Number of handbags made: Handbags\n\nConstraints:\n- Machine operation time for backpacks and handbags should be at least 3000 minutes per week:\n  20 * Backpacks + 15 * Handbags >= 3000\n- Total number of items (backpacks and handbags) made should be at least 180:\n  Backpacks + Handbags >= 180\n\nObjective:\n- Minimize production costs (5 dollars per backpack, 8 dollars per handbag):\n  5 * Backpacks + 8 * Handbags\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBackpacks = intvar(0, 999999999)  # Number of backpacks made\nHandbags = intvar(0, 999999999)  # Number of handbags made\n\n# Constraints\nm = Model()\n\n# The machine must be operated for at least 3000 minutes per week:\nm += 20 * Backpacks + 15 * Handbags >= 3000\n# The factory must make a minimum of 180 items total:\nm += Backpacks + Handbags >= 180\n\n# Objective\n# Minimize costs (5 dollars per backpack, 8 dollars per handbag):\nm.minimize(5 * Backpacks + 8 * Handbags)\n", "entities": [{"start": 16, "end": 25, "word": "backpacks", "entity_group": "VAR", "score": 0.9989039075349642}, {"start": 30, "end": 38, "word": "handbags", "entity_group": "VAR", "score": 0.9994275559304996}, {"start": 99, "end": 107, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989772526731097}, {"start": 108, "end": 112, "word": "3000", "entity_group": "LIMIT", "score": 0.9997596456099005}, {"start": 137, "end": 145, "word": "backpack", "entity_group": "VAR", "score": 0.9995459691294306}, {"start": 152, "end": 154, "word": "20", "entity_group": "PARAM", "score": 0.9994786477195585}, {"start": 189, "end": 196, "word": "handbag", "entity_group": "VAR", "score": 0.9995153515691203}, {"start": 203, "end": 205, "word": "15", "entity_group": "PARAM", "score": 0.9994531991089897}, {"start": 255, "end": 262, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9942050695696705}, {"start": 266, "end": 269, "word": "180", "entity_group": "LIMIT", "score": 0.9996587782972292}, {"start": 291, "end": 295, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9972391585244197}, {"start": 312, "end": 320, "word": "backpack", "entity_group": "VAR", "score": 0.9997311358126437}, {"start": 326, "end": 327, "word": "5", "entity_group": "PARAM", "score": 0.9984664649835787}, {"start": 336, "end": 340, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9983642799277307}, {"start": 357, "end": 364, "word": "handbag", "entity_group": "VAR", "score": 0.999515304080825}, {"start": 370, "end": 371, "word": "8", "entity_group": "PARAM", "score": 0.999592911355233}, {"start": 409, "end": 417, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997011859831088}, {"start": 418, "end": 423, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990205570710967}]}
{"doc_id": "-2050865263", "document": "A video game store sells regular games and collector's edition games. Each regular game costs the store $30 while each collector's edition game costs the store $50.  The profit per regular game sold is $20 while the profit per collector's edition game sold is $30. The store can sell at most 100 video games of either type per month and wants to spend at most $4000. How many of each should the store stock to maximize profit?", "order_mapping": {"regular games": 0, "collector's edition games": 1, "regular game": 0, "collector's edition game": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular game": "20", "collector's edition game": "30"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "4000", "terms": {"regular game": "30", "collector's edition game": "50"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular games stocked\n- y: Number of collector's edition games stocked\n\nObjective:\n- The store aims to maximize its profit. The profit per regular game sold is $20 while the profit per collector's edition game sold is $30. Therefore, the objective function is: Maximize 20x + 30y\n\nConstraints:\n- The store can sell at most 100 video games of either type per month, leading to the constraint: x + y <= 100.\n- The store wants to spend at most $4000, so the constraint is: 30x + 50y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 30y\nConstraints:\nx + y <= 100\n30x + 50y <= 4000", "canonical": {"objective": [-20.0, -30.0], "constraints": [[1.0, 1.0, 100.0], [30.0, 50.0, 4000.0]]}, "solution": {"x": 50, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of regular games stocked: RegularGames\n- Number of collector's edition games stocked: CollectorsEditionGames\n\nConstraints:\n- Total number of games stocked should not exceed 100 per month:\n  RegularGames + CollectorsEditionGames <= 100\n- Total cost of stocking games should not exceed $4000 (costs are $30 for regular games and $50 for collector's edition games):\n  30 * RegularGames + 50 * CollectorsEditionGames <= 4000\n\nObjective:\n- Maximize profit (20 dollars profit per regular game, 30 dollars profit per collector's edition game):\n  20 * RegularGames + 30 * CollectorsEditionGames\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularGames = intvar(0, 999999999)  # Number of regular games stocked\nCollectorsEditionGames = intvar(0, 999999999)  # Number of collector's edition games stocked\n\n# Constraints\nm = Model()\n\n# The store can sell at most 100 video games of either type per month:\nm += RegularGames + CollectorsEditionGames <= 100\n# The store wants to spend at most $4000 on stocking games:\nm += 30 * RegularGames + 50 * CollectorsEditionGames <= 4000\n\n# Objective\n# Maximize profit (20 dollars profit per regular game, 30 dollars profit per collector's edition game):\nm.maximize(20 * RegularGames + 30 * CollectorsEditionGames)\n", "entities": [{"start": 25, "end": 38, "word": "regular games", "entity_group": "VAR", "score": 0.9999778449124114}, {"start": 43, "end": 69, "word": "collector 's edition games", "entity_group": "VAR", "score": 0.9991896890700366}, {"start": 77, "end": 89, "word": "regular game", "entity_group": "VAR", "score": 0.9999798528958925}, {"start": 108, "end": 110, "word": "30", "entity_group": "PARAM", "score": 0.9996383979644698}, {"start": 122, "end": 147, "word": "collector 's edition game", "entity_group": "VAR", "score": 0.9994045718665809}, {"start": 166, "end": 168, "word": "50", "entity_group": "PARAM", "score": 0.9994958471721047}, {"start": 175, "end": 181, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998587229952071}, {"start": 186, "end": 198, "word": "regular game", "entity_group": "VAR", "score": 0.9998799304158528}, {"start": 209, "end": 211, "word": "20", "entity_group": "PARAM", "score": 0.9996975149771875}, {"start": 222, "end": 228, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999399143104075}, {"start": 233, "end": 258, "word": "collector 's edition game", "entity_group": "VAR", "score": 0.9973147008087132}, {"start": 269, "end": 271, "word": "30", "entity_group": "PARAM", "score": 0.9996201021893473}, {"start": 293, "end": 300, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998861728526758}, {"start": 301, "end": 304, "word": "100", "entity_group": "LIMIT", "score": 0.9993684883206996}, {"start": 361, "end": 368, "word": "at most", "entity_group": "CONST_DIR", "score": 0.994657054052131}, {"start": 371, "end": 375, "word": "4000", "entity_group": "LIMIT", "score": 0.9994778934152303}, {"start": 421, "end": 429, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996868626839834}, {"start": 430, "end": 436, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999210075013456}]}
{"doc_id": "193295056", "document": "Two paints of different quality, cheap and expensive, have quality ratings of 50 and 90, respectively. The cheap paint costs $0.30 per liter while the expensive paint costs $1.50 per liter. In order to paint his fence, John wants to use a mix of paint with a quality of at least 80. This ensures that the paint on the fence will withstand a few storms. What blend of the two paints should he mix in order to minimize his cost? [Hint: Let x be the fraction of each liter that is cheap paint and y be the fraction that is expensive paint.]", "order_mapping": {"cheap": 0, "expensive": 1, "cheap paint": 0, "expensive paint": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"cheap paint": "0.30", "expensive paint": "1.50"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "80", "terms": {"cheap": "50", "expensive": "90"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Fraction of liters of cheap paint\n- y: Fraction of liters of expensive paint\n\nObjective:\n- John wants to minimize his cost. The cheap paint costs $0.30 per liter while the expensive paint costs $1.50 per liter. Therefore, the objective function is: Minimize 0.30x + 1.50y\n\nConstraints:\n- John wants to use a mix of paint with a quality of at least 80, which can be represented as: 50x + 90y >= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.30x + 1.50y\nConstraints:\n50x + 90y >= 80", "canonical": {"objective": [0.3, 1.5], "constraints": [[-50.0, -90.0, -80.0]]}, "solution": {"x": 2, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Fraction of the liter that is cheap paint: x\n- Fraction of the liter that is expensive paint: y\n\nConstraints:\n- The mix should have a quality of at least 80, calculated as 50*x + 90*y >= 80\n- The sum of fractions x and y should equal 1 (100% of the mix)\n\nObjective:\n- Minimize cost, which is calculated as 0.30*x + 1.50*y\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar, minimize\n\n# Decision Variables\nx = intvar(0, 999999999)  # Fraction of the liter that is cheap paint\ny = intvar(0, 999999999)  # Fraction of the liter that is expensive paint\n\n# Constraints\nm = Model()\n\n# The mix should have a quality of at least 80\n# Quality is calculated as: 50*x + 90*y >= 80\nm += (50*x + 90*y >= 80)\n\n# The sum of fractions x and y should equal 1 (100% of the mix)\nm += (x + y == 1)\n\n# Objective\n# Minimize cost: 0.30*x + 1.50*y\nm.minimize(0.30*x + 1.50*y)\n", "entities": [{"start": 34, "end": 39, "word": "cheap", "entity_group": "VAR", "score": 0.9995712815992284}, {"start": 44, "end": 53, "word": "expensive", "entity_group": "VAR", "score": 0.9997592689019679}, {"start": 80, "end": 82, "word": "50", "entity_group": "PARAM", "score": 0.9995122998661238}, {"start": 87, "end": 89, "word": "90", "entity_group": "PARAM", "score": 0.9995855992725599}, {"start": 111, "end": 122, "word": "cheap paint", "entity_group": "VAR", "score": 0.9999393567949153}, {"start": 123, "end": 128, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993737617006584}, {"start": 131, "end": 135, "word": "0.30", "entity_group": "PARAM", "score": 0.9995254312738128}, {"start": 156, "end": 171, "word": "expensive paint", "entity_group": "VAR", "score": 0.9999294748542834}, {"start": 172, "end": 177, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998478534535822}, {"start": 180, "end": 184, "word": "1.50", "entity_group": "PARAM", "score": 0.9996195723923494}, {"start": 278, "end": 286, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9972249435609222}, {"start": 287, "end": 289, "word": "80", "entity_group": "LIMIT", "score": 0.9994074585486359}, {"start": 418, "end": 426, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9921991334997089}, {"start": 431, "end": 435, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989319095187122}]}
{"doc_id": "-590492809", "document": "Jane goes to a supplement store that sells two powders, Alpha and Beta, for iron and biotin. The cost per scoop of alpha is $1 while the cost per scoop of Beta is $2. A scoop of Alpha contains 5 grams of iron and 20 grams of biotin. A scoop of Beta contains 10 grams if iron and 3 grams of biotin. A doctor has recommended that Jane takes at least 50 grams of iron and 40 grams of biotin daily. Formulate as a LP to minimize cost.", "order_mapping": {"Alpha": 0, "Beta": 1, "alpha": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"alpha": "1", "Beta": "2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"Alpha": "5", "Beta": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"Alpha": "20", "Beta": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of scoops of Alpha\n- y: Number of scoops of Beta\n\nObjective:\n- The objective is to minimize the cost of the supplements. The cost per scoop of Alpha is $1, and the cost per scoop of Beta is $2. Therefore, the objective function is: Minimize x + 2y\n\nConstraints:\n- Jane needs to consume at least 50 grams of iron daily, so the constraint is: 5x + 10y >= 50\n- Jane needs to consume at least 40 grams of biotin daily, leading to the constraint: 20x + 3y >= 40\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 2y\nConstraints:\n5x + 10y >= 50\n20x + 3y >= 40", "canonical": {"objective": [1.0, 2.0], "constraints": [[-5.0, -10.0, -50.0], [-20.0, -3.0, -40.0]]}, "solution": {"x": 2, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of scoops of Alpha: Alpha\n- Number of scoops of Beta: Beta\n\nConstraints:\n- Jane needs at least 50 grams of iron daily:\n  5 * Alpha + 10 * Beta >= 50\n- Jane needs at least 40 grams of biotin daily:\n  20 * Alpha + 3 * Beta >= 40\n\nObjective:\n- Minimize cost (1 dollar per scoop of Alpha, 2 dollars per scoop of Beta):\n  1 * Alpha + 2 * Beta\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlpha = intvar(0, 999999999)  # Number of scoops of Alpha\nBeta = intvar(0, 999999999)  # Number of scoops of Beta\n\n# Constraints\nm = Model()\n\n# Jane needs at least 50 grams of iron daily:\nm += 5 * Alpha + 10 * Beta >= 50\n# Jane needs at least 40 grams of biotin daily:\nm += 20 * Alpha + 3 * Beta >= 40\n\n# Objective\n# Minimize cost (1 dollar per scoop of Alpha, 2 dollars per scoop of Beta):\nm.minimize(1 * Alpha + 2 * Beta)\n", "entities": [{"start": 57, "end": 62, "word": "Alpha", "entity_group": "VAR", "score": 0.9994321375237674}, {"start": 67, "end": 71, "word": "Beta", "entity_group": "VAR", "score": 0.9997909292494616}, {"start": 100, "end": 104, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9983065264619674}, {"start": 118, "end": 123, "word": "alpha", "entity_group": "VAR", "score": 0.9986620083492124}, {"start": 129, "end": 130, "word": "1", "entity_group": "PARAM", "score": 0.9991381050233487}, {"start": 141, "end": 145, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9988384795945063}, {"start": 159, "end": 163, "word": "Beta", "entity_group": "VAR", "score": 0.9993074007513683}, {"start": 169, "end": 170, "word": "2", "entity_group": "PARAM", "score": 0.9996613364737886}, {"start": 184, "end": 189, "word": "Alpha", "entity_group": "VAR", "score": 0.9993452880023488}, {"start": 199, "end": 200, "word": "5", "entity_group": "PARAM", "score": 0.9997378700965058}, {"start": 219, "end": 221, "word": "20", "entity_group": "PARAM", "score": 0.9997388230702532}, {"start": 251, "end": 255, "word": "Beta", "entity_group": "VAR", "score": 0.9991165006371018}, {"start": 265, "end": 267, "word": "10", "entity_group": "PARAM", "score": 0.999750240089929}, {"start": 286, "end": 287, "word": "3", "entity_group": "PARAM", "score": 0.9997245148149307}, {"start": 347, "end": 355, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992466660408958}, {"start": 356, "end": 358, "word": "50", "entity_group": "LIMIT", "score": 0.9997445076494296}, {"start": 377, "end": 379, "word": "40", "entity_group": "LIMIT", "score": 0.9997502307849506}, {"start": 425, "end": 433, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.99231658436771}, {"start": 434, "end": 438, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9967221740505404}]}
{"doc_id": "1655680875", "document": "A farmer has 200 acres of land on which he grows corn and cabbage. It takes 1 day of tractor time and 2 days of hand-picking time per acre of corn. It takes 1.5 days of tractor time and 3 days of hand-picking time per acre of cabbage. In a year, there are 200 days available for tractor use and 275 days available for hand-picking. If the profit per acre of corn is $50 and the profit per acre of cabbage is $70, how many acres of each should be grown in order to maximize profit?", "order_mapping": {"corn": 0, "cabbage": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"corn": "50", "cabbage": "70"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"corn": "1", "cabbage": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "275", "terms": {"corn": "2", "cabbage": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of corn\n- y: Acres of cabbage\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of corn is $50 and the profit per acre of cabbage is $70. Therefore, the objective function is: Maximize 50x + 70y\n\nConstraints:\n- The farmer has 200 acres of land available, so the constraint is: x + y <= 200.\n- The tractor time available is 200 days, and it takes 1 day of tractor time per acre of corn and 1.5 days per acre of cabbage. This leads to the constraint: x + 1.5y <= 200.\n- The hand-picking time available is 275 days, and it takes 2 days of hand-picking time per acre of corn and 3 days per acre of cabbage. This results in the constraint: 2x + 3y <= 275.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 70y\nConstraints:\nx + y <= 200\nx + 1.5y <= 200\n2x + 3y <= 275", "canonical": {"objective": [-50.0, -70.0], "constraints": [[1.0, 1.0, 200.0], [1.0, 1.5, 200.0], [2.0, 3.0, 275.0]]}, "solution": {"x": 136, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Acres of corn grown: Corn\n- Acres of cabbage grown: Cabbage\n\nConstraints:\n- Total acres used should not exceed 200:\n  Corn + Cabbage <= 200\n- Tractor time for corn and cabbage should not exceed 200 days:\n  1 * Corn + 1.5 * Cabbage <= 200\n- Hand-picking time for corn and cabbage should not exceed 275 days:\n  2 * Corn + 3 * Cabbage <= 275\n\nObjective:\n- Maximize profit (50 dollars per acre of corn, 70 dollars per acre of cabbage):\n  50 * Corn + 70 * Cabbage\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCorn = intvar(0, 999999999)  # Acres of corn grown\nCabbage = intvar(0, 999999999)  # Acres of cabbage grown\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 200:\nm += Corn + Cabbage <= 200\n# Tractor time for corn and cabbage should not exceed 200 days:\nm += 1 * Corn + 1.5 * Cabbage <= 200\n# Hand-picking time for corn and cabbage should not exceed 275 days:\nm += 2 * Corn + 3 * Cabbage <= 275\n\n# Objective\n# Maximize profit (50 dollars per acre of corn, 70 dollars per acre of cabbage):\nm.maximize(50 * Corn + 70 * Cabbage)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9911480614762934}, {"start": 13, "end": 16, "word": "200", "entity_group": "LIMIT", "score": 0.9986823639501556}, {"start": 49, "end": 53, "word": "corn", "entity_group": "VAR", "score": 0.9990152717549597}, {"start": 58, "end": 65, "word": "cabbage", "entity_group": "VAR", "score": 0.9993281169889286}, {"start": 77, "end": 78, "word": "1", "entity_group": "PARAM", "score": 0.9996887867398798}, {"start": 103, "end": 104, "word": "2", "entity_group": "PARAM", "score": 0.9994309843988922}, {"start": 145, "end": 149, "word": "corn", "entity_group": "VAR", "score": 0.9974691510489502}, {"start": 161, "end": 164, "word": "1.5", "entity_group": "PARAM", "score": 0.9997176076441989}, {"start": 190, "end": 191, "word": "3", "entity_group": "PARAM", "score": 0.9995690883550686}, {"start": 232, "end": 239, "word": "cabbage", "entity_group": "VAR", "score": 0.9984032540756765}, {"start": 264, "end": 267, "word": "200", "entity_group": "LIMIT", "score": 0.9996495017333499}, {"start": 273, "end": 282, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996013622734331}, {"start": 303, "end": 306, "word": "275", "entity_group": "LIMIT", "score": 0.9997019732363551}, {"start": 312, "end": 321, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983848514672966}, {"start": 350, "end": 356, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999015968459413}, {"start": 369, "end": 373, "word": "corn", "entity_group": "VAR", "score": 0.999306116200743}, {"start": 379, "end": 381, "word": "50", "entity_group": "PARAM", "score": 0.9991381170181781}, {"start": 390, "end": 396, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999390554896281}, {"start": 409, "end": 416, "word": "cabbage", "entity_group": "VAR", "score": 0.9992071624020725}, {"start": 422, "end": 424, "word": "70", "entity_group": "PARAM", "score": 0.9995553517030786}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852266956683}, {"start": 487, "end": 493, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912472675}]}
{"doc_id": "-1356800647", "document": "A factory makes violins and harps. A violin takes 6 hours of woodworking time and 2.5 hours of assembling time. A harp takes 2 hours of woodworking time and 10 hours of assembling time. The factory has at most 100 hours of woodworking time and 150 hours of assembling time available per day among all the workers. The profit per violin is $200 and the profit per harp is $350. How many of each instrument should the factory make to maximize profits?", "order_mapping": {"violins": 0, "harps": 1, "violin": 0, "harp": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"harp": "350", "violin": "200"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "100", "terms": {"violin": "6", "harp": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "150", "terms": {"violin": "2.5", "harp": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of violins produced\n- y: Number of harps produced\n\nObjective:\n- The factory aims to maximize its profits. The profit per violin is $200 and the profit per harp is $350. Therefore, the objective function is: Maximize 200x + 350y\n\nConstraints:\n- The factory has at most 100 hours of woodworking time available per day and each violin takes 6 hours of woodworking time and each harp takes 2 hours. This leads to the constraint: 6x + 2y <= 100.\n- The factory has at most 150 hours of assembling time available per day and each violin takes 2.5 hours of assembling time and each harp takes 10 hours. This results in the constraint: 2.5x + 10y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 350y\nConstraints:\n6x + 2y <= 100\n2.5x + 10y <= 150", "canonical": {"objective": [-200.0, -350.0], "constraints": [[6.0, 2.0, 100.0], [2.5, 10.0, 150.0]]}, "solution": {"x": 12, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Number of violins made: Violins\n- Number of harps made: Harps\n\nConstraints:\n- Woodworking time for all instruments should not exceed 100 hours:\n  6 * Violins + 2 * Harps <= 100\n- Assembling time for all instruments should not exceed 150 hours:\n  2.5 * Violins + 10 * Harps <= 150\n\nObjective:\n- Maximize profits ($200 per violin, $350 per harp):\n  200 * Violins + 350 * Harps\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nViolins = intvar(0, 999999999)  # Number of violins made\nHarps = intvar(0, 999999999)  # Number of harps made\n\n# Constraints\nm = Model()\n\n# Woodworking time constraints (at most 100 hours available):\nm += 6 * Violins + 2 * Harps <= 100\n# Assembling time constraints (at most 150 hours available):\nm += 2.5 * Violins + 10 * Harps <= 150\n\n# Objective\n# Maximize profits ($200 per violin, $350 per harp):\nm.maximize(200 * Violins + 350 * Harps)\n", "entities": [{"start": 16, "end": 23, "word": "violins", "entity_group": "VAR", "score": 0.999634525162375}, {"start": 28, "end": 33, "word": "harps", "entity_group": "VAR", "score": 0.999812536645941}, {"start": 38, "end": 44, "word": "violin", "entity_group": "VAR", "score": 0.9996947334130214}, {"start": 51, "end": 52, "word": "6", "entity_group": "PARAM", "score": 0.9997012084521394}, {"start": 83, "end": 86, "word": "2.5", "entity_group": "PARAM", "score": 0.9994533601047877}, {"start": 116, "end": 120, "word": "harp", "entity_group": "VAR", "score": 0.9996886997198466}, {"start": 127, "end": 128, "word": "2", "entity_group": "PARAM", "score": 0.9995414207240645}, {"start": 159, "end": 161, "word": "10", "entity_group": "PARAM", "score": 0.999453232568204}, {"start": 205, "end": 212, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983522815888743}, {"start": 213, "end": 216, "word": "100", "entity_group": "LIMIT", "score": 0.9997072875159914}, {"start": 247, "end": 250, "word": "150", "entity_group": "LIMIT", "score": 0.9992867469319768}, {"start": 322, "end": 328, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999046930666837}, {"start": 333, "end": 339, "word": "violin", "entity_group": "VAR", "score": 0.9993053104323286}, {"start": 345, "end": 348, "word": "200", "entity_group": "PARAM", "score": 0.9993469761766939}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998655578349785}, {"start": 368, "end": 372, "word": "harp", "entity_group": "VAR", "score": 0.9983777760538504}, {"start": 378, "end": 381, "word": "350", "entity_group": "PARAM", "score": 0.9994256206353578}, {"start": 439, "end": 447, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998122867790796}, {"start": 448, "end": 455, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996202407577269}]}
{"doc_id": "-1735682655", "document": "A gardener has 30 acres to grow peas and beans. Each acre of peas requires $30 of bug-spray and 2 hours of care-taking. Each acre of beans requires $50 of bug-spray and 1.5 hours of care-taking. The gardener has at most $1300 available to spend on bug-spray and 50 hours available to spend on care-taking. If the profit per acre of peas is $100 and the profit per acre of beans is $160, how many acres of each should the gardener grow to maximize profit?", "order_mapping": {"peas": 0, "beans": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peas": "100", "beans": "160"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "30", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1300", "terms": {"peas": "30", "beans": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"peas": "2", "beans": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of peas\n- y: Acres of beans\n\nObjective:\n- The gardener aims to maximize profit. The profit per acre of peas is $100 and the profit per acre of beans is $160. Therefore, the objective function is: Maximize 100x + 160y\n\nConstraints:\n- The gardener has 30 acres available for growing peas and beans, leading to the constraint: x + y <= 30.\n- The gardener has at most $1300 available to spend on bug-spray, leading to the constraint: 30x + 50y <= 1300.\n- The gardener has 50 hours available to spend on care-taking, leading to the constraint: 2x + 1.5y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 160y\nConstraints:\nx + y <= 30\n30x + 50y <= 1300\n2x + 1.5y <= 50", "canonical": {"objective": [-100.0, -160.0], "constraints": [[1.0, 1.0, 30.0], [30.0, 50.0, 1300.0], [2.0, 1.5, 50.0]]}, "solution": {"x": 10, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of acres of peas grown: Peas\n- Number of acres of beans grown: Beans\n\nConstraints:\n- Total acres used should not exceed 30:\n  Peas + Beans <= 30\n- Bug-spray budget constraint: $30 per acre for peas and $50 per acre for beans should not exceed $1300:\n  30 * Peas + 50 * Beans <= 1300\n- Care-taking time constraint: 2 hours per acre for peas and 1.5 hours per acre for beans should not exceed 50 hours:\n  2 * Peas + 1.5 * Beans <= 50\n\nObjective:\n- Maximize profit ($100 profit per acre of peas and $160 profit per acre of beans):\n  100 * Peas + 160 * Beans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeas = intvar(0, 999999999)  # Number of acres of peas\nBeans = intvar(0, 999999999)  # Number of acres of beans\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 30:\nm += Peas + Beans <= 30\n# Bug-spray budget constraint: $30 per acre for peas and $50 per acre for beans should not exceed $1300:\nm += 30 * Peas + 50 * Beans <= 1300\n# Care-taking time constraint: 2 hours per acre for peas and 1.5 hours per acre for beans should not exceed 50 hours:\nm += 2 * Peas + 1.5 * Beans <= 50\n\n# Objective\n# Maximize profit ($100 profit per acre of peas and $160 profit per acre of beans):\nm.maximize(100 * Peas + 160 * Beans)\n", "entities": [{"start": 11, "end": 14, "word": "has", "entity_group": "CONST_DIR", "score": 0.991099076714376}, {"start": 15, "end": 17, "word": "30", "entity_group": "LIMIT", "score": 0.9987862712981443}, {"start": 32, "end": 36, "word": "peas", "entity_group": "VAR", "score": 0.9988120792457557}, {"start": 41, "end": 46, "word": "beans", "entity_group": "VAR", "score": 0.9995518709944783}, {"start": 62, "end": 66, "word": "peas", "entity_group": "VAR", "score": 0.9996361487067729}, {"start": 78, "end": 80, "word": "30", "entity_group": "PARAM", "score": 0.9996385888631413}, {"start": 100, "end": 101, "word": "2", "entity_group": "PARAM", "score": 0.99970397073851}, {"start": 140, "end": 145, "word": "beans", "entity_group": "VAR", "score": 0.9993695561702652}, {"start": 157, "end": 159, "word": "50", "entity_group": "PARAM", "score": 0.9996385885259679}, {"start": 179, "end": 182, "word": "1.5", "entity_group": "PARAM", "score": 0.9997039982789048}, {"start": 235, "end": 239, "word": "1300", "entity_group": "LIMIT", "score": 0.9984628040517234}, {"start": 240, "end": 249, "word": "available", "entity_group": "CONST_DIR", "score": 0.9970037994979795}, {"start": 278, "end": 280, "word": "50", "entity_group": "LIMIT", "score": 0.9996768798613918}, {"start": 287, "end": 296, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994541731136296}, {"start": 332, "end": 338, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998914971613038}, {"start": 351, "end": 355, "word": "peas", "entity_group": "VAR", "score": 0.9994952128903558}, {"start": 361, "end": 364, "word": "100", "entity_group": "PARAM", "score": 0.9992430237606286}, {"start": 373, "end": 379, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713132}, {"start": 392, "end": 397, "word": "beans", "entity_group": "VAR", "score": 0.9994301095794499}, {"start": 403, "end": 406, "word": "160", "entity_group": "PARAM", "score": 0.9995941446295008}, {"start": 460, "end": 468, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534739831}, {"start": 469, "end": 475, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "1326356284", "document": "A store sells two different scents of hand lotion, Eucalyptus and Citrus. The store owner pays $6 for a bottle of Eucalyptus lotion and $8 for a bottle of Citrus lotion. A bottle of Eucalyptus lotion yields a profit of $1 while a bottle of Citrus lotion yields a profit of $4. The store owner estimates that no more than 1500 bottles of lotion will be sold every month and she does not plan to invest more than $10000 in inventory for these lotions. How many bottles of each lotion should be stocked in order to maximize her total profit?", "order_mapping": {"Eucalyptus": 0, "Citrus": 1, "Eucalyptus lotion": 0, "Citrus lotion": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Eucalyptus lotion": "1", "Citrus lotion": "4"}}, "const_declarations": [{"type": "linear", "direction": "more than", "limit": "10000", "terms": {"Eucalyptus lotion": "6", "Citrus lotion": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "no more than", "limit": "1500", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of Eucalyptus lotion\n- y: Number of bottles of Citrus lotion\n\nObjective:\n- The store owner aims to maximize her total profit. A bottle of Eucalyptus lotion yields a profit of $1 while a bottle of Citrus lotion yields a profit of $4. Therefore, the objective function is: Maximize 1x + 4y\n\nConstraints:\n- The store owner does not plan to invest more than $10000 in inventory for these lotions, leading to the constraint: 6x + 8y <= 10000.\n- The store owner estimates that no more than 1500 bottles of lotion will be sold every month, resulting in the constraint: x + y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 4y\nConstraints:\n6x + 8y <= 10000\nx + y <= 1500", "canonical": {"objective": [-1.0, -4.0], "constraints": [[6.0, 8.0, 10000.0], [1.0, 1.0, 1500.0]]}, "solution": {"x": 0, "y": 1250}, "pseudo_model": "\nDecision Variables:\n- Number of Eucalyptus lotion bottles stocked: Eucalyptus\n- Number of Citrus lotion bottles stocked: Citrus\n\nConstraints:\n- Total number of bottles (Eucalyptus + Citrus) should not exceed 1500:\n  Eucalyptus + Citrus <= 1500\n- Total investment for Eucalyptus ($6 per bottle) and Citrus ($8 per bottle) lotions should not exceed $10000:\n  6 * Eucalyptus + 8 * Citrus <= 10000\n\nObjective:\n- Maximize profit ($1 profit per Eucalyptus lotion bottle, $4 profit per Citrus lotion bottle):\n  1 * Eucalyptus + 4 * Citrus\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEucalyptus = intvar(0, 999999999)  # Number of Eucalyptus lotion bottles\nCitrus = intvar(0, 999999999)  # Number of Citrus lotion bottles\n\n# Constraints\nm = Model()\n\n# Total number of bottles sold should not exceed 1500:\nm += Eucalyptus + Citrus <= 1500\n# The total investment in inventory should not exceed $10000:\nm += 6 * Eucalyptus + 8 * Citrus <= 10000\n\n# Objective\n# Maximize profit ($1 profit per Eucalyptus lotion bottle, $4 profit per Citrus lotion bottle):\nm.maximize(1 * Eucalyptus + 4 * Citrus)\n", "entities": [{"start": 52, "end": 62, "word": "Eucalyptus", "entity_group": "VAR", "score": 0.9988903427359846}, {"start": 67, "end": 73, "word": "Citrus", "entity_group": "VAR", "score": 0.9993389517503338}, {"start": 99, "end": 100, "word": "6", "entity_group": "PARAM", "score": 0.9991830295111074}, {"start": 117, "end": 134, "word": "Eucalyptus lotion", "entity_group": "VAR", "score": 0.9999345084229573}, {"start": 141, "end": 142, "word": "8", "entity_group": "PARAM", "score": 0.9996666965305581}, {"start": 159, "end": 172, "word": "Citrus lotion", "entity_group": "VAR", "score": 0.9999157141351389}, {"start": 187, "end": 204, "word": "Eucalyptus lotion", "entity_group": "VAR", "score": 0.9999780712572779}, {"start": 214, "end": 220, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999449279684863}, {"start": 226, "end": 227, "word": "1", "entity_group": "PARAM", "score": 0.999226548936915}, {"start": 246, "end": 259, "word": "Citrus lotion", "entity_group": "VAR", "score": 0.9999604148750612}, {"start": 269, "end": 275, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999860612726055}, {"start": 281, "end": 282, "word": "4", "entity_group": "PARAM", "score": 0.9995829339322102}, {"start": 316, "end": 328, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9886054451026298}, {"start": 329, "end": 333, "word": "1500", "entity_group": "LIMIT", "score": 0.9997545123925244}, {"start": 409, "end": 418, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9870712997558302}, {"start": 421, "end": 426, "word": "10000", "entity_group": "LIMIT", "score": 0.9996718860967906}, {"start": 522, "end": 530, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9933855116485294}, {"start": 541, "end": 547, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998735365604466}]}
{"doc_id": "298923065", "document": "A jewelry shop designs and crafts two types of necklaces: diamond and gold necklaces. Each diamond necklaces take 3 hours to design and 10 hours to craft. Each gold necklaces take 5 hours to design and 2 hours to craft. The designing team is available for 30 hours and the crafting team is available for 45 hours. The profit is $1500 per diamond necklace and $500 per gold necklace. How many necklaces of each type should the shop make to maximize their profit?", "order_mapping": {"diamond": 0, "gold necklaces": 1, "diamond necklaces": 0, "diamond necklace": 0, "gold necklace": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"diamond necklace": "1500", "gold necklace": "500"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "30", "terms": {"diamond necklaces": "3", "gold necklaces": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "45", "terms": {"diamond necklaces": "10", "gold necklaces": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of diamond necklaces\n- y: Number of gold necklaces\n\nObjective:\n- The jewelry shop aims to maximize its profit. The profit is $1500 per diamond necklace and $500 per gold necklace. Therefore, the objective function is: Maximize 1500x + 500y\n\nConstraints:\n- The designing team is available for 30 hours, and each diamond necklace takes 3 hours to design and each gold necklace takes 5 hours to design. This leads to the constraint: 3x + 5y <= 30.\n- The crafting team is available for 45 hours, and each diamond necklace takes 10 hours to craft and each gold necklace takes 2 hours to craft. This results in the constraint: 10x + 2y <= 45.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1500x + 500y\nConstraints:\n3x + 5y <= 30\n10x + 2y <= 45", "canonical": {"objective": [-1500.0, -500.0], "constraints": [[3.0, 5.0, 30.0], [10.0, 2.0, 45.0]]}, "solution": {"x": 4, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of diamond necklaces made: DiamondNecklaces\n- Number of gold necklaces made: GoldNecklaces\n\nConstraints:\n- Designing team's available hours (30 hours):\n  3 * DiamondNecklaces + 5 * GoldNecklaces <= 30\n- Crafting team's available hours (45 hours):\n  10 * DiamondNecklaces + 2 * GoldNecklaces <= 45\n\nObjective:\n- Maximize profit ($1500 per diamond necklace, $500 per gold necklace):\n  1500 * DiamondNecklaces + 500 * GoldNecklaces\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDiamondNecklaces = intvar(0, 999999999)  # Number of diamond necklaces made\nGoldNecklaces = intvar(0, 999999999)  # Number of gold necklaces made\n\n# Constraints\nm = Model()\n\n# Designing team is available for 30 hours:\nm += 3 * DiamondNecklaces + 5 * GoldNecklaces <= 30\n# Crafting team is available for 45 hours:\nm += 10 * DiamondNecklaces + 2 * GoldNecklaces <= 45\n\n# Objective\n# Maximize profit ($1500 per diamond necklace, $500 per gold necklace):\nm.maximize(1500 * DiamondNecklaces + 500 * GoldNecklaces)\n", "entities": [{"start": 59, "end": 66, "word": "diamond", "entity_group": "VAR", "score": 0.9995255515276725}, {"start": 71, "end": 85, "word": "gold necklaces", "entity_group": "VAR", "score": 0.9999789311067774}, {"start": 93, "end": 110, "word": "diamond necklaces", "entity_group": "VAR", "score": 0.9999832358457144}, {"start": 116, "end": 117, "word": "3", "entity_group": "PARAM", "score": 0.9996867846642656}, {"start": 138, "end": 140, "word": "10", "entity_group": "PARAM", "score": 0.999736411839387}, {"start": 163, "end": 177, "word": "gold necklaces", "entity_group": "VAR", "score": 0.9999788495626118}, {"start": 183, "end": 184, "word": "5", "entity_group": "PARAM", "score": 0.9997173185189293}, {"start": 205, "end": 206, "word": "2", "entity_group": "PARAM", "score": 0.9996924471549449}, {"start": 246, "end": 255, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982274535562735}, {"start": 260, "end": 262, "word": "30", "entity_group": "LIMIT", "score": 0.9997248592696621}, {"start": 294, "end": 303, "word": "available", "entity_group": "CONST_DIR", "score": 0.9929113774326205}, {"start": 308, "end": 310, "word": "45", "entity_group": "LIMIT", "score": 0.9997108157509921}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999766466486417}, {"start": 335, "end": 339, "word": "1500", "entity_group": "PARAM", "score": 0.9994563487670637}, {"start": 344, "end": 360, "word": "diamond necklace", "entity_group": "VAR", "score": 0.9999805730363692}, {"start": 367, "end": 370, "word": "500", "entity_group": "PARAM", "score": 0.9996168518524302}, {"start": 375, "end": 388, "word": "gold necklace", "entity_group": "VAR", "score": 0.9999638015391906}, {"start": 447, "end": 455, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996017472989602}, {"start": 462, "end": 468, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998553399283532}]}
{"doc_id": "1932848793", "document": "A vehicle company makes bikes and cars, each requiring use of an assembly machine and a painting machine. It takes 1 hour on the assembly machine and 0.5 hours on the painting machine to make a bike. On the other hand, it takes 3 hours on the assembly machine and 1 hour on the painting machine to make a car. The profit per bike is $1000 and the profit per car is $3000. The assembly machine is available for at most 10 hours per day and the painting machine is available for at most 8 hours per day. How many of each vehicle should the company make in order to maximize profit?", "order_mapping": {"bikes": 0, "cars": 1, "bike": 0, "car": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bike": "1000", "car": "3000"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "10", "terms": {"bike": "1", "car": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "8", "terms": {"bike": "0.5", "car": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bikes\n- y: Number of cars\n\nObjective:\n- The company aims to maximize its profit. The profit per bike is $1000 and the profit per car is $3000. Therefore, the objective function is: Maximize 1000x + 3000y\n\nConstraints:\n- The assembly machine is available for at most 10 hours per day, and it takes 1 hour on the assembly machine to make a bike and 3 hours to make a car. This leads to the constraint: x + 3y <= 10.\n- The painting machine is available for at most 8 hours per day, and it takes 0.5 hours on the painting machine to make a bike and 1 hour to make a car. This results in the constraint: 0.5x + y <= 8.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1000x + 3000y\nConstraints:\nx + 3y <= 10\n0.5x + y <= 8", "canonical": {"objective": [-1000.0, -3000.0], "constraints": [[1.0, 3.0, 10.0], [0.5, 1.0, 8.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of bikes produced: Bikes\n- Number of cars produced: Cars\n\nConstraints:\n- Assembly machine time constraint (1 hour for a bike, 3 hours for a car, at most 10 hours available):\n  1*Bikes + 3*Cars <= 10\n- Painting machine time constraint (0.5 hours for a bike, 1 hour for a car, at most 8 hours available):\n  0.5*Bikes + 1*Cars <= 8\n\nObjective:\n- Maximize profit ($1000 per bike, $3000 per car):\n  1000*Bikes + 3000*Cars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBikes = intvar(0, 999999999)  # Number of bikes produced\nCars = intvar(0, 999999999)  # Number of cars produced\n\n# Constraints\nm = Model()\n\n# Assembly machine time constraint (1 hour for a bike, 3 hours for a car, at most 10 hours available):\nm += 1*Bikes + 3*Cars <= 10\n# Painting machine time constraint (0.5 hours for a bike, 1 hour for a car, at most 8 hours available):\nm += 0.5*Bikes + 1*Cars <= 8\n\n# Objective\n# Maximize profit ($1000 per bike, $3000 per car):\nm.maximize(1000*Bikes + 3000*Cars)\n", "entities": [{"start": 24, "end": 29, "word": "bikes", "entity_group": "VAR", "score": 0.9992752053232723}, {"start": 34, "end": 38, "word": "cars", "entity_group": "VAR", "score": 0.9992253203241988}, {"start": 117, "end": 118, "word": "1", "entity_group": "PARAM", "score": 0.9994052201219678}, {"start": 152, "end": 155, "word": "0.5", "entity_group": "PARAM", "score": 0.9996760788800335}, {"start": 196, "end": 200, "word": "bike", "entity_group": "VAR", "score": 0.9996189256422804}, {"start": 232, "end": 233, "word": "3", "entity_group": "PARAM", "score": 0.99968465886583}, {"start": 268, "end": 269, "word": "1", "entity_group": "PARAM", "score": 0.9995128956432937}, {"start": 309, "end": 312, "word": "car", "entity_group": "VAR", "score": 0.9988786625980448}, {"start": 319, "end": 325, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997751021555245}, {"start": 330, "end": 334, "word": "bike", "entity_group": "VAR", "score": 0.9991259873579506}, {"start": 340, "end": 344, "word": "1000", "entity_group": "PARAM", "score": 0.9993474125460022}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998672854958548}, {"start": 364, "end": 367, "word": "car", "entity_group": "VAR", "score": 0.9971859533501021}, {"start": 373, "end": 377, "word": "3000", "entity_group": "PARAM", "score": 0.9996984073302454}, {"start": 418, "end": 425, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987152209023602}, {"start": 426, "end": 428, "word": "10", "entity_group": "LIMIT", "score": 0.999784728621422}, {"start": 485, "end": 492, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998791071651052}, {"start": 493, "end": 494, "word": "8", "entity_group": "LIMIT", "score": 0.9997647915428134}, {"start": 572, "end": 580, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993210574349281}, {"start": 581, "end": 587, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147079}]}
{"doc_id": "500097421", "document": "A bath store makes rubber ducks and toy boats. The profit per rubber duck is $2 and the profit per toy boat is $4. Each rubber ducks take 5 minutes of preparation and 3 minutes of testing to make. Each toy boat takes 8 minutes of preparation and 2 minutes of testing. In a week, there are 1000 minutes available for preparation and 700 minutes available for testing. How many of each should the bath store make to maximize profit?", "order_mapping": {"rubber ducks": 0, "toy boats": 1, "rubber duck": 0, "toy boat": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"rubber duck": "2", "toy boat": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"rubber ducks": "5", "toy boat": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"rubber ducks": "3", "toy boat": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of rubber ducks produced\n- y: Number of toy boats produced\n\nObjective:\n- The bath store aims to maximize its profit. The profit per rubber duck is $2 and the profit per toy boat is $4. Therefore, the objective function is: Maximize 2x + 4y\n\nConstraints:\n- The total time available for preparation and testing is limited. Each rubber duck takes 5 minutes of preparation and 3 minutes of testing, and each toy boat takes 8 minutes of preparation and 2 minutes of testing. The time constraints can be formulated as: 5x + 8y <= 1000 (preparation) and 3x + 2y <= 700 (testing).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 4y\nConstraints:\n5x + 8y <= 1000\n3x + 2y <= 700", "canonical": {"objective": [-2.0, -4.0], "constraints": [[5.0, 8.0, 1000.0], [3.0, 2.0, 700.0]]}, "solution": {"x": 0, "y": 125}, "pseudo_model": "\nDecision Variables:\n- Number of rubber ducks made: RubberDucks\n- Number of toy boats made: ToyBoats\n\nConstraints:\n- Total preparation time for rubber ducks and toy boats should not exceed 1000 minutes per week:\n  5 * RubberDucks + 8 * ToyBoats <= 1000\n- Total testing time for rubber ducks and toy boats should not exceed 700 minutes per week:\n  3 * RubberDucks + 2 * ToyBoats <= 700\n\nObjective:\n- Maximize profit (2 dollars per rubber duck, 4 dollars per toy boat):\n  2 * RubberDucks + 4 * ToyBoats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRubberDucks = intvar(0, 999999999)  # Number of rubber ducks made\nToyBoats = intvar(0, 999999999)  # Number of toy boats made\n\n# Constraints\nm = Model()\n\n# Total preparation time for rubber ducks and toy boats should not exceed 1000 minutes per week:\nm += 5 * RubberDucks + 8 * ToyBoats <= 1000\n# Total testing time for rubber ducks and toy boats should not exceed 700 minutes per week:\nm += 3 * RubberDucks + 2 * ToyBoats <= 700\n\n# Objective\n# Maximize profit (2 dollars per rubber duck, 4 dollars per toy boat):\nm.maximize(2 * RubberDucks + 4 * ToyBoats)\n", "entities": [{"start": 19, "end": 31, "word": "rubber ducks", "entity_group": "VAR", "score": 0.9999557839628971}, {"start": 36, "end": 45, "word": "toy boats", "entity_group": "VAR", "score": 0.999987752086948}, {"start": 52, "end": 58, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999668365343277}, {"start": 63, "end": 74, "word": "rubber duck", "entity_group": "VAR", "score": 0.9999544753968235}, {"start": 80, "end": 81, "word": "2", "entity_group": "PARAM", "score": 0.9996168586231801}, {"start": 90, "end": 96, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999383440017444}, {"start": 101, "end": 109, "word": "toy boat", "entity_group": "VAR", "score": 0.9999532706009868}, {"start": 115, "end": 116, "word": "4", "entity_group": "PARAM", "score": 0.9997482737411373}, {"start": 124, "end": 136, "word": "rubber ducks", "entity_group": "VAR", "score": 0.999981442101347}, {"start": 142, "end": 143, "word": "5", "entity_group": "PARAM", "score": 0.9997187136158405}, {"start": 171, "end": 172, "word": "3", "entity_group": "PARAM", "score": 0.9997101624719316}, {"start": 207, "end": 215, "word": "toy boat", "entity_group": "VAR", "score": 0.9999860394727625}, {"start": 222, "end": 223, "word": "8", "entity_group": "PARAM", "score": 0.9997250189204963}, {"start": 251, "end": 252, "word": "2", "entity_group": "PARAM", "score": 0.9996173143782576}, {"start": 296, "end": 300, "word": "1000", "entity_group": "LIMIT", "score": 0.9997468522877367}, {"start": 309, "end": 318, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993119752396278}, {"start": 339, "end": 342, "word": "700", "entity_group": "LIMIT", "score": 0.9997516689627373}, {"start": 351, "end": 360, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978030512664903}, {"start": 422, "end": 430, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993350363977429}, {"start": 431, "end": 437, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997873425507654}]}
{"doc_id": "-1620664428", "document": "A store sells honey-roasted almonds and chocolate-covered almonds in bulk. The first mix contains 30% honey-roasted almonds and 70% chocolate-covered almonds. The second mix contains 40% honey-roasted almonds and 60% chocolate-covered almonds. The store has on hand 100 kg of honey-roasted almonds and 150 kg of chocolate-covered almonds. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?", "order_mapping": {"first mix": 0, "second mix": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"first mix": "12", "second mix": "15"}}, "const_declarations": [{"type": "linear", "direction": "has on hand", "limit": "100", "terms": {"first mix": "30%", "second mix": "40%"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has on hand", "limit": "150", "terms": {"first mix": "70%", "second mix": "60%"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of the first mix (honey-roasted almonds and chocolate-covered almonds)\n- y: kg of the second mix (honey-roasted almonds and chocolate-covered almonds)\n\nObjective:\n- The store aims to maximize its profit. The profit per kg of the first mix is $12 and the profit per kg of the second mix is $15. Therefore, the objective function is: Maximize 12x + 15y\n\nConstraints:\n- The store has 100 kg of honey-roasted almonds and 150 kg of chocolate-covered almonds. This leads to the following constraints:\n    - 0.30x + 0.40y <= 100 (honey-roasted almonds constraint)\n    - 0.70x + 0.60y <= 150 (chocolate-covered almonds constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 15y\nConstraints:\n0.30x + 0.40y <= 100\n0.70x + 0.60y <= 150", "canonical": {"objective": [-12.0, -15.0], "constraints": [[0.3, 0.4, 100.0], [0.7, 0.6, 150.0]]}, "solution": {"x": 0, "y": 250}, "pseudo_model": "\nDecision Variables:\n- kg of the first mix prepared: FirstMix\n- kg of the second mix prepared: SecondMix\n\nConstraints:\n- The store has on hand 100 kg of honey-roasted almonds (30% of FirstMix and 40% of SecondMix should not exceed 100 kg):\n  0.30 * FirstMix + 0.40 * SecondMix <= 100\n- The store has on hand 150 kg of chocolate-covered almonds (70% of FirstMix and 60% of SecondMix should not exceed 150 kg):\n  0.70 * FirstMix + 0.60 * SecondMix <= 150\n\nObjective:\n- Maximize profit ($12 per kg of the first mix, $15 per kg of the second mix):\n  12 * FirstMix + 15 * SecondMix\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstMix = intvar(0, 999999999)  # kg of the first mix prepared\nSecondMix = intvar(0, 999999999)  # kg of the second mix prepared\n\n# Constraints\nm = Model()\n\n# The store has on hand 100 kg of honey-roasted almonds:\nm += 0.30 * FirstMix + 0.40 * SecondMix <= 100\n# The store has on hand 150 kg of chocolate-covered almonds:\nm += 0.70 * FirstMix + 0.60 * SecondMix <= 150\n\n# Objective\n# Maximize profit ($12 per kg of the first mix, $15 per kg of the second mix):\nm.maximize(12 * FirstMix + 15 * SecondMix)\n", "entities": [{"start": 84, "end": 93, "word": "first mix", "entity_group": "VAR", "score": 0.9999227296660719}, {"start": 103, "end": 107, "word": "30 %", "entity_group": "PARAM", "score": 0.993667006764249}, {"start": 136, "end": 140, "word": "70 %", "entity_group": "PARAM", "score": 0.994226679791281}, {"start": 175, "end": 185, "word": "second mix", "entity_group": "VAR", "score": 0.9999334691568401}, {"start": 195, "end": 199, "word": "40 %", "entity_group": "PARAM", "score": 0.9936635122101686}, {"start": 228, "end": 232, "word": "60 %", "entity_group": "PARAM", "score": 0.9942268925738544}, {"start": 273, "end": 284, "word": "has on hand", "entity_group": "CONST_DIR", "score": 0.996142573131494}, {"start": 285, "end": 288, "word": "100", "entity_group": "LIMIT", "score": 0.9996868342932926}, {"start": 323, "end": 326, "word": "150", "entity_group": "LIMIT", "score": 0.9996829059070454}, {"start": 370, "end": 376, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998748497142282}, {"start": 391, "end": 400, "word": "first mix", "entity_group": "VAR", "score": 0.999861530261978}, {"start": 406, "end": 408, "word": "12", "entity_group": "PARAM", "score": 0.9992688709571492}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999249793628934}, {"start": 438, "end": 448, "word": "second mix", "entity_group": "VAR", "score": 0.9997898744800982}, {"start": 454, "end": 456, "word": "15", "entity_group": "PARAM", "score": 0.9996778562205144}, {"start": 501, "end": 509, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694937233038}, {"start": 510, "end": 516, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856881307}]}
{"doc_id": "1388676063", "document": "A seafood market sells scallops, mussels, and oysters in packages named seafood medley one and seafood medley two. A package of seafood medley one contains 20 grams of scallops, 30 grams of mussels, and 50 grams of oysters. A package of seafood medley two contains 40 grams of scallops, 40 grams of mussels, and 20 grams of oysters. The market has available 10000 grams of scallops, 12000 grams of mussels, and 11000 grams of oysters. If the profit per package of seafood medley one is $20 and the profit per package of seafood medley two is $25, how many of each should be sold to maximize profit?", "order_mapping": {"seafood medley one": 0, "seafood medley two": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"seafood medley one": "20", "seafood medley two": "25"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "10000", "terms": {"seafood medley one": "20", "seafood medley two": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "12000", "terms": {"seafood medley one": "30", "seafood medley two": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "11000", "terms": {"seafood medley one": "50", "seafood medley two": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of seafood medley one to be sold\n- y: Number of packages of seafood medley two to be sold\n\nObjective:\n- The market aims to maximize its profit. The profit per package of seafood medley one is $20 and the profit per package of seafood medley two is $25. Therefore, the objective function is: Maximize 20x + 25y\n\nConstraints:\n- The market has available 10000 grams of scallops, 12000 grams of mussels, and 11000 grams of oysters. Each package of seafood medley one contains 20 grams of scallops, 30 grams of mussels, and 50 grams of oysters, while each package of seafood medley two contains 40 grams of scallops, 40 grams of mussels, and 20 grams of oysters. These lead to the following constraints:\n    - 20x + 40y <= 10000 (scallops constraint)\n    - 30x + 40y <= 12000 (mussels constraint)\n    - 50x + 20y <= 11000 (oysters constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 25y\nConstraints:\n20x + 40y <= 10000\n30x + 40y <= 12000\n50x + 20y <= 11000", "canonical": {"objective": [-20.0, -25.0], "constraints": [[20.0, 40.0, 10000.0], [30.0, 40.0, 12000.0], [50.0, 20.0, 11000.0]]}, "solution": {"x": 150, "y": 175}, "pseudo_model": "\nDecision Variables:\n- Number of seafood medley one packages sold: SeafoodMedleyOne\n- Number of seafood medley two packages sold: SeafoodMedleyTwo\n\nConstraints:\n- Scallop constraint (10000 grams available):\n  20 * SeafoodMedleyOne + 40 * SeafoodMedleyTwo <= 10000\n- Mussel constraint (12000 grams available):\n  30 * SeafoodMedleyOne + 40 * SeafoodMedleyTwo <= 12000\n- Oyster constraint (11000 grams available):\n  50 * SeafoodMedleyOne + 20 * SeafoodMedleyTwo <= 11000\n\nObjective:\n- Maximize profit ($20 per package of seafood medley one, $25 per package of seafood medley two):\n  20 * SeafoodMedleyOne + 25 * SeafoodMedleyTwo\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSeafoodMedleyOne = intvar(0, 999999999)  # Number of seafood medley one packages sold\nSeafoodMedleyTwo = intvar(0, 999999999)  # Number of seafood medley two packages sold\n\n# Constraints\nm = Model()\n\n# The market has available 10000 grams of scallops:\nm += 20 * SeafoodMedleyOne + 40 * SeafoodMedleyTwo <= 10000\n# The market has available 12000 grams of mussels:\nm += 30 * SeafoodMedleyOne + 40 * SeafoodMedleyTwo <= 12000\n# The market has available 11000 grams of oysters:\nm += 50 * SeafoodMedleyOne + 20 * SeafoodMedleyTwo <= 11000\n\n# Objective\n# Maximize profit ($20 per package of seafood medley one, $25 per package of seafood medley two):\nm.maximize(20 * SeafoodMedleyOne + 25 * SeafoodMedleyTwo)\n", "entities": [{"start": 74, "end": 92, "word": "seafood medley one", "entity_group": "VAR", "score": 0.9742587302257545}, {"start": 97, "end": 115, "word": "seafood medley two", "entity_group": "VAR", "score": 0.943904551092142}, {"start": 131, "end": 149, "word": "seafood medley one", "entity_group": "VAR", "score": 0.9796841777654446}, {"start": 159, "end": 161, "word": "20", "entity_group": "PARAM", "score": 0.9997300699747917}, {"start": 182, "end": 184, "word": "30", "entity_group": "PARAM", "score": 0.9997354896928837}, {"start": 208, "end": 210, "word": "50", "entity_group": "PARAM", "score": 0.9996759454881924}, {"start": 243, "end": 261, "word": "seafood medley two", "entity_group": "VAR", "score": 0.9856870293351255}, {"start": 271, "end": 273, "word": "40", "entity_group": "PARAM", "score": 0.9997300723605457}, {"start": 294, "end": 296, "word": "40", "entity_group": "PARAM", "score": 0.9997354896924835}, {"start": 320, "end": 322, "word": "20", "entity_group": "PARAM", "score": 0.9996004953045015}, {"start": 357, "end": 366, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990432401863685}, {"start": 367, "end": 372, "word": "10000", "entity_group": "LIMIT", "score": 0.9993694954382556}, {"start": 393, "end": 398, "word": "12000", "entity_group": "LIMIT", "score": 0.9997533025355568}, {"start": 422, "end": 427, "word": "11000", "entity_group": "LIMIT", "score": 0.9995395999686998}, {"start": 454, "end": 460, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999359874859827}, {"start": 476, "end": 494, "word": "seafood medley one", "entity_group": "VAR", "score": 0.9931440991375308}, {"start": 500, "end": 502, "word": "20", "entity_group": "PARAM", "score": 0.9991423234753054}, {"start": 511, "end": 517, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999109472043655}, {"start": 533, "end": 551, "word": "seafood medley two", "entity_group": "VAR", "score": 0.9903635850960406}, {"start": 557, "end": 559, "word": "25", "entity_group": "PARAM", "score": 0.9994909928897477}, {"start": 597, "end": 605, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694880339434}, {"start": 606, "end": 612, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856876862}]}
{"doc_id": "-1904851972", "document": "A lighting company makes 2 types of lightbulbs, LED and Halogen. Each type of lightbulb requires time on a plastics machine and a wiring machine. It takes 6 minutes on the plastics machine and 12 minutes on the wiring machine to make a package of LED lightbulbs. On the other hand, it takes 9 minutes on the plastics machine and 10 minutes on the wiring machine to make a package of Halogen lightbulbs. The profit per package of LED lightbulbs is $30 and the profit per package of Halogen lightbulbs is $50. If both machines are available for at most 500 minutes per day, how many packages of each lightbulb should be made to maximize profit?", "order_mapping": {"LED": 0, "Halogen": 1, "LED lightbulbs": 0, "Halogen lightbulbs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"LED lightbulbs": "30", "Halogen lightbulbs": "50"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"LED lightbulbs": "6", "Halogen lightbulbs": "9"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "500", "terms": {"LED lightbulbs": "12", "Halogen lightbulbs": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of LED lightbulbs\n- y: Number of packages of Halogen lightbulbs\n\nObjective:\n- The company aims to maximize its profit. The profit per package of LED lightbulbs is $30 and the profit per package of Halogen lightbulbs is $50. Therefore, the objective function is: Maximize 30x + 50y\n\nConstraints:\n- The total time available on the plastics machine and wiring machine is at most 500 minutes per day. For LED lightbulbs, it takes 6 minutes on the plastics machine and 12 minutes on the wiring machine, and for Halogen lightbulbs, it takes 9 minutes on the plastics machine and 10 minutes on the wiring machine. These constraints can be formulated as:\n    - 6x + 9y <= 500 (plastics machine constraint)\n    - 12x + 10y <= 500 (wiring machine constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 50y\nConstraints:\n6x + 9y <= 500\n12x + 10y <= 500", "canonical": {"objective": [-30.0, -50.0], "constraints": [[6.0, 9.0, 500.0], [12.0, 10.0, 500.0]]}, "solution": {"x": 0, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of LED lightbulb packages made per day: LED\n- Number of Halogen lightbulb packages made per day: Halogen\n\nConstraints:\n- Time on the plastics machine for both types of lightbulbs should not exceed 500 minutes per day:\n  6 * LED + 9 * Halogen <= 500\n- Time on the wiring machine for both types of lightbulbs should not exceed 500 minutes per day:\n  12 * LED + 10 * Halogen <= 500\n\nObjective:\n- Maximize profit (30 dollars per package of LED lightbulbs, 50 dollars per package of Halogen lightbulbs):\n  30 * LED + 50 * Halogen\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLED = intvar(0, 999999999)  # Number of LED lightbulb packages made per day\nHalogen = intvar(0, 999999999)  # Number of Halogen lightbulb packages made per day\n\n# Constraints\nm = Model()\n\n# Time on the plastics machine for both types of lightbulbs should not exceed 500 minutes per day:\nm += 6 * LED + 9 * Halogen <= 500\n# Time on the wiring machine for both types of lightbulbs should not exceed 500 minutes per day:\nm += 12 * LED + 10 * Halogen <= 500\n\n# Objective\n# Maximize profit (30 dollars per package of LED lightbulbs, 50 dollars per package of Halogen lightbulbs):\nm.maximize(30 * LED + 50 * Halogen)\n", "entities": [{"start": 49, "end": 52, "word": "LED", "entity_group": "VAR", "score": 0.9992621201025692}, {"start": 57, "end": 64, "word": "Halogen", "entity_group": "VAR", "score": 0.9992336667180427}, {"start": 158, "end": 159, "word": "6", "entity_group": "PARAM", "score": 0.9995890404235711}, {"start": 196, "end": 198, "word": "12", "entity_group": "PARAM", "score": 0.9996664267164002}, {"start": 250, "end": 264, "word": "LED lightbulbs", "entity_group": "VAR", "score": 0.9999737959076255}, {"start": 296, "end": 297, "word": "9", "entity_group": "PARAM", "score": 0.9996847286069768}, {"start": 334, "end": 336, "word": "10", "entity_group": "PARAM", "score": 0.9996664267164013}, {"start": 388, "end": 406, "word": "Halogen lightbulbs", "entity_group": "VAR", "score": 0.9999451563427493}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999072835354478}, {"start": 435, "end": 449, "word": "LED lightbulbs", "entity_group": "VAR", "score": 0.9999632996207398}, {"start": 455, "end": 457, "word": "30", "entity_group": "PARAM", "score": 0.9996214515222559}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998655853568482}, {"start": 488, "end": 506, "word": "Halogen lightbulbs", "entity_group": "VAR", "score": 0.9998728572000136}, {"start": 512, "end": 514, "word": "50", "entity_group": "PARAM", "score": 0.9997464454285803}, {"start": 552, "end": 559, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992405178975776}, {"start": 560, "end": 563, "word": "500", "entity_group": "LIMIT", "score": 0.999783228347909}, {"start": 636, "end": 644, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994907089481169}, {"start": 645, "end": 651, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998862371700116}]}
{"doc_id": "-1880541131", "document": "An office is purchasing two different printers for their entire office. Printer A can print 10 sheets per minute, requires 3 ink cartridges per year, and costs $500. Printer B can print 30 sheets per minute, requires 8 ink cartridges per year, and costs $1200. The office wants to make sure they can print at least 100 sheets per minute total and that they use at most 27 ink cartridges per year. How many of each printer should be purchased to minimize costs?", "order_mapping": {"Printer A": 0, "Printer B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Printer A": "500", "Printer B": "1200"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"Printer A": "10", "Printer B": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "27", "terms": {"Printer A": "3", "Printer B": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Printer A to be purchased\n- y: Number of Printer B to be purchased\n\nObjective:\n- The office wants to minimize costs. Printer A costs $500 and Printer B costs $1200. Therefore, the objective function is: Minimize 500x + 1200y\n\nConstraints:\n- The office needs to print at least 100 sheets per minute in total, leading to the constraint: 10x + 30y >= 100.\n- The office should use at most 27 ink cartridges per year, leading to the constraint: 3x + 8y <= 27.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 1200y\nConstraints:\n10x + 30y >= 100\n3x + 8y <= 27", "canonical": {"objective": [500.0, 1200.0], "constraints": [[-10.0, -30.0, -100.0], [3.0, 8.0, 27.0]]}, "solution": {"x": 1, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of Printer A units purchased: PrinterA\n- Number of Printer B units purchased: PrinterB\n\nConstraints:\n- Total printing capacity should be at least 100 sheets per minute:\n  10 * PrinterA + 30 * PrinterB >= 100\n- Total ink cartridge usage should be at most 27 per year:\n  3 * PrinterA + 8 * PrinterB <= 27\n\nObjective:\n- Minimize total costs ($500 for Printer A, $1200 for Printer B):\n  500 * PrinterA + 1200 * PrinterB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPrinterA = intvar(0, 999999999)  # Number of Printer A units\nPrinterB = intvar(0, 999999999)  # Number of Printer B units\n\n# Constraints\nm = Model()\n\n# The office needs to print at least 100 sheets per minute:\nm += 10 * PrinterA + 30 * PrinterB >= 100\n# The office can use at most 27 ink cartridges per year:\nm += 3 * PrinterA + 8 * PrinterB <= 27\n\n# Objective\n# Minimize costs ($500 for Printer A, $1200 for Printer B):\nm.minimize(500 * PrinterA + 1200 * PrinterB)\n", "entities": [{"start": 73, "end": 82, "word": "Printer A", "entity_group": "VAR", "score": 0.9999785378961025}, {"start": 93, "end": 95, "word": "10", "entity_group": "PARAM", "score": 0.9996962161936517}, {"start": 125, "end": 126, "word": "3", "entity_group": "PARAM", "score": 0.998876496510303}, {"start": 157, "end": 162, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988920218447757}, {"start": 165, "end": 168, "word": "500", "entity_group": "PARAM", "score": 0.9997340998195222}, {"start": 171, "end": 180, "word": "Printer B", "entity_group": "VAR", "score": 0.9999818782193858}, {"start": 191, "end": 193, "word": "30", "entity_group": "PARAM", "score": 0.9996578589064076}, {"start": 223, "end": 224, "word": "8", "entity_group": "PARAM", "score": 0.9988764965103039}, {"start": 255, "end": 260, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9982011592534725}, {"start": 263, "end": 267, "word": "1200", "entity_group": "PARAM", "score": 0.9996529534455094}, {"start": 315, "end": 323, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990310628118578}, {"start": 324, "end": 327, "word": "100", "entity_group": "LIMIT", "score": 0.999739650746553}, {"start": 370, "end": 377, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987312345992555}, {"start": 378, "end": 380, "word": "27", "entity_group": "LIMIT", "score": 0.9995789002074642}, {"start": 455, "end": 463, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996229716465401}, {"start": 464, "end": 469, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998876020386407}]}
{"doc_id": "207992620", "document": "A hardware manufacturer makes CPUs and GPUs. Each CPU requires 30 minutes of wiring while each GPU requires 90 minutes of wiring. In addition, each CPU requires 50 minutes of soldering and each GPU requires 40 minutes of soldering. The manufacturer has at most 2000 minutes for wiring and at most 2500 minutes for soldering. If the profit per CPU is $300 and the profit per GPU is $500, how many of each should be made to maximize profit?", "order_mapping": {"CPUs": 0, "GPUs": 1, "CPU": 0, "GPU": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"GPU": "500", "CPU": "300"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "2000", "terms": {"CPU": "30", "GPU": "90"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "2500", "terms": {"CPU": "50", "GPU": "40"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of CPUs to be made\n- y: Number of GPUs to be made\n\nObjective:\n- The manufacturer aims to maximize the profit. The profit per CPU is $300 and the profit per GPU is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- The manufacturer has at most 2000 minutes for wiring, and each CPU requires 30 minutes of wiring and each GPU requires 90 minutes of wiring. This leads to the constraint: 30x + 90y <= 2000.\n- The manufacturer has at most 2500 minutes for soldering, and each CPU requires 50 minutes of soldering and each GPU requires 40 minutes of soldering. This results in the constraint: 50x + 40y <= 2500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\n30x + 90y <= 2000\n50x + 40y <= 2500", "canonical": {"objective": [-300.0, -500.0], "constraints": [[30.0, 90.0, 2000.0], [50.0, 40.0, 2500.0]]}, "solution": {"x": 44, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of CPUs made: CPUs\n- Number of GPUs made: GPUs\n\nConstraints:\n- Wiring time constraint (at most 2000 minutes available):\n  30 minutes per CPU + 90 minutes per GPU <= 2000\n- Soldering time constraint (at most 2500 minutes available):\n  50 minutes per CPU + 40 minutes per GPU <= 2500\n\nObjective:\n- Maximize profit ($300 per CPU, $500 per GPU):\n  300 * CPUs + 500 * GPUs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCPUs = intvar(0, 999999999)  # Number of CPUs made\nGPUs = intvar(0, 999999999)  # Number of GPUs made\n\n# Constraints\nm = Model()\n\n# Wiring time constraint (30 minutes per CPU, 90 minutes per GPU, at most 2000 minutes available):\nm += 30 * CPUs + 90 * GPUs <= 2000\n# Soldering time constraint (50 minutes per CPU, 40 minutes per GPU, at most 2500 minutes available):\nm += 50 * CPUs + 40 * GPUs <= 2500\n\n# Objective\n# Maximize profit ($300 per CPU, $500 per GPU):\nm.maximize(300 * CPUs + 500 * GPUs)\n", "entities": [{"start": 30, "end": 34, "word": "CPUs", "entity_group": "VAR", "score": 0.9994557406651665}, {"start": 39, "end": 43, "word": "GPUs", "entity_group": "VAR", "score": 0.9997816872030763}, {"start": 51, "end": 54, "word": "CPU", "entity_group": "VAR", "score": 0.9997017610983259}, {"start": 64, "end": 66, "word": "30", "entity_group": "PARAM", "score": 0.9996623420260762}, {"start": 96, "end": 99, "word": "GPU", "entity_group": "VAR", "score": 0.9997135095726039}, {"start": 109, "end": 111, "word": "90", "entity_group": "PARAM", "score": 0.9994870636368649}, {"start": 151, "end": 154, "word": "CPU", "entity_group": "VAR", "score": 0.9996815189483772}, {"start": 164, "end": 166, "word": "50", "entity_group": "PARAM", "score": 0.9995696678877573}, {"start": 197, "end": 200, "word": "GPU", "entity_group": "VAR", "score": 0.999777876545094}, {"start": 210, "end": 212, "word": "40", "entity_group": "PARAM", "score": 0.9992877677870851}, {"start": 257, "end": 264, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987029432896615}, {"start": 265, "end": 269, "word": "2000", "entity_group": "LIMIT", "score": 0.9997485997564078}, {"start": 293, "end": 300, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992608474060838}, {"start": 301, "end": 305, "word": "2500", "entity_group": "LIMIT", "score": 0.9997543687761017}, {"start": 337, "end": 343, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999863264196977}, {"start": 348, "end": 351, "word": "CPU", "entity_group": "VAR", "score": 0.9995162999909816}, {"start": 357, "end": 360, "word": "300", "entity_group": "PARAM", "score": 0.9991353544962477}, {"start": 369, "end": 375, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997107596603835}, {"start": 380, "end": 383, "word": "GPU", "entity_group": "VAR", "score": 0.9993525534350503}, {"start": 389, "end": 392, "word": "500", "entity_group": "PARAM", "score": 0.999470753240463}, {"start": 430, "end": 438, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 439, "end": 445, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "574568064", "document": "Your client has $60,000 available to invest for a 1 year term. The money can be placed in a trust yielding a 2% return or in a savings account yielding a 3% return. Based on your experience, you advise your client that at least 15% of the investment be placed in the trust and that at most 80% of the investment be placed in the savings account. How much should your client invest in each so as to maximize his return on investment?", "order_mapping": {"trust": 0, "savings account": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"trust": "2", "savings account": "3"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "60,000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "15%", "var": "trust", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "80%", "var": "savings account", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the trust\n- y: Dollars invested in the savings account\n\nObjective:\n- The client wants to maximize the return on investment. The trust yields a 2% return and the savings account yields a 3% return. Therefore, the objective function is: Maximize 0.02x + 0.03y\n\nConstraints:\n- The total amount available for investment is $60,000, so the constraint is: x + y <= 60000.\n- At least 15% of the investment should be placed in the trust, leading to the constraint: x >= 0.15(x + y).\n- At most 80% of the investment should be placed in the savings account, resulting in the constraint: y <= 0.80(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.02x + 0.03y\nConstraints:\nx + y <= 60000\nx >= 0.15(x + y)\ny <= 0.80(x + y)", "canonical": {"objective": [-0.02, -0.03], "constraints": [[1.0, 1.0, 60000.0], [-0.85, 0.15, 0.0], [-0.8, 0.19999999999999996, 0.0]]}, "solution": {"x": 11952, "y": 48048}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the trust: Trust\n- Amount invested in the savings account: SavingsAccount\n\nConstraints:\n- Total investment equals $60,000:\n  Trust + SavingsAccount == 60000\n- At least 15% of the investment must be in the trust:\n  Trust >= 0.15 * 60000\n- At most 80% of the investment can be in the savings account:\n  SavingsAccount <= 0.80 * 60000\n\nObjective:\n- Maximize return on investment (2% return from trust, 3% return from savings account):\n  0.02 * Trust + 0.03 * SavingsAccount\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrust = intvar(0, 60000)  # Amount invested in the trust\nSavingsAccount = intvar(0, 60000)  # Amount invested in the savings account\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $60,000:\nm += Trust + SavingsAccount == 60000\n# At least 15% of the investment be placed in the trust:\nm += Trust >= 0.15 * 60000\n# At most 80% of the investment be placed in the savings account:\nm += SavingsAccount <= 0.80 * 60000\n\n# Objective\n# Maximize return on investment (2% return from trust, 3% return from savings account):\nm.maximize(0.02 * Trust + 0.03 * SavingsAccount)\n", "entities": [{"start": 18, "end": 24, "word": "60,000", "entity_group": "LIMIT", "score": 0.999436397414621}, {"start": 25, "end": 34, "word": "available", "entity_group": "CONST_DIR", "score": 0.9970758056835408}, {"start": 94, "end": 99, "word": "trust", "entity_group": "VAR", "score": 0.9991902972941599}, {"start": 111, "end": 114, "word": "2 %", "entity_group": "PARAM", "score": 0.5400925787957626}, {"start": 115, "end": 121, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9974774100750038}, {"start": 130, "end": 145, "word": "savings account", "entity_group": "VAR", "score": 0.999885672163275}, {"start": 157, "end": 158, "word": "3", "entity_group": "PARAM", "score": 0.9997741357013575}, {"start": 161, "end": 167, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9906324892275764}, {"start": 225, "end": 233, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988319704682188}, {"start": 234, "end": 238, "word": "15 %", "entity_group": "LIMIT", "score": 0.9313500576102652}, {"start": 274, "end": 279, "word": "trust", "entity_group": "VAR", "score": 0.9993962015706653}, {"start": 289, "end": 296, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987238779381001}, {"start": 297, "end": 301, "word": "80 %", "entity_group": "LIMIT", "score": 0.8829590909349}, {"start": 337, "end": 352, "word": "savings account", "entity_group": "VAR", "score": 0.9999830006083673}, {"start": 407, "end": 415, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996844718091213}, {"start": 420, "end": 426, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9953019293671616}]}
{"doc_id": "-1720842504", "document": "A chair store sells leather and mesh chairs. A leather chair costs the store $500 and a mesh chair costs the stores $300. The profit per leather chair sold is $250 and the profit per mesh chair sold is $200. The store does not want to invest more that $50000 on chairs and estimates a monthly demand of at most 125 chairs. How many of each chair should the store stock in order to maximize profit?", "order_mapping": {"leather": 0, "mesh chairs": 1, "leather chair": 0, "mesh chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"leather chair": "250", "mesh chair": "200"}}, "const_declarations": [{"type": "linear", "direction": "more that", "limit": "50000", "terms": {"leather chair": "500", "mesh chair": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "125", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of leather chairs\n- y: Number of mesh chairs\n\nObjective:\n- The store aims to maximize its profit. The profit per leather chair sold is $250 and the profit per mesh chair sold is $200. Therefore, the objective function is: Maximize 250x + 200y\n\nConstraints:\n- The store does not want to invest more than $50000 on chairs, leading to the constraint: 500x + 300y <= 50000.\n- The store estimates a monthly demand of at most 125 chairs, resulting in the constraint: x + y <= 125.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 250x + 200y\nConstraints:\n500x + 300y <= 50000\nx + y <= 125", "canonical": {"objective": [-250.0, -200.0], "constraints": [[500.0, 300.0, 50000.0], [1.0, 1.0, 125.0]]}, "solution": {"x": 62, "y": 63}, "pseudo_model": "\nDecision Variables:\n- Number of leather chairs stocked: LeatherChairs\n- Number of mesh chairs stocked: MeshChairs\n\nConstraints:\n- Total investment on chairs should not exceed $50000 (cost: $500 per leather chair, $300 per mesh chair):\n  500 * LeatherChairs + 300 * MeshChairs <= 50000\n- Total number of chairs stocked should not exceed the monthly demand of 125 chairs:\n  LeatherChairs + MeshChairs <= 125\n\nObjective:\n- Maximize profit ($250 profit per leather chair, $200 profit per mesh chair):\n  250 * LeatherChairs + 200 * MeshChairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLeatherChairs = intvar(0, 999999999)  # Number of leather chairs stocked\nMeshChairs = intvar(0, 999999999)  # Number of mesh chairs stocked\n\n# Constraints\nm = Model()\n\n# The store does not want to invest more than $50000 on chairs:\nm += 500 * LeatherChairs + 300 * MeshChairs <= 50000\n# The store estimates a monthly demand of at most 125 chairs:\nm += LeatherChairs + MeshChairs <= 125\n\n# Objective\n# Maximize profit ($250 profit per leather chair, $200 profit per mesh chair):\nm.maximize(250 * LeatherChairs + 200 * MeshChairs)\n", "entities": [{"start": 20, "end": 27, "word": "leather", "entity_group": "VAR", "score": 0.9995551459659904}, {"start": 32, "end": 43, "word": "mesh chairs", "entity_group": "VAR", "score": 0.9999797757358356}, {"start": 48, "end": 61, "word": "leather chair", "entity_group": "VAR", "score": 0.9999847283231879}, {"start": 80, "end": 83, "word": "500", "entity_group": "PARAM", "score": 0.9989535123456711}, {"start": 90, "end": 100, "word": "mesh chair", "entity_group": "VAR", "score": 0.9999824898073624}, {"start": 120, "end": 123, "word": "300", "entity_group": "PARAM", "score": 0.9994654227824593}, {"start": 130, "end": 136, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998008468758495}, {"start": 141, "end": 154, "word": "leather chair", "entity_group": "VAR", "score": 0.9999264459341612}, {"start": 165, "end": 168, "word": "250", "entity_group": "PARAM", "score": 0.9994787736793356}, {"start": 177, "end": 183, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998428556797455}, {"start": 188, "end": 198, "word": "mesh chair", "entity_group": "VAR", "score": 0.9999287805750412}, {"start": 209, "end": 212, "word": "200", "entity_group": "PARAM", "score": 0.9997206268736651}, {"start": 249, "end": 258, "word": "more that", "entity_group": "CONST_DIR", "score": 0.9935951576837971}, {"start": 261, "end": 266, "word": "50000", "entity_group": "LIMIT", "score": 0.9996990926003632}, {"start": 311, "end": 318, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985005649708674}, {"start": 319, "end": 322, "word": "125", "entity_group": "LIMIT", "score": 0.999752801458239}, {"start": 390, "end": 398, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.988927461446203}, {"start": 399, "end": 405, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.998784985385099}]}
{"doc_id": "786856725", "document": "A farmer has 30 cows and feeds them on enriched hay and chicken scraps. Enriched hay costs $200 per kilogram while chicken scraps cost $350 per kilogram. Each kilogram of  enriched hay contains 0.3 kilograms of protein, 0.1 kilograms of vitamins, and 0.15 kilograms of minerals. Each kilogram of chicken scraps contains 0.6 kilograms of protein, 0.2 kilograms of vitamins, and 0.05 kilograms of minerals. Each cow requires a minimum of  1.5 kilograms of protein and 0.5 kilograms of minerals per day. However, each cow can have at most 0.5 kilograms of vitamins per day. How should the farmer feed his cows in order to minimize cost while ensuring the cows get the required nutrition?", "order_mapping": {"enriched hay": 0, "chicken scraps": 1, "Enriched hay": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Enriched hay": "200", "chicken scraps": "350"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "1.5", "terms": {"enriched hay": "0.3", "chicken scraps": "0.6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "0.5", "terms": {"enriched hay": "0.15", "chicken scraps": "0.05"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "0.5", "terms": {"enriched hay": "0.1", "chicken scraps": "0.2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Kilograms of enriched hay\n- y: Kilograms of chicken scraps\n\nObjective:\n- The farmer wants to minimize the cost of feeding the cows. Enriched hay costs $200 per kilogram and chicken scraps cost $350 per kilogram. Therefore, the objective function is: Minimize 200x + 350y\n\nConstraints:\n- Each kilogram of enriched hay contains 0.3 kilograms of protein and each kilogram of chicken scraps contains 0.6 kilograms of protein. Each cow requires a minimum of 1.5 kilograms of protein per day, leading to the constraint: 0.3x + 0.6y >= 1.5\n- Each kilogram of enriched hay contains 0.15 kilograms of minerals and each kilogram of chicken scraps contains 0.05 kilograms of minerals. Each cow requires a minimum of 0.5 kilograms of minerals per day, leading to the constraint: 0.15x + 0.05y >= 0.5\n- Each kilogram of enriched hay contains 0.1 kilograms of vitamins and each kilogram of chicken scraps contains 0.2 kilograms of vitamins. Each cow can have at most 0.5 kilograms of vitamins per day, leading to the constraint: 0.1x + 0.2y <= 0.5\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 200x + 350y\nConstraints:\n0.3x + 0.6y >= 1.5\n0.15x + 0.05y >= 0.5\n0.1x + 0.2y <= 0.5", "canonical": {"objective": [200.0, 350.0], "constraints": [[-0.3, -0.6, -1.5], [-0.15, -0.05, -0.5], [0.1, 0.2, 0.5]]}, "solution": {"x": 3, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Kilograms of enriched hay used: EnrichedHay\n- Kilograms of chicken scraps used: ChickenScraps\n\nConstraints:\n- Protein requirement (minimum of 1.5 kilograms per cow per day):\n  0.3 * EnrichedHay + 0.6 * ChickenScraps >= 1.5 * 30\n- Minerals requirement (minimum of 0.5 kilograms per cow per day):\n  0.15 * EnrichedHay + 0.05 * ChickenScraps >= 0.5 * 30\n- Vitamins limit (at most 0.5 kilograms per cow per day):\n  0.1 * EnrichedHay + 0.2 * ChickenScraps <= 0.5 * 30\n\nObjective:\n- Minimize cost (Enriched hay costs $200 per kilogram, chicken scraps cost $350 per kilogram):\n  200 * EnrichedHay + 350 * ChickenScraps\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEnrichedHay = intvar(0, 999999999)  # Kilograms of enriched hay used\nChickenScraps = intvar(0, 999999999)  # Kilograms of chicken scraps used\n\n# Constraints\nm = Model()\n\n# Each cow requires a minimum of 1.5 kilograms of protein per day:\nm += 0.3 * EnrichedHay + 0.6 * ChickenScraps >= 1.5 * 30\n# Each cow requires a minimum of 0.5 kilograms of minerals per day:\nm += 0.15 * EnrichedHay + 0.05 * ChickenScraps >= 0.5 * 30\n# Each cow can have at most 0.5 kilograms of vitamins per day:\nm += 0.1 * EnrichedHay + 0.2 * ChickenScraps <= 0.5 * 30\n\n# Objective\n# Minimize cost (Enriched hay costs $200 per kilogram, chicken scraps cost $350 per kilogram):\nm.minimize(200 * EnrichedHay + 350 * ChickenScraps)\n", "entities": [{"start": 39, "end": 51, "word": "enriched hay", "entity_group": "VAR", "score": 0.9999129133019231}, {"start": 56, "end": 70, "word": "chicken scraps", "entity_group": "VAR", "score": 0.9999768963357978}, {"start": 73, "end": 85, "word": "Enriched hay", "entity_group": "VAR", "score": 0.9999837889684704}, {"start": 86, "end": 91, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994955763490542}, {"start": 94, "end": 97, "word": "200", "entity_group": "PARAM", "score": 0.9996161998934361}, {"start": 117, "end": 131, "word": "chicken scraps", "entity_group": "VAR", "score": 0.9999630067472469}, {"start": 132, "end": 136, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989907389388796}, {"start": 139, "end": 142, "word": "350", "entity_group": "PARAM", "score": 0.9996007453595597}, {"start": 175, "end": 187, "word": "enriched hay", "entity_group": "VAR", "score": 0.9999741446595259}, {"start": 197, "end": 200, "word": "0.3", "entity_group": "PARAM", "score": 0.9996719755987479}, {"start": 224, "end": 227, "word": "0.1", "entity_group": "PARAM", "score": 0.9997360900278187}, {"start": 256, "end": 260, "word": "0.15", "entity_group": "PARAM", "score": 0.9996599398586069}, {"start": 302, "end": 316, "word": "chicken scraps", "entity_group": "VAR", "score": 0.9999741318452817}, {"start": 326, "end": 329, "word": "0.6", "entity_group": "PARAM", "score": 0.9996234325278177}, {"start": 353, "end": 356, "word": "0.2", "entity_group": "PARAM", "score": 0.9997360990587743}, {"start": 385, "end": 389, "word": "0.05", "entity_group": "PARAM", "score": 0.9995791328794176}, {"start": 434, "end": 441, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9983200215137105}, {"start": 445, "end": 448, "word": "1.5", "entity_group": "LIMIT", "score": 0.9997672638635048}, {"start": 474, "end": 477, "word": "0.5", "entity_group": "LIMIT", "score": 0.9997143738057359}, {"start": 538, "end": 545, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999088114535977}, {"start": 546, "end": 549, "word": "0.5", "entity_group": "LIMIT", "score": 0.9997297082169957}, {"start": 630, "end": 638, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9836604510621518}, {"start": 639, "end": 643, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9872855913995175}]}
{"doc_id": "-1251698184", "document": "A company decides to advertise their movie with posters in 3 malls: the northside mall, the southside mall, and the central mall. The cost for placing a poster and the expected viewership is given. At the northside mall, a poster costs $500 and attracts 20000 viewers. At the southside mall, a poster costs $1000 and attracts 50000 viewers. At the central mall, a poster costs $800 and attracts 40000 viewers. The southside mall limits the number of posters from a company to 5. In addition, the company decides to make sure that at most a third of the posters be placed at the central mall. Finally, at least 20% of the posters should be placed at the northside mall. If the weekly budget is $30000, how many posters should be placed in each location to maximize viewership?", "order_mapping": {"northside mall": 0, "southside mall": 1, "central mall": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"northside mall": "20000", "southside mall": "50000", "central mall": "40000"}}, "const_declarations": [{"type": "upperbound", "direction": "limits", "limit": "5", "var": "southside mall", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "central mall", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "northside mall", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "30000", "terms": {"northside mall": "500", "southside mall": "1000", "central mall": "800"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of posters placed in the northside mall\n- y: Number of posters placed in the southside mall\n- z: Number of posters placed in the central mall\n\nObjective:\n- The company aims to maximize the viewership. The expected viewership for each poster placement is given as follows: northside mall - 20000 viewers, southside mall - 50000 viewers, central mall - 40000 viewers. Therefore, the objective function is: Maximize 20000x + 50000y + 40000z\n\nConstraints:\n- The weekly budget for advertising is $30000, leading to the constraint: 500x + 1000y + 800z <= 30000.\n- The southside mall limits the number of posters from a company to 5, resulting in the constraint: y <= 5.\n- At most a third of the posters should be placed at the central mall, leading to the constraint: z <= (x + y + z)/3.\n- At least 20% of the posters should be placed at the northside mall, resulting in the constraint: x >= 0.20(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20000x + 50000y + 40000z\nConstraints:\n500x + 1000y + 800z <= 30000\ny <= 5\nz <= (x + y + z)/3\nx >= 0.20(x + y + z)", "canonical": {"objective": [-20000.0, -50000.0, -40000.0], "constraints": [[500.0, 1000.0, 800.0, 30000.0], [0.0, 1.0, 0.0, 5.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.8, 0.2, 0.2, 0.0]]}, "solution": {"x": 26, "y": 5, "z": 15}, "pseudo_model": "\nDecision Variables:\n- Number of posters at Northside Mall: NorthsideMall\n- Number of posters at Southside Mall: SouthsideMall\n- Number of posters at Central Mall: CentralMall\n\nConstraints:\n- Southside Mall limits the number of posters to 5:\n  SouthsideMall <= 5\n- At most a third of the posters be placed at the Central Mall:\n  CentralMall <= 1/3 * (NorthsideMall + SouthsideMall + CentralMall)\n- At least 20% of the posters should be placed at the Northside Mall:\n  NorthsideMall >= 0.20 * (NorthsideMall + SouthsideMall + CentralMall)\n- Weekly budget is $30000:\n  500 * NorthsideMall + 1000 * SouthsideMall + 800 * CentralMall <= 30000\n\nObjective:\n- Maximize viewership (20000 viewers per poster at Northside Mall, 50000 viewers per poster at Southside Mall, 40000 viewers per poster at Central Mall):\n  20000 * NorthsideMall + 50000 * SouthsideMall + 40000 * CentralMall\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNorthsideMall = intvar(0, 999999999)  # Number of posters at Northside Mall\nSouthsideMall = intvar(0, 999999999)  # Number of posters at Southside Mall\nCentralMall = intvar(0, 999999999)  # Number of posters at Central Mall\n\n# Constraints\nm = Model()\n\n# Southside mall limits the number of posters to 5:\nm += SouthsideMall <= 5\n# At most a third of the posters be placed at the central mall:\nm += CentralMall <= (1/3) * (NorthsideMall + SouthsideMall + CentralMall)\n# At least 20% of the posters should be placed at the northside mall:\nm += NorthsideMall >= 0.20 * (NorthsideMall + SouthsideMall + CentralMall)\n# Weekly budget is $30000:\nm += 500 * NorthsideMall + 1000 * SouthsideMall + 800 * CentralMall <= 30000\n\n# Objective\n# Maximize viewership (20000 viewers per poster at Northside Mall, 50000 viewers per poster at Southside Mall, 40000 viewers per poster at Central Mall):\nm.maximize(20000 * NorthsideMall + 50000 * SouthsideMall + 40000 * CentralMall)\n", "entities": [{"start": 73, "end": 87, "word": "northside mall", "entity_group": "VAR", "score": 0.9999793062764696}, {"start": 94, "end": 108, "word": "southside mall", "entity_group": "VAR", "score": 0.9999836313189736}, {"start": 119, "end": 131, "word": "central mall", "entity_group": "VAR", "score": 0.9998692344849842}, {"start": 210, "end": 224, "word": "northside mall", "entity_group": "VAR", "score": 0.9999752771809333}, {"start": 244, "end": 247, "word": "500", "entity_group": "PARAM", "score": 0.9996186462785752}, {"start": 261, "end": 266, "word": "20000", "entity_group": "PARAM", "score": 0.9995375315820006}, {"start": 267, "end": 274, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9908340179419884}, {"start": 284, "end": 298, "word": "southside mall", "entity_group": "VAR", "score": 0.9999777043224012}, {"start": 318, "end": 322, "word": "1000", "entity_group": "PARAM", "score": 0.9996389611804597}, {"start": 336, "end": 341, "word": "50000", "entity_group": "PARAM", "score": 0.9994150098105246}, {"start": 342, "end": 349, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9920304671510042}, {"start": 359, "end": 371, "word": "central mall", "entity_group": "VAR", "score": 0.9999740167231744}, {"start": 391, "end": 394, "word": "800", "entity_group": "PARAM", "score": 0.999653038343005}, {"start": 408, "end": 413, "word": "40000", "entity_group": "PARAM", "score": 0.9996556227931034}, {"start": 414, "end": 421, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9911108307834905}, {"start": 428, "end": 442, "word": "southside mall", "entity_group": "VAR", "score": 0.9999783103751663}, {"start": 443, "end": 449, "word": "limits", "entity_group": "CONST_DIR", "score": 0.9842051973301427}, {"start": 490, "end": 491, "word": "5", "entity_group": "LIMIT", "score": 0.9995148311157805}, {"start": 546, "end": 553, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9955988596675311}, {"start": 556, "end": 561, "word": "third", "entity_group": "LIMIT", "score": 0.9965028121834091}, {"start": 594, "end": 606, "word": "central mall", "entity_group": "VAR", "score": 0.9999680087172702}, {"start": 619, "end": 627, "word": "at least", "entity_group": "CONST_DIR", "score": 0.99892569517696}, {"start": 628, "end": 632, "word": "20 %", "entity_group": "LIMIT", "score": 0.974901992626784}, {"start": 672, "end": 686, "word": "northside mall", "entity_group": "VAR", "score": 0.9999726427517781}, {"start": 703, "end": 709, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9935554170682489}, {"start": 715, "end": 720, "word": "30000", "entity_group": "LIMIT", "score": 0.9995758041546895}, {"start": 777, "end": 785, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991330005904866}, {"start": 786, "end": 796, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9985874963677955}]}
{"doc_id": "605952457", "document": "Jake uses two 3D-printers, Printer A and Printer B, to make his superhero and cartoon figurines. To make one superhero figurine requires 5 hours of time on Printer A and 4 hours of time on Printer B. To make one cartoon figurine requires 3 hours on Printer A and 7 hours on Printer B. Each machine can run for at most 1000 hours. If Jake makes a profit of $10 per superhero figurine and $8 per cartoon figurine, how many of each should he make to maximize his profit?", "order_mapping": {"superhero": 0, "cartoon figurines": 1, "superhero figurine": 0, "cartoon figurine": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"superhero figurine": "10", "cartoon figurine": "8"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "1000", "terms": {"superhero figurine": "5", "cartoon figurine": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1000", "terms": {"superhero figurine": "4", "cartoon figurine": "7"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of superhero figurines\n- y: Number of cartoon figurines\n\nObjective:\n- Jake wants to maximize his profit. He makes a profit of $10 per superhero figurine and $8 per cartoon figurine. Therefore, the objective function is: Maximize 10x + 8y\n\nConstraints:\n- Each machine can run for at most 1000 hours. Making one superhero figurine requires 5 hours on Printer A and 4 hours on Printer B, and making one cartoon figurine requires 3 hours on Printer A and 7 hours on Printer B. These constraints can be formulated as: 5x + 3y <= 1000 and 4x + 7y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 8y\nConstraints:\n5x + 3y <= 1000\n4x + 7y <= 1000", "canonical": {"objective": [-10.0, -8.0], "constraints": [[5.0, 3.0, 1000.0], [4.0, 7.0, 1000.0]]}, "solution": {"x": 174, "y": 43}, "pseudo_model": "\nDecision Variables:\n- Number of superhero figurines made: SuperheroFigurines\n- Number of cartoon figurines made: CartoonFigurines\n\nConstraints:\n- Printer A's time for superhero and cartoon figurines should not exceed 1000 hours:\n  5 * SuperheroFigurines + 3 * CartoonFigurines <= 1000\n- Printer B's time for superhero and cartoon figurines should not exceed 1000 hours:\n  4 * SuperheroFigurines + 7 * CartoonFigurines <= 1000\n\nObjective:\n- Maximize profit (10 dollars per superhero figurine, 8 dollars per cartoon figurine):\n  10 * SuperheroFigurines + 8 * CartoonFigurines\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSuperheroFigurines = intvar(0, 999999999)  # Number of superhero figurines made\nCartoonFigurines = intvar(0, 999999999)  # Number of cartoon figurines made\n\n# Constraints\nm = Model()\n\n# Printer A can run for at most 1000 hours:\nm += 5 * SuperheroFigurines + 3 * CartoonFigurines <= 1000\n# Printer B can run for at most 1000 hours:\nm += 4 * SuperheroFigurines + 7 * CartoonFigurines <= 1000\n\n# Objective\n# Maximize profit (10 dollars per superhero figurine, 8 dollars per cartoon figurine):\nm.maximize(10 * SuperheroFigurines + 8 * CartoonFigurines)\n", "entities": [{"start": 68, "end": 77, "word": "superhero", "entity_group": "VAR", "score": 0.9973988570729194}, {"start": 82, "end": 99, "word": "cartoon figurines", "entity_group": "VAR", "score": 0.999914561870444}, {"start": 114, "end": 132, "word": "superhero figurine", "entity_group": "VAR", "score": 0.999876952277581}, {"start": 142, "end": 143, "word": "5", "entity_group": "PARAM", "score": 0.9994946955489693}, {"start": 175, "end": 176, "word": "4", "entity_group": "PARAM", "score": 0.9996950806930909}, {"start": 217, "end": 233, "word": "cartoon figurine", "entity_group": "VAR", "score": 0.9993124485544347}, {"start": 243, "end": 244, "word": "3", "entity_group": "PARAM", "score": 0.9996212831469327}, {"start": 268, "end": 269, "word": "7", "entity_group": "PARAM", "score": 0.9997159872471345}, {"start": 315, "end": 322, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984609362380658}, {"start": 323, "end": 327, "word": "1000", "entity_group": "LIMIT", "score": 0.9997313051939378}, {"start": 352, "end": 358, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999596442643173}, {"start": 364, "end": 366, "word": "10", "entity_group": "PARAM", "score": 0.9992754160958593}, {"start": 371, "end": 389, "word": "superhero figurine", "entity_group": "VAR", "score": 0.9999270766268515}, {"start": 396, "end": 397, "word": "8", "entity_group": "PARAM", "score": 0.9995574276153895}, {"start": 402, "end": 418, "word": "cartoon figurine", "entity_group": "VAR", "score": 0.999914527836001}, {"start": 456, "end": 464, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997496309514268}, {"start": 469, "end": 475, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999397185954411}]}
{"doc_id": "-882985416", "document": "An ice cream bar sells vanilla and chocolate ice cream cones. The profit per cone of vanilla ice cream is $2 and the profit per cone of chocolate ice cream is $3. The ice cream bar must make at lest 20 cones of vanilla ice cream but cannot make more than 50 cones. It must also make at least 25 cones of chocolate ice cream but can not make more than 60 cones. In total, the ice cream bar can make at most 80 cones. How many cones of each flavor should they make to maximize profit?", "order_mapping": {"vanilla": 0, "chocolate ice cream": 1, "vanilla ice cream": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"vanilla ice cream": "2", "chocolate ice cream": "3"}}, "const_declarations": [{"type": "lowerbound", "direction": "at lest", "limit": "20", "var": "vanilla ice cream", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "25", "var": "chocolate ice cream", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "cannot make more than", "limit": "50", "var": "vanilla ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "can not make more than", "limit": "60", "var": "chocolate ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "80", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of vanilla ice cream cones\n- y: Number of chocolate ice cream cones\n\nObjective:\n- The ice cream bar aims to maximize its profit. The profit per cone of vanilla ice cream is $2 and the profit per cone of chocolate ice cream is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- The ice cream bar must make at least 20 cones of vanilla ice cream, leading to the constraint: x >= 20.\n- The ice cream bar must make at least 25 cones of chocolate ice cream, leading to the constraint: y >= 25.\n- The ice cream bar cannot make more than 50 cones of vanilla ice cream, leading to the constraint: x <= 50.\n- The ice cream bar cannot make more than 60 cones of chocolate ice cream, leading to the constraint: y <= 60.\n- In total, the ice cream bar can make at most 80 cones, leading to the constraint: x + y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\nx >= 20\ny >= 25\nx <= 50\ny <= 60\nx + y <= 80", "canonical": {"objective": [-2.0, -3.0], "constraints": [[-1.0, 0.0, -20.0], [0.0, -1.0, -25.0], [1.0, 0.0, 50.0], [0.0, 1.0, 60.0], [1.0, 1.0, 80.0]]}, "solution": {"x": 20, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of vanilla ice cream cones made: Vanilla\n- Number of chocolate ice cream cones made: Chocolate\n\nConstraints:\n- Vanilla ice cream cones must be at least 20 and cannot exceed 50:\n  20 <= Vanilla <= 50\n- Chocolate ice cream cones must be at least 25 and cannot exceed 60:\n  25 <= Chocolate <= 60\n- Total number of cones made cannot exceed 80:\n  Vanilla + Chocolate <= 80\n\nObjective:\n- Maximize profit (2 dollars per vanilla cone, 3 dollars per chocolate cone):\n  2 * Vanilla + 3 * Chocolate\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVanilla = intvar(0, 999999999)  # Number of vanilla ice cream cones made\nChocolate = intvar(0, 999999999)  # Number of chocolate ice cream cones made\n\n# Constraints\nm = Model()\n\n# Vanilla ice cream cones constraints:\nm += Vanilla >= 20  # At least 20 cones of vanilla ice cream\nm += Vanilla <= 50  # Cannot make more than 50 cones of vanilla ice cream\n\n# Chocolate ice cream cones constraints:\nm += Chocolate >= 25  # At least 25 cones of chocolate ice cream\nm += Chocolate <= 60  # Cannot make more than 60 cones of chocolate ice cream\n\n# Total cones constraint:\nm += Vanilla + Chocolate <= 80  # Can make at most 80 cones in total\n\n# Objective\n# Maximize profit (2 dollars per vanilla cone, 3 dollars per chocolate cone):\nm.maximize(2 * Vanilla + 3 * Chocolate)\n", "entities": [{"start": 23, "end": 30, "word": "vanilla", "entity_group": "VAR", "score": 0.9997213710467528}, {"start": 35, "end": 54, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.999926337890055}, {"start": 67, "end": 73, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999498742168309}, {"start": 86, "end": 103, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.9995752732946492}, {"start": 109, "end": 110, "word": "2", "entity_group": "PARAM", "score": 0.9992426296596816}, {"start": 119, "end": 125, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999325208909124}, {"start": 138, "end": 157, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.9992064406247473}, {"start": 163, "end": 164, "word": "3", "entity_group": "PARAM", "score": 0.9997299528832009}, {"start": 195, "end": 202, "word": "at lest", "entity_group": "CONST_DIR", "score": 0.9988878229629717}, {"start": 203, "end": 205, "word": "20", "entity_group": "LIMIT", "score": 0.9997079032595534}, {"start": 215, "end": 232, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.9984796266958766}, {"start": 237, "end": 259, "word": "can not make more than", "entity_group": "CONST_DIR", "score": 0.9646503275904137}, {"start": 260, "end": 262, "word": "50", "entity_group": "LIMIT", "score": 0.9997550573720921}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999184444802105}, {"start": 298, "end": 300, "word": "25", "entity_group": "LIMIT", "score": 0.9996863927910717}, {"start": 310, "end": 329, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.9979588160322191}, {"start": 334, "end": 356, "word": "can not make more than", "entity_group": "CONST_DIR", "score": 0.9707799247819706}, {"start": 357, "end": 359, "word": "60", "entity_group": "LIMIT", "score": 0.9996439841901226}, {"start": 406, "end": 413, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971602175037333}, {"start": 414, "end": 416, "word": "80", "entity_group": "LIMIT", "score": 0.9995084732799414}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996959595071481}, {"start": 484, "end": 490, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269901225997}]}
{"doc_id": "-2084079400", "document": "A fitness trainer has decided to mix two brands of protein drinks to create a new mixture. The Alpha brand costs $5 per bottle and contains 10 units of protein, 5 units of carbs, and 6 units of fat. The Gamma brand costs $8 per bottle and contains 15 units of protein, 10 units of carbs, and 3 units of fat. The trainer wants to create a mixture having at least 100 units of protein, 80 units of carbs, and 60 units of fat. How many bottles of each brand drink should be mixed to create the new mixture at minimum cost?", "order_mapping": {"Alpha brand": 0, "Gamma brand": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Gamma brand": "8", "Alpha brand": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"Alpha brand": "10", "Gamma brand": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"Alpha brand": "5", "Gamma brand": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "60", "terms": {"Alpha brand": "6", "Gamma brand": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of Alpha brand drink\n- y: Number of bottles of Gamma brand drink\n\nObjective:\n- The fitness trainer wants to minimize the cost of creating the new mixture. The Alpha brand costs $5 per bottle and the Gamma brand costs $8 per bottle. Therefore, the objective function is: Minimize 5x + 8y\n\nConstraints:\n- The new mixture should have at least 100 units of protein, 80 units of carbs, and 60 units of fat. This leads to the following constraints:\n    - 10x + 15y >= 100 (protein)\n    - 5x + 10y >= 80 (carbs)\n    - 6x + 3y >= 60 (fat)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 8y\nConstraints:\n10x + 15y >= 100\n5x + 10y >= 80\n6x + 3y >= 60", "canonical": {"objective": [5.0, 8.0], "constraints": [[-10.0, -15.0, -100.0], [-5.0, -10.0, -80.0], [-6.0, -3.0, -60.0]]}, "solution": {"x": 8, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of Alpha brand bottles: AlphaBrand\n- Number of Gamma brand bottles: GammaBrand\n\nConstraints:\n- The mixture should have at least 100 units of protein:\n  10 * AlphaBrand + 15 * GammaBrand >= 100\n- The mixture should have at least 80 units of carbs:\n  5 * AlphaBrand + 10 * GammaBrand >= 80\n- The mixture should have at least 60 units of fat:\n  6 * AlphaBrand + 3 * GammaBrand >= 60\n\nObjective:\n- Minimize cost (Alpha brand costs $5 per bottle, Gamma brand costs $8 per bottle):\n  5 * AlphaBrand + 8 * GammaBrand\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlphaBrand = intvar(0, 999999999)  # Number of Alpha brand bottles\nGammaBrand = intvar(0, 999999999)  # Number of Gamma brand bottles\n\n# Constraints\nm = Model()\n\n# The mixture should have at least 100 units of protein:\nm += 10 * AlphaBrand + 15 * GammaBrand >= 100\n# The mixture should have at least 80 units of carbs:\nm += 5 * AlphaBrand + 10 * GammaBrand >= 80\n# The mixture should have at least 60 units of fat:\nm += 6 * AlphaBrand + 3 * GammaBrand >= 60\n\n# Objective\n# Minimize cost (Alpha brand costs $5 per bottle, Gamma brand costs $8 per bottle):\nm.minimize(5 * AlphaBrand + 8 * GammaBrand)\n", "entities": [{"start": 96, "end": 107, "word": "Alpha brand", "entity_group": "VAR", "score": 0.9999524363617172}, {"start": 108, "end": 113, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9984733955915737}, {"start": 116, "end": 117, "word": "5", "entity_group": "PARAM", "score": 0.9995764875192803}, {"start": 142, "end": 144, "word": "10", "entity_group": "PARAM", "score": 0.9997043522515622}, {"start": 164, "end": 165, "word": "5", "entity_group": "PARAM", "score": 0.9997340463516791}, {"start": 187, "end": 188, "word": "6", "entity_group": "PARAM", "score": 0.999584325979752}, {"start": 208, "end": 219, "word": "Gamma brand", "entity_group": "VAR", "score": 0.9999442213505251}, {"start": 220, "end": 225, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988323550360247}, {"start": 228, "end": 229, "word": "8", "entity_group": "PARAM", "score": 0.9995764317950976}, {"start": 254, "end": 256, "word": "15", "entity_group": "PARAM", "score": 0.9997043522515625}, {"start": 276, "end": 278, "word": "10", "entity_group": "PARAM", "score": 0.9997340357908794}, {"start": 300, "end": 301, "word": "3", "entity_group": "PARAM", "score": 0.9994982023707641}, {"start": 362, "end": 370, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990766060265462}, {"start": 371, "end": 374, "word": "100", "entity_group": "LIMIT", "score": 0.9997392458446223}, {"start": 394, "end": 396, "word": "80", "entity_group": "LIMIT", "score": 0.9997456440947269}, {"start": 418, "end": 420, "word": "60", "entity_group": "LIMIT", "score": 0.9994777151410278}, {"start": 518, "end": 525, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9933687500541274}, {"start": 526, "end": 530, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987186948954387}]}
{"doc_id": "23481428", "document": "A gardener has a garden full of daisies and lilies, and picks them everyday for sale. The profit per bouquet of daisies sold is $5 and the profit per bouquet of lilies sold is $4. Each bouquet of daisies needs 3 minutes of clipping and 2 minutes of packaging. Each bouquet of lilies requires 1 minute of clipping and 3 minutes of packaging. In total, there are 1000 minutes available for clipping and 650 minutes available for packaging. Having signed a contract with a local restaurant, at least 25 bouquets of daisies must be picked. There is no such limit on bouquets of lilies. Formulate a LP to maximize profit.", "order_mapping": {"daisies": 0, "lilies": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"daisies": "5", "lilies": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"daisies": "3", "lilies": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "650", "terms": {"daisies": "2", "lilies": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "25", "var": "daisies", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bouquets of daisies\n- y: Number of bouquets of lilies\n\nObjective:\n- The gardener aims to maximize the profit. The profit per bouquet of daisies sold is $5 and the profit per bouquet of lilies sold is $4. Therefore, the objective function is: Maximize 5x + 4y\n\nConstraints:\n- Each bouquet of daisies needs 3 minutes of clipping and 2 minutes of packaging, and each bouquet of lilies requires 1 minute of clipping and 3 minutes of packaging. The total time available for clipping and packaging is 1000 minutes and 650 minutes, respectively. This leads to the constraints: 3x + y <= 1000 and 2x + 3y <= 650.\n- The gardener has a contract with a local restaurant to pick at least 25 bouquets of daisies, resulting in the constraint: x >= 25.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 4y\nConstraints:\n3x + y <= 1000\n2x + 3y <= 650\nx >= 25", "canonical": {"objective": [-5.0, -4.0], "constraints": [[3.0, 1.0, 1000.0], [2.0, 3.0, 650.0], [-1.0, 0.0, -25.0]]}, "solution": {"x": 325, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of bouquets of daisies: Daisies\n- Number of bouquets of lilies: Lilies\n\nConstraints:\n- Total clipping time should not exceed 1000 minutes (3 minutes per daisy, 1 minute per lily):\n  3 * Daisies + 1 * Lilies <= 1000\n- Total packaging time should not exceed 650 minutes (2 minutes per daisy, 3 minutes per lily):\n  2 * Daisies + 3 * Lilies <= 650\n- At least 25 bouquets of daisies must be picked:\n  Daisies >= 25\n\nObjective:\n- Maximize profit (5 dollars per bouquet of daisies, 4 dollars per bouquet of lilies):\n  5 * Daisies + 4 * Lilies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaisies = intvar(0, 999999999)  # Number of bouquets of daisies\nLilies = intvar(0, 999999999)  # Number of bouquets of lilies\n\n# Constraints\nm = Model()\n\n# Total clipping time should not exceed 1000 minutes (3 minutes per daisy, 1 minute per lily):\nm += 3 * Daisies + 1 * Lilies <= 1000\n# Total packaging time should not exceed 650 minutes (2 minutes per daisy, 3 minutes per lily):\nm += 2 * Daisies + 3 * Lilies <= 650\n# At least 25 bouquets of daisies must be picked:\nm += Daisies >= 25\n\n# Objective\n# Maximize profit (5 dollars per bouquet of daisies, 4 dollars per bouquet of lilies):\nm.maximize(5 * Daisies + 4 * Lilies)\n", "entities": [{"start": 32, "end": 39, "word": "daisies", "entity_group": "VAR", "score": 0.9984438443833461}, {"start": 44, "end": 50, "word": "lilies", "entity_group": "VAR", "score": 0.9994064290584217}, {"start": 92, "end": 98, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998754722682485}, {"start": 114, "end": 121, "word": "daisies", "entity_group": "VAR", "score": 0.9982778583261438}, {"start": 132, "end": 133, "word": "5", "entity_group": "PARAM", "score": 0.9996336087245642}, {"start": 142, "end": 148, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999186696490452}, {"start": 164, "end": 170, "word": "lilies", "entity_group": "VAR", "score": 0.9988376490832239}, {"start": 181, "end": 182, "word": "4", "entity_group": "PARAM", "score": 0.9995527253034943}, {"start": 201, "end": 208, "word": "daisies", "entity_group": "VAR", "score": 0.9993267628645564}, {"start": 215, "end": 216, "word": "3", "entity_group": "PARAM", "score": 0.9996849153243861}, {"start": 241, "end": 242, "word": "2", "entity_group": "PARAM", "score": 0.999728099437864}, {"start": 282, "end": 288, "word": "lilies", "entity_group": "VAR", "score": 0.9994639324749051}, {"start": 298, "end": 299, "word": "1", "entity_group": "PARAM", "score": 0.9995613540856765}, {"start": 323, "end": 324, "word": "3", "entity_group": "PARAM", "score": 0.9996421221129169}, {"start": 369, "end": 373, "word": "1000", "entity_group": "LIMIT", "score": 0.9997691745127444}, {"start": 382, "end": 391, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993167013484354}, {"start": 409, "end": 412, "word": "650", "entity_group": "LIMIT", "score": 0.9997518243339426}, {"start": 421, "end": 430, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977156595658815}, {"start": 498, "end": 506, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988918021211183}, {"start": 507, "end": 509, "word": "25", "entity_group": "LIMIT", "score": 0.9997531177766168}, {"start": 522, "end": 529, "word": "daisies", "entity_group": "VAR", "score": 0.9989879071581228}, {"start": 585, "end": 591, "word": "lilies", "entity_group": "VAR", "score": 0.9997973031677505}, {"start": 612, "end": 620, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996142542868584}, {"start": 621, "end": 627, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995117548253415}]}
{"doc_id": "-1133652946", "document": "A landscaper provides 3 landscaping layouts using different amounts of rock, mulch, and grass. He has 1200 units of rock, 700 units of mulch, and 2000 units of grass. A type A layout has 10 units of rock, 7 units of mulch, and 15 units of grass. A type B layout has 5 units of rock, 12 units of mulch, and 10 units of grass. A type C layout has 12 units of rock, 4 units of mulch, and 12 units of grass. The profit is $200 for each type A layout, $175 for each type B layout, and $225 for each type C layout. How many layouts of each type should be used to maximize profit?", "order_mapping": {"type A layout": 0, "type B layout": 1, "type C layout": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"type A layout": "200", "type B layout": "175", "type C layout": "225"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1200", "terms": {"type A layout": "10", "type B layout": "5", "type C layout": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "700", "terms": {"type A layout": "7", "type B layout": "12", "type C layout": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "2000", "terms": {"type A layout": "15", "type B layout": "10", "type C layout": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of type A layouts\n- y: Number of type B layouts\n- z: Number of type C layouts\n\nObjective:\n- The landscaper wants to maximize the profit. The profit is $200 for each type A layout, $175 for each type B layout, and $225 for each type C layout. Therefore, the objective function is: Maximize 200x + 175y + 225z\n\nConstraints:\n- The landscaper has limited resources: 1200 units of rock, 700 units of mulch, and 2000 units of grass. These constraints can be formulated as:\n    - 10x + 5y + 12z <= 1200 (rock constraint)\n    - 7x + 12y + 4z <= 700 (mulch constraint)\n    - 15x + 10y + 12z <= 2000 (grass constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 175y + 225z\nConstraints:\n10x + 5y + 12z <= 1200\n7x + 12y + 4z <= 700\n15x + 10y + 12z <= 2000", "canonical": {"objective": [-200.0, -175.0, -225.0], "constraints": [[10.0, 5.0, 12.0, 1200.0], [7.0, 12.0, 4.0, 700.0], [15.0, 10.0, 12.0, 2000.0]]}, "solution": {"x": 0, "y": 28, "z": 88}, "pseudo_model": "\nDecision Variables:\n- Number of type A layouts: TypeALayouts\n- Number of type B layouts: TypeBLayouts\n- Number of type C layouts: TypeCLayouts\n\nConstraints:\n- Total rock used should not exceed 1200 units:\n  10 * TypeALayouts + 5 * TypeBLayouts + 12 * TypeCLayouts <= 1200\n- Total mulch used should not exceed 700 units:\n  7 * TypeALayouts + 12 * TypeBLayouts + 4 * TypeCLayouts <= 700\n- Total grass used should not exceed 2000 units:\n  15 * TypeALayouts + 10 * TypeBLayouts + 12 * TypeCLayouts <= 2000\n\nObjective:\n- Maximize profit ($200 for each type A layout, $175 for each type B layout, and $225 for each type C layout):\n  200 * TypeALayouts + 175 * TypeBLayouts + 225 * TypeCLayouts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTypeALayouts = intvar(0, 999999999)  # Number of type A layouts\nTypeBLayouts = intvar(0, 999999999)  # Number of type B layouts\nTypeCLayouts = intvar(0, 999999999)  # Number of type C layouts\n\n# Constraints\nm = Model()\n\n# The landscaper has 1200 units of rock:\nm += 10 * TypeALayouts + 5 * TypeBLayouts + 12 * TypeCLayouts <= 1200\n# The landscaper has 700 units of mulch:\nm += 7 * TypeALayouts + 12 * TypeBLayouts + 4 * TypeCLayouts <= 700\n# The landscaper has 2000 units of grass:\nm += 15 * TypeALayouts + 10 * TypeBLayouts + 12 * TypeCLayouts <= 2000\n\n# Objective\n# Maximize profit ($200 for each type A layout, $175 for each type B layout, and $225 for each type C layout):\nm.maximize(200 * TypeALayouts + 175 * TypeBLayouts + 225 * TypeCLayouts)\n", "entities": [{"start": 101, "end": 104, "word": "has", "entity_group": "CONST_DIR", "score": 0.9978120834097767}, {"start": 105, "end": 109, "word": "1200", "entity_group": "LIMIT", "score": 0.9988719654282535}, {"start": 126, "end": 129, "word": "700", "entity_group": "LIMIT", "score": 0.9997389734424003}, {"start": 151, "end": 155, "word": "2000", "entity_group": "LIMIT", "score": 0.999608991650617}, {"start": 175, "end": 188, "word": "type A layout", "entity_group": "VAR", "score": 0.9986864497838495}, {"start": 193, "end": 195, "word": "10", "entity_group": "PARAM", "score": 0.9997078087771176}, {"start": 212, "end": 213, "word": "7", "entity_group": "PARAM", "score": 0.9997272659991749}, {"start": 235, "end": 237, "word": "15", "entity_group": "PARAM", "score": 0.9996395196801594}, {"start": 257, "end": 270, "word": "type B layout", "entity_group": "VAR", "score": 0.9986824639776009}, {"start": 275, "end": 276, "word": "5", "entity_group": "PARAM", "score": 0.9997076425834484}, {"start": 293, "end": 295, "word": "12", "entity_group": "PARAM", "score": 0.9997272566893879}, {"start": 317, "end": 319, "word": "10", "entity_group": "PARAM", "score": 0.9996395196801614}, {"start": 339, "end": 352, "word": "type C layout", "entity_group": "VAR", "score": 0.9986824639776095}, {"start": 357, "end": 359, "word": "12", "entity_group": "PARAM", "score": 0.9997076469033294}, {"start": 376, "end": 377, "word": "4", "entity_group": "PARAM", "score": 0.9997272876944636}, {"start": 399, "end": 401, "word": "12", "entity_group": "PARAM", "score": 0.9995763951625203}, {"start": 423, "end": 429, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99994657062099}, {"start": 435, "end": 438, "word": "200", "entity_group": "PARAM", "score": 0.9993853955512512}, {"start": 448, "end": 461, "word": "type A layout", "entity_group": "VAR", "score": 0.9965534248037402}, {"start": 466, "end": 469, "word": "175", "entity_group": "PARAM", "score": 0.9993487930036351}, {"start": 479, "end": 492, "word": "type B layout", "entity_group": "VAR", "score": 0.9943108937231037}, {"start": 501, "end": 504, "word": "225", "entity_group": "PARAM", "score": 0.9995712129265321}, {"start": 514, "end": 527, "word": "type C layout", "entity_group": "VAR", "score": 0.9957487587320879}, {"start": 578, "end": 586, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9974686117760763}, {"start": 587, "end": 593, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999145489273293}]}
{"doc_id": "1323333207", "document": "GameShop would like to attract at least 200 customers into its store daily. Therefore, it decides to sell two popular video games, Kommand and Kontrol, at steep discount to attract foot traffic. The GameShop owner pays $14 and $8 for each unit of Kommand and Kontrol respectively and has at its disposition a maximum daily budget of $500 for this sales campaign. For each unit of Kommand game sold, GameShop incurs an cost of $11 and attracts 20 fans into its store in average. In comparison, each unit of Kontrol incurs a lower cost of $3 but only attracts 5 fans in average. How many units of each video game should be stocked daily to meet his campaign while minimizing its cost?", "order_mapping": {"Kommand": 0, "Kontrol": 1}, "obj_declaration": {"type": "objective", "direction": "minimizing", "name": "cost", "terms": {"Kontrol": "3", "Kommand": "11"}}, "const_declarations": [{"type": "linear", "direction": "maximum daily budget", "limit": "500", "terms": {"Kommand": "14", "Kontrol": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "200", "terms": {"Kommand": "20", "Kontrol": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of units of Kommand game stocked daily\n- y: Number of units of Kontrol game stocked daily\n\nObjective:\n- The objective is to minimize the cost incurred by stocking the video games. The owner pays $14 and $8 for each unit of Kommand and Kontrol respectively, and incurs a cost of $11 for each unit of Kommand and $3 for each unit of Kontrol. Therefore, the objective function is: Minimize 11x + 3y\n\nConstraints:\n- The daily budget for the sales campaign is $500, leading to the constraint: 14x + 8y <= 500.\n- The store aims to attract at least 200 customers daily, where each unit of Kommand attracts 20 fans and each unit of Kontrol attracts 5 fans. This results in the constraint: 20x + 5y >= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 11x + 3y\nConstraints:\n14x + 8y <= 500\n20x + 5y >= 200", "canonical": {"objective": [11.0, 3.0], "constraints": [[14.0, 8.0, 500.0], [-20.0, -5.0, -200.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Kommand games stocked daily: Kommand\n- Number of Kontrol games stocked daily: Kontrol\n\nConstraints:\n- The total cost for purchasing Kommand and Kontrol should not exceed $500 daily:\n  14 * Kommand + 8 * Kontrol <= 500\n- The total number of fans attracted by selling Kommand and Kontrol should be at least 200:\n  20 * Kommand + 5 * Kontrol >= 200\n\nObjective:\n- Minimize the total cost incurred from selling Kommand and Kontrol:\n  11 * Kommand + 3 * Kontrol\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKommand = intvar(0, 999999999)  # Number of Kommand games stocked daily\nKontrol = intvar(0, 999999999)  # Number of Kontrol games stocked daily\n\n# Constraints\nm = Model()\n\n# The total cost for purchasing Kommand and Kontrol should not exceed $500 daily:\nm += 14 * Kommand + 8 * Kontrol <= 500\n# The total number of fans attracted by selling Kommand and Kontrol should be at least 200:\nm += 20 * Kommand + 5 * Kontrol >= 200\n\n# Objective\n# Minimize the total cost incurred from selling Kommand and Kontrol:\nm.minimize(11 * Kommand + 3 * Kontrol)\n", "entities": [{"start": 31, "end": 39, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990153228203824}, {"start": 40, "end": 43, "word": "200", "entity_group": "LIMIT", "score": 0.9997043055408279}, {"start": 134, "end": 141, "word": "Kommand", "entity_group": "VAR", "score": 0.9995078091806743}, {"start": 146, "end": 153, "word": "Kontrol", "entity_group": "VAR", "score": 0.9997722744158093}, {"start": 226, "end": 228, "word": "14", "entity_group": "PARAM", "score": 0.9996287982952625}, {"start": 235, "end": 236, "word": "8", "entity_group": "PARAM", "score": 0.9996666738923995}, {"start": 254, "end": 261, "word": "Kommand", "entity_group": "VAR", "score": 0.9988187200296886}, {"start": 266, "end": 273, "word": "Kontrol", "entity_group": "VAR", "score": 0.9997216211424472}, {"start": 316, "end": 336, "word": "maximum daily budget", "entity_group": "CONST_DIR", "score": 0.7310582976651541}, {"start": 342, "end": 345, "word": "500", "entity_group": "LIMIT", "score": 0.9990603313320244}, {"start": 389, "end": 396, "word": "Kommand", "entity_group": "VAR", "score": 0.9979068002387141}, {"start": 428, "end": 432, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987767810998738}, {"start": 438, "end": 440, "word": "11", "entity_group": "PARAM", "score": 0.9990068241132227}, {"start": 454, "end": 456, "word": "20", "entity_group": "PARAM", "score": 0.9997467932960195}, {"start": 519, "end": 526, "word": "Kontrol", "entity_group": "VAR", "score": 0.9997020961401877}, {"start": 542, "end": 546, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9876218237103259}, {"start": 552, "end": 553, "word": "3", "entity_group": "PARAM", "score": 0.99897857193}, {"start": 572, "end": 573, "word": "5", "entity_group": "PARAM", "score": 0.9996212154727161}, {"start": 677, "end": 687, "word": "minimizing", "entity_group": "OBJ_DIR", "score": 0.999420214425265}, {"start": 692, "end": 696, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984407373420185}]}
{"doc_id": "-1574025664", "document": "A farming group has 1000 acres of land on which they plan to grow potatoes and squash. They have at most 1200 hours of tractor time available and $26400 of capital available. Each acre of potatoes requires 20 hours of tractor work and $10 of capital, and each acre of squash requires 23 hours of tractor work and $110 of capital. If the profit from an acre of potatoes is $700 and the profit from an acre of squash is $144, how many acres of each crop should they plant to maximize their profit?", "order_mapping": {"potatoes": 0, "squash": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"potatoes": "700", "squash": "144"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "1000", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1200", "terms": {"potatoes": "20", "squash": "23"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "26400", "terms": {"potatoes": "10", "squash": "110"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of potatoes\n- y: Acres of squash\n\nObjective:\n- The farming group aims to maximize their profit. The profit from an acre of potatoes is $700 and the profit from an acre of squash is $144. Therefore, the objective function is: Maximize 700x + 144y\n\nConstraints:\n- The farming group has 1000 acres of land available, so the constraint is: x + y <= 1000.\n- They have at most 1200 hours of tractor time available, which translates to the constraint: 20x + 23y <= 1200.\n- They have $26400 of capital available, leading to the constraint: 10x + 110y <= 26400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 700x + 144y\nConstraints:\nx + y <= 1000\n20x + 23y <= 1200\n10x + 110y <= 26400", "canonical": {"objective": [-700.0, -144.0], "constraints": [[1.0, 1.0, 1000.0], [20.0, 23.0, 1200.0], [10.0, 110.0, 26400.0]]}, "solution": {"x": 60, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of acres of potatoes planted: Potatoes\n- Number of acres of squash planted: Squash\n\nConstraints:\n- Total acres of land used should not exceed 1000:\n  Potatoes + Squash <= 1000\n- Tractor time for both crops should not exceed 1200 hours:\n  20 * Potatoes + 23 * Squash <= 1200\n- Capital used for both crops should not exceed $26400:\n  10 * Potatoes + 110 * Squash <= 26400\n\nObjective:\n- Maximize profit ($700 per acre of potatoes, $144 per acre of squash):\n  700 * Potatoes + 144 * Squash\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPotatoes = intvar(0, 999999999)  # Number of acres of potatoes\nSquash = intvar(0, 999999999)  # Number of acres of squash\n\n# Constraints\nm = Model()\n\n# Total acres of land used should not exceed 1000:\nm += Potatoes + Squash <= 1000\n# Tractor time for both crops should not exceed 1200 hours:\nm += 20 * Potatoes + 23 * Squash <= 1200\n# Capital used for both crops should not exceed $26400:\nm += 10 * Potatoes + 110 * Squash <= 26400\n\n# Objective\n# Maximize profit ($700 per acre of potatoes, $144 per acre of squash):\nm.maximize(700 * Potatoes + 144 * Squash)\n", "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.9937883894974189}, {"start": 20, "end": 24, "word": "1000", "entity_group": "LIMIT", "score": 0.9988947978590037}, {"start": 66, "end": 74, "word": "potatoes", "entity_group": "VAR", "score": 0.9982569662444172}, {"start": 79, "end": 85, "word": "squash", "entity_group": "VAR", "score": 0.9982467488018151}, {"start": 98, "end": 105, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985240124586332}, {"start": 106, "end": 110, "word": "1200", "entity_group": "LIMIT", "score": 0.9997181546511013}, {"start": 149, "end": 154, "word": "26400", "entity_group": "LIMIT", "score": 0.9991212092928546}, {"start": 191, "end": 199, "word": "potatoes", "entity_group": "VAR", "score": 0.999638322851118}, {"start": 209, "end": 211, "word": "20", "entity_group": "PARAM", "score": 0.9997235901886451}, {"start": 240, "end": 242, "word": "10", "entity_group": "PARAM", "score": 0.9997280213743172}, {"start": 273, "end": 279, "word": "squash", "entity_group": "VAR", "score": 0.9996146381175803}, {"start": 289, "end": 291, "word": "23", "entity_group": "PARAM", "score": 0.9997466009091658}, {"start": 320, "end": 323, "word": "110", "entity_group": "PARAM", "score": 0.9996749492799476}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999778388657274}, {"start": 367, "end": 375, "word": "potatoes", "entity_group": "VAR", "score": 0.9983600374121384}, {"start": 381, "end": 384, "word": "700", "entity_group": "PARAM", "score": 0.9994533312215901}, {"start": 393, "end": 399, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999896226898149}, {"start": 416, "end": 422, "word": "squash", "entity_group": "VAR", "score": 0.9985191552924767}, {"start": 428, "end": 431, "word": "144", "entity_group": "PARAM", "score": 0.9994978401523575}, {"start": 483, "end": 491, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.99963073056574}, {"start": 498, "end": 504, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368681347657}]}
{"doc_id": "186157891", "document": "A food manufacturer wishes to mix pork and chicken to create sausages. The mixture needs to contain at least 10 units of protein and 15 units of fat. Pork costs $40 per kg and chicken costs $50 per kg. Per kilogram, pork contains 2 units of protein and 4 units of fat. Per kilogram, chicken contains 3 units of protein and 2 units of fat. Determine the minimum cost of the mixture.", "order_mapping": {"pork": 0, "chicken": 1, "Pork": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Pork": "40", "chicken": "50"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10", "terms": {"pork": "2", "chicken": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"pork": "4", "chicken": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Kilograms of pork\n- y: Kilograms of chicken\n\nObjective:\n- The food manufacturer wants to minimize the cost of the mixture. Given that pork costs $40 per kg and chicken costs $50 per kg, the objective function is: Minimize 40x + 50y\n\nConstraints:\n- The mixture needs to contain at least 10 units of protein, which translates to the constraint: 2x + 3y >= 10.\n- The mixture needs to contain at least 15 units of fat, leading to the constraint: 4x + 2y >= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 40x + 50y\nConstraints:\n2x + 3y >= 10\n4x + 2y >= 15", "canonical": {"objective": [40.0, 50.0], "constraints": [[-2.0, -3.0, -10.0], [-4.0, -2.0, -15.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount of pork in kilograms: Pork\n- Amount of chicken in kilograms: Chicken\n\nConstraints:\n- The mixture needs to contain at least 10 units of protein (2 units per kg of pork, 3 units per kg of chicken):\n  2 * Pork + 3 * Chicken >= 10\n- The mixture needs to contain at least 15 units of fat (4 units per kg of pork, 2 units per kg of chicken):\n  4 * Pork + 2 * Chicken >= 15\n\nObjective:\n- Minimize the cost of the mixture (Pork costs $40 per kg, Chicken costs $50 per kg):\n  40 * Pork + 50 * Chicken\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPork = intvar(0, 999999999)  # Amount of pork in kilograms\nChicken = intvar(0, 999999999)  # Amount of chicken in kilograms\n\n# Constraints\nm = Model()\n\n# The mixture needs to contain at least 10 units of protein:\nm += 2 * Pork + 3 * Chicken >= 10\n# The mixture needs to contain at least 15 units of fat:\nm += 4 * Pork + 2 * Chicken >= 15\n\n# Objective\n# Determine the minimum cost of the mixture (Pork costs $40 per kg, Chicken costs $50 per kg):\nm.minimize(40 * Pork + 50 * Chicken)\n", "entities": [{"start": 34, "end": 38, "word": "pork", "entity_group": "VAR", "score": 0.9975474055101816}, {"start": 43, "end": 50, "word": "chicken", "entity_group": "VAR", "score": 0.9879556181850315}, {"start": 101, "end": 109, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991580057753386}, {"start": 110, "end": 112, "word": "10", "entity_group": "LIMIT", "score": 0.9996753554584676}, {"start": 134, "end": 136, "word": "15", "entity_group": "LIMIT", "score": 0.9997270049145578}, {"start": 152, "end": 156, "word": "Pork", "entity_group": "VAR", "score": 0.9997466221698753}, {"start": 157, "end": 162, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9958397530473717}, {"start": 165, "end": 167, "word": "40", "entity_group": "PARAM", "score": 0.9996143731030003}, {"start": 179, "end": 186, "word": "chicken", "entity_group": "VAR", "score": 0.9996090481281165}, {"start": 187, "end": 192, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9940324818607197}, {"start": 195, "end": 197, "word": "50", "entity_group": "PARAM", "score": 0.9994416399002342}, {"start": 222, "end": 226, "word": "pork", "entity_group": "VAR", "score": 0.9996199340682027}, {"start": 236, "end": 237, "word": "2", "entity_group": "PARAM", "score": 0.9996688919053427}, {"start": 259, "end": 260, "word": "4", "entity_group": "PARAM", "score": 0.9996480538307296}, {"start": 291, "end": 298, "word": "chicken", "entity_group": "VAR", "score": 0.9995386901241173}, {"start": 308, "end": 309, "word": "3", "entity_group": "PARAM", "score": 0.999668336894733}, {"start": 331, "end": 332, "word": "2", "entity_group": "PARAM", "score": 0.9996644507363546}, {"start": 362, "end": 369, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9944760069890679}, {"start": 370, "end": 374, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9971118254824927}]}
{"doc_id": "377178712", "document": "A large engineering firm employs engineers and interns. Engineers earn $3000 per week while interns earn $750 per week. The projects requires at least 100 workers, of whom at least 20 must be interns. To maintain relations with the local universities, the number of interns must be at least a third the number of engineers. The company wants to keep the weekly payroll to be at most $200000. Formulate a LP to minimize wages.", "order_mapping": {"engineers": 0, "interns": 1, "Engineers": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "wages", "terms": {"Engineers": "3000", "interns": "750"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "100", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "interns", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "interns", "direction": "at least", "param": "third", "y_var": "engineers", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "200000", "terms": {"Engineers": "3000", "interns": "750"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of engineers\n- y: Number of interns\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both engineers and interns. Given that engineers earn $3000 per week and interns earn $750 per week, the objective function is: Minimize 3000x + 750y\n\nConstraints:\n- The company needs to have at least 100 workers combined, forming the constraint: x + y >= 100.\n- At least 20 interns are necessary, hence the constraint: y >= 20.\n- To maintain relations with the local universities, the number of interns must be at least a third the number of engineers: y >= 1/3x.\n- To control costs, the total wages for all employees need to be kept at most $200,000 per week, leading to the constraint: 3000x + 750y <= 200000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3000x + 750y\nConstraints:\nx + y >= 100\ny >= 20\ny >= 1/3x\n3000x + 750y <= 200000", "canonical": {"objective": [3000.0, 750.0], "constraints": [[-1.0, -1.0, -100.0], [0.0, -1.0, -20.0], [0.3333333333333333, -1.0, 0.0], [3000.0, 750.0, 200000.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of engineers employed: Engineers\n- Number of interns employed: Interns\n\nConstraints:\n- Total number of workers should be at least 100:\n  Engineers + Interns >= 100\n- At least 20 workers must be interns:\n  Interns >= 20\n- The number of interns should be at least a third of the number of engineers:\n  Interns >= 1/3 * Engineers\n- Total wages should be at most $200000 (Engineers earn $3000 per week and interns earn $750 per week):\n  3000 * Engineers + 750 * Interns <= 200000\n\nObjective: \n- Minimize the total wages (Engineers earn $3000 per week and interns earn $750 per week):\n  3000 * Engineers + 750 * Interns\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEngineers = intvar(0, 999999999)  # number of engineers\nInterns = intvar(0, 999999999)  # number of interns\n\n# Constraints\nm = Model()\n\n# The company requires a minimum of 100 workers:\nm += Engineers + Interns >= 100\n# At least 20 must be interns:\nm += Interns >= 20\n# The number of interns should be at least a third of the number of engineers:\nm += Interns >= (1/3) * Engineers\n# The company wants to keep the weekly payroll to be at most $200000 (Engineers earn $3000 per week and interns earn $750 per week):\nm += 3000 * Engineers + 750 * Interns <= 200000\n\n# Objective\n# Minimize the total wages (Engineers earn $3000 per week and interns earn $750 per week):\nm.minimize(3000 * Engineers + 750 * Interns)\n", "entities": [{"start": 33, "end": 42, "word": "engineers", "entity_group": "VAR", "score": 0.9993083034814247}, {"start": 47, "end": 54, "word": "interns", "entity_group": "VAR", "score": 0.9981830250434719}, {"start": 57, "end": 66, "word": "Engineers", "entity_group": "VAR", "score": 0.9996899721547468}, {"start": 67, "end": 71, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9885848110901032}, {"start": 74, "end": 78, "word": "3000", "entity_group": "PARAM", "score": 0.9996749799676465}, {"start": 94, "end": 101, "word": "interns", "entity_group": "VAR", "score": 0.9998086419233754}, {"start": 102, "end": 106, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9544340537602903}, {"start": 109, "end": 112, "word": "750", "entity_group": "PARAM", "score": 0.999485938739835}, {"start": 146, "end": 154, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988284703342256}, {"start": 155, "end": 158, "word": "100", "entity_group": "LIMIT", "score": 0.9997118722803473}, {"start": 177, "end": 185, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983151909240083}, {"start": 186, "end": 188, "word": "20", "entity_group": "LIMIT", "score": 0.9996913399474932}, {"start": 197, "end": 204, "word": "interns", "entity_group": "VAR", "score": 0.9997662818285566}, {"start": 273, "end": 280, "word": "interns", "entity_group": "VAR", "score": 0.9994116295093881}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978941406132915}, {"start": 300, "end": 305, "word": "third", "entity_group": "PARAM", "score": 0.9891140057764407}, {"start": 320, "end": 329, "word": "engineers", "entity_group": "VAR", "score": 0.9996662642562094}, {"start": 383, "end": 390, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9959110121621539}, {"start": 393, "end": 399, "word": "200000", "entity_group": "PARAM", "score": 0.999658045898467}, {"start": 420, "end": 428, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9988991783350087}, {"start": 429, "end": 434, "word": "wages", "entity_group": "OBJ_NAME", "score": 0.992889872168023}]}
{"doc_id": "-26774598", "document": "Iron and zinc are found in elk meat and bison meat. A serving of elk meat costs $6 and contains 5 units of iron and 3 units of zinc. A serving of bison meat costs $7 and contains 4 units of iron and 4 units of zinc. If at least 30 units of iron and 40 units of zinc must be consumed daily, formulate a LP to minimize cost.", "order_mapping": {"elk meat": 0, "bison meat": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"elk meat": "6", "bison meat": "7"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"elk meat": "5", "bison meat": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"elk meat": "3", "bison meat": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: servings of elk meat\n- y: servings of bison meat\n\nObjective:\n- The goal is to minimize the cost of the meat. A serving of elk meat costs $6 and a serving of bison meat costs $7. Therefore, the objective function is: Minimize 6x + 7y\n\nConstraints:\n- At least 30 units of iron must be consumed daily, which can be represented as: 5x + 4y >= 30\n- At least 40 units of zinc must be consumed daily, which can be represented as: 3x + 4y >= 40\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6x + 7y\nConstraints:\n5x + 4y >= 30\n3x + 4y >= 40", "canonical": {"objective": [6.0, 7.0], "constraints": [[-5.0, -4.0, -30.0], [-3.0, -4.0, -40.0]]}, "solution": {"x": 0, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of servings of elk meat: ElkMeat\n- Number of servings of bison meat: BisonMeat\n\nConstraints:\n- To meet the daily iron requirement (at least 30 units):\n  5 * ElkMeat + 4 * BisonMeat >= 30\n- To meet the daily zinc requirement (at least 40 units):\n  3 * ElkMeat + 4 * BisonMeat >= 40\n\nObjective:\n- Minimize the total cost of meat servings:\n  6 * ElkMeat + 7 * BisonMeat\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nElkMeat = intvar(0, 999999999)  # Number of servings of elk meat\nBisonMeat = intvar(0, 999999999)  # Number of servings of bison meat\n\n# Constraints\nm = Model()\n\n# At least 30 units of iron must be consumed daily:\nm += 5 * ElkMeat + 4 * BisonMeat >= 30\n# At least 40 units of zinc must be consumed daily:\nm += 3 * ElkMeat + 4 * BisonMeat >= 40\n\n# Objective\n# Minimize cost (6 dollars per serving of elk meat, 7 dollars per serving of bison meat):\nm.minimize(6 * ElkMeat + 7 * BisonMeat)\n", "entities": [{"start": 27, "end": 35, "word": "elk meat", "entity_group": "VAR", "score": 0.9999629980983975}, {"start": 40, "end": 50, "word": "bison meat", "entity_group": "VAR", "score": 0.9999747636493783}, {"start": 66, "end": 74, "word": "elk meat", "entity_group": "VAR", "score": 0.9999616480562616}, {"start": 75, "end": 80, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999665422218579}, {"start": 83, "end": 84, "word": "6", "entity_group": "PARAM", "score": 0.9996524802128218}, {"start": 98, "end": 99, "word": "5", "entity_group": "PARAM", "score": 0.9997328645105249}, {"start": 118, "end": 119, "word": "3", "entity_group": "PARAM", "score": 0.9997317478775807}, {"start": 149, "end": 159, "word": "bison meat", "entity_group": "VAR", "score": 0.9999760248629024}, {"start": 160, "end": 165, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996384267881212}, {"start": 168, "end": 169, "word": "7", "entity_group": "PARAM", "score": 0.9996796167850979}, {"start": 183, "end": 184, "word": "4", "entity_group": "PARAM", "score": 0.9997328588189891}, {"start": 203, "end": 204, "word": "4", "entity_group": "PARAM", "score": 0.9996888609733959}, {"start": 224, "end": 232, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990759632733989}, {"start": 233, "end": 235, "word": "30", "entity_group": "LIMIT", "score": 0.9997503827815699}, {"start": 254, "end": 256, "word": "40", "entity_group": "LIMIT", "score": 0.9997592409560468}, {"start": 314, "end": 322, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987317713342677}, {"start": 323, "end": 327, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9923291678126813}]}
{"doc_id": "-250500533", "document": "A caviar company makes caviar in two different locations, an eastern location and a western location. After harvesting the caviar from the fish, they are labelled as cheap, regular, or expensive. The eastern location costs $1000 to operate per day and produces 5 tons of cheap caviar, 7 tons of regular caviar, and 1 ton of expensive caviar. The western location costs $2000 to operate per day and produces 2 tons of cheap caviar, 6 tons of regular caviar, and 4 tons of expensive caviar. The company is also under contract to provide 25 tons of cheap caviar, 35 tons of regular caviar, and 15 tons of expensive caviar per week to a distribution company. How many days per week should each location operate to minimize costs?", "order_mapping": {"eastern location": 0, "western location": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"eastern location": "1000", "western location": "2000"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "25", "terms": {"eastern location": "5", "western location": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "35", "terms": {"eastern location": "7", "western location": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "15", "terms": {"eastern location": "1", "western location": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Days of operation for the eastern location\n- y: Days of operation for the western location\n\nObjective:\n- The company aims to minimize its operating costs. The eastern location costs $1000 per day to operate, and the western location costs $2000 per day. Therefore, the objective function is: Minimize 1000x + 2000y\n\nConstraints:\n- The company is under contract to provide 25 tons of cheap caviar per week. The eastern location produces 5 tons per day, and the western location produces 2 tons per day. This leads to the constraint: 5x + 2y >= 25.\n- Similarly, for regular caviar, the constraint is: 7x + 6y >= 35.\n- For expensive caviar, the constraint is: x + 4y >= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1000x + 2000y\nConstraints:\n5x + 2y >= 25\n7x + 6y >= 35\nx + 4y >= 15", "canonical": {"objective": [1000.0, 2000.0], "constraints": [[-5.0, -2.0, -25.0], [-7.0, -6.0, -35.0], [-1.0, -4.0, -15.0]]}, "solution": {"x": 4, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of days the eastern location operates per week: EasternLocationDays\n- Number of days the western location operates per week: WesternLocationDays\n\nConstraints:\n- To meet the contract for 25 tons of cheap caviar per week:\n  5 * EasternLocationDays + 2 * WesternLocationDays >= 25\n- To meet the contract for 35 tons of regular caviar per week:\n  7 * EasternLocationDays + 6 * WesternLocationDays >= 35\n- To meet the contract for 15 tons of expensive caviar per week:\n  1 * EasternLocationDays + 4 * WesternLocationDays >= 15\n\nObjective:\n- Minimize costs ($1000 per day for eastern location, $2000 per day for western location):\n  1000 * EasternLocationDays + 2000 * WesternLocationDays\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEasternLocationDays = intvar(0, 7)  # Number of days the eastern location operates per week\nWesternLocationDays = intvar(0, 7)  # Number of days the western location operates per week\n\n# Constraints\nm = Model()\n\n# To meet the contract for 25 tons of cheap caviar per week:\nm += 5 * EasternLocationDays + 2 * WesternLocationDays >= 25\n# To meet the contract for 35 tons of regular caviar per week:\nm += 7 * EasternLocationDays + 6 * WesternLocationDays >= 35\n# To meet the contract for 15 tons of expensive caviar per week:\nm += 1 * EasternLocationDays + 4 * WesternLocationDays >= 15\n\n# Objective\n# Minimize costs ($1000 per day for eastern location, $2000 per day for western location):\nm.minimize(1000 * EasternLocationDays + 2000 * WesternLocationDays)\n", "entities": [{"start": 62, "end": 78, "word": "eastern location", "entity_group": "VAR", "score": 0.9999814368784137}, {"start": 85, "end": 101, "word": "western location", "entity_group": "VAR", "score": 0.9999675628574514}, {"start": 206, "end": 222, "word": "eastern location", "entity_group": "VAR", "score": 0.9999754785681954}, {"start": 223, "end": 228, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994598095719397}, {"start": 231, "end": 235, "word": "1000", "entity_group": "PARAM", "score": 0.9996982595215603}, {"start": 268, "end": 269, "word": "5", "entity_group": "PARAM", "score": 0.9997247841139549}, {"start": 293, "end": 294, "word": "7", "entity_group": "PARAM", "score": 0.9997008302084689}, {"start": 324, "end": 325, "word": "1", "entity_group": "PARAM", "score": 0.9993204537666708}, {"start": 356, "end": 372, "word": "western location", "entity_group": "VAR", "score": 0.9999852988479472}, {"start": 373, "end": 378, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994099851507866}, {"start": 381, "end": 385, "word": "2000", "entity_group": "PARAM", "score": 0.9996982825712646}, {"start": 418, "end": 419, "word": "2", "entity_group": "PARAM", "score": 0.9997247891689901}, {"start": 443, "end": 444, "word": "6", "entity_group": "PARAM", "score": 0.9997008302084316}, {"start": 474, "end": 475, "word": "4", "entity_group": "PARAM", "score": 0.9996275393963087}, {"start": 541, "end": 548, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9981831346657628}, {"start": 549, "end": 551, "word": "25", "entity_group": "LIMIT", "score": 0.9988029141273655}, {"start": 575, "end": 577, "word": "35", "entity_group": "LIMIT", "score": 0.9996996340839964}, {"start": 607, "end": 609, "word": "15", "entity_group": "LIMIT", "score": 0.9996660414277603}, {"start": 727, "end": 735, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996006765599916}, {"start": 736, "end": 741, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990422161986309}]}
{"doc_id": "-374649990", "document": "A food truck sells and delivers rice bowls and quesadillas during the pandemic. The profit on a rice bowl is 3$, and the profit on a quesadilla is 2$. In order to thrive, it must sell at least 40 rice bowls but can make only up to 70 in a day. It must also sell at least 50 quesadillas due to its high demand, but can not prepare more than 80 a day. Due to staff shortage, the food truck can only prepare up to 100 items in total. How many of each food item should it prepare to satisfy its customers and maximize its daily profit?", "order_mapping": {"rice bowls": 0, "quesadillas": 1, "rice bowl": 0, "quesadilla": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"rice bowl": "3", "quesadilla": "2$."}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "40", "var": "rice bowls", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "make only up to", "limit": "70", "var": "rice bowls", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "quesadillas", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "not prepare more than", "limit": "80", "var": "quesadillas", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "in total", "limit": "100", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of rice bowls prepared\n- y: Number of quesadillas prepared\n\nObjective:\n- The food truck aims to maximize its daily profit. The profit on a rice bowl is $3, and the profit on a quesadilla is $2. Therefore, the objective function is: Maximize 3x + 2y\n\nConstraints:\n- The food truck must sell at least 40 rice bowls, leading to the constraint: x >= 40.\n- The food truck can make only up to 70 rice bowls in a day, resulting in the constraint: x <= 70.\n- It must sell at least 50 quesadillas, leading to the constraint: y >= 50.\n- The food truck can prepare up to 80 quesadillas in a day, resulting in the constraint: y <= 80.\n- Due to staff shortage, the food truck can only prepare up to 100 items in total, leading to the constraint: x + y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 2y\nConstraints:\nx >= 40\nx <= 70\ny >= 50\ny <= 80\nx + y <= 100", "canonical": {"objective": [-3.0, -2.0], "constraints": [[-1.0, 0.0, -40.0], [1.0, 0.0, 70.0], [0.0, -1.0, -50.0], [0.0, 1.0, 80.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 50, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of rice bowls prepared per day: RiceBowls\n- Number of quesadillas prepared per day: Quesadillas\n\nConstraints:\n- At least 40 rice bowls must be prepared, but no more than 70:\n  RiceBowls >= 40\n  RiceBowls <= 70\n- At least 50 quesadillas must be prepared, but no more than 80:\n  Quesadillas >= 50\n  Quesadillas <= 80\n- The total number of items prepared (rice bowls + quesadillas) must not exceed 100:\n  RiceBowls + Quesadillas <= 100\n\nObjective:\n- Maximize profit (3 dollars per rice bowl, 2 dollars per quesadilla):\n  3 * RiceBowls + 2 * Quesadillas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRiceBowls = intvar(0, 999999999)  # Number of rice bowls prepared per day\nQuesadillas = intvar(0, 999999999)  # Number of quesadillas prepared per day\n\n# Constraints\nm = Model()\n\n# The food truck must sell at least 40 rice bowls but can make only up to 70 in a day:\nm += RiceBowls >= 40\nm += RiceBowls <= 70\n# It must also sell at least 50 quesadillas due to its high demand, but cannot prepare more than 80 a day:\nm += Quesadillas >= 50\nm += Quesadillas <= 80\n# Due to staff shortage, the food truck can only prepare up to 100 items in total:\nm += RiceBowls + Quesadillas <= 100\n\n# Objective\n# Maximize profit (3 dollars per rice bowl, 2 dollars per quesadilla):\nm.maximize(3 * RiceBowls + 2 * Quesadillas)\n", "entities": [{"start": 32, "end": 42, "word": "rice bowls", "entity_group": "VAR", "score": 0.9999375428638871}, {"start": 47, "end": 58, "word": "quesadillas", "entity_group": "VAR", "score": 0.9984648499526765}, {"start": 85, "end": 91, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999331868712428}, {"start": 97, "end": 106, "word": "rice bowl", "entity_group": "VAR", "score": 0.9998258667697344}, {"start": 110, "end": 111, "word": "3", "entity_group": "PARAM", "score": 0.999564653219227}, {"start": 124, "end": 130, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999213342335367}, {"start": 136, "end": 146, "word": "quesadilla", "entity_group": "VAR", "score": 0.9994937795089931}, {"start": 150, "end": 153, "word": "2$.", "entity_group": "PARAM", "score": 0.9991614444689374}, {"start": 188, "end": 196, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987023498727874}, {"start": 197, "end": 199, "word": "40", "entity_group": "LIMIT", "score": 0.9995631642954856}, {"start": 200, "end": 210, "word": "rice bowls", "entity_group": "VAR", "score": 0.9999038513170526}, {"start": 219, "end": 234, "word": "make only up to", "entity_group": "CONST_DIR", "score": 0.527236736820723}, {"start": 235, "end": 237, "word": "70", "entity_group": "LIMIT", "score": 0.9990359435458916}, {"start": 267, "end": 275, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990130475380775}, {"start": 276, "end": 278, "word": "50", "entity_group": "LIMIT", "score": 0.999706323443773}, {"start": 279, "end": 290, "word": "quesadillas", "entity_group": "VAR", "score": 0.9996288669710182}, {"start": 324, "end": 345, "word": "not prepare more than", "entity_group": "CONST_DIR", "score": 0.9500171062584378}, {"start": 346, "end": 348, "word": "80", "entity_group": "LIMIT", "score": 0.9995926326713922}, {"start": 419, "end": 422, "word": "100", "entity_group": "LIMIT", "score": 0.9995769724392136}, {"start": 429, "end": 437, "word": "in total", "entity_group": "CONST_DIR", "score": 0.9868287060132616}, {"start": 514, "end": 522, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9971025987065018}, {"start": 533, "end": 539, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994872380486893}]}
{"doc_id": "1600733243", "document": "One batch of chocolate chip cookies is made of  314g of flour and 15g of butter while a batch of oatmeal cookies requires 271g of flour and 82g of butter. Find the maximum number of batches of cookies we can bake using 3000g of flour and 2000g of butter assuming that there is no shortage of the other ingredients used in making the cookies.", "order_mapping": {"chocolate chip cookies": 0, "oatmeal cookies": 1}, "obj_declaration": {"type": "objvar", "direction": "maximum", "name": "number of batches of cookies", "vars": ["chocolate chip cookies", "oatmeal cookies"]}, "const_declarations": [{"type": "linear", "direction": "using", "limit": "3000", "terms": {"oatmeal cookies": "271", "chocolate chip cookies": "314"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "using", "limit": "2000", "terms": {"oatmeal cookies": "82", "chocolate chip cookies": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of batches of chocolate chip cookies\n- y: Number of batches of oatmeal cookies\n\nObjective:\n- The goal is to maximize the total number of batches of cookies (x + y). \n\nConstraints:\n- The constraint for the flour is: 314x + 271y <= 3000\n- The constraint for the butter is: 15x + 82y <= 2000\n\nFormulation:\nMaximize: x + y\nConstraints:\n314x + 271y <= 3000\n15x + 82y <= 2000", "canonical": {"objective": [-1.0, -1.0], "constraints": [[314.0, 271.0, 3000.0], [15.0, 82.0, 2000.0]]}, "solution": {"x": 0, "y": 11}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate chip cookie batches: ChocolateChipBatches\n- Number of oatmeal cookie batches: OatmealBatches\n\nConstraints:\n- Total flour used should not exceed 3000g (314g for chocolate chip, 271g for oatmeal):\n  314 * ChocolateChipBatches + 271 * OatmealBatches <= 3000\n- Total butter used should not exceed 2000g (15g for chocolate chip, 82g for oatmeal):\n  15 * ChocolateChipBatches + 82 * OatmealBatches <= 2000\n\nObjective:\n- Maximize the total number of batches of cookies:\n  ChocolateChipBatches + OatmealBatches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateChipBatches = intvar(0, 999999999)  # Number of chocolate chip cookie batches\nOatmealBatches = intvar(0, 999999999)  # Number of oatmeal cookie batches\n\n# Constraints\nm = Model()\n\n# Total flour used should not exceed 3000g (314g for chocolate chip, 271g for oatmeal):\nm += 314 * ChocolateChipBatches + 271 * OatmealBatches <= 3000\n# Total butter used should not exceed 2000g (15g for chocolate chip, 82g for oatmeal):\nm += 15 * ChocolateChipBatches + 82 * OatmealBatches <= 2000\n\n# Objective\n# Maximize the total number of batches of cookies:\nm.maximize(ChocolateChipBatches + OatmealBatches)\n", "entities": [{"start": 13, "end": 35, "word": "chocolate chip cookies", "entity_group": "VAR", "score": 0.9965632876975269}, {"start": 47, "end": 50, "word": "314", "entity_group": "PARAM", "score": 0.9985445913461997}, {"start": 66, "end": 68, "word": "15", "entity_group": "PARAM", "score": 0.9996711404807628}, {"start": 98, "end": 113, "word": "oatmeal cookies", "entity_group": "VAR", "score": 0.9999616818081621}, {"start": 123, "end": 126, "word": "271", "entity_group": "PARAM", "score": 0.9980883127262413}, {"start": 142, "end": 144, "word": "82", "entity_group": "PARAM", "score": 0.9993434621714932}, {"start": 168, "end": 175, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.981413708479373}, {"start": 176, "end": 204, "word": "number of batches of cookies", "entity_group": "OBJ_NAME", "score": 0.9897515865904127}, {"start": 217, "end": 222, "word": "using", "entity_group": "CONST_DIR", "score": 0.7954147486560355}, {"start": 223, "end": 227, "word": "3000", "entity_group": "PARAM", "score": 0.9979079915403085}, {"start": 243, "end": 247, "word": "2000", "entity_group": "PARAM", "score": 0.9995403234979937}]}
{"doc_id": "221050166", "document": "Matter Auto manufactures EV cars and hybrid trucks that are targeted for baby boomers and millennials. To market these two products, Matter Auto has launched a boisterous ads campaign and has decided to purchase TV commercial spots on two channels: TV shows and sports programs. Each sports ad is seen by 4 million baby boomers and 18 million millennials and costs $90,000. Each TV show commercial is watched by 12 million baby boomers and 5 million millennials, and costs $20,000. Matter Auto would like to reach at least 40 million baby boomers and 25 million millennials. Determine how Matter Auto can meet its advertising requirements at minimum cost.", "order_mapping": {"TV shows": 0, "sports programs": 1, "sports ad": 1, "TV show": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"sports ad": "90,000", "TV show": "20,000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "40", "terms": {"sports ad": "4", "TV show": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "25", "terms": {"sports ad": "18", "TV show": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of TV show commercial spots\n- y: Number of sports ad commercial spots\n\nObjective:\n- Matter Auto wants to minimize its advertising costs. Each sports ad costs $90,000 and each TV show commercial costs $20,000. Therefore, the objective function is: Minimize 90000y + 20000x\n\nConstraints:\n- Matter Auto would like to reach at least 40 million baby boomers, which can be represented as: 12x + 4y >= 40\n- Matter Auto would like to reach at least 25 million millennials, which can be represented as: 5x + 18y >= 25\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 90000y + 20000x\nConstraints:\n12x + 4y >= 40\n5x + 18y >= 25", "canonical": {"objective": [20000.0, 90000.0], "constraints": [[-12.0, -4.0, -40.0], [-5.0, -18.0, -25.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of sports ads purchased: SportsAds\n- Number of TV show ads purchased: TVShowAds\n\nConstraints:\n- To reach at least 40 million baby boomers:\n  4 * SportsAds + 12 * TVShowAds >= 40\n- To reach at least 25 million millennials:\n  18 * SportsAds + 5 * TVShowAds >= 25\n\nObjective:\n- Minimize cost (90,000 dollars per sports ad, 20,000 dollars per TV show ad):\n  90,000 * SportsAds + 20,000 * TVShowAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSportsAds = intvar(0, 999999999)  # Number of sports ads purchased\nTVShowAds = intvar(0, 999999999)  # Number of TV show ads purchased\n\n# Constraints\nm = Model()\n\n# To reach at least 40 million baby boomers:\nm += 4 * SportsAds + 12 * TVShowAds >= 40\n# To reach at least 25 million millennials:\nm += 18 * SportsAds + 5 * TVShowAds >= 25\n\n# Objective\n# Minimize cost ($90,000 per sports ad, $20,000 per TV show ad):\nm.minimize(90000 * SportsAds + 20000 * TVShowAds)\n", "entities": [{"start": 252, "end": 260, "word": "TV shows", "entity_group": "VAR", "score": 0.999959944894464}, {"start": 265, "end": 280, "word": "sports programs", "entity_group": "VAR", "score": 0.9999804001585697}, {"start": 288, "end": 297, "word": "sports ad", "entity_group": "VAR", "score": 0.9999504141260782}, {"start": 309, "end": 310, "word": "4", "entity_group": "PARAM", "score": 0.9996695066367706}, {"start": 336, "end": 338, "word": "18", "entity_group": "PARAM", "score": 0.9997155579371595}, {"start": 363, "end": 368, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996454406453948}, {"start": 371, "end": 377, "word": "90,000", "entity_group": "PARAM", "score": 0.9997105224433223}, {"start": 385, "end": 392, "word": "TV show", "entity_group": "VAR", "score": 0.9999908576390537}, {"start": 418, "end": 420, "word": "12", "entity_group": "PARAM", "score": 0.9980074231025284}, {"start": 446, "end": 447, "word": "5", "entity_group": "PARAM", "score": 0.9996778733483318}, {"start": 474, "end": 479, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995242622460048}, {"start": 482, "end": 488, "word": "20,000", "entity_group": "PARAM", "score": 0.9997200851137649}, {"start": 523, "end": 531, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988987158175677}, {"start": 532, "end": 534, "word": "40", "entity_group": "LIMIT", "score": 0.9992943816840592}, {"start": 560, "end": 562, "word": "25", "entity_group": "LIMIT", "score": 0.9995735768070598}, {"start": 652, "end": 659, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.992395738976543}, {"start": 660, "end": 664, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986837669500506}]}
{"doc_id": "-1358145545", "document": "George has acquired 200 acres of land in the tropics. He wants to plant coconut trees and banana trees, as he knows he can sell all the bananas and coconuts harvested. Coconut trees cost $200 per acre to maintain, yield a profit of $400 per acre, and require 5 days worth of labor per acre. Banana trees cost $150 per acre to maintain, yield a profit of $350 per acre, and require 4 days worth of labor per acre. George has a budget of $15000 and 750 days worth of labor available (among all his workers). How many acres of each tree should George plant in order to maximize profit?", "order_mapping": {"coconut trees": 0, "banana trees": 1, "bananas": 1, "coconuts": 0, "Coconut trees": 0, "Banana trees": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Coconut trees": "400", "Banana trees": "350"}}, "const_declarations": [{"type": "sum", "direction": "acquired", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "15000", "terms": {"Coconut trees": "200", "Banana trees": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "750", "terms": {"Coconut trees": "5", "Banana trees": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land planted with coconut trees\n- y: Acres of land planted with banana trees\n\nObjective:\n- George aims to maximize his profit. Coconut trees yield a profit of $400 per acre and banana trees yield a profit of $350 per acre. Therefore, the objective function is: Maximize 400x + 350y\n\nConstraints:\n- George has acquired 200 acres of land, so the constraint is: x + y <= 200.\n- George has a budget of $15000, which translates to the constraint: 200x + 150y <= 15000.\n- George has 750 days worth of labor available, leading to the constraint: 5x + 4y <= 750.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 350y\nConstraints:\nx + y <= 200\n200x + 150y <= 15000\n5x + 4y <= 750", "canonical": {"objective": [-400.0, -350.0], "constraints": [[1.0, 1.0, 200.0], [200.0, 150.0, 15000.0], [5.0, 4.0, 750.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of acres planted with coconut trees: CoconutTrees\n- Number of acres planted with banana trees: BananaTrees\n\nConstraints:\n- Total acres planted should not exceed 200:\n  CoconutTrees + BananaTrees <= 200\n- Maintenance cost should not exceed $15000:\n  200 * CoconutTrees + 150 * BananaTrees <= 15000\n- Labor days should not exceed 750 days:\n  5 * CoconutTrees + 4 * BananaTrees <= 750\n\nObjective:\n- Maximize profit ($400 profit per acre for coconut trees, $350 profit per acre for banana trees):\n  400 * CoconutTrees + 350 * BananaTrees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoconutTrees = intvar(0, 999999999)  # Number of acres planted with coconut trees\nBananaTrees = intvar(0, 999999999)  # Number of acres planted with banana trees\n\n# Constraints\nm = Model()\n\n# Total acres planted should not exceed 200:\nm += CoconutTrees + BananaTrees <= 200\n# Maintenance cost should not exceed $15000 ($200 per acre for coconut trees, $150 per acre for banana trees):\nm += 200 * CoconutTrees + 150 * BananaTrees <= 15000\n# Labor days should not exceed 750 days (5 days per acre for coconut trees, 4 days per acre for banana trees):\nm += 5 * CoconutTrees + 4 * BananaTrees <= 750\n\n# Objective\n# Maximize profit ($400 profit per acre for coconut trees, $350 profit per acre for banana trees):\nm.maximize(400 * CoconutTrees + 350 * BananaTrees)\n", "entities": [{"start": 11, "end": 19, "word": "acquired", "entity_group": "CONST_DIR", "score": 0.9948259074303489}, {"start": 20, "end": 23, "word": "200", "entity_group": "LIMIT", "score": 0.9988666996594983}, {"start": 73, "end": 86, "word": "coconut trees", "entity_group": "VAR", "score": 0.9999698518508068}, {"start": 91, "end": 103, "word": "banana trees", "entity_group": "VAR", "score": 0.999984099451478}, {"start": 138, "end": 145, "word": "bananas", "entity_group": "VAR", "score": 0.9996508450360504}, {"start": 150, "end": 158, "word": "coconuts", "entity_group": "VAR", "score": 0.9997930664648782}, {"start": 171, "end": 184, "word": "Coconut trees", "entity_group": "VAR", "score": 0.9999771840990098}, {"start": 192, "end": 195, "word": "200", "entity_group": "PARAM", "score": 0.9995561429100358}, {"start": 227, "end": 233, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998619595646436}, {"start": 239, "end": 242, "word": "400", "entity_group": "PARAM", "score": 0.9992907161799085}, {"start": 266, "end": 267, "word": "5", "entity_group": "PARAM", "score": 0.9997093562067647}, {"start": 299, "end": 311, "word": "Banana trees", "entity_group": "VAR", "score": 0.999974781529913}, {"start": 319, "end": 322, "word": "150", "entity_group": "PARAM", "score": 0.999485868999182}, {"start": 354, "end": 360, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998619595646445}, {"start": 366, "end": 369, "word": "350", "entity_group": "PARAM", "score": 0.9992907161799094}, {"start": 393, "end": 394, "word": "4", "entity_group": "PARAM", "score": 0.999709377450235}, {"start": 439, "end": 445, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9984658146827236}, {"start": 451, "end": 456, "word": "15000", "entity_group": "LIMIT", "score": 0.9984889204910923}, {"start": 461, "end": 464, "word": "750", "entity_group": "LIMIT", "score": 0.9993822984533582}, {"start": 485, "end": 494, "word": "available", "entity_group": "CONST_DIR", "score": 0.9997295969839567}, {"start": 583, "end": 591, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.990776318410023}, {"start": 592, "end": 598, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9988012061959632}]}
{"doc_id": "-1138570462", "document": "An vehicle company manufactures two types of vehicles: cars and bikes. A car requires 3 hours of engineering time while a bike requires 1 hour of engineering time. Both vehicles require 30 kg of steel. The company receives 1000 kg of steel each week and a total of 400 hours of engineering time is available. Each car nets $5000 in profit, while each bike nets $1000 in profit. The company wishes to maximize profit. Ignoring the divisibility issues, construct a linear programming problem whose solution will determine the number of each type of vehicle the company should produce.", "order_mapping": {"cars": 0, "bikes": 1, "car": 0, "bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"car": "5000", "bike": "1000"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"car": "3", "bike": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "receives", "limit": "1000", "terms": {"car": "30", "bike": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cars to produce\n- y: Number of bikes to produce\n\nObjective:\n- The company aims to maximize its profit. Each car nets $5000 in profit, while each bike nets $1000 in profit. Therefore, the objective function is: Maximize 5000x + 1000y\n\nConstraints:\n- The total engineering time available is 400 hours, so the constraint is: 3x + y <= 400.\n- The company receives 1000 kg of steel each week, so the constraint is: 30x + 30y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5000x + 1000y\nConstraints:\n3x + y <= 400\n30x + 30y <= 1000", "canonical": {"objective": [-5000.0, -1000.0], "constraints": [[3.0, 1.0, 400.0], [30.0, 30.0, 1000.0]]}, "solution": {"x": 33, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of cars produced: Cars\n- Number of bikes produced: Bikes\n\nConstraints:\n- Total engineering time for cars and bikes should not exceed 400 hours:\n  3 * Cars + 1 * Bikes <= 400\n- Total steel used for cars and bikes should not exceed 1000 kg:\n  30 * Cars + 30 * Bikes <= 1000\n\nObjective:\n- Maximize profit (5000 dollars per car, 1000 dollars per bike):\n  5000 * Cars + 1000 * Bikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCars = intvar(0, 999999999)  # Number of cars produced\nBikes = intvar(0, 999999999)  # Number of bikes produced\n\n# Constraints\nm = Model()\n\n# Total engineering time should not exceed 400 hours (3 hours per car, 1 hour per bike):\nm += 3 * Cars + 1 * Bikes <= 400\n# Total steel used should not exceed 1000 kg (30 kg per car, 30 kg per bike):\nm += 30 * Cars + 30 * Bikes <= 1000\n\n# Objective\n# Maximize profit (5000 dollars per car, 1000 dollars per bike):\nm.maximize(5000 * Cars + 1000 * Bikes)\n", "entities": [{"start": 56, "end": 60, "word": "cars", "entity_group": "VAR", "score": 0.9996784743844334}, {"start": 65, "end": 70, "word": "bikes", "entity_group": "VAR", "score": 0.9998232675427753}, {"start": 75, "end": 78, "word": "car", "entity_group": "VAR", "score": 0.9994477749024195}, {"start": 88, "end": 89, "word": "3", "entity_group": "PARAM", "score": 0.9994483365886079}, {"start": 124, "end": 128, "word": "bike", "entity_group": "VAR", "score": 0.9997012181490712}, {"start": 138, "end": 139, "word": "1", "entity_group": "PARAM", "score": 0.9969908741655717}, {"start": 189, "end": 191, "word": "30", "entity_group": "PARAM", "score": 0.9990992274618491}, {"start": 218, "end": 226, "word": "receives", "entity_group": "CONST_DIR", "score": 0.9950731580677544}, {"start": 227, "end": 231, "word": "1000", "entity_group": "LIMIT", "score": 0.9989313149107909}, {"start": 269, "end": 272, "word": "400", "entity_group": "LIMIT", "score": 0.999680531582262}, {"start": 302, "end": 311, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990027882171979}, {"start": 319, "end": 322, "word": "car", "entity_group": "VAR", "score": 0.9991834247826341}, {"start": 330, "end": 334, "word": "5000", "entity_group": "PARAM", "score": 0.9996852303454326}, {"start": 338, "end": 344, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999311682131184}, {"start": 358, "end": 362, "word": "bike", "entity_group": "VAR", "score": 0.9997381149372955}, {"start": 370, "end": 374, "word": "1000", "entity_group": "PARAM", "score": 0.9995953287378389}, {"start": 378, "end": 384, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999506670256628}, {"start": 409, "end": 417, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9972711057893698}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998814894186063}]}
{"doc_id": "1543270953", "document": "A phone company makes two phone models: a touchscreen phone and a flip phone . Each touchscreen phone requires 30 minutes of hardware setup and 20 minutes of software verification. Each flip phone requires 80 minutes of hardware setup and 15 minutes of software verification. The maximum available time for hardware setup is 5000 minutes and the maximum available time for software verification is 3750 minutes. If the company makes a profit of $150 per touchscreen phone and a profit of $200 per flip phone, how many of each should be made to maximize profit?", "order_mapping": {"touchscreen phone": 0, "flip phone": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"flip phone": "200", "touchscreen phone": "150"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "5000", "terms": {"touchscreen phone": "30", "flip phone": "80"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "3750", "terms": {"touchscreen phone": "20", "flip phone": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of touchscreen phones\n- y: Number of flip phones\n\nObjective:\n- The company aims to maximize its profit. The profit per touchscreen phone is $150 and the profit per flip phone is $200. Therefore, the objective function is: Maximize 150x + 200y\n\nConstraints:\n- The maximum available time for hardware setup is 5000 minutes, which translates to the constraint: 30x + 80y <= 5000.\n- The maximum available time for software verification is 3750 minutes, leading to the constraint: 20x + 15y <= 3750.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 200y\nConstraints:\n30x + 80y <= 5000\n20x + 15y <= 3750", "canonical": {"objective": [-150.0, -200.0], "constraints": [[30.0, 80.0, 5000.0], [20.0, 15.0, 3750.0]]}, "solution": {"x": 166, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of touchscreen phones made: TouchscreenPhone\n- Number of flip phones made: FlipPhone\n\nConstraints:\n- Hardware setup time constraint (5000 minutes maximum):\n  30 * TouchscreenPhone + 80 * FlipPhone <= 5000\n- Software verification time constraint (3750 minutes maximum):\n  20 * TouchscreenPhone + 15 * FlipPhone <= 3750\n\nObjective:\n- Maximize profit ($150 profit per touchscreen phone, $200 profit per flip phone):\n  150 * TouchscreenPhone + 200 * FlipPhone\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTouchscreenPhone = intvar(0, 999999999)  # Number of touchscreen phones made\nFlipPhone = intvar(0, 999999999)  # Number of flip phones made\n\n# Constraints\nm = Model()\n\n# Maximum available time for hardware setup is 5000 minutes:\nm += 30 * TouchscreenPhone + 80 * FlipPhone <= 5000\n# Maximum available time for software verification is 3750 minutes:\nm += 20 * TouchscreenPhone + 15 * FlipPhone <= 3750\n\n# Objective\n# Maximize profit ($150 per touchscreen phone and $200 per flip phone):\nm.maximize(150 * TouchscreenPhone + 200 * FlipPhone)\n", "entities": [{"start": 43, "end": 60, "word": "touchscreen phone", "entity_group": "VAR", "score": 0.9999380212889629}, {"start": 67, "end": 77, "word": "flip phone", "entity_group": "VAR", "score": 0.9999758664059059}, {"start": 85, "end": 102, "word": "touchscreen phone", "entity_group": "VAR", "score": 0.9999870162761301}, {"start": 112, "end": 114, "word": "30", "entity_group": "PARAM", "score": 0.9997211686922828}, {"start": 145, "end": 147, "word": "20", "entity_group": "PARAM", "score": 0.9995880889738211}, {"start": 188, "end": 198, "word": "flip phone", "entity_group": "VAR", "score": 0.9999787090902953}, {"start": 208, "end": 210, "word": "80", "entity_group": "PARAM", "score": 0.9997316486762873}, {"start": 241, "end": 243, "word": "15", "entity_group": "PARAM", "score": 0.9995880362460832}, {"start": 328, "end": 332, "word": "5000", "entity_group": "LIMIT", "score": 0.9995705466648312}, {"start": 349, "end": 356, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.4085773396273854}, {"start": 401, "end": 405, "word": "3750", "entity_group": "LIMIT", "score": 0.9995337825420852}, {"start": 439, "end": 445, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996139662186133}, {"start": 451, "end": 454, "word": "150", "entity_group": "PARAM", "score": 0.9993725615873144}, {"start": 459, "end": 476, "word": "touchscreen phone", "entity_group": "VAR", "score": 0.9999719184148114}, {"start": 483, "end": 489, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998565060574892}, {"start": 495, "end": 498, "word": "200", "entity_group": "PARAM", "score": 0.9993922666815699}, {"start": 503, "end": 513, "word": "flip phone", "entity_group": "VAR", "score": 0.9999595899342846}, {"start": 551, "end": 559, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994845787652616}, {"start": 560, "end": 566, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998127223798491}]}
{"doc_id": "2122514169", "document": "A beauty and health company makes two types of dish detergents Fruity Loop and Passion Cook. Fruity Loop consists of 10% soap and 6% citric acid and Passion Cook consists of 5% soap and 10% citric acid. After doing some research, the company realizes that it needs to use at least 20 kg of soap and 15 kg of citric acid. If Fruity Loop costs $6 per kg and Passion Cook costs $5 per kg, determine how much of each type of detergents should be produced so that nutrient requirements are met at a minimum cost.", "order_mapping": {"Fruity Loop": 0, "Passion Cook": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Fruity Loop": "6", "Passion Cook": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "15", "terms": {"Fruity Loop": "6%", "Passion Cook": "10%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"Fruity Loop": "10%", "Passion Cook": "5%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of Fruity Loop dish detergent to be produced\n- y: kg of Passion Cook dish detergent to be produced\n\nObjective:\n- The company aims to minimize the cost of production. Fruity Loop costs $6 per kg and Passion Cook costs $5 per kg. Therefore, the objective function is: Minimize 6x + 5y\n\nConstraints:\n- The company needs to use at least 20 kg of soap, leading to the constraint: 0.10x + 0.05y >= 20\n- The company needs to use at least 15 kg of citric acid, leading to the constraint: 0.06x + 0.10y >= 15\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6x + 5y\nConstraints:\n0.10x + 0.05y >= 20\n0.06x + 0.10y >= 15", "canonical": {"objective": [6.0, 5.0], "constraints": [[-0.1, -0.05, -20.0], [-0.06, -0.1, -15.0]]}, "solution": {"x": 178, "y": 44}, "pseudo_model": "\nDecision Variables:\n- Amount of Fruity Loop detergent produced: FruityLoop (in kg)\n- Amount of Passion Cook detergent produced: PassionCook (in kg)\n\nConstraints:\n- Soap requirement (at least 20 kg):\n  0.10 * FruityLoop + 0.05 * PassionCook >= 20\n- Citric acid requirement (at least 15 kg):\n  0.06 * FruityLoop + 0.10 * PassionCook >= 15\n\nObjective:\n- Minimize cost (Fruity Loop costs $6 per kg, Passion Cook costs $5 per kg):\n  6 * FruityLoop + 5 * PassionCook\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFruityLoop = intvar(0, 999999999)  # Amount of Fruity Loop detergent produced (in kg)\nPassionCook = intvar(0, 999999999)  # Amount of Passion Cook detergent produced (in kg)\n\n# Constraints\nm = Model()\n\n# Soap requirement: at least 20 kg of soap\n# Fruity Loop has 10% soap, Passion Cook has 5% soap\nm += 0.10 * FruityLoop + 0.05 * PassionCook >= 20\n\n# Citric acid requirement: at least 15 kg of citric acid\n# Fruity Loop has 6% citric acid, Passion Cook has 10% citric acid\nm += 0.06 * FruityLoop + 0.10 * PassionCook >= 15\n\n# Objective\n# Minimize cost: Fruity Loop costs $6 per kg, Passion Cook costs $5 per kg\nm.minimize(6 * FruityLoop + 5 * PassionCook)\n", "entities": [{"start": 63, "end": 74, "word": "Fruity Loop", "entity_group": "VAR", "score": 0.9999751184036375}, {"start": 79, "end": 91, "word": "Passion Cook", "entity_group": "VAR", "score": 0.9999883965519164}, {"start": 94, "end": 105, "word": "Fruity Loop", "entity_group": "VAR", "score": 0.9999824520322615}, {"start": 118, "end": 122, "word": "10 %", "entity_group": "PARAM", "score": 0.942588042473988}, {"start": 132, "end": 135, "word": "6 %", "entity_group": "PARAM", "score": 0.9913718758611465}, {"start": 152, "end": 164, "word": "Passion Cook", "entity_group": "VAR", "score": 0.9999832338173266}, {"start": 177, "end": 180, "word": "5 %", "entity_group": "PARAM", "score": 0.9188835005465082}, {"start": 190, "end": 194, "word": "10 %", "entity_group": "PARAM", "score": 0.9914395448603297}, {"start": 279, "end": 287, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999088011506362}, {"start": 288, "end": 290, "word": "20", "entity_group": "LIMIT", "score": 0.9997174374106311}, {"start": 306, "end": 308, "word": "15", "entity_group": "LIMIT", "score": 0.9997083414335475}, {"start": 332, "end": 343, "word": "Fruity Loop", "entity_group": "VAR", "score": 0.9999866276423085}, {"start": 344, "end": 349, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994550562663521}, {"start": 352, "end": 353, "word": "6", "entity_group": "PARAM", "score": 0.9996501535318428}, {"start": 365, "end": 377, "word": "Passion Cook", "entity_group": "VAR", "score": 0.9999822166927486}, {"start": 378, "end": 383, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994360025436323}, {"start": 386, "end": 387, "word": "5", "entity_group": "PARAM", "score": 0.9995758604790812}, {"start": 505, "end": 512, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9844682438142404}, {"start": 513, "end": 517, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9981517240848568}]}
{"doc_id": "-1371952559", "document": "A weight loss program needs to include a minimum of 200 units of protein and 50 units of carbs. There are two cuisine options available: Indian and Thai. One plate of Indian food contains 13 units of protein and 23 units of carbs. One plate of Thai food contains 8 units of protein and 12 units of carbs. Indian food costs $ 12 per plate food and Thai food costs $ 15 per plate. Find the minimum cost for the program that can consist of a mixture of the cuisines and at the same time meet the minimal protein and carb requirements.", "order_mapping": {"Indian": 0, "Thai": 1, "Indian food": 0, "Thai food": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Indian food": "12", "Thai food": "15"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "200", "terms": {"Indian food": "13", "Thai food": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"Indian food": "23", "Thai food": "12"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of plates of Indian food\n- y: Number of plates of Thai food\n\nObjective:\n- The weight loss program aims to minimize the cost of the food. Given that Indian food costs $12 per plate and Thai food costs $15 per plate, the objective function is: Minimize 12x + 15y\n\nConstraints:\n- The program needs to include a minimum of 200 units of protein, leading to the constraint: 13x + 8y >= 200\n- The program needs to include a minimum of 50 units of carbs, leading to the constraint: 23x + 12y >= 50\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 12x + 15y\nConstraints:\n13x + 8y >= 200\n23x + 12y >= 50", "canonical": {"objective": [12.0, 15.0], "constraints": [[-13.0, -8.0, -200.0], [-23.0, -12.0, -50.0]]}, "solution": {"x": 16, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Indian food plates: IndianFood\n- Number of Thai food plates: ThaiFood\n\nConstraints:\n- To meet the minimum protein requirement (200 units):\n  13 * IndianFood + 8 * ThaiFood >= 200\n- To meet the minimum carb requirement (50 units):\n  23 * IndianFood + 12 * ThaiFood >= 50\n\nObjective:\n- Minimize the total cost of the program:\n  12 * IndianFood + 15 * ThaiFood\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIndianFood = intvar(0, 999999999)  # Number of Indian food plates\nThaiFood = intvar(0, 999999999)  # Number of Thai food plates\n\n# Constraints\nm = Model()\n\n# Minimum of 200 units of protein required:\nm += 13 * IndianFood + 8 * ThaiFood >= 200\n# Minimum of 50 units of carbs required:\nm += 23 * IndianFood + 12 * ThaiFood >= 50\n\n# Objective\n# Minimize cost ($12 per plate of Indian food, $15 per plate of Thai food):\nm.minimize(12 * IndianFood + 15 * ThaiFood)\n", "entities": [{"start": 41, "end": 48, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9976887650640903}, {"start": 52, "end": 55, "word": "200", "entity_group": "LIMIT", "score": 0.9997765058533664}, {"start": 77, "end": 79, "word": "50", "entity_group": "LIMIT", "score": 0.999692615403876}, {"start": 139, "end": 145, "word": "Indian", "entity_group": "VAR", "score": 0.9996222093932016}, {"start": 150, "end": 154, "word": "Thai", "entity_group": "VAR", "score": 0.9995402833915507}, {"start": 170, "end": 181, "word": "Indian food", "entity_group": "VAR", "score": 0.9997735757197962}, {"start": 191, "end": 193, "word": "13", "entity_group": "PARAM", "score": 0.999603528050845}, {"start": 215, "end": 217, "word": "23", "entity_group": "PARAM", "score": 0.999702146038237}, {"start": 248, "end": 257, "word": "Thai food", "entity_group": "VAR", "score": 0.9998636757318974}, {"start": 267, "end": 268, "word": "8", "entity_group": "PARAM", "score": 0.9996034325044287}, {"start": 290, "end": 292, "word": "12", "entity_group": "PARAM", "score": 0.9996760788220815}, {"start": 310, "end": 321, "word": "Indian food", "entity_group": "VAR", "score": 0.9999084995285663}, {"start": 322, "end": 327, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999737022415752}, {"start": 330, "end": 332, "word": "12", "entity_group": "PARAM", "score": 0.9995209113247522}, {"start": 352, "end": 361, "word": "Thai food", "entity_group": "VAR", "score": 0.9999224473285444}, {"start": 362, "end": 367, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.99898473160959}, {"start": 370, "end": 372, "word": "15", "entity_group": "PARAM", "score": 0.9995584607526578}, {"start": 394, "end": 401, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9883111408473353}, {"start": 402, "end": 406, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9973758807372791}]}
{"doc_id": "-879837204", "document": "John has pears and broccoli to eat. A pound of pears costs $6 and contains 2 units of calcium, 5 units of potassium, and 3 units of magnesium per pound. A pound of broccoli costs $8 and contains 4 units of calcium, 3 units of potassium, and 6 units of magnesium per pound. There is nothing else available to eat and John must meet his daily requirements of at least 15 units of calcium, 20 units of potassium, and 17 units of magnesium. How many pounds of each should John eat to minimize his cost?", "order_mapping": {"pears": 0, "broccoli": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"broccoli": "8", "pears": "6"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "15", "terms": {"pears": "2", "broccoli": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"pears": "5", "broccoli": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "17", "terms": {"pears": "3", "broccoli": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Pounds of pears to eat\n- y: Pounds of broccoli to eat\n\nObjective:\n- John wants to minimize his cost. A pound of pears costs $6 and a pound of broccoli costs $8. Therefore, the objective function is: Minimize 6x + 8y\n\nConstraints:\n- John must meet his daily requirements of at least 15 units of calcium, 20 units of potassium, and 17 units of magnesium. This leads to the following constraints:\n    - 2x + 4y >= 15 (calcium)\n    - 5x + 3y >= 20 (potassium)\n    - 3x + 6y >= 17 (magnesium)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6x + 8y\nConstraints:\n2x + 4y >= 15\n5x + 3y >= 20\n3x + 6y >= 17", "canonical": {"objective": [6.0, 8.0], "constraints": [[-2.0, -4.0, -15.0], [-5.0, -3.0, -20.0], [-3.0, -6.0, -17.0]]}, "solution": {"x": 4, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Pounds of pears John eats: Pears\n- Pounds of broccoli John eats: Broccoli\n\nConstraints:\n- To meet at least 15 units of calcium:\n  2*Pears + 4*Broccoli >= 15\n- To meet at least 20 units of potassium:\n  5*Pears + 3*Broccoli >= 20\n- To meet at least 17 units of magnesium:\n  3*Pears + 6*Broccoli >= 17\n\nObjective:\n- Minimize cost (Pears cost $6 per pound, Broccoli costs $8 per pound):\n  6*Pears + 8*Broccoli\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPears = intvar(0, 999999999)  # pounds of pears John eats\nBroccoli = intvar(0, 999999999)  # pounds of broccoli John eats\n\n# Constraints\nm = Model()\n\n# John's daily requirements:\n# At least 15 units of calcium:\nm += 2*Pears + 4*Broccoli >= 15\n# At least 20 units of potassium:\nm += 5*Pears + 3*Broccoli >= 20\n# At least 17 units of magnesium:\nm += 3*Pears + 6*Broccoli >= 17\n\n# Objective\n# Minimize cost (Pears cost $6 per pound, Broccoli costs $8 per pound):\nm.minimize(6*Pears + 8*Broccoli)\n", "entities": [{"start": 9, "end": 14, "word": "pears", "entity_group": "VAR", "score": 0.9997681867392516}, {"start": 19, "end": 27, "word": "broccoli", "entity_group": "VAR", "score": 0.99920184385614}, {"start": 48, "end": 53, "word": "pears", "entity_group": "VAR", "score": 0.9995854687901303}, {"start": 54, "end": 59, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9961123026746159}, {"start": 62, "end": 63, "word": "6", "entity_group": "PARAM", "score": 0.9995557445097946}, {"start": 77, "end": 78, "word": "2", "entity_group": "PARAM", "score": 0.9996715131070442}, {"start": 98, "end": 99, "word": "5", "entity_group": "PARAM", "score": 0.9997344984698531}, {"start": 125, "end": 126, "word": "3", "entity_group": "PARAM", "score": 0.9996178005993976}, {"start": 169, "end": 177, "word": "broccoli", "entity_group": "VAR", "score": 0.9994684604275682}, {"start": 178, "end": 183, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.995579433351685}, {"start": 186, "end": 187, "word": "8", "entity_group": "PARAM", "score": 0.999512171732024}, {"start": 201, "end": 202, "word": "4", "entity_group": "PARAM", "score": 0.9996997276257538}, {"start": 222, "end": 223, "word": "3", "entity_group": "PARAM", "score": 0.999734498469853}, {"start": 249, "end": 250, "word": "6", "entity_group": "PARAM", "score": 0.9996177989257261}, {"start": 366, "end": 374, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991093102752174}, {"start": 375, "end": 377, "word": "15", "entity_group": "LIMIT", "score": 0.99971636944135}, {"start": 397, "end": 399, "word": "20", "entity_group": "LIMIT", "score": 0.9997349598165537}, {"start": 425, "end": 427, "word": "17", "entity_group": "LIMIT", "score": 0.9992901342934399}, {"start": 492, "end": 500, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.99913650192361}, {"start": 505, "end": 509, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9968910119711794}]}
{"doc_id": "2048818571", "document": "East Oak Designs are famous for its high-end furniture. Each sofa produced by East Oak Designs nets the company a profit of $400. Each kitchen cabinet yields a $1200 profit. Every week, 100 gallons of lacquer and 300 lengths of high-quality oak are available. Each sofa requires approximately 3 gallon of lacquer and 10 length of oak. Each kitchen cabinet takes 10 gallon of lacquer and 24 lengths of wood. What should the production plan for East Oak Designs to make a maximum profit?", "order_mapping": {"sofa": 0, "kitchen cabinet": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"sofa": "400", "kitchen cabinet": "1200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"sofa": "3", "kitchen cabinet": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"sofa": "10", "kitchen cabinet": "24"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sofas produced\n- y: Number of kitchen cabinets produced\n\nObjective:\n- The company aims to maximize its profit. Each sofa produced yields a profit of $400, and each kitchen cabinet yields a profit of $1200. Therefore, the objective function is: Maximize 400x + 1200y\n\nConstraints:\n- The availability of resources limits the production. Each week, 100 gallons of lacquer are available, and each sofa requires 3 gallons, and each kitchen cabinet requires 10 gallons. This leads to the constraint: 3x + 10y <= 100.\n- Additionally, 300 lengths of high-quality oak are available, and each sofa requires 10 lengths, and each kitchen cabinet requires 24 lengths. This results in the constraint: 10x + 24y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 1200y\nConstraints:\n3x + 10y <= 100\n10x + 24y <= 300", "canonical": {"objective": [-400.0, -1200.0], "constraints": [[3.0, 10.0, 100.0], [10.0, 24.0, 300.0]]}, "solution": {"x": 20, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of sofas produced: Sofas\n- Number of kitchen cabinets produced: KitchenCabinets\n\nConstraints:\n- Lacquer usage for all products should not exceed 100 gallons (3 gallons per sofa, 10 gallons per kitchen cabinet):\n  3 * Sofas + 10 * KitchenCabinets <= 100\n- Oak usage for all products should not exceed 300 lengths (10 lengths per sofa, 24 lengths per kitchen cabinet):\n  10 * Sofas + 24 * KitchenCabinets <= 300\n\nObjective:\n- Maximize profit ($400 profit per sofa, $1200 profit per kitchen cabinet):\n  400 * Sofas + 1200 * KitchenCabinets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSofas = intvar(0, 999999999)  # Number of sofas produced\nKitchenCabinets = intvar(0, 999999999)  # Number of kitchen cabinets produced\n\n# Constraints\nm = Model()\n\n# Lacquer constraint: 3 gallons per sofa and 10 gallons per kitchen cabinet, with 100 gallons available:\nm += 3 * Sofas + 10 * KitchenCabinets <= 100\n# Oak constraint: 10 lengths per sofa and 24 lengths per kitchen cabinet, with 300 lengths available:\nm += 10 * Sofas + 24 * KitchenCabinets <= 300\n\n# Objective\n# Maximize profit ($400 per sofa and $1200 per kitchen cabinet):\nm.maximize(400 * Sofas + 1200 * KitchenCabinets)\n", "entities": [{"start": 64, "end": 68, "word": "sofa", "entity_group": "VAR", "score": 0.9994729825648516}, {"start": 117, "end": 123, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997124335034916}, {"start": 129, "end": 132, "word": "400", "entity_group": "PARAM", "score": 0.998758843745535}, {"start": 140, "end": 155, "word": "kitchen cabinet", "entity_group": "VAR", "score": 0.9999507775134673}, {"start": 167, "end": 171, "word": "1200", "entity_group": "PARAM", "score": 0.9987899113186157}, {"start": 172, "end": 178, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997886166156112}, {"start": 194, "end": 197, "word": "100", "entity_group": "LIMIT", "score": 0.9996836010209502}, {"start": 221, "end": 224, "word": "300", "entity_group": "LIMIT", "score": 0.9997455738178024}, {"start": 259, "end": 268, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995491284504773}, {"start": 276, "end": 280, "word": "sofa", "entity_group": "VAR", "score": 0.9996795272046494}, {"start": 304, "end": 305, "word": "3", "entity_group": "PARAM", "score": 0.999697720580372}, {"start": 328, "end": 330, "word": "10", "entity_group": "PARAM", "score": 0.9994580414202435}, {"start": 352, "end": 367, "word": "kitchen cabinet", "entity_group": "VAR", "score": 0.9999529619221144}, {"start": 374, "end": 376, "word": "10", "entity_group": "PARAM", "score": 0.9996508882696635}, {"start": 399, "end": 401, "word": "24", "entity_group": "PARAM", "score": 0.9996850919377205}, {"start": 483, "end": 490, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9885020714426382}, {"start": 491, "end": 497, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998699441764801}]}
{"doc_id": "-1202875232", "document": "A ferry service provides vehicle tickets and passenger tickets. The ferry can sell at most 100 tickets. A profit of $50 is made per vehicle ticket and a profit of $50 is made per passenger ticket. The ferry reserved a minimum of 10 tickets for vehicles. However, because most people don't have cars, at least 5 times as may people buy passenger tickets than vehicle tickets. How many of each type should be sold to maximize profit?", "order_mapping": {"vehicle tickets": 0, "passenger tickets": 1, "vehicle ticket": 0, "passenger ticket": 1, "vehicles": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"vehicle ticket": "50", "passenger ticket": "50"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10", "var": "vehicles", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "passenger tickets", "direction": "at least", "param": "5", "y_var": "vehicle tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of vehicle tickets\n- y: Number of passenger tickets\n\nObjective:\n- The ferry service aims to maximize its profit. The profit made per vehicle ticket is $50 and the profit made per passenger ticket is $50. Therefore, the objective function is: Maximize 50x + 50y\n\nConstraints:\n- The ferry can sell at most 100 tickets, leading to the constraint: x + y <= 100.\n- A minimum of 10 tickets are reserved for vehicles, leading to the constraint: x >= 10.\n- At least 5 times as many people buy passenger tickets than vehicle tickets, resulting in the constraint: y >= 5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 50y\nConstraints:\nx + y <= 100\nx >= 10\ny >= 5x", "canonical": {"objective": [-50.0, -50.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -10.0], [5.0, -1.0, 0.0]]}, "solution": {"x": 10, "y": 90}, "pseudo_model": "\nDecision Variables:\n- Number of vehicle tickets sold: VehicleTickets\n- Number of passenger tickets sold: PassengerTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 100:\n  VehicleTickets + PassengerTickets <= 100\n- A minimum of 10 tickets reserved for vehicles:\n  VehicleTickets >= 10\n- At least 5 times as many passenger tickets sold as vehicle tickets:\n  PassengerTickets >= 5 * VehicleTickets\n\nObjective:\n- Maximize profit (50 dollars per ticket, regardless of type):\n  50 * VehicleTickets + 50 * PassengerTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVehicleTickets = intvar(0, 999999999)  # Number of vehicle tickets sold\nPassengerTickets = intvar(0, 999999999)  # Number of passenger tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets sold should not exceed 100:\nm += VehicleTickets + PassengerTickets <= 100\n# A minimum of 10 tickets reserved for vehicles:\nm += VehicleTickets >= 10\n# At least 5 times as many people buy passenger tickets than vehicle tickets:\nm += PassengerTickets >= 5 * VehicleTickets\n\n# Objective\n# Maximize profit (50 dollars per ticket, regardless of type):\nm.maximize(50 * VehicleTickets + 50 * PassengerTickets)\n", "entities": [{"start": 25, "end": 40, "word": "vehicle tickets", "entity_group": "VAR", "score": 0.9999537901711153}, {"start": 45, "end": 62, "word": "passenger tickets", "entity_group": "VAR", "score": 0.9999874406801044}, {"start": 84, "end": 91, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989616445917681}, {"start": 92, "end": 95, "word": "100", "entity_group": "LIMIT", "score": 0.9996888668099807}, {"start": 108, "end": 114, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999506834271304}, {"start": 120, "end": 122, "word": "50", "entity_group": "PARAM", "score": 0.9995462241001611}, {"start": 135, "end": 149, "word": "vehicle ticket", "entity_group": "VAR", "score": 0.9999657349189068}, {"start": 156, "end": 162, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999708872963341}, {"start": 168, "end": 170, "word": "50", "entity_group": "PARAM", "score": 0.9996160857948422}, {"start": 183, "end": 199, "word": "passenger ticket", "entity_group": "VAR", "score": 0.9999718163609667}, {"start": 223, "end": 230, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9981185947823736}, {"start": 234, "end": 236, "word": "10", "entity_group": "LIMIT", "score": 0.999542445361668}, {"start": 249, "end": 257, "word": "vehicles", "entity_group": "VAR", "score": 0.9992090457731018}, {"start": 309, "end": 317, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9969505990562781}, {"start": 318, "end": 319, "word": "5", "entity_group": "PARAM", "score": 0.9988820339053114}, {"start": 344, "end": 361, "word": "passenger tickets", "entity_group": "VAR", "score": 0.9999673187791909}, {"start": 367, "end": 382, "word": "vehicle tickets", "entity_group": "VAR", "score": 0.999971043459951}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800936676}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999914730623649}]}
{"doc_id": "1138164544", "document": "An actor needs to gain weight for a role and decides to eat only pizza and donuts. He wants to eat a minimum of 3000 calories per day and at least 200 grams of fat per day. Each pizza costs $4 and contains 300 calories and 10 grams of fat. Each donut costs $2 and contains 200 calories and 7 grams of fat. How many of each should the actor eat to minimize costs?", "order_mapping": {"pizza": 0, "donuts": 1, "donut": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"pizza": "4", "donut": "2"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "3000", "terms": {"pizza": "300", "donut": "200"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "200", "terms": {"pizza": "10", "donut": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pizzas eaten per day\n- y: Number of donuts eaten per day\n\nObjective:\n- The actor wants to minimize his costs. Each pizza costs $4 and each donut costs $2. Therefore, the objective function is: Minimize 4x + 2y\n\nConstraints:\n- The actor needs to consume a minimum of 3000 calories per day, which translates to the constraint: 300x + 200y >= 3000.\n- The actor needs to consume at least 200 grams of fat per day, leading to the constraint: 10x + 7y >= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4x + 2y\nConstraints:\n300x + 200y >= 3000\n10x + 7y >= 200", "canonical": {"objective": [4.0, 2.0], "constraints": [[-300.0, -200.0, -3000.0], [-10.0, -7.0, -200.0]]}, "solution": {"x": 0, "y": 29}, "pseudo_model": "\nDecision Variables:\n- Number of pizzas eaten: Pizza\n- Number of donuts eaten: Donuts\n\nConstraints:\n- Minimum of 3000 calories per day:\n  300 * Pizza + 200 * Donuts >= 3000\n- At least 200 grams of fat per day:\n  10 * Pizza + 7 * Donuts >= 200\n\nObjective:\n- Minimize costs (4 dollars per pizza, 2 dollars per donut):\n  4 * Pizza + 2 * Donuts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPizza = intvar(0, 999999999)  # Number of pizzas\nDonuts = intvar(0, 999999999)  # Number of donuts\n\n# Constraints\nm = Model()\n\n# Minimum of 3000 calories per day:\nm += 300 * Pizza + 200 * Donuts >= 3000\n# At least 200 grams of fat per day:\nm += 10 * Pizza + 7 * Donuts >= 200\n\n# Objective\n# Minimize costs (4 dollars per pizza, 2 dollars per donut):\nm.minimize(4 * Pizza + 2 * Donuts)\n", "entities": [{"start": 65, "end": 70, "word": "pizza", "entity_group": "VAR", "score": 0.9997325371438546}, {"start": 75, "end": 81, "word": "donuts", "entity_group": "VAR", "score": 0.998878684494613}, {"start": 102, "end": 109, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9976787438347079}, {"start": 113, "end": 117, "word": "3000", "entity_group": "LIMIT", "score": 0.9997547187931789}, {"start": 139, "end": 147, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993575855552085}, {"start": 148, "end": 151, "word": "200", "entity_group": "LIMIT", "score": 0.9997350406133989}, {"start": 180, "end": 185, "word": "pizza", "entity_group": "VAR", "score": 0.9996778296060517}, {"start": 186, "end": 191, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9948282772597421}, {"start": 194, "end": 195, "word": "4", "entity_group": "PARAM", "score": 0.9996442735907833}, {"start": 209, "end": 212, "word": "300", "entity_group": "PARAM", "score": 0.9996904703312768}, {"start": 226, "end": 228, "word": "10", "entity_group": "PARAM", "score": 0.9996800805309252}, {"start": 249, "end": 254, "word": "donut", "entity_group": "VAR", "score": 0.9997384655173923}, {"start": 255, "end": 260, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9976781408024923}, {"start": 263, "end": 264, "word": "2", "entity_group": "PARAM", "score": 0.9997428187289885}, {"start": 278, "end": 281, "word": "200", "entity_group": "PARAM", "score": 0.9994616785244876}, {"start": 295, "end": 296, "word": "7", "entity_group": "PARAM", "score": 0.9995574407346016}, {"start": 353, "end": 361, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996677323677882}, {"start": 362, "end": 367, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990417948205548}]}
{"doc_id": "-146126231", "document": "A concert has 300 seats. The premium seats make a profit of $150 each and the regular seats make a profit of $50 each. At least 50 seats will be assigned as premium seats. On the other hand, at least 3 times as many people prefer the regular seats to the premium seats. Find the maximum profit. Also, determine how many seats of each type must be sold to reach this amount.", "order_mapping": {"premium seats": 0, "regular seats": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"premium seats": "150", "regular seats": "50"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "At least", "limit": "50", "var": "premium seats", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "premium seats", "direction": "at least", "param": "3", "y_var": "regular seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium seats\n- y: Number of regular seats\n\nObjective:\n- The objective is to maximize the profit from selling premium and regular seats. The profit from each premium seat is $150 and from each regular seat is $50. Therefore, the objective function is: Maximize 150x + 50y\n\nConstraints:\n- The total number of seats available is 300, so the constraint is: x + y <= 300.\n- At least 50 seats will be assigned as premium seats, leading to the constraint: x >= 50.\n- At least 3 times as many people prefer the regular seats to the premium seats, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 50y\nConstraints:\nx + y <= 300\nx >= 50\ny >= 3x", "canonical": {"objective": [-150.0, -50.0], "constraints": [[1.0, 1.0, 300.0], [-1.0, 0.0, -50.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 75, "y": 225}, "pseudo_model": "\nDecision Variables:\n- Number of premium seats: PremiumSeats\n- Number of regular seats: RegularSeats\n\nConstraints:\n- Total number of seats is 300:\n  PremiumSeats + RegularSeats == 300\n- At least 50 seats will be assigned as premium seats:\n  PremiumSeats >= 50\n- At least 3 times as many people prefer the regular seats to the premium seats:\n  RegularSeats >= 3 * PremiumSeats\n\nObjective:\n- Maximize profit (150 dollars per premium seat, 50 dollars per regular seat):\n  150 * PremiumSeats + 50 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumSeats = intvar(0, 999999999)  # Number of premium seats\nRegularSeats = intvar(0, 999999999)  # Number of regular seats\n\n# Constraints\nm = Model()\n\n# Total number of seats is 300:\nm += PremiumSeats + RegularSeats == 300\n# At least 50 seats will be assigned as premium seats:\nm += PremiumSeats >= 50\n# At least 3 times as many people prefer the regular seats to the premium seats:\nm += RegularSeats >= 3 * PremiumSeats\n\n# Objective\n# Maximize profit (150 dollars per premium seat, 50 dollars per regular seat):\nm.maximize(150 * PremiumSeats + 50 * RegularSeats)\n", "entities": [{"start": 10, "end": 13, "word": "has", "entity_group": "CONST_DIR", "score": 0.9951865113588274}, {"start": 14, "end": 17, "word": "300", "entity_group": "LIMIT", "score": 0.9987316531468784}, {"start": 30, "end": 43, "word": "premium seats", "entity_group": "VAR", "score": 0.9999839522962524}, {"start": 51, "end": 57, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994996562657671}, {"start": 63, "end": 66, "word": "150", "entity_group": "PARAM", "score": 0.9993761245227127}, {"start": 80, "end": 93, "word": "regular seats", "entity_group": "VAR", "score": 0.9999359936937502}, {"start": 101, "end": 107, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996020614406058}, {"start": 113, "end": 115, "word": "50", "entity_group": "PARAM", "score": 0.9993127139787293}, {"start": 123, "end": 131, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9978832193513895}, {"start": 132, "end": 134, "word": "50", "entity_group": "LIMIT", "score": 0.9996632974290988}, {"start": 161, "end": 174, "word": "premium seats", "entity_group": "VAR", "score": 0.9999756412074623}, {"start": 197, "end": 205, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981612427832715}, {"start": 206, "end": 207, "word": "3", "entity_group": "PARAM", "score": 0.9981589333459795}, {"start": 240, "end": 253, "word": "regular seats", "entity_group": "VAR", "score": 0.9999532568459738}, {"start": 261, "end": 274, "word": "premium seats", "entity_group": "VAR", "score": 0.9999767511639363}, {"start": 286, "end": 293, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.980653092617187}, {"start": 294, "end": 300, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998352257664617}]}
{"doc_id": "-2082418574", "document": "A paper company makes two types of paper: lined and unlined paper. Each type of paper requires use of two machines, a printing machine and a scanning machine. It takes 2 minute on the printing machine and 5 minutes on the scanning machine to make a ream of lined paper. On the other hand, it takes 1 minute on the printing machine and 2 minutes on the scanning machine to make a ream of unlined paper. Each machine is available for a maximum of 400 minutes per day. The company sells a package of lined paper at a profit of $5 and a package of unlined paper at a profit of $3. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?", "order_mapping": {"lined": 0, "unlined paper": 1, "lined paper": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lined paper": "5", "unlined paper": "3"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "400", "terms": {"lined paper": "2", "unlined paper": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "400", "terms": {"lined paper": "5", "unlined paper": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of reams of lined paper\n- y: Number of reams of unlined paper\n\nObjective:\n- The company aims to maximize its profit. The profit from a package of lined paper is $5 and the profit from a package of unlined paper is $3. Therefore, the objective function is: Maximize 5x + 3y\n\nConstraints:\n- The printing and scanning machines are available for a maximum of 400 minutes per day. The time taken to produce each type of paper on these machines leads to the following constraints:\n  - 2x + y <= 400 (constraint for the printing machine)\n  - 5x + 2y <= 400 (constraint for the scanning machine)\n- Non-negativity constraint: x >= 0, y >= 0 (the company cannot produce a negative number of reams)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3y\nConstraints:\n2x + y <= 400\n5x + 2y <= 400\nx >= 0\ny >= 0", "canonical": {"objective": [-5.0, -3.0], "constraints": [[2.0, 1.0, 400.0], [5.0, 2.0, 400.0]]}, "solution": {"x": 0, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of reams of lined paper produced per day: LinedPaper\n- Number of reams of unlined paper produced per day: UnlinedPaper\n\nConstraints:\n- Printing machine time for lined and unlined paper should not exceed 400 minutes per day:\n  2 * LinedPaper + 1 * UnlinedPaper <= 400\n- Scanning machine time for lined and unlined paper should not exceed 400 minutes per day:\n  5 * LinedPaper + 2 * UnlinedPaper <= 400\n\nObjective:\n- Maximize profit (5 dollars per ream of lined paper, 3 dollars per ream of unlined paper):\n  5 * LinedPaper + 3 * UnlinedPaper\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLinedPaper = intvar(0, 999999999)  # Number of reams of lined paper produced per day\nUnlinedPaper = intvar(0, 999999999)  # Number of reams of unlined paper produced per day\n\n# Constraints\nm = Model()\n\n# Machine time constraints\n# Printing machine: 2 minutes for lined paper and 1 minute for unlined paper, maximum 400 minutes per day\nm += 2 * LinedPaper + 1 * UnlinedPaper <= 400\n# Scanning machine: 5 minutes for lined paper and 2 minutes for unlined paper, maximum 400 minutes per day\nm += 5 * LinedPaper + 2 * UnlinedPaper <= 400\n\n# Objective\n# Maximize profit (5 dollars per ream of lined paper, 3 dollars per ream of unlined paper)\nm.maximize(5 * LinedPaper + 3 * UnlinedPaper)\n", "entities": [{"start": 43, "end": 48, "word": "lined", "entity_group": "VAR", "score": 0.9996803317578199}, {"start": 53, "end": 66, "word": "unlined paper", "entity_group": "VAR", "score": 0.9999813616167386}, {"start": 172, "end": 173, "word": "2", "entity_group": "PARAM", "score": 0.9995454049113485}, {"start": 209, "end": 210, "word": "5", "entity_group": "PARAM", "score": 0.9996849106630925}, {"start": 261, "end": 272, "word": "lined paper", "entity_group": "VAR", "score": 0.9999616090753244}, {"start": 304, "end": 305, "word": "1", "entity_group": "PARAM", "score": 0.9995907262031802}, {"start": 341, "end": 342, "word": "2", "entity_group": "PARAM", "score": 0.999684847639196}, {"start": 393, "end": 406, "word": "unlined paper", "entity_group": "VAR", "score": 0.9999468715785854}, {"start": 441, "end": 448, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9984825522914483}, {"start": 452, "end": 455, "word": "400", "entity_group": "LIMIT", "score": 0.999533886637943}, {"start": 505, "end": 516, "word": "lined paper", "entity_group": "VAR", "score": 0.9999683460262524}, {"start": 522, "end": 528, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997410398233468}, {"start": 534, "end": 535, "word": "5", "entity_group": "PARAM", "score": 0.9995775230051931}, {"start": 553, "end": 566, "word": "unlined paper", "entity_group": "VAR", "score": 0.9999552705867109}, {"start": 572, "end": 578, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9987687172922547}, {"start": 584, "end": 585, "word": "3", "entity_group": "PARAM", "score": 0.9997012379200796}, {"start": 710, "end": 718, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9947466016180401}, {"start": 719, "end": 725, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993711977684752}]}
{"doc_id": "1470713712", "document": "A popcorn store has 30 pounds of butter popcorn and 40 pounds of caramel popcorn. They sell two mixed bags: a sweet mix, and a regular mix. The sweet mix sells for $3 a pound while the regular mix sells for $2 a pound. The sweet mix has 75% caramel popcorn and 25% butter popcorn. The regular mix has 50% caramel popcorn and 50% regular popcorn. How many bags of each mix should be made in order to maximize profit?", "order_mapping": {"sweet mix": 0, "regular mix": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sweet mix": "3", "regular mix": "2"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "30", "terms": {"sweet mix": "75%", "regular mix": "50%"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "40", "terms": {"sweet mix": "25%", "regular mix": "50%"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of sweet mix\n- y: Number of bags of regular mix\n\nObjective:\n- The popcorn store aims to maximize its profit. The sweet mix sells for $3 a pound while the regular mix sells for $2 a pound. Therefore, the objective function is: Maximize 3x + 2y\n\nConstraints:\n- The sweet mix contains 75% caramel popcorn and 25% butter popcorn. The total butter popcorn available is 30 pounds, so the constraint is: 0.25x + 0.50y <= 30.\n- The sweet mix contains 25% butter popcorn and 75% caramel popcorn. The total caramel popcorn available is 40 pounds, so the constraint is: 0.75x + 0.50y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 2y\nConstraints:\n0.25x + 0.50y <= 30\n0.75x + 0.50y <= 40", "canonical": {"objective": [-3.0, -2.0], "constraints": [[0.25, 0.5, 30.0], [0.75, 0.5, 40.0]]}, "solution": {"x": 52, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of pounds of sweet mix made: SweetMix\n- Number of pounds of regular mix made: RegularMix\n\nConstraints:\n- The store has 30 pounds of butter popcorn, which is used in both mixes (25% for sweet mix, 50% for regular mix):\n  0.25 * SweetMix + 0.5 * RegularMix <= 30\n- The store has 40 pounds of caramel popcorn, which is used in both mixes (75% for sweet mix, 50% for regular mix):\n  0.75 * SweetMix + 0.5 * RegularMix <= 40\n\nObjective:\n- Maximize profit (3 dollars per pound of sweet mix, 2 dollars per pound of regular mix):\n  3 * SweetMix + 2 * RegularMix\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSweetMix = intvar(0, 999999999)  # Number of pounds of sweet mix made\nRegularMix = intvar(0, 999999999)  # Number of pounds of regular mix made\n\n# Constraints\nm = Model()\n\n# The store has 30 pounds of butter popcorn, which is used in both mixes:\n# 25% of SweetMix + 50% of RegularMix <= 30\nm += 0.25 * SweetMix + 0.5 * RegularMix <= 30\n\n# The store has 40 pounds of caramel popcorn, which is used in both mixes:\n# 75% of SweetMix + 50% of RegularMix <= 40\nm += 0.75 * SweetMix + 0.5 * RegularMix <= 40\n\n# Objective\n# Maximize profit (3 dollars per pound of sweet mix, 2 dollars per pound of regular mix):\nm.maximize(3 * SweetMix + 2 * RegularMix)\n", "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.999059920061251}, {"start": 20, "end": 22, "word": "30", "entity_group": "LIMIT", "score": 0.998686321091919}, {"start": 52, "end": 54, "word": "40", "entity_group": "LIMIT", "score": 0.9995895597498523}, {"start": 112, "end": 121, "word": "sweet mix", "entity_group": "VAR", "score": 0.9999595174093033}, {"start": 130, "end": 141, "word": "regular mix", "entity_group": "VAR", "score": 0.9996142455557865}, {"start": 148, "end": 157, "word": "sweet mix", "entity_group": "VAR", "score": 0.9999863096451502}, {"start": 158, "end": 163, "word": "sells", "entity_group": "OBJ_NAME", "score": 0.9906345554784532}, {"start": 170, "end": 171, "word": "3", "entity_group": "PARAM", "score": 0.9997027618265306}, {"start": 190, "end": 201, "word": "regular mix", "entity_group": "VAR", "score": 0.9999762187848579}, {"start": 202, "end": 207, "word": "sells", "entity_group": "OBJ_NAME", "score": 0.99016090639144}, {"start": 214, "end": 215, "word": "2", "entity_group": "PARAM", "score": 0.9996897153211823}, {"start": 230, "end": 239, "word": "sweet mix", "entity_group": "VAR", "score": 0.9999804458256947}, {"start": 244, "end": 248, "word": "75 %", "entity_group": "PARAM", "score": 0.9943783729175644}, {"start": 269, "end": 273, "word": "25 %", "entity_group": "PARAM", "score": 0.9843606635360909}, {"start": 295, "end": 306, "word": "regular mix", "entity_group": "VAR", "score": 0.9999748003395088}, {"start": 311, "end": 315, "word": "50 %", "entity_group": "PARAM", "score": 0.9906193998256767}, {"start": 336, "end": 340, "word": "50 %", "entity_group": "PARAM", "score": 0.9923627013676984}, {"start": 412, "end": 420, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.996185286075547}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818202311}]}
{"doc_id": "2121307739", "document": "A computer network company designed plans to bid for the job of providing a computer network for city offices. He will use workstations, servers, and switches in three types of layouts. He has 3000 workstations, 400 servers, and 200 switches. A star layout uses 40 workstations, 10 servers, and 2 switches; a circle layout uses 20 workstations, 12 servers, and 5 switches; and a snowflake layout uses 323 workstations, 122 servers, and 41 switches. The net profit is $2231 for each star layout, $3434 for each circle layout, and $8621 for each snowflake layout.  How many layouts of each type should be used to yield maximum profit?", "order_mapping": {"star layout": 0, "circle layout": 1, "snowflake layout": 2}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"star layout": "2231", "circle layout": "3434", "snowflake layout": "8621"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "3000", "terms": {"star layout": "40", "circle layout": "20", "snowflake layout": "323"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "400", "terms": {"star layout": "10", "circle layout": "12", "snowflake layout": "122"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "200", "terms": {"star layout": "2", "circle layout": "5", "snowflake layout": "41"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of star layouts\n- y: Number of circle layouts\n- z: Number of snowflake layouts\n\nObjective:\n- The company aims to maximize its profit. The net profit for each type of layout is known: $2231 for each star layout, $3434 for each circle layout, and $8621 for each snowflake layout. Therefore, the objective function is: Maximize 2231x + 3434y + 8621z\n\nConstraints:\n- The company has limited resources: 3000 workstations, 400 servers, and 200 switches. This leads to the following constraints:\n    - 40x + 20y + 323z <= 3000 (workstations)\n    - 10x + 12y + 122z <= 400 (servers)\n    - 2x + 5y + 41z <= 200 (switches)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2231x + 3434y + 8621z\nConstraints:\n40x + 20y + 323z <= 3000\n10x + 12y + 122z <= 400\n2x + 5y + 41z <= 200", "canonical": {"objective": [-2231.0, -3434.0, -8621.0], "constraints": [[40.0, 20.0, 323.0, 3000.0], [10.0, 12.0, 122.0, 400.0], [2.0, 5.0, 41.0, 200.0]]}, "solution": {"x": 0, "y": 33, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of star layouts: StarLayout\n- Number of circle layouts: CircleLayout\n- Number of snowflake layouts: SnowflakeLayout\n\nConstraints:\n- Total resources used by all layouts should not exceed available resources:\n  - Workstations: 40*StarLayout + 20*CircleLayout + 323*SnowflakeLayout <= 3000\n  - Servers: 10*StarLayout + 12*CircleLayout + 122*SnowflakeLayout <= 400\n  - Switches: 2*StarLayout + 5*CircleLayout + 41*SnowflakeLayout <= 200\n\nObjective:\n- Maximize profit:\n  2231*StarLayout + 3434*CircleLayout + 8621*SnowflakeLayout\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStarLayout = intvar(0, 999999999)  # Number of star layouts\nCircleLayout = intvar(0, 999999999)  # Number of circle layouts\nSnowflakeLayout = intvar(0, 999999999)  # Number of snowflake layouts\n\n# Constraints\nm = Model()\n\n# Constraints on resources (workstations, servers, switches)\nm += 40*StarLayout + 20*CircleLayout + 323*SnowflakeLayout <= 3000  # Workstations\nm += 10*StarLayout + 12*CircleLayout + 122*SnowflakeLayout <= 400  # Servers\nm += 2*StarLayout + 5*CircleLayout + 41*SnowflakeLayout <= 200  # Switches\n\n# Objective\n# Maximize profit\nm.maximize(2231*StarLayout + 3434*CircleLayout + 8621*SnowflakeLayout)\n", "entities": [{"start": 193, "end": 196, "word": "has", "entity_group": "CONST_DIR", "score": 0.9963863066459591}, {"start": 197, "end": 201, "word": "3000", "entity_group": "LIMIT", "score": 0.9990238649836122}, {"start": 217, "end": 220, "word": "400", "entity_group": "LIMIT", "score": 0.9995078022187158}, {"start": 235, "end": 238, "word": "200", "entity_group": "LIMIT", "score": 0.9996613249561929}, {"start": 252, "end": 263, "word": "star layout", "entity_group": "VAR", "score": 0.9999501717312095}, {"start": 269, "end": 271, "word": "40", "entity_group": "PARAM", "score": 0.9989508810732134}, {"start": 287, "end": 289, "word": "10", "entity_group": "PARAM", "score": 0.9993591105718526}, {"start": 304, "end": 305, "word": "2", "entity_group": "PARAM", "score": 0.9996675173303635}, {"start": 319, "end": 332, "word": "circle layout", "entity_group": "VAR", "score": 0.9999455166269864}, {"start": 338, "end": 340, "word": "20", "entity_group": "PARAM", "score": 0.9989510233033949}, {"start": 356, "end": 358, "word": "12", "entity_group": "PARAM", "score": 0.9993593618902962}, {"start": 373, "end": 374, "word": "5", "entity_group": "PARAM", "score": 0.9996151982074843}, {"start": 392, "end": 408, "word": "snowflake layout", "entity_group": "VAR", "score": 0.9999468286270183}, {"start": 414, "end": 417, "word": "323", "entity_group": "PARAM", "score": 0.9992436032925913}, {"start": 433, "end": 436, "word": "122", "entity_group": "PARAM", "score": 0.9993591928079915}, {"start": 451, "end": 453, "word": "41", "entity_group": "PARAM", "score": 0.9996846683059935}, {"start": 473, "end": 479, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999591084762056}, {"start": 485, "end": 489, "word": "2231", "entity_group": "PARAM", "score": 0.9994024113731095}, {"start": 499, "end": 510, "word": "star layout", "entity_group": "VAR", "score": 0.9998875789530076}, {"start": 515, "end": 519, "word": "3434", "entity_group": "PARAM", "score": 0.9995197847958668}, {"start": 529, "end": 542, "word": "circle layout", "entity_group": "VAR", "score": 0.999790234252581}, {"start": 551, "end": 555, "word": "8621", "entity_group": "PARAM", "score": 0.9996011486353819}, {"start": 565, "end": 581, "word": "snowflake layout", "entity_group": "VAR", "score": 0.9998638373557222}, {"start": 638, "end": 645, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.994833813887488}, {"start": 646, "end": 652, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999972216138042}]}
{"doc_id": "1919022789", "document": "A wood artist manufactures two types of decors made of rosewood. The first product, a vase d\u00e9cor, requires 20 minutes each for carving and 14 minutes each for polishing. The second d\u00e9cor is a wood canvas and it requires 18 minutes each for carving and 8 minutes each for polishing. There are 400 minutes available for carving and 640 for polishing. The profit is $50 each for vase d\u00e9cor and $85 for each wood canvas. How many decors of each type should the artist creates in order to maximize her profit?", "order_mapping": {"vase d\u00e9cor": 0, "wood canvas": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"vase d\u00e9cor": "50", "wood canvas": "85"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"vase d\u00e9cor": "20", "wood canvas": "18"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "640", "terms": {"vase d\u00e9cor": "14", "wood canvas": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of vase decors\n- y: Number of wood canvas decors\n\nObjective:\n- The wood artist aims to maximize her profit. The profit is $50 for each vase decor and $85 for each wood canvas decor. Therefore, the objective function is: Maximize 50x + 85y\n\nConstraints:\n- The time available for carving is 400 minutes, and the time required for carving each vase decor is 20 minutes and for each wood canvas decor is 18 minutes. This leads to the constraint: 20x + 18y <= 400.\n- The time available for polishing is 640 minutes, and the time required for polishing each vase decor is 14 minutes and for each wood canvas decor is 8 minutes. This results in the constraint: 14x + 8y <= 640.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 85y\nConstraints:\n20x + 18y <= 400\n14x + 8y <= 640", "canonical": {"objective": [-50.0, -85.0], "constraints": [[20.0, 18.0, 400.0], [14.0, 8.0, 640.0]]}, "solution": {"x": 0, "y": 22}, "pseudo_model": "\nDecision Variables:\n- Number of vase decors made: VaseDecor\n- Number of wood canvases made: WoodCanvas\n\nConstraints:\n- Total carving time for all decors should not exceed 400 minutes:\n  20 * VaseDecor + 18 * WoodCanvas <= 400\n- Total polishing time for all decors should not exceed 640 minutes:\n  14 * VaseDecor + 8 * WoodCanvas <= 640\n\nObjective:\n- Maximize profit (50 dollars per vase decor, 85 dollars per wood canvas):\n  50 * VaseDecor + 85 * WoodCanvas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVaseDecor = intvar(0, 999999999)  # Number of vase decors made\nWoodCanvas = intvar(0, 999999999)  # Number of wood canvases made\n\n# Constraints\nm = Model()\n\n# Total carving time should not exceed 400 minutes:\nm += 20 * VaseDecor + 18 * WoodCanvas <= 400\n# Total polishing time should not exceed 640 minutes:\nm += 14 * VaseDecor + 8 * WoodCanvas <= 640\n\n# Objective\n# Maximize profit (50 dollars per vase decor, 85 dollars per wood canvas):\nm.maximize(50 * VaseDecor + 85 * WoodCanvas)\n", "entities": [{"start": 88, "end": 98, "word": "vase d\u00e9cor", "entity_group": "VAR", "score": 0.9999791302366929}, {"start": 110, "end": 112, "word": "20", "entity_group": "PARAM", "score": 0.9997014911116773}, {"start": 142, "end": 144, "word": "14", "entity_group": "PARAM", "score": 0.9997378797463605}, {"start": 196, "end": 207, "word": "wood canvas", "entity_group": "VAR", "score": 0.9999770819408523}, {"start": 224, "end": 226, "word": "18", "entity_group": "PARAM", "score": 0.999720533903629}, {"start": 256, "end": 257, "word": "8", "entity_group": "PARAM", "score": 0.9997514664001935}, {"start": 297, "end": 300, "word": "400", "entity_group": "LIMIT", "score": 0.9997880177312978}, {"start": 309, "end": 318, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985778003469529}, {"start": 335, "end": 338, "word": "640", "entity_group": "LIMIT", "score": 0.9994149704484522}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999522815613634}, {"start": 371, "end": 373, "word": "50", "entity_group": "PARAM", "score": 0.9996915897756228}, {"start": 383, "end": 393, "word": "vase d\u00e9cor", "entity_group": "VAR", "score": 0.9999806784104089}, {"start": 400, "end": 402, "word": "85", "entity_group": "PARAM", "score": 0.9997575570863495}, {"start": 412, "end": 423, "word": "wood canvas", "entity_group": "VAR", "score": 0.9999621359215448}, {"start": 493, "end": 501, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995657198860213}, {"start": 506, "end": 512, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99994825598268}]}
{"doc_id": "-1873006018", "document": "Bob's trainer has given him a list of available food options as well as the macro nutrient content and cost per serving of each food. A certain amount of macro nutrients is required each day. For example, here is the data corresponding to chicken and pork and the three macro nutrients (proteins, carbs, and fat). Each serving of chicken contains 20 units of protein, 5 units of carbs, and 6 units of fat. Each serving of pork contains 15 units of protein, 3 units of carbs, and 8 units of fat. A serving of chicken costs $10 and a serving of pork costs $15. Bob's trainer requires him to get at least 100 units of protein, 50 units of carbs, and 30 units of fat per day. Find out how many servings of each meat to consume per day to meet the requirements at minimal cost.", "order_mapping": {"chicken": 0, "pork": 1}, "obj_declaration": {"type": "objective", "direction": "minimal", "name": "cost", "terms": {"chicken": "10", "pork": "15"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"pork": "15", "chicken": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"chicken": "5", "pork": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"chicken": "6", "pork": "8"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Servings of chicken to consume per day\n- y: Servings of pork to consume per day\n\nObjective:\n- The goal is to minimize the cost of the food consumed. Each serving of chicken costs $10 and each serving of pork costs $15. Therefore, the objective function is: Minimize 10x + 15y\n\nConstraints:\n- Bob's trainer requires him to get at least 100 units of protein, 50 units of carbs, and 30 units of fat per day. This translates to the following constraints:\n    - 20x + 15y >= 100 (protein)\n    - 5x + 3y >= 50 (carbs)\n    - 6x + 8y >= 30 (fat)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 10x + 15y\nConstraints:\n20x + 15y >= 100\n5x + 3y >= 50\n6x + 8y >= 30", "canonical": {"objective": [10.0, 15.0], "constraints": [[-20.0, -15.0, -100.0], [-5.0, -3.0, -50.0], [-6.0, -8.0, -30.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of servings of chicken per day: Chicken\n- Number of servings of pork per day: Pork\n\nConstraints:\n- Protein requirement (at least 100 units per day):\n  20 * Chicken + 15 * Pork >= 100\n- Carbs requirement (at least 50 units per day):\n  5 * Chicken + 3 * Pork >= 50\n- Fat requirement (at least 30 units per day):\n  6 * Chicken + 8 * Pork >= 30\n\nObjective:\n- Minimize cost (10 dollars per serving of chicken, 15 dollars per serving of pork):\n  10 * Chicken + 15 * Pork\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChicken = intvar(0, 999999999)  # Number of servings of chicken per day\nPork = intvar(0, 999999999)  # Number of servings of pork per day\n\n# Constraints\nm = Model()\n\n# Protein requirement (at least 100 units per day):\nm += 20 * Chicken + 15 * Pork >= 100\n# Carbs requirement (at least 50 units per day):\nm += 5 * Chicken + 3 * Pork >= 50\n# Fat requirement (at least 30 units per day):\nm += 6 * Chicken + 8 * Pork >= 30\n\n# Objective\n# Minimize cost (10 dollars per serving of chicken, 15 dollars per serving of pork):\nm.minimize(10 * Chicken + 15 * Pork)\n", "entities": [{"start": 243, "end": 250, "word": "chicken", "entity_group": "VAR", "score": 0.9995809523344075}, {"start": 255, "end": 259, "word": "pork", "entity_group": "VAR", "score": 0.9994634630618581}, {"start": 339, "end": 346, "word": "chicken", "entity_group": "VAR", "score": 0.9993493478024136}, {"start": 356, "end": 358, "word": "20", "entity_group": "PARAM", "score": 0.999637809094933}, {"start": 378, "end": 379, "word": "5", "entity_group": "PARAM", "score": 0.9997361355764259}, {"start": 401, "end": 402, "word": "6", "entity_group": "PARAM", "score": 0.9996834627328242}, {"start": 434, "end": 438, "word": "pork", "entity_group": "VAR", "score": 0.999312949884774}, {"start": 448, "end": 450, "word": "15", "entity_group": "PARAM", "score": 0.9996376571796258}, {"start": 470, "end": 471, "word": "3", "entity_group": "PARAM", "score": 0.9997361355764259}, {"start": 493, "end": 494, "word": "8", "entity_group": "PARAM", "score": 0.9996834627328245}, {"start": 523, "end": 530, "word": "chicken", "entity_group": "VAR", "score": 0.9992007262055259}, {"start": 531, "end": 536, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9763317054805677}, {"start": 539, "end": 541, "word": "10", "entity_group": "PARAM", "score": 0.999428659577207}, {"start": 559, "end": 563, "word": "pork", "entity_group": "VAR", "score": 0.9979498915755911}, {"start": 564, "end": 569, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.979270979458818}, {"start": 572, "end": 574, "word": "15", "entity_group": "PARAM", "score": 0.9995417119676786}, {"start": 612, "end": 620, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991294927805371}, {"start": 621, "end": 624, "word": "100", "entity_group": "LIMIT", "score": 0.9996464858352012}, {"start": 644, "end": 646, "word": "50", "entity_group": "LIMIT", "score": 0.9997456440952533}, {"start": 668, "end": 670, "word": "30", "entity_group": "LIMIT", "score": 0.9996594168888677}, {"start": 781, "end": 788, "word": "minimal", "entity_group": "OBJ_DIR", "score": 0.9973003977857828}, {"start": 789, "end": 793, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9908615651818562}]}
{"doc_id": "1924819311", "document": "A fruit farmer has 80 acres to grow peaches and nectarines. Peaches take 3 hours to plant per acre while nectarines take 4.5 hours to plant per acre. Peaches take 2 hours to water per acre while nectarines take 3 hours to water per acre. The farmer has 300 hours available for planting and 250 hours available for watering. If the profit per acre of peaches is $200 and the profit per acre of nectarines is $175, how many acres of each should be grown to maximize profit?", "order_mapping": {"peaches": 0, "nectarines": 1, "Peaches": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"nectarines": "175", "peaches": "200"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "80", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"Peaches": "3", "nectarines": "4.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "250", "terms": {"Peaches": "2", "nectarines": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of peaches\n- y: Acres of nectarines\n\nObjective:\n- The farmer aims to maximize the profit. The profit per acre of peaches is $200 and the profit per acre of nectarines is $175. Therefore, the objective function is: Maximize 200x + 175y\n\nConstraints:\n- The farmer has 80 acres available for growing peaches and nectarines, leading to the constraint: x + y <= 80.\n- The total time available for planting is 300 hours, and peaches take 3 hours to plant per acre while nectarines take 4.5 hours to plant per acre. This results in the constraint: 3x + 4.5y <= 300.\n- The total time available for watering is 250 hours, and peaches take 2 hours to water per acre while nectarines take 3 hours to water per acre. This leads to the constraint: 2x + 3y <= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 175y\nConstraints:\nx + y <= 80\n3x + 4.5y <= 300\n2x + 3y <= 250", "canonical": {"objective": [-200.0, -175.0], "constraints": [[1.0, 1.0, 80.0], [3.0, 4.5, 300.0], [2.0, 3.0, 250.0]]}, "solution": {"x": 80, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Acres of peaches to be grown: Peaches\n- Acres of nectarines to be grown: Nectarines\n\nConstraints:\n- Total acres used should not exceed 80:\n  Peaches + Nectarines <= 80\n- Total planting hours should not exceed 300 hours (3 hours per acre for peaches, 4.5 hours per acre for nectarines):\n  3 * Peaches + 4.5 * Nectarines <= 300\n- Total watering hours should not exceed 250 hours (2 hours per acre for peaches, 3 hours per acre for nectarines):\n  2 * Peaches + 3 * Nectarines <= 250\n\nObjective:\n- Maximize profit (200 dollars per acre for peaches, 175 dollars per acre for nectarines):\n  200 * Peaches + 175 * Nectarines\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeaches = intvar(0, 80)  # Acres of peaches\nNectarines = intvar(0, 80)  # Acres of nectarines\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 80:\nm += Peaches + Nectarines <= 80\n# Total planting hours should not exceed 300 hours (3 hours per acre for peaches, 4.5 hours per acre for nectarines):\nm += 3 * Peaches + 4.5 * Nectarines <= 300\n# Total watering hours should not exceed 250 hours (2 hours per acre for peaches, 3 hours per acre for nectarines):\nm += 2 * Peaches + 3 * Nectarines <= 250\n\n# Objective\n# Maximize profit (200 dollars per acre for peaches, 175 dollars per acre for nectarines):\nm.maximize(200 * Peaches + 175 * Nectarines)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.993309128835265}, {"start": 19, "end": 21, "word": "80", "entity_group": "LIMIT", "score": 0.9989050099941889}, {"start": 36, "end": 43, "word": "peaches", "entity_group": "VAR", "score": 0.9994864691569159}, {"start": 48, "end": 58, "word": "nectarines", "entity_group": "VAR", "score": 0.9993213148982044}, {"start": 61, "end": 68, "word": "Peaches", "entity_group": "VAR", "score": 0.9987621768204528}, {"start": 74, "end": 75, "word": "3", "entity_group": "PARAM", "score": 0.9996226051117555}, {"start": 106, "end": 116, "word": "nectarines", "entity_group": "VAR", "score": 0.999009621943243}, {"start": 122, "end": 125, "word": "4.5", "entity_group": "PARAM", "score": 0.999668846503662}, {"start": 152, "end": 159, "word": "Peaches", "entity_group": "VAR", "score": 0.9988150495964028}, {"start": 165, "end": 166, "word": "2", "entity_group": "PARAM", "score": 0.9996919765298794}, {"start": 197, "end": 207, "word": "nectarines", "entity_group": "VAR", "score": 0.9990096219432786}, {"start": 213, "end": 214, "word": "3", "entity_group": "PARAM", "score": 0.9996685840230292}, {"start": 256, "end": 259, "word": "300", "entity_group": "LIMIT", "score": 0.9997437358182588}, {"start": 266, "end": 275, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985961071548362}, {"start": 293, "end": 296, "word": "250", "entity_group": "LIMIT", "score": 0.9997516894955859}, {"start": 303, "end": 312, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988916950171511}, {"start": 335, "end": 341, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999366273770671}, {"start": 354, "end": 361, "word": "peaches", "entity_group": "VAR", "score": 0.999495212885741}, {"start": 367, "end": 370, "word": "200", "entity_group": "PARAM", "score": 0.9992432695266101}, {"start": 379, "end": 385, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927983863447}, {"start": 398, "end": 408, "word": "nectarines", "entity_group": "VAR", "score": 0.9993738723588844}, {"start": 414, "end": 417, "word": "175", "entity_group": "PARAM", "score": 0.9995941661892174}, {"start": 462, "end": 470, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 471, "end": 477, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1748960564", "document": "A candy store has 30 kilograms of gummy bears and 25 kilograms of gummy worms. They sell two mixtures of these gummies: mixture A and mixture B. Mixture A is 75% gummy bears and 25% gummy worms. Mixture B is 40% gummy bears and 60% gummy worms. A kilogram of mixture A yields a profit of $30 and a kilogram of mixture B yields a profit of $40. How many kilograms of each mixture should be made to maximize profit?", "order_mapping": {"mixture A": 0, "mixture B.": 1, "Mixture A": 0, "Mixture B": 1, "mixture B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mixture A": "30", "mixture B": "40"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "30", "terms": {"Mixture A": "75%", "Mixture B": "40%"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "25", "terms": {"Mixture A": "25%", "Mixture B": "60%"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kilograms of mixture A\n- y: kilograms of mixture B\n\nObjective:\n- The candy store aims to maximize its profit. A kilogram of mixture A yields a profit of $30 and a kilogram of mixture B yields a profit of $40. Therefore, the objective function is: Maximize 30x + 40y\n\nConstraints:\n- The store has 30 kilograms of gummy bears and 25 kilograms of gummy worms, which can be expressed as: 0.75x + 0.40y <= 30 (for gummy bears) and 0.25x + 0.60y <= 25 (for gummy worms).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 40y\nConstraints:\n0.75x + 0.40y <= 30\n0.25x + 0.60y <= 25", "canonical": {"objective": [-30.0, -40.0], "constraints": [[0.75, 0.4, 30.0], [0.25, 0.6, 25.0]]}, "solution": {"x": 22, "y": 32}, "pseudo_model": "\nDecision Variables:\n- Kilograms of mixture A produced: MixtureA\n- Kilograms of mixture B produced: MixtureB\n\nConstraints:\n- Total gummy bears used in both mixtures should not exceed 30 kilograms (75% in A, 40% in B):\n  0.75 * MixtureA + 0.40 * MixtureB <= 30\n- Total gummy worms used in both mixtures should not exceed 25 kilograms (25% in A, 60% in B):\n  0.25 * MixtureA + 0.60 * MixtureB <= 25\n\nObjective:\n- Maximize profit ($30 per kilogram of mixture A, $40 per kilogram of mixture B):\n  30 * MixtureA + 40 * MixtureB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMixtureA = intvar(0, 999999999)  # Kilograms of mixture A produced\nMixtureB = intvar(0, 999999999)  # Kilograms of mixture B produced\n\n# Constraints\nm = Model()\n\n# The store has 30 kilograms of gummy bears:\nm += 0.75 * MixtureA + 0.40 * MixtureB <= 30\n# The store has 25 kilograms of gummy worms:\nm += 0.25 * MixtureA + 0.60 * MixtureB <= 25\n\n# Objective\n# Maximize profit ($30 per kilogram of mixture A, $40 per kilogram of mixture B):\nm.maximize(30 * MixtureA + 40 * MixtureB)\n", "entities": [{"start": 14, "end": 17, "word": "has", "entity_group": "CONST_DIR", "score": 0.9989018760170957}, {"start": 18, "end": 20, "word": "30", "entity_group": "LIMIT", "score": 0.9986390957039307}, {"start": 50, "end": 52, "word": "25", "entity_group": "LIMIT", "score": 0.9995889596816689}, {"start": 122, "end": 131, "word": "mixture A", "entity_group": "VAR", "score": 0.9999690454472142}, {"start": 136, "end": 146, "word": "mixture B.", "entity_group": "VAR", "score": 0.9999911138450869}, {"start": 147, "end": 156, "word": "Mixture A", "entity_group": "VAR", "score": 0.9999182387167012}, {"start": 160, "end": 164, "word": "75 %", "entity_group": "PARAM", "score": 0.9781337064193115}, {"start": 181, "end": 185, "word": "25 %", "entity_group": "PARAM", "score": 0.9932149727450241}, {"start": 200, "end": 209, "word": "Mixture B", "entity_group": "VAR", "score": 0.9998279561685801}, {"start": 213, "end": 217, "word": "40 %", "entity_group": "PARAM", "score": 0.988005479308095}, {"start": 234, "end": 238, "word": "60 %", "entity_group": "PARAM", "score": 0.9870360308789248}, {"start": 267, "end": 276, "word": "mixture A", "entity_group": "VAR", "score": 0.9999651896014549}, {"start": 286, "end": 292, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999408721845836}, {"start": 298, "end": 300, "word": "30", "entity_group": "PARAM", "score": 0.999528785827938}, {"start": 319, "end": 328, "word": "mixture B", "entity_group": "VAR", "score": 0.9999000192502364}, {"start": 338, "end": 344, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997827474090236}, {"start": 350, "end": 352, "word": "40", "entity_group": "PARAM", "score": 0.9996038041742311}, {"start": 408, "end": 416, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993193030302023}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997781723828256}]}
{"doc_id": "-66849159", "document": "Bolts and Nuts builds scooters and bikes. One scooter requires 2 hours of tooling on the grinder and then 3 hours of tooling on the polisher. One bike requires 4 hours of tooling on the grinder and then 3 hours of tooling on polisher. The company makes a profit of $100 per scooter and $50 per bike. Each machine, the grinder and polisher, can only be used for a maximum of 10 hours per day. How many units of each, scooters and bikes, should the company produce to maximize profit?", "order_mapping": {"scooters": 0, "bikes": 1, "scooter": 0, "bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"scooter": "100", "bike": "50"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "10", "terms": {"scooter": "2", "bike": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "10", "terms": {"scooter": "3", "bike": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of scooters to produce\n- y: Number of bikes to produce\n\nObjective:\n- The company aims to maximize its profit. The profit per scooter is $100 and the profit per bike is $50. Therefore, the objective function is: Maximize 100x + 50y\n\nConstraints:\n- Each machine, the grinder and polisher, can only be used for a maximum of 10 hours per day. The time constraint for the grinder can be expressed as: 2x + 4y <= 10 (grinder constraint), and the time constraint for the polisher can be expressed as: 3x + 3y <= 10 (polisher constraint).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 50y\nConstraints:\n2x + 4y <= 10\n3x + 3y <= 10", "canonical": {"objective": [-100.0, -50.0], "constraints": [[2.0, 4.0, 10.0], [3.0, 3.0, 10.0]]}, "solution": {"x": 3, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of scooters produced: Scooters\n- Number of bikes produced: Bikes\n\nConstraints:\n- Grinder machine usage should not exceed 10 hours per day (2 hours for a scooter, 4 hours for a bike):\n  2 * Scooters + 4 * Bikes <= 10\n- Polisher machine usage should not exceed 10 hours per day (3 hours for both scooter and bike):\n  3 * Scooters + 3 * Bikes <= 10\n\nObjective:\n- Maximize profit ($100 per scooter, $50 per bike):\n  100 * Scooters + 50 * Bikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nScooters = intvar(0, 999999999)  # Number of scooters produced\nBikes = intvar(0, 999999999)  # Number of bikes produced\n\n# Constraints\nm = Model()\n\n# Grinder machine usage (2 hours for a scooter, 4 hours for a bike, max 10 hours per day):\nm += 2 * Scooters + 4 * Bikes <= 10\n# Polisher machine usage (3 hours for both scooter and bike, max 10 hours per day):\nm += 3 * Scooters + 3 * Bikes <= 10\n\n# Objective\n# Maximize profit ($100 per scooter, $50 per bike):\nm.maximize(100 * Scooters + 50 * Bikes)\n", "entities": [{"start": 22, "end": 30, "word": "scooters", "entity_group": "VAR", "score": 0.9997795944554241}, {"start": 35, "end": 40, "word": "bikes", "entity_group": "VAR", "score": 0.9997581321635528}, {"start": 47, "end": 54, "word": "scooter", "entity_group": "VAR", "score": 0.9995210365932969}, {"start": 64, "end": 65, "word": "2", "entity_group": "PARAM", "score": 0.9996389298681772}, {"start": 107, "end": 108, "word": "3", "entity_group": "PARAM", "score": 0.9997265021051472}, {"start": 148, "end": 152, "word": "bike", "entity_group": "VAR", "score": 0.9995210873228255}, {"start": 162, "end": 163, "word": "4", "entity_group": "PARAM", "score": 0.9995961709387436}, {"start": 205, "end": 206, "word": "3", "entity_group": "PARAM", "score": 0.999711495474906}, {"start": 258, "end": 264, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999262664096107}, {"start": 270, "end": 273, "word": "100", "entity_group": "PARAM", "score": 0.9980147082118548}, {"start": 278, "end": 285, "word": "scooter", "entity_group": "VAR", "score": 0.9986049038912033}, {"start": 292, "end": 294, "word": "50", "entity_group": "PARAM", "score": 0.9996993679503057}, {"start": 299, "end": 303, "word": "bike", "entity_group": "VAR", "score": 0.9992543841394628}, {"start": 371, "end": 378, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9977721385700147}, {"start": 382, "end": 384, "word": "10", "entity_group": "LIMIT", "score": 0.999395335606118}, {"start": 426, "end": 434, "word": "scooters", "entity_group": "VAR", "score": 0.9997140268738389}, {"start": 439, "end": 444, "word": "bikes", "entity_group": "VAR", "score": 0.9997593420203391}, {"start": 477, "end": 485, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988824294500838}, {"start": 486, "end": 492, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277169424998}]}
{"doc_id": "-1830770679", "document": "A paint store mixes two brands of paint, Ruby and Sapphire, to create a new mixture of paint. A can of Ruby paint costs $12 and a can of Sapphire paint costs $15. A can of Ruby paint contains 2 units of dye, 4 units of thinner, and 5 units of water. A can of Sapphire paint contains 4 units of dye, 6 units of thinner, and 2 units of water. The minimum requirements of dye, thinner, and water for the new mixture are 15 units, 20 units, and 18 units respectively. How many cans of each paint brand should be mixed to achieve the new mixture at a minimum cost?", "order_mapping": {"Ruby": 0, "Sapphire": 1, "Ruby paint": 0, "Sapphire paint": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Ruby paint": "12", "Sapphire paint": "15"}}, "const_declarations": [{"type": "linear", "direction": "minimum requirements", "limit": "15", "terms": {"Ruby paint": "2", "Sapphire paint": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum requirements", "limit": "20", "terms": {"Ruby paint": "4", "Sapphire paint": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum requirements", "limit": "18", "terms": {"Ruby paint": "5", "Sapphire paint": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans of Ruby paint\n- y: Number of cans of Sapphire paint\n\nObjective:\n- The store aims to minimize the cost of the new mixture. Given that a can of Ruby paint costs $12 and a can of Sapphire paint costs $15, the objective function is: Minimize 12x + 15y\n\nConstraints:\n- The new mixture must meet minimum requirements of dye, thinner, and water. This leads to the following constraints:\n    - 2x + 4y >= 15 (dye)\n    - 4x + 6y >= 20 (thinner)\n    - 5x + 2y >= 18 (water)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 12x + 15y\nConstraints:\n2x + 4y >= 15\n4x + 6y >= 20\n5x + 2y >= 18", "canonical": {"objective": [12.0, 15.0], "constraints": [[-2.0, -4.0, -15.0], [-4.0, -6.0, -20.0], [-5.0, -2.0, -18.0]]}, "solution": {"x": 4, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of cans of Ruby paint: Ruby\n- Number of cans of Sapphire paint: Sapphire\n\nConstraints:\n- Dye requirement: 2 units from Ruby and 4 units from Sapphire should sum up to at least 15 units\n  2 * Ruby + 4 * Sapphire >= 15\n- Thinner requirement: 4 units from Ruby and 6 units from Sapphire should sum up to at least 20 units\n  4 * Ruby + 6 * Sapphire >= 20\n- Water requirement: 5 units from Ruby and 2 units from Sapphire should sum up to at least 18 units\n  5 * Ruby + 2 * Sapphire >= 18\n\nObjective:\n- Minimize the total cost of the mixture ($12 per can of Ruby paint, $15 per can of Sapphire paint)\n  12 * Ruby + 15 * Sapphire\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRuby = intvar(0, 999999999)  # Number of cans of Ruby paint\nSapphire = intvar(0, 999999999)  # Number of cans of Sapphire paint\n\n# Constraints\nm = Model()\n\n# Minimum requirements for the new mixture\n# Dye: at least 15 units\nm += 2 * Ruby + 4 * Sapphire >= 15\n# Thinner: at least 20 units\nm += 4 * Ruby + 6 * Sapphire >= 20\n# Water: at least 18 units\nm += 5 * Ruby + 2 * Sapphire >= 18\n\n# Objective\n# Minimize cost ($12 per can of Ruby paint, $15 per can of Sapphire paint)\nm.minimize(12 * Ruby + 15 * Sapphire)\n", "entities": [{"start": 42, "end": 46, "word": "Ruby", "entity_group": "VAR", "score": 0.9979618010127871}, {"start": 51, "end": 59, "word": "Sapphire", "entity_group": "VAR", "score": 0.9996638891937369}, {"start": 106, "end": 116, "word": "Ruby paint", "entity_group": "VAR", "score": 0.9999828398834075}, {"start": 117, "end": 122, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992696756850105}, {"start": 125, "end": 127, "word": "12", "entity_group": "PARAM", "score": 0.9993173600056938}, {"start": 141, "end": 155, "word": "Sapphire paint", "entity_group": "VAR", "score": 0.9999450440705938}, {"start": 156, "end": 161, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9998076087743494}, {"start": 164, "end": 166, "word": "15", "entity_group": "PARAM", "score": 0.9995349367681744}, {"start": 178, "end": 188, "word": "Ruby paint", "entity_group": "VAR", "score": 0.9999681691690213}, {"start": 198, "end": 199, "word": "2", "entity_group": "PARAM", "score": 0.9996304925198541}, {"start": 215, "end": 216, "word": "4", "entity_group": "PARAM", "score": 0.999739743028296}, {"start": 240, "end": 241, "word": "5", "entity_group": "PARAM", "score": 0.999686044044406}, {"start": 268, "end": 282, "word": "Sapphire paint", "entity_group": "VAR", "score": 0.9999791297844373}, {"start": 292, "end": 293, "word": "4", "entity_group": "PARAM", "score": 0.9996305184600576}, {"start": 309, "end": 310, "word": "6", "entity_group": "PARAM", "score": 0.9997397223382396}, {"start": 334, "end": 335, "word": "2", "entity_group": "PARAM", "score": 0.9996464256688953}, {"start": 357, "end": 377, "word": "minimum requirements", "entity_group": "CONST_DIR", "score": 0.9792820549279432}, {"start": 431, "end": 433, "word": "15", "entity_group": "LIMIT", "score": 0.9995574724840391}, {"start": 442, "end": 444, "word": "20", "entity_group": "LIMIT", "score": 0.9993926098693446}, {"start": 457, "end": 459, "word": "18", "entity_group": "LIMIT", "score": 0.9996792157292144}, {"start": 563, "end": 570, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9913879826131835}, {"start": 571, "end": 575, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984892628624816}]}
{"doc_id": "697851528", "document": "A fishing company fishes in two areas of the world, the Pacific and Atlantic ocean. In a week, they must provide 18 tons of fish, 10 tons of crab, and 5 tons of lobster. It costs the company $5000 per day to operate in the Pacific ocean and $7000 per day to operate in the Atlantic ocean. In a day's operation in the Pacific ocean, the company can catch 5 tons of fish, 2 tons of crab, and 0.5 tons of lobster. In a day's operation in the Atlantic ocean, the company can catch 4 tons of fish, 3 tons of crab, and 1 ton of lobster. How many days a week should fishing be done in each ocean to minimize costs?", "order_mapping": {"Pacific": 0, "Atlantic": 1, "Pacific ocean": 0, "Atlantic ocean": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Pacific ocean": "5000", "Atlantic ocean": "7000"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "18", "terms": {"Pacific ocean": "5", "Atlantic ocean": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "10", "terms": {"Pacific ocean": "2", "Atlantic ocean": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "5", "terms": {"Pacific ocean": "0.5", "Atlantic ocean": "1"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of days fishing in the Pacific ocean per week\n- y: Number of days fishing in the Atlantic ocean per week\n\nObjective:\n- The fishing company aims to minimize its costs. It costs $5000 per day to operate in the Pacific ocean and $7000 per day to operate in the Atlantic ocean. Therefore, the objective function is: Minimize 5000x + 7000y\n\nConstraints:\n- The company must provide 18 tons of fish per week, which translates to the constraint: 5x + 4y >= 18.\n- The company must provide 10 tons of crab per week, leading to the constraint: 2x + 3y >= 10.\n- The company must provide 5 tons of lobster per week, resulting in the constraint: 0.5x + y >= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5000x + 7000y\nConstraints:\n5x + 4y >= 18\n2x + 3y >= 10\n0.5x + y >= 5", "canonical": {"objective": [5000.0, 7000.0], "constraints": [[-5.0, -4.0, -18.0], [-2.0, -3.0, -10.0], [-0.5, -1.0, -5.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of days fishing in the Pacific ocean: DaysPacific\n- Number of days fishing in the Atlantic ocean: DaysAtlantic\n\nConstraints:\n- To provide at least 18 tons of fish per week:\n  5 * DaysPacific + 4 * DaysAtlantic >= 18\n- To provide at least 10 tons of crab per week:\n  2 * DaysPacific + 3 * DaysAtlantic >= 10\n- To provide at least 5 tons of lobster per week:\n  0.5 * DaysPacific + 1 * DaysAtlantic >= 5\n\nObjective:\n- Minimize costs ($5000 per day in the Pacific ocean and $7000 per day in the Atlantic ocean):\n  5000 * DaysPacific + 7000 * DaysAtlantic\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaysPacific = intvar(0, 999999999)  # Number of days fishing in the Pacific ocean\nDaysAtlantic = intvar(0, 999999999)  # Number of days fishing in the Atlantic ocean\n\n# Constraints\nm = Model()\n\n# To provide at least 18 tons of fish per week:\nm += 5 * DaysPacific + 4 * DaysAtlantic >= 18\n# To provide at least 10 tons of crab per week:\nm += 2 * DaysPacific + 3 * DaysAtlantic >= 10\n# To provide at least 5 tons of lobster per week:\nm += 0.5 * DaysPacific + 1 * DaysAtlantic >= 5\n\n# Objective\n# Minimize costs ($5000 per day in the Pacific ocean and $7000 per day in the Atlantic ocean):\nm.minimize(5000 * DaysPacific + 7000 * DaysAtlantic)\n", "entities": [{"start": 57, "end": 64, "word": "Pacific", "entity_group": "VAR", "score": 0.9986052269332577}, {"start": 69, "end": 77, "word": "Atlantic", "entity_group": "VAR", "score": 0.9994979241210306}, {"start": 108, "end": 115, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9957323530761641}, {"start": 116, "end": 118, "word": "18", "entity_group": "LIMIT", "score": 0.9990328067909579}, {"start": 134, "end": 136, "word": "10", "entity_group": "LIMIT", "score": 0.9997545538806525}, {"start": 156, "end": 157, "word": "5", "entity_group": "LIMIT", "score": 0.999497564243373}, {"start": 179, "end": 184, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9938973670807048}, {"start": 199, "end": 203, "word": "5000", "entity_group": "PARAM", "score": 0.9995638151851118}, {"start": 230, "end": 243, "word": "Pacific ocean", "entity_group": "VAR", "score": 0.9999487636317119}, {"start": 250, "end": 254, "word": "7000", "entity_group": "PARAM", "score": 0.9995970694512352}, {"start": 281, "end": 295, "word": "Atlantic ocean", "entity_group": "VAR", "score": 0.9999445674597832}, {"start": 327, "end": 340, "word": "Pacific ocean", "entity_group": "VAR", "score": 0.9999415232432965}, {"start": 365, "end": 366, "word": "5", "entity_group": "PARAM", "score": 0.9997390461937387}, {"start": 382, "end": 383, "word": "2", "entity_group": "PARAM", "score": 0.9997421599863269}, {"start": 403, "end": 406, "word": "0.5", "entity_group": "PARAM", "score": 0.999253375198551}, {"start": 454, "end": 468, "word": "Atlantic ocean", "entity_group": "VAR", "score": 0.9999415232432988}, {"start": 493, "end": 494, "word": "4", "entity_group": "PARAM", "score": 0.9997390685853278}, {"start": 510, "end": 511, "word": "3", "entity_group": "PARAM", "score": 0.9997421548547801}, {"start": 531, "end": 532, "word": "1", "entity_group": "PARAM", "score": 0.9985269129612648}, {"start": 611, "end": 619, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9991579381037238}, {"start": 620, "end": 625, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988153618389138}]}
{"doc_id": "-1793738749", "document": "A young man eats carrots and spinach to meet his biotin and folate needs. He wants to make sure he eats a minimum of 20 grams of each biotin and folate per day. One cup of carrots contains 1 gram of biotin and 3 grams of folate. One cup of spinach contain 2 grams of biotin and 1.5 grams of folate. If the cost per cup of carrots is $5 and the cost per cup of spinach is $3, how many cups of each should he consume to meet his requirements at minimum cost?", "order_mapping": {"carrots": 0, "spinach": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"carrots": "5", "spinach": "3"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "20", "terms": {"carrots": "1", "spinach": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "20", "terms": {"carrots": "3", "spinach": "1.5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Cups of carrots consumed\n- y: Cups of spinach consumed\n\nObjective:\n- The young man wants to minimize his cost. The cost per cup of carrots is $5 and the cost per cup of spinach is $3. Therefore, the objective function is: Minimize 5x + 3y\n\nConstraints:\n- He wants to consume a minimum of 20 grams of biotin, which can be obtained from 1 gram of biotin in carrots and 2 grams of biotin in spinach. This leads to the constraint: x + 2y >= 20.\n- He also wants to consume a minimum of 20 grams of folate, which can be obtained from 3 grams of folate in carrots and 1.5 grams of folate in spinach. This leads to the constraint: 3x + 1.5y >= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 3y\nConstraints:\nx + 2y >= 20\n3x + 1.5y >= 20", "canonical": {"objective": [5.0, 3.0], "constraints": [[-1.0, -2.0, -20.0], [-3.0, -1.5, -20.0]]}, "solution": {"x": 2, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of cups of carrots consumed: Carrots\n- Number of cups of spinach consumed: Spinach\n\nConstraints:\n- To meet the minimum of 20 grams of biotin per day:\n  1 * Carrots + 2 * Spinach >= 20\n- To meet the minimum of 20 grams of folate per day:\n  3 * Carrots + 1.5 * Spinach >= 20\n\nObjective:\n- Minimize cost ($5 per cup of carrots, $3 per cup of spinach):\n  5 * Carrots + 3 * Spinach\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # Number of cups of carrots consumed\nSpinach = intvar(0, 999999999)  # Number of cups of spinach consumed\n\n# Constraints\nm = Model()\n\n# Minimum of 20 grams of biotin per day:\nm += 1 * Carrots + 2 * Spinach >= 20\n# Minimum of 20 grams of folate per day:\nm += 3 * Carrots + 1.5 * Spinach >= 20\n\n# Objective\n# Minimize cost ($5 per cup of carrots, $3 per cup of spinach):\nm.minimize(5 * Carrots + 3 * Spinach)\n", "entities": [{"start": 17, "end": 24, "word": "carrots", "entity_group": "VAR", "score": 0.9996779723863366}, {"start": 29, "end": 36, "word": "spinach", "entity_group": "VAR", "score": 0.9997298115637239}, {"start": 107, "end": 114, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9946313884215529}, {"start": 118, "end": 120, "word": "20", "entity_group": "LIMIT", "score": 0.9997384343718055}, {"start": 174, "end": 181, "word": "carrots", "entity_group": "VAR", "score": 0.9996732560020604}, {"start": 191, "end": 192, "word": "1", "entity_group": "PARAM", "score": 0.9995423753766979}, {"start": 212, "end": 213, "word": "3", "entity_group": "PARAM", "score": 0.9997306096317427}, {"start": 243, "end": 250, "word": "spinach", "entity_group": "VAR", "score": 0.9991689141705479}, {"start": 259, "end": 260, "word": "2", "entity_group": "PARAM", "score": 0.9996888309401792}, {"start": 281, "end": 284, "word": "1.5", "entity_group": "PARAM", "score": 0.9997231737297178}, {"start": 310, "end": 314, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.999016320929498}, {"start": 326, "end": 333, "word": "carrots", "entity_group": "VAR", "score": 0.9995623154067182}, {"start": 339, "end": 340, "word": "5", "entity_group": "PARAM", "score": 0.9993833458291894}, {"start": 349, "end": 353, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989063424691196}, {"start": 365, "end": 372, "word": "spinach", "entity_group": "VAR", "score": 0.9992530477266759}, {"start": 378, "end": 379, "word": "3", "entity_group": "PARAM", "score": 0.9995507607657799}, {"start": 450, "end": 457, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.994222189659723}, {"start": 458, "end": 462, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9981009091422864}]}
{"doc_id": "1264668532", "document": "After a good workout, Jason makes sure he gets at least 10 units of calcium, 15 units of potassium, and 13 units of magnesium. In order to do so, Jason can drink a sports drink or coconut water. The sports drink costs $5 per bottle and contains 1 unit of calcium, 2 units of potassium, and 3 units of magnesium. Coconut water costs $3 per bottle and contains 4 units of calcium, 1 unit of potassium, and 2 units of magnesium. How many bottle of each should Jason drink to minimize his cost?", "order_mapping": {"sports drink": 0, "coconut water": 1, "Coconut water": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Coconut water": "3", "sports drink": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10", "terms": {"sports drink": "1", "Coconut water": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"sports drink": "2", "Coconut water": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "13", "terms": {"sports drink": "3", "Coconut water": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of sports drink\n- y: Number of bottles of coconut water\n\nObjective:\n- Jason wants to minimize his cost. The sports drink costs $5 per bottle and coconut water costs $3 per bottle. Therefore, the objective function is: Minimize 5x + 3y\n\nConstraints:\n- Jason needs to get at least 10 units of calcium, which can be represented as: x + 4y >= 10\n- Jason needs to get at least 15 units of potassium, which can be represented as: 2x + y >= 15\n- Jason needs to get at least 13 units of magnesium, which can be represented as: 3x + 2y >= 13\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 3y\nConstraints:\nx + 4y >= 10\n2x + y >= 15\n3x + 2y >= 13", "canonical": {"objective": [5.0, 3.0], "constraints": [[-1.0, -4.0, -10.0], [-2.0, -1.0, -15.0], [-3.0, -2.0, -13.0]]}, "solution": {"x": 7, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of sports drink bottles: SportsDrink\n- Number of coconut water bottles: CoconutWater\n\nConstraints:\n- To meet the calcium requirement (at least 10 units):\n  1 * SportsDrink + 4 * CoconutWater >= 10\n- To meet the potassium requirement (at least 15 units):\n  2 * SportsDrink + 1 * CoconutWater >= 15\n- To meet the magnesium requirement (at least 13 units):\n  3 * SportsDrink + 2 * CoconutWater >= 13\n\nObjective:\n- Minimize cost (5 dollars per sports drink bottle, 3 dollars per coconut water bottle):\n  5 * SportsDrink + 3 * CoconutWater\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSportsDrink = intvar(0, 999999999)  # Number of sports drink bottles\nCoconutWater = intvar(0, 999999999)  # Number of coconut water bottles\n\n# Constraints\nm = Model()\n\n# Jason needs at least 10 units of calcium:\nm += 1 * SportsDrink + 4 * CoconutWater >= 10\n# Jason needs at least 15 units of potassium:\nm += 2 * SportsDrink + 1 * CoconutWater >= 15\n# Jason needs at least 13 units of magnesium:\nm += 3 * SportsDrink + 2 * CoconutWater >= 13\n\n# Objective\n# Minimize cost (5 dollars per sports drink bottle, 3 dollars per coconut water bottle):\nm.minimize(5 * SportsDrink + 3 * CoconutWater)\n", "entities": [{"start": 48, "end": 56, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993518866933299}, {"start": 57, "end": 59, "word": "10", "entity_group": "LIMIT", "score": 0.9997495575987003}, {"start": 79, "end": 81, "word": "15", "entity_group": "LIMIT", "score": 0.9997462233624389}, {"start": 107, "end": 109, "word": "13", "entity_group": "LIMIT", "score": 0.9993980733801587}, {"start": 169, "end": 181, "word": "sports drink", "entity_group": "VAR", "score": 0.9998920093008179}, {"start": 185, "end": 198, "word": "coconut water", "entity_group": "VAR", "score": 0.9999820492058263}, {"start": 205, "end": 217, "word": "sports drink", "entity_group": "VAR", "score": 0.9999854342514831}, {"start": 218, "end": 223, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9975503216616503}, {"start": 226, "end": 227, "word": "5", "entity_group": "PARAM", "score": 0.9996698461455014}, {"start": 252, "end": 253, "word": "1", "entity_group": "PARAM", "score": 0.9995496628813328}, {"start": 272, "end": 273, "word": "2", "entity_group": "PARAM", "score": 0.9997281780412122}, {"start": 299, "end": 300, "word": "3", "entity_group": "PARAM", "score": 0.9995886050205979}, {"start": 322, "end": 335, "word": "Coconut water", "entity_group": "VAR", "score": 0.9999803106843831}, {"start": 336, "end": 341, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994368449652975}, {"start": 344, "end": 345, "word": "3", "entity_group": "PARAM", "score": 0.999722534562656}, {"start": 370, "end": 371, "word": "4", "entity_group": "PARAM", "score": 0.9997032188571845}, {"start": 391, "end": 392, "word": "1", "entity_group": "PARAM", "score": 0.9996810910336525}, {"start": 417, "end": 418, "word": "2", "entity_group": "PARAM", "score": 0.9992592276505697}, {"start": 486, "end": 494, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993462166484723}, {"start": 499, "end": 503, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989043169141829}]}
{"doc_id": "-161656281", "document": "A salesman wants to sell his inventory composed of seven wireless earbuds, ten wired earbuds, and twenty USB dongles. He decides to offer two bundles: Bundle A and Bundle B. Bundle A brings a profit of $10 and contains 1 wireless earbud and 3 USB dongles. Bundle B brings a profit of $12 and contains 1 wireless earbud, 2 wired earbuds, and 2 USB dongles. Assuming he can sell all bundles, how many of each should he prepare to maximize his profit?", "order_mapping": {"Bundle A": 0, "Bundle B.": 1, "Bundle B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Bundle B": "12", "Bundle A": "10"}}, "const_declarations": [{"type": "linear", "direction": "inventory", "limit": "seven", "terms": {"Bundle A": "1", "Bundle B": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "inventory", "limit": "ten", "terms": {"Bundle B": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "inventory", "limit": "twenty", "terms": {"Bundle A": "3", "Bundle B": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Bundle A to prepare\n- y: Number of Bundle B to prepare\n\nObjective:\n- The salesman aims to maximize his profit. Bundle A brings a profit of $10 and Bundle B brings a profit of $12. Therefore, the objective function is: Maximize 10x + 12y\n\nConstraints:\n- The salesman has 7 wireless earbuds, so the constraint is: x + y <= 7\n- He has 10 wired earbuds, leading to the constraint: 2y <= 10\n- He has 20 USB dongles, resulting in the constraint: 3x + 2y <= 20\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 12y\nConstraints:\nx + y <= 7\n2y <= 10\n3x + 2y <= 20", "canonical": {"objective": [-10.0, -12.0], "constraints": [[1.0, 1.0, 7.0], [0.0, 2.0, 10.0], [3.0, 2.0, 20.0]]}, "solution": {"x": 2, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of Bundle A prepared: BundleA\n- Number of Bundle B prepared: BundleB\n\nConstraints:\n- Total wireless earbuds used should not exceed 7 (each Bundle A and Bundle B requires 1):\n  BundleA + BundleB <= 7\n- Total wired earbuds used should not exceed 10 (each Bundle B requires 2):\n  2 * BundleB <= 10\n- Total USB dongles used should not exceed 20 (each Bundle A requires 3 and each Bundle B requires 2):\n  3 * BundleA + 2 * BundleB <= 20\n\nObjective:\n- Maximize profit (Bundle A brings $10 profit, Bundle B brings $12 profit):\n  10 * BundleA + 12 * BundleB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBundleA = intvar(0, 999999999)  # Number of Bundle A prepared\nBundleB = intvar(0, 999999999)  # Number of Bundle B prepared\n\n# Constraints\nm = Model()\n\n# Inventory constraints\n# Wireless earbuds: 7 available, each Bundle A and Bundle B requires 1\nm += BundleA + BundleB <= 7\n# Wired earbuds: 10 available, each Bundle B requires 2\nm += 2 * BundleB <= 10\n# USB dongles: 20 available, each Bundle A requires 3 and each Bundle B requires 2\nm += 3 * BundleA + 2 * BundleB <= 20\n\n# Objective\n# Maximize profit (Bundle A brings $10 profit, Bundle B brings $12 profit):\nm.maximize(10 * BundleA + 12 * BundleB)\n", "entities": [{"start": 29, "end": 38, "word": "inventory", "entity_group": "CONST_DIR", "score": 0.9985968176195134}, {"start": 51, "end": 56, "word": "seven", "entity_group": "LIMIT", "score": 0.998844449994242}, {"start": 76, "end": 79, "word": "ten", "entity_group": "LIMIT", "score": 0.9991747073294006}, {"start": 100, "end": 106, "word": "twenty", "entity_group": "LIMIT", "score": 0.9988353682694886}, {"start": 155, "end": 163, "word": "Bundle A", "entity_group": "VAR", "score": 0.9999610436227516}, {"start": 168, "end": 177, "word": "Bundle B.", "entity_group": "VAR", "score": 0.9999816381981211}, {"start": 178, "end": 186, "word": "Bundle A", "entity_group": "VAR", "score": 0.9999237516914845}, {"start": 196, "end": 202, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995406787579011}, {"start": 208, "end": 210, "word": "10", "entity_group": "PARAM", "score": 0.9994885119108983}, {"start": 224, "end": 225, "word": "1", "entity_group": "PARAM", "score": 0.9995725729708509}, {"start": 246, "end": 247, "word": "3", "entity_group": "PARAM", "score": 0.9996055456128398}, {"start": 262, "end": 270, "word": "Bundle B", "entity_group": "VAR", "score": 0.999980102439354}, {"start": 280, "end": 286, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999055614769954}, {"start": 292, "end": 294, "word": "12", "entity_group": "PARAM", "score": 0.9993635408105711}, {"start": 308, "end": 309, "word": "1", "entity_group": "PARAM", "score": 0.9995852389119422}, {"start": 328, "end": 329, "word": "2", "entity_group": "PARAM", "score": 0.9995890033812036}, {"start": 350, "end": 351, "word": "2", "entity_group": "PARAM", "score": 0.9996347319656467}, {"start": 439, "end": 447, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9984462847573675}, {"start": 452, "end": 458, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998481381548744}]}
{"doc_id": "1754296821", "document": "A tailor shop makes pants and short each requiring the use of three operations done by three teams: measuring, cutting, and sewing. The measuring team is available for at most 60 hours, the cutting team is available for at most 80 hours, and the sewing team is available for at most 75 hours. A pant requires 0.5 hours of measuring, 0.2 hours of cutting, and 0.7 hours of sewing. A short requires 0.1 hours of measuring, 0.5 hours of cutting, and 0.6 hours of sewing. The profit per pant is $5 and the profit per short is $7. How many of each should be made in order to maximize profit?", "order_mapping": {"pants": 0, "short": 1, "pant": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pant": "5", "short": "7"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "60", "terms": {"pant": "0.5", "short": "0.1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "80", "terms": {"pant": "0.2", "short": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "75", "terms": {"pant": "0.7", "short": "0.6"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pants to be made\n- y: Number of shorts to be made\n\nObjective:\n- The tailor shop aims to maximize its profit. The profit per pant is $5 and the profit per short is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The measuring team is available for at most 60 hours, and each pant requires 0.5 hours and each short requires 0.1 hours, leading to the constraint: 0.5x + 0.1y <= 60.\n- The cutting team is available for at most 80 hours, and each pant requires 0.2 hours and each short requires 0.5 hours, leading to the constraint: 0.2x + 0.5y <= 80.\n- The sewing team is available for at most 75 hours, and each pant requires 0.7 hours and each short requires 0.6 hours, leading to the constraint: 0.7x + 0.6y <= 75.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n0.5x + 0.1y <= 60\n0.2x + 0.5y <= 80\n0.7x + 0.6y <= 75", "canonical": {"objective": [-5.0, -7.0], "constraints": [[0.5, 0.1, 60.0], [0.2, 0.5, 80.0], [0.7, 0.6, 75.0]]}, "solution": {"x": 0, "y": 125}, "pseudo_model": "\nDecision Variables:\n- Number of pants made: Pants\n- Number of shorts made: Shorts\n\nConstraints:\n- Measuring team's availability (at most 60 hours):\n  0.5 * Pants + 0.1 * Shorts <= 60\n- Cutting team's availability (at most 80 hours):\n  0.2 * Pants + 0.5 * Shorts <= 80\n- Sewing team's availability (at most 75 hours):\n  0.7 * Pants + 0.6 * Shorts <= 75\n\nObjective:\n- Maximize profit (5 dollars per pant, 7 dollars per short):\n  5 * Pants + 7 * Shorts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPants = intvar(0, 999999999)  # Number of pants made\nShorts = intvar(0, 999999999)  # Number of shorts made\n\n# Constraints\nm = Model()\n\n# Measuring team is available for at most 60 hours:\nm += 0.5 * Pants + 0.1 * Shorts <= 60\n# Cutting team is available for at most 80 hours:\nm += 0.2 * Pants + 0.5 * Shorts <= 80\n# Sewing team is available for at most 75 hours:\nm += 0.7 * Pants + 0.6 * Shorts <= 75\n\n# Objective\n# Maximize profit (5 dollars per pant, 7 dollars per short):\nm.maximize(5 * Pants + 7 * Shorts)\n", "entities": [{"start": 20, "end": 25, "word": "pants", "entity_group": "VAR", "score": 0.999380594158469}, {"start": 30, "end": 35, "word": "short", "entity_group": "VAR", "score": 0.999416471542401}, {"start": 172, "end": 179, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998378283394808}, {"start": 180, "end": 182, "word": "60", "entity_group": "LIMIT", "score": 0.9997749216859441}, {"start": 225, "end": 232, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9977426675787955}, {"start": 233, "end": 235, "word": "80", "entity_group": "LIMIT", "score": 0.9997764102990832}, {"start": 281, "end": 288, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998349297725674}, {"start": 289, "end": 291, "word": "75", "entity_group": "LIMIT", "score": 0.9997732571343718}, {"start": 302, "end": 306, "word": "pant", "entity_group": "VAR", "score": 0.9997230157745624}, {"start": 316, "end": 319, "word": "0.5", "entity_group": "PARAM", "score": 0.9996148201272761}, {"start": 341, "end": 344, "word": "0.2", "entity_group": "PARAM", "score": 0.9997267683039223}, {"start": 368, "end": 371, "word": "0.7", "entity_group": "PARAM", "score": 0.9996399583785223}, {"start": 392, "end": 397, "word": "short", "entity_group": "VAR", "score": 0.9996177830778814}, {"start": 407, "end": 410, "word": "0.1", "entity_group": "PARAM", "score": 0.9996467309982905}, {"start": 432, "end": 435, "word": "0.5", "entity_group": "PARAM", "score": 0.9997267683039217}, {"start": 459, "end": 462, "word": "0.6", "entity_group": "PARAM", "score": 0.9995080692346079}, {"start": 485, "end": 491, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999784919088893}, {"start": 496, "end": 500, "word": "pant", "entity_group": "VAR", "score": 0.999246358019176}, {"start": 506, "end": 507, "word": "5", "entity_group": "PARAM", "score": 0.9993469691560053}, {"start": 516, "end": 522, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998655578352125}, {"start": 527, "end": 532, "word": "short", "entity_group": "VAR", "score": 0.9983865180735709}, {"start": 538, "end": 539, "word": "7", "entity_group": "PARAM", "score": 0.999470718495636}, {"start": 586, "end": 594, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852675868956}, {"start": 595, "end": 601, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818145833}]}
{"doc_id": "1629184346", "document": "A collector's shop sells rocks in two types of shapes, oval and rectangular. Oval rocks require 10 minutes of washing and 12 minutes of polishing. Rectangular rocks require 15 minutes of washing and 12 minutes of polishing. The profit per oval rock is $7 and the profit per rectangular rock is $9. If there are 2000 minutes available for washing and 2500 minutes available for polishing, how many rocks of each shape should be made to maximize profit?", "order_mapping": {"oval": 0, "rectangular": 1, "Oval rocks": 0, "Rectangular rocks": 1, "oval rock": 0, "rectangular rock": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"oval rock": "7", "rectangular rock": "9"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"Oval rocks": "10", "Rectangular rocks": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2500", "terms": {"Oval rocks": "12", "Rectangular rocks": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of oval rocks\n- y: Number of rectangular rocks\n\nObjective:\n- The shop aims to maximize its profit. The profit per oval rock is $7 and the profit per rectangular rock is $9. Therefore, the objective function is: Maximize 7x + 9y\n\nConstraints:\n- The available time for washing is 2000 minutes, and the time required for washing each type of rock is 10 minutes for oval rocks and 15 minutes for rectangular rocks. This leads to the constraint: 10x + 15y <= 2000.\n- The available time for polishing is 2500 minutes, and the time required for polishing each type of rock is 12 minutes for both oval and rectangular rocks. This results in the constraint: 12x + 12y <= 2500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 9y\nConstraints:\n10x + 15y <= 2000\n12x + 12y <= 2500", "canonical": {"objective": [-7.0, -9.0], "constraints": [[10.0, 15.0, 2000.0], [12.0, 12.0, 2500.0]]}, "solution": {"x": 200, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of oval rocks made: OvalRocks\n- Number of rectangular rocks made: RectangularRocks\n\nConstraints:\n- Total minutes for washing should not exceed 2000:\n  10 * OvalRocks + 15 * RectangularRocks <= 2000\n- Total minutes for polishing should not exceed 2500:\n  12 * OvalRocks + 12 * RectangularRocks <= 2500\n\nObjective:\n- Maximize profit (7 dollars per oval rock, 9 dollars per rectangular rock):\n  7 * OvalRocks + 9 * RectangularRocks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOvalRocks = intvar(0, 999999999)  # Number of oval rocks made\nRectangularRocks = intvar(0, 999999999)  # Number of rectangular rocks made\n\n# Constraints\nm = Model()\n\n# Total minutes available for washing and polishing:\n# 10 minutes of washing and 12 minutes of polishing for each oval rock\n# 15 minutes of washing and 12 minutes of polishing for each rectangular rock\nm += 10 * OvalRocks + 15 * RectangularRocks <= 2000  # Washing constraint\nm += 12 * OvalRocks + 12 * RectangularRocks <= 2500  # Polishing constraint\n\n# Objective\n# Maximize profit (7 dollars per oval rock, 9 dollars per rectangular rock):\nm.maximize(7 * OvalRocks + 9 * RectangularRocks)\n", "entities": [{"start": 57, "end": 61, "word": "oval", "entity_group": "VAR", "score": 0.9995530336980512}, {"start": 66, "end": 77, "word": "rectangular", "entity_group": "VAR", "score": 0.9996772409184844}, {"start": 80, "end": 90, "word": "Oval rocks", "entity_group": "VAR", "score": 0.999913150446936}, {"start": 99, "end": 101, "word": "10", "entity_group": "PARAM", "score": 0.9997239295154555}, {"start": 125, "end": 127, "word": "12", "entity_group": "PARAM", "score": 0.9997031972891228}, {"start": 151, "end": 168, "word": "Rectangular rocks", "entity_group": "VAR", "score": 0.9998821465340412}, {"start": 177, "end": 179, "word": "15", "entity_group": "PARAM", "score": 0.99967553453385}, {"start": 203, "end": 205, "word": "12", "entity_group": "PARAM", "score": 0.9996685279360782}, {"start": 233, "end": 239, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998577755124523}, {"start": 244, "end": 253, "word": "oval rock", "entity_group": "VAR", "score": 0.999889995904645}, {"start": 259, "end": 260, "word": "7", "entity_group": "PARAM", "score": 0.9994604646384}, {"start": 269, "end": 275, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999304385761113}, {"start": 280, "end": 296, "word": "rectangular rock", "entity_group": "VAR", "score": 0.9997075151576837}, {"start": 302, "end": 303, "word": "9", "entity_group": "PARAM", "score": 0.9997307731328275}, {"start": 319, "end": 323, "word": "2000", "entity_group": "LIMIT", "score": 0.9997800618949791}, {"start": 332, "end": 341, "word": "available", "entity_group": "CONST_DIR", "score": 0.9980643993163467}, {"start": 358, "end": 362, "word": "2500", "entity_group": "LIMIT", "score": 0.9997461769520869}, {"start": 371, "end": 380, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990666997212463}, {"start": 444, "end": 452, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040367392}, {"start": 453, "end": 459, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "-1181465915", "document": "A man has $50000 to invest in his son's company and his friend's company. He has decided that the amount invested in his son's company must be at least three times as much as the amount invested in his friend's company. However, he has also decided to invest at most $40000 in his son's company. If the investments earn 8% in his son's company and the investments earn 10% in his friend's company, how much money should he invest in each to maximize earnings?", "order_mapping": {"son's company": 0, "friend's company": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"son's company": "8%", "friend's company": "10%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "50000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "son's company", "direction": "at least", "param": "three", "y_var": "friend's company", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40000", "var": "son's company", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the son's company\n- y: Dollars invested in the friend's company\n\nObjective:\n- The man aims to maximize his earnings. The investments earn 8% in his son's company and 10% in his friend's company. Therefore, the objective function is: Maximize 0.08x + 0.10y\n\nConstraints:\n- The man has $50000 to invest, so the constraint is: x + y <= 50000.\n- The amount invested in his son's company must be at least three times as much as the amount invested in his friend's company, leading to the constraint: x >= 3y.\n- The man has decided to invest at most $40000 in his son's company, resulting in the constraint: x <= 40000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.08x + 0.10y\nConstraints:\nx + y <= 50000\nx >= 3y\nx <= 40000", "canonical": {"objective": [-0.08, -0.1], "constraints": [[1.0, 1.0, 50000.0], [-1.0, 3.0, 0.0], [1.0, 0.0, 40000.0]]}, "solution": {"x": 37500, "y": 12500}, "pseudo_model": "\nDecision Variables:\n- Amount invested in son's company: SonsCompany\n- Amount invested in friend's company: FriendsCompany\n\nConstraints:\n- Total investment should not exceed $50000:\n  SonsCompany + FriendsCompany <= 50000\n- The amount invested in son's company must be at least three times as much as the amount invested in friend's company:\n  SonsCompany >= 3 * FriendsCompany\n- At most $40000 can be invested in son's company:\n  SonsCompany <= 40000\n\nObjective:\n- Maximize earnings (8% from son's company, 10% from friend's company):\n  0.08 * SonsCompany + 0.10 * FriendsCompany\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSonsCompany = intvar(0, 999999999)  # Amount invested in son's company\nFriendsCompany = intvar(0, 999999999)  # Amount invested in friend's company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $50000:\nm += SonsCompany + FriendsCompany <= 50000\n# The amount invested in son's company must be at least three times as much as the amount invested in friend's company:\nm += SonsCompany >= 3 * FriendsCompany\n# At most $40000 can be invested in son's company:\nm += SonsCompany <= 40000\n\n# Objective\n# Maximize earnings (8% from son's company, 10% from friend's company):\nm.maximize(0.08 * SonsCompany + 0.10 * FriendsCompany)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9960084366250566}, {"start": 12, "end": 17, "word": "50000", "entity_group": "LIMIT", "score": 0.99957350497313}, {"start": 35, "end": 49, "word": "son 's company", "entity_group": "VAR", "score": 0.9992312622420868}, {"start": 58, "end": 75, "word": "friend 's company", "entity_group": "VAR", "score": 0.9985694691241185}, {"start": 125, "end": 139, "word": "son 's company", "entity_group": "VAR", "score": 0.9992779504174204}, {"start": 148, "end": 156, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9948575984193074}, {"start": 157, "end": 162, "word": "three", "entity_group": "PARAM", "score": 0.9924097637503133}, {"start": 207, "end": 224, "word": "friend 's company", "entity_group": "VAR", "score": 0.999421647629355}, {"start": 267, "end": 274, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9955436966112223}, {"start": 277, "end": 282, "word": "40000", "entity_group": "LIMIT", "score": 0.9995448791203987}, {"start": 290, "end": 304, "word": "son 's company", "entity_group": "VAR", "score": 0.9990616880914455}, {"start": 326, "end": 330, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9743724359233155}, {"start": 331, "end": 334, "word": "8 %", "entity_group": "PARAM", "score": 0.9888259839962384}, {"start": 342, "end": 356, "word": "son 's company", "entity_group": "VAR", "score": 0.9993422682901009}, {"start": 377, "end": 381, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9953041750841589}, {"start": 382, "end": 386, "word": "10 %", "entity_group": "PARAM", "score": 0.9956273929262788}, {"start": 394, "end": 411, "word": "friend 's company", "entity_group": "VAR", "score": 0.9989345398288907}, {"start": 457, "end": 465, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996438802763433}, {"start": 466, "end": 474, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.995016136387262}]}
{"doc_id": "65353142", "document": "Jake and Jill own a bakery where they sell donuts and cookies. Each batch of donuts takes 20 minutes of Jake's time and 10 minutes of Jill's time. Each batch of cookies takes 5 minutes of Jake's time and 25 minutes of Jill's time. In a day, Jake has 200 minutes available and Jill has 300 minutes available. If the profit per batch of donuts is $20 and the profit per batch of cookies is $15, how many batches of each should be made to maximize profit?", "order_mapping": {"donuts": 0, "cookies": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cookies": "15", "donuts": "20"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"donuts": "20", "cookies": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"cookies": "25", "donuts": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of batches of donuts\n- y: Number of batches of cookies\n\nObjective:\n- The bakery owners aim to maximize their profit. The profit per batch of donuts is $20 and the profit per batch of cookies is $15. Therefore, the objective function is: Maximize 20x + 15y\n\nConstraints:\n- Jake has 200 minutes available and each batch of donuts takes 20 minutes of his time, while each batch of cookies takes 5 minutes of his time. This leads to the constraint: 20x + 5y <= 200.\n- Jill has 300 minutes available and each batch of donuts takes 10 minutes of her time, while each batch of cookies takes 25 minutes of her time. This results in the constraint: 10x + 25y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 15y\nConstraints:\n20x + 5y <= 200\n10x + 25y <= 300", "canonical": {"objective": [-20.0, -15.0], "constraints": [[20.0, 5.0, 200.0], [10.0, 25.0, 300.0]]}, "solution": {"x": 8, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of batches of donuts: Donuts\n- Number of batches of cookies: Cookies\n\nConstraints:\n- Jake's time constraint (200 minutes available):\n  20 * Donuts + 5 * Cookies <= 200\n- Jill's time constraint (300 minutes available):\n  10 * Donuts + 25 * Cookies <= 300\n\nObjective:\n- Maximize profit (20 dollars per batch of donuts, 15 dollars per batch of cookies):\n  20 * Donuts + 15 * Cookies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDonuts = intvar(0, 999999999)  # Number of batches of donuts\nCookies = intvar(0, 999999999)  # Number of batches of cookies\n\n# Constraints\nm = Model()\n\n# Jake's time constraint (200 minutes available):\nm += 20 * Donuts + 5 * Cookies <= 200\n# Jill's time constraint (300 minutes available):\nm += 10 * Donuts + 25 * Cookies <= 300\n\n# Objective\n# Maximize profit (20 dollars per batch of donuts, 15 dollars per batch of cookies):\nm.maximize(20 * Donuts + 15 * Cookies)\n", "entities": [{"start": 43, "end": 49, "word": "donuts", "entity_group": "VAR", "score": 0.9993211085016508}, {"start": 54, "end": 61, "word": "cookies", "entity_group": "VAR", "score": 0.9994470885271427}, {"start": 78, "end": 84, "word": "donuts", "entity_group": "VAR", "score": 0.9994552818128994}, {"start": 91, "end": 93, "word": "20", "entity_group": "PARAM", "score": 0.9996290088764704}, {"start": 122, "end": 124, "word": "10", "entity_group": "PARAM", "score": 0.9996689510550755}, {"start": 165, "end": 172, "word": "cookies", "entity_group": "VAR", "score": 0.9989577635950871}, {"start": 179, "end": 180, "word": "5", "entity_group": "PARAM", "score": 0.9996278065194238}, {"start": 209, "end": 211, "word": "25", "entity_group": "PARAM", "score": 0.9996689484689093}, {"start": 258, "end": 261, "word": "200", "entity_group": "LIMIT", "score": 0.9997104568018198}, {"start": 270, "end": 279, "word": "available", "entity_group": "CONST_DIR", "score": 0.988703911290397}, {"start": 293, "end": 296, "word": "300", "entity_group": "LIMIT", "score": 0.9997579518524804}, {"start": 305, "end": 314, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993147460510589}, {"start": 324, "end": 330, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995439049247746}, {"start": 344, "end": 350, "word": "donuts", "entity_group": "VAR", "score": 0.9995746266394282}, {"start": 356, "end": 358, "word": "20", "entity_group": "PARAM", "score": 0.9995688800523913}, {"start": 367, "end": 373, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998081478682107}, {"start": 387, "end": 394, "word": "cookies", "entity_group": "VAR", "score": 0.9993688484963146}, {"start": 400, "end": 402, "word": "15", "entity_group": "PARAM", "score": 0.9995900834674488}, {"start": 448, "end": 456, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994845860304205}, {"start": 457, "end": 463, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998127223814167}]}
{"doc_id": "739079103", "document": "A bagel company mixes two bags of everything seasoning, an ordinary bag and a special bag, to make their house mix. The ordinary bag contains 5 grams of sesame seeds, 8 grams of onions powder, and 7 grams of garlic powder. The special bag contains 10 grams of sesame seeds, 6 grams of onion powder, and 8 grams of garlic powder. They want their house mix to contain at least 50 grams of sesame seeds, 60 grams of onion powder, and 65 grams of garlic powder. If the cost per ordinary bag is $10 and the cost per special bag is $12, how many of each should they mix to create their house mix at minimum cost?", "order_mapping": {"ordinary bag": 0, "special bag": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"special bag": "12", "ordinary bag": "10"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"ordinary bag": "5", "special bag": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "60", "terms": {"ordinary bag": "8", "special bag": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "65", "terms": {"ordinary bag": "7", "special bag": "8"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ordinary bags used\n- y: Number of special bags used\n\nObjective:\n- The company wants to minimize the cost of creating their house mix. Given that the cost per ordinary bag is $10 and the cost per special bag is $12, the objective function is: Minimize 10x + 12y\n\nConstraints:\n- The house mix should contain at least 50 grams of sesame seeds, 60 grams of onion powder, and 65 grams of garlic powder. This leads to the following constraints:\n    - 5x + 10y >= 50 (sesame seeds)\n    - 8x + 6y >= 60 (onion powder)\n    - 7x + 8y >= 65 (garlic powder)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 10x + 12y\nConstraints:\n5x + 10y >= 50\n8x + 6y >= 60\n7x + 8y >= 65", "canonical": {"objective": [10.0, 12.0], "constraints": [[-5.0, -10.0, -50.0], [-8.0, -6.0, -60.0], [-7.0, -8.0, -65.0]]}, "solution": {"x": 7, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of ordinary bags used: OrdinaryBag\n- Number of special bags used: SpecialBag\n\nConstraints:\n- Sesame seeds: at least 50 grams needed, provided by 5 grams per ordinary bag and 10 grams per special bag:\n  5 * OrdinaryBag + 10 * SpecialBag >= 50\n- Onion powder: at least 60 grams needed, provided by 8 grams per ordinary bag and 6 grams per special bag:\n  8 * OrdinaryBag + 6 * SpecialBag >= 60\n- Garlic powder: at least 65 grams needed, provided by 7 grams per ordinary bag and 8 grams per special bag:\n  7 * OrdinaryBag + 8 * SpecialBag >= 65\n\nObjective:\n- Minimize cost, with ordinary bags costing 10 dollars each and special bags costing 12 dollars each:\n  10 * OrdinaryBag + 12 * SpecialBag\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOrdinaryBag = intvar(0, 999999999)  # Number of ordinary bags\nSpecialBag = intvar(0, 999999999)  # Number of special bags\n\n# Constraints\nm = Model()\n\n# Sesame seeds constraint: at least 50 grams needed\nm += 5 * OrdinaryBag + 10 * SpecialBag >= 50\n# Onion powder constraint: at least 60 grams needed\nm += 8 * OrdinaryBag + 6 * SpecialBag >= 60\n# Garlic powder constraint: at least 65 grams needed\nm += 7 * OrdinaryBag + 8 * SpecialBag >= 65\n\n# Objective\n# Minimize cost (10 dollars per ordinary bag, 12 dollars per special bag):\nm.minimize(10 * OrdinaryBag + 12 * SpecialBag)\n", "entities": [{"start": 60, "end": 72, "word": "ordinary bag", "entity_group": "VAR", "score": 0.9999675623017046}, {"start": 79, "end": 90, "word": "special bag", "entity_group": "VAR", "score": 0.9999576678832129}, {"start": 123, "end": 135, "word": "ordinary bag", "entity_group": "VAR", "score": 0.999977412887255}, {"start": 145, "end": 146, "word": "5", "entity_group": "PARAM", "score": 0.999699177833564}, {"start": 171, "end": 172, "word": "8", "entity_group": "PARAM", "score": 0.9996822122705632}, {"start": 202, "end": 203, "word": "7", "entity_group": "PARAM", "score": 0.9996448368302719}, {"start": 233, "end": 244, "word": "special bag", "entity_group": "VAR", "score": 0.9999764485908779}, {"start": 254, "end": 256, "word": "10", "entity_group": "PARAM", "score": 0.9997083399412138}, {"start": 281, "end": 282, "word": "6", "entity_group": "PARAM", "score": 0.9996839123796454}, {"start": 311, "end": 312, "word": "8", "entity_group": "PARAM", "score": 0.9996702706936583}, {"start": 375, "end": 383, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988513793655689}, {"start": 384, "end": 386, "word": "50", "entity_group": "LIMIT", "score": 0.9997075333266415}, {"start": 411, "end": 413, "word": "60", "entity_group": "LIMIT", "score": 0.9996522838321353}, {"start": 442, "end": 444, "word": "65", "entity_group": "LIMIT", "score": 0.9996585866034129}, {"start": 477, "end": 481, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9977721794649257}, {"start": 486, "end": 498, "word": "ordinary bag", "entity_group": "VAR", "score": 0.9998578014068829}, {"start": 504, "end": 506, "word": "10", "entity_group": "PARAM", "score": 0.9995624176181662}, {"start": 515, "end": 519, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984176316655371}, {"start": 524, "end": 535, "word": "special bag", "entity_group": "VAR", "score": 0.9998542897289383}, {"start": 541, "end": 543, "word": "12", "entity_group": "PARAM", "score": 0.9996795440528821}, {"start": 608, "end": 615, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9896652073005968}, {"start": 616, "end": 620, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989374197442656}]}
{"doc_id": "1116193816", "document": "Cautious Asset Investment has a total of $150,000 to manage and decides to invest it in money market fund, which yields a 2% return as well as in foreign bonds, which gives and average rate of return of 10.2%. Internal policies require PAI to diversify the asset allocation so that the minimum investment in money market fund is 40% of the total investment. Due to the risk of default of foreign countries, no more than 40% of the total investment should be allocated to foreign bonds. How much should the Cautious Asset Investment allocate in each asset so as to maximize its average return?", "order_mapping": {"money market fund": 0, "foreign bonds": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "average return", "terms": {"money market fund": "2%", "foreign bonds": "10.2"}}, "const_declarations": [{"type": "sum", "direction": "total", "limit": "150,000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "40%", "var": "money market fund", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "no more than", "limit": "40%", "var": "foreign bonds", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the money market fund\n- y: Dollars invested in foreign bonds\n\nObjective:\n- Cautious Asset Investment aims to maximize its average return. The money market fund yields a 2% return, and foreign bonds provide an average rate of return of 10.2%. Therefore, the objective function is: Maximize 0.02x + 0.102y\n\nConstraints:\n- The total amount available for investment is $150,000, so the constraint is: x + y <= 150,000.\n- The minimum investment in the money market fund should be 40% of the total investment, leading to the constraint: x >= 0.4(x + y).\n- No more than 40% of the total investment should be allocated to foreign bonds, resulting in the constraint: y <= 0.4(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.02x + 0.102y\nConstraints:\nx + y <= 150,000\nx >= 0.4(x + y)\ny <= 0.4(x + y)", "canonical": {"objective": [-0.02, -0.102], "constraints": []}, "solution": {"x": 100000000, "y": 100000000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in money market fund: MoneyMarketFund\n- Amount invested in foreign bonds: ForeignBonds\n\nConstraints:\n- Total investment equals $150,000:\n  MoneyMarketFund + ForeignBonds == 150000\n- At least 40% of the total investment in money market fund:\n  MoneyMarketFund >= 0.40 * 150000\n- No more than 40% of the total investment in foreign bonds:\n  ForeignBonds <= 0.40 * 150000\n\nObjective:\n- Maximize average return (2% for money market fund, 10.2% for foreign bonds):\n  0.02 * MoneyMarketFund + 0.102 * ForeignBonds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMoneyMarketFund = intvar(0, 150000)  # Amount invested in money market fund\nForeignBonds = intvar(0, 150000)  # Amount invested in foreign bonds\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $150,000:\nm += MoneyMarketFund + ForeignBonds == 150000\n# Minimum investment in money market fund is 40% of the total investment:\nm += MoneyMarketFund >= 0.40 * 150000\n# No more than 40% of the total investment should be allocated to foreign bonds:\nm += ForeignBonds <= 0.40 * 150000\n\n# Objective\n# Maximize average return (2% for money market fund, 10.2% for foreign bonds):\nm.maximize(0.02 * MoneyMarketFund + 0.102 * ForeignBonds)\n", "entities": [{"start": 32, "end": 37, "word": "total", "entity_group": "CONST_DIR", "score": 0.997172257043559}, {"start": 43, "end": 50, "word": "150,000", "entity_group": "LIMIT", "score": 0.9991466717434115}, {"start": 89, "end": 106, "word": "money market fund", "entity_group": "VAR", "score": 0.9992998848139858}, {"start": 124, "end": 127, "word": "2 %", "entity_group": "PARAM", "score": 0.9325709313535402}, {"start": 128, "end": 134, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9876476037167581}, {"start": 149, "end": 162, "word": "foreign bonds", "entity_group": "VAR", "score": 0.9999754884630482}, {"start": 197, "end": 203, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9913848225177282}, {"start": 207, "end": 213, "word": "10.2 %", "entity_group": "PARAM", "score": 0.4726904554905189}, {"start": 292, "end": 299, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9996354863572708}, {"start": 314, "end": 331, "word": "money market fund", "entity_group": "VAR", "score": 0.999519343243968}, {"start": 335, "end": 339, "word": "40 %", "entity_group": "LIMIT", "score": 0.8610440701572818}, {"start": 416, "end": 428, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9944565270937342}, {"start": 429, "end": 433, "word": "40 %", "entity_group": "LIMIT", "score": 0.96880952540028}, {"start": 481, "end": 494, "word": "foreign bonds", "entity_group": "VAR", "score": 0.9999817569825005}, {"start": 575, "end": 583, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9982091561140413}, {"start": 588, "end": 602, "word": "average return", "entity_group": "OBJ_NAME", "score": 0.9912533418636744}]}
{"doc_id": "-818318467", "document": "A large factory in Brazil makes cocoa beans and coffee beans and has a production capacity of 15 tons per day. Coffee beans and cocoa beans require the same production capacity. Each ton of coffee beans and cocoa beans requires 15 hours of roasting each. The roasting machine is available for at most 1000 hours. The factory must make a minimum of 3 tons of cocoa beans and 5 tons of coffee beans per day. Profit per ton of cocoa beans is $500 and the profit per ton of coffee beans is $750. How many ton of each type of bean should be made to maximize profit?", "order_mapping": {"cocoa beans": 0, "coffee beans": 1, "Coffee beans": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cocoa beans": "500", "coffee beans": "750"}}, "const_declarations": [{"type": "sum", "direction": "production capacity", "limit": "15", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1000", "terms": {"coffee beans": "15", "cocoa beans": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "3", "var": "cocoa beans", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5", "var": "coffee beans", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Tons of cocoa beans produced per day\n- y: Tons of coffee beans produced per day\n\nObjective:\n- The factory aims to maximize its profit. The profit per ton of cocoa beans is $500 and the profit per ton of coffee beans is $750. Therefore, the objective function is: Maximize 500x + 750y\n\nConstraints:\n- The production capacity is 15 tons per day, so the constraint is: x + y <= 15.\n- Each ton of coffee beans and cocoa beans requires 15 hours of roasting each, and the roasting machine is available for at most 1000 hours, leading to the constraint: 15x + 15y <= 1000.\n- The factory must make a minimum of 3 tons of cocoa beans and 5 tons of coffee beans per day, resulting in the constraints: x >= 3 and y >= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 750y\nConstraints:\nx + y <= 15\n15x + 15y <= 1000\nx >= 3\ny >= 5", "canonical": {"objective": [-500.0, -750.0], "constraints": [[1.0, 1.0, 15.0], [15.0, 15.0, 1000.0], [-1.0, 0.0, -3.0], [0.0, -1.0, -5.0]]}, "solution": {"x": 3, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Tons of cocoa beans produced per day: CocoaBeans\n- Tons of coffee beans produced per day: CoffeeBeans\n\nConstraints:\n- Total production capacity should not exceed 15 tons per day:\n  CocoaBeans + CoffeeBeans <= 15\n- Roasting machine availability limits the total roasting time to 1000 hours (15 hours per ton):\n  15 * CocoaBeans + 15 * CoffeeBeans <= 1000\n- Minimum production of 3 tons of cocoa beans per day:\n  CocoaBeans >= 3\n- Minimum production of 5 tons of coffee beans per day:\n  CoffeeBeans >= 5\n\nObjective:\n- Maximize profit ($500 per ton of cocoa beans, $750 per ton of coffee beans):\n  500 * CocoaBeans + 750 * CoffeeBeans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCocoaBeans = intvar(0, 999999999)  # Tons of cocoa beans produced per day\nCoffeeBeans = intvar(0, 999999999)  # Tons of coffee beans produced per day\n\n# Constraints\nm = Model()\n\n# The total production capacity of 15 tons per day:\nm += CocoaBeans + CoffeeBeans <= 15\n# The roasting machine is available for at most 1000 hours (each ton requires 15 hours of roasting):\nm += 15 * CocoaBeans + 15 * CoffeeBeans <= 1000\n# The factory must make a minimum of 3 tons of cocoa beans per day:\nm += CocoaBeans >= 3\n# The factory must make a minimum of 5 tons of coffee beans per day:\nm += CoffeeBeans >= 5\n\n# Objective\n# Maximize profit ($500 per ton of cocoa beans, $750 per ton of coffee beans):\nm.maximize(500 * CocoaBeans + 750 * CoffeeBeans)\n", "entities": [{"start": 32, "end": 43, "word": "cocoa beans", "entity_group": "VAR", "score": 0.9999421379848349}, {"start": 48, "end": 60, "word": "coffee beans", "entity_group": "VAR", "score": 0.9999853700352844}, {"start": 71, "end": 90, "word": "production capacity", "entity_group": "CONST_DIR", "score": 0.890281407628962}, {"start": 94, "end": 96, "word": "15", "entity_group": "LIMIT", "score": 0.9995370966185237}, {"start": 112, "end": 124, "word": "Coffee beans", "entity_group": "VAR", "score": 0.9999806554936945}, {"start": 129, "end": 140, "word": "cocoa beans", "entity_group": "VAR", "score": 0.9999897452154527}, {"start": 192, "end": 204, "word": "coffee beans", "entity_group": "VAR", "score": 0.9999823723935021}, {"start": 209, "end": 220, "word": "cocoa beans", "entity_group": "VAR", "score": 0.9999836656419914}, {"start": 230, "end": 232, "word": "15", "entity_group": "PARAM", "score": 0.9990430451357203}, {"start": 296, "end": 303, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982284807806047}, {"start": 304, "end": 308, "word": "1000", "entity_group": "LIMIT", "score": 0.9997767150532149}, {"start": 341, "end": 348, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.994759220788264}, {"start": 352, "end": 353, "word": "3", "entity_group": "LIMIT", "score": 0.9997519126299323}, {"start": 362, "end": 373, "word": "cocoa beans", "entity_group": "VAR", "score": 0.9999810448992719}, {"start": 378, "end": 379, "word": "5", "entity_group": "LIMIT", "score": 0.9995872297314338}, {"start": 388, "end": 400, "word": "coffee beans", "entity_group": "VAR", "score": 0.9999644801321125}, {"start": 411, "end": 417, "word": "Profit", "entity_group": "OBJ_NAME", "score": 0.9989057471338973}, {"start": 429, "end": 440, "word": "cocoa beans", "entity_group": "VAR", "score": 0.9999198757260912}, {"start": 446, "end": 449, "word": "500", "entity_group": "PARAM", "score": 0.9994423268255636}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998966877473721}, {"start": 476, "end": 488, "word": "coffee beans", "entity_group": "VAR", "score": 0.9998960690901814}, {"start": 494, "end": 497, "word": "750", "entity_group": "PARAM", "score": 0.9996563980505584}, {"start": 552, "end": 560, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994168243696184}, {"start": 561, "end": 567, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280375836495}]}
{"doc_id": "-1421194232", "document": "Linda owns a bakery and sells two types of cookies: chocolate chip and oatmeal. Each chocolate chip cookie requires 10 minutes of mixing and 1 table spoon of vanilla extract. Each oatmeal cookie requires 20 minutes of mixing and 2 table spoons of vanilla extract. There are 360 minutes of mixing time available and 50 table spoons of vanilla extract available. Each chocolate chip cookie can be sold for $4 and each oatmeal cookie can be sold for $3. Formulate an LP to maximize Linda's revenue, then graphically solve the LP. (A fractional number of cookies is okay)", "order_mapping": {"chocolate chip": 0, "oatmeal": 1, "chocolate chip cookie": 0, "oatmeal cookie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"chocolate chip": "4", "oatmeal cookie": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "360", "terms": {"chocolate chip cookie": "10", "oatmeal cookie": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"chocolate chip cookie": "1", "oatmeal cookie": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate chip cookies\n- y: Number of oatmeal cookies\n\nObjective:\n- Linda wants to maximize her revenue. Each chocolate chip cookie can be sold for $4 and each oatmeal cookie can be sold for $3. Therefore, the objective function is: Maximize 4x + 3y\n\nConstraints:\n- There are 360 minutes of mixing time available, so the constraint is: 10x + 20y <= 360.\n- There are 50 tablespoons of vanilla extract available, leading to the constraint: x + 2y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 3y\nConstraints:\n10x + 20y <= 360\nx + 2y <= 50", "canonical": {"objective": [-4.0, -3.0], "constraints": [[10.0, 20.0, 360.0], [1.0, 2.0, 50.0]]}, "solution": {"x": 36, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate chip cookies: ChocolateChip\n- Number of oatmeal cookies: Oatmeal\n\nConstraints:\n- Total mixing time for all cookies should not exceed 360 minutes:\n  10 * ChocolateChip + 20 * Oatmeal <= 360\n- Total vanilla extract used should not exceed 50 tablespoons:\n  1 * ChocolateChip + 2 * Oatmeal <= 50\n\nObjective:\n- Maximize revenue (4 dollars per chocolate chip cookie, 3 dollars per oatmeal cookie):\n  4 * ChocolateChip + 3 * Oatmeal\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateChip = intvar(0, 999999999)  # Number of chocolate chip cookies\nOatmeal = intvar(0, 999999999)  # Number of oatmeal cookies\n\n# Constraints\nm = Model()\n\n# Mixing time constraint (360 minutes available):\nm += 10 * ChocolateChip + 20 * Oatmeal <= 360\n# Vanilla extract constraint (50 tablespoons available):\nm += 1 * ChocolateChip + 2 * Oatmeal <= 50\n\n# Objective\n# Maximize revenue (4 dollars per chocolate chip cookie, 3 dollars per oatmeal cookie):\nm.maximize(4 * ChocolateChip + 3 * Oatmeal)\n", "entities": [{"start": 53, "end": 67, "word": "chocolate chip", "entity_group": "VAR", "score": 0.9999819344158355}, {"start": 72, "end": 79, "word": "oatmeal", "entity_group": "VAR", "score": 0.9997722868183178}, {"start": 87, "end": 108, "word": "chocolate chip cookie", "entity_group": "VAR", "score": 0.9996154296918743}, {"start": 118, "end": 120, "word": "10", "entity_group": "PARAM", "score": 0.9996469749698398}, {"start": 143, "end": 144, "word": "1", "entity_group": "PARAM", "score": 0.999659385909809}, {"start": 183, "end": 197, "word": "oatmeal cookie", "entity_group": "VAR", "score": 0.9999825604008625}, {"start": 207, "end": 209, "word": "20", "entity_group": "PARAM", "score": 0.9996979522792888}, {"start": 232, "end": 233, "word": "2", "entity_group": "PARAM", "score": 0.9996593400280015}, {"start": 278, "end": 281, "word": "360", "entity_group": "LIMIT", "score": 0.9996986605490328}, {"start": 305, "end": 314, "word": "available", "entity_group": "CONST_DIR", "score": 0.999255061605145}, {"start": 319, "end": 321, "word": "50", "entity_group": "LIMIT", "score": 0.9995902399921107}, {"start": 354, "end": 363, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987851803959658}, {"start": 371, "end": 380, "word": "chocolate", "entity_group": "VAR", "score": 0.9986336309945855}, {"start": 400, "end": 404, "word": "sold", "entity_group": "OBJ_NAME", "score": 0.9794290933167002}, {"start": 411, "end": 412, "word": "4", "entity_group": "PARAM", "score": 0.9996959444365908}, {"start": 422, "end": 436, "word": "oatmeal cookie", "entity_group": "VAR", "score": 0.9999814729735372}, {"start": 444, "end": 448, "word": "sold", "entity_group": "OBJ_NAME", "score": 0.9612970670244357}, {"start": 455, "end": 456, "word": "3", "entity_group": "PARAM", "score": 0.9997010659762388}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989828837195934}, {"start": 496, "end": 503, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.997095594895044}]}
{"doc_id": "-1817427063", "document": "Sam owns two rice mills. Mill A costs $500 to operate per day and can produce and deliver 5 bags of basmati rice, 7 bags of brown rice, and 4 bags of jasmine rice. Mill B costs $300 to operate per day and can produce and deliver 7 bags of basmati rice, 10 bags of brown rice, and 1 bag of jasmine rice. Sam recently obtained a contract to provide a restaurant with 25 bags of basmati rice, 20 bags of brown rice, and 20 bags of jasmine rice. Formulate a LP to minimize Sam's total costs.", "order_mapping": {"Mill A": 0, "Mill B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total costs", "terms": {"Mill B": "300", "Mill A": "500"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "25", "terms": {"Mill A": "5", "Mill B": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "20", "terms": {"Mill A": "7", "Mill B": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "20", "terms": {"Mill A": "4", "Mill B": "1"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of days Mill A operates\n- y: Number of days Mill B operates\n\nObjective:\n- Sam wants to minimize his total costs. Mill A costs $500 to operate per day and Mill B costs $300 per day. Therefore, the objective function is: Minimize 500x + 300y\n\nConstraints:\n- Sam needs to provide 25 bags of basmati rice, 20 bags of brown rice, and 20 bags of jasmine rice to the restaurant. The production and delivery capabilities of the mills are as follows:\n    - Mill A: 5 bags of basmati rice, 7 bags of brown rice, and 4 bags of jasmine rice per day\n    - Mill B: 7 bags of basmati rice, 10 bags of brown rice, and 1 bag of jasmine rice per day\n  These lead to the following constraints:\n    - 5x + 7y >= 25 (basmati rice)\n    - 7x + 10y >= 20 (brown rice)\n    - 4x + y >= 20 (jasmine rice)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 300y\nConstraints:\n5x + 7y >= 25\n7x + 10y >= 20\n4x + y >= 20", "canonical": {"objective": [500.0, 300.0], "constraints": [[-5.0, -7.0, -25.0], [-7.0, -10.0, -20.0], [-4.0, -1.0, -20.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of days Mill A operates: MillA\n- Number of days Mill B operates: MillB\n\nConstraints:\n- To meet the contract requirements for basmati rice (25 bags):\n  5 * MillA + 7 * MillB >= 25\n- To meet the contract requirements for brown rice (20 bags):\n  7 * MillA + 10 * MillB >= 20\n- To meet the contract requirements for jasmine rice (20 bags):\n  4 * MillA + 1 * MillB >= 20\n\nObjective:\n- Minimize total costs (Mill A costs $500 per day, Mill B costs $300 per day):\n  500 * MillA + 300 * MillB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMillA = intvar(0, 999999999)  # Number of days Mill A operates\nMillB = intvar(0, 999999999)  # Number of days Mill B operates\n\n# Constraints\nm = Model()\n\n# To meet the contract requirements for basmati rice (25 bags):\nm += 5 * MillA + 7 * MillB >= 25\n# To meet the contract requirements for brown rice (20 bags):\nm += 7 * MillA + 10 * MillB >= 20\n# To meet the contract requirements for jasmine rice (20 bags):\nm += 4 * MillA + 1 * MillB >= 20\n\n# Objective\n# Minimize total costs (Mill A costs $500 per day, Mill B costs $300 per day):\nm.minimize(500 * MillA + 300 * MillB)\n", "entities": [{"start": 26, "end": 32, "word": "Mill A", "entity_group": "VAR", "score": 0.9998138285668282}, {"start": 33, "end": 38, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990579261988138}, {"start": 41, "end": 44, "word": "500", "entity_group": "PARAM", "score": 0.9996940851989636}, {"start": 92, "end": 93, "word": "5", "entity_group": "PARAM", "score": 0.9997529382062472}, {"start": 117, "end": 118, "word": "7", "entity_group": "PARAM", "score": 0.9996996559343605}, {"start": 144, "end": 145, "word": "4", "entity_group": "PARAM", "score": 0.9996991344895497}, {"start": 169, "end": 175, "word": "Mill B", "entity_group": "VAR", "score": 0.9998701886968372}, {"start": 176, "end": 181, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991509857143638}, {"start": 184, "end": 187, "word": "300", "entity_group": "PARAM", "score": 0.9997319778726476}, {"start": 235, "end": 236, "word": "7", "entity_group": "PARAM", "score": 0.9997529341175143}, {"start": 260, "end": 262, "word": "10", "entity_group": "PARAM", "score": 0.9996996900170304}, {"start": 288, "end": 289, "word": "1", "entity_group": "PARAM", "score": 0.9995804460721393}, {"start": 348, "end": 355, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9958461836594272}, {"start": 374, "end": 376, "word": "25", "entity_group": "LIMIT", "score": 0.9997362209133112}, {"start": 400, "end": 402, "word": "20", "entity_group": "LIMIT", "score": 0.9996706517436701}, {"start": 428, "end": 430, "word": "20", "entity_group": "LIMIT", "score": 0.9996656047185581}, {"start": 472, "end": 480, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9988138587108324}, {"start": 488, "end": 499, "word": "total costs", "entity_group": "OBJ_NAME", "score": 0.9921922694952641}]}
{"doc_id": "1133883824", "document": "A repairman fixes fridges and ovens. Each fridge takes 20 minutes of inspection and 30 minutes of fixing time. Each oven takes 30 minutes of inspection and 15 minutes of fixing time. The repairman has 1000 minutes available for inspection and 800 minutes available for fixing this week. If each fridge repaired earns him $100 and each oven repaired earns his $125, how many of each should he fix to maximize his earnings?", "order_mapping": {"fridges": 0, "ovens": 1, "fridge": 0, "oven": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"fridge": "100", "oven": "125"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"fridge": "20", "oven": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"fridge": "30", "oven": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of fridges repaired\n- y: Number of ovens repaired\n\nObjective:\n- The repairman aims to maximize his earnings. Each fridge repaired earns him $100 and each oven repaired earns him $125. Therefore, the objective function is: Maximize 100x + 125y\n\nConstraints:\n- The repairman has 1000 minutes available for inspection, and each fridge takes 20 minutes of inspection and each oven takes 30 minutes of inspection. This leads to the constraint: 20x + 30y <= 1000.\n- The repairman has 800 minutes available for fixing, and each fridge takes 30 minutes of fixing and each oven takes 15 minutes of fixing. This results in the constraint: 30x + 15y <= 800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 125y\nConstraints:\n20x + 30y <= 1000\n30x + 15y <= 800", "canonical": {"objective": [-100.0, -125.0], "constraints": [[20.0, 30.0, 1000.0], [30.0, 15.0, 800.0]]}, "solution": {"x": 14, "y": 24}, "pseudo_model": "\nDecision Variables:\n- Number of fridges fixed: Fridges\n- Number of ovens fixed: Ovens\n\nConstraints:\n- Total inspection time for fridges and ovens should not exceed 1000 minutes:\n  20 * Fridges + 30 * Ovens <= 1000\n- Total fixing time for fridges and ovens should not exceed 800 minutes:\n  30 * Fridges + 15 * Ovens <= 800\n\nObjective:\n- Maximize earnings ($100 per fridge fixed, $125 per oven fixed):\n  100 * Fridges + 125 * Ovens\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFridges = intvar(0, 999999999)  # Number of fridges fixed\nOvens = intvar(0, 999999999)  # Number of ovens fixed\n\n# Constraints\nm = Model()\n\n# Total inspection time for fridges and ovens should not exceed 1000 minutes:\n# (20 minutes of inspection per fridge, 30 minutes of inspection per oven)\nm += 20 * Fridges + 30 * Ovens <= 1000\n\n# Total fixing time for fridges and ovens should not exceed 800 minutes:\n# (30 minutes of fixing time per fridge, 15 minutes of fixing time per oven)\nm += 30 * Fridges + 15 * Ovens <= 800\n\n# Objective\n# Maximize earnings ($100 per fridge fixed, $125 per oven fixed):\nm.maximize(100 * Fridges + 125 * Ovens)\n", "entities": [{"start": 18, "end": 25, "word": "fridges", "entity_group": "VAR", "score": 0.9994199443005887}, {"start": 30, "end": 35, "word": "ovens", "entity_group": "VAR", "score": 0.9998123233438964}, {"start": 43, "end": 49, "word": "fridge", "entity_group": "VAR", "score": 0.9996885730055124}, {"start": 56, "end": 58, "word": "20", "entity_group": "PARAM", "score": 0.9997149558971481}, {"start": 85, "end": 87, "word": "30", "entity_group": "PARAM", "score": 0.9996695551166002}, {"start": 118, "end": 122, "word": "oven", "entity_group": "VAR", "score": 0.9996543891670826}, {"start": 129, "end": 131, "word": "30", "entity_group": "PARAM", "score": 0.9996564765870456}, {"start": 158, "end": 160, "word": "15", "entity_group": "PARAM", "score": 0.9996695388326007}, {"start": 204, "end": 208, "word": "1000", "entity_group": "LIMIT", "score": 0.9997323700056535}, {"start": 217, "end": 226, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985957978300187}, {"start": 246, "end": 249, "word": "800", "entity_group": "LIMIT", "score": 0.9997700263342175}, {"start": 258, "end": 267, "word": "available", "entity_group": "CONST_DIR", "score": 0.9973779498430989}, {"start": 299, "end": 305, "word": "fridge", "entity_group": "VAR", "score": 0.9998593679710818}, {"start": 315, "end": 320, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.997168283483655}, {"start": 327, "end": 330, "word": "100", "entity_group": "PARAM", "score": 0.9997020190560968}, {"start": 340, "end": 344, "word": "oven", "entity_group": "VAR", "score": 0.9998201806184268}, {"start": 354, "end": 359, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9911247566576831}, {"start": 366, "end": 369, "word": "125", "entity_group": "PARAM", "score": 0.9996618161069891}, {"start": 406, "end": 414, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997615751202202}, {"start": 419, "end": 427, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9986155584328544}]}
{"doc_id": "-2018478111", "document": "A vendor sells coffee and hot chocolate during ice hockey games. To stay in business, he must sell at least 40 coffees and 20 hot chocolates, but can not make more than 60 coffees or 35 hot chocolates. The vendor also can't make more than 75 items total. The profit on a coffee is $0.22, and the profit on a hot chocolate is $0.14. How many of each item should he sell to make the maximum profit?", "order_mapping": {"coffee": 0, "hot chocolate": 1, "coffees": 0, "hot chocolates": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"coffee": "0.22", "hot chocolate": "0.14"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "40", "var": "coffees", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "hot chocolates", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "not make more than", "limit": "60", "var": "coffees", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "not make more than", "limit": "35", "var": "hot chocolates", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "n't make more than", "limit": "75", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of coffees sold\n- y: Number of hot chocolates sold\n\nObjective:\n- The vendor aims to maximize his profit. The profit on a coffee is $0.22, and the profit on a hot chocolate is $0.14. Therefore, the objective function is: Maximize 0.22x + 0.14y\n\nConstraints:\n- The vendor must sell at least 40 coffees and 20 hot chocolates, leading to the constraints: x >= 40 and y >= 20.\n- The vendor cannot make more than 60 coffees or 35 hot chocolates, resulting in the constraints: x <= 60 and y <= 35.\n- The total number of items sold cannot exceed 75, leading to the constraint: x + y <= 75.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.22x + 0.14y\nConstraints:\nx >= 40\ny >= 20\nx <= 60\ny <= 35\nx + y <= 75", "canonical": {"objective": [-0.22, -0.14], "constraints": [[-1.0, 0.0, -40.0], [0.0, -1.0, -20.0], [1.0, 0.0, 60.0], [0.0, 1.0, 35.0], [1.0, 1.0, 75.0]]}, "solution": {"x": 55, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of coffees sold: Coffees\n- Number of hot chocolates sold: HotChocolates\n\nConstraints:\n- Must sell at least 40 coffees:\n  Coffees >= 40\n- Must sell at least 20 hot chocolates:\n  HotChocolates >= 20\n- Can not make more than 60 coffees:\n  Coffees <= 60\n- Can not make more than 35 hot chocolates:\n  HotChocolates <= 35\n- Can't make more than 75 items total:\n  Coffees + HotChocolates <= 75\n\nObjective:\n- Maximize profit (0.22 dollars per coffee, 0.14 dollars per hot chocolate):\n  0.22 * Coffees + 0.14 * HotChocolates\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoffees = intvar(0, 999999999)  # Number of coffees sold\nHotChocolates = intvar(0, 999999999)  # Number of hot chocolates sold\n\n# Constraints\nm = Model()\n\n# Must sell at least 40 coffees:\nm += Coffees >= 40\n# Must sell at least 20 hot chocolates:\nm += HotChocolates >= 20\n# Can not make more than 60 coffees:\nm += Coffees <= 60\n# Can not make more than 35 hot chocolates:\nm += HotChocolates <= 35\n# Can't make more than 75 items total:\nm += Coffees + HotChocolates <= 75\n\n# Objective\n# Maximize profit (0.22 dollars per coffee, 0.14 dollars per hot chocolate):\nm.maximize(0.22 * Coffees + 0.14 * HotChocolates)\n", "entities": [{"start": 15, "end": 21, "word": "coffee", "entity_group": "VAR", "score": 0.9992548995068743}, {"start": 26, "end": 39, "word": "hot chocolate", "entity_group": "VAR", "score": 0.999978543756723}, {"start": 101, "end": 109, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989858650253485}, {"start": 110, "end": 112, "word": "40", "entity_group": "LIMIT", "score": 0.9997215042663545}, {"start": 113, "end": 120, "word": "coffees", "entity_group": "VAR", "score": 0.9995817634141236}, {"start": 125, "end": 127, "word": "20", "entity_group": "LIMIT", "score": 0.9996418876007899}, {"start": 128, "end": 142, "word": "hot chocolates", "entity_group": "VAR", "score": 0.9999668356369273}, {"start": 153, "end": 171, "word": "not make more than", "entity_group": "CONST_DIR", "score": 0.9780791557788536}, {"start": 172, "end": 174, "word": "60", "entity_group": "LIMIT", "score": 0.9997251983216908}, {"start": 175, "end": 182, "word": "coffees", "entity_group": "VAR", "score": 0.9994040224130429}, {"start": 186, "end": 188, "word": "35", "entity_group": "LIMIT", "score": 0.9996756671580914}, {"start": 189, "end": 203, "word": "hot chocolates", "entity_group": "VAR", "score": 0.9999707790119196}, {"start": 225, "end": 243, "word": "n't make more than", "entity_group": "CONST_DIR", "score": 0.9797664995984569}, {"start": 244, "end": 246, "word": "75", "entity_group": "LIMIT", "score": 0.9997365006521481}, {"start": 265, "end": 271, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999550774453188}, {"start": 277, "end": 283, "word": "coffee", "entity_group": "VAR", "score": 0.9985711405176799}, {"start": 289, "end": 293, "word": "0.22", "entity_group": "PARAM", "score": 0.9996025070122283}, {"start": 304, "end": 310, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999190059792822}, {"start": 316, "end": 329, "word": "hot chocolate", "entity_group": "VAR", "score": 0.9998660121694374}, {"start": 335, "end": 339, "word": "0.14", "entity_group": "PARAM", "score": 0.9996070841192317}, {"start": 391, "end": 398, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9930517207924637}, {"start": 399, "end": 405, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999188947158972}]}
{"doc_id": "-233222514", "document": "A chocolate company makes chocolate bars and chocolate wafers. Two different teams produce the chocolate bars and chocolate wafers. The chocolate bar team has a maximum daily production of 80 chocolate bars while the chocolate wafer team has a maximum daily production of 100 chocolate wafers. However both bars and wafers require time on a shared packaging machine and this machine can process at most 125 chocolate items of either type per day. If the profit per chocolate bar is $2 and the profit per chocolate wafer is $3, how many of each should the company make in order to maximize profits?", "order_mapping": {"chocolate bars": 0, "chocolate wafers": 1, "chocolate bar": 0, "chocolate wafer": 1, "bars": 0, "wafers": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"chocolate bar": "2", "chocolate wafer": "3"}}, "const_declarations": [{"type": "upperbound", "direction": "maximum", "limit": "80", "var": "chocolate bars", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "maximum", "limit": "100", "var": "chocolate wafers", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "125", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate bars produced\n- y: Number of chocolate wafers produced\n\nObjective:\n- The company aims to maximize its profits. The profit per chocolate bar is $2 and the profit per chocolate wafer is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- The chocolate bar team has a maximum daily production of 80 chocolate bars, leading to the constraint: x <= 80.\n- The chocolate wafer team has a maximum daily production of 100 chocolate wafers, leading to the constraint: y <= 100.\n- The shared packaging machine can process at most 125 chocolate items of either type per day, resulting in the constraint: x + y <= 125.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\nx <= 80\ny <= 100\nx + y <= 125", "canonical": {"objective": [-2.0, -3.0], "constraints": [[1.0, 0.0, 80.0], [0.0, 1.0, 100.0], [1.0, 1.0, 125.0]]}, "solution": {"x": 25, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate bars produced per day: ChocolateBars\n- Number of chocolate wafers produced per day: ChocolateWafers\n\nConstraints:\n- Maximum daily production of chocolate bars is 80:\n  ChocolateBars <= 80\n- Maximum daily production of chocolate wafers is 100:\n  ChocolateWafers <= 100\n- Shared packaging machine can process at most 125 items per day:\n  ChocolateBars + ChocolateWafers <= 125\n\nObjective:\n- Maximize profits (2 dollars per chocolate bar, 3 dollars per chocolate wafer):\n  2 * ChocolateBars + 3 * ChocolateWafers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateBars = intvar(0, 999999999)  # Number of chocolate bars produced per day\nChocolateWafers = intvar(0, 999999999)  # Number of chocolate wafers produced per day\n\n# Constraints\nm = Model()\n\n# Maximum daily production constraints:\nm += ChocolateBars <= 80  # for chocolate bars\nm += ChocolateWafers <= 100  # for chocolate wafers\n\n# Shared packaging machine constraint (can process at most 125 items per day):\nm += ChocolateBars + ChocolateWafers <= 125\n\n# Objective\n# Maximize profits (2 dollars per chocolate bar, 3 dollars per chocolate wafer):\nm.maximize(2 * ChocolateBars + 3 * ChocolateWafers)\n", "entities": [{"start": 26, "end": 40, "word": "chocolate bars", "entity_group": "VAR", "score": 0.9999614216895287}, {"start": 45, "end": 61, "word": "chocolate wafers", "entity_group": "VAR", "score": 0.9999856557414891}, {"start": 96, "end": 110, "word": "chocolate bars", "entity_group": "VAR", "score": 0.9999880383992424}, {"start": 115, "end": 131, "word": "chocolate wafers", "entity_group": "VAR", "score": 0.9999794875420417}, {"start": 138, "end": 151, "word": "chocolate bar", "entity_group": "VAR", "score": 0.99999058393578}, {"start": 163, "end": 170, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9993689415622744}, {"start": 191, "end": 193, "word": "80", "entity_group": "LIMIT", "score": 0.9992022791927626}, {"start": 194, "end": 208, "word": "chocolate bars", "entity_group": "VAR", "score": 0.9999743935810429}, {"start": 219, "end": 234, "word": "chocolate wafer", "entity_group": "VAR", "score": 0.9999930312571775}, {"start": 246, "end": 253, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9993964892289615}, {"start": 274, "end": 277, "word": "100", "entity_group": "LIMIT", "score": 0.9986255178229938}, {"start": 278, "end": 294, "word": "chocolate wafers", "entity_group": "VAR", "score": 0.9999682124601569}, {"start": 310, "end": 314, "word": "bars", "entity_group": "VAR", "score": 0.9995495320583998}, {"start": 319, "end": 325, "word": "wafers", "entity_group": "VAR", "score": 0.9996286165378963}, {"start": 398, "end": 405, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985530647813303}, {"start": 406, "end": 409, "word": "125", "entity_group": "LIMIT", "score": 0.99940162586799}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999315666252651}, {"start": 469, "end": 482, "word": "chocolate bar", "entity_group": "VAR", "score": 0.9998866727009287}, {"start": 488, "end": 489, "word": "2", "entity_group": "PARAM", "score": 0.999612602970554}, {"start": 498, "end": 504, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999098098997559}, {"start": 509, "end": 524, "word": "chocolate wafer", "entity_group": "VAR", "score": 0.9999447164715427}, {"start": 530, "end": 531, "word": "3", "entity_group": "PARAM", "score": 0.9996757771289339}, {"start": 587, "end": 595, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9977510919906841}, {"start": 596, "end": 603, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9988790670593285}]}
{"doc_id": "1821426741", "document": "A circuit board company makes small and large circuit boards for customers. Both circuit boards requires time on a drilling machine and a printing machine. Each small circuit board takes 10 minutes on the drilling machine, 15 minutes on the printing machine and yields a profit of $5. Each large circuit board takes 15 minutes on the drilling machine, 18 minutes on the printing machine, and yields a profit of $7. If both machines are available for at most 600 minutes a day, how many of each circuit board should be made to maximize profit?", "order_mapping": {"small": 0, "large circuit boards": 1, "small circuit board": 0, "large circuit board": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large circuit board": "7", "small circuit board": "5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "600", "terms": {"small circuit board": "10", "large circuit board": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "600", "terms": {"small circuit board": "15", "large circuit board": "18"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small circuit boards\n- y: Number of large circuit boards\n\nObjective:\n- The company aims to maximize its profit. Each small circuit board yields a profit of $5 and each large circuit board yields a profit of $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The total time on the drilling machine and printing machine should not exceed 600 minutes. Each small circuit board takes 10 minutes on the drilling machine and 15 minutes on the printing machine, while each large circuit board takes 15 minutes on the drilling machine and 18 minutes on the printing machine. These constraints can be formulated as: 10x + 15y <= 600 and 15x + 18y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n10x + 15y <= 600\n15x + 18y <= 600", "canonical": {"objective": [-5.0, -7.0], "constraints": [[10.0, 15.0, 600.0], [15.0, 18.0, 600.0]]}, "solution": {"x": 0, "y": 33}, "pseudo_model": "\nDecision Variables:\n- Number of small circuit boards made: SmallCircuitBoards\n- Number of large circuit boards made: LargeCircuitBoards\n\nConstraints:\n- Drilling machine time for both small and large circuit boards should not exceed 600 minutes:\n  10 * SmallCircuitBoards + 15 * LargeCircuitBoards <= 600\n- Printing machine time for both small and large circuit boards should not exceed 600 minutes:\n  15 * SmallCircuitBoards + 18 * LargeCircuitBoards <= 600\n\nObjective:\n- Maximize profit (5 dollars per small circuit board, 7 dollars per large circuit board):\n  5 * SmallCircuitBoards + 7 * LargeCircuitBoards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallCircuitBoards = intvar(0, 999999999)  # Number of small circuit boards made\nLargeCircuitBoards = intvar(0, 999999999)  # Number of large circuit boards made\n\n# Constraints\nm = Model()\n\n# Drilling machine time constraint (600 minutes max for both small and large circuit boards):\nm += 10 * SmallCircuitBoards + 15 * LargeCircuitBoards <= 600\n# Printing machine time constraint (600 minutes max for both small and large circuit boards):\nm += 15 * SmallCircuitBoards + 18 * LargeCircuitBoards <= 600\n\n# Objective\n# Maximize profit (5 dollars per small circuit board, 7 dollars per large circuit board):\nm.maximize(5 * SmallCircuitBoards + 7 * LargeCircuitBoards)\n", "entities": [{"start": 30, "end": 35, "word": "small", "entity_group": "VAR", "score": 0.9994795132452597}, {"start": 40, "end": 60, "word": "large circuit boards", "entity_group": "VAR", "score": 0.9997496263887037}, {"start": 163, "end": 182, "word": "small circuit board", "entity_group": "VAR", "score": 0.999411076309045}, {"start": 189, "end": 191, "word": "10", "entity_group": "PARAM", "score": 0.999628530425373}, {"start": 226, "end": 228, "word": "15", "entity_group": "PARAM", "score": 0.9996536811286211}, {"start": 274, "end": 280, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996583796815847}, {"start": 286, "end": 287, "word": "5", "entity_group": "PARAM", "score": 0.9997291903417184}, {"start": 295, "end": 314, "word": "large circuit board", "entity_group": "VAR", "score": 0.9996277058590904}, {"start": 321, "end": 323, "word": "15", "entity_group": "PARAM", "score": 0.9996289781431433}, {"start": 358, "end": 360, "word": "18", "entity_group": "PARAM", "score": 0.9996222729895381}, {"start": 408, "end": 414, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9979904299590091}, {"start": 420, "end": 421, "word": "7", "entity_group": "PARAM", "score": 0.9996285513197956}, {"start": 459, "end": 466, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998893220169081}, {"start": 467, "end": 470, "word": "600", "entity_group": "LIMIT", "score": 0.9997418558231059}, {"start": 536, "end": 544, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9979287320658348}, {"start": 545, "end": 551, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997780331147706}]}
{"doc_id": "1692392701", "document": "A clothing company would like to ship pants from China, grey and black pants. Both require processing at two factories named Wimo and Webo. The cost per pair of grey pants is $25 and the cost per pair of black pants is $15. Each pair of grey pants requires 40 minutes of processing time at Wimo and 30 minutes of processing time at Webo. Each pair of black pants requires 20 minutes of processing time at Wimo and 15 minutes of processing time at Webo. Wimo is available for 2100 minutes and Webo is available for 3000 minutes. How many of each pant should be made in order to maximize profit?", "order_mapping": {"grey": 0, "black pants": 1, "grey pants": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"grey pants": "25", "black pants": "15"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2100", "terms": {"grey pants": "40", "black pants": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"grey pants": "30", "black pants": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of grey pants\n- y: Number of black pants\n\nObjective:\n- The clothing company aims to maximize its profit. The cost per pair of grey pants is $25 and the cost per pair of black pants is $15. Therefore, the objective function is: Maximize 25x + 15y\n\nConstraints:\n- The processing time available at Wimo is 2100 minutes, and each pair of grey pants requires 40 minutes, and each pair of black pants requires 20 minutes. This leads to the constraint: 40x + 20y <= 2100.\n- The processing time available at Webo is 3000 minutes, and each pair of grey pants requires 30 minutes, and each pair of black pants requires 15 minutes. This leads to the constraint: 30x + 15y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25x + 15y\nConstraints:\n40x + 20y <= 2100\n30x + 15y <= 3000", "canonical": {"objective": [-25.0, -15.0], "constraints": [[40.0, 20.0, 2100.0], [30.0, 15.0, 3000.0]]}, "solution": {"x": 0, "y": 105}, "pseudo_model": "\nDecision Variables:\n- Number of grey pants made: GreyPants\n- Number of black pants made: BlackPants\n\nConstraints:\n- Processing time at Wimo for both grey and black pants should not exceed 2100 minutes:\n  40 * GreyPants + 20 * BlackPants <= 2100\n- Processing time at Webo for both grey and black pants should not exceed 3000 minutes:\n  30 * GreyPants + 15 * BlackPants <= 3000\n\nObjective:\n- Maximize profit (25 dollars per grey pant, 15 dollars per black pant):\n  25 * GreyPants + 15 * BlackPants\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGreyPants = intvar(0, 999999999)  # Number of grey pants made\nBlackPants = intvar(0, 999999999)  # Number of black pants made\n\n# Constraints\nm = Model()\n\n# Processing time at Wimo for both grey and black pants should not exceed 2100 minutes:\nm += 40 * GreyPants + 20 * BlackPants <= 2100\n# Processing time at Webo for both grey and black pants should not exceed 3000 minutes:\nm += 30 * GreyPants + 15 * BlackPants <= 3000\n\n# Objective\n# Maximize profit (25 dollars per grey pant, 15 dollars per black pant):\nm.maximize(25 * GreyPants + 15 * BlackPants)\n", "entities": [{"start": 57, "end": 61, "word": "grey", "entity_group": "VAR", "score": 0.999494130496808}, {"start": 66, "end": 77, "word": "black pants", "entity_group": "VAR", "score": 0.9999705823259076}, {"start": 147, "end": 151, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9914084172895652}, {"start": 164, "end": 174, "word": "grey pants", "entity_group": "VAR", "score": 0.9999245732286869}, {"start": 180, "end": 182, "word": "25", "entity_group": "PARAM", "score": 0.9996210087503069}, {"start": 208, "end": 219, "word": "black pants", "entity_group": "VAR", "score": 0.9999306798070949}, {"start": 225, "end": 227, "word": "15", "entity_group": "PARAM", "score": 0.9997331055148054}, {"start": 243, "end": 253, "word": "grey pants", "entity_group": "VAR", "score": 0.9999477565423704}, {"start": 263, "end": 265, "word": "40", "entity_group": "PARAM", "score": 0.9996608647590072}, {"start": 305, "end": 307, "word": "30", "entity_group": "PARAM", "score": 0.9997217434473694}, {"start": 358, "end": 369, "word": "black pants", "entity_group": "VAR", "score": 0.9999192630510836}, {"start": 379, "end": 381, "word": "20", "entity_group": "PARAM", "score": 0.9996608649754534}, {"start": 421, "end": 423, "word": "15", "entity_group": "PARAM", "score": 0.9997217380569151}, {"start": 469, "end": 478, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986632126145224}, {"start": 483, "end": 487, "word": "2100", "entity_group": "LIMIT", "score": 0.9997387266282733}, {"start": 508, "end": 517, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987770922979401}, {"start": 522, "end": 526, "word": "3000", "entity_group": "LIMIT", "score": 0.999553339680258}, {"start": 586, "end": 594, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852783764065}, {"start": 595, "end": 601, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818178479}]}
{"doc_id": "-1083302057", "document": "A clothing company wants to add t-shirts and hoodies, both with printed designs, to its collection. Both t-shirts and hoodies require designing and printing. T-shirts require 1 hour of designing time and 2 hours of printing time. Hoodies require 2 hours of designing time and 3 hours of printing time. The designers are available 40 hours a week and the printing machine is available 60 hours per week. Each t-shirt nets the company $10 in profit, and each hoodie nets $15 in profit. What ratio of t-shirts and hoodies will produce the most profit within the constraints?", "order_mapping": {"t-shirts": 0, "hoodies": 1, "T-shirts": 0, "Hoodies": 1, "t-shirt": 0, "hoodie": 1}, "obj_declaration": {"type": "objective", "direction": "most", "name": "profit", "terms": {"t-shirt": "10", "hoodie": "15"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "40", "terms": {"T-shirts": "1", "Hoodies": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60", "terms": {"T-shirts": "2", "Hoodies": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of t-shirts\n- y: Number of hoodies\n\nObjective:\n- The clothing company aims to maximize its profit. Each t-shirt nets the company $10 in profit, and each hoodie nets $15 in profit. Therefore, the objective function is: Maximize 10x + 15y\n\nConstraints:\n- Designing time constraint: 1x + 2y <= 40 (designing time available)\n- Printing time constraint: 2x + 3y <= 60 (printing time available)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 15y\nConstraints:\nx + 2y <= 40\n2x + 3y <= 60", "canonical": {"objective": [-10.0, -15.0], "constraints": [[1.0, 2.0, 40.0], [2.0, 3.0, 60.0]]}, "solution": {"x": 0, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of t-shirts produced: Tshirts\n- Number of hoodies produced: Hoodies\n\nConstraints:\n- Designers' time constraint (40 hours a week):\n  1 hour per Tshirt + 2 hours per Hoodie <= 40\n- Printing time constraint (60 hours a week):\n  2 hours per Tshirt + 3 hours per Hoodie <= 60\n\nObjective:\n- Maximize profit within the constraints:\n  10 dollars per Tshirt + 15 dollars per Hoodie\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTshirts = intvar(0, 999999999)  # Number of t-shirts produced\nHoodies = intvar(0, 999999999)  # Number of hoodies produced\n\n# Constraints\nm = Model()\n\n# Designers are available for 40 hours a week:\nm += 1 * Tshirts + 2 * Hoodies <= 40\n# Printing machine is available for 60 hours a week:\nm += 2 * Tshirts + 3 * Hoodies <= 60\n\n# Objective\n# Maximize profit (10 dollars per t-shirt, 15 dollars per hoodie):\nm.maximize(10 * Tshirts + 15 * Hoodies)\n", "entities": [{"start": 32, "end": 42, "word": "t - shirts", "entity_group": "VAR", "score": 0.9958640160873609}, {"start": 47, "end": 54, "word": "hoodies", "entity_group": "VAR", "score": 0.9995172566769868}, {"start": 110, "end": 120, "word": "t - shirts", "entity_group": "VAR", "score": 0.999513700972559}, {"start": 125, "end": 132, "word": "hoodies", "entity_group": "VAR", "score": 0.999561611302782}, {"start": 166, "end": 176, "word": "T - shirts", "entity_group": "VAR", "score": 0.9995398647860384}, {"start": 185, "end": 186, "word": "1", "entity_group": "PARAM", "score": 0.9995650225407308}, {"start": 214, "end": 215, "word": "2", "entity_group": "PARAM", "score": 0.999632926283906}, {"start": 241, "end": 248, "word": "Hoodies", "entity_group": "VAR", "score": 0.9992355297822546}, {"start": 257, "end": 258, "word": "2", "entity_group": "PARAM", "score": 0.9996794499637677}, {"start": 287, "end": 288, "word": "3", "entity_group": "PARAM", "score": 0.9995991844012734}, {"start": 332, "end": 341, "word": "available", "entity_group": "CONST_DIR", "score": 0.9959991528129549}, {"start": 342, "end": 344, "word": "40", "entity_group": "LIMIT", "score": 0.9993364107549411}, {"start": 386, "end": 395, "word": "available", "entity_group": "CONST_DIR", "score": 0.9959816083198268}, {"start": 396, "end": 398, "word": "60", "entity_group": "LIMIT", "score": 0.999014519962114}, {"start": 421, "end": 430, "word": "t - shirt", "entity_group": "VAR", "score": 0.9992475466887613}, {"start": 450, "end": 452, "word": "10", "entity_group": "PARAM", "score": 0.9994436874745706}, {"start": 456, "end": 462, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999739101740646}, {"start": 474, "end": 480, "word": "hoodie", "entity_group": "VAR", "score": 0.9997786497299318}, {"start": 488, "end": 490, "word": "15", "entity_group": "PARAM", "score": 0.9993721104593064}, {"start": 494, "end": 500, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999352643733703}, {"start": 517, "end": 527, "word": "t - shirts", "entity_group": "VAR", "score": 0.9986238203453415}, {"start": 532, "end": 539, "word": "hoodies", "entity_group": "VAR", "score": 0.9990552702472393}, {"start": 557, "end": 561, "word": "most", "entity_group": "OBJ_DIR", "score": 0.9987151749999212}, {"start": 562, "end": 568, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998564209585561}]}
{"doc_id": "1010549365", "document": "David has two types of liquid supplementation available: regular and premium. After consulting with a doctor, he finds that he needs a minimum of 30 grams of iron and 50 grams of calcium. Regular supplementation consists of 20% iron and 30% calcium while premium supplementation consists of 25% iron and 40% calcium. Regular supplementation costs $0.04 per gram while premium supplementation costs $0.08 per gram. How much of each supplementation should be used to meet his requirements and minimize cost?", "order_mapping": {"regular": 0, "premium": 1, "Regular supplementation": 0, "premium supplementation": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"premium supplementation": "0.08", "Regular supplementation": "0.04"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "30", "terms": {"Regular supplementation": "20%", "premium supplementation": "25%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"Regular supplementation": "30%", "premium supplementation": "40%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Grams of regular supplementation\n- y: Grams of premium supplementation\n\nObjective:\n- David wants to minimize the cost of his liquid supplementation. The cost of regular supplementation is $0.04 per gram and the cost of premium supplementation is $0.08 per gram. Therefore, the objective function is: Minimize 0.04x + 0.08y\n\nConstraints:\n- David needs a minimum of 30 grams of iron, which can be formulated as: 0.20x + 0.25y >= 30\n- David also needs a minimum of 50 grams of calcium, which can be formulated as: 0.30x + 0.40y >= 50\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.04x + 0.08y\nConstraints:\n0.20x + 0.25y >= 30\n0.30x + 0.40y >= 50", "canonical": {"objective": [0.04, 0.08], "constraints": [[-0.2, -0.25, -30.0], [-0.3, -0.4, -50.0]]}, "solution": {"x": 167, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount of regular supplementation used in grams: RegularSupplementation\n- Amount of premium supplementation used in grams: PremiumSupplementation\n\nConstraints:\n- Iron requirement (minimum of 30 grams):\n  0.20 * RegularSupplementation + 0.25 * PremiumSupplementation >= 30\n- Calcium requirement (minimum of 50 grams):\n  0.30 * RegularSupplementation + 0.40 * PremiumSupplementation >= 50\n\nObjective:\n- Minimize cost (Regular supplementation costs $0.04 per gram, premium supplementation costs $0.08 per gram):\n  0.04 * RegularSupplementation + 0.08 * PremiumSupplementation\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularSupplementation = intvar(0, 999999999)  # Amount of regular supplementation in grams\nPremiumSupplementation = intvar(0, 999999999)  # Amount of premium supplementation in grams\n\n# Constraints\nm = Model()\n\n# Iron requirement (minimum of 30 grams):\n# Regular supplementation consists of 20% iron and premium supplementation consists of 25% iron\nm += 0.20 * RegularSupplementation + 0.25 * PremiumSupplementation >= 30\n\n# Calcium requirement (minimum of 50 grams):\n# Regular supplementation consists of 30% calcium and premium supplementation consists of 40% calcium\nm += 0.30 * RegularSupplementation + 0.40 * PremiumSupplementation >= 50\n\n# Objective\n# Minimize cost (Regular supplementation costs $0.04 per gram, premium supplementation costs $0.08 per gram):\nm.minimize(0.04 * RegularSupplementation + 0.08 * PremiumSupplementation)\n", "entities": [{"start": 58, "end": 65, "word": "regular", "entity_group": "VAR", "score": 0.9989173358730138}, {"start": 70, "end": 77, "word": "premium", "entity_group": "VAR", "score": 0.9957512214278941}, {"start": 138, "end": 145, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9982405776238709}, {"start": 149, "end": 151, "word": "30", "entity_group": "LIMIT", "score": 0.9997779055533675}, {"start": 170, "end": 172, "word": "50", "entity_group": "LIMIT", "score": 0.9997217033866183}, {"start": 192, "end": 215, "word": "Regular supplementation", "entity_group": "VAR", "score": 0.9999452716472144}, {"start": 228, "end": 232, "word": "20 %", "entity_group": "PARAM", "score": 0.9829534684912254}, {"start": 242, "end": 246, "word": "30 %", "entity_group": "PARAM", "score": 0.9930251061854208}, {"start": 261, "end": 284, "word": "premium supplementation", "entity_group": "VAR", "score": 0.9999784367719748}, {"start": 297, "end": 301, "word": "25 %", "entity_group": "PARAM", "score": 0.986374934002033}, {"start": 311, "end": 315, "word": "40 %", "entity_group": "PARAM", "score": 0.990525665656369}, {"start": 326, "end": 349, "word": "Regular supplementation", "entity_group": "VAR", "score": 0.9999424092490651}, {"start": 350, "end": 355, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988036806564468}, {"start": 358, "end": 362, "word": "0.04", "entity_group": "PARAM", "score": 0.9997189655449248}, {"start": 378, "end": 401, "word": "premium supplementation", "entity_group": "VAR", "score": 0.999968833341484}, {"start": 402, "end": 407, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9979509245886208}, {"start": 410, "end": 414, "word": "0.08", "entity_group": "PARAM", "score": 0.9995170900117575}, {"start": 503, "end": 511, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9862285514050944}, {"start": 512, "end": 516, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.994463246023771}]}
{"doc_id": "111816674", "document": "A company makes regular and touchscreen laptops. The company has available 3000 minutes for manual labor and 2000 minutes for calibration. Each regular laptop takes 20 minutes of manual labor and 10 minutes of calibration. Each touchscreen laptop takes 25 minutes of manual labor and 20 minutes of calibration. If the profit per regular laptop is $200 and the profit per touchscreen laptop is $300, how many of each should they make to maximize profit?", "order_mapping": {"regular": 0, "touchscreen laptops": 1, "regular laptop": 0, "touchscreen laptop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular laptop": "200", "touchscreen laptop": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"regular laptop": "20", "touchscreen laptop": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"regular laptop": "10", "touchscreen laptop": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular laptops\n- y: Number of touchscreen laptops\n\nObjective:\n- The company aims to maximize its profit. The profit per regular laptop is $200 and the profit per touchscreen laptop is $300. Therefore, the objective function is: Maximize 200x + 300y\n\nConstraints:\n- The company has 3000 minutes available for manual labor, and each regular laptop takes 20 minutes while each touchscreen laptop takes 25 minutes. This leads to the constraint: 20x + 25y <= 3000.\n- The company has 2000 minutes available for calibration, and each regular laptop takes 10 minutes while each touchscreen laptop takes 20 minutes. This results in the constraint: 10x + 20y <= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 300y\nConstraints:\n20x + 25y <= 3000\n10x + 20y <= 2000", "canonical": {"objective": [-200.0, -300.0], "constraints": [[20.0, 25.0, 3000.0], [10.0, 20.0, 2000.0]]}, "solution": {"x": 66, "y": 67}, "pseudo_model": "\nDecision Variables:\n- Number of regular laptops made: RegularLaptops\n- Number of touchscreen laptops made: TouchscreenLaptops\n\nConstraints:\n- Manual labor constraint (3000 minutes available for both types of laptops):\n  20 * RegularLaptops + 25 * TouchscreenLaptops <= 3000\n- Calibration constraint (2000 minutes available for both types of laptops):\n  10 * RegularLaptops + 20 * TouchscreenLaptops <= 2000\n\nObjective:\n- Maximize profit ($200 profit per regular laptop, $300 profit per touchscreen laptop):\n  200 * RegularLaptops + 300 * TouchscreenLaptops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularLaptops = intvar(0, 999999999)  # Number of regular laptops made\nTouchscreenLaptops = intvar(0, 999999999)  # Number of touchscreen laptops made\n\n# Constraints\nm = Model()\n\n# Manual labor constraint (3000 minutes available):\nm += 20 * RegularLaptops + 25 * TouchscreenLaptops <= 3000\n# Calibration constraint (2000 minutes available):\nm += 10 * RegularLaptops + 20 * TouchscreenLaptops <= 2000\n\n# Objective\n# Maximize profit ($200 per regular laptop, $300 per touchscreen laptop):\nm.maximize(200 * RegularLaptops + 300 * TouchscreenLaptops)\n", "entities": [{"start": 16, "end": 23, "word": "regular", "entity_group": "VAR", "score": 0.9990652799917369}, {"start": 28, "end": 47, "word": "touchscreen laptops", "entity_group": "VAR", "score": 0.9999774991812883}, {"start": 66, "end": 75, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996637876924507}, {"start": 76, "end": 80, "word": "3000", "entity_group": "LIMIT", "score": 0.9994407861944682}, {"start": 110, "end": 114, "word": "2000", "entity_group": "LIMIT", "score": 0.99958166441014}, {"start": 146, "end": 160, "word": "regular laptop", "entity_group": "VAR", "score": 0.9999790263369388}, {"start": 167, "end": 169, "word": "20", "entity_group": "PARAM", "score": 0.9997302349827545}, {"start": 198, "end": 200, "word": "10", "entity_group": "PARAM", "score": 0.999648715136503}, {"start": 231, "end": 249, "word": "touchscreen laptop", "entity_group": "VAR", "score": 0.999981746224213}, {"start": 256, "end": 258, "word": "25", "entity_group": "PARAM", "score": 0.9997274434815975}, {"start": 287, "end": 289, "word": "20", "entity_group": "PARAM", "score": 0.9994853071760401}, {"start": 322, "end": 328, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999356160178993}, {"start": 333, "end": 347, "word": "regular laptop", "entity_group": "VAR", "score": 0.9999552068224389}, {"start": 353, "end": 356, "word": "200", "entity_group": "PARAM", "score": 0.9994565733435181}, {"start": 365, "end": 371, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999303367237391}, {"start": 376, "end": 394, "word": "touchscreen laptop", "entity_group": "VAR", "score": 0.999947524756966}, {"start": 400, "end": 403, "word": "300", "entity_group": "PARAM", "score": 0.9996954409957765}, {"start": 443, "end": 451, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 452, "end": 458, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "-1120393808", "document": "A fast-food restaurant sells wraps and bowls. Each wrap contains 3 units of rice and 2 units of fish. Each bowl contains 5 units of rice and 3 units of fish. The restaurant has 800 units of rice available and 700 units of fish available. If the profit per wrap is $5 and the profit per bowl is $7, how many of each should the restaurant sell to maximize profit?", "order_mapping": {"wraps": 0, "bowls": 1, "wrap": 0, "bowl": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"wrap": "5", "bowl": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "800", "terms": {"wrap": "3", "bowl": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"wrap": "2", "bowl": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of wraps to be sold\n- y: Number of bowls to be sold\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per wrap is $5 and the profit per bowl is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The restaurant has 800 units of rice available, and each wrap contains 3 units of rice and each bowl contains 5 units of rice. This leads to the constraint: 3x + 5y <= 800.\n- The restaurant has 700 units of fish available, and each wrap contains 2 units of fish and each bowl contains 3 units of fish. This results in the constraint: 2x + 3y <= 700.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n3x + 5y <= 800\n2x + 3y <= 700", "canonical": {"objective": [-5.0, -7.0], "constraints": [[3.0, 5.0, 800.0], [2.0, 3.0, 700.0]]}, "solution": {"x": 265, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of wraps sold: Wraps\n- Number of bowls sold: Bowls\n\nConstraints:\n- Rice constraint (800 units available, 3 units per wrap, 5 units per bowl):\n  3 * Wraps + 5 * Bowls <= 800\n- Fish constraint (700 units available, 2 units per wrap, 3 units per bowl):\n  2 * Wraps + 3 * Bowls <= 700\n\nObjective:\n- Maximize profit (5 dollars per wrap, 7 dollars per bowl):\n  5 * Wraps + 7 * Bowls\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWraps = intvar(0, 999999999)  # Number of wraps sold\nBowls = intvar(0, 999999999)  # Number of bowls sold\n\n# Constraints\nm = Model()\n\n# The restaurant has 800 units of rice available:\nm += 3 * Wraps + 5 * Bowls <= 800\n# The restaurant has 700 units of fish available:\nm += 2 * Wraps + 3 * Bowls <= 700\n\n# Objective\n# Maximize profit (5 dollars per wrap, 7 dollars per bowl):\nm.maximize(5 * Wraps + 7 * Bowls)\n", "entities": [{"start": 31, "end": 36, "word": "wraps", "entity_group": "VAR", "score": 0.9997996321097039}, {"start": 41, "end": 46, "word": "bowls", "entity_group": "VAR", "score": 0.9994709718669618}, {"start": 54, "end": 58, "word": "wrap", "entity_group": "VAR", "score": 0.9996201889297915}, {"start": 68, "end": 69, "word": "3", "entity_group": "PARAM", "score": 0.9996968064170015}, {"start": 88, "end": 89, "word": "2", "entity_group": "PARAM", "score": 0.9997147225173186}, {"start": 111, "end": 115, "word": "bowl", "entity_group": "VAR", "score": 0.9995587128225424}, {"start": 125, "end": 126, "word": "5", "entity_group": "PARAM", "score": 0.9996707823122971}, {"start": 145, "end": 146, "word": "3", "entity_group": "PARAM", "score": 0.9996566393187845}, {"start": 182, "end": 185, "word": "800", "entity_group": "LIMIT", "score": 0.9997154878630785}, {"start": 200, "end": 209, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992328574316942}, {"start": 214, "end": 217, "word": "700", "entity_group": "LIMIT", "score": 0.9995931526470389}, {"start": 232, "end": 241, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981829749564953}, {"start": 251, "end": 257, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997020237900259}, {"start": 262, "end": 266, "word": "wrap", "entity_group": "VAR", "score": 0.9995072883625474}, {"start": 272, "end": 273, "word": "5", "entity_group": "PARAM", "score": 0.9993478745628197}, {"start": 282, "end": 288, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937467733}, {"start": 293, "end": 297, "word": "bowl", "entity_group": "VAR", "score": 0.9990888329773516}, {"start": 303, "end": 304, "word": "7", "entity_group": "PARAM", "score": 0.9994707260692073}, {"start": 354, "end": 362, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 363, "end": 369, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "942951153", "document": "A small family business makes homemade strawberry jam and peach jam. It takes 20 minutes to make one bottle of strawberry jam and 30 minutes to make one bottle of peach jam. The family business only operates for 3500 minutes per week. Due to fruit availability, they can make at most 100 bottles of strawberry jam and at most 80 bottles of peach jam. If the profit per bottle of strawberry jam is $3 and the profit per bottle of peach jam is $5, how many bottles of each should they make to maximize their profit?", "order_mapping": {"strawberry jam": 0, "peach jam": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"strawberry jam": "3", "peach jam": "5"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "3500", "terms": {"peach jam": "20", "strawberry jam": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "strawberry jam", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "peach jam", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of strawberry jam\n- y: Number of bottles of peach jam\n\nObjective:\n- The family business aims to maximize its profit. The profit per bottle of strawberry jam is $3 and the profit per bottle of peach jam is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The family business operates for 3500 minutes per week. It takes 20 minutes to make one bottle of peach jam and 30 minutes to make one bottle of strawberry jam. This leads to the constraint: 30x + 20y <= 3500.\n- The maximum number of bottles of strawberry jam that can be made is 100, leading to the constraint: x <= 100.\n- The maximum number of bottles of peach jam that can be made is 80, leading to the constraint: y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n30x + 20y <= 3500\nx <= 100\ny <= 80", "canonical": {"objective": [-3.0, -5.0], "constraints": [[30.0, 20.0, 3500.0], [1.0, 0.0, 100.0], [0.0, 1.0, 80.0]]}, "solution": {"x": 63, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of strawberry jam made: StrawberryJam\n- Number of bottles of peach jam made: PeachJam\n\nConstraints:\n- Total time to make both types of jam should not exceed 3500 minutes per week (20 minutes for strawberry jam, 30 minutes for peach jam):\n  20 * StrawberryJam + 30 * PeachJam <= 3500\n- At most 100 bottles of strawberry jam can be made:\n  StrawberryJam <= 100\n- At most 80 bottles of peach jam can be made:\n  PeachJam <= 80\n\nObjective:\n- Maximize profit (3 dollars per bottle of strawberry jam, 5 dollars per bottle of peach jam):\n  3 * StrawberryJam + 5 * PeachJam\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStrawberryJam = intvar(0, 999999999)  # Number of bottles of strawberry jam\nPeachJam = intvar(0, 999999999)  # Number of bottles of peach jam\n\n# Constraints\nm = Model()\n\n# The total time to make both types of jam should not exceed 3500 minutes per week:\n# Note: There was a mistake in the constraint mapping, it should be 20 minutes for strawberry and 30 for peach.\nm += 20 * StrawberryJam + 30 * PeachJam <= 3500\n# At most 100 bottles of strawberry jam can be made:\nm += StrawberryJam <= 100\n# At most 80 bottles of peach jam can be made:\nm += PeachJam <= 80\n\n# Objective\n# Maximize profit (3 dollars per bottle of strawberry jam, 5 dollars per bottle of peach jam):\nm.maximize(3 * StrawberryJam + 5 * PeachJam)\n", "entities": [{"start": 39, "end": 53, "word": "strawberry jam", "entity_group": "VAR", "score": 0.9998949315987826}, {"start": 58, "end": 67, "word": "peach jam", "entity_group": "VAR", "score": 0.9999769094798384}, {"start": 79, "end": 81, "word": "20", "entity_group": "PARAM", "score": 0.999418676288643}, {"start": 112, "end": 126, "word": "strawberry jam", "entity_group": "VAR", "score": 0.9998874890326932}, {"start": 131, "end": 133, "word": "30", "entity_group": "PARAM", "score": 0.9996126674190745}, {"start": 164, "end": 173, "word": "peach jam", "entity_group": "VAR", "score": 0.9999297869368943}, {"start": 196, "end": 200, "word": "only", "entity_group": "CONST_DIR", "score": 0.9932544054451823}, {"start": 214, "end": 218, "word": "3500", "entity_group": "LIMIT", "score": 0.9983647366990142}, {"start": 280, "end": 287, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989555867364681}, {"start": 288, "end": 291, "word": "100", "entity_group": "LIMIT", "score": 0.9996716076064798}, {"start": 303, "end": 317, "word": "strawberry jam", "entity_group": "VAR", "score": 0.9998790253352585}, {"start": 322, "end": 329, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987788643762873}, {"start": 330, "end": 332, "word": "80", "entity_group": "LIMIT", "score": 0.9996882859895834}, {"start": 344, "end": 353, "word": "peach jam", "entity_group": "VAR", "score": 0.9999655714968025}, {"start": 363, "end": 369, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997535459952099}, {"start": 384, "end": 398, "word": "strawberry jam", "entity_group": "VAR", "score": 0.9998881336280621}, {"start": 404, "end": 405, "word": "3", "entity_group": "PARAM", "score": 0.999454865662743}, {"start": 414, "end": 420, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998293107167436}, {"start": 435, "end": 444, "word": "peach jam", "entity_group": "VAR", "score": 0.9998699311433178}, {"start": 450, "end": 451, "word": "5", "entity_group": "PARAM", "score": 0.9996607279942422}, {"start": 499, "end": 507, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997547498873601}, {"start": 514, "end": 520, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368573137117}]}
{"doc_id": "-1734964325", "document": "In a video game, George has to collect 50 units of wood and 60 units of metal. There are two areas. area one and area two, where he can find these resources. For each hour in area one that he spends, he gets 2 units of wood and 5 units of metal. For each hour in area two that he spends, he gets 8 units of wood and 3 units of metal. Formulate a LP to minimize the amount of time spent in both areas.", "order_mapping": {"area one": 0, "area two": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "amount of time", "vars": ["area two", "area one"]}, "const_declarations": [], "explanation": "Variables:\n- x: Hours spent in area one\n- y: Hours spent in area two\n\nObjective:\n- George wants to minimize the amount of time spent in both areas. Therefore, the objective function is: Minimize x + y\n\nConstraints:\n- George needs to collect 50 units of wood and 60 units of metal. In area one, he gets 2 units of wood and 5 units of metal per hour, and in area two, he gets 8 units of wood and 3 units of metal per hour. This can be represented as: 2x + 8y >= 50 (wood) and 5x + 3y >= 60 (metal).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + y\nConstraints:\n2x + 8y >= 50\n5x + 3y >= 60", "canonical": {"objective": [1.0, 1.0], "constraints": [[-2.0, -8.0, -50.0], [-5.0, -3.0, -60.0]]}, "solution": {"x": 9, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Time spent in area one: AreaOneTime\n- Time spent in area two: AreaTwoTime\n\nConstraints:\n- To collect at least 50 units of wood:\n  2 * AreaOneTime + 8 * AreaTwoTime >= 50\n- To collect at least 60 units of metal:\n  5 * AreaOneTime + 3 * AreaTwoTime >= 60\n\nObjective:\n- Minimize the total amount of time spent in both areas:\n  AreaOneTime + AreaTwoTime\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAreaOneTime = intvar(0, 999999999)  # Time spent in area one\nAreaTwoTime = intvar(0, 999999999)  # Time spent in area two\n\n# Constraints\nm = Model()\n\n# George needs to collect at least 50 units of wood:\nm += 2 * AreaOneTime + 8 * AreaTwoTime >= 50\n# George needs to collect at least 60 units of metal:\nm += 5 * AreaOneTime + 3 * AreaTwoTime >= 60\n\n# Objective\n# Minimize the total amount of time spent in both areas:\nm.minimize(AreaOneTime + AreaTwoTime)\n", "entities": [{"start": 25, "end": 39, "word": "has to collect", "entity_group": "CONST_DIR", "score": 0.9969037445583396}, {"start": 40, "end": 42, "word": "50", "entity_group": "LIMIT", "score": 0.9997916323488877}, {"start": 61, "end": 63, "word": "60", "entity_group": "LIMIT", "score": 0.9997023128450948}, {"start": 103, "end": 111, "word": "area one", "entity_group": "VAR", "score": 0.9992833880266143}, {"start": 116, "end": 124, "word": "area two", "entity_group": "VAR", "score": 0.9996628482045188}, {"start": 180, "end": 188, "word": "area one", "entity_group": "VAR", "score": 0.9987456997612769}, {"start": 214, "end": 215, "word": "2", "entity_group": "PARAM", "score": 0.9997322353338287}, {"start": 234, "end": 235, "word": "5", "entity_group": "PARAM", "score": 0.9995774499505803}, {"start": 270, "end": 278, "word": "area two", "entity_group": "VAR", "score": 0.9987463600878193}, {"start": 304, "end": 305, "word": "8", "entity_group": "PARAM", "score": 0.999732237774033}, {"start": 324, "end": 325, "word": "3", "entity_group": "PARAM", "score": 0.9996043827751371}, {"start": 361, "end": 369, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9988150652019462}, {"start": 374, "end": 388, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9816326941103035}]}
{"doc_id": "-221520752", "document": "You have $300000 to invest in four different tech companies who specialize in specific products. There is a video game company, a camera company, a cell phone company, and a laptop company. The return on investment for each is as follows: video game company, 7%; camera company, 3%; cell phone company, 9%; laptop company 7%. You have self imposed some restrictions on your investment. For instance, the amount invested in the laptop company cannot exceed the amount invested in the video game company. In addition, the amount invested in the camera company cannot exceed the amount invested in the cell phone company. Finally at most 15% of your total investment can be in the laptop company. Formulate a LP to maximize your returns.", "order_mapping": {"video game": 0, "camera company": 1, "cell phone company": 2, "laptop company": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "returns", "terms": {"video game": "7%", "camera company": "3%", "cell phone company": "9%", "laptop company": "7%"}}, "const_declarations": [{"type": "sum", "direction": "have", "limit": "300000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "15%", "var": "laptop company", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "laptop company", "direction": "cannot exceed", "y_var": "video game", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "camera company", "direction": "cannot exceed", "y_var": "cell phone company", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the video game company\n- y: Dollars invested in the camera company\n- z: Dollars invested in the cell phone company\n- w: Dollars invested in the laptop company\n\nObjective:\n- The investor aims to maximize the returns on the investments. The return on investment for each company is as follows: video game company, 7%; camera company, 3%; cell phone company, 9%; laptop company, 7%. Therefore, the objective function is: Maximize 0.07x + 0.03y + 0.09z + 0.07w\n\nConstraints:\n- The total amount available for investment is $300,000, so the constraint is: x + y + z + w <= 300000.\n- At most 15% of the total investment can be in the laptop company, leading to the constraint: w <= 0.15(x + y + z + w).\n- The amount invested in the laptop company cannot exceed the amount invested in the video game company, resulting in the constraint: w <= x.\n- The amount invested in the camera company cannot exceed the amount invested in the cell phone company, leading to the constraint: y <= z.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.07x + 0.03y + 0.09z + 0.07w\nConstraints:\nx + y + z + w <= 300000\nw <= 0.15(x + y + z + w)\nw <= x\ny <= z", "canonical": {"objective": [-0.07, -0.03, -0.09, -0.07], "constraints": [[1.0, 1.0, 1.0, 1.0, 300000.0], [-0.15, -0.15, -0.15, 0.85, 0.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 0, "y": 0, "z": 300000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the video game company: VideoGame\n- Amount invested in the camera company: Camera\n- Amount invested in the cell phone company: CellPhone\n- Amount invested in the laptop company: Laptop\n\nConstraints:\n- Total investment should not exceed $300000:\n  VideoGame + Camera + CellPhone + Laptop <= 300000\n- The amount invested in the laptop company cannot exceed the amount invested in the video game company:\n  Laptop <= VideoGame\n- The amount invested in the camera company cannot exceed the amount invested in the cell phone company:\n  Camera <= CellPhone\n- At most 15% of the total investment can be in the laptop company:\n  Laptop <= 0.15 * 300000\n\nObjective:\n- Maximize returns (7% from video game, 3% from camera, 9% from cell phone, 7% from laptop):\n  0.07 * VideoGame + 0.03 * Camera + 0.09 * CellPhone + 0.07 * Laptop\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVideoGame = intvar(0, 999999999)  # Amount invested in the video game company\nCamera = intvar(0, 999999999)  # Amount invested in the camera company\nCellPhone = intvar(0, 999999999)  # Amount invested in the cell phone company\nLaptop = intvar(0, 999999999)  # Amount invested in the laptop company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $300000:\nm += VideoGame + Camera + CellPhone + Laptop <= 300000\n# The amount invested in the laptop company cannot exceed the amount invested in the video game company:\nm += Laptop <= VideoGame\n# The amount invested in the camera company cannot exceed the amount invested in the cell phone company:\nm += Camera <= CellPhone\n# At most 15% of the total investment can be in the laptop company:\nm += Laptop <= 0.15 * 300000\n\n# Objective\n# Maximize returns (7% from video game, 3% from camera, 9% from cell phone, 7% from laptop):\nm.maximize(0.07 * VideoGame + 0.03 * Camera + 0.09 * CellPhone + 0.07 * Laptop)\n", "entities": [{"start": 4, "end": 8, "word": "have", "entity_group": "CONST_DIR", "score": 0.9967985811764326}, {"start": 11, "end": 17, "word": "300000", "entity_group": "LIMIT", "score": 0.9993832694914375}, {"start": 110, "end": 120, "word": "video game", "entity_group": "VAR", "score": 0.9999906283946709}, {"start": 133, "end": 147, "word": "camera company", "entity_group": "VAR", "score": 0.9999538211241407}, {"start": 152, "end": 170, "word": "cell phone company", "entity_group": "VAR", "score": 0.9993054077953766}, {"start": 179, "end": 193, "word": "laptop company", "entity_group": "VAR", "score": 0.9998551493883272}, {"start": 200, "end": 206, "word": "return", "entity_group": "OBJ_NAME", "score": 0.999760049361915}, {"start": 246, "end": 256, "word": "video game", "entity_group": "VAR", "score": 0.999989133960104}, {"start": 267, "end": 270, "word": "7 %", "entity_group": "PARAM", "score": 0.9721758137541158}, {"start": 273, "end": 287, "word": "camera company", "entity_group": "VAR", "score": 0.9999757636818449}, {"start": 290, "end": 293, "word": "3 %", "entity_group": "PARAM", "score": 0.9723423596580012}, {"start": 296, "end": 314, "word": "cell phone company", "entity_group": "VAR", "score": 0.99909423672615}, {"start": 317, "end": 320, "word": "9 %", "entity_group": "PARAM", "score": 0.9869311173463494}, {"start": 323, "end": 337, "word": "laptop company", "entity_group": "VAR", "score": 0.9999700771274318}, {"start": 338, "end": 341, "word": "7 %", "entity_group": "PARAM", "score": 0.9496239487522091}, {"start": 447, "end": 461, "word": "laptop company", "entity_group": "VAR", "score": 0.9999728019939469}, {"start": 462, "end": 476, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9896961341041275}, {"start": 504, "end": 514, "word": "video game", "entity_group": "VAR", "score": 0.999988589680658}, {"start": 566, "end": 580, "word": "camera company", "entity_group": "VAR", "score": 0.9999744062918625}, {"start": 581, "end": 595, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9888014265151233}, {"start": 623, "end": 641, "word": "cell phone company", "entity_group": "VAR", "score": 0.9995491966321168}, {"start": 652, "end": 659, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9980378879503123}, {"start": 660, "end": 664, "word": "15 %", "entity_group": "LIMIT", "score": 0.9855874178730138}, {"start": 704, "end": 718, "word": "laptop company", "entity_group": "VAR", "score": 0.9999805563949343}, {"start": 739, "end": 747, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995429669814562}, {"start": 753, "end": 760, "word": "returns", "entity_group": "OBJ_NAME", "score": 0.9996076026748141}]}
{"doc_id": "1699001963", "document": "In an arcade shooting game, each deer shot is 4 points and each bear shot is 10 points You must shoot at least 5 deer and at least 2 bears to pass the level. However, you can shoot at most 10 deer and at most 5 bears. In addition, you only have enough bullets to shoot 12 animals total. How many of each animal should you shoot to maximize your points?", "order_mapping": {"deer": 0, "bear": 1, "bears": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"deer": "4", "bear": "10"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5", "var": "deer", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "bears", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "deer", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "bears", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "12", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of deer shot\n- y: Number of bears shot\n\nObjective:\n- The goal is to maximize the points scored. Each deer shot is worth 4 points and each bear shot is worth 10 points. Therefore, the objective function is: Maximize 4x + 10y\n\nConstraints:\n- At least 5 deer must be shot, leading to the constraint: x >= 5\n- At least 2 bears must be shot, leading to the constraint: y >= 2\n- At most 10 deer can be shot, leading to the constraint: x <= 10\n- At most 5 bears can be shot, leading to the constraint: y <= 5\n- The total number of animals shot cannot exceed 12, leading to the constraint: x + y <= 12\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 10y\nConstraints:\nx >= 5\ny >= 2\nx <= 10\ny <= 5\nx + y <= 12", "canonical": {"objective": [-4.0, -10.0], "constraints": [[-1.0, 0.0, -5.0], [0.0, -1.0, -2.0], [1.0, 0.0, 10.0], [0.0, 1.0, 5.0], [1.0, 1.0, 12.0]]}, "solution": {"x": 7, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of deer shot: Deer\n- Number of bears shot: Bears\n\nConstraints:\n- At least 5 deer must be shot:\n  Deer >= 5\n- At least 2 bears must be shot:\n  Bears >= 2\n- At most 10 deer can be shot:\n  Deer <= 10\n- At most 5 bears can be shot:\n  Bears <= 5\n- Only enough bullets to shoot 12 animals in total:\n  Deer + Bears <= 12\n\nObjective:\n- Maximize points (4 points per deer, 10 points per bear):\n  4 * Deer + 10 * Bears\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDeer = intvar(0, 999999999)  # Number of deer shot\nBears = intvar(0, 999999999)  # Number of bears shot\n\n# Constraints\nm = Model()\n\n# You must shoot at least 5 deer:\nm += Deer >= 5\n# You must shoot at least 2 bears:\nm += Bears >= 2\n# You can shoot at most 10 deer:\nm += Deer <= 10\n# You can shoot at most 5 bears:\nm += Bears <= 5\n# You only have enough bullets to shoot 12 animals total:\nm += Deer + Bears <= 12\n\n# Objective\n# Maximize points (4 points per deer, 10 points per bear):\nm.maximize(4 * Deer + 10 * Bears)\n", "entities": [{"start": 34, "end": 38, "word": "deer", "entity_group": "VAR", "score": 0.9992973826671654}, {"start": 47, "end": 48, "word": "4", "entity_group": "PARAM", "score": 0.9997055882085564}, {"start": 49, "end": 55, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9869240268936451}, {"start": 65, "end": 69, "word": "bear", "entity_group": "VAR", "score": 0.9996504683779422}, {"start": 78, "end": 80, "word": "10", "entity_group": "PARAM", "score": 0.9994504103031255}, {"start": 81, "end": 87, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9963727524415803}, {"start": 103, "end": 111, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998874962033799}, {"start": 112, "end": 113, "word": "5", "entity_group": "LIMIT", "score": 0.9995290173316375}, {"start": 114, "end": 118, "word": "deer", "entity_group": "VAR", "score": 0.9954428910706532}, {"start": 123, "end": 131, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987889842507051}, {"start": 132, "end": 133, "word": "2", "entity_group": "LIMIT", "score": 0.9997537193283004}, {"start": 134, "end": 139, "word": "bears", "entity_group": "VAR", "score": 0.9955355326646121}, {"start": 184, "end": 191, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989398271665448}, {"start": 192, "end": 194, "word": "10", "entity_group": "LIMIT", "score": 0.9994962310680463}, {"start": 195, "end": 199, "word": "deer", "entity_group": "VAR", "score": 0.9981975980204211}, {"start": 204, "end": 211, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986806059265733}, {"start": 212, "end": 213, "word": "5", "entity_group": "LIMIT", "score": 0.9997469606832257}, {"start": 214, "end": 219, "word": "bears", "entity_group": "VAR", "score": 0.9965072184585582}, {"start": 240, "end": 244, "word": "only", "entity_group": "CONST_DIR", "score": 0.9915269669353473}, {"start": 274, "end": 276, "word": "12", "entity_group": "LIMIT", "score": 0.9989116475816818}, {"start": 337, "end": 345, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999548318257455}, {"start": 351, "end": 357, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9981440408142676}]}
{"doc_id": "-41153534", "document": "An instrument store sells pianos and guitars. A piano takes 8 sq ft of space while a guitar takes 3 sq ft of space. The store has 100 sq ft of space available. A piano costs the store $500 and a guitar costs the store $300. The store has a budget of $8000. In addition, at least 30% of items in stock must be guitars. If the profit per piano sold is $300 and the profit per guitar sold is $200, how many of each should the store stock to maximize profit?", "order_mapping": {"pianos": 0, "guitars": 1, "piano": 0, "guitar": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"piano": "300", "guitar": "200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"piano": "8", "guitar": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "8000", "terms": {"piano": "500", "guitar": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "guitars", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pianos\n- y: Number of guitars\n\nObjective:\n- The store aims to maximize its profit. The profit per piano sold is $300 and the profit per guitar sold is $200. Therefore, the objective function is: Maximize 300x + 200y\n\nConstraints:\n- The store has 100 sq ft of space available, and a piano takes 8 sq ft while a guitar takes 3 sq ft. This leads to the constraint: 8x + 3y <= 100.\n- The store has a budget of $8000, and a piano costs $500 while a guitar costs $300. This results in the constraint: 500x + 300y <= 8000.\n- At least 30% of items in stock must be guitars, leading to the constraint: y >= 0.3(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 200y\nConstraints:\n8x + 3y <= 100\n500x + 300y <= 8000\ny >= 0.3(x + y)", "canonical": {"objective": [-300.0, -200.0], "constraints": [[8.0, 3.0, 100.0], [500.0, 300.0, 8000.0], [0.3, -0.7, 0.0]]}, "solution": {"x": 1, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of pianos in stock: Pianos\n- Number of guitars in stock: Guitars\n\nConstraints:\n- The store has 100 sq ft of space available:\n  8 * Pianos + 3 * Guitars <= 100\n- The store has a budget of $8000:\n  500 * Pianos + 300 * Guitars <= 8000\n- At least 30% of items in stock must be guitars:\n  Guitars >= 0.3 * (Pianos + Guitars)\n\nObjective:\n- Maximize profit (profit per piano sold is $300 and profit per guitar sold is $200):\n  300 * Pianos + 200 * Guitars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPianos = intvar(0, 999999999)  # Number of pianos in stock\nGuitars = intvar(0, 999999999)  # Number of guitars in stock\n\n# Constraints\nm = Model()\n\n# The store has 100 sq ft of space available:\nm += 8 * Pianos + 3 * Guitars <= 100\n# The store has a budget of $8000:\nm += 500 * Pianos + 300 * Guitars <= 8000\n# At least 30% of items in stock must be guitars:\nm += Guitars >= 0.3 * (Pianos + Guitars)\n\n# Objective\n# Maximize profit (profit per piano sold is $300 and profit per guitar sold is $200):\nm.maximize(300 * Pianos + 200 * Guitars)\n", "entities": [{"start": 26, "end": 32, "word": "pianos", "entity_group": "VAR", "score": 0.999776364505639}, {"start": 37, "end": 44, "word": "guitars", "entity_group": "VAR", "score": 0.9997656816162631}, {"start": 49, "end": 54, "word": "piano", "entity_group": "VAR", "score": 0.9997113507560267}, {"start": 61, "end": 62, "word": "8", "entity_group": "PARAM", "score": 0.9994443441320642}, {"start": 86, "end": 92, "word": "guitar", "entity_group": "VAR", "score": 0.9988194459313942}, {"start": 99, "end": 100, "word": "3", "entity_group": "PARAM", "score": 0.9994035614717236}, {"start": 132, "end": 135, "word": "100", "entity_group": "LIMIT", "score": 0.999681369359969}, {"start": 151, "end": 160, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994916485523329}, {"start": 165, "end": 170, "word": "piano", "entity_group": "VAR", "score": 0.999735163548582}, {"start": 189, "end": 192, "word": "500", "entity_group": "PARAM", "score": 0.9997291690691934}, {"start": 199, "end": 205, "word": "guitar", "entity_group": "VAR", "score": 0.9998219254318697}, {"start": 224, "end": 227, "word": "300", "entity_group": "PARAM", "score": 0.9997356194638185}, {"start": 246, "end": 252, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9910827998414449}, {"start": 258, "end": 262, "word": "8000", "entity_group": "LIMIT", "score": 0.9985168024791844}, {"start": 279, "end": 287, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991707327427872}, {"start": 288, "end": 292, "word": "30 %", "entity_group": "LIMIT", "score": 0.978187496801603}, {"start": 319, "end": 326, "word": "guitars", "entity_group": "VAR", "score": 0.9996896148757097}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999296880115012}, {"start": 347, "end": 352, "word": "piano", "entity_group": "VAR", "score": 0.9979385846911388}, {"start": 363, "end": 366, "word": "300", "entity_group": "PARAM", "score": 0.9995965170761641}, {"start": 375, "end": 381, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386216308734}, {"start": 386, "end": 392, "word": "guitar", "entity_group": "VAR", "score": 0.999037700613503}, {"start": 403, "end": 406, "word": "200", "entity_group": "PARAM", "score": 0.9996530293429763}, {"start": 452, "end": 460, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996868626839831}, {"start": 461, "end": 467, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999210075013456}]}
{"doc_id": "-597212963", "document": "Jon has $30000 to invest in both the milk and cheese industries. He has decided that the money invested in the milk industry must be at least three times as much as the money invested in the cheese industry. However, he has limited himself to invest at most $25000 in the milk industry. If investments in the milk industry earn 8% and investments in the cheese industry earn 6%, how much should he invest in each to maximize his earnings?", "order_mapping": {"milk": 0, "cheese industries": 1, "milk industry": 0, "cheese industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"milk industry": "8%", "cheese industry": "6%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "30000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "milk industry", "direction": "at least", "param": "three", "y_var": "cheese industry", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "25000", "var": "milk industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the milk industry\n- y: Dollars invested in the cheese industry\n\nObjective:\n- Jon aims to maximize his earnings. The investments in the milk industry earn 8% and investments in the cheese industry earn 6%. Therefore, the objective function is: Maximize 0.08x + 0.06y\n\nConstraints:\n- Jon has $30000 to invest, so the constraint is: x + y <= 30000.\n- The money invested in the milk industry must be at least three times as much as the money invested in the cheese industry, leading to the constraint: x >= 3y.\n- Jon has limited himself to invest at most $25000 in the milk industry, resulting in the constraint: x <= 25000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.08x + 0.06y\nConstraints:\nx + y <= 30000\nx >= 3y\nx <= 25000", "canonical": {"objective": [-0.08, -0.06], "constraints": [[1.0, 1.0, 30000.0], [-1.0, 3.0, 0.0], [1.0, 0.0, 25000.0]]}, "solution": {"x": 25000, "y": 5000}, "pseudo_model": "\nDecision Variables:\n- Money invested in the milk industry: MilkIndustry\n- Money invested in the cheese industry: CheeseIndustry\n\nConstraints:\n- Total investment should not exceed $30000:\n  MilkIndustry + CheeseIndustry <= 30000\n- Money invested in the milk industry must be at least three times as much as the money invested in the cheese industry:\n  MilkIndustry >= 3 * CheeseIndustry\n- At most $25000 can be invested in the milk industry:\n  MilkIndustry <= 25000\n\nObjective:\n- Maximize earnings (8% from milk industry, 6% from cheese industry):\n  0.08 * MilkIndustry + 0.06 * CheeseIndustry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMilkIndustry = intvar(0, 999999999)  # Money invested in the milk industry\nCheeseIndustry = intvar(0, 999999999)  # Money invested in the cheese industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $30000:\nm += MilkIndustry + CheeseIndustry <= 30000\n# Money invested in the milk industry must be at least three times as much as the money invested in the cheese industry:\nm += MilkIndustry >= 3 * CheeseIndustry\n# At most $25000 can be invested in the milk industry:\nm += MilkIndustry <= 25000\n\n# Objective\n# Maximize earnings (8% from milk industry, 6% from cheese industry):\nm.maximize(0.08 * MilkIndustry + 0.06 * CheeseIndustry)\n", "entities": [{"start": 4, "end": 7, "word": "has", "entity_group": "CONST_DIR", "score": 0.9945440677879165}, {"start": 10, "end": 15, "word": "30000", "entity_group": "LIMIT", "score": 0.9993882834589688}, {"start": 38, "end": 42, "word": "milk", "entity_group": "VAR", "score": 0.9992999207110042}, {"start": 47, "end": 64, "word": "cheese industries", "entity_group": "VAR", "score": 0.9998255807084121}, {"start": 113, "end": 126, "word": "milk industry", "entity_group": "VAR", "score": 0.9999681249794622}, {"start": 135, "end": 143, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9933779082276889}, {"start": 144, "end": 149, "word": "three", "entity_group": "PARAM", "score": 0.9838641789856434}, {"start": 193, "end": 208, "word": "cheese industry", "entity_group": "VAR", "score": 0.9999034304189854}, {"start": 254, "end": 261, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9917892490330964}, {"start": 264, "end": 269, "word": "25000", "entity_group": "LIMIT", "score": 0.9996586812098879}, {"start": 277, "end": 290, "word": "milk industry", "entity_group": "VAR", "score": 0.9999746703617778}, {"start": 315, "end": 328, "word": "milk industry", "entity_group": "VAR", "score": 0.999943475174506}, {"start": 329, "end": 333, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9859315119813146}, {"start": 334, "end": 337, "word": "8 %", "entity_group": "PARAM", "score": 0.9832413945523741}, {"start": 361, "end": 376, "word": "cheese industry", "entity_group": "VAR", "score": 0.99991653066788}, {"start": 377, "end": 381, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9910626970020858}, {"start": 382, "end": 385, "word": "6 %", "entity_group": "PARAM", "score": 0.9757442431059135}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203413059122}, {"start": 438, "end": 446, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9989306333792048}]}
{"doc_id": "1413006014", "document": "A grocery store wants to sell their bulk quantities of almonds, pecans, and pistachios.  They have 1000 grams of almonds, 1200 grams of pecans, and 1100 grams of pistachios. Mixture 1 contains 20 grams of almonds, 30 grams of pecans, and 10 grams of pistachios. Mixture 2 contains 15 grams of almonds, 20 grams of pecans, and 25 grams of pistachios. If the profit per mixture 1 is $10 and the profit per mixture 2 is $12, how many of each should the store sell to maximize profit?", "order_mapping": {"Mixture 1": 0, "Mixture 2": 1, "mixture 1": 0, "mixture 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mixture 2": "12", "mixture 1": "10"}}, "const_declarations": [{"type": "linear", "direction": "have", "limit": "1000", "terms": {"Mixture 1": "20", "Mixture 2": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "have", "limit": "1200", "terms": {"Mixture 1": "30", "Mixture 2": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "have", "limit": "1100", "terms": {"Mixture 1": "10", "Mixture 2": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of Mixture 1 to be sold\n- y: Quantity of Mixture 2 to be sold\n\nObjective:\n- The store aims to maximize its profit. The profit per Mixture 1 is $10 and the profit per Mixture 2 is $12. Therefore, the objective function is: Maximize 10x + 12y\n\nConstraints:\n- The store has 1000 grams of almonds, 1200 grams of pecans, and 1100 grams of pistachios. The constraint for almonds is: 20x + 15y <= 1000. The constraint for pecans is: 30x + 20y <= 1200. The constraint for pistachios is: 10x + 25y <= 1100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 12y\nConstraints:\n20x + 15y <= 1000\n30x + 20y <= 1200\n10x + 25y <= 1100", "canonical": {"objective": [-10.0, -12.0], "constraints": [[20.0, 15.0, 1000.0], [30.0, 20.0, 1200.0], [10.0, 25.0, 1100.0]]}, "solution": {"x": 14, "y": 38}, "pseudo_model": "\nDecision Variables:\n- Number of Mixture 1 sold: Mixture1\n- Number of Mixture 2 sold: Mixture2\n\nConstraints:\n- Almonds constraint (20g per Mixture 1, 15g per Mixture 2, 1000g available):\n  20 * Mixture1 + 15 * Mixture2 <= 1000\n- Pecans constraint (30g per Mixture 1, 20g per Mixture 2, 1200g available):\n  30 * Mixture1 + 20 * Mixture2 <= 1200\n- Pistachios constraint (10g per Mixture 1, 25g per Mixture 2, 1100g available):\n  10 * Mixture1 + 25 * Mixture2 <= 1100\n\nObjective:\n- Maximize profit (10 dollars per Mixture 1, 12 dollars per Mixture 2):\n  10 * Mixture1 + 12 * Mixture2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMixture1 = intvar(0, 999999999)  # Number of Mixture 1 sold\nMixture2 = intvar(0, 999999999)  # Number of Mixture 2 sold\n\n# Constraints\nm = Model()\n\n# Constraints for the availability of almonds, pecans, and pistachios:\nm += 20 * Mixture1 + 15 * Mixture2 <= 1000  # Almonds\nm += 30 * Mixture1 + 20 * Mixture2 <= 1200  # Pecans\nm += 10 * Mixture1 + 25 * Mixture2 <= 1100  # Pistachios\n\n# Objective\n# Maximize profit (10 dollars per Mixture 1, 12 dollars per Mixture 2):\nm.maximize(10 * Mixture1 + 12 * Mixture2)\n", "entities": [{"start": 96, "end": 100, "word": "have", "entity_group": "CONST_DIR", "score": 0.9980918012273854}, {"start": 101, "end": 105, "word": "1000", "entity_group": "LIMIT", "score": 0.998867295147057}, {"start": 125, "end": 129, "word": "1200", "entity_group": "LIMIT", "score": 0.9997499476292062}, {"start": 152, "end": 156, "word": "1100", "entity_group": "LIMIT", "score": 0.999698664855318}, {"start": 179, "end": 188, "word": "Mixture 1", "entity_group": "VAR", "score": 0.9998488910886473}, {"start": 198, "end": 200, "word": "20", "entity_group": "PARAM", "score": 0.9996960375622759}, {"start": 220, "end": 222, "word": "30", "entity_group": "PARAM", "score": 0.9997341868705655}, {"start": 245, "end": 247, "word": "10", "entity_group": "PARAM", "score": 0.9997001002766979}, {"start": 270, "end": 279, "word": "Mixture 2", "entity_group": "VAR", "score": 0.9998488937591762}, {"start": 289, "end": 291, "word": "15", "entity_group": "PARAM", "score": 0.9996960865177684}, {"start": 311, "end": 313, "word": "20", "entity_group": "PARAM", "score": 0.9997341868705665}, {"start": 336, "end": 338, "word": "25", "entity_group": "PARAM", "score": 0.9995925628581308}, {"start": 368, "end": 374, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999177936746282}, {"start": 379, "end": 388, "word": "mixture 1", "entity_group": "VAR", "score": 0.9997670641551238}, {"start": 394, "end": 396, "word": "10", "entity_group": "PARAM", "score": 0.9996676608275434}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998885209202041}, {"start": 416, "end": 425, "word": "mixture 2", "entity_group": "VAR", "score": 0.9997599749676721}, {"start": 431, "end": 433, "word": "12", "entity_group": "PARAM", "score": 0.9996530465450305}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 487, "end": 493, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "1902566293", "document": "A bakery makes regular donuts and jelly filled donuts. They make x1 regular donuts per day at a profit of $2 per donut and x2 jelly filled donuts per day at a profit of $4 per donut (x1 and x2 must be greater than or equal to 0).There is a daily demand for at most 100 regular donuts and 75 jelly filled donuts. The bakery only has capacity to make a maximum of 120 donuts of either type. How many of each should they produce to maximize profit?", "order_mapping": {"regular donuts": 0, "jelly filled donuts": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular donuts": "2", "jelly filled donuts": "4"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "regular donuts", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "75", "var": "jelly filled donuts", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "120", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of regular donuts produced per day\n- x2: Number of jelly filled donuts produced per day\n\nObjective:\n- The bakery aims to maximize its daily profit. The profit per regular donut is $2 and the profit per jelly filled donut is $4. Therefore, the objective function is: Maximize 2x1 + 4x2\n\nConstraints:\n- The daily demand for regular donuts is at most 100, leading to the constraint: x1 <= 100.\n- The daily demand for jelly filled donuts is at most 75, leading to the constraint: x2 <= 75.\n- The bakery has a capacity to make a maximum of 120 donuts of either type, leading to the constraint: x1 + x2 <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x1 + 4x2\nConstraints:\nx1 <= 100\nx2 <= 75\nx1 + x2 <= 120", "canonical": {"objective": [-2.0, -4.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 75.0], [1.0, 1.0, 120.0]]}, "solution": {"x": 45, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Number of regular donuts made per day: RegularDonuts\n- Number of jelly filled donuts made per day: JellyFilledDonuts\n\nConstraints:\n- Total number of donuts made should not exceed 120 per day:\n  RegularDonuts + JellyFilledDonuts <= 120\n- At most 100 regular donuts per day:\n  RegularDonuts <= 100\n- At most 75 jelly filled donuts per day:\n  JellyFilledDonuts <= 75\n\nObjective:\n- Maximize profit (2 dollars per regular donut, 4 dollars per jelly filled donut):\n  2 * RegularDonuts + 4 * JellyFilledDonuts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularDonuts = intvar(0, 999999999)  # Number of regular donuts made per day\nJellyFilledDonuts = intvar(0, 999999999)  # Number of jelly filled donuts made per day\n\n# Constraints\nm = Model()\n\n# Total number of donuts made should not exceed 120 per day:\nm += RegularDonuts + JellyFilledDonuts <= 120\n# Number of regular donuts made should be at most 100 per day:\nm += RegularDonuts <= 100\n# Number of jelly filled donuts made should be at most 75 per day:\nm += JellyFilledDonuts <= 75\n\n# Objective\n# Maximize profit (2 dollars per regular donut, 4 dollars per jelly filled donut):\nm.maximize(2 * RegularDonuts + 4 * JellyFilledDonuts)\n", "entities": [{"start": 15, "end": 29, "word": "regular donuts", "entity_group": "VAR", "score": 0.999984121241669}, {"start": 34, "end": 53, "word": "jelly filled donuts", "entity_group": "VAR", "score": 0.9995808764781684}, {"start": 69, "end": 83, "word": "regular donuts", "entity_group": "VAR", "score": 0.9999437102212418}, {"start": 97, "end": 103, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995321702296432}, {"start": 109, "end": 110, "word": "2", "entity_group": "PARAM", "score": 0.9994506871977038}, {"start": 128, "end": 147, "word": "jelly filled donuts", "entity_group": "VAR", "score": 0.9986417114085351}, {"start": 161, "end": 167, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998047118673775}, {"start": 173, "end": 174, "word": "4", "entity_group": "PARAM", "score": 0.9991992636867786}, {"start": 261, "end": 268, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984950072165901}, {"start": 269, "end": 272, "word": "100", "entity_group": "LIMIT", "score": 0.9995763690271506}, {"start": 273, "end": 287, "word": "regular donuts", "entity_group": "VAR", "score": 0.999975570585604}, {"start": 292, "end": 294, "word": "75", "entity_group": "LIMIT", "score": 0.9991466262026846}, {"start": 295, "end": 314, "word": "jelly filled donuts", "entity_group": "VAR", "score": 0.9988974488576774}, {"start": 356, "end": 363, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9954605414230434}, {"start": 367, "end": 370, "word": "120", "entity_group": "LIMIT", "score": 0.9996917151302189}, {"start": 435, "end": 443, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997565524788856}, {"start": 444, "end": 450, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368889597712}]}
{"doc_id": "1961511061", "document": "A small cereal company makes individual and family size cereal boxes. To make an individual cereal box takes 20 units of cereal and 10 minutes to fill. To make a family size cereal box takes 60 units of cereal and 15 minutes to fill. The company has 2000 units of cereal available and 750 minutes of filling time available. If the profit per individual cereal box is $4 and the profit per family size cereal box is $8, how many of each should the company make to maximize profit?", "order_mapping": {"individual": 0, "family": 1, "individual cereal box": 0, "family size cereal box": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"individual cereal box": "4", "family size cereal box": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"individual cereal box": "20", "family size cereal box": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "750", "terms": {"individual cereal box": "10", "family size cereal box": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of individual cereal boxes\n- y: Number of family size cereal boxes\n\nObjective:\n- The company aims to maximize its profit. The profit per individual cereal box is $4 and the profit per family size cereal box is $8. Therefore, the objective function is: Maximize 4x + 8y\n\nConstraints:\n- The company has 2000 units of cereal available, so the constraint is: 20x + 60y <= 2000.\n- The company has 750 minutes of filling time available, leading to the constraint: 10x + 15y <= 750.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 8y\nConstraints:\n20x + 60y <= 2000\n10x + 15y <= 750", "canonical": {"objective": [-4.0, -8.0], "constraints": [[20.0, 60.0, 2000.0], [10.0, 15.0, 750.0]]}, "solution": {"x": 51, "y": 16}, "pseudo_model": "\nDecision Variables:\n- Number of individual cereal boxes made: IndividualBoxes\n- Number of family size cereal boxes made: FamilyBoxes\n\nConstraints:\n- Total cereal units used should not exceed 2000 units:\n  20 * IndividualBoxes + 60 * FamilyBoxes <= 2000\n- Total filling time should not exceed 750 minutes:\n  10 * IndividualBoxes + 15 * FamilyBoxes <= 750\n\nObjective:\n- Maximize profit ($4 per individual box and $8 per family size box):\n  4 * IndividualBoxes + 8 * FamilyBoxes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIndividualBoxes = intvar(0, 999999999)  # Number of individual cereal boxes made\nFamilyBoxes = intvar(0, 999999999)  # Number of family size cereal boxes made\n\n# Constraints\nm = Model()\n\n# Cereal constraint: 20 units for individual and 60 units for family size, with 2000 units available\nm += 20 * IndividualBoxes + 60 * FamilyBoxes <= 2000\n# Time constraint: 10 minutes for individual and 15 minutes for family size, with 750 minutes available\nm += 10 * IndividualBoxes + 15 * FamilyBoxes <= 750\n\n# Objective\n# Maximize profit: $4 per individual box and $8 per family size box\nm.maximize(4 * IndividualBoxes + 8 * FamilyBoxes)\n", "entities": [{"start": 29, "end": 39, "word": "individual", "entity_group": "VAR", "score": 0.9995732518289626}, {"start": 44, "end": 50, "word": "family", "entity_group": "VAR", "score": 0.9983919932068186}, {"start": 82, "end": 103, "word": "individual cereal box", "entity_group": "VAR", "score": 0.99883621421948}, {"start": 110, "end": 112, "word": "20", "entity_group": "PARAM", "score": 0.9997217526283657}, {"start": 133, "end": 135, "word": "10", "entity_group": "PARAM", "score": 0.9997050889752936}, {"start": 164, "end": 186, "word": "family size cereal box", "entity_group": "VAR", "score": 0.9987486159228556}, {"start": 193, "end": 195, "word": "60", "entity_group": "PARAM", "score": 0.999666407953851}, {"start": 216, "end": 218, "word": "15", "entity_group": "PARAM", "score": 0.9996954209325413}, {"start": 253, "end": 257, "word": "2000", "entity_group": "LIMIT", "score": 0.999720247249112}, {"start": 274, "end": 283, "word": "available", "entity_group": "CONST_DIR", "score": 0.9967764123293332}, {"start": 288, "end": 291, "word": "750", "entity_group": "LIMIT", "score": 0.9996367503326247}, {"start": 316, "end": 325, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992050511273994}, {"start": 335, "end": 341, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998454898018421}, {"start": 346, "end": 367, "word": "individual cereal box", "entity_group": "VAR", "score": 0.9985922121603638}, {"start": 373, "end": 374, "word": "4", "entity_group": "PARAM", "score": 0.9997117327813378}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998267338048366}, {"start": 394, "end": 416, "word": "family size cereal box", "entity_group": "VAR", "score": 0.9969078693794765}, {"start": 422, "end": 423, "word": "8", "entity_group": "PARAM", "score": 0.9986026083079992}, {"start": 470, "end": 478, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996964240543539}, {"start": 479, "end": 485, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277552805353}]}
{"doc_id": "1443291076", "document": "There is only 2000 grams of coffee available to make small and large coffee pods. Each small coffee pod requires 15 grams of coffee while each large coffee pod requires 20 grams of coffee. Due to the high caffeine content, at least 4 times the amount of small coffee pods are needed than large coffee pods. However, at least 10 large coffee pods need to be made. If the profit per small coffee pod is $3 and the profit per large coffee pod is $5, how many of each should be made to maximize profit?", "order_mapping": {"small": 0, "large coffee pods": 1, "small coffee pod": 0, "large coffee pod": 1, "small coffee pods": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large coffee pod": "5", "small coffee pod": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"small coffee pod": "15", "large coffee pod": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "small coffee pods", "direction": "at least", "param": "4", "y_var": "large coffee pods", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "large coffee pods", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small coffee pods\n- y: Number of large coffee pods\n\nObjective:\n- The objective is to maximize the profit. The profit per small coffee pod is $3 and the profit per large coffee pod is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- There are only 2000 grams of coffee available, and each small coffee pod requires 15 grams while each large coffee pod requires 20 grams. This leads to the constraint: 15x + 20y <= 2000.\n- Due to the high caffeine content, at least 4 times the amount of small coffee pods are needed than large coffee pods, resulting in the constraint: x >= 4y.\n- At least 10 large coffee pods need to be made, leading to the constraint: y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n15x + 20y <= 2000\nx >= 4y\ny >= 10", "canonical": {"objective": [-3.0, -5.0], "constraints": [[15.0, 20.0, 2000.0], [-1.0, 4.0, 0.0], [0.0, -1.0, -10.0]]}, "solution": {"x": 100, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of small coffee pods made: SmallCoffeePods\n- Number of large coffee pods made: LargeCoffeePods\n\nConstraints:\n- Total coffee used should not exceed 2000 grams (15 grams per small pod, 20 grams per large pod):\n  15 * SmallCoffeePods + 20 * LargeCoffeePods <= 2000\n- At least 4 times the amount of small coffee pods are needed than large coffee pods:\n  SmallCoffeePods >= 4 * LargeCoffeePods\n- At least 10 large coffee pods need to be made:\n  LargeCoffeePods >= 10\n\nObjective:\n- Maximize profit (3 dollars per small coffee pod, 5 dollars per large coffee pod):\n  3 * SmallCoffeePods + 5 * LargeCoffeePods\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallCoffeePods = intvar(0, 999999999)  # Number of small coffee pods made\nLargeCoffeePods = intvar(0, 999999999)  # Number of large coffee pods made\n\n# Constraints\nm = Model()\n\n# Total coffee used should not exceed 2000 grams:\nm += 15 * SmallCoffeePods + 20 * LargeCoffeePods <= 2000\n# At least 4 times the amount of small coffee pods are needed than large coffee pods:\nm += SmallCoffeePods >= 4 * LargeCoffeePods\n# At least 10 large coffee pods need to be made:\nm += LargeCoffeePods >= 10\n\n# Objective\n# Maximize profit (3 dollars per small coffee pod, 5 dollars per large coffee pod):\nm.maximize(3 * SmallCoffeePods + 5 * LargeCoffeePods)\n", "entities": [{"start": 14, "end": 18, "word": "2000", "entity_group": "LIMIT", "score": 0.9997283599338991}, {"start": 35, "end": 44, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987715273488084}, {"start": 53, "end": 58, "word": "small", "entity_group": "VAR", "score": 0.9993869273421926}, {"start": 63, "end": 80, "word": "large coffee pods", "entity_group": "VAR", "score": 0.9996050935079898}, {"start": 88, "end": 104, "word": "small coffee pod", "entity_group": "VAR", "score": 0.9993219751542685}, {"start": 114, "end": 116, "word": "15", "entity_group": "PARAM", "score": 0.999612141546384}, {"start": 144, "end": 160, "word": "large coffee pod", "entity_group": "VAR", "score": 0.9992337520755007}, {"start": 170, "end": 172, "word": "20", "entity_group": "PARAM", "score": 0.999334596614893}, {"start": 226, "end": 234, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986287664387266}, {"start": 235, "end": 236, "word": "4", "entity_group": "PARAM", "score": 0.9976806061598065}, {"start": 257, "end": 274, "word": "small coffee pods", "entity_group": "VAR", "score": 0.999420586982578}, {"start": 291, "end": 308, "word": "large coffee pods", "entity_group": "VAR", "score": 0.9993310558053496}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987367613829181}, {"start": 330, "end": 332, "word": "10", "entity_group": "LIMIT", "score": 0.9996372535236168}, {"start": 333, "end": 350, "word": "large coffee pods", "entity_group": "VAR", "score": 0.9996296567406994}, {"start": 376, "end": 382, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996501474662923}, {"start": 387, "end": 403, "word": "small coffee pod", "entity_group": "VAR", "score": 0.9980112710734568}, {"start": 409, "end": 410, "word": "3", "entity_group": "PARAM", "score": 0.9996857808469763}, {"start": 419, "end": 425, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999906630327984}, {"start": 430, "end": 446, "word": "large coffee pod", "entity_group": "VAR", "score": 0.9971296212853589}, {"start": 452, "end": 453, "word": "5", "entity_group": "PARAM", "score": 0.9997138484861544}, {"start": 491, "end": 499, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 500, "end": 506, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-963235922", "document": "A farmer has 80 acres of land on which he grows apple trees and orange trees. Per acre of apple trees, 30 kg of special soil is required. Per acre of orange trees, 25 kg of special soil is required. However the farmer only has 2200 kg of special soil available. If the profit per acre of apple trees is $500 and the profit per acre of orange trees is $450, how many acres of each should be grown to maximize profit?", "order_mapping": {"apple trees": 0, "orange trees": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"apple trees": "500", "orange trees": "450"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "2200", "terms": {"apple trees": "30", "orange trees": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "80", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of apple trees\n- y: Acres of orange trees\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of apple trees is $500 and the profit per acre of orange trees is $450. Therefore, the objective function is: Maximize 500x + 450y\n\nConstraints:\n- The farmer has 2200 kg of special soil available, and each acre of apple trees requires 30 kg of special soil and each acre of orange trees requires 25 kg of special soil. This leads to the constraint: 30x + 25y <= 2200.\n- The total land available for growing apple and orange trees is 80 acres, leading to the constraint: x + y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 450y\nConstraints:\n30x + 25y <= 2200\nx + y <= 80", "canonical": {"objective": [-500.0, -450.0], "constraints": [[30.0, 25.0, 2200.0], [1.0, 1.0, 80.0]]}, "solution": {"x": 40, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of acres of apple trees: AppleTrees\n- Number of acres of orange trees: OrangeTrees\n\nConstraints:\n- Total acres of apple and orange trees should not exceed 80:\n  AppleTrees + OrangeTrees <= 80\n- Special soil usage for apple and orange trees should not exceed 2200 kg (30 kg per acre of apple trees, 25 kg per acre of orange trees):\n  30 * AppleTrees + 25 * OrangeTrees <= 2200\n\nObjective:\n- Maximize profit (500 dollars per acre of apple trees, 450 dollars per acre of orange trees):\n  500 * AppleTrees + 450 * OrangeTrees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAppleTrees = intvar(0, 80)  # Number of acres of apple trees\nOrangeTrees = intvar(0, 80)  # Number of acres of orange trees\n\n# Constraints\nm = Model()\n\n# Total acres of apple and orange trees should not exceed 80:\nm += AppleTrees + OrangeTrees <= 80\n# Special soil usage for apple and orange trees should not exceed 2200 kg:\nm += 30 * AppleTrees + 25 * OrangeTrees <= 2200\n\n# Objective\n# Maximize profit (500 dollars per acre of apple trees, 450 dollars per acre of orange trees):\nm.maximize(500 * AppleTrees + 450 * OrangeTrees)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9911483532667343}, {"start": 13, "end": 15, "word": "80", "entity_group": "LIMIT", "score": 0.9986823637643548}, {"start": 48, "end": 59, "word": "apple trees", "entity_group": "VAR", "score": 0.9999841968130586}, {"start": 64, "end": 76, "word": "orange trees", "entity_group": "VAR", "score": 0.9999860788427626}, {"start": 91, "end": 102, "word": "apple trees", "entity_group": "VAR", "score": 0.9999402724380657}, {"start": 105, "end": 107, "word": "30", "entity_group": "PARAM", "score": 0.9995546871931952}, {"start": 153, "end": 165, "word": "orange trees", "entity_group": "VAR", "score": 0.9999415947544343}, {"start": 168, "end": 170, "word": "25", "entity_group": "PARAM", "score": 0.9995546871927047}, {"start": 223, "end": 227, "word": "only", "entity_group": "CONST_DIR", "score": 0.9980103249638175}, {"start": 232, "end": 236, "word": "2200", "entity_group": "LIMIT", "score": 0.9996925223139017}, {"start": 275, "end": 281, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998073748001712}, {"start": 294, "end": 305, "word": "apple trees", "entity_group": "VAR", "score": 0.9999610912057442}, {"start": 311, "end": 314, "word": "500", "entity_group": "PARAM", "score": 0.9995081113349983}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998893087458667}, {"start": 342, "end": 354, "word": "orange trees", "entity_group": "VAR", "score": 0.9999556509482448}, {"start": 360, "end": 363, "word": "450", "entity_group": "PARAM", "score": 0.9996803977900105}, {"start": 408, "end": 416, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1512669876", "document": "A pottery artist makes mugs and bowls from clay. Each mug takes 20 minutes to make while each bowl takes 30 minutes to make. In a week, the artist only has 1200 minutes available to do pottery. In addition, he only has enough clay to make 50 items total. If he makes a profit of $10 per mug and a profit of $15 per bowl, how many of each should he make to maximize his profit?", "order_mapping": {"mugs": 0, "bowls": 1, "mug": 0, "bowl": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mug": "10", "bowl": "15"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1200", "terms": {"mug": "20", "bowl": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "total", "limit": "50", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of mugs\n- y: Number of bowls\n\nObjective:\n- The pottery artist aims to maximize his profit. He makes a profit of $10 per mug and a profit of $15 per bowl. Therefore, the objective function is: Maximize 10x + 15y\n\nConstraints:\n- The artist only has 1200 minutes available to do pottery in a week. Each mug takes 20 minutes and each bowl takes 30 minutes, leading to the constraint: 20x + 30y <= 1200.\n- The artist only has enough clay to make 50 items total, resulting in the constraint: x + y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 15y\nConstraints:\n20x + 30y <= 1200\nx + y <= 50", "canonical": {"objective": [-10.0, -15.0], "constraints": [[20.0, 30.0, 1200.0], [1.0, 1.0, 50.0]]}, "solution": {"x": 0, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of mugs made: Mugs\n- Number of bowls made: Bowls\n\nConstraints:\n- Total time for making mugs and bowls should not exceed 1200 minutes (20 minutes per mug, 30 minutes per bowl):\n  20 * Mugs + 30 * Bowls <= 1200\n- Total number of items (mugs and bowls) should not exceed 50:\n  Mugs + Bowls <= 50\n\nObjective:\n- Maximize profit ($10 per mug and $15 per bowl):\n  10 * Mugs + 15 * Bowls\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMugs = intvar(0, 999999999)  # Number of mugs made\nBowls = intvar(0, 999999999)  # Number of bowls made\n\n# Constraints\nm = Model()\n\n# The artist only has 1200 minutes available per week:\nm += 20 * Mugs + 30 * Bowls <= 1200\n# The artist can only make a total of 50 items:\nm += Mugs + Bowls <= 50\n\n# Objective\n# Maximize profit ($10 per mug and $15 per bowl):\nm.maximize(10 * Mugs + 15 * Bowls)\n", "entities": [{"start": 23, "end": 27, "word": "mugs", "entity_group": "VAR", "score": 0.9978970220011979}, {"start": 32, "end": 37, "word": "bowls", "entity_group": "VAR", "score": 0.9986766334742767}, {"start": 55, "end": 58, "word": "mug", "entity_group": "VAR", "score": 0.9994021854759176}, {"start": 65, "end": 67, "word": "20", "entity_group": "PARAM", "score": 0.9996069316635954}, {"start": 95, "end": 99, "word": "bowl", "entity_group": "VAR", "score": 0.9989840964750629}, {"start": 106, "end": 108, "word": "30", "entity_group": "PARAM", "score": 0.9987328871518052}, {"start": 159, "end": 163, "word": "1200", "entity_group": "LIMIT", "score": 0.9997447205114792}, {"start": 172, "end": 181, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986848100215685}, {"start": 244, "end": 246, "word": "50", "entity_group": "LIMIT", "score": 0.9993002966246728}, {"start": 253, "end": 258, "word": "total", "entity_group": "CONST_DIR", "score": 0.9997665371055197}, {"start": 275, "end": 281, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999123850096461}, {"start": 287, "end": 289, "word": "10", "entity_group": "PARAM", "score": 0.9993157739094649}, {"start": 294, "end": 297, "word": "mug", "entity_group": "VAR", "score": 0.9968061568461344}, {"start": 304, "end": 310, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998049116059264}, {"start": 316, "end": 318, "word": "15", "entity_group": "PARAM", "score": 0.9989001011807224}, {"start": 323, "end": 327, "word": "bowl", "entity_group": "VAR", "score": 0.9988311982568902}, {"start": 365, "end": 373, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997495988115745}, {"start": 378, "end": 384, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999848175245612}]}
{"doc_id": "1195333780", "document": "A bakery makes chocolate and maple donuts. There is a daily demand of at least 50 chocolate donuts and at least 75 maple donuts. However the bakery can make at most 100 chocolate donuts and at most 150 maple donuts. They have a contract with a local grocery store and must make at least 200 donuts total of either type per day. If the profit per chocolate donut is $2 and the profit per maple donut is $3, how many of each should they make to maximize profit?", "order_mapping": {"chocolate": 0, "maple donuts": 1, "chocolate donuts": 0, "chocolate donut": 0, "maple donut": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"maple donut": "3", "chocolate donut": "2"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "50", "var": "chocolate donuts", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "75", "var": "maple donuts", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "chocolate donuts", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "maple donuts", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "200", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate donuts\n- y: Number of maple donuts\n\nObjective:\n- The bakery aims to maximize its profit. The profit per chocolate donut is $2 and the profit per maple donut is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- There is a daily demand of at least 50 chocolate donuts and at least 75 maple donuts, leading to the constraints: x >= 50 and y >= 75.\n- The bakery can make at most 100 chocolate donuts and at most 150 maple donuts, resulting in the constraints: x <= 100 and y <= 150.\n- The bakery must make at least 200 donuts total of either type per day, leading to the constraint: x + y >= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\nx >= 50\ny >= 75\nx <= 100\ny <= 150\nx + y >= 200", "canonical": {"objective": [-2.0, -3.0], "constraints": [[-1.0, 0.0, -50.0], [0.0, -1.0, -75.0], [1.0, 0.0, 100.0], [0.0, 1.0, 150.0], [-1.0, -1.0, -200.0]]}, "solution": {"x": 100, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate donuts made per day: ChocolateDonuts\n- Number of maple donuts made per day: MapleDonuts\n\nConstraints:\n- At least 50 chocolate donuts must be made per day:\n  ChocolateDonuts >= 50\n- At least 75 maple donuts must be made per day:\n  MapleDonuts >= 75\n- At most 100 chocolate donuts can be made per day:\n  ChocolateDonuts <= 100\n- At most 150 maple donuts can be made per day:\n  MapleDonuts <= 150\n- At least 200 donuts total must be made per day to fulfill the contract:\n  ChocolateDonuts + MapleDonuts >= 200\n\nObjective:\n- Maximize profit (2 dollars per chocolate donut, 3 dollars per maple donut):\n  2 * ChocolateDonuts + 3 * MapleDonuts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateDonuts = intvar(0, 999999999)  # Number of chocolate donuts made per day\nMapleDonuts = intvar(0, 999999999)  # Number of maple donuts made per day\n\n# Constraints\nm = Model()\n\n# Daily demand constraints\nm += ChocolateDonuts >= 50  # At least 50 chocolate donuts\nm += MapleDonuts >= 75  # At least 75 maple donuts\n\n# Production capacity constraints\nm += ChocolateDonuts <= 100  # At most 100 chocolate donuts\nm += MapleDonuts <= 150  # At most 150 maple donuts\n\n# Contract requirement\nm += ChocolateDonuts + MapleDonuts >= 200  # At least 200 donuts total\n\n# Objective\n# Maximize profit (2 dollars per chocolate donut, 3 dollars per maple donut):\nm.maximize(2 * ChocolateDonuts + 3 * MapleDonuts)\n", "entities": [{"start": 15, "end": 24, "word": "chocolate", "entity_group": "VAR", "score": 0.998819550044552}, {"start": 29, "end": 41, "word": "maple donuts", "entity_group": "VAR", "score": 0.9999890078993134}, {"start": 71, "end": 79, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982406010396409}, {"start": 80, "end": 82, "word": "50", "entity_group": "LIMIT", "score": 0.999462994979473}, {"start": 83, "end": 99, "word": "chocolate donuts", "entity_group": "VAR", "score": 0.9999626494415136}, {"start": 104, "end": 112, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998596684408967}, {"start": 113, "end": 115, "word": "75", "entity_group": "LIMIT", "score": 0.9992677828626599}, {"start": 116, "end": 128, "word": "maple donuts", "entity_group": "VAR", "score": 0.9999566965297948}, {"start": 159, "end": 166, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982584376066991}, {"start": 167, "end": 170, "word": "100", "entity_group": "LIMIT", "score": 0.9995303160171957}, {"start": 171, "end": 187, "word": "chocolate donuts", "entity_group": "VAR", "score": 0.9999534752285877}, {"start": 192, "end": 199, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988477004625117}, {"start": 200, "end": 203, "word": "150", "entity_group": "LIMIT", "score": 0.9989981796083468}, {"start": 204, "end": 216, "word": "maple donuts", "entity_group": "VAR", "score": 0.9999266291782917}, {"start": 281, "end": 289, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989091302627512}, {"start": 290, "end": 293, "word": "200", "entity_group": "LIMIT", "score": 0.9997187475966237}, {"start": 339, "end": 345, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280490187168}, {"start": 350, "end": 365, "word": "chocolate donut", "entity_group": "VAR", "score": 0.9999633675630445}, {"start": 371, "end": 372, "word": "2", "entity_group": "PARAM", "score": 0.9996143846214199}, {"start": 381, "end": 387, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350839611664}, {"start": 392, "end": 403, "word": "maple donut", "entity_group": "VAR", "score": 0.999960812759248}, {"start": 409, "end": 410, "word": "3", "entity_group": "PARAM", "score": 0.9996735503762209}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997620086430532}, {"start": 459, "end": 465, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368929248437}]}
{"doc_id": "414249544", "document": "A phone company makes regular phones and premium phones. Let's say they make x1 regular phones per day at a profit of $200 each and x2 premium phone per day at a profit of $300 each (x1 and x2 are both greater than or equal to 0). Note that the daily demand for regular phones is at most 20 and the daily demand for premium phones is at most 15. In addition, the company can only sell at most 30 phones total of either type per day. How many phones of each type should the company sell to maximize profit?", "order_mapping": {"regular phones": 0, "premium phones": 1, "premium phone": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular phones": "200", "premium phone": "300"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "20", "var": "regular phones", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "15", "var": "premium phones", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of regular phones produced and sold per day\n- x2: Number of premium phones produced and sold per day\n\nObjective:\n- The company aims to maximize its daily profit. The profit for each regular phone is $200 and for each premium phone is $300. Therefore, the objective function is: Maximize 200x1 + 300x2\n\nConstraints:\n- The daily demand for regular phones is at most 20, leading to the constraint: x1 <= 20.\n- The daily demand for premium phones is at most 15, leading to the constraint: x2 <= 15.\n- The company can only sell at most 30 phones total of either type per day, resulting in the constraint: x1 + x2 <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x1 + 300x2\nConstraints:\nx1 <= 20\nx2 <= 15\nx1 + x2 <= 30", "canonical": {"objective": [-200.0, -300.0], "constraints": [[1.0, 0.0, 20.0], [0.0, 1.0, 15.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 15, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of regular phones sold per day: RegularPhones\n- Number of premium phones sold per day: PremiumPhones\n\nConstraints:\n- Daily demand for regular phones is at most 20:\n  RegularPhones <= 20\n- Daily demand for premium phones is at most 15:\n  PremiumPhones <= 15\n- Company can only sell at most 30 phones total per day:\n  RegularPhones + PremiumPhones <= 30\n\nObjective:\n- Maximize profit (200 dollars profit per regular phone, 300 dollars profit per premium phone):\n  200 * RegularPhones + 300 * PremiumPhones\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularPhones = intvar(0, 999999999)  # Number of regular phones made per day\nPremiumPhones = intvar(0, 999999999)  # Number of premium phones made per day\n\n# Constraints\nm = Model()\n\n# Daily demand constraints\nm += RegularPhones <= 20  # At most 20 regular phones per day\nm += PremiumPhones <= 15  # At most 15 premium phones per day\n\n# Total phones sold per day should not exceed 30\nm += RegularPhones + PremiumPhones <= 30\n\n# Objective\n# Maximize profit (200 dollars per regular phone, 300 dollars per premium phone)\nm.maximize(200 * RegularPhones + 300 * PremiumPhones)\n", "entities": [{"start": 22, "end": 36, "word": "regular phones", "entity_group": "VAR", "score": 0.9999126501655149}, {"start": 41, "end": 55, "word": "premium phones", "entity_group": "VAR", "score": 0.999986882068057}, {"start": 82, "end": 96, "word": "regular phones", "entity_group": "VAR", "score": 0.9999103152114899}, {"start": 110, "end": 116, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993317317777702}, {"start": 122, "end": 125, "word": "200", "entity_group": "PARAM", "score": 0.999432762097804}, {"start": 138, "end": 151, "word": "premium phone", "entity_group": "VAR", "score": 0.9998952723437801}, {"start": 165, "end": 171, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9988804740312762}, {"start": 177, "end": 180, "word": "300", "entity_group": "PARAM", "score": 0.9994795017359122}, {"start": 269, "end": 283, "word": "regular phones", "entity_group": "VAR", "score": 0.9999494092295316}, {"start": 287, "end": 294, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976878248615371}, {"start": 295, "end": 297, "word": "20", "entity_group": "LIMIT", "score": 0.9995239402765783}, {"start": 323, "end": 337, "word": "premium phones", "entity_group": "VAR", "score": 0.9999343183256695}, {"start": 341, "end": 348, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971464339185386}, {"start": 349, "end": 351, "word": "15", "entity_group": "LIMIT", "score": 0.9996915323077141}, {"start": 394, "end": 401, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998740451470419}, {"start": 402, "end": 404, "word": "30", "entity_group": "LIMIT", "score": 0.9995798198032415}, {"start": 499, "end": 507, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994859155828364}, {"start": 508, "end": 514, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277417441317}]}
{"doc_id": "240605764", "document": "A cosmetics company makes low, medium, and high quality face wash. A low quality face wash contains 1 unit of rare ingredients and 4 units of water. A medium quality face wash contains 3 units of rare ingredients and 2 units of water. A high quality face wash contains 4 units of rare ingredients and 1 unit of water. The company has available 100 units of rare ingredients and 200 units of water. If the profit per low quality face wash is $3, the profit per medium quality face wash is $7, and the profit per high quality face wash is $9, how many of each should be made to maximize profits?", "order_mapping": {"low": 0, "medium": 1, "high quality": 2, "low quality": 0, "medium quality": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"low quality": "3", "medium quality": "7", "high quality": "9"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"low quality": "1", "medium quality": "3", "high quality": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"low quality": "4", "medium quality": "2", "high quality": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of low quality face wash produced\n- y: Number of medium quality face wash produced\n- z: Number of high quality face wash produced\n\nObjective:\n- The company aims to maximize its profits. The profit per low quality face wash is $3, the profit per medium quality face wash is $7, and the profit per high quality face wash is $9. Therefore, the objective function is: Maximize 3x + 7y + 9z\n\nConstraints:\n- The company has available 100 units of rare ingredients, and each type of face wash requires a certain amount of rare ingredients. The constraint for rare ingredients is: x + 3y + 4z <= 100.\n- The company has available 200 units of water, and each type of face wash requires a certain amount of water. The constraint for water is: 4x + 2y + z <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 7y + 9z\nConstraints:\nx + 3y + 4z <= 100\n4x + 2y + z <= 200", "canonical": {"objective": [-3.0, -7.0, -9.0], "constraints": [[1.0, 3.0, 4.0, 100.0], [4.0, 2.0, 1.0, 200.0]]}, "solution": {"x": 40, "y": 20, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of low quality face washes made: LowQuality\n- Number of medium quality face washes made: MediumQuality\n- Number of high quality face washes made: HighQuality\n\nConstraints:\n- The company has available 100 units of rare ingredients:\n  1 * LowQuality + 3 * MediumQuality + 4 * HighQuality <= 100\n- The company has available 200 units of water:\n  4 * LowQuality + 2 * MediumQuality + 1 * HighQuality <= 200\n\nObjective:\n- Maximize profits (3 dollars per low quality, 7 dollars per medium quality, 9 dollars per high quality face wash):\n  3 * LowQuality + 7 * MediumQuality + 9 * HighQuality\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLowQuality = intvar(0, 999999999)  # Number of low quality face washes made\nMediumQuality = intvar(0, 999999999)  # Number of medium quality face washes made\nHighQuality = intvar(0, 999999999)  # Number of high quality face washes made\n\n# Constraints\nm = Model()\n\n# The company has available 100 units of rare ingredients:\nm += 1 * LowQuality + 3 * MediumQuality + 4 * HighQuality <= 100\n# The company has available 200 units of water:\nm += 4 * LowQuality + 2 * MediumQuality + 1 * HighQuality <= 200\n\n# Objective\n# Maximize profits (3 dollars per low quality, 7 dollars per medium quality, 9 dollars per high quality face wash):\nm.maximize(3 * LowQuality + 7 * MediumQuality + 9 * HighQuality)\n", "entities": [{"start": 26, "end": 29, "word": "low", "entity_group": "VAR", "score": 0.9997010577422938}, {"start": 32, "end": 38, "word": "medium", "entity_group": "VAR", "score": 0.999767938611067}, {"start": 45, "end": 57, "word": "high quality", "entity_group": "VAR", "score": 0.9999882302332157}, {"start": 72, "end": 83, "word": "low quality", "entity_group": "VAR", "score": 0.9999544667902674}, {"start": 103, "end": 104, "word": "1", "entity_group": "PARAM", "score": 0.9996961265759778}, {"start": 134, "end": 135, "word": "4", "entity_group": "PARAM", "score": 0.9995614411863872}, {"start": 155, "end": 169, "word": "medium quality", "entity_group": "VAR", "score": 0.9999477088894801}, {"start": 189, "end": 190, "word": "3", "entity_group": "PARAM", "score": 0.9997273930189209}, {"start": 221, "end": 222, "word": "2", "entity_group": "PARAM", "score": 0.9996023607215546}, {"start": 242, "end": 254, "word": "high quality", "entity_group": "VAR", "score": 0.9997929672433612}, {"start": 274, "end": 275, "word": "4", "entity_group": "PARAM", "score": 0.9997223048121566}, {"start": 306, "end": 307, "word": "1", "entity_group": "PARAM", "score": 0.9988436479612163}, {"start": 340, "end": 349, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995800439347693}, {"start": 350, "end": 353, "word": "100", "entity_group": "LIMIT", "score": 0.9992824765106114}, {"start": 384, "end": 387, "word": "200", "entity_group": "LIMIT", "score": 0.9992997358788777}, {"start": 412, "end": 418, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998954780216787}, {"start": 423, "end": 434, "word": "low quality", "entity_group": "VAR", "score": 0.999979110619894}, {"start": 450, "end": 451, "word": "3", "entity_group": "PARAM", "score": 0.9991938043305358}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999310589732283}, {"start": 469, "end": 483, "word": "medium quality", "entity_group": "VAR", "score": 0.9999882872220053}, {"start": 499, "end": 500, "word": "7", "entity_group": "PARAM", "score": 0.9995126517748145}, {"start": 511, "end": 517, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998314664789462}, {"start": 522, "end": 534, "word": "high quality", "entity_group": "VAR", "score": 0.9999394705229147}, {"start": 550, "end": 551, "word": "9", "entity_group": "PARAM", "score": 0.9994649648026349}, {"start": 589, "end": 597, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998637086018425}, {"start": 598, "end": 605, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996057849593785}]}
{"doc_id": "-1162304095", "document": "A woman has $5000 to invest in her sisters' companies. She can invest in her younger sister's company and her elder sister's company. Each dollar invested in her younger sister's company yields a profit of $0.05 while each dollar invested in her elder sister's company yields a profit of $0.08. She wants to invest a minimum of 40% of her investment into her younger sister's company and at least $2000 in her elder sister's company. How much money should she invest in each to maximize her profit?", "order_mapping": {"younger sister": 0, "elder sister": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"elder sister": "0.08", "younger sister": "0.05"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "5000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "40%", "var": "younger sister", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2000", "var": "elder sister", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the younger sister's company\n- y: Dollars invested in the elder sister's company\n\nObjective:\n- The woman aims to maximize her profit. Each dollar invested in her younger sister's company yields a profit of $0.05, and each dollar invested in her elder sister's company yields a profit of $0.08. Therefore, the objective function is: Maximize 0.05x + 0.08y\n\nConstraints:\n- The woman has $5000 to invest, so the constraint is: x + y <= 5000.\n- She wants to invest a minimum of 40% of her investment into her younger sister's company, leading to the constraint: x >= 0.40(x + y).\n- She also wants to invest at least $2000 in her elder sister's company, resulting in the constraint: y >= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.08y\nConstraints:\nx + y <= 5000\nx >= 0.40(x + y)\ny >= 2000", "canonical": {"objective": [-0.05, -0.08], "constraints": [[1.0, 1.0, 5000.0], [-0.6, 0.4, 0.0], [0.0, -1.0, -2000.0]]}, "solution": {"x": 2000, "y": 3000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in younger sister's company: YoungerSisterInvestment\n- Amount invested in elder sister's company: ElderSisterInvestment\n\nConstraints:\n- Total investment should not exceed 5000 dollars:\n  YoungerSisterInvestment + ElderSisterInvestment <= 5000\n- At least 40% of the investment should go to the younger sister's company:\n  YoungerSisterInvestment >= 0.4 * (YoungerSisterInvestment + ElderSisterInvestment)\n- At least 2000 dollars should be invested in the elder sister's company:\n  ElderSisterInvestment >= 2000\n\nObjective:\n- Maximize profit (0.05 profit per dollar invested in younger sister's company, 0.08 profit per dollar invested in elder sister's company):\n  0.05 * YoungerSisterInvestment + 0.08 * ElderSisterInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nYoungerSisterInvestment = intvar(0, 999999999)  # Amount invested in younger sister's company\nElderSisterInvestment = intvar(0, 999999999)  # Amount invested in elder sister's company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $5000:\nm += YoungerSisterInvestment + ElderSisterInvestment <= 5000\n# At least 40% of the investment should go to the younger sister's company:\nm += YoungerSisterInvestment >= 0.4 * (YoungerSisterInvestment + ElderSisterInvestment)\n# At least $2000 should be invested in the elder sister's company:\nm += ElderSisterInvestment >= 2000\n\n# Objective\n# Maximize profit (0.05 profit per dollar invested in younger sister's company, 0.08 profit per dollar invested in elder sister's company):\nm.maximize(0.05 * YoungerSisterInvestment + 0.08 * ElderSisterInvestment)\n", "entities": [{"start": 8, "end": 11, "word": "has", "entity_group": "CONST_DIR", "score": 0.9959500371008932}, {"start": 14, "end": 18, "word": "5000", "entity_group": "LIMIT", "score": 0.999317371239305}, {"start": 80, "end": 94, "word": "younger sister", "entity_group": "VAR", "score": 0.9999643693901727}, {"start": 114, "end": 126, "word": "elder sister", "entity_group": "VAR", "score": 0.9999831682345292}, {"start": 168, "end": 182, "word": "younger sister", "entity_group": "VAR", "score": 0.9999669403577942}, {"start": 203, "end": 209, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999107369057691}, {"start": 215, "end": 219, "word": "0.05", "entity_group": "PARAM", "score": 0.9994937400427638}, {"start": 254, "end": 266, "word": "elder sister", "entity_group": "VAR", "score": 0.9999701609943114}, {"start": 287, "end": 293, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995094744445447}, {"start": 299, "end": 303, "word": "0.08", "entity_group": "PARAM", "score": 0.9991235685531608}, {"start": 328, "end": 335, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9937691673970948}, {"start": 339, "end": 343, "word": "40 %", "entity_group": "LIMIT", "score": 0.930689615825045}, {"start": 371, "end": 385, "word": "younger sister", "entity_group": "VAR", "score": 0.9999820840443626}, {"start": 401, "end": 409, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9963419587288863}, {"start": 412, "end": 416, "word": "2000", "entity_group": "LIMIT", "score": 0.9983784463700185}, {"start": 424, "end": 436, "word": "elder sister", "entity_group": "VAR", "score": 0.9999710886080758}, {"start": 494, "end": 502, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994802415117818}, {"start": 507, "end": 513, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999425846280965}]}
{"doc_id": "1343830030", "document": "A boy buys and sells two types of sneakers. Brand A sneakers cost him $100 each and Brand B sneakers cost his $150 each. He can spend a total of $2000. He can sell at most 15 sneakers total. If the profit per Brand A sneaker is $50 and the profit per Brand B sneaker is $75, how many of each should he buy and sell to maximize his profit?", "order_mapping": {"Brand A sneakers": 0, "Brand B sneakers": 1, "Brand A sneaker": 0, "Brand B sneaker": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Brand A sneaker": "50", "Brand B sneaker": "75"}}, "const_declarations": [{"type": "linear", "direction": "can spend a total", "limit": "2000", "terms": {"Brand A sneakers": "100", "Brand B sneakers": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "15", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Brand A sneakers bought and sold\n- y: Number of Brand B sneakers bought and sold\n\nObjective:\n- The boy aims to maximize his profit. The profit per Brand A sneaker is $50 and the profit per Brand B sneaker is $75. Therefore, the objective function is: Maximize 50x + 75y\n\nConstraints:\n- The total amount he can spend is $2000, so the constraint is: 100x + 150y <= 2000.\n- He can sell at most 15 sneakers in total, leading to the constraint: x + y <= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 75y\nConstraints:\n100x + 150y <= 2000\nx + y <= 15", "canonical": {"objective": [-50.0, -75.0], "constraints": [[100.0, 150.0, 2000.0], [1.0, 1.0, 15.0]]}, "solution": {"x": 5, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of Brand A sneakers bought and sold: BrandA\n- Number of Brand B sneakers bought and sold: BrandB\n\nConstraints:\n- The total cost of buying Brand A and Brand B sneakers should not exceed $2000:\n  100 * BrandA + 150 * BrandB <= 2000\n- He can sell at most 15 sneakers total:\n  BrandA + BrandB <= 15\n\nObjective:\n- Maximize profit ($50 profit per Brand A sneaker, $75 profit per Brand B sneaker):\n  50 * BrandA + 75 * BrandB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBrandA = intvar(0, 999999999)  # Number of Brand A sneakers bought and sold\nBrandB = intvar(0, 999999999)  # Number of Brand B sneakers bought and sold\n\n# Constraints\nm = Model()\n\n# The total cost of buying Brand A and Brand B sneakers should not exceed $2000:\nm += 100 * BrandA + 150 * BrandB <= 2000\n# He can sell at most 15 sneakers total:\nm += BrandA + BrandB <= 15\n\n# Objective\n# Maximize profit ($50 profit per Brand A sneaker, $75 profit per Brand B sneaker):\nm.maximize(50 * BrandA + 75 * BrandB)\n", "entities": [{"start": 45, "end": 61, "word": "Brand A sneakers", "entity_group": "VAR", "score": 0.9996151038586167}, {"start": 73, "end": 76, "word": "100", "entity_group": "PARAM", "score": 0.9991132207196994}, {"start": 86, "end": 102, "word": "Brand B sneakers", "entity_group": "VAR", "score": 0.9990457782735217}, {"start": 114, "end": 117, "word": "150", "entity_group": "PARAM", "score": 0.9995993001725462}, {"start": 128, "end": 131, "word": "can", "entity_group": "CONST_DIR", "score": 0.9748528383287499}, {"start": 138, "end": 145, "word": "a total", "entity_group": "CONST_DIR", "score": 0.18072414690871158}, {"start": 151, "end": 155, "word": "2000", "entity_group": "LIMIT", "score": 0.9987743585978522}, {"start": 170, "end": 177, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988037605552366}, {"start": 178, "end": 180, "word": "15", "entity_group": "LIMIT", "score": 0.9995582628687328}, {"start": 205, "end": 211, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998660985328357}, {"start": 216, "end": 231, "word": "Brand A sneaker", "entity_group": "VAR", "score": 0.9995587225800026}, {"start": 237, "end": 239, "word": "50", "entity_group": "PARAM", "score": 0.9994794707483907}, {"start": 248, "end": 254, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999311844475761}, {"start": 259, "end": 274, "word": "Brand B sneaker", "entity_group": "VAR", "score": 0.9985697336534473}, {"start": 280, "end": 282, "word": "75", "entity_group": "PARAM", "score": 0.9995503383383803}, {"start": 328, "end": 336, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991509220316331}, {"start": 341, "end": 347, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998330376543432}]}
{"doc_id": "1617817849", "document": "A summer painting company employs students earning $200 a week and full-time employees earning $500 a week. The company needs at least 100 painters of whom at 30 must be full-time employees. In addition, to make sure there is enough experience, the number of full-time employees should be at least half the number of students. Formulate a LP to minimize the wage bill.", "order_mapping": {"students": 0, "full-time employees": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"students": "200", "full-time employees": "500"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "100", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at", "limit": "30", "var": "full-time employees", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "full-time employees", "direction": "at least", "param": "half", "y_var": "students", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of students employed\n- y: Number of full-time employees\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both students and full-time employees. Given that students earn $200 per week and full-time employees earn $500 per week, the objective function is: Minimize 200x + 500y\n\nConstraints:\n- The company needs at least 100 painters in total, so the constraint is: x + y >= 100.\n- At least 30 of the painters must be full-time employees, leading to the constraint: y >= 30.\n- To ensure enough experience, the number of full-time employees should be at least half the number of students, resulting in the constraint: y >= 0.5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 200x + 500y\nConstraints:\nx + y >= 100\ny >= 30\ny >= 0.5x", "canonical": {"objective": [200.0, 500.0], "constraints": [[-1.0, -1.0, -100.0], [0.0, -1.0, -30.0], [0.5, -1.0, 0.0]]}, "solution": {"x": 66, "y": 34}, "pseudo_model": "\nDecision Variables:\n- Number of students employed: Students\n- Number of full-time employees employed: FullTimeEmployees\n\nConstraints:\n- Total number of painters (students + full-time employees) should be at least 100:\n  Students + FullTimeEmployees >= 100\n- At least 30 painters must be full-time employees:\n  FullTimeEmployees >= 30\n- The number of full-time employees should be at least half the number of students:\n  FullTimeEmployees >= 0.5 * Students\n\nObjective:\n- Minimize the wage bill (Students earn $200 a week, Full-time employees earn $500 a week):\n  200 * Students + 500 * FullTimeEmployees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStudents = intvar(0, 999999999)  # Number of students employed\nFullTimeEmployees = intvar(0, 999999999)  # Number of full-time employees employed\n\n# Constraints\nm = Model()\n\n# The company needs at least 100 painters in total:\nm += Students + FullTimeEmployees >= 100\n# At least 30 must be full-time employees:\nm += FullTimeEmployees >= 30\n# The number of full-time employees should be at least half the number of students:\nm += FullTimeEmployees >= 0.5 * Students\n\n# Objective\n# Minimize the wage bill (Students earn $200 a week, Full-time employees earn $500 a week):\nm.minimize(200 * Students + 500 * FullTimeEmployees)\n", "entities": [{"start": 34, "end": 42, "word": "students", "entity_group": "VAR", "score": 0.9990225997626281}, {"start": 43, "end": 50, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9770898205986907}, {"start": 53, "end": 56, "word": "200", "entity_group": "PARAM", "score": 0.999380528948087}, {"start": 68, "end": 89, "word": "full - time employees", "entity_group": "VAR", "score": 0.9992303899233791}, {"start": 90, "end": 97, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9964558591587799}, {"start": 100, "end": 103, "word": "500", "entity_group": "PARAM", "score": 0.9996786308367479}, {"start": 131, "end": 139, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989759820183788}, {"start": 140, "end": 143, "word": "100", "entity_group": "LIMIT", "score": 0.9997076801604218}, {"start": 161, "end": 163, "word": "at", "entity_group": "CONST_DIR", "score": 0.9963572760287226}, {"start": 164, "end": 166, "word": "30", "entity_group": "LIMIT", "score": 0.9971801896873381}, {"start": 175, "end": 196, "word": "full - time employees", "entity_group": "VAR", "score": 0.9991091452224763}, {"start": 269, "end": 290, "word": "full - time employees", "entity_group": "VAR", "score": 0.9987396598060108}, {"start": 301, "end": 309, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9972604510651623}, {"start": 310, "end": 314, "word": "half", "entity_group": "PARAM", "score": 0.9948121583663531}, {"start": 329, "end": 337, "word": "students", "entity_group": "VAR", "score": 0.9997888627839344}, {"start": 358, "end": 366, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986735341444246}, {"start": 367, "end": 380, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.6142008559448296}]}
{"doc_id": "1171420904", "document": "A farmer has 50 acres of land to grow oats and flaxseed. He must grow at least 5 acres of oats and at least 8 acres of flaxseed. Although oats are easier to grow, he can only grow at most 2 times the amount of oats as flaxseed. If the profit per acre of oats is $500 and the profit per acre of flaxseed is $400, how many acres of each should he grow to make maximum profit?", "order_mapping": {"oats": 0, "flaxseed.": 1, "flaxseed": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"oats": "500", "flaxseed": "400"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "oats", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "8", "var": "flaxseed.", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "oats", "direction": "at most", "param": "2", "y_var": "flaxseed", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of oats\n- y: Acres of flaxseed\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of oats is $500 and the profit per acre of flaxseed is $400. Therefore, the objective function is: Maximize 500x + 400y\n\nConstraints:\n- The farmer has 50 acres of land available for growing oats and flaxseed, leading to the constraint: x + y <= 50.\n- The farmer must grow at least 5 acres of oats, resulting in the constraint: x >= 5.\n- The farmer must grow at least 8 acres of flaxseed, leading to the constraint: y >= 8.\n- The farmer can only grow at most 2 times the amount of oats as flaxseed, resulting in the constraint: x <= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 400y\nConstraints:\nx + y <= 50\nx >= 5\ny >= 8\nx <= 2y", "canonical": {"objective": [-500.0, -400.0], "constraints": [[1.0, 1.0, 50.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -8.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 33, "y": 17}, "pseudo_model": "\nDecision Variables:\n- Number of acres of oats grown: Oats\n- Number of acres of flaxseed grown: Flaxseed\n\nConstraints:\n- Total acres used should not exceed 50:\n  Oats + Flaxseed <= 50\n- At least 5 acres of oats should be grown:\n  Oats >= 5\n- At least 8 acres of flaxseed should be grown:\n  Flaxseed >= 8\n- Can only grow at most 2 times the amount of oats as flaxseed:\n  Oats <= 2 * Flaxseed\n\nObjective:\n- Maximize profit (500 dollars per acre of oats, 400 dollars per acre of flaxseed):\n  500 * Oats + 400 * Flaxseed\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOats = intvar(0, 999999999)  # Number of acres of oats\nFlaxseed = intvar(0, 999999999)  # Number of acres of flaxseed\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 50:\nm += Oats + Flaxseed <= 50\n# At least 5 acres of oats should be grown:\nm += Oats >= 5\n# At least 8 acres of flaxseed should be grown:\nm += Flaxseed >= 8\n# Can only grow at most 2 times the amount of oats as flaxseed:\nm += Oats <= 2 * Flaxseed\n\n# Objective\n# Maximize profit (500 dollars per acre of oats, 400 dollars per acre of flaxseed):\nm.maximize(500 * Oats + 400 * Flaxseed)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9972709503473426}, {"start": 13, "end": 15, "word": "50", "entity_group": "LIMIT", "score": 0.9986957581564966}, {"start": 38, "end": 42, "word": "oats", "entity_group": "VAR", "score": 0.998705242531122}, {"start": 47, "end": 55, "word": "flaxseed", "entity_group": "VAR", "score": 0.9996011866967731}, {"start": 71, "end": 79, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991762599818522}, {"start": 80, "end": 81, "word": "5", "entity_group": "LIMIT", "score": 0.9997484067860537}, {"start": 91, "end": 95, "word": "oats", "entity_group": "VAR", "score": 0.9990549922242102}, {"start": 100, "end": 108, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992673092271915}, {"start": 109, "end": 110, "word": "8", "entity_group": "LIMIT", "score": 0.9997738912310679}, {"start": 120, "end": 128, "word": "flaxseed", "entity_group": "VAR", "score": 0.9997769550931327}, {"start": 140, "end": 144, "word": "oats", "entity_group": "VAR", "score": 0.9993386676183789}, {"start": 183, "end": 190, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9970901277558594}, {"start": 191, "end": 192, "word": "2", "entity_group": "PARAM", "score": 0.9981422624883054}, {"start": 213, "end": 217, "word": "oats", "entity_group": "VAR", "score": 0.9995719717168582}, {"start": 221, "end": 229, "word": "flaxseed", "entity_group": "VAR", "score": 0.9996948323207925}, {"start": 239, "end": 245, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998918056796648}, {"start": 258, "end": 262, "word": "oats", "entity_group": "VAR", "score": 0.9993437156226025}, {"start": 268, "end": 271, "word": "500", "entity_group": "PARAM", "score": 0.9993037416301321}, {"start": 280, "end": 286, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999209539261528}, {"start": 299, "end": 307, "word": "flaxseed", "entity_group": "VAR", "score": 0.999209886826081}, {"start": 313, "end": 316, "word": "400", "entity_group": "PARAM", "score": 0.9995553515928307}, {"start": 365, "end": 372, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9945818867887669}, {"start": 373, "end": 379, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999428419275046}]}
{"doc_id": "-1533753278", "document": "A costume store sells police officer costumes and fireman costumes. It takes 10 minutes to make a police officer costume and 12 minutes to make a fireman costume. Due to popularity, the store must make at least 3 times as many fireman costumes as police officer costumes. The store has 3000 minutes available to make costumes. If the profit per police officer costume is $10 and the profit per fireman costume is $12, how many of each should they make to maximize profit?", "order_mapping": {"police officer costumes": 0, "fireman costumes": 1, "police officer costume": 0, "fireman costume": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"police officer costume": "10", "fireman costume": "12"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"police officer costume": "10", "fireman costume": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "fireman costumes", "direction": "at least", "param": "3", "y_var": "police officer costumes", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of police officer costumes\n- y: Number of fireman costumes\n\nObjective:\n- The store aims to maximize its profit. The profit per police officer costume is $10 and the profit per fireman costume is $12. Therefore, the objective function is: Maximize 10x + 12y\n\nConstraints:\n- The store has 3000 minutes available to make costumes. It takes 10 minutes to make a police officer costume and 12 minutes to make a fireman costume, leading to the constraint: 10x + 12y <= 3000.\n- Due to popularity, the store must make at least 3 times as many fireman costumes as police officer costumes, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 12y\nConstraints:\n10x + 12y <= 3000\ny >= 3x", "canonical": {"objective": [-10.0, -12.0], "constraints": [[10.0, 12.0, 3000.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 0, "y": 250}, "pseudo_model": "\nDecision Variables:\n- Number of police officer costumes made: PoliceOfficerCostumes\n- Number of fireman costumes made: FiremanCostumes\n\nConstraints:\n- Total time to make costumes should not exceed 3000 minutes (10 minutes per police officer costume, 12 minutes per fireman costume):\n  10 * PoliceOfficerCostumes + 12 * FiremanCostumes <= 3000\n- At least 3 times as many fireman costumes as police officer costumes should be made:\n  FiremanCostumes >= 3 * PoliceOfficerCostumes\n\nObjective:\n- Maximize profit ($10 per police officer costume, $12 per fireman costume):\n  10 * PoliceOfficerCostumes + 12 * FiremanCostumes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPoliceOfficerCostumes = intvar(0, 999999999)  # Number of police officer costumes made\nFiremanCostumes = intvar(0, 999999999)  # Number of fireman costumes made\n\n# Constraints\nm = Model()\n\n# The store has 3000 minutes available to make costumes:\nm += 10 * PoliceOfficerCostumes + 12 * FiremanCostumes <= 3000\n# The store must make at least 3 times as many fireman costumes as police officer costumes:\nm += FiremanCostumes >= 3 * PoliceOfficerCostumes\n\n# Objective\n# Maximize profit ($10 per police officer costume, $12 per fireman costume):\nm.maximize(10 * PoliceOfficerCostumes + 12 * FiremanCostumes)\n", "entities": [{"start": 22, "end": 45, "word": "police officer costumes", "entity_group": "VAR", "score": 0.9992416536533004}, {"start": 50, "end": 66, "word": "fireman costumes", "entity_group": "VAR", "score": 0.9999717847654083}, {"start": 78, "end": 80, "word": "10", "entity_group": "PARAM", "score": 0.9996206935882668}, {"start": 99, "end": 121, "word": "police officer costume", "entity_group": "VAR", "score": 0.9979347006936239}, {"start": 126, "end": 128, "word": "12", "entity_group": "PARAM", "score": 0.9996209597523257}, {"start": 147, "end": 162, "word": "fireman costume", "entity_group": "VAR", "score": 0.999764919542055}, {"start": 205, "end": 213, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981823499062021}, {"start": 214, "end": 215, "word": "3", "entity_group": "PARAM", "score": 0.9979203614118118}, {"start": 230, "end": 246, "word": "fireman costumes", "entity_group": "VAR", "score": 0.999967737154301}, {"start": 250, "end": 273, "word": "police officer costumes", "entity_group": "VAR", "score": 0.9994949287072359}, {"start": 290, "end": 294, "word": "3000", "entity_group": "LIMIT", "score": 0.9994392571490633}, {"start": 303, "end": 312, "word": "available", "entity_group": "CONST_DIR", "score": 0.9970841830041105}, {"start": 339, "end": 345, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998823803797697}, {"start": 350, "end": 372, "word": "police officer costume", "entity_group": "VAR", "score": 0.9993429472599878}, {"start": 378, "end": 380, "word": "10", "entity_group": "PARAM", "score": 0.9992972348557281}, {"start": 389, "end": 395, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384718982396}, {"start": 400, "end": 415, "word": "fireman costume", "entity_group": "VAR", "score": 0.9999447164715614}, {"start": 421, "end": 423, "word": "12", "entity_group": "PARAM", "score": 0.9996757917060998}, {"start": 463, "end": 471, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997620086430532}, {"start": 472, "end": 478, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368929248437}]}
{"doc_id": "1885129178", "document": "John needs to take supplementation for his calcium and iron deficiency. He needs to get at least 15 units of calcium and 20 units of iron everyday. In order to do so, he can buy pills named SD and LD. Each SD pill contains 1 unit of calcium and 4 units of iron. Each LD pill contains 2 units of calcium and 1 unit of iron. If the cost per SD pill is $1 and the cost per LD pill is $1.50, how many of each should he buy to minimize his cost?", "order_mapping": {"SD": 0, "LD": 1, "SD pill": 0, "LD pill": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"LD pill": "1.50", "SD pill": "1"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "15", "terms": {"SD pill": "1", "LD pill": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"SD pill": "4", "LD pill": "1"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of SD pills\n- y: Number of LD pills\n\nObjective:\n- John wants to minimize his cost. The cost per SD pill is $1 and the cost per LD pill is $1.50. Therefore, the objective function is: Minimize x + 1.5y\n\nConstraints:\n- John needs to get at least 15 units of calcium and 20 units of iron every day. Each SD pill contains 1 unit of calcium and 4 units of iron, and each LD pill contains 2 units of calcium and 1 unit of iron. This leads to the constraints: x + 2y >= 15 (calcium) and 4x + y >= 20 (iron).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 1.5y\nConstraints:\nx + 2y >= 15\n4x + y >= 20", "canonical": {"objective": [1.0, 1.5], "constraints": [[-1.0, -2.0, -15.0], [-4.0, -1.0, -20.0]]}, "solution": {"x": 5, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of SD pills bought: SD\n- Number of LD pills bought: LD\n\nConstraints:\n- To meet the calcium requirement (at least 15 units):\n  1 * SD + 2 * LD >= 15\n- To meet the iron requirement (at least 20 units):\n  4 * SD + 1 * LD >= 20\n\nObjective:\n- Minimize the total cost (SD pill costs $1, LD pill costs $1.50):\n  1 * SD + 1.5 * LD\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSD = intvar(0, 999999999)  # Number of SD pills\nLD = intvar(0, 999999999)  # Number of LD pills\n\n# Constraints\nm = Model()\n\n# John needs to get at least 15 units of calcium everyday:\nm += 1 * SD + 2 * LD >= 15\n# John needs to get at least 20 units of iron everyday:\nm += 4 * SD + 1 * LD >= 20\n\n# Objective\n# Minimize cost (SD pill costs $1, LD pill costs $1.50):\nm.minimize(1 * SD + 1.5 * LD)\n", "entities": [{"start": 89, "end": 97, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992668535326622}, {"start": 98, "end": 100, "word": "15", "entity_group": "LIMIT", "score": 0.9996591601166676}, {"start": 122, "end": 124, "word": "20", "entity_group": "LIMIT", "score": 0.9996531718215705}, {"start": 193, "end": 195, "word": "SD", "entity_group": "VAR", "score": 0.9986352718355272}, {"start": 200, "end": 202, "word": "LD", "entity_group": "VAR", "score": 0.9996416027289696}, {"start": 210, "end": 217, "word": "SD pill", "entity_group": "VAR", "score": 0.9999764295178579}, {"start": 227, "end": 228, "word": "1", "entity_group": "PARAM", "score": 0.999219032750743}, {"start": 249, "end": 250, "word": "4", "entity_group": "PARAM", "score": 0.9997044352925427}, {"start": 272, "end": 279, "word": "LD pill", "entity_group": "VAR", "score": 0.9999801395350689}, {"start": 289, "end": 290, "word": "2", "entity_group": "PARAM", "score": 0.9997218721753927}, {"start": 312, "end": 313, "word": "1", "entity_group": "PARAM", "score": 0.9993709614509515}, {"start": 336, "end": 340, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9991174432466305}, {"start": 345, "end": 352, "word": "SD pill", "entity_group": "VAR", "score": 0.9999453947545778}, {"start": 358, "end": 359, "word": "1", "entity_group": "PARAM", "score": 0.9994926997001392}, {"start": 368, "end": 372, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989644965182657}, {"start": 377, "end": 384, "word": "LD pill", "entity_group": "VAR", "score": 0.9999419739935674}, {"start": 390, "end": 394, "word": "1.50", "entity_group": "PARAM", "score": 0.9996627966049652}, {"start": 431, "end": 439, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994779644836214}, {"start": 444, "end": 448, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987566476512164}]}
{"doc_id": "-1550725342", "document": "An engineering company has new grad engineers earning $1000 a week and senior engineers earning $3000 a week. The weekly wage bill must be kept below $100000. The projects require a minimum of 50 engineers of whom at least 10 must be senior engineers. In addition, the number of senior engineers should be at least a third the number of new grad engineers. Formulate a LP to minimize the wage bill.", "order_mapping": {"new grad engineers": 0, "senior engineers": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"new grad engineers": "1000", "senior engineers": "3000"}}, "const_declarations": [{"type": "linear", "direction": "below", "limit": "100000", "terms": {"new grad engineers": "1000", "senior engineers": "3000"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "senior engineers", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "senior engineers", "direction": "at least", "param": "third", "y_var": "new grad engineers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of new grad engineers\n- y: Number of senior engineers\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both new grad and senior engineers. Given that new grad engineers earn $1000 per week and senior engineers earn $3000 per week, the objective function is: Minimize 1000x + 3000y\n\nConstraints:\n- The weekly wage bill must be kept below $100000, leading to the constraint: 1000x + 3000y <= 100000.\n- The projects require a minimum of 50 engineers, forming the constraint: x + y >= 50.\n- At least 10 engineers must be senior, leading to the constraint: y >= 10.\n- The number of senior engineers should be at least a third the number of new grad engineers, resulting in the constraint: y >= 1/3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1000x + 3000y\nConstraints:\n1000x + 3000y <= 100000\nx + y >= 50\ny >= 10\ny >= 1/3x", "canonical": {"objective": [1000.0, 3000.0], "constraints": [[1000.0, 3000.0, 100000.0], [-1.0, -1.0, -50.0], [0.0, -1.0, -10.0], [0.3333333333333333, -1.0, 0.0]]}, "solution": {"x": 37, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of new grad engineers: NewGradEngineers\n- Number of senior engineers: SeniorEngineers\n\nConstraints:\n- Weekly wage bill should be below $100000:\n  1000 * NewGradEngineers + 3000 * SeniorEngineers <= 100000\n- Total number of engineers should be at least 50:\n  NewGradEngineers + SeniorEngineers >= 50\n- At least 10 senior engineers:\n  SeniorEngineers >= 10\n- Number of senior engineers should be at least a third of the number of new grad engineers:\n  SeniorEngineers >= 1/3 * NewGradEngineers\n\nObjective:\n- Minimize the wage bill:\n  1000 * NewGradEngineers + 3000 * SeniorEngineers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewGradEngineers = intvar(0, 999999999)  # Number of new grad engineers\nSeniorEngineers = intvar(0, 999999999)  # Number of senior engineers\n\n# Constraints\nm = Model()\n\n# The weekly wage bill must be kept below $100000:\nm += 1000 * NewGradEngineers + 3000 * SeniorEngineers <= 100000\n# The projects require a minimum of 50 engineers:\nm += NewGradEngineers + SeniorEngineers >= 50\n# At least 10 must be senior engineers:\nm += SeniorEngineers >= 10\n# The number of senior engineers should be at least a third the number of new grad engineers:\nm += SeniorEngineers >= (1/3) * NewGradEngineers\n\n# Objective\n# Minimize the wage bill:\nm.minimize(1000 * NewGradEngineers + 3000 * SeniorEngineers)\n", "entities": [{"start": 27, "end": 45, "word": "new grad engineers", "entity_group": "VAR", "score": 0.9981991342684116}, {"start": 46, "end": 53, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9821771828064089}, {"start": 56, "end": 60, "word": "1000", "entity_group": "PARAM", "score": 0.9996345285325622}, {"start": 72, "end": 88, "word": "senior engineers", "entity_group": "VAR", "score": 0.9999309288722078}, {"start": 89, "end": 96, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9962363079625853}, {"start": 99, "end": 103, "word": "3000", "entity_group": "PARAM", "score": 0.9996804800727539}, {"start": 147, "end": 152, "word": "below", "entity_group": "CONST_DIR", "score": 0.9922067877611408}, {"start": 155, "end": 161, "word": "100000", "entity_group": "LIMIT", "score": 0.9996393389303052}, {"start": 187, "end": 194, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9983909252709968}, {"start": 198, "end": 200, "word": "50", "entity_group": "LIMIT", "score": 0.9997207314681441}, {"start": 219, "end": 227, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985171080322437}, {"start": 228, "end": 230, "word": "10", "entity_group": "LIMIT", "score": 0.999548845927021}, {"start": 239, "end": 255, "word": "senior engineers", "entity_group": "VAR", "score": 0.999920944597275}, {"start": 286, "end": 302, "word": "senior engineers", "entity_group": "VAR", "score": 0.9999284889869196}, {"start": 313, "end": 321, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980964392876926}, {"start": 324, "end": 329, "word": "third", "entity_group": "PARAM", "score": 0.9971443457257542}, {"start": 344, "end": 362, "word": "new grad engineers", "entity_group": "VAR", "score": 0.9978134431707019}, {"start": 383, "end": 391, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9991499436501636}, {"start": 392, "end": 405, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.7256832506926977}]}
{"doc_id": "-959862663", "document": "A store sells two tropical fruit bowls. The small bowl contains 3 units of kiwi, 2 units of mango, and 5 units of pineapple. The large bowl contains 5 units of kiwi, 4 units of mango, and 8 units of pineapple. The store has available 100 units of kiwi, 120 units of mango, and 150 units of pineapple. If the profit per small bowl is $5 and the profit per large bowl is $8, how many of each should they sell to maximize profit?", "order_mapping": {"small bowl": 0, "large bowl": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large bowl": "8", "small bowl": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"small bowl": "3", "large bowl": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "120", "terms": {"small bowl": "2", "large bowl": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "150", "terms": {"small bowl": "5", "large bowl": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small bowls sold\n- y: Number of large bowls sold\n\nObjective:\n- The store aims to maximize its profit. The profit per small bowl is $5 and the profit per large bowl is $8. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- The store has 100 units of kiwi available, leading to the constraint: 3x + 5y <= 100.\n- The store has 120 units of mango available, leading to the constraint: 2x + 4y <= 120.\n- The store has 150 units of pineapple available, leading to the constraint: 5x + 8y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\n3x + 5y <= 100\n2x + 4y <= 120\n5x + 8y <= 150", "canonical": {"objective": [-5.0, -8.0], "constraints": [[3.0, 5.0, 100.0], [2.0, 4.0, 120.0], [5.0, 8.0, 150.0]]}, "solution": {"x": 30, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of small bowls sold: SmallBowl\n- Number of large bowls sold: LargeBowl\n\nConstraints:\n- Kiwi constraint (100 units available):\n  3 * SmallBowl + 5 * LargeBowl <= 100\n- Mango constraint (120 units available):\n  2 * SmallBowl + 4 * LargeBowl <= 120\n- Pineapple constraint (150 units available):\n  5 * SmallBowl + 8 * LargeBowl <= 150\n\nObjective:\n- Maximize profit (5 dollars per small bowl, 8 dollars per large bowl):\n  5 * SmallBowl + 8 * LargeBowl\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBowl = intvar(0, 999999999)  # Number of small bowls sold\nLargeBowl = intvar(0, 999999999)  # Number of large bowls sold\n\n# Constraints\nm = Model()\n\n# The store has available 100 units of kiwi:\nm += 3 * SmallBowl + 5 * LargeBowl <= 100\n# The store has available 120 units of mango:\nm += 2 * SmallBowl + 4 * LargeBowl <= 120\n# The store has available 150 units of pineapple:\nm += 5 * SmallBowl + 8 * LargeBowl <= 150\n\n# Objective\n# Maximize profit (5 dollars per small bowl, 8 dollars per large bowl):\nm.maximize(5 * SmallBowl + 8 * LargeBowl)\n", "entities": [{"start": 45, "end": 55, "word": "small bowl", "entity_group": "VAR", "score": 0.9999315167172156}, {"start": 65, "end": 66, "word": "3", "entity_group": "PARAM", "score": 0.9996321596259662}, {"start": 83, "end": 84, "word": "2", "entity_group": "PARAM", "score": 0.9997351497897146}, {"start": 106, "end": 107, "word": "5", "entity_group": "PARAM", "score": 0.999407521297281}, {"start": 133, "end": 143, "word": "large bowl", "entity_group": "VAR", "score": 0.9999196532662887}, {"start": 153, "end": 154, "word": "5", "entity_group": "PARAM", "score": 0.9996755285333515}, {"start": 171, "end": 172, "word": "4", "entity_group": "PARAM", "score": 0.9997351722048027}, {"start": 194, "end": 195, "word": "8", "entity_group": "PARAM", "score": 0.9994077078482746}, {"start": 231, "end": 240, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987353469719052}, {"start": 241, "end": 244, "word": "100", "entity_group": "LIMIT", "score": 0.9993941884927613}, {"start": 261, "end": 264, "word": "120", "entity_group": "LIMIT", "score": 0.9997548426062323}, {"start": 286, "end": 289, "word": "150", "entity_group": "LIMIT", "score": 0.9992460344130795}, {"start": 318, "end": 324, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999683656134032}, {"start": 329, "end": 339, "word": "small bowl", "entity_group": "VAR", "score": 0.9997467713292708}, {"start": 345, "end": 346, "word": "5", "entity_group": "PARAM", "score": 0.9994604646145202}, {"start": 355, "end": 361, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999311801079392}, {"start": 366, "end": 376, "word": "large bowl", "entity_group": "VAR", "score": 0.9997325469572074}, {"start": 382, "end": 383, "word": "8", "entity_group": "PARAM", "score": 0.9996338548356901}, {"start": 423, "end": 431, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843680345001}, {"start": 432, "end": 438, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368872053741}]}
{"doc_id": "-240598758", "document": "A gardener has 50 acres available for growing lavender and tulips. The gardener must grow at least 5 acres of lavender and at least 8 acres of tulips. Even though lavenders sell better, the gardener can grow at most twice the amount of lavender as tulips. If the profit per acre of lavender is $250 and the profit per acre of tulips is $200, how many acres of each should be grown to maximize profit?", "order_mapping": {"lavender": 0, "tulips": 1, "lavenders": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lavender": "250", "tulips": "200"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "lavender", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "8", "var": "tulips", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "lavender", "direction": "at most", "param": "twice", "y_var": "tulips", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of lavender\n- y: Acres of tulips\n\nObjective:\n- The gardener aims to maximize profit. The profit per acre of lavender is $250 and the profit per acre of tulips is $200. Therefore, the objective function is: Maximize 250x + 200y\n\nConstraints:\n- The gardener has 50 acres available for growing, so the constraint is: x + y <= 50.\n- At least 5 acres of lavender must be grown, leading to the constraint: x >= 5.\n- At least 8 acres of tulips must be grown, resulting in the constraint: y >= 8.\n- The gardener can grow at most twice the amount of lavender as tulips, leading to the constraint: x <= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 250x + 200y\nConstraints:\nx + y <= 50\nx >= 5\ny >= 8\nx <= 2y", "canonical": {"objective": [-250.0, -200.0], "constraints": [[1.0, 1.0, 50.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -8.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 33, "y": 17}, "pseudo_model": "\nDecision Variables:\n- Number of acres of lavender grown: Lavender\n- Number of acres of tulips grown: Tulips\n\nConstraints:\n- Total acres used should not exceed 50:\n  Lavender + Tulips <= 50\n- At least 5 acres of lavender should be grown:\n  Lavender >= 5\n- At least 8 acres of tulips should be grown:\n  Tulips >= 8\n- Lavender grown should be at most twice the amount of tulips:\n  Lavender <= 2 * Tulips\n\nObjective:\n- Maximize profit (250 dollars per acre of lavender, 200 dollars per acre of tulips):\n  250 * Lavender + 200 * Tulips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLavender = intvar(0, 999999999)  # Number of acres of lavender\nTulips = intvar(0, 999999999)  # Number of acres of tulips\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 50:\nm += Lavender + Tulips <= 50\n# At least 5 acres of lavender should be grown:\nm += Lavender >= 5\n# At least 8 acres of tulips should be grown:\nm += Tulips >= 8\n# Lavender grown should be at most twice the amount of tulips:\nm += Lavender <= 2 * Tulips\n\n# Objective\n# Maximize profit (250 dollars per acre of lavender, 200 dollars per acre of tulips):\nm.maximize(250 * Lavender + 200 * Tulips)\n", "entities": [{"start": 15, "end": 17, "word": "50", "entity_group": "LIMIT", "score": 0.9997484294359966}, {"start": 24, "end": 33, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992011239571353}, {"start": 46, "end": 54, "word": "lavender", "entity_group": "VAR", "score": 0.9994244215133232}, {"start": 59, "end": 65, "word": "tulips", "entity_group": "VAR", "score": 0.9995401120764176}, {"start": 91, "end": 99, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990604256620678}, {"start": 100, "end": 101, "word": "5", "entity_group": "LIMIT", "score": 0.99973256125417}, {"start": 111, "end": 119, "word": "lavender", "entity_group": "VAR", "score": 0.9987949244449897}, {"start": 124, "end": 132, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992343806414659}, {"start": 133, "end": 134, "word": "8", "entity_group": "LIMIT", "score": 0.9997148863937743}, {"start": 144, "end": 150, "word": "tulips", "entity_group": "VAR", "score": 0.9997171861790625}, {"start": 165, "end": 174, "word": "lavenders", "entity_group": "VAR", "score": 0.9994833254947495}, {"start": 211, "end": 218, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9970646475545412}, {"start": 219, "end": 224, "word": "twice", "entity_group": "PARAM", "score": 0.9937470200194043}, {"start": 239, "end": 247, "word": "lavender", "entity_group": "VAR", "score": 0.9991337372324529}, {"start": 251, "end": 257, "word": "tulips", "entity_group": "VAR", "score": 0.9997778575272231}, {"start": 267, "end": 273, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999162698374872}, {"start": 286, "end": 294, "word": "lavender", "entity_group": "VAR", "score": 0.9993061162009881}, {"start": 300, "end": 303, "word": "250", "entity_group": "PARAM", "score": 0.9991381173693265}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999377851567839}, {"start": 331, "end": 337, "word": "tulips", "entity_group": "VAR", "score": 0.9994301094745145}, {"start": 343, "end": 346, "word": "200", "entity_group": "PARAM", "score": 0.9995941446297246}, {"start": 391, "end": 399, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 400, "end": 406, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "1841169502", "document": "An energy drink company wants to advertise their product using commercials. There are three types of commercials. Commercials with famous actors, commercials with regular people, and commercials with no people. The cost and expected viewership of each type of commercial is given. A commercial with a famous actor costs $10000 and reaches 50000 viewers. A commercial with regular people costs $3000 and reaches 20000 viewers. Finally, a commercial with no people costs $2000 and reaches 18000 viewers. The company can make at most 3 commercials with regular actors. In addition, at most a third of all commercials must be commercials with no people. Finally, at least 20% of commercials should be commercials with famous actors. If the weekly budget is $50000, how many of each commercial should be made to maximize viewership?", "order_mapping": {"Commercials with famous actors": 0, "commercials with regular people": 1, "commercials with no people": 2, "commercial with a famous actor": 0, "commercial with regular people": 1, "commercial with no people": 2, "commercials with regular actors": 1, "commercials with famous actors": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"commercial with a famous actor": "50000", "commercial with regular people": "20000", "commercial with no people": "18000"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "3", "var": "commercials with regular actors", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "commercials with no people", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "commercials with famous actors", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "50000", "terms": {"commercial with a famous actor": "10000", "commercial with regular people": "3000", "commercial with no people": "2000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of commercials with famous actors\n- y: Number of commercials with regular people\n- z: Number of commercials with no people\n\nObjective:\n- The company aims to maximize viewership. The viewership for each type of commercial is given: famous actors - 50000 viewers, regular people - 20000 viewers, no people - 18000 viewers. Therefore, the objective function is: Maximize 50000x + 20000y + 18000z\n\nConstraints:\n- The weekly budget is $50000, so the cost constraint is: 10000x + 3000y + 2000z <= 50000.\n- The company can make at most 3 commercials with regular actors, leading to the constraint: y <= 3.\n- At most a third of all commercials must be commercials with no people, resulting in the constraint: z <= (x + y + z)/3.\n- At least 20% of commercials should be commercials with famous actors, leading to the constraint: x >= 0.20(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50000x + 20000y + 18000z\nConstraints:\n10000x + 3000y + 2000z <= 50000\ny <= 3\nz <= (x + y + z)/3\nx >= 0.20(x + y + z)", "canonical": {"objective": [-50000.0, -20000.0, -18000.0], "constraints": [[10000.0, 3000.0, 2000.0, 50000.0], [0.0, 1.0, 0.0, 3.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.8, 0.2, 0.2, 0.0]]}, "solution": {"x": 4, "y": 2, "z": 2}, "pseudo_model": "\nDecision Variables:\n- Number of commercials with famous actors: FamousActors\n- Number of commercials with regular people: RegularPeople\n- Number of commercials with no people: NoPeople\n\nConstraints:\n- At most 3 commercials with regular actors:\n  RegularPeople <= 3\n- At most a third of all commercials must be commercials with no people:\n  NoPeople <= 1/3 * (FamousActors + RegularPeople + NoPeople)\n- At least 20% of commercials should be commercials with famous actors:\n  FamousActors >= 0.20 * (FamousActors + RegularPeople + NoPeople)\n- Weekly budget constraint ($50000):\n  10000 * FamousActors + 3000 * RegularPeople + 2000 * NoPeople <= 50000\n\nObjective:\n- Maximize viewership (50000 viewers per commercial with a famous actor, 20000 viewers per commercial with regular people, 18000 viewers per commercial with no people):\n  50000 * FamousActors + 20000 * RegularPeople + 18000 * NoPeople\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFamousActors = intvar(0, 999999999)  # Number of commercials with famous actors\nRegularPeople = intvar(0, 999999999)  # Number of commercials with regular people\nNoPeople = intvar(0, 999999999)  # Number of commercials with no people\n\n# Constraints\nm = Model()\n\n# At most 3 commercials with regular actors:\nm += RegularPeople <= 3\n# At most a third of all commercials must be commercials with no people:\nm += NoPeople <= (1/3) * (FamousActors + RegularPeople + NoPeople)\n# At least 20% of commercials should be commercials with famous actors:\nm += FamousActors >= 0.20 * (FamousActors + RegularPeople + NoPeople)\n# Weekly budget constraint ($50000):\nm += 10000 * FamousActors + 3000 * RegularPeople + 2000 * NoPeople <= 50000\n\n# Objective\n# Maximize viewership (50000 viewers per commercial with a famous actor, 20000 viewers per commercial with regular people, 18000 viewers per commercial with no people):\nm.maximize(50000 * FamousActors + 20000 * RegularPeople + 18000 * NoPeople)\n", "entities": [{"start": 116, "end": 146, "word": "Commercials with famous actors", "entity_group": "VAR", "score": 0.9965045775794458}, {"start": 149, "end": 180, "word": "commercials with regular people", "entity_group": "VAR", "score": 0.9967671901456948}, {"start": 187, "end": 213, "word": "commercials with no people", "entity_group": "VAR", "score": 0.9936884438656632}, {"start": 289, "end": 319, "word": "commercial with a famous actor", "entity_group": "VAR", "score": 0.9926020217757976}, {"start": 328, "end": 333, "word": "10000", "entity_group": "PARAM", "score": 0.9995206605251186}, {"start": 346, "end": 351, "word": "50000", "entity_group": "PARAM", "score": 0.999735677250697}, {"start": 352, "end": 359, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9939944187603657}, {"start": 364, "end": 394, "word": "commercial with regular people", "entity_group": "VAR", "score": 0.9970187012029857}, {"start": 403, "end": 407, "word": "3000", "entity_group": "PARAM", "score": 0.9994817474989676}, {"start": 420, "end": 425, "word": "20000", "entity_group": "PARAM", "score": 0.9997288971497315}, {"start": 426, "end": 433, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9908845528160495}, {"start": 448, "end": 473, "word": "commercial with no people", "entity_group": "VAR", "score": 0.993053134748556}, {"start": 482, "end": 486, "word": "2000", "entity_group": "PARAM", "score": 0.9988027324847095}, {"start": 499, "end": 504, "word": "18000", "entity_group": "PARAM", "score": 0.9997256385999709}, {"start": 505, "end": 512, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9918289697649438}, {"start": 536, "end": 543, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998930582480997}, {"start": 544, "end": 545, "word": "3", "entity_group": "LIMIT", "score": 0.9996503031830162}, {"start": 546, "end": 577, "word": "commercials with regular actors", "entity_group": "VAR", "score": 0.992920699854065}, {"start": 594, "end": 601, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9972114447829559}, {"start": 604, "end": 609, "word": "third", "entity_group": "LIMIT", "score": 0.9626790298753903}, {"start": 637, "end": 663, "word": "commercials with no people", "entity_group": "VAR", "score": 0.9934516185435743}, {"start": 676, "end": 684, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992041999470687}, {"start": 685, "end": 689, "word": "20 %", "entity_group": "LIMIT", "score": 0.9536219516914695}, {"start": 715, "end": 745, "word": "commercials with famous actors", "entity_group": "VAR", "score": 0.9971394338154733}, {"start": 762, "end": 768, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9976194421738297}, {"start": 774, "end": 779, "word": "50000", "entity_group": "PARAM", "score": 0.9997200020845685}, {"start": 828, "end": 836, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997784878202867}, {"start": 837, "end": 847, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9990146832868827}]}
{"doc_id": "561368533", "document": "A car company sells electric and gas cars. Two different factories produce these cars. The electric car factory can make at most 3 electric cars per day while the gas car factory can make at most 5 gas cars per day. All cars have to go through a third factory where finishing touches are added and this factory can process at most 5 cars of either type per day. If the profit per electric car is $5000 and the profit per gas car is $3000, how many of each should the company make to maximize profit?", "order_mapping": {"electric": 0, "gas cars": 1, "electric car": 0, "electric cars": 0, "gas car": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"gas car": "3000", "electric car": "5000"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "3", "var": "electric cars", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "gas cars", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "5", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of electric cars produced per day\n- y: Number of gas cars produced per day\n\nObjective:\n- The company aims to maximize its profit. The profit per electric car is $5000 and the profit per gas car is $3000. Therefore, the objective function is: Maximize 5000x + 3000y\n\nConstraints:\n- The electric car factory can make at most 3 electric cars per day, leading to the constraint: x <= 3.\n- The gas car factory can make at most 5 gas cars per day, leading to the constraint: y <= 5.\n- The finishing factory can process at most 5 cars of either type per day, resulting in the constraint: x + y <= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5000x + 3000y\nConstraints:\nx <= 3\ny <= 5\nx + y <= 5", "canonical": {"objective": [-5000.0, -3000.0], "constraints": [[1.0, 0.0, 3.0], [0.0, 1.0, 5.0], [1.0, 1.0, 5.0]]}, "solution": {"x": 3, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of electric cars produced per day: ElectricCars\n- Number of gas cars produced per day: GasCars\n\nConstraints:\n- Electric car factory can produce at most 3 electric cars per day:\n  ElectricCars <= 3\n- Gas car factory can produce at most 5 gas cars per day:\n  GasCars <= 5\n- The third factory can process at most 5 cars (electric or gas) per day:\n  ElectricCars + GasCars <= 5\n\nObjective:\n- Maximize profit ($5000 profit per electric car, $3000 profit per gas car):\n  5000 * ElectricCars + 3000 * GasCars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nElectricCars = intvar(0, 999999999)  # Number of electric cars produced per day\nGasCars = intvar(0, 999999999)  # Number of gas cars produced per day\n\n# Constraints\nm = Model()\n\n# Electric car factory can make at most 3 electric cars per day:\nm += ElectricCars <= 3\n# Gas car factory can make at most 5 gas cars per day:\nm += GasCars <= 5\n# The third factory can process at most 5 cars of either type per day:\nm += ElectricCars + GasCars <= 5\n\n# Objective\n# Maximize profit ($5000 per electric car, $3000 per gas car):\nm.maximize(5000 * ElectricCars + 3000 * GasCars)\n", "entities": [{"start": 20, "end": 28, "word": "electric", "entity_group": "VAR", "score": 0.9997265728943886}, {"start": 33, "end": 41, "word": "gas cars", "entity_group": "VAR", "score": 0.9999782653343765}, {"start": 93, "end": 105, "word": "electric car", "entity_group": "VAR", "score": 0.9999944196813165}, {"start": 123, "end": 130, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987037188259541}, {"start": 131, "end": 132, "word": "3", "entity_group": "LIMIT", "score": 0.9994962917217451}, {"start": 133, "end": 146, "word": "electric cars", "entity_group": "VAR", "score": 0.9999623446715054}, {"start": 165, "end": 172, "word": "gas car", "entity_group": "VAR", "score": 0.9999862829898176}, {"start": 190, "end": 197, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983767261308123}, {"start": 198, "end": 199, "word": "5", "entity_group": "LIMIT", "score": 0.999271127311681}, {"start": 200, "end": 208, "word": "gas cars", "entity_group": "VAR", "score": 0.9999401455898791}, {"start": 326, "end": 333, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998899620799957}, {"start": 334, "end": 335, "word": "5", "entity_group": "LIMIT", "score": 0.9996739278339406}, {"start": 373, "end": 379, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999186853696881}, {"start": 384, "end": 396, "word": "electric car", "entity_group": "VAR", "score": 0.9998578526938823}, {"start": 402, "end": 406, "word": "5000", "entity_group": "PARAM", "score": 0.999618919302661}, {"start": 415, "end": 421, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999113271382303}, {"start": 426, "end": 433, "word": "gas car", "entity_group": "VAR", "score": 0.9998885641719819}, {"start": 439, "end": 443, "word": "3000", "entity_group": "PARAM", "score": 0.9996417453538425}, {"start": 490, "end": 498, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 499, "end": 505, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "671764043", "document": "A family has $500000 to invest in both the textile and telecom industries. Money placed in the textile industry yields a 6% return while money placed in the telecom industry yields a 8% return. The family wants to place a minimum of 30% of the investment in the textile industry and at most 50% of the investment in the telecom industry. How much money should be placed in each industry to maximize return on investment?", "order_mapping": {"textile": 0, "telecom industries": 1, "textile industry": 0, "telecom industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"textile industry": "6%", "telecom industry": "8%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "500000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "30%", "var": "textile industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "50%", "var": "telecom industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the textile industry\n- y: Dollars invested in the telecom industry\n\nObjective:\n- The family aims to maximize the return on investment. Money placed in the textile industry yields a 6% return, and money placed in the telecom industry yields an 8% return. Therefore, the objective function is: Maximize 0.06x + 0.08y\n\nConstraints:\n- The family has $500,000 to invest, so the constraint is: x + y <= 500,000.\n- A minimum of 30% of the investment should be in the textile industry, leading to the constraint: x >= 0.30(x + y).\n- At most 50% of the investment should be in the telecom industry, resulting in the constraint: y <= 0.50(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.06x + 0.08y\nConstraints:\nx + y <= 500,000\nx >= 0.30(x + y)\ny <= 0.50(x + y)", "canonical": {"objective": [-0.06, -0.08], "constraints": []}, "solution": {"x": 100000000, "y": 100000000}, "pseudo_model": "\nDecision Variables:\n- Money placed in the textile industry: TextileIndustry\n- Money placed in the telecom industry: TelecomIndustry\n\nConstraints:\n- Total investment in both industries should be exactly $500000:\n  TextileIndustry + TelecomIndustry == 500000\n- At least 30% of the investment should be in the textile industry:\n  TextileIndustry >= 0.30 * 500000\n- At most 50% of the investment should be in the telecom industry:\n  TelecomIndustry <= 0.50 * 500000\n\nObjective:\n- Maximize return on investment (6% from textile industry, 8% from telecom industry):\n  0.06 * TextileIndustry + 0.08 * TelecomIndustry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Total investment amount\ntotal_investment = 500000\n\n# Decision Variables\nTextileIndustry = intvar(0, total_investment)  # Money placed in the textile industry\nTelecomIndustry = intvar(0, total_investment)  # Money placed in the telecom industry\n\n# Constraints\nm = Model()\n\n# Total investment in both industries should be exactly $500000:\nm += TextileIndustry + TelecomIndustry == total_investment\n# At least 30% of the investment should be in the textile industry:\nm += TextileIndustry >= 0.30 * total_investment\n# At most 50% of the investment should be in the telecom industry:\nm += TelecomIndustry <= 0.50 * total_investment\n\n# Objective\n# Maximize return on investment (6% from textile industry, 8% from telecom industry):\nm.maximize(0.06 * TextileIndustry + 0.08 * TelecomIndustry)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9946518590687284}, {"start": 15, "end": 21, "word": "500000", "entity_group": "LIMIT", "score": 0.9991492135644795}, {"start": 44, "end": 51, "word": "textile", "entity_group": "VAR", "score": 0.9996505746108133}, {"start": 56, "end": 74, "word": "telecom industries", "entity_group": "VAR", "score": 0.9998831434836483}, {"start": 97, "end": 113, "word": "textile industry", "entity_group": "VAR", "score": 0.9999679747502902}, {"start": 123, "end": 126, "word": "6 %", "entity_group": "PARAM", "score": 0.8848590557971852}, {"start": 127, "end": 133, "word": "return", "entity_group": "OBJ_NAME", "score": 0.995771777005629}, {"start": 160, "end": 176, "word": "telecom industry", "entity_group": "VAR", "score": 0.9999356782277079}, {"start": 186, "end": 189, "word": "8 %", "entity_group": "PARAM", "score": 0.6741504201772517}, {"start": 190, "end": 196, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9975268930545489}, {"start": 227, "end": 234, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9967178947622429}, {"start": 238, "end": 242, "word": "30 %", "entity_group": "LIMIT", "score": 0.9785811580534118}, {"start": 268, "end": 284, "word": "textile industry", "entity_group": "VAR", "score": 0.999957376924976}, {"start": 289, "end": 296, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985584525925136}, {"start": 297, "end": 301, "word": "50 %", "entity_group": "LIMIT", "score": 0.984564081861381}, {"start": 327, "end": 343, "word": "telecom industry", "entity_group": "VAR", "score": 0.9998875139063589}, {"start": 398, "end": 406, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990629393188594}, {"start": 407, "end": 413, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9942982220300074}]}
{"doc_id": "2117126961", "document": "A diner makes packaged lunches. The meat option takes 5 minutes to prepare and 3 minutes to package. The veggie option takes 4 minutes to prepare and 5 minutes to package. The diner has 500 minutes available for preparations and 400 minutes available for packaging. If the profit per meat lunch is $8 and the profit per veggie lunch is $6, how many of each should the diner make to maximize profit?", "order_mapping": {"meat option": 0, "veggie option": 1, "meat lunch": 0, "veggie lunch": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"meat lunch": "8", "veggie lunch": "6"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"meat option": "5", "veggie option": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"meat option": "3", "veggie option": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of meat lunches\n- y: Number of veggie lunches\n\nObjective:\n- The diner aims to maximize its profit. The profit per meat lunch is $8 and the profit per veggie lunch is $6. Therefore, the objective function is: Maximize 8x + 6y\n\nConstraints:\n- The diner has 500 minutes available for preparations, and the time taken for meat lunches is 5 minutes and for veggie lunches is 4 minutes. This leads to the constraint: 5x + 4y <= 500.\n- The diner has 400 minutes available for packaging, and the time taken for meat lunches is 3 minutes and for veggie lunches is 5 minutes. This results in the constraint: 3x + 5y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x + 6y\nConstraints:\n5x + 4y <= 500\n3x + 5y <= 400", "canonical": {"objective": [-8.0, -6.0], "constraints": [[5.0, 4.0, 500.0], [3.0, 5.0, 400.0]]}, "solution": {"x": 100, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of meat lunches made: MeatLunches\n- Number of veggie lunches made: VeggieLunches\n\nConstraints:\n- Total preparation time for meat and veggie lunches should not exceed 500 minutes:\n  5 * MeatLunches + 4 * VeggieLunches <= 500\n- Total packaging time for meat and veggie lunches should not exceed 400 minutes:\n  3 * MeatLunches + 5 * VeggieLunches <= 400\n\nObjective:\n- Maximize profit (8 dollars per meat lunch, 6 dollars per veggie lunch):\n  8 * MeatLunches + 6 * VeggieLunches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMeatLunches = intvar(0, 999999999)  # Number of meat lunches made\nVeggieLunches = intvar(0, 999999999)  # Number of veggie lunches made\n\n# Constraints\nm = Model()\n\n# Total preparation time for meat and veggie lunches should not exceed 500 minutes:\n# (5 minutes for meat, 4 minutes for veggie)\nm += 5 * MeatLunches + 4 * VeggieLunches <= 500\n\n# Total packaging time for meat and veggie lunches should not exceed 400 minutes:\n# (3 minutes for meat, 5 minutes for veggie)\nm += 3 * MeatLunches + 5 * VeggieLunches <= 400\n\n# Objective\n# Maximize profit (8 dollars per meat lunch, 6 dollars per veggie lunch):\nm.maximize(8 * MeatLunches + 6 * VeggieLunches)\n", "entities": [{"start": 37, "end": 48, "word": "meat option", "entity_group": "VAR", "score": 0.9999493410588122}, {"start": 55, "end": 56, "word": "5", "entity_group": "PARAM", "score": 0.9995263311629617}, {"start": 80, "end": 81, "word": "3", "entity_group": "PARAM", "score": 0.9996547169926177}, {"start": 107, "end": 120, "word": "veggie option", "entity_group": "VAR", "score": 0.9999324928459307}, {"start": 127, "end": 128, "word": "4", "entity_group": "PARAM", "score": 0.9996516261037124}, {"start": 152, "end": 153, "word": "5", "entity_group": "PARAM", "score": 0.9996513178225017}, {"start": 189, "end": 192, "word": "500", "entity_group": "LIMIT", "score": 0.9997413258561513}, {"start": 201, "end": 210, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985956311660837}, {"start": 232, "end": 235, "word": "400", "entity_group": "LIMIT", "score": 0.999748174452734}, {"start": 244, "end": 253, "word": "available", "entity_group": "CONST_DIR", "score": 0.999012959944545}, {"start": 277, "end": 283, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999443539097642}, {"start": 288, "end": 298, "word": "meat lunch", "entity_group": "VAR", "score": 0.9997983106878106}, {"start": 304, "end": 305, "word": "8", "entity_group": "PARAM", "score": 0.9994030075742895}, {"start": 314, "end": 320, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999366200282577}, {"start": 325, "end": 337, "word": "veggie lunch", "entity_group": "VAR", "score": 0.9997695047762634}, {"start": 343, "end": 344, "word": "6", "entity_group": "PARAM", "score": 0.9996528928903877}, {"start": 389, "end": 397, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 398, "end": 404, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "1169913509", "document": "A gift wrapping kiosk wraps small and large gifts. Small gifts take 10 minutes of worker time and 2 units of wrapping paper. Large gifts take 15 minutes of worker time and 3 units of wrapping paper. The kiosk has 720 minutes of worker time available and 150 units of wrapping paper available. If the profit per small gift wrapped is $3 and the profit per large gift wrapped is $5, how many of each should they wrap to maximize profit?", "order_mapping": {"small": 0, "large": 1, "Small gifts": 0, "Large gifts": 1, "small gift": 0, "large gift": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"small gift": "3", "large gift": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "720", "terms": {"Small gifts": "10", "Large gifts": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "150", "terms": {"Small gifts": "2", "Large gifts": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small gifts wrapped\n- y: Number of large gifts wrapped\n\nObjective:\n- The kiosk aims to maximize its profit. The profit per small gift wrapped is $3 and the profit per large gift wrapped is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The kiosk has 720 minutes of worker time available. Wrapping a small gift takes 10 minutes and a large gift takes 15 minutes, leading to the constraint: 10x + 15y <= 720.\n- The kiosk has 150 units of wrapping paper available. Wrapping a small gift takes 2 units and a large gift takes 3 units, resulting in the constraint: 2x + 3y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n10x + 15y <= 720\n2x + 3y <= 150", "canonical": {"objective": [-3.0, -5.0], "constraints": [[10.0, 15.0, 720.0], [2.0, 3.0, 150.0]]}, "solution": {"x": 0, "y": 48}, "pseudo_model": "\nDecision Variables:\n- Number of small gifts wrapped: SmallGifts\n- Number of large gifts wrapped: LargeGifts\n\nConstraints:\n- Worker time constraint (720 minutes available):\n  10 * SmallGifts + 15 * LargeGifts <= 720\n- Wrapping paper constraint (150 units available):\n  2 * SmallGifts + 3 * LargeGifts <= 150\n\nObjective:\n- Maximize profit (3 dollars per small gift, 5 dollars per large gift):\n  3 * SmallGifts + 5 * LargeGifts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallGifts = intvar(0, 999999999)  # Number of small gifts wrapped\nLargeGifts = intvar(0, 999999999)  # Number of large gifts wrapped\n\n# Constraints\nm = Model()\n\n# Worker time constraint (720 minutes available):\nm += 10 * SmallGifts + 15 * LargeGifts <= 720\n# Wrapping paper constraint (150 units available):\nm += 2 * SmallGifts + 3 * LargeGifts <= 150\n\n# Objective\n# Maximize profit (3 dollars per small gift, 5 dollars per large gift):\nm.maximize(3 * SmallGifts + 5 * LargeGifts)\n", "entities": [{"start": 28, "end": 33, "word": "small", "entity_group": "VAR", "score": 0.9991821216620683}, {"start": 38, "end": 43, "word": "large", "entity_group": "VAR", "score": 0.9996983952143691}, {"start": 52, "end": 63, "word": "Small gifts", "entity_group": "VAR", "score": 0.9999736404411738}, {"start": 69, "end": 71, "word": "10", "entity_group": "PARAM", "score": 0.9997134859979603}, {"start": 99, "end": 100, "word": "2", "entity_group": "PARAM", "score": 0.9996242767731048}, {"start": 127, "end": 138, "word": "Large gifts", "entity_group": "VAR", "score": 0.9999679932144879}, {"start": 144, "end": 146, "word": "15", "entity_group": "PARAM", "score": 0.9996836906980023}, {"start": 174, "end": 175, "word": "3", "entity_group": "PARAM", "score": 0.9994536966737503}, {"start": 216, "end": 219, "word": "720", "entity_group": "LIMIT", "score": 0.999699199798981}, {"start": 243, "end": 252, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991934951314468}, {"start": 257, "end": 260, "word": "150", "entity_group": "LIMIT", "score": 0.99969242970623}, {"start": 285, "end": 294, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992049605433375}, {"start": 304, "end": 310, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9987992524805701}, {"start": 315, "end": 325, "word": "small gift", "entity_group": "VAR", "score": 0.9998635858438955}, {"start": 339, "end": 340, "word": "3", "entity_group": "PARAM", "score": 0.9996420465212184}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999339032061423}, {"start": 360, "end": 370, "word": "large gift", "entity_group": "VAR", "score": 0.9999283618507459}, {"start": 384, "end": 385, "word": "5", "entity_group": "PARAM", "score": 0.9997035537001461}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843680345001}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368872053741}]}
{"doc_id": "1153045283", "document": "A coffee shop makes large and small coffees. A large coffee takes 12 units of coffee beans and 20 units of milk. A small coffee takes 8 units of coffee beans and 15 units of milk. The shop has available 1000 units of coffee beans and 1500 units of milk. If the profit per large coffee is $5 and the profit per small coffee is $3, how many of each should they make to maximize profit?", "order_mapping": {"large": 0, "small": 1, "large coffee": 0, "small coffee": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large coffee": "5", "small coffee": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"large coffee": "12", "small coffee": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"large coffee": "20", "small coffee": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large coffees\n- y: Number of small coffees\n\nObjective:\n- The coffee shop aims to maximize its profit. The profit per large coffee is $5 and the profit per small coffee is $3. Therefore, the objective function is: Maximize 5x + 3y\n\nConstraints:\n- The shop has available 1000 units of coffee beans, so the constraint is: 12x + 8y <= 1000.\n- The shop has available 1500 units of milk, leading to the constraint: 20x + 15y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3y\nConstraints:\n12x + 8y <= 1000\n20x + 15y <= 1500", "canonical": {"objective": [-5.0, -3.0], "constraints": [[12.0, 8.0, 1000.0], [20.0, 15.0, 1500.0]]}, "solution": {"x": 75, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of large coffees made: LargeCoffees\n- Number of small coffees made: SmallCoffees\n\nConstraints:\n- The shop has available 1000 units of coffee beans:\n  12 * LargeCoffees + 8 * SmallCoffees <= 1000\n- The shop has available 1500 units of milk:\n  20 * LargeCoffees + 15 * SmallCoffees <= 1500\n\nObjective:\n- Maximize profit (5 dollars per large coffee, 3 dollars per small coffee):\n  5 * LargeCoffees + 3 * SmallCoffees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeCoffees = intvar(0, 999999999)  # Number of large coffees made\nSmallCoffees = intvar(0, 999999999)  # Number of small coffees made\n\n# Constraints\nm = Model()\n\n# The shop has available 1000 units of coffee beans:\nm += 12 * LargeCoffees + 8 * SmallCoffees <= 1000\n# The shop has available 1500 units of milk:\nm += 20 * LargeCoffees + 15 * SmallCoffees <= 1500\n\n# Objective\n# Maximize profit (5 dollars per large coffee, 3 dollars per small coffee):\nm.maximize(5 * LargeCoffees + 3 * SmallCoffees)\n", "entities": [{"start": 20, "end": 25, "word": "large", "entity_group": "VAR", "score": 0.998115727187194}, {"start": 30, "end": 35, "word": "small", "entity_group": "VAR", "score": 0.9996294474788991}, {"start": 48, "end": 60, "word": "large coffee", "entity_group": "VAR", "score": 0.9999851995845579}, {"start": 67, "end": 69, "word": "12", "entity_group": "PARAM", "score": 0.9997047299535042}, {"start": 96, "end": 98, "word": "20", "entity_group": "PARAM", "score": 0.9996098476744076}, {"start": 117, "end": 129, "word": "small coffee", "entity_group": "VAR", "score": 0.9999752358901366}, {"start": 136, "end": 137, "word": "8", "entity_group": "PARAM", "score": 0.9997280790115968}, {"start": 164, "end": 166, "word": "15", "entity_group": "PARAM", "score": 0.9994138789820877}, {"start": 196, "end": 205, "word": "available", "entity_group": "CONST_DIR", "score": 0.999580599099574}, {"start": 206, "end": 210, "word": "1000", "entity_group": "LIMIT", "score": 0.9992801642601289}, {"start": 237, "end": 241, "word": "1500", "entity_group": "LIMIT", "score": 0.9991300071198442}, {"start": 265, "end": 271, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999357620087432}, {"start": 276, "end": 288, "word": "large coffee", "entity_group": "VAR", "score": 0.9999350623804352}, {"start": 294, "end": 295, "word": "5", "entity_group": "PARAM", "score": 0.9995624457530643}, {"start": 304, "end": 310, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998623479543797}, {"start": 315, "end": 327, "word": "small coffee", "entity_group": "VAR", "score": 0.9999314628362864}, {"start": 333, "end": 334, "word": "3", "entity_group": "PARAM", "score": 0.9996795433231153}, {"start": 374, "end": 382, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "-1478289491", "document": "A stationary company sells one-inch and two-inch binders. To meet demand, the must make at least 60 one-inch binders and at least 70 two-inch binders. However, they can make at most 150 one-inch binders and at most 160 two-inch binders. The company has a contract with a school to send at least 200 binders of either type. If the profit per one-inch binder is $1 and the profit per two-inch binder is $2, how many of each should the company make to maximize profit?", "order_mapping": {"one-inch": 0, "two-inch": 1, "one-inch binders": 0, "two-inch binders": 1, "one-inch binder": 0, "two-inch binder": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"two-inch binder": "2", "one-inch binder": "1"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "60", "var": "one-inch binders", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "70", "var": "two-inch binders", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "one-inch binders", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "160", "var": "two-inch binders", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "200", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of one-inch binders\n- y: Number of two-inch binders\n\nObjective:\n- The company aims to maximize its profit. The profit per one-inch binder is $1 and the profit per two-inch binder is $2. Therefore, the objective function is: Maximize x + 2y\n\nConstraints:\n- The company must make at least 60 one-inch binders: x >= 60\n- The company must make at least 70 two-inch binders: y >= 70\n- The company can make at most 150 one-inch binders: x <= 150\n- The company can make at most 160 two-inch binders: y <= 160\n- The company has a contract to send at least 200 binders of either type: x + y >= 200\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 2y\nConstraints:\nx >= 60\ny >= 70\nx <= 150\ny <= 160\nx + y >= 200", "canonical": {"objective": [-1.0, -2.0], "constraints": [[-1.0, 0.0, -60.0], [0.0, -1.0, -70.0], [1.0, 0.0, 150.0], [0.0, 1.0, 160.0], [-1.0, -1.0, -200.0]]}, "solution": {"x": 150, "y": 160}, "pseudo_model": "\nDecision Variables:\n- Number of one-inch binders made: OneInchBinders\n- Number of two-inch binders made: TwoInchBinders\n\nConstraints:\n- At least 60 one-inch binders must be made:\n  OneInchBinders >= 60\n- At least 70 two-inch binders must be made:\n  TwoInchBinders >= 70\n- At most 150 one-inch binders can be made:\n  OneInchBinders <= 150\n- At most 160 two-inch binders can be made:\n  TwoInchBinders <= 160\n- At least 200 binders of either type must be sent:\n  OneInchBinders + TwoInchBinders >= 200\n\nObjective:\n- Maximize profit (1 dollar per one-inch binder, 2 dollars per two-inch binder):\n  1 * OneInchBinders + 2 * TwoInchBinders\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOneInchBinders = intvar(0, 999999999)  # Number of one-inch binders made\nTwoInchBinders = intvar(0, 999999999)  # Number of two-inch binders made\n\n# Constraints\nm = Model()\n\n# At least 60 one-inch binders must be made:\nm += OneInchBinders >= 60\n# At least 70 two-inch binders must be made:\nm += TwoInchBinders >= 70\n# At most 150 one-inch binders can be made:\nm += OneInchBinders <= 150\n# At most 160 two-inch binders can be made:\nm += TwoInchBinders <= 160\n# At least 200 binders of either type must be sent:\nm += OneInchBinders + TwoInchBinders >= 200\n\n# Objective\n# Maximize profit (1 dollar per one-inch binder, 2 dollars per two-inch binder):\nm.maximize(1 * OneInchBinders + 2 * TwoInchBinders)\n", "entities": [{"start": 27, "end": 37, "word": "one - inch", "entity_group": "VAR", "score": 0.9996398545057684}, {"start": 42, "end": 52, "word": "two - inch", "entity_group": "VAR", "score": 0.9995434983538476}, {"start": 94, "end": 102, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998801392700756}, {"start": 103, "end": 105, "word": "60", "entity_group": "LIMIT", "score": 0.9995365899248488}, {"start": 106, "end": 124, "word": "one - inch binders", "entity_group": "VAR", "score": 0.999442672255249}, {"start": 129, "end": 137, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987614930917948}, {"start": 138, "end": 140, "word": "70", "entity_group": "LIMIT", "score": 0.9995399241842027}, {"start": 141, "end": 159, "word": "two - inch binders", "entity_group": "VAR", "score": 0.9993548566848507}, {"start": 186, "end": 193, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998521991304693}, {"start": 194, "end": 197, "word": "150", "entity_group": "LIMIT", "score": 0.9995154303376798}, {"start": 198, "end": 216, "word": "one - inch binders", "entity_group": "VAR", "score": 0.9994429494492755}, {"start": 221, "end": 228, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987454791549116}, {"start": 229, "end": 232, "word": "160", "entity_group": "LIMIT", "score": 0.9994830335542466}, {"start": 233, "end": 251, "word": "two - inch binders", "entity_group": "VAR", "score": 0.999297031222411}, {"start": 303, "end": 311, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983803737495793}, {"start": 312, "end": 315, "word": "200", "entity_group": "LIMIT", "score": 0.9996423499008747}, {"start": 348, "end": 354, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998743951654606}, {"start": 359, "end": 376, "word": "one - inch binder", "entity_group": "VAR", "score": 0.9989931107509966}, {"start": 382, "end": 383, "word": "1", "entity_group": "PARAM", "score": 0.9996626676226}, {"start": 392, "end": 398, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999105965212176}, {"start": 403, "end": 420, "word": "two - inch binder", "entity_group": "VAR", "score": 0.9987359292960749}, {"start": 426, "end": 427, "word": "2", "entity_group": "PARAM", "score": 0.9996253852733611}, {"start": 474, "end": 482, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 483, "end": 489, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-2097740958", "document": "A man drinks two energy drinks to get his daily caffeine and water requirements. A can of energy drink R contains 2 units of caffeine and 5 units of water. A can of energy drink M contains 5 units of caffeine and 8 units of water.  The man needs to get a minimum of 30 units of caffeine and 50 units of water per day. If the cost per can of energy drink R is $4 and the cost per can of energy drink M is $7, how many cans of each should he buy to minimize costs?", "order_mapping": {"energy drink R": 0, "energy drink M": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"energy drink R": "4", "energy drink M": "7"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "30", "terms": {"energy drink R": "2", "energy drink M": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"energy drink R": "5", "energy drink M": "8"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans of energy drink R\n- y: Number of cans of energy drink M\n\nObjective:\n- The man wants to minimize his costs. Given that the cost per can of energy drink R is $4 and the cost per can of energy drink M is $7, the objective function is: Minimize 4x + 7y\n\nConstraints:\n- The man needs to get a minimum of 30 units of caffeine per day, which can be represented as: 2x + 5y >= 30.\n- The man needs to get a minimum of 50 units of water per day, which can be represented as: 5x + 8y >= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4x + 7y\nConstraints:\n2x + 5y >= 30\n5x + 8y >= 50", "canonical": {"objective": [4.0, 7.0], "constraints": [[-2.0, -5.0, -30.0], [-5.0, -8.0, -50.0]]}, "solution": {"x": 1, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of cans of energy drink R bought: EnergyDrinkR\n- Number of cans of energy drink M bought: EnergyDrinkM\n\nConstraints:\n- To meet the minimum caffeine requirement of 30 units per day:\n  2 * EnergyDrinkR + 5 * EnergyDrinkM >= 30\n- To meet the minimum water requirement of 50 units per day:\n  5 * EnergyDrinkR + 8 * EnergyDrinkM >= 50\n\nObjective:\n- Minimize the total cost of buying the energy drinks ($4 per can of R and $7 per can of M):\n  4 * EnergyDrinkR + 7 * EnergyDrinkM\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEnergyDrinkR = intvar(0, 999999999)  # Number of cans of energy drink R\nEnergyDrinkM = intvar(0, 999999999)  # Number of cans of energy drink M\n\n# Constraints\nm = Model()\n\n# The man needs to get a minimum of 30 units of caffeine per day:\nm += 2 * EnergyDrinkR + 5 * EnergyDrinkM >= 30\n# The man needs to get a minimum of 50 units of water per day:\nm += 5 * EnergyDrinkR + 8 * EnergyDrinkM >= 50\n\n# Objective\n# Minimize costs ($4 per can of energy drink R and $7 per can of energy drink M):\nm.minimize(4 * EnergyDrinkR + 7 * EnergyDrinkM)\n", "entities": [{"start": 91, "end": 105, "word": "energy drink R", "entity_group": "VAR", "score": 0.9960276279319392}, {"start": 115, "end": 116, "word": "2", "entity_group": "PARAM", "score": 0.999703427681004}, {"start": 139, "end": 140, "word": "5", "entity_group": "PARAM", "score": 0.9997129107042062}, {"start": 167, "end": 181, "word": "energy drink M", "entity_group": "VAR", "score": 0.9960374491791522}, {"start": 191, "end": 192, "word": "5", "entity_group": "PARAM", "score": 0.9997034286818315}, {"start": 215, "end": 216, "word": "8", "entity_group": "PARAM", "score": 0.9996666963001218}, {"start": 257, "end": 264, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9986621177624225}, {"start": 268, "end": 270, "word": "30", "entity_group": "LIMIT", "score": 0.9997688482766138}, {"start": 293, "end": 295, "word": "50", "entity_group": "LIMIT", "score": 0.9997146168816006}, {"start": 328, "end": 332, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9993060522122023}, {"start": 344, "end": 358, "word": "energy drink R", "entity_group": "VAR", "score": 0.9972409509687735}, {"start": 364, "end": 365, "word": "4", "entity_group": "PARAM", "score": 0.9990454410982542}, {"start": 374, "end": 378, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987940390838734}, {"start": 390, "end": 404, "word": "energy drink M", "entity_group": "VAR", "score": 0.9968467779347174}, {"start": 410, "end": 411, "word": "7", "entity_group": "PARAM", "score": 0.9995196268461278}, {"start": 453, "end": 461, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997438183250434}, {"start": 462, "end": 467, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990204425983881}]}
{"doc_id": "-615992646", "document": "A man has $1000000 to invest in four industries. He can invest in the biotech industry, food industry, finance industry, and health care industry. The return on investment for each of the industries is as follows: biotech, 4%; food, 6%; finance, 8%; and health care 10%. To be safe, he wants to make sure the amount invested in the health care industry does not exceed the amount invested in the biotech industry. Also the amount invested in the food industry cannot exceed the amount invested in the finance industry. Lastly, at most 30% of the investment can be in the health care industry. How much should he invested in each industry to maximize his returns?", "order_mapping": {"biotech industry": 0, "food industry": 1, "finance industry": 2, "health care": 3, "biotech": 0, "food": 1, "finance": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "returns", "terms": {"biotech": "4%", "food": "6%", "finance": "8%", "health care": "10%"}}, "const_declarations": [{"type": "xy", "x_var": "food industry", "direction": "cannot exceed", "y_var": "finance industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "health care", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the biotech industry\n- y: Dollars invested in the food industry\n- z: Dollars invested in the finance industry\n- w: Dollars invested in the health care industry\n\nObjective:\n- The man aims to maximize his returns. The return on investment for each of the industries is as follows: biotech, 4%; food, 6%; finance, 8%; and health care, 10%. Therefore, the objective function is: Maximize 0.04x + 0.06y + 0.08z + 0.10w\n\nConstraints:\n- The total amount available for investment is $1,000,000, so the constraint is: x + y + z + w <= 1000000.\n- The amount invested in the health care industry cannot exceed the amount invested in the biotech industry, leading to the constraint: w <= x.\n- The amount invested in the food industry cannot exceed the amount invested in the finance industry, resulting in the constraint: y <= z.\n- At most 30% of the investment can be in the health care industry, leading to the constraint: w <= 0.30(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.04x + 0.06y + 0.08z + 0.10w\nConstraints:\nx + y + z + w <= 1000000\nw <= x\ny <= z\nw <= 0.30(x + y + z + w)", "canonical": {"objective": [-0.04, -0.06, -0.08, -0.1], "constraints": [[1.0, 1.0, 1.0, 1.0, 1000000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.3, -0.3, -0.3, 0.7, 0.0]]}, "solution": {"x": 0, "y": 0, "z": 1000000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the biotech industry: Biotech\n- Amount invested in the food industry: Food\n- Amount invested in the finance industry: Finance\n- Amount invested in the health care industry: HealthCare\n\nConstraints:\n- Total investment should not exceed $1000000:\n  Biotech + Food + Finance + HealthCare <= 1000000\n- The amount invested in the health care industry does not exceed the amount invested in the biotech industry:\n  HealthCare <= Biotech\n- The amount invested in the food industry cannot exceed the amount invested in the finance industry:\n  Food <= Finance\n- At most 30% of the investment can be in the health care industry:\n  HealthCare <= 0.30 * 1000000\n\nObjective:\n- Maximize returns (4% for biotech, 6% for food, 8% for finance, and 10% for health care):\n  0.04 * Biotech + 0.06 * Food + 0.08 * Finance + 0.10 * HealthCare\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBiotech = intvar(0, 1000000)  # Amount invested in the biotech industry\nFood = intvar(0, 1000000)  # Amount invested in the food industry\nFinance = intvar(0, 1000000)  # Amount invested in the finance industry\nHealthCare = intvar(0, 1000000)  # Amount invested in the health care industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $1000000:\nm += Biotech + Food + Finance + HealthCare <= 1000000\n# The amount invested in the health care industry does not exceed the amount invested in the biotech industry:\nm += HealthCare <= Biotech\n# The amount invested in the food industry cannot exceed the amount invested in the finance industry:\nm += Food <= Finance\n# At most 30% of the investment can be in the health care industry:\nm += HealthCare <= 0.30 * 1000000\n\n# Objective\n# Maximize returns (4% for biotech, 6% for food, 8% for finance, and 10% for health care):\nm.maximize(0.04 * Biotech + 0.06 * Food + 0.08 * Finance + 0.10 * HealthCare)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9971842768771332}, {"start": 12, "end": 19, "word": "1000000", "entity_group": "LIMIT", "score": 0.9988289508375894}, {"start": 72, "end": 88, "word": "biotech industry", "entity_group": "VAR", "score": 0.9999596856208509}, {"start": 91, "end": 104, "word": "food industry", "entity_group": "VAR", "score": 0.9999686560644018}, {"start": 107, "end": 123, "word": "finance industry", "entity_group": "VAR", "score": 0.9999830933945183}, {"start": 130, "end": 141, "word": "health care", "entity_group": "VAR", "score": 0.9999905763806621}, {"start": 157, "end": 163, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9987002213022439}, {"start": 221, "end": 228, "word": "biotech", "entity_group": "VAR", "score": 0.9997031803629686}, {"start": 231, "end": 234, "word": "4 %", "entity_group": "PARAM", "score": 0.9973385805346171}, {"start": 237, "end": 241, "word": "food", "entity_group": "VAR", "score": 0.9988933087287448}, {"start": 244, "end": 247, "word": "6 %", "entity_group": "PARAM", "score": 0.9901483603774601}, {"start": 250, "end": 257, "word": "finance", "entity_group": "VAR", "score": 0.9986856795973758}, {"start": 260, "end": 263, "word": "8 %", "entity_group": "PARAM", "score": 0.98777197396187}, {"start": 270, "end": 281, "word": "health care", "entity_group": "VAR", "score": 0.9999711111416356}, {"start": 282, "end": 286, "word": "10 %", "entity_group": "PARAM", "score": 0.994833778467077}, {"start": 351, "end": 362, "word": "health care", "entity_group": "VAR", "score": 0.9999889874208399}, {"start": 372, "end": 387, "word": "does not exceed", "entity_group": "CONST_DIR", "score": 0.9907294534655459}, {"start": 415, "end": 431, "word": "biotech industry", "entity_group": "VAR", "score": 0.999957235949997}, {"start": 466, "end": 479, "word": "food industry", "entity_group": "VAR", "score": 0.9999748794768338}, {"start": 480, "end": 494, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9888014291991283}, {"start": 522, "end": 538, "word": "finance industry", "entity_group": "VAR", "score": 0.9999799217448536}, {"start": 550, "end": 557, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983831226879422}, {"start": 558, "end": 562, "word": "30 %", "entity_group": "LIMIT", "score": 0.9725969403413897}, {"start": 595, "end": 606, "word": "health care", "entity_group": "VAR", "score": 0.9999946681260654}, {"start": 666, "end": 674, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9978205769342444}, {"start": 679, "end": 686, "word": "returns", "entity_group": "OBJ_NAME", "score": 0.9989087046432275}]}
{"doc_id": "-2108752537", "document": "An ice cream bar sells chocolate and vanilla ice cream cones. They must sell at least 30 chocolate ice cream cones but cannot sell more than 50. They must also sell at least 20 vanilla ice cream cones but cannot sell more than 60. In total, they only have enough cones to sell 70 items total. If the profit per chocolate ice cream cone is $2 and the profit per vanilla ice cream cone is $1.50, how many of each should they sell to maximize profit?", "order_mapping": {"chocolate": 0, "vanilla ice cream": 1, "chocolate ice cream cones": 0, "vanilla ice cream cones": 1, "chocolate ice cream cone": 0, "vanilla ice cream cone": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chocolate ice cream cone": "2", "vanilla ice cream cone": "1.50"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "30", "var": "chocolate ice cream cones", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "50", "var": "chocolate ice cream cones", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "vanilla ice cream cones", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "more than", "limit": "60", "var": "vanilla ice cream cones", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "70", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate ice cream cones sold\n- y: Number of vanilla ice cream cones sold\n\nObjective:\n- The ice cream bar aims to maximize its profit. The profit per chocolate ice cream cone is $2 and the profit per vanilla ice cream cone is $1.50. Therefore, the objective function is: Maximize 2x + 1.50y\n\nConstraints:\n- At least 30 chocolate ice cream cones must be sold, leading to the constraint: x >= 30.\n- No more than 50 chocolate ice cream cones can be sold, leading to the constraint: x <= 50.\n- At least 20 vanilla ice cream cones must be sold, leading to the constraint: y >= 20.\n- No more than 60 vanilla ice cream cones can be sold, leading to the constraint: y <= 60.\n- The total number of ice cream cones sold cannot exceed 70, resulting in the constraint: x + y <= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 1.50y\nConstraints:\nx >= 30\nx <= 50\ny >= 20\ny <= 60\nx + y <= 70", "canonical": {"objective": [-2.0, -1.5], "constraints": [[-1.0, 0.0, -30.0], [1.0, 0.0, 50.0], [0.0, -1.0, -20.0], [0.0, 1.0, 60.0], [1.0, 1.0, 70.0]]}, "solution": {"x": 50, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate ice cream cones sold: ChocolateCones (between 30 and 50)\n- Number of vanilla ice cream cones sold: VanillaCones (between 20 and 60)\n\nConstraints:\n- Total number of cones sold (chocolate + vanilla) should not exceed 70:\n  ChocolateCones + VanillaCones <= 70\n\nObjective:\n- Maximize profit ($2 per chocolate ice cream cone, $1.50 per vanilla ice cream cone):\n  2 * ChocolateCones + 1.5 * VanillaCones\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateCones = intvar(30, 50)  # Number of chocolate ice cream cones sold\nVanillaCones = intvar(20, 60)  # Number of vanilla ice cream cones sold\n\n# Constraints\nm = Model()\n\n# They only have enough cones to sell 70 items total:\nm += ChocolateCones + VanillaCones <= 70\n\n# Objective\n# Maximize profit ($2 per chocolate ice cream cone, $1.50 per vanilla ice cream cone):\nm.maximize(2 * ChocolateCones + 1.5 * VanillaCones)\n", "entities": [{"start": 23, "end": 32, "word": "chocolate", "entity_group": "VAR", "score": 0.9996673918229209}, {"start": 37, "end": 54, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.9997620605937917}, {"start": 78, "end": 86, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988780193173495}, {"start": 87, "end": 89, "word": "30", "entity_group": "LIMIT", "score": 0.9995472604208587}, {"start": 90, "end": 115, "word": "chocolate ice cream cones", "entity_group": "VAR", "score": 0.9993500946648297}, {"start": 120, "end": 142, "word": "can not sell more than", "entity_group": "CONST_DIR", "score": 0.05948997212559513}, {"start": 143, "end": 145, "word": "50", "entity_group": "LIMIT", "score": 0.9994588545913272}, {"start": 168, "end": 176, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990378666814216}, {"start": 177, "end": 179, "word": "20", "entity_group": "LIMIT", "score": 0.9995237129010807}, {"start": 180, "end": 203, "word": "vanilla ice cream cones", "entity_group": "VAR", "score": 0.9993513230818121}, {"start": 221, "end": 230, "word": "more than", "entity_group": "CONST_DIR", "score": 0.7822343593191193}, {"start": 231, "end": 233, "word": "60", "entity_group": "LIMIT", "score": 0.9995189921084868}, {"start": 252, "end": 256, "word": "only", "entity_group": "CONST_DIR", "score": 0.9900727522819506}, {"start": 283, "end": 285, "word": "70", "entity_group": "LIMIT", "score": 0.9993195190760442}, {"start": 307, "end": 313, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999828132617378}, {"start": 318, "end": 342, "word": "chocolate ice cream cone", "entity_group": "VAR", "score": 0.9990365901274849}, {"start": 348, "end": 349, "word": "2", "entity_group": "PARAM", "score": 0.9980908803508424}, {"start": 358, "end": 364, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999117887927595}, {"start": 369, "end": 391, "word": "vanilla ice cream cone", "entity_group": "VAR", "score": 0.9987422844474215}, {"start": 397, "end": 401, "word": "1.50", "entity_group": "PARAM", "score": 0.9986032034669379}, {"start": 441, "end": 449, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997565524788867}, {"start": 450, "end": 456, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368889597712}]}
{"doc_id": "215705279", "document": "A company is looking too purchase ads in three locations: airports, malls, and movie theatres. The cost of placing an ad at each location and the expected viewership is given as follows. Each ad placed in an airport costs $10000 and reaches 100000 viewers. Each ad places in a mall costs $3000 and reaches 40000 viewers. Finally each ad places in a movie theatre costs $2000 and reaches 10000 viewers. The airport authority limits the number of ads from a single company to 5. In addition, at most half the number of ads should be at movie theatres, and at least 30% of ads should be at malls. If the company has a budget of $100000, how many ads should they place in each location to maximize viewership.", "order_mapping": {"airports": 0, "malls": 1, "movie theatres": 2, "airport": 0, "mall": 1, "movie theatre": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"airport": "100000", "mall": "40000", "movie theatre": "10000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "100000", "terms": {"airport": "10000", "mall": "3000", "movie theatre": "2000"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "limits the number", "limit": "5", "var": "airport", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "half", "var": "movie theatres", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "malls", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads placed in airports\n- y: Number of ads placed in malls\n- z: Number of ads placed in movie theatres\n\nObjective:\n- The company aims to maximize viewership. The viewership for each ad placed in an airport, mall, and movie theatre is given as 100000, 40000, and 10000 respectively. Therefore, the objective function is: Maximize 100000x + 40000y + 10000z\n\nConstraints:\n- The company has a budget of $100000, so the constraint is: 10000x + 3000y + 2000z <= 100000.\n- The airport authority limits the number of ads from a single company to 5, leading to the constraint: x <= 5.\n- At most half the number of ads should be at movie theatres, resulting in the constraint: z <= 0.5(x + y + z).\n- At least 30% of ads should be at malls, leading to the constraint: y >= 0.3(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100000x + 40000y + 10000z\nConstraints:\n10000x + 3000y + 2000z <= 100000\nx <= 5\nz <= 0.5(x + y + z)\ny >= 0.3(x + y + z)", "canonical": {"objective": [-100000.0, -40000.0, -10000.0], "constraints": [[10000.0, 3000.0, 2000.0, 100000.0], [1.0, 0.0, 0.0, 5.0], [-0.5, -0.5, 0.5, 0.0], [0.3, -0.7, 0.3, 0.0]]}, "solution": {"x": 0, "y": 33, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of ads placed in airports: AdsAirport\n- Number of ads placed in malls: AdsMall\n- Number of ads placed in movie theatres: AdsMovieTheatre\n\nConstraints:\n- Total cost of ads should not exceed $100000:\n  10000 * AdsAirport + 3000 * AdsMall + 2000 * AdsMovieTheatre <= 100000\n- At most 5 ads can be placed in airports:\n  AdsAirport <= 5\n- At most half the total number of ads can be placed in movie theatres:\n  AdsMovieTheatre <= 0.5 * (AdsAirport + AdsMall + AdsMovieTheatre)\n- At least 30% of the ads should be placed in malls:\n  AdsMall >= 0.3 * (AdsAirport + AdsMall + AdsMovieTheatre)\n\nObjective:\n- Maximize viewership (100000 viewers per airport ad, 40000 viewers per mall ad, 10000 viewers per movie theatre ad):\n  100000 * AdsAirport + 40000 * AdsMall + 10000 * AdsMovieTheatre\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAdsAirport = intvar(0, 999999999)  # Number of ads placed in airports\nAdsMall = intvar(0, 999999999)  # Number of ads placed in malls\nAdsMovieTheatre = intvar(0, 999999999)  # Number of ads placed in movie theatres\n\n# Constraints\nm = Model()\n\n# Budget constraint: Total cost should not exceed $100000\nm += 10000 * AdsAirport + 3000 * AdsMall + 2000 * AdsMovieTheatre <= 100000\n# Airport ads constraint: At most 5 ads can be placed in airports\nm += AdsAirport <= 5\n# Movie theatre ads constraint: At most half the total number of ads\nm += AdsMovieTheatre <= 0.5 * (AdsAirport + AdsMall + AdsMovieTheatre)\n# Mall ads constraint: At least 30% of the ads should be in malls\nm += AdsMall >= 0.3 * (AdsAirport + AdsMall + AdsMovieTheatre)\n\n# Objective\n# Maximize viewership: 100000 viewers per airport ad, 40000 viewers per mall ad, 10000 viewers per movie theatre ad\nm.maximize(100000 * AdsAirport + 40000 * AdsMall + 10000 * AdsMovieTheatre)\n", "entities": [{"start": 59, "end": 67, "word": "airports", "entity_group": "VAR", "score": 0.9996912820464927}, {"start": 70, "end": 75, "word": "malls", "entity_group": "VAR", "score": 0.9996680906475494}, {"start": 82, "end": 96, "word": "movie theatres", "entity_group": "VAR", "score": 0.9999725798568794}, {"start": 213, "end": 220, "word": "airport", "entity_group": "VAR", "score": 0.9995789276645377}, {"start": 229, "end": 234, "word": "10000", "entity_group": "PARAM", "score": 0.9991283324913293}, {"start": 247, "end": 253, "word": "100000", "entity_group": "PARAM", "score": 0.9994727643438723}, {"start": 254, "end": 261, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9878525300277848}, {"start": 284, "end": 288, "word": "mall", "entity_group": "VAR", "score": 0.9995380935571228}, {"start": 297, "end": 301, "word": "3000", "entity_group": "PARAM", "score": 0.9995322461781105}, {"start": 314, "end": 319, "word": "40000", "entity_group": "PARAM", "score": 0.9996802759862399}, {"start": 320, "end": 327, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9885885797431587}, {"start": 358, "end": 371, "word": "movie theatre", "entity_group": "VAR", "score": 0.9999687271767207}, {"start": 380, "end": 384, "word": "2000", "entity_group": "PARAM", "score": 0.9995068626960224}, {"start": 397, "end": 402, "word": "10000", "entity_group": "PARAM", "score": 0.9997225678596489}, {"start": 403, "end": 410, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9907510467676891}, {"start": 417, "end": 424, "word": "airport", "entity_group": "VAR", "score": 0.9993477585505331}, {"start": 435, "end": 452, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9672222571223223}, {"start": 485, "end": 486, "word": "5", "entity_group": "LIMIT", "score": 0.9995811103389812}, {"start": 503, "end": 510, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992246366355788}, {"start": 511, "end": 515, "word": "half", "entity_group": "LIMIT", "score": 0.9961082139290215}, {"start": 547, "end": 561, "word": "movie theatres", "entity_group": "VAR", "score": 0.999971183859349}, {"start": 568, "end": 576, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992806423477268}, {"start": 577, "end": 581, "word": "30 %", "entity_group": "LIMIT", "score": 0.9854707273431835}, {"start": 602, "end": 607, "word": "malls", "entity_group": "VAR", "score": 0.99961438305669}, {"start": 631, "end": 637, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9906927910067842}, {"start": 643, "end": 649, "word": "100000", "entity_group": "LIMIT", "score": 0.999340243596222}, {"start": 703, "end": 711, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994751508190418}, {"start": 712, "end": 722, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9986998644601183}]}
{"doc_id": "-802287095", "document": "A sandwich shop specializes in cheese sandwiches and they make two types. Sandwich A requires 3 units of cheddar cheese and 3 units of American cheese. Sandwich B requires 5 units of cheddar cheese and 2 units of American cheese. The shop has 500 units and 400 units of cheddar and American cheese available respectively. If the profit per sandwich A is $5 and the profit per sandwich B is $6, how many of each should the shop make to maximize profit?", "order_mapping": {"Sandwich A": 0, "Sandwich B": 1, "sandwich A": 0, "sandwich B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sandwich B": "6", "sandwich A": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"Sandwich A": "3", "Sandwich B": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"Sandwich A": "3", "Sandwich B": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sandwich A produced\n- y: Number of sandwich B produced\n\nObjective:\n- The sandwich shop aims to maximize its profit. The profit per sandwich A is $5 and the profit per sandwich B is $6. Therefore, the objective function is: Maximize 5x + 6y\n\nConstraints:\n- The shop has 500 units of cheddar and 400 units of American cheese available. The constraint for cheddar cheese is: 3x + 5y <= 500. The constraint for American cheese is: 3x + 2y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 6y\nConstraints:\n3x + 5y <= 500\n3x + 2y <= 400", "canonical": {"objective": [-5.0, -6.0], "constraints": [[3.0, 5.0, 500.0], [3.0, 2.0, 400.0]]}, "solution": {"x": 110, "y": 34}, "pseudo_model": "\nDecision Variables:\n- Number of Sandwich A made: SandwichA\n- Number of Sandwich B made: SandwichB\n\nConstraints:\n- Cheddar cheese usage should not exceed 500 units:\n  3 * SandwichA + 5 * SandwichB <= 500\n- American cheese usage should not exceed 400 units:\n  3 * SandwichA + 2 * SandwichB <= 400\n\nObjective:\n- Maximize profit ($5 profit per Sandwich A and $6 profit per Sandwich B):\n  5 * SandwichA + 6 * SandwichB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSandwichA = intvar(0, 999999999)  # Number of Sandwich A made\nSandwichB = intvar(0, 999999999)  # Number of Sandwich B made\n\n# Constraints\nm = Model()\n\n# Cheddar cheese constraint (500 units available):\n# 3 units per Sandwich A and 5 units per Sandwich B\nm += 3 * SandwichA + 5 * SandwichB <= 500\n\n# American cheese constraint (400 units available):\n# 3 units per Sandwich A and 2 units per Sandwich B\nm += 3 * SandwichA + 2 * SandwichB <= 400\n\n# Objective\n# Maximize profit ($5 per Sandwich A and $6 per Sandwich B):\nm.maximize(5 * SandwichA + 6 * SandwichB)\n", "entities": [{"start": 75, "end": 85, "word": "Sandwich A", "entity_group": "VAR", "score": 0.9999778219260429}, {"start": 95, "end": 96, "word": "3", "entity_group": "PARAM", "score": 0.9997178114903391}, {"start": 125, "end": 126, "word": "3", "entity_group": "PARAM", "score": 0.9996938397385119}, {"start": 154, "end": 164, "word": "Sandwich B", "entity_group": "VAR", "score": 0.999913389066542}, {"start": 174, "end": 175, "word": "5", "entity_group": "PARAM", "score": 0.9995794780761722}, {"start": 204, "end": 205, "word": "2", "entity_group": "PARAM", "score": 0.9996534091920655}, {"start": 246, "end": 249, "word": "500", "entity_group": "LIMIT", "score": 0.9996185519754244}, {"start": 260, "end": 263, "word": "400", "entity_group": "LIMIT", "score": 0.9996118992930076}, {"start": 301, "end": 310, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983075535494904}, {"start": 333, "end": 339, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999379046391074}, {"start": 344, "end": 354, "word": "sandwich A", "entity_group": "VAR", "score": 0.9999250298801394}, {"start": 360, "end": 361, "word": "5", "entity_group": "PARAM", "score": 0.9996127921035806}, {"start": 370, "end": 376, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999075422160675}, {"start": 381, "end": 391, "word": "sandwich B", "entity_group": "VAR", "score": 0.9997655081518193}, {"start": 397, "end": 398, "word": "6", "entity_group": "PARAM", "score": 0.9996300708871809}, {"start": 442, "end": 450, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 451, "end": 457, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-983015264", "document": "A toy shop makes wooden dolls and soldiers. Each doll takes 10 minutes of crafting and 5 minutes of sanding. Each soldier takes 15 minutes of crafting and 8 minutes of sanding. The shop has available 1000 minutes for crafting and 800 minutes for sanding. If the profit per doll is $8 and the profit per soldier is $10, how many of each should be made to maximize profit?", "order_mapping": {"dolls": 0, "soldiers": 1, "doll": 0, "soldier": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"doll": "8", "soldier": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"doll": "10", "soldier": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"doll": "5", "soldier": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of wooden dolls\n- y: Number of soldiers\n\nObjective:\n- The toy shop aims to maximize its profit. The profit per doll is $8 and the profit per soldier is $10. Therefore, the objective function is: Maximize 8x + 10y\n\nConstraints:\n- The shop has 1000 minutes available for crafting, and each doll takes 10 minutes while each soldier takes 15 minutes. This leads to the constraint: 10x + 15y <= 1000.\n- The shop has 800 minutes available for sanding, and each doll takes 5 minutes while each soldier takes 8 minutes. This results in the constraint: 5x + 8y <= 800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x + 10y\nConstraints:\n10x + 15y <= 1000\n5x + 8y <= 800", "canonical": {"objective": [-8.0, -10.0], "constraints": [[10.0, 15.0, 1000.0], [5.0, 8.0, 800.0]]}, "solution": {"x": 100, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of dolls made: Dolls\n- Number of soldiers made: Soldiers\n\nConstraints:\n- Total crafting time for dolls and soldiers should not exceed 1000 minutes:\n  10 * Dolls + 15 * Soldiers <= 1000\n- Total sanding time for dolls and soldiers should not exceed 800 minutes:\n  5 * Dolls + 8 * Soldiers <= 800\n\nObjective:\n- Maximize profit (8 dollars per doll, 10 dollars per soldier):\n  8 * Dolls + 10 * Soldiers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDolls = intvar(0, 999999999)  # Number of dolls made\nSoldiers = intvar(0, 999999999)  # Number of soldiers made\n\n# Constraints\nm = Model()\n\n# Total crafting time should not exceed 1000 minutes:\nm += 10 * Dolls + 15 * Soldiers <= 1000\n# Total sanding time should not exceed 800 minutes:\nm += 5 * Dolls + 8 * Soldiers <= 800\n\n# Objective\n# Maximize profit (8 dollars per doll, 10 dollars per soldier):\nm.maximize(8 * Dolls + 10 * Soldiers)\n", "entities": [{"start": 24, "end": 29, "word": "dolls", "entity_group": "VAR", "score": 0.9996238095136911}, {"start": 34, "end": 42, "word": "soldiers", "entity_group": "VAR", "score": 0.9996669032880467}, {"start": 50, "end": 54, "word": "doll", "entity_group": "VAR", "score": 0.9994881105045348}, {"start": 61, "end": 63, "word": "10", "entity_group": "PARAM", "score": 0.999701303863488}, {"start": 88, "end": 89, "word": "5", "entity_group": "PARAM", "score": 0.9996973389187909}, {"start": 116, "end": 123, "word": "soldier", "entity_group": "VAR", "score": 0.9994419317422385}, {"start": 130, "end": 132, "word": "15", "entity_group": "PARAM", "score": 0.9996755356690767}, {"start": 157, "end": 158, "word": "8", "entity_group": "PARAM", "score": 0.9996166646581957}, {"start": 193, "end": 202, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991463113547222}, {"start": 203, "end": 207, "word": "1000", "entity_group": "LIMIT", "score": 0.9994178936134469}, {"start": 233, "end": 236, "word": "800", "entity_group": "LIMIT", "score": 0.999594381178013}, {"start": 266, "end": 272, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990424790693911}, {"start": 277, "end": 281, "word": "doll", "entity_group": "VAR", "score": 0.9995603080664789}, {"start": 287, "end": 288, "word": "8", "entity_group": "PARAM", "score": 0.9991624925199387}, {"start": 297, "end": 303, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999094567883715}, {"start": 308, "end": 315, "word": "soldier", "entity_group": "VAR", "score": 0.9990975872162979}, {"start": 321, "end": 323, "word": "10", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 361, "end": 369, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 370, "end": 376, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-192352919", "document": "A movie producer has $500000 to invest in two movies, an action movie and an animation. She has decided to invest at least three times as much money in the animation movie than in the action movie. However the amount invested in the animation movie can be at most $400000. If the money invested in the action movie earns 9% and the money invested in the animation movie earns 6%. How much money should she invest in each to maximize her earnings?", "order_mapping": {"action movie": 0, "animation": 1, "animation movie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"animation movie": "6%", "action movie": "9%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "500000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "animation movie", "direction": "at least", "param": "three", "y_var": "action movie", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "400000", "var": "animation movie", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the action movie\n- y: Dollars invested in the animation movie\n\nObjective:\n- The movie producer aims to maximize her earnings. The money invested in the action movie earns 9% and the money invested in the animation movie earns 6%. Therefore, the objective function is: Maximize 0.09x + 0.06y\n\nConstraints:\n- The movie producer has $500,000 to invest, so the constraint is: x + y <= 500,000.\n- She has decided to invest at least three times as much money in the animation movie than in the action movie, leading to the constraint: y >= 3x.\n- The amount invested in the animation movie can be at most $400,000, leading to the constraint: y <= 400,000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.09x + 0.06y\nConstraints:\nx + y <= 500,000\ny >= 3x\ny <= 400,000", "canonical": {"objective": [-0.09, -0.06], "constraints": []}, "solution": {"x": 100000000, "y": 100000000}, "pseudo_model": "\nDecision Variables:\n- Money invested in the action movie: ActionMovie\n- Money invested in the animation movie: AnimationMovie\n\nConstraints:\n- Total investment should not exceed $500000:\n  ActionMovie + AnimationMovie <= 500000\n- Invest at least three times as much in the animation movie as in the action movie:\n  AnimationMovie >= 3 * ActionMovie\n- The amount invested in the animation movie can be at most $400000:\n  AnimationMovie <= 400000\n\nObjective:\n- Maximize earnings (9% from action movie, 6% from animation movie):\n  0.09 * ActionMovie + 0.06 * AnimationMovie\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nActionMovie = intvar(0, 999999999)  # Money invested in the action movie\nAnimationMovie = intvar(0, 999999999)  # Money invested in the animation movie\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $500000:\nm += ActionMovie + AnimationMovie <= 500000\n# Invest at least three times as much in the animation movie as in the action movie:\nm += AnimationMovie >= 3 * ActionMovie\n# The amount invested in the animation movie can be at most $400000:\nm += AnimationMovie <= 400000\n\n# Objective\n# Maximize earnings (9% from action movie, 6% from animation movie):\nm.maximize(0.09 * ActionMovie + 0.06 * AnimationMovie)\n", "entities": [{"start": 17, "end": 20, "word": "has", "entity_group": "CONST_DIR", "score": 0.9976455249002287}, {"start": 23, "end": 29, "word": "500000", "entity_group": "LIMIT", "score": 0.9988958721013181}, {"start": 59, "end": 71, "word": "action movie", "entity_group": "VAR", "score": 0.9999620650360022}, {"start": 79, "end": 88, "word": "animation", "entity_group": "VAR", "score": 0.9997474684974926}, {"start": 117, "end": 125, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981457168749494}, {"start": 126, "end": 137, "word": "three times", "entity_group": "PARAM", "score": 0.5441958069758382}, {"start": 159, "end": 174, "word": "animation movie", "entity_group": "VAR", "score": 0.9999839191930568}, {"start": 187, "end": 199, "word": "action movie", "entity_group": "VAR", "score": 0.9998954050256239}, {"start": 237, "end": 252, "word": "animation movie", "entity_group": "VAR", "score": 0.9999737642078746}, {"start": 260, "end": 267, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9950831120653499}, {"start": 270, "end": 276, "word": "400000", "entity_group": "LIMIT", "score": 0.9994151119530809}, {"start": 308, "end": 320, "word": "action movie", "entity_group": "VAR", "score": 0.9999827243655858}, {"start": 321, "end": 326, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.995982604044881}, {"start": 327, "end": 330, "word": "9 %", "entity_group": "PARAM", "score": 0.9815810620529808}, {"start": 361, "end": 376, "word": "animation movie", "entity_group": "VAR", "score": 0.999975378876468}, {"start": 377, "end": 382, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9963424839912159}, {"start": 383, "end": 386, "word": "6 %", "entity_group": "PARAM", "score": 0.9931712753943791}, {"start": 433, "end": 441, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994802390170989}, {"start": 446, "end": 454, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9989306292997789}]}
{"doc_id": "-1120220216", "document": "A tropical farmer has 100 acres of land to grow guavas and mangos. He prefers to grow more mangos than guavas, but because they require so much more work, he can grow at most 2 times the amount of mangos as guavas. In addition he must grow at least 20 acres of guavas and at least 40 acres of mangos. If the profit per acre of guavas is $300 and the profit per acres of mangos is $500, how many acre of each should he grow to maximize profit?", "order_mapping": {"guavas": 0, "mangos": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mangos": "500", "guavas": "300"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "mangos", "direction": "at most", "param": "2", "y_var": "guavas", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "guavas", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "mangos", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of guavas\n- y: Acres of mangos\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of guavas is $300 and the profit per acre of mangos is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- The farmer has 100 acres of land available, so the constraint is: x + y <= 100.\n- The farmer can grow at most 2 times the amount of mangos as guavas, leading to the constraint: y <= 2x.\n- The farmer must grow at least 20 acres of guavas, resulting in the constraint: x >= 20.\n- The farmer must grow at least 40 acres of mangos, leading to the constraint: y >= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\nx + y <= 100\ny <= 2x\nx >= 20\ny >= 40", "canonical": {"objective": [-300.0, -500.0], "constraints": [[1.0, 1.0, 100.0], [-2.0, 1.0, 0.0], [-1.0, 0.0, -20.0], [0.0, -1.0, -40.0]]}, "solution": {"x": 34, "y": 66}, "pseudo_model": "\nDecision Variables:\n- Number of acres for guavas: Guavas\n- Number of acres for mangos: Mangos\n\nConstraints:\n- Total acres used should not exceed 100:\n  Guavas + Mangos <= 100\n- At most 2 times the amount of mangos as guavas:\n  Mangos <= 2 * Guavas\n- At least 20 acres of guavas:\n  Guavas >= 20\n- At least 40 acres of mangos:\n  Mangos >= 40\n\nObjective:\n- Maximize profit (300 dollars per acre of guavas, 500 dollars per acre of mangos):\n  300 * Guavas + 500 * Mangos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGuavas = intvar(0, 999999999)  # Number of acres for guavas\nMangos = intvar(0, 999999999)  # Number of acres for mangos\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 100:\nm += Guavas + Mangos <= 100\n# He can grow at most 2 times the amount of mangos as guavas:\nm += Mangos <= 2 * Guavas\n# He must grow at least 20 acres of guavas:\nm += Guavas >= 20\n# He must grow at least 40 acres of mangos:\nm += Mangos >= 40\n\n# Objective\n# Maximize profit (300 dollars per acre of guavas, 500 dollars per acre of mangos):\nm.maximize(300 * Guavas + 500 * Mangos)\n", "entities": [{"start": 18, "end": 21, "word": "has", "entity_group": "CONST_DIR", "score": 0.9928322175265036}, {"start": 22, "end": 25, "word": "100", "entity_group": "LIMIT", "score": 0.9988746972327208}, {"start": 48, "end": 54, "word": "guavas", "entity_group": "VAR", "score": 0.9979142021617098}, {"start": 59, "end": 65, "word": "mangos", "entity_group": "VAR", "score": 0.9994516417950428}, {"start": 92, "end": 98, "word": "mangos", "entity_group": "VAR", "score": 0.9997675867013849}, {"start": 104, "end": 110, "word": "guavas", "entity_group": "VAR", "score": 0.9995817800939221}, {"start": 170, "end": 177, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998200086160888}, {"start": 178, "end": 185, "word": "2 times", "entity_group": "PARAM", "score": 0.8508817527727268}, {"start": 200, "end": 206, "word": "mangos", "entity_group": "VAR", "score": 0.9995958464464041}, {"start": 210, "end": 216, "word": "guavas", "entity_group": "VAR", "score": 0.9996719134966603}, {"start": 244, "end": 252, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988751769862797}, {"start": 253, "end": 255, "word": "20", "entity_group": "LIMIT", "score": 0.9997612290405236}, {"start": 265, "end": 271, "word": "guavas", "entity_group": "VAR", "score": 0.9991134500733829}, {"start": 276, "end": 284, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992558893365654}, {"start": 285, "end": 287, "word": "40", "entity_group": "LIMIT", "score": 0.9996831866631473}, {"start": 297, "end": 303, "word": "mangos", "entity_group": "VAR", "score": 0.9997653836391294}, {"start": 313, "end": 319, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998867030253401}, {"start": 332, "end": 338, "word": "guavas", "entity_group": "VAR", "score": 0.9994952128909463}, {"start": 344, "end": 347, "word": "300", "entity_group": "PARAM", "score": 0.9987476115901672}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999376644481651}, {"start": 376, "end": 382, "word": "mangos", "entity_group": "VAR", "score": 0.9994451028640514}, {"start": 388, "end": 391, "word": "500", "entity_group": "PARAM", "score": 0.9996884243466465}, {"start": 434, "end": 442, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997389982655639}, {"start": 443, "end": 449, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927489835869}]}
{"doc_id": "-1323625459", "document": "A company sells almond and cashews in small tins. Each almond tin takes 5 minutes to fill and 3 minutes to label. Each cashew tin takes 4 minutes to fill and 5 minutes to label. The company has available 400 minutes for filling and 500 minutes for labelling. If the profit per almond tin is $10 and the profit per cashew tin is $15, how many of each should they sell to maximize profit?", "order_mapping": {"almond": 0, "cashews": 1, "almond tin": 0, "cashew tin": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"almond tin": "10", "cashew tin": "15"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"almond tin": "5", "cashew tin": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"almond tin": "3", "cashew tin": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of almond tins\n- y: Number of cashew tins\n\nObjective:\n- The company aims to maximize its profit. The profit per almond tin is $10 and the profit per cashew tin is $15. Therefore, the objective function is: Maximize 10x + 15y\n\nConstraints:\n- The company has 400 minutes available for filling, and each almond tin takes 5 minutes to fill and each cashew tin takes 4 minutes to fill. This leads to the constraint: 5x + 4y <= 400.\n- The company has 500 minutes available for labeling, and each almond tin takes 3 minutes to label and each cashew tin takes 5 minutes to label. This results in the constraint: 3x + 5y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 15y\nConstraints:\n5x + 4y <= 400\n3x + 5y <= 500", "canonical": {"objective": [-10.0, -15.0], "constraints": [[5.0, 4.0, 400.0], [3.0, 5.0, 500.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of almond tins produced: AlmondTins\n- Number of cashew tins produced: CashewTins\n\nConstraints:\n- Total minutes for filling should not exceed 400 minutes (5 minutes per almond tin, 4 minutes per cashew tin):\n  5 * AlmondTins + 4 * CashewTins <= 400\n- Total minutes for labelling should not exceed 500 minutes (3 minutes per almond tin, 5 minutes per cashew tin):\n  3 * AlmondTins + 5 * CashewTins <= 500\n\nObjective:\n- Maximize profit ($10 per almond tin, $15 per cashew tin):\n  10 * AlmondTins + 15 * CashewTins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlmondTins = intvar(0, 999999999)  # Number of almond tins produced\nCashewTins = intvar(0, 999999999)  # Number of cashew tins produced\n\n# Constraints\nm = Model()\n\n# Total minutes for filling should not exceed 400 minutes:\n# (5 minutes per almond tin, 4 minutes per cashew tin)\nm += 5 * AlmondTins + 4 * CashewTins <= 400\n\n# Total minutes for labelling should not exceed 500 minutes:\n# (3 minutes per almond tin, 5 minutes per cashew tin)\nm += 3 * AlmondTins + 5 * CashewTins <= 500\n\n# Objective\n# Maximize profit ($10 per almond tin, $15 per cashew tin):\nm.maximize(10 * AlmondTins + 15 * CashewTins)\n", "entities": [{"start": 16, "end": 22, "word": "almond", "entity_group": "VAR", "score": 0.9992615335066759}, {"start": 27, "end": 34, "word": "cashews", "entity_group": "VAR", "score": 0.9922521107151736}, {"start": 56, "end": 66, "word": "almond tin", "entity_group": "VAR", "score": 0.9999839413540275}, {"start": 73, "end": 74, "word": "5", "entity_group": "PARAM", "score": 0.9996818955003227}, {"start": 95, "end": 96, "word": "3", "entity_group": "PARAM", "score": 0.999721304475049}, {"start": 121, "end": 131, "word": "cashew tin", "entity_group": "VAR", "score": 0.999904090856122}, {"start": 138, "end": 139, "word": "4", "entity_group": "PARAM", "score": 0.999721583237789}, {"start": 160, "end": 161, "word": "5", "entity_group": "PARAM", "score": 0.9996513129386286}, {"start": 197, "end": 206, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989716786564756}, {"start": 207, "end": 210, "word": "400", "entity_group": "LIMIT", "score": 0.9993883040728799}, {"start": 235, "end": 238, "word": "500", "entity_group": "LIMIT", "score": 0.9995879117479244}, {"start": 270, "end": 276, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999447301662342}, {"start": 281, "end": 291, "word": "almond tin", "entity_group": "VAR", "score": 0.9998863970320472}, {"start": 297, "end": 299, "word": "10", "entity_group": "PARAM", "score": 0.9996127278779463}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999084770805512}, {"start": 319, "end": 329, "word": "cashew tin", "entity_group": "VAR", "score": 0.9995955890774034}, {"start": 335, "end": 337, "word": "15", "entity_group": "PARAM", "score": 0.9996300702750706}, {"start": 377, "end": 385, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843680345001}, {"start": 386, "end": 392, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368872053741}]}
{"doc_id": "-1294988074", "document": "A man is watching his sugar and fat intake. He drinks two smoothies. Each cup of smoothie A contains 10 units of protein, 20 units of carbs, 15 units of fat, and 8 units of sugar. Each cup of smoothie B contains 12 units of protein, 30 units of carbs, 25 units of fat, and 12 units of sugar. The man needs at least 150 units of protein and 200 units of carbs. However we wants to consume at most 185 units of fat. How many cups of each should he drink to minimize his sugar intake?", "order_mapping": {"smoothie A": 0, "smoothie B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sugar intake", "terms": {"smoothie A": "8", "smoothie B": "12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"smoothie A": "10", "smoothie B": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "200", "terms": {"smoothie A": "20", "smoothie B": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "185", "terms": {"smoothie A": "15", "smoothie B": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Cups of smoothie A\n- y: Cups of smoothie B\n\nObjective:\n- The man wants to minimize his sugar intake. Each cup of smoothie A contains 8 units of sugar, and each cup of smoothie B contains 12 units of sugar. Therefore, the objective function is: Minimize 8x + 12y\n\nConstraints:\n- The man needs at least 150 units of protein, which translates to the constraint: 10x + 12y >= 150.\n- He also needs at least 200 units of carbs, leading to the constraint: 20x + 30y >= 200.\n- He wants to consume at most 185 units of fat, resulting in the constraint: 15x + 25y <= 185.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 8x + 12y\nConstraints:\n10x + 12y >= 150\n20x + 30y >= 200\n15x + 25y <= 185", "canonical": {"objective": [8.0, 12.0], "constraints": [[-10.0, -12.0, -150.0], [-20.0, -30.0, -200.0], [15.0, 25.0, 185.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of cups of smoothie A: SmoothieA\n- Number of cups of smoothie B: SmoothieB\n\nConstraints:\n- At least 150 units of protein required:\n  10 * SmoothieA + 12 * SmoothieB >= 150\n- At least 200 units of carbs required:\n  20 * SmoothieA + 30 * SmoothieB >= 200\n- At most 185 units of fat allowed:\n  15 * SmoothieA + 25 * SmoothieB <= 185\n\nObjective:\n- Minimize sugar intake (8 units per cup of smoothie A, 12 units per cup of smoothie B):\n  8 * SmoothieA + 12 * SmoothieB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmoothieA = intvar(0, 999999999)  # Number of cups of smoothie A\nSmoothieB = intvar(0, 999999999)  # Number of cups of smoothie B\n\n# Constraints\nm = Model()\n\n# The man needs at least 150 units of protein:\nm += 10 * SmoothieA + 12 * SmoothieB >= 150\n# The man needs at least 200 units of carbs:\nm += 20 * SmoothieA + 30 * SmoothieB >= 200\n# The man wants to consume at most 185 units of fat:\nm += 15 * SmoothieA + 25 * SmoothieB <= 185\n\n# Objective\n# Minimize sugar intake (8 units per cup of smoothie A, 12 units per cup of smoothie B):\nm.minimize(8 * SmoothieA + 12 * SmoothieB)\n", "entities": [{"start": 83, "end": 93, "word": "smoothie A", "entity_group": "VAR", "score": 0.9998451722832515}, {"start": 103, "end": 105, "word": "10", "entity_group": "PARAM", "score": 0.9994390979749572}, {"start": 125, "end": 127, "word": "20", "entity_group": "PARAM", "score": 0.9997347075047764}, {"start": 145, "end": 147, "word": "15", "entity_group": "PARAM", "score": 0.9997373299996329}, {"start": 167, "end": 168, "word": "8", "entity_group": "PARAM", "score": 0.9995413415660181}, {"start": 178, "end": 183, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9972595450820565}, {"start": 198, "end": 208, "word": "smoothie B", "entity_group": "VAR", "score": 0.9999384951060668}, {"start": 218, "end": 220, "word": "12", "entity_group": "PARAM", "score": 0.9995644615584846}, {"start": 240, "end": 242, "word": "30", "entity_group": "PARAM", "score": 0.999734708131294}, {"start": 260, "end": 262, "word": "25", "entity_group": "PARAM", "score": 0.999737329999631}, {"start": 282, "end": 284, "word": "12", "entity_group": "PARAM", "score": 0.9993090118094721}, {"start": 294, "end": 299, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9984355250015357}, {"start": 316, "end": 324, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989032246748976}, {"start": 325, "end": 328, "word": "150", "entity_group": "LIMIT", "score": 0.9997410367146072}, {"start": 350, "end": 353, "word": "200", "entity_group": "LIMIT", "score": 0.9997247850751774}, {"start": 399, "end": 406, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991606452984342}, {"start": 407, "end": 410, "word": "185", "entity_group": "LIMIT", "score": 0.9995793255074934}, {"start": 467, "end": 475, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999280607648825}, {"start": 480, "end": 492, "word": "sugar intake", "entity_group": "OBJ_NAME", "score": 0.9904159014002484}]}
{"doc_id": "-326788588", "document": "A hot dog stand sells regular hot dogs and premium hot dogs with extra toppings. The stand makes x1 regular hot dogs at a profit of $3 each and x2 premium hot dogs at a profit of $5 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 80 regular hot dogs and at most 70 premium hot dogs. The stand only has enough supplies to sell at most 120 hot-dogs of either type. How many of each hot-dog should the stand make to maximize profit?", "order_mapping": {"regular hot dogs": 0, "premium hot dogs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular hot dogs": "3", "premium hot dogs": "5"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "80", "var": "regular hot dogs", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "premium hot dogs", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "120", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of regular hot dogs made\n- x2: Number of premium hot dogs made\n\nObjective:\n- The stand aims to maximize its profit. It makes $3 profit on each regular hot dog and $5 profit on each premium hot dog. Therefore, the objective function is: Maximize 3x1 + 5x2\n\nConstraints:\n- There is a demand for at most 80 regular hot dogs, leading to the constraint: x1 <= 80.\n- There is a demand for at most 70 premium hot dogs, leading to the constraint: x2 <= 70.\n- The stand only has enough supplies to sell at most 120 hot dogs of either type, resulting in the constraint: x1 + x2 <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x1 + 5x2\nConstraints:\nx1 <= 80\nx2 <= 70\nx1 + x2 <= 120", "canonical": {"objective": [-3.0, -5.0], "constraints": [[1.0, 0.0, 80.0], [0.0, 1.0, 70.0], [1.0, 1.0, 120.0]]}, "solution": {"x": 50, "y": 70}, "pseudo_model": "\nDecision Variables:\n- Number of regular hot dogs made: RegularHotDogs\n- Number of premium hot dogs made: PremiumHotDogs\n\nConstraints:\n- At most 80 regular hot dogs due to demand:\n  RegularHotDogs <= 80\n- At most 70 premium hot dogs due to demand:\n  PremiumHotDogs <= 70\n- Total hot dogs made should not exceed 120 due to supply limitations:\n  RegularHotDogs + PremiumHotDogs <= 120\n\nObjective:\n- Maximize profit (3 dollars per regular hot dog, 5 dollars per premium hot dog):\n  3 * RegularHotDogs + 5 * PremiumHotDogs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularHotDogs = intvar(0, 999999999)  # Number of regular hot dogs made\nPremiumHotDogs = intvar(0, 999999999)  # Number of premium hot dogs made\n\n# Constraints\nm = Model()\n\n# Demand constraints\nm += RegularHotDogs <= 80  # At most 80 regular hot dogs\nm += PremiumHotDogs <= 70  # At most 70 premium hot dogs\n\n# Supply constraint\nm += RegularHotDogs + PremiumHotDogs <= 120  # Total hot dogs made should not exceed 120\n\n# Objective\n# Maximize profit (3 dollars per regular hot dog, 5 dollars per premium hot dog):\nm.maximize(3 * RegularHotDogs + 5 * PremiumHotDogs)\n", "entities": [{"start": 22, "end": 38, "word": "regular hot dogs", "entity_group": "VAR", "score": 0.9976755159118595}, {"start": 43, "end": 59, "word": "premium hot dogs", "entity_group": "VAR", "score": 0.9967954005624721}, {"start": 101, "end": 117, "word": "regular hot dogs", "entity_group": "VAR", "score": 0.9990692689642396}, {"start": 123, "end": 129, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995946686448209}, {"start": 135, "end": 136, "word": "3", "entity_group": "PARAM", "score": 0.999617150380363}, {"start": 149, "end": 165, "word": "premium hot dogs", "entity_group": "VAR", "score": 0.9990273896898273}, {"start": 171, "end": 177, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999384735760753}, {"start": 183, "end": 184, "word": "5", "entity_group": "PARAM", "score": 0.9995810610938695}, {"start": 282, "end": 289, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988500183970526}, {"start": 290, "end": 292, "word": "80", "entity_group": "LIMIT", "score": 0.999560118592344}, {"start": 293, "end": 309, "word": "regular hot dogs", "entity_group": "VAR", "score": 0.9987192821876683}, {"start": 314, "end": 321, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999010904442167}, {"start": 322, "end": 324, "word": "70", "entity_group": "LIMIT", "score": 0.9995119593182799}, {"start": 325, "end": 341, "word": "premium hot dogs", "entity_group": "VAR", "score": 0.99859436397119}, {"start": 387, "end": 394, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988115889889897}, {"start": 395, "end": 398, "word": "120", "entity_group": "LIMIT", "score": 0.999499081979735}, {"start": 479, "end": 487, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991258343225443}, {"start": 488, "end": 494, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998151559969007}]}
{"doc_id": "286528177", "document": "Linda has 300 acres of land to grow spinach and kale. Per acre of land, spinach costs $40 for the seeds and takes 1 hour to maintain. Per acre of land, kale costs $50 for the seeds and takes 2 hours to maintain. Linda has a budget of $14000 for seeds and has available 450 hours for maintenance. If the profit per acre of spinach is $20 and the profit per acre of kale is $30, how many acres of each should be grown to maximize profit?", "order_mapping": {"spinach": 0, "kale": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"spinach": "20", "kale": "30"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "14000", "terms": {"spinach": "40", "kale": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "450", "terms": {"spinach": "1", "kale": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land for growing spinach\n- y: Acres of land for growing kale\n\nObjective:\n- Linda aims to maximize her profit. The profit per acre of spinach is $20 and the profit per acre of kale is $30. Therefore, the objective function is: Maximize 20x + 30y\n\nConstraints:\n- Linda has 300 acres of land available, so the constraint is: x + y <= 300.\n- Linda has a budget of $14000 for seeds, leading to the constraint: 40x + 50y <= 14000.\n- Linda has 450 hours available for maintenance, resulting in the constraint: x + 2y <= 450.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 30y\nConstraints:\nx + y <= 300\n40x + 50y <= 14000\nx + 2y <= 450", "canonical": {"objective": [-20.0, -30.0], "constraints": [[1.0, 1.0, 300.0], [40.0, 50.0, 14000.0], [1.0, 2.0, 450.0]]}, "solution": {"x": 150, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of acres of spinach grown: Spinach\n- Number of acres of kale grown: Kale\n\nConstraints:\n- Total acres of spinach and kale should not exceed 300:\n  Spinach + Kale <= 300\n- Seed budget constraint: $40 per acre for spinach and $50 per acre for kale, with a total budget of $14000:\n  40 * Spinach + 50 * Kale <= 14000\n- Maintenance time constraint: 1 hour per acre for spinach and 2 hours per acre for kale, with a total available time of 450 hours:\n  1 * Spinach + 2 * Kale <= 450\n\nObjective:\n- Maximize profit: $20 per acre for spinach and $30 per acre for kale:\n  20 * Spinach + 30 * Kale\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSpinach = intvar(0, 999999999)  # Number of acres of spinach\nKale = intvar(0, 999999999)  # Number of acres of kale\n\n# Constraints\nm = Model()\n\n# Total acres of spinach and kale should not exceed 300:\nm += Spinach + Kale <= 300\n# Seed budget constraint: $40 per acre for spinach and $50 per acre for kale, total budget $14000:\nm += 40 * Spinach + 50 * Kale <= 14000\n# Maintenance time constraint: 1 hour per acre for spinach and 2 hours per acre for kale, total available time 450 hours:\nm += 1 * Spinach + 2 * Kale <= 450\n\n# Objective\n# Maximize profit: $20 per acre for spinach and $30 per acre for kale:\nm.maximize(20 * Spinach + 30 * Kale)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9939758002008329}, {"start": 10, "end": 13, "word": "300", "entity_group": "LIMIT", "score": 0.998740627126708}, {"start": 36, "end": 43, "word": "spinach", "entity_group": "VAR", "score": 0.9969953471785965}, {"start": 48, "end": 52, "word": "kale", "entity_group": "VAR", "score": 0.9995988136482795}, {"start": 74, "end": 81, "word": "spinach", "entity_group": "VAR", "score": 0.9996516968908458}, {"start": 90, "end": 92, "word": "40", "entity_group": "PARAM", "score": 0.9995791254279054}, {"start": 117, "end": 118, "word": "1", "entity_group": "PARAM", "score": 0.998721405001756}, {"start": 157, "end": 161, "word": "kale", "entity_group": "VAR", "score": 0.9996516948119494}, {"start": 170, "end": 172, "word": "50", "entity_group": "PARAM", "score": 0.9995791243849291}, {"start": 197, "end": 198, "word": "2", "entity_group": "PARAM", "score": 0.9994921282753005}, {"start": 231, "end": 237, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9985335078326895}, {"start": 243, "end": 248, "word": "14000", "entity_group": "LIMIT", "score": 0.9980574594489229}, {"start": 267, "end": 276, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989288499697431}, {"start": 277, "end": 280, "word": "450", "entity_group": "LIMIT", "score": 0.9991712961230067}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999117625933496}, {"start": 331, "end": 338, "word": "spinach", "entity_group": "VAR", "score": 0.999232270721653}, {"start": 344, "end": 346, "word": "20", "entity_group": "PARAM", "score": 0.9991382200709235}, {"start": 355, "end": 361, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999294905742369}, {"start": 374, "end": 378, "word": "kale", "entity_group": "VAR", "score": 0.9992072853593706}, {"start": 384, "end": 386, "word": "30", "entity_group": "PARAM", "score": 0.9995438769490016}, {"start": 431, "end": 439, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694963358727}, {"start": 440, "end": 446, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856883212}]}
{"doc_id": "-574304318", "document": "A doctor has $100000 to invest in two vaccine companies, company M and company P. He has decided to invest at least three times as much money in company M than in company P. In addition he can invest at most $80000 in company M. If investments in company M earn 9% and investments in company P earn 12%, how much should he invest in each to maximize earnings?", "order_mapping": {"company M": 0, "company P.": 1, "company M.": 0, "company P": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"company M": "9%", "company P": "12%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "company M", "direction": "at least", "param": "three", "y_var": "company P.", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80000", "var": "company M.", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in company M\n- y: Dollars invested in company P\n\nObjective:\n- The doctor aims to maximize his earnings. Investments in company M earn 9% and investments in company P earn 12%. Therefore, the objective function is: Maximize 0.09x + 0.12y\n\nConstraints:\n- The doctor has $100,000 to invest, so the constraint is: x + y <= 100000.\n- He has decided to invest at least three times as much money in company M than in company P, leading to the constraint: x >= 3y.\n- He can invest at most $80,000 in company M, resulting in the constraint: x <= 80000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.09x + 0.12y\nConstraints:\nx + y <= 100000\nx >= 3y\nx <= 80000", "canonical": {"objective": [-0.09, -0.12], "constraints": [[1.0, 1.0, 100000.0], [-1.0, 3.0, 0.0], [1.0, 0.0, 80000.0]]}, "solution": {"x": 75000, "y": 25000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in company M: CompanyM\n- Amount invested in company P: CompanyP\n\nConstraints:\n- Total investment should not exceed $100000:\n  CompanyM + CompanyP <= 100000\n- Invest at least three times as much in company M as in company P:\n  CompanyM >= 3 * CompanyP\n- Can invest at most $80000 in company M:\n  CompanyM <= 80000\n\nObjective:\n- Maximize earnings (9% from company M, 12% from company P):\n  0.09 * CompanyM + 0.12 * CompanyP\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCompanyM = intvar(0, 999999999)  # Amount invested in company M\nCompanyP = intvar(0, 999999999)  # Amount invested in company P\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $100000:\nm += CompanyM + CompanyP <= 100000\n# Invest at least three times as much in company M as in company P:\nm += CompanyM >= 3 * CompanyP\n# Can invest at most $80000 in company M:\nm += CompanyM <= 80000\n\n# Objective\n# Maximize earnings (9% from company M, 12% from company P):\nm.maximize(0.09 * CompanyM + 0.12 * CompanyP)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9959791613099193}, {"start": 15, "end": 21, "word": "100000", "entity_group": "LIMIT", "score": 0.9995669204439858}, {"start": 59, "end": 68, "word": "company M", "entity_group": "VAR", "score": 0.9999470466506164}, {"start": 73, "end": 83, "word": "company P.", "entity_group": "VAR", "score": 0.9999391076616048}, {"start": 109, "end": 117, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973161783112112}, {"start": 118, "end": 123, "word": "three", "entity_group": "PARAM", "score": 0.9875822198183152}, {"start": 147, "end": 156, "word": "company M", "entity_group": "VAR", "score": 0.9998994973130965}, {"start": 165, "end": 175, "word": "company P.", "entity_group": "VAR", "score": 0.9998702928905684}, {"start": 202, "end": 209, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9935981145721641}, {"start": 212, "end": 217, "word": "80000", "entity_group": "LIMIT", "score": 0.9977700343127226}, {"start": 221, "end": 231, "word": "company M.", "entity_group": "VAR", "score": 0.9999655309730707}, {"start": 250, "end": 259, "word": "company M", "entity_group": "VAR", "score": 0.9998899176414554}, {"start": 260, "end": 264, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.988202674432067}, {"start": 265, "end": 268, "word": "9 %", "entity_group": "PARAM", "score": 0.9845447816822389}, {"start": 288, "end": 297, "word": "company P", "entity_group": "VAR", "score": 0.9997590664906985}, {"start": 298, "end": 302, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9897876456759666}, {"start": 303, "end": 307, "word": "12 %", "entity_group": "PARAM", "score": 0.9862421873995078}, {"start": 347, "end": 355, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996421443402658}, {"start": 356, "end": 364, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.990124867327053}]}
{"doc_id": "146329572", "document": "Jacob has $3000 to invest in the logging and shipping industries. Each dollar invested in the logging industry yields a $0.06 profit while each dollar invested in the shipping industry yields a $0.03 profit. A minimum of 50% of the money has to be invested in the logging industry and at least $1000 has to be invested in the shipping industry. How much should he invest in each to maximize his profit?", "order_mapping": {"logging": 0, "shipping industries": 1, "logging industry": 0, "shipping industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"logging industry": "0.06", "shipping industry": "0.03"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "3000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "50%", "var": "logging industry", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "1000", "var": "shipping industry", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the logging industry\n- y: Dollars invested in the shipping industry\n\nObjective:\n- Jacob aims to maximize his profit. Each dollar invested in the logging industry yields a $0.06 profit, and each dollar invested in the shipping industry yields a $0.03 profit. Therefore, the objective function is: Maximize 0.06x + 0.03y\n\nConstraints:\n- Jacob has $3000 to invest, so the constraint is: x + y <= 3000.\n- A minimum of 50% of the money has to be invested in the logging industry, leading to the constraint: x >= 0.5(x + y).\n- At least $1000 has to be invested in the shipping industry, leading to the constraint: y >= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.06x + 0.03y\nConstraints:\nx + y <= 3000\nx >= 0.5(x + y)\ny >= 1000", "canonical": {"objective": [-0.06, -0.03], "constraints": [[1.0, 1.0, 3000.0], [-0.5, 0.5, 0.0], [0.0, -1.0, -1000.0]]}, "solution": {"x": 2000, "y": 1000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the logging industry: Logging\n- Amount invested in the shipping industry: Shipping\n\nConstraints:\n- Total investment should not exceed 3000 dollars:\n  Logging + Shipping <= 3000\n- A minimum of 50% of the money has to be invested in the logging industry:\n  Logging >= 0.5 * 3000\n- At least 1000 dollars has to be invested in the shipping industry:\n  Shipping >= 1000\n\nObjective:\n- Maximize profit (0.06 profit per dollar invested in the logging industry, 0.03 profit per dollar invested in the shipping industry):\n  0.06 * Logging + 0.03 * Shipping\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLogging = intvar(0, 999999999)  # Amount invested in the logging industry\nShipping = intvar(0, 999999999)  # Amount invested in the shipping industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $3000:\nm += Logging + Shipping <= 3000\n# A minimum of 50% of the money has to be invested in the logging industry:\nm += Logging >= 0.5 * 3000\n# At least $1000 has to be invested in the shipping industry:\nm += Shipping >= 1000\n\n# Objective\n# Maximize profit (0.06 profit per dollar invested in the logging industry, 0.03 profit per dollar invested in the shipping industry):\nm.maximize(0.06 * Logging + 0.03 * Shipping)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9901330221497208}, {"start": 12, "end": 16, "word": "3000", "entity_group": "LIMIT", "score": 0.9993440207258156}, {"start": 34, "end": 41, "word": "logging", "entity_group": "VAR", "score": 0.9992929135752341}, {"start": 46, "end": 65, "word": "shipping industries", "entity_group": "VAR", "score": 0.9998255394967012}, {"start": 96, "end": 112, "word": "logging industry", "entity_group": "VAR", "score": 0.9999440516570646}, {"start": 124, "end": 128, "word": "0.06", "entity_group": "PARAM", "score": 0.9956418630560068}, {"start": 129, "end": 135, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993602608541373}, {"start": 170, "end": 187, "word": "shipping industry", "entity_group": "VAR", "score": 0.9999444121054764}, {"start": 199, "end": 203, "word": "0.03", "entity_group": "PARAM", "score": 0.9990859340119529}, {"start": 204, "end": 210, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997961860553797}, {"start": 215, "end": 222, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9986306075491516}, {"start": 226, "end": 230, "word": "50 %", "entity_group": "LIMIT", "score": 0.9818709267145161}, {"start": 270, "end": 286, "word": "logging industry", "entity_group": "VAR", "score": 0.9998637170636849}, {"start": 291, "end": 299, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9962922738584662}, {"start": 302, "end": 306, "word": "1000", "entity_group": "LIMIT", "score": 0.9983905782145136}, {"start": 333, "end": 350, "word": "shipping industry", "entity_group": "VAR", "score": 0.9999038664160411}, {"start": 390, "end": 398, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203412746664}, {"start": 403, "end": 409, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999425845020791}]}
{"doc_id": "1916748046", "document": "A company makes two types of phones, a large size and a small size. The large size phone take 20 minutes on the manufacturing belt and 12 minutes of testing. The small size phone takes 15 minutes on the manufacturing belt and 10 minutes of testing. The company has 1500  minutes  available on the manufacturing belt and 1000 minutes available for testing. If the profit per large phone is $400 and the profit per small phone is $300, how many of each should they make to maximize profit?", "order_mapping": {"large size": 0, "small size": 1, "large size phone": 0, "small size phone": 1, "large phone": 0, "small phone": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"small phone": "300", "large phone": "400"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1500", "terms": {"large size phone": "20", "small size phone": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1000", "terms": {"large size phone": "12", "small size phone": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large size phones\n- y: Number of small size phones\n\nObjective:\n- The company aims to maximize its profit. The profit per large phone is $400 and the profit per small phone is $300. Therefore, the objective function is: Maximize 400x + 300y\n\nConstraints:\n- The company has 1500 minutes available on the manufacturing belt. The time taken for manufacturing each large phone is 20 minutes and for each small phone is 15 minutes, leading to the constraint: 20x + 15y <= 1500.\n- The company has 1000 minutes available for testing. The time taken for testing each large phone is 12 minutes and for each small phone is 10 minutes, leading to the constraint: 12x + 10y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 300y\nConstraints:\n20x + 15y <= 1500\n12x + 10y <= 1000", "canonical": {"objective": [-400.0, -300.0], "constraints": [[20.0, 15.0, 1500.0], [12.0, 10.0, 1000.0]]}, "solution": {"x": 75, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of large phones produced: LargePhones\n- Number of small phones produced: SmallPhones\n\nConstraints:\n- Total manufacturing time for all phones should not exceed 1500 minutes:\n  20 * LargePhones + 15 * SmallPhones <= 1500\n- Total testing time for all phones should not exceed 1000 minutes:\n  12 * LargePhones + 10 * SmallPhones <= 1000\n\nObjective:\n- Maximize profit ($400 per large phone and $300 per small phone):\n  400 * LargePhones + 300 * SmallPhones\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargePhones = intvar(0, 999999999)  # Number of large phones produced\nSmallPhones = intvar(0, 999999999)  # Number of small phones produced\n\n# Constraints\nm = Model()\n\n# Total manufacturing time for all phones should not exceed 1500 minutes:\n# (20 minutes for each large phone and 15 minutes for each small phone)\nm += 20 * LargePhones + 15 * SmallPhones <= 1500\n\n# Total testing time for all phones should not exceed 1000 minutes:\n# (12 minutes for each large phone and 10 minutes for each small phone)\nm += 12 * LargePhones + 10 * SmallPhones <= 1000\n\n# Objective\n# Maximize profit ($400 per large phone and $300 per small phone):\nm.maximize(400 * LargePhones + 300 * SmallPhones)\n", "entities": [{"start": 40, "end": 50, "word": "large size", "entity_group": "VAR", "score": 0.9999407658927439}, {"start": 57, "end": 67, "word": "small size", "entity_group": "VAR", "score": 0.9999804740020383}, {"start": 74, "end": 90, "word": "large size phone", "entity_group": "VAR", "score": 0.9992697157144199}, {"start": 96, "end": 98, "word": "20", "entity_group": "PARAM", "score": 0.9996310176838528}, {"start": 137, "end": 139, "word": "12", "entity_group": "PARAM", "score": 0.9994209467054569}, {"start": 165, "end": 181, "word": "small size phone", "entity_group": "VAR", "score": 0.9996792049947201}, {"start": 188, "end": 190, "word": "15", "entity_group": "PARAM", "score": 0.999620617022542}, {"start": 229, "end": 231, "word": "10", "entity_group": "PARAM", "score": 0.9992711907400426}, {"start": 269, "end": 273, "word": "1500", "entity_group": "LIMIT", "score": 0.9996479813401649}, {"start": 282, "end": 291, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987104176863653}, {"start": 322, "end": 326, "word": "1000", "entity_group": "LIMIT", "score": 0.9997370859870791}, {"start": 335, "end": 344, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990628767375571}, {"start": 366, "end": 372, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999335520868073}, {"start": 377, "end": 388, "word": "large phone", "entity_group": "VAR", "score": 0.9997467290276668}, {"start": 394, "end": 397, "word": "400", "entity_group": "PARAM", "score": 0.9994604755952724}, {"start": 406, "end": 412, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999799679022977}, {"start": 417, "end": 428, "word": "small phone", "entity_group": "VAR", "score": 0.9997325473223948}, {"start": 434, "end": 437, "word": "300", "entity_group": "PARAM", "score": 0.9996338769045038}, {"start": 477, "end": 485, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 486, "end": 492, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "-616263906", "document": "A leather shop makes wallets and purses. Both require time for cutting and stitching. A wallet requires 10 minutes of cutting and 20 minutes of stitching. A purse requires 15 minutes of cutting and 30 minutes of stitching. The shop has 500 minutes available per day for cutting and 600 minutes available per day for stitching. The profit per wallet is $50 and the profit per purse is $100. How many of each item should the shop make to maximize their profits?", "order_mapping": {"wallets": 0, "purses": 1, "wallet": 0, "purse": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"wallet": "50", "purse": "100"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"wallet": "10", "purse": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"wallet": "20", "purse": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of wallets to be made\n- y: Number of purses to be made\n\nObjective:\n- The shop aims to maximize its profits. The profit per wallet is $50 and the profit per purse is $100. Therefore, the objective function is: Maximize 50x + 100y\n\nConstraints:\n- The shop has 500 minutes available per day for cutting, and each wallet requires 10 minutes of cutting and each purse requires 15 minutes of cutting. This leads to the constraint: 10x + 15y <= 500.\n- The shop has 600 minutes available per day for stitching, and each wallet requires 20 minutes of stitching and each purse requires 30 minutes of stitching. This results in the constraint: 20x + 30y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 100y\nConstraints:\n10x + 15y <= 500\n20x + 30y <= 600", "canonical": {"objective": [-50.0, -100.0], "constraints": [[10.0, 15.0, 500.0], [20.0, 30.0, 600.0]]}, "solution": {"x": 0, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of wallets made per day: Wallets\n- Number of purses made per day: Purses\n\nConstraints:\n- Total cutting time for wallets and purses should not exceed 500 minutes per day:\n  10 * Wallets + 15 * Purses <= 500\n- Total stitching time for wallets and purses should not exceed 600 minutes per day:\n  20 * Wallets + 30 * Purses <= 600\n\nObjective:\n- Maximize profits (50 dollars per wallet, 100 dollars per purse):\n  50 * Wallets + 100 * Purses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWallets = intvar(0, 999999999)  # Number of wallets made per day\nPurses = intvar(0, 999999999)  # Number of purses made per day\n\n# Constraints\nm = Model()\n\n# Total cutting time for wallets and purses should not exceed 500 minutes per day:\nm += 10 * Wallets + 15 * Purses <= 500\n# Total stitching time for wallets and purses should not exceed 600 minutes per day:\nm += 20 * Wallets + 30 * Purses <= 600\n\n# Objective\n# Maximize profits (50 dollars per wallet, 100 dollars per purse):\nm.maximize(50 * Wallets + 100 * Purses)\n", "entities": [{"start": 21, "end": 28, "word": "wallets", "entity_group": "VAR", "score": 0.9990223668708467}, {"start": 33, "end": 39, "word": "purses", "entity_group": "VAR", "score": 0.99959414449573}, {"start": 90, "end": 96, "word": "wallet", "entity_group": "VAR", "score": 0.9995692751802809}, {"start": 106, "end": 108, "word": "10", "entity_group": "PARAM", "score": 0.9996626712929084}, {"start": 132, "end": 134, "word": "20", "entity_group": "PARAM", "score": 0.9997245973879167}, {"start": 160, "end": 165, "word": "purse", "entity_group": "VAR", "score": 0.9996093614644375}, {"start": 175, "end": 177, "word": "15", "entity_group": "PARAM", "score": 0.9996764947309503}, {"start": 201, "end": 203, "word": "30", "entity_group": "PARAM", "score": 0.9996825285471379}, {"start": 240, "end": 243, "word": "500", "entity_group": "LIMIT", "score": 0.9996912890876476}, {"start": 252, "end": 261, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996144005655033}, {"start": 286, "end": 289, "word": "600", "entity_group": "LIMIT", "score": 0.9996356743835081}, {"start": 298, "end": 307, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992675893464603}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997055486513007}, {"start": 347, "end": 353, "word": "wallet", "entity_group": "VAR", "score": 0.9990879184597704}, {"start": 359, "end": 361, "word": "50", "entity_group": "PARAM", "score": 0.9993469761698404}, {"start": 370, "end": 376, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998655578349797}, {"start": 381, "end": 386, "word": "purse", "entity_group": "VAR", "score": 0.9983777760538514}, {"start": 392, "end": 395, "word": "100", "entity_group": "PARAM", "score": 0.9994256206353587}, {"start": 444, "end": 452, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996017477086918}, {"start": 459, "end": 466, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9992920564866402}]}
{"doc_id": "-353788571", "document": "A dentist can invest up to $5000 in two toothpaste companies. Each dollar invested in toothpaste company A yields a $0.12 profit. Each dollar invested in toothpaste company B yields a $0.14 profit. He wants to invest at least 40% in toothpaste company A and at least $1000 in toothpaste company B. How much money should he invest in each to maximize profit?", "order_mapping": {"company A": 0, "company B": 1, "company B.": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"company A": "0.12", "company B": "0.14"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "5000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "company A", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "1000", "var": "company B.", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in toothpaste company A\n- y: Dollars invested in toothpaste company B\n\nObjective:\n- The dentist aims to maximize his profit. Each dollar invested in toothpaste company A yields a $0.12 profit, and each dollar invested in toothpaste company B yields a $0.14 profit. Therefore, the objective function is: Maximize 0.12x + 0.14y\n\nConstraints:\n- The dentist can invest up to $5000 in total, so the constraint is: x + y <= 5000.\n- He wants to invest at least 40% in toothpaste company A, leading to the constraint: x >= 0.40(x + y).\n- He also wants to invest at least $1000 in toothpaste company B, resulting in the constraint: y >= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.12x + 0.14y\nConstraints:\nx + y <= 5000\nx >= 0.40(x + y)\ny >= 1000", "canonical": {"objective": [-0.12, -0.14], "constraints": [[1.0, 1.0, 5000.0], [-0.6, 0.4, 0.0], [0.0, -1.0, -1000.0]]}, "solution": {"x": 2000, "y": 3000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in toothpaste company A: CompanyA\n- Amount invested in toothpaste company B: CompanyB\n\nConstraints:\n- Total investment should not exceed 5000 dollars:\n  CompanyA + CompanyB <= 5000\n- At least 40% of the total investment should be in company A:\n  CompanyA >= 0.4 * (CompanyA + CompanyB)\n- At least 1000 dollars should be invested in company B:\n  CompanyB >= 1000\n\nObjective:\n- Maximize profit (0.12 profit per dollar invested in company A, 0.14 profit per dollar invested in company B):\n  0.12 * CompanyA + 0.14 * CompanyB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCompanyA = intvar(0, 999999999)  # Amount invested in toothpaste company A\nCompanyB = intvar(0, 999999999)  # Amount invested in toothpaste company B\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $5000:\nm += CompanyA + CompanyB <= 5000\n# At least 40% of the total investment should be in company A:\nm += CompanyA >= 0.4 * (CompanyA + CompanyB)\n# At least $1000 should be invested in company B:\nm += CompanyB >= 1000\n\n# Objective\n# Maximize profit (0.12 profit per dollar invested in company A, 0.14 profit per dollar invested in company B):\nm.maximize(0.12 * CompanyA + 0.14 * CompanyB)\n", "entities": [{"start": 21, "end": 26, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9913663468294693}, {"start": 29, "end": 33, "word": "5000", "entity_group": "LIMIT", "score": 0.9991025022879151}, {"start": 99, "end": 108, "word": "company A", "entity_group": "VAR", "score": 0.9999010575816991}, {"start": 120, "end": 124, "word": "0.12", "entity_group": "PARAM", "score": 0.9866944840247314}, {"start": 125, "end": 131, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997428769203454}, {"start": 169, "end": 178, "word": "company B", "entity_group": "VAR", "score": 0.9999161080243705}, {"start": 190, "end": 194, "word": "0.14", "entity_group": "PARAM", "score": 0.9976867398605127}, {"start": 195, "end": 201, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998271968112102}, {"start": 223, "end": 231, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988124809936312}, {"start": 232, "end": 236, "word": "40 %", "entity_group": "LIMIT", "score": 0.9377938536351675}, {"start": 251, "end": 260, "word": "company A", "entity_group": "VAR", "score": 0.9994426995226245}, {"start": 265, "end": 273, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9965913996482894}, {"start": 276, "end": 280, "word": "1000", "entity_group": "LIMIT", "score": 0.9955960982428884}, {"start": 295, "end": 305, "word": "company B.", "entity_group": "VAR", "score": 0.9999153416614699}, {"start": 349, "end": 357, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993690281621332}, {"start": 358, "end": 364, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994999389285519}]}
{"doc_id": "530244707", "document": "A woman has $300000 to invest in two health food industries. She decides to invest in the avocado industry and kale industry. Money invested in the avocado industry yields a return of 5% while money invested in the kale industry yields a return of 8%. She has been advised to invest at least 30% of the money in the avocado industry and at most 60% in the kale industry. How much should she invest in each to maximize her return?", "order_mapping": {"avocado industry": 0, "kale industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"avocado industry": "5%", "kale industry": "8%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "avocado industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "60%", "var": "kale industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the avocado industry\n- y: Dollars invested in the kale industry\n\nObjective:\n- The woman aims to maximize her return. Money invested in the avocado industry yields a return of 5% while money invested in the kale industry yields a return of 8%. Therefore, the objective function is: Maximize 0.05x + 0.08y\n\nConstraints:\n- The total amount available for investment is $300,000, so the constraint is: x + y <= 300000.\n- She has been advised to invest at least 30% of the money in the avocado industry, leading to the constraint: x >= 0.30(x + y).\n- She has been advised to invest at most 60% in the kale industry, resulting in the constraint: y <= 0.60(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.08y\nConstraints:\nx + y <= 300000\nx >= 0.30(x + y)\ny <= 0.60(x + y)", "canonical": {"objective": [-0.05, -0.08], "constraints": [[1.0, 1.0, 300000.0], [-0.7, 0.3, 0.0], [-0.6, 0.4, 0.0]]}, "solution": {"x": 120000, "y": 180000}, "pseudo_model": "\nDecision Variables:\n- Money invested in the avocado industry: AvocadoInvestment\n- Money invested in the kale industry: KaleInvestment\n\nConstraints:\n- Total investment in both industries should be exactly $300000:\n  AvocadoInvestment + KaleInvestment == 300000\n- At least 30% of the money should be invested in the avocado industry:\n  AvocadoInvestment >= 0.30 * 300000\n- At most 60% of the money should be invested in the kale industry:\n  KaleInvestment <= 0.60 * 300000\n\nObjective:\n- Maximize return (5% from avocado industry, 8% from kale industry):\n  0.05 * AvocadoInvestment + 0.08 * KaleInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Total investment amount\ntotal_investment = 300000\n\n# Decision Variables\nAvocadoInvestment = intvar(0, total_investment)  # Money invested in the avocado industry\nKaleInvestment = intvar(0, total_investment)  # Money invested in the kale industry\n\n# Constraints\nm = Model()\n\n# Total investment in both industries should be exactly $300000:\nm += AvocadoInvestment + KaleInvestment == total_investment\n# At least 30% of the money should be invested in the avocado industry:\nm += AvocadoInvestment >= 0.30 * total_investment\n# At most 60% of the money should be invested in the kale industry:\nm += KaleInvestment <= 0.60 * total_investment\n\n# Objective\n# Maximize return (5% from avocado industry, 8% from kale industry):\nm.maximize(0.05 * AvocadoInvestment + 0.08 * KaleInvestment)\n", "entities": [{"start": 8, "end": 11, "word": "has", "entity_group": "CONST_DIR", "score": 0.9959502061974671}, {"start": 14, "end": 20, "word": "300000", "entity_group": "LIMIT", "score": 0.9995243246481909}, {"start": 92, "end": 108, "word": "avocado industry", "entity_group": "VAR", "score": 0.9999738811892922}, {"start": 113, "end": 126, "word": "kale industry", "entity_group": "VAR", "score": 0.9999774196576022}, {"start": 151, "end": 167, "word": "avocado industry", "entity_group": "VAR", "score": 0.9999726563145618}, {"start": 177, "end": 183, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9988637095629377}, {"start": 187, "end": 190, "word": "5 %", "entity_group": "PARAM", "score": 0.9596753845371676}, {"start": 219, "end": 232, "word": "kale industry", "entity_group": "VAR", "score": 0.9999824978281436}, {"start": 242, "end": 248, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9936718732212074}, {"start": 252, "end": 255, "word": "8 %", "entity_group": "PARAM", "score": 0.9802895502165314}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985400993596644}, {"start": 298, "end": 302, "word": "30 %", "entity_group": "LIMIT", "score": 0.9919989413323849}, {"start": 323, "end": 339, "word": "avocado industry", "entity_group": "VAR", "score": 0.9999688368423131}, {"start": 344, "end": 351, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986768506062516}, {"start": 352, "end": 356, "word": "60 %", "entity_group": "LIMIT", "score": 0.8873999287178146}, {"start": 364, "end": 377, "word": "kale industry", "entity_group": "VAR", "score": 0.999973834705553}, {"start": 418, "end": 426, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994802389200576}, {"start": 431, "end": 437, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9990315444022113}]}
{"doc_id": "-1050261045", "document": "A woodshop makes dining tables and bed frames using oak and mahogany wood. Each dining table requires 3 units of oak wood and 5 units of mahogany wood. Each bed frame requires 5 units of oak wood and 2 units of mahogany wood. The woodshop has available 300 units of oak wood and 400 units of mahogany wood. If the profit per dining table is $300 and the profit per bed frame is $400, how many of each should be made to maximize profit?", "order_mapping": {"dining tables": 0, "bed frames": 1, "dining table": 0, "bed frame": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bed frame": "400", "dining table": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"dining table": "3", "bed frame": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"dining table": "5", "bed frame": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of dining tables to be made\n- y: Number of bed frames to be made\n\nObjective:\n- The woodshop aims to maximize its profit. The profit per dining table is $300 and the profit per bed frame is $400. Therefore, the objective function is: Maximize 300x + 400y\n\nConstraints:\n- The woodshop has 300 units of oak wood available, and each dining table requires 3 units of oak wood and each bed frame requires 5 units of oak wood. This leads to the constraint: 3x + 5y <= 300.\n- The woodshop has 400 units of mahogany wood available, and each dining table requires 5 units of mahogany wood and each bed frame requires 2 units of mahogany wood. This leads to the constraint: 5x + 2y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 400y\nConstraints:\n3x + 5y <= 300\n5x + 2y <= 400", "canonical": {"objective": [-300.0, -400.0], "constraints": [[3.0, 5.0, 300.0], [5.0, 2.0, 400.0]]}, "solution": {"x": 73, "y": 16}, "pseudo_model": "\nDecision Variables:\n- Number of dining tables made: DiningTables\n- Number of bed frames made: BedFrames\n\nConstraints:\n- Oak wood usage should not exceed 300 units:\n  3 * DiningTables + 5 * BedFrames <= 300\n- Mahogany wood usage should not exceed 400 units:\n  5 * DiningTables + 2 * BedFrames <= 400\n\nObjective:\n- Maximize profit (300 dollars per dining table, 400 dollars per bed frame):\n  300 * DiningTables + 400 * BedFrames\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDiningTables = intvar(0, 999999999)  # Number of dining tables made\nBedFrames = intvar(0, 999999999)  # Number of bed frames made\n\n# Constraints\nm = Model()\n\n# Oak wood constraint (300 units available):\n# Each dining table requires 3 units of oak, and each bed frame requires 5 units of oak\nm += 3 * DiningTables + 5 * BedFrames <= 300\n\n# Mahogany wood constraint (400 units available):\n# Each dining table requires 5 units of mahogany, and each bed frame requires 2 units of mahogany\nm += 5 * DiningTables + 2 * BedFrames <= 400\n\n# Objective\n# Maximize profit ($300 per dining table, $400 per bed frame):\nm.maximize(300 * DiningTables + 400 * BedFrames)\n", "entities": [{"start": 17, "end": 30, "word": "dining tables", "entity_group": "VAR", "score": 0.9999853069058923}, {"start": 35, "end": 45, "word": "bed frames", "entity_group": "VAR", "score": 0.9999933328206627}, {"start": 81, "end": 93, "word": "dining table", "entity_group": "VAR", "score": 0.9999847875029175}, {"start": 103, "end": 104, "word": "3", "entity_group": "PARAM", "score": 0.9997143904398648}, {"start": 127, "end": 128, "word": "5", "entity_group": "PARAM", "score": 0.9996435425455272}, {"start": 159, "end": 168, "word": "bed frame", "entity_group": "VAR", "score": 0.9999865837646584}, {"start": 178, "end": 179, "word": "5", "entity_group": "PARAM", "score": 0.9997177853217308}, {"start": 202, "end": 203, "word": "2", "entity_group": "PARAM", "score": 0.99964351496856}, {"start": 246, "end": 255, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994093879897683}, {"start": 256, "end": 259, "word": "300", "entity_group": "LIMIT", "score": 0.9993268751339239}, {"start": 282, "end": 285, "word": "400", "entity_group": "LIMIT", "score": 0.9996616494534868}, {"start": 318, "end": 324, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998812780921252}, {"start": 329, "end": 341, "word": "dining table", "entity_group": "VAR", "score": 0.9999475198601475}, {"start": 347, "end": 350, "word": "300", "entity_group": "PARAM", "score": 0.9996168600805997}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386049982123}, {"start": 370, "end": 379, "word": "bed frame", "entity_group": "VAR", "score": 0.9999575356851613}, {"start": 385, "end": 388, "word": "400", "entity_group": "PARAM", "score": 0.9996417553060728}, {"start": 426, "end": 434, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 435, "end": 441, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "1231061056", "document": "A furniture store stocks couches and beds. Each couch takes 15 sq ft of space while each bed takes 20 sq ft of space. The store has a total of 300 sq ft of space available. Based on past seasons, the store makes sure a minimum of 50% of all items in stock are beds. In terms of capital, the store wants to spend at most $8000. Each couch costs the store $300 and each bed costs the store $600. If the profit per couch sold is $200 and the profit per bed sold is $400, how many of each should be stocked in order to maximize profit?", "order_mapping": {"couches": 0, "beds": 1, "couch": 0, "bed": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"couch": "200", "bed": "400"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"couch": "15", "bed": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "50%", "var": "beds", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "8000", "terms": {"couch": "300", "bed": "600"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of couches\n- y: Number of beds\n\nObjective:\n- The store aims to maximize its profit. The profit per couch sold is $200 and the profit per bed sold is $400. Therefore, the objective function is: Maximize 200x + 400y\n\nConstraints:\n- The store has a total of 300 sq ft of space available, and each couch takes 15 sq ft while each bed takes 20 sq ft. This leads to the constraint: 15x + 20y <= 300.\n- The store makes sure a minimum of 50% of all items in stock are beds, resulting in the constraint: y >= 0.5(x + y).\n- In terms of capital, the store wants to spend at most $8000, and each couch costs $300 and each bed costs $600. This leads to the constraint: 300x + 600y <= 8000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 400y\nConstraints:\n15x + 20y <= 300\ny >= 0.5(x + y)\n300x + 600y <= 8000", "canonical": {"objective": [-200.0, -400.0], "constraints": [[15.0, 20.0, 300.0], [0.5, -0.5, 0.0], [300.0, 600.0, 8000.0]]}, "solution": {"x": 0, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of couches stocked: Couches\n- Number of beds stocked: Beds\n\nConstraints:\n- Total space used by couches and beds should not exceed 300 sq ft (15 sq ft per couch, 20 sq ft per bed):\n  15 * Couches + 20 * Beds <= 300\n- At least 50% of all items in stock must be beds:\n  Beds >= 0.5 * (Couches + Beds)\n- Total capital spent on couches and beds should not exceed $8000 ($300 per couch, $600 per bed):\n  300 * Couches + 600 * Beds <= 8000\n\nObjective:\n- Maximize profit (profit per couch is $200, profit per bed is $400):\n  200 * Couches + 400 * Beds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCouches = intvar(0, 999999999)  # Number of couches stocked\nBeds = intvar(0, 999999999)  # Number of beds stocked\n\n# Constraints\nm = Model()\n\n# The store has a total of 300 sq ft of space available:\nm += 15 * Couches + 20 * Beds <= 300\n# A minimum of 50% of all items in stock are beds:\nm += Beds >= 0.5 * (Couches + Beds)\n# The store wants to spend at most $8000:\nm += 300 * Couches + 600 * Beds <= 8000\n\n# Objective\n# Maximize profit (profit per couch sold is $200 and per bed sold is $400):\nm.maximize(200 * Couches + 400 * Beds)\n", "entities": [{"start": 25, "end": 32, "word": "couches", "entity_group": "VAR", "score": 0.999320249906868}, {"start": 37, "end": 41, "word": "beds", "entity_group": "VAR", "score": 0.9997761504314746}, {"start": 49, "end": 54, "word": "couch", "entity_group": "VAR", "score": 0.9997667902474636}, {"start": 61, "end": 63, "word": "15", "entity_group": "PARAM", "score": 0.9995322480908452}, {"start": 90, "end": 93, "word": "bed", "entity_group": "VAR", "score": 0.9968601138256081}, {"start": 100, "end": 102, "word": "20", "entity_group": "PARAM", "score": 0.999466714506154}, {"start": 145, "end": 148, "word": "300", "entity_group": "LIMIT", "score": 0.9996028957896897}, {"start": 164, "end": 173, "word": "available", "entity_group": "CONST_DIR", "score": 0.999574871420783}, {"start": 223, "end": 230, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9954471127604078}, {"start": 234, "end": 238, "word": "50 %", "entity_group": "LIMIT", "score": 0.9436198957738219}, {"start": 265, "end": 269, "word": "beds", "entity_group": "VAR", "score": 0.9996709629863102}, {"start": 319, "end": 326, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9964128428509252}, {"start": 329, "end": 333, "word": "8000", "entity_group": "LIMIT", "score": 0.9997437883227448}, {"start": 341, "end": 346, "word": "couch", "entity_group": "VAR", "score": 0.999774984135033}, {"start": 365, "end": 368, "word": "300", "entity_group": "PARAM", "score": 0.9997333082241099}, {"start": 378, "end": 381, "word": "bed", "entity_group": "VAR", "score": 0.9997407029321589}, {"start": 400, "end": 403, "word": "600", "entity_group": "PARAM", "score": 0.9997152833300461}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997915572520516}, {"start": 424, "end": 429, "word": "couch", "entity_group": "VAR", "score": 0.9987064367940307}, {"start": 440, "end": 443, "word": "200", "entity_group": "PARAM", "score": 0.9995661111254558}, {"start": 452, "end": 458, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998452135780734}, {"start": 463, "end": 466, "word": "bed", "entity_group": "VAR", "score": 0.997662558136944}, {"start": 477, "end": 480, "word": "400", "entity_group": "PARAM", "score": 0.9993882811891918}, {"start": 530, "end": 538, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.994662819005637}, {"start": 539, "end": 545, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990907017162031}]}
{"doc_id": "48357637", "document": "A fisherman must catch at least 30 small fish and 15 large fish. He visits two lakes. For each hour at lake 1 he spends, he can catch 5 small fish and 3 large fish. For each hour at lake 2 he spends, he can catch 7 small fish and 2 large fish. How many hours should he spend at each lake to minimize the amount of time he spends at both lakes fishing?", "order_mapping": {"lake 1": 0, "lake 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "amount of time", "vars": ["lake 1", "lake 2"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"lake 1": "5", "lake 2": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"lake 1": "3", "lake 2": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours spent at lake 1\n- y: Hours spent at lake 2\n\nObjective:\n- The fisherman wants to minimize the total amount of time spent at both lakes. Therefore, the objective function is not explicitly given, but it can be inferred as: Minimize x + y\n\nConstraints:\n- The fisherman must catch at least 30 small fish, which can be represented as: 5x + 7y >= 30\n- The fisherman must catch at least 15 large fish, which can be represented as: 3x + 2y >= 15\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + y\nConstraints:\n5x + 7y >= 30\n3x + 2y >= 15", "canonical": {"objective": [1.0, 1.0], "constraints": [[-5.0, -7.0, -30.0], [-3.0, -2.0, -15.0]]}, "solution": {"x": 3, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of hours spent at lake 1: HoursLake1\n- Number of hours spent at lake 2: HoursLake2\n\nConstraints:\n- To catch at least 30 small fish:\n  5 * HoursLake1 + 7 * HoursLake2 >= 30\n- To catch at least 15 large fish:\n  3 * HoursLake1 + 2 * HoursLake2 >= 15\n\nObjective:\n- Minimize the total amount of time spent fishing at both lakes:\n  HoursLake1 + HoursLake2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHoursLake1 = intvar(0, 999999999)  # Number of hours spent at lake 1\nHoursLake2 = intvar(0, 999999999)  # Number of hours spent at lake 2\n\n# Constraints\nm = Model()\n\n# At least 30 small fish must be caught:\nm += 5 * HoursLake1 + 7 * HoursLake2 >= 30\n# At least 15 large fish must be caught:\nm += 3 * HoursLake1 + 2 * HoursLake2 >= 15\n\n# Objective\n# Minimize the total amount of time spent fishing:\nm.minimize(HoursLake1 + HoursLake2)\n", "entities": [{"start": 23, "end": 31, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982680074740575}, {"start": 32, "end": 34, "word": "30", "entity_group": "LIMIT", "score": 0.999499546874644}, {"start": 50, "end": 52, "word": "15", "entity_group": "LIMIT", "score": 0.9996436617645166}, {"start": 105, "end": 111, "word": "lake 1", "entity_group": "VAR", "score": 0.9997868567455009}, {"start": 137, "end": 138, "word": "5", "entity_group": "PARAM", "score": 0.9994869522786181}, {"start": 154, "end": 155, "word": "3", "entity_group": "PARAM", "score": 0.9994799998879709}, {"start": 186, "end": 192, "word": "lake 2", "entity_group": "VAR", "score": 0.9997869646919624}, {"start": 218, "end": 219, "word": "7", "entity_group": "PARAM", "score": 0.9994869522786651}, {"start": 235, "end": 236, "word": "2", "entity_group": "PARAM", "score": 0.999487083754659}, {"start": 297, "end": 305, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9981940398681909}, {"start": 310, "end": 324, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9811851764160628}]}
{"doc_id": "1540745183", "document": "A construction company makes marble and granite countertops. It takes 1 hour of cutting and 2 hours of polishing to make one marble countertop. It takes 1.5 hours of cutting and 3 hours of polishing to make one granite countertop. The company has available 300 hours for cutting and 500 hours for polishing. If the profit per marble countertop is $500 and the profit per granite countertop is $750, how many of each should be made to maximize profit?", "order_mapping": {"marble": 0, "granite countertops": 1, "marble countertop": 0, "granite countertop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"marble countertop": "500", "granite countertop": "750"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"marble countertop": "1.5", "granite countertops": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"granite countertops": "2", "marble countertop": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of marble countertops\n- y: Number of granite countertops\n\nObjective:\n- The company aims to maximize its profit. The profit per marble countertop is $500 and the profit per granite countertop is $750. Therefore, the objective function is: Maximize 500x + 750y\n\nConstraints:\n- It takes 1 hour of cutting and 2 hours of polishing to make one marble countertop, and 1.5 hours of cutting and 3 hours of polishing to make one granite countertop. The company has available 300 hours for cutting and 500 hours for polishing. These constraints can be formulated as:\n    - Cutting constraint: x + 1.5y <= 300\n    - Polishing constraint: 2x + 3y <= 500\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 750y\nConstraints:\nx + 1.5y <= 300\n2x + 3y <= 500", "canonical": {"objective": [-500.0, -750.0], "constraints": [[1.0, 1.5, 300.0], [2.0, 3.0, 500.0]]}, "solution": {"x": 1, "y": 166}, "pseudo_model": "\nDecision Variables:\n- Number of marble countertops made: MarbleCountertops\n- Number of granite countertops made: GraniteCountertops\n\nConstraints:\n- Total cutting hours should not exceed 300 hours (1 hour for marble, 1.5 hours for granite):\n  1 * MarbleCountertops + 1.5 * GraniteCountertops <= 300\n- Total polishing hours should not exceed 500 hours (2 hours for marble, 3 hours for granite):\n  2 * MarbleCountertops + 3 * GraniteCountertops <= 500\n\nObjective:\n- Maximize profit (500 dollars per marble countertop, 750 dollars per granite countertop):\n  500 * MarbleCountertops + 750 * GraniteCountertops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMarbleCountertops = intvar(0, 999999999)  # Number of marble countertops made\nGraniteCountertops = intvar(0, 999999999)  # Number of granite countertops made\n\n# Constraints\nm = Model()\n\n# Total cutting hours should not exceed 300 hours:\n# 1 hour of cutting for marble and 1.5 hours for granite\nm += 1 * MarbleCountertops + 1.5 * GraniteCountertops <= 300\n# Total polishing hours should not exceed 500 hours:\n# 2 hours of polishing for marble and 3 hours for granite\nm += 2 * MarbleCountertops + 3 * GraniteCountertops <= 500\n\n# Objective\n# Maximize profit (500 dollars per marble countertop, 750 dollars per granite countertop):\nm.maximize(500 * MarbleCountertops + 750 * GraniteCountertops)\n", "entities": [{"start": 29, "end": 35, "word": "marble", "entity_group": "VAR", "score": 0.9993002095762646}, {"start": 40, "end": 59, "word": "granite countertops", "entity_group": "VAR", "score": 0.9999771137534788}, {"start": 71, "end": 72, "word": "1", "entity_group": "PARAM", "score": 0.9995833178191462}, {"start": 93, "end": 94, "word": "2", "entity_group": "PARAM", "score": 0.9996661197555403}, {"start": 126, "end": 143, "word": "marble countertop", "entity_group": "VAR", "score": 0.9998915061202515}, {"start": 155, "end": 158, "word": "1.5", "entity_group": "PARAM", "score": 0.999695487023692}, {"start": 180, "end": 181, "word": "3", "entity_group": "PARAM", "score": 0.9996830113070428}, {"start": 213, "end": 231, "word": "granite countertop", "entity_group": "VAR", "score": 0.9999733071475098}, {"start": 250, "end": 259, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989117571593762}, {"start": 260, "end": 263, "word": "300", "entity_group": "LIMIT", "score": 0.9994414169548972}, {"start": 286, "end": 289, "word": "500", "entity_group": "LIMIT", "score": 0.9995879117479209}, {"start": 319, "end": 325, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999427761701749}, {"start": 330, "end": 347, "word": "marble countertop", "entity_group": "VAR", "score": 0.9999633934103668}, {"start": 353, "end": 356, "word": "500", "entity_group": "PARAM", "score": 0.999618122382338}, {"start": 365, "end": 371, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350844188009}, {"start": 376, "end": 394, "word": "granite countertop", "entity_group": "VAR", "score": 0.9999612614514821}, {"start": 400, "end": 403, "word": "750", "entity_group": "PARAM", "score": 0.9996757797335801}, {"start": 441, "end": 449, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 450, "end": 456, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "645706426", "document": "A company decides to promote their product by buying ad space on taxis, buses, and privately owned cars. The cost of an ad as well as the expected viewership is given as follows. An ad on a taxi costs $500 and reaches 5000 viewers. An ad on a bus costs $1000 and reaches 12000 viewers. Finally an ad on a privately owned car cost $300 and reaches 2000 viewers. The bus company limits the number of ads from a single company to at most 8. In addition at most 30% of the ads should be on taxis and at least 20% of ads should be on privately owned cars. If the company has a budget of $20000, how many ads should be bought for each option in order to maximize viewership?", "order_mapping": {"taxis": 0, "buses": 1, "privately owned cars": 2, "taxi": 0, "bus": 1, "privately owned car": 2, "cars": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"taxi": "5000", "bus": "12000", "privately owned car": "2000"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "8", "var": "bus", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "taxis", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "cars", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "20000", "terms": {"taxi": "500", "bus": "1000", "privately owned car": "300"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads on taxis\n- y: Number of ads on buses\n- z: Number of ads on privately owned cars\n\nObjective:\n- The company aims to maximize the viewership. The expected viewership for each type of ad is given as follows: taxi ad reaches 5000 viewers, bus ad reaches 12000 viewers, and privately owned car ad reaches 2000 viewers. Therefore, the objective function is: Maximize 5000x + 12000y + 2000z\n\nConstraints:\n- The bus company limits the number of ads from a single company to at most 8, leading to the constraint: y <= 8.\n- At most 30% of the ads should be on taxis, resulting in the constraint: x <= 0.30(x + y + z).\n- At least 20% of ads should be on privately owned cars, leading to the constraint: z >= 0.20(x + y + z).\n- The company has a budget of $20000, so the total cost of the ads should not exceed this amount, resulting in the constraint: 500x + 1000y + 300z <= 20000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5000x + 12000y + 2000z\nConstraints:\ny <= 8\nx <= 0.30(x + y + z)\nz >= 0.20(x + y + z)\n500x + 1000y + 300z <= 20000", "canonical": {"objective": [-5000.0, -12000.0, -2000.0], "constraints": [[0.0, 1.0, 0.0, 8.0], [0.7, -0.3, -0.3, 0.0], [0.2, 0.2, -0.8, 0.0], [500.0, 1000.0, 300.0, 20000.0]]}, "solution": {"x": 12, "y": 8, "z": 20}, "pseudo_model": "\nDecision Variables:\n- Number of ads on taxis: AdsOnTaxis\n- Number of ads on buses: AdsOnBuses\n- Number of ads on privately owned cars: AdsOnCars\n\nConstraints:\n- At most 8 ads on buses:\n  AdsOnBuses <= 8\n- At most 30% of the ads should be on taxis:\n  AdsOnTaxis <= 0.3 * (AdsOnTaxis + AdsOnBuses + AdsOnCars)\n- At least 20% of ads should be on privately owned cars:\n  AdsOnCars >= 0.2 * (AdsOnTaxis + AdsOnBuses + AdsOnCars)\n- The company has a budget of $20000:\n  500 * AdsOnTaxis + 1000 * AdsOnBuses + 300 * AdsOnCars <= 20000\n\nObjective:\n- Maximize viewership (5000 viewers per ad on a taxi, 12000 viewers per ad on a bus, 2000 viewers per ad on a privately owned car):\n  5000 * AdsOnTaxis + 12000 * AdsOnBuses + 2000 * AdsOnCars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAdsOnTaxis = intvar(0, 999999999)  # Number of ads on taxis\nAdsOnBuses = intvar(0, 999999999)  # Number of ads on buses\nAdsOnCars = intvar(0, 999999999)  # Number of ads on privately owned cars\n\n# Constraints\nm = Model()\n\n# The bus company limits the number of ads from a single company to at most 8:\nm += AdsOnBuses <= 8\n# At most 30% of the ads should be on taxis:\nm += AdsOnTaxis <= 0.3 * (AdsOnTaxis + AdsOnBuses + AdsOnCars)\n# At least 20% of ads should be on privately owned cars:\nm += AdsOnCars >= 0.2 * (AdsOnTaxis + AdsOnBuses + AdsOnCars)\n# The company has a budget of $20000:\nm += 500 * AdsOnTaxis + 1000 * AdsOnBuses + 300 * AdsOnCars <= 20000\n\n# Objective\n# Maximize viewership (5000 viewers per ad on a taxi, 12000 viewers per ad on a bus, 2000 viewers per ad on a privately owned car):\nm.maximize(5000 * AdsOnTaxis + 12000 * AdsOnBuses + 2000 * AdsOnCars)\n", "entities": [{"start": 65, "end": 70, "word": "taxis", "entity_group": "VAR", "score": 0.9996162233860681}, {"start": 73, "end": 78, "word": "buses", "entity_group": "VAR", "score": 0.9995970847171063}, {"start": 85, "end": 105, "word": "privately owned cars", "entity_group": "VAR", "score": 0.9994190647451716}, {"start": 194, "end": 198, "word": "taxi", "entity_group": "VAR", "score": 0.9997301060447694}, {"start": 207, "end": 210, "word": "500", "entity_group": "PARAM", "score": 0.9987350652597239}, {"start": 223, "end": 227, "word": "5000", "entity_group": "PARAM", "score": 0.999518261576268}, {"start": 228, "end": 235, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.992303300297082}, {"start": 249, "end": 252, "word": "bus", "entity_group": "VAR", "score": 0.9994581161421211}, {"start": 261, "end": 265, "word": "1000", "entity_group": "PARAM", "score": 0.9991830507346472}, {"start": 278, "end": 283, "word": "12000", "entity_group": "PARAM", "score": 0.9995402216056827}, {"start": 284, "end": 291, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9870553199503249}, {"start": 313, "end": 332, "word": "privately owned car", "entity_group": "VAR", "score": 0.9940595339517154}, {"start": 340, "end": 343, "word": "300", "entity_group": "PARAM", "score": 0.999550291706153}, {"start": 356, "end": 360, "word": "2000", "entity_group": "PARAM", "score": 0.9997358415991048}, {"start": 361, "end": 368, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9923005957156752}, {"start": 375, "end": 378, "word": "bus", "entity_group": "VAR", "score": 0.9979904413488578}, {"start": 437, "end": 444, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9979021794214799}, {"start": 445, "end": 446, "word": "8", "entity_group": "LIMIT", "score": 0.9996483204592528}, {"start": 461, "end": 468, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991000844966528}, {"start": 469, "end": 473, "word": "30 %", "entity_group": "LIMIT", "score": 0.9777256816812832}, {"start": 498, "end": 503, "word": "taxis", "entity_group": "VAR", "score": 0.998345590356112}, {"start": 508, "end": 516, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985888729804832}, {"start": 517, "end": 521, "word": "20 %", "entity_group": "LIMIT", "score": 0.9838648342320306}, {"start": 558, "end": 562, "word": "cars", "entity_group": "VAR", "score": 0.9990349723403879}, {"start": 586, "end": 592, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9906926489899461}, {"start": 598, "end": 603, "word": "20000", "entity_group": "LIMIT", "score": 0.9993640581217481}, {"start": 664, "end": 672, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9972143560758386}, {"start": 673, "end": 683, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.99701149207644}]}
{"doc_id": "-242284866", "document": "In a cold region, a train service offers heated seats and regular seats. The train has 100 seats available. The trains reserves at least 15 seats to be heated. However, at least 3 times as many people prefer regular seats to heated seats. If the profit per heated seat is $20 and the profit per regular seat is $15, how many of each seat type should be sold to maximize profit?", "order_mapping": {"heated seats": 0, "regular seats": 1, "heated": 0, "heated seat": 0, "regular seat": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"heated seat": "20", "regular seat": "15"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "heated", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular seats", "direction": "at least", "param": "3", "y_var": "heated seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of heated seats\n- y: Number of regular seats\n\nObjective:\n- The train service aims to maximize its profit. The profit per heated seat is $20 and the profit per regular seat is $15. Therefore, the objective function is: Maximize 20x + 15y\n\nConstraints:\n- The train has 100 seats available, so the constraint is: x + y <= 100.\n- At least 15 seats need to be heated, leading to the constraint: x >= 15.\n- At least 3 times as many people prefer regular seats to heated seats, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 15y\nConstraints:\nx + y <= 100\nx >= 15\ny >= 3x", "canonical": {"objective": [-20.0, -15.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -15.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 25, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Number of heated seats sold: HeatedSeats\n- Number of regular seats sold: RegularSeats\n\nConstraints:\n- Total number of seats sold should not exceed 100:\n  HeatedSeats + RegularSeats <= 100\n- At least 15 seats should be heated:\n  HeatedSeats >= 15\n- At least 3 times as many people prefer regular seats to heated seats:\n  RegularSeats >= 3 * HeatedSeats\n\nObjective:\n- Maximize profit (20 dollars per heated seat, 15 dollars per regular seat):\n  20 * HeatedSeats + 15 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeatedSeats = intvar(0, 999999999)  # Number of heated seats sold\nRegularSeats = intvar(0, 999999999)  # Number of regular seats sold\n\n# Constraints\nm = Model()\n\n# Total number of seats sold should not exceed 100:\nm += HeatedSeats + RegularSeats <= 100\n# At least 15 seats should be heated:\nm += HeatedSeats >= 15\n# At least 3 times as many people prefer regular seats to heated seats:\nm += RegularSeats >= 3 * HeatedSeats\n\n# Objective\n# Maximize profit (20 dollars per heated seat, 15 dollars per regular seat):\nm.maximize(20 * HeatedSeats + 15 * RegularSeats)\n", "entities": [{"start": 42, "end": 54, "word": "heated seats", "entity_group": "VAR", "score": 0.9999316505530439}, {"start": 59, "end": 72, "word": "regular seats", "entity_group": "VAR", "score": 0.9999874554199777}, {"start": 89, "end": 92, "word": "100", "entity_group": "LIMIT", "score": 0.9996912362221384}, {"start": 99, "end": 108, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996007174561803}, {"start": 131, "end": 139, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986667504601799}, {"start": 140, "end": 142, "word": "15", "entity_group": "LIMIT", "score": 0.9997390987563732}, {"start": 155, "end": 161, "word": "heated", "entity_group": "VAR", "score": 0.9997871537484092}, {"start": 174, "end": 182, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984002094688257}, {"start": 183, "end": 184, "word": "3", "entity_group": "PARAM", "score": 0.998928479450834}, {"start": 213, "end": 226, "word": "regular seats", "entity_group": "VAR", "score": 0.999936523214249}, {"start": 230, "end": 242, "word": "heated seats", "entity_group": "VAR", "score": 0.9999753906174571}, {"start": 252, "end": 258, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998961329749114}, {"start": 263, "end": 274, "word": "heated seat", "entity_group": "VAR", "score": 0.9999454634350788}, {"start": 280, "end": 282, "word": "20", "entity_group": "PARAM", "score": 0.9995920182680113}, {"start": 291, "end": 297, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354492282141}, {"start": 302, "end": 314, "word": "regular seat", "entity_group": "VAR", "score": 0.9999318285144416}, {"start": 320, "end": 322, "word": "15", "entity_group": "PARAM", "score": 0.9996845378679433}, {"start": 370, "end": 378, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987336556974256}, {"start": 379, "end": 385, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999146952430046}]}
{"doc_id": "-71192775", "document": "A factory makes soccer balls and basket balls. Soccer balls take 5 minutes on the manufacturing machine and 3 minutes to fill with air. Basket balls take 7 minutes on the manufacturing machine and 4 minutes to fill with air. The factory can run the manufacturing machine for at most 700 minutes and they have 500 minutes available for filling the balls with air. If the profit per soccer ball is $4 and the profit per basket all is $5, how many of each ball should the factory make to maximize profit?", "order_mapping": {"soccer balls": 0, "basket balls": 1, "Soccer balls": 0, "Basket balls": 1, "soccer ball": 0, "basket all": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"basket all": "5", "soccer ball": "4"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "700", "terms": {"Soccer balls": "5", "Basket balls": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"Soccer balls": "3", "Basket balls": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of soccer balls produced\n- y: Number of basket balls produced\n\nObjective:\n- The factory aims to maximize its profit. The profit per soccer ball is $4 and the profit per basket ball is $5. Therefore, the objective function is: Maximize 4x + 5y\n\nConstraints:\n- The manufacturing machine can run for at most 700 minutes, and each soccer ball takes 5 minutes and each basket ball takes 7 minutes. This leads to the constraint: 5x + 7y <= 700.\n- There are 500 minutes available for filling the balls with air, and each soccer ball takes 3 minutes and each basket ball takes 4 minutes. This results in the constraint: 3x + 4y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 5y\nConstraints:\n5x + 7y <= 700\n3x + 4y <= 500", "canonical": {"objective": [-4.0, -5.0], "constraints": [[5.0, 7.0, 700.0], [3.0, 4.0, 500.0]]}, "solution": {"x": 140, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of soccer balls made: SoccerBalls\n- Number of basket balls made: BasketBalls\n\nConstraints:\n- Manufacturing machine time for soccer balls (5 minutes each) and basket balls (7 minutes each) should not exceed 700 minutes:\n  5 * SoccerBalls + 7 * BasketBalls <= 700\n- Air filling time for soccer balls (3 minutes each) and basket balls (4 minutes each) should not exceed 500 minutes:\n  3 * SoccerBalls + 4 * BasketBalls <= 500\n\nObjective:\n- Maximize profit (soccer balls: $4 each, basket balls: $5 each):\n  4 * SoccerBalls + 5 * BasketBalls\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSoccerBalls = intvar(0, 999999999)  # Number of soccer balls made\nBasketBalls = intvar(0, 999999999)  # Number of basket balls made\n\n# Constraints\nm = Model()\n\n# The manufacturing machine time constraint (soccer balls: 5 minutes, basket balls: 7 minutes, at most 700 minutes):\nm += 5 * SoccerBalls + 7 * BasketBalls <= 700\n# The air filling time constraint (soccer balls: 3 minutes, basket balls: 4 minutes, available 500 minutes):\nm += 3 * SoccerBalls + 4 * BasketBalls <= 500\n\n# Objective\n# Maximize profit (soccer balls: $4, basket balls: $5):\nm.maximize(4 * SoccerBalls + 5 * BasketBalls)\n", "entities": [{"start": 16, "end": 28, "word": "soccer balls", "entity_group": "VAR", "score": 0.9999878461621452}, {"start": 33, "end": 45, "word": "basket balls", "entity_group": "VAR", "score": 0.9999879317438826}, {"start": 48, "end": 60, "word": "Soccer balls", "entity_group": "VAR", "score": 0.9999787056200874}, {"start": 66, "end": 67, "word": "5", "entity_group": "PARAM", "score": 0.9994596292723557}, {"start": 109, "end": 110, "word": "3", "entity_group": "PARAM", "score": 0.9996319662193407}, {"start": 138, "end": 150, "word": "Basket balls", "entity_group": "VAR", "score": 0.9999767205566152}, {"start": 156, "end": 157, "word": "7", "entity_group": "PARAM", "score": 0.9995800333310566}, {"start": 199, "end": 200, "word": "4", "entity_group": "PARAM", "score": 0.9996319725189626}, {"start": 278, "end": 285, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999008210615013}, {"start": 286, "end": 289, "word": "700", "entity_group": "LIMIT", "score": 0.9997430413811704}, {"start": 312, "end": 315, "word": "500", "entity_group": "LIMIT", "score": 0.9997732896584917}, {"start": 324, "end": 333, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990167281018834}, {"start": 374, "end": 380, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999050901899518}, {"start": 385, "end": 396, "word": "soccer ball", "entity_group": "VAR", "score": 0.9999458994308669}, {"start": 402, "end": 403, "word": "4", "entity_group": "PARAM", "score": 0.9996088829496866}, {"start": 412, "end": 418, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999379251359359}, {"start": 423, "end": 433, "word": "basket all", "entity_group": "VAR", "score": 0.9981097796346605}, {"start": 439, "end": 440, "word": "5", "entity_group": "PARAM", "score": 0.9996791437124974}, {"start": 492, "end": 500, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992383737789213}, {"start": 501, "end": 507, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99992773692242}]}
{"doc_id": "-1160297975", "document": "An outlet buys and sells both sofas and beds. Each sofa takes 8 sq ft of space while each bed takes 12 sq ft of space. The outlet has 500 sq ft of space available. Buying a sofa costs the store $200 and buying a bed costs the store $300. The outlet has a budget of $12500. In addition, at least 30% of items in stock have to be sofas. If the profit per sofa sold is $100 and the profit per bed sold is $200, how many of each should the outlet buy and sell to maximize profit?", "order_mapping": {"sofas": 0, "beds": 1, "sofa": 0, "bed": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sofa": "100", "bed": "200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"sofa": "8", "bed": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "12500", "terms": {"sofa": "200", "bed": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "sofas", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sofas bought and sold\n- y: Number of beds bought and sold\n\nObjective:\n- The outlet aims to maximize its profit. The profit per sofa sold is $100 and the profit per bed sold is $200. Therefore, the objective function is: Maximize 100x + 200y\n\nConstraints:\n- The outlet has 500 sq ft of space available, and each sofa takes 8 sq ft while each bed takes 12 sq ft. This leads to the constraint: 8x + 12y <= 500.\n- The outlet has a budget of $12500, and buying a sofa costs $200 and buying a bed costs $300. This results in the constraint: 200x + 300y <= 12500.\n- At least 30% of items in stock have to be sofas, leading to the constraint: x >= 0.3(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 200y\nConstraints:\n8x + 12y <= 500\n200x + 300y <= 12500\nx >= 0.3(x + y)", "canonical": {"objective": [-100.0, -200.0], "constraints": [[8.0, 12.0, 500.0], [200.0, 300.0, 12500.0], [-0.7, 0.3, 0.0]]}, "solution": {"x": 14, "y": 32}, "pseudo_model": "\nDecision Variables:\n- Number of sofas bought and sold: Sofas\n- Number of beds bought and sold: Beds\n\nConstraints:\n- The outlet has 500 sq ft of space available (each sofa takes 8 sq ft, each bed takes 12 sq ft):\n  8 * Sofas + 12 * Beds <= 500\n- The outlet has a budget of $12500 (buying a sofa costs $200, buying a bed costs $300):\n  200 * Sofas + 300 * Beds <= 12500\n- At least 30% of items in stock have to be sofas:\n  Sofas >= 0.3 * (Sofas + Beds)\n\nObjective:\n- Maximize profit (profit per sofa sold is $100, profit per bed sold is $200):\n  100 * Sofas + 200 * Beds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSofas = intvar(0, 999999999)  # Number of sofas bought and sold\nBeds = intvar(0, 999999999)  # Number of beds bought and sold\n\n# Constraints\nm = Model()\n\n# The outlet has 500 sq ft of space available:\nm += 8 * Sofas + 12 * Beds <= 500\n# The outlet has a budget of $12500:\nm += 200 * Sofas + 300 * Beds <= 12500\n# At least 30% of items in stock have to be sofas:\nm += Sofas >= 0.3 * (Sofas + Beds)\n\n# Objective\n# Maximize profit (profit per sofa sold is $100 and profit per bed sold is $200):\nm.maximize(100 * Sofas + 200 * Beds)\n", "entities": [{"start": 30, "end": 35, "word": "sofas", "entity_group": "VAR", "score": 0.9997098385907884}, {"start": 40, "end": 44, "word": "beds", "entity_group": "VAR", "score": 0.9998441920587121}, {"start": 52, "end": 56, "word": "sofa", "entity_group": "VAR", "score": 0.9997010284085412}, {"start": 63, "end": 64, "word": "8", "entity_group": "PARAM", "score": 0.9995315334288561}, {"start": 91, "end": 94, "word": "bed", "entity_group": "VAR", "score": 0.9968601138256112}, {"start": 101, "end": 103, "word": "12", "entity_group": "PARAM", "score": 0.999466714506156}, {"start": 136, "end": 139, "word": "500", "entity_group": "LIMIT", "score": 0.9996810395318966}, {"start": 155, "end": 164, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986673212440819}, {"start": 176, "end": 180, "word": "sofa", "entity_group": "VAR", "score": 0.9997550912389848}, {"start": 199, "end": 202, "word": "200", "entity_group": "PARAM", "score": 0.9995758277983257}, {"start": 216, "end": 219, "word": "bed", "entity_group": "VAR", "score": 0.9993762541133003}, {"start": 238, "end": 241, "word": "300", "entity_group": "PARAM", "score": 0.9997360021697274}, {"start": 261, "end": 267, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9910827996813498}, {"start": 273, "end": 278, "word": "12500", "entity_group": "PARAM", "score": 0.9991224826000418}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991707325518758}, {"start": 304, "end": 308, "word": "30 %", "entity_group": "LIMIT", "score": 0.9776629490685601}, {"start": 338, "end": 343, "word": "sofas", "entity_group": "VAR", "score": 0.9997685579568988}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999892965093163}, {"start": 364, "end": 368, "word": "sofa", "entity_group": "VAR", "score": 0.9979385858858649}, {"start": 379, "end": 382, "word": "100", "entity_group": "PARAM", "score": 0.9996002280587097}, {"start": 391, "end": 397, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999388124424531}, {"start": 402, "end": 405, "word": "bed", "entity_group": "VAR", "score": 0.997662217585312}, {"start": 416, "end": 419, "word": "200", "entity_group": "PARAM", "score": 0.9996104925292383}, {"start": 473, "end": 481, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987210781682757}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997433452488922}]}
{"doc_id": "-1631258346", "document": "A company washes cars and buses. Each car takes 30 minutes of watering and $10 worth of soap. Each bus takes 50 minutes of watering and $20 worth of soap. The company has available 5000 minutes for watering and $1500 worth of soap. If the company earns $50 per car washed and $75 per bus washed, how many of each should they wash to maximize their earnings?", "order_mapping": {"cars": 0, "buses": 1, "car": 0, "bus": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"car": "50", "bus": "75"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"car": "30", "bus": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"car": "10", "bus": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cars washed\n- y: Number of buses washed\n\nObjective:\n- The company aims to maximize its earnings. The company earns $50 per car washed and $75 per bus washed. Therefore, the objective function is: Maximize 50x + 75y\n\nConstraints:\n- The company has 5000 minutes available for watering, and each car takes 30 minutes while each bus takes 50 minutes. This leads to the constraint: 30x + 50y <= 5000.\n- The company has $1500 available for soap, and each car requires $10 worth of soap while each bus requires $20 worth of soap. This results in the constraint: 10x + 20y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 75y\nConstraints:\n30x + 50y <= 5000\n10x + 20y <= 1500", "canonical": {"objective": [-50.0, -75.0], "constraints": [[30.0, 50.0, 5000.0], [10.0, 20.0, 1500.0]]}, "solution": {"x": 150, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of cars washed: Cars\n- Number of buses washed: Buses\n\nConstraints:\n- Total watering time for cars and buses should not exceed 5000 minutes:\n  30 * Cars + 50 * Buses <= 5000\n- Total cost of soap for washing cars and buses should not exceed $1500:\n  10 * Cars + 20 * Buses <= 1500\n\nObjective:\n- Maximize earnings ($50 per car washed, $75 per bus washed):\n  50 * Cars + 75 * Buses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCars = intvar(0, 999999999)  # Number of cars washed\nBuses = intvar(0, 999999999)  # Number of buses washed\n\n# Constraints\nm = Model()\n\n# Total watering time should not exceed 5000 minutes:\nm += 30 * Cars + 50 * Buses <= 5000\n# Total cost of soap should not exceed $1500:\nm += 10 * Cars + 20 * Buses <= 1500\n\n# Objective\n# Maximize earnings ($50 per car washed, $75 per bus washed):\nm.maximize(50 * Cars + 75 * Buses)\n", "entities": [{"start": 17, "end": 21, "word": "cars", "entity_group": "VAR", "score": 0.9996283077494632}, {"start": 26, "end": 31, "word": "buses", "entity_group": "VAR", "score": 0.9998180624356221}, {"start": 39, "end": 42, "word": "car", "entity_group": "VAR", "score": 0.9995193552324031}, {"start": 49, "end": 51, "word": "30", "entity_group": "PARAM", "score": 0.9996984946272756}, {"start": 78, "end": 80, "word": "10", "entity_group": "PARAM", "score": 0.9996311109019327}, {"start": 102, "end": 105, "word": "bus", "entity_group": "VAR", "score": 0.9987652917499413}, {"start": 112, "end": 114, "word": "50", "entity_group": "PARAM", "score": 0.9996657570406926}, {"start": 141, "end": 143, "word": "20", "entity_group": "PARAM", "score": 0.9994710533212732}, {"start": 176, "end": 185, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991240952105888}, {"start": 186, "end": 190, "word": "5000", "entity_group": "LIMIT", "score": 0.9994138581505781}, {"start": 218, "end": 222, "word": "1500", "entity_group": "LIMIT", "score": 0.9990830242138942}, {"start": 254, "end": 259, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9942004263027514}, {"start": 262, "end": 264, "word": "50", "entity_group": "PARAM", "score": 0.9992957332323076}, {"start": 269, "end": 272, "word": "car", "entity_group": "VAR", "score": 0.9976443204840202}, {"start": 286, "end": 288, "word": "75", "entity_group": "PARAM", "score": 0.9995298689430961}, {"start": 293, "end": 296, "word": "bus", "entity_group": "VAR", "score": 0.9925254486582712}, {"start": 343, "end": 351, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997013845528808}, {"start": 358, "end": 366, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9988232431203341}]}
{"doc_id": "-601159686", "document": "A bodybuilder only eats protein bars. He wants to make sure het gets a minimum of 80 grams of protein, 50 grams of fat, and 100 grams of carbs. Protein Bar A contains 10 grams of protein, 3 grams of fat, and 11 grams of carbs. Protein Bar B contains 15 grams of protein, 5 grams of fat, and 8 grams of carbs. If the cost per Protein Bar A is $7 and the cost per Protein Bar B is $10, how many of each should he buy to minimize his costs?", "order_mapping": {"Protein Bar A": 0, "Protein Bar B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Protein Bar A": "7", "Protein Bar B": "10"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "80", "terms": {"Protein Bar A": "10", "Protein Bar B": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"Protein Bar A": "3", "Protein Bar B": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "100", "terms": {"Protein Bar A": "11", "Protein Bar B": "8"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Protein Bar A to buy\n- y: Number of Protein Bar B to buy\n\nObjective:\n- The bodybuilder wants to minimize his costs. The cost per Protein Bar A is $7 and the cost per Protein Bar B is $10. Therefore, the objective function is: Minimize 7x + 10y\n\nConstraints:\n- The bodybuilder needs to ensure he gets a minimum of 80 grams of protein, 50 grams of fat, and 100 grams of carbs. This leads to the following constraints:\n    - 10x + 15y >= 80 (protein constraint)\n    - 3x + 5y >= 50 (fat constraint)\n    - 11x + 8y >= 100 (carb constraint)\n- Additionally, the number of each type of protein bar should be non-negative: x >= 0, y >= 0\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 7x + 10y\nConstraints:\n10x + 15y >= 80\n3x + 5y >= 50\n11x + 8y >= 100\nx >= 0\ny >= 0", "canonical": {"objective": [7.0, 10.0], "constraints": [[-10.0, -15.0, -80.0], [-3.0, -5.0, -50.0], [-11.0, -8.0, -100.0]]}, "solution": {"x": 5, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of Protein Bar A bought: ProteinBarA\n- Number of Protein Bar B bought: ProteinBarB\n\nConstraints:\n- To meet the minimum of 80 grams of protein:\n  10 * ProteinBarA + 15 * ProteinBarB >= 80\n- To meet the minimum of 50 grams of fat:\n  3 * ProteinBarA + 5 * ProteinBarB >= 50\n- To meet the minimum of 100 grams of carbs:\n  11 * ProteinBarA + 8 * ProteinBarB >= 100\n\nObjective:\n- Minimize costs (7 dollars per Protein Bar A, 10 dollars per Protein Bar B):\n  7 * ProteinBarA + 10 * ProteinBarB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProteinBarA = intvar(0, 999999999)  # Number of Protein Bar A bought\nProteinBarB = intvar(0, 999999999)  # Number of Protein Bar B bought\n\n# Constraints\nm = Model()\n\n# Minimum of 80 grams of protein:\nm += 10 * ProteinBarA + 15 * ProteinBarB >= 80\n# Minimum of 50 grams of fat:\nm += 3 * ProteinBarA + 5 * ProteinBarB >= 50\n# Minimum of 100 grams of carbs:\nm += 11 * ProteinBarA + 8 * ProteinBarB >= 100\n\n# Objective\n# Minimize costs (7 dollars per Protein Bar A, 10 dollars per Protein Bar B):\nm.minimize(7 * ProteinBarA + 10 * ProteinBarB)\n", "entities": [{"start": 72, "end": 79, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9980273581420276}, {"start": 83, "end": 85, "word": "80", "entity_group": "LIMIT", "score": 0.9997693968889201}, {"start": 105, "end": 107, "word": "50", "entity_group": "LIMIT", "score": 0.9997588598018923}, {"start": 127, "end": 130, "word": "100", "entity_group": "LIMIT", "score": 0.9995291192013219}, {"start": 148, "end": 161, "word": "Protein Bar A", "entity_group": "VAR", "score": 0.9996238887134276}, {"start": 171, "end": 173, "word": "10", "entity_group": "PARAM", "score": 0.9997293497750828}, {"start": 193, "end": 194, "word": "3", "entity_group": "PARAM", "score": 0.9997375292748308}, {"start": 214, "end": 216, "word": "11", "entity_group": "PARAM", "score": 0.9996114769756134}, {"start": 234, "end": 247, "word": "Protein Bar B", "entity_group": "VAR", "score": 0.9996510758765845}, {"start": 257, "end": 259, "word": "15", "entity_group": "PARAM", "score": 0.999729271029791}, {"start": 279, "end": 280, "word": "5", "entity_group": "PARAM", "score": 0.9997375297691038}, {"start": 300, "end": 301, "word": "8", "entity_group": "PARAM", "score": 0.9993889378659152}, {"start": 326, "end": 330, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986430363339556}, {"start": 335, "end": 348, "word": "Protein Bar A", "entity_group": "VAR", "score": 0.9994002953781006}, {"start": 354, "end": 355, "word": "7", "entity_group": "PARAM", "score": 0.99934174669333}, {"start": 364, "end": 368, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984802123403276}, {"start": 373, "end": 386, "word": "Protein Bar B", "entity_group": "VAR", "score": 0.9993359281298028}, {"start": 392, "end": 394, "word": "10", "entity_group": "PARAM", "score": 0.9994542921687871}, {"start": 431, "end": 439, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994779554127431}, {"start": 444, "end": 449, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990897010109112}]}
{"doc_id": "1973638902", "document": "You are put on a special diet where you can drink two juices. Juice A contains 10 grams of protein, 15 grams of carbs, 4 grams of fat, and 300 calories per cup. Juice B contains 12 grams of protein, 20 grams of carbs, 8 grams of fat, and 350 calories per cup. You must consume at least 100 grams of protein and 150 grams of carbs. However you can consume at most 50 grams of fat. How many cups of each juice should you drink to minimize the number of calories?", "order_mapping": {"Juice A": 0, "Juice B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "number of calories", "terms": {"Juice A": "300", "Juice B": "350"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"Juice A": "10", "Juice B": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"Juice A": "15", "Juice B": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50", "terms": {"Juice A": "4", "Juice B": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Cups of Juice A\n- y: Cups of Juice B\n\nObjective:\n- The goal is to minimize the number of calories consumed. Each cup of Juice A contains 300 calories and each cup of Juice B contains 350 calories. Therefore, the objective function is: Minimize 300x + 350y\n\nConstraints:\n- The minimum protein intake required is 100 grams, which translates to: 10x + 12y >= 100.\n- The minimum carb intake required is 150 grams, leading to the constraint: 15x + 20y >= 150.\n- The maximum fat intake allowed is 50 grams, resulting in the constraint: 4x + 8y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 300x + 350y\nConstraints:\n10x + 12y >= 100\n15x + 20y >= 150\n4x + 8y <= 50", "canonical": {"objective": [300.0, 350.0], "constraints": [[-10.0, -12.0, -100.0], [-15.0, -20.0, -150.0], [4.0, 8.0, 50.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of cups of Juice A: JuiceA\n- Number of cups of Juice B: JuiceB\n\nConstraints:\n- Protein requirement: at least 100 grams of protein\n  10 * JuiceA + 12 * JuiceB >= 100\n- Carbs requirement: at least 150 grams of carbs\n  15 * JuiceA + 20 * JuiceB >= 150\n- Fat limit: at most 50 grams of fat\n  4 * JuiceA + 8 * JuiceB <= 50\n\nObjective:\n- Minimize the total number of calories consumed\n  300 * JuiceA + 350 * JuiceB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nJuiceA = intvar(0, 999999999)  # Number of cups of Juice A\nJuiceB = intvar(0, 999999999)  # Number of cups of Juice B\n\n# Constraints\nm = Model()\n\n# Protein constraint: at least 100 grams of protein\nm += 10 * JuiceA + 12 * JuiceB >= 100\n# Carbs constraint: at least 150 grams of carbs\nm += 15 * JuiceA + 20 * JuiceB >= 150\n# Fat constraint: at most 50 grams of fat\nm += 4 * JuiceA + 8 * JuiceB <= 50\n\n# Objective\n# Minimize the number of calories\nm.minimize(300 * JuiceA + 350 * JuiceB)\n", "entities": [{"start": 63, "end": 70, "word": "Juice A", "entity_group": "VAR", "score": 0.9999000416432775}, {"start": 80, "end": 82, "word": "10", "entity_group": "PARAM", "score": 0.9996831157499557}, {"start": 102, "end": 104, "word": "15", "entity_group": "PARAM", "score": 0.9997416463420876}, {"start": 122, "end": 123, "word": "4", "entity_group": "PARAM", "score": 0.9997374082997652}, {"start": 143, "end": 146, "word": "300", "entity_group": "PARAM", "score": 0.9995611891894016}, {"start": 147, "end": 155, "word": "calories", "entity_group": "OBJ_NAME", "score": 0.9948222416037785}, {"start": 166, "end": 173, "word": "Juice B", "entity_group": "VAR", "score": 0.9999166225169879}, {"start": 183, "end": 185, "word": "12", "entity_group": "PARAM", "score": 0.9996682271276064}, {"start": 205, "end": 207, "word": "20", "entity_group": "PARAM", "score": 0.9997416467751071}, {"start": 225, "end": 226, "word": "8", "entity_group": "PARAM", "score": 0.9997373762829042}, {"start": 246, "end": 249, "word": "350", "entity_group": "PARAM", "score": 0.9993548180737214}, {"start": 250, "end": 258, "word": "calories", "entity_group": "OBJ_NAME", "score": 0.9975478827898386}, {"start": 286, "end": 294, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990105594638329}, {"start": 295, "end": 298, "word": "100", "entity_group": "LIMIT", "score": 0.9997592954036867}, {"start": 320, "end": 323, "word": "150", "entity_group": "LIMIT", "score": 0.9997270928339212}, {"start": 365, "end": 372, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991491320118652}, {"start": 373, "end": 375, "word": "50", "entity_group": "LIMIT", "score": 0.999740495965033}, {"start": 439, "end": 447, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992954611264385}, {"start": 452, "end": 470, "word": "number of calories", "entity_group": "OBJ_NAME", "score": 0.9884793103254356}]}
{"doc_id": "-38817154", "document": "A watch company makes digital watches and analog watches. There is a demand of at least 150 digital watches and at least 120 analog watches per day. However, the company can make at most 200 digital watches and at most 180 analog watches per day. In addition, they have a contract to ship at least 300 watches of either type per day. If the profit per digital watch is $15 and the profit per analog watch is $10, how many of each should the company make to maximize profit?", "order_mapping": {"digital watches": 0, "analog watches": 1, "digital watch": 0, "analog watch": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"digital watch": "15", "analog watch": "10"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "150", "var": "digital watches", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "120", "var": "analog watches", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "200", "var": "digital watches", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "180", "var": "analog watches", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "300", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of digital watches made per day\n- y: Number of analog watches made per day\n\nObjective:\n- The company aims to maximize its profit. The profit per digital watch is $15 and the profit per analog watch is $10. Therefore, the objective function is: Maximize 15x + 10y\n\nConstraints:\n- There is a demand for at least 150 digital watches per day, leading to the constraint: x >= 150.\n- There is a demand for at least 120 analog watches per day, leading to the constraint: y >= 120.\n- The company can make at most 200 digital watches per day, leading to the constraint: x <= 200.\n- The company can make at most 180 analog watches per day, leading to the constraint: y <= 180.\n- The company has a contract to ship at least 300 watches of either type per day, leading to the constraint: x + y >= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 15x + 10y\nConstraints:\nx >= 150\ny >= 120\nx <= 200\ny <= 180\nx + y >= 300", "canonical": {"objective": [-15.0, -10.0], "constraints": [[-1.0, 0.0, -150.0], [0.0, -1.0, -120.0], [1.0, 0.0, 200.0], [0.0, 1.0, 180.0], [-1.0, -1.0, -300.0]]}, "solution": {"x": 200, "y": 180}, "pseudo_model": "\nDecision Variables:\n- Number of digital watches made per day: DigitalWatches\n- Number of analog watches made per day: AnalogWatches\n\nConstraints:\n- At least 150 digital watches must be made per day:\n  DigitalWatches >= 150\n- At least 120 analog watches must be made per day:\n  AnalogWatches >= 120\n- At most 200 digital watches can be made per day:\n  DigitalWatches <= 200\n- At most 180 analog watches can be made per day:\n  AnalogWatches <= 180\n- At least 300 watches of either type must be shipped per day:\n  DigitalWatches + AnalogWatches >= 300\n\nObjective:\n- Maximize profit (15 dollars per digital watch, 10 dollars per analog watch):\n  15 * DigitalWatches + 10 * AnalogWatches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDigitalWatches = intvar(0, 999999999)  # Number of digital watches made per day\nAnalogWatches = intvar(0, 999999999)  # Number of analog watches made per day\n\n# Constraints\nm = Model()\n\n# Demand constraints\nm += DigitalWatches >= 150  # At least 150 digital watches\nm += AnalogWatches >= 120  # At least 120 analog watches\n\n# Production capacity constraints\nm += DigitalWatches <= 200  # At most 200 digital watches\nm += AnalogWatches <= 180  # At most 180 analog watches\n\n# Contract requirement to ship at least 300 watches of either type per day\nm += DigitalWatches + AnalogWatches >= 300\n\n# Objective\n# Maximize profit (15 dollars per digital watch, 10 dollars per analog watch)\nm.maximize(15 * DigitalWatches + 10 * AnalogWatches)\n", "entities": [{"start": 22, "end": 37, "word": "digital watches", "entity_group": "VAR", "score": 0.9999451288667155}, {"start": 42, "end": 56, "word": "analog watches", "entity_group": "VAR", "score": 0.9999911739494828}, {"start": 80, "end": 88, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980421496289574}, {"start": 89, "end": 92, "word": "150", "entity_group": "LIMIT", "score": 0.9994584787489447}, {"start": 93, "end": 108, "word": "digital watches", "entity_group": "VAR", "score": 0.9999526044409376}, {"start": 113, "end": 121, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987133177449419}, {"start": 122, "end": 125, "word": "120", "entity_group": "LIMIT", "score": 0.9995227775994437}, {"start": 126, "end": 140, "word": "analog watches", "entity_group": "VAR", "score": 0.9998946283659325}, {"start": 182, "end": 189, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998835597651139}, {"start": 190, "end": 193, "word": "200", "entity_group": "LIMIT", "score": 0.9995561082679076}, {"start": 194, "end": 209, "word": "digital watches", "entity_group": "VAR", "score": 0.9999270804558905}, {"start": 214, "end": 221, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987815791240703}, {"start": 222, "end": 225, "word": "180", "entity_group": "LIMIT", "score": 0.9996077038068254}, {"start": 226, "end": 240, "word": "analog watches", "entity_group": "VAR", "score": 0.9999538014030973}, {"start": 294, "end": 302, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987265112972865}, {"start": 303, "end": 306, "word": "300", "entity_group": "LIMIT", "score": 0.9996698823599146}, {"start": 347, "end": 353, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999380389345195}, {"start": 358, "end": 371, "word": "digital watch", "entity_group": "VAR", "score": 0.9999350219267275}, {"start": 377, "end": 379, "word": "15", "entity_group": "PARAM", "score": 0.9995245492787864}, {"start": 388, "end": 394, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354484866171}, {"start": 399, "end": 411, "word": "analog watch", "entity_group": "VAR", "score": 0.9999251391912112}, {"start": 417, "end": 419, "word": "10", "entity_group": "PARAM", "score": 0.9996916646043335}, {"start": 466, "end": 474, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 475, "end": 481, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "1722718639", "document": "An artist uses clay to make both mini elephants and lions. Each mini elephant requires 10 units of clay and each mini lion requires 8 units of clay. The artist has available 300 units of clay. However, due to time constraints, the artist can make at most 33 animals total. If the profit per mini elephant sold is $50 and the profit per mini lion sold is $45, how many of each should the artist make to maximize profit?", "order_mapping": {"mini elephants": 0, "lions": 1, "mini elephant": 0, "mini lion": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mini elephant": "50", "mini lion": "45"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"mini elephant": "10", "mini lion": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "33", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of mini elephants\n- y: Number of mini lions\n\nObjective:\n- The artist aims to maximize profit. The profit per mini elephant sold is $50 and the profit per mini lion sold is $45. Therefore, the objective function is: Maximize 50x + 45y\n\nConstraints:\n- The artist has 300 units of clay available, and each mini elephant requires 10 units of clay and each mini lion requires 8 units of clay. This leads to the constraint: 10x + 8y <= 300.\n- Due to time constraints, the artist can make at most 33 animals total, resulting in the constraint: x + y <= 33.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 45y\nConstraints:\n10x + 8y <= 300\nx + y <= 33", "canonical": {"objective": [-50.0, -45.0], "constraints": [[10.0, 8.0, 300.0], [1.0, 1.0, 33.0]]}, "solution": {"x": 18, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of mini elephants made: MiniElephants\n- Number of mini lions made: MiniLions\n\nConstraints:\n- Total clay used should not exceed 300 units (10 units per mini elephant, 8 units per mini lion):\n  10 * MiniElephants + 8 * MiniLions <= 300\n- Total number of animals made should not exceed 33:\n  MiniElephants + MiniLions <= 33\n\nObjective:\n- Maximize profit ($50 per mini elephant, $45 per mini lion):\n  50 * MiniElephants + 45 * MiniLions\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMiniElephants = intvar(0, 999999999)  # Number of mini elephants made\nMiniLions = intvar(0, 999999999)  # Number of mini lions made\n\n# Constraints\nm = Model()\n\n# The artist has available 300 units of clay:\nm += 10 * MiniElephants + 8 * MiniLions <= 300\n# The artist can make at most 33 animals total:\nm += MiniElephants + MiniLions <= 33\n\n# Objective\n# Maximize profit ($50 per mini elephant sold, $45 per mini lion sold):\nm.maximize(50 * MiniElephants + 45 * MiniLions)\n", "entities": [{"start": 33, "end": 47, "word": "mini elephants", "entity_group": "VAR", "score": 0.9998172273088511}, {"start": 52, "end": 57, "word": "lions", "entity_group": "VAR", "score": 0.9997835045448646}, {"start": 65, "end": 78, "word": "mini elephant", "entity_group": "VAR", "score": 0.9999779800435602}, {"start": 88, "end": 90, "word": "10", "entity_group": "PARAM", "score": 0.999636015699275}, {"start": 114, "end": 123, "word": "mini lion", "entity_group": "VAR", "score": 0.9999364752711215}, {"start": 133, "end": 134, "word": "8", "entity_group": "PARAM", "score": 0.9994899388869509}, {"start": 166, "end": 175, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987415774623248}, {"start": 176, "end": 179, "word": "300", "entity_group": "LIMIT", "score": 0.9993121591839702}, {"start": 252, "end": 259, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986567254955673}, {"start": 260, "end": 262, "word": "33", "entity_group": "LIMIT", "score": 0.9996611797856236}, {"start": 286, "end": 292, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997702392367087}, {"start": 297, "end": 310, "word": "mini elephant", "entity_group": "VAR", "score": 0.9998512810190526}, {"start": 321, "end": 323, "word": "50", "entity_group": "PARAM", "score": 0.9996390125101948}, {"start": 332, "end": 338, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999375732499521}, {"start": 343, "end": 352, "word": "mini lion", "entity_group": "VAR", "score": 0.9997905646758143}, {"start": 363, "end": 365, "word": "45", "entity_group": "PARAM", "score": 0.999705630439414}, {"start": 411, "end": 419, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-1813218966", "document": "A baker melts milk and dark chocolate together to create a new mixture. The mixture must contain at least 120 units of cacao and 80 units of sugar. Each milk chocolate piece contains 3 units of cacao and 2 units of sugar. Each dark chocolate piece contains 4 units of cacao and 1 unit of sugar. If the cost per milk chocolate piece is $0.50 and the cost per dark chocolate piece is $0.75, how many of each should the baker buy to minimize costs?", "order_mapping": {"milk": 0, "dark": 1, "milk chocolate piece": 0, "dark chocolate piece": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"milk chocolate piece": "0.50", "dark chocolate piece": "0.75"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "120", "terms": {"milk chocolate piece": "3", "dark chocolate piece": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"milk chocolate piece": "2", "dark chocolate piece": "1"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of milk chocolate pieces\n- y: Number of dark chocolate pieces\n\nObjective:\n- The baker wants to minimize costs. The cost per milk chocolate piece is $0.50 and the cost per dark chocolate piece is $0.75. Therefore, the objective function is: Minimize 0.50x + 0.75y\n\nConstraints:\n- The mixture must contain at least 120 units of cacao, which translates to the constraint: 3x + 4y >= 120.\n- The mixture must contain at least 80 units of sugar, leading to the constraint: 2x + y >= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.50x + 0.75y\nConstraints:\n3x + 4y >= 120\n2x + y >= 80", "canonical": {"objective": [0.5, 0.75], "constraints": [[-3.0, -4.0, -120.0], [-2.0, -1.0, -80.0]]}, "solution": {"x": 40, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of milk chocolate pieces bought: MilkChocolate\n- Number of dark chocolate pieces bought: DarkChocolate\n\nConstraints:\n- Mixture must contain at least 120 units of cacao:\n  3 * MilkChocolate + 4 * DarkChocolate >= 120\n- Mixture must contain at least 80 units of sugar:\n  2 * MilkChocolate + 1 * DarkChocolate >= 80\n\nObjective:\n- Minimize costs (0.50 dollars per milk chocolate piece, 0.75 dollars per dark chocolate piece):\n  0.50 * MilkChocolate + 0.75 * DarkChocolate\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMilkChocolate = intvar(0, 999999999)  # Number of milk chocolate pieces\nDarkChocolate = intvar(0, 999999999)  # Number of dark chocolate pieces\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 120 units of cacao:\nm += 3 * MilkChocolate + 4 * DarkChocolate >= 120\n# The mixture must contain at least 80 units of sugar:\nm += 2 * MilkChocolate + 1 * DarkChocolate >= 80\n\n# Objective\n# Minimize costs (0.50 dollars per milk chocolate piece, 0.75 dollars per dark chocolate piece):\nm.minimize(0.50 * MilkChocolate + 0.75 * DarkChocolate)\n", "entities": [{"start": 14, "end": 18, "word": "milk", "entity_group": "VAR", "score": 0.9990988125085223}, {"start": 23, "end": 27, "word": "dark", "entity_group": "VAR", "score": 0.9994211203116734}, {"start": 98, "end": 106, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991921416786965}, {"start": 107, "end": 110, "word": "120", "entity_group": "LIMIT", "score": 0.9997380670695062}, {"start": 130, "end": 132, "word": "80", "entity_group": "LIMIT", "score": 0.9997121181245524}, {"start": 155, "end": 175, "word": "milk chocolate piece", "entity_group": "VAR", "score": 0.9996354010031056}, {"start": 185, "end": 186, "word": "3", "entity_group": "PARAM", "score": 0.99967865442057}, {"start": 206, "end": 207, "word": "2", "entity_group": "PARAM", "score": 0.9997149593339756}, {"start": 230, "end": 250, "word": "dark chocolate piece", "entity_group": "VAR", "score": 0.9996081201961231}, {"start": 260, "end": 261, "word": "4", "entity_group": "PARAM", "score": 0.9996789958939166}, {"start": 281, "end": 282, "word": "1", "entity_group": "PARAM", "score": 0.9993709614500008}, {"start": 306, "end": 310, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9990614609821996}, {"start": 315, "end": 335, "word": "milk chocolate piece", "entity_group": "VAR", "score": 0.9993426322839041}, {"start": 341, "end": 345, "word": "0.50", "entity_group": "PARAM", "score": 0.9992520928042419}, {"start": 354, "end": 358, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989094284573647}, {"start": 363, "end": 383, "word": "dark chocolate piece", "entity_group": "VAR", "score": 0.9990054989088804}, {"start": 389, "end": 393, "word": "0.75", "entity_group": "PARAM", "score": 0.9997138683834771}, {"start": 437, "end": 445, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996677385350966}, {"start": 446, "end": 451, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999056298458213}]}
{"doc_id": "-1746532659", "document": "A vine farmer has 100 acres of land to grown red and green grapes. He must grow at least 30 acres of red grapes and at least 25 acres of green grapes. The farmer prefers to grow more green grapes than red grapes but due to a shortage, he can grow at most twice the amount of green grapes as red grapes. If the profit per acre of red grapes is $300, and the profit per acre of green grapes is $250, how many acres of each should be grown to maximize profit?", "order_mapping": {"red": 0, "green grapes": 1, "red grapes": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"red grapes": "300", "green grapes": "250"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "red grapes", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "25", "var": "green grapes", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "green grapes", "direction": "at most", "param": "twice", "y_var": "red grapes", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of red grapes\n- y: Acres of green grapes\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of red grapes is $300, and the profit per acre of green grapes is $250. Therefore, the objective function is: Maximize 300x + 250y\n\nConstraints:\n- The farmer has 100 acres of land available for growing grapes, so the constraint is: x + y <= 100.\n- At least 30 acres of red grapes must be grown, leading to the constraint: x >= 30.\n- At least 25 acres of green grapes must be grown, resulting in the constraint: y >= 25.\n- The farmer can grow at most twice the amount of green grapes as red grapes, leading to the constraint: y <= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 250y\nConstraints:\nx + y <= 100\nx >= 30\ny >= 25\ny <= 2x", "canonical": {"objective": [-300.0, -250.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -30.0], [0.0, -1.0, -25.0], [-2.0, 1.0, 0.0]]}, "solution": {"x": 75, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Acres of red grapes grown: RedGrapes\n- Acres of green grapes grown: GreenGrapes\n\nConstraints:\n- Total acres used should not exceed 100:\n  RedGrapes + GreenGrapes <= 100\n- At least 30 acres of red grapes:\n  RedGrapes >= 30\n- At least 25 acres of green grapes:\n  GreenGrapes >= 25\n- Green grapes grown should be at most twice the amount of red grapes:\n  GreenGrapes <= 2 * RedGrapes\n\nObjective:\n- Maximize profit (300 dollars per acre of red grapes, 250 dollars per acre of green grapes):\n  300 * RedGrapes + 250 * GreenGrapes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRedGrapes = intvar(0, 999999999)  # Acres of red grapes\nGreenGrapes = intvar(0, 999999999)  # Acres of green grapes\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 100:\nm += RedGrapes + GreenGrapes <= 100\n# At least 30 acres of red grapes:\nm += RedGrapes >= 30\n# At least 25 acres of green grapes:\nm += GreenGrapes >= 25\n# Green grapes grown should be at most twice the amount of red grapes:\nm += GreenGrapes <= 2 * RedGrapes\n\n# Objective\n# Maximize profit (300 dollars per acre of red grapes, 250 dollars per acre of green grapes):\nm.maximize(300 * RedGrapes + 250 * GreenGrapes)\n", "entities": [{"start": 14, "end": 17, "word": "has", "entity_group": "CONST_DIR", "score": 0.9937774337257005}, {"start": 18, "end": 21, "word": "100", "entity_group": "LIMIT", "score": 0.9988662666666318}, {"start": 45, "end": 48, "word": "red", "entity_group": "VAR", "score": 0.9973632132656136}, {"start": 53, "end": 65, "word": "green grapes", "entity_group": "VAR", "score": 0.9999837975477835}, {"start": 81, "end": 89, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988947392624279}, {"start": 90, "end": 92, "word": "30", "entity_group": "LIMIT", "score": 0.9997005242378121}, {"start": 102, "end": 112, "word": "red grapes", "entity_group": "VAR", "score": 0.9999719887646122}, {"start": 117, "end": 125, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987111101621043}, {"start": 126, "end": 128, "word": "25", "entity_group": "LIMIT", "score": 0.9997109979253803}, {"start": 138, "end": 150, "word": "green grapes", "entity_group": "VAR", "score": 0.9999731719621288}, {"start": 185, "end": 197, "word": "green grapes", "entity_group": "VAR", "score": 0.9998606198653809}, {"start": 203, "end": 213, "word": "red grapes", "entity_group": "VAR", "score": 0.9999836573586505}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9973315949852147}, {"start": 258, "end": 263, "word": "twice", "entity_group": "PARAM", "score": 0.9917139138915212}, {"start": 278, "end": 290, "word": "green grapes", "entity_group": "VAR", "score": 0.9998805908017033}, {"start": 294, "end": 304, "word": "red grapes", "entity_group": "VAR", "score": 0.9999816606317368}, {"start": 314, "end": 320, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999826982481282}, {"start": 333, "end": 343, "word": "red grapes", "entity_group": "VAR", "score": 0.9999204731874878}, {"start": 349, "end": 352, "word": "300", "entity_group": "PARAM", "score": 0.9997088907781198}, {"start": 363, "end": 369, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998462759229927}, {"start": 382, "end": 394, "word": "green grapes", "entity_group": "VAR", "score": 0.99994553468366}, {"start": 400, "end": 403, "word": "250", "entity_group": "PARAM", "score": 0.9996829114610379}, {"start": 448, "end": 456, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 457, "end": 463, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-944200428", "document": "A camera store can spend at most $10000 on camera equipment. Each lens costs $400 and each tripod costs $300. The profit per lens sold is $200 and the profit per tripod sold is $150. The store owner estimates that at least 10 lenses but at most 25 are sold each month. In addition, the number of tripods sold is at most a third of the number of lenses sold. How many of each should the store sell to maximize profit?", "order_mapping": {"lens": 0, "tripod": 1, "lenses": 0, "tripods": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lens": "200", "tripod": "150"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "10000", "terms": {"lens": "400", "tripod": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "lenses", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "25", "var": "lenses", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "tripods", "direction": "at most", "param": "third", "y_var": "lenses", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of lenses sold\n- y: Number of tripods sold\n\nObjective:\n- The store aims to maximize its profit. The profit per lens sold is $200 and the profit per tripod sold is $150. Therefore, the objective function is: Maximize 200x + 150y\n\nConstraints:\n- The store can spend at most $10000 on camera equipment, leading to the constraint: 400x + 300y <= 10000.\n- The store estimates that at least 10 lenses but at most 25 are sold each month, resulting in the constraints: 10 <= x <= 25.\n- The number of tripods sold is at most a third of the number of lenses sold, leading to the constraint: y <= (1/3)x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 150y\nConstraints:\n400x + 300y <= 10000\n10 <= x <= 25\ny <= (1/3)x", "canonical": {"objective": [-200.0, -150.0], "constraints": [[400.0, 300.0, 10000.0], [-0.3333333333333333, 1.0, 0.0], [-1.0, 0.0, -10.0], [1.0, 0.0, 25.0]]}, "solution": {"x": 25, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of lenses sold: Lenses\n- Number of tripods sold: Tripods\n\nConstraints:\n- Spending limit on camera equipment (cost per lens = $400, cost per tripod = $300, total budget = $10000):\n  400 * Lenses + 300 * Tripods <= 10000\n- Lenses sold per month should be at least 10 but no more than 25:\n  10 <= Lenses <= 25\n- Number of tripods sold should not exceed a third of the number of lenses sold:\n  Tripods <= 1/3 * Lenses\n\nObjective:\n- Maximize profit (profit per lens = $200, profit per tripod = $150):\n  200 * Lenses + 150 * Tripods\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLenses = intvar(0, 999999999)  # Number of lenses sold\nTripods = intvar(0, 999999999)  # Number of tripods sold\n\n# Constraints\nm = Model()\n\n# The store can spend at most $10000 on camera equipment (each lens costs $400 and each tripod costs $300):\nm += 400 * Lenses + 300 * Tripods <= 10000\n# At least 10 lenses but at most 25 are sold each month:\nm += Lenses >= 10\nm += Lenses <= 25\n# The number of tripods sold is at most a third of the number of lenses sold:\nm += Tripods <= (1/3) * Lenses\n\n# Objective\n# Maximize profit (profit per lens sold is $200 and profit per tripod sold is $150):\nm.maximize(200 * Lenses + 150 * Tripods)\n", "entities": [{"start": 25, "end": 32, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9961136634037726}, {"start": 35, "end": 40, "word": "10000", "entity_group": "PARAM", "score": 0.9993523494931947}, {"start": 68, "end": 72, "word": "lens", "entity_group": "VAR", "score": 0.9996381182493277}, {"start": 81, "end": 84, "word": "400", "entity_group": "PARAM", "score": 0.9996891472015652}, {"start": 94, "end": 100, "word": "tripod", "entity_group": "VAR", "score": 0.9997158573192906}, {"start": 109, "end": 112, "word": "300", "entity_group": "PARAM", "score": 0.9996474391688918}, {"start": 119, "end": 125, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999505296686855}, {"start": 130, "end": 134, "word": "lens", "entity_group": "VAR", "score": 0.9988743736279301}, {"start": 145, "end": 148, "word": "200", "entity_group": "PARAM", "score": 0.9995965602496505}, {"start": 157, "end": 163, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999382352068004}, {"start": 168, "end": 174, "word": "tripod", "entity_group": "VAR", "score": 0.9984146131403843}, {"start": 185, "end": 188, "word": "150", "entity_group": "PARAM", "score": 0.9996684386546014}, {"start": 222, "end": 230, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987053544307373}, {"start": 231, "end": 233, "word": "10", "entity_group": "LIMIT", "score": 0.999664949150422}, {"start": 234, "end": 240, "word": "lenses", "entity_group": "VAR", "score": 0.9989601604216591}, {"start": 245, "end": 252, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981867350683592}, {"start": 253, "end": 255, "word": "25", "entity_group": "LIMIT", "score": 0.9995933356221066}, {"start": 306, "end": 313, "word": "tripods", "entity_group": "VAR", "score": 0.998563603521035}, {"start": 322, "end": 329, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9941364964075697}, {"start": 332, "end": 337, "word": "third", "entity_group": "PARAM", "score": 0.9971232285785075}, {"start": 355, "end": 361, "word": "lenses", "entity_group": "VAR", "score": 0.9995366302399897}, {"start": 411, "end": 419, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "-646455141", "document": "A pharmacist mixes two different medications. One unit of medication A contains 1 unit of cough relief, 2 units of pain relief, and 3 units of fever relief. One unit of medication B contains 3 units of cough relief, 1 unit of pain relief, and 2 units of fever relief. The new mixture must contain at least 20 units of cough relief, 25 units of pain relief, and 30 units of fever relief. If the cost per unit of medication A is $1 and the cost per unit of medication B is $2, how many of each should be mixed to minimize costs?", "order_mapping": {"medication A": 0, "medication B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"medication A": "1", "medication B": "2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"medication A": "1", "medication B": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "25", "terms": {"medication A": "2", "medication B": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"medication A": "3", "medication B": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of medication A\n- y: Units of medication B\n\nObjective:\n- The pharmacist aims to minimize costs. The cost per unit of medication A is $1 and the cost per unit of medication B is $2. Therefore, the objective function is: Minimize x + 2y\n\nConstraints:\n- The new mixture must contain at least 20 units of cough relief, 25 units of pain relief, and 30 units of fever relief. This leads to the following constraints:\n    - 1x + 3y >= 20 (cough relief)\n    - 2x + 1y >= 25 (pain relief)\n    - 3x + 2y >= 30 (fever relief)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 2y\nConstraints:\n1x + 3y >= 20\n2x + 1y >= 25\n3x + 2y >= 30", "canonical": {"objective": [1.0, 2.0], "constraints": [[-1.0, -3.0, -20.0], [-2.0, -1.0, -25.0], [-3.0, -2.0, -30.0]]}, "solution": {"x": 11, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of units of medication A: MedicationA\n- Number of units of medication B: MedicationB\n\nConstraints:\n- At least 20 units of cough relief required:\n  1 * MedicationA + 3 * MedicationB >= 20\n- At least 25 units of pain relief required:\n  2 * MedicationA + 1 * MedicationB >= 25\n- At least 30 units of fever relief required:\n  3 * MedicationA + 2 * MedicationB >= 30\n\nObjective:\n- Minimize costs (cost per unit of medication A is $1, cost per unit of medication B is $2):\n  1 * MedicationA + 2 * MedicationB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMedicationA = intvar(0, 999999999)  # Number of units of medication A\nMedicationB = intvar(0, 999999999)  # Number of units of medication B\n\n# Constraints\nm = Model()\n\n# The new mixture must contain at least 20 units of cough relief:\nm += 1 * MedicationA + 3 * MedicationB >= 20\n# The new mixture must contain at least 25 units of pain relief:\nm += 2 * MedicationA + 1 * MedicationB >= 25\n# The new mixture must contain at least 30 units of fever relief:\nm += 3 * MedicationA + 2 * MedicationB >= 30\n\n# Objective\n# Minimize costs (cost per unit of medication A is $1, cost per unit of medication B is $2):\nm.minimize(1 * MedicationA + 2 * MedicationB)\n", "entities": [{"start": 59, "end": 71, "word": "medication A", "entity_group": "VAR", "score": 0.9996973708415418}, {"start": 81, "end": 82, "word": "1", "entity_group": "PARAM", "score": 0.9991502348975387}, {"start": 106, "end": 107, "word": "2", "entity_group": "PARAM", "score": 0.999621072558765}, {"start": 135, "end": 136, "word": "3", "entity_group": "PARAM", "score": 0.9996943606680637}, {"start": 173, "end": 185, "word": "medication B", "entity_group": "VAR", "score": 0.9999120445077677}, {"start": 195, "end": 196, "word": "3", "entity_group": "PARAM", "score": 0.9996382792592621}, {"start": 221, "end": 222, "word": "1", "entity_group": "PARAM", "score": 0.9994940256401835}, {"start": 249, "end": 250, "word": "2", "entity_group": "PARAM", "score": 0.999664911119841}, {"start": 304, "end": 312, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985895586257763}, {"start": 313, "end": 315, "word": "20", "entity_group": "LIMIT", "score": 0.999715576416342}, {"start": 340, "end": 342, "word": "25", "entity_group": "LIMIT", "score": 0.9996470252919515}, {"start": 370, "end": 372, "word": "30", "entity_group": "LIMIT", "score": 0.9996585953268713}, {"start": 404, "end": 408, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9943154283308452}, {"start": 421, "end": 433, "word": "medication A", "entity_group": "VAR", "score": 0.9995277080456664}, {"start": 439, "end": 440, "word": "1", "entity_group": "PARAM", "score": 0.9996286904288922}, {"start": 449, "end": 453, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9964491423711413}, {"start": 466, "end": 478, "word": "medication B", "entity_group": "VAR", "score": 0.9994840424291334}, {"start": 484, "end": 485, "word": "2", "entity_group": "PARAM", "score": 0.999710504745012}, {"start": 524, "end": 532, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996863680210475}, {"start": 533, "end": 538, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990203819609212}]}
{"doc_id": "-2106825279", "document": "In a spelling bee, you can spell short words worth 3 points or long words worth 6 points. You must spell at least 5 short words and at least 2 long words. However, due to time restrictions you can spell at most 10 short words and at most 5 long words. In total, you can spell at most 10 words. How many of each length of word should you spell to maximize your points?", "order_mapping": {"short words": 0, "long words": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"short words": "3", "long words": "6"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5", "var": "short words", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "long words", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "short words", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "long words", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "10", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of short words spelled\n- y: Number of long words spelled\n\nObjective:\n- The goal is to maximize the total points earned. Each short word is worth 3 points and each long word is worth 6 points. Therefore, the objective function is: Maximize 3x + 6y\n\nConstraints:\n- At least 5 short words must be spelled, leading to the constraint: x >= 5.\n- At least 2 long words must be spelled, leading to the constraint: y >= 2.\n- At most 10 short words can be spelled, leading to the constraint: x <= 10.\n- At most 5 long words can be spelled, leading to the constraint: y <= 5.\n- The total number of words spelled must be at most 10, leading to the constraint: x + y <= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 6y\nConstraints:\nx >= 5\ny >= 2\nx <= 10\ny <= 5\nx + y <= 10", "canonical": {"objective": [-3.0, -6.0], "constraints": [[-1.0, 0.0, -5.0], [0.0, -1.0, -2.0], [1.0, 0.0, 10.0], [0.0, 1.0, 5.0], [1.0, 1.0, 10.0]]}, "solution": {"x": 5, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of short words spelled: ShortWords\n- Number of long words spelled: LongWords\n\nConstraints:\n- At least 5 short words must be spelled:\n  ShortWords >= 5\n- At least 2 long words must be spelled:\n  LongWords >= 2\n- At most 10 short words can be spelled:\n  ShortWords <= 10\n- At most 5 long words can be spelled:\n  LongWords <= 5\n- In total, at most 10 words can be spelled:\n  ShortWords + LongWords <= 10\n\nObjective:\n- Maximize points (3 points for short words, 6 points for long words):\n  3 * ShortWords + 6 * LongWords\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShortWords = intvar(0, 999999999)  # Number of short words spelled\nLongWords = intvar(0, 999999999)  # Number of long words spelled\n\n# Constraints\nm = Model()\n\n# You must spell at least 5 short words:\nm += ShortWords >= 5\n# You must spell at least 2 long words:\nm += LongWords >= 2\n# You can spell at most 10 short words:\nm += ShortWords <= 10\n# You can spell at most 5 long words:\nm += LongWords <= 5\n# In total, you can spell at most 10 words:\nm += ShortWords + LongWords <= 10\n\n# Objective\n# Maximize points (3 points for short words, 6 points for long words):\nm.maximize(3 * ShortWords + 6 * LongWords)\n", "entities": [{"start": 34, "end": 45, "word": "short words", "entity_group": "VAR", "score": 0.9999782386992805}, {"start": 52, "end": 53, "word": "3", "entity_group": "PARAM", "score": 0.9997085846270896}, {"start": 54, "end": 60, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9878865717618028}, {"start": 64, "end": 74, "word": "long words", "entity_group": "VAR", "score": 0.9999684895928314}, {"start": 81, "end": 82, "word": "6", "entity_group": "PARAM", "score": 0.9995663954862682}, {"start": 83, "end": 89, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9977647927055369}, {"start": 107, "end": 115, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984197299127672}, {"start": 116, "end": 117, "word": "5", "entity_group": "LIMIT", "score": 0.999569322139998}, {"start": 118, "end": 129, "word": "short words", "entity_group": "VAR", "score": 0.9999472299123557}, {"start": 134, "end": 142, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987968082165841}, {"start": 143, "end": 144, "word": "2", "entity_group": "LIMIT", "score": 0.9995509420584663}, {"start": 145, "end": 155, "word": "long words", "entity_group": "VAR", "score": 0.999953747063572}, {"start": 207, "end": 214, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987083123497842}, {"start": 215, "end": 217, "word": "10", "entity_group": "LIMIT", "score": 0.9996276634952671}, {"start": 218, "end": 229, "word": "short words", "entity_group": "VAR", "score": 0.9999451680473012}, {"start": 234, "end": 241, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987898592534825}, {"start": 242, "end": 243, "word": "5", "entity_group": "LIMIT", "score": 0.9995965902070231}, {"start": 244, "end": 254, "word": "long words", "entity_group": "VAR", "score": 0.9999160095211028}, {"start": 282, "end": 289, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984212353675931}, {"start": 290, "end": 292, "word": "10", "entity_group": "LIMIT", "score": 0.9997045558968087}, {"start": 353, "end": 361, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995391256611582}, {"start": 367, "end": 373, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9992063687899914}]}
{"doc_id": "1002573642", "document": "A company installs washing machines and dryers in houses. Each washing machine takes 20 minutes of plumber time and 15 minutes of electrician time. Each dryer takes 10 minutes of plumber time and 25 minutes of electrician time. The company has available 2000 minutes of plumber time and 3000 minutes of electrician time. If the profit per washing machine installation is $200 and the profit per dryer installation is $150, how many of each should be installed to maximize profit?", "order_mapping": {"washing machines": 0, "dryers": 1, "washing machine": 0, "dryer": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"dryer": "150", "washing machine": "200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"washing machine": "20", "dryer": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"washing machine": "15", "dryer": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of washing machines installed\n- y: Number of dryers installed\n\nObjective:\n- The company aims to maximize its profit. The profit per washing machine installation is $200 and the profit per dryer installation is $150. Therefore, the objective function is: Maximize 200x + 150y\n\nConstraints:\n- The company has 2000 minutes of plumber time available and each washing machine takes 20 minutes of plumber time and each dryer takes 10 minutes of plumber time. This leads to the constraint: 20x + 10y <= 2000.\n- The company has 3000 minutes of electrician time available and each washing machine takes 15 minutes of electrician time and each dryer takes 25 minutes of electrician time. This results in the constraint: 15x + 25y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 150y\nConstraints:\n20x + 10y <= 2000\n15x + 25y <= 3000", "canonical": {"objective": [-200.0, -150.0], "constraints": [[20.0, 10.0, 2000.0], [15.0, 25.0, 3000.0]]}, "solution": {"x": 58, "y": 84}, "pseudo_model": "\nDecision Variables:\n- Number of washing machines installed: WashingMachines\n- Number of dryers installed: Dryers\n\nConstraints:\n- Plumber time for installations should not exceed 2000 minutes:\n  20 * WashingMachines + 10 * Dryers <= 2000\n- Electrician time for installations should not exceed 3000 minutes:\n  15 * WashingMachines + 25 * Dryers <= 3000\n\nObjective:\n- Maximize profit ($200 per washing machine installation, $150 per dryer installation):\n  200 * WashingMachines + 150 * Dryers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWashingMachines = intvar(0, 999999999)  # Number of washing machines installed\nDryers = intvar(0, 999999999)  # Number of dryers installed\n\n# Constraints\nm = Model()\n\n# Plumber time constraint (2000 minutes available):\nm += 20 * WashingMachines + 10 * Dryers <= 2000\n# Electrician time constraint (3000 minutes available):\nm += 15 * WashingMachines + 25 * Dryers <= 3000\n\n# Objective\n# Maximize profit ($200 per washing machine installation, $150 per dryer installation):\nm.maximize(200 * WashingMachines + 150 * Dryers)\n", "entities": [{"start": 19, "end": 35, "word": "washing machines", "entity_group": "VAR", "score": 0.9999764404156282}, {"start": 40, "end": 46, "word": "dryers", "entity_group": "VAR", "score": 0.9994837450068399}, {"start": 64, "end": 79, "word": "washing machine", "entity_group": "VAR", "score": 0.9999781141250628}, {"start": 86, "end": 88, "word": "20", "entity_group": "PARAM", "score": 0.9997158493183216}, {"start": 117, "end": 119, "word": "15", "entity_group": "PARAM", "score": 0.9995435965183178}, {"start": 155, "end": 160, "word": "dryer", "entity_group": "VAR", "score": 0.9997300928366742}, {"start": 167, "end": 169, "word": "10", "entity_group": "PARAM", "score": 0.9996539744758356}, {"start": 198, "end": 200, "word": "25", "entity_group": "PARAM", "score": 0.9995435007020429}, {"start": 247, "end": 256, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996095434712557}, {"start": 257, "end": 261, "word": "2000", "entity_group": "LIMIT", "score": 0.9993353139669778}, {"start": 290, "end": 294, "word": "3000", "entity_group": "LIMIT", "score": 0.9995563399511685}, {"start": 332, "end": 338, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998635795692253}, {"start": 343, "end": 358, "word": "washing machine", "entity_group": "VAR", "score": 0.9999607150782388}, {"start": 377, "end": 380, "word": "200", "entity_group": "PARAM", "score": 0.9987234876431504}, {"start": 389, "end": 395, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999366192327485}, {"start": 400, "end": 405, "word": "dryer", "entity_group": "VAR", "score": 0.99908240444963}, {"start": 424, "end": 427, "word": "150", "entity_group": "PARAM", "score": 0.9996528881982749}, {"start": 470, "end": 478, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996793201601307}, {"start": 479, "end": 485, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274877081419}]}
{"doc_id": "1550263004", "document": "A watch company makes watches by hand. They make round watches and square watches. The round watches are made by team A and they can make at most 5 a day. The square watches are made by team B and the can make at most 6 a day. All watches have to be quality checked by a senior watchmaker and he can check at most 8 watches total a day. If the profit per round watch is $1000 and the profit per square watch is $1250, how many of each watch should be made to maximize profit?", "order_mapping": {"round watches": 0, "square watches": 1, "round watch": 0, "square watch": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"square watch": "1250", "round watch": "1000"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "5", "var": "round watches", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "6", "var": "square watches", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "8", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of round watches made\n- y: Number of square watches made\n\nObjective:\n- The company aims to maximize its profit. The profit per round watch is $1000 and the profit per square watch is $1250. Therefore, the objective function is: Maximize 1000x + 1250y\n\nConstraints:\n- Team A can make at most 5 round watches a day, leading to the constraint: x <= 5.\n- Team B can make at most 6 square watches a day, leading to the constraint: y <= 6.\n- The senior watchmaker can quality check at most 8 watches total a day, resulting in the constraint: x + y <= 8.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1000x + 1250y\nConstraints:\nx <= 5\ny <= 6\nx + y <= 8", "canonical": {"objective": [-1000.0, -1250.0], "constraints": [[1.0, 0.0, 5.0], [0.0, 1.0, 6.0], [1.0, 1.0, 8.0]]}, "solution": {"x": 2, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of round watches made per day: RoundWatches\n- Number of square watches made per day: SquareWatches\n\nConstraints:\n- Team A can make at most 5 round watches a day:\n  RoundWatches <= 5\n- Team B can make at most 6 square watches a day:\n  SquareWatches <= 6\n- The senior watchmaker can check at most 8 watches total a day:\n  RoundWatches + SquareWatches <= 8\n\nObjective:\n- Maximize profit ($1000 per round watch, $1250 per square watch):\n  1000 * RoundWatches + 1250 * SquareWatches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRoundWatches = intvar(0, 999999999)  # Number of round watches made per day\nSquareWatches = intvar(0, 999999999)  # Number of square watches made per day\n\n# Constraints\nm = Model()\n\n# Team A can make at most 5 round watches a day:\nm += RoundWatches <= 5\n# Team B can make at most 6 square watches a day:\nm += SquareWatches <= 6\n# The senior watchmaker can check at most 8 watches total a day:\nm += RoundWatches + SquareWatches <= 8\n\n# Objective\n# Maximize profit ($1000 per round watch, $1250 per square watch):\nm.maximize(1000 * RoundWatches + 1250 * SquareWatches)\n", "entities": [{"start": 50, "end": 63, "word": "round watches", "entity_group": "VAR", "score": 0.9999442624698376}, {"start": 68, "end": 82, "word": "square watches", "entity_group": "VAR", "score": 0.9999805588955489}, {"start": 89, "end": 102, "word": "round watches", "entity_group": "VAR", "score": 0.9999857692233267}, {"start": 140, "end": 147, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9973950453410292}, {"start": 148, "end": 149, "word": "5", "entity_group": "LIMIT", "score": 0.9996373560635595}, {"start": 162, "end": 176, "word": "square watches", "entity_group": "VAR", "score": 0.9999770297740574}, {"start": 213, "end": 220, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971656894410456}, {"start": 221, "end": 222, "word": "6", "entity_group": "LIMIT", "score": 0.9995421817870556}, {"start": 310, "end": 317, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983029997081873}, {"start": 318, "end": 319, "word": "8", "entity_group": "LIMIT", "score": 0.9997311178964757}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999466384958346}, {"start": 360, "end": 371, "word": "round watch", "entity_group": "VAR", "score": 0.999958539454104}, {"start": 377, "end": 381, "word": "1000", "entity_group": "PARAM", "score": 0.9995199994383709}, {"start": 390, "end": 396, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998284258578976}, {"start": 401, "end": 413, "word": "square watch", "entity_group": "VAR", "score": 0.9999456821559041}, {"start": 419, "end": 423, "word": "1250", "entity_group": "PARAM", "score": 0.9995015738757472}, {"start": 467, "end": 475, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993193030297597}, {"start": 476, "end": 482, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997781723828255}]}
{"doc_id": "1496939706", "document": "A research lab employs undergraduate students earning $100 a week and graduate students earning $300 a week. The lab requires at least 50 students, of whom at least 10 must be graduate students. To make sure there is enough experience in the lab, the number of graduate students should be at least a third the number of undergraduate students. Formulate a LP to minimize weekly wages.", "order_mapping": {"undergraduate students": 0, "graduate students": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "wages", "terms": {"undergraduate students": "100", "graduate students": "300"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "graduate students", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "graduate students", "direction": "at least", "param": "third", "y_var": "undergraduate students", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of undergraduate students\n- y: Number of graduate students\n\nObjective:\n- The lab aims to minimize its weekly wages. Undergraduate students earn $100 a week and graduate students earn $300 a week. Therefore, the objective function is: Minimize 100x + 300y\n\nConstraints:\n- The lab requires at least 50 students, so the constraint is: x + y >= 50.\n- At least 10 students must be graduate students, leading to the constraint: y >= 10.\n- The number of graduate students should be at least a third the number of undergraduate students, resulting in the constraint: y >= 1/3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 100x + 300y\nConstraints:\nx + y >= 50\ny >= 10\ny >= 1/3x", "canonical": {"objective": [100.0, 300.0], "constraints": [[-1.0, -1.0, -50.0], [0.0, -1.0, -10.0], [0.3333333333333333, -1.0, 0.0]]}, "solution": {"x": 37, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of undergraduate students employed: Undergraduates\n- Number of graduate students employed: Graduates\n\nConstraints:\n- Total number of students should be at least 50:\n  Undergraduates + Graduates >= 50\n- At least 10 students must be graduate students:\n  Graduates >= 10\n- The number of graduate students should be at least a third of the number of undergraduate students:\n  Graduates >= 1/3 * Undergraduates\n\nObjective:\n- Minimize weekly wages ($100 per undergraduate student, $300 per graduate student):\n  100 * Undergraduates + 300 * Graduates\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nUndergraduates = intvar(0, 999999999)  # Number of undergraduate students employed\nGraduates = intvar(0, 999999999)  # Number of graduate students employed\n\n# Constraints\nm = Model()\n\n# The lab requires at least 50 students:\nm += Undergraduates + Graduates >= 50\n# At least 10 must be graduate students:\nm += Graduates >= 10\n# The number of graduate students should be at least a third the number of undergraduate students:\nm += Graduates >= (1/3) * Undergraduates\n\n# Objective\n# Minimize weekly wages ($100 per undergraduate student, $300 per graduate student):\nm.minimize(100 * Undergraduates + 300 * Graduates)\n", "entities": [{"start": 23, "end": 45, "word": "undergraduate students", "entity_group": "VAR", "score": 0.9999634334370978}, {"start": 46, "end": 53, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9909503845273495}, {"start": 56, "end": 59, "word": "100", "entity_group": "PARAM", "score": 0.9996427624534464}, {"start": 71, "end": 88, "word": "graduate students", "entity_group": "VAR", "score": 0.9999771920009839}, {"start": 89, "end": 96, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.996643331997737}, {"start": 99, "end": 102, "word": "300", "entity_group": "PARAM", "score": 0.9997409041158378}, {"start": 129, "end": 137, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987108655245607}, {"start": 138, "end": 140, "word": "50", "entity_group": "LIMIT", "score": 0.9997014819287989}, {"start": 160, "end": 168, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998235991624844}, {"start": 169, "end": 171, "word": "10", "entity_group": "LIMIT", "score": 0.9997115332742234}, {"start": 180, "end": 197, "word": "graduate students", "entity_group": "VAR", "score": 0.999980483070317}, {"start": 267, "end": 284, "word": "graduate students", "entity_group": "VAR", "score": 0.9999730209915911}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981517770850392}, {"start": 306, "end": 311, "word": "third", "entity_group": "PARAM", "score": 0.9963526430305762}, {"start": 326, "end": 348, "word": "undergraduate students", "entity_group": "VAR", "score": 0.9999564431803846}, {"start": 369, "end": 377, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9990292577977998}, {"start": 385, "end": 390, "word": "wages", "entity_group": "OBJ_NAME", "score": 0.9993641894083483}]}
{"doc_id": "-1761770632", "document": "A bakery makes stuffed donuts and pastries. Each stuffed donut takes 2 minutes on the baking machine and 3 minutes on the stuffing machine. Each stuffed pastry takes 5 minutes on the baking machine and 2 minutes on the stuffing machine. The baking machine is available for 10000 minutes while the stuffing machine is available for 7000 minutes. If the profit per donut is $2 and the profit per pastry is $4, how many of each should be made to maximize profit?", "order_mapping": {"stuffed donuts": 0, "pastries": 1, "stuffed donut": 0, "stuffed pastry": 1, "donut": 0, "pastry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pastry": "4", "donut": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "10000", "terms": {"stuffed donut": "2", "stuffed pastry": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "7000", "terms": {"stuffed donut": "3", "stuffed pastry": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of stuffed donuts to be made\n- y: Number of stuffed pastries to be made\n\nObjective:\n- The bakery aims to maximize its profit. The profit per donut is $2 and the profit per pastry is $4. Therefore, the objective function is: Maximize 2x + 4y\n\nConstraints:\n- The baking machine is available for 10000 minutes, and each stuffed donut takes 2 minutes on the baking machine and each stuffed pastry takes 5 minutes on the baking machine. This leads to the constraint: 2x + 5y <= 10000.\n- The stuffing machine is available for 7000 minutes, and each stuffed donut takes 3 minutes on the stuffing machine and each stuffed pastry takes 2 minutes on the stuffing machine. This results in the constraint: 3x + 2y <= 7000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 4y\nConstraints:\n2x + 5y <= 10000\n3x + 2y <= 7000", "canonical": {"objective": [-2.0, -4.0], "constraints": [[2.0, 5.0, 10000.0], [3.0, 2.0, 7000.0]]}, "solution": {"x": 1364, "y": 1454}, "pseudo_model": "\nDecision Variables:\n- Number of stuffed donuts made: Donuts\n- Number of stuffed pastries made: Pastries\n\nConstraints:\n- Baking machine time constraint (10000 minutes available):\n  2 minutes per Donut + 5 minutes per Pastry <= 10000\n- Stuffing machine time constraint (7000 minutes available):\n  3 minutes per Donut + 2 minutes per Pastry <= 7000\n\nObjective:\n- Maximize profit (2 dollars per donut, 4 dollars per pastry):\n  2 * Donuts + 4 * Pastries\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDonuts = intvar(0, 999999999)  # Number of stuffed donuts made\nPastries = intvar(0, 999999999)  # Number of stuffed pastries made\n\n# Constraints\nm = Model()\n\n# Baking machine time constraint (10000 minutes available):\nm += 2 * Donuts + 5 * Pastries <= 10000\n# Stuffing machine time constraint (7000 minutes available):\nm += 3 * Donuts + 2 * Pastries <= 7000\n\n# Objective\n# Maximize profit (2 dollars per donut, 4 dollars per pastry):\nm.maximize(2 * Donuts + 4 * Pastries)\n", "entities": [{"start": 15, "end": 29, "word": "stuffed donuts", "entity_group": "VAR", "score": 0.9999870161020888}, {"start": 34, "end": 42, "word": "pastries", "entity_group": "VAR", "score": 0.9997948208577435}, {"start": 50, "end": 63, "word": "stuffed donut", "entity_group": "VAR", "score": 0.9999863727929921}, {"start": 70, "end": 71, "word": "2", "entity_group": "PARAM", "score": 0.9996034583739166}, {"start": 106, "end": 107, "word": "3", "entity_group": "PARAM", "score": 0.9996843647529833}, {"start": 147, "end": 161, "word": "stuffed pastry", "entity_group": "VAR", "score": 0.9999616037060629}, {"start": 168, "end": 169, "word": "5", "entity_group": "PARAM", "score": 0.9996482735723525}, {"start": 204, "end": 205, "word": "2", "entity_group": "PARAM", "score": 0.9996843522446023}, {"start": 262, "end": 271, "word": "available", "entity_group": "CONST_DIR", "score": 0.9980864458325402}, {"start": 276, "end": 281, "word": "10000", "entity_group": "LIMIT", "score": 0.9997315572518612}, {"start": 320, "end": 329, "word": "available", "entity_group": "CONST_DIR", "score": 0.9846613021758692}, {"start": 334, "end": 338, "word": "7000", "entity_group": "LIMIT", "score": 0.9996031487866224}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998492588114262}, {"start": 367, "end": 372, "word": "donut", "entity_group": "VAR", "score": 0.9995145980508899}, {"start": 378, "end": 379, "word": "2", "entity_group": "PARAM", "score": 0.9991624781556163}, {"start": 388, "end": 394, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998919331056477}, {"start": 399, "end": 405, "word": "pastry", "entity_group": "VAR", "score": 0.9990975872171675}, {"start": 411, "end": 412, "word": "4", "entity_group": "PARAM", "score": 0.9994708066969007}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 459, "end": 465, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-730482695", "document": "A juice store sells two juices, Juice A and Juice B. Each juice uses different amounts of raspberries, blueberries, and blackberries. Juice A uses 20 g of raspberries, 10 g of blueberries, and 10 g of blackberries. Juice B uses 15 g of raspberries, 15 g of blueberries, and 5 g of blackberries. The store has available 2000 g of raspberries, 1500 g of blueberries, and 1400 g of blackberries. If the profit per Juice A is $5 and the profit per Juice B is $7, how many of each juice should be made to maximize profit?", "order_mapping": {"Juice A": 0, "Juice B.": 1, "Juice B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Juice A": "5", "Juice B": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"Juice A": "20", "Juice B": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"Juice A": "10", "Juice B": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1400", "terms": {"Juice A": "10", "Juice B": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Juice A to be made\n- y: Number of Juice B to be made\n\nObjective:\n- The store aims to maximize its profit. The profit per Juice A is $5 and the profit per Juice B is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The available raspberries constraint: 20x + 15y <= 2000\n- The available blueberries constraint: 10x + 15y <= 1500\n- The available blackberries constraint: 10x + 5y <= 1400\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n20x + 15y <= 2000\n10x + 15y <= 1500\n10x + 5y <= 1400", "canonical": {"objective": [-5.0, -7.0], "constraints": [[20.0, 15.0, 2000.0], [10.0, 15.0, 1500.0], [10.0, 5.0, 1400.0]]}, "solution": {"x": 48, "y": 68}, "pseudo_model": "\nDecision Variables:\n- Number of Juice A produced: JuiceA\n- Number of Juice B produced: JuiceB\n\nConstraints:\n- Raspberries usage should not exceed 2000g:\n  20 * JuiceA + 15 * JuiceB <= 2000\n- Blueberries usage should not exceed 1500g:\n  10 * JuiceA + 15 * JuiceB <= 1500\n- Blackberries usage should not exceed 1400g:\n  10 * JuiceA + 5 * JuiceB <= 1400\n\nObjective:\n- Maximize profit (5 dollars per Juice A, 7 dollars per Juice B):\n  5 * JuiceA + 7 * JuiceB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nJuiceA = intvar(0, 999999999)  # Number of Juice A produced\nJuiceB = intvar(0, 999999999)  # Number of Juice B produced\n\n# Constraints\nm = Model()\n\n# Constraint for raspberries (2000g available):\nm += 20 * JuiceA + 15 * JuiceB <= 2000\n# Constraint for blueberries (1500g available):\nm += 10 * JuiceA + 15 * JuiceB <= 1500\n# Constraint for blackberries (1400g available):\nm += 10 * JuiceA + 5 * JuiceB <= 1400\n\n# Objective\n# Maximize profit (5 dollars per Juice A, 7 dollars per Juice B):\nm.maximize(5 * JuiceA + 7 * JuiceB)\n", "entities": [{"start": 33, "end": 40, "word": "Juice A", "entity_group": "VAR", "score": 0.9999847935623897}, {"start": 45, "end": 53, "word": "Juice B.", "entity_group": "VAR", "score": 0.9999717307694241}, {"start": 138, "end": 145, "word": "Juice A", "entity_group": "VAR", "score": 0.9999836800943626}, {"start": 151, "end": 153, "word": "20", "entity_group": "PARAM", "score": 0.9994488664267391}, {"start": 173, "end": 175, "word": "10", "entity_group": "PARAM", "score": 0.9996216174179345}, {"start": 199, "end": 201, "word": "10", "entity_group": "PARAM", "score": 0.9992943564838895}, {"start": 222, "end": 229, "word": "Juice B", "entity_group": "VAR", "score": 0.9999770746573438}, {"start": 235, "end": 237, "word": "15", "entity_group": "PARAM", "score": 0.9995499565196093}, {"start": 257, "end": 259, "word": "15", "entity_group": "PARAM", "score": 0.9995943748921735}, {"start": 283, "end": 284, "word": "5", "entity_group": "PARAM", "score": 0.9989634464266275}, {"start": 319, "end": 328, "word": "available", "entity_group": "CONST_DIR", "score": 0.9972373180645211}, {"start": 329, "end": 333, "word": "2000", "entity_group": "LIMIT", "score": 0.9992565800090574}, {"start": 353, "end": 357, "word": "1500", "entity_group": "LIMIT", "score": 0.9996382514158997}, {"start": 381, "end": 385, "word": "1400", "entity_group": "LIMIT", "score": 0.9988134895568811}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998933220673797}, {"start": 424, "end": 431, "word": "Juice A", "entity_group": "VAR", "score": 0.9999147638934267}, {"start": 437, "end": 438, "word": "5", "entity_group": "PARAM", "score": 0.9995921906643891}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999909840687373}, {"start": 458, "end": 465, "word": "Juice B", "entity_group": "VAR", "score": 0.9999468881904735}, {"start": 471, "end": 472, "word": "7", "entity_group": "PARAM", "score": 0.9997297993111247}, {"start": 516, "end": 524, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996507636220636}, {"start": 525, "end": 531, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999244723826912}]}
{"doc_id": "-2134084888", "document": "A pharmacy mixes two capsules to create a final product. Capsule A contains 2 units of targeted medicine, 3 units of pain reliever, and 1 unit of filler. Capsule B contains 3 units of targeted medicine, 1 unit of pain reliever, and 3 units of filler. The minimum requirements of the new product are 20 units of targeted medicine, 20 units of pain reliever, and 15 units of filler. If the cost per capsule A is $2 and the cost per capsule B is $3, how many of each should be used to minimize costs?", "order_mapping": {"Capsule A": 0, "Capsule B": 1, "capsule A": 0, "capsule B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"capsule A": "2", "capsule B": "3"}}, "const_declarations": [{"type": "linear", "direction": "minimum requirements", "limit": "20", "terms": {"Capsule A": "2", "Capsule B": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum requirements", "limit": "20", "terms": {"Capsule A": "3", "Capsule B": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum requirements", "limit": "15", "terms": {"Capsule A": "1", "Capsule B": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of capsule A used\n- y: Number of capsule B used\n\nObjective:\n- The pharmacy aims to minimize costs. Given that the cost per capsule A is $2 and the cost per capsule B is $3, the objective function is: Minimize 2x + 3y\n\nConstraints:\n- The new product must contain at least 20 units of targeted medicine, 20 units of pain reliever, and 15 units of filler. This leads to the following constraints:\n    - 2x + 3y >= 20 (targeted medicine)\n    - 3x + y >= 20 (pain reliever)\n    - x + 3y >= 15 (filler)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 3y\nConstraints:\n2x + 3y >= 20\n3x + y >= 20\nx + 3y >= 15", "canonical": {"objective": [2.0, 3.0], "constraints": [[-2.0, -3.0, -20.0], [-3.0, -1.0, -20.0], [-1.0, -3.0, -15.0]]}, "solution": {"x": 6, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of Capsule A used: CapsuleA\n- Number of Capsule B used: CapsuleB\n\nConstraints:\n- To meet the minimum requirements for the new product:\n  - Targeted medicine (20 units minimum):\n    2 * CapsuleA + 3 * CapsuleB >= 20\n  - Pain reliever (20 units minimum):\n    3 * CapsuleA + 1 * CapsuleB >= 20\n  - Filler (15 units minimum):\n    1 * CapsuleA + 3 * CapsuleB >= 15\n\nObjective:\n- Minimize costs (Capsule A costs $2, Capsule B costs $3):\n  2 * CapsuleA + 3 * CapsuleB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCapsuleA = intvar(0, 999999999)  # Number of Capsule A used\nCapsuleB = intvar(0, 999999999)  # Number of Capsule B used\n\n# Constraints\nm = Model()\n\n# Minimum requirements for the new product:\n# Targeted medicine: 20 units\nm += 2 * CapsuleA + 3 * CapsuleB >= 20\n# Pain reliever: 20 units\nm += 3 * CapsuleA + 1 * CapsuleB >= 20\n# Filler: 15 units\nm += 1 * CapsuleA + 3 * CapsuleB >= 15\n\n# Objective\n# Minimize costs (Capsule A costs $2, Capsule B costs $3):\nm.minimize(2 * CapsuleA + 3 * CapsuleB)\n", "entities": [{"start": 58, "end": 67, "word": "Capsule A", "entity_group": "VAR", "score": 0.9998820828800702}, {"start": 77, "end": 78, "word": "2", "entity_group": "PARAM", "score": 0.9996197601400673}, {"start": 108, "end": 109, "word": "3", "entity_group": "PARAM", "score": 0.9996998010692059}, {"start": 139, "end": 140, "word": "1", "entity_group": "PARAM", "score": 0.999419588692746}, {"start": 158, "end": 167, "word": "Capsule B", "entity_group": "VAR", "score": 0.9998673741157671}, {"start": 177, "end": 178, "word": "3", "entity_group": "PARAM", "score": 0.9996876111894797}, {"start": 208, "end": 209, "word": "1", "entity_group": "PARAM", "score": 0.999562619382414}, {"start": 238, "end": 239, "word": "3", "entity_group": "PARAM", "score": 0.9996480744035476}, {"start": 262, "end": 282, "word": "minimum requirements", "entity_group": "CONST_DIR", "score": 0.9843901482066354}, {"start": 306, "end": 308, "word": "20", "entity_group": "LIMIT", "score": 0.9996986293088443}, {"start": 338, "end": 340, "word": "20", "entity_group": "LIMIT", "score": 0.9996982788268052}, {"start": 370, "end": 372, "word": "15", "entity_group": "LIMIT", "score": 0.9994600217593761}, {"start": 398, "end": 402, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9990251267395526}, {"start": 407, "end": 416, "word": "capsule A", "entity_group": "VAR", "score": 0.9997094934761434}, {"start": 422, "end": 423, "word": "2", "entity_group": "PARAM", "score": 0.9995338128307589}, {"start": 432, "end": 436, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984319155208822}, {"start": 441, "end": 450, "word": "capsule B", "entity_group": "VAR", "score": 0.9997669408448775}, {"start": 456, "end": 457, "word": "3", "entity_group": "PARAM", "score": 0.9996300717911308}, {"start": 495, "end": 503, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9982140344902984}, {"start": 504, "end": 509, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990175354431552}]}
{"doc_id": "1023581637", "document": "A meat factory makes burgers and hot-dogs. Each burger requires 3 units of meat and 2 unit of binding agent. Each hot-dog requires 2 units of meat and 1 unit of binding agent. The factory has 2000 units of meat and 1800 units of binding agent available. If the revenue per burger made is $0.30 and the revenue per hot-dog made is $0.20, how many of each should be made to maximize revenue?", "order_mapping": {"burgers": 0, "hot-dogs": 1, "burger": 0, "hot-dog": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"burger": "0.30", "hot-dog": "0.20"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"burger": "3", "hot-dog": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1800", "terms": {"burger": "2", "hot-dog": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of burgers made\n- y: Number of hot-dogs made\n\nObjective:\n- The factory aims to maximize its revenue. The revenue per burger made is $0.30 and the revenue per hot-dog made is $0.20. Therefore, the objective function is: Maximize 0.30x + 0.20y\n\nConstraints:\n- The factory has 2000 units of meat available, and each burger requires 3 units of meat and each hot-dog requires 2 units of meat. This leads to the constraint: 3x + 2y <= 2000.\n- The factory has 1800 units of binding agent available, and each burger requires 2 units of binding agent and each hot-dog requires 1 unit of binding agent. This leads to the constraint: 2x + y <= 1800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.30x + 0.20y\nConstraints:\n3x + 2y <= 2000\n2x + y <= 1800", "canonical": {"objective": [-0.3, -0.2], "constraints": [[3.0, 2.0, 2000.0], [2.0, 1.0, 1800.0]]}, "solution": {"x": 666, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of burgers made: Burgers\n- Number of hot-dogs made: HotDogs\n\nConstraints:\n- Meat usage for burgers and hot-dogs should not exceed 2000 units:\n  3 * Burgers + 2 * HotDogs <= 2000\n- Binding agent usage for burgers and hot-dogs should not exceed 1800 units:\n  2 * Burgers + 1 * HotDogs <= 1800\n\nObjective:\n- Maximize revenue (0.30 dollars per burger and 0.20 dollars per hot-dog):\n  0.30 * Burgers + 0.20 * HotDogs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurgers = intvar(0, 999999999)  # Number of burgers made\nHotDogs = intvar(0, 999999999)  # Number of hot-dogs made\n\n# Constraints\nm = Model()\n\n# Meat constraint: 3 units per burger and 2 units per hot-dog, with 2000 units available\nm += 3 * Burgers + 2 * HotDogs <= 2000\n# Binding agent constraint: 2 units per burger and 1 unit per hot-dog, with 1800 units available\nm += 2 * Burgers + 1 * HotDogs <= 1800\n\n# Objective\n# Maximize revenue (0.30 dollars per burger and 0.20 dollars per hot-dog)\nm.maximize(0.30 * Burgers + 0.20 * HotDogs)\n", "entities": [{"start": 21, "end": 28, "word": "burgers", "entity_group": "VAR", "score": 0.9994110785553113}, {"start": 33, "end": 43, "word": "hot - dogs", "entity_group": "VAR", "score": 0.9996624375868653}, {"start": 51, "end": 57, "word": "burger", "entity_group": "VAR", "score": 0.9997028133178545}, {"start": 67, "end": 68, "word": "3", "entity_group": "PARAM", "score": 0.9996558399684642}, {"start": 87, "end": 88, "word": "2", "entity_group": "PARAM", "score": 0.9994374941710231}, {"start": 118, "end": 127, "word": "hot - dog", "entity_group": "VAR", "score": 0.9994574145368454}, {"start": 137, "end": 138, "word": "2", "entity_group": "PARAM", "score": 0.9996936155216638}, {"start": 157, "end": 158, "word": "1", "entity_group": "PARAM", "score": 0.9994374673283036}, {"start": 199, "end": 203, "word": "2000", "entity_group": "LIMIT", "score": 0.9997338143996772}, {"start": 222, "end": 226, "word": "1800", "entity_group": "LIMIT", "score": 0.9996893395654892}, {"start": 250, "end": 259, "word": "available", "entity_group": "CONST_DIR", "score": 0.999177284156086}, {"start": 269, "end": 276, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9982140960432375}, {"start": 281, "end": 287, "word": "burger", "entity_group": "VAR", "score": 0.9994111033193999}, {"start": 298, "end": 302, "word": "0.30", "entity_group": "PARAM", "score": 0.9995991015696212}, {"start": 311, "end": 318, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9985842920127764}, {"start": 323, "end": 332, "word": "hot - dog", "entity_group": "VAR", "score": 0.9976383666903443}, {"start": 343, "end": 347, "word": "0.20", "entity_group": "PARAM", "score": 0.9995344034780116}, {"start": 385, "end": 393, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996757757014475}, {"start": 394, "end": 401, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9987772414849716}]}
{"doc_id": "927355158", "document": "A video game company makes a premium and regular version of their console. A premium console takes 20 minutes of testing and requires 3 IC chips to make. A regular console takes 10 minutes of testing and requires 2 IC chips to make. The company has available at most 10000 minutes of testing time and 1500 IC chips. If the profit per premium console is $100 and the profit per regular console is $75, how many of each should be made to maximize profit?", "order_mapping": {"premium": 0, "regular": 1, "premium console": 0, "regular console": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular console": "75", "premium console": "100"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "10000", "terms": {"premium console": "20", "regular console": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1500", "terms": {"premium console": "3", "regular console": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium consoles\n- y: Number of regular consoles\n\nObjective:\n- The company aims to maximize its profit. The profit per premium console is $100 and the profit per regular console is $75. Therefore, the objective function is: Maximize 100x + 75y\n\nConstraints:\n- The company has at most 10000 minutes of testing time available, so the constraint is: 20x + 10y <= 10000.\n- The company has at most 1500 IC chips available, leading to the constraint: 3x + 2y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 75y\nConstraints:\n20x + 10y <= 10000\n3x + 2y <= 1500", "canonical": {"objective": [-100.0, -75.0], "constraints": [[20.0, 10.0, 10000.0], [3.0, 2.0, 1500.0]]}, "solution": {"x": 0, "y": 750}, "pseudo_model": "\nDecision Variables:\n- Number of premium consoles made: PremiumConsoles\n- Number of regular consoles made: RegularConsoles\n\nConstraints:\n- Total testing time for all consoles should not exceed 10000 minutes:\n  20 * PremiumConsoles + 10 * RegularConsoles <= 10000\n- Total IC chips used should not exceed 1500:\n  3 * PremiumConsoles + 2 * RegularConsoles <= 1500\n\nObjective:\n- Maximize profit ($100 per premium console and $75 per regular console):\n  100 * PremiumConsoles + 75 * RegularConsoles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumConsoles = intvar(0, 999999999)  # Number of premium consoles made\nRegularConsoles = intvar(0, 999999999)  # Number of regular consoles made\n\n# Constraints\nm = Model()\n\n# Total testing time for all consoles should not exceed 10000 minutes:\n# (20 minutes for each premium console and 10 minutes for each regular console)\nm += 20 * PremiumConsoles + 10 * RegularConsoles <= 10000\n\n# Total IC chips used should not exceed 1500:\n# (3 IC chips for each premium console and 2 IC chips for each regular console)\nm += 3 * PremiumConsoles + 2 * RegularConsoles <= 1500\n\n# Objective\n# Maximize profit ($100 per premium console and $75 per regular console):\nm.maximize(100 * PremiumConsoles + 75 * RegularConsoles)\n", "entities": [{"start": 29, "end": 36, "word": "premium", "entity_group": "VAR", "score": 0.9994477991593049}, {"start": 41, "end": 48, "word": "regular", "entity_group": "VAR", "score": 0.997284893007178}, {"start": 78, "end": 93, "word": "premium console", "entity_group": "VAR", "score": 0.9999815064282134}, {"start": 100, "end": 102, "word": "20", "entity_group": "PARAM", "score": 0.9996670134820629}, {"start": 135, "end": 136, "word": "3", "entity_group": "PARAM", "score": 0.9992244123074595}, {"start": 158, "end": 173, "word": "regular console", "entity_group": "VAR", "score": 0.9999739516810391}, {"start": 180, "end": 182, "word": "10", "entity_group": "PARAM", "score": 0.9996722297374111}, {"start": 215, "end": 216, "word": "2", "entity_group": "PARAM", "score": 0.9992244136581857}, {"start": 262, "end": 269, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999042342964393}, {"start": 270, "end": 275, "word": "10000", "entity_group": "LIMIT", "score": 0.9996992338978475}, {"start": 304, "end": 308, "word": "1500", "entity_group": "LIMIT", "score": 0.9992453734685187}, {"start": 327, "end": 333, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999778627574088}, {"start": 338, "end": 353, "word": "premium console", "entity_group": "VAR", "score": 0.9999344199172422}, {"start": 359, "end": 362, "word": "100", "entity_group": "PARAM", "score": 0.999559438231932}, {"start": 371, "end": 377, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354484847264}, {"start": 382, "end": 397, "word": "regular console", "entity_group": "VAR", "score": 0.9999318285097084}, {"start": 403, "end": 405, "word": "75", "entity_group": "PARAM", "score": 0.9996795568543727}, {"start": 443, "end": 451, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 452, "end": 458, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "343561730", "document": "A fitness company sells and installs treadmills and stationary bikes. Each treadmill takes 30 minutes of mover time and 50 minutes of setup time. Each stationary bike takes 15 minutes of mover time and 30 minutes of setup time. The company has available 10000 minutes of mover time and 15000 minutes of setup time. If the profit per treadmill is $300 and the profit per stationary bike is $120, how many of each should they sell in order to maximize profit?", "order_mapping": {"treadmills": 0, "stationary bikes": 1, "treadmill": 0, "stationary bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"stationary bike": "120", "treadmill": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "10000", "terms": {"treadmill": "30", "stationary bike": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "15000", "terms": {"treadmill": "50", "stationary bike": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of treadmills to sell\n- y: Number of stationary bikes to sell\n\nObjective:\n- The fitness company aims to maximize its profit. The profit per treadmill is $300 and the profit per stationary bike is $120. Therefore, the objective function is: Maximize 300x + 120y\n\nConstraints:\n- The company has 10000 minutes of mover time available, and each treadmill takes 30 minutes of mover time and each stationary bike takes 15 minutes of mover time. This leads to the constraint: 30x + 15y <= 10000.\n- The company has 15000 minutes of setup time available, and each treadmill takes 50 minutes of setup time and each stationary bike takes 30 minutes of setup time. This results in the constraint: 50x + 30y <= 15000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 120y\nConstraints:\n30x + 15y <= 10000\n50x + 30y <= 15000", "canonical": {"objective": [-300.0, -120.0], "constraints": [[30.0, 15.0, 10000.0], [50.0, 30.0, 15000.0]]}, "solution": {"x": 300, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of treadmills sold: Treadmills\n- Number of stationary bikes sold: StationaryBikes\n\nConstraints:\n- Total mover time for treadmills and stationary bikes should not exceed 10000 minutes:\n  30 * Treadmills + 15 * StationaryBikes <= 10000\n- Total setup time for treadmills and stationary bikes should not exceed 15000 minutes:\n  50 * Treadmills + 30 * StationaryBikes <= 15000\n\nObjective:\n- Maximize profit ($300 per treadmill, $120 per stationary bike):\n  300 * Treadmills + 120 * StationaryBikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTreadmills = intvar(0, 999999999)  # Number of treadmills sold\nStationaryBikes = intvar(0, 999999999)  # Number of stationary bikes sold\n\n# Constraints\nm = Model()\n\n# Total mover time for treadmills and stationary bikes should not exceed 10000 minutes:\nm += 30 * Treadmills + 15 * StationaryBikes <= 10000\n# Total setup time for treadmills and stationary bikes should not exceed 15000 minutes:\nm += 50 * Treadmills + 30 * StationaryBikes <= 15000\n\n# Objective\n# Maximize profit ($300 per treadmill, $120 per stationary bike):\nm.maximize(300 * Treadmills + 120 * StationaryBikes)\n", "entities": [{"start": 37, "end": 47, "word": "treadmills", "entity_group": "VAR", "score": 0.9992643687955445}, {"start": 52, "end": 68, "word": "stationary bikes", "entity_group": "VAR", "score": 0.999975966658143}, {"start": 76, "end": 85, "word": "treadmill", "entity_group": "VAR", "score": 0.9996499544336942}, {"start": 92, "end": 94, "word": "30", "entity_group": "PARAM", "score": 0.9996695731501214}, {"start": 121, "end": 123, "word": "50", "entity_group": "PARAM", "score": 0.999543589446951}, {"start": 153, "end": 168, "word": "stationary bike", "entity_group": "VAR", "score": 0.9999785131277138}, {"start": 175, "end": 177, "word": "15", "entity_group": "PARAM", "score": 0.999727951945044}, {"start": 204, "end": 206, "word": "30", "entity_group": "PARAM", "score": 0.9995435006974275}, {"start": 247, "end": 256, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996095434712574}, {"start": 257, "end": 262, "word": "10000", "entity_group": "LIMIT", "score": 0.9993353139669794}, {"start": 289, "end": 294, "word": "15000", "entity_group": "LIMIT", "score": 0.99955633995117}, {"start": 326, "end": 332, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9978416013112725}, {"start": 337, "end": 346, "word": "treadmill", "entity_group": "VAR", "score": 0.9995668075384628}, {"start": 352, "end": 355, "word": "300", "entity_group": "PARAM", "score": 0.9991201379634518}, {"start": 364, "end": 370, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999261519311826}, {"start": 375, "end": 390, "word": "stationary bike", "entity_group": "VAR", "score": 0.9999314622347821}, {"start": 396, "end": 399, "word": "120", "entity_group": "PARAM", "score": 0.9996795579245165}, {"start": 448, "end": 456, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9958649050866341}, {"start": 457, "end": 463, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999807261302688}]}
{"doc_id": "-2105184323", "document": "A gift store has to send out their gifts. They can send the gifts using the postal service which can take 100 gifts per pickup or by hiring vans which can take 80 gifts each. The cost per pickup from the postal office is $50 and the cost per van is $40. In addition the number of vans cannot exceed the number of postal service pickups. If the store has a budget of $1000, how should they spend their money to maximize the number of gifts that can be sent?", "order_mapping": {"postal service": 0, "vans": 1, "postal office": 0, "van": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of gifts", "terms": {"postal service": "100", "vans": "80"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "1000", "terms": {"postal office": "50", "van": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "vans", "direction": "cannot exceed", "y_var": "postal service", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of postal service pickups\n- y: Number of vans hired\n\nObjective:\n- The gift store aims to maximize the number of gifts that can be sent. The postal service can take 100 gifts per pickup and hiring vans can take 80 gifts each. Therefore, the objective function is: Maximize 100x + 80y\n\nConstraints:\n- The store has a budget of $1000, so the cost constraint is: 50x + 40y <= 1000.\n- The number of vans cannot exceed the number of postal service pickups, leading to the constraint: y <= x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 80y\nConstraints:\n50x + 40y <= 1000\ny <= x", "canonical": {"objective": [-100.0, -80.0], "constraints": [[50.0, 40.0, 1000.0], [-1.0, 1.0, 0.0]]}, "solution": {"x": 20, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of pickups from the postal service: PostalServicePickups\n- Number of vans hired: VansHired\n\nConstraints:\n- The total cost should not exceed the budget of $1000 (cost per pickup from the postal office is $50, cost per van is $40):\n  50 * PostalServicePickups + 40 * VansHired <= 1000\n- The number of vans cannot exceed the number of postal service pickups:\n  VansHired <= PostalServicePickups\n\nObjective:\n- Maximize the number of gifts sent (100 gifts per postal service pickup, 80 gifts per van):\n  100 * PostalServicePickups + 80 * VansHired\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPostalServicePickups = intvar(0, 999999999)  # Number of pickups from the postal service\nVansHired = intvar(0, 999999999)  # Number of vans hired\n\n# Constraints\nm = Model()\n\n# The total cost should not exceed the budget of $1000:\nm += 50 * PostalServicePickups + 40 * VansHired <= 1000\n# The number of vans cannot exceed the number of postal service pickups:\nm += VansHired <= PostalServicePickups\n\n# Objective\n# Maximize the number of gifts sent (100 gifts per postal service pickup, 80 gifts per van):\nm.maximize(100 * PostalServicePickups + 80 * VansHired)\n", "entities": [{"start": 77, "end": 91, "word": "postal service", "entity_group": "VAR", "score": 0.999971160400386}, {"start": 107, "end": 110, "word": "100", "entity_group": "PARAM", "score": 0.999706269682654}, {"start": 111, "end": 116, "word": "gifts", "entity_group": "OBJ_NAME", "score": 0.9899422569370165}, {"start": 141, "end": 145, "word": "vans", "entity_group": "VAR", "score": 0.9969353495949271}, {"start": 161, "end": 163, "word": "80", "entity_group": "PARAM", "score": 0.9995642086588368}, {"start": 164, "end": 169, "word": "gifts", "entity_group": "OBJ_NAME", "score": 0.9952982974696403}, {"start": 206, "end": 219, "word": "postal office", "entity_group": "VAR", "score": 0.9999272233599119}, {"start": 225, "end": 227, "word": "50", "entity_group": "PARAM", "score": 0.9996553914796662}, {"start": 245, "end": 248, "word": "van", "entity_group": "VAR", "score": 0.996946194667416}, {"start": 254, "end": 256, "word": "40", "entity_group": "PARAM", "score": 0.9993051762910083}, {"start": 285, "end": 289, "word": "vans", "entity_group": "VAR", "score": 0.9981103727566533}, {"start": 290, "end": 304, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9878680586643859}, {"start": 319, "end": 333, "word": "postal service", "entity_group": "VAR", "score": 0.999994063564504}, {"start": 363, "end": 369, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9858831953067374}, {"start": 375, "end": 379, "word": "1000", "entity_group": "LIMIT", "score": 0.9990963339618413}, {"start": 419, "end": 427, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995531144139707}, {"start": 432, "end": 447, "word": "number of gifts", "entity_group": "OBJ_NAME", "score": 0.9895229558013111}]}
{"doc_id": "153962739", "document": "A young boy is trying to gain weight and put muscle. He can eat both tuna salad sandwiches and chicken salad sandwiches. He wants to get a minimum of 100 units of protein and 150 units of fat per day. A tuna salad sandwich costs $5 and contains 20 units of protein and 25 units of fat. A chicken salad sandwich costs $7 and contains 25 units of protein and 15 units of fat. How many of each should he eat to minimize his cost?", "order_mapping": {"tuna salad sandwiches": 0, "chicken salad sandwiches": 1, "tuna salad sandwich": 0, "chicken salad sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"tuna salad sandwich": "5", "chicken salad sandwich": "7"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "100", "terms": {"tuna salad sandwich": "20", "chicken salad sandwich": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "150", "terms": {"tuna salad sandwich": "25", "chicken salad sandwich": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tuna salad sandwiches\n- y: Number of chicken salad sandwiches\n\nObjective:\n- The young boy aims to minimize his cost. A tuna salad sandwich costs $5 and a chicken salad sandwich costs $7. Therefore, the objective function is: Minimize 5x + 7y\n\nConstraints:\n- He needs to get a minimum of 100 units of protein per day, which can be expressed as: 20x + 25y >= 100.\n- He also needs to get a minimum of 150 units of fat per day, which can be expressed as: 25x + 15y >= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 7y\nConstraints:\n20x + 25y >= 100\n25x + 15y >= 150", "canonical": {"objective": [5.0, 7.0], "constraints": [[-20.0, -25.0, -100.0], [-25.0, -15.0, -150.0]]}, "solution": {"x": 6, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of tuna salad sandwiches: TunaSandwiches\n- Number of chicken salad sandwiches: ChickenSandwiches\n\nConstraints:\n- To meet the minimum protein requirement (100 units):\n  20 * TunaSandwiches + 25 * ChickenSandwiches >= 100\n- To meet the minimum fat requirement (150 units):\n  25 * TunaSandwiches + 15 * ChickenSandwiches >= 150\n\nObjective:\n- Minimize the total cost of sandwiches:\n  5 * TunaSandwiches + 7 * ChickenSandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTunaSandwiches = intvar(0, 999999999)  # Number of tuna salad sandwiches\nChickenSandwiches = intvar(0, 999999999)  # Number of chicken salad sandwiches\n\n# Constraints\nm = Model()\n\n# Minimum of 100 units of protein per day:\nm += 20 * TunaSandwiches + 25 * ChickenSandwiches >= 100\n# Minimum of 150 units of fat per day:\nm += 25 * TunaSandwiches + 15 * ChickenSandwiches >= 150\n\n# Objective\n# Minimize cost ($5 per tuna salad sandwich, $7 per chicken salad sandwich):\nm.minimize(5 * TunaSandwiches + 7 * ChickenSandwiches)\n", "entities": [{"start": 70, "end": 91, "word": "tuna salad sandwiches", "entity_group": "VAR", "score": 0.9994475428918908}, {"start": 96, "end": 120, "word": "chicken salad sandwiches", "entity_group": "VAR", "score": 0.9985419180918903}, {"start": 141, "end": 148, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9977629107176883}, {"start": 152, "end": 155, "word": "100", "entity_group": "LIMIT", "score": 0.9997509389840898}, {"start": 177, "end": 180, "word": "150", "entity_group": "LIMIT", "score": 0.9997198509435559}, {"start": 206, "end": 225, "word": "tuna salad sandwich", "entity_group": "VAR", "score": 0.9982039118726749}, {"start": 226, "end": 231, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995893388498117}, {"start": 234, "end": 235, "word": "5", "entity_group": "PARAM", "score": 0.9994731338300626}, {"start": 249, "end": 251, "word": "20", "entity_group": "PARAM", "score": 0.9997330085325976}, {"start": 273, "end": 275, "word": "25", "entity_group": "PARAM", "score": 0.9997185957737715}, {"start": 293, "end": 315, "word": "chicken salad sandwich", "entity_group": "VAR", "score": 0.9995291595465916}, {"start": 316, "end": 321, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999626937320587}, {"start": 324, "end": 325, "word": "7", "entity_group": "PARAM", "score": 0.9995631476292637}, {"start": 339, "end": 341, "word": "25", "entity_group": "PARAM", "score": 0.9997290312543182}, {"start": 363, "end": 365, "word": "15", "entity_group": "PARAM", "score": 0.9996588966381201}, {"start": 415, "end": 423, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9995383342163454}, {"start": 428, "end": 432, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987564540768484}]}
{"doc_id": "-17265158", "document": "A tower which is a tourist attraction offers two types of tickets. There is a premium ticket which takes you to the very top, and a regular ticket that takes you to the viewing deck. The attraction sells 500 tickets, of which they reserve at least 100 to be premium. Since most people just want to go to the viewing deck, at least 3 times as many people prefer regular tickets than premium tickets. If the profit per premium ticket is $50 and the profit per regular ticker is $30, how many of each should be sold to maximize profit?", "order_mapping": {"premium ticket": 0, "regular ticket": 1, "premium": 0, "regular tickets": 1, "premium tickets": 0, "regular ticker": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium ticket": "50", "regular ticker": "30"}}, "const_declarations": [{"type": "sum", "direction": "sells", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "premium", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "3", "y_var": "premium tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium tickets sold\n- y: Number of regular tickets sold\n\nObjective:\n- The attraction aims to maximize its profit. The profit per premium ticket is $50 and the profit per regular ticket is $30. Therefore, the objective function is: Maximize 50x + 30y\n\nConstraints:\n- The attraction sells a total of 500 tickets, so the constraint is: x + y <= 500.\n- At least 100 tickets need to be premium, leading to the constraint: x >= 100.\n- At least 3 times as many people prefer regular tickets than premium tickets, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 30y\nConstraints:\nx + y <= 500\nx >= 100\ny >= 3x", "canonical": {"objective": [-50.0, -30.0], "constraints": [[1.0, 1.0, 500.0], [-1.0, 0.0, -100.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 125, "y": 375}, "pseudo_model": "\nDecision Variables:\n- Number of premium tickets sold: PremiumTickets\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of tickets sold should be 500:\n  PremiumTickets + RegularTickets == 500\n- At least 100 tickets should be premium:\n  PremiumTickets >= 100\n- At least 3 times as many people prefer regular tickets than premium tickets:\n  RegularTickets >= 3 * PremiumTickets\n\nObjective:\n- Maximize profit (50 dollars per premium ticket, 30 dollars per regular ticket):\n  50 * PremiumTickets + 30 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumTickets = intvar(0, 999999999)  # Number of premium tickets sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets sold should be 500:\nm += PremiumTickets + RegularTickets == 500\n# At least 100 tickets should be premium:\nm += PremiumTickets >= 100\n# At least 3 times as many people prefer regular tickets than premium tickets:\nm += RegularTickets >= 3 * PremiumTickets\n\n# Objective\n# Maximize profit (50 dollars per premium ticket, 30 dollars per regular ticket):\nm.maximize(50 * PremiumTickets + 30 * RegularTickets)\n", "entities": [{"start": 79, "end": 93, "word": "premium ticket", "entity_group": "VAR", "score": 0.9999727344928074}, {"start": 134, "end": 148, "word": "regular ticket", "entity_group": "VAR", "score": 0.9998787561488979}, {"start": 201, "end": 206, "word": "sells", "entity_group": "CONST_DIR", "score": 0.998871135072189}, {"start": 207, "end": 210, "word": "500", "entity_group": "LIMIT", "score": 0.9984170350452033}, {"start": 243, "end": 251, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979146295764164}, {"start": 252, "end": 255, "word": "100", "entity_group": "LIMIT", "score": 0.9996178546546644}, {"start": 262, "end": 269, "word": "premium", "entity_group": "VAR", "score": 0.999778616862071}, {"start": 328, "end": 336, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982246041053539}, {"start": 337, "end": 338, "word": "3", "entity_group": "PARAM", "score": 0.9983300736912991}, {"start": 367, "end": 382, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999365289594198}, {"start": 388, "end": 403, "word": "premium tickets", "entity_group": "VAR", "score": 0.9999711790220867}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999291938154091}, {"start": 424, "end": 438, "word": "premium ticket", "entity_group": "VAR", "score": 0.999934843054234}, {"start": 444, "end": 446, "word": "50", "entity_group": "PARAM", "score": 0.9995626215276519}, {"start": 455, "end": 461, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999327228331399}, {"start": 466, "end": 480, "word": "regular ticker", "entity_group": "VAR", "score": 0.9997357856163387}, {"start": 486, "end": 488, "word": "30", "entity_group": "PARAM", "score": 0.9996338769073029}, {"start": 526, "end": 534, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694880339434}, {"start": 535, "end": 541, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856876862}]}
{"doc_id": "-244560478", "document": "A small pharmacy weighs and packages their medication. Each bottle of pills takes 20 minutes of weighing and 10 minutes of packaging. Each bottle of cream takes 15 minutes of weighing and 15 minutes of packaging. The pharmacy has available 4000 minutes for weighing and 3000 minutes for packaging. If the profit per bottle of pills is $50 and the profit per bottle of cream is $60, how many of each should the pharmacy prepare to maximize profit?", "order_mapping": {"pills": 0, "cream": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cream": "60", "pills": "50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"pills": "20", "cream": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"pills": "10", "cream": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of pills\n- y: Number of bottles of cream\n\nObjective:\n- The pharmacy aims to maximize its profit. The profit per bottle of pills is $50 and the profit per bottle of cream is $60. Therefore, the objective function is: Maximize 50x + 60y\n\nConstraints:\n- The pharmacy has 4000 minutes available for weighing, and each bottle of pills takes 20 minutes and each bottle of cream takes 15 minutes. This leads to the constraint: 20x + 15y <= 4000.\n- The pharmacy has 3000 minutes available for packaging, and each bottle of pills takes 10 minutes and each bottle of cream takes 15 minutes. This results in the constraint: 10x + 15y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 60y\nConstraints:\n20x + 15y <= 4000\n10x + 15y <= 3000", "canonical": {"objective": [-50.0, -60.0], "constraints": [[20.0, 15.0, 4000.0], [10.0, 15.0, 3000.0]]}, "solution": {"x": 99, "y": 134}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of pills prepared: Pills\n- Number of bottles of cream prepared: Cream\n\nConstraints:\n- Total minutes for weighing (20 minutes per bottle of pills, 15 minutes per bottle of cream) should not exceed 4000:\n  20 * Pills + 15 * Cream <= 4000\n- Total minutes for packaging (10 minutes per bottle of pills, 15 minutes per bottle of cream) should not exceed 3000:\n  10 * Pills + 15 * Cream <= 3000\n\nObjective:\n- Maximize profit (50 dollars per bottle of pills, 60 dollars per bottle of cream):\n  50 * Pills + 60 * Cream\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPills = intvar(0, 999999999)  # Number of bottles of pills prepared\nCream = intvar(0, 999999999)  # Number of bottles of cream prepared\n\n# Constraints\nm = Model()\n\n# Total minutes for weighing should not exceed 4000:\nm += 20 * Pills + 15 * Cream <= 4000\n# Total minutes for packaging should not exceed 3000:\nm += 10 * Pills + 15 * Cream <= 3000\n\n# Objective\n# Maximize profit (50 dollars per bottle of pills, 60 dollars per bottle of cream):\nm.maximize(50 * Pills + 60 * Cream)\n", "entities": [{"start": 71, "end": 76, "word": "pills", "entity_group": "VAR", "score": 0.9988879772084607}, {"start": 83, "end": 85, "word": "20", "entity_group": "PARAM", "score": 0.9996830102781664}, {"start": 110, "end": 112, "word": "10", "entity_group": "PARAM", "score": 0.9997134652711511}, {"start": 151, "end": 156, "word": "cream", "entity_group": "VAR", "score": 0.9991798558416563}, {"start": 163, "end": 165, "word": "15", "entity_group": "PARAM", "score": 0.9996812143058618}, {"start": 190, "end": 192, "word": "15", "entity_group": "PARAM", "score": 0.999627911135899}, {"start": 233, "end": 242, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991833963099273}, {"start": 243, "end": 247, "word": "4000", "entity_group": "LIMIT", "score": 0.9994100928672862}, {"start": 273, "end": 277, "word": "3000", "entity_group": "LIMIT", "score": 0.9995879117479226}, {"start": 309, "end": 315, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999301851583207}, {"start": 330, "end": 335, "word": "pills", "entity_group": "VAR", "score": 0.9994035907084242}, {"start": 341, "end": 343, "word": "50", "entity_group": "PARAM", "score": 0.9990143786123663}, {"start": 352, "end": 358, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355270713817}, {"start": 373, "end": 378, "word": "cream", "entity_group": "VAR", "score": 0.9988417586848568}, {"start": 384, "end": 386, "word": "60", "entity_group": "PARAM", "score": 0.9993657060447324}, {"start": 437, "end": 445, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9975308993026766}, {"start": 446, "end": 452, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999275780796895}]}
{"doc_id": "526228455", "document": "A toy store sells hand made wooden trains and planes. Each train takes 30 minutes of woodworker time and each plane takes 40 minutes of woodworker time. The store has 4000 minutes of woodworker time available. Since planes are most popular, the store must make at least thrice the number of planes as trains. If the profit per train is $50 and the profit per plane is $60, how many of each should be made to maximize profit?", "order_mapping": {"trains": 0, "planes": 1, "train": 0, "plane": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"train": "50", "plane": "60"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"train": "30", "plane": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "planes", "direction": "at least", "param": "thrice", "y_var": "trains", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of trains\n- y: Number of planes\n\nObjective:\n- The store aims to maximize its profit. The profit per train is $50 and the profit per plane is $60. Therefore, the objective function is: Maximize 50x + 60y\n\nConstraints:\n- The store has 4000 minutes of woodworker time available. Each train takes 30 minutes of woodworker time and each plane takes 40 minutes of woodworker time, leading to the constraint: 30x + 40y <= 4000.\n- The store must make at least thrice the number of planes as trains, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 60y\nConstraints:\n30x + 40y <= 4000\ny >= 3x", "canonical": {"objective": [-50.0, -60.0], "constraints": [[30.0, 40.0, 4000.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 24, "y": 82}, "pseudo_model": "\nDecision Variables:\n- Number of trains made: Trains\n- Number of planes made: Planes\n\nConstraints:\n- Total woodworker time for trains and planes should not exceed 4000 minutes (30 minutes per train, 40 minutes per plane):\n  30 * Trains + 40 * Planes <= 4000\n- The number of planes made should be at least thrice the number of trains made:\n  Planes >= 3 * Trains\n\nObjective:\n- Maximize profit ($50 per train, $60 per plane):\n  50 * Trains + 60 * Planes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrains = intvar(0, 999999999)  # Number of trains made\nPlanes = intvar(0, 999999999)  # Number of planes made\n\n# Constraints\nm = Model()\n\n# The store has 4000 minutes of woodworker time available (30 minutes per train, 40 minutes per plane):\nm += 30 * Trains + 40 * Planes <= 4000\n# The store must make at least thrice the number of planes as trains:\nm += Planes >= 3 * Trains\n\n# Objective\n# Maximize profit ($50 per train, $60 per plane):\nm.maximize(50 * Trains + 60 * Planes)\n", "entities": [{"start": 35, "end": 41, "word": "trains", "entity_group": "VAR", "score": 0.9993462256554517}, {"start": 46, "end": 52, "word": "planes", "entity_group": "VAR", "score": 0.999783036605401}, {"start": 60, "end": 65, "word": "train", "entity_group": "VAR", "score": 0.9997277416844474}, {"start": 72, "end": 74, "word": "30", "entity_group": "PARAM", "score": 0.9996565105073362}, {"start": 111, "end": 116, "word": "plane", "entity_group": "VAR", "score": 0.9998074756534131}, {"start": 123, "end": 125, "word": "40", "entity_group": "PARAM", "score": 0.9989306237054623}, {"start": 169, "end": 173, "word": "4000", "entity_group": "LIMIT", "score": 0.9996687581881826}, {"start": 201, "end": 210, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991517379213464}, {"start": 219, "end": 225, "word": "planes", "entity_group": "VAR", "score": 0.9991554521018522}, {"start": 265, "end": 273, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973667883379501}, {"start": 274, "end": 280, "word": "thrice", "entity_group": "PARAM", "score": 0.9939330124944029}, {"start": 295, "end": 301, "word": "planes", "entity_group": "VAR", "score": 0.9996082068914051}, {"start": 305, "end": 311, "word": "trains", "entity_group": "VAR", "score": 0.9997798751216884}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998057665755645}, {"start": 332, "end": 337, "word": "train", "entity_group": "VAR", "score": 0.9990529174787536}, {"start": 343, "end": 345, "word": "50", "entity_group": "PARAM", "score": 0.9993478814005219}, {"start": 354, "end": 360, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465452}, {"start": 365, "end": 370, "word": "plane", "entity_group": "VAR", "score": 0.9990975872183067}, {"start": 376, "end": 378, "word": "60", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 416, "end": 424, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-734996004", "document": "A tech company makes laptops and tablets. Each laptop takes 20 minutes of manufacturing time and requires 3 units of silicon. Each tablet takes 15 minutes of manufacturing time and requires 2 units of silicon. The company must makes at least 30 laptops. They have 1200 minutes of manufacturing time available and 150 units of silicon available. If the profit per laptop is $200 and the profit per tablet is $160, how many of each should they make to maximize profit?", "order_mapping": {"laptops": 0, "tablets": 1, "laptop": 0, "tablet": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"laptop": "200", "tablet": "160"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "30", "var": "laptops", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"laptop": "20", "tablet": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "150", "terms": {"laptop": "3", "tablet": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of laptops to be made\n- y: Number of tablets to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per laptop is $200 and the profit per tablet is $160. Therefore, the objective function is: Maximize 200x + 160y\n\nConstraints:\n- The company must make at least 30 laptops, leading to the constraint: x >= 30.\n- The company has 1200 minutes of manufacturing time available. Each laptop takes 20 minutes and each tablet takes 15 minutes, so the time constraint is: 20x + 15y <= 1200.\n- The company has 150 units of silicon available. Each laptop requires 3 units and each tablet requires 2 units, so the silicon constraint is: 3x + 2y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 160y\nConstraints:\nx >= 30\n20x + 15y <= 1200\n3x + 2y <= 150", "canonical": {"objective": [-200.0, -160.0], "constraints": [[-1.0, 0.0, -30.0], [20.0, 15.0, 1200.0], [3.0, 2.0, 150.0]]}, "solution": {"x": 30, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of laptops made: Laptops\n- Number of tablets made: Tablets\n\nConstraints:\n- At least 30 laptops must be made:\n  Laptops >= 30\n- Total manufacturing time for laptops and tablets cannot exceed 1200 minutes:\n  20 * Laptops + 15 * Tablets <= 1200\n- Total silicon used for laptops and tablets cannot exceed 150 units:\n  3 * Laptops + 2 * Tablets <= 150\n\nObjective:\n- Maximize profit ($200 per laptop, $160 per tablet):\n  200 * Laptops + 160 * Tablets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLaptops = intvar(0, 999999999)  # Number of laptops made\nTablets = intvar(0, 999999999)  # Number of tablets made\n\n# Constraints\nm = Model()\n\n# The company must make at least 30 laptops:\nm += Laptops >= 30\n# The total manufacturing time for laptops and tablets cannot exceed 1200 minutes:\n# (20 minutes per laptop, 15 minutes per tablet)\nm += 20 * Laptops + 15 * Tablets <= 1200\n# The total silicon used for laptops and tablets cannot exceed 150 units:\n# (3 units of silicon per laptop, 2 units of silicon per tablet)\nm += 3 * Laptops + 2 * Tablets <= 150\n\n# Objective\n# Maximize profit ($200 per laptop, $160 per tablet):\nm.maximize(200 * Laptops + 160 * Tablets)\n", "entities": [{"start": 21, "end": 28, "word": "laptops", "entity_group": "VAR", "score": 0.9995055497600375}, {"start": 33, "end": 40, "word": "tablets", "entity_group": "VAR", "score": 0.9997721161727402}, {"start": 48, "end": 54, "word": "laptop", "entity_group": "VAR", "score": 0.9997353562220893}, {"start": 61, "end": 63, "word": "20", "entity_group": "PARAM", "score": 0.9996146634581613}, {"start": 107, "end": 108, "word": "3", "entity_group": "PARAM", "score": 0.9997153850451295}, {"start": 133, "end": 139, "word": "tablet", "entity_group": "VAR", "score": 0.999554708518662}, {"start": 146, "end": 148, "word": "15", "entity_group": "PARAM", "score": 0.9995416976148677}, {"start": 192, "end": 193, "word": "2", "entity_group": "PARAM", "score": 0.9996598147718305}, {"start": 236, "end": 244, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987016781679117}, {"start": 245, "end": 247, "word": "30", "entity_group": "LIMIT", "score": 0.9997285564252872}, {"start": 248, "end": 255, "word": "laptops", "entity_group": "VAR", "score": 0.9989180753289718}, {"start": 268, "end": 272, "word": "1200", "entity_group": "LIMIT", "score": 0.9997463364790382}, {"start": 303, "end": 312, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996926022772276}, {"start": 317, "end": 320, "word": "150", "entity_group": "LIMIT", "score": 0.9997050982523533}, {"start": 338, "end": 347, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982921111777581}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997020222909601}, {"start": 368, "end": 374, "word": "laptop", "entity_group": "VAR", "score": 0.9996520817539942}, {"start": 380, "end": 383, "word": "200", "entity_group": "PARAM", "score": 0.9993478719935425}, {"start": 392, "end": 398, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999829205834865}, {"start": 403, "end": 409, "word": "tablet", "entity_group": "VAR", "score": 0.9990888329793194}, {"start": 415, "end": 418, "word": "160", "entity_group": "PARAM", "score": 0.9994708202870373}, {"start": 458, "end": 466, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997620086430532}, {"start": 467, "end": 473, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368929248437}]}
{"doc_id": "149055541", "document": "A fruit investor has $300000 to invest in four industries: the apple industry, the orange industry, the pear industry, and the banana industry. The rate of return for each investment is as follows: apple industry, 5%; orange industry, 6%; pear industry, 3%; and banana industry, 8%. Here are some restrictions on the investments. The amount invested in the banana industry cannot exceed the amount invested in the apple industry. The amount invested in the orange industry cannot exceed the amount invested in the pear industry. Finally at most 30% of the total amount can be in the banana industry. How much should the fruit investor invest in each industry to maximize his return?", "order_mapping": {"apple industry": 0, "orange industry": 1, "pear industry": 2, "banana industry": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"apple industry": "5%", "orange industry": "6%", "pear industry": "3%", "banana industry": "8%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "banana industry", "direction": "cannot exceed", "y_var": "apple industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "orange industry", "direction": "cannot exceed", "y_var": "pear industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "banana industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the apple industry\n- y: Dollars invested in the orange industry\n- z: Dollars invested in the pear industry\n- w: Dollars invested in the banana industry\n\nObjective:\n- The fruit investor aims to maximize his return. The rate of return for each investment is as follows: apple industry, 5%; orange industry, 6%; pear industry, 3%; and banana industry, 8%. Therefore, the objective function is: Maximize 0.05x + 0.06y + 0.03z + 0.08w\n\nConstraints:\n- The total amount available for investment is $300,000, so the constraint is: x + y + z + w <= 300000.\n- The amount invested in the banana industry cannot exceed the amount invested in the apple industry, leading to the constraint: w <= x.\n- The amount invested in the orange industry cannot exceed the amount invested in the pear industry, resulting in the constraint: y <= z.\n- At most 30% of the total amount can be in the banana industry, leading to the constraint: w <= 0.30(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.06y + 0.03z + 0.08w\nConstraints:\nx + y + z + w <= 300000\nw <= x\ny <= z\nw <= 0.30(x + y + z + w)", "canonical": {"objective": [-0.05, -0.06, -0.03, -0.08], "constraints": [[1.0, 1.0, 1.0, 1.0, 300000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.3, -0.3, -0.3, 0.7, 0.0]]}, "solution": {"x": 210000, "y": 0, "z": 0, "w": 90000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the apple industry: Apple\n- Amount invested in the orange industry: Orange\n- Amount invested in the pear industry: Pear\n- Amount invested in the banana industry: Banana\n\nConstraints:\n- Total investment should not exceed $300000:\n  Apple + Orange + Pear + Banana <= 300000\n- The amount invested in the banana industry cannot exceed the amount invested in the apple industry:\n  Banana <= Apple\n- The amount invested in the orange industry cannot exceed the amount invested in the pear industry:\n  Orange <= Pear\n- At most 30% of the total amount can be in the banana industry:\n  Banana <= 0.30 * (Apple + Orange + Pear + Banana)\n\nObjective:\n- Maximize return (5% for apple, 6% for orange, 3% for pear, 8% for banana):\n  0.05 * Apple + 0.06 * Orange + 0.03 * Pear + 0.08 * Banana\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nApple = intvar(0, 999999999)  # Amount invested in the apple industry\nOrange = intvar(0, 999999999)  # Amount invested in the orange industry\nPear = intvar(0, 999999999)  # Amount invested in the pear industry\nBanana = intvar(0, 999999999)  # Amount invested in the banana industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $300000:\nm += Apple + Orange + Pear + Banana <= 300000\n# The amount invested in the banana industry cannot exceed the amount invested in the apple industry:\nm += Banana <= Apple\n# The amount invested in the orange industry cannot exceed the amount invested in the pear industry:\nm += Orange <= Pear\n# At most 30% of the total amount can be in the banana industry:\nm += Banana <= 0.30 * (Apple + Orange + Pear + Banana)\n\n# Objective\n# Maximize return (5% for apple, 6% for orange, 3% for pear, 8% for banana):\nm.maximize(0.05 * Apple + 0.06 * Orange + 0.03 * Pear + 0.08 * Banana)\n", "entities": [{"start": 17, "end": 20, "word": "has", "entity_group": "CONST_DIR", "score": 0.9966433700354301}, {"start": 23, "end": 29, "word": "300000", "entity_group": "LIMIT", "score": 0.9986501148912855}, {"start": 65, "end": 79, "word": "apple industry", "entity_group": "VAR", "score": 0.9999809940391844}, {"start": 86, "end": 101, "word": "orange industry", "entity_group": "VAR", "score": 0.9999822650808776}, {"start": 108, "end": 121, "word": "pear industry", "entity_group": "VAR", "score": 0.9999829136600075}, {"start": 132, "end": 147, "word": "banana industry", "entity_group": "VAR", "score": 0.9999369513258332}, {"start": 162, "end": 168, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9756494362873717}, {"start": 205, "end": 219, "word": "apple industry", "entity_group": "VAR", "score": 0.9999639453757317}, {"start": 222, "end": 225, "word": "5 %", "entity_group": "PARAM", "score": 0.9790477550852722}, {"start": 228, "end": 243, "word": "orange industry", "entity_group": "VAR", "score": 0.9999653522382923}, {"start": 246, "end": 249, "word": "6 %", "entity_group": "PARAM", "score": 0.9739253426909217}, {"start": 252, "end": 265, "word": "pear industry", "entity_group": "VAR", "score": 0.9999628492498611}, {"start": 268, "end": 271, "word": "3 %", "entity_group": "PARAM", "score": 0.9889957121971761}, {"start": 278, "end": 293, "word": "banana industry", "entity_group": "VAR", "score": 0.999964114628667}, {"start": 296, "end": 299, "word": "8 %", "entity_group": "PARAM", "score": 0.955413465832455}, {"start": 377, "end": 392, "word": "banana industry", "entity_group": "VAR", "score": 0.9999742530828091}, {"start": 393, "end": 407, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9888014292542181}, {"start": 435, "end": 449, "word": "apple industry", "entity_group": "VAR", "score": 0.9999710569488192}, {"start": 479, "end": 494, "word": "orange industry", "entity_group": "VAR", "score": 0.9999742527892355}, {"start": 495, "end": 509, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9888014292542183}, {"start": 537, "end": 550, "word": "pear industry", "entity_group": "VAR", "score": 0.999977837842929}, {"start": 561, "end": 568, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990786160000638}, {"start": 569, "end": 573, "word": "30 %", "entity_group": "LIMIT", "score": 0.9842654610975614}, {"start": 608, "end": 623, "word": "banana industry", "entity_group": "VAR", "score": 0.9999822122766557}, {"start": 688, "end": 696, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991785563908786}, {"start": 701, "end": 707, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9985021650168481}]}
{"doc_id": "187636535", "document": "A breakfast diner makes pancakes and waffles. Each pancakes require 30 grams of flour and 10 grams of butter. Each waffle requires 50 grams of flour and 15 grams of butter. The diner has available 5000 grams of flour and 2000 grams of butter. If the profit per pancake is $5 and the profit per waffle is $7, how many of each should be made to maximize profit?", "order_mapping": {"pancakes": 0, "waffles": 1, "waffle": 1, "pancake": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pancake": "5", "waffle": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"pancakes": "30", "waffle": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"pancakes": "10", "waffle": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pancakes to be made\n- y: Number of waffles to be made\n\nObjective:\n- The diner aims to maximize its profit. The profit per pancake is $5 and the profit per waffle is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The diner has 5000 grams of flour available, and each pancake requires 30 grams of flour and each waffle requires 50 grams of flour. This leads to the constraint: 30x + 50y <= 5000.\n- The diner has 2000 grams of butter available, and each pancake requires 10 grams of butter and each waffle requires 15 grams of butter. This leads to the constraint: 10x + 15y <= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n30x + 50y <= 5000\n10x + 15y <= 2000", "canonical": {"objective": [-5.0, -7.0], "constraints": [[30.0, 50.0, 5000.0], [10.0, 15.0, 2000.0]]}, "solution": {"x": 165, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of pancakes made: Pancakes\n- Number of waffles made: Waffles\n\nConstraints:\n- Flour usage for pancakes and waffles should not exceed 5000 grams:\n  30 * Pancakes + 50 * Waffles <= 5000\n- Butter usage for pancakes and waffles should not exceed 2000 grams:\n  10 * Pancakes + 15 * Waffles <= 2000\n\nObjective:\n- Maximize profit, with $5 profit per pancake and $7 profit per waffle:\n  5 * Pancakes + 7 * Waffles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPancakes = intvar(0, 999999999)  # Number of pancakes made\nWaffles = intvar(0, 999999999)  # Number of waffles made\n\n# Constraints\nm = Model()\n\n# Flour constraint: 30g per pancake and 50g per waffle, with 5000g available\nm += 30 * Pancakes + 50 * Waffles <= 5000\n# Butter constraint: 10g per pancake and 15g per waffle, with 2000g available\nm += 10 * Pancakes + 15 * Waffles <= 2000\n\n# Objective\n# Maximize profit: $5 per pancake and $7 per waffle\nm.maximize(5 * Pancakes + 7 * Waffles)\n", "entities": [{"start": 24, "end": 32, "word": "pancakes", "entity_group": "VAR", "score": 0.9993720238400842}, {"start": 37, "end": 44, "word": "waffles", "entity_group": "VAR", "score": 0.9997589969896341}, {"start": 52, "end": 60, "word": "pancakes", "entity_group": "VAR", "score": 0.9996326065536009}, {"start": 69, "end": 71, "word": "30", "entity_group": "PARAM", "score": 0.9997151928155968}, {"start": 91, "end": 93, "word": "10", "entity_group": "PARAM", "score": 0.9997295370495773}, {"start": 117, "end": 123, "word": "waffle", "entity_group": "VAR", "score": 0.99954652316275}, {"start": 133, "end": 135, "word": "50", "entity_group": "PARAM", "score": 0.9996958349458115}, {"start": 155, "end": 157, "word": "15", "entity_group": "PARAM", "score": 0.9996567064198388}, {"start": 190, "end": 199, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990234489267303}, {"start": 200, "end": 204, "word": "5000", "entity_group": "LIMIT", "score": 0.999406412311767}, {"start": 224, "end": 228, "word": "2000", "entity_group": "LIMIT", "score": 0.9996517399549685}, {"start": 254, "end": 260, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998807618766673}, {"start": 265, "end": 272, "word": "pancake", "entity_group": "VAR", "score": 0.9996403737695447}, {"start": 278, "end": 279, "word": "5", "entity_group": "PARAM", "score": 0.9993478745628144}, {"start": 288, "end": 294, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937467711}, {"start": 299, "end": 305, "word": "waffle", "entity_group": "VAR", "score": 0.9990975872183059}, {"start": 311, "end": 312, "word": "7", "entity_group": "PARAM", "score": 0.9994707344140322}, {"start": 350, "end": 358, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-855138281", "document": "A puzzle company makes small and large puzzles. Each small puzzle takes 10 minutes of cutting and 20 minutes of quality checking. Each large puzzle takes 15 minutes of cutting and 30 minutes of quality checking. The company has available 600 minutes for cutting and 1000 minutes for quality checking. If the profit per small puzzle is $8 and the profit per large puzzle is $12, how many of each should be made to maximize profit?", "order_mapping": {"small": 0, "large": 1, "small puzzle": 0, "large puzzle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"small puzzle": "8", "large puzzle": "12"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "600", "terms": {"small puzzle": "10", "large puzzle": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1000", "terms": {"small puzzle": "20", "large puzzle": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small puzzles made\n- y: Number of large puzzles made\n\nObjective:\n- The company aims to maximize its profit. The profit per small puzzle is $8 and the profit per large puzzle is $12. Therefore, the objective function is: Maximize 8x + 12y\n\nConstraints:\n- The company has 600 minutes available for cutting, and each small puzzle takes 10 minutes of cutting and each large puzzle takes 15 minutes of cutting. This leads to the constraint: 10x + 15y <= 600.\n- The company has 1000 minutes available for quality checking, and each small puzzle takes 20 minutes of quality checking and each large puzzle takes 30 minutes of quality checking. This results in the constraint: 20x + 30y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x + 12y\nConstraints:\n10x + 15y <= 600\n20x + 30y <= 1000", "canonical": {"objective": [-8.0, -12.0], "constraints": [[10.0, 15.0, 600.0], [20.0, 30.0, 1000.0]]}, "solution": {"x": 2, "y": 32}, "pseudo_model": "\nDecision Variables:\n- Number of small puzzles made: SmallPuzzle\n- Number of large puzzles made: LargePuzzle\n\nConstraints:\n- Total cutting time for small and large puzzles should not exceed 600 minutes:\n  10 * SmallPuzzle + 15 * LargePuzzle <= 600\n- Total quality checking time for small and large puzzles should not exceed 1000 minutes:\n  20 * SmallPuzzle + 30 * LargePuzzle <= 1000\n\nObjective:\n- Maximize profit (8 dollars per small puzzle, 12 dollars per large puzzle):\n  8 * SmallPuzzle + 12 * LargePuzzle\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallPuzzle = intvar(0, 999999999)  # Number of small puzzles made\nLargePuzzle = intvar(0, 999999999)  # Number of large puzzles made\n\n# Constraints\nm = Model()\n\n# Total cutting time should not exceed 600 minutes:\nm += 10 * SmallPuzzle + 15 * LargePuzzle <= 600\n# Total quality checking time should not exceed 1000 minutes:\nm += 20 * SmallPuzzle + 30 * LargePuzzle <= 1000\n\n# Objective\n# Maximize profit (8 dollars per small puzzle, 12 dollars per large puzzle):\nm.maximize(8 * SmallPuzzle + 12 * LargePuzzle)\n", "entities": [{"start": 23, "end": 28, "word": "small", "entity_group": "VAR", "score": 0.9996586710286534}, {"start": 33, "end": 38, "word": "large", "entity_group": "VAR", "score": 0.999629147675954}, {"start": 54, "end": 66, "word": "small puzzle", "entity_group": "VAR", "score": 0.9999846981255438}, {"start": 73, "end": 75, "word": "10", "entity_group": "PARAM", "score": 0.9997034538093615}, {"start": 99, "end": 101, "word": "20", "entity_group": "PARAM", "score": 0.9996935773781627}, {"start": 137, "end": 149, "word": "large puzzle", "entity_group": "VAR", "score": 0.9999791769930924}, {"start": 156, "end": 158, "word": "15", "entity_group": "PARAM", "score": 0.9997105016313281}, {"start": 182, "end": 184, "word": "30", "entity_group": "PARAM", "score": 0.9996935723927066}, {"start": 231, "end": 240, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990151569314433}, {"start": 241, "end": 244, "word": "600", "entity_group": "LIMIT", "score": 0.9994429711699394}, {"start": 269, "end": 273, "word": "1000", "entity_group": "LIMIT", "score": 0.999745785266861}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993119367105953}, {"start": 323, "end": 335, "word": "small puzzle", "entity_group": "VAR", "score": 0.9999346981970653}, {"start": 341, "end": 342, "word": "8", "entity_group": "PARAM", "score": 0.9995624457446733}, {"start": 351, "end": 357, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354484870763}, {"start": 362, "end": 374, "word": "large puzzle", "entity_group": "VAR", "score": 0.9999318285411015}, {"start": 380, "end": 382, "word": "12", "entity_group": "PARAM", "score": 0.9996795568543727}, {"start": 420, "end": 428, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 429, "end": 435, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "154902619", "document": "You have 30 acres of land on which you grow peaches and nectarines. Each acre of peaches requires $40 worth of bug-spray and 50 minutes of time to spray the bug-spray. Each acre of nectarines requires $50 worth of bug-spray and 70 minutes of time to spray the bug-spray. You have available $1350 to spend on bug-spray and 2000 minutes available to spray the bug-spray. If the profit per acre of peaches is $300 and he profit per acre of nectarines is $350, how many acres of each should be grown to maximize profit?", "order_mapping": {"peaches": 0, "nectarines": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peaches": "300", "nectarines": "350"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1350", "terms": {"peaches": "40", "nectarines": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"peaches": "50", "nectarines": "70"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "have", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of peaches\n- y: Acres of nectarines\n\nObjective:\n- The goal is to maximize the profit. The profit per acre of peaches is $300 and the profit per acre of nectarines is $350. Therefore, the objective function is: Maximize 300x + 350y\n\nConstraints:\n- The budget for bug-spray is $1350, and each acre of peaches requires $40 worth of bug-spray and each acre of nectarines requires $50 worth of bug-spray. This leads to the constraint: 40x + 50y <= 1350.\n- The available time for spraying bug-spray is 2000 minutes, and each acre of peaches requires 50 minutes of time and each acre of nectarines requires 70 minutes of time. This results in the constraint: 50x + 70y <= 2000.\n- The total land available is 30 acres, leading to the constraint: x + y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 350y\nConstraints:\n40x + 50y <= 1350\n50x + 70y <= 2000\nx + y <= 30", "canonical": {"objective": [-300.0, -350.0], "constraints": [[40.0, 50.0, 1350.0], [50.0, 70.0, 2000.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 15, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of acres of peaches grown: Peaches\n- Number of acres of nectarines grown: Nectarines\n\nConstraints:\n- Total number of acres used should not exceed 30:\n  Peaches + Nectarines <= 30\n- Total cost of bug-spray should not exceed $1350:\n  40 * Peaches + 50 * Nectarines <= 1350\n- Total time for spraying bug-spray should not exceed 2000 minutes:\n  50 * Peaches + 70 * Nectarines <= 2000\n\nObjective:\n- Maximize profit (300 dollars per acre of peaches, 350 dollars per acre of nectarines):\n  300 * Peaches + 350 * Nectarines\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeaches = intvar(0, 999999999)  # Number of acres of peaches\nNectarines = intvar(0, 999999999)  # Number of acres of nectarines\n\n# Constraints\nm = Model()\n\n# Total number of acres used should not exceed 30:\nm += Peaches + Nectarines <= 30\n# Total cost of bug-spray should not exceed $1350:\nm += 40 * Peaches + 50 * Nectarines <= 1350\n# Total time for spraying bug-spray should not exceed 2000 minutes:\nm += 50 * Peaches + 70 * Nectarines <= 2000\n\n# Objective\n# Maximize profit (300 dollars per acre of peaches, 350 dollars per acre of nectarines):\nm.maximize(300 * Peaches + 350 * Nectarines)\n", "entities": [{"start": 4, "end": 8, "word": "have", "entity_group": "CONST_DIR", "score": 0.993751596278336}, {"start": 9, "end": 11, "word": "30", "entity_group": "LIMIT", "score": 0.9987153921656077}, {"start": 44, "end": 51, "word": "peaches", "entity_group": "VAR", "score": 0.9987898171705032}, {"start": 56, "end": 66, "word": "nectarines", "entity_group": "VAR", "score": 0.999665494540262}, {"start": 82, "end": 89, "word": "peaches", "entity_group": "VAR", "score": 0.9997430636580559}, {"start": 101, "end": 103, "word": "40", "entity_group": "PARAM", "score": 0.999558821521592}, {"start": 129, "end": 131, "word": "50", "entity_group": "PARAM", "score": 0.9996459888679362}, {"start": 188, "end": 198, "word": "nectarines", "entity_group": "VAR", "score": 0.9995494001912871}, {"start": 210, "end": 212, "word": "50", "entity_group": "PARAM", "score": 0.9995588114713841}, {"start": 238, "end": 240, "word": "70", "entity_group": "PARAM", "score": 0.9996459888679357}, {"start": 293, "end": 302, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991040744501007}, {"start": 305, "end": 309, "word": "1350", "entity_group": "LIMIT", "score": 0.9993987584252361}, {"start": 338, "end": 342, "word": "2000", "entity_group": "LIMIT", "score": 0.9996946030592184}, {"start": 351, "end": 360, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995761990836818}, {"start": 395, "end": 401, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998000086058922}, {"start": 414, "end": 421, "word": "peaches", "entity_group": "VAR", "score": 0.9994978698525643}, {"start": 427, "end": 430, "word": "300", "entity_group": "PARAM", "score": 0.9992432695341442}, {"start": 438, "end": 444, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999251447997864}, {"start": 457, "end": 467, "word": "nectarines", "entity_group": "VAR", "score": 0.9993726078427388}, {"start": 473, "end": 476, "word": "350", "entity_group": "PARAM", "score": 0.9995941661895759}, {"start": 521, "end": 529, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 530, "end": 536, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "702332968", "document": "A food truck sells fries and onion rings. To stay in business, they must sell at least 20 orders of fries but they can make at most 50 orders of fries. Also, they must sell at least 10 orders of onion rings but they can make at most 40 orders of onion rings. Due to limited fryer time, the food truck can only sell 50 orders total. If the profit per order of fries is $4 and the profit per order of onion rings is $5, how many orders of each should they sell to maximize profit?", "order_mapping": {"fries": 0, "onion rings": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"onion rings": "5", "fries": "4"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "20", "var": "fries", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "fries", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "onion rings", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40", "var": "onion rings", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "50", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of orders of fries\n- y: Number of orders of onion rings\n\nObjective:\n- The food truck aims to maximize its profit. The profit per order of fries is $4 and the profit per order of onion rings is $5. Therefore, the objective function is: Maximize 4x + 5y\n\nConstraints:\n- The food truck must sell at least 20 orders of fries, leading to the constraint: x >= 20.\n- The food truck can make at most 50 orders of fries, leading to the constraint: x <= 50.\n- The food truck must sell at least 10 orders of onion rings, leading to the constraint: y >= 10.\n- The food truck can make at most 40 orders of onion rings, leading to the constraint: y <= 40.\n- The total number of orders should not exceed 50, leading to the constraint: x + y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 5y\nConstraints:\nx >= 20\nx <= 50\ny >= 10\ny <= 40\nx + y <= 50", "canonical": {"objective": [-4.0, -5.0], "constraints": [[-1.0, 0.0, -20.0], [1.0, 0.0, 50.0], [0.0, -1.0, -10.0], [0.0, 1.0, 40.0], [1.0, 1.0, 50.0]]}, "solution": {"x": 20, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of orders of fries sold: Fries\n- Number of orders of onion rings sold: OnionRings\n\nConstraints:\n- At least 20 orders of fries and at most 50 orders of fries:\n  20 <= Fries <= 50\n- At least 10 orders of onion rings and at most 40 orders of onion rings:\n  10 <= OnionRings <= 40\n- Total orders sold (fries + onion rings) cannot exceed 50:\n  Fries + OnionRings <= 50\n\nObjective:\n- Maximize profit ($4 per order of fries, $5 per order of onion rings):\n  4 * Fries + 5 * OnionRings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFries = intvar(0, 999999999)  # Number of orders of fries sold\nOnionRings = intvar(0, 999999999)  # Number of orders of onion rings sold\n\n# Constraints\nm = Model()\n\n# Must sell at least 20 orders of fries but can make at most 50 orders of fries:\nm += Fries >= 20\nm += Fries <= 50\n# Must sell at least 10 orders of onion rings but can make at most 40 orders of onion rings:\nm += OnionRings >= 10\nm += OnionRings <= 40\n# Due to limited fryer time, can only sell 50 orders total:\nm += Fries + OnionRings <= 50\n\n# Objective\n# Maximize profit ($4 per order of fries, $5 per order of onion rings):\nm.maximize(4 * Fries + 5 * OnionRings)\n", "entities": [{"start": 19, "end": 24, "word": "fries", "entity_group": "VAR", "score": 0.9997062712806738}, {"start": 29, "end": 40, "word": "onion rings", "entity_group": "VAR", "score": 0.99998600906315}, {"start": 80, "end": 88, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992498865641966}, {"start": 89, "end": 91, "word": "20", "entity_group": "LIMIT", "score": 0.9997327985390503}, {"start": 102, "end": 107, "word": "fries", "entity_group": "VAR", "score": 0.9996216385472891}, {"start": 126, "end": 133, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991433430270618}, {"start": 134, "end": 136, "word": "50", "entity_group": "LIMIT", "score": 0.9997196295128324}, {"start": 147, "end": 152, "word": "fries", "entity_group": "VAR", "score": 0.9997107353978011}, {"start": 177, "end": 185, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988828683722463}, {"start": 186, "end": 188, "word": "10", "entity_group": "LIMIT", "score": 0.9997055967689199}, {"start": 199, "end": 210, "word": "onion rings", "entity_group": "VAR", "score": 0.9999794209815743}, {"start": 229, "end": 236, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986873730629587}, {"start": 237, "end": 239, "word": "40", "entity_group": "LIMIT", "score": 0.999692252406809}, {"start": 250, "end": 261, "word": "onion rings", "entity_group": "VAR", "score": 0.9999801040433395}, {"start": 311, "end": 315, "word": "only", "entity_group": "CONST_DIR", "score": 0.9860892751343582}, {"start": 321, "end": 323, "word": "50", "entity_group": "LIMIT", "score": 0.9992661419865969}, {"start": 346, "end": 352, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998531942826083}, {"start": 366, "end": 371, "word": "fries", "entity_group": "VAR", "score": 0.9994952128864864}, {"start": 377, "end": 378, "word": "4", "entity_group": "PARAM", "score": 0.9992432876867587}, {"start": 387, "end": 393, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998750958237186}, {"start": 407, "end": 418, "word": "onion rings", "entity_group": "VAR", "score": 0.9999434018932797}, {"start": 424, "end": 425, "word": "5", "entity_group": "PARAM", "score": 0.9997391627185687}, {"start": 472, "end": 480, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997565585328289}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368889601746}]}
{"doc_id": "1128524765", "document": "A taco stand sells fish and chicken tacos. In a day, they must sell at least 20 fish tacos and at least 40 chicken tacos. However, they can make at most 50 fish tacos and at most 60 chicken tacos. In addition, they only have enough taco shells to make 80 tacos total of either type. If the profit per fish taco is $6 and the profit per chicken taco is $4, how many of each should they make to maximize profit?", "order_mapping": {"fish": 0, "chicken tacos": 1, "fish tacos": 0, "fish taco": 0, "chicken taco": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fish taco": "6", "chicken taco": "4"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "20", "var": "fish tacos", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "chicken tacos", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "fish tacos", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "60", "var": "chicken tacos", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "80", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of fish tacos\n- y: Number of chicken tacos\n\nObjective:\n- The taco stand aims to maximize its profit. The profit per fish taco is $6 and the profit per chicken taco is $4. Therefore, the objective function is: Maximize 6x + 4y\n\nConstraints:\n- At least 20 fish tacos must be sold, leading to the constraint: x >= 20.\n- At least 40 chicken tacos must be sold, leading to the constraint: y >= 40.\n- At most 50 fish tacos can be made, leading to the constraint: x <= 50.\n- At most 60 chicken tacos can be made, leading to the constraint: y <= 60.\n- The total number of tacos (fish and chicken combined) cannot exceed 80, leading to the constraint: x + y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 6x + 4y\nConstraints:\nx >= 20\ny >= 40\nx <= 50\ny <= 60\nx + y <= 80", "canonical": {"objective": [-6.0, -4.0], "constraints": [[-1.0, 0.0, -20.0], [0.0, -1.0, -40.0], [1.0, 0.0, 50.0], [0.0, 1.0, 60.0], [1.0, 1.0, 80.0]]}, "solution": {"x": 40, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of fish tacos made per day: FishTacos\n- Number of chicken tacos made per day: ChickenTacos\n\nConstraints:\n- At least 20 fish tacos must be sold:\n  FishTacos >= 20\n- At least 40 chicken tacos must be sold:\n  ChickenTacos >= 40\n- At most 50 fish tacos can be made:\n  FishTacos <= 50\n- At most 60 chicken tacos can be made:\n  ChickenTacos <= 60\n- Only have enough taco shells to make 80 tacos total:\n  FishTacos + ChickenTacos <= 80\n\nObjective:\n- Maximize profit (6 dollars per fish taco, 4 dollars per chicken taco):\n  6 * FishTacos + 4 * ChickenTacos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishTacos = intvar(0, 999999999)  # Number of fish tacos made per day\nChickenTacos = intvar(0, 999999999)  # Number of chicken tacos made per day\n\n# Constraints\nm = Model()\n\n# At least 20 fish tacos must be sold:\nm += FishTacos >= 20\n# At least 40 chicken tacos must be sold:\nm += ChickenTacos >= 40\n# At most 50 fish tacos can be made:\nm += FishTacos <= 50\n# At most 60 chicken tacos can be made:\nm += ChickenTacos <= 60\n# Only have enough taco shells to make 80 tacos total:\nm += FishTacos + ChickenTacos <= 80\n\n# Objective\n# Maximize profit (6 dollars per fish taco, 4 dollars per chicken taco):\nm.maximize(6 * FishTacos + 4 * ChickenTacos)\n", "entities": [{"start": 19, "end": 23, "word": "fish", "entity_group": "VAR", "score": 0.9996689093175457}, {"start": 28, "end": 41, "word": "chicken tacos", "entity_group": "VAR", "score": 0.9999767714763416}, {"start": 70, "end": 78, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988463844958965}, {"start": 79, "end": 81, "word": "20", "entity_group": "LIMIT", "score": 0.9995486962005304}, {"start": 82, "end": 92, "word": "fish tacos", "entity_group": "VAR", "score": 0.9999556562392268}, {"start": 97, "end": 105, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998817668383907}, {"start": 106, "end": 108, "word": "40", "entity_group": "LIMIT", "score": 0.9992202412504171}, {"start": 109, "end": 122, "word": "chicken tacos", "entity_group": "VAR", "score": 0.9999510678666633}, {"start": 149, "end": 156, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998427215071173}, {"start": 157, "end": 159, "word": "50", "entity_group": "LIMIT", "score": 0.9995382756971899}, {"start": 160, "end": 170, "word": "fish tacos", "entity_group": "VAR", "score": 0.9999573295749776}, {"start": 175, "end": 182, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988103757143482}, {"start": 183, "end": 185, "word": "60", "entity_group": "LIMIT", "score": 0.9994235462105158}, {"start": 186, "end": 199, "word": "chicken tacos", "entity_group": "VAR", "score": 0.9999422380603644}, {"start": 221, "end": 225, "word": "only", "entity_group": "CONST_DIR", "score": 0.9924377408346687}, {"start": 258, "end": 260, "word": "80", "entity_group": "LIMIT", "score": 0.9996752637212707}, {"start": 297, "end": 303, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999172463088647}, {"start": 308, "end": 317, "word": "fish taco", "entity_group": "VAR", "score": 0.9999635144715038}, {"start": 323, "end": 324, "word": "6", "entity_group": "PARAM", "score": 0.9996181221773737}, {"start": 333, "end": 339, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350839607682}, {"start": 344, "end": 356, "word": "chicken taco", "entity_group": "VAR", "score": 0.9999608127754586}, {"start": 362, "end": 363, "word": "4", "entity_group": "PARAM", "score": 0.9996735624547428}, {"start": 403, "end": 411, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 412, "end": 418, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "-1469208822", "document": "A sandwich store makes large and small sandwiches. Each large sandwich takes 4 minutes of preparation and 5 minutes of toasting. Each small sandwich takes 3 minutes of preparation and 4 minutes of toasting. The store has available 1000 minutes for preparation and 1200 minutes for toasting. If the profit per large sandwich is $5 and the profit per small sandwich is $3.50, how many of each should they make to maximize profit?", "order_mapping": {"large": 0, "small": 1, "large sandwich": 0, "small sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large sandwich": "5", "small sandwich": "3.50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"large sandwich": "4", "small sandwich": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"large sandwich": "5", "small sandwich": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large sandwiches\n- y: Number of small sandwiches\n\nObjective:\n- The store aims to maximize its profit. The profit per large sandwich is $5 and the profit per small sandwich is $3.50. Therefore, the objective function is: Maximize 5x + 3.50y\n\nConstraints:\n- The store has 1000 minutes available for sandwich preparation, and each large sandwich takes 4 minutes and each small sandwich takes 3 minutes. This leads to the constraint: 4x + 3y <= 1000.\n- The store has 1200 minutes available for sandwich toasting, and each large sandwich takes 5 minutes and each small sandwich takes 4 minutes. This results in the constraint: 5x + 4y <= 1200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3.50y\nConstraints:\n4x + 3y <= 1000\n5x + 4y <= 1200", "canonical": {"objective": [-5.0, -3.5], "constraints": [[4.0, 3.0, 1000.0], [5.0, 4.0, 1200.0]]}, "solution": {"x": 240, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of large sandwiches made: LargeSandwiches\n- Number of small sandwiches made: SmallSandwiches\n\nConstraints:\n- Total preparation time should not exceed 1000 minutes:\n  4 * LargeSandwiches + 3 * SmallSandwiches <= 1000\n- Total toasting time should not exceed 1200 minutes:\n  5 * LargeSandwiches + 4 * SmallSandwiches <= 1200\n\nObjective:\n- Maximize profit ($5 per large sandwich and $3.50 per small sandwich):\n  5 * LargeSandwiches + 3.5 * SmallSandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeSandwiches = intvar(0, 999999999)  # Number of large sandwiches made\nSmallSandwiches = intvar(0, 999999999)  # Number of small sandwiches made\n\n# Constraints\nm = Model()\n\n# Total preparation time for all sandwiches should not exceed 1000 minutes:\n# (4 minutes for each large sandwich and 3 minutes for each small sandwich)\nm += 4 * LargeSandwiches + 3 * SmallSandwiches <= 1000\n\n# Total toasting time for all sandwiches should not exceed 1200 minutes:\n# (5 minutes for each large sandwich and 4 minutes for each small sandwich)\nm += 5 * LargeSandwiches + 4 * SmallSandwiches <= 1200\n\n# Objective\n# Maximize profit ($5 per large sandwich and $3.50 per small sandwich):\nm.maximize(5 * LargeSandwiches + 3.5 * SmallSandwiches)\n", "entities": [{"start": 23, "end": 28, "word": "large", "entity_group": "VAR", "score": 0.9981157271860158}, {"start": 33, "end": 38, "word": "small", "entity_group": "VAR", "score": 0.9996294498989382}, {"start": 57, "end": 71, "word": "large sandwich", "entity_group": "VAR", "score": 0.9999846979441842}, {"start": 78, "end": 79, "word": "4", "entity_group": "PARAM", "score": 0.9997132596355233}, {"start": 107, "end": 108, "word": "5", "entity_group": "PARAM", "score": 0.999696970001029}, {"start": 136, "end": 150, "word": "small sandwich", "entity_group": "VAR", "score": 0.9999784031552198}, {"start": 157, "end": 158, "word": "3", "entity_group": "PARAM", "score": 0.9997274221944146}, {"start": 186, "end": 187, "word": "4", "entity_group": "PARAM", "score": 0.9996129030321651}, {"start": 224, "end": 233, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991833931821388}, {"start": 234, "end": 238, "word": "1000", "entity_group": "LIMIT", "score": 0.9994169144944358}, {"start": 267, "end": 271, "word": "1200", "entity_group": "LIMIT", "score": 0.9995879117479193}, {"start": 302, "end": 308, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999351539767679}, {"start": 313, "end": 327, "word": "large sandwich", "entity_group": "VAR", "score": 0.9999348693344853}, {"start": 333, "end": 334, "word": "5", "entity_group": "PARAM", "score": 0.999562445744673}, {"start": 343, "end": 349, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998623479543788}, {"start": 354, "end": 368, "word": "small sandwich", "entity_group": "VAR", "score": 0.9999314625883621}, {"start": 374, "end": 378, "word": "3.50", "entity_group": "PARAM", "score": 0.9996795579245151}, {"start": 418, "end": 426, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 427, "end": 433, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "-606525597", "document": "A tropical farmer has 200 acres of land to grow mangoes and pineapples. Each acre of mangoes costs $80 for nutrients and takes 2 hours for picking. Each acre of pineapples costs $100 for nutrients and takes 1.5 hours of picking. The farmer has available $18000 to spend on nutrients and 350 hours available for picking. If the profit per acre of mangos is $400 and the profit per acre of pineapples is $450, how many acres of each should be grown to maximize profit?", "order_mapping": {"mangoes": 0, "pineapples": 1, "mangos": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pineapples": "450", "mangos": "400"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "18000", "terms": {"mangoes": "80", "pineapples": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "350", "terms": {"mangoes": "2", "pineapples": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land for growing mangoes\n- y: Acres of land for growing pineapples\n\nObjective:\n- The farmer aims to maximize profit. The profit per acre of mangos is $400 and the profit per acre of pineapples is $450. Therefore, the objective function is: Maximize 400x + 450y\n\nConstraints:\n- The farmer has 200 acres of land available, so the constraint is: x + y <= 200.\n- The total amount available for spending on nutrients is $18000, leading to the constraint: 80x + 100y <= 18000.\n- The total available picking time is 350 hours, resulting in the constraint: 2x + 1.5y <= 350.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 450y\nConstraints:\nx + y <= 200\n80x + 100y <= 18000\n2x + 1.5y <= 350", "canonical": {"objective": [-400.0, -450.0], "constraints": [[1.0, 1.0, 200.0], [80.0, 100.0, 18000.0], [2.0, 1.5, 350.0]]}, "solution": {"x": 100, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of acres of mangoes grown: Mangoes\n- Number of acres of pineapples grown: Pineapples\n\nConstraints:\n- Total acres used should not exceed 200:\n  Mangoes + Pineapples <= 200\n- Nutrient cost for mangoes and pineapples should not exceed $18000:\n  80 * Mangoes + 100 * Pineapples <= 18000\n- Picking time for mangoes and pineapples should not exceed 350 hours:\n  2 * Mangoes + 1.5 * Pineapples <= 350\n\nObjective:\n- Maximize profit (400 dollars per acre of mangoes, 450 dollars per acre of pineapples):\n  400 * Mangoes + 450 * Pineapples\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMangoes = intvar(0, 999999999)  # Number of acres of mangoes\nPineapples = intvar(0, 999999999)  # Number of acres of pineapples\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 200:\nm += Mangoes + Pineapples <= 200\n# Nutrient cost for mangoes and pineapples should not exceed $18000:\nm += 80 * Mangoes + 100 * Pineapples <= 18000\n# Picking time for mangoes and pineapples should not exceed 350 hours:\nm += 2 * Mangoes + 1.5 * Pineapples <= 350\n\n# Objective\n# Maximize profit (400 dollars per acre of mangoes, 450 dollars per acre of pineapples):\nm.maximize(400 * Mangoes + 450 * Pineapples)\n", "entities": [{"start": 18, "end": 21, "word": "has", "entity_group": "CONST_DIR", "score": 0.9928322175265016}, {"start": 22, "end": 25, "word": "200", "entity_group": "LIMIT", "score": 0.9988746972327188}, {"start": 48, "end": 55, "word": "mangoes", "entity_group": "VAR", "score": 0.9981430267547239}, {"start": 60, "end": 70, "word": "pineapples", "entity_group": "VAR", "score": 0.99925231233724}, {"start": 86, "end": 93, "word": "mangoes", "entity_group": "VAR", "score": 0.9994545707957861}, {"start": 102, "end": 104, "word": "80", "entity_group": "PARAM", "score": 0.999620946918812}, {"start": 129, "end": 130, "word": "2", "entity_group": "PARAM", "score": 0.999730668947364}, {"start": 164, "end": 174, "word": "pineapples", "entity_group": "VAR", "score": 0.9991580975774352}, {"start": 183, "end": 186, "word": "100", "entity_group": "PARAM", "score": 0.9996526112629189}, {"start": 211, "end": 214, "word": "1.5", "entity_group": "PARAM", "score": 0.9996667454225315}, {"start": 249, "end": 258, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991709879451207}, {"start": 261, "end": 266, "word": "18000", "entity_group": "LIMIT", "score": 0.9995008424219516}, {"start": 293, "end": 296, "word": "350", "entity_group": "LIMIT", "score": 0.9997417130862045}, {"start": 303, "end": 312, "word": "available", "entity_group": "CONST_DIR", "score": 0.999140818179755}, {"start": 334, "end": 340, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999326087992704}, {"start": 353, "end": 359, "word": "mangos", "entity_group": "VAR", "score": 0.9994035598672572}, {"start": 365, "end": 368, "word": "400", "entity_group": "PARAM", "score": 0.9990145164022936}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999266523560235}, {"start": 396, "end": 406, "word": "pineapples", "entity_group": "VAR", "score": 0.9993738723588844}, {"start": 412, "end": 415, "word": "450", "entity_group": "PARAM", "score": 0.9995941661892174}, {"start": 460, "end": 468, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 469, "end": 475, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-620437882", "document": "A jeweler has 1000 units of gold to make rings and necklaces. Each ring needs 2 units of gold and each necklace needs 3 units of gold. Due to popularity, at least three times as many rings are needed than necklaces and there needs to be at least 50 necklaces made. If the profit per ring is $50 and the profit per necklace is $75, how many of each should be made to maximize profit?", "order_mapping": {"rings": 0, "necklaces": 1, "ring": 0, "necklace": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"ring": "50", "necklace": "75"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"ring": "2", "necklace": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "rings", "direction": "at least", "param": "three", "y_var": "necklaces", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "necklaces", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of rings\n- y: Number of necklaces\n\nObjective:\n- The jeweler aims to maximize the profit. The profit per ring is $50 and the profit per necklace is $75. Therefore, the objective function is: Maximize 50x + 75y\n\nConstraints:\n- The jeweler has 1000 units of gold available, so the constraint is: 2x + 3y <= 1000.\n- The demand for rings needs to be at least three times the demand for necklaces, leading to the constraint: x >= 3y.\n- At least 50 necklaces need to be made, resulting in the constraint: y >= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 75y\nConstraints:\n2x + 3y <= 1000\nx >= 3y\ny >= 50", "canonical": {"objective": [-50.0, -75.0], "constraints": [[2.0, 3.0, 1000.0], [-1.0, 3.0, 0.0], [0.0, -1.0, -50.0]]}, "solution": {"x": 425, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of rings made: Rings\n- Number of necklaces made: Necklaces\n\nConstraints:\n- Total gold used should not exceed 1000 units (2 units per ring, 3 units per necklace):\n  2 * Rings + 3 * Necklaces <= 1000\n- At least three times as many rings as necklaces:\n  Rings >= 3 * Necklaces\n- At least 50 necklaces should be made:\n  Necklaces >= 50\n\nObjective:\n- Maximize profit (50 dollars per ring, 75 dollars per necklace):\n  50 * Rings + 75 * Necklaces\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRings = intvar(0, 999999999)  # Number of rings made\nNecklaces = intvar(0, 999999999)  # Number of necklaces made\n\n# Constraints\nm = Model()\n\n# Total gold used should not exceed 1000 units (2 units per ring, 3 units per necklace):\nm += 2 * Rings + 3 * Necklaces <= 1000\n# At least three times as many rings as necklaces:\nm += Rings >= 3 * Necklaces\n# At least 50 necklaces should be made:\nm += Necklaces >= 50\n\n# Objective\n# Maximize profit (50 dollars per ring, 75 dollars per necklace):\nm.maximize(50 * Rings + 75 * Necklaces)\n", "entities": [{"start": 10, "end": 13, "word": "has", "entity_group": "CONST_DIR", "score": 0.994588023838946}, {"start": 14, "end": 18, "word": "1000", "entity_group": "LIMIT", "score": 0.9987728761914725}, {"start": 41, "end": 46, "word": "rings", "entity_group": "VAR", "score": 0.9993210537359001}, {"start": 51, "end": 60, "word": "necklaces", "entity_group": "VAR", "score": 0.9997280269834666}, {"start": 68, "end": 72, "word": "ring", "entity_group": "VAR", "score": 0.9996434909943933}, {"start": 79, "end": 80, "word": "2", "entity_group": "PARAM", "score": 0.9996733763319982}, {"start": 104, "end": 112, "word": "necklace", "entity_group": "VAR", "score": 0.9997224246720604}, {"start": 119, "end": 120, "word": "3", "entity_group": "PARAM", "score": 0.9987646009875328}, {"start": 157, "end": 165, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976845521400932}, {"start": 166, "end": 177, "word": "three times", "entity_group": "PARAM", "score": 0.5459270784244529}, {"start": 186, "end": 191, "word": "rings", "entity_group": "VAR", "score": 0.9997535273835497}, {"start": 208, "end": 217, "word": "necklaces", "entity_group": "VAR", "score": 0.9995406602536937}, {"start": 240, "end": 248, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983349925033802}, {"start": 249, "end": 251, "word": "50", "entity_group": "LIMIT", "score": 0.9996555797496693}, {"start": 252, "end": 261, "word": "necklaces", "entity_group": "VAR", "score": 0.9994780018049965}, {"start": 276, "end": 282, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996940738191799}, {"start": 287, "end": 291, "word": "ring", "entity_group": "VAR", "score": 0.9995902417874428}, {"start": 297, "end": 299, "word": "50", "entity_group": "PARAM", "score": 0.9993478814005075}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465452}, {"start": 319, "end": 327, "word": "necklace", "entity_group": "VAR", "score": 0.9990975872183067}, {"start": 333, "end": 335, "word": "75", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 373, "end": 381, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 382, "end": 388, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-1795768460", "document": "A store sells hot sauce in large and small bottles. Each large bottle costs the store $3 and each small bottle costs the store $2. The store has a budget of $1000. In addition, each large bottle takes 2 units of shelf space while each small bottle takes 1 unit of shelf space. The store has available 500 units of shelf space. Also the store wants to make sure that at least 50% of all stock is small bottles. If the profit per large bottle is $5 and the profit per small bottle is $3, how many of each should the store keep in stock to maximize profit?", "order_mapping": {"large": 0, "small bottles": 1, "large bottle": 0, "small bottle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large bottle": "5", "small bottle": "3"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "1000", "terms": {"large bottle": "3", "small bottle": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"large bottle": "2", "small bottle": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "50%", "var": "small bottles", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large bottles\n- y: Number of small bottles\n\nObjective:\n- The store aims to maximize its profit. The profit per large bottle is $5 and the profit per small bottle is $3. Therefore, the objective function is: Maximize 5x + 3y\n\nConstraints:\n- The store has a budget of $1000, so the cost constraint is: 3x + 2y <= 1000.\n- The store has 500 units of shelf space available, leading to the space constraint: 2x + y <= 500.\n- The store wants to ensure that at least 50% of all stock is small bottles, resulting in the constraint: y >= 0.5(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3y\nConstraints:\n3x + 2y <= 1000\n2x + y <= 500\ny >= 0.5(x + y)", "canonical": {"objective": [-5.0, -3.0], "constraints": [[3.0, 2.0, 1000.0], [2.0, 1.0, 500.0], [0.5, -0.5, 0.0]]}, "solution": {"x": 0, "y": 500}, "pseudo_model": "\nDecision Variables:\n- Number of large bottles in stock: LargeBottles\n- Number of small bottles in stock: SmallBottles\n\nConstraints:\n- Budget constraint (cost of large bottles is $3, small bottles is $2, total budget is $1000):\n  3 * LargeBottles + 2 * SmallBottles <= 1000\n- Shelf space constraint (large bottles take 2 units, small bottles take 1 unit, total available space is 500 units):\n  2 * LargeBottles + 1 * SmallBottles <= 500\n- At least 50% of all stock must be small bottles:\n  SmallBottles >= 0.5 * (LargeBottles + SmallBottles)\n\nObjective:\n- Maximize profit (profit per large bottle is $5, profit per small bottle is $3):\n  5 * LargeBottles + 3 * SmallBottles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeBottles = intvar(0, 999999999)  # Number of large bottles\nSmallBottles = intvar(0, 999999999)  # Number of small bottles\n\n# Constraints\nm = Model()\n\n# The store has a budget of $1000 (each large bottle costs $3 and each small bottle costs $2):\nm += 3 * LargeBottles + 2 * SmallBottles <= 1000\n# The store has available 500 units of shelf space (each large bottle takes 2 units, each small bottle takes 1 unit):\nm += 2 * LargeBottles + 1 * SmallBottles <= 500\n# At least 50% of all stock is small bottles:\nm += SmallBottles >= 0.5 * (LargeBottles + SmallBottles)\n\n# Objective\n# Maximize profit (profit per large bottle is $5 and per small bottle is $3):\nm.maximize(5 * LargeBottles + 3 * SmallBottles)\n", "entities": [{"start": 27, "end": 32, "word": "large", "entity_group": "VAR", "score": 0.9990614976510099}, {"start": 37, "end": 50, "word": "small bottles", "entity_group": "VAR", "score": 0.9999685363955352}, {"start": 58, "end": 70, "word": "large bottle", "entity_group": "VAR", "score": 0.9999866411471973}, {"start": 89, "end": 90, "word": "3", "entity_group": "PARAM", "score": 0.9994244467205257}, {"start": 100, "end": 112, "word": "small bottle", "entity_group": "VAR", "score": 0.9999847795788263}, {"start": 131, "end": 132, "word": "2", "entity_group": "PARAM", "score": 0.9996909943029856}, {"start": 151, "end": 157, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9910827997170585}, {"start": 163, "end": 167, "word": "1000", "entity_group": "LIMIT", "score": 0.9980829418080116}, {"start": 189, "end": 201, "word": "large bottle", "entity_group": "VAR", "score": 0.9999726952038768}, {"start": 208, "end": 209, "word": "2", "entity_group": "PARAM", "score": 0.9996845317109802}, {"start": 242, "end": 254, "word": "small bottle", "entity_group": "VAR", "score": 0.9999761653637401}, {"start": 261, "end": 262, "word": "1", "entity_group": "PARAM", "score": 0.99878821761098}, {"start": 299, "end": 308, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990771569145493}, {"start": 309, "end": 312, "word": "500", "entity_group": "LIMIT", "score": 0.999314281364178}, {"start": 375, "end": 383, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9971078392903865}, {"start": 384, "end": 388, "word": "50 %", "entity_group": "LIMIT", "score": 0.9644530267325263}, {"start": 405, "end": 418, "word": "small bottles", "entity_group": "VAR", "score": 0.9999745386399485}, {"start": 428, "end": 434, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998965576322737}, {"start": 439, "end": 451, "word": "large bottle", "entity_group": "VAR", "score": 0.9999348167845105}, {"start": 457, "end": 458, "word": "5", "entity_group": "PARAM", "score": 0.9995624457446743}, {"start": 467, "end": 473, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99986234795438}, {"start": 478, "end": 490, "word": "small bottle", "entity_group": "VAR", "score": 0.9999314625883642}, {"start": 496, "end": 497, "word": "3", "entity_group": "PARAM", "score": 0.9996795389461139}, {"start": 551, "end": 559, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.998856759569568}, {"start": 560, "end": 566, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994748300407567}]}
{"doc_id": "528982296", "document": "A man insists he can meet his calorie and protein requirements from eating burgers and fries. He wants to get at least 3000 calories and 150 grams of protein. Each burger contains 500 calories and 30 grams of protein while each order of fries contains 300 calories and 5 grams of protein. If the cost per burger is $7 and the cost per order of fries is $3, how many of each should he eat to meet his requirements at minimum cost?", "order_mapping": {"burgers": 0, "fries": 1, "burger": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"burger": "7", "fries": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "3000", "terms": {"burger": "500", "fries": "300"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"burger": "30", "fries": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of burgers\n- y: Number of orders of fries\n\nObjective:\n- The man wants to minimize his cost while meeting his calorie and protein requirements. The cost per burger is $7 and the cost per order of fries is $3. Therefore, the objective function is: Minimize 7x + 3y\n\nConstraints:\n- The man needs to consume at least 3000 calories, which can be represented as: 500x + 300y >= 3000.\n- He also needs to consume at least 150 grams of protein, leading to the constraint: 30x + 5y >= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 7x + 3y\nConstraints:\n500x + 300y >= 3000\n30x + 5y >= 150", "canonical": {"objective": [7.0, 3.0], "constraints": [[-500.0, -300.0, -3000.0], [-30.0, -5.0, -150.0]]}, "solution": {"x": 5, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of burgers eaten: Burgers\n- Number of orders of fries eaten: Fries\n\nConstraints:\n- Calorie requirement (at least 3000 calories):\n  500 * Burgers + 300 * Fries >= 3000\n- Protein requirement (at least 150 grams of protein):\n  30 * Burgers + 5 * Fries >= 150\n\nObjective:\n- Minimize cost (7 dollars per burger, 3 dollars per order of fries):\n  7 * Burgers + 3 * Fries\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurgers = intvar(0, 999999999)  # Number of burgers\nFries = intvar(0, 999999999)  # Number of orders of fries\n\n# Constraints\nm = Model()\n\n# Calorie requirement (at least 3000 calories):\nm += 500 * Burgers + 300 * Fries >= 3000\n# Protein requirement (at least 150 grams of protein):\nm += 30 * Burgers + 5 * Fries >= 150\n\n# Objective\n# Minimize cost (7 dollars per burger, 3 dollars per order of fries):\nm.minimize(7 * Burgers + 3 * Fries)\n", "entities": [{"start": 75, "end": 82, "word": "burgers", "entity_group": "VAR", "score": 0.9992621957288429}, {"start": 87, "end": 92, "word": "fries", "entity_group": "VAR", "score": 0.9993255470869502}, {"start": 111, "end": 119, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990128356666489}, {"start": 120, "end": 124, "word": "3000", "entity_group": "LIMIT", "score": 0.9995632807178801}, {"start": 138, "end": 141, "word": "150", "entity_group": "LIMIT", "score": 0.999680858754204}, {"start": 166, "end": 172, "word": "burger", "entity_group": "VAR", "score": 0.9997684061646994}, {"start": 182, "end": 185, "word": "500", "entity_group": "PARAM", "score": 0.9995507797130491}, {"start": 199, "end": 201, "word": "30", "entity_group": "PARAM", "score": 0.9996830123826294}, {"start": 239, "end": 244, "word": "fries", "entity_group": "VAR", "score": 0.9997061139920033}, {"start": 254, "end": 257, "word": "300", "entity_group": "PARAM", "score": 0.9996852390584059}, {"start": 271, "end": 272, "word": "5", "entity_group": "PARAM", "score": 0.99964218787194}, {"start": 299, "end": 303, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9979907604403158}, {"start": 308, "end": 314, "word": "burger", "entity_group": "VAR", "score": 0.9997255748309521}, {"start": 320, "end": 321, "word": "7", "entity_group": "PARAM", "score": 0.9990966234932238}, {"start": 330, "end": 334, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9988386361905702}, {"start": 348, "end": 353, "word": "fries", "entity_group": "VAR", "score": 0.9992981154042634}, {"start": 359, "end": 360, "word": "3", "entity_group": "PARAM", "score": 0.9995311613851932}, {"start": 422, "end": 429, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9938479539244452}, {"start": 430, "end": 434, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9980998499139099}]}
{"doc_id": "1108577712", "document": "A pen store sells regular pens and premium pens made of higher quality material. They can sell x1 regular pens at a profit of $3 each and x2 premium pens at a profit of $8 each (x1 nd x2 are both greater than or equal to 0). Daily demand for regular pens is at most 100 and daily demand for premium pens is at most 50. If the store can sell at most 75 pens of either type per day, how many of each pen should they sell to maximize profit?", "order_mapping": {"regular pens": 0, "premium pens": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular pens": "3", "premium pens": "8"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "regular pens", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "premium pens", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "75", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of regular pens sold\n- x2: Number of premium pens sold\n\nObjective:\n- The store aims to maximize its daily profit. They make a profit of $3 for each regular pen sold and $8 for each premium pen sold. Therefore, the objective function is: Maximize 3x1 + 8x2\n\nConstraints:\n- The daily demand for regular pens is at most 100, leading to the constraint: x1 <= 100.\n- The daily demand for premium pens is at most 50, leading to the constraint: x2 <= 50.\n- The store can sell at most 75 pens of either type per day, resulting in the constraint: x1 + x2 <= 75.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x1 + 8x2\nConstraints:\nx1 <= 100\nx2 <= 50\nx1 + x2 <= 75", "canonical": {"objective": [-3.0, -8.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 50.0], [1.0, 1.0, 75.0]]}, "solution": {"x": 25, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of regular pens sold per day: RegularPens\n- Number of premium pens sold per day: PremiumPens\n\nConstraints:\n- Daily demand for regular pens is at most 100:\n  RegularPens <= 100\n- Daily demand for premium pens is at most 50:\n  PremiumPens <= 50\n- The store can sell at most 75 pens of either type per day:\n  RegularPens + PremiumPens <= 75\n\nObjective:\n- Maximize profit (3 dollars per regular pen, 8 dollars per premium pen):\n  3 * RegularPens + 8 * PremiumPens\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularPens = intvar(0, 999999999)  # Number of regular pens sold per day\nPremiumPens = intvar(0, 999999999)  # Number of premium pens sold per day\n\n# Constraints\nm = Model()\n\n# Daily demand for regular pens is at most 100:\nm += RegularPens <= 100\n# Daily demand for premium pens is at most 50:\nm += PremiumPens <= 50\n# The store can sell at most 75 pens of either type per day:\nm += RegularPens + PremiumPens <= 75\n\n# Objective\n# Maximize profit (3 dollars per regular pen, 8 dollars per premium pen):\nm.maximize(3 * RegularPens + 8 * PremiumPens)\n", "entities": [{"start": 18, "end": 30, "word": "regular pens", "entity_group": "VAR", "score": 0.9999388136257591}, {"start": 35, "end": 47, "word": "premium pens", "entity_group": "VAR", "score": 0.9999891380194194}, {"start": 99, "end": 111, "word": "regular pens", "entity_group": "VAR", "score": 0.99995832749321}, {"start": 117, "end": 123, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997775632093084}, {"start": 129, "end": 130, "word": "3", "entity_group": "PARAM", "score": 0.999292902292404}, {"start": 143, "end": 155, "word": "premium pens", "entity_group": "VAR", "score": 0.9999740917652628}, {"start": 161, "end": 167, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995738580155956}, {"start": 173, "end": 174, "word": "8", "entity_group": "PARAM", "score": 0.9994238460753925}, {"start": 248, "end": 260, "word": "regular pens", "entity_group": "VAR", "score": 0.9999482988325132}, {"start": 264, "end": 271, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9978078364789966}, {"start": 272, "end": 275, "word": "100", "entity_group": "LIMIT", "score": 0.9994924250162625}, {"start": 297, "end": 309, "word": "premium pens", "entity_group": "VAR", "score": 0.9999431233386942}, {"start": 313, "end": 320, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997700416923572}, {"start": 321, "end": 323, "word": "50", "entity_group": "LIMIT", "score": 0.9997043529150507}, {"start": 348, "end": 355, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984765961896026}, {"start": 356, "end": 358, "word": "75", "entity_group": "LIMIT", "score": 0.99967258919047}, {"start": 430, "end": 438, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995127073773427}, {"start": 439, "end": 445, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999683838642522}]}
{"doc_id": "291000796", "document": "An amusement park sells regular tickets and premium tickets, which allow you to skip lines. The amusement park can sell at most 1000 tickets. The profit per regular ticket is $50 and the profit per premium ticket is $100. The park reserves at least 100 tickets to be premium but at least 5 times as many people prefer to buy regular tickets than premium tickets. How many tickets of each type should the amusement park sell to maximize profit?", "order_mapping": {"regular tickets": 0, "premium tickets": 1, "regular ticket": 0, "premium ticket": 1, "premium": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular ticket": "50", "premium ticket": "100"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "100", "var": "premium", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "5", "y_var": "premium tickets", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "1000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular tickets\n- y: Number of premium tickets\n\nObjective:\n- The amusement park aims to maximize its profit. The profit per regular ticket is $50 and the profit per premium ticket is $100. Therefore, the objective function is: Maximize 50x + 100y\n\nConstraints:\n- The park can sell at most 1000 tickets, so the constraint is: x + y <= 1000.\n- The park reserves at least 100 tickets to be premium, leading to the constraint: y >= 100.\n- At least 5 times as many people prefer to buy regular tickets than premium tickets, resulting in the constraint: x >= 5y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 100y\nConstraints:\nx + y <= 1000\ny >= 100\nx >= 5y", "canonical": {"objective": [-50.0, -100.0], "constraints": [[1.0, 1.0, 1000.0], [0.0, -1.0, -100.0], [-1.0, 5.0, 0.0]]}, "solution": {"x": 834, "y": 166}, "pseudo_model": "\nDecision Variables:\n- Number of regular tickets sold: RegularTickets\n- Number of premium tickets sold: PremiumTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 1000:\n  RegularTickets + PremiumTickets <= 1000\n- At least 100 tickets must be premium:\n  PremiumTickets >= 100\n- At least 5 times as many regular tickets are sold as premium tickets:\n  RegularTickets >= 5 * PremiumTickets\n\nObjective:\n- Maximize profit (50 dollars per regular ticket, 100 dollars per premium ticket):\n  50 * RegularTickets + 100 * PremiumTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\nPremiumTickets = intvar(0, 999999999)  # Number of premium tickets sold\n\n# Constraints\nm = Model()\n\n# The amusement park can sell at most 1000 tickets:\nm += RegularTickets + PremiumTickets <= 1000\n# The park reserves at least 100 tickets to be premium:\nm += PremiumTickets >= 100\n# At least 5 times as many people prefer to buy regular tickets than premium tickets:\nm += RegularTickets >= 5 * PremiumTickets\n\n# Objective\n# Maximize profit (50 dollars per regular ticket, 100 dollars per premium ticket):\nm.maximize(50 * RegularTickets + 100 * PremiumTickets)\n", "entities": [{"start": 24, "end": 39, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999604302094862}, {"start": 44, "end": 59, "word": "premium tickets", "entity_group": "VAR", "score": 0.9999852524818658}, {"start": 122, "end": 129, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988144942353886}, {"start": 130, "end": 134, "word": "1000", "entity_group": "LIMIT", "score": 0.9997275262548582}, {"start": 149, "end": 155, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999323949795454}, {"start": 160, "end": 174, "word": "regular ticket", "entity_group": "VAR", "score": 0.9999420741291035}, {"start": 180, "end": 182, "word": "50", "entity_group": "PARAM", "score": 0.9995624501632415}, {"start": 191, "end": 197, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350362784384}, {"start": 202, "end": 216, "word": "premium ticket", "entity_group": "VAR", "score": 0.9999191796922615}, {"start": 222, "end": 225, "word": "100", "entity_group": "PARAM", "score": 0.9997736146567171}, {"start": 246, "end": 254, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998752137743882}, {"start": 255, "end": 258, "word": "100", "entity_group": "LIMIT", "score": 0.9997288773735791}, {"start": 273, "end": 280, "word": "premium", "entity_group": "VAR", "score": 0.9993458893089032}, {"start": 285, "end": 293, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9974003640021556}, {"start": 294, "end": 295, "word": "5", "entity_group": "PARAM", "score": 0.9982866180080696}, {"start": 331, "end": 346, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999641886631522}, {"start": 352, "end": 367, "word": "premium tickets", "entity_group": "VAR", "score": 0.9999487564073063}, {"start": 434, "end": 442, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994966694491721}, {"start": 443, "end": 449, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997873518407767}]}
{"doc_id": "-1255974871", "document": "A winter sports store sells skis and snowboards. The store has a budget of $20000. Each pair of skis costs the store $500 and each snowboard costs the store $400. Each pair of skis is then sold for a profit of $200 while each snowboard is sold for a profit of $175. The owner estimates that at least 10 but at most 30 pairs of skis will be sold. The number of snowboards sold is at most a half the number of skis sold. How many pairs of skis and snowboards should the store buy and sell to maximize profit?", "order_mapping": {"skis": 0, "snowboards": 1, "snowboard": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"skis": "200", "snowboard": "175"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "20000", "terms": {"skis": "500", "snowboard": "400"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "skis", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "30", "var": "skis", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "snowboards", "direction": "at most", "param": "half", "y_var": "skis", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pairs of skis bought and sold\n- y: Number of snowboards bought and sold\n\nObjective:\n- The store aims to maximize its profit. Each pair of skis is sold for a profit of $200 while each snowboard is sold for a profit of $175. Therefore, the objective function is: Maximize 200x + 175y\n\nConstraints:\n- The store has a budget of $20000, so the constraint is: 500x + 400y <= 20000.\n- The owner estimates that at least 10 but at most 30 pairs of skis will be sold, leading to the constraints: x >= 10 and x <= 30.\n- The number of snowboards sold is at most half the number of skis sold, resulting in the constraint: y <= 0.5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 175y\nConstraints:\n500x + 400y <= 20000\nx >= 10\nx <= 30\ny <= 0.5x", "canonical": {"objective": [-200.0, -175.0], "constraints": [[500.0, 400.0, 20000.0], [-1.0, 0.0, -10.0], [1.0, 0.0, 30.0], [-0.5, 1.0, 0.0]]}, "solution": {"x": 30, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Number of pairs of skis bought and sold: Skis\n- Number of snowboards bought and sold: Snowboards\n\nConstraints:\n- The store has a budget of $20000 for buying skis and snowboards:\n  500 * Skis + 400 * Snowboards <= 20000\n- At least 10 but at most 30 pairs of skis will be sold:\n  10 <= Skis <= 30\n- The number of snowboards sold is at most half the number of skis sold:\n  Snowboards <= 0.5 * Skis\n\nObjective:\n- Maximize profit ($200 profit per pair of skis, $175 profit per snowboard):\n  200 * Skis + 175 * Snowboards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSkis = intvar(0, 999999999)  # Number of pairs of skis bought and sold\nSnowboards = intvar(0, 999999999)  # Number of snowboards bought and sold\n\n# Constraints\nm = Model()\n\n# The store has a budget of $20000:\nm += 500 * Skis + 400 * Snowboards <= 20000\n# At least 10 but at most 30 pairs of skis will be sold:\nm += Skis >= 10\nm += Skis <= 30\n# The number of snowboards sold is at most half the number of skis sold:\nm += Snowboards <= 0.5 * Skis\n\n# Objective\n# Maximize profit ($200 profit per pair of skis, $175 profit per snowboard):\nm.maximize(200 * Skis + 175 * Snowboards)\n", "entities": [{"start": 28, "end": 32, "word": "skis", "entity_group": "VAR", "score": 0.9997337193158728}, {"start": 37, "end": 47, "word": "snowboards", "entity_group": "VAR", "score": 0.9996542807731925}, {"start": 66, "end": 72, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9949191243419685}, {"start": 78, "end": 83, "word": "20000", "entity_group": "LIMIT", "score": 0.9984632425410955}, {"start": 99, "end": 103, "word": "skis", "entity_group": "VAR", "score": 0.9996985597381873}, {"start": 122, "end": 125, "word": "500", "entity_group": "PARAM", "score": 0.9997501489272682}, {"start": 135, "end": 144, "word": "snowboard", "entity_group": "VAR", "score": 0.9998397494849532}, {"start": 163, "end": 166, "word": "400", "entity_group": "PARAM", "score": 0.9996966493749453}, {"start": 182, "end": 186, "word": "skis", "entity_group": "VAR", "score": 0.9995327421014011}, {"start": 206, "end": 212, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999478647376655}, {"start": 218, "end": 221, "word": "200", "entity_group": "PARAM", "score": 0.999628409063938}, {"start": 233, "end": 242, "word": "snowboard", "entity_group": "VAR", "score": 0.9998125896618247}, {"start": 257, "end": 263, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995177391166069}, {"start": 269, "end": 272, "word": "175", "entity_group": "PARAM", "score": 0.9995523746483601}, {"start": 300, "end": 308, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991052900716475}, {"start": 309, "end": 311, "word": "10", "entity_group": "LIMIT", "score": 0.9993616558191244}, {"start": 316, "end": 323, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992306873278308}, {"start": 324, "end": 326, "word": "30", "entity_group": "LIMIT", "score": 0.9996889516559158}, {"start": 336, "end": 340, "word": "skis", "entity_group": "VAR", "score": 0.9982097785836326}, {"start": 370, "end": 380, "word": "snowboards", "entity_group": "VAR", "score": 0.9993761490162938}, {"start": 389, "end": 396, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976839712757362}, {"start": 399, "end": 403, "word": "half", "entity_group": "PARAM", "score": 0.9958925181471118}, {"start": 418, "end": 422, "word": "skis", "entity_group": "VAR", "score": 0.9993736920092705}, {"start": 448, "end": 452, "word": "skis", "entity_group": "VAR", "score": 0.9996608731666733}, {"start": 457, "end": 467, "word": "snowboards", "entity_group": "VAR", "score": 0.9997859273957352}, {"start": 501, "end": 509, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987210781686853}, {"start": 510, "end": 516, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997433452488923}]}
{"doc_id": "1863062325", "document": "A mattress company makes queen and king sized mattresses. Queen size mattresses require 20 units of foam while king size mattresses require 30 units of foam. Queen size mattresses take 10 minutes to package while king size mattresses take 15 minutes to package. The company has 5000 units of foam available and 2500 minutes of packaging time available. If the profit per queen mattress is $300 and the profit per king mattress is $500, how many of each should be made to maximize profit?", "order_mapping": {"queen": 0, "king": 1, "Queen size mattresses": 0, "king size mattresses": 1, "queen mattress": 0, "king mattress": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"king mattress": "500", "queen mattress": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"Queen size mattresses": "20", "king size mattresses": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2500", "terms": {"Queen size mattresses": "10", "king size mattresses": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of queen size mattresses to be made\n- y: Number of king size mattresses to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per queen mattress is $300 and the profit per king mattress is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- The company has 5000 units of foam available, so the constraint is: 20x + 30y <= 5000.\n- The company has 2500 minutes of packaging time available, leading to the constraint: 10x + 15y <= 2500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\n20x + 30y <= 5000\n10x + 15y <= 2500", "canonical": {"objective": [-300.0, -500.0], "constraints": [[20.0, 30.0, 5000.0], [10.0, 15.0, 2500.0]]}, "solution": {"x": 1, "y": 166}, "pseudo_model": "\nDecision Variables:\n- Number of queen size mattresses made: QueenMattresses\n- Number of king size mattresses made: KingMattresses\n\nConstraints:\n- Foam usage for queen and king size mattresses should not exceed 5000 units:\n  20 * QueenMattresses + 30 * KingMattresses <= 5000\n- Packaging time for queen and king size mattresses should not exceed 2500 minutes:\n  10 * QueenMattresses + 15 * KingMattresses <= 2500\n\nObjective:\n- Maximize profit ($300 per queen mattress, $500 per king mattress):\n  300 * QueenMattresses + 500 * KingMattresses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nQueenMattresses = intvar(0, 999999999)  # Number of queen size mattresses made\nKingMattresses = intvar(0, 999999999)  # Number of king size mattresses made\n\n# Constraints\nm = Model()\n\n# Foam usage constraint (5000 units of foam available):\nm += 20 * QueenMattresses + 30 * KingMattresses <= 5000\n# Packaging time constraint (2500 minutes of packaging time available):\nm += 10 * QueenMattresses + 15 * KingMattresses <= 2500\n\n# Objective\n# Maximize profit ($300 per queen mattress, $500 per king mattress):\nm.maximize(300 * QueenMattresses + 500 * KingMattresses)\n", "entities": [{"start": 25, "end": 30, "word": "queen", "entity_group": "VAR", "score": 0.9995994378663068}, {"start": 35, "end": 39, "word": "king", "entity_group": "VAR", "score": 0.9996103487009772}, {"start": 59, "end": 80, "word": "Queen size mattresses", "entity_group": "VAR", "score": 0.9998063655265701}, {"start": 89, "end": 91, "word": "20", "entity_group": "PARAM", "score": 0.9996049453568118}, {"start": 112, "end": 132, "word": "king size mattresses", "entity_group": "VAR", "score": 0.9995116288172335}, {"start": 141, "end": 143, "word": "30", "entity_group": "PARAM", "score": 0.999620344831881}, {"start": 160, "end": 181, "word": "Queen size mattresses", "entity_group": "VAR", "score": 0.9995295355043533}, {"start": 187, "end": 189, "word": "10", "entity_group": "PARAM", "score": 0.9996930627448225}, {"start": 215, "end": 235, "word": "king size mattresses", "entity_group": "VAR", "score": 0.9994548489195624}, {"start": 241, "end": 243, "word": "15", "entity_group": "PARAM", "score": 0.9995403681787641}, {"start": 281, "end": 285, "word": "5000", "entity_group": "LIMIT", "score": 0.9997117349407577}, {"start": 300, "end": 309, "word": "available", "entity_group": "CONST_DIR", "score": 0.9951706835944679}, {"start": 314, "end": 318, "word": "2500", "entity_group": "LIMIT", "score": 0.9995638889387538}, {"start": 345, "end": 354, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992755563199596}, {"start": 364, "end": 370, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998521627059838}, {"start": 375, "end": 389, "word": "queen mattress", "entity_group": "VAR", "score": 0.9999475174124692}, {"start": 395, "end": 398, "word": "300", "entity_group": "PARAM", "score": 0.9996126246185263}, {"start": 407, "end": 413, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384730865274}, {"start": 418, "end": 431, "word": "king mattress", "entity_group": "VAR", "score": 0.9999450048231512}, {"start": 437, "end": 440, "word": "500", "entity_group": "PARAM", "score": 0.999675780277594}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 487, "end": 493, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-451730029", "document": "A dog owner mixes two types of dog food to ensure the new mixture contains a minimum of 12 units of meat and 8 units of micronutrients. Type A food contains 1 unit of meat and 2 units of micronutrients per kg. Type B food contains 3 units of meat and 1 unit of micronutrients per kg. If it costs $2 per kg of Type A food and $5 per kg of Type B food, how many kg of each should the owner buy to minimize her costs?", "order_mapping": {"Type A food": 0, "Type B food": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Type A food": "2", "Type B food": "5"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "12", "terms": {"Type A food": "1", "Type B food": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "8", "terms": {"Type B food": "1", "Type A food": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of Type A food\n- y: kg of Type B food\n\nObjective:\n- The dog owner wants to minimize her costs. Given that Type A food costs $2 per kg and Type B food costs $5 per kg, the objective function is: Minimize 2x + 5y\n\nConstraints:\n- The new mixture must contain a minimum of 12 units of meat, leading to the constraint: x + 3y >= 12 (meat constraint)\n- The new mixture must contain a minimum of 8 units of micronutrients, leading to the constraint: 2x + y >= 8 (micronutrients constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 5y\nConstraints:\nx + 3y >= 12\n2x + y >= 8", "canonical": {"objective": [2.0, 5.0], "constraints": [[-1.0, -3.0, -12.0], [-2.0, -1.0, -8.0]]}, "solution": {"x": 3, "y": 3}, "pseudo_model": "\nDecision Variables:\n- kg of Type A food bought: TypeAFood\n- kg of Type B food bought: TypeBFood\n\nConstraints:\n- The new mixture must contain at least 12 units of meat:\n  1 * TypeAFood + 3 * TypeBFood >= 12\n- The new mixture must contain at least 8 units of micronutrients:\n  2 * TypeAFood + 1 * TypeBFood >= 8\n\nObjective:\n- Minimize costs ($2 per kg of Type A food and $5 per kg of Type B food):\n  2 * TypeAFood + 5 * TypeBFood\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTypeAFood = intvar(0, 999999999)  # kg of Type A food\nTypeBFood = intvar(0, 999999999)  # kg of Type B food\n\n# Constraints\nm = Model()\n\n# The new mixture contains a minimum of 12 units of meat:\nm += 1 * TypeAFood + 3 * TypeBFood >= 12\n# The new mixture contains a minimum of 8 units of micronutrients:\nm += 2 * TypeAFood + 1 * TypeBFood >= 8\n\n# Objective\n# Minimize costs ($2 per kg of Type A food and $5 per kg of Type B food):\nm.minimize(2 * TypeAFood + 5 * TypeBFood)\n", "entities": [{"start": 77, "end": 84, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9981738601095091}, {"start": 88, "end": 90, "word": "12", "entity_group": "LIMIT", "score": 0.9997364262832181}, {"start": 109, "end": 110, "word": "8", "entity_group": "LIMIT", "score": 0.9997136900713279}, {"start": 137, "end": 148, "word": "Type A food", "entity_group": "VAR", "score": 0.9983289494578145}, {"start": 158, "end": 159, "word": "1", "entity_group": "PARAM", "score": 0.9995475438641392}, {"start": 177, "end": 178, "word": "2", "entity_group": "PARAM", "score": 0.9996737689373096}, {"start": 212, "end": 223, "word": "Type B food", "entity_group": "VAR", "score": 0.998318844109855}, {"start": 233, "end": 234, "word": "3", "entity_group": "PARAM", "score": 0.9996722676105781}, {"start": 253, "end": 254, "word": "1", "entity_group": "PARAM", "score": 0.999549935540768}, {"start": 293, "end": 298, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992755054476369}, {"start": 301, "end": 302, "word": "2", "entity_group": "PARAM", "score": 0.9996762165953632}, {"start": 313, "end": 324, "word": "Type A food", "entity_group": "VAR", "score": 0.9934073528614406}, {"start": 331, "end": 332, "word": "5", "entity_group": "PARAM", "score": 0.9995896268312028}, {"start": 343, "end": 354, "word": "Type B food", "entity_group": "VAR", "score": 0.9958925286436803}, {"start": 401, "end": 409, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993099230962745}, {"start": 414, "end": 419, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9979506423219803}]}
{"doc_id": "943165280", "document": "A street vendor sells fried fish and fried chicken. Each piece of fried fish requires 3 units of batter and 5 units of oil. Each piece of fried chicken requires 4 units of batter and 6 units of oil. The vendor has available 400 units of batter and 500 units of oil. If the revenue per piece of fried fish is $4 and the revenue per piece of fried chicken is $5, how many of each should he sell to maximize revenue?", "order_mapping": {"fried fish": 0, "fried chicken": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"fried fish": "4", "fried chicken": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"fried fish": "3", "fried chicken": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"fried fish": "5", "fried chicken": "6"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pieces of fried fish\n- y: Number of pieces of fried chicken\n\nObjective:\n- The vendor aims to maximize revenue. The revenue per piece of fried fish is $4 and the revenue per piece of fried chicken is $5. Therefore, the objective function is: Maximize 4x + 5y\n\nConstraints:\n- The vendor has available 400 units of batter, and each piece of fried fish requires 3 units of batter and each piece of fried chicken requires 4 units of batter. This leads to the constraint: 3x + 4y <= 400.\n- The vendor has available 500 units of oil, and each piece of fried fish requires 5 units of oil and each piece of fried chicken requires 6 units of oil. This results in the constraint: 5x + 6y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 5y\nConstraints:\n3x + 4y <= 400\n5x + 6y <= 500", "canonical": {"objective": [-4.0, -5.0], "constraints": [[3.0, 4.0, 400.0], [5.0, 6.0, 500.0]]}, "solution": {"x": 4, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of pieces of fried fish sold: FriedFish\n- Number of pieces of fried chicken sold: FriedChicken\n\nConstraints:\n- The vendor has available 400 units of batter:\n  3 * FriedFish + 4 * FriedChicken <= 400\n- The vendor has available 500 units of oil:\n  5 * FriedFish + 6 * FriedChicken <= 500\n\nObjective:\n- Maximize revenue (4 dollars per piece of fried fish, 5 dollars per piece of fried chicken):\n  4 * FriedFish + 5 * FriedChicken\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFriedFish = intvar(0, 999999999)  # Number of pieces of fried fish sold\nFriedChicken = intvar(0, 999999999)  # Number of pieces of fried chicken sold\n\n# Constraints\nm = Model()\n\n# The vendor has available 400 units of batter:\nm += 3 * FriedFish + 4 * FriedChicken <= 400\n# The vendor has available 500 units of oil:\nm += 5 * FriedFish + 6 * FriedChicken <= 500\n\n# Objective\n# Maximize revenue (4 dollars per piece of fried fish, 5 dollars per piece of fried chicken):\nm.maximize(4 * FriedFish + 5 * FriedChicken)\n", "entities": [{"start": 22, "end": 32, "word": "fried fish", "entity_group": "VAR", "score": 0.9999633573378844}, {"start": 37, "end": 50, "word": "fried chicken", "entity_group": "VAR", "score": 0.9999881478780142}, {"start": 67, "end": 77, "word": "fried fish", "entity_group": "VAR", "score": 0.999982556091787}, {"start": 87, "end": 88, "word": "3", "entity_group": "PARAM", "score": 0.9996468914045518}, {"start": 109, "end": 110, "word": "5", "entity_group": "PARAM", "score": 0.9997293806384897}, {"start": 140, "end": 153, "word": "fried chicken", "entity_group": "VAR", "score": 0.999984055761073}, {"start": 163, "end": 164, "word": "4", "entity_group": "PARAM", "score": 0.9996469191828081}, {"start": 185, "end": 186, "word": "6", "entity_group": "PARAM", "score": 0.9996777112160786}, {"start": 217, "end": 226, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987473803980338}, {"start": 227, "end": 230, "word": "400", "entity_group": "LIMIT", "score": 0.9994052600962124}, {"start": 251, "end": 254, "word": "500", "entity_group": "LIMIT", "score": 0.9996678009630168}, {"start": 277, "end": 284, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9985031267378489}, {"start": 298, "end": 308, "word": "fried fish", "entity_group": "VAR", "score": 0.9999491668293278}, {"start": 314, "end": 315, "word": "4", "entity_group": "PARAM", "score": 0.9994576461658425}, {"start": 324, "end": 331, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9985040064227717}, {"start": 345, "end": 358, "word": "fried chicken", "entity_group": "VAR", "score": 0.999928502194922}, {"start": 364, "end": 365, "word": "5", "entity_group": "PARAM", "score": 0.999634430350334}, {"start": 403, "end": 411, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997385766404957}, {"start": 412, "end": 419, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9987772254054442}]}
{"doc_id": "2133506352", "document": "A man knits toques and scarfs. A toque requires 3 units of yarn and 30 minutes of time. A scarf requires 5 units of yarn and 40 minutes of time. The man has 200 units of yarn available and 1800 minutes of time available. If the profit per toque is $5 and the profit per scarf is $7, how many of each should he knit to maximize his profit?", "order_mapping": {"toques": 0, "scarfs": 1, "toque": 0, "scarf": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"scarf": "7", "toque": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"toque": "3", "scarf": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1800", "terms": {"toque": "30", "scarf": "40"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of toques knitted\n- y: Number of scarfs knitted\n\nObjective:\n- The man aims to maximize his profit. The profit per toque is $5 and the profit per scarf is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The man has 200 units of yarn available, and a toque requires 3 units of yarn while a scarf requires 5 units. This leads to the constraint: 3x + 5y <= 200.\n- The man has 1800 minutes of time available, and a toque requires 30 minutes while a scarf requires 40 minutes. This results in the constraint: 30x + 40y <= 1800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n3x + 5y <= 200\n30x + 40y <= 1800", "canonical": {"objective": [-5.0, -7.0], "constraints": [[3.0, 5.0, 200.0], [30.0, 40.0, 1800.0]]}, "solution": {"x": 36, "y": 18}, "pseudo_model": "\nDecision Variables:\n- Number of toques knitted: Toques\n- Number of scarfs knitted: Scarfs\n\nConstraints:\n- Total yarn used should not exceed 200 units (3 units per toque, 5 units per scarf):\n  3 * Toques + 5 * Scarfs <= 200\n- Total time used should not exceed 1800 minutes (30 minutes per toque, 40 minutes per scarf):\n  30 * Toques + 40 * Scarfs <= 1800\n\nObjective:\n- Maximize profit ($5 profit per toque, $7 profit per scarf):\n  5 * Toques + 7 * Scarfs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nToques = intvar(0, 999999999)  # Number of toques knitted\nScarfs = intvar(0, 999999999)  # Number of scarfs knitted\n\n# Constraints\nm = Model()\n\n# The man has 200 units of yarn available:\nm += 3 * Toques + 5 * Scarfs <= 200\n# The man has 1800 minutes of time available:\nm += 30 * Toques + 40 * Scarfs <= 1800\n\n# Objective\n# Maximize profit ($5 per toque, $7 per scarf):\nm.maximize(5 * Toques + 7 * Scarfs)\n", "entities": [{"start": 12, "end": 18, "word": "toques", "entity_group": "VAR", "score": 0.99942556945887}, {"start": 23, "end": 29, "word": "scarfs", "entity_group": "VAR", "score": 0.9997895813131974}, {"start": 34, "end": 39, "word": "toque", "entity_group": "VAR", "score": 0.999647169342423}, {"start": 49, "end": 50, "word": "3", "entity_group": "PARAM", "score": 0.9997168371650986}, {"start": 69, "end": 71, "word": "30", "entity_group": "PARAM", "score": 0.9997147564572231}, {"start": 92, "end": 97, "word": "scarf", "entity_group": "VAR", "score": 0.9995612533881657}, {"start": 107, "end": 108, "word": "5", "entity_group": "PARAM", "score": 0.9996964905090555}, {"start": 127, "end": 129, "word": "40", "entity_group": "PARAM", "score": 0.9996567010404669}, {"start": 160, "end": 163, "word": "200", "entity_group": "LIMIT", "score": 0.999718282813637}, {"start": 178, "end": 187, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989754232176626}, {"start": 192, "end": 196, "word": "1800", "entity_group": "LIMIT", "score": 0.9995931512881161}, {"start": 213, "end": 222, "word": "available", "entity_group": "CONST_DIR", "score": 0.9980521575645037}, {"start": 232, "end": 238, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997006828705458}, {"start": 243, "end": 248, "word": "toque", "entity_group": "VAR", "score": 0.9995072883626369}, {"start": 254, "end": 255, "word": "5", "entity_group": "PARAM", "score": 0.9993478745628193}, {"start": 264, "end": 270, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937467727}, {"start": 275, "end": 280, "word": "scarf", "entity_group": "VAR", "score": 0.9990888329773511}, {"start": 286, "end": 287, "word": "7", "entity_group": "PARAM", "score": 0.9994707336527342}, {"start": 325, "end": 333, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997401225803251}, {"start": 338, "end": 344, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999397180284323}]}
{"doc_id": "1810354571", "document": "A small candy store hand makes hard candy. Each packet of lemon candy takes 20 minutes to make and each packet of cherry candy takes 25 minutes to make. The store has available 3000 minutes to make the packets. In addition, they can make at most 100 lemon candy packets and 80 cherry candy packets. If the profit per packet of lemon candy is $5 and the profit per packet of cherry candy is $7, how many of each should they make to maximize profit?", "order_mapping": {"lemon candy": 0, "cherry candy": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cherry candy": "7", "lemon candy": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"lemon candy": "20", "cherry candy": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "lemon candy", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "cherry candy", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packets of lemon candy\n- y: Number of packets of cherry candy\n\nObjective:\n- The store aims to maximize its profit. The profit per packet of lemon candy is $5 and the profit per packet of cherry candy is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The store has 3000 minutes available to make the packets, so the time constraint is: 20x + 25y <= 3000.\n- The store can make at most 100 lemon candy packets, leading to the constraint: x <= 100.\n- The store can make at most 80 cherry candy packets, resulting in the constraint: y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n20x + 25y <= 3000\nx <= 100\ny <= 80", "canonical": {"objective": [-5.0, -7.0], "constraints": [[20.0, 25.0, 3000.0], [1.0, 0.0, 100.0], [0.0, 1.0, 80.0]]}, "solution": {"x": 50, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of lemon candy packets: LemonCandy\n- Number of cherry candy packets: CherryCandy\n\nConstraints:\n- Total time to make packets should not exceed 3000 minutes (20 minutes per lemon candy, 25 minutes per cherry candy):\n  20 * LemonCandy + 25 * CherryCandy <= 3000\n- At most 100 lemon candy packets can be made:\n  LemonCandy <= 100\n- At most 80 cherry candy packets can be made:\n  CherryCandy <= 80\n\nObjective:\n- Maximize profit (5 dollars per packet of lemon candy, 7 dollars per packet of cherry candy):\n  5 * LemonCandy + 7 * CherryCandy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLemonCandy = intvar(0, 999999999)  # Number of lemon candy packets\nCherryCandy = intvar(0, 999999999)  # Number of cherry candy packets\n\n# Constraints\nm = Model()\n\n# The store has available 3000 minutes to make the packets:\nm += 20 * LemonCandy + 25 * CherryCandy <= 3000\n# They can make at most 100 lemon candy packets:\nm += LemonCandy <= 100\n# They can make at most 80 cherry candy packets:\nm += CherryCandy <= 80\n\n# Objective\n# Maximize profit (5 dollars per packet of lemon candy, 7 dollars per packet of cherry candy):\nm.maximize(5 * LemonCandy + 7 * CherryCandy)\n", "entities": [{"start": 59, "end": 70, "word": "lemon candy", "entity_group": "VAR", "score": 0.9999796128507203}, {"start": 77, "end": 79, "word": "20", "entity_group": "PARAM", "score": 0.9994565597368881}, {"start": 115, "end": 127, "word": "cherry candy", "entity_group": "VAR", "score": 0.9998852755687853}, {"start": 134, "end": 136, "word": "25", "entity_group": "PARAM", "score": 0.9989085847879597}, {"start": 169, "end": 178, "word": "available", "entity_group": "CONST_DIR", "score": 0.9980396005172625}, {"start": 179, "end": 183, "word": "3000", "entity_group": "LIMIT", "score": 0.9993519544832004}, {"start": 242, "end": 249, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989536217246527}, {"start": 250, "end": 253, "word": "100", "entity_group": "LIMIT", "score": 0.9994934282356069}, {"start": 254, "end": 265, "word": "lemon candy", "entity_group": "VAR", "score": 0.9999850651604711}, {"start": 278, "end": 280, "word": "80", "entity_group": "LIMIT", "score": 0.9989813668291001}, {"start": 281, "end": 293, "word": "cherry candy", "entity_group": "VAR", "score": 0.9999566145126968}, {"start": 311, "end": 317, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997800767574878}, {"start": 332, "end": 343, "word": "lemon candy", "entity_group": "VAR", "score": 0.9999496867805475}, {"start": 349, "end": 350, "word": "5", "entity_group": "PARAM", "score": 0.9994550269755719}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999041106342775}, {"start": 380, "end": 392, "word": "cherry candy", "entity_group": "VAR", "score": 0.999634686388379}, {"start": 398, "end": 399, "word": "7", "entity_group": "PARAM", "score": 0.9996862239027171}, {"start": 439, "end": 447, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 448, "end": 454, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "1493954743", "document": "A candy company wants to make a special mix using sour cherry candies and sour peach candies. Each sour cherry candy has 2 units of citric acid and 3 units of sugar. Each sour peach candy has 1 units of citric acid and 4 units of sugar.  The special mix must contain at least 50 units of citric acid and 60 units of sugar. In addition, there can be at most 10 sour cherry candies in the mixture. If the cost per sour cherry candy is $0.10 and the cost per sour peach candy is $0.12, how many of each should be in the mixture to minimize costs?", "order_mapping": {"sour cherry candies": 0, "sour peach candies": 1, "sour cherry candy": 0, "sour peach candy": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"sour cherry candy": "0.10", "sour peach candy": "0.12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"sour cherry candy": "2", "sour peach candy": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "60", "terms": {"sour cherry candy": "3", "sour peach candy": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "sour cherry candies", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sour cherry candies\n- y: Number of sour peach candies\n\nObjective:\n- The candy company aims to minimize costs. Given that the cost per sour cherry candy is $0.10 and the cost per sour peach candy is $0.12, the objective function is: Minimize 0.10x + 0.12y\n\nConstraints:\n- The special mix must contain at least 50 units of citric acid, leading to the constraint: 2x + y >= 50.\n- The special mix must contain at least 60 units of sugar, leading to the constraint: 3x + 4y >= 60.\n- There can be at most 10 sour cherry candies in the mixture, leading to the constraint: x <= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.10x + 0.12y\nConstraints:\n2x + y >= 50\n3x + 4y >= 60\nx <= 10", "canonical": {"objective": [0.1, 0.12], "constraints": [[-2.0, -1.0, -50.0], [-3.0, -4.0, -60.0], [1.0, 0.0, 10.0]]}, "solution": {"x": 10, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of sour cherry candies in the mix: SourCherryCandies\n- Number of sour peach candies in the mix: SourPeachCandies\n\nConstraints:\n- At least 50 units of citric acid required:\n  2 * SourCherryCandies + 1 * SourPeachCandies >= 50\n- At least 60 units of sugar required:\n  3 * SourCherryCandies + 4 * SourPeachCandies >= 60\n- At most 10 sour cherry candies allowed:\n  SourCherryCandies <= 10\n\nObjective:\n- Minimize costs (0.10 dollars per sour cherry candy, 0.12 dollars per sour peach candy):\n  0.10 * SourCherryCandies + 0.12 * SourPeachCandies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSourCherryCandies = intvar(0, 999999999)  # Number of sour cherry candies in the mix\nSourPeachCandies = intvar(0, 999999999)  # Number of sour peach candies in the mix\n\n# Constraints\nm = Model()\n\n# The mix must contain at least 50 units of citric acid:\nm += 2 * SourCherryCandies + 1 * SourPeachCandies >= 50\n# The mix must contain at least 60 units of sugar:\nm += 3 * SourCherryCandies + 4 * SourPeachCandies >= 60\n# There can be at most 10 sour cherry candies in the mixture:\nm += SourCherryCandies <= 10\n\n# Objective\n# Minimize costs (0.10 dollars per sour cherry candy, 0.12 dollars per sour peach candy):\nm.minimize(0.10 * SourCherryCandies + 0.12 * SourPeachCandies)\n", "entities": [{"start": 50, "end": 69, "word": "sour cherry candies", "entity_group": "VAR", "score": 0.9994638557196678}, {"start": 74, "end": 92, "word": "sour peach candies", "entity_group": "VAR", "score": 0.999551891072867}, {"start": 100, "end": 117, "word": "sour cherry candy", "entity_group": "VAR", "score": 0.99972864693367}, {"start": 122, "end": 123, "word": "2", "entity_group": "PARAM", "score": 0.9997294790446766}, {"start": 149, "end": 150, "word": "3", "entity_group": "PARAM", "score": 0.9996064409561898}, {"start": 173, "end": 189, "word": "sour peach candy", "entity_group": "VAR", "score": 0.9996259653788563}, {"start": 194, "end": 195, "word": "1", "entity_group": "PARAM", "score": 0.9997275553795547}, {"start": 221, "end": 222, "word": "4", "entity_group": "PARAM", "score": 0.9994020124582521}, {"start": 269, "end": 277, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988893804908839}, {"start": 278, "end": 280, "word": "50", "entity_group": "LIMIT", "score": 0.9997290057502586}, {"start": 306, "end": 308, "word": "60", "entity_group": "LIMIT", "score": 0.9994258898421647}, {"start": 353, "end": 360, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988333733911111}, {"start": 361, "end": 363, "word": "10", "entity_group": "LIMIT", "score": 0.9995489574167202}, {"start": 364, "end": 383, "word": "sour cherry candies", "entity_group": "VAR", "score": 0.9986358489873921}, {"start": 408, "end": 412, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9980245759486537}, {"start": 417, "end": 434, "word": "sour cherry candy", "entity_group": "VAR", "score": 0.9992585875591764}, {"start": 440, "end": 444, "word": "0.10", "entity_group": "PARAM", "score": 0.999688203895867}, {"start": 453, "end": 457, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989094284572322}, {"start": 462, "end": 478, "word": "sour peach candy", "entity_group": "VAR", "score": 0.9990196276409415}, {"start": 484, "end": 488, "word": "0.12", "entity_group": "PARAM", "score": 0.9997138687477747}, {"start": 536, "end": 544, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994684665477501}, {"start": 545, "end": 550, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9977132289017027}]}
{"doc_id": "1236350435", "document": "You have $100000 available to invest in either the vaccine industry or the meat-replacement industry. Money placed in the vaccine industry yields a return of 5% while money placed in the meat-replacement industry yields a return of 7%. Due to your strong belief in the meat-replacement industry, you decide that at least 60% of your investment be placed in the meat-replacement industry. In addition, at most 30% of your investment can be in the vaccine industry. How much should you invest in each to maximize your return?", "order_mapping": {"vaccine industry": 0, "meat-replacement industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"vaccine industry": "5%", "meat-replacement industry": "7%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "meat-replacement industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "vaccine industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the vaccine industry\n- y: Dollars invested in the meat-replacement industry\n\nObjective:\n- The goal is to maximize the return on investment. Money placed in the vaccine industry yields a return of 5% while money placed in the meat-replacement industry yields a return of 7%. Therefore, the objective function is: Maximize 0.05x + 0.07y\n\nConstraints:\n- The total amount available for investment is $100,000, so the constraint is: x + y <= 100000.\n- At least 60% of the investment should be placed in the meat-replacement industry, leading to the constraint: y >= 0.60(x + y).\n- At most 30% of the investment can be in the vaccine industry, resulting in the constraint: x <= 0.30(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.07y\nConstraints:\nx + y <= 100000\ny >= 0.60(x + y)\nx <= 0.30(x + y)", "canonical": {"objective": [-0.05, -0.07], "constraints": [[1.0, 1.0, 100000.0], [0.6, -0.4, 0.0], [0.7, -0.3, 0.0]]}, "solution": {"x": 0, "y": 100000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the vaccine industry: VaccineIndustry\n- Amount invested in the meat-replacement industry: MeatReplacementIndustry\n\nConstraints:\n- Total investment should not exceed $100000:\n  VaccineIndustry + MeatReplacementIndustry <= 100000\n- At least 60% of the investment should be in the meat-replacement industry:\n  MeatReplacementIndustry >= 0.60 * (VaccineIndustry + MeatReplacementIndustry)\n- At most 30% of the investment can be in the vaccine industry:\n  VaccineIndustry <= 0.30 * (VaccineIndustry + MeatReplacementIndustry)\n\nObjective:\n- Maximize return (5% from the vaccine industry, 7% from the meat-replacement industry):\n  0.05 * VaccineIndustry + 0.07 * MeatReplacementIndustry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVaccineIndustry = intvar(0, 999999999)  # Amount invested in the vaccine industry\nMeatReplacementIndustry = intvar(0, 999999999)  # Amount invested in the meat-replacement industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $100000:\nm += VaccineIndustry + MeatReplacementIndustry <= 100000\n# At least 60% of your investment should be in the meat-replacement industry:\nm += MeatReplacementIndustry >= 0.60 * (VaccineIndustry + MeatReplacementIndustry)\n# At most 30% of your investment can be in the vaccine industry:\nm += VaccineIndustry <= 0.30 * (VaccineIndustry + MeatReplacementIndustry)\n\n# Objective\n# Maximize return (5% from the vaccine industry, 7% from the meat-replacement industry):\nm.maximize(0.05 * VaccineIndustry + 0.07 * MeatReplacementIndustry)\n", "entities": [{"start": 11, "end": 17, "word": "100000", "entity_group": "LIMIT", "score": 0.9970936271031674}, {"start": 18, "end": 27, "word": "available", "entity_group": "CONST_DIR", "score": 0.9965322094000085}, {"start": 52, "end": 68, "word": "vaccine industry", "entity_group": "VAR", "score": 0.999981123403096}, {"start": 76, "end": 103, "word": "meat - replacement industry", "entity_group": "VAR", "score": 0.9994214684996114}, {"start": 126, "end": 142, "word": "vaccine industry", "entity_group": "VAR", "score": 0.9999014450493054}, {"start": 152, "end": 158, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9985012293494232}, {"start": 162, "end": 165, "word": "5 %", "entity_group": "PARAM", "score": 0.9515730386567431}, {"start": 192, "end": 219, "word": "meat - replacement industry", "entity_group": "VAR", "score": 0.9992091063433611}, {"start": 229, "end": 235, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9876271345885517}, {"start": 239, "end": 242, "word": "7 %", "entity_group": "PARAM", "score": 0.9836487720166508}, {"start": 278, "end": 305, "word": "meat - replacement industry", "entity_group": "VAR", "score": 0.9992683911462994}, {"start": 324, "end": 332, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987101559638835}, {"start": 333, "end": 337, "word": "60 %", "entity_group": "LIMIT", "score": 0.9342527074029585}, {"start": 374, "end": 401, "word": "meat - replacement industry", "entity_group": "VAR", "score": 0.998779229694229}, {"start": 418, "end": 425, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985742459563088}, {"start": 426, "end": 430, "word": "30 %", "entity_group": "LIMIT", "score": 0.9663531150841802}, {"start": 464, "end": 480, "word": "vaccine industry", "entity_group": "VAR", "score": 0.9999370976943792}, {"start": 521, "end": 529, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999480241609613}, {"start": 535, "end": 541, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9989806348009503}]}
{"doc_id": "1797374435", "document": "Mark has to take supplements to meet his daily requirements of 30 units of vitamin A, 20 units of vitamin C, 40 units of vitamin D, and 30 units of vitamin E. He can take chewable pills that each contain 2 units of vitamin A, 3 units of vitamin C, 3 units of vitamin D, and 2 units of vitamin E or he can take regular pills that each contain 3 units of vitamin A, 2 units of vitamin C, 4 units of vitamin D, and 4 units of vitamin E. If each chewable pill costs $0.50 and each regular pill costs $0.40, how many of each supplement should he buy to meet his requirements at minimum cost?", "order_mapping": {"chewable pills": 0, "regular pills": 1, "chewable pill": 0, "regular pill": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"chewable pill": "0.50", "regular pill": "0.40"}}, "const_declarations": [{"type": "linear", "direction": "requirements", "limit": "30", "terms": {"chewable pills": "2", "regular pills": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "requirements", "limit": "20", "terms": {"chewable pills": "3", "regular pills": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "requirements", "limit": "40", "terms": {"chewable pills": "3", "regular pills": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "requirements", "limit": "30", "terms": {"chewable pills": "2", "regular pills": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chewable pills\n- y: Number of regular pills\n\nObjective:\n- Mark wants to minimize the cost of buying the supplements. Each chewable pill costs $0.50 and each regular pill costs $0.40. Therefore, the objective function is: Minimize 0.50x + 0.40y\n\nConstraints:\n- Mark needs to meet his daily requirements of 30 units of vitamin A, 20 units of vitamin C, 40 units of vitamin D, and 30 units of vitamin E. This leads to the following constraints:\n    - 2x + 3y >= 30 (Vitamin A)\n    - 3x + 2y >= 20 (Vitamin C)\n    - 3x + 4y >= 40 (Vitamin D)\n    - 2x + 4y >= 30 (Vitamin E)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.50x + 0.40y\nConstraints:\n2x + 3y >= 30\n3x + 2y >= 20\n3x + 4y >= 40\n2x + 4y >= 30", "canonical": {"objective": [0.5, 0.4], "constraints": [[-2.0, -3.0, -30.0], [-3.0, -2.0, -20.0], [-3.0, -4.0, -40.0], [-2.0, -4.0, -30.0]]}, "solution": {"x": 0, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of chewable pills: ChewablePills\n- Number of regular pills: RegularPills\n\nConstraints:\n- To meet the vitamin A requirement (30 units):\n  2 * ChewablePills + 3 * RegularPills >= 30\n- To meet the vitamin C requirement (20 units):\n  3 * ChewablePills + 2 * RegularPills >= 20\n- To meet the vitamin D requirement (40 units):\n  3 * ChewablePills + 4 * RegularPills >= 40\n- To meet the vitamin E requirement (30 units):\n  2 * ChewablePills + 4 * RegularPills >= 30\n\nObjective:\n- Minimize cost, with chewable pills costing $0.50 each and regular pills costing $0.40 each:\n  0.50 * ChewablePills + 0.40 * RegularPills\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChewablePills = intvar(0, 999999999)  # Number of chewable pills\nRegularPills = intvar(0, 999999999)  # Number of regular pills\n\n# Constraints\nm = Model()\n\n# Vitamin A requirements (30 units): 2 units per chewable pill, 3 units per regular pill\nm += 2 * ChewablePills + 3 * RegularPills >= 30\n# Vitamin C requirements (20 units): 3 units per chewable pill, 2 units per regular pill\nm += 3 * ChewablePills + 2 * RegularPills >= 20\n# Vitamin D requirements (40 units): 3 units per chewable pill, 4 units per regular pill\nm += 3 * ChewablePills + 4 * RegularPills >= 40\n# Vitamin E requirements (30 units): 2 units per chewable pill, 4 units per regular pill\nm += 2 * ChewablePills + 4 * RegularPills >= 30\n\n# Objective\n# Minimize cost: $0.50 per chewable pill, $0.40 per regular pill\nm.minimize(0.50 * ChewablePills + 0.40 * RegularPills)\n", "entities": [{"start": 47, "end": 59, "word": "requirements", "entity_group": "CONST_DIR", "score": 0.9987072718065602}, {"start": 63, "end": 65, "word": "30", "entity_group": "LIMIT", "score": 0.9996911507733008}, {"start": 87, "end": 89, "word": "20", "entity_group": "LIMIT", "score": 0.9996930258404831}, {"start": 111, "end": 113, "word": "40", "entity_group": "LIMIT", "score": 0.9996945934881752}, {"start": 139, "end": 141, "word": "30", "entity_group": "LIMIT", "score": 0.9995976554710115}, {"start": 174, "end": 188, "word": "chewable pills", "entity_group": "VAR", "score": 0.9999310417383332}, {"start": 207, "end": 208, "word": "2", "entity_group": "PARAM", "score": 0.9997427239708624}, {"start": 230, "end": 231, "word": "3", "entity_group": "PARAM", "score": 0.9997059914546779}, {"start": 253, "end": 254, "word": "3", "entity_group": "PARAM", "score": 0.9997062332818089}, {"start": 280, "end": 281, "word": "2", "entity_group": "PARAM", "score": 0.9996952893970849}, {"start": 316, "end": 329, "word": "regular pills", "entity_group": "VAR", "score": 0.9999592594883694}, {"start": 348, "end": 349, "word": "3", "entity_group": "PARAM", "score": 0.9997397392598384}, {"start": 371, "end": 372, "word": "2", "entity_group": "PARAM", "score": 0.9997059915440161}, {"start": 394, "end": 395, "word": "4", "entity_group": "PARAM", "score": 0.9997063911505426}, {"start": 421, "end": 422, "word": "4", "entity_group": "PARAM", "score": 0.999571847119898}, {"start": 451, "end": 464, "word": "chewable pill", "entity_group": "VAR", "score": 0.9999750039935063}, {"start": 465, "end": 470, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992945441811231}, {"start": 473, "end": 477, "word": "0.50", "entity_group": "PARAM", "score": 0.9997453454767516}, {"start": 487, "end": 499, "word": "regular pill", "entity_group": "VAR", "score": 0.9999749920828983}, {"start": 500, "end": 505, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992879761604364}, {"start": 508, "end": 512, "word": "0.40", "entity_group": "PARAM", "score": 0.9996966918458007}, {"start": 585, "end": 592, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9938426993666566}, {"start": 593, "end": 597, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9980998826003492}]}
{"doc_id": "-2094163363", "document": "A company wants to buy ads to advertise their new product. They can purchase ads to be placed on planes, blimps, and hot air balloons. The cost for an ad on each as well as the expected viewership is given. On planes an ad costs $5000 and reaches 100000 viewers. On blimps an ad costs $2000 and reaches 50000 viewers. On hot air balloons an ad costs $1000 and reaches 20000 viewers. The airline industry limits the number of ads from the same to company to 5. In addition, at most half the total number of ads can occur on hot air balloons and at least 20% should occur on blimps. If the company has a budget of $50000, how many ads of each type should they purchase to maximize viewership.", "order_mapping": {"planes": 0, "blimps": 1, "hot air balloons": 2, "airline": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"planes": "100000", "blimps": "50000", "hot air balloons": "20000"}}, "const_declarations": [{"type": "upperbound", "direction": "limits the number", "limit": "5", "var": "airline", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "half", "var": "hot air balloons", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "blimps", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "50000", "terms": {"planes": "5000", "blimps": "2000", "hot air balloons": "1000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads on planes\n- y: Number of ads on blimps\n- z: Number of ads on hot air balloons\n\nObjective:\n- The company aims to maximize the viewership. The expected viewership for each type of ad is given: planes - 100000 viewers, blimps - 50000 viewers, hot air balloons - 20000 viewers. Therefore, the objective function is: Maximize 100000x + 50000y + 20000z\n\nConstraints:\n- The company has a budget of $50000, so the cost of the ads should not exceed this amount: 5000x + 2000y + 1000z <= 50000.\n- The airline industry limits the number of ads from the same company to 5, leading to the constraint: x + y + z <= 5.\n- At most half the total number of ads can occur on hot air balloons, leading to the constraint: z <= 0.5(x + y + z).\n- At least 20% of the total number of ads should occur on blimps, leading to the constraint: y >= 0.2(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100000x + 50000y + 20000z\nConstraints:\n5000x + 2000y + 1000z <= 50000\nx + y + z <= 5\nz <= 0.5(x + y + z)\ny >= 0.2(x + y + z)", "canonical": {"objective": [-100000.0, -50000.0, -20000.0], "constraints": [[5000.0, 2000.0, 1000.0, 50000.0], [1.0, 1.0, 1.0, 5.0], [-0.5, -0.5, 0.5, 0.0], [0.2, -0.8, 0.2, 0.0]]}, "solution": {"x": 4, "y": 1, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of ads on planes: Planes\n- Number of ads on blimps: Blimps\n- Number of ads on hot air balloons: HotAirBalloons\n\nConstraints:\n- Total cost should not exceed $50000:\n  5000 * Planes + 2000 * Blimps + 1000 * HotAirBalloons <= 50000\n- At most half the total number of ads can be on hot air balloons:\n  HotAirBalloons <= 0.5 * (Planes + Blimps + HotAirBalloons)\n- At least 20% of the ads should be on blimps:\n  Blimps >= 0.2 * (Planes + Blimps + HotAirBalloons)\n\nObjective:\n- Maximize viewership (100000 viewers per ad on planes, 50000 viewers per ad on blimps, 20000 viewers per ad on hot air balloons):\n  100000 * Planes + 50000 * Blimps + 20000 * HotAirBalloons\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPlanes = intvar(0, 5)  # Number of ads on planes, limited to 5\nBlimps = intvar(0, 999999999)  # Number of ads on blimps\nHotAirBalloons = intvar(0, 999999999)  # Number of ads on hot air balloons\n\n# Constraints\nm = Model()\n\n# Budget constraint: $50000\nm += 5000 * Planes + 2000 * Blimps + 1000 * HotAirBalloons <= 50000\n# At most half the total number of ads can occur on hot air balloons:\nm += HotAirBalloons <= 0.5 * (Planes + Blimps + HotAirBalloons)\n# At least 20% of the ads should occur on blimps:\nm += Blimps >= 0.2 * (Planes + Blimps + HotAirBalloons)\n\n# Objective\n# Maximize viewership (100000 viewers per ad on planes, 50000 viewers per ad on blimps, 20000 viewers per ad on hot air balloons):\nm.maximize(100000 * Planes + 50000 * Blimps + 20000 * HotAirBalloons)\n", "entities": [{"start": 98, "end": 104, "word": "planes", "entity_group": "VAR", "score": 0.9997158743457858}, {"start": 107, "end": 113, "word": "blimps", "entity_group": "VAR", "score": 0.9998105526577028}, {"start": 120, "end": 136, "word": "hot air balloons", "entity_group": "VAR", "score": 0.999434031565915}, {"start": 215, "end": 221, "word": "planes", "entity_group": "VAR", "score": 0.9956237484196377}, {"start": 236, "end": 240, "word": "5000", "entity_group": "PARAM", "score": 0.999327841010482}, {"start": 253, "end": 259, "word": "100000", "entity_group": "PARAM", "score": 0.9997119029806576}, {"start": 260, "end": 267, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9827092927889756}, {"start": 273, "end": 279, "word": "blimps", "entity_group": "VAR", "score": 0.9990186985450301}, {"start": 294, "end": 298, "word": "2000", "entity_group": "PARAM", "score": 0.9993278422911738}, {"start": 311, "end": 316, "word": "50000", "entity_group": "PARAM", "score": 0.9997285420722041}, {"start": 317, "end": 324, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9926086977965973}, {"start": 330, "end": 346, "word": "hot air balloons", "entity_group": "VAR", "score": 0.9993279577356438}, {"start": 361, "end": 365, "word": "1000", "entity_group": "PARAM", "score": 0.9987696477072129}, {"start": 378, "end": 383, "word": "20000", "entity_group": "PARAM", "score": 0.9997253674172839}, {"start": 384, "end": 391, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9924835498225487}, {"start": 398, "end": 405, "word": "airline", "entity_group": "VAR", "score": 0.9994410707331216}, {"start": 415, "end": 432, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9505486507428846}, {"start": 468, "end": 469, "word": "5", "entity_group": "LIMIT", "score": 0.9995340782995085}, {"start": 486, "end": 493, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987633303280172}, {"start": 494, "end": 498, "word": "half", "entity_group": "LIMIT", "score": 0.992065011597247}, {"start": 536, "end": 552, "word": "hot air balloons", "entity_group": "VAR", "score": 0.9993367329684926}, {"start": 557, "end": 565, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986581851142845}, {"start": 566, "end": 570, "word": "20 %", "entity_group": "LIMIT", "score": 0.9461729037696839}, {"start": 587, "end": 593, "word": "blimps", "entity_group": "VAR", "score": 0.9995094706622333}, {"start": 617, "end": 623, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9922813661724456}, {"start": 629, "end": 634, "word": "50000", "entity_group": "LIMIT", "score": 0.9992928624104893}, {"start": 687, "end": 695, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995176596538012}, {"start": 696, "end": 706, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9987611044061561}]}
{"doc_id": "-357202617", "document": "A factory makes maple pecan and mint chocolate ice cream. Each type of ice cream requires time on a mixing machine and a freezing machine. A batch of maple pecan ice cream requires 50 minutes of mixing and 80 minutes of freezing. A batch of mint chocolate ice cream requires 30 minutes of mixing and 70 minutes of freezing. While the mixing machine is available for 8000 minutes per month, the freezing machine is available for 10000 minutes per month. If the profit per batch of maple pecan ice cream is $400 and the profit per batch of mint chocolate ice cream is $250, how many batches of each should be made to maximize profit?", "order_mapping": {"maple pecan": 0, "mint chocolate ice cream": 1, "maple pecan ice cream": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"maple pecan ice cream": "400", "mint chocolate ice cream": "250"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "8000", "terms": {"maple pecan ice cream": "50", "mint chocolate ice cream": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "10000", "terms": {"maple pecan ice cream": "80", "mint chocolate ice cream": "70"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Batches of maple pecan ice cream\n- y: Batches of mint chocolate ice cream\n\nObjective:\n- The factory aims to maximize its profit. The profit per batch of maple pecan ice cream is $400 and the profit per batch of mint chocolate ice cream is $250. Therefore, the objective function is: Maximize 400x + 250y\n\nConstraints:\n- The mixing machine is available for 8000 minutes per month, and each batch of maple pecan ice cream requires 50 minutes, and each batch of mint chocolate ice cream requires 30 minutes. This leads to the constraint: 50x + 30y <= 8000.\n- The freezing machine is available for 10000 minutes per month, and each batch of maple pecan ice cream requires 80 minutes, and each batch of mint chocolate ice cream requires 70 minutes. This leads to the constraint: 80x + 70y <= 10000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 250y\nConstraints:\n50x + 30y <= 8000\n80x + 70y <= 10000", "canonical": {"objective": [-400.0, -250.0], "constraints": [[50.0, 30.0, 8000.0], [80.0, 70.0, 10000.0]]}, "solution": {"x": 125, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of batches of maple pecan ice cream: MaplePecan\n- Number of batches of mint chocolate ice cream: MintChocolate\n\nConstraints:\n- Mixing machine time constraint (8000 minutes per month):\n  50 * MaplePecan + 30 * MintChocolate <= 8000\n- Freezing machine time constraint (10000 minutes per month):\n  80 * MaplePecan + 70 * MintChocolate <= 10000\n\nObjective:\n- Maximize profit ($400 per batch of maple pecan ice cream, $250 per batch of mint chocolate ice cream):\n  400 * MaplePecan + 250 * MintChocolate\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMaplePecan = intvar(0, 999999999)  # Number of batches of maple pecan ice cream\nMintChocolate = intvar(0, 999999999)  # Number of batches of mint chocolate ice cream\n\n# Constraints\nm = Model()\n\n# Mixing machine time constraint (8000 minutes per month):\nm += 50 * MaplePecan + 30 * MintChocolate <= 8000\n# Freezing machine time constraint (10000 minutes per month):\nm += 80 * MaplePecan + 70 * MintChocolate <= 10000\n\n# Objective\n# Maximize profit ($400 per batch of maple pecan ice cream, $250 per batch of mint chocolate ice cream):\nm.maximize(400 * MaplePecan + 250 * MintChocolate)\n", "entities": [{"start": 16, "end": 27, "word": "maple pecan", "entity_group": "VAR", "score": 0.9999483112232297}, {"start": 32, "end": 56, "word": "mint chocolate ice cream", "entity_group": "VAR", "score": 0.9972212686673717}, {"start": 152, "end": 173, "word": "maple pecan ice cream", "entity_group": "VAR", "score": 0.9947210216265631}, {"start": 183, "end": 185, "word": "50", "entity_group": "PARAM", "score": 0.9995901607209687}, {"start": 208, "end": 210, "word": "80", "entity_group": "PARAM", "score": 0.9996966735756582}, {"start": 244, "end": 268, "word": "mint chocolate ice cream", "entity_group": "VAR", "score": 0.9947220793179248}, {"start": 278, "end": 280, "word": "30", "entity_group": "PARAM", "score": 0.9995901607209693}, {"start": 303, "end": 305, "word": "70", "entity_group": "PARAM", "score": 0.9996266619376486}, {"start": 356, "end": 365, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987699408171227}, {"start": 370, "end": 374, "word": "8000", "entity_group": "LIMIT", "score": 0.9997287560481856}, {"start": 419, "end": 428, "word": "available", "entity_group": "CONST_DIR", "score": 0.99945051675971}, {"start": 433, "end": 438, "word": "10000", "entity_group": "LIMIT", "score": 0.999529994719771}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999514514146592}, {"start": 486, "end": 507, "word": "maple pecan ice cream", "entity_group": "VAR", "score": 0.9943160279059136}, {"start": 513, "end": 516, "word": "400", "entity_group": "PARAM", "score": 0.9980538179699939}, {"start": 525, "end": 531, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999540434147596}, {"start": 545, "end": 569, "word": "mint chocolate ice cream", "entity_group": "VAR", "score": 0.9935220784549251}, {"start": 575, "end": 578, "word": "250", "entity_group": "PARAM", "score": 0.9991493802980796}, {"start": 624, "end": 632, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 633, "end": 639, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}]}
{"doc_id": "547732358", "document": "An engineering company makes small and large PCB's. A small PCB requires 3 units of silicon while a large PCB requires 5 units of silicon. A small PCB requires 30 minutes of design and 20 minutes of soldering while a large PCB requires 40 minutes of design and 30 minutes of soldering. The company has available 250 units of silicon, 800 minutes of design time, and 600 minutes of soldering time. They also want to make a minimum of 5 small PCB's and 6 large PCB's. If the profit per small PCB is $20 and the profit per large PCB is $35, how many of each should the company make to maximize profit?", "order_mapping": {"small": 0, "large": 1, "small PCB": 0, "large PCB": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large PCB": "35", "small PCB": "20"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "250", "terms": {"small PCB": "3", "large PCB": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"small PCB": "30", "large PCB": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"small PCB": "20", "large PCB": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5", "var": "small PCB", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "6", "var": "large PCB", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small PCBs\n- y: Number of large PCBs\n\nObjective:\n- The company aims to maximize its profit. The profit per small PCB is $20 and the profit per large PCB is $35. Therefore, the objective function is: Maximize 20x + 35y\n\nConstraints:\n- The company has 250 units of silicon available, and a small PCB requires 3 units while a large PCB requires 5 units, leading to the constraint: 3x + 5y <= 250.\n- The company has 800 minutes of design time available, and a small PCB requires 30 minutes while a large PCB requires 40 minutes, leading to the constraint: 30x + 40y <= 800.\n- The company has 600 minutes of soldering time available, and a small PCB requires 20 minutes while a large PCB requires 30 minutes, leading to the constraint: 20x + 30y <= 600.\n- The company wants to make a minimum of 5 small PCBs, leading to the constraint: x >= 5.\n- The company wants to make a minimum of 6 large PCBs, leading to the constraint: y >= 6.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 35y\nConstraints:\n3x + 5y <= 250\n30x + 40y <= 800\n20x + 30y <= 600\nx >= 5\ny >= 6", "canonical": {"objective": [-20.0, -35.0], "constraints": [[3.0, 5.0, 250.0], [30.0, 40.0, 800.0], [20.0, 30.0, 600.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -6.0]]}, "solution": {"x": 5, "y": 16}, "pseudo_model": "\nDecision Variables:\n- Number of small PCBs made: SmallPCB\n- Number of large PCBs made: LargePCB\n\nConstraints:\n- Silicon usage for small and large PCBs should not exceed 250 units:\n  3 * SmallPCB + 5 * LargePCB <= 250\n- Design time for small and large PCBs should not exceed 800 minutes:\n  30 * SmallPCB + 40 * LargePCB <= 800\n- Soldering time for small and large PCBs should not exceed 600 minutes:\n  20 * SmallPCB + 30 * LargePCB <= 600\n- At least 5 small PCBs should be made:\n  SmallPCB >= 5\n- At least 6 large PCBs should be made:\n  LargePCB >= 6\n\nObjective:\n- Maximize profit (20 dollars per small PCB, 35 dollars per large PCB):\n  20 * SmallPCB + 35 * LargePCB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallPCB = intvar(0, 999999999)  # Number of small PCBs made\nLargePCB = intvar(0, 999999999)  # Number of large PCBs made\n\n# Constraints\nm = Model()\n\n# Silicon constraint (3 units for small, 5 units for large, 250 units available):\nm += 3 * SmallPCB + 5 * LargePCB <= 250\n# Design time constraint (30 minutes for small, 40 minutes for large, 800 minutes available):\nm += 30 * SmallPCB + 40 * LargePCB <= 800\n# Soldering time constraint (20 minutes for small, 30 minutes for large, 600 minutes available):\nm += 20 * SmallPCB + 30 * LargePCB <= 600\n# Minimum production constraints:\nm += SmallPCB >= 5  # At least 5 small PCBs\nm += LargePCB >= 6  # At least 6 large PCBs\n\n# Objective\n# Maximize profit (20 dollars per small PCB, 35 dollars per large PCB):\nm.maximize(20 * SmallPCB + 35 * LargePCB)\n", "entities": [{"start": 29, "end": 34, "word": "small", "entity_group": "VAR", "score": 0.9993455508847765}, {"start": 39, "end": 44, "word": "large", "entity_group": "VAR", "score": 0.9995953592963253}, {"start": 56, "end": 65, "word": "small PCB", "entity_group": "VAR", "score": 0.9999799602214859}, {"start": 75, "end": 76, "word": "3", "entity_group": "PARAM", "score": 0.9996996914802332}, {"start": 102, "end": 111, "word": "large PCB", "entity_group": "VAR", "score": 0.9999746241361168}, {"start": 121, "end": 122, "word": "5", "entity_group": "PARAM", "score": 0.9996099242423441}, {"start": 144, "end": 153, "word": "small PCB", "entity_group": "VAR", "score": 0.9999787877677382}, {"start": 163, "end": 165, "word": "30", "entity_group": "PARAM", "score": 0.9997088472556299}, {"start": 188, "end": 190, "word": "20", "entity_group": "PARAM", "score": 0.9997114438444091}, {"start": 220, "end": 229, "word": "large PCB", "entity_group": "VAR", "score": 0.9999727796416472}, {"start": 239, "end": 241, "word": "40", "entity_group": "PARAM", "score": 0.9997225868192989}, {"start": 264, "end": 266, "word": "30", "entity_group": "PARAM", "score": 0.999608010973951}, {"start": 306, "end": 315, "word": "available", "entity_group": "CONST_DIR", "score": 0.998735341583327}, {"start": 316, "end": 319, "word": "250", "entity_group": "LIMIT", "score": 0.9994017705201595}, {"start": 339, "end": 342, "word": "800", "entity_group": "LIMIT", "score": 0.9997592617247819}, {"start": 372, "end": 375, "word": "600", "entity_group": "LIMIT", "score": 0.9996104653653586}, {"start": 429, "end": 436, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9908155633153547}, {"start": 440, "end": 441, "word": "5", "entity_group": "LIMIT", "score": 0.9995760993269549}, {"start": 442, "end": 451, "word": "small PCB", "entity_group": "VAR", "score": 0.9999580136578051}, {"start": 459, "end": 460, "word": "6", "entity_group": "LIMIT", "score": 0.9994264331130058}, {"start": 461, "end": 470, "word": "large PCB", "entity_group": "VAR", "score": 0.9999429747752714}, {"start": 483, "end": 489, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992756661219598}, {"start": 494, "end": 503, "word": "small PCB", "entity_group": "VAR", "score": 0.9999510299044649}, {"start": 509, "end": 511, "word": "20", "entity_group": "PARAM", "score": 0.9995698893704148}, {"start": 520, "end": 526, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998968066835183}, {"start": 531, "end": 540, "word": "large PCB", "entity_group": "VAR", "score": 0.9999477606002893}, {"start": 546, "end": 548, "word": "35", "entity_group": "PARAM", "score": 0.9996795458420663}, {"start": 595, "end": 603, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 604, "end": 610, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-481644170", "document": "An aquarium feeds their seals using sardines and tuna. Each packet of sardines costs $15 while each packet of tuna costs $18. Each packet of sardines contains 4 grams of fat, 12 grams of essential fatty acids, and 10 grams of protein. Each packet of tuna contains 6 grams of fat, 10 grams of essential fatty acids, and 7 grams of protein. The aquarium needs in total 800 grams of fat, 1200 grams of essential fatty acids, and 700 grams of protein to feed their seals. How many of each packet should they buy to minimize costs?", "order_mapping": {"sardines": 0, "tuna": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"sardines": "15", "tuna": "18"}}, "const_declarations": [{"type": "linear", "direction": "in total", "limit": "800", "terms": {"sardines": "4", "tuna": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "in total", "limit": "1200", "terms": {"sardines": "12", "tuna": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "in total", "limit": "700", "terms": {"sardines": "10", "tuna": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packets of sardines\n- y: Number of packets of tuna\n\nObjective:\n- The aquarium aims to minimize the cost of feeding the seals. Each packet of sardines costs $15, and each packet of tuna costs $18. Therefore, the objective function is: Minimize 15x + 18y\n\nConstraints:\n- The aquarium needs in total 800 grams of fat, 1200 grams of essential fatty acids, and 700 grams of protein to feed their seals. This leads to the following constraints:\n    - 4x + 6y >= 800 (fat constraint)\n    - 12x + 10y >= 1200 (essential fatty acids constraint)\n    - 10x + 7y >= 700 (protein constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 15x + 18y\nConstraints:\n4x + 6y >= 800\n12x + 10y >= 1200\n10x + 7y >= 700", "canonical": {"objective": [15.0, 18.0], "constraints": [[-4.0, -6.0, -800.0], [-12.0, -10.0, -1200.0], [-10.0, -7.0, -700.0]]}, "solution": {"x": 2, "y": 132}, "pseudo_model": "\nDecision Variables:\n- Number of sardine packets: Sardines\n- Number of tuna packets: Tuna\n\nConstraints:\n- Total grams of fat from sardines and tuna should be at least 800 grams:\n  4 * Sardines + 6 * Tuna >= 800\n- Total grams of essential fatty acids from sardines and tuna should be at least 1200 grams:\n  12 * Sardines + 10 * Tuna >= 1200\n- Total grams of protein from sardines and tuna should be at least 700 grams:\n  10 * Sardines + 7 * Tuna >= 700\n\nObjective:\n- Minimize costs (15 dollars per sardine packet, 18 dollars per tuna packet):\n  15 * Sardines + 18 * Tuna\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSardines = intvar(0, 999999999)  # Number of sardine packets\nTuna = intvar(0, 999999999)  # Number of tuna packets\n\n# Constraints\nm = Model()\n\n# Total fat requirement:\nm += 4 * Sardines + 6 * Tuna >= 800\n# Total essential fatty acids requirement:\nm += 12 * Sardines + 10 * Tuna >= 1200\n# Total protein requirement:\nm += 10 * Sardines + 7 * Tuna >= 700\n\n# Objective\n# Minimize costs (15 dollars per sardine packet, 18 dollars per tuna packet):\nm.minimize(15 * Sardines + 18 * Tuna)\n", "entities": [{"start": 36, "end": 44, "word": "sardines", "entity_group": "VAR", "score": 0.9995962026206124}, {"start": 49, "end": 53, "word": "tuna", "entity_group": "VAR", "score": 0.9993583164154444}, {"start": 71, "end": 79, "word": "sardines", "entity_group": "VAR", "score": 0.9992995999269155}, {"start": 80, "end": 85, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9954044144860631}, {"start": 88, "end": 90, "word": "15", "entity_group": "PARAM", "score": 0.999472233048894}, {"start": 112, "end": 116, "word": "tuna", "entity_group": "VAR", "score": 0.9993160702963721}, {"start": 117, "end": 122, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9932618450335404}, {"start": 125, "end": 127, "word": "18", "entity_group": "PARAM", "score": 0.999470383342021}, {"start": 145, "end": 153, "word": "sardines", "entity_group": "VAR", "score": 0.9995662103097721}, {"start": 163, "end": 164, "word": "4", "entity_group": "PARAM", "score": 0.9996942092563348}, {"start": 180, "end": 182, "word": "12", "entity_group": "PARAM", "score": 0.9997183430189885}, {"start": 220, "end": 222, "word": "10", "entity_group": "PARAM", "score": 0.9997098613762303}, {"start": 257, "end": 261, "word": "tuna", "entity_group": "VAR", "score": 0.9992471616103583}, {"start": 271, "end": 272, "word": "6", "entity_group": "PARAM", "score": 0.9996904370395359}, {"start": 288, "end": 290, "word": "10", "entity_group": "PARAM", "score": 0.9997183210101893}, {"start": 328, "end": 329, "word": "7", "entity_group": "PARAM", "score": 0.9996813345091893}, {"start": 368, "end": 376, "word": "in total", "entity_group": "CONST_DIR", "score": 0.9955514218637401}, {"start": 377, "end": 380, "word": "800", "entity_group": "LIMIT", "score": 0.9995334666348259}, {"start": 396, "end": 400, "word": "1200", "entity_group": "LIMIT", "score": 0.9997272527780369}, {"start": 438, "end": 441, "word": "700", "entity_group": "LIMIT", "score": 0.999713282534144}, {"start": 524, "end": 532, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996590178044914}, {"start": 533, "end": 538, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990107534022794}]}
{"doc_id": "180778824", "document": "A doctor prescribes a patient two options for his blood pressure and diabetes requirements. There are two pills, a blue pill and a red pill. The blue pill costs $1 and contains 10 units of blood pressure medication and 3 units of diabetes medication. The red pill costs $2 and contains 5 units of blood pressure medication and 7 units of diabetes medication. If the patient requires at least 100 units of blood pressure medication and 70 units of diabetes medication per week, how many of each pill should he purchase to minimize his cost?", "order_mapping": {"blue pill": 0, "red pill": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"blue pill": "1", "red pill": "2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"blue pill": "10", "red pill": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "70", "terms": {"blue pill": "3", "red pill": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of blue pills\n- y: Quantity of red pills\n\nObjective:\n- The patient wants to minimize the cost of purchasing the pills. The blue pill costs $1 and the red pill costs $2. Therefore, the objective function is: Minimize x + 2y\n\nConstraints:\n- The patient requires at least 100 units of blood pressure medication per week, which can be formulated as: 10x + 5y >= 100.\n- The patient also needs at least 70 units of diabetes medication per week, leading to the constraint: 3x + 7y >= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 2y\nConstraints:\n10x + 5y >= 100\n3x + 7y >= 70", "canonical": {"objective": [1.0, 2.0], "constraints": [[-10.0, -5.0, -100.0], [-3.0, -7.0, -70.0]]}, "solution": {"x": 7, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of blue pills purchased: BluePill\n- Number of red pills purchased: RedPill\n\nConstraints:\n- At least 100 units of blood pressure medication required per week:\n  10 * BluePill + 5 * RedPill >= 100\n- At least 70 units of diabetes medication required per week:\n  3 * BluePill + 7 * RedPill >= 70\n\nObjective:\n- Minimize cost (1 dollar per blue pill, 2 dollars per red pill):\n  1 * BluePill + 2 * RedPill\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBluePill = intvar(0, 999999999)  # Number of blue pills purchased\nRedPill = intvar(0, 999999999)  # Number of red pills purchased\n\n# Constraints\nm = Model()\n\n# The patient requires at least 100 units of blood pressure medication per week:\nm += 10 * BluePill + 5 * RedPill >= 100\n# The patient requires at least 70 units of diabetes medication per week:\nm += 3 * BluePill + 7 * RedPill >= 70\n\n# Objective\n# Minimize cost (Blue pill costs $1, Red pill costs $2):\nm.minimize(1 * BluePill + 2 * RedPill)\n", "entities": [{"start": 117, "end": 126, "word": "blue pill", "entity_group": "VAR", "score": 0.9999582225267529}, {"start": 133, "end": 141, "word": "red pill", "entity_group": "VAR", "score": 0.999988335893656}, {"start": 148, "end": 157, "word": "blue pill", "entity_group": "VAR", "score": 0.9999826253230745}, {"start": 158, "end": 163, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990532887752237}, {"start": 166, "end": 167, "word": "1", "entity_group": "PARAM", "score": 0.999664622699277}, {"start": 181, "end": 183, "word": "10", "entity_group": "PARAM", "score": 0.9997162742334963}, {"start": 223, "end": 224, "word": "3", "entity_group": "PARAM", "score": 0.999620914979292}, {"start": 260, "end": 268, "word": "red pill", "entity_group": "VAR", "score": 0.9999852304339247}, {"start": 269, "end": 274, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995432363277511}, {"start": 277, "end": 278, "word": "2", "entity_group": "PARAM", "score": 0.9996280947158334}, {"start": 292, "end": 293, "word": "5", "entity_group": "PARAM", "score": 0.9997163204643285}, {"start": 333, "end": 334, "word": "7", "entity_group": "PARAM", "score": 0.9996717455960487}, {"start": 390, "end": 398, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998996785426557}, {"start": 399, "end": 402, "word": "100", "entity_group": "LIMIT", "score": 0.9997061460341292}, {"start": 442, "end": 444, "word": "70", "entity_group": "LIMIT", "score": 0.9996594422083155}, {"start": 529, "end": 537, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993090310349731}, {"start": 542, "end": 546, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989832478923693}]}
{"doc_id": "-1107954998", "document": "A tour bus has 100 seats, premium seats with TV's and regular seats. A profit of $40 is made on each premium seat and a profit of $20 is made on each regular seat. The tour bus reserves at least 10 seats to be premium but because there is usually nothing good on tv, at least 5 times as many people prefer regular seats to premium seats. How many tickets of each type should be sold to maximize profit?", "order_mapping": {"premium seats": 0, "regular seats": 1, "premium seat": 0, "regular seat": 1, "premium": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium seat": "40", "regular seat": "20"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "premium", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular seats", "direction": "at least", "param": "5", "y_var": "premium seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium seats sold\n- y: Number of regular seats sold\n\nObjective:\n- The tour bus aims to maximize its profit. A profit of $40 is made on each premium seat and a profit of $20 is made on each regular seat. Therefore, the objective function is: Maximize 40x + 20y\n\nConstraints:\n- The tour bus has a total of 100 seats available, so the constraint is: x + y <= 100.\n- At least 10 seats need to be premium, leading to the constraint: x >= 10.\n- At least 5 times as many people prefer regular seats to premium seats, resulting in the constraint: y >= 5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 20y\nConstraints:\nx + y <= 100\nx >= 10\ny >= 5x", "canonical": {"objective": [-40.0, -20.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -10.0], [5.0, -1.0, 0.0]]}, "solution": {"x": 16, "y": 84}, "pseudo_model": "\nDecision Variables:\n- Number of premium seats sold: PremiumSeats\n- Number of regular seats sold: RegularSeats\n\nConstraints:\n- Total number of seats (premium + regular) should not exceed 100:\n  PremiumSeats + RegularSeats <= 100\n- At least 10 seats must be premium:\n  PremiumSeats >= 10\n- At least 5 times as many people prefer regular seats to premium seats:\n  RegularSeats >= 5 * PremiumSeats\n\nObjective:\n- Maximize profit ($40 profit per premium seat, $20 profit per regular seat):\n  40 * PremiumSeats + 20 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumSeats = intvar(0, 999999999)  # Number of premium seats sold\nRegularSeats = intvar(0, 999999999)  # Number of regular seats sold\n\n# Constraints\nm = Model()\n\n# Total number of seats on the bus is 100:\nm += PremiumSeats + RegularSeats <= 100\n# At least 10 seats must be premium:\nm += PremiumSeats >= 10\n# At least 5 times as many people prefer regular seats to premium seats:\nm += RegularSeats >= 5 * PremiumSeats\n\n# Objective\n# Maximize profit ($40 profit per premium seat, $20 profit per regular seat):\nm.maximize(40 * PremiumSeats + 20 * RegularSeats)\n", "entities": [{"start": 11, "end": 14, "word": "has", "entity_group": "CONST_DIR", "score": 0.9950044070613618}, {"start": 15, "end": 18, "word": "100", "entity_group": "LIMIT", "score": 0.9988955385793051}, {"start": 27, "end": 40, "word": "premium seats", "entity_group": "VAR", "score": 0.9999781151777101}, {"start": 56, "end": 69, "word": "regular seats", "entity_group": "VAR", "score": 0.9999763033674303}, {"start": 74, "end": 80, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999435964364892}, {"start": 86, "end": 88, "word": "40", "entity_group": "PARAM", "score": 0.9994713775704511}, {"start": 105, "end": 117, "word": "premium seat", "entity_group": "VAR", "score": 0.9999464491743972}, {"start": 124, "end": 130, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999365481094128}, {"start": 136, "end": 138, "word": "20", "entity_group": "PARAM", "score": 0.9995013125382562}, {"start": 155, "end": 167, "word": "regular seat", "entity_group": "VAR", "score": 0.9999519216632355}, {"start": 192, "end": 200, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987570330297177}, {"start": 201, "end": 203, "word": "10", "entity_group": "LIMIT", "score": 0.9996641054032939}, {"start": 216, "end": 223, "word": "premium", "entity_group": "VAR", "score": 0.999700994399251}, {"start": 274, "end": 282, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981032788349709}, {"start": 283, "end": 284, "word": "5", "entity_group": "PARAM", "score": 0.9988902455096016}, {"start": 313, "end": 326, "word": "regular seats", "entity_group": "VAR", "score": 0.9999523511327805}, {"start": 330, "end": 343, "word": "premium seats", "entity_group": "VAR", "score": 0.9999651855272752}, {"start": 394, "end": 402, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800939923}, {"start": 403, "end": 409, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999914730623649}]}
{"doc_id": "-1045601007", "document": "A small bakery has 1000 grams of batter and 800 grams of milk to make their soft, smooth, and crunchy cake-pops. A soft cake-pop needs 20 grams of batter and 10 grams of milk. A smooth cake-pop requires 15 grams of batter and 15 grams of milk. A crunchy cake-pop requires 12 grams of batter and 18 grams of milk. If the profit per soft cake-pop is $4, the profit per smooth cake-pop is $6, and the profit per crunchy cake-pop is $5, how many of each should the bakery make to maximize their profit?", "order_mapping": {"soft": 0, "smooth": 1, "crunchy": 2, "soft cake-pop": 0, "smooth cake-pop": 1, "crunchy cake-pop": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"soft cake-pop": "4", "smooth cake-pop": "6", "crunchy cake-pop": "5"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"soft cake-pop": "20", "smooth cake-pop": "15", "crunchy cake-pop": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "800", "terms": {"soft cake-pop": "10", "smooth cake-pop": "15", "crunchy cake-pop": "18"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of soft cake-pops\n- y: Number of smooth cake-pops\n- z: Number of crunchy cake-pops\n\nObjective:\n- The bakery aims to maximize its profit. The profit per soft cake-pop is $4, the profit per smooth cake-pop is $6, and the profit per crunchy cake-pop is $5. Therefore, the objective function is: Maximize 4x + 6y + 5z\n\nConstraints:\n- The bakery has 1000 grams of batter, leading to the constraint: 20x + 15y + 12z <= 1000.\n- The bakery has 800 grams of milk, leading to the constraint: 10x + 15y + 18z <= 800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 6y + 5z\nConstraints:\n20x + 15y + 12z <= 1000\n10x + 15y + 18z <= 800", "canonical": {"objective": [-4.0, -6.0, -5.0], "constraints": [[20.0, 15.0, 12.0, 1000.0], [10.0, 15.0, 18.0, 800.0]]}, "solution": {"x": 20, "y": 40, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of soft cake-pops: SoftCakePop\n- Number of smooth cake-pops: SmoothCakePop\n- Number of crunchy cake-pops: CrunchyCakePop\n\nConstraints:\n- Total grams of batter used should not exceed 1000 grams:\n  20 * SoftCakePop + 15 * SmoothCakePop + 12 * CrunchyCakePop <= 1000\n- Total grams of milk used should not exceed 800 grams:\n  10 * SoftCakePop + 15 * SmoothCakePop + 18 * CrunchyCakePop <= 800\n\nObjective:\n- Maximize profit (4 dollars per soft cake-pop, 6 dollars per smooth cake-pop, 5 dollars per crunchy cake-pop):\n  4 * SoftCakePop + 6 * SmoothCakePop + 5 * CrunchyCakePop\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSoftCakePop = intvar(0, 999999999)  # Number of soft cake-pops\nSmoothCakePop = intvar(0, 999999999)  # Number of smooth cake-pops\nCrunchyCakePop = intvar(0, 999999999)  # Number of crunchy cake-pops\n\n# Constraints\nm = Model()\n\n# Total grams of batter used should not exceed 1000 grams:\nm += 20 * SoftCakePop + 15 * SmoothCakePop + 12 * CrunchyCakePop <= 1000\n# Total grams of milk used should not exceed 800 grams:\nm += 10 * SoftCakePop + 15 * SmoothCakePop + 18 * CrunchyCakePop <= 800\n\n# Objective\n# Maximize profit (4 dollars per soft cake-pop, 6 dollars per smooth cake-pop, 5 dollars per crunchy cake-pop):\nm.maximize(4 * SoftCakePop + 6 * SmoothCakePop + 5 * CrunchyCakePop)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.9972339060704544}, {"start": 19, "end": 23, "word": "1000", "entity_group": "LIMIT", "score": 0.9990259871615312}, {"start": 44, "end": 47, "word": "800", "entity_group": "LIMIT", "score": 0.9996655219472991}, {"start": 76, "end": 80, "word": "soft", "entity_group": "VAR", "score": 0.9998024126725029}, {"start": 83, "end": 89, "word": "smooth", "entity_group": "VAR", "score": 0.9997088354596071}, {"start": 96, "end": 103, "word": "crunchy", "entity_group": "VAR", "score": 0.999613573844964}, {"start": 120, "end": 135, "word": "soft cake - pop", "entity_group": "VAR", "score": 0.9982062500565818}, {"start": 142, "end": 144, "word": "20", "entity_group": "PARAM", "score": 0.9997339082209734}, {"start": 165, "end": 167, "word": "10", "entity_group": "PARAM", "score": 0.9997194331226479}, {"start": 186, "end": 203, "word": "smooth cake - pop", "entity_group": "VAR", "score": 0.9988617564074815}, {"start": 213, "end": 215, "word": "15", "entity_group": "PARAM", "score": 0.9997339668326993}, {"start": 236, "end": 238, "word": "15", "entity_group": "PARAM", "score": 0.9996977576574171}, {"start": 257, "end": 275, "word": "crunchy cake - pop", "entity_group": "VAR", "score": 0.9988617564074815}, {"start": 285, "end": 287, "word": "12", "entity_group": "PARAM", "score": 0.9997339668326993}, {"start": 308, "end": 310, "word": "18", "entity_group": "PARAM", "score": 0.9996514616592052}, {"start": 334, "end": 340, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999854100549891}, {"start": 345, "end": 360, "word": "soft cake - pop", "entity_group": "VAR", "score": 0.9952194513707545}, {"start": 366, "end": 367, "word": "4", "entity_group": "PARAM", "score": 0.9996196441073462}, {"start": 374, "end": 380, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998490608261269}, {"start": 385, "end": 402, "word": "smooth cake - pop", "entity_group": "VAR", "score": 0.9919587016805356}, {"start": 408, "end": 409, "word": "6", "entity_group": "PARAM", "score": 0.9996552666335187}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997878096179507}, {"start": 431, "end": 449, "word": "crunchy cake - pop", "entity_group": "VAR", "score": 0.995117579661272}, {"start": 455, "end": 456, "word": "5", "entity_group": "PARAM", "score": 0.9995285481017567}, {"start": 502, "end": 510, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996596147415538}, {"start": 517, "end": 523, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999855339928181}]}
{"doc_id": "1522122834", "document": "A man has 300 acres of land on which he grows oak and elm trees. He must grow at least 50 acres of oak trees and at least 70 acres of elm trees. He prefers to grow elm trees but can grow at most 2 times the amount of elm trees as oak trees. If the profit per acre of oak trees is $1000 and the profit per acre of elm trees is $1200, how many acres of each should he grow to maximize profit?", "order_mapping": {"oak": 0, "elm trees": 1, "oak trees": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"oak trees": "1000", "elm trees": "1200"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "oak trees", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "70", "var": "elm trees", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "elm trees", "direction": "at most", "param": "2", "y_var": "oak trees", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of oak trees\n- y: Acres of elm trees\n\nObjective:\n- The man aims to maximize his profit. The profit per acre of oak trees is $1000 and the profit per acre of elm trees is $1200. Therefore, the objective function is: Maximize 1000x + 1200y\n\nConstraints:\n- The man has 300 acres of land available for growing trees, so the constraint is: x + y <= 300.\n- He must grow at least 50 acres of oak trees, leading to the constraint: x >= 50.\n- He must grow at least 70 acres of elm trees, resulting in the constraint: y >= 70.\n- He can grow at most 2 times the amount of elm trees as oak trees, leading to the constraint: y <= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1000x + 1200y\nConstraints:\nx + y <= 300\nx >= 50\ny >= 70\ny <= 2x", "canonical": {"objective": [-1000.0, -1200.0], "constraints": [[1.0, 1.0, 300.0], [-1.0, 0.0, -50.0], [0.0, -1.0, -70.0], [-2.0, 1.0, 0.0]]}, "solution": {"x": 100, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of acres of oak trees: OakTrees\n- Number of acres of elm trees: ElmTrees\n\nConstraints:\n- Total acres used should not exceed 300:\n  OakTrees + ElmTrees <= 300\n- At least 50 acres of oak trees:\n  OakTrees >= 50\n- At least 70 acres of elm trees:\n  ElmTrees >= 70\n- Can grow at most 2 times the amount of elm trees as oak trees:\n  ElmTrees <= 2 * OakTrees\n\nObjective:\n- Maximize profit (1000 dollars per acre of oak trees, 1200 dollars per acre of elm trees):\n  1000 * OakTrees + 1200 * ElmTrees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOakTrees = intvar(0, 999999999)  # Number of acres of oak trees\nElmTrees = intvar(0, 999999999)  # Number of acres of elm trees\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 300:\nm += OakTrees + ElmTrees <= 300\n# At least 50 acres of oak trees:\nm += OakTrees >= 50\n# At least 70 acres of elm trees:\nm += ElmTrees >= 70\n# Can grow at most 2 times the amount of elm trees as oak trees:\nm += ElmTrees <= 2 * OakTrees\n\n# Objective\n# Maximize profit (1000 dollars per acre of oak trees, 1200 dollars per acre of elm trees):\nm.maximize(1000 * OakTrees + 1200 * ElmTrees)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9915988477358031}, {"start": 10, "end": 13, "word": "300", "entity_group": "LIMIT", "score": 0.9987138393223592}, {"start": 46, "end": 49, "word": "oak", "entity_group": "VAR", "score": 0.9969149038138916}, {"start": 54, "end": 63, "word": "elm trees", "entity_group": "VAR", "score": 0.999966043632622}, {"start": 79, "end": 87, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989220613715031}, {"start": 88, "end": 90, "word": "50", "entity_group": "LIMIT", "score": 0.9996783840537778}, {"start": 100, "end": 109, "word": "oak trees", "entity_group": "VAR", "score": 0.9999685839531116}, {"start": 114, "end": 122, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987423323602356}, {"start": 123, "end": 125, "word": "70", "entity_group": "LIMIT", "score": 0.999694745959959}, {"start": 135, "end": 144, "word": "elm trees", "entity_group": "VAR", "score": 0.9999683086209422}, {"start": 166, "end": 175, "word": "elm trees", "entity_group": "VAR", "score": 0.9999602905848393}, {"start": 189, "end": 196, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9949843219184001}, {"start": 197, "end": 198, "word": "2", "entity_group": "PARAM", "score": 0.9980551261860976}, {"start": 219, "end": 228, "word": "elm trees", "entity_group": "VAR", "score": 0.9999084623722256}, {"start": 232, "end": 241, "word": "oak trees", "entity_group": "VAR", "score": 0.999973133927077}, {"start": 251, "end": 257, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996903975177268}, {"start": 270, "end": 279, "word": "oak trees", "entity_group": "VAR", "score": 0.9999586111301935}, {"start": 285, "end": 289, "word": "1000", "entity_group": "PARAM", "score": 0.9994216566933685}, {"start": 298, "end": 304, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998952330906671}, {"start": 317, "end": 326, "word": "elm trees", "entity_group": "VAR", "score": 0.9999262413106228}, {"start": 332, "end": 336, "word": "1200", "entity_group": "PARAM", "score": 0.9996456676159708}, {"start": 380, "end": 388, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997390052708541}, {"start": 389, "end": 395, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274898363786}]}
{"doc_id": "817947649", "document": "An auto plant makes cars and trucks. Each car takes 2 hours on the assembly line and 1 hour of mechanic time. Each truck takes 2.5 hours on the assembly line and 1.5 hours of mechanic time. There are 800 hours of assembly line time available and 600 hours of mechanic time available. If the profit per car is $5000 and the profit per truck is $8000, how many of each should the plant make to maximize profit?", "order_mapping": {"cars": 0, "trucks": 1, "car": 0, "truck": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"truck": "8000", "car": "5000"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "800", "terms": {"car": "2", "truck": "2.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"car": "1", "truck": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cars\n- y: Number of trucks\n\nObjective:\n- The plant aims to maximize its profit. The profit per car is $5000 and the profit per truck is $8000. Therefore, the objective function is: Maximize 5000x + 8000y\n\nConstraints:\n- The available assembly line time is 800 hours, and each car takes 2 hours and each truck takes 2.5 hours. This leads to the constraint: 2x + 2.5y <= 800.\n- The available mechanic time is 600 hours, and each car takes 1 hour and each truck takes 1.5 hours. This results in the constraint: x + 1.5y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5000x + 8000y\nConstraints:\n2x + 2.5y <= 800\nx + 1.5y <= 600", "canonical": {"objective": [-5000.0, -8000.0], "constraints": [[2.0, 2.5, 800.0], [1.0, 1.5, 600.0]]}, "solution": {"x": 0, "y": 320}, "pseudo_model": "\nDecision Variables:\n- Number of cars produced: Cars\n- Number of trucks produced: Trucks\n\nConstraints:\n- Assembly line time for cars and trucks should not exceed 800 hours:\n  2 * Cars + 2.5 * Trucks <= 800\n- Mechanic time for cars and trucks should not exceed 600 hours:\n  1 * Cars + 1.5 * Trucks <= 600\n\nObjective:\n- Maximize profit ($5000 profit per car, $8000 profit per truck):\n  5000 * Cars + 8000 * Trucks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCars = intvar(0, 999999999)  # Number of cars produced\nTrucks = intvar(0, 999999999)  # Number of trucks produced\n\n# Constraints\nm = Model()\n\n# Assembly line time constraint (800 hours available):\nm += 2 * Cars + 2.5 * Trucks <= 800\n# Mechanic time constraint (600 hours available):\nm += 1 * Cars + 1.5 * Trucks <= 600\n\n# Objective\n# Maximize profit ($5000 per car, $8000 per truck):\nm.maximize(5000 * Cars + 8000 * Trucks)\n", "entities": [{"start": 20, "end": 24, "word": "cars", "entity_group": "VAR", "score": 0.9996274647107932}, {"start": 29, "end": 35, "word": "trucks", "entity_group": "VAR", "score": 0.9997027235302084}, {"start": 43, "end": 46, "word": "car", "entity_group": "VAR", "score": 0.9996115603915284}, {"start": 53, "end": 54, "word": "2", "entity_group": "PARAM", "score": 0.9996265685428666}, {"start": 86, "end": 87, "word": "1", "entity_group": "PARAM", "score": 0.9990048817334671}, {"start": 117, "end": 122, "word": "truck", "entity_group": "VAR", "score": 0.9997521521814181}, {"start": 129, "end": 132, "word": "2.5", "entity_group": "PARAM", "score": 0.999523717428629}, {"start": 164, "end": 167, "word": "1.5", "entity_group": "PARAM", "score": 0.9996294676858736}, {"start": 203, "end": 206, "word": "800", "entity_group": "LIMIT", "score": 0.9997067966006691}, {"start": 235, "end": 244, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986518643694453}, {"start": 249, "end": 252, "word": "600", "entity_group": "LIMIT", "score": 0.9996490819604591}, {"start": 276, "end": 285, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991820064092739}, {"start": 295, "end": 301, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996873298309608}, {"start": 306, "end": 309, "word": "car", "entity_group": "VAR", "score": 0.9989614313991056}, {"start": 315, "end": 319, "word": "5000", "entity_group": "PARAM", "score": 0.9993478219777278}, {"start": 328, "end": 334, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999781520447773}, {"start": 339, "end": 344, "word": "truck", "entity_group": "VAR", "score": 0.9990888329815354}, {"start": 350, "end": 354, "word": "8000", "entity_group": "PARAM", "score": 0.9994707412182505}, {"start": 399, "end": 407, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 408, "end": 414, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "1666945837", "document": "A maple farm makes maple syrup and maple candy. They can make at most 10 kg of maple syrup and at most 12 kg of maple candy. In addition, they must supply at least 3 kg of maple syrup and 5 kg of maple candy per day. Both require time in a maple boiling station. Each kg of maple syrup and maple candy requires 2 hours at the boiling station. The boiling station is available for at most 20 hours per day. If the profit per kg of maple syrup is $20 and the profit per kg of maple candy is $15, how many kg of each should be made to maximize profit?", "order_mapping": {"maple syrup": 0, "maple candy": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"maple syrup": "20", "maple candy": "15"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "10", "var": "maple syrup", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12", "var": "maple candy", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "maple syrup", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "maple candy", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "20", "terms": {"maple syrup": "2", "maple candy": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of maple syrup\n- y: kg of maple candy\n\nObjective:\n- The maple farm aims to maximize its profit. The profit per kg of maple syrup is $20 and the profit per kg of maple candy is $15. Therefore, the objective function is: Maximize 20x + 15y\n\nConstraints:\n- The maple farm can make at most 10 kg of maple syrup, leading to the constraint: x <= 10.\n- The maple farm can make at most 12 kg of maple candy, leading to the constraint: y <= 12.\n- The maple farm must supply at least 3 kg of maple syrup, leading to the constraint: x >= 3.\n- The maple farm must supply at least 5 kg of maple candy, leading to the constraint: y >= 5.\n- Both maple syrup and maple candy require time in the boiling station. Each kg of maple syrup and maple candy requires 2 hours at the boiling station, and the boiling station is available for at most 20 hours per day. This leads to the constraint: 2x + 2y <= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 15y\nConstraints:\nx <= 10\ny <= 12\nx >= 3\ny >= 5\n2x + 2y <= 20", "canonical": {"objective": [-20.0, -15.0], "constraints": [[1.0, 0.0, 10.0], [0.0, 1.0, 12.0], [-1.0, 0.0, -3.0], [0.0, -1.0, -5.0], [2.0, 2.0, 20.0]]}, "solution": {"x": 5, "y": 5}, "pseudo_model": "\nDecision Variables:\n- kg of maple syrup made per day: MapleSyrup\n- kg of maple candy made per day: MapleCandy\n\nConstraints:\n- At most 10 kg of maple syrup can be made per day:\n  MapleSyrup <= 10\n- At most 12 kg of maple candy can be made per day:\n  MapleCandy <= 12\n- At least 3 kg of maple syrup must be made per day:\n  MapleSyrup >= 3\n- At least 5 kg of maple candy must be made per day:\n  MapleCandy >= 5\n- The boiling station is available for at most 20 hours per day (2 hours per kg for both maple syrup and candy):\n  2 * MapleSyrup + 2 * MapleCandy <= 20\n\nObjective:\n- Maximize profit ($20 per kg of maple syrup, $15 per kg of maple candy):\n  20 * MapleSyrup + 15 * MapleCandy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMapleSyrup = intvar(0, 999999999)  # kg of maple syrup made per day\nMapleCandy = intvar(0, 999999999)  # kg of maple candy made per day\n\n# Constraints\nm = Model()\n\n# At most 10 kg of maple syrup can be made per day:\nm += MapleSyrup <= 10\n# At most 12 kg of maple candy can be made per day:\nm += MapleCandy <= 12\n# At least 3 kg of maple syrup must be made per day:\nm += MapleSyrup >= 3\n# At least 5 kg of maple candy must be made per day:\nm += MapleCandy >= 5\n# The boiling station is available for at most 20 hours per day (2 hours per kg for both maple syrup and candy):\nm += 2 * MapleSyrup + 2 * MapleCandy <= 20\n\n# Objective\n# Maximize profit ($20 per kg of maple syrup, $15 per kg of maple candy):\nm.maximize(20 * MapleSyrup + 15 * MapleCandy)\n", "entities": [{"start": 19, "end": 30, "word": "maple syrup", "entity_group": "VAR", "score": 0.9999595244592169}, {"start": 35, "end": 46, "word": "maple candy", "entity_group": "VAR", "score": 0.9999859281743113}, {"start": 63, "end": 70, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985950608098147}, {"start": 71, "end": 73, "word": "10", "entity_group": "LIMIT", "score": 0.9996568194005849}, {"start": 80, "end": 91, "word": "maple syrup", "entity_group": "VAR", "score": 0.9999640279920076}, {"start": 96, "end": 103, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987466063476022}, {"start": 104, "end": 106, "word": "12", "entity_group": "LIMIT", "score": 0.9996665837137287}, {"start": 113, "end": 124, "word": "maple candy", "entity_group": "VAR", "score": 0.9999644878631109}, {"start": 158, "end": 166, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989191111244816}, {"start": 167, "end": 168, "word": "3", "entity_group": "LIMIT", "score": 0.9997030020214838}, {"start": 175, "end": 186, "word": "maple syrup", "entity_group": "VAR", "score": 0.9999832979655674}, {"start": 191, "end": 192, "word": "5", "entity_group": "LIMIT", "score": 0.9995803854534376}, {"start": 199, "end": 210, "word": "maple candy", "entity_group": "VAR", "score": 0.9999739757689348}, {"start": 279, "end": 290, "word": "maple syrup", "entity_group": "VAR", "score": 0.9999836551033287}, {"start": 295, "end": 306, "word": "maple candy", "entity_group": "VAR", "score": 0.999972318667142}, {"start": 316, "end": 317, "word": "2", "entity_group": "PARAM", "score": 0.999489355949255}, {"start": 386, "end": 393, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986451452898032}, {"start": 394, "end": 396, "word": "20", "entity_group": "LIMIT", "score": 0.9997627010834745}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999078006291046}, {"start": 437, "end": 448, "word": "maple syrup", "entity_group": "VAR", "score": 0.9999552834260977}, {"start": 454, "end": 456, "word": "20", "entity_group": "PARAM", "score": 0.9985248550853182}, {"start": 465, "end": 471, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999132926808517}, {"start": 482, "end": 493, "word": "maple candy", "entity_group": "VAR", "score": 0.9999535227934734}, {"start": 499, "end": 501, "word": "15", "entity_group": "PARAM", "score": 0.999534341598525}, {"start": 542, "end": 550, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761860848008}, {"start": 551, "end": 557, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907907846}]}
{"doc_id": "-1755932279", "document": "A man takes two supplements to get his keratin and calcium requirements. He needs at least 12 units of keratin and 20 units of calcium. Per serving, supplement A contains 1 unit of keratin and 5 units of calcium. Per serving, supplement B contains 4 units of keratin and 1 unit of calcium. If the cost per serving for supplement A is $2 and the cost per serving of supplement B is $4, how many of each supplement should he take to minimize his cost?", "order_mapping": {"supplement A": 0, "supplement B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"supplement A": "2", "supplement B": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "12", "terms": {"supplement A": "1", "supplement B": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"supplement A": "5", "supplement B": "1"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of supplement A\n- y: Number of servings of supplement B\n\nObjective:\n- The man wants to minimize his cost. The cost per serving for supplement A is $2 and the cost per serving of supplement B is $4. Therefore, the objective function is: Minimize 2x + 4y\n\nConstraints:\n- He needs at least 12 units of keratin, which can be expressed as: x + 4y >= 12\n- He needs at least 20 units of calcium, which can be expressed as: 5x + y >= 20\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 4y\nConstraints:\nx + 4y >= 12\n5x + y >= 20", "canonical": {"objective": [2.0, 4.0], "constraints": [[-1.0, -4.0, -12.0], [-5.0, -1.0, -20.0]]}, "solution": {"x": 4, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of servings of supplement A: SupplementA\n- Number of servings of supplement B: SupplementB\n\nConstraints:\n- At least 12 units of keratin required:\n  1 * SupplementA + 4 * SupplementB >= 12\n- At least 20 units of calcium required:\n  5 * SupplementA + 1 * SupplementB >= 20\n\nObjective:\n- Minimize cost (2 dollars per serving of supplement A, 4 dollars per serving of supplement B):\n  2 * SupplementA + 4 * SupplementB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSupplementA = intvar(0, 999999999)  # Number of servings of supplement A\nSupplementB = intvar(0, 999999999)  # Number of servings of supplement B\n\n# Constraints\nm = Model()\n\n# The man needs at least 12 units of keratin:\nm += 1 * SupplementA + 4 * SupplementB >= 12\n# The man needs at least 20 units of calcium:\nm += 5 * SupplementA + 1 * SupplementB >= 20\n\n# Objective\n# Minimize cost (2 dollars per serving of supplement A, 4 dollars per serving of supplement B):\nm.minimize(2 * SupplementA + 4 * SupplementB)\n", "entities": [{"start": 83, "end": 91, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991997393986328}, {"start": 92, "end": 94, "word": "12", "entity_group": "LIMIT", "score": 0.9997717499812089}, {"start": 116, "end": 118, "word": "20", "entity_group": "LIMIT", "score": 0.9995869216844457}, {"start": 152, "end": 164, "word": "supplement A", "entity_group": "VAR", "score": 0.9999289997654696}, {"start": 174, "end": 175, "word": "1", "entity_group": "PARAM", "score": 0.9991901724643834}, {"start": 196, "end": 197, "word": "5", "entity_group": "PARAM", "score": 0.9996048046318369}, {"start": 231, "end": 243, "word": "supplement B", "entity_group": "VAR", "score": 0.9999366039720913}, {"start": 253, "end": 254, "word": "4", "entity_group": "PARAM", "score": 0.9996503045026797}, {"start": 276, "end": 277, "word": "1", "entity_group": "PARAM", "score": 0.9993709690228407}, {"start": 303, "end": 307, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984040642056311}, {"start": 324, "end": 336, "word": "supplement A", "entity_group": "VAR", "score": 0.9996947299121044}, {"start": 342, "end": 343, "word": "2", "entity_group": "PARAM", "score": 0.9996114965807239}, {"start": 352, "end": 356, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9963700332381732}, {"start": 372, "end": 384, "word": "supplement B", "entity_group": "VAR", "score": 0.9994830995667404}, {"start": 390, "end": 391, "word": "4", "entity_group": "PARAM", "score": 0.99970724589967}, {"start": 440, "end": 448, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993355454121572}, {"start": 453, "end": 457, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989832574467717}]}
{"doc_id": "-77615391", "document": "An office chair company makes leather and mesh chairs. Two different teams make the chairs. Team A who make the leather chairs can make at most 20 a day. Team B who make the mesh chairs can make at most 30 a day. Both chairs have to be quality checked by another team, and this team can quality check at most 30 chairs of either type per day. If the profit per leather chair is $150 and the profit per mesh chair is $100, how many of each should the company make to maximize profit?", "order_mapping": {"leather": 0, "mesh chairs": 1, "leather chairs": 0, "leather chair": 0, "mesh chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"leather chair": "150", "mesh chair": "100"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "20", "var": "leather chairs", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "30", "var": "mesh chairs", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of leather chairs produced\n- y: Number of mesh chairs produced\n\nObjective:\n- The company aims to maximize its profit. The profit per leather chair is $150 and the profit per mesh chair is $100. Therefore, the objective function is: Maximize 150x + 100y\n\nConstraints:\n- Team A can make at most 20 leather chairs a day, leading to the constraint: x <= 20.\n- Team B can make at most 30 mesh chairs a day, leading to the constraint: y <= 30.\n- The quality check team can quality check at most 30 chairs of either type per day, resulting in the constraint: x + y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 100y\nConstraints:\nx <= 20\ny <= 30\nx + y <= 30", "canonical": {"objective": [-150.0, -100.0], "constraints": [[1.0, 0.0, 20.0], [0.0, 1.0, 30.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 20, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of leather chairs made per day: LeatherChairs\n- Number of mesh chairs made per day: MeshChairs\n\nConstraints:\n- Team A can make at most 20 leather chairs a day:\n  LeatherChairs <= 20\n- Team B can make at most 30 mesh chairs a day:\n  MeshChairs <= 30\n- The quality check team can check at most 30 chairs of either type per day:\n  LeatherChairs + MeshChairs <= 30\n\nObjective:\n- Maximize profit (150 dollars per leather chair, 100 dollars per mesh chair):\n  150 * LeatherChairs + 100 * MeshChairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLeatherChairs = intvar(0, 999999999)  # Number of leather chairs made per day\nMeshChairs = intvar(0, 999999999)  # Number of mesh chairs made per day\n\n# Constraints\nm = Model()\n\n# Team A can make at most 20 leather chairs a day:\nm += LeatherChairs <= 20\n# Team B can make at most 30 mesh chairs a day:\nm += MeshChairs <= 30\n# The quality check team can check at most 30 chairs of either type per day:\nm += LeatherChairs + MeshChairs <= 30\n\n# Objective\n# Maximize profit (150 dollars per leather chair, 100 dollars per mesh chair):\nm.maximize(150 * LeatherChairs + 100 * MeshChairs)\n", "entities": [{"start": 30, "end": 37, "word": "leather", "entity_group": "VAR", "score": 0.9978639984143329}, {"start": 42, "end": 53, "word": "mesh chairs", "entity_group": "VAR", "score": 0.9999764153231472}, {"start": 114, "end": 128, "word": "leather chairs", "entity_group": "VAR", "score": 0.9999007104147085}, {"start": 138, "end": 145, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9978184313197695}, {"start": 146, "end": 148, "word": "20", "entity_group": "LIMIT", "score": 0.9994335157929388}, {"start": 177, "end": 188, "word": "mesh chairs", "entity_group": "VAR", "score": 0.999822512323849}, {"start": 198, "end": 205, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9975627656063736}, {"start": 206, "end": 208, "word": "30", "entity_group": "LIMIT", "score": 0.9987523020021883}, {"start": 306, "end": 313, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990160821438644}, {"start": 314, "end": 316, "word": "30", "entity_group": "LIMIT", "score": 0.9997297559375246}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999281962308707}, {"start": 367, "end": 380, "word": "leather chair", "entity_group": "VAR", "score": 0.999947418555834}, {"start": 386, "end": 389, "word": "150", "entity_group": "PARAM", "score": 0.9996126246185217}, {"start": 398, "end": 404, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384728319136}, {"start": 409, "end": 419, "word": "mesh chair", "entity_group": "VAR", "score": 0.9999447164715616}, {"start": 425, "end": 428, "word": "100", "entity_group": "PARAM", "score": 0.9996757786827882}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 484, "end": 490, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-2143757724", "document": "A store sells two bowls of ramen. Bowl 1 requires 2 units of broth and 2 units of toppings. Bowl 2 requires 3 units of broth and 1 unit of toppings. The store has available 300 units of broth and 250 units of toppings. Formulate a LP to maximize the number of bowls of either type that can be made.", "order_mapping": {"Bowl 1": 0, "Bowl 2": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of bowls", "vars": ["Bowl 1", "Bowl 2"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"Bowl 1": "2", "Bowl 2": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "250", "terms": {"Bowl 1": "2", "Bowl 2": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bowls of type 1\n- y: Number of bowls of type 2\n\nObjective:\n- The store aims to maximize the number of bowls of either type that can be made. Therefore, the objective function is: Maximize x + y\n\nConstraints:\n- The store has 300 units of broth available, and each bowl of type 1 requires 2 units and each bowl of type 2 requires 3 units. This leads to the constraint: 2x + 3y <= 300.\n- The store has 250 units of toppings available, and each bowl of type 1 requires 2 units and each bowl of type 2 requires 1 unit. This leads to the constraint: 2x + y <= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + y\nConstraints:\n2x + 3y <= 300\n2x + y <= 250", "canonical": {"objective": [-1.0, -1.0], "constraints": [[2.0, 3.0, 300.0], [2.0, 1.0, 250.0]]}, "solution": {"x": 113, "y": 24}, "pseudo_model": "\nDecision Variables:\n- Number of Bowl 1 made: Bowl1\n- Number of Bowl 2 made: Bowl2\n\nConstraints:\n- The store has available 300 units of broth:\n  2 * Bowl1 + 3 * Bowl2 <= 300\n- The store has available 250 units of toppings:\n  2 * Bowl1 + 1 * Bowl2 <= 250\n\nObjective:\n- Maximize the number of bowls of either type that can be made:\n  Bowl1 + Bowl2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBowl1 = intvar(0, 999999999)  # Number of Bowl 1 made\nBowl2 = intvar(0, 999999999)  # Number of Bowl 2 made\n\n# Constraints\nm = Model()\n\n# The store has available 300 units of broth:\nm += 2 * Bowl1 + 3 * Bowl2 <= 300\n# The store has available 250 units of toppings:\nm += 2 * Bowl1 + 1 * Bowl2 <= 250\n\n# Objective\n# Maximize the number of bowls of either type that can be made:\nm.maximize(Bowl1 + Bowl2)\n", "entities": [{"start": 35, "end": 41, "word": "Bowl 1", "entity_group": "VAR", "score": 0.9998422881888966}, {"start": 51, "end": 52, "word": "2", "entity_group": "PARAM", "score": 0.9996599117184414}, {"start": 72, "end": 73, "word": "2", "entity_group": "PARAM", "score": 0.9997275900919016}, {"start": 94, "end": 100, "word": "Bowl 2", "entity_group": "VAR", "score": 0.9998255726097277}, {"start": 110, "end": 111, "word": "3", "entity_group": "PARAM", "score": 0.9996936458060893}, {"start": 131, "end": 132, "word": "1", "entity_group": "PARAM", "score": 0.9993865187423177}, {"start": 166, "end": 175, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987671217878668}, {"start": 176, "end": 179, "word": "300", "entity_group": "LIMIT", "score": 0.999408495883438}, {"start": 199, "end": 202, "word": "250", "entity_group": "LIMIT", "score": 0.9995959636144788}, {"start": 241, "end": 249, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993776691337066}, {"start": 254, "end": 269, "word": "number of bowls", "entity_group": "OBJ_NAME", "score": 0.9731959969216367}]}
{"doc_id": "-1178157806", "document": "A factory sells fabric in two packages. Package 1 contains 20 meters of blue fabric and 30 meters of red fabric. Package 2 contains 40 meters of blue fabric and 40 meters of red fabric. The factory has 10000 meters of blue fabric and 12000 meters of red fabric. If the profit per package 1 is $50 and the profit per package 2 is $70, how many of each package should they sell to maximize profit?", "order_mapping": {"Package 1": 0, "Package 2": 1, "package 1": 0, "package 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"package 1": "50", "package 2": "70"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "10000", "terms": {"Package 1": "20", "Package 2": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "12000", "terms": {"Package 1": "30", "Package 2": "40"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Package 1 sold\n- y: Number of Package 2 sold\n\nObjective:\n- The factory aims to maximize its profit. The profit per Package 1 is $50 and the profit per Package 2 is $70. Therefore, the objective function is: Maximize 50x + 70y\n\nConstraints:\n- The factory has 10000 meters of blue fabric, and each Package 1 contains 20 meters and each Package 2 contains 40 meters. This leads to the constraint: 20x + 40y <= 10000.\n- The factory has 12000 meters of red fabric, and each Package 1 contains 30 meters and each Package 2 contains 40 meters. This leads to the constraint: 30x + 40y <= 12000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 70y\nConstraints:\n20x + 40y <= 10000\n30x + 40y <= 12000", "canonical": {"objective": [-50.0, -70.0], "constraints": [[20.0, 40.0, 10000.0], [30.0, 40.0, 12000.0]]}, "solution": {"x": 200, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of Package 1 sold: Package1\n- Number of Package 2 sold: Package2\n\nConstraints:\n- Total blue fabric used should not exceed 10000 meters:\n  20 * Package1 + 40 * Package2 <= 10000\n- Total red fabric used should not exceed 12000 meters:\n  30 * Package1 + 40 * Package2 <= 12000\n\nObjective:\n- Maximize profit ($50 per Package 1, $70 per Package 2):\n  50 * Package1 + 70 * Package2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPackage1 = intvar(0, 999999999)  # Number of Package 1 sold\nPackage2 = intvar(0, 999999999)  # Number of Package 2 sold\n\n# Constraints\nm = Model()\n\n# The factory has 10000 meters of blue fabric:\nm += 20 * Package1 + 40 * Package2 <= 10000\n# The factory has 12000 meters of red fabric:\nm += 30 * Package1 + 40 * Package2 <= 12000\n\n# Objective\n# Maximize profit ($50 per Package 1, $70 per Package 2):\nm.maximize(50 * Package1 + 70 * Package2)\n", "entities": [{"start": 41, "end": 50, "word": "Package 1", "entity_group": "VAR", "score": 0.9998955014217842}, {"start": 60, "end": 62, "word": "20", "entity_group": "PARAM", "score": 0.9997123077497274}, {"start": 89, "end": 91, "word": "30", "entity_group": "PARAM", "score": 0.9996712540643844}, {"start": 115, "end": 124, "word": "Package 2", "entity_group": "VAR", "score": 0.9997979269994891}, {"start": 134, "end": 136, "word": "40", "entity_group": "PARAM", "score": 0.9996969890368558}, {"start": 163, "end": 165, "word": "40", "entity_group": "PARAM", "score": 0.9996170896951994}, {"start": 201, "end": 204, "word": "has", "entity_group": "CONST_DIR", "score": 0.9996277595155825}, {"start": 205, "end": 210, "word": "10000", "entity_group": "LIMIT", "score": 0.998575437307963}, {"start": 237, "end": 242, "word": "12000", "entity_group": "LIMIT", "score": 0.9996592424027613}, {"start": 273, "end": 279, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999178272137631}, {"start": 284, "end": 293, "word": "package 1", "entity_group": "VAR", "score": 0.9997676450576194}, {"start": 299, "end": 301, "word": "50", "entity_group": "PARAM", "score": 0.9996676608275432}, {"start": 310, "end": 316, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998979079291392}, {"start": 321, "end": 330, "word": "package 2", "entity_group": "VAR", "score": 0.9997599750093855}, {"start": 336, "end": 338, "word": "70", "entity_group": "PARAM", "score": 0.999635185220318}, {"start": 386, "end": 394, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995899089792601}, {"start": 395, "end": 401, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269817457224}]}
{"doc_id": "-1720466618", "document": "A company hand fills shampoo and conditioner bottles. Each shampoo bottle takes 3 minutes to fill and each conditioner bottle takes 4 minutes to fill. The company must fill at least 50 shampoo bottles and at least 30 conditioner bottles. The company has 300 minutes available. If the profit per shampoo bottle is $5 and the profit per conditioner bottle is $6, how many of each should be filled in order to maximize profit?", "order_mapping": {"shampoo": 0, "conditioner": 1, "shampoo bottle": 0, "conditioner bottle": 1, "shampoo bottles": 0, "conditioner bottles": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"shampoo bottle": "5", "conditioner bottle": "6"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"shampoo bottle": "3", "conditioner bottle": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "shampoo bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "conditioner bottles", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of shampoo bottles filled\n- y: Number of conditioner bottles filled\n\nObjective:\n- The company aims to maximize its profit. The profit per shampoo bottle is $5 and the profit per conditioner bottle is $6. Therefore, the objective function is: Maximize 5x + 6y\n\nConstraints:\n- The company has 300 minutes available for filling bottles, so the time constraint is: 3x + 4y <= 300.\n- The company must fill at least 50 shampoo bottles, leading to the constraint: x >= 50.\n- The company must fill at least 30 conditioner bottles, leading to the constraint: y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 6y\nConstraints:\n3x + 4y <= 300\nx >= 50\ny >= 30", "canonical": {"objective": [-5.0, -6.0], "constraints": [[3.0, 4.0, 300.0], [-1.0, 0.0, -50.0], [0.0, -1.0, -30.0]]}, "solution": {"x": 60, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of shampoo bottles filled: ShampooBottles\n- Number of conditioner bottles filled: ConditionerBottles\n\nConstraints:\n- Total time to fill shampoo and conditioner bottles should not exceed 300 minutes:\n  3 * ShampooBottles + 4 * ConditionerBottles <= 300\n- At least 50 shampoo bottles must be filled:\n  ShampooBottles >= 50\n- At least 30 conditioner bottles must be filled:\n  ConditionerBottles >= 30\n\nObjective:\n- Maximize profit (5 dollars per shampoo bottle, 6 dollars per conditioner bottle):\n  5 * ShampooBottles + 6 * ConditionerBottles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShampooBottles = intvar(0, 999999999)  # Number of shampoo bottles filled\nConditionerBottles = intvar(0, 999999999)  # Number of conditioner bottles filled\n\n# Constraints\nm = Model()\n\n# The company has 300 minutes available (3 minutes per shampoo bottle, 4 minutes per conditioner bottle):\nm += 3 * ShampooBottles + 4 * ConditionerBottles <= 300\n# The company must fill at least 50 shampoo bottles:\nm += ShampooBottles >= 50\n# The company must fill at least 30 conditioner bottles:\nm += ConditionerBottles >= 30\n\n# Objective\n# Maximize profit (5 dollars per shampoo bottle, 6 dollars per conditioner bottle):\nm.maximize(5 * ShampooBottles + 6 * ConditionerBottles)\n", "entities": [{"start": 21, "end": 28, "word": "shampoo", "entity_group": "VAR", "score": 0.9997028864091668}, {"start": 33, "end": 44, "word": "conditioner", "entity_group": "VAR", "score": 0.9996579269208611}, {"start": 60, "end": 74, "word": "shampoo bottle", "entity_group": "VAR", "score": 0.9999847599871372}, {"start": 81, "end": 82, "word": "3", "entity_group": "PARAM", "score": 0.9996586187502798}, {"start": 108, "end": 126, "word": "conditioner bottle", "entity_group": "VAR", "score": 0.9999781763427658}, {"start": 133, "end": 134, "word": "4", "entity_group": "PARAM", "score": 0.9995779266553019}, {"start": 175, "end": 183, "word": "at least", "entity_group": "CONST_DIR", "score": 0.99884767022093}, {"start": 184, "end": 186, "word": "50", "entity_group": "LIMIT", "score": 0.9995416230823858}, {"start": 187, "end": 202, "word": "shampoo bottles", "entity_group": "VAR", "score": 0.9999495454087782}, {"start": 207, "end": 215, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988529548970156}, {"start": 216, "end": 218, "word": "30", "entity_group": "LIMIT", "score": 0.9994575186401944}, {"start": 219, "end": 238, "word": "conditioner bottles", "entity_group": "VAR", "score": 0.9999612865891258}, {"start": 257, "end": 260, "word": "300", "entity_group": "LIMIT", "score": 0.999202082410874}, {"start": 269, "end": 278, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991935323574006}, {"start": 288, "end": 294, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998613503152051}, {"start": 299, "end": 313, "word": "shampoo bottle", "entity_group": "VAR", "score": 0.9999475181167474}, {"start": 319, "end": 320, "word": "5", "entity_group": "PARAM", "score": 0.9996126243034834}, {"start": 329, "end": 335, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384728319259}, {"start": 340, "end": 358, "word": "conditioner bottle", "entity_group": "VAR", "score": 0.9999450048231484}, {"start": 364, "end": 365, "word": "6", "entity_group": "PARAM", "score": 0.9996757778090313}, {"start": 414, "end": 422, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852266956495}, {"start": 423, "end": 429, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912472675}]}
{"doc_id": "1695243531", "document": "A furniture company makes chairs and shelves. Each chair requires  30 minutes of assembly and 50 minutes of painting. Each shelf requires 20 minutes of assembly and 60 minutes of painting. The company has available 3000 minutes for assembly and 4000 minutes for painting. If the profit per chair is $50 and the profit per shelf is $55, how many of each should the company make to maximize profit?", "order_mapping": {"chairs": 0, "shelves": 1, "chair": 0, "shelf": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chair": "50", "shelf": "55"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"chair": "30", "shelf": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"chair": "50", "shelf": "60"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chairs to be made\n- y: Number of shelves to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per chair is $50 and the profit per shelf is $55. Therefore, the objective function is: Maximize 50x + 55y\n\nConstraints:\n- The company has 3000 minutes available for assembly, and each chair requires 30 minutes of assembly and each shelf requires 20 minutes of assembly. This leads to the constraint: 30x + 20y <= 3000.\n- The company has 4000 minutes available for painting, and each chair requires 50 minutes of painting and each shelf requires 60 minutes of painting. This results in the constraint: 50x + 60y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 55y\nConstraints:\n30x + 20y <= 3000\n50x + 60y <= 4000", "canonical": {"objective": [-50.0, -55.0], "constraints": [[30.0, 20.0, 3000.0], [50.0, 60.0, 4000.0]]}, "solution": {"x": 80, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of chairs made: Chairs\n- Number of shelves made: Shelves\n\nConstraints:\n- Total assembly time for chairs and shelves should not exceed 3000 minutes:\n  30 * Chairs + 20 * Shelves <= 3000\n- Total painting time for chairs and shelves should not exceed 4000 minutes:\n  50 * Chairs + 60 * Shelves <= 4000\n\nObjective:\n- Maximize profit ($50 per chair, $55 per shelf):\n  50 * Chairs + 55 * Shelves\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChairs = intvar(0, 999999999)  # Number of chairs made\nShelves = intvar(0, 999999999)  # Number of shelves made\n\n# Constraints\nm = Model()\n\n# Total assembly time for chairs and shelves should not exceed 3000 minutes:\n# (30 minutes per chair, 20 minutes per shelf)\nm += 30 * Chairs + 20 * Shelves <= 3000\n\n# Total painting time for chairs and shelves should not exceed 4000 minutes:\n# (50 minutes per chair, 60 minutes per shelf)\nm += 50 * Chairs + 60 * Shelves <= 4000\n\n# Objective\n# Maximize profit ($50 per chair, $55 per shelf):\nm.maximize(50 * Chairs + 55 * Shelves)\n", "entities": [{"start": 26, "end": 32, "word": "chairs", "entity_group": "VAR", "score": 0.9996251628959681}, {"start": 37, "end": 44, "word": "shelves", "entity_group": "VAR", "score": 0.9997723155097155}, {"start": 52, "end": 57, "word": "chair", "entity_group": "VAR", "score": 0.9996492052282777}, {"start": 67, "end": 69, "word": "30", "entity_group": "PARAM", "score": 0.9997164026677647}, {"start": 94, "end": 96, "word": "50", "entity_group": "PARAM", "score": 0.9996969933625288}, {"start": 124, "end": 129, "word": "shelf", "entity_group": "VAR", "score": 0.999546523162749}, {"start": 139, "end": 141, "word": "20", "entity_group": "PARAM", "score": 0.9996958349458106}, {"start": 166, "end": 168, "word": "60", "entity_group": "PARAM", "score": 0.9996128768274194}, {"start": 207, "end": 216, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991584149233969}, {"start": 217, "end": 221, "word": "3000", "entity_group": "LIMIT", "score": 0.999422598494807}, {"start": 247, "end": 251, "word": "4000", "entity_group": "LIMIT", "score": 0.999588494703054}, {"start": 282, "end": 288, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998609784232697}, {"start": 293, "end": 298, "word": "chair", "entity_group": "VAR", "score": 0.9996157051097316}, {"start": 304, "end": 306, "word": "50", "entity_group": "PARAM", "score": 0.9993478814005067}, {"start": 315, "end": 321, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465451}, {"start": 326, "end": 331, "word": "shelf", "entity_group": "VAR", "score": 0.99908883297735}, {"start": 337, "end": 339, "word": "55", "entity_group": "PARAM", "score": 0.9994707412182511}, {"start": 386, "end": 394, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 395, "end": 401, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "69065177", "document": "You have two sodas that contain caffeine and sugar. Soda 1 contains 3 units of caffeine and 2 units of sugar per can. Soda 2 contains 2 units of caffeine and 5 units of sugar per can. You must consume at least 50 units of caffeine and 40 units of sugar. If a can of soda 1 costs $5 and a can of soda 2 costs $7, how many of each should you buy to minimize costs?", "order_mapping": {"Soda 1": 0, "Soda 2": 1, "soda 1": 0, "soda 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"soda 1": "5", "soda 2": "7"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"Soda 1": "3", "Soda 2": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"Soda 1": "2", "Soda 2": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans of Soda 1\n- y: Number of cans of Soda 2\n\nObjective:\n- Minimize the cost of the sodas. Given that a can of soda 1 costs $5 and a can of soda 2 costs $7, the objective function is: Minimize 5x + 7y\n\nConstraints:\n- The total caffeine consumption should be at least 50 units, leading to the constraint: 3x + 2y >= 50\n- The total sugar consumption should be at least 40 units, leading to the constraint: 2x + 5y >= 40\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 7y\nConstraints:\n3x + 2y >= 50\n2x + 5y >= 40", "canonical": {"objective": [5.0, 7.0], "constraints": [[-3.0, -2.0, -50.0], [-2.0, -5.0, -40.0]]}, "solution": {"x": 16, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of cans of Soda 1 bought: Soda1\n- Number of cans of Soda 2 bought: Soda2\n\nConstraints:\n- Must consume at least 50 units of caffeine:\n  3 * Soda1 + 2 * Soda2 >= 50\n- Must consume at least 40 units of sugar:\n  2 * Soda1 + 5 * Soda2 >= 40\n\nObjective:\n- Minimize costs (Soda 1 costs $5 per can, Soda 2 costs $7 per can):\n  5 * Soda1 + 7 * Soda2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSoda1 = intvar(0, 999999999)  # Number of cans of Soda 1\nSoda2 = intvar(0, 999999999)  # Number of cans of Soda 2\n\n# Constraints\nm = Model()\n\n# Must consume at least 50 units of caffeine:\nm += 3 * Soda1 + 2 * Soda2 >= 50\n# Must consume at least 40 units of sugar:\nm += 2 * Soda1 + 5 * Soda2 >= 40\n\n# Objective\n# Minimize costs (Soda 1 costs $5 per can, Soda 2 costs $7 per can):\nm.minimize(5 * Soda1 + 7 * Soda2)\n", "entities": [{"start": 53, "end": 59, "word": "Soda 1", "entity_group": "VAR", "score": 0.9998690065209874}, {"start": 69, "end": 70, "word": "3", "entity_group": "PARAM", "score": 0.9996405578399743}, {"start": 93, "end": 94, "word": "2", "entity_group": "PARAM", "score": 0.9997218126421754}, {"start": 120, "end": 126, "word": "Soda 2", "entity_group": "VAR", "score": 0.9998457391986377}, {"start": 136, "end": 137, "word": "2", "entity_group": "PARAM", "score": 0.9996556709087624}, {"start": 160, "end": 161, "word": "5", "entity_group": "PARAM", "score": 0.9997218151059128}, {"start": 204, "end": 212, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998907935507042}, {"start": 213, "end": 215, "word": "50", "entity_group": "LIMIT", "score": 0.9997479180923361}, {"start": 238, "end": 240, "word": "40", "entity_group": "LIMIT", "score": 0.9996578281616818}, {"start": 270, "end": 276, "word": "soda 1", "entity_group": "VAR", "score": 0.999771274287428}, {"start": 277, "end": 282, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994686965177723}, {"start": 285, "end": 286, "word": "5", "entity_group": "PARAM", "score": 0.9996700216774652}, {"start": 300, "end": 306, "word": "soda 2", "entity_group": "VAR", "score": 0.9997339121090649}, {"start": 307, "end": 312, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994223740443202}, {"start": 315, "end": 316, "word": "7", "entity_group": "PARAM", "score": 0.9996442181202244}, {"start": 354, "end": 362, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997145074943936}, {"start": 363, "end": 368, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990204240580258}]}
{"doc_id": "1069342200", "document": "You are playing a game where you can hit slow balls or fast balls. Each slow ball hit is 3 points and each fast ball hit is 5 points. You have to hit at least 5 slow balls and at least 3 fast balls. However you can hit at most 8 slow balls and at most 8 fast balls. In total, you can hit no more than 12 balls. How many of each type of ball should you hit to maximize your points?", "order_mapping": {"slow balls": 0, "fast balls": 1, "slow ball": 0, "fast ball": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"slow ball": "3", "fast ball": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5", "var": "slow balls", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "8", "var": "slow balls", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "8", "var": "fast balls", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "no more than", "limit": "12", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "fast balls", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of slow balls hit\n- y: Number of fast balls hit\n\nObjective:\n- The goal is to maximize the total points scored. Each slow ball hit is 3 points and each fast ball hit is 5 points. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- At least 5 slow balls must be hit, leading to the constraint: x >= 5.\n- At least 3 fast balls must be hit, leading to the constraint: y >= 3.\n- At most 8 slow balls can be hit, leading to the constraint: x <= 8.\n- At most 8 fast balls can be hit, leading to the constraint: y <= 8.\n- In total, no more than 12 balls can be hit, leading to the constraint: x + y <= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\nx >= 5\ny >= 3\nx <= 8\ny <= 8\nx + y <= 12", "canonical": {"objective": [-3.0, -5.0], "constraints": [[-1.0, 0.0, -5.0], [0.0, -1.0, -3.0], [1.0, 0.0, 8.0], [0.0, 1.0, 8.0], [1.0, 1.0, 12.0]]}, "solution": {"x": 5, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of slow balls hit: SlowBalls\n- Number of fast balls hit: FastBalls\n\nConstraints:\n- At least 5 slow balls must be hit:\n  SlowBalls >= 5\n- At least 3 fast balls must be hit:\n  FastBalls >= 3\n- At most 8 slow balls can be hit:\n  SlowBalls <= 8\n- At most 8 fast balls can be hit:\n  FastBalls <= 8\n- No more than 12 balls in total can be hit:\n  SlowBalls + FastBalls <= 12\n\nObjective:\n- Maximize points (3 points per slow ball hit, 5 points per fast ball hit):\n  3 * SlowBalls + 5 * FastBalls\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSlowBalls = intvar(0, 999999999)  # Number of slow balls hit\nFastBalls = intvar(0, 999999999)  # Number of fast balls hit\n\n# Constraints\nm = Model()\n\n# You have to hit at least 5 slow balls:\nm += SlowBalls >= 5\n# You have to hit at least 3 fast balls:\nm += FastBalls >= 3\n# You can hit at most 8 slow balls:\nm += SlowBalls <= 8\n# You can hit at most 8 fast balls:\nm += FastBalls <= 8\n# In total, you can hit no more than 12 balls:\nm += SlowBalls + FastBalls <= 12\n\n# Objective\n# Maximize points (3 points per slow ball, 5 points per fast ball):\nm.maximize(3 * SlowBalls + 5 * FastBalls)\n", "entities": [{"start": 41, "end": 51, "word": "slow balls", "entity_group": "VAR", "score": 0.999981977542727}, {"start": 55, "end": 65, "word": "fast balls", "entity_group": "VAR", "score": 0.9999715937975865}, {"start": 73, "end": 82, "word": "slow ball", "entity_group": "VAR", "score": 0.9999931006499467}, {"start": 90, "end": 91, "word": "3", "entity_group": "PARAM", "score": 0.9996376565285103}, {"start": 92, "end": 98, "word": "points", "entity_group": "OBJ_NAME", "score": 0.99234825975777}, {"start": 108, "end": 117, "word": "fast ball", "entity_group": "VAR", "score": 0.9999921530341854}, {"start": 125, "end": 126, "word": "5", "entity_group": "PARAM", "score": 0.9997139036187705}, {"start": 127, "end": 133, "word": "points", "entity_group": "OBJ_NAME", "score": 0.996425287211961}, {"start": 152, "end": 160, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986086602321403}, {"start": 161, "end": 162, "word": "5", "entity_group": "LIMIT", "score": 0.9992522436654768}, {"start": 163, "end": 173, "word": "slow balls", "entity_group": "VAR", "score": 0.9999231401315535}, {"start": 178, "end": 186, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988261037052865}, {"start": 187, "end": 188, "word": "3", "entity_group": "LIMIT", "score": 0.999595680429594}, {"start": 189, "end": 199, "word": "fast balls", "entity_group": "VAR", "score": 0.9999623855800582}, {"start": 222, "end": 229, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987740799113916}, {"start": 230, "end": 231, "word": "8", "entity_group": "LIMIT", "score": 0.9995746742898078}, {"start": 232, "end": 242, "word": "slow balls", "entity_group": "VAR", "score": 0.9999282621798273}, {"start": 247, "end": 254, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987778625544235}, {"start": 255, "end": 256, "word": "8", "entity_group": "LIMIT", "score": 0.9995965976737535}, {"start": 257, "end": 267, "word": "fast balls", "entity_group": "VAR", "score": 0.9999162653781289}, {"start": 293, "end": 305, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9956045866551184}, {"start": 306, "end": 308, "word": "12", "entity_group": "LIMIT", "score": 0.9996287736677594}, {"start": 365, "end": 373, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995051441841749}, {"start": 379, "end": 385, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9977961988308712}]}
{"doc_id": "243699416", "document": "Two different meals, a vegetarian and meat option, are eaten everyday to get protein and carbs. A vegetarian meal contains 10 grams of protein and 20 grams of carbs. A meat meal contains 30 grams of protein and 15 grams of carbs. Daily requirements are at least 100 grams of protein and 150 grams of carbs. If a vegetarian meal costs $4 and a meat meal costs $6, how many of each should be eaten to minimize costs?", "order_mapping": {"vegetarian": 0, "meat option": 1, "vegetarian meal": 0, "meat meal": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"vegetarian meal": "4", "meat meal": "6"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"vegetarian meal": "10", "meat meal": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"vegetarian meal": "20", "meat meal": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of vegetarian meals\n- y: Number of meat meals\n\nObjective:\n- The goal is to minimize the cost of the meals. Given that a vegetarian meal costs $4 and a meat meal costs $6, the objective function is: Minimize 4x + 6y\n\nConstraints:\n- The daily protein requirement is at least 100 grams, which can be expressed as: 10x + 30y >= 100\n- The daily carb requirement is at least 150 grams, which can be expressed as: 20x + 15y >= 150\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4x + 6y\nConstraints:\n10x + 30y >= 100\n20x + 15y >= 150", "canonical": {"objective": [4.0, 6.0], "constraints": [[-10.0, -30.0, -100.0], [-20.0, -15.0, -150.0]]}, "solution": {"x": 7, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of vegetarian meals eaten: VegetarianMeals\n- Number of meat meals eaten: MeatMeals\n\nConstraints:\n- Daily protein requirement (at least 100 grams):\n  10 * VegetarianMeals + 30 * MeatMeals >= 100\n- Daily carbs requirement (at least 150 grams):\n  20 * VegetarianMeals + 15 * MeatMeals >= 150\n\nObjective:\n- Minimize costs ($4 per vegetarian meal, $6 per meat meal):\n  4 * VegetarianMeals + 6 * MeatMeals\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVegetarianMeals = intvar(0, 999999999)  # Number of vegetarian meals eaten\nMeatMeals = intvar(0, 999999999)  # Number of meat meals eaten\n\n# Constraints\nm = Model()\n\n# Daily requirements for protein (at least 100 grams):\nm += 10 * VegetarianMeals + 30 * MeatMeals >= 100\n# Daily requirements for carbs (at least 150 grams):\nm += 20 * VegetarianMeals + 15 * MeatMeals >= 150\n\n# Objective\n# Minimize costs ($4 per vegetarian meal, $6 per meat meal):\nm.minimize(4 * VegetarianMeals + 6 * MeatMeals)\n", "entities": [{"start": 24, "end": 34, "word": "vegetarian", "entity_group": "VAR", "score": 0.9995829857363923}, {"start": 39, "end": 50, "word": "meat option", "entity_group": "VAR", "score": 0.9998909649068626}, {"start": 101, "end": 116, "word": "vegetarian meal", "entity_group": "VAR", "score": 0.9999334360161399}, {"start": 126, "end": 128, "word": "10", "entity_group": "PARAM", "score": 0.9996692502462244}, {"start": 150, "end": 152, "word": "20", "entity_group": "PARAM", "score": 0.9997256837257154}, {"start": 172, "end": 181, "word": "meat meal", "entity_group": "VAR", "score": 0.9999232642342641}, {"start": 191, "end": 193, "word": "30", "entity_group": "PARAM", "score": 0.9996557275655896}, {"start": 215, "end": 217, "word": "15", "entity_group": "PARAM", "score": 0.9997256331478384}, {"start": 258, "end": 266, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992271172105802}, {"start": 267, "end": 270, "word": "100", "entity_group": "LIMIT", "score": 0.9997622103135676}, {"start": 292, "end": 295, "word": "150", "entity_group": "LIMIT", "score": 0.9996572470438293}, {"start": 318, "end": 333, "word": "vegetarian meal", "entity_group": "VAR", "score": 0.9999169241837144}, {"start": 334, "end": 339, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995258636752232}, {"start": 342, "end": 343, "word": "4", "entity_group": "PARAM", "score": 0.9996288933191778}, {"start": 350, "end": 359, "word": "meat meal", "entity_group": "VAR", "score": 0.9998890163949455}, {"start": 360, "end": 365, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993277879101273}, {"start": 368, "end": 369, "word": "6", "entity_group": "PARAM", "score": 0.9995954281067077}, {"start": 408, "end": 416, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996863680436736}, {"start": 417, "end": 422, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990203819609471}]}
{"doc_id": "-1963149491", "document": "A farmer has 90 acres of land to grow mushrooms and truffles. Each acre of mushrooms requires $80 in maintenance and 2 hours of care. Each acre of truffles requires $200 in maintenance and 3 hours of care. The farmer has at most $13500 to spend on maintenance and 120 hours of time available for care keeping. If the profit per acre of mushrooms is $200 and the profit per acre of truffles is $500, how many  acres of each should be grown to maximize profit?", "order_mapping": {"mushrooms": 0, "truffles": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"truffles": "500", "mushrooms": "200"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "90", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "13500", "terms": {"mushrooms": "80", "truffles": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "120", "terms": {"mushrooms": "2", "truffles": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land for growing mushrooms\n- y: Acres of land for growing truffles\n\nObjective:\n- The farmer aims to maximize profit. The profit per acre of mushrooms is $200 and the profit per acre of truffles is $500. Therefore, the objective function is: Maximize 200x + 500y\n\nConstraints:\n- The farmer has 90 acres of land available, so the constraint is: x + y <= 90.\n- The total maintenance cost should not exceed $13500, leading to the constraint: 80x + 200y <= 13500.\n- The total care hours should not exceed 120, resulting in the constraint: 2x + 3y <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 500y\nConstraints:\nx + y <= 90\n80x + 200y <= 13500\n2x + 3y <= 120", "canonical": {"objective": [-200.0, -500.0], "constraints": [[1.0, 1.0, 90.0], [80.0, 200.0, 13500.0], [2.0, 3.0, 120.0]]}, "solution": {"x": 0, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of acres of mushrooms grown: Mushrooms\n- Number of acres of truffles grown: Truffles\n\nConstraints:\n- Total acres used should not exceed 90:\n  Mushrooms + Truffles <= 90\n- Maintenance cost should not exceed $13500:\n  80 * Mushrooms + 200 * Truffles <= 13500\n- Time for care should not exceed 120 hours:\n  2 * Mushrooms + 3 * Truffles <= 120\n\nObjective:\n- Maximize profit ($200 profit per acre of mushrooms, $500 profit per acre of truffles):\n  200 * Mushrooms + 500 * Truffles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMushrooms = intvar(0, 999999999)  # Number of acres of mushrooms\nTruffles = intvar(0, 999999999)  # Number of acres of truffles\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 90:\nm += Mushrooms + Truffles <= 90\n# Maintenance cost should not exceed $13500 ($80 per acre of mushrooms, $200 per acre of truffles):\nm += 80 * Mushrooms + 200 * Truffles <= 13500\n# Time for care should not exceed 120 hours (2 hours per acre of mushrooms, 3 hours per acre of truffles):\nm += 2 * Mushrooms + 3 * Truffles <= 120\n\n# Objective\n# Maximize profit ($200 profit per acre of mushrooms, $500 profit per acre of truffles):\nm.maximize(200 * Mushrooms + 500 * Truffles)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9924370747486133}, {"start": 13, "end": 15, "word": "90", "entity_group": "LIMIT", "score": 0.9987257294274342}, {"start": 38, "end": 47, "word": "mushrooms", "entity_group": "VAR", "score": 0.9981424518292666}, {"start": 52, "end": 60, "word": "truffles", "entity_group": "VAR", "score": 0.9995535071856534}, {"start": 76, "end": 85, "word": "mushrooms", "entity_group": "VAR", "score": 0.9996237093112262}, {"start": 97, "end": 99, "word": "80", "entity_group": "PARAM", "score": 0.9989166297568418}, {"start": 119, "end": 120, "word": "2", "entity_group": "PARAM", "score": 0.9997183613325054}, {"start": 150, "end": 158, "word": "truffles", "entity_group": "VAR", "score": 0.9995417716341592}, {"start": 170, "end": 173, "word": "200", "entity_group": "PARAM", "score": 0.9989166293576306}, {"start": 193, "end": 194, "word": "3", "entity_group": "PARAM", "score": 0.9996373062025928}, {"start": 226, "end": 233, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9942990139383733}, {"start": 236, "end": 241, "word": "13500", "entity_group": "LIMIT", "score": 0.9995172576214942}, {"start": 270, "end": 273, "word": "120", "entity_group": "LIMIT", "score": 0.9996565391605454}, {"start": 288, "end": 297, "word": "available", "entity_group": "CONST_DIR", "score": 0.977162717196084}, {"start": 324, "end": 330, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998349523129122}, {"start": 343, "end": 352, "word": "mushrooms", "entity_group": "VAR", "score": 0.9994952128909629}, {"start": 358, "end": 361, "word": "200", "entity_group": "PARAM", "score": 0.9992430237606286}, {"start": 370, "end": 376, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713132}, {"start": 389, "end": 397, "word": "truffles", "entity_group": "VAR", "score": 0.9994301094745145}, {"start": 403, "end": 406, "word": "500", "entity_group": "PARAM", "score": 0.9995941446297246}, {"start": 451, "end": 459, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 460, "end": 466, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1006908156", "document": "A bus has 150 seats. A profit of $30 is made on each cushioned seat and a profit of $10 is made on each regular seat. The bus reserves at least 50 seats to be cushioned but because the journey is short, at least 2 times as many people prefer to save money and travel by regular seats than cushioned seats. How many of each seat type should be sold to passengers to maximize profit?", "order_mapping": {"cushioned seat": 0, "regular seat": 1, "cushioned": 0, "regular seats": 1, "cushioned seats": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cushioned seat": "30", "regular seat": "10"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "cushioned", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular seats", "direction": "at least", "param": "2", "y_var": "cushioned seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cushioned seats\n- y: Number of regular seats\n\nObjective:\n- The bus company aims to maximize its profit. A profit of $30 is made on each cushioned seat and a profit of $10 is made on each regular seat. Therefore, the objective function is: Maximize 30x + 10y\n\nConstraints:\n- The bus has a total of 150 seats, so the constraint is: x + y <= 150.\n- At least 50 seats need to be cushioned, leading to the constraint: x >= 50.\n- Due to the short journey, at least 2 times as many people prefer to save money and travel by regular seats than cushioned seats, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 10y\nConstraints:\nx + y <= 150\nx >= 50\ny >= 2x", "canonical": {"objective": [-30.0, -10.0], "constraints": [[1.0, 1.0, 150.0], [-1.0, 0.0, -50.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 50, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of cushioned seats sold: CushionedSeats\n- Number of regular seats sold: RegularSeats\n\nConstraints:\n- Total number of seats (cushioned + regular) should not exceed 150:\n  CushionedSeats + RegularSeats <= 150\n- At least 50 seats must be cushioned:\n  CushionedSeats >= 50\n- At least 2 times as many regular seats as cushioned seats:\n  RegularSeats >= 2 * CushionedSeats\n\nObjective:\n- Maximize profit ($30 profit per cushioned seat, $10 profit per regular seat):\n  30 * CushionedSeats + 10 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCushionedSeats = intvar(0, 999999999)  # Number of cushioned seats sold\nRegularSeats = intvar(0, 999999999)  # Number of regular seats sold\n\n# Constraints\nm = Model()\n\n# Total number of seats on the bus is 150:\nm += CushionedSeats + RegularSeats <= 150\n# At least 50 seats must be cushioned:\nm += CushionedSeats >= 50\n# At least 2 times as many people prefer regular seats over cushioned seats:\nm += RegularSeats >= 2 * CushionedSeats\n\n# Objective\n# Maximize profit ($30 profit per cushioned seat, $10 profit per regular seat):\nm.maximize(30 * CushionedSeats + 10 * RegularSeats)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9916910099101941}, {"start": 10, "end": 13, "word": "150", "entity_group": "LIMIT", "score": 0.9985255580503276}, {"start": 24, "end": 30, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999821116814486}, {"start": 36, "end": 38, "word": "30", "entity_group": "PARAM", "score": 0.9993908960507919}, {"start": 55, "end": 69, "word": "cushioned seat", "entity_group": "VAR", "score": 0.9998358574943506}, {"start": 76, "end": 82, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999253385845462}, {"start": 88, "end": 90, "word": "10", "entity_group": "PARAM", "score": 0.9994289450397553}, {"start": 107, "end": 119, "word": "regular seat", "entity_group": "VAR", "score": 0.9998851388610439}, {"start": 139, "end": 147, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998442871258555}, {"start": 148, "end": 150, "word": "50", "entity_group": "LIMIT", "score": 0.9997338269522154}, {"start": 163, "end": 172, "word": "cushioned", "entity_group": "VAR", "score": 0.9996261838764031}, {"start": 208, "end": 216, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981663151468094}, {"start": 217, "end": 218, "word": "2", "entity_group": "PARAM", "score": 0.9983248123809317}, {"start": 275, "end": 288, "word": "regular seats", "entity_group": "VAR", "score": 0.9995071508013476}, {"start": 294, "end": 309, "word": "cushioned seats", "entity_group": "VAR", "score": 0.9998935116657504}, {"start": 371, "end": 379, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994540845808056}, {"start": 380, "end": 386, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999736163381505}]}
{"doc_id": "803987475", "document": "A museum can sell at most 300 tickets. They offer guided tickets as well as regular tickets. The profit per guided ticket is $50 and the profit per regular ticket is $20. The museum reserves at least 50 tickets to be guided, but since most people like to go at their own pace, at least 3 times as many people prefer to buy regular tickets than guided tickets. How many of tickets of each type should be sold to maximize profit?", "order_mapping": {"guided tickets": 0, "regular tickets": 1, "guided ticket": 0, "regular ticket": 1, "guided": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"guided ticket": "50", "regular ticket": "20"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "guided", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "3", "y_var": "guided tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of guided tickets\n- y: Number of regular tickets\n\nObjective:\n- The museum aims to maximize its profit. The profit per guided ticket is $50 and the profit per regular ticket is $20. Therefore, the objective function is: Maximize 50x + 20y\n\nConstraints:\n- The museum can sell at most 300 tickets, so the constraint is: x + y <= 300.\n- At least 50 tickets should be guided, leading to the constraint: x >= 50.\n- At least 3 times as many people prefer to buy regular tickets than guided tickets, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 20y\nConstraints:\nx + y <= 300\nx >= 50\ny >= 3x", "canonical": {"objective": [-50.0, -20.0], "constraints": [[1.0, 1.0, 300.0], [-1.0, 0.0, -50.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 75, "y": 225}, "pseudo_model": "\nDecision Variables:\n- Number of guided tickets sold: GuidedTickets\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 300:\n  GuidedTickets + RegularTickets <= 300\n- At least 50 tickets should be guided:\n  GuidedTickets >= 50\n- At least 3 times as many regular tickets as guided tickets:\n  RegularTickets >= 3 * GuidedTickets\n\nObjective:\n- Maximize profit (50 dollars per guided ticket, 20 dollars per regular ticket):\n  50 * GuidedTickets + 20 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGuidedTickets = intvar(0, 999999999)  # Number of guided tickets sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets sold should not exceed 300:\nm += GuidedTickets + RegularTickets <= 300\n# At least 50 tickets should be guided:\nm += GuidedTickets >= 50\n# At least 3 times as many people prefer to buy regular tickets than guided tickets:\nm += RegularTickets >= 3 * GuidedTickets\n\n# Objective\n# Maximize profit (50 dollars per guided ticket, 20 dollars per regular ticket):\nm.maximize(50 * GuidedTickets + 20 * RegularTickets)\n", "entities": [{"start": 18, "end": 25, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990197374621983}, {"start": 26, "end": 29, "word": "300", "entity_group": "LIMIT", "score": 0.9997111684256096}, {"start": 51, "end": 65, "word": "guided tickets", "entity_group": "VAR", "score": 0.9998980404480318}, {"start": 77, "end": 92, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999281255254454}, {"start": 99, "end": 105, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999614968480263}, {"start": 110, "end": 123, "word": "guided ticket", "entity_group": "VAR", "score": 0.9999559506892656}, {"start": 129, "end": 131, "word": "50", "entity_group": "PARAM", "score": 0.9995979626342862}, {"start": 140, "end": 146, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350370184353}, {"start": 151, "end": 165, "word": "regular ticket", "entity_group": "VAR", "score": 0.9999191796922664}, {"start": 171, "end": 173, "word": "20", "entity_group": "PARAM", "score": 0.9997736146567195}, {"start": 196, "end": 204, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998674805539658}, {"start": 205, "end": 207, "word": "50", "entity_group": "LIMIT", "score": 0.9997234525917655}, {"start": 222, "end": 228, "word": "guided", "entity_group": "VAR", "score": 0.9997453735623729}, {"start": 284, "end": 292, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981511241756249}, {"start": 293, "end": 300, "word": "3 times", "entity_group": "PARAM", "score": 0.5283101712850129}, {"start": 330, "end": 345, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999572295896889}, {"start": 351, "end": 365, "word": "guided tickets", "entity_group": "VAR", "score": 0.9999452910190252}, {"start": 419, "end": 427, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800938778}, {"start": 428, "end": 434, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147306236488}]}
{"doc_id": "1231818101", "document": "A toy company makes stuffed beavers and stuffed bears. Each beaver takes 10 minutes to make and each bear takes 15 minutes to make. The company has 2000 minutes available to make both stuffer animals. Due to the popularity of beavers, the company must make at least three times as many beavers as bears. If the profit per beaver is $5 and the profit per bear is $7, how many of each should be made to maximize profit?", "order_mapping": {"stuffed beavers": 0, "stuffed bears": 1, "beaver": 0, "bear": 1, "beavers": 0, "bears": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"beaver": "5", "bear": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"beaver": "10", "bear": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "beavers", "direction": "at least", "param": "three", "y_var": "bears", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of stuffed beavers\n- y: Number of stuffed bears\n\nObjective:\n- The company aims to maximize its profit. The profit per beaver is $5 and the profit per bear is $7. Therefore, the objective function is: Maximize 5x + 7y\n\nConstraints:\n- The company has 2000 minutes available to make both stuffed animals. Each beaver takes 10 minutes and each bear takes 15 minutes to make, leading to the constraint: 10x + 15y <= 2000.\n- Due to the popularity of beavers, the company must make at least three times as many beavers as bears, resulting in the constraint: x >= 3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 7y\nConstraints:\n10x + 15y <= 2000\nx >= 3y", "canonical": {"objective": [-5.0, -7.0], "constraints": [[10.0, 15.0, 2000.0], [-1.0, 3.0, 0.0]]}, "solution": {"x": 200, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of stuffed beavers made: Beavers\n- Number of stuffed bears made: Bears\n\nConstraints:\n- Total time to make both stuffed animals should not exceed 2000 minutes (10 minutes per beaver, 15 minutes per bear):\n  10 * Beavers + 15 * Bears <= 2000\n- The company must make at least three times as many beavers as bears:\n  Beavers >= 3 * Bears\n\nObjective:\n- Maximize profit (5 dollars per beaver, 7 dollars per bear):\n  5 * Beavers + 7 * Bears\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeavers = intvar(0, 999999999)  # Number of stuffed beavers made\nBears = intvar(0, 999999999)  # Number of stuffed bears made\n\n# Constraints\nm = Model()\n\n# Total time to make both stuffed animals should not exceed 2000 minutes:\n# Each beaver takes 10 minutes to make and each bear takes 15 minutes to make\nm += 10 * Beavers + 15 * Bears <= 2000\n\n# The company must make at least three times as many beavers as bears:\nm += Beavers >= 3 * Bears\n\n# Objective\n# Maximize profit (5 dollars per beaver, 7 dollars per bear):\nm.maximize(5 * Beavers + 7 * Bears)\n", "entities": [{"start": 20, "end": 35, "word": "stuffed beavers", "entity_group": "VAR", "score": 0.9999673305770868}, {"start": 40, "end": 53, "word": "stuffed bears", "entity_group": "VAR", "score": 0.9999895255549943}, {"start": 61, "end": 67, "word": "beaver", "entity_group": "VAR", "score": 0.9997231589502275}, {"start": 74, "end": 76, "word": "10", "entity_group": "PARAM", "score": 0.9995189909031056}, {"start": 102, "end": 106, "word": "bear", "entity_group": "VAR", "score": 0.9995054797541736}, {"start": 113, "end": 115, "word": "15", "entity_group": "PARAM", "score": 0.9991418168914408}, {"start": 150, "end": 154, "word": "2000", "entity_group": "LIMIT", "score": 0.999563853383173}, {"start": 163, "end": 172, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990672061092696}, {"start": 229, "end": 236, "word": "beavers", "entity_group": "VAR", "score": 0.99967615422737}, {"start": 261, "end": 269, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980307819766084}, {"start": 270, "end": 275, "word": "three", "entity_group": "PARAM", "score": 0.9951686347613835}, {"start": 290, "end": 297, "word": "beavers", "entity_group": "VAR", "score": 0.999680879014972}, {"start": 301, "end": 306, "word": "bears", "entity_group": "VAR", "score": 0.9996791509472841}, {"start": 316, "end": 322, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997168353609216}, {"start": 327, "end": 333, "word": "beaver", "entity_group": "VAR", "score": 0.9994922346920125}, {"start": 339, "end": 340, "word": "5", "entity_group": "PARAM", "score": 0.999347954456344}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688984038502}, {"start": 360, "end": 364, "word": "bear", "entity_group": "VAR", "score": 0.9990610694994848}, {"start": 370, "end": 371, "word": "7", "entity_group": "PARAM", "score": 0.9993391257658878}, {"start": 409, "end": 417, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "896546054", "document": "A printing company prints books and magazines for sale. Each book takes 10 minutes for printing and 5 minutes for binding. Each magazine takes 20 minutes for printing and 3 minutes for binding. The company has available 5000 minutes for printing and 2000 minutes for binding. If the profit per book sold is $5 and the profit per magazine sold is $8, how many of each should they print to maximize profits?", "order_mapping": {"books": 0, "magazines": 1, "book": 0, "magazine": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"book": "5", "magazine": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"book": "10", "magazine": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"book": "5", "magazine": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of books to print\n- y: Number of magazines to print\n\nObjective:\n- The company aims to maximize its profits. The profit per book sold is $5 and the profit per magazine sold is $8. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- The company has 5000 minutes available for printing, and each book takes 10 minutes and each magazine takes 20 minutes. This leads to the constraint: 10x + 20y <= 5000.\n- The company has 2000 minutes available for binding, and each book takes 5 minutes and each magazine takes 3 minutes. This results in the constraint: 5x + 3y <= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\n10x + 20y <= 5000\n5x + 3y <= 2000", "canonical": {"objective": [-5.0, -8.0], "constraints": [[10.0, 20.0, 5000.0], [5.0, 3.0, 2000.0]]}, "solution": {"x": 356, "y": 72}, "pseudo_model": "\nDecision Variables:\n- Number of books printed: Books\n- Number of magazines printed: Magazines\n\nConstraints:\n- Total printing time for books and magazines should not exceed 5000 minutes:\n  10 * Books + 20 * Magazines <= 5000\n- Total binding time for books and magazines should not exceed 2000 minutes:\n  5 * Books + 3 * Magazines <= 2000\n\nObjective:\n- Maximize profits ($5 per book, $8 per magazine):\n  5 * Books + 8 * Magazines\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBooks = intvar(0, 999999999)  # Number of books printed\nMagazines = intvar(0, 999999999)  # Number of magazines printed\n\n# Constraints\nm = Model()\n\n# Total printing time for books and magazines should not exceed 5000 minutes:\n# (10 minutes per book, 20 minutes per magazine)\nm += 10 * Books + 20 * Magazines <= 5000\n\n# Total binding time for books and magazines should not exceed 2000 minutes:\n# (5 minutes per book, 3 minutes per magazine)\nm += 5 * Books + 3 * Magazines <= 2000\n\n# Objective\n# Maximize profits ($5 per book, $8 per magazine):\nm.maximize(5 * Books + 8 * Magazines)\n", "entities": [{"start": 26, "end": 31, "word": "books", "entity_group": "VAR", "score": 0.9997695720224129}, {"start": 36, "end": 45, "word": "magazines", "entity_group": "VAR", "score": 0.999616722369555}, {"start": 62, "end": 66, "word": "book", "entity_group": "VAR", "score": 0.9996139125385995}, {"start": 73, "end": 75, "word": "10", "entity_group": "PARAM", "score": 0.9996495242225354}, {"start": 101, "end": 102, "word": "5", "entity_group": "PARAM", "score": 0.9996981652572591}, {"start": 130, "end": 138, "word": "magazine", "entity_group": "VAR", "score": 0.9995750289499586}, {"start": 145, "end": 147, "word": "20", "entity_group": "PARAM", "score": 0.9996471440985177}, {"start": 173, "end": 174, "word": "3", "entity_group": "PARAM", "score": 0.9996050925107499}, {"start": 213, "end": 222, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991808431896891}, {"start": 223, "end": 227, "word": "5000", "entity_group": "LIMIT", "score": 0.9994180190817017}, {"start": 253, "end": 257, "word": "2000", "entity_group": "LIMIT", "score": 0.9995884947030563}, {"start": 287, "end": 293, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999341800607375}, {"start": 298, "end": 302, "word": "book", "entity_group": "VAR", "score": 0.9993291703849183}, {"start": 313, "end": 314, "word": "5", "entity_group": "PARAM", "score": 0.9995965161944136}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386216309081}, {"start": 334, "end": 342, "word": "magazine", "entity_group": "VAR", "score": 0.9990377006135015}, {"start": 353, "end": 354, "word": "8", "entity_group": "PARAM", "score": 0.9996530276416216}, {"start": 395, "end": 403, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998575081258496}, {"start": 404, "end": 411, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996474049077713}]}
{"doc_id": "-1595400088", "document": "A bagel company has two bakeries, an Eastside bakery and a Westside bakery. The Eastside bakery costs $300 to run for 1 hour while the Westside bakery costs $500 to run for 1 hour. In an hour, the Eastside bakery yields 100 everything bagels, 80 blueberry bagels, and 30 regular bagels. In an hour, the Westside bakery yields 50 everything bagels, 60 blueberry bagels, and 100 regular bagels. The bagel company must produce at least 800 everything bagels, 600 blueberry bagels, and 1000 regular bagels in total. How many hours should each bakery be run to minimize costs?", "order_mapping": {"Eastside bakery": 0, "Westside bakery": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Eastside bakery": "300", "Westside bakery": "500"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "800", "terms": {"Eastside bakery": "100", "Westside bakery": "50"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "600", "terms": {"Eastside bakery": "80", "Westside bakery": "60"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"Eastside bakery": "30", "Westside bakery": "100"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours to run the Eastside bakery\n- y: Hours to run the Westside bakery\n\nObjective:\n- The bagel company aims to minimize costs. The Eastside bakery costs $300 to run for 1 hour, and the Westside bakery costs $500 to run for 1 hour. Therefore, the objective function is: Minimize 300x + 500y\n\nConstraints:\n- The bagel company must produce at least 800 everything bagels, 600 blueberry bagels, and 1000 regular bagels in total. This leads to the following constraints:\n    - 100x + 50y >= 800 (everything bagels)\n    - 80x + 60y >= 600 (blueberry bagels)\n    - 30x + 100y >= 1000 (regular bagels)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 300x + 500y\nConstraints:\n100x + 50y >= 800\n80x + 60y >= 600\n30x + 100y >= 1000", "canonical": {"objective": [300.0, 500.0], "constraints": [[-100.0, -50.0, -800.0], [-80.0, -60.0, -600.0], [-30.0, -100.0, -1000.0]]}, "solution": {"x": 4, "y": 9}, "pseudo_model": "\nDecision Variables:\n- Hours the Eastside bakery is run: EastsideBakeryHours\n- Hours the Westside bakery is run: WestsideBakeryHours\n\nConstraints:\n- To produce at least 800 everything bagels:\n  100 * EastsideBakeryHours + 50 * WestsideBakeryHours >= 800\n- To produce at least 600 blueberry bagels:\n  80 * EastsideBakeryHours + 60 * WestsideBakeryHours >= 600\n- To produce at least 1000 regular bagels:\n  30 * EastsideBakeryHours + 100 * WestsideBakeryHours >= 1000\n\nObjective:\n- Minimize costs ($300 per hour for Eastside bakery, $500 per hour for Westside bakery):\n  300 * EastsideBakeryHours + 500 * WestsideBakeryHours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEastsideBakeryHours = intvar(0, 999999999)  # Hours the Eastside bakery is run\nWestsideBakeryHours = intvar(0, 999999999)  # Hours the Westside bakery is run\n\n# Constraints\nm = Model()\n\n# The company must produce at least 800 everything bagels:\nm += 100 * EastsideBakeryHours + 50 * WestsideBakeryHours >= 800\n# The company must produce at least 600 blueberry bagels:\nm += 80 * EastsideBakeryHours + 60 * WestsideBakeryHours >= 600\n# The company must produce at least 1000 regular bagels:\nm += 30 * EastsideBakeryHours + 100 * WestsideBakeryHours >= 1000\n\n# Objective\n# Minimize costs ($300 per hour for Eastside bakery, $500 per hour for Westside bakery):\nm.minimize(300 * EastsideBakeryHours + 500 * WestsideBakeryHours)\n", "entities": [{"start": 38, "end": 53, "word": "Eastside bakery", "entity_group": "VAR", "score": 0.9999639526956378}, {"start": 60, "end": 75, "word": "Westside bakery", "entity_group": "VAR", "score": 0.9999776462665452}, {"start": 82, "end": 97, "word": "Eastside bakery", "entity_group": "VAR", "score": 0.9999796732111326}, {"start": 98, "end": 103, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9977938487901459}, {"start": 106, "end": 109, "word": "300", "entity_group": "PARAM", "score": 0.9997309359205002}, {"start": 138, "end": 153, "word": "Westside bakery", "entity_group": "VAR", "score": 0.999981739366011}, {"start": 154, "end": 159, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991214900154943}, {"start": 162, "end": 165, "word": "500", "entity_group": "PARAM", "score": 0.9997361383006927}, {"start": 203, "end": 218, "word": "Eastside bakery", "entity_group": "VAR", "score": 0.9999815713369978}, {"start": 226, "end": 229, "word": "100", "entity_group": "PARAM", "score": 0.9996095479081489}, {"start": 250, "end": 252, "word": "80", "entity_group": "PARAM", "score": 0.9994004994403518}, {"start": 276, "end": 278, "word": "30", "entity_group": "PARAM", "score": 0.9996415571537751}, {"start": 313, "end": 328, "word": "Westside bakery", "entity_group": "VAR", "score": 0.9999813261141927}, {"start": 336, "end": 338, "word": "50", "entity_group": "PARAM", "score": 0.9996095479084199}, {"start": 359, "end": 361, "word": "60", "entity_group": "PARAM", "score": 0.9994004994404597}, {"start": 385, "end": 388, "word": "100", "entity_group": "PARAM", "score": 0.999647466957592}, {"start": 437, "end": 445, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986630608200315}, {"start": 446, "end": 449, "word": "800", "entity_group": "LIMIT", "score": 0.9995203987460286}, {"start": 470, "end": 473, "word": "600", "entity_group": "LIMIT", "score": 0.9994923340652554}, {"start": 497, "end": 501, "word": "1000", "entity_group": "LIMIT", "score": 0.999463363824365}, {"start": 572, "end": 580, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9995579343530485}, {"start": 581, "end": 586, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9982554459880251}]}
{"doc_id": "-1742874325", "document": "A dietician recommends that his patient eat jelly supplements to get his mineral requirements. Each blue jelly pouch contains 2 units of calcium, 1 unit of potassium, and 3 units of sodium. Each red jelly pouch contains 3 units of calcium, 2 units of potassium, and 1 unit of sodium. The patient must get at least 30 units of calcium, 25 units of potassium, and 30 units of sodium. If the cost per blue jelly pouch is $5 and the cost per red jelly pouch is $7, how many of each should the patient purchase to minimize his costs?", "order_mapping": {"blue jelly pouch": 0, "red jelly pouch": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"blue jelly pouch": "5", "red jelly pouch": "7"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"blue jelly pouch": "2", "red jelly pouch": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "25", "terms": {"red jelly pouch": "2", "blue jelly pouch": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"red jelly pouch": "1", "blue jelly pouch": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of blue jelly pouches\n- y: Number of red jelly pouches\n\nObjective:\n- The patient aims to minimize the cost of purchasing jelly supplements. Given that the cost per blue jelly pouch is $5 and the cost per red jelly pouch is $7, the objective function is: Minimize 5x + 7y\n\nConstraints:\n- The patient must get at least 30 units of calcium, 25 units of potassium, and 30 units of sodium. This leads to the following constraints:\n    - 2x + 3y >= 30 (calcium constraint)\n    - x + 2y >= 25 (potassium constraint)\n    - 3x + y >= 30 (sodium constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 7y\nConstraints:\n2x + 3y >= 30\nx + 2y >= 25\n3x + y >= 30", "canonical": {"objective": [5.0, 7.0], "constraints": [[-2.0, -3.0, -30.0], [-1.0, -2.0, -25.0], [-3.0, -1.0, -30.0]]}, "solution": {"x": 7, "y": 9}, "pseudo_model": "\nDecision Variables:\n- Number of blue jelly pouches purchased: BlueJellyPouch\n- Number of red jelly pouches purchased: RedJellyPouch\n\nConstraints:\n- Calcium requirement (at least 30 units):\n  2 * BlueJellyPouch + 3 * RedJellyPouch >= 30\n- Potassium requirement (at least 25 units):\n  1 * BlueJellyPouch + 2 * RedJellyPouch >= 25\n- Sodium requirement (at least 30 units):\n  3 * BlueJellyPouch + 1 * RedJellyPouch >= 30\n\nObjective:\n- Minimize costs ($5 per blue jelly pouch, $7 per red jelly pouch):\n  5 * BlueJellyPouch + 7 * RedJellyPouch\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueJellyPouch = intvar(0, 999999999)  # Number of blue jelly pouches\nRedJellyPouch = intvar(0, 999999999)  # Number of red jelly pouches\n\n# Constraints\nm = Model()\n\n# Calcium requirement (at least 30 units):\nm += 2 * BlueJellyPouch + 3 * RedJellyPouch >= 30\n# Potassium requirement (at least 25 units):\nm += 1 * BlueJellyPouch + 2 * RedJellyPouch >= 25\n# Sodium requirement (at least 30 units):\nm += 3 * BlueJellyPouch + 1 * RedJellyPouch >= 30\n\n# Objective\n# Minimize costs ($5 per blue jelly pouch, $7 per red jelly pouch):\nm.minimize(5 * BlueJellyPouch + 7 * RedJellyPouch)\n", "entities": [{"start": 101, "end": 117, "word": "blue jelly pouch", "entity_group": "VAR", "score": 0.9987333229607822}, {"start": 127, "end": 128, "word": "2", "entity_group": "PARAM", "score": 0.9995968193178814}, {"start": 148, "end": 149, "word": "1", "entity_group": "PARAM", "score": 0.9996834839394683}, {"start": 174, "end": 175, "word": "3", "entity_group": "PARAM", "score": 0.9993745288819331}, {"start": 199, "end": 214, "word": "red jelly pouch", "entity_group": "VAR", "score": 0.9985383144988498}, {"start": 224, "end": 225, "word": "3", "entity_group": "PARAM", "score": 0.9995513029737523}, {"start": 245, "end": 246, "word": "2", "entity_group": "PARAM", "score": 0.9997351511093231}, {"start": 272, "end": 273, "word": "1", "entity_group": "PARAM", "score": 0.9985081968841999}, {"start": 312, "end": 320, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992436649731095}, {"start": 321, "end": 323, "word": "30", "entity_group": "LIMIT", "score": 0.9997285204520958}, {"start": 343, "end": 345, "word": "25", "entity_group": "LIMIT", "score": 0.9997462233625188}, {"start": 371, "end": 373, "word": "30", "entity_group": "LIMIT", "score": 0.9992460344130766}, {"start": 399, "end": 403, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9985396085371571}, {"start": 408, "end": 424, "word": "blue jelly pouch", "entity_group": "VAR", "score": 0.9969760272824668}, {"start": 430, "end": 431, "word": "5", "entity_group": "PARAM", "score": 0.9996456635540729}, {"start": 440, "end": 444, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9988007050436869}, {"start": 449, "end": 464, "word": "red jelly pouch", "entity_group": "VAR", "score": 0.9963953464273337}, {"start": 470, "end": 471, "word": "7", "entity_group": "PARAM", "score": 0.9996902173401545}, {"start": 522, "end": 530, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992247022171944}, {"start": 535, "end": 540, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9983262570023982}]}
{"doc_id": "-612343855", "document": "A bus can carry at most 80 people and sells adult ticket and children's tickets. A profit of $3 is made on each adult ticket and a profit of $1 is made on each children's ticket. The bus reserves at least 15 tickets for children. However, at least 3 times as many tickets sold are adult tickets than children's ticket. How many of each type of ticket should be sold to maximize profit?", "order_mapping": {"adult ticket": 0, "children's tickets": 1, "children's ticket": 1, "children": 1, "adult tickets": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"adult ticket": "3", "children's ticket": "1"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "15", "var": "children", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "adult tickets", "direction": "at least", "param": "3", "y_var": "children's ticket", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of adult tickets sold\n- y: Number of children's tickets sold\n\nObjective:\n- The bus company aims to maximize its profit. A profit of $3 is made on each adult ticket and a profit of $1 is made on each children's ticket. Therefore, the objective function is: Maximize 3x + y\n\nConstraints:\n- The bus can carry at most 80 people, so the constraint is: x + y <= 80.\n- The bus reserves at least 15 tickets for children, leading to the constraint: y >= 15.\n- At least 3 times as many tickets sold are adult tickets than children's tickets, resulting in the constraint: x >= 3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + y\nConstraints:\nx + y <= 80\ny >= 15\nx >= 3y", "canonical": {"objective": [-3.0, -1.0], "constraints": [[1.0, 1.0, 80.0], [0.0, -1.0, -15.0], [-1.0, 3.0, 0.0]]}, "solution": {"x": 65, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of adult tickets sold: AdultTickets\n- Number of children's tickets sold: ChildrenTickets\n\nConstraints:\n- The bus can carry at most 80 people:\n  AdultTickets + ChildrenTickets <= 80\n- At least 15 tickets are reserved for children:\n  ChildrenTickets >= 15\n- At least 3 times as many tickets sold are adult tickets than children's tickets:\n  AdultTickets >= 3 * ChildrenTickets\n\nObjective:\n- Maximize profit (3 dollars per adult ticket, 1 dollar per children's ticket):\n  3 * AdultTickets + 1 * ChildrenTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAdultTickets = intvar(0, 999999999)  # Number of adult tickets sold\nChildrenTickets = intvar(0, 999999999)  # Number of children's tickets sold\n\n# Constraints\nm = Model()\n\n# The bus can carry at most 80 people:\nm += AdultTickets + ChildrenTickets <= 80\n# At least 15 tickets are reserved for children:\nm += ChildrenTickets >= 15\n# At least 3 times as many tickets sold are adult tickets than children's tickets:\nm += AdultTickets >= 3 * ChildrenTickets\n\n# Objective\n# Maximize profit (3 dollars per adult ticket, 1 dollar per children's ticket):\nm.maximize(3 * AdultTickets + 1 * ChildrenTickets)\n", "entities": [{"start": 16, "end": 23, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988712700235719}, {"start": 24, "end": 26, "word": "80", "entity_group": "LIMIT", "score": 0.9996683347111629}, {"start": 44, "end": 56, "word": "adult ticket", "entity_group": "VAR", "score": 0.9999721920755855}, {"start": 61, "end": 80, "word": "children 's tickets", "entity_group": "VAR", "score": 0.9985631496836143}, {"start": 85, "end": 91, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999948906127769}, {"start": 97, "end": 98, "word": "3", "entity_group": "PARAM", "score": 0.9995391053934214}, {"start": 115, "end": 127, "word": "adult ticket", "entity_group": "VAR", "score": 0.9999568963504768}, {"start": 134, "end": 140, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999492734562104}, {"start": 146, "end": 147, "word": "1", "entity_group": "PARAM", "score": 0.999437133240993}, {"start": 164, "end": 182, "word": "children 's ticket", "entity_group": "VAR", "score": 0.9992522241682488}, {"start": 202, "end": 210, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986531825719627}, {"start": 211, "end": 213, "word": "15", "entity_group": "LIMIT", "score": 0.9996766058281478}, {"start": 226, "end": 234, "word": "children", "entity_group": "VAR", "score": 0.9997019638792388}, {"start": 247, "end": 255, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983410572662259}, {"start": 256, "end": 257, "word": "3", "entity_group": "PARAM", "score": 0.9982565436462196}, {"start": 289, "end": 302, "word": "adult tickets", "entity_group": "VAR", "score": 0.9999875508852887}, {"start": 308, "end": 326, "word": "children 's ticket", "entity_group": "VAR", "score": 0.9989222383325698}, {"start": 379, "end": 387, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994103228497168}, {"start": 388, "end": 394, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280326548371}]}
{"doc_id": "1496462806", "document": "A sports warehouse stocks hockey nets and basketball hoops. Each hockey net takes 5 sq ft of space while each basketball hoop takes 3 sq ft of space. The warehouse has 300 sq ft of space available. The warehouse has a budget of $10000 with each hockey net costing $100 and each basketball hoop costing $150. With hockey being much more popular in the area, at least 65% of all items in stock must be hockey nets. If the profit per hockey net is $50 and the profit per basketball hoop is $75, how many of each should be bought and sold to maximize profit?", "order_mapping": {"hockey nets": 0, "basketball hoops": 1, "hockey net": 0, "basketball hoop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hockey net": "50", "basketball hoop": "75"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"hockey net": "5", "basketball hoop": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "10000", "terms": {"hockey net": "100", "basketball hoop": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "65%", "var": "hockey nets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hockey nets\n- y: Number of basketball hoops\n\nObjective:\n- The objective is to maximize the profit. The profit per hockey net is $50 and the profit per basketball hoop is $75. Therefore, the objective function is: Maximize 50x + 75y\n\nConstraints:\n- The warehouse has 300 sq ft of space available, and each hockey net takes 5 sq ft while each basketball hoop takes 3 sq ft. This leads to the constraint: 5x + 3y <= 300.\n- The warehouse has a budget of $10000, with each hockey net costing $100 and each basketball hoop costing $150, resulting in the constraint: 100x + 150y <= 10000.\n- At least 65% of all items in stock must be hockey nets, leading to the constraint: x >= 0.65(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 75y\nConstraints:\n5x + 3y <= 300\n100x + 150y <= 10000\nx >= 0.65(x + y)", "canonical": {"objective": [-50.0, -75.0], "constraints": [[5.0, 3.0, 300.0], [100.0, 150.0, 10000.0], [-0.35, 0.65, 0.0]]}, "solution": {"x": 45, "y": 24}, "pseudo_model": "\nDecision Variables:\n- Number of hockey nets: HockeyNets\n- Number of basketball hoops: BasketballHoops\n\nConstraints:\n- Space constraint (5 sq ft per hockey net and 3 sq ft per basketball hoop with 300 sq ft available):\n  5 * HockeyNets + 3 * BasketballHoops <= 300\n- Budget constraint ($100 per hockey net and $150 per basketball hoop with $10000 budget):\n  100 * HockeyNets + 150 * BasketballHoops <= 10000\n- At least 65% of all items must be hockey nets:\n  HockeyNets >= 0.65 * (HockeyNets + BasketballHoops)\n\nObjective:\n- Maximize profit ($50 profit per hockey net and $75 profit per basketball hoop):\n  50 * HockeyNets + 75 * BasketballHoops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHockeyNets = intvar(0, 999999999)  # Number of hockey nets\nBasketballHoops = intvar(0, 999999999)  # Number of basketball hoops\n\n# Constraints\nm = Model()\n\n# Space constraint: 5 sq ft per hockey net and 3 sq ft per basketball hoop with 300 sq ft available\nm += 5 * HockeyNets + 3 * BasketballHoops <= 300\n# Budget constraint: $100 per hockey net and $150 per basketball hoop with $10000 budget\nm += 100 * HockeyNets + 150 * BasketballHoops <= 10000\n# At least 65% of all items must be hockey nets\ntotal_items = HockeyNets + BasketballHoops\nm += HockeyNets >= 0.65 * total_items\n\n# Objective\n# Maximize profit: $50 profit per hockey net and $75 profit per basketball hoop\nm.maximize(50 * HockeyNets + 75 * BasketballHoops)\n", "entities": [{"start": 26, "end": 37, "word": "hockey nets", "entity_group": "VAR", "score": 0.9998563030066935}, {"start": 42, "end": 58, "word": "basketball hoops", "entity_group": "VAR", "score": 0.9999880931991993}, {"start": 66, "end": 76, "word": "hockey net", "entity_group": "VAR", "score": 0.9999763019239852}, {"start": 83, "end": 84, "word": "5", "entity_group": "PARAM", "score": 0.9995620835971027}, {"start": 111, "end": 126, "word": "basketball hoop", "entity_group": "VAR", "score": 0.999973616438878}, {"start": 133, "end": 134, "word": "3", "entity_group": "PARAM", "score": 0.9995442254022586}, {"start": 170, "end": 173, "word": "300", "entity_group": "LIMIT", "score": 0.9996815217802179}, {"start": 189, "end": 198, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993917127971731}, {"start": 221, "end": 227, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9966419124274516}, {"start": 233, "end": 238, "word": "10000", "entity_group": "LIMIT", "score": 0.9993603838743494}, {"start": 249, "end": 259, "word": "hockey net", "entity_group": "VAR", "score": 0.9999783640143353}, {"start": 270, "end": 273, "word": "100", "entity_group": "PARAM", "score": 0.9997425863056465}, {"start": 283, "end": 298, "word": "basketball hoop", "entity_group": "VAR", "score": 0.9999779051265553}, {"start": 309, "end": 312, "word": "150", "entity_group": "PARAM", "score": 0.9997369494108757}, {"start": 365, "end": 373, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988507541096725}, {"start": 374, "end": 378, "word": "65 %", "entity_group": "LIMIT", "score": 0.9313052525781574}, {"start": 409, "end": 420, "word": "hockey nets", "entity_group": "VAR", "score": 0.999978139589241}, {"start": 430, "end": 436, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999864347243787}, {"start": 441, "end": 451, "word": "hockey net", "entity_group": "VAR", "score": 0.9998864764560614}, {"start": 457, "end": 459, "word": "50", "entity_group": "PARAM", "score": 0.999612603261735}, {"start": 468, "end": 474, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998206860017986}, {"start": 479, "end": 494, "word": "basketball hoop", "entity_group": "VAR", "score": 0.9999450054013883}, {"start": 500, "end": 502, "word": "75", "entity_group": "PARAM", "score": 0.9996757802775937}, {"start": 551, "end": 559, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994420961850083}, {"start": 560, "end": 566, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997976841836507}]}
{"doc_id": "-335745552", "document": "An auto manufacturing plant has a machine that makes doors and bumpers. Each door takes 20 minutes of machine time and each bumper takes 10 minutes of machine time.  In a week the machine is only available for 3000 minutes. The plant can also make at most 100 doors and at most 200 bumpers per week. If the profit per door is $200 and the profit per bumper is $150, how many of each should the plant make to maximize profit?", "order_mapping": {"doors": 0, "bumpers": 1, "door": 0, "bumper": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"door": "200", "bumper": "150"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "3000", "terms": {"door": "20", "bumper": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "doors", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "200", "var": "bumpers", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of doors\n- y: Number of bumpers\n\nObjective:\n- The plant aims to maximize its profit. The profit per door is $200 and the profit per bumper is $150. Therefore, the objective function is: Maximize 200x + 150y\n\nConstraints:\n- The machine is available for 3000 minutes in a week. Each door takes 20 minutes and each bumper takes 10 minutes, leading to the constraint: 20x + 10y <= 3000.\n- The plant can make at most 100 doors per week, resulting in the constraint: x <= 100.\n- The plant can make at most 200 bumpers per week, leading to the constraint: y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 150y\nConstraints:\n20x + 10y <= 3000\nx <= 100\ny <= 200", "canonical": {"objective": [-200.0, -150.0], "constraints": [[20.0, 10.0, 3000.0], [1.0, 0.0, 100.0], [0.0, 1.0, 200.0]]}, "solution": {"x": 50, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of doors made per week: Doors\n- Number of bumpers made per week: Bumpers\n\nConstraints:\n- Machine time for doors and bumpers should not exceed 3000 minutes per week:\n  20 * Doors + 10 * Bumpers <= 3000\n- At most 100 doors can be made per week:\n  Doors <= 100\n- At most 200 bumpers can be made per week:\n  Bumpers <= 200\n\nObjective:\n- Maximize profit ($200 profit per door, $150 profit per bumper):\n  200 * Doors + 150 * Bumpers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDoors = intvar(0, 999999999)  # Number of doors made per week\nBumpers = intvar(0, 999999999)  # Number of bumpers made per week\n\n# Constraints\nm = Model()\n\n# Machine time limit per week (3000 minutes):\nm += 20 * Doors + 10 * Bumpers <= 3000\n# Maximum of 100 doors per week:\nm += Doors <= 100\n# Maximum of 200 bumpers per week:\nm += Bumpers <= 200\n\n# Objective\n# Maximize profit ($200 per door, $150 per bumper):\nm.maximize(200 * Doors + 150 * Bumpers)\n", "entities": [{"start": 53, "end": 58, "word": "doors", "entity_group": "VAR", "score": 0.9991900382970018}, {"start": 63, "end": 70, "word": "bumpers", "entity_group": "VAR", "score": 0.9998233670794474}, {"start": 78, "end": 82, "word": "door", "entity_group": "VAR", "score": 0.9996913143637244}, {"start": 89, "end": 91, "word": "20", "entity_group": "PARAM", "score": 0.9996579008998667}, {"start": 125, "end": 131, "word": "bumper", "entity_group": "VAR", "score": 0.9998074756740011}, {"start": 138, "end": 140, "word": "10", "entity_group": "PARAM", "score": 0.998835230135205}, {"start": 192, "end": 196, "word": "only", "entity_group": "CONST_DIR", "score": 0.9807039557636407}, {"start": 211, "end": 215, "word": "3000", "entity_group": "LIMIT", "score": 0.9996495165291526}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989781444283193}, {"start": 258, "end": 261, "word": "100", "entity_group": "LIMIT", "score": 0.9997456105056839}, {"start": 262, "end": 267, "word": "doors", "entity_group": "VAR", "score": 0.9984299745528815}, {"start": 272, "end": 279, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992330227841808}, {"start": 280, "end": 283, "word": "200", "entity_group": "LIMIT", "score": 0.9997384658955853}, {"start": 284, "end": 291, "word": "bumpers", "entity_group": "VAR", "score": 0.9987870238685361}, {"start": 310, "end": 316, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997378116105801}, {"start": 321, "end": 325, "word": "door", "entity_group": "VAR", "score": 0.999615705111248}, {"start": 331, "end": 334, "word": "200", "entity_group": "PARAM", "score": 0.9993478814005061}, {"start": 343, "end": 349, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465446}, {"start": 354, "end": 360, "word": "bumper", "entity_group": "VAR", "score": 0.9990888329773494}, {"start": 366, "end": 369, "word": "150", "entity_group": "PARAM", "score": 0.9994707412182505}, {"start": 414, "end": 422, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 423, "end": 429, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "566463604", "document": "A lighting company makes glass and brass chandeliers. Each glass chandelier takes 2 hours for crafting and 1 hour for installation. Each brass chandelier takes 1.5 hours for crafting and 0.75 hours for installation. The company has available 750 hours for crafting and 500 hours for installation. If the profit per glass chandelier is $400 and the profit per brass chandelier is $300, how many of each should the company craft and install to maximize profit?", "order_mapping": {"glass": 0, "brass": 1, "glass chandelier": 0, "brass chandelier": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"glass chandelier": "400", "brass chandelier": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "750", "terms": {"glass chandelier": "2", "brass chandelier": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"glass chandelier": "1", "brass chandelier": "0.75"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of glass chandeliers to be crafted and installed\n- y: Number of brass chandeliers to be crafted and installed\n\nObjective:\n- The company aims to maximize its profit. The profit per glass chandelier is $400 and the profit per brass chandelier is $300. Therefore, the objective function is: Maximize 400x + 300y\n\nConstraints:\n- The company has 750 hours available for crafting, and each glass chandelier takes 2 hours and each brass chandelier takes 1.5 hours. This leads to the constraint: 2x + 1.5y <= 750.\n- The company has 500 hours available for installation, and each glass chandelier takes 1 hour and each brass chandelier takes 0.75 hours. This results in the constraint: x + 0.75y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 300y\nConstraints:\n2x + 1.5y <= 750\nx + 0.75y <= 500", "canonical": {"objective": [-400.0, -300.0], "constraints": [[2.0, 1.5, 750.0], [1.0, 0.75, 500.0]]}, "solution": {"x": 0, "y": 500}, "pseudo_model": "\nDecision Variables:\n- Number of glass chandeliers crafted and installed: GlassChandeliers\n- Number of brass chandeliers crafted and installed: BrassChandeliers\n\nConstraints:\n- Total crafting hours for both types of chandeliers should not exceed 750 hours:\n  2 * GlassChandeliers + 1.5 * BrassChandeliers <= 750\n- Total installation hours for both types of chandeliers should not exceed 500 hours:\n  1 * GlassChandeliers + 0.75 * BrassChandeliers <= 500\n\nObjective:\n- Maximize profit ($400 per glass chandelier, $300 per brass chandelier):\n  400 * GlassChandeliers + 300 * BrassChandeliers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGlassChandeliers = intvar(0, 999999999)  # Number of glass chandeliers\nBrassChandeliers = intvar(0, 999999999)  # Number of brass chandeliers\n\n# Constraints\nm = Model()\n\n# Total crafting hours for both types of chandeliers should not exceed 750 hours:\n# (2 hours for crafting a glass chandelier, 1.5 hours for crafting a brass chandelier)\nm += 2 * GlassChandeliers + 1.5 * BrassChandeliers <= 750\n\n# Total installation hours for both types of chandeliers should not exceed 500 hours:\n# (1 hour for installing a glass chandelier, 0.75 hours for installing a brass chandelier)\nm += 1 * GlassChandeliers + 0.75 * BrassChandeliers <= 500\n\n# Objective\n# Maximize profit ($400 per glass chandelier, $300 per brass chandelier):\nm.maximize(400 * GlassChandeliers + 300 * BrassChandeliers)\n", "entities": [{"start": 25, "end": 30, "word": "glass", "entity_group": "VAR", "score": 0.9994569928376221}, {"start": 35, "end": 40, "word": "brass", "entity_group": "VAR", "score": 0.9996662055168166}, {"start": 60, "end": 76, "word": "glass chandelier", "entity_group": "VAR", "score": 0.9999841452258775}, {"start": 83, "end": 84, "word": "2", "entity_group": "PARAM", "score": 0.9996970779610151}, {"start": 108, "end": 109, "word": "1", "entity_group": "PARAM", "score": 0.9996011030965045}, {"start": 139, "end": 155, "word": "brass chandelier", "entity_group": "VAR", "score": 0.9999865933424333}, {"start": 162, "end": 165, "word": "1.5", "entity_group": "PARAM", "score": 0.9997279023813118}, {"start": 189, "end": 193, "word": "0.75", "entity_group": "PARAM", "score": 0.9996554652779936}, {"start": 235, "end": 244, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991655019856499}, {"start": 245, "end": 248, "word": "750", "entity_group": "LIMIT", "score": 0.999417602696919}, {"start": 272, "end": 275, "word": "500", "entity_group": "LIMIT", "score": 0.9996548445654585}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999403765858}, {"start": 319, "end": 335, "word": "glass chandelier", "entity_group": "VAR", "score": 0.9999475314348658}, {"start": 341, "end": 344, "word": "400", "entity_group": "PARAM", "score": 0.9996126246185222}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999938472831914}, {"start": 364, "end": 380, "word": "brass chandelier", "entity_group": "VAR", "score": 0.9999447164715625}, {"start": 386, "end": 389, "word": "300", "entity_group": "PARAM", "score": 0.9996757786827887}, {"start": 449, "end": 457, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999011524677519}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998647588561279}]}
{"doc_id": "-1848094752", "document": "A smoothie shop makes peanut butter and almond butter smoothies. Three ingredients are needed to make the smoothies: peanut butter, almond butter, and milk. One peanut butter smoothie requires 2 units of peanut butter and 3 units of milk. One almond butter smoothie requires 3 units of almond butter and 3 units of milk. The shop has available 80 units of peanut butter, 90 units of almond butter, and 100 units of milk. If the profit per peanut butter smoothie is $3 and the profit per almond butter smoothie is $5, how many of each should be made to maximize profit?", "order_mapping": {"peanut butter": 0, "almond butter smoothies": 1, "peanut butter smoothie": 0, "almond butter smoothie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peanut butter smoothie": "3", "almond butter smoothie": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "80", "terms": {"peanut butter smoothie": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "90", "terms": {"almond butter smoothie": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "100", "terms": {"peanut butter smoothie": "3", "almond butter smoothie": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of peanut butter smoothies\n- y: Number of almond butter smoothies\n\nObjective:\n- The smoothie shop aims to maximize its profit. The profit per peanut butter smoothie is $3 and the profit per almond butter smoothie is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The shop has available 80 units of peanut butter, leading to the constraint: 2x <= 80.\n- The shop has available 90 units of almond butter, leading to the constraint: 3y <= 90.\n- The shop has available 100 units of milk, which is used in both types of smoothies, leading to the constraint: 2x + 3y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\n2x <= 80\n3y <= 90\n2x + 3y <= 100", "canonical": {"objective": [-3.0, -5.0], "constraints": [[2.0, 0.0, 80.0], [0.0, 3.0, 90.0], [2.0, 3.0, 100.0]]}, "solution": {"x": 5, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of peanut butter smoothies made: PeanutButterSmoothie\n- Number of almond butter smoothies made: AlmondButterSmoothie\n\nConstraints:\n- Peanut butter usage for peanut butter smoothies should not exceed 80 units:\n  2 * PeanutButterSmoothie <= 80\n- Almond butter usage for almond butter smoothies should not exceed 90 units:\n  3 * AlmondButterSmoothie <= 90\n- Milk usage for both types of smoothies should not exceed 100 units:\n  3 * PeanutButterSmoothie + 3 * AlmondButterSmoothie <= 100\n\nObjective:\n- Maximize profit (3 dollars per peanut butter smoothie, 5 dollars per almond butter smoothie):\n  3 * PeanutButterSmoothie + 5 * AlmondButterSmoothie\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeanutButterSmoothie = intvar(0, 999999999)  # Number of peanut butter smoothies made\nAlmondButterSmoothie = intvar(0, 999999999)  # Number of almond butter smoothies made\n\n# Constraints\nm = Model()\n\n# Peanut butter constraint: 2 units per peanut butter smoothie, 80 units available\nm += 2 * PeanutButterSmoothie <= 80\n# Almond butter constraint: 3 units per almond butter smoothie, 90 units available\nm += 3 * AlmondButterSmoothie <= 90\n# Milk constraint: 3 units per smoothie (both types), 100 units available\nm += 3 * PeanutButterSmoothie + 3 * AlmondButterSmoothie <= 100\n\n# Objective\n# Maximize profit (3 dollars per peanut butter smoothie, 5 dollars per almond butter smoothie)\nm.maximize(3 * PeanutButterSmoothie + 5 * AlmondButterSmoothie)\n", "entities": [{"start": 22, "end": 35, "word": "peanut butter", "entity_group": "VAR", "score": 0.9999707852538352}, {"start": 40, "end": 63, "word": "almond butter smoothies", "entity_group": "VAR", "score": 0.9994266760705047}, {"start": 166, "end": 188, "word": "peanut butter smoothie", "entity_group": "VAR", "score": 0.9996788828140226}, {"start": 198, "end": 199, "word": "2", "entity_group": "PARAM", "score": 0.9996998639309763}, {"start": 227, "end": 228, "word": "3", "entity_group": "PARAM", "score": 0.9996530125600087}, {"start": 249, "end": 271, "word": "almond butter smoothie", "entity_group": "VAR", "score": 0.9997263702063979}, {"start": 281, "end": 282, "word": "3", "entity_group": "PARAM", "score": 0.9996998194895711}, {"start": 310, "end": 311, "word": "3", "entity_group": "PARAM", "score": 0.999570881123235}, {"start": 341, "end": 350, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995834057518673}, {"start": 351, "end": 353, "word": "80", "entity_group": "LIMIT", "score": 0.9992578569242122}, {"start": 379, "end": 381, "word": "90", "entity_group": "LIMIT", "score": 0.9996468961914493}, {"start": 411, "end": 414, "word": "100", "entity_group": "LIMIT", "score": 0.9995992532204553}, {"start": 438, "end": 444, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999364352380142}, {"start": 449, "end": 471, "word": "peanut butter smoothie", "entity_group": "VAR", "score": 0.9994833955860408}, {"start": 477, "end": 478, "word": "3", "entity_group": "PARAM", "score": 0.9993748313315992}, {"start": 487, "end": 493, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999336708125794}, {"start": 498, "end": 520, "word": "almond butter smoothie", "entity_group": "VAR", "score": 0.999476750138195}, {"start": 526, "end": 527, "word": "5", "entity_group": "PARAM", "score": 0.9994832489625529}, {"start": 565, "end": 573, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 574, "end": 580, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "598057720", "document": "A company makes hoodies and sweaters. Each hoodie requires 3 units of fabric and 2 units of dye. Each sweater requires 2 units of fabric and 1.5 units of dye. At the company, there are 500 units of fabric available and 300 units of dye. If the profit per hoodie is $20 and the profit per sweater is $15, how many of each should be made to maximize profit?", "order_mapping": {"hoodies": 0, "sweaters": 1, "hoodie": 0, "sweater": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hoodie": "20", "sweater": "15"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"hoodie": "3", "sweater": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"hoodie": "2", "sweater": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hoodies to be made\n- y: Number of sweaters to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per hoodie is $20 and the profit per sweater is $15. Therefore, the objective function is: Maximize 20x + 15y\n\nConstraints:\n- The availability of fabric and dye limits the production. Each hoodie requires 3 units of fabric and 2 units of dye, and each sweater requires 2 units of fabric and 1.5 units of dye. The fabric constraint is: 3x + 2y <= 500, and the dye constraint is: 2x + 1.5y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 15y\nConstraints:\n3x + 2y <= 500\n2x + 1.5y <= 300", "canonical": {"objective": [-20.0, -15.0], "constraints": [[3.0, 2.0, 500.0], [2.0, 1.5, 300.0]]}, "solution": {"x": 150, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of hoodies made: Hoodies\n- Number of sweaters made: Sweaters\n\nConstraints:\n- Fabric usage for hoodies and sweaters should not exceed 500 units:\n  3 * Hoodies + 2 * Sweaters <= 500\n- Dye usage for hoodies and sweaters should not exceed 300 units:\n  2 * Hoodies + 1.5 * Sweaters <= 300\n\nObjective:\n- Maximize profit (20 dollars per hoodie, 15 dollars per sweater):\n  20 * Hoodies + 15 * Sweaters\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHoodies = intvar(0, 999999999)  # Number of hoodies made\nSweaters = intvar(0, 999999999)  # Number of sweaters made\n\n# Constraints\nm = Model()\n\n# Fabric constraint: 3 units per hoodie and 2 units per sweater, 500 units available\nm += 3 * Hoodies + 2 * Sweaters <= 500\n# Dye constraint: 2 units per hoodie and 1.5 units per sweater, 300 units available\nm += 2 * Hoodies + 1.5 * Sweaters <= 300\n\n# Objective\n# Maximize profit (20 dollars per hoodie, 15 dollars per sweater)\nm.maximize(20 * Hoodies + 15 * Sweaters)\n", "entities": [{"start": 16, "end": 23, "word": "hoodies", "entity_group": "VAR", "score": 0.9994447884014459}, {"start": 28, "end": 36, "word": "sweaters", "entity_group": "VAR", "score": 0.9997228222483389}, {"start": 44, "end": 50, "word": "hoodie", "entity_group": "VAR", "score": 0.9995782729198701}, {"start": 60, "end": 61, "word": "3", "entity_group": "PARAM", "score": 0.999699228441133}, {"start": 82, "end": 83, "word": "2", "entity_group": "PARAM", "score": 0.9997197761898172}, {"start": 104, "end": 111, "word": "sweater", "entity_group": "VAR", "score": 0.999558487638246}, {"start": 121, "end": 122, "word": "2", "entity_group": "PARAM", "score": 0.9996718041919426}, {"start": 143, "end": 146, "word": "1.5", "entity_group": "PARAM", "score": 0.9996644367598126}, {"start": 189, "end": 192, "word": "500", "entity_group": "LIMIT", "score": 0.9997325342734964}, {"start": 209, "end": 218, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994089041670707}, {"start": 223, "end": 226, "word": "300", "entity_group": "LIMIT", "score": 0.9992970215836631}, {"start": 249, "end": 255, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998561520488877}, {"start": 260, "end": 266, "word": "hoodie", "entity_group": "VAR", "score": 0.9995604495891627}, {"start": 272, "end": 274, "word": "20", "entity_group": "PARAM", "score": 0.9991625054702344}, {"start": 283, "end": 289, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999094567881398}, {"start": 294, "end": 301, "word": "sweater", "entity_group": "VAR", "score": 0.9990975872162979}, {"start": 307, "end": 309, "word": "15", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 347, "end": 355, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-451402850", "document": "A businessman has $50000 to invest in two farms, Bob's farm and Joe's farm. Because Bob has more experience, he has decided to invest at least 3 times as much money in Bob's farm than in Joe's farm. However, the amount invested in Bob's farm can be at most $40000. If investments in Bob's farm earn 8% and investments in Joe's farm earn 6%, how much money should he invest in each to maximize his earnings?", "order_mapping": {"Bob's farm": 0, "Joe's farm": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"Bob's farm": "8%", "Joe's farm": "6%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "50000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "Bob's farm", "direction": "at least", "param": "3", "y_var": "Joe's farm", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40000", "var": "Bob's farm", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in Bob's farm\n- y: Dollars invested in Joe's farm\n\nObjective:\n- The businessman wants to maximize his earnings. The investments in Bob's farm earn 8% and investments in Joe's farm earn 6%. Therefore, the objective function is: Maximize 0.08x + 0.06y\n\nConstraints:\n- The businessman has $50000 to invest, so the constraint is: x + y <= 50000.\n- Bob has decided to invest at least 3 times as much money in his farm than in Joe's farm, leading to the constraint: x >= 3y.\n- The amount invested in Bob's farm can be at most $40000, leading to the constraint: x <= 40000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.08x + 0.06y\nConstraints:\nx + y <= 50000\nx >= 3y\nx <= 40000", "canonical": {"objective": [-0.08, -0.06], "constraints": [[1.0, 1.0, 50000.0], [-1.0, 3.0, 0.0], [1.0, 0.0, 40000.0]]}, "solution": {"x": 40000, "y": 10000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in Bob's farm: BobsFarm\n- Amount invested in Joe's farm: JoesFarm\n\nConstraints:\n- Total investment should not exceed $50000:\n  BobsFarm + JoesFarm <= 50000\n- Investment in Bob's farm should be at least 3 times the investment in Joe's farm:\n  BobsFarm >= 3 * JoesFarm\n- Investment in Bob's farm can be at most $40000:\n  BobsFarm <= 40000\n\nObjective:\n- Maximize earnings (8% from Bob's farm, 6% from Joe's farm):\n  0.08 * BobsFarm + 0.06 * JoesFarm\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBobsFarm = intvar(0, 999999999)  # Amount invested in Bob's farm\nJoesFarm = intvar(0, 999999999)  # Amount invested in Joe's farm\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $50000:\nm += BobsFarm + JoesFarm <= 50000\n# Investment in Bob's farm should be at least 3 times the investment in Joe's farm:\nm += BobsFarm >= 3 * JoesFarm\n# Investment in Bob's farm can be at most $40000:\nm += BobsFarm <= 40000\n\n# Objective\n# Maximize earnings (8% from Bob's farm, 6% from Joe's farm):\nm.maximize(0.08 * BobsFarm + 0.06 * JoesFarm)\n", "entities": [{"start": 14, "end": 17, "word": "has", "entity_group": "CONST_DIR", "score": 0.9968650352161633}, {"start": 20, "end": 25, "word": "50000", "entity_group": "LIMIT", "score": 0.9992891712074201}, {"start": 51, "end": 62, "word": "Bob 's farm", "entity_group": "VAR", "score": 0.99939536171119}, {"start": 67, "end": 78, "word": "Joe 's farm", "entity_group": "VAR", "score": 0.9993180061105916}, {"start": 140, "end": 148, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982170765388129}, {"start": 149, "end": 150, "word": "3", "entity_group": "PARAM", "score": 0.9984861979750633}, {"start": 174, "end": 185, "word": "Bob 's farm", "entity_group": "VAR", "score": 0.9995039993669295}, {"start": 194, "end": 205, "word": "Joe 's farm", "entity_group": "VAR", "score": 0.9991554465797262}, {"start": 241, "end": 252, "word": "Bob 's farm", "entity_group": "VAR", "score": 0.9991394019031782}, {"start": 260, "end": 267, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9927055389146094}, {"start": 270, "end": 275, "word": "40000", "entity_group": "LIMIT", "score": 0.9994738067198645}, {"start": 296, "end": 307, "word": "Bob 's farm", "entity_group": "VAR", "score": 0.9978744781544259}, {"start": 308, "end": 312, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9821024580478862}, {"start": 313, "end": 316, "word": "8 %", "entity_group": "PARAM", "score": 0.9682891248096523}, {"start": 336, "end": 347, "word": "Joe 's farm", "entity_group": "VAR", "score": 0.9991943533735215}, {"start": 348, "end": 352, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9903592229617192}, {"start": 353, "end": 356, "word": "6 %", "entity_group": "PARAM", "score": 0.9922415687797664}, {"start": 402, "end": 410, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203414966803}, {"start": 415, "end": 423, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.998930629298111}]}
{"doc_id": "-790646361", "document": "A kitchen company makes spoons, forks, and knives with rubber handles. Each spoon requires 1 unit of steel and 2 units of rubber. Each fork requires 1.5 units of steel and 1.5 units of rubber. Each knife requires 2 units of steel and 1 unit of rubber. The company has available 400 units of steel and 500 units of rubber. If the revenue per spoon is $2, the revenue per fork is $3, and the revenue per knife is $4, how many of each should they make to maximize revenue?", "order_mapping": {"spoons": 0, "forks": 1, "knives": 2, "spoon": 0, "fork": 1, "knife": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"knife": "4", "fork": "3", "spoon": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"spoon": "1", "fork": "1.5", "knife": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"spoon": "2", "fork": "1.5", "knife": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of spoons produced\n- y: Number of forks produced\n- z: Number of knives produced\n\nObjective:\n- The company aims to maximize its revenue. The revenue per spoon is $2, the revenue per fork is $3, and the revenue per knife is $4. Therefore, the objective function is: Maximize 2x + 3y + 4z\n\nConstraints:\n- The company has available 400 units of steel, and each item requires a certain amount of steel. The constraint for steel is: x + 1.5y + 2z <= 400.\n- The company has available 500 units of rubber, and each item requires a certain amount of rubber. The constraint for rubber is: 2x + 1.5y + z <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y + 4z\nConstraints:\nx + 1.5y + 2z <= 400\n2x + 1.5y + z <= 500", "canonical": {"objective": [-2.0, -3.0, -4.0], "constraints": [[1.0, 1.5, 2.0, 400.0], [2.0, 1.5, 1.0, 500.0]]}, "solution": {"x": 0, "y": 0, "z": 200}, "pseudo_model": "\nDecision Variables:\n- Number of spoons made: Spoons\n- Number of forks made: Forks\n- Number of knives made: Knives\n\nConstraints:\n- Steel usage should not exceed 400 units:\n  1 * Spoons + 1.5 * Forks + 2 * Knives <= 400\n- Rubber usage should not exceed 500 units:\n  2 * Spoons + 1.5 * Forks + 1 * Knives <= 500\n\nObjective:\n- Maximize revenue (2 dollars per spoon, 3 dollars per fork, 4 dollars per knife):\n  2 * Spoons + 3 * Forks + 4 * Knives\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSpoons = intvar(0, 999999999)  # Number of spoons made\nForks = intvar(0, 999999999)  # Number of forks made\nKnives = intvar(0, 999999999)  # Number of knives made\n\n# Constraints\nm = Model()\n\n# Steel constraint (400 units available):\nm += 1 * Spoons + 1.5 * Forks + 2 * Knives <= 400\n# Rubber constraint (500 units available):\nm += 2 * Spoons + 1.5 * Forks + 1 * Knives <= 500\n\n# Objective\n# Maximize revenue (2 dollars per spoon, 3 dollars per fork, 4 dollars per knife):\nm.maximize(2 * Spoons + 3 * Forks + 4 * Knives)\n", "entities": [{"start": 24, "end": 30, "word": "spoons", "entity_group": "VAR", "score": 0.9994321986910042}, {"start": 33, "end": 38, "word": "forks", "entity_group": "VAR", "score": 0.9995829042667043}, {"start": 45, "end": 51, "word": "knives", "entity_group": "VAR", "score": 0.9993124477371014}, {"start": 79, "end": 84, "word": "spoon", "entity_group": "VAR", "score": 0.9995897981860697}, {"start": 94, "end": 95, "word": "1", "entity_group": "PARAM", "score": 0.9994175808864624}, {"start": 114, "end": 115, "word": "2", "entity_group": "PARAM", "score": 0.9997044427221562}, {"start": 139, "end": 143, "word": "fork", "entity_group": "VAR", "score": 0.9995587128224827}, {"start": 153, "end": 156, "word": "1.5", "entity_group": "PARAM", "score": 0.9996708106975386}, {"start": 176, "end": 179, "word": "1.5", "entity_group": "PARAM", "score": 0.9997147421600672}, {"start": 203, "end": 208, "word": "knife", "entity_group": "VAR", "score": 0.9995587128232205}, {"start": 218, "end": 219, "word": "2", "entity_group": "PARAM", "score": 0.9996696022541658}, {"start": 239, "end": 240, "word": "1", "entity_group": "PARAM", "score": 0.9993866833857176}, {"start": 274, "end": 283, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987308052804185}, {"start": 284, "end": 287, "word": "400", "entity_group": "LIMIT", "score": 0.999401144557761}, {"start": 307, "end": 310, "word": "500", "entity_group": "LIMIT", "score": 0.9996517542550051}, {"start": 336, "end": 343, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9978671421104415}, {"start": 348, "end": 353, "word": "spoon", "entity_group": "VAR", "score": 0.999554101747055}, {"start": 359, "end": 360, "word": "2", "entity_group": "PARAM", "score": 0.9995455447540772}, {"start": 367, "end": 374, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9979145084489159}, {"start": 379, "end": 383, "word": "fork", "entity_group": "VAR", "score": 0.9986416586483269}, {"start": 389, "end": 390, "word": "3", "entity_group": "PARAM", "score": 0.9996500164440372}, {"start": 401, "end": 408, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9978343958994328}, {"start": 413, "end": 418, "word": "knife", "entity_group": "VAR", "score": 0.9990732235922591}, {"start": 424, "end": 425, "word": "4", "entity_group": "PARAM", "score": 0.9994643712588045}, {"start": 465, "end": 473, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996894848190445}, {"start": 474, "end": 481, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.998935605984694}]}
{"doc_id": "1116522080", "document": "A woman has $300000 to invest in a chocolate company, a coffee company, a peanut butter company, and a maple syrup company. The return on investment for each company is as follows: chocolate company, 5%; coffee company, 10%; peanut butter company, 7%; maple syrup company 6%. There are some restrictions on her investment. The amount invested in the chocolate company cannot exceed the amount invested in the maple syrup company. Also the amount invested in the coffee company cannot exceed the amount invested in the peanut butter company. If at most 20% of her money can be invested in the maple syrup company, how much should she invest in each to maximize return?", "order_mapping": {"chocolate company": 0, "coffee company": 1, "peanut butter company": 2, "maple syrup company": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"chocolate company": "5%", "coffee company": "10%", "peanut butter company": "7%", "maple syrup company": "6%"}}, "const_declarations": [{"type": "xy", "x_var": "chocolate company", "direction": "cannot exceed", "y_var": "maple syrup company", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "coffee company", "direction": "cannot exceed", "y_var": "peanut butter company", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "maple syrup company", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the chocolate company\n- y: Dollars invested in the coffee company\n- z: Dollars invested in the peanut butter company\n- w: Dollars invested in the maple syrup company\n\nObjective:\n- The woman aims to maximize her return on investment. The return on investment for each company is as follows: chocolate company, 5%; coffee company, 10%; peanut butter company, 7%; maple syrup company, 6%. Therefore, the objective function is: Maximize 0.05x + 0.10y + 0.07z + 0.06w\n\nConstraints:\n- The total amount available for investment is $300,000, so the constraint is: x + y + z + w <= 300000.\n- The amount invested in the chocolate company cannot exceed the amount invested in the maple syrup company, leading to the constraint: x <= w.\n- The amount invested in the coffee company cannot exceed the amount invested in the peanut butter company, resulting in the constraint: y <= z.\n- At most 20% of her money can be invested in the maple syrup company, leading to the constraint: w <= 0.20(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.10y + 0.07z + 0.06w\nConstraints:\nx + y + z + w <= 300000\nx <= w\ny <= z\nw <= 0.20(x + y + z + w)", "canonical": {"objective": [-0.05, -0.1, -0.07, -0.06], "constraints": [[1.0, 1.0, 1.0, 1.0, 300000.0], [1.0, 0.0, 0.0, -1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.2, -0.2, -0.2, 0.8, 0.0]]}, "solution": {"x": 0, "y": 150000, "z": 150000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the chocolate company: Chocolate\n- Amount invested in the coffee company: Coffee\n- Amount invested in the peanut butter company: PeanutButter\n- Amount invested in the maple syrup company: MapleSyrup\n\nConstraints:\n- Total investment should not exceed $300000:\n  Chocolate + Coffee + PeanutButter + MapleSyrup <= 300000\n- The amount invested in the chocolate company cannot exceed the amount invested in the maple syrup company:\n  Chocolate <= MapleSyrup\n- The amount invested in the coffee company cannot exceed the amount invested in the peanut butter company:\n  Coffee <= PeanutButter\n- At most 20% of her money can be invested in the maple syrup company:\n  MapleSyrup <= 0.20 * 300000\n\nObjective:\n- Maximize return (5% for chocolate, 10% for coffee, 7% for peanut butter, 6% for maple syrup):\n  0.05 * Chocolate + 0.10 * Coffee + 0.07 * PeanutButter + 0.06 * MapleSyrup\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolate = intvar(0, 999999999)  # Amount invested in the chocolate company\nCoffee = intvar(0, 999999999)  # Amount invested in the coffee company\nPeanutButter = intvar(0, 999999999)  # Amount invested in the peanut butter company\nMapleSyrup = intvar(0, 999999999)  # Amount invested in the maple syrup company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $300000:\nm += Chocolate + Coffee + PeanutButter + MapleSyrup <= 300000\n# The amount invested in the chocolate company cannot exceed the amount invested in the maple syrup company:\nm += Chocolate <= MapleSyrup\n# The amount invested in the coffee company cannot exceed the amount invested in the peanut butter company:\nm += Coffee <= PeanutButter\n# At most 20% of her money can be invested in the maple syrup company:\nm += MapleSyrup <= 0.20 * 300000\n\n# Objective\n# Maximize return (5% for chocolate, 10% for coffee, 7% for peanut butter, 6% for maple syrup):\nm.maximize(0.05 * Chocolate + 0.10 * Coffee + 0.07 * PeanutButter + 0.06 * MapleSyrup)\n", "entities": [{"start": 8, "end": 11, "word": "has", "entity_group": "CONST_DIR", "score": 0.9880643252444542}, {"start": 14, "end": 20, "word": "300000", "entity_group": "LIMIT", "score": 0.9995012635436018}, {"start": 36, "end": 53, "word": "chocolate company", "entity_group": "VAR", "score": 0.999918576225008}, {"start": 58, "end": 72, "word": "coffee company", "entity_group": "VAR", "score": 0.9999689828177293}, {"start": 77, "end": 98, "word": "peanut butter company", "entity_group": "VAR", "score": 0.9991651441554733}, {"start": 107, "end": 126, "word": "maple syrup company", "entity_group": "VAR", "score": 0.9994975951290381}, {"start": 133, "end": 139, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9980884649766756}, {"start": 187, "end": 204, "word": "chocolate company", "entity_group": "VAR", "score": 0.9999754606945688}, {"start": 207, "end": 210, "word": "5 %", "entity_group": "PARAM", "score": 0.989084689485024}, {"start": 213, "end": 227, "word": "coffee company", "entity_group": "VAR", "score": 0.999969030372291}, {"start": 230, "end": 234, "word": "10 %", "entity_group": "PARAM", "score": 0.9954133276557735}, {"start": 237, "end": 258, "word": "peanut butter company", "entity_group": "VAR", "score": 0.9992613536270809}, {"start": 261, "end": 264, "word": "7 %", "entity_group": "PARAM", "score": 0.9904878777149982}, {"start": 267, "end": 286, "word": "maple syrup company", "entity_group": "VAR", "score": 0.9989739643502817}, {"start": 287, "end": 290, "word": "6 %", "entity_group": "PARAM", "score": 0.9584649486144645}, {"start": 368, "end": 385, "word": "chocolate company", "entity_group": "VAR", "score": 0.9999742529003958}, {"start": 386, "end": 400, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9888014265502479}, {"start": 428, "end": 447, "word": "maple syrup company", "entity_group": "VAR", "score": 0.9992076446576021}, {"start": 482, "end": 496, "word": "coffee company", "entity_group": "VAR", "score": 0.999968557933539}, {"start": 497, "end": 511, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.988801452111209}, {"start": 539, "end": 560, "word": "peanut butter company", "entity_group": "VAR", "score": 0.9995798413940647}, {"start": 566, "end": 573, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981409318418902}, {"start": 574, "end": 578, "word": "20 %", "entity_group": "LIMIT", "score": 0.9790226140040289}, {"start": 615, "end": 634, "word": "maple syrup company", "entity_group": "VAR", "score": 0.9994133414540646}, {"start": 675, "end": 683, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993148054051358}, {"start": 684, "end": 690, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9955033516584654}]}
{"doc_id": "1181172112", "document": "An orange farm is trying to send their oranges to the city. They can either send them by train or by car. Each train trip costs $50 and can take 500 oranges while each car trip costs $30 and can take 200 oranges. Due to scheduling issues, the number of train trips cannot exceed the number of car trips. If the farm has a budget of $500, maximize the number of oranges they can send.", "order_mapping": {"train": 0, "car": 1, "train trip": 0, "car trip": 1, "train trips": 0, "car trips": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of oranges", "terms": {"train trip": "500", "car trip": "200"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "500", "terms": {"train trip": "50", "car trip": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "train trips", "direction": "cannot exceed", "y_var": "car trips", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of train trips\n- y: Number of car trips\n\nObjective:\n- The farm aims to maximize the number of oranges they can send. Each train trip can take 500 oranges and costs $50, while each car trip can take 200 oranges and costs $30. Therefore, the objective function is: Maximize 500x + 200y\n\nConstraints:\n- The farm has a budget of $500, so the constraint is: 50x + 30y <= 500.\n- Due to scheduling issues, the number of train trips cannot exceed the number of car trips, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 200y\nConstraints:\n50x + 30y <= 500\nx <= y", "canonical": {"objective": [-500.0, -200.0], "constraints": [[50.0, 30.0, 500.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 6, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of train trips: TrainTrips\n- Number of car trips: CarTrips\n\nConstraints:\n- The total cost of train and car trips should not exceed the budget of $500:\n  50 * TrainTrips + 30 * CarTrips <= 500\n- The number of train trips cannot exceed the number of car trips:\n  TrainTrips <= CarTrips\n\nObjective:\n- Maximize the number of oranges sent (500 oranges per train trip, 200 oranges per car trip):\n  500 * TrainTrips + 200 * CarTrips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrainTrips = intvar(0, 999999999)  # Number of train trips\nCarTrips = intvar(0, 999999999)  # Number of car trips\n\n# Constraints\nm = Model()\n\n# The total cost of train and car trips should not exceed the budget of $500:\nm += 50 * TrainTrips + 30 * CarTrips <= 500\n# The number of train trips cannot exceed the number of car trips:\nm += TrainTrips <= CarTrips\n\n# Objective\n# Maximize the number of oranges sent (500 oranges per train trip, 200 oranges per car trip):\nm.maximize(500 * TrainTrips + 200 * CarTrips)\n", "entities": [{"start": 90, "end": 95, "word": "train", "entity_group": "VAR", "score": 0.9996368283491829}, {"start": 102, "end": 105, "word": "car", "entity_group": "VAR", "score": 0.9994477579565275}, {"start": 113, "end": 123, "word": "train trip", "entity_group": "VAR", "score": 0.9999822943053831}, {"start": 132, "end": 134, "word": "50", "entity_group": "PARAM", "score": 0.9994814195565076}, {"start": 148, "end": 151, "word": "500", "entity_group": "PARAM", "score": 0.9997101309577268}, {"start": 152, "end": 159, "word": "oranges", "entity_group": "OBJ_NAME", "score": 0.996450155201798}, {"start": 171, "end": 179, "word": "car trip", "entity_group": "VAR", "score": 0.9999830457379394}, {"start": 188, "end": 190, "word": "30", "entity_group": "PARAM", "score": 0.9995916964042577}, {"start": 204, "end": 207, "word": "200", "entity_group": "PARAM", "score": 0.9996117549697215}, {"start": 208, "end": 215, "word": "oranges", "entity_group": "OBJ_NAME", "score": 0.9968233112331225}, {"start": 259, "end": 270, "word": "train trips", "entity_group": "VAR", "score": 0.9999374603258863}, {"start": 271, "end": 285, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9907236497449756}, {"start": 300, "end": 309, "word": "car trips", "entity_group": "VAR", "score": 0.9999413903285529}, {"start": 330, "end": 336, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9779863960635428}, {"start": 342, "end": 345, "word": "500", "entity_group": "LIMIT", "score": 0.9991700296201348}, {"start": 348, "end": 356, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9942226657206541}, {"start": 361, "end": 378, "word": "number of oranges", "entity_group": "OBJ_NAME", "score": 0.9921335648678541}]}
{"doc_id": "1780841328", "document": "A hiker eats two types of trail mix and wants to make sure he eats at least 20 units of almonds and 15 units of chocolate chips. Trail mix A contains 2 units of almonds and 1 unit of chocolate chips per bag. Trail mix B contains 2 units of almonds and 3 units of chocolate chips per bag. If trail mix A costs $5 per bag and trail mix B costs $8 per bag, how many bags of each should the hiker purchase to minimize costs?", "order_mapping": {"Trail mix A": 0, "Trail mix B": 1, "trail mix A": 0, "trail mix B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"trail mix A": "5", "trail mix B": "8"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"Trail mix A": "2", "Trail mix B": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"Trail mix A": "1", "Trail mix B": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of trail mix A\n- y: Number of bags of trail mix B\n\nObjective:\n- The hiker wants to minimize costs. Trail mix A costs $5 per bag and trail mix B costs $8 per bag. Therefore, the objective function is: Minimize 5x + 8y\n\nConstraints:\n- The hiker wants to eat at least 20 units of almonds, which can be represented as: 2x + 2y >= 20\n- The hiker wants to eat at least 15 units of chocolate chips, which can be represented as: x + 3y >= 15\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 8y\nConstraints:\n2x + 2y >= 20\nx + 3y >= 15", "canonical": {"objective": [5.0, 8.0], "constraints": [[-2.0, -2.0, -20.0], [-1.0, -3.0, -15.0]]}, "solution": {"x": 7, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of bags of Trail Mix A purchased: TrailMixA\n- Number of bags of Trail Mix B purchased: TrailMixB\n\nConstraints:\n- To meet the almond requirement (at least 20 units):\n  2 * TrailMixA + 2 * TrailMixB >= 20\n- To meet the chocolate chips requirement (at least 15 units):\n  1 * TrailMixA + 3 * TrailMixB >= 15\n\nObjective:\n- Minimize the total cost of purchasing the trail mixes ($5 per bag of Trail Mix A, $8 per bag of Trail Mix B):\n  5 * TrailMixA + 8 * TrailMixB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrailMixA = intvar(0, 999999999)  # Number of bags of Trail Mix A\nTrailMixB = intvar(0, 999999999)  # Number of bags of Trail Mix B\n\n# Constraints\nm = Model()\n\n# At least 20 units of almonds needed:\nm += 2 * TrailMixA + 2 * TrailMixB >= 20\n# At least 15 units of chocolate chips needed:\nm += 1 * TrailMixA + 3 * TrailMixB >= 15\n\n# Objective\n# Minimize costs ($5 per bag of Trail Mix A, $8 per bag of Trail Mix B):\nm.minimize(5 * TrailMixA + 8 * TrailMixB)\n", "entities": [{"start": 67, "end": 75, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991859204594242}, {"start": 76, "end": 78, "word": "20", "entity_group": "LIMIT", "score": 0.9997556017282896}, {"start": 100, "end": 102, "word": "15", "entity_group": "LIMIT", "score": 0.9997247826199224}, {"start": 130, "end": 141, "word": "Trail mix A", "entity_group": "VAR", "score": 0.9973880548009451}, {"start": 151, "end": 152, "word": "2", "entity_group": "PARAM", "score": 0.9997082883502246}, {"start": 174, "end": 175, "word": "1", "entity_group": "PARAM", "score": 0.9996356969313429}, {"start": 210, "end": 221, "word": "Trail mix B", "entity_group": "VAR", "score": 0.9979765436798029}, {"start": 231, "end": 232, "word": "2", "entity_group": "PARAM", "score": 0.9997215802543734}, {"start": 254, "end": 255, "word": "3", "entity_group": "PARAM", "score": 0.9997226045767981}, {"start": 294, "end": 305, "word": "trail mix A", "entity_group": "VAR", "score": 0.9977105072842332}, {"start": 306, "end": 311, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993813916495308}, {"start": 314, "end": 315, "word": "5", "entity_group": "PARAM", "score": 0.9994343231587296}, {"start": 328, "end": 339, "word": "trail mix B", "entity_group": "VAR", "score": 0.9980384711837916}, {"start": 340, "end": 345, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990106345982548}, {"start": 348, "end": 349, "word": "8", "entity_group": "PARAM", "score": 0.9992782087024434}, {"start": 411, "end": 419, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996901810254735}, {"start": 420, "end": 425, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990563196319533}]}
{"doc_id": "2770657", "document": "A doctor prescribed two pills to a patient. Pill A contains 2 units of muscle relaxant, 3 units of anxiety medication, and 4 units of pain reliever per pill. Pill B contains 5 units of muscle relaxant, 1 unit of anxiety medication, and 3 units of pain reliever per pill. Pill A costs $3 per pill while pill B costs $5 per pill. The patient must get at least 30 units of muscle relaxant, 15 units of anxiety medication, and 20 units of pain reliever. How many of each pill should he buy to minimize his cost?", "order_mapping": {"Pill A": 0, "Pill B": 1, "pill B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Pill A": "3", "pill B": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"Pill A": "2", "Pill B": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"Pill A": "3", "Pill B": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"Pill A": "4", "Pill B": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pill A\n- y: Number of pill B\n\nObjective:\n- The patient wants to minimize the cost of the pills. Pill A costs $3 per pill while pill B costs $5 per pill. Therefore, the objective function is: Minimize 3x + 5y\n\nConstraints:\n- The patient must get at least 30 units of muscle relaxant, 15 units of anxiety medication, and 20 units of pain reliever. This leads to the following constraints:\n    - 2x + 5y >= 30 (muscle relaxant)\n    - 3x + y >= 15 (anxiety medication)\n    - 4x + 3y >= 20 (pain reliever)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 5y\nConstraints:\n2x + 5y >= 30\n3x + y >= 15\n4x + 3y >= 20", "canonical": {"objective": [3.0, 5.0], "constraints": [[-2.0, -5.0, -30.0], [-3.0, -1.0, -15.0], [-4.0, -3.0, -20.0]]}, "solution": {"x": 5, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of Pill A bought: PillA\n- Number of Pill B bought: PillB\n\nConstraints:\n- At least 30 units of muscle relaxant required:\n  2 * PillA + 5 * PillB >= 30\n- At least 15 units of anxiety medication required:\n  3 * PillA + 1 * PillB >= 15\n- At least 20 units of pain reliever required:\n  4 * PillA + 3 * PillB >= 20\n\nObjective:\n- Minimize cost (Pill A costs $3 per pill, Pill B costs $5 per pill):\n  3 * PillA + 5 * PillB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPillA = intvar(0, 999999999)  # Number of Pill A\nPillB = intvar(0, 999999999)  # Number of Pill B\n\n# Constraints\nm = Model()\n\n# The patient must get at least 30 units of muscle relaxant:\nm += 2 * PillA + 5 * PillB >= 30\n# The patient must get at least 15 units of anxiety medication:\nm += 3 * PillA + 1 * PillB >= 15\n# The patient must get at least 20 units of pain reliever:\nm += 4 * PillA + 3 * PillB >= 20\n\n# Objective\n# Minimize cost (Pill A costs $3 per pill while Pill B costs $5 per pill):\nm.minimize(3 * PillA + 5 * PillB)\n", "entities": [{"start": 45, "end": 51, "word": "Pill A", "entity_group": "VAR", "score": 0.9998589283158407}, {"start": 61, "end": 62, "word": "2", "entity_group": "PARAM", "score": 0.9996747002858716}, {"start": 90, "end": 91, "word": "3", "entity_group": "PARAM", "score": 0.9996812159380289}, {"start": 126, "end": 127, "word": "4", "entity_group": "PARAM", "score": 0.9996748072679117}, {"start": 162, "end": 168, "word": "Pill B", "entity_group": "VAR", "score": 0.9999051860712624}, {"start": 178, "end": 179, "word": "5", "entity_group": "PARAM", "score": 0.9996946180968636}, {"start": 207, "end": 208, "word": "1", "entity_group": "PARAM", "score": 0.999494104237806}, {"start": 242, "end": 243, "word": "3", "entity_group": "PARAM", "score": 0.9996972322496351}, {"start": 278, "end": 284, "word": "Pill A", "entity_group": "VAR", "score": 0.9998821767040824}, {"start": 285, "end": 290, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9997898620127128}, {"start": 293, "end": 294, "word": "3", "entity_group": "PARAM", "score": 0.9992854788430499}, {"start": 310, "end": 316, "word": "pill B", "entity_group": "VAR", "score": 0.999914054989058}, {"start": 317, "end": 322, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990328599565445}, {"start": 325, "end": 326, "word": "5", "entity_group": "PARAM", "score": 0.9985446864385012}, {"start": 359, "end": 367, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991030720197621}, {"start": 368, "end": 370, "word": "30", "entity_group": "LIMIT", "score": 0.9997062124804036}, {"start": 398, "end": 400, "word": "15", "entity_group": "LIMIT", "score": 0.9996470164384408}, {"start": 435, "end": 437, "word": "20", "entity_group": "LIMIT", "score": 0.9996585935799369}, {"start": 502, "end": 510, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993734972359154}, {"start": 515, "end": 519, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987566496365053}]}
{"doc_id": "-158369978", "document": "A game involves throwing red bean bags and blue bean bags at a target. Each red bean bag that hits the target is worth 5 points and each blue bean bag that hits the target is worth 8 points. You must throw at least 3 red bean bags and 2 blue bean bags, but at most 8 of either type. In total, you must throw 12 bean bags. Assuming you always hit the target, how many of each color bean bag should you throw to maximize your points?", "order_mapping": {"red bean bags": 0, "blue bean bags": 1, "red bean bag": 0, "blue bean bag": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"red bean bag": "5", "blue bean bag": "8"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "3", "var": "red bean bags", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "blue bean bags", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "8", "var": "red bean bags", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "8", "var": "blue bean bags", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "total", "limit": "12", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of red bean bags thrown\n- y: Number of blue bean bags thrown\n\nObjective:\n- The goal is to maximize the points scored. Each red bean bag that hits the target is worth 5 points and each blue bean bag that hits the target is worth 8 points. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- At least 3 red bean bags must be thrown: x >= 3\n- At least 2 blue bean bags must be thrown: y >= 2\n- At most 8 red bean bags can be thrown: x <= 8\n- At most 8 blue bean bags can be thrown: y <= 8\n- A total of 12 bean bags must be thrown: x + y <= 12\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\nx >= 3\ny >= 2\nx <= 8\ny <= 8\nx + y <= 12", "canonical": {"objective": [-5.0, -8.0], "constraints": [[-1.0, 0.0, -3.0], [0.0, -1.0, -2.0], [1.0, 0.0, 8.0], [0.0, 1.0, 8.0], [1.0, 1.0, 12.0]]}, "solution": {"x": 4, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of red bean bags thrown: RedBeanBags\n- Number of blue bean bags thrown: BlueBeanBags\n\nConstraints:\n- At least 3 red bean bags must be thrown:\n  RedBeanBags >= 3\n- At least 2 blue bean bags must be thrown:\n  BlueBeanBags >= 2\n- At most 8 of either type of bean bag can be thrown:\n  RedBeanBags <= 8\n  BlueBeanBags <= 8\n- Total number of bean bags thrown must be 12:\n  RedBeanBags + BlueBeanBags == 12\n\nObjective:\n- Maximize points (5 points per red bean bag, 8 points per blue bean bag):\n  5 * RedBeanBags + 8 * BlueBeanBags\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRedBeanBags = intvar(0, 999999999)  # Number of red bean bags thrown\nBlueBeanBags = intvar(0, 999999999)  # Number of blue bean bags thrown\n\n# Constraints\nm = Model()\n\n# You must throw at least 3 red bean bags:\nm += RedBeanBags >= 3\n# You must throw at least 2 blue bean bags:\nm += BlueBeanBags >= 2\n# At most 8 of either type of bean bag can be thrown:\nm += RedBeanBags <= 8\nm += BlueBeanBags <= 8\n# In total, you must throw 12 bean bags:\nm += RedBeanBags + BlueBeanBags == 12\n\n# Objective\n# Maximize points (5 points per red bean bag, 8 points per blue bean bag):\nm.maximize(5 * RedBeanBags + 8 * BlueBeanBags)\n", "entities": [{"start": 25, "end": 38, "word": "red bean bags", "entity_group": "VAR", "score": 0.9972568129060392}, {"start": 43, "end": 57, "word": "blue bean bags", "entity_group": "VAR", "score": 0.9982995949732598}, {"start": 77, "end": 89, "word": "red bean bag", "entity_group": "VAR", "score": 0.9994537595881151}, {"start": 120, "end": 121, "word": "5", "entity_group": "PARAM", "score": 0.9995431125253872}, {"start": 122, "end": 128, "word": "points", "entity_group": "OBJ_NAME", "score": 0.998363999083158}, {"start": 138, "end": 151, "word": "blue bean bag", "entity_group": "VAR", "score": 0.9994185127046074}, {"start": 182, "end": 183, "word": "8", "entity_group": "PARAM", "score": 0.9993467581459066}, {"start": 184, "end": 190, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9981747168823508}, {"start": 208, "end": 216, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983859604939241}, {"start": 217, "end": 218, "word": "3", "entity_group": "LIMIT", "score": 0.9995647372560642}, {"start": 219, "end": 232, "word": "red bean bags", "entity_group": "VAR", "score": 0.9996067672102305}, {"start": 237, "end": 238, "word": "2", "entity_group": "LIMIT", "score": 0.9992991830477013}, {"start": 239, "end": 253, "word": "blue bean bags", "entity_group": "VAR", "score": 0.9989244835422175}, {"start": 260, "end": 267, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971827818374597}, {"start": 268, "end": 269, "word": "8", "entity_group": "LIMIT", "score": 0.9987223726232433}, {"start": 290, "end": 295, "word": "total", "entity_group": "CONST_DIR", "score": 0.9972616380834659}, {"start": 313, "end": 315, "word": "12", "entity_group": "LIMIT", "score": 0.9988360846029127}, {"start": 417, "end": 425, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999169219396868}, {"start": 431, "end": 437, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9992065171332374}]}
{"doc_id": "-1998923102", "document": "A woman owns two chocolate shops. Running shop 1 for an hour costs $50 and makes 5 milk chocolate bars, 8 dark chocolate bars, and 6 white chocolate bars. Running shop 2 for an hour costs $75 and makes 8 milk chocolate bars, 7 dark chocolate bars, and 4 white chocolate bars. To meet demand, she must make at least 50 milk chocolate bars, 60 dark chocolate bars, and 30 white chocolate bars. How many hours should she run each shop to minimize costs?", "order_mapping": {"shop 1": 0, "shop 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"shop 1": "50", "shop 2": "75"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"shop 1": "5", "shop 2": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "60", "terms": {"shop 1": "8", "shop 2": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"shop 1": "6", "shop 2": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours to run shop 1\n- y: Hours to run shop 2\n\nObjective:\n- The woman wants to minimize her costs. Running shop 1 for an hour costs $50 and running shop 2 for an hour costs $75. Therefore, the objective function is: Minimize 50x + 75y\n\nConstraints:\n- To meet demand, she must make at least 50 milk chocolate bars, 60 dark chocolate bars, and 30 white chocolate bars. This leads to the following constraints:\n    - 5x + 8y >= 50 (milk chocolate bars)\n    - 8x + 7y >= 60 (dark chocolate bars)\n    - 6x + 4y >= 30 (white chocolate bars)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 50x + 75y\nConstraints:\n5x + 8y >= 50\n8x + 7y >= 60\n6x + 4y >= 30", "canonical": {"objective": [50.0, 75.0], "constraints": [[-5.0, -8.0, -50.0], [-8.0, -7.0, -60.0], [-6.0, -4.0, -30.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of hours shop 1 runs: Shop1Hours\n- Number of hours shop 2 runs: Shop2Hours\n\nConstraints:\n- To meet demand for milk chocolate bars (at least 50 bars):\n  5 * Shop1Hours + 8 * Shop2Hours >= 50\n- To meet demand for dark chocolate bars (at least 60 bars):\n  8 * Shop1Hours + 7 * Shop2Hours >= 60\n- To meet demand for white chocolate bars (at least 30 bars):\n  6 * Shop1Hours + 4 * Shop2Hours >= 30\n\nObjective:\n- Minimize costs ($50 per hour for shop 1, $75 per hour for shop 2):\n  50 * Shop1Hours + 75 * Shop2Hours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShop1Hours = intvar(0, 999999999)  # Number of hours shop 1 runs\nShop2Hours = intvar(0, 999999999)  # Number of hours shop 2 runs\n\n# Constraints\nm = Model()\n\n# To meet demand for milk chocolate bars:\nm += 5 * Shop1Hours + 8 * Shop2Hours >= 50\n# To meet demand for dark chocolate bars:\nm += 8 * Shop1Hours + 7 * Shop2Hours >= 60\n# To meet demand for white chocolate bars:\nm += 6 * Shop1Hours + 4 * Shop2Hours >= 30\n\n# Objective\n# Minimize costs ($50 per hour for shop 1, $75 per hour for shop 2):\nm.minimize(50 * Shop1Hours + 75 * Shop2Hours)\n", "entities": [{"start": 43, "end": 49, "word": "shop 1", "entity_group": "VAR", "score": 0.9998863655104148}, {"start": 62, "end": 67, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9970185530681911}, {"start": 70, "end": 72, "word": "50", "entity_group": "PARAM", "score": 0.999538015806608}, {"start": 83, "end": 84, "word": "5", "entity_group": "PARAM", "score": 0.9995146638093809}, {"start": 107, "end": 108, "word": "8", "entity_group": "PARAM", "score": 0.9996146198223682}, {"start": 135, "end": 136, "word": "6", "entity_group": "PARAM", "score": 0.9996141681923056}, {"start": 168, "end": 174, "word": "shop 2", "entity_group": "VAR", "score": 0.9998823133470623}, {"start": 187, "end": 192, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9970163430471051}, {"start": 195, "end": 197, "word": "75", "entity_group": "PARAM", "score": 0.9995380158068663}, {"start": 208, "end": 209, "word": "8", "entity_group": "PARAM", "score": 0.9995146638093809}, {"start": 232, "end": 233, "word": "7", "entity_group": "PARAM", "score": 0.9996146198223687}, {"start": 260, "end": 261, "word": "4", "entity_group": "PARAM", "score": 0.9995724264831705}, {"start": 316, "end": 324, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990117483758256}, {"start": 325, "end": 327, "word": "50", "entity_group": "LIMIT", "score": 0.9995424402660233}, {"start": 350, "end": 352, "word": "60", "entity_group": "LIMIT", "score": 0.9995441640674873}, {"start": 379, "end": 381, "word": "30", "entity_group": "LIMIT", "score": 0.9993296965194197}, {"start": 448, "end": 456, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994103255322266}, {"start": 457, "end": 462, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9975321198053007}]}
{"doc_id": "91331390", "document": "A restaurant cleans and cuts both small fish and large fish. Each small fish take 5 minutes of cleaning and 10 minutes of cutting. Each large fish takes 10 minutes of cleaning and 15 minutes of cutting. The restaurant has 500 minutes available for cleaning and 700 minutes available for cutting. If the profit per small fish is $8 and the profit per large fish is $11, how many of each fish size should the restaurant clean and cut to maximize profit?", "order_mapping": {"small fish": 0, "large fish": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"small fish": "8", "large fish": "11"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"small fish": "5", "large fish": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"small fish": "10", "large fish": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small fish to clean and cut\n- y: Number of large fish to clean and cut\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per small fish is $8 and the profit per large fish is $11. Therefore, the objective function is: Maximize 8x + 11y\n\nConstraints:\n- The restaurant has 500 minutes available for cleaning and each small fish takes 5 minutes of cleaning and each large fish takes 10 minutes of cleaning. This leads to the constraint: 5x + 10y <= 500.\n- The restaurant has 700 minutes available for cutting and each small fish takes 10 minutes of cutting and each large fish takes 15 minutes of cutting. This results in the constraint: 10x + 15y <= 700.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x + 11y\nConstraints:\n5x + 10y <= 500\n10x + 15y <= 700", "canonical": {"objective": [-8.0, -11.0], "constraints": [[5.0, 10.0, 500.0], [10.0, 15.0, 700.0]]}, "solution": {"x": 70, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of small fish cleaned and cut: SmallFish\n- Number of large fish cleaned and cut: LargeFish\n\nConstraints:\n- Total cleaning time for small and large fish should not exceed 500 minutes:\n  5 * SmallFish + 10 * LargeFish <= 500\n- Total cutting time for small and large fish should not exceed 700 minutes:\n  10 * SmallFish + 15 * LargeFish <= 700\n\nObjective:\n- Maximize profit (8 dollars per small fish, 11 dollars per large fish):\n  8 * SmallFish + 11 * LargeFish\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallFish = intvar(0, 999999999)  # Number of small fish cleaned and cut\nLargeFish = intvar(0, 999999999)  # Number of large fish cleaned and cut\n\n# Constraints\nm = Model()\n\n# Total cleaning time for small and large fish should not exceed 500 minutes:\nm += 5 * SmallFish + 10 * LargeFish <= 500\n# Total cutting time for small and large fish should not exceed 700 minutes:\nm += 10 * SmallFish + 15 * LargeFish <= 700\n\n# Objective\n# Maximize profit (8 dollars per small fish, 11 dollars per large fish):\nm.maximize(8 * SmallFish + 11 * LargeFish)\n", "entities": [{"start": 34, "end": 44, "word": "small fish", "entity_group": "VAR", "score": 0.9999704232309983}, {"start": 49, "end": 59, "word": "large fish", "entity_group": "VAR", "score": 0.9999781346398597}, {"start": 67, "end": 77, "word": "small fish", "entity_group": "VAR", "score": 0.9999344489380995}, {"start": 83, "end": 84, "word": "5", "entity_group": "PARAM", "score": 0.9997087242868515}, {"start": 109, "end": 111, "word": "10", "entity_group": "PARAM", "score": 0.9997156006912361}, {"start": 138, "end": 148, "word": "large fish", "entity_group": "VAR", "score": 0.9999776544057548}, {"start": 155, "end": 157, "word": "10", "entity_group": "PARAM", "score": 0.9997289219759589}, {"start": 182, "end": 184, "word": "15", "entity_group": "PARAM", "score": 0.9996128727634825}, {"start": 225, "end": 228, "word": "500", "entity_group": "LIMIT", "score": 0.9997449838062655}, {"start": 237, "end": 246, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985958668102578}, {"start": 264, "end": 267, "word": "700", "entity_group": "LIMIT", "score": 0.9997516894955855}, {"start": 276, "end": 285, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988916950171489}, {"start": 307, "end": 313, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997294751931585}, {"start": 318, "end": 328, "word": "small fish", "entity_group": "VAR", "score": 0.99974672918715}, {"start": 334, "end": 335, "word": "8", "entity_group": "PARAM", "score": 0.9994603060344124}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999348851732204}, {"start": 355, "end": 365, "word": "large fish", "entity_group": "VAR", "score": 0.9999314622661877}, {"start": 371, "end": 373, "word": "11", "entity_group": "PARAM", "score": 0.9996877815452464}, {"start": 442, "end": 450, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991824579333932}, {"start": 451, "end": 457, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998647665824244}]}
{"doc_id": "1818492485", "document": "A toy company builds and paints model trains and planes. Each model train takes 30 minutes to build and 40 minutes to paint. Each model plane takes 40 minutes to build and 50 minutes to paint. The company has at most 5000 minutes available for building and 6000 minutes available for painting. If the company makes a profit of $7 per model train and a profit of $9 per model plane, how many of each should they make to maximize their profit?", "order_mapping": {"model trains": 0, "planes": 1, "model train": 0, "model plane": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"model train": "7", "model plane": "9"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"model train": "30", "model plane": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "6000", "terms": {"model train": "40", "model plane": "50"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of model trains\n- y: Number of model planes\n\nObjective:\n- The toy company aims to maximize its profit. The profit per model train is $7 and the profit per model plane is $9. Therefore, the objective function is: Maximize 7x + 9y\n\nConstraints:\n- The company has at most 5000 minutes available for building, and each model train takes 30 minutes and each model plane takes 40 minutes to build. This leads to the constraint: 30x + 40y <= 5000.\n- The company has at most 6000 minutes available for painting, and each model train takes 40 minutes and each model plane takes 50 minutes to paint. This results in the constraint: 40x + 50y <= 6000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 9y\nConstraints:\n30x + 40y <= 5000\n40x + 50y <= 6000", "canonical": {"objective": [-7.0, -9.0], "constraints": [[30.0, 40.0, 5000.0], [40.0, 50.0, 6000.0]]}, "solution": {"x": 0, "y": 120}, "pseudo_model": "\nDecision Variables:\n- Number of model trains made: ModelTrains\n- Number of model planes made: ModelPlanes\n\nConstraints:\n- Total minutes available for building should not exceed 5000 minutes:\n  30 * ModelTrains + 40 * ModelPlanes <= 5000\n- Total minutes available for painting should not exceed 6000 minutes:\n  40 * ModelTrains + 50 * ModelPlanes <= 6000\n\nObjective:\n- Maximize profit (7 dollars per model train, 9 dollars per model plane):\n  7 * ModelTrains + 9 * ModelPlanes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nModelTrains = intvar(0, 999999999)  # Number of model trains made\nModelPlanes = intvar(0, 999999999)  # Number of model planes made\n\n# Constraints\nm = Model()\n\n# Total minutes available for building (5000 minutes):\nm += 30 * ModelTrains + 40 * ModelPlanes <= 5000\n# Total minutes available for painting (6000 minutes):\nm += 40 * ModelTrains + 50 * ModelPlanes <= 6000\n\n# Objective\n# Maximize profit (7 dollars per model train, 9 dollars per model plane):\nm.maximize(7 * ModelTrains + 9 * ModelPlanes)\n", "entities": [{"start": 32, "end": 44, "word": "model trains", "entity_group": "VAR", "score": 0.9999777315269546}, {"start": 49, "end": 55, "word": "planes", "entity_group": "VAR", "score": 0.9998002455074633}, {"start": 63, "end": 74, "word": "model train", "entity_group": "VAR", "score": 0.9999816447574824}, {"start": 81, "end": 83, "word": "30", "entity_group": "PARAM", "score": 0.9995878309639568}, {"start": 105, "end": 107, "word": "40", "entity_group": "PARAM", "score": 0.9997001783295358}, {"start": 132, "end": 143, "word": "model plane", "entity_group": "VAR", "score": 0.9999528332899996}, {"start": 150, "end": 152, "word": "40", "entity_group": "PARAM", "score": 0.9996898208710774}, {"start": 174, "end": 176, "word": "50", "entity_group": "PARAM", "score": 0.9996513160610883}, {"start": 220, "end": 224, "word": "5000", "entity_group": "LIMIT", "score": 0.9997891941013121}, {"start": 233, "end": 242, "word": "available", "entity_group": "CONST_DIR", "score": 0.9979135728104487}, {"start": 260, "end": 264, "word": "6000", "entity_group": "LIMIT", "score": 0.9997305531695722}, {"start": 273, "end": 282, "word": "available", "entity_group": "CONST_DIR", "score": 0.998867960276145}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996275552777348}, {"start": 333, "end": 334, "word": "7", "entity_group": "PARAM", "score": 0.999593637580803}, {"start": 339, "end": 350, "word": "model train", "entity_group": "VAR", "score": 0.9999736526345708}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998833970074936}, {"start": 369, "end": 370, "word": "9", "entity_group": "PARAM", "score": 0.9995772707084299}, {"start": 375, "end": 386, "word": "model plane", "entity_group": "VAR", "score": 0.9999153187300905}, {"start": 426, "end": 434, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997108804118913}, {"start": 441, "end": 447, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998409485691092}]}
{"doc_id": "-503693411", "document": "In a video game, you can solve easy puzzles worth 5 points or hard puzzles worth 8 points. You have to solve at least 3 easy puzzles and 1 hard puzzle. Due to time restrictions, you can solve at most 10 easy puzzles and 5 hard puzzles. In total, you can only solve a maximum of 10 puzzles. How many of each puzzle type should you solve to maximize your points?", "order_mapping": {"easy puzzles": 0, "hard puzzles": 1, "hard puzzle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"easy puzzles": "5", "hard puzzles": "8"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "3", "var": "easy puzzles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "1", "var": "hard puzzle", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "easy puzzles", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "hard puzzles", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "10", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of easy puzzles solved\n- y: Number of hard puzzles solved\n\nObjective:\n- The goal is to maximize the total points earned. Each easy puzzle is worth 5 points and each hard puzzle is worth 8 points. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- At least 3 easy puzzles must be solved, leading to the constraint: x >= 3\n- At least 1 hard puzzle must be solved, leading to the constraint: y >= 1\n- At most 10 easy puzzles can be solved, leading to the constraint: x <= 10\n- At most 5 hard puzzles can be solved, leading to the constraint: y <= 5\n- The total number of puzzles solved cannot exceed 10, leading to the constraint: x + y <= 10\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\nx >= 3\ny >= 1\nx <= 10\ny <= 5\nx + y <= 10", "canonical": {"objective": [-5.0, -8.0], "constraints": [[-1.0, 0.0, -3.0], [0.0, -1.0, -1.0], [1.0, 0.0, 10.0], [0.0, 1.0, 5.0], [1.0, 1.0, 10.0]]}, "solution": {"x": 5, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of easy puzzles solved: EasyPuzzles\n- Number of hard puzzles solved: HardPuzzles\n\nConstraints:\n- At least 3 easy puzzles should be solved:\n  EasyPuzzles >= 3\n- At least 1 hard puzzle should be solved:\n  HardPuzzles >= 1\n- At most 10 easy puzzles can be solved:\n  EasyPuzzles <= 10\n- At most 5 hard puzzles can be solved:\n  HardPuzzles <= 5\n- In total, at most 10 puzzles can be solved:\n  EasyPuzzles + HardPuzzles <= 10\n\nObjective:\n- Maximize points (5 points per easy puzzle, 8 points per hard puzzle):\n  5 * EasyPuzzles + 8 * HardPuzzles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEasyPuzzles = intvar(0, 999999999)  # Number of easy puzzles solved\nHardPuzzles = intvar(0, 999999999)  # Number of hard puzzles solved\n\n# Constraints\nm = Model()\n\n# At least 3 easy puzzles should be solved:\nm += EasyPuzzles >= 3\n# At least 1 hard puzzle should be solved:\nm += HardPuzzles >= 1\n# At most 10 easy puzzles can be solved:\nm += EasyPuzzles <= 10\n# At most 5 hard puzzles can be solved:\nm += HardPuzzles <= 5\n# In total, at most 10 puzzles can be solved:\nm += EasyPuzzles + HardPuzzles <= 10\n\n# Objective\n# Maximize points (5 points per easy puzzle, 8 points per hard puzzle):\nm.maximize(5 * EasyPuzzles + 8 * HardPuzzles)\n", "entities": [{"start": 32, "end": 44, "word": "easy puzzles", "entity_group": "VAR", "score": 0.999979576196871}, {"start": 51, "end": 52, "word": "5", "entity_group": "PARAM", "score": 0.9997033037537925}, {"start": 53, "end": 59, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9880546714690903}, {"start": 63, "end": 75, "word": "hard puzzles", "entity_group": "VAR", "score": 0.999967802713666}, {"start": 82, "end": 83, "word": "8", "entity_group": "PARAM", "score": 0.9995255072534275}, {"start": 84, "end": 90, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9945926516266538}, {"start": 111, "end": 119, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988940300234429}, {"start": 120, "end": 121, "word": "3", "entity_group": "LIMIT", "score": 0.9993829174231081}, {"start": 122, "end": 134, "word": "easy puzzles", "entity_group": "VAR", "score": 0.999955511192489}, {"start": 139, "end": 140, "word": "1", "entity_group": "LIMIT", "score": 0.9996632445868625}, {"start": 141, "end": 152, "word": "hard puzzle", "entity_group": "VAR", "score": 0.9999725480783294}, {"start": 196, "end": 203, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987182009284209}, {"start": 204, "end": 206, "word": "10", "entity_group": "LIMIT", "score": 0.9995457704759527}, {"start": 207, "end": 219, "word": "easy puzzles", "entity_group": "VAR", "score": 0.9999540539736592}, {"start": 224, "end": 225, "word": "5", "entity_group": "LIMIT", "score": 0.9996896278892751}, {"start": 226, "end": 238, "word": "hard puzzles", "entity_group": "VAR", "score": 0.9999601676214862}, {"start": 273, "end": 280, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9906535034768772}, {"start": 284, "end": 286, "word": "10", "entity_group": "LIMIT", "score": 0.9996134285885514}, {"start": 346, "end": 354, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999168495066774}, {"start": 360, "end": 366, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9992064397503487}]}
{"doc_id": "-386611919", "document": "A car company makes two types of cars, a race car and a regular car. Two different teams produce each of these cars. The race car team can make at most 3 race cars per day while the regular car team can make at most 5 regular cars per day. Both cars need to go through a safety check, and in a day at most 6 cars of either type can be safety checked. If the profit per race car is $20000 and the profit per regular car is $10000, how many of each should the company make to maximize their profit?", "order_mapping": {"race car": 0, "regular car": 1, "race cars": 0, "regular cars": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"race car": "20000", "regular car": "10000"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "3", "var": "race cars", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "regular cars", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "6", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of race cars\n- y: Number of regular cars\n\nObjective:\n- The company aims to maximize its profit. The profit per race car is $20000 and the profit per regular car is $10000. Therefore, the objective function is: Maximize 20000x + 10000y\n\nConstraints:\n- The race car team can make at most 3 race cars per day, leading to the constraint: x <= 3.\n- The regular car team can make at most 5 regular cars per day, leading to the constraint: y <= 5.\n- In a day, at most 6 cars of either type can be safety checked, leading to the constraint: x + y <= 6.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20000x + 10000y\nConstraints:\nx <= 3\ny <= 5\nx + y <= 6", "canonical": {"objective": [-20000.0, -10000.0], "constraints": [[1.0, 0.0, 3.0], [0.0, 1.0, 5.0], [1.0, 1.0, 6.0]]}, "solution": {"x": 3, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of race cars made per day: RaceCars\n- Number of regular cars made per day: RegularCars\n\nConstraints:\n- The race car team can make at most 3 race cars per day:\n  RaceCars <= 3\n- The regular car team can make at most 5 regular cars per day:\n  RegularCars <= 5\n- At most 6 cars of either type can be safety checked in a day:\n  RaceCars + RegularCars <= 6\n\nObjective:\n- Maximize profit (20000 dollars per race car, 10000 dollars per regular car):\n  20000 * RaceCars + 10000 * RegularCars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRaceCars = intvar(0, 999999999)  # Number of race cars made per day\nRegularCars = intvar(0, 999999999)  # Number of regular cars made per day\n\n# Constraints\nm = Model()\n\n# The race car team can make at most 3 race cars per day:\nm += RaceCars <= 3\n# The regular car team can make at most 5 regular cars per day:\nm += RegularCars <= 5\n# At most 6 cars of either type can be safety checked in a day:\nm += RaceCars + RegularCars <= 6\n\n# Objective\n# Maximize profit (20000 dollars per race car, 10000 dollars per regular car):\nm.maximize(20000 * RaceCars + 10000 * RegularCars)\n", "entities": [{"start": 42, "end": 50, "word": "race car", "entity_group": "VAR", "score": 0.9999598383705905}, {"start": 57, "end": 68, "word": "regular car", "entity_group": "VAR", "score": 0.999796460094835}, {"start": 124, "end": 132, "word": "race car", "entity_group": "VAR", "score": 0.9999941040338157}, {"start": 147, "end": 154, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982481708112403}, {"start": 155, "end": 156, "word": "3", "entity_group": "LIMIT", "score": 0.9992042825068765}, {"start": 157, "end": 166, "word": "race cars", "entity_group": "VAR", "score": 0.9999552816186201}, {"start": 185, "end": 196, "word": "regular car", "entity_group": "VAR", "score": 0.9999835644278481}, {"start": 211, "end": 218, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985449997800222}, {"start": 219, "end": 220, "word": "5", "entity_group": "LIMIT", "score": 0.9993582284790213}, {"start": 221, "end": 233, "word": "regular cars", "entity_group": "VAR", "score": 0.9999366471365924}, {"start": 303, "end": 310, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989246429473498}, {"start": 311, "end": 312, "word": "6", "entity_group": "LIMIT", "score": 0.9996668467588742}, {"start": 364, "end": 370, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998813006667915}, {"start": 375, "end": 383, "word": "race car", "entity_group": "VAR", "score": 0.9998870382855198}, {"start": 389, "end": 394, "word": "20000", "entity_group": "PARAM", "score": 0.9995594153891983}, {"start": 403, "end": 409, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999906134649084}, {"start": 414, "end": 425, "word": "regular car", "entity_group": "VAR", "score": 0.9998542897290051}, {"start": 431, "end": 436, "word": "10000", "entity_group": "PARAM", "score": 0.9996795363082454}, {"start": 483, "end": 491, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996596147415538}, {"start": 498, "end": 504, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999855339928181}]}
{"doc_id": "-655808311", "document": "A cleaning company cleans houses and apartments. Each house requires 2 hours of sweeping and 2 hours of mopping. Each apartment requires 1 hour of sweeping and 1.5 hours of mopping. The company has available 600 hours for sweeping and 700 hours for mopping. If the profit per house cleaned is $300 and the profit per apartment cleaned is $250, how many of each should the company clean to maximize profit?", "order_mapping": {"houses": 0, "apartments": 1, "house": 0, "apartment": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"house": "300", "apartment": "250"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "600", "terms": {"house": "2", "apartment": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"house": "2", "apartment": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of houses cleaned\n- y: Number of apartments cleaned\n\nObjective:\n- The cleaning company aims to maximize its profit. The profit per house cleaned is $300 and the profit per apartment cleaned is $250. Therefore, the objective function is: Maximize 300x + 250y\n\nConstraints:\n- The company has 600 hours available for sweeping, and each house requires 2 hours of sweeping and each apartment requires 1 hour of sweeping. This leads to the constraint: 2x + y <= 600.\n- The company has 700 hours available for mopping, and each house requires 2 hours of mopping and each apartment requires 1.5 hours of mopping. This results in the constraint: 2x + 1.5y <= 700.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 250y\nConstraints:\n2x + y <= 600\n2x + 1.5y <= 700", "canonical": {"objective": [-300.0, -250.0], "constraints": [[2.0, 1.0, 600.0], [2.0, 1.5, 700.0]]}, "solution": {"x": 2, "y": 464}, "pseudo_model": "\nDecision Variables:\n- Number of houses cleaned: Houses\n- Number of apartments cleaned: Apartments\n\nConstraints:\n- Total hours for sweeping should not exceed 600 hours (2 hours per house, 1 hour per apartment):\n  2 * Houses + 1 * Apartments <= 600\n- Total hours for mopping should not exceed 700 hours (2 hours per house, 1.5 hours per apartment):\n  2 * Houses + 1.5 * Apartments <= 700\n\nObjective:\n- Maximize profit (300 dollars per house cleaned, 250 dollars per apartment cleaned):\n  300 * Houses + 250 * Apartments\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHouses = intvar(0, 999999999)  # Number of houses cleaned\nApartments = intvar(0, 999999999)  # Number of apartments cleaned\n\n# Constraints\nm = Model()\n\n# Total hours for sweeping should not exceed 600 hours:\n# Each house requires 2 hours of sweeping, each apartment requires 1 hour of sweeping\nm += 2 * Houses + 1 * Apartments <= 600\n\n# Total hours for mopping should not exceed 700 hours:\n# Each house requires 2 hours of mopping, each apartment requires 1.5 hours of mopping\nm += 2 * Houses + 1.5 * Apartments <= 700\n\n# Objective\n# Maximize profit (300 dollars per house cleaned, 250 dollars per apartment cleaned):\nm.maximize(300 * Houses + 250 * Apartments)\n", "entities": [{"start": 26, "end": 32, "word": "houses", "entity_group": "VAR", "score": 0.999688646515736}, {"start": 37, "end": 47, "word": "apartments", "entity_group": "VAR", "score": 0.9998055252126314}, {"start": 55, "end": 60, "word": "house", "entity_group": "VAR", "score": 0.9996727465341398}, {"start": 70, "end": 71, "word": "2", "entity_group": "PARAM", "score": 0.9997025427808055}, {"start": 94, "end": 95, "word": "2", "entity_group": "PARAM", "score": 0.9996967270764832}, {"start": 120, "end": 129, "word": "apartment", "entity_group": "VAR", "score": 0.9995470252769557}, {"start": 139, "end": 140, "word": "1", "entity_group": "PARAM", "score": 0.9995013084530903}, {"start": 162, "end": 165, "word": "1.5", "entity_group": "PARAM", "score": 0.9995838757060188}, {"start": 201, "end": 210, "word": "available", "entity_group": "CONST_DIR", "score": 0.999183396309926}, {"start": 211, "end": 214, "word": "600", "entity_group": "LIMIT", "score": 0.9994100928672849}, {"start": 238, "end": 241, "word": "700", "entity_group": "LIMIT", "score": 0.9995879117479213}, {"start": 269, "end": 275, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999376281485933}, {"start": 280, "end": 285, "word": "house", "entity_group": "VAR", "score": 0.9994107702406659}, {"start": 299, "end": 302, "word": "300", "entity_group": "PARAM", "score": 0.9996023926110792}, {"start": 311, "end": 317, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999933846518973}, {"start": 322, "end": 331, "word": "apartment", "entity_group": "VAR", "score": 0.9994143945102164}, {"start": 345, "end": 348, "word": "250", "entity_group": "PARAM", "score": 0.9996530291218816}, {"start": 396, "end": 404, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999586653472691}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "-507549139", "document": "A wood shop makes canoes and paddles. Each requires time for cutting, woodworking, and sanding. Each canoe takes 1 hour of cutting, 5 hours of woodworking, and 2 hours of sanding. Each paddle takes 0.5 hours of cutting, 1 hour of woodworking, and 0.75 hours of sanding. The wood shop has 80 hours available for cutting, 100 hours available for woodworking, and 70 hours available for sanding. If the profit per canoe is $500 and the profit per paddle is $75, how many of each should be made to maximize profit?", "order_mapping": {"canoes": 0, "paddles": 1, "canoe": 0, "paddle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"canoe": "500", "paddle": "75"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "80", "terms": {"canoe": "1", "paddle": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "100", "terms": {"canoe": "5", "paddle": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"canoe": "2", "paddle": "0.75"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of canoes to be made\n- y: Number of paddles to be made\n\nObjective:\n- The wood shop aims to maximize its profit. The profit per canoe is $500 and the profit per paddle is $75. Therefore, the objective function is: Maximize 500x + 75y\n\nConstraints:\n- The wood shop has 80 hours available for cutting, so the constraint is: x + 0.5y <= 80.\n- The wood shop has 100 hours available for woodworking, so the constraint is: 5x + y <= 100.\n- The wood shop has 70 hours available for sanding, so the constraint is: 2x + 0.75y <= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 75y\nConstraints:\nx + 0.5y <= 80\n5x + y <= 100\n2x + 0.75y <= 70", "canonical": {"objective": [-500.0, -75.0], "constraints": [[1.0, 0.5, 80.0], [5.0, 1.0, 100.0], [2.0, 0.75, 70.0]]}, "solution": {"x": 20, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of canoes made: Canoes\n- Number of paddles made: Paddles\n\nConstraints:\n- Cutting time for canoes and paddles should not exceed 80 hours:\n  1 * Canoes + 0.5 * Paddles <= 80\n- Woodworking time for canoes and paddles should not exceed 100 hours:\n  5 * Canoes + 1 * Paddles <= 100\n- Sanding time for canoes and paddles should not exceed 70 hours:\n  2 * Canoes + 0.75 * Paddles <= 70\n\nObjective:\n- Maximize profit (500 dollars per canoe, 75 dollars per paddle):\n  500 * Canoes + 75 * Paddles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCanoes = intvar(0, 999999999)  # Number of canoes made\nPaddles = intvar(0, 999999999)  # Number of paddles made\n\n# Constraints\nm = Model()\n\n# Time constraints for cutting, woodworking, and sanding:\nm += 1 * Canoes + 0.5 * Paddles <= 80  # Cutting time limit\nm += 5 * Canoes + 1 * Paddles <= 100  # Woodworking time limit\nm += 2 * Canoes + 0.75 * Paddles <= 70  # Sanding time limit\n\n# Objective\n# Maximize profit (500 dollars per canoe, 75 dollars per paddle):\nm.maximize(500 * Canoes + 75 * Paddles)\n", "entities": [{"start": 18, "end": 24, "word": "canoes", "entity_group": "VAR", "score": 0.9992752700176915}, {"start": 29, "end": 36, "word": "paddles", "entity_group": "VAR", "score": 0.9995937423123893}, {"start": 105, "end": 110, "word": "canoe", "entity_group": "VAR", "score": 0.9996698357573315}, {"start": 117, "end": 118, "word": "1", "entity_group": "PARAM", "score": 0.9992972368822631}, {"start": 137, "end": 138, "word": "5", "entity_group": "PARAM", "score": 0.9997190682575261}, {"start": 166, "end": 167, "word": "2", "entity_group": "PARAM", "score": 0.9996399579037235}, {"start": 192, "end": 198, "word": "paddle", "entity_group": "VAR", "score": 0.9996180379505576}, {"start": 205, "end": 208, "word": "0.5", "entity_group": "PARAM", "score": 0.9996439996471687}, {"start": 228, "end": 229, "word": "1", "entity_group": "PARAM", "score": 0.999652588597389}, {"start": 256, "end": 260, "word": "0.75", "entity_group": "PARAM", "score": 0.9992938661501287}, {"start": 298, "end": 300, "word": "80", "entity_group": "LIMIT", "score": 0.9997195525607662}, {"start": 307, "end": 316, "word": "available", "entity_group": "CONST_DIR", "score": 0.99882510752443}, {"start": 331, "end": 334, "word": "100", "entity_group": "LIMIT", "score": 0.999725345895017}, {"start": 341, "end": 350, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991961137105202}, {"start": 373, "end": 375, "word": "70", "entity_group": "LIMIT", "score": 0.9997071789802461}, {"start": 382, "end": 391, "word": "available", "entity_group": "CONST_DIR", "score": 0.99924783328971}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998937639160709}, {"start": 424, "end": 429, "word": "canoe", "entity_group": "VAR", "score": 0.9993343410974072}, {"start": 435, "end": 438, "word": "500", "entity_group": "PARAM", "score": 0.9993478814005141}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465452}, {"start": 458, "end": 464, "word": "paddle", "entity_group": "VAR", "score": 0.9990975872183067}, {"start": 470, "end": 472, "word": "75", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 510, "end": 518, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 519, "end": 525, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "254797731", "document": "A pie shop sells regular and premium pies. They make x1 regular pies at a profit of $8 each and x2 premium pies at a profit of $10 each (x1 and x2 are unknown and greater than or equal to 0).  The demand for regular pies is at most 50 and the demand for premium pies is at most 30. In addition the shop can only make 60 pies total. How many of each should they make to maximize profit?", "order_mapping": {"regular and": 0, "premium pies": 1, "regular pies": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular pies": "8", "premium pies": "10"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "50", "var": "regular pies", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "30", "var": "premium pies", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "60", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of regular pies made\n- x2: Number of premium pies made\n\nObjective:\n- The pie shop aims to maximize its profit. They make x1 regular pies at a profit of $8 each and x2 premium pies at a profit of $10 each. Therefore, the objective function is: Maximize 8x1 + 10x2\n\nConstraints:\n- The demand for regular pies is at most 50, leading to the constraint: x1 <= 50.\n- The demand for premium pies is at most 30, leading to the constraint: x2 <= 30.\n- The shop can only make 60 pies in total, resulting in the constraint: x1 + x2 <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x1 + 10x2\nConstraints:\nx1 <= 50\nx2 <= 30\nx1 + x2 <= 60", "canonical": {"objective": [-8.0, -10.0], "constraints": [[1.0, 0.0, 50.0], [0.0, 1.0, 30.0], [1.0, 1.0, 60.0]]}, "solution": {"x": 30, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of regular pies made: RegularPies\n- Number of premium pies made: PremiumPies\n\nConstraints:\n- Total number of pies made should not exceed 60:\n  RegularPies + PremiumPies <= 60\n- At most 50 regular pies due to demand:\n  RegularPies <= 50\n- At most 30 premium pies due to demand:\n  PremiumPies <= 30\n\nObjective:\n- Maximize profit (8 dollars per regular pie, 10 dollars per premium pie):\n  8 * RegularPies + 10 * PremiumPies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularPies = intvar(0, 999999999)  # Number of regular pies made\nPremiumPies = intvar(0, 999999999)  # Number of premium pies made\n\n# Constraints\nm = Model()\n\n# The shop can only make 60 pies total:\nm += RegularPies + PremiumPies <= 60\n# The demand for regular pies is at most 50:\nm += RegularPies <= 50\n# The demand for premium pies is at most 30:\nm += PremiumPies <= 30\n\n# Objective\n# Maximize profit (8 dollars per regular pie, 10 dollars per premium pie):\nm.maximize(8 * RegularPies + 10 * PremiumPies)\n", "entities": [{"start": 17, "end": 28, "word": "regular and", "entity_group": "VAR", "score": 0.9998280920256103}, {"start": 29, "end": 41, "word": "premium pies", "entity_group": "VAR", "score": 0.9999635277061016}, {"start": 57, "end": 69, "word": "regular pies", "entity_group": "VAR", "score": 0.9999718140894455}, {"start": 75, "end": 81, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998149438536948}, {"start": 87, "end": 88, "word": "8", "entity_group": "PARAM", "score": 0.9992178615805296}, {"start": 101, "end": 113, "word": "premium pies", "entity_group": "VAR", "score": 0.9999740911939877}, {"start": 119, "end": 125, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996745772620889}, {"start": 131, "end": 133, "word": "10", "entity_group": "PARAM", "score": 0.9994320571789181}, {"start": 213, "end": 225, "word": "regular pies", "entity_group": "VAR", "score": 0.9998848641568867}, {"start": 229, "end": 236, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997863943272802}, {"start": 237, "end": 239, "word": "50", "entity_group": "LIMIT", "score": 0.9995109374518355}, {"start": 259, "end": 271, "word": "premium pies", "entity_group": "VAR", "score": 0.9998865009534431}, {"start": 275, "end": 282, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9977000099407286}, {"start": 283, "end": 285, "word": "30", "entity_group": "LIMIT", "score": 0.9996994308582273}, {"start": 313, "end": 317, "word": "only", "entity_group": "CONST_DIR", "score": 0.9875003260838987}, {"start": 323, "end": 325, "word": "60", "entity_group": "LIMIT", "score": 0.9996181255927185}, {"start": 376, "end": 384, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995096170958688}, {"start": 385, "end": 391, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999836371803223}]}
{"doc_id": "1240864021", "document": "A dog owner mixes two brands of dog food to ensure his puppy gets at least 30 units of minerals and 40 units of vitamins. A serving of dog food A contains 4 units of minerals and 5 units of vitamins. A serving of dog food B contains 8 units of minerals and 2 units of vitamins. If dog food A costs $3 per serving and dog food B costs $5 per serving, how many servings of each should the owner buy and feed his dog in order to minimize costs?", "order_mapping": {"dog food A": 0, "dog food B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"dog food A": "3", "dog food B": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"dog food A": "4", "dog food B": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"dog food B": "2", "dog food A": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Servings of dog food A\n- y: Servings of dog food B\n\nObjective:\n- The dog owner wants to minimize the cost of the dog food. Given that dog food A costs $3 per serving and dog food B costs $5 per serving, the objective function is: Minimize 3x + 5y\n\nConstraints:\n- The puppy needs at least 30 units of minerals, which can be represented as the constraint: 4x + 8y >= 30.\n- The puppy needs at least 40 units of vitamins, leading to the constraint: 5x + 2y >= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 5y\nConstraints:\n4x + 8y >= 30\n5x + 2y >= 40", "canonical": {"objective": [3.0, 5.0], "constraints": [[-4.0, -8.0, -30.0], [-5.0, -2.0, -40.0]]}, "solution": {"x": 8, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of servings of dog food A: DogFoodA\n- Number of servings of dog food B: DogFoodB\n\nConstraints:\n- To meet the mineral requirement (at least 30 units):\n  4 * DogFoodA + 8 * DogFoodB >= 30\n- To meet the vitamin requirement (at least 40 units):\n  5 * DogFoodA + 2 * DogFoodB >= 40\n\nObjective:\n- Minimize costs (3 dollars per serving of dog food A, 5 dollars per serving of dog food B):\n  3 * DogFoodA + 5 * DogFoodB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDogFoodA = intvar(0, 999999999)  # Number of servings of dog food A\nDogFoodB = intvar(0, 999999999)  # Number of servings of dog food B\n\n# Constraints\nm = Model()\n\n# The puppy needs at least 30 units of minerals:\nm += 4 * DogFoodA + 8 * DogFoodB >= 30\n# The puppy needs at least 40 units of vitamins:\nm += 5 * DogFoodA + 2 * DogFoodB >= 40\n\n# Objective\n# Minimize costs (3 dollars per serving of dog food A, 5 dollars per serving of dog food B):\nm.minimize(3 * DogFoodA + 5 * DogFoodB)\n", "entities": [{"start": 66, "end": 74, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991437166073827}, {"start": 75, "end": 77, "word": "30", "entity_group": "LIMIT", "score": 0.9997604037150446}, {"start": 100, "end": 102, "word": "40", "entity_group": "LIMIT", "score": 0.9997055413974422}, {"start": 136, "end": 146, "word": "dog food A", "entity_group": "VAR", "score": 0.9944469348557369}, {"start": 156, "end": 157, "word": "4", "entity_group": "PARAM", "score": 0.999678239150014}, {"start": 180, "end": 181, "word": "5", "entity_group": "PARAM", "score": 0.9997137659248747}, {"start": 215, "end": 225, "word": "dog food B", "entity_group": "VAR", "score": 0.9962379191056308}, {"start": 235, "end": 236, "word": "8", "entity_group": "PARAM", "score": 0.9996922597890929}, {"start": 259, "end": 260, "word": "2", "entity_group": "PARAM", "score": 0.9997015433498508}, {"start": 284, "end": 294, "word": "dog food A", "entity_group": "VAR", "score": 0.9988601446139181}, {"start": 295, "end": 300, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995392083138307}, {"start": 303, "end": 304, "word": "3", "entity_group": "PARAM", "score": 0.9995615672121309}, {"start": 321, "end": 331, "word": "dog food B", "entity_group": "VAR", "score": 0.9983916760500761}, {"start": 332, "end": 337, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9986275900358477}, {"start": 340, "end": 341, "word": "5", "entity_group": "PARAM", "score": 0.9993860127959111}, {"start": 432, "end": 440, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9966895607572586}, {"start": 441, "end": 446, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9913631842450797}]}
{"doc_id": "-2142684674", "document": "A farm has to transport their chickens. They can either be transported by train or by truck. Each train trip can take 500 chicken while each truck trip can take 300 chicken. The cost per train trip is $100 and the cost per truck trip is $80. The farm has a budget of $2000 and the number of train trips cannot exceed the number of truck trips. How many of each trip should be taken to maximize the number of chickens that can be transported?", "order_mapping": {"train": 0, "truck": 1, "train trip": 2, "truck trip": 1, "train trips": 0, "truck trips": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of chickens", "terms": {"train trip": "500", "truck trip": "300"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "2000", "terms": {"train trip": "100", "truck trip": "80"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "train trips", "direction": "cannot exceed", "y_var": "truck trips", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of train trips\n- y: Number of truck trips\n\nObjective:\n- The farm wants to maximize the number of chickens that can be transported. Each train trip can take 500 chickens and each truck trip can take 300 chickens. Therefore, the objective function is: Maximize 500x + 300y\n\nConstraints:\n- The farm has a budget of $2000, so the cost constraint is: 100x + 80y <= 2000.\n- The number of train trips cannot exceed the number of truck trips, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 300y\nConstraints:\n100x + 80y <= 2000\nx <= y", "canonical": {"objective": [-500.0, -300.0, 0.0], "constraints": [[100.0, 80.0, 0.0, 2000.0], [1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 11, "y": 11, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of train trips: TrainTrips\n- Number of truck trips: TruckTrips\n\nConstraints:\n- The total cost should not exceed the budget of $2000 (cost per train trip is $100, cost per truck trip is $80):\n  100 * TrainTrips + 80 * TruckTrips <= 2000\n- The number of train trips cannot exceed the number of truck trips:\n  TrainTrips <= TruckTrips\n\nObjective:\n- Maximize the number of chickens that can be transported (500 chickens per train trip, 300 chickens per truck trip):\n  500 * TrainTrips + 300 * TruckTrips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrainTrips = intvar(0, 999999999)  # Number of train trips\nTruckTrips = intvar(0, 999999999)  # Number of truck trips\n\n# Constraints\nm = Model()\n\n# The total cost should not exceed the budget of $2000:\nm += 100 * TrainTrips + 80 * TruckTrips <= 2000\n# The number of train trips cannot exceed the number of truck trips:\nm += TrainTrips <= TruckTrips\n\n# Objective\n# Maximize the number of chickens that can be transported (500 chickens per train trip, 300 chickens per truck trip):\nm.maximize(500 * TrainTrips + 300 * TruckTrips)\n", "entities": [{"start": 75, "end": 80, "word": "train", "entity_group": "VAR", "score": 0.9993589976625081}, {"start": 87, "end": 92, "word": "truck", "entity_group": "VAR", "score": 0.99958561877772}, {"start": 100, "end": 110, "word": "train trip", "entity_group": "VAR", "score": 0.9999779990139244}, {"start": 120, "end": 123, "word": "500", "entity_group": "PARAM", "score": 0.9994677364505116}, {"start": 124, "end": 131, "word": "chicken", "entity_group": "OBJ_NAME", "score": 0.9937592483233108}, {"start": 143, "end": 153, "word": "truck trip", "entity_group": "VAR", "score": 0.9999795258497268}, {"start": 163, "end": 166, "word": "300", "entity_group": "PARAM", "score": 0.99963742909482}, {"start": 167, "end": 174, "word": "chicken", "entity_group": "OBJ_NAME", "score": 0.9980878546550541}, {"start": 190, "end": 200, "word": "train trip", "entity_group": "VAR", "score": 0.999972838776967}, {"start": 206, "end": 209, "word": "100", "entity_group": "PARAM", "score": 0.9996496779137274}, {"start": 227, "end": 237, "word": "truck trip", "entity_group": "VAR", "score": 0.9999345820934948}, {"start": 243, "end": 245, "word": "80", "entity_group": "PARAM", "score": 0.9997562601389731}, {"start": 263, "end": 269, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9975624120233316}, {"start": 275, "end": 279, "word": "2000", "entity_group": "LIMIT", "score": 0.9979194448529859}, {"start": 298, "end": 309, "word": "train trips", "entity_group": "VAR", "score": 0.9999296749136102}, {"start": 310, "end": 324, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9911190600377041}, {"start": 339, "end": 350, "word": "truck trips", "entity_group": "VAR", "score": 0.9999592237114093}, {"start": 394, "end": 402, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995705315295857}, {"start": 407, "end": 425, "word": "number of chickens", "entity_group": "OBJ_NAME", "score": 0.9914770336999094}]}
{"doc_id": "57882563", "document": "A bakery only has 1000 units of blueberries to make pies and small tarts. Each pie needs 5 units of blueberries and each tart needs 3 units of blueberries. Since tarts are easier to eat quickly, the bakery must make at least three times as many tarts as pies. However, the bakery must make at least 30 pies. If each pie sold yields a profit of $8 and each tart sold yields a profit of $5, how many of each should the bakery make to maximize profit?", "order_mapping": {"pies": 0, "tarts": 1, "pie": 0, "tart": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pie": "8", "tart": "5"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "1000", "terms": {"pie": "5", "tart": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "tarts", "direction": "at least", "param": "three", "y_var": "pies", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "pies", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pies\n- y: Number of tarts\n\nObjective:\n- The bakery aims to maximize its profit. Each pie sold yields a profit of $8 and each tart sold yields a profit of $5. Therefore, the objective function is: Maximize 8x + 5y\n\nConstraints:\n- The bakery has only 1000 units of blueberries available, so the constraint is: 5x + 3y <= 1000.\n- Tarts must be made at least three times as many as pies, leading to the constraint: y >= 3x.\n- The bakery must make at least 30 pies, resulting in the constraint: x >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x + 5y\nConstraints:\n5x + 3y <= 1000\ny >= 3x\nx >= 30", "canonical": {"objective": [-8.0, -5.0], "constraints": [[5.0, 3.0, 1000.0], [3.0, -1.0, 0.0], [-1.0, 0.0, -30.0]]}, "solution": {"x": 32, "y": 280}, "pseudo_model": "\nDecision Variables:\n- Number of pies made: Pies\n- Number of tarts made: Tarts\n\nConstraints:\n- Total blueberries used for pies and tarts should not exceed 1000 units (5 units per pie, 3 units per tart):\n  5 * Pies + 3 * Tarts <= 1000\n- At least three times as many tarts as pies should be made:\n  Tarts >= 3 * Pies\n- At least 30 pies must be made:\n  Pies >= 30\n\nObjective:\n- Maximize profit (8 dollars per pie, 5 dollars per tart):\n  8 * Pies + 5 * Tarts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPies = intvar(0, 999999999)  # Number of pies made\nTarts = intvar(0, 999999999)  # Number of tarts made\n\n# Constraints\nm = Model()\n\n# The bakery only has 1000 units of blueberries:\nm += 5 * Pies + 3 * Tarts <= 1000\n# The bakery must make at least three times as many tarts as pies:\nm += Tarts >= 3 * Pies\n# The bakery must make at least 30 pies:\nm += Pies >= 30\n\n# Objective\n# Maximize profit (8 dollars per pie, 5 dollars per tart):\nm.maximize(8 * Pies + 5 * Tarts)\n", "entities": [{"start": 9, "end": 13, "word": "only", "entity_group": "CONST_DIR", "score": 0.9976609156373287}, {"start": 18, "end": 22, "word": "1000", "entity_group": "LIMIT", "score": 0.9997425111532113}, {"start": 52, "end": 56, "word": "pies", "entity_group": "VAR", "score": 0.9916547019247179}, {"start": 67, "end": 72, "word": "tarts", "entity_group": "VAR", "score": 0.999842573697758}, {"start": 80, "end": 83, "word": "pie", "entity_group": "VAR", "score": 0.9990108139056798}, {"start": 90, "end": 91, "word": "5", "entity_group": "PARAM", "score": 0.9996644053491266}, {"start": 122, "end": 126, "word": "tart", "entity_group": "VAR", "score": 0.9996413257163783}, {"start": 133, "end": 134, "word": "3", "entity_group": "PARAM", "score": 0.9996661226567438}, {"start": 164, "end": 169, "word": "tarts", "entity_group": "VAR", "score": 0.9996338817772589}, {"start": 219, "end": 227, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980229937486084}, {"start": 228, "end": 233, "word": "three", "entity_group": "PARAM", "score": 0.9938642665033689}, {"start": 248, "end": 253, "word": "tarts", "entity_group": "VAR", "score": 0.9994229073542743}, {"start": 257, "end": 261, "word": "pies", "entity_group": "VAR", "score": 0.9996976472398346}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989326262569957}, {"start": 304, "end": 306, "word": "30", "entity_group": "LIMIT", "score": 0.9997115086916724}, {"start": 307, "end": 311, "word": "pies", "entity_group": "VAR", "score": 0.9996794414239788}, {"start": 322, "end": 325, "word": "pie", "entity_group": "VAR", "score": 0.9997725189671737}, {"start": 340, "end": 346, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998377780490613}, {"start": 352, "end": 353, "word": "8", "entity_group": "PARAM", "score": 0.999008512820028}, {"start": 363, "end": 367, "word": "tart", "entity_group": "VAR", "score": 0.9998158529585527}, {"start": 382, "end": 388, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998652447353964}, {"start": 394, "end": 395, "word": "5", "entity_group": "PARAM", "score": 0.9996741552286499}, {"start": 441, "end": 449, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994691351022196}, {"start": 450, "end": 456, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998151862469309}]}
{"doc_id": "1405331961", "document": "A stationary store sells pens and pencils. Each pen costs the store $2 and each pencil costs the store $1. The store owner can spend at most $500 on inventory. Each pen is then sold for a profit of $3 while each pencil is sold for a profit of $1. The owner estimates that at least 100 pens but at most 150 pens are sold each month. He also estimate that the number of pencils sold is at most twice the amount of pens sold. How many of each should be bought and sold to maximize profit?", "order_mapping": {"pens": 0, "pencils": 1, "pen": 0, "pencil": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pen": "3", "pencil": "1"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"pen": "2", "pencil": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "pens", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "pens", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "pencils", "direction": "at most", "param": "twice", "y_var": "pens", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pens bought and sold\n- y: Number of pencils bought and sold\n\nObjective:\n- The store owner aims to maximize the profit. Each pen is sold for a profit of $3 and each pencil is sold for a profit of $1. Therefore, the objective function is: Maximize 3x + y\n\nConstraints:\n- The store owner can spend at most $500 on inventory, leading to the constraint: 2x + y <= 500.\n- The owner estimates that at least 100 pens but at most 150 pens are sold each month, resulting in the constraints: x >= 100 and x <= 150.\n- The number of pencils sold is at most twice the amount of pens sold, leading to the constraint: y <= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + y\nConstraints:\n2x + y <= 500\nx >= 100\nx <= 150\ny <= 2x", "canonical": {"objective": [-3.0, -1.0], "constraints": [[2.0, 1.0, 500.0], [-1.0, 0.0, -100.0], [1.0, 0.0, 150.0], [-2.0, 1.0, 0.0]]}, "solution": {"x": 150, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of pens bought and sold: Pens\n- Number of pencils bought and sold: Pencils\n\nConstraints:\n- Inventory cost limit (each pen costs $2 and each pencil costs $1, total cost <= $500):\n  2 * Pens + 1 * Pencils <= 500\n- Pens sold per month should be at least 100 but no more than 150:\n  100 <= Pens <= 150\n- Number of pencils sold should not exceed twice the number of pens sold:\n  Pencils <= 2 * Pens\n\nObjective:\n- Maximize profit (profit of $3 per pen and $1 per pencil):\n  3 * Pens + 1 * Pencils\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPens = intvar(0, 999999999)  # Number of pens bought and sold\nPencils = intvar(0, 999999999)  # Number of pencils bought and sold\n\n# Constraints\nm = Model()\n\n# The store owner can spend at most $500 on inventory (each pen costs $2 and each pencil costs $1):\nm += 2 * Pens + 1 * Pencils <= 500\n# At least 100 pens but at most 150 pens are sold each month:\nm += Pens >= 100\nm += Pens <= 150\n# The number of pencils sold is at most twice the amount of pens sold:\nm += Pencils <= 2 * Pens\n\n# Objective\n# Maximize profit (each pen is sold for a profit of $3 and each pencil is sold for a profit of $1):\nm.maximize(3 * Pens + 1 * Pencils)\n", "entities": [{"start": 25, "end": 29, "word": "pens", "entity_group": "VAR", "score": 0.9997993270322706}, {"start": 34, "end": 41, "word": "pencils", "entity_group": "VAR", "score": 0.9998287731829617}, {"start": 49, "end": 52, "word": "pen", "entity_group": "VAR", "score": 0.999572800075649}, {"start": 71, "end": 72, "word": "2", "entity_group": "PARAM", "score": 0.9997287253354158}, {"start": 82, "end": 88, "word": "pencil", "entity_group": "VAR", "score": 0.9998187234932708}, {"start": 107, "end": 108, "word": "1", "entity_group": "PARAM", "score": 0.9997457080641222}, {"start": 137, "end": 144, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9967018161934729}, {"start": 147, "end": 150, "word": "500", "entity_group": "LIMIT", "score": 0.9994507064888613}, {"start": 171, "end": 174, "word": "pen", "entity_group": "VAR", "score": 0.9984687880961935}, {"start": 194, "end": 200, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999801476931608}, {"start": 206, "end": 207, "word": "3", "entity_group": "PARAM", "score": 0.9996291239902244}, {"start": 219, "end": 225, "word": "pencil", "entity_group": "VAR", "score": 0.9997874656637016}, {"start": 240, "end": 246, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995170334868902}, {"start": 252, "end": 253, "word": "1", "entity_group": "PARAM", "score": 0.9996274697147237}, {"start": 281, "end": 289, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990907289272503}, {"start": 290, "end": 293, "word": "100", "entity_group": "LIMIT", "score": 0.9997161344945994}, {"start": 294, "end": 298, "word": "pens", "entity_group": "VAR", "score": 0.9990623150784905}, {"start": 303, "end": 310, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989139851715868}, {"start": 311, "end": 314, "word": "150", "entity_group": "LIMIT", "score": 0.9997518811088997}, {"start": 315, "end": 319, "word": "pens", "entity_group": "VAR", "score": 0.9987595663464008}, {"start": 378, "end": 385, "word": "pencils", "entity_group": "VAR", "score": 0.9992421901044014}, {"start": 394, "end": 401, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9966533403806953}, {"start": 402, "end": 407, "word": "twice", "entity_group": "PARAM", "score": 0.9943606868432919}, {"start": 422, "end": 426, "word": "pens", "entity_group": "VAR", "score": 0.999486937245649}, {"start": 480, "end": 488, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994420961850083}, {"start": 489, "end": 495, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997976841836507}]}
{"doc_id": "1855357113", "document": "Jason has $1000000 to invest in the following energy sectors: solar, wind, nuclear and coal. The annual rate of return for each is as follows: solar, 6%; wind, 9%, nuclear, 12%, coal, 3%. Jason has the following conditions. The amount he invests in coal cannot exceed the amount invested in solar. Similarly, the amount invested in wind cannot exceed the amount invested in nuclear. Lastly, at most 10% of the investment can be in coal. How much money should Jason invest in each sector to maximize his return?", "order_mapping": {"solar": 0, "wind": 1, "nuclear": 2, "coal": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"solar": "6%", "wind": "9%", "nuclear": "12%", "coal": "3%"}}, "const_declarations": [{"type": "xy", "x_var": "coal", "direction": "cannot exceed", "y_var": "solar", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "wind", "direction": "cannot exceed", "y_var": "nuclear", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "10%", "var": "coal", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in solar\n- y: Dollars invested in wind\n- z: Dollars invested in nuclear\n- w: Dollars invested in coal\n\nObjective:\n- Jason aims to maximize his return. The annual rate of return for each energy sector is as follows: solar, 6%; wind, 9%; nuclear, 12%; coal, 3%. Therefore, the objective function is: Maximize 0.06x + 0.09y + 0.12z + 0.03w\n\nConstraints:\n- Jason has $1,000,000 to invest, so the constraint is: x + y + z + w <= 1000000.\n- The amount invested in coal cannot exceed the amount invested in solar, leading to the constraint: w <= x.\n- The amount invested in wind cannot exceed the amount invested in nuclear, leading to the constraint: y <= z.\n- At most 10% of the investment can be in coal, resulting in the constraint: w <= 0.10(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.06x + 0.09y + 0.12z + 0.03w\nConstraints:\nx + y + z + w <= 1000000\nw <= x\ny <= z\nw <= 0.10(x + y + z + w)", "canonical": {"objective": [-0.06, -0.09, -0.12, -0.03], "constraints": [[1.0, 1.0, 1.0, 1.0, 1000000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.1, -0.1, -0.1, 0.9, 0.0]]}, "solution": {"x": 0, "y": 0, "z": 1000000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in solar: Solar\n- Amount invested in wind: Wind\n- Amount invested in nuclear: Nuclear\n- Amount invested in coal: Coal\n\nConstraints:\n- The amount invested in coal cannot exceed the amount invested in solar:\n  Coal <= Solar\n- The amount invested in wind cannot exceed the amount invested in nuclear:\n  Wind <= Nuclear\n- At most 10% of the total investment can be in coal:\n  Coal <= 0.10 * (Solar + Wind + Nuclear + Coal)\n- Total investment should not exceed $1000000:\n  Solar + Wind + Nuclear + Coal <= 1000000\n\nObjective:\n- Maximize return (6% for solar, 9% for wind, 12% for nuclear, 3% for coal):\n  0.06 * Solar + 0.09 * Wind + 0.12 * Nuclear + 0.03 * Coal\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSolar = intvar(0, 1000000)  # Amount invested in solar\nWind = intvar(0, 1000000)  # Amount invested in wind\nNuclear = intvar(0, 1000000)  # Amount invested in nuclear\nCoal = intvar(0, 1000000)  # Amount invested in coal\n\n# Constraints\nm = Model()\n\n# The amount invested in coal cannot exceed the amount invested in solar:\nm += Coal <= Solar\n# The amount invested in wind cannot exceed the amount invested in nuclear:\nm += Wind <= Nuclear\n# At most 10% of the investment can be in coal:\nm += Coal <= 0.10 * (Solar + Wind + Nuclear + Coal)\n\n# Total investment should not exceed $1000000:\nm += Solar + Wind + Nuclear + Coal <= 1000000\n\n# Objective\n# Maximize return (6% for solar, 9% for wind, 12% for nuclear, 3% for coal):\nm.maximize(0.06 * Solar + 0.09 * Wind + 0.12 * Nuclear + 0.03 * Coal)\n", "entities": [{"start": 12, "end": 19, "word": "1000000", "entity_group": "LIMIT", "score": 0.9992232925849652}, {"start": 64, "end": 69, "word": "solar", "entity_group": "VAR", "score": 0.9997168212766794}, {"start": 72, "end": 76, "word": "wind", "entity_group": "VAR", "score": 0.9962921321261594}, {"start": 79, "end": 86, "word": "nuclear", "entity_group": "VAR", "score": 0.9996878891453843}, {"start": 91, "end": 95, "word": "coal", "entity_group": "VAR", "score": 0.9997087804988544}, {"start": 117, "end": 123, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9903000857450013}, {"start": 149, "end": 154, "word": "solar", "entity_group": "VAR", "score": 0.9993714083044968}, {"start": 157, "end": 160, "word": "6 %", "entity_group": "PARAM", "score": 0.9788961669116968}, {"start": 163, "end": 167, "word": "wind", "entity_group": "VAR", "score": 0.998298092417271}, {"start": 170, "end": 173, "word": "9 %", "entity_group": "PARAM", "score": 0.9903061573835987}, {"start": 176, "end": 183, "word": "nuclear", "entity_group": "VAR", "score": 0.9992176175333048}, {"start": 186, "end": 190, "word": "12 %", "entity_group": "PARAM", "score": 0.9876231212902598}, {"start": 193, "end": 197, "word": "coal", "entity_group": "VAR", "score": 0.9990873635542357}, {"start": 200, "end": 203, "word": "3 %", "entity_group": "PARAM", "score": 0.9700353519290238}, {"start": 268, "end": 272, "word": "coal", "entity_group": "VAR", "score": 0.9996093984252846}, {"start": 273, "end": 287, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9713439739120253}, {"start": 311, "end": 316, "word": "solar", "entity_group": "VAR", "score": 0.9996465342744835}, {"start": 354, "end": 358, "word": "wind", "entity_group": "VAR", "score": 0.9996509349610848}, {"start": 359, "end": 373, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9725524085523234}, {"start": 397, "end": 404, "word": "nuclear", "entity_group": "VAR", "score": 0.9996939401235444}, {"start": 416, "end": 423, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987278336351498}, {"start": 424, "end": 428, "word": "10 %", "entity_group": "LIMIT", "score": 0.9372573801606126}, {"start": 457, "end": 461, "word": "coal", "entity_group": "VAR", "score": 0.9997920699233649}, {"start": 517, "end": 525, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988236623703862}, {"start": 530, "end": 536, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9985021650188637}]}
{"doc_id": "1665744345", "document": "A young entrepreneur buys and sells t-shirts and sweaters. He has a budget of $1000 and each t-shirt costs $20 and each sweater costs $30. Each t-shirt is then sold for a profit of $15 and each sweater is then sold for a profit of $20. The young man estimates that at least 20 but at most 40 t-shirts are sold. He also estimates that the number of sweaters sold is at most half the number of t-shirts sold. How many of each item should he buy and sell to maximize profit?", "order_mapping": {"t-shirts": 0, "sweaters": 1, "t-shirt": 0, "sweater": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"t-shirt": "15", "sweater": "20"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "20", "var": "t-shirts", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40", "var": "t-shirts", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "sweaters", "direction": "at most", "param": "half", "y_var": "t-shirts", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of t-shirts bought and sold\n- y: Number of sweaters bought and sold\n\nObjective:\n- The entrepreneur aims to maximize his profit. Each t-shirt is sold for a profit of $15 and each sweater is sold for a profit of $20. Therefore, the objective function is: Maximize 15x + 20y\n\nConstraints:\n- The budget available for the entrepreneur is $1000, so the constraint is: 20x + 30y <= 1000.\n- The number of t-shirts sold should be at least 20 and at most 40, leading to the constraints: x >= 20 and x <= 40.\n- The number of sweaters sold should be at most half the number of t-shirts sold, resulting in the constraint: y <= 0.5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 15x + 20y\nConstraints:\n20x + 30y <= 1000\nx >= 20\nx <= 40\ny <= 0.5x", "canonical": {"objective": [-15.0, -20.0], "constraints": [[20.0, 30.0, 1000.0], [-1.0, 0.0, -20.0], [1.0, 0.0, 40.0], [-0.5, 1.0, 0.0]]}, "solution": {"x": 38, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of t-shirts bought and sold: TShirts\n- Number of sweaters bought and sold: Sweaters\n\nConstraints:\n- TShirts should be at least 20 and at most 40:\n  20 <= TShirts <= 40\n- Sweaters should be at most half the number of TShirts:\n  Sweaters <= 0.5 * TShirts\n- Budget constraint (buying cost): $20 per t-shirt and $30 per sweater, total budget is $1000:\n  20 * TShirts + 30 * Sweaters <= 1000\n\nObjective:\n- Maximize profit ($15 profit per t-shirt and $20 profit per sweater):\n  15 * TShirts + 20 * Sweaters\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTShirts = intvar(20, 40)  # Number of t-shirts bought and sold\nSweaters = intvar(0, 20)  # Number of sweaters bought and sold, at most half the number of t-shirts\n\n# Constraints\nm = Model()\n\n# The number of sweaters sold is at most half the number of t-shirts sold:\nm += Sweaters <= 0.5 * TShirts\n\n# Budget constraint: $20 per t-shirt and $30 per sweater, total budget is $1000\nm += 20 * TShirts + 30 * Sweaters <= 1000\n\n# Objective\n# Maximize profit: $15 profit per t-shirt and $20 profit per sweater\nm.maximize(15 * TShirts + 20 * Sweaters)\n", "entities": [{"start": 36, "end": 46, "word": "t - shirts", "entity_group": "VAR", "score": 0.9981528488720728}, {"start": 51, "end": 59, "word": "sweaters", "entity_group": "VAR", "score": 0.9993483285418677}, {"start": 71, "end": 77, "word": "budget", "entity_group": "CONST_DIR", "score": 0.998647543387252}, {"start": 83, "end": 87, "word": "1000", "entity_group": "LIMIT", "score": 0.9988342594312424}, {"start": 97, "end": 106, "word": "t - shirt", "entity_group": "VAR", "score": 0.9994984232367496}, {"start": 115, "end": 117, "word": "20", "entity_group": "PARAM", "score": 0.999631294648695}, {"start": 127, "end": 134, "word": "sweater", "entity_group": "VAR", "score": 0.9998054514125548}, {"start": 143, "end": 145, "word": "30", "entity_group": "PARAM", "score": 0.9997515855143995}, {"start": 153, "end": 162, "word": "t - shirt", "entity_group": "VAR", "score": 0.9991337687950288}, {"start": 182, "end": 188, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999525757333174}, {"start": 194, "end": 196, "word": "15", "entity_group": "PARAM", "score": 0.9996995719268711}, {"start": 206, "end": 213, "word": "sweater", "entity_group": "VAR", "score": 0.999807317087056}, {"start": 233, "end": 239, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994614752633156}, {"start": 245, "end": 247, "word": "20", "entity_group": "PARAM", "score": 0.999583677155851}, {"start": 279, "end": 287, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990061254451374}, {"start": 288, "end": 290, "word": "20", "entity_group": "LIMIT", "score": 0.9996249381147198}, {"start": 295, "end": 302, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989905730093437}, {"start": 303, "end": 305, "word": "40", "entity_group": "LIMIT", "score": 0.9994567928775459}, {"start": 306, "end": 316, "word": "t - shirts", "entity_group": "VAR", "score": 0.999166818361676}, {"start": 365, "end": 373, "word": "sweaters", "entity_group": "VAR", "score": 0.9992448513831004}, {"start": 382, "end": 389, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9972649513601435}, {"start": 390, "end": 394, "word": "half", "entity_group": "PARAM", "score": 0.9944087045083008}, {"start": 409, "end": 419, "word": "t - shirts", "entity_group": "VAR", "score": 0.9987588314663964}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992866162780141}, {"start": 484, "end": 490, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996305885850738}]}
{"doc_id": "-1712927932", "document": "An appliance store sells microwaves and vents. A microwave costs the store $300 and a vent costs the store $400. The store can spend at most $20000. The store sells at least 30 microwaves but at most 65 microwaves. Also the number of vents sold is at most a third of the number of microwaves sold. If the profit per microwave sold is $200 and the profit per vent sold is $300, how many of each should the store buy and sell to maximize profit?", "order_mapping": {"microwaves": 0, "vents": 1, "microwave": 0, "vent": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"vent": "300", "microwave": "200"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "20000", "terms": {"microwave": "300", "vent": "400"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "microwaves", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "65", "var": "microwaves", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "vents", "direction": "at most", "param": "third", "y_var": "microwaves", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of microwaves bought and sold\n- y: Number of vents bought and sold\n\nObjective:\n- The store aims to maximize its profit. The profit per microwave sold is $200 and the profit per vent sold is $300. Therefore, the objective function is: Maximize 200x + 300y\n\nConstraints:\n- The store can spend at most $20000, so the constraint is: 300x + 400y <= 20000.\n- The store sells at least 30 microwaves but at most 65 microwaves, leading to the constraints: 30 <= x <= 65.\n- The number of vents sold is at most a third of the number of microwaves sold, resulting in the constraint: y <= 1/3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 300y\nConstraints:\n300x + 400y <= 20000\n30 <= x <= 65\ny <= 1/3x", "canonical": {"objective": [-200.0, -300.0], "constraints": [[300.0, 400.0, 20000.0], [-0.3333333333333333, 1.0, 0.0], [-1.0, 0.0, -30.0], [1.0, 0.0, 65.0]]}, "solution": {"x": 48, "y": 14}, "pseudo_model": "\nDecision Variables:\n- Number of microwaves sold: Microwaves\n- Number of vents sold: Vents\n\nConstraints:\n- The store can spend at most $20000 on microwaves and vents:\n  300 * Microwaves + 400 * Vents <= 20000\n- The store sells at least 30 and at most 65 microwaves:\n  30 <= Microwaves <= 65\n- The number of vents sold is at most a third of the number of microwaves sold:\n  Vents <= 1/3 * Microwaves\n\nObjective:\n- Maximize profit (profit per microwave is $200, profit per vent is $300):\n  200 * Microwaves + 300 * Vents\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMicrowaves = intvar(0, 999999999)  # Number of microwaves sold\nVents = intvar(0, 999999999)  # Number of vents sold\n\n# Constraints\nm = Model()\n\n# The store can spend at most $20000 (microwave costs $300, vent costs $400):\nm += 300 * Microwaves + 400 * Vents <= 20000\n# The store sells at least 30 microwaves but at most 65 microwaves:\nm += Microwaves >= 30\nm += Microwaves <= 65\n# The number of vents sold is at most a third of the number of microwaves sold:\nm += Vents <= (1/3) * Microwaves\n\n# Objective\n# Maximize profit (profit per microwave sold is $200, profit per vent sold is $300):\nm.maximize(200 * Microwaves + 300 * Vents)\n", "entities": [{"start": 25, "end": 35, "word": "microwaves", "entity_group": "VAR", "score": 0.9997763071054367}, {"start": 40, "end": 45, "word": "vents", "entity_group": "VAR", "score": 0.9997336021908968}, {"start": 50, "end": 59, "word": "microwave", "entity_group": "VAR", "score": 0.9997569319944323}, {"start": 78, "end": 81, "word": "300", "entity_group": "PARAM", "score": 0.9997291691140092}, {"start": 88, "end": 92, "word": "vent", "entity_group": "VAR", "score": 0.9998219254318702}, {"start": 111, "end": 114, "word": "400", "entity_group": "PARAM", "score": 0.9997210160285673}, {"start": 137, "end": 144, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9960109255575272}, {"start": 147, "end": 152, "word": "20000", "entity_group": "LIMIT", "score": 0.9996640885228077}, {"start": 171, "end": 179, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998668623204254}, {"start": 180, "end": 182, "word": "30", "entity_group": "LIMIT", "score": 0.9997013773096833}, {"start": 183, "end": 193, "word": "microwaves", "entity_group": "VAR", "score": 0.9990602444004789}, {"start": 198, "end": 205, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998718510665556}, {"start": 206, "end": 208, "word": "65", "entity_group": "LIMIT", "score": 0.9997471194135261}, {"start": 209, "end": 219, "word": "microwaves", "entity_group": "VAR", "score": 0.999562756574662}, {"start": 241, "end": 246, "word": "vents", "entity_group": "VAR", "score": 0.998936262049137}, {"start": 255, "end": 262, "word": "at most", "entity_group": "CONST_DIR", "score": 0.996946082575037}, {"start": 265, "end": 270, "word": "third", "entity_group": "PARAM", "score": 0.9856731581205285}, {"start": 288, "end": 298, "word": "microwaves", "entity_group": "VAR", "score": 0.9991257381569151}, {"start": 313, "end": 319, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998912539729423}, {"start": 324, "end": 333, "word": "microwave", "entity_group": "VAR", "score": 0.9993427397032872}, {"start": 344, "end": 347, "word": "200", "entity_group": "PARAM", "score": 0.9995965170761617}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999938621630871}, {"start": 367, "end": 371, "word": "vent", "entity_group": "VAR", "score": 0.9990377006135004}, {"start": 382, "end": 385, "word": "300", "entity_group": "PARAM", "score": 0.9996530293429738}, {"start": 438, "end": 446, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987210781682757}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997433452488922}]}
{"doc_id": "-709670450", "document": "A costume store sells policeman costumes and fireman costumes. The store has a budget of $3000 and each policeman costume costs $10 and each fireman costume costs $15. The monthly demand for both costumes will not exceed 280. If the profit per policeman costume is $8 and the profit per fireman costume is $10, how many of each should the store stock in order to maximize profit?", "order_mapping": {"policeman costumes": 0, "fireman costumes": 1, "policeman costume": 0, "fireman costume": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"policeman costume": "8", "fireman costume": "10"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "3000", "terms": {"policeman costume": "10", "fireman costume": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "not exceed", "limit": "280", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of policeman costumes\n- y: Number of fireman costumes\n\nObjective:\n- The store aims to maximize its profit. The profit per policeman costume is $8 and the profit per fireman costume is $10. Therefore, the objective function is: Maximize 8x + 10y\n\nConstraints:\n- The store has a budget of $3000, and each policeman costume costs $10 and each fireman costume costs $15. This leads to the budget constraint: 10x + 15y <= 3000.\n- The monthly demand for both costumes will not exceed 280, resulting in the constraint: x + y <= 280.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8x + 10y\nConstraints:\n10x + 15y <= 3000\nx + y <= 280", "canonical": {"objective": [-8.0, -10.0], "constraints": [[10.0, 15.0, 3000.0], [1.0, 1.0, 280.0]]}, "solution": {"x": 240, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of policeman costumes to stock: PolicemanCostumes\n- Number of fireman costumes to stock: FiremanCostumes\n\nConstraints:\n- The store has a budget of $3000 (each policeman costume costs $10 and each fireman costume costs $15):\n  10 * PolicemanCostumes + 15 * FiremanCostumes <= 3000\n- The monthly demand for both costumes will not exceed 280:\n  PolicemanCostumes + FiremanCostumes <= 280\n\nObjective:\n- Maximize profit ($8 profit per policeman costume, $10 profit per fireman costume):\n  8 * PolicemanCostumes + 10 * FiremanCostumes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPolicemanCostumes = intvar(0, 999999999)  # Number of policeman costumes to stock\nFiremanCostumes = intvar(0, 999999999)  # Number of fireman costumes to stock\n\n# Constraints\nm = Model()\n\n# The store has a budget of $3000:\nm += 10 * PolicemanCostumes + 15 * FiremanCostumes <= 3000\n# The monthly demand for both costumes will not exceed 280:\nm += PolicemanCostumes + FiremanCostumes <= 280\n\n# Objective\n# Maximize profit ($8 per policeman costume, $10 per fireman costume):\nm.maximize(8 * PolicemanCostumes + 10 * FiremanCostumes)\n", "entities": [{"start": 22, "end": 40, "word": "policeman costumes", "entity_group": "VAR", "score": 0.9999703549061844}, {"start": 45, "end": 61, "word": "fireman costumes", "entity_group": "VAR", "score": 0.9999868314124036}, {"start": 80, "end": 86, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9971675144870443}, {"start": 92, "end": 96, "word": "3000", "entity_group": "LIMIT", "score": 0.9987663300780573}, {"start": 106, "end": 123, "word": "policeman costume", "entity_group": "VAR", "score": 0.9999858591021009}, {"start": 132, "end": 134, "word": "10", "entity_group": "PARAM", "score": 0.9997364393615407}, {"start": 144, "end": 159, "word": "fireman costume", "entity_group": "VAR", "score": 0.9999768878127435}, {"start": 168, "end": 170, "word": "15", "entity_group": "PARAM", "score": 0.9997015977501915}, {"start": 215, "end": 225, "word": "not exceed", "entity_group": "CONST_DIR", "score": 0.9940785088691849}, {"start": 226, "end": 229, "word": "280", "entity_group": "LIMIT", "score": 0.9997318497375102}, {"start": 239, "end": 245, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998855592965821}, {"start": 250, "end": 267, "word": "policeman costume", "entity_group": "VAR", "score": 0.999947104598358}, {"start": 273, "end": 274, "word": "8", "entity_group": "PARAM", "score": 0.9996126243034849}, {"start": 283, "end": 289, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384728319275}, {"start": 294, "end": 309, "word": "fireman costume", "entity_group": "VAR", "score": 0.9999447164715606}, {"start": 315, "end": 317, "word": "10", "entity_group": "PARAM", "score": 0.9996757786827838}, {"start": 372, "end": 380, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9932199704765714}, {"start": 381, "end": 387, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995222291850439}]}
{"doc_id": "-1527825949", "document": "A company sells tennis rackets and badminton rackets. Each tennis racket takes 12 minutes to mold and 15 minutes to string. Each badminton racket takes 10 minutes to mold and 12 minutes to string. There are 3000 minutes available for molding and 3500 minutes available for stringing. If the profit per tennis racket is $20 and the profit per badminton racket is $17, how many of each should be made to maximize profit?", "order_mapping": {"tennis rackets": 0, "badminton rackets": 1, "tennis racket": 0, "badminton racket": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"tennis racket": "20", "badminton racket": "17"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"tennis racket": "12", "badminton racket": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"tennis racket": "15", "badminton racket": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tennis rackets\n- y: Number of badminton rackets\n\nObjective:\n- The company aims to maximize its profit. The profit per tennis racket is $20 and the profit per badminton racket is $17. Therefore, the objective function is: Maximize 20x + 17y\n\nConstraints:\n- Each tennis racket takes 12 minutes to mold and each badminton racket takes 10 minutes to mold. The total time available for molding is 3000 minutes, leading to the constraint: 12x + 10y <= 3000.\n- Each tennis racket takes 15 minutes to string and each badminton racket takes 12 minutes to string. The total time available for stringing is 3500 minutes, leading to the constraint: 15x + 12y <= 3500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 17y\nConstraints:\n12x + 10y <= 3000\n15x + 12y <= 3500", "canonical": {"objective": [-20.0, -17.0], "constraints": [[12.0, 10.0, 3000.0], [15.0, 12.0, 3500.0]]}, "solution": {"x": 2, "y": 289}, "pseudo_model": "\nDecision Variables:\n- Number of tennis rackets made: TennisRackets\n- Number of badminton rackets made: BadmintonRackets\n\nConstraints:\n- Molding time for tennis and badminton rackets should not exceed 3000 minutes:\n  12 * TennisRackets + 10 * BadmintonRackets <= 3000\n- Stringing time for tennis and badminton rackets should not exceed 3500 minutes:\n  15 * TennisRackets + 12 * BadmintonRackets <= 3500\n\nObjective:\n- Maximize profit (20 dollars per tennis racket, 17 dollars per badminton racket):\n  20 * TennisRackets + 17 * BadmintonRackets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTennisRackets = intvar(0, 999999999)  # Number of tennis rackets made\nBadmintonRackets = intvar(0, 999999999)  # Number of badminton rackets made\n\n# Constraints\nm = Model()\n\n# Molding time constraints (3000 minutes available for molding):\nm += 12 * TennisRackets + 10 * BadmintonRackets <= 3000\n# Stringing time constraints (3500 minutes available for stringing):\nm += 15 * TennisRackets + 12 * BadmintonRackets <= 3500\n\n# Objective\n# Maximize profit (20 dollars per tennis racket, 17 dollars per badminton racket):\nm.maximize(20 * TennisRackets + 17 * BadmintonRackets)\n", "entities": [{"start": 16, "end": 30, "word": "tennis rackets", "entity_group": "VAR", "score": 0.9999869024231269}, {"start": 35, "end": 52, "word": "badminton rackets", "entity_group": "VAR", "score": 0.9999884307456278}, {"start": 60, "end": 73, "word": "tennis racket", "entity_group": "VAR", "score": 0.9999826930055253}, {"start": 80, "end": 82, "word": "12", "entity_group": "PARAM", "score": 0.9996769108888464}, {"start": 103, "end": 105, "word": "15", "entity_group": "PARAM", "score": 0.9996999856532715}, {"start": 131, "end": 147, "word": "badminton racket", "entity_group": "VAR", "score": 0.9999796584149929}, {"start": 154, "end": 156, "word": "10", "entity_group": "PARAM", "score": 0.9997119617040802}, {"start": 177, "end": 179, "word": "12", "entity_group": "PARAM", "score": 0.9996670132958719}, {"start": 210, "end": 214, "word": "3000", "entity_group": "LIMIT", "score": 0.9997808225137563}, {"start": 223, "end": 232, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992969709937348}, {"start": 249, "end": 253, "word": "3500", "entity_group": "LIMIT", "score": 0.9997516723510255}, {"start": 262, "end": 271, "word": "available", "entity_group": "CONST_DIR", "score": 0.998891695015738}, {"start": 295, "end": 301, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999458624302525}, {"start": 306, "end": 319, "word": "tennis racket", "entity_group": "VAR", "score": 0.9999475314348626}, {"start": 325, "end": 327, "word": "20", "entity_group": "PARAM", "score": 0.9996126246185211}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384728319128}, {"start": 347, "end": 363, "word": "badminton racket", "entity_group": "VAR", "score": 0.9999450048231512}, {"start": 369, "end": 371, "word": "17", "entity_group": "PARAM", "score": 0.999675780277594}, {"start": 409, "end": 417, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "1761965781", "document": "A pizza store makes cheese and pepperoni pizza. Each cheese pizza requires 30 grams of flour, 50 grams of cheese, and 40 grams of sauce. Each pepperoni pizza requires 40 grams of flour, 20 grams of cheese, and 30 grams of sauce. The store has available 3000 grams of flour, 4000 grams of cheese, and 5000 grams of sauce. If the profit per cheese pizza is $7 and the profit per pepperoni pizza is $9, how many of each should be made to maximize profit?", "order_mapping": {"cheese": 0, "pepperoni pizza": 1, "cheese pizza": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pepperoni pizza": "9", "cheese pizza": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"cheese pizza": "30", "pepperoni pizza": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"cheese pizza": "50", "pepperoni pizza": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5000", "terms": {"cheese pizza": "40", "pepperoni pizza": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cheese pizzas\n- y: Number of pepperoni pizzas\n\nObjective:\n- The pizza store aims to maximize its profit. The profit per cheese pizza is $7 and the profit per pepperoni pizza is $9. Therefore, the objective function is: Maximize 7x + 9y\n\nConstraints:\n- The store has 3000 grams of flour available, and each cheese pizza requires 30 grams and each pepperoni pizza requires 40 grams. This leads to the constraint: 30x + 40y <= 3000.\n- The store has 4000 grams of cheese available, and each cheese pizza requires 50 grams and each pepperoni pizza requires 20 grams. This leads to the constraint: 50x + 20y <= 4000.\n- The store has 5000 grams of sauce available, and each cheese pizza requires 40 grams and each pepperoni pizza requires 30 grams. This leads to the constraint: 40x + 30y <= 5000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 9y\nConstraints:\n30x + 40y <= 3000\n50x + 20y <= 4000\n40x + 30y <= 5000", "canonical": {"objective": [-7.0, -9.0], "constraints": [[30.0, 40.0, 3000.0], [50.0, 20.0, 4000.0], [40.0, 30.0, 5000.0]]}, "solution": {"x": 68, "y": 24}, "pseudo_model": "\nDecision Variables:\n- Number of cheese pizzas made: CheesePizza\n- Number of pepperoni pizzas made: PepperoniPizza\n\nConstraints:\n- Flour constraint (3000 grams available):\n  30 * CheesePizza + 40 * PepperoniPizza <= 3000\n- Cheese constraint (4000 grams available):\n  50 * CheesePizza + 20 * PepperoniPizza <= 4000\n- Sauce constraint (5000 grams available):\n  40 * CheesePizza + 30 * PepperoniPizza <= 5000\n\nObjective:\n- Maximize profit (7 dollars per cheese pizza, 9 dollars per pepperoni pizza):\n  7 * CheesePizza + 9 * PepperoniPizza\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCheesePizza = intvar(0, 999999999)  # Number of cheese pizzas made\nPepperoniPizza = intvar(0, 999999999)  # Number of pepperoni pizzas made\n\n# Constraints\nm = Model()\n\n# Flour constraint (3000 grams available):\nm += 30 * CheesePizza + 40 * PepperoniPizza <= 3000\n# Cheese constraint (4000 grams available):\nm += 50 * CheesePizza + 20 * PepperoniPizza <= 4000\n# Sauce constraint (5000 grams available):\nm += 40 * CheesePizza + 30 * PepperoniPizza <= 5000\n\n# Objective\n# Maximize profit (7 dollars per cheese pizza, 9 dollars per pepperoni pizza):\nm.maximize(7 * CheesePizza + 9 * PepperoniPizza)\n", "entities": [{"start": 20, "end": 26, "word": "cheese", "entity_group": "VAR", "score": 0.9994577735353739}, {"start": 31, "end": 46, "word": "pepperoni pizza", "entity_group": "VAR", "score": 0.9999828239639292}, {"start": 54, "end": 66, "word": "cheese pizza", "entity_group": "VAR", "score": 0.9999838223981309}, {"start": 76, "end": 78, "word": "30", "entity_group": "PARAM", "score": 0.9997070499130106}, {"start": 96, "end": 98, "word": "50", "entity_group": "PARAM", "score": 0.9997351142254599}, {"start": 121, "end": 123, "word": "40", "entity_group": "PARAM", "score": 0.99960629386106}, {"start": 146, "end": 161, "word": "pepperoni pizza", "entity_group": "VAR", "score": 0.9999814086901225}, {"start": 171, "end": 173, "word": "40", "entity_group": "PARAM", "score": 0.999723381904597}, {"start": 191, "end": 193, "word": "20", "entity_group": "PARAM", "score": 0.9997351142254601}, {"start": 216, "end": 218, "word": "30", "entity_group": "PARAM", "score": 0.9994131960623419}, {"start": 250, "end": 259, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990190166214985}, {"start": 260, "end": 264, "word": "3000", "entity_group": "LIMIT", "score": 0.999401828524461}, {"start": 282, "end": 286, "word": "4000", "entity_group": "LIMIT", "score": 0.9997548286711876}, {"start": 309, "end": 313, "word": "5000", "entity_group": "LIMIT", "score": 0.9992543342616597}, {"start": 338, "end": 344, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999429826480323}, {"start": 349, "end": 361, "word": "cheese pizza", "entity_group": "VAR", "score": 0.9999474008060448}, {"start": 367, "end": 368, "word": "7", "entity_group": "PARAM", "score": 0.9996087423804288}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384723754808}, {"start": 388, "end": 403, "word": "pepperoni pizza", "entity_group": "VAR", "score": 0.9999447615205547}, {"start": 409, "end": 410, "word": "9", "entity_group": "PARAM", "score": 0.9996735462278153}, {"start": 448, "end": 456, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 457, "end": 463, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-288455684", "document": "A smoothie store makes peanut butter and almond butter smoothies. Both require almond milk and protein powder. Each peanut butter smoothie requires 3 units of almond milk and 1 unit of protein powder. Each almond butter smoothie requires 2 units of almond milk and 1.5 units of protein powder. The store has a total of 50 units of almond milk and 40 units of protein powder available. If the profit per peanut butter smoothie is $5 and the profit per almond butter smoothie is $4, how many of each should be made to maximize profit?", "order_mapping": {"peanut butter": 0, "almond butter smoothies": 1, "peanut butter smoothie": 0, "almond butter smoothie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peanut butter smoothie": "5", "almond butter smoothie": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "50", "terms": {"peanut butter smoothie": "3", "almond butter smoothie": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "40", "terms": {"peanut butter smoothie": "1", "almond butter smoothie": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of peanut butter smoothies\n- y: Number of almond butter smoothies\n\nObjective:\n- The store aims to maximize its profit. The profit per peanut butter smoothie is $5 and the profit per almond butter smoothie is $4. Therefore, the objective function is: Maximize 5x + 4y\n\nConstraints:\n- The store has a total of 50 units of almond milk available. Each peanut butter smoothie requires 3 units of almond milk and each almond butter smoothie requires 2 units of almond milk. This leads to the constraint: 3x + 2y <= 50.\n- The store has a total of 40 units of protein powder available. Each peanut butter smoothie requires 1 unit of protein powder and each almond butter smoothie requires 1.5 units of protein powder. This results in the constraint: x + 1.5y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 4y\nConstraints:\n3x + 2y <= 50\nx + 1.5y <= 40", "canonical": {"objective": [-5.0, -4.0], "constraints": [[3.0, 2.0, 50.0], [1.0, 1.5, 40.0]]}, "solution": {"x": 0, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of peanut butter smoothies made: PeanutButterSmoothies\n- Number of almond butter smoothies made: AlmondButterSmoothies\n\nConstraints:\n- Almond milk usage should not exceed 50 units:\n  3 * PeanutButterSmoothies + 2 * AlmondButterSmoothies <= 50\n- Protein powder usage should not exceed 40 units:\n  1 * PeanutButterSmoothies + 1.5 * AlmondButterSmoothies <= 40\n\nObjective:\n- Maximize profit ($5 profit per peanut butter smoothie and $4 profit per almond butter smoothie):\n  5 * PeanutButterSmoothies + 4 * AlmondButterSmoothies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeanutButterSmoothies = intvar(0, 999999999)  # Number of peanut butter smoothies made\nAlmondButterSmoothies = intvar(0, 999999999)  # Number of almond butter smoothies made\n\n# Constraints\nm = Model()\n\n# Almond milk constraint (50 units available):\n# Each peanut butter smoothie requires 3 units of almond milk and each almond butter smoothie requires 2 units\nm += 3 * PeanutButterSmoothies + 2 * AlmondButterSmoothies <= 50\n\n# Protein powder constraint (40 units available):\n# Each peanut butter smoothie requires 1 unit of protein powder and each almond butter smoothie requires 1.5 units\nm += 1 * PeanutButterSmoothies + 1.5 * AlmondButterSmoothies <= 40\n\n# Objective\n# Maximize profit ($5 per peanut butter smoothie and $4 per almond butter smoothie):\nm.maximize(5 * PeanutButterSmoothies + 4 * AlmondButterSmoothies)\n", "entities": [{"start": 23, "end": 36, "word": "peanut butter", "entity_group": "VAR", "score": 0.9998348709152459}, {"start": 41, "end": 64, "word": "almond butter smoothies", "entity_group": "VAR", "score": 0.9975262374264569}, {"start": 118, "end": 140, "word": "peanut butter smoothie", "entity_group": "VAR", "score": 0.9984173953583384}, {"start": 150, "end": 151, "word": "3", "entity_group": "PARAM", "score": 0.9996774039402014}, {"start": 177, "end": 178, "word": "1", "entity_group": "PARAM", "score": 0.999355593837101}, {"start": 209, "end": 231, "word": "almond butter smoothie", "entity_group": "VAR", "score": 0.9989102662334921}, {"start": 241, "end": 242, "word": "2", "entity_group": "PARAM", "score": 0.9996772925385147}, {"start": 268, "end": 271, "word": "1.5", "entity_group": "PARAM", "score": 0.999643471523271}, {"start": 323, "end": 325, "word": "50", "entity_group": "LIMIT", "score": 0.9997662698333525}, {"start": 351, "end": 353, "word": "40", "entity_group": "LIMIT", "score": 0.9996848909426284}, {"start": 378, "end": 387, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991915528691659}, {"start": 397, "end": 403, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999714334582026}, {"start": 408, "end": 430, "word": "peanut butter smoothie", "entity_group": "VAR", "score": 0.9978843315500449}, {"start": 436, "end": 437, "word": "5", "entity_group": "PARAM", "score": 0.9991928279525361}, {"start": 446, "end": 452, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999268065010742}, {"start": 457, "end": 479, "word": "almond butter smoothie", "entity_group": "VAR", "score": 0.9978808016991025}, {"start": 485, "end": 486, "word": "4", "entity_group": "PARAM", "score": 0.9993582363936818}, {"start": 524, "end": 532, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 533, "end": 539, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "2104626903", "document": "A Ferris wheel can take at most 250 people. A profit of $50 is made on each premium ticket and a profit of $30 is made on each regular ticket. There are a minimum of 50 premium tickets available. However, at least 3 times as many people prefer to buy regular tickets than premium tickets. How any of each ticket should be sold to maximize profit?", "order_mapping": {"premium ticket": 0, "regular ticket": 1, "premium tickets": 0, "regular tickets": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium ticket": "50", "regular ticket": "30"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "250", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "50", "var": "premium tickets", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "3", "y_var": "premium tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium tickets sold\n- y: Number of regular tickets sold\n\nObjective:\n- The objective is to maximize the profit. Each premium ticket yields a profit of $50 and each regular ticket yields a profit of $30. Therefore, the objective function is: Maximize 50x + 30y\n\nConstraints:\n- The Ferris wheel can take at most 250 people, so the constraint is: x + y <= 250.\n- There must be a minimum of 50 premium tickets available, leading to the constraint: x >= 50.\n- At least 3 times as many people prefer to buy regular tickets than premium tickets, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 30y\nConstraints:\nx + y <= 250\nx >= 50\ny >= 3x", "canonical": {"objective": [-50.0, -30.0], "constraints": [[1.0, 1.0, 250.0], [-1.0, 0.0, -50.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 62, "y": 188}, "pseudo_model": "\nDecision Variables:\n- Number of premium tickets sold: PremiumTickets\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 250:\n  PremiumTickets + RegularTickets <= 250\n- At least 50 premium tickets must be sold:\n  PremiumTickets >= 50\n- The number of regular tickets sold must be at least 3 times the number of premium tickets sold:\n  RegularTickets >= 3 * PremiumTickets\n\nObjective:\n- Maximize profit ($50 profit on each premium ticket and $30 profit on each regular ticket):\n  50 * PremiumTickets + 30 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumTickets = intvar(0, 999999999)  # Number of premium tickets sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# The Ferris wheel can take at most 250 people:\nm += PremiumTickets + RegularTickets <= 250\n# There are a minimum of 50 premium tickets available:\nm += PremiumTickets >= 50\n# At least 3 times as many people prefer to buy regular tickets than premium tickets:\nm += RegularTickets >= 3 * PremiumTickets\n\n# Objective\n# Maximize profit ($50 profit on each premium ticket and $30 profit on each regular ticket):\nm.maximize(50 * PremiumTickets + 30 * RegularTickets)\n", "entities": [{"start": 24, "end": 31, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99897667389752}, {"start": 32, "end": 35, "word": "250", "entity_group": "LIMIT", "score": 0.9995245408624407}, {"start": 47, "end": 53, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999404892614332}, {"start": 59, "end": 61, "word": "50", "entity_group": "PARAM", "score": 0.9995301348835219}, {"start": 78, "end": 92, "word": "premium ticket", "entity_group": "VAR", "score": 0.9997956787412473}, {"start": 99, "end": 105, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999264122667018}, {"start": 111, "end": 113, "word": "30", "entity_group": "PARAM", "score": 0.9994289450330299}, {"start": 130, "end": 144, "word": "regular ticket", "entity_group": "VAR", "score": 0.9999052071704184}, {"start": 159, "end": 166, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9957252736396967}, {"start": 170, "end": 172, "word": "50", "entity_group": "LIMIT", "score": 0.9985883367801826}, {"start": 173, "end": 188, "word": "premium tickets", "entity_group": "VAR", "score": 0.9998672619789715}, {"start": 211, "end": 219, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997788161595777}, {"start": 220, "end": 221, "word": "3", "entity_group": "PARAM", "score": 0.9981689671412616}, {"start": 257, "end": 272, "word": "regular tickets", "entity_group": "VAR", "score": 0.9997464448781332}, {"start": 278, "end": 293, "word": "premium tickets", "entity_group": "VAR", "score": 0.9998173766192456}, {"start": 337, "end": 345, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800938976}, {"start": 346, "end": 352, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999914730623649}]}
{"doc_id": "-720131595", "document": "A jewelry company makes sapphire and ruby rings. The sapphire rings are made by a team who cam make at most 10 sapphire rings per day. The ruby rings are made by a team who can make at most 15 ruby rings per day. All rings have to be approved by a master jeweler and he can check at most 15 rings of either type per day. If the profit per sapphire ring is $500 and the profit per ruby ring is $400, how many of each should the jewelry company make to maximize profit?", "order_mapping": {"sapphire": 0, "ruby rings": 1, "sapphire rings": 0, "sapphire ring": 0, "ruby ring": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"ruby ring": "400", "sapphire ring": "500"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "10", "var": "sapphire rings", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "15", "var": "ruby rings", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "15", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sapphire rings\n- y: Number of ruby rings\n\nObjective:\n- The jewelry company aims to maximize its profit. The profit per sapphire ring is $500 and the profit per ruby ring is $400. Therefore, the objective function is: Maximize 500x + 400y\n\nConstraints:\n- The team can make at most 10 sapphire rings per day, leading to the constraint: x <= 10.\n- The team can make at most 15 ruby rings per day, leading to the constraint: y <= 15.\n- The master jeweler can check at most 15 rings of either type per day, resulting in the constraint: x + y <= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 400y\nConstraints:\nx <= 10\ny <= 15\nx + y <= 15", "canonical": {"objective": [-500.0, -400.0], "constraints": [[1.0, 0.0, 10.0], [0.0, 1.0, 15.0], [1.0, 1.0, 15.0]]}, "solution": {"x": 10, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of sapphire rings made per day: SapphireRings\n- Number of ruby rings made per day: RubyRings\n\nConstraints:\n- The sapphire ring team can make at most 10 sapphire rings per day:\n  SapphireRings <= 10\n- The ruby ring team can make at most 15 ruby rings per day:\n  RubyRings <= 15\n- The master jeweler can check at most 15 rings of either type per day:\n  SapphireRings + RubyRings <= 15\n\nObjective:\n- Maximize profit ($500 per sapphire ring, $400 per ruby ring):\n  500 * SapphireRings + 400 * RubyRings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSapphireRings = intvar(0, 999999999)  # Number of sapphire rings made per day\nRubyRings = intvar(0, 999999999)  # Number of ruby rings made per day\n\n# Constraints\nm = Model()\n\n# The sapphire ring team can make at most 10 sapphire rings per day:\nm += SapphireRings <= 10\n# The ruby ring team can make at most 15 ruby rings per day:\nm += RubyRings <= 15\n# The master jeweler can check at most 15 rings of either type per day:\nm += SapphireRings + RubyRings <= 15\n\n# Objective\n# Maximize profit ($500 per sapphire ring, $400 per ruby ring):\nm.maximize(500 * SapphireRings + 400 * RubyRings)\n", "entities": [{"start": 24, "end": 32, "word": "sapphire", "entity_group": "VAR", "score": 0.9991803221202886}, {"start": 37, "end": 47, "word": "ruby rings", "entity_group": "VAR", "score": 0.9999843166720747}, {"start": 54, "end": 68, "word": "sapphire rings", "entity_group": "VAR", "score": 0.9999853690363302}, {"start": 101, "end": 108, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998492047186626}, {"start": 109, "end": 111, "word": "10", "entity_group": "LIMIT", "score": 0.9995749114841349}, {"start": 112, "end": 126, "word": "sapphire rings", "entity_group": "VAR", "score": 0.9999627029673377}, {"start": 141, "end": 151, "word": "ruby rings", "entity_group": "VAR", "score": 0.999979672912248}, {"start": 184, "end": 191, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985735613148635}, {"start": 192, "end": 194, "word": "15", "entity_group": "LIMIT", "score": 0.9995749116964184}, {"start": 195, "end": 205, "word": "ruby rings", "entity_group": "VAR", "score": 0.9999440714921235}, {"start": 283, "end": 290, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986153735242198}, {"start": 291, "end": 293, "word": "15", "entity_group": "LIMIT", "score": 0.9996957969074194}, {"start": 332, "end": 338, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999022397507011}, {"start": 343, "end": 356, "word": "sapphire ring", "entity_group": "VAR", "score": 0.9999474185558395}, {"start": 362, "end": 365, "word": "500", "entity_group": "PARAM", "score": 0.9996126246185217}, {"start": 374, "end": 380, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999360379229606}, {"start": 385, "end": 394, "word": "ruby ring", "entity_group": "VAR", "score": 0.9999447164715627}, {"start": 400, "end": 403, "word": "400", "entity_group": "PARAM", "score": 0.9996757786827883}, {"start": 458, "end": 466, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993350363977429}, {"start": 467, "end": 473, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997873425507654}]}
{"doc_id": "-2106263334", "document": "A pizza palace is going to purchase pizza ovens. There are two models available. Model A can make 10 pizzas per cycle, requires 80 grams of fuel per cycle, and costs $10000. Model B can make 8 pizzas per cycle, requires 70 grams of fuel per cycle, and costs $8000. The pizza palace must make at least 100 pizzas per cycle and use at most 1000 grams of fuel per cycle. How many of each model pizza oven should they purchase to minimize costs?", "order_mapping": {"Model A": 0, "Model B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Model A": "10000", "Model B": "8000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"Model A": "10", "Model B": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1000", "terms": {"Model A": "80", "Model B": "70"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Model A pizza ovens to purchase\n- y: Number of Model B pizza ovens to purchase\n\nObjective:\n- The pizza palace aims to minimize costs. Model A costs $10000 and Model B costs $8000. Therefore, the objective function is: Minimize 10000x + 8000y\n\nConstraints:\n- The pizza palace must make at least 100 pizzas per cycle, leading to the constraint: 10x + 8y >= 100.\n- The pizza palace must use at most 1000 grams of fuel per cycle, resulting in the constraint: 80x + 70y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 10000x + 8000y\nConstraints:\n10x + 8y >= 100\n80x + 70y <= 1000", "canonical": {"objective": [10000.0, 8000.0], "constraints": [[-10.0, -8.0, -100.0], [80.0, 70.0, 1000.0]]}, "solution": {"x": 2, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of Model A pizza ovens purchased: ModelA\n- Number of Model B pizza ovens purchased: ModelB\n\nConstraints:\n- Must make at least 100 pizzas per cycle:\n  10 * ModelA + 8 * ModelB >= 100\n- Must use at most 1000 grams of fuel per cycle:\n  80 * ModelA + 70 * ModelB <= 1000\n\nObjective:\n- Minimize costs ($10000 for Model A, $8000 for Model B):\n  10000 * ModelA + 8000 * ModelB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nModelA = intvar(0, 999999999)  # Number of Model A pizza ovens purchased\nModelB = intvar(0, 999999999)  # Number of Model B pizza ovens purchased\n\n# Constraints\nm = Model()\n\n# The pizza palace must make at least 100 pizzas per cycle:\nm += 10 * ModelA + 8 * ModelB >= 100\n# The pizza palace must use at most 1000 grams of fuel per cycle:\nm += 80 * ModelA + 70 * ModelB <= 1000\n\n# Objective\n# Minimize costs ($10000 for Model A, $8000 for Model B):\nm.minimize(10000 * ModelA + 8000 * ModelB)\n", "entities": [{"start": 83, "end": 90, "word": "Model A", "entity_group": "VAR", "score": 0.9999703922254267}, {"start": 100, "end": 102, "word": "10", "entity_group": "PARAM", "score": 0.9996976092514651}, {"start": 131, "end": 133, "word": "80", "entity_group": "PARAM", "score": 0.9995537013190665}, {"start": 164, "end": 169, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990881529867568}, {"start": 172, "end": 177, "word": "10000", "entity_group": "PARAM", "score": 0.9997428570359588}, {"start": 180, "end": 187, "word": "Model B", "entity_group": "VAR", "score": 0.9999779078705751}, {"start": 197, "end": 198, "word": "8", "entity_group": "PARAM", "score": 0.9996698577517531}, {"start": 227, "end": 229, "word": "70", "entity_group": "PARAM", "score": 0.9995537013190653}, {"start": 260, "end": 265, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992836303594036}, {"start": 268, "end": 272, "word": "8000", "entity_group": "PARAM", "score": 0.999711760761456}, {"start": 302, "end": 310, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991020718718143}, {"start": 311, "end": 314, "word": "100", "entity_group": "LIMIT", "score": 0.9993437832552313}, {"start": 340, "end": 347, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989954722469669}, {"start": 348, "end": 352, "word": "1000", "entity_group": "LIMIT", "score": 0.9997273909124781}, {"start": 437, "end": 445, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9991669769812173}, {"start": 446, "end": 451, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990106270668563}]}
{"doc_id": "-1092558172", "document": "A breakfast place mixes two pancake mixes to get the perfect consistency. Mix A contains 10% sugar and 60% flour. Mix B contains 15% sugar and 50% flour. The final mixture needs at least 10 kg of sugar and 50 kg of flour. If the cost per kg of Mix A is $20 and the cost per kg of Mix B is $25, how many kg of each should the breakfast place buy to minimize costs?", "order_mapping": {"Mix A": 0, "Mix B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Mix A": "20", "Mix B": "25"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10", "terms": {"Mix A": "10%", "Mix B": "15%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"Mix A": "60%", "Mix B": "50%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of Mix A to buy\n- y: kg of Mix B to buy\n\nObjective:\n- The breakfast place aims to minimize costs. The cost per kg of Mix A is $20 and the cost per kg of Mix B is $25. Therefore, the objective function is: Minimize 20x + 25y\n\nConstraints:\n- The final mixture needs at least 10 kg of sugar, which can be represented as: 0.10x + 0.15y >= 10\n- The final mixture needs at least 50 kg of flour, which can be represented as: 0.60x + 0.50y >= 50\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 20x + 25y\nConstraints:\n0.10x + 0.15y >= 10\n0.60x + 0.50y >= 50", "canonical": {"objective": [20.0, 25.0], "constraints": [[-0.1, -0.15, -10.0], [-0.6, -0.5, -50.0]]}, "solution": {"x": 64, "y": 24}, "pseudo_model": "\nDecision Variables:\n- kg of Mix A bought: MixA\n- kg of Mix B bought: MixB\n\nConstraints:\n- At least 10 kg of sugar in the final mixture:\n  0.10 * MixA + 0.15 * MixB >= 10\n- At least 50 kg of flour in the final mixture:\n  0.60 * MixA + 0.50 * MixB >= 50\n\nObjective:\n- Minimize costs (20 dollars per kg of Mix A, 25 dollars per kg of Mix B):\n  20 * MixA + 25 * MixB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMixA = intvar(0, 999999999)  # kg of Mix A\nMixB = intvar(0, 999999999)  # kg of Mix B\n\n# Constraints\nm = Model()\n\n# The final mixture needs at least 10 kg of sugar:\nm += 0.10 * MixA + 0.15 * MixB >= 10\n# The final mixture needs at least 50 kg of flour:\nm += 0.60 * MixA + 0.50 * MixB >= 50\n\n# Objective\n# Minimize costs ($20 per kg of Mix A and $25 per kg of Mix B):\nm.minimize(20 * MixA + 25 * MixB)\n", "entities": [{"start": 75, "end": 80, "word": "Mix A", "entity_group": "VAR", "score": 0.9999216888675434}, {"start": 90, "end": 94, "word": "10 %", "entity_group": "PARAM", "score": 0.9851063053703353}, {"start": 105, "end": 109, "word": "60 %", "entity_group": "PARAM", "score": 0.993149489875096}, {"start": 118, "end": 123, "word": "Mix B", "entity_group": "VAR", "score": 0.9999279171089525}, {"start": 133, "end": 137, "word": "15 %", "entity_group": "PARAM", "score": 0.985069709496097}, {"start": 148, "end": 152, "word": "50 %", "entity_group": "PARAM", "score": 0.9935843837633107}, {"start": 185, "end": 193, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992205504876358}, {"start": 194, "end": 196, "word": "10", "entity_group": "LIMIT", "score": 0.9997552549831868}, {"start": 213, "end": 215, "word": "50", "entity_group": "LIMIT", "score": 0.9995627046455223}, {"start": 237, "end": 241, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9963659032275856}, {"start": 252, "end": 257, "word": "Mix A", "entity_group": "VAR", "score": 0.9996565746084184}, {"start": 263, "end": 265, "word": "20", "entity_group": "PARAM", "score": 0.9981905105783014}, {"start": 274, "end": 278, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9965688438611946}, {"start": 289, "end": 294, "word": "Mix B", "entity_group": "VAR", "score": 0.9996989294639808}, {"start": 300, "end": 302, "word": "25", "entity_group": "PARAM", "score": 0.9994885757492434}, {"start": 359, "end": 367, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994918992366651}, {"start": 368, "end": 373, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9974108858392561}]}
{"doc_id": "659209022", "document": "A gardener grows beans and peas in their 100 acre farm. The profit per acre of beans is $200 and the profit per acre of peas is $250. In addition, bug repellant must be used to grow both beans and peas. Per acre of beans, 12 liters of bug repellant are needed. Per acre of peas, 15 liters of bug repellant are needed. The gardener has available 1350 liters of bug repellant. How many of acres of each should the gardener grow to maximize profit?", "order_mapping": {"beans": 0, "peas": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"beans": "200", "peas": "250"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1350", "terms": {"beans": "12", "peas": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "in", "limit": "100", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of beans\n- y: Acres of peas\n\nObjective:\n- The gardener aims to maximize profit. The profit per acre of beans is $200 and the profit per acre of peas is $250. Therefore, the objective function is: Maximize 200x + 250y\n\nConstraints:\n- Bug repellant availability: 12 liters of bug repellant are needed per acre of beans and 15 liters per acre of peas. The total bug repellant available is 1350 liters, leading to the constraint: 12x + 15y <= 1350.\n- Farm size constraint: The gardener has a 100-acre farm, so the constraint is: x + y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 250y\nConstraints:\n12x + 15y <= 1350\nx + y <= 100", "canonical": {"objective": [-200.0, -250.0], "constraints": [[12.0, 15.0, 1350.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 0, "y": 90}, "pseudo_model": "\nDecision Variables:\n- Number of acres of beans grown: Beans\n- Number of acres of peas grown: Peas\n\nConstraints:\n- Total number of acres for beans and peas should not exceed 100:\n  Beans + Peas <= 100\n- Total bug repellant used for beans (12 liters per acre) and peas (15 liters per acre) should not exceed 1350 liters:\n  12 * Beans + 15 * Peas <= 1350\n\nObjective:\n- Maximize profit (200 dollars per acre of beans, 250 dollars per acre of peas):\n  200 * Beans + 250 * Peas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeans = intvar(0, 999999999)  # Number of acres of beans\nPeas = intvar(0, 999999999)  # Number of acres of peas\n\n# Constraints\nm = Model()\n\n# Total number of acres for beans and peas should not exceed 100:\nm += Beans + Peas <= 100\n# Total bug repellant used for beans (12 liters per acre) and peas (15 liters per acre) should not exceed 1350 liters:\nm += 12 * Beans + 15 * Peas <= 1350\n\n# Objective\n# Maximize profit (200 dollars per acre of beans, 250 dollars per acre of peas):\nm.maximize(200 * Beans + 250 * Peas)\n", "entities": [{"start": 17, "end": 22, "word": "beans", "entity_group": "VAR", "score": 0.9991975376673929}, {"start": 27, "end": 31, "word": "peas", "entity_group": "VAR", "score": 0.9991145821440638}, {"start": 32, "end": 34, "word": "in", "entity_group": "CONST_DIR", "score": 0.9376642367083453}, {"start": 41, "end": 44, "word": "100", "entity_group": "LIMIT", "score": 0.9995299027790882}, {"start": 61, "end": 67, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999594366107509}, {"start": 80, "end": 85, "word": "beans", "entity_group": "VAR", "score": 0.9992492814636466}, {"start": 91, "end": 94, "word": "200", "entity_group": "PARAM", "score": 0.9992430239354021}, {"start": 103, "end": 109, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999351204611809}, {"start": 122, "end": 126, "word": "peas", "entity_group": "VAR", "score": 0.9990795974408146}, {"start": 132, "end": 135, "word": "250", "entity_group": "PARAM", "score": 0.999530489050514}, {"start": 192, "end": 197, "word": "beans", "entity_group": "VAR", "score": 0.9996061093893176}, {"start": 202, "end": 206, "word": "peas", "entity_group": "VAR", "score": 0.999775203775404}, {"start": 221, "end": 226, "word": "beans", "entity_group": "VAR", "score": 0.9995410461307179}, {"start": 229, "end": 231, "word": "12", "entity_group": "PARAM", "score": 0.9997013701219071}, {"start": 281, "end": 285, "word": "peas", "entity_group": "VAR", "score": 0.9994028127650639}, {"start": 288, "end": 290, "word": "15", "entity_group": "PARAM", "score": 0.9997010846797444}, {"start": 345, "end": 354, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993034519672988}, {"start": 355, "end": 359, "word": "1350", "entity_group": "LIMIT", "score": 0.9991920194992381}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534735313}, {"start": 449, "end": 455, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728165}]}
{"doc_id": "-994230395", "document": "An aquarium feeds their large animals with smaller fish by making a mixture from two bags. Bag A contains 2 units of sardines and 3 units of anchovies per bag. Bag B contains 4 units of sardines and 1 unit of anchovies per bag. The mixture must contain at least 20 units of sardines and 25 units of anchovies. Bag A costs $4 per bag and Bag B costs $6 per bag. Formulate a LP to minimize cost for the mixture.", "order_mapping": {"Bag A": 0, "Bag B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Bag A": "4", "Bag B": "6"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"Bag A": "2", "Bag B": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "25", "terms": {"Bag A": "3", "Bag B": "1"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of A\n- y: Number of bags of B\n\nObjective:\n- The aquarium aims to minimize the cost for the mixture. Bag A costs $4 per bag and Bag B costs $6 per bag. Therefore, the objective function is: Minimize 4x + 6y\n\nConstraints:\n- The mixture must contain at least 20 units of sardines, leading to the constraint: 2x + 4y >= 20\n- The mixture must contain at least 25 units of anchovies, leading to the constraint: 3x + y >= 25\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4x + 6y\nConstraints:\n2x + 4y >= 20\n3x + y >= 25", "canonical": {"objective": [4.0, 6.0], "constraints": [[-2.0, -4.0, -20.0], [-3.0, -1.0, -25.0]]}, "solution": {"x": 8, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of Bag A purchased: BagA\n- Number of Bag B purchased: BagB\n\nConstraints:\n- Mixture must contain at least 20 units of sardines:\n  2 * BagA + 4 * BagB >= 20\n- Mixture must contain at least 25 units of anchovies:\n  3 * BagA + 1 * BagB >= 25\n\nObjective:\n- Minimize cost (Bag A costs $4 per bag and Bag B costs $6 per bag):\n  4 * BagA + 6 * BagB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBagA = intvar(0, 999999999)  # Number of Bag A purchased\nBagB = intvar(0, 999999999)  # Number of Bag B purchased\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 20 units of sardines:\nm += 2 * BagA + 4 * BagB >= 20\n# The mixture must contain at least 25 units of anchovies:\nm += 3 * BagA + 1 * BagB >= 25\n\n# Objective\n# Minimize cost (Bag A costs $4 per bag and Bag B costs $6 per bag):\nm.minimize(4 * BagA + 6 * BagB)\n", "entities": [{"start": 92, "end": 97, "word": "Bag A", "entity_group": "VAR", "score": 0.9999307132988599}, {"start": 107, "end": 108, "word": "2", "entity_group": "PARAM", "score": 0.999706182703179}, {"start": 131, "end": 132, "word": "3", "entity_group": "PARAM", "score": 0.9997066747737394}, {"start": 162, "end": 167, "word": "Bag B", "entity_group": "VAR", "score": 0.9999005201337715}, {"start": 177, "end": 178, "word": "4", "entity_group": "PARAM", "score": 0.9996843695849529}, {"start": 201, "end": 202, "word": "1", "entity_group": "PARAM", "score": 0.999639634815648}, {"start": 256, "end": 264, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991215339820411}, {"start": 265, "end": 267, "word": "20", "entity_group": "LIMIT", "score": 0.9997379607746718}, {"start": 290, "end": 292, "word": "25", "entity_group": "LIMIT", "score": 0.9996227164478995}, {"start": 314, "end": 319, "word": "Bag A", "entity_group": "VAR", "score": 0.9999066753370018}, {"start": 320, "end": 325, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.99966345803887}, {"start": 328, "end": 329, "word": "4", "entity_group": "PARAM", "score": 0.9996262014152767}, {"start": 342, "end": 347, "word": "Bag B", "entity_group": "VAR", "score": 0.9999369161978425}, {"start": 348, "end": 353, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994570352618669}, {"start": 356, "end": 357, "word": "6", "entity_group": "PARAM", "score": 0.9994506405807474}, {"start": 386, "end": 394, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987958475605009}, {"start": 395, "end": 399, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9766131275723999}]}
{"doc_id": "-336089912", "document": "You need to buy shelves to store your action figures. A small shelf takes 3 sq ft of space and costs $50. A large shelf takes 6 sq ft and costs $80. You have 100 sq ft of space available and a budget of $1250. If the small shelf can hold 20 action figures and a large shelf can hold 30 action figures, how many of each should you buy to maximize the number of action figures you can store.", "order_mapping": {"small shelf": 0, "large shelf": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of action figures", "terms": {"small shelf": "20", "large shelf": "30"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"small shelf": "3", "large shelf": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "1250", "terms": {"small shelf": "50", "large shelf": "80"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small shelves\n- y: Number of large shelves\n\nObjective:\n- The goal is to maximize the number of action figures that can be stored. A small shelf can hold 20 action figures and a large shelf can hold 30 action figures. Therefore, the objective function is: Maximize 20x + 30y\n\nConstraints:\n- The total space available is 100 sq ft, so the constraint is: 3x + 6y <= 100.\n- The budget available is $1250, leading to the constraint: 50x + 80y <= 1250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 30y\nConstraints:\n3x + 6y <= 100\n50x + 80y <= 1250", "canonical": {"objective": [-20.0, -30.0], "constraints": [[3.0, 6.0, 100.0], [50.0, 80.0, 1250.0]]}, "solution": {"x": 25, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of small shelves: SmallShelf\n- Number of large shelves: LargeShelf\n\nConstraints:\n- Space constraint for shelves within 100 sq ft:\n  3 * SmallShelf + 6 * LargeShelf <= 100\n- Budget constraint within $1250:\n  50 * SmallShelf + 80 * LargeShelf <= 1250\n\nObjective:\n- Maximize the total number of action figures stored:\n  20 * SmallShelf + 30 * LargeShelf\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallShelf = intvar(0, 999999999)  # Number of small shelves\nLargeShelf = intvar(0, 999999999)  # Number of large shelves\n\n# Constraints\nm = Model()\n\n# Space constraint: 3 sq ft for small shelf and 6 sq ft for large shelf, total available space is 100 sq ft\nm += 3 * SmallShelf + 6 * LargeShelf <= 100\n# Budget constraint: $50 for small shelf and $80 for large shelf, total budget is $1250\nm += 50 * SmallShelf + 80 * LargeShelf <= 1250\n\n# Objective\n# Maximize the number of action figures stored: 20 action figures per small shelf and 30 per large shelf\nm.maximize(20 * SmallShelf + 30 * LargeShelf)\n", "entities": [{"start": 57, "end": 68, "word": "small shelf", "entity_group": "VAR", "score": 0.9999806916649019}, {"start": 75, "end": 76, "word": "3", "entity_group": "PARAM", "score": 0.9996315978945286}, {"start": 104, "end": 106, "word": "50", "entity_group": "PARAM", "score": 0.9997227863820056}, {"start": 111, "end": 122, "word": "large shelf", "entity_group": "VAR", "score": 0.9999803448515049}, {"start": 129, "end": 130, "word": "6", "entity_group": "PARAM", "score": 0.9996744483552936}, {"start": 149, "end": 151, "word": "80", "entity_group": "PARAM", "score": 0.9992111248555701}, {"start": 163, "end": 166, "word": "100", "entity_group": "LIMIT", "score": 0.9997115652728148}, {"start": 182, "end": 191, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977580128293982}, {"start": 198, "end": 204, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9881179737677398}, {"start": 210, "end": 214, "word": "1250", "entity_group": "LIMIT", "score": 0.9995082028742361}, {"start": 224, "end": 235, "word": "small shelf", "entity_group": "VAR", "score": 0.9999819910700531}, {"start": 245, "end": 247, "word": "20", "entity_group": "PARAM", "score": 0.9995555853740873}, {"start": 248, "end": 262, "word": "action figures", "entity_group": "OBJ_NAME", "score": 0.9811279238381145}, {"start": 269, "end": 280, "word": "large shelf", "entity_group": "VAR", "score": 0.9999322306792777}, {"start": 290, "end": 292, "word": "30", "entity_group": "PARAM", "score": 0.9994031060003515}, {"start": 293, "end": 307, "word": "action figures", "entity_group": "OBJ_NAME", "score": 0.9797499627783651}, {"start": 345, "end": 353, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996184508810916}, {"start": 358, "end": 382, "word": "number of action figures", "entity_group": "OBJ_NAME", "score": 0.9722069356773558}]}
{"doc_id": "-738331979", "document": "Hudson has 55 acres to grow daisies and peonies. Hudson must use plant nutrition to feed the flowers to ensure the flowers grow. Daisies require 4.5 kg of plant nutrition per acre while peonies require 7 kg of plant nutrition per acre. Due to the high cost of plant nutrition, Hudson wants to use at most 200 kg of plant nutrition. If the profit per acre of daisies is $150 and the profit per acre of peonies is $180, how many acres of each should Hudson grow to maximize profit?", "order_mapping": {"daisies": 0, "peonies": 1, "Daisies": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"daisies": "150", "peonies": "180"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "55", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "200", "terms": {"Daisies": "4.5", "peonies": "7"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of daisies\n- y: Acres of peonies\n\nObjective:\n- Hudson wants to maximize profit. The profit per acre of daisies is $150 and the profit per acre of peonies is $180. Therefore, the objective function is: Maximize 150x + 180y\n\nConstraints:\n- Hudson has 55 acres available for growing flowers, leading to the constraint: x + y <= 55.\n- Hudson wants to use at most 200 kg of plant nutrition. Daisies require 4.5 kg of plant nutrition per acre and peonies require 7 kg of plant nutrition per acre. This results in the constraint: 4.5x + 7y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 180y\nConstraints:\nx + y <= 55\n4.5x + 7y <= 200", "canonical": {"objective": [-150.0, -180.0], "constraints": [[1.0, 1.0, 55.0], [4.5, 7.0, 200.0]]}, "solution": {"x": 44, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of acres for daisies: Daisies\n- Number of acres for peonies: Peonies\n\nConstraints:\n- Total acres used should not exceed 55:\n  Daisies + Peonies <= 55\n- Total plant nutrition used should not exceed 200 kg (4.5 kg per acre for daisies, 7 kg per acre for peonies):\n  4.5 * Daisies + 7 * Peonies <= 200\n\nObjective:\n- Maximize profit (150 dollars per acre for daisies, 180 dollars per acre for peonies):\n  150 * Daisies + 180 * Peonies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaisies = intvar(0, 999999999)  # Number of acres for daisies\nPeonies = intvar(0, 999999999)  # Number of acres for peonies\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 55:\nm += Daisies + Peonies <= 55\n# Total plant nutrition used should not exceed 200 kg (4.5 kg per acre for daisies, 7 kg per acre for peonies):\nm += 4.5 * Daisies + 7 * Peonies <= 200\n\n# Objective\n# Maximize profit (150 dollars per acre for daisies, 180 dollars per acre for peonies):\nm.maximize(150 * Daisies + 180 * Peonies)\n", "entities": [{"start": 7, "end": 10, "word": "has", "entity_group": "CONST_DIR", "score": 0.9937663892942609}, {"start": 11, "end": 13, "word": "55", "entity_group": "LIMIT", "score": 0.9988205413198048}, {"start": 28, "end": 35, "word": "daisies", "entity_group": "VAR", "score": 0.9990083016767927}, {"start": 40, "end": 47, "word": "peonies", "entity_group": "VAR", "score": 0.9996306922292953}, {"start": 131, "end": 138, "word": "Daisies", "entity_group": "VAR", "score": 0.9992267588593828}, {"start": 147, "end": 150, "word": "4.5", "entity_group": "PARAM", "score": 0.9996843496332916}, {"start": 188, "end": 195, "word": "peonies", "entity_group": "VAR", "score": 0.9992864732691706}, {"start": 204, "end": 205, "word": "7", "entity_group": "PARAM", "score": 0.99963596102458}, {"start": 301, "end": 308, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991464825279186}, {"start": 309, "end": 312, "word": "200", "entity_group": "LIMIT", "score": 0.9994582040110184}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998530945525478}, {"start": 363, "end": 370, "word": "daisies", "entity_group": "VAR", "score": 0.9994952128906841}, {"start": 376, "end": 379, "word": "150", "entity_group": "PARAM", "score": 0.9992430237606273}, {"start": 388, "end": 394, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713114}, {"start": 407, "end": 414, "word": "peonies", "entity_group": "VAR", "score": 0.9994301095794482}, {"start": 420, "end": 423, "word": "180", "entity_group": "PARAM", "score": 0.999594144629271}, {"start": 471, "end": 479, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999684363917098}, {"start": 480, "end": 486, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999142095129044}]}
{"doc_id": "-195931847", "document": "Vitamin A and vitamin B can be obtained in two supplement drinks. One is carrot juice and costs $3.5 per serving. The other is lemon juice and costs $6 per serving. One serving of carrot juice contains 8 units of vitamin A and 3 units of vitamin B. One serving of lemon juice contains 3 units of vitamin A and 6 units of vitamin B. In a day, it is recommended to get a minimum of 25 units of vitamin A and vitamin B each. Find the optimal mix of these supplement drinks to minimize cost.", "order_mapping": {"carrot juice": 0, "lemon juice": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"carrot juice": "3.5", "lemon juice": "6"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "25", "terms": {"carrot juice": "8", "lemon juice": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "25", "terms": {"carrot juice": "3", "lemon juice": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: servings of carrot juice\n- y: servings of lemon juice\n\nObjective:\n- The goal is to minimize the cost of the supplement drinks. The cost of one serving of carrot juice is $3.5 and the cost of one serving of lemon juice is $6. Therefore, the objective function is: Minimize 3.5x + 6y\n\nConstraints:\n- The minimum recommended daily intake of vitamin A is 25 units, which can be obtained from 8 units of vitamin A in carrot juice and 3 units of vitamin A in lemon juice. This leads to the constraint: 8x + 3y >= 25.\n- Similarly, the minimum recommended daily intake of vitamin B is 25 units, which can be obtained from 3 units of vitamin B in carrot juice and 6 units of vitamin B in lemon juice. This leads to the constraint: 3x + 6y >= 25.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3.5x + 6y\nConstraints:\n8x + 3y >= 25\n3x + 6y >= 25", "canonical": {"objective": [3.5, 6.0], "constraints": [[-8.0, -3.0, -25.0], [-3.0, -6.0, -25.0]]}, "solution": {"x": 3, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of servings of carrot juice: CarrotJuice\n- Number of servings of lemon juice: LemonJuice\n\nConstraints:\n- To meet the minimum requirement of 25 units of vitamin A:\n  8 * CarrotJuice + 3 * LemonJuice >= 25\n- To meet the minimum requirement of 25 units of vitamin B:\n  3 * CarrotJuice + 6 * LemonJuice >= 25\n\nObjective:\n- Minimize the total cost of the supplement drinks:\n  3.5 * CarrotJuice + 6 * LemonJuice\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrotJuice = intvar(0, 999999999)  # Number of servings of carrot juice\nLemonJuice = intvar(0, 999999999)  # Number of servings of lemon juice\n\n# Constraints\nm = Model()\n\n# Minimum of 25 units of vitamin A required:\nm += 8 * CarrotJuice + 3 * LemonJuice >= 25\n# Minimum of 25 units of vitamin B required:\nm += 3 * CarrotJuice + 6 * LemonJuice >= 25\n\n# Objective\n# Minimize cost (Carrot juice costs $3.5 per serving, Lemon juice costs $6 per serving):\nm.minimize(3.5 * CarrotJuice + 6 * LemonJuice)\n", "entities": [{"start": 74, "end": 86, "word": "carrot juice", "entity_group": "VAR", "score": 0.9999696762644997}, {"start": 91, "end": 96, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990002370451081}, {"start": 99, "end": 102, "word": "3.5", "entity_group": "PARAM", "score": 0.9991789404165724}, {"start": 130, "end": 141, "word": "lemon juice", "entity_group": "VAR", "score": 0.9999626086724798}, {"start": 146, "end": 151, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996745186834582}, {"start": 154, "end": 155, "word": "6", "entity_group": "PARAM", "score": 0.9990681558325909}, {"start": 185, "end": 197, "word": "carrot juice", "entity_group": "VAR", "score": 0.9999736178471856}, {"start": 207, "end": 208, "word": "8", "entity_group": "PARAM", "score": 0.9996177878750142}, {"start": 232, "end": 233, "word": "3", "entity_group": "PARAM", "score": 0.9996896359689309}, {"start": 269, "end": 280, "word": "lemon juice", "entity_group": "VAR", "score": 0.9999312599362533}, {"start": 290, "end": 291, "word": "3", "entity_group": "PARAM", "score": 0.9996178013691729}, {"start": 315, "end": 316, "word": "6", "entity_group": "PARAM", "score": 0.9995420658466694}, {"start": 375, "end": 382, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9951987637277898}, {"start": 386, "end": 388, "word": "25", "entity_group": "LIMIT", "score": 0.9997336301430125}, {"start": 480, "end": 488, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.997771561657525}, {"start": 489, "end": 493, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9976942972675171}]}
{"doc_id": "-1323858757", "document": "A clothing company makes flight jackets and denim jackets in their factory. A different team produces each kind of jacket and each team has a different maximum production rate: 10 flight jackets per day and 25 denim jackets per day respectively. Both teams require the use of a sewing machine and this machine can process at most 30 jackets per day of either type. While the flight jackets generate a profit of $70 per jacket, the denim jackets generate a profit of $100 per jacket. Assuming the company can sell all the jackets they make, how many of each type of jacket should they make to maximize profit?", "order_mapping": {"flight jackets": 0, "denim jackets": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"denim jackets": "100", "flight jackets": "70"}}, "const_declarations": [{"type": "upperbound", "direction": "maximum", "limit": "10", "var": "flight jackets", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "maximum", "limit": "25", "var": "denim jackets", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of flight jackets produced per day\n- y: Number of denim jackets produced per day\n\nObjective:\n- The company aims to maximize its profit. The profit generated per flight jacket is $70, and the profit generated per denim jacket is $100. Therefore, the objective function is: Maximize 70x + 100y\n\nConstraints:\n- The maximum production rate for flight jackets is 10 per day, leading to the constraint: x <= 10.\n- The maximum production rate for denim jackets is 25 per day, leading to the constraint: y <= 25.\n- The sewing machine can process at most 30 jackets per day of either type, leading to the constraint: x + y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 100y\nConstraints:\nx <= 10\ny <= 25\nx + y <= 30", "canonical": {"objective": [-70.0, -100.0], "constraints": [[1.0, 0.0, 10.0], [0.0, 1.0, 25.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 5, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of flight jackets made per day: FlightJackets\n- Number of denim jackets made per day: DenimJackets\n\nConstraints:\n- Maximum production rate for flight jackets is 10 per day:\n  FlightJackets <= 10\n- Maximum production rate for denim jackets is 25 per day:\n  DenimJackets <= 25\n- The sewing machine can process at most 30 jackets per day of either type:\n  FlightJackets + DenimJackets <= 30\n\nObjective:\n- Maximize profit (70 dollars per flight jacket, 100 dollars per denim jacket):\n  70 * FlightJackets + 100 * DenimJackets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFlightJackets = intvar(0, 999999999)  # Number of flight jackets made per day\nDenimJackets = intvar(0, 999999999)  # Number of denim jackets made per day\n\n# Constraints\nm = Model()\n\n# Maximum production rate for flight jackets is 10 per day:\nm += FlightJackets <= 10\n# Maximum production rate for denim jackets is 25 per day:\nm += DenimJackets <= 25\n# The sewing machine can process at most 30 jackets per day of either type:\nm += FlightJackets + DenimJackets <= 30\n\n# Objective\n# Maximize profit (70 dollars per flight jacket, 100 dollars per denim jacket):\nm.maximize(70 * FlightJackets + 100 * DenimJackets)\n", "entities": [{"start": 25, "end": 39, "word": "flight jackets", "entity_group": "VAR", "score": 0.9999708132409971}, {"start": 44, "end": 57, "word": "denim jackets", "entity_group": "VAR", "score": 0.9999891763642552}, {"start": 153, "end": 160, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9990681634003348}, {"start": 179, "end": 181, "word": "10", "entity_group": "LIMIT", "score": 0.999666728302524}, {"start": 182, "end": 196, "word": "flight jackets", "entity_group": "VAR", "score": 0.9999566093379443}, {"start": 209, "end": 211, "word": "25", "entity_group": "LIMIT", "score": 0.9991862816250328}, {"start": 212, "end": 225, "word": "denim jackets", "entity_group": "VAR", "score": 0.9999485659537932}, {"start": 325, "end": 332, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991175481905569}, {"start": 333, "end": 335, "word": "30", "entity_group": "LIMIT", "score": 0.9997001085575663}, {"start": 379, "end": 393, "word": "flight jackets", "entity_group": "VAR", "score": 0.9999858864573138}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999650918165233}, {"start": 417, "end": 419, "word": "70", "entity_group": "PARAM", "score": 0.999323169177237}, {"start": 437, "end": 450, "word": "denim jackets", "entity_group": "VAR", "score": 0.9999817213825947}, {"start": 462, "end": 468, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999958039794398}, {"start": 474, "end": 477, "word": "100", "entity_group": "PARAM", "score": 0.9989920909237932}, {"start": 601, "end": 609, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994486420044434}, {"start": 610, "end": 616, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999936906031927}]}
{"doc_id": "1825508140", "document": "A fruit store wants to liquidate its stock of 30 lemons, 40 mangos, and 50 pears. Given past experience, the store knows that they can propose a mango-lovers package with 4 lemons and 8 mangos and that this package will bring a profit of 5 euros. Similarly, they can prepare a regular package with 3 lemons, 5 mangos, and 10 pears, yielding a profit of 6.5 euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, mango-lovers packages and regular packages, should the store prepare to maximize net profit?", "order_mapping": {"mango-lovers package": 0, "regular package": 1, "mango-lovers packages": 0, "regular packages": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "net profit", "terms": {"regular package": "6.5", "mango-lovers package": "5"}}, "const_declarations": [{"type": "linear", "direction": "stock", "limit": "30", "terms": {"mango-lovers package": "4", "regular package": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "stock", "limit": "40", "terms": {"mango-lovers package": "8", "regular package": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "stock", "limit": "50", "terms": {"regular package": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of mango-lovers packages\n- y: Quantity of regular packages\n\nObjective:\n- The store aims to maximize its net profit. The mango-lovers package brings a profit of 5 euros, and the regular package yields a profit of 6.5 euros. Therefore, the objective function is: Maximize 5x + 6.5y\n\nConstraints:\n- The store has 30 lemons, 40 mangos, and 50 pears available. The mango-lovers package requires 4 lemons and 8 mangos, and the regular package requires 3 lemons, 5 mangos, and 10 pears. These constraints can be formulated as:\n    - 4x + 3y <= 30 (lemons constraint)\n    - 8x + 5y <= 40 (mangos constraint)\n    - 10y <= 50 (pears constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 6.5y\nConstraints:\n4x + 3y <= 30\n8x + 5y <= 40\n10y <= 50", "canonical": {"objective": [-5.0, -6.5], "constraints": [[4.0, 3.0, 30.0], [8.0, 5.0, 40.0], [0.0, 10.0, 50.0]]}, "solution": {"x": 1, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of mango-lovers packages prepared: MangoLoversPackages\n- Number of regular packages prepared: RegularPackages\n\nConstraints:\n- Stock limit for lemons (30 lemons):\n  4 * MangoLoversPackages + 3 * RegularPackages <= 30\n- Stock limit for mangos (40 mangos):\n  8 * MangoLoversPackages + 5 * RegularPackages <= 40\n- Stock limit for pears (50 pears):\n  10 * RegularPackages <= 50\n\nObjective:\n- Maximize net profit (5 euros per mango-lovers package, 6.5 euros per regular package):\n  5 * MangoLoversPackages + 6.5 * RegularPackages\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMangoLoversPackages = intvar(0, 999999999)  # Number of mango-lovers packages prepared\nRegularPackages = intvar(0, 999999999)  # Number of regular packages prepared\n\n# Constraints\nm = Model()\n\n# The store has a stock limit of 30 lemons:\nm += 4 * MangoLoversPackages + 3 * RegularPackages <= 30\n# The store has a stock limit of 40 mangos:\nm += 8 * MangoLoversPackages + 5 * RegularPackages <= 40\n# The store has a stock limit of 50 pears:\nm += 10 * RegularPackages <= 50\n\n# Objective\n# Maximize net profit (5 euros per mango-lovers package, 6.5 euros per regular package):\nm.maximize(5 * MangoLoversPackages + 6.5 * RegularPackages)\n", "entities": [{"start": 37, "end": 42, "word": "stock", "entity_group": "CONST_DIR", "score": 0.9930669483615723}, {"start": 46, "end": 48, "word": "30", "entity_group": "LIMIT", "score": 0.9996785031382529}, {"start": 58, "end": 60, "word": "40", "entity_group": "LIMIT", "score": 0.999378263352582}, {"start": 74, "end": 76, "word": "50", "entity_group": "LIMIT", "score": 0.9996541129115197}, {"start": 149, "end": 171, "word": "mango - lovers package", "entity_group": "VAR", "score": 0.99870498938487}, {"start": 177, "end": 178, "word": "4", "entity_group": "PARAM", "score": 0.9996228024440621}, {"start": 190, "end": 191, "word": "8", "entity_group": "PARAM", "score": 0.9994446421307538}, {"start": 234, "end": 240, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998772057898923}, {"start": 244, "end": 245, "word": "5", "entity_group": "PARAM", "score": 0.9995557464379157}, {"start": 285, "end": 300, "word": "regular package", "entity_group": "VAR", "score": 0.9998852835169159}, {"start": 306, "end": 307, "word": "3", "entity_group": "PARAM", "score": 0.9996056524545758}, {"start": 317, "end": 318, "word": "5", "entity_group": "PARAM", "score": 0.9993365545731129}, {"start": 332, "end": 334, "word": "10", "entity_group": "PARAM", "score": 0.9995602198407315}, {"start": 354, "end": 360, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997294429162776}, {"start": 364, "end": 367, "word": "6.5", "entity_group": "PARAM", "score": 0.9997095513125946}, {"start": 506, "end": 529, "word": "mango - lovers packages", "entity_group": "VAR", "score": 0.9988561529309076}, {"start": 534, "end": 550, "word": "regular packages", "entity_group": "VAR", "score": 0.999983867668971}, {"start": 581, "end": 589, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.997571699535415}, {"start": 590, "end": 600, "word": "net profit", "entity_group": "OBJ_NAME", "score": 0.966061003090528}]}
{"doc_id": "1316021843", "document": "West Moon Designs are famous for its high-end furniture. Each coffee table produced by West Moon Designs nets the company a profit of $200. Each bookcase yields a $300 profit. Every week, 120 gallons of lacquer and 250 lengths of high-quality mahogany are available. Each coffee table requires approximately 5 gallons of lacquer and 15 lengths of mahogany. Each bookcase takes 7 gallons of lacquer and 25 lengths of mahogany. What should the production plan be for West Moon Designs to make a maximum profit?", "order_mapping": {"coffee table": 0, "bookcase": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"coffee table": "200", "bookcase": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "120", "terms": {"coffee table": "5", "bookcase": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "250", "terms": {"coffee table": "15", "bookcase": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of coffee tables produced\n- y: Number of bookcases produced\n\nObjective:\n- The company aims to maximize its profit. Each coffee table produced yields a profit of $200, and each bookcase yields a profit of $300. Therefore, the objective function is: Maximize 200x + 300y\n\nConstraints:\n- The availability of resources limits the production. Each coffee table requires approximately 5 gallons of lacquer and 15 lengths of mahogany, and each bookcase takes 7 gallons of lacquer and 25 lengths of mahogany. Therefore, the constraints are: 5x + 7y <= 120 (lacquer constraint) and 15x + 25y <= 250 (mahogany constraint).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 300y\nConstraints:\n5x + 7y <= 120\n15x + 25y <= 250", "canonical": {"objective": [-200.0, -300.0], "constraints": [[5.0, 7.0, 120.0], [15.0, 25.0, 250.0]]}, "solution": {"x": 15, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of coffee tables produced: CoffeeTable\n- Number of bookcases produced: Bookcase\n\nConstraints:\n- Lacquer usage for all products should not exceed 120 gallons:\n  5 * CoffeeTable + 7 * Bookcase <= 120\n- Mahogany usage for all products should not exceed 250 lengths:\n  15 * CoffeeTable + 25 * Bookcase <= 250\n\nObjective:\n- Maximize profit, given $200 profit per coffee table and $300 profit per bookcase:\n  200 * CoffeeTable + 300 * Bookcase\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoffeeTable = intvar(0, 999999999)  # Number of coffee tables produced\nBookcase = intvar(0, 999999999)  # Number of bookcases produced\n\n# Constraints\nm = Model()\n\n# Lacquer constraint: 5 gallons per coffee table and 7 gallons per bookcase, with 120 gallons available\nm += 5 * CoffeeTable + 7 * Bookcase <= 120\n# Mahogany constraint: 15 lengths per coffee table and 25 lengths per bookcase, with 250 lengths available\nm += 15 * CoffeeTable + 25 * Bookcase <= 250\n\n# Objective\n# Maximize profit: $200 per coffee table and $300 per bookcase\nm.maximize(200 * CoffeeTable + 300 * Bookcase)\n", "entities": [{"start": 65, "end": 77, "word": "coffee table", "entity_group": "VAR", "score": 0.9998228720296692}, {"start": 127, "end": 133, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997124344283475}, {"start": 139, "end": 142, "word": "200", "entity_group": "PARAM", "score": 0.9995820860810756}, {"start": 150, "end": 158, "word": "bookcase", "entity_group": "VAR", "score": 0.999771489121526}, {"start": 170, "end": 173, "word": "300", "entity_group": "PARAM", "score": 0.9991403432368791}, {"start": 174, "end": 180, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997670786448524}, {"start": 196, "end": 199, "word": "120", "entity_group": "LIMIT", "score": 0.9996836010209474}, {"start": 223, "end": 226, "word": "250", "entity_group": "LIMIT", "score": 0.9997455800006357}, {"start": 266, "end": 275, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990516908133379}, {"start": 283, "end": 295, "word": "coffee table", "entity_group": "VAR", "score": 0.9999620303619031}, {"start": 319, "end": 320, "word": "5", "entity_group": "PARAM", "score": 0.9997279991646143}, {"start": 344, "end": 346, "word": "15", "entity_group": "PARAM", "score": 0.9996718942930466}, {"start": 374, "end": 382, "word": "bookcase", "entity_group": "VAR", "score": 0.9995014566172076}, {"start": 389, "end": 390, "word": "7", "entity_group": "PARAM", "score": 0.999696005977592}, {"start": 414, "end": 416, "word": "25", "entity_group": "PARAM", "score": 0.9996984247032129}, {"start": 506, "end": 513, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9885020902033577}, {"start": 514, "end": 520, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998699441992767}]}
{"doc_id": "-1371866588", "document": "WFH factory makes standing desks and office chairs using a special machine. This machine must be operated for at least 2000 minutes per week. Each standing desk takes 60 minutes on the machine while each office chair takes 35 minutes on the machine. The factory must make a minimum of 100 items total. If the cost for producing a standing desk is $500 and the cost for producing a office chair is $230, how many of each should be made to minimize costs?", "order_mapping": {"standing desks": 0, "office chairs": 1, "standing desk": 0, "office chair": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"standing desk": "500", "office chair": "230"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "2000", "terms": {"standing desk": "60", "office chair": "35"}, "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "100", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of standing desks to be made\n- y: Number of office chairs to be made\n\nObjective:\n- The factory aims to minimize its costs. Given that the cost for producing a standing desk is $500 and the cost for producing an office chair is $230, the objective function is: Minimize 500x + 230y\n\nConstraints:\n- The machine must be operated for at least 2000 minutes per week. Each standing desk takes 60 minutes on the machine while each office chair takes 35 minutes on the machine. This leads to the constraint: 60x + 35y >= 2000.\n- The factory must make a minimum of 100 items total, resulting in the constraint: x + y >= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 230y\nConstraints:\n60x + 35y >= 2000\nx + y >= 100", "canonical": {"objective": [500.0, 230.0], "constraints": [[-60.0, -35.0, -2000.0], [-1.0, -1.0, -100.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of standing desks made: StandingDesks\n- Number of office chairs made: OfficeChairs\n\nConstraints:\n- Machine operation time for standing desks and office chairs must be at least 2000 minutes per week:\n  60 * StandingDesks + 35 * OfficeChairs >= 2000\n- A minimum of 100 items (standing desks and office chairs combined) must be made:\n  StandingDesks + OfficeChairs >= 100\n\nObjective:\n- Minimize production costs ($500 for each standing desk, $230 for each office chair):\n  500 * StandingDesks + 230 * OfficeChairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStandingDesks = intvar(0, 999999999)  # Number of standing desks made\nOfficeChairs = intvar(0, 999999999)  # Number of office chairs made\n\n# Constraints\nm = Model()\n\n# The machine must be operated for at least 2000 minutes per week:\nm += 60 * StandingDesks + 35 * OfficeChairs >= 2000\n# The factory must make a minimum of 100 items total:\nm += StandingDesks + OfficeChairs >= 100\n\n# Objective\n# Minimize costs ($500 for producing a standing desk, $230 for producing an office chair):\nm.minimize(500 * StandingDesks + 230 * OfficeChairs)\n", "entities": [{"start": 18, "end": 32, "word": "standing desks", "entity_group": "VAR", "score": 0.9999746620237833}, {"start": 37, "end": 50, "word": "office chairs", "entity_group": "VAR", "score": 0.9999900605111843}, {"start": 111, "end": 119, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989347414103971}, {"start": 120, "end": 124, "word": "2000", "entity_group": "LIMIT", "score": 0.9997520440624965}, {"start": 149, "end": 162, "word": "standing desk", "entity_group": "VAR", "score": 0.9999735082700292}, {"start": 169, "end": 171, "word": "60", "entity_group": "PARAM", "score": 0.9996907024491933}, {"start": 206, "end": 218, "word": "office chair", "entity_group": "VAR", "score": 0.9999783604850795}, {"start": 225, "end": 227, "word": "35", "entity_group": "PARAM", "score": 0.9995270792421724}, {"start": 277, "end": 284, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9942050477334629}, {"start": 288, "end": 291, "word": "100", "entity_group": "LIMIT", "score": 0.9996587964980578}, {"start": 313, "end": 317, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9969642053920906}, {"start": 334, "end": 347, "word": "standing desk", "entity_group": "VAR", "score": 0.9998971473181856}, {"start": 353, "end": 356, "word": "500", "entity_group": "PARAM", "score": 0.9988686826168501}, {"start": 365, "end": 369, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984353432336085}, {"start": 386, "end": 398, "word": "office chair", "entity_group": "VAR", "score": 0.9998889861936799}, {"start": 404, "end": 407, "word": "230", "entity_group": "PARAM", "score": 0.9996063427057971}, {"start": 445, "end": 453, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997011859831088}, {"start": 454, "end": 459, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990205570710967}]}
{"doc_id": "1082778763", "document": "An electronics factory makes two types of products: DVD players and projectors. Demand is high but production is limited since the global chip shortage is a long-lasting problem. Each DVD player requires 5 silicon chips, 6 hours of engineering time, and 2.5 hours of assembly time. Each projector requires 3 silicon chips, 5 hours of engineering time, and 2 hours of assembly time. The company can buy 250 silicon chips per week, and has available 200 hours of engineering and 240 hours of assembly. The profit per DVD player is $250 and the profit per projector is $200. Formulate an LP problem to maximize the company's profit if they want to produce at least 30 units of DVD players and at least 30 units of projectors each week.", "order_mapping": {"DVD players": 0, "projectors": 1, "DVD player": 0, "projector": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"projector": "200", "DVD player": "250"}}, "const_declarations": [{"type": "linear", "direction": "can buy", "limit": "250", "terms": {"DVD player": "5", "projector": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"DVD player": "6", "projector": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "240", "terms": {"DVD player": "2.5", "projector": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "DVD players", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "projectors", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of DVD players produced per week\n- y: Number of projectors produced per week\n\nObjective:\n- The company aims to maximize its profit. The profit per DVD player is $250 and the profit per projector is $200. Therefore, the objective function is: Maximize 250x + 200y\n\nConstraints:\n- The company can buy 250 silicon chips per week, and each DVD player requires 5 silicon chips and each projector requires 3 silicon chips. This leads to the constraint: 5x + 3y <= 250.\n- The company has 200 hours of engineering time available, and each DVD player requires 6 hours of engineering time and each projector requires 5 hours of engineering time. This results in the constraint: 6x + 5y <= 200.\n- The company has 240 hours of assembly time available, and each DVD player requires 2.5 hours of assembly time and each projector requires 2 hours of assembly time. This leads to the constraint: 2.5x + 2y <= 240.\n- The company wants to produce at least 30 units of DVD players and at least 30 units of projectors each week, leading to the constraints: x >= 30, y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 250x + 200y\nConstraints:\n5x + 3y <= 250\n6x + 5y <= 200\n2.5x + 2y <= 240\nx >= 30\ny >= 30", "canonical": {"objective": [-250.0, -200.0], "constraints": [[5.0, 3.0, 250.0], [6.0, 5.0, 200.0], [2.5, 2.0, 240.0], [-1.0, 0.0, -30.0], [0.0, -1.0, -30.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of DVD players produced per week: DVDPlayers\n- Number of projectors produced per week: Projectors\n\nConstraints:\n- Silicon chips constraint (250 chips available per week):\n  5 * DVDPlayers + 3 * Projectors <= 250\n- Engineering time constraint (200 hours available per week):\n  6 * DVDPlayers + 5 * Projectors <= 200\n- Assembly time constraint (240 hours available per week):\n  2.5 * DVDPlayers + 2 * Projectors <= 240\n- At least 30 units of DVD players should be produced each week:\n  DVDPlayers >= 30\n- At least 30 units of projectors should be produced each week:\n  Projectors >= 30\n\nObjective:\n- Maximize profit ($250 per DVD player, $200 per projector):\n  250 * DVDPlayers + 200 * Projectors\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDVDPlayers = intvar(0, 999999999)  # Number of DVD players produced per week\nProjectors = intvar(0, 999999999)  # Number of projectors produced per week\n\n# Constraints\nm = Model()\n\n# Silicon chips constraint (250 chips available per week):\nm += 5 * DVDPlayers + 3 * Projectors <= 250\n# Engineering time constraint (200 hours available per week):\nm += 6 * DVDPlayers + 5 * Projectors <= 200\n# Assembly time constraint (240 hours available per week):\nm += 2.5 * DVDPlayers + 2 * Projectors <= 240\n# At least 30 units of DVD players should be produced each week:\nm += DVDPlayers >= 30\n# At least 30 units of projectors should be produced each week:\nm += Projectors >= 30\n\n# Objective\n# Maximize profit ($250 per DVD player, $200 per projector):\nm.maximize(250 * DVDPlayers + 200 * Projectors)\n", "entities": [{"start": 53, "end": 64, "word": "DVD players", "entity_group": "VAR", "score": 0.9999829755879306}, {"start": 69, "end": 79, "word": "projectors", "entity_group": "VAR", "score": 0.9997386495481064}, {"start": 189, "end": 199, "word": "DVD player", "entity_group": "VAR", "score": 0.9999853340574685}, {"start": 209, "end": 210, "word": "5", "entity_group": "PARAM", "score": 0.9992639905988188}, {"start": 227, "end": 228, "word": "6", "entity_group": "PARAM", "score": 0.9996491862771131}, {"start": 261, "end": 264, "word": "2.5", "entity_group": "PARAM", "score": 0.9996242014559104}, {"start": 295, "end": 304, "word": "projector", "entity_group": "VAR", "score": 0.999754528534684}, {"start": 314, "end": 315, "word": "3", "entity_group": "PARAM", "score": 0.9977346740571732}, {"start": 332, "end": 333, "word": "5", "entity_group": "PARAM", "score": 0.9994900758859346}, {"start": 366, "end": 367, "word": "2", "entity_group": "PARAM", "score": 0.9996242260057123}, {"start": 405, "end": 412, "word": "can buy", "entity_group": "CONST_DIR", "score": 0.9944086941980346}, {"start": 413, "end": 416, "word": "250", "entity_group": "LIMIT", "score": 0.9997081781198262}, {"start": 450, "end": 459, "word": "available", "entity_group": "CONST_DIR", "score": 0.9971292229126058}, {"start": 460, "end": 463, "word": "200", "entity_group": "LIMIT", "score": 0.9991157004662491}, {"start": 489, "end": 492, "word": "240", "entity_group": "LIMIT", "score": 0.9996125998065198}, {"start": 517, "end": 523, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999131119856937}, {"start": 528, "end": 538, "word": "DVD player", "entity_group": "VAR", "score": 0.9999793333659637}, {"start": 544, "end": 547, "word": "250", "entity_group": "PARAM", "score": 0.999624095947796}, {"start": 556, "end": 562, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999037451509656}, {"start": 567, "end": 576, "word": "projector", "entity_group": "VAR", "score": 0.9983297427805351}, {"start": 582, "end": 585, "word": "200", "entity_group": "PARAM", "score": 0.9996607364150235}, {"start": 615, "end": 623, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9986491717932103}, {"start": 639, "end": 645, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998092864291627}, {"start": 670, "end": 678, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986671555826516}, {"start": 679, "end": 681, "word": "30", "entity_group": "LIMIT", "score": 0.9995698348684285}, {"start": 691, "end": 702, "word": "DVD players", "entity_group": "VAR", "score": 0.9999689049706669}, {"start": 707, "end": 715, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988846016649754}, {"start": 716, "end": 718, "word": "30", "entity_group": "LIMIT", "score": 0.9997409146039391}, {"start": 728, "end": 738, "word": "projectors", "entity_group": "VAR", "score": 0.9995511107957039}]}
{"doc_id": "-208169543", "document": "Two different food groups, grains and vegetables, are eaten everyday to get iron and fiber. A serving of vegetables contains 15 grams of iron and 25 grams of fiber. A serving of grains contains 30 grams of iron and 5 grams of fiber. Daily requirements are at least 100 grams of iron and 150 grams of fiber. If a serving of grains costs $0.40 and a serving of vegetables costs $0.60, how many of each should be eaten to minimize costs?", "order_mapping": {"grains": 0, "vegetables": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"vegetables": "0.60", "grains": "0.40"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"vegetables": "15", "grains": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"vegetables": "25", "grains": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Servings of grains\n- y: Servings of vegetables\n\nObjective:\n- The goal is to minimize the cost of the food. Given that a serving of grains costs $0.40 and a serving of vegetables costs $0.60, the objective function is: Minimize 0.40x + 0.60y\n\nConstraints:\n- The daily requirement is at least 100 grams of iron, which translates to the constraint: 30x + 15y >= 100.\n- The daily requirement is at least 150 grams of fiber, leading to the constraint: 5x + 25y >= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.40x + 0.60y\nConstraints:\n30x + 15y >= 100\n5x + 25y >= 150", "canonical": {"objective": [0.4, 0.6], "constraints": [[-30.0, -15.0, -100.0], [-5.0, -25.0, -150.0]]}, "solution": {"x": 1, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of servings of grains eaten per day: Grains\n- Number of servings of vegetables eaten per day: Vegetables\n\nConstraints:\n- Daily requirements for iron (at least 100 grams):\n  30 * Grains + 15 * Vegetables >= 100\n- Daily requirements for fiber (at least 150 grams):\n  5 * Grains + 25 * Vegetables >= 150\n\nObjective:\n- Minimize costs (0.40 dollars per serving of grains, 0.60 dollars per serving of vegetables):\n  0.40 * Grains + 0.60 * Vegetables\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGrains = intvar(0, 999999999)  # Number of servings of grains eaten per day\nVegetables = intvar(0, 999999999)  # Number of servings of vegetables eaten per day\n\n# Constraints\nm = Model()\n\n# Daily requirements for iron (at least 100 grams):\nm += 30 * Grains + 15 * Vegetables >= 100\n# Daily requirements for fiber (at least 150 grams):\nm += 5 * Grains + 25 * Vegetables >= 150\n\n# Objective\n# Minimize costs (0.40 dollars per serving of grains, 0.60 dollars per serving of vegetables):\nm.minimize(0.40 * Grains + 0.60 * Vegetables)\n", "entities": [{"start": 28, "end": 34, "word": "grains", "entity_group": "VAR", "score": 0.99947825130804}, {"start": 39, "end": 49, "word": "vegetables", "entity_group": "VAR", "score": 0.9993808064306732}, {"start": 108, "end": 118, "word": "vegetables", "entity_group": "VAR", "score": 0.999321156816634}, {"start": 128, "end": 130, "word": "15", "entity_group": "PARAM", "score": 0.9997081002908842}, {"start": 149, "end": 151, "word": "25", "entity_group": "PARAM", "score": 0.9997337602799939}, {"start": 182, "end": 188, "word": "grains", "entity_group": "VAR", "score": 0.9994183137248392}, {"start": 198, "end": 200, "word": "30", "entity_group": "PARAM", "score": 0.9997079259904061}, {"start": 219, "end": 220, "word": "5", "entity_group": "PARAM", "score": 0.9997274158464698}, {"start": 261, "end": 269, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999213274184434}, {"start": 270, "end": 273, "word": "100", "entity_group": "LIMIT", "score": 0.9997632075011755}, {"start": 292, "end": 295, "word": "150", "entity_group": "LIMIT", "score": 0.9996597200408361}, {"start": 329, "end": 335, "word": "grains", "entity_group": "VAR", "score": 0.999604122433901}, {"start": 336, "end": 341, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9942409055546765}, {"start": 344, "end": 348, "word": "0.40", "entity_group": "PARAM", "score": 0.998987204887744}, {"start": 366, "end": 376, "word": "vegetables", "entity_group": "VAR", "score": 0.9993362997564894}, {"start": 377, "end": 382, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9948580924234806}, {"start": 385, "end": 389, "word": "0.60", "entity_group": "PARAM", "score": 0.9995464497580009}, {"start": 428, "end": 436, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996863680436736}, {"start": 437, "end": 442, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990203819609471}]}
{"doc_id": "2021781166", "document": "A large fast-food restaurant employs waiters and managers. Waiters earn $1200 per week and managers earn $2000 per week. The restaurant requires a minimum of 50 workers of whom at least 15 must be managers. To keep the restaurant clean and running smoothly, the number of managers should be at least a third of the number of waiters. The restaurant wants to keep the weekly wage bill below $500000. Formulate an LP to minimize the wage bill.", "order_mapping": {"waiters": 0, "managers": 1, "Waiters": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"Waiters": "1200", "managers": "2000"}}, "const_declarations": [{"type": "sum", "direction": "minimum", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "managers", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "managers", "direction": "at least", "param": "third", "y_var": "waiters", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "below", "limit": "500000", "terms": {"Waiters": "1200", "managers": "2000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "The problem involves determining the number of waiters and managers to employ in a fast-food restaurant in order to minimize the weekly wage bill, subject to various constraints.\n\nVariables:\n- x: Number of waiters\n- y: Number of managers\n\nObjective:\n- Minimize the weekly wage bill, which is composed of the wages for both waiters and managers. Given that waiters earn $1200 per week and managers earn $2000 per week, the objective function is: Minimize 1200x + 2000y\n\nConstraints:\n1. The restaurant requires a minimum of 50 workers, so the constraint is: x + y >= 50.\n2. At least 15 workers must be managers, leading to the constraint: y >= 15.\n3. To ensure smooth operation, the number of managers should be at least a third of the number of waiters: y >= 1/3x.\n4. The total weekly wage bill should be kept below $500,000, leading to the constraint: 1200x + 2000y <= 500000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1200x + 2000y\nConstraints:\nx + y >= 50\ny >= 15\ny >= 1/3x\n1200x + 2000y <= 500000", "canonical": {"objective": [1200.0, 2000.0], "constraints": [[-1.0, -1.0, -50.0], [0.0, -1.0, -15.0], [0.3333333333333333, -1.0, 0.0], [1200.0, 2000.0, 500000.0]]}, "solution": {"x": 35, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of waiters employed: Waiters\n- Number of managers employed: Managers\n\nConstraints:\n- Total number of workers should be at least 50:\n  Waiters + Managers >= 50\n- At least 15 workers must be managers:\n  Managers >= 15\n- The number of managers should be at least a third of the number of waiters:\n  Managers >= 1/3 * Waiters\n- Total wage bill should be below $500000 (Waiters earn $1200 per week and managers earn $2000 per week):\n  1200 * Waiters + 2000 * Managers <= 500000\n\nObjective: \n- Minimize the total wage bill (Waiters earn $1200 per week and managers earn $2000 per week):\n  1200 * Waiters + 2000 * Managers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWaiters = intvar(0, 999999999)  # number of waiters\nManagers = intvar(0, 999999999)  # number of managers\n\n# Constraints\nm = Model()\n\n# The restaurant requires a minimum of 50 workers:\nm += Waiters + Managers >= 50\n# At least 15 must be managers:\nm += Managers >= 15\n# The number of managers should be at least a third of the number of waiters:\nm += Managers >= (1/3) * Waiters\n# The restaurant wants to keep the weekly wage bill below $500000 (Waiters earn $1200 per week and managers earn $2000 per week):\nm += 1200 * Waiters + 2000 * Managers <= 500000\n\n# Objective\n# Minimize the total wage bill (Waiters earn $1200 per week and managers earn $2000 per week):\nm.minimize(1200 * Waiters + 2000 * Managers)\n", "entities": [{"start": 39, "end": 46, "word": "waiters", "entity_group": "VAR", "score": 0.9996992161971624}, {"start": 51, "end": 59, "word": "managers", "entity_group": "VAR", "score": 0.9972229192722676}, {"start": 62, "end": 69, "word": "Waiters", "entity_group": "VAR", "score": 0.9996905613590806}, {"start": 70, "end": 74, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9851023545199015}, {"start": 77, "end": 81, "word": "1200", "entity_group": "PARAM", "score": 0.9997013822819407}, {"start": 95, "end": 103, "word": "managers", "entity_group": "VAR", "score": 0.9998138318120703}, {"start": 104, "end": 108, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9654600402450567}, {"start": 111, "end": 115, "word": "2000", "entity_group": "PARAM", "score": 0.9995790385772206}, {"start": 153, "end": 160, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9985354163146895}, {"start": 164, "end": 166, "word": "50", "entity_group": "LIMIT", "score": 0.999686491211105}, {"start": 183, "end": 191, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985278983751732}, {"start": 192, "end": 194, "word": "15", "entity_group": "LIMIT", "score": 0.9996081662338712}, {"start": 203, "end": 211, "word": "managers", "entity_group": "VAR", "score": 0.9998268421379961}, {"start": 280, "end": 288, "word": "managers", "entity_group": "VAR", "score": 0.9995470618635777}, {"start": 299, "end": 307, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9970566770626409}, {"start": 310, "end": 315, "word": "third", "entity_group": "PARAM", "score": 0.9969859299634078}, {"start": 333, "end": 340, "word": "waiters", "entity_group": "VAR", "score": 0.9995703915854361}, {"start": 376, "end": 392, "word": "weekly wage bill", "entity_group": "OBJ_NAME", "score": 0.45006429420428445}, {"start": 393, "end": 398, "word": "below", "entity_group": "CONST_DIR", "score": 0.9825128258903979}, {"start": 401, "end": 407, "word": "500000", "entity_group": "LIMIT", "score": 0.9996857792008815}, {"start": 429, "end": 437, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998859986086284}, {"start": 438, "end": 451, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.7882524261650907}]}
{"doc_id": "-1605570733", "document": "Blue Ocean wants to allocate resources at its two plants Gamma and Delta to produce two products: asphalt and bricks. To meet customer demands, at least 90 units of asphalt and 85 units of bricks must be produced daily. Running the plant Gamma costs $35 per hour and yields 4 units of asphalt and 3 units of bricks. Running the plant Delta for an hour costs $95 and produces 6 units of asphalt and 5 units of bricks. Determine the daily production plan at its plants that will minimize the cost of meeting the demands.", "order_mapping": {"Gamma": 0, "Delta": 1, "plant Gamma": 0, "plant Delta": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"plant Delta": "95", "plant Gamma": "35"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "90", "terms": {"plant Gamma": "4", "plant Delta": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "85", "terms": {"plant Gamma": "3", "plant Delta": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours of operation for plant Gamma\n- y: Hours of operation for plant Delta\n\nObjective:\n- Blue Ocean wants to minimize the cost of meeting the demands. The running cost for plant Gamma is $35 per hour and for plant Delta is $95 per hour. Therefore, the objective function is: Minimize 35x + 95y\n\nConstraints:\n- To meet customer demands, at least 90 units of asphalt and 85 units of bricks must be produced daily. The production rates for asphalt and bricks for each plant are known. From plant Gamma, 4 units of asphalt and 3 units of bricks are produced per hour, and from plant Delta, 6 units of asphalt and 5 units of bricks are produced per hour. This leads to the constraints: 4x + 6y >= 90 and 3x + 5y >= 85.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 35x + 95y\nConstraints:\n4x + 6y >= 90\n3x + 5y >= 85", "canonical": {"objective": [35.0, 95.0], "constraints": [[-4.0, -6.0, -90.0], [-3.0, -5.0, -85.0]]}, "solution": {"x": 29, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Hours plant Gamma runs per day: GammaHours\n- Hours plant Delta runs per day: DeltaHours\n\nConstraints:\n- To meet customer demands, at least 90 units of asphalt must be produced daily:\n  4 * GammaHours + 6 * DeltaHours >= 90\n- To meet customer demands, at least 85 units of bricks must be produced daily:\n  3 * GammaHours + 5 * DeltaHours >= 85\n\nObjective:\n- Minimize the cost of meeting the demands (Running the plant Gamma costs $35 per hour, Delta $95 per hour):\n  35 * GammaHours + 95 * DeltaHours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGammaHours = intvar(0, 999999999)  # Hours plant Gamma runs\nDeltaHours = intvar(0, 999999999)  # Hours plant Delta runs\n\n# Constraints\nm = Model()\n\n# To meet customer demands, at least 90 units of asphalt must be produced daily:\nm += 4 * GammaHours + 6 * DeltaHours >= 90\n# To meet customer demands, at least 85 units of bricks must be produced daily:\nm += 3 * GammaHours + 5 * DeltaHours >= 85\n\n# Objective\n# Minimize the cost of meeting the demands (Running the plant Gamma costs $35 per hour, Delta $95 per hour):\nm.minimize(35 * GammaHours + 95 * DeltaHours)\n", "entities": [{"start": 57, "end": 62, "word": "Gamma", "entity_group": "VAR", "score": 0.9995455672520331}, {"start": 67, "end": 72, "word": "Delta", "entity_group": "VAR", "score": 0.9995634873614011}, {"start": 147, "end": 155, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991025872892071}, {"start": 156, "end": 158, "word": "90", "entity_group": "LIMIT", "score": 0.9997454204861661}, {"start": 180, "end": 182, "word": "85", "entity_group": "LIMIT", "score": 0.999759869457431}, {"start": 236, "end": 247, "word": "plant Gamma", "entity_group": "VAR", "score": 0.9999532537703962}, {"start": 248, "end": 253, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994158274010009}, {"start": 256, "end": 258, "word": "35", "entity_group": "PARAM", "score": 0.9997157677297879}, {"start": 279, "end": 280, "word": "4", "entity_group": "PARAM", "score": 0.9997228598722865}, {"start": 302, "end": 303, "word": "3", "entity_group": "PARAM", "score": 0.9996985555401664}, {"start": 334, "end": 345, "word": "plant Delta", "entity_group": "VAR", "score": 0.9999474689846709}, {"start": 358, "end": 363, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998936198559965}, {"start": 366, "end": 368, "word": "95", "entity_group": "PARAM", "score": 0.9992182378191882}, {"start": 382, "end": 383, "word": "6", "entity_group": "PARAM", "score": 0.9997478091017872}, {"start": 405, "end": 406, "word": "5", "entity_group": "PARAM", "score": 0.9996790299689617}, {"start": 485, "end": 493, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9936337876158876}, {"start": 498, "end": 502, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9949552742668126}]}
{"doc_id": "-1449805744", "document": "Emma is required to take two medicines AX7 and BY5 every day. She needs to take at least 6 grams of AX7 and 8 grams of BY5 every day. These medicines are available in two pills named Klun and Tao. One pill of Klun contains 1.5 grams of AX7 while one pill of Tao contains 1.3 grams of AX7. On the other hand, one pill of Klun contains 1.8 grams of BY5 and one pill of Tao contains 2 grams of BY5. The cost per pill of Klun is $2.6 and the cost per pill of Tao is $3.2. Formulate an LP such that the medicine requirement can be fulfilled at the lowest cost.", "order_mapping": {"Klun": 0, "Tao": 1}, "obj_declaration": {"type": "objective", "direction": "lowest", "name": "cost", "terms": {"Klun": "2.6", "Tao": "3.2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "6", "terms": {"Klun": "1.5", "Tao": "1.3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "8", "terms": {"Klun": "1.8", "Tao": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pills of Klun\n- y: Number of pills of Tao\n\nObjective:\n- The objective is to minimize the cost of the medicines. The cost per pill of Klun is $2.6 and the cost per pill of Tao is $3.2. Therefore, the objective function is: Minimize 2.6x + 3.2y\n\nConstraints:\n- Emma needs to take at least 6 grams of AX7 every day, which can be formulated as: 1.5x + 1.3y >= 6\n- Emma needs to take at least 8 grams of BY5 every day, which can be formulated as: 1.8x + 2y >= 8\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2.6x + 3.2y\nConstraints:\n1.5x + 1.3y >= 6\n1.8x + 2y >= 8", "canonical": {"objective": [2.6, 3.2], "constraints": [[-1.5, -1.3, -6.0], [-1.8, -2.0, -8.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Klun pills: Klun\n- Number of Tao pills: Tao\n\nConstraints:\n- Emma needs at least 6 grams of AX7 every day:\n  1.5 * Klun + 1.3 * Tao >= 6\n- Emma needs at least 8 grams of BY5 every day:\n  1.8 * Klun + 2 * Tao >= 8\n\nObjective:\n- Minimize the total cost (Klun pills cost $2.6 each, Tao pills cost $3.2 each):\n  2.6 * Klun + 3.2 * Tao\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKlun = intvar(0, 999999999)  # Number of Klun pills\nTao = intvar(0, 999999999)  # Number of Tao pills\n\n# Constraints\nm = Model()\n\n# Emma needs to take at least 6 grams of AX7 every day:\nm += 1.5 * Klun + 1.3 * Tao >= 6\n# Emma needs to take at least 8 grams of BY5 every day:\nm += 1.8 * Klun + 2 * Tao >= 8\n\n# Objective\n# Minimize the total cost (Klun pills cost $2.6 each, Tao pills cost $3.2 each):\nm.minimize(2.6 * Klun + 3.2 * Tao)\n", "entities": [{"start": 81, "end": 89, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991989151060039}, {"start": 90, "end": 91, "word": "6", "entity_group": "LIMIT", "score": 0.9997197506756685}, {"start": 109, "end": 110, "word": "8", "entity_group": "LIMIT", "score": 0.9997424540348921}, {"start": 185, "end": 189, "word": "Klun", "entity_group": "VAR", "score": 0.9995147039834773}, {"start": 194, "end": 197, "word": "Tao", "entity_group": "VAR", "score": 0.9996439179770465}, {"start": 212, "end": 216, "word": "Klun", "entity_group": "VAR", "score": 0.9994783284167459}, {"start": 226, "end": 229, "word": "1.5", "entity_group": "PARAM", "score": 0.9997373079826671}, {"start": 261, "end": 264, "word": "Tao", "entity_group": "VAR", "score": 0.9995677297040333}, {"start": 274, "end": 277, "word": "1.3", "entity_group": "PARAM", "score": 0.9996855721447547}, {"start": 325, "end": 329, "word": "Klun", "entity_group": "VAR", "score": 0.9991725983219488}, {"start": 339, "end": 342, "word": "1.8", "entity_group": "PARAM", "score": 0.9997426159151543}, {"start": 372, "end": 375, "word": "Tao", "entity_group": "VAR", "score": 0.9994899085041667}, {"start": 385, "end": 386, "word": "2", "entity_group": "PARAM", "score": 0.9996837005903318}, {"start": 406, "end": 410, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9670166157443025}, {"start": 423, "end": 427, "word": "Klun", "entity_group": "VAR", "score": 0.9993720245135248}, {"start": 433, "end": 436, "word": "2.6", "entity_group": "PARAM", "score": 0.9994004879139365}, {"start": 445, "end": 449, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9799179411319042}, {"start": 462, "end": 465, "word": "Tao", "entity_group": "VAR", "score": 0.9983264988516942}, {"start": 471, "end": 474, "word": "3.2", "entity_group": "PARAM", "score": 0.999666950096657}, {"start": 552, "end": 558, "word": "lowest", "entity_group": "OBJ_DIR", "score": 0.9982348931335567}, {"start": 559, "end": 563, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9875941454542315}]}
{"doc_id": "-907853272", "document": "Luke has 200 hectares available to grow carrots and pumpkins. He prefers to plant more carrots than pumpkins, but the soil and weather conditions allow him to grow at most twice the amount of carrots to that of pumpkins. In addition, he must grow at least 25 hectares of carrots and at least 20 hectares of pumpkins to meet community demands. If the profit per hectare of carrots is $300 and the profit per hectare of pumpkins is $500, how many hectares of each item should he plant to maximize profit? What is this profit?", "order_mapping": {"carrots": 0, "pumpkins": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carrots": "300", "pumpkins": "500"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "carrots", "direction": "more", "y_var": "pumpkins", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "carrots", "direction": "at most", "param": "twice", "y_var": "pumpkins", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "25", "var": "carrots", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "pumpkins", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hectares of carrots\n- y: Hectares of pumpkins\n\nObjective:\n- Luke wants to maximize his profit. The profit per hectare of carrots is $300 and the profit per hectare of pumpkins is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- Luke has 200 hectares available for planting, so the constraint is: x + y <= 200.\n- Luke prefers to plant more carrots than pumpkins, leading to the constraint: x >= y.\n- The soil and weather conditions allow him to grow at most twice the amount of carrots to that of pumpkins, resulting in the constraint: x <= 2y.\n- Luke must grow at least 25 hectares of carrots and at least 20 hectares of pumpkins, leading to the constraints: x >= 25 and y >= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\nx + y <= 200\nx >= y\nx <= 2y\nx >= 25\ny >= 20", "canonical": {"objective": [-300.0, -500.0], "constraints": [[1.0, 1.0, 200.0], [-1.0, 1.0, 0.0], [1.0, -2.0, 0.0], [-1.0, 0.0, -25.0], [0.0, -1.0, -20.0]]}, "solution": {"x": 100, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Hectares of carrots planted: Carrots\n- Hectares of pumpkins planted: Pumpkins\n\nConstraints:\n- Total hectares used should not exceed 200:\n  Carrots + Pumpkins <= 200\n- Carrots planted should be more than pumpkins:\n  Carrots > Pumpkins\n- Carrots planted should be at most twice the amount of pumpkins:\n  Carrots <= 2 * Pumpkins\n- At least 25 hectares of carrots:\n  Carrots >= 25\n- At least 20 hectares of pumpkins:\n  Pumpkins >= 20\n\nObjective:\n- Maximize profit (300 dollars per hectare of carrots, 500 dollars per hectare of pumpkins):\n  300 * Carrots + 500 * Pumpkins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # hectares of carrots\nPumpkins = intvar(0, 999999999)  # hectares of pumpkins\n\n# Constraints\nm = Model()\n\n# Total hectares used should not exceed 200:\nm += Carrots + Pumpkins <= 200\n# Carrots planted should be more than pumpkins:\nm += Carrots > Pumpkins\n# Carrots planted should be at most twice the amount of pumpkins:\nm += Carrots <= 2 * Pumpkins\n# At least 25 hectares of carrots:\nm += Carrots >= 25\n# At least 20 hectares of pumpkins:\nm += Pumpkins >= 20\n\n# Objective\n# Maximize profit (300 dollars per hectare of carrots, 500 dollars per hectare of pumpkins):\nm.maximize(300 * Carrots + 500 * Pumpkins)\n", "entities": [{"start": 9, "end": 12, "word": "200", "entity_group": "LIMIT", "score": 0.9996900044503448}, {"start": 22, "end": 31, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994309340168374}, {"start": 40, "end": 47, "word": "carrots", "entity_group": "VAR", "score": 0.9989949031626459}, {"start": 52, "end": 60, "word": "pumpkins", "entity_group": "VAR", "score": 0.9987980048440419}, {"start": 83, "end": 87, "word": "more", "entity_group": "CONST_DIR", "score": 0.9899570029565015}, {"start": 88, "end": 95, "word": "carrots", "entity_group": "VAR", "score": 0.9978632019729119}, {"start": 101, "end": 109, "word": "pumpkins", "entity_group": "VAR", "score": 0.9997057805215976}, {"start": 166, "end": 173, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9955003375108596}, {"start": 174, "end": 179, "word": "twice", "entity_group": "PARAM", "score": 0.9940292493703344}, {"start": 194, "end": 201, "word": "carrots", "entity_group": "VAR", "score": 0.9994830294041585}, {"start": 213, "end": 221, "word": "pumpkins", "entity_group": "VAR", "score": 0.9995746988244278}, {"start": 251, "end": 259, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990974768259984}, {"start": 260, "end": 262, "word": "25", "entity_group": "LIMIT", "score": 0.9997441928906525}, {"start": 275, "end": 282, "word": "carrots", "entity_group": "VAR", "score": 0.9991589102490805}, {"start": 287, "end": 295, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992912984158642}, {"start": 296, "end": 298, "word": "20", "entity_group": "LIMIT", "score": 0.9997590018459986}, {"start": 311, "end": 319, "word": "pumpkins", "entity_group": "VAR", "score": 0.9995241954148681}, {"start": 355, "end": 361, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998932782057087}, {"start": 377, "end": 384, "word": "carrots", "entity_group": "VAR", "score": 0.9994952128873484}, {"start": 390, "end": 393, "word": "300", "entity_group": "PARAM", "score": 0.9993812356474802}, {"start": 402, "end": 408, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999279833551947}, {"start": 424, "end": 432, "word": "pumpkins", "entity_group": "VAR", "score": 0.9993738724394339}, {"start": 438, "end": 441, "word": "500", "entity_group": "PARAM", "score": 0.9995308237607468}, {"start": 494, "end": 502, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999788695694345}, {"start": 503, "end": 509, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999943797906344}]}
{"doc_id": "1735063067", "document": "Robert is a pumpkin seller and he has to transport pumpkins using either trucks or vans. The truck can take 40 pumpkins each and cost $15 per trip. The van can take 25 pumpkins each and cost $10 per trip. Robert has at most $300 to spend on transporting the pumpkins. Due to pollution, the number of trucks must not exceed the number of vans. Formulate an LP to maximize the number of pumpkins that can be transported.", "order_mapping": {"trucks": 0, "vans": 1, "truck": 0, "van": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of pumpkins", "terms": {"truck": "40", "van": "25"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "300", "terms": {"van": "10", "truck": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "trucks", "direction": "must not exceed", "y_var": "vans", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of trips made by trucks\n- y: Number of trips made by vans\n\nObjective:\n- The goal is to maximize the number of pumpkins that can be transported. The truck can take 40 pumpkins each and the van can take 25 pumpkins each. Therefore, the objective function is: Maximize 40x + 25y\n\nConstraints:\n- Robert has at most $300 to spend on transporting the pumpkins, leading to the constraint: 15x + 10y <= 300.\n- Due to pollution, the number of trucks must not exceed the number of vans, resulting in the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 25y\nConstraints:\n15x + 10y <= 300\nx <= y", "canonical": {"objective": [-40.0, -25.0], "constraints": [[15.0, 10.0, 300.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 12, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Number of trucks used: Trucks\n- Number of vans used: Vans\n\nConstraints:\n- Total cost for trucks and vans should not exceed $300:\n  15 * Trucks + 10 * Vans <= 300\n- The number of trucks must not exceed the number of vans:\n  Trucks <= Vans\n\nObjective:\n- Maximize the number of pumpkins transported (40 pumpkins per truck, 25 pumpkins per van):\n  40 * Trucks + 25 * Vans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrucks = intvar(0, 999999999)  # Number of trucks used\nVans = intvar(0, 999999999)  # Number of vans used\n\n# Constraints\nm = Model()\n\n# Total cost should not exceed $300 (Truck costs $15 per trip, Van costs $10 per trip):\nm += 15 * Trucks + 10 * Vans <= 300\n# The number of trucks must not exceed the number of vans:\nm += Trucks <= Vans\n\n# Objective\n# Maximize the number of pumpkins transported (40 pumpkins per truck, 25 pumpkins per van):\nm.maximize(40 * Trucks + 25 * Vans)\n", "entities": [{"start": 12, "end": 19, "word": "pumpkin", "entity_group": "OBJ_NAME", "score": 0.9877613902593015}, {"start": 51, "end": 59, "word": "pumpkins", "entity_group": "OBJ_NAME", "score": 0.9960062774908248}, {"start": 73, "end": 79, "word": "trucks", "entity_group": "VAR", "score": 0.9994809866711172}, {"start": 83, "end": 87, "word": "vans", "entity_group": "VAR", "score": 0.9998328375463339}, {"start": 94, "end": 99, "word": "truck", "entity_group": "VAR", "score": 0.9996481526738985}, {"start": 109, "end": 111, "word": "40", "entity_group": "PARAM", "score": 0.9994332265029259}, {"start": 112, "end": 120, "word": "pumpkins", "entity_group": "OBJ_NAME", "score": 0.9900970990572522}, {"start": 137, "end": 139, "word": "15", "entity_group": "PARAM", "score": 0.9995824403133844}, {"start": 155, "end": 158, "word": "van", "entity_group": "VAR", "score": 0.9992478196280907}, {"start": 168, "end": 170, "word": "25", "entity_group": "PARAM", "score": 0.9996744534283394}, {"start": 171, "end": 179, "word": "pumpkins", "entity_group": "OBJ_NAME", "score": 0.9881862977083208}, {"start": 196, "end": 198, "word": "10", "entity_group": "PARAM", "score": 0.9991034033607095}, {"start": 221, "end": 228, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9962419401362002}, {"start": 231, "end": 234, "word": "300", "entity_group": "LIMIT", "score": 0.9992455331233426}, {"start": 264, "end": 272, "word": "pumpkins", "entity_group": "OBJ_NAME", "score": 0.9988621682901226}, {"start": 308, "end": 314, "word": "trucks", "entity_group": "VAR", "score": 0.9967280345243006}, {"start": 315, "end": 330, "word": "must not exceed", "entity_group": "CONST_DIR", "score": 0.9829089513265132}, {"start": 345, "end": 349, "word": "vans", "entity_group": "VAR", "score": 0.9996994265428892}, {"start": 371, "end": 379, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995658269353181}, {"start": 384, "end": 402, "word": "number of pumpkins", "entity_group": "OBJ_NAME", "score": 0.9903418571573376}]}
{"doc_id": "-1129911621", "document": "You are put on a special diet where you can drink two juices. Prune juice contains 10 grams of vitamin A, 12 grams of vitamin B, 5 grams of fiber, and 15 grams of sugar per cup. Apple juice contains 12 grams of vitamin A, 15 grams of vitamin B, 3 grams of fiber, and 17 grams of sugar per cup. You must consume at least 105 grams of vitamin A and 120 grams of vitamin B. However you can consume at most 80 grams of fiber. How many cups of each juice should you drink to minimize the amount of sugar?", "order_mapping": {"Prune juice": 0, "Apple juice": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of sugar", "terms": {"Prune juice": "15", "Apple juice": "17"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "105", "terms": {"Prune juice": "10", "Apple juice": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "120", "terms": {"Prune juice": "12", "Apple juice": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "80", "terms": {"Prune juice": "5", "Apple juice": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Cups of prune juice\n- y: Cups of apple juice\n\nObjective:\n- The goal is to minimize the amount of sugar consumed. The objective function is: Minimize 15x + 17y (amount of sugar in prune juice and apple juice, respectively)\n\nConstraints:\n- The minimum requirement for vitamin A is 105 grams, leading to the constraint: 10x + 12y >= 105\n- The minimum requirement for vitamin B is 120 grams, leading to the constraint: 12x + 15y >= 120\n- The maximum allowable fiber intake is 80 grams, leading to the constraint: 5x + 3y <= 80\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 15x + 17y\nConstraints:\n10x + 12y >= 105\n12x + 15y >= 120\n5x + 3y <= 80", "canonical": {"objective": [15.0, 17.0], "constraints": [[-10.0, -12.0, -105.0], [-12.0, -15.0, -120.0], [5.0, 3.0, 80.0]]}, "solution": {"x": 1, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of cups of prune juice: PruneJuice\n- Number of cups of apple juice: AppleJuice\n\nConstraints:\n- Vitamin A requirement (at least 105 grams):\n  10 * PruneJuice + 12 * AppleJuice >= 105\n- Vitamin B requirement (at least 120 grams):\n  12 * PruneJuice + 15 * AppleJuice >= 120\n- Fiber limit (at most 80 grams):\n  5 * PruneJuice + 3 * AppleJuice <= 80\n\nObjective:\n- Minimize the amount of sugar (15 grams per cup of prune juice, 17 grams per cup of apple juice):\n  15 * PruneJuice + 17 * AppleJuice\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPruneJuice = intvar(0, 999999999)  # Number of cups of prune juice\nAppleJuice = intvar(0, 999999999)  # Number of cups of apple juice\n\n# Constraints\nm = Model()\n\n# Vitamin A requirement (at least 105 grams):\nm += 10 * PruneJuice + 12 * AppleJuice >= 105\n# Vitamin B requirement (at least 120 grams):\nm += 12 * PruneJuice + 15 * AppleJuice >= 120\n# Fiber limit (at most 80 grams):\nm += 5 * PruneJuice + 3 * AppleJuice <= 80\n\n# Objective\n# Minimize the amount of sugar:\nm.minimize(15 * PruneJuice + 17 * AppleJuice)\n", "entities": [{"start": 63, "end": 74, "word": "Prune juice", "entity_group": "VAR", "score": 0.9999096744716734}, {"start": 84, "end": 86, "word": "10", "entity_group": "PARAM", "score": 0.9996690761149911}, {"start": 108, "end": 110, "word": "12", "entity_group": "PARAM", "score": 0.9997070269266427}, {"start": 132, "end": 133, "word": "5", "entity_group": "PARAM", "score": 0.9997015084951228}, {"start": 155, "end": 157, "word": "15", "entity_group": "PARAM", "score": 0.999599814604029}, {"start": 167, "end": 172, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9971648221265095}, {"start": 183, "end": 194, "word": "Apple juice", "entity_group": "VAR", "score": 0.9999074269808522}, {"start": 204, "end": 206, "word": "12", "entity_group": "PARAM", "score": 0.999591239463992}, {"start": 228, "end": 230, "word": "15", "entity_group": "PARAM", "score": 0.9997070269266441}, {"start": 252, "end": 253, "word": "3", "entity_group": "PARAM", "score": 0.9997015084951244}, {"start": 275, "end": 277, "word": "17", "entity_group": "PARAM", "score": 0.9995998110057764}, {"start": 287, "end": 292, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9972750969127606}, {"start": 320, "end": 328, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987629132710604}, {"start": 329, "end": 332, "word": "105", "entity_group": "LIMIT", "score": 0.9997101021694047}, {"start": 356, "end": 359, "word": "120", "entity_group": "LIMIT", "score": 0.9995940036416323}, {"start": 404, "end": 411, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988113816259169}, {"start": 412, "end": 414, "word": "80", "entity_group": "LIMIT", "score": 0.9997367307683444}, {"start": 480, "end": 488, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993031057934435}, {"start": 493, "end": 508, "word": "amount of sugar", "entity_group": "OBJ_NAME", "score": 0.989642035654344}]}
{"doc_id": "768050241", "document": "A jewelry company produces and sells bracelets and rings. The bracelets are hand-crafted by a team who can make at most 4 bracelets per day. The rings are made by another team who can make at most 7 rings per day. All rings have to be approved by a master jeweler and he can check at most 30 jewels of either type per day. If the profit per bracelet is $700 and the profit per ring is $300, how many of each should the jewelry company make to maximize profit?", "order_mapping": {"bracelets": 0, "rings": 1, "bracelet": 0, "ring": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bracelet": "700", "ring": "300"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "4", "var": "bracelets", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "7", "var": "rings", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bracelets produced per day\n- y: Number of rings produced per day\n\nObjective:\n- The jewelry company aims to maximize its profit. The profit per bracelet is $700 and the profit per ring is $300. Therefore, the objective function is: Maximize 700x + 300y\n\nConstraints:\n- The team can make at most 4 bracelets per day, leading to the constraint: x <= 4.\n- The team can make at most 7 rings per day, leading to the constraint: y <= 7.\n- The master jeweler can check at most 30 jewels of either type per day, resulting in the constraint: x + y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 700x + 300y\nConstraints:\nx <= 4\ny <= 7\nx + y <= 30", "canonical": {"objective": [-700.0, -300.0], "constraints": [[1.0, 0.0, 4.0], [0.0, 1.0, 7.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 4, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of bracelets made per day: Bracelets\n- Number of rings made per day: Rings\n\nConstraints:\n- At most 4 bracelets can be made per day:\n  Bracelets <= 4\n- At most 7 rings can be made per day:\n  Rings <= 7\n- The total number of jewels (bracelets and rings) checked by the master jeweler should not exceed 30 per day:\n  Bracelets + Rings <= 30\n\nObjective:\n- Maximize profit (700 dollars per bracelet, 300 dollars per ring):\n  700 * Bracelets + 300 * Rings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBracelets = intvar(0, 999999999)  # Number of bracelets made per day\nRings = intvar(0, 999999999)  # Number of rings made per day\n\n# Constraints\nm = Model()\n\n# The team can make at most 4 bracelets per day:\nm += Bracelets <= 4\n# Another team can make at most 7 rings per day:\nm += Rings <= 7\n# All jewels (bracelets and rings) checked by the master jeweler should not exceed 30 per day:\nm += Bracelets + Rings <= 30\n\n# Objective\n# Maximize profit (700 dollars per bracelet, 300 dollars per ring):\nm.maximize(700 * Bracelets + 300 * Rings)\n", "entities": [{"start": 37, "end": 46, "word": "bracelets", "entity_group": "VAR", "score": 0.9996645180259814}, {"start": 51, "end": 56, "word": "rings", "entity_group": "VAR", "score": 0.999789830986629}, {"start": 63, "end": 72, "word": "bracelets", "entity_group": "VAR", "score": 0.9994523835457354}, {"start": 115, "end": 122, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991164453262209}, {"start": 123, "end": 124, "word": "4", "entity_group": "LIMIT", "score": 0.9997118371358849}, {"start": 125, "end": 134, "word": "bracelets", "entity_group": "VAR", "score": 0.9986531387650897}, {"start": 149, "end": 154, "word": "rings", "entity_group": "VAR", "score": 0.9993385682739577}, {"start": 193, "end": 200, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991076490132844}, {"start": 201, "end": 202, "word": "7", "entity_group": "LIMIT", "score": 0.999711845991691}, {"start": 203, "end": 208, "word": "rings", "entity_group": "VAR", "score": 0.9986566203287446}, {"start": 223, "end": 228, "word": "rings", "entity_group": "VAR", "score": 0.9991402955840689}, {"start": 286, "end": 293, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986153735242193}, {"start": 294, "end": 296, "word": "30", "entity_group": "LIMIT", "score": 0.999695796907419}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998007164681267}, {"start": 347, "end": 355, "word": "bracelet", "entity_group": "VAR", "score": 0.9995657823882504}, {"start": 361, "end": 364, "word": "700", "entity_group": "PARAM", "score": 0.9993478814005243}, {"start": 373, "end": 379, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688962171445}, {"start": 384, "end": 388, "word": "ring", "entity_group": "VAR", "score": 0.9990888329773515}, {"start": 394, "end": 397, "word": "300", "entity_group": "PARAM", "score": 0.999470741218253}, {"start": 452, "end": 460, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993350363977429}, {"start": 461, "end": 467, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997873425507654}]}
{"doc_id": "-664958047", "document": "Elias Investments is attempting to determine where its assets should be invested during the current year. At present, $2,500,000 is available for investment in gold, silver, platinum, and diamond. The annual rate of return on each type of investment is known to be: gold, 5%; silver, 3.2%; platinum, 7%; diamond, 10%. To ensure that the company's portfolio is not too risky, the investment manager has placed the following three restrictions: a The amount invested in diamond cannot exceed the amount invested in gold. b At most 35% of the total amount invested may be in diamond. c The amount invested in silver cannot exceed the amount invested in platinum. The company\u2019s objective is to maximize the annual return on its investment portfolio. Formulate an LP that will enable the company to meet this goal.", "order_mapping": {"gold": 0, "silver": 1, "platinum": 2, "diamond": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"gold": "5%", "silver": "3.2%", "platinum": "7%", "diamond": "10%"}}, "const_declarations": [{"type": "xy", "x_var": "diamond", "direction": "cannot exceed", "y_var": "gold", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "At most", "limit": "35%", "var": "diamond", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "silver", "direction": "cannot exceed", "y_var": "platinum", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "available", "limit": "2,500,000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in gold\n- y: Dollars invested in silver\n- z: Dollars invested in platinum\n- w: Dollars invested in diamond\n\nObjective:\n- The company aims to maximize its annual return. The annual rate of return on each type of investment is known to be: gold, 5%; silver, 3.2%; platinum, 7%; diamond, 10%. Therefore, the objective function is: Maximize 0.05x + 0.032y + 0.07z + 0.10w\n\nConstraints:\n- The total amount available for investment is $2,500,000, so the constraint is: x + y + z + w <= 2500000.\n- The amount invested in diamond cannot exceed the amount invested in gold, leading to the constraint: w <= x.\n- At most 35% of the total amount invested may be in diamond, leading to the constraint: w <= 0.35(x + y + z + w).\n- The amount invested in silver cannot exceed the amount invested in platinum, resulting in the constraint: y <= z.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.032y + 0.07z + 0.10w\nConstraints:\nx + y + z + w <= 2500000\nw <= x\nw <= 0.35(x + y + z + w)\ny <= z", "canonical": {"objective": [-0.05, -0.032, -0.07, -0.1], "constraints": [[1.0, 1.0, 1.0, 1.0, 2500000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [-0.35, -0.35, -0.35, 0.65, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 875000, "y": 0, "z": 750000, "w": 875000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in gold: Gold\n- Amount invested in silver: Silver\n- Amount invested in platinum: Platinum\n- Amount invested in diamond: Diamond\n\nConstraints:\n- Total amount invested should not exceed $2,500,000:\n  Gold + Silver + Platinum + Diamond <= 2500000\n- The amount invested in diamond cannot exceed the amount invested in gold:\n  Diamond <= Gold\n- At most 35% of the total amount invested may be in diamond:\n  Diamond <= 0.35 * (Gold + Silver + Platinum + Diamond)\n- The amount invested in silver cannot exceed the amount invested in platinum:\n  Silver <= Platinum\n\nObjective:\n- Maximize the annual return on investment (5% for gold, 3.2% for silver, 7% for platinum, 10% for diamond):\n  0.05 * Gold + 0.032 * Silver + 0.07 * Platinum + 0.10 * Diamond\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGold = intvar(0, 999999999)  # Amount invested in gold\nSilver = intvar(0, 999999999)  # Amount invested in silver\nPlatinum = intvar(0, 999999999)  # Amount invested in platinum\nDiamond = intvar(0, 999999999)  # Amount invested in diamond\n\n# Constraints\nm = Model()\n\n# Total amount invested should not exceed $2,500,000:\nm += Gold + Silver + Platinum + Diamond <= 2500000\n# The amount invested in diamond cannot exceed the amount invested in gold:\nm += Diamond <= Gold\n# At most 35% of the total amount invested may be in diamond:\nm += Diamond <= 0.35 * (Gold + Silver + Platinum + Diamond)\n# The amount invested in silver cannot exceed the amount invested in platinum:\nm += Silver <= Platinum\n\n# Objective\n# Maximize the annual return on investment (5% for gold, 3.2% for silver, 7% for platinum, 10% for diamond):\nm.maximize(0.05 * Gold + 0.032 * Silver + 0.07 * Platinum + 0.10 * Diamond)\n", "entities": [{"start": 122, "end": 131, "word": "2,500,000", "entity_group": "LIMIT", "score": 0.9997052563570639}, {"start": 135, "end": 144, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993413123832866}, {"start": 163, "end": 167, "word": "gold", "entity_group": "VAR", "score": 0.9996917746595619}, {"start": 170, "end": 176, "word": "silver", "entity_group": "VAR", "score": 0.9996279625490563}, {"start": 179, "end": 187, "word": "platinum", "entity_group": "VAR", "score": 0.9995975572851329}, {"start": 194, "end": 201, "word": "diamond", "entity_group": "VAR", "score": 0.9990735856900742}, {"start": 223, "end": 229, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9894688094186976}, {"start": 274, "end": 278, "word": "gold", "entity_group": "VAR", "score": 0.9996386742799318}, {"start": 281, "end": 284, "word": "5 %", "entity_group": "PARAM", "score": 0.9912811046674777}, {"start": 287, "end": 293, "word": "silver", "entity_group": "VAR", "score": 0.9986451573189317}, {"start": 296, "end": 301, "word": "3.2 %", "entity_group": "PARAM", "score": 0.9940816371430721}, {"start": 304, "end": 312, "word": "platinum", "entity_group": "VAR", "score": 0.9986451742250424}, {"start": 315, "end": 318, "word": "7 %", "entity_group": "PARAM", "score": 0.9901483445612816}, {"start": 321, "end": 328, "word": "diamond", "entity_group": "VAR", "score": 0.9979616904179717}, {"start": 331, "end": 335, "word": "10 %", "entity_group": "PARAM", "score": 0.9788724496818771}, {"start": 491, "end": 498, "word": "diamond", "entity_group": "VAR", "score": 0.9988588808288413}, {"start": 499, "end": 513, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9776913141258942}, {"start": 537, "end": 541, "word": "gold", "entity_group": "VAR", "score": 0.9995996109736168}, {"start": 546, "end": 553, "word": "At most", "entity_group": "CONST_DIR", "score": 0.9980924738367564}, {"start": 554, "end": 558, "word": "35 %", "entity_group": "LIMIT", "score": 0.9734238544799421}, {"start": 598, "end": 605, "word": "diamond", "entity_group": "VAR", "score": 0.999548566884772}, {"start": 633, "end": 639, "word": "silver", "entity_group": "VAR", "score": 0.9987810057056808}, {"start": 640, "end": 654, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.975093401593339}, {"start": 678, "end": 686, "word": "platinum", "entity_group": "VAR", "score": 0.9995296006897852}, {"start": 720, "end": 728, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9859054366751526}, {"start": 740, "end": 746, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9931194167557053}]}
{"doc_id": "-400376495", "document": "Tom Bakery bakes pancakes and pretzels. A batch of pancakes can be made using 2.5 hours of oven time and 0.5 hours of pastry chef time. A batch of pretzels is more complicated, so while they take 1.5 hours of oven time, they take 3 hours of pastry chef time. In a day, the bakery has at most 65 hours available for the oven and 35 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $25 and $50 respectively for a batch of pancakes and a batch of pretzels.", "order_mapping": {"pancakes": 0, "pretzels": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"pancakes": "25", "pretzels": "50"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "65", "terms": {"pancakes": "2.5", "pretzels": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "35", "terms": {"pancakes": "0.5", "pretzels": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of batches of pancakes\n- y: Number of batches of pretzels\n\nObjective:\n- The bakery aims to maximize its profit. The profit per batch is $25 for pancakes and $50 for pretzels. Therefore, the objective function is: Maximize 25x + 50y\n\nConstraints:\n- The bakery has at most 65 hours available for the oven and 35 pastry chef hours available. The time constraints can be formulated as: 2.5x + 1.5y <= 65 (oven time) and 0.5x + 3y <= 35 (pastry chef time).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25x + 50y\nConstraints:\n2.5x + 1.5y <= 65\n0.5x + 3y <= 35", "canonical": {"objective": [-25.0, -50.0], "constraints": [[2.5, 1.5, 65.0], [0.5, 3.0, 35.0]]}, "solution": {"x": 21, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of batches of pancakes: Pancakes\n- Number of batches of pretzels: Pretzels\n\nConstraints:\n- Oven time should not exceed 65 hours:\n  2.5 * Pancakes + 1.5 * Pretzels <= 65\n- Pastry chef time should not exceed 35 hours:\n  0.5 * Pancakes + 3 * Pretzels <= 35\n\nObjective:\n- Maximize profit ($25 per batch of pancakes and $50 per batch of pretzels):\n  25 * Pancakes + 50 * Pretzels\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPancakes = intvar(0, 999999999)  # Number of batches of pancakes\nPretzels = intvar(0, 999999999)  # Number of batches of pretzels\n\n# Constraints\nm = Model()\n\n# Oven time constraint (at most 65 hours available):\nm += 2.5 * Pancakes + 1.5 * Pretzels <= 65\n# Pastry chef time constraint (at most 35 hours available):\nm += 0.5 * Pancakes + 3 * Pretzels <= 35\n\n# Objective\n# Maximize profit ($25 per batch of pancakes and $50 per batch of pretzels):\nm.maximize(25 * Pancakes + 50 * Pretzels)\n", "entities": [{"start": 17, "end": 25, "word": "pancakes", "entity_group": "VAR", "score": 0.999531149971787}, {"start": 30, "end": 38, "word": "pretzels", "entity_group": "VAR", "score": 0.9993235447354719}, {"start": 52, "end": 60, "word": "pancakes", "entity_group": "VAR", "score": 0.9996309705337131}, {"start": 79, "end": 82, "word": "2.5", "entity_group": "PARAM", "score": 0.9997418519411101}, {"start": 106, "end": 109, "word": "0.5", "entity_group": "PARAM", "score": 0.9996921281244648}, {"start": 149, "end": 157, "word": "pretzels", "entity_group": "VAR", "score": 0.996739116135878}, {"start": 199, "end": 202, "word": "1.5", "entity_group": "PARAM", "score": 0.9997260935003758}, {"start": 234, "end": 235, "word": "3", "entity_group": "PARAM", "score": 0.9996573298750303}, {"start": 290, "end": 297, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998643565102482}, {"start": 298, "end": 300, "word": "65", "entity_group": "LIMIT", "score": 0.9997529970561828}, {"start": 334, "end": 336, "word": "35", "entity_group": "LIMIT", "score": 0.9994268384199043}, {"start": 355, "end": 364, "word": "available", "entity_group": "CONST_DIR", "score": 0.9979162033132587}, {"start": 414, "end": 421, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.98919106457651}, {"start": 422, "end": 428, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999949327843759}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997345415514082}, {"start": 488, "end": 490, "word": "25", "entity_group": "PARAM", "score": 0.9986101411564833}, {"start": 497, "end": 499, "word": "50", "entity_group": "PARAM", "score": 0.9997285019291788}, {"start": 528, "end": 536, "word": "pancakes", "entity_group": "VAR", "score": 0.998930468366678}, {"start": 552, "end": 560, "word": "pretzels", "entity_group": "VAR", "score": 0.9995706201430855}]}
{"doc_id": "-1977229492", "document": "Nolan Center is going to hold a concert and can seat at most 200 people. A profit of $30 is made on each VIP seat ticket and a profit of $14 is made on each general seat ticket. Nolan Center reserves at least 20 seats to be VIP seats. However, because many people find them expensive, at least 4 times as many people prefer sitting in general seats than in VIP seats. How many tickets for each type of seat must be sold in order to maximize profit?", "order_mapping": {"VIP seat": 0, "general seat": 1, "VIP seats": 0, "general seats": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"VIP seat": "30", "general seat": "14"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "VIP seats", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "general seats", "direction": "at least", "param": "4 times", "y_var": "VIP seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of VIP seat tickets sold\n- y: Number of general seat tickets sold\n\nObjective:\n- The goal is to maximize the profit. A profit of $30 is made on each VIP seat ticket and a profit of $14 is made on each general seat ticket. Therefore, the objective function is: Maximize 30x + 14y\n\nConstraints:\n- The venue can seat at most 200 people, so the constraint is: x + y <= 200.\n- At least 20 seats need to be VIP seats, leading to the constraint: x >= 20.\n- At least 4 times as many people prefer sitting in general seats than in VIP seats, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 14y\nConstraints:\nx + y <= 200\nx >= 20\ny >= 4x", "canonical": {"objective": [-30.0, -14.0], "constraints": [[1.0, 1.0, 200.0], [-1.0, 0.0, -20.0], [4.0, -1.0, 0.0]]}, "solution": {"x": 40, "y": 160}, "pseudo_model": "\nDecision Variables:\n- Number of VIP seat tickets sold: VIPSeats\n- Number of general seat tickets sold: GeneralSeats\n\nConstraints:\n- Total number of tickets sold should not exceed 200:\n  VIPSeats + GeneralSeats <= 200\n- At least 20 seats should be reserved as VIP seats:\n  VIPSeats >= 20\n- At least 4 times as many people prefer sitting in general seats than in VIP seats:\n  GeneralSeats >= 4 * VIPSeats\n\nObjective:\n- Maximize profit (30 dollars per VIP seat ticket, 14 dollars per general seat ticket):\n  30 * VIPSeats + 14 * GeneralSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVIPSeats = intvar(0, 999999999)  # Number of VIP seat tickets sold\nGeneralSeats = intvar(0, 999999999)  # Number of general seat tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets sold should not exceed 200:\nm += VIPSeats + GeneralSeats <= 200\n# At least 20 seats should be reserved as VIP seats:\nm += VIPSeats >= 20\n# At least 4 times as many people prefer sitting in general seats than in VIP seats:\nm += GeneralSeats >= 4 * VIPSeats\n\n# Objective\n# Maximize profit (30 dollars per VIP seat ticket, 14 dollars per general seat ticket):\nm.maximize(30 * VIPSeats + 14 * GeneralSeats)\n", "entities": [{"start": 53, "end": 60, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988979440555527}, {"start": 61, "end": 64, "word": "200", "entity_group": "LIMIT", "score": 0.999715395360095}, {"start": 76, "end": 82, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998499262955984}, {"start": 88, "end": 90, "word": "30", "entity_group": "PARAM", "score": 0.9996118843990556}, {"start": 107, "end": 115, "word": "VIP seat", "entity_group": "VAR", "score": 0.9999833492974071}, {"start": 129, "end": 135, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998217739758282}, {"start": 141, "end": 143, "word": "14", "entity_group": "PARAM", "score": 0.9995720140343929}, {"start": 160, "end": 172, "word": "general seat", "entity_group": "VAR", "score": 0.9999368314349241}, {"start": 204, "end": 212, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986495940854457}, {"start": 213, "end": 215, "word": "20", "entity_group": "LIMIT", "score": 0.9997174635836196}, {"start": 228, "end": 237, "word": "VIP seats", "entity_group": "VAR", "score": 0.9999094901858039}, {"start": 292, "end": 300, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997935047494243}, {"start": 301, "end": 308, "word": "4 times", "entity_group": "PARAM", "score": 0.9273108823354481}, {"start": 342, "end": 355, "word": "general seats", "entity_group": "VAR", "score": 0.9996760609341937}, {"start": 364, "end": 373, "word": "VIP seats", "entity_group": "VAR", "score": 0.9998913661599254}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993824169665508}, {"start": 449, "end": 455, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990879682141164}]}
{"doc_id": "73102943", "document": "Maximus Ltd wants to launch a campaign to advertise their new Max product. They can buy ads on billboards, podcasts, and merchandises. The cost for an ad on each as well as the expected viewership is given. On billboards an ad costs $750 and reaches 40000 viewers. On podcasts an ad costs $1000 and reaches 10000 viewers. On merchandises an ad costs $300 and reaches 2000 viewers. The billboard provider limits the number of ads from the same company to 3. In addition, at most 40% of the total number of ads can occur on merchandises and at least 25% should occur on podcasts. If the company has a budget of $20000, how many ads of each type should they purchase to maximize viewership.", "order_mapping": {"billboards": 0, "podcasts": 1, "merchandises": 2, "3": 3, "billboard": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"billboards": "40000", "podcasts": "10000", "merchandises": "2000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "20000", "terms": {"billboards": "750", "podcasts": "1000", "merchandises": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "merchandises", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "25%", "var": "podcasts", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads on billboards\n- y: Number of ads on podcasts\n- z: Number of ads on merchandises\n\nObjective:\n- The company aims to maximize the viewership. The expected viewership for each type of ad is given: billboards reach 40000 viewers, podcasts reach 10000 viewers, and merchandises reach 2000 viewers. Therefore, the objective function is: Maximize 40000x + 10000y + 2000z\n\nConstraints:\n- The company has a budget of $20000, so the cost of the ads should not exceed this amount: 750x + 1000y + 300z <= 20000.\n- The billboard provider limits the number of ads from the same company to 3, leading to the constraint: x <= 3.\n- At most 40% of the total number of ads can occur on merchandises, resulting in the constraint: z <= 0.40(x + y + z).\n- At least 25% of the ads should occur on podcasts, leading to the constraint: y >= 0.25(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40000x + 10000y + 2000z\nConstraints:\n750x + 1000y + 300z <= 20000\nx <= 3\nz <= 0.40(x + y + z)\ny >= 0.25(x + y + z)", "canonical": {"objective": [-40000.0, -10000.0, -2000.0, 0.0], "constraints": [[750.0, 1000.0, 300.0, 0.0, 20000.0], [1.0, 0.0, 0.0, 0.0, 3.0], [-0.4, -0.4, 0.6, 0.0, 0.0], [0.25, -0.75, 0.25, 0.0, 0.0]]}, "solution": {"x": 3, "y": 17, "z": 2, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Number of billboard ads: Billboards\n- Number of podcast ads: Podcasts\n- Number of merchandise ads: Merchandises\n\nConstraints:\n- Total cost should not exceed $20000:\n  750 * Billboards + 1000 * Podcasts + 300 * Merchandises <= 20000\n- Billboard ads are limited to 3:\n  Billboards <= 3\n- At most 40% of the total number of ads can be merchandises:\n  Merchandises <= 0.4 * (Billboards + Podcasts + Merchandises)\n- At least 25% of the total number of ads should be podcasts:\n  Podcasts >= 0.25 * (Billboards + Podcasts + Merchandises)\n\nObjective:\n- Maximize viewership (40000 viewers per billboard ad, 10000 viewers per podcast ad, 2000 viewers per merchandise ad):\n  40000 * Billboards + 10000 * Podcasts + 2000 * Merchandises\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBillboards = intvar(0, 999999999)  # Number of billboard ads\nPodcasts = intvar(0, 999999999)  # Number of podcast ads\nMerchandises = intvar(0, 999999999)  # Number of merchandise ads\n\n# Constraints\nm = Model()\n\n# Budget constraint: total cost should not exceed $20000\nm += 750 * Billboards + 1000 * Podcasts + 300 * Merchandises <= 20000\n# Billboard provider limits the number of ads to 3\nm += Billboards <= 3\n# At most 40% of the total number of ads can be merchandises\nm += Merchandises <= 0.4 * (Billboards + Podcasts + Merchandises)\n# At least 25% of the total number of ads should be podcasts\nm += Podcasts >= 0.25 * (Billboards + Podcasts + Merchandises)\n\n# Objective\n# Maximize viewership (40000 viewers per billboard ad, 10000 viewers per podcast ad, 2000 viewers per merchandise ad)\nm.maximize(40000 * Billboards + 10000 * Podcasts + 2000 * Merchandises)\n", "entities": [{"start": 96, "end": 106, "word": "billboards", "entity_group": "VAR", "score": 0.9995358426708086}, {"start": 109, "end": 117, "word": "podcasts", "entity_group": "VAR", "score": 0.99899078009454}, {"start": 124, "end": 136, "word": "merchandises", "entity_group": "VAR", "score": 0.9997148128597972}, {"start": 215, "end": 225, "word": "billboards", "entity_group": "VAR", "score": 0.9956237482613235}, {"start": 240, "end": 243, "word": "750", "entity_group": "PARAM", "score": 0.9993915509648764}, {"start": 256, "end": 261, "word": "40000", "entity_group": "PARAM", "score": 0.9996817614530986}, {"start": 262, "end": 269, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.982727925042702}, {"start": 275, "end": 283, "word": "podcasts", "entity_group": "VAR", "score": 0.9990186922033014}, {"start": 298, "end": 302, "word": "1000", "entity_group": "PARAM", "score": 0.9993278410227091}, {"start": 315, "end": 320, "word": "10000", "entity_group": "PARAM", "score": 0.999711902980656}, {"start": 321, "end": 328, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.982709292788974}, {"start": 334, "end": 346, "word": "merchandises", "entity_group": "VAR", "score": 0.9990186985450287}, {"start": 361, "end": 364, "word": "300", "entity_group": "PARAM", "score": 0.9993766748430363}, {"start": 377, "end": 381, "word": "2000", "entity_group": "PARAM", "score": 0.9997274489575676}, {"start": 382, "end": 389, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.992640719486927}, {"start": 396, "end": 405, "word": "billboard", "entity_group": "VAR", "score": 0.9991308114923244}, {"start": 415, "end": 425, "word": "limits the", "entity_group": "CONST_DIR", "score": 0.5694979997409538}, {"start": 465, "end": 466, "word": "3", "entity_group": "LIMIT", "score": 0.9994048949694794}, {"start": 483, "end": 490, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989628964183969}, {"start": 491, "end": 495, "word": "40 %", "entity_group": "LIMIT", "score": 0.8955501762437313}, {"start": 536, "end": 548, "word": "merchandises", "entity_group": "VAR", "score": 0.9995212319344781}, {"start": 553, "end": 561, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998490734446281}, {"start": 562, "end": 566, "word": "25 %", "entity_group": "LIMIT", "score": 0.9496847000617631}, {"start": 583, "end": 591, "word": "podcasts", "entity_group": "VAR", "score": 0.9995094706622334}, {"start": 615, "end": 621, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9922813661724456}, {"start": 627, "end": 632, "word": "20000", "entity_group": "LIMIT", "score": 0.9992928624104893}, {"start": 685, "end": 693, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995176596538012}, {"start": 694, "end": 704, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9987611044061561}]}
{"doc_id": "-1982353428", "document": "There is only 3000 grams of black tea available to make earl grey and English breakfast teabags. Each earl grey teabag requires 25 grams of black tea while each English breakfast teabag requires 20 grams of black tea. Due to demand, at least 4 times the amount of earl grey teabags are needed than English breakfast. However, at least 20 English breakfast teabags need to be made. If the profit per earl grey teabag is $0.30 and the profit per English breakfast teabag is $0.25, how many of each should be made to maximize profit?", "order_mapping": {"earl grey": 0, "English breakfast teabags": 1, "earl grey teabag": 0, "English breakfast teabag": 1, "earl grey teabags": 0, "English breakfast": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"earl grey": "0.30", "English breakfast teabag": "0.25"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"English breakfast teabag": "20", "earl grey teabag": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "earl grey teabags", "direction": "at least", "param": "4 times", "y_var": "English breakfast", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "English breakfast teabags", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of earl grey teabags\n- y: Number of English breakfast teabags\n\nObjective:\n- The goal is to maximize the profit. The profit per earl grey teabag is $0.30 and the profit per English breakfast teabag is $0.25. Therefore, the objective function is: Maximize 0.30x + 0.25y\n\nConstraints:\n- There are only 3000 grams of black tea available, and each earl grey teabag requires 25 grams of black tea while each English breakfast teabag requires 20 grams of black tea. This leads to the constraint: 25x + 20y <= 3000.\n- At least 4 times the amount of earl grey teabags are needed than English breakfast teabags, resulting in the constraint: x >= 4y.\n- At least 20 English breakfast teabags need to be made, leading to the constraint: y >= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.30x + 0.25y\nConstraints:\n25x + 20y <= 3000\nx >= 4y\ny >= 20", "canonical": {"objective": [-0.3, -0.25], "constraints": [[25.0, 20.0, 3000.0], [-1.0, 4.0, 0.0], [0.0, -1.0, -20.0]]}, "solution": {"x": 100, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of earl grey teabags made: EarlGreyTeabags\n- Number of English breakfast teabags made: EnglishBreakfastTeabags\n\nConstraints:\n- Total weight of black tea used should not exceed 3000 grams (25 grams per earl grey teabag, 20 grams per English breakfast teabag):\n  25 * EarlGreyTeabags + 20 * EnglishBreakfastTeabags <= 3000\n- At least 4 times the amount of earl grey teabags are needed than English breakfast:\n  EarlGreyTeabags >= 4 * EnglishBreakfastTeabags\n- At least 20 English breakfast teabags need to be made:\n  EnglishBreakfastTeabags >= 20\n\nObjective:\n- Maximize profit (0.30 dollars per earl grey teabag, 0.25 dollars per English breakfast teabag):\n  0.30 * EarlGreyTeabags + 0.25 * EnglishBreakfastTeabags\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEarlGreyTeabags = intvar(0, 999999999)  # Number of earl grey teabags made\nEnglishBreakfastTeabags = intvar(0, 999999999)  # Number of English breakfast teabags made\n\n# Constraints\nm = Model()\n\n# Total weight of black tea used should not exceed 3000 grams:\nm += 25 * EarlGreyTeabags + 20 * EnglishBreakfastTeabags <= 3000\n# At least 4 times the amount of earl grey teabags are needed than English breakfast:\nm += EarlGreyTeabags >= 4 * EnglishBreakfastTeabags\n# At least 20 English breakfast teabags need to be made:\nm += EnglishBreakfastTeabags >= 20\n\n# Objective\n# Maximize profit (0.30 dollars per earl grey teabag, 0.25 dollars per English breakfast teabag):\nm.maximize(0.30 * EarlGreyTeabags + 0.25 * EnglishBreakfastTeabags)\n", "entities": [{"start": 14, "end": 18, "word": "3000", "entity_group": "LIMIT", "score": 0.9997437017511029}, {"start": 38, "end": 47, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993993394735948}, {"start": 56, "end": 65, "word": "earl grey", "entity_group": "VAR", "score": 0.9998827826894092}, {"start": 70, "end": 95, "word": "English breakfast teabags", "entity_group": "VAR", "score": 0.9983047803683714}, {"start": 103, "end": 119, "word": "earl grey teabag", "entity_group": "VAR", "score": 0.9988761029344149}, {"start": 129, "end": 131, "word": "25", "entity_group": "PARAM", "score": 0.9995324167911949}, {"start": 162, "end": 186, "word": "English breakfast teabag", "entity_group": "VAR", "score": 0.9983981348654025}, {"start": 196, "end": 198, "word": "20", "entity_group": "PARAM", "score": 0.9995334311932716}, {"start": 236, "end": 244, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998405737709229}, {"start": 245, "end": 252, "word": "4 times", "entity_group": "PARAM", "score": 0.8460199903092814}, {"start": 267, "end": 284, "word": "earl grey teabags", "entity_group": "VAR", "score": 0.9974978991478047}, {"start": 301, "end": 318, "word": "English breakfast", "entity_group": "VAR", "score": 0.9998916366418032}, {"start": 331, "end": 339, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990619525242413}, {"start": 340, "end": 342, "word": "20", "entity_group": "LIMIT", "score": 0.9996404671308785}, {"start": 343, "end": 368, "word": "English breakfast teabags", "entity_group": "VAR", "score": 0.9991064476061444}, {"start": 394, "end": 400, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998693394106276}, {"start": 405, "end": 414, "word": "earl grey", "entity_group": "VAR", "score": 0.9999537121185288}, {"start": 427, "end": 431, "word": "0.30", "entity_group": "PARAM", "score": 0.9990503521786499}, {"start": 440, "end": 446, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999140888626123}, {"start": 451, "end": 475, "word": "English breakfast teabag", "entity_group": "VAR", "score": 0.9976377641575598}, {"start": 481, "end": 485, "word": "0.25", "entity_group": "PARAM", "score": 0.9996867803162371}, {"start": 523, "end": 531, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 532, "end": 538, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-2083631303", "document": "A city planner has 120 acres of land on which he can build solar panels and windmills. Per acre of solar panels, 20 units of resources are required. Per acre of windmills, 40 units of resources are required. However, the city planner only has 2000 units of resources available. If the savings per acre of solar panels is $500 and the profit per acre of windmills is $1000, how many acres of each should be built to maximize savings?", "order_mapping": {"solar panels": 0, "windmills": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "savings", "terms": {"solar panels": "500", "windmills": "1000"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "120", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"solar panels": "20", "windmills": "40"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land for solar panels\n- y: Acres of land for windmills\n\nObjective:\n- The city planner wants to maximize the savings. The savings per acre of solar panels is $500 and the profit per acre of windmills is $1000. Therefore, the objective function is: Maximize 500x + 1000y\n\nConstraints:\n- The city planner has 120 acres of land available, so the constraint is: x + y <= 120.\n- The total available resources are 2000 units, and per acre of solar panels, 20 units of resources are required, and per acre of windmills, 40 units of resources are required. This leads to the constraint: 20x + 40y <= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 1000y\nConstraints:\nx + y <= 120\n20x + 40y <= 2000", "canonical": {"objective": [-500.0, -1000.0], "constraints": [[1.0, 1.0, 120.0], [20.0, 40.0, 2000.0]]}, "solution": {"x": 100, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of acres of solar panels: SolarPanels\n- Number of acres of windmills: Windmills\n\nConstraints:\n- Total acres used should not exceed 120:\n  SolarPanels + Windmills <= 120\n- Total resources used should not exceed 2000 units (20 units per acre of solar panels, 40 units per acre of windmills):\n  20 * SolarPanels + 40 * Windmills <= 2000\n\nObjective:\n- Maximize savings (500 dollars per acre of solar panels, 1000 dollars per acre of windmills):\n  500 * SolarPanels + 1000 * Windmills\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSolarPanels = intvar(0, 999999999)  # Number of acres of solar panels\nWindmills = intvar(0, 999999999)  # Number of acres of windmills\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 120:\nm += SolarPanels + Windmills <= 120\n# Total resources used should not exceed 2000 units (20 units per acre of solar panels, 40 units per acre of windmills):\nm += 20 * SolarPanels + 40 * Windmills <= 2000\n\n# Objective\n# Maximize savings (500 dollars per acre of solar panels, 1000 dollars per acre of windmills):\nm.maximize(500 * SolarPanels + 1000 * Windmills)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.9949739493268037}, {"start": 19, "end": 22, "word": "120", "entity_group": "LIMIT", "score": 0.9988021375224867}, {"start": 59, "end": 71, "word": "solar panels", "entity_group": "VAR", "score": 0.9999722907083689}, {"start": 76, "end": 85, "word": "windmills", "entity_group": "VAR", "score": 0.9997960226594317}, {"start": 100, "end": 112, "word": "solar panels", "entity_group": "VAR", "score": 0.9998574385674786}, {"start": 115, "end": 117, "word": "20", "entity_group": "PARAM", "score": 0.9996454008939847}, {"start": 164, "end": 173, "word": "windmills", "entity_group": "VAR", "score": 0.9991229711322919}, {"start": 176, "end": 178, "word": "40", "entity_group": "PARAM", "score": 0.9996565905608915}, {"start": 249, "end": 253, "word": "2000", "entity_group": "LIMIT", "score": 0.9997496006916902}, {"start": 273, "end": 282, "word": "available", "entity_group": "CONST_DIR", "score": 0.9984116742030292}, {"start": 292, "end": 299, "word": "savings", "entity_group": "OBJ_NAME", "score": 0.9965241886953051}, {"start": 312, "end": 324, "word": "solar panels", "entity_group": "VAR", "score": 0.99996661554911}, {"start": 330, "end": 333, "word": "500", "entity_group": "PARAM", "score": 0.9995655027720425}, {"start": 342, "end": 348, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995193429329013}, {"start": 361, "end": 370, "word": "windmills", "entity_group": "VAR", "score": 0.9993738723588804}, {"start": 376, "end": 380, "word": "1000", "entity_group": "PARAM", "score": 0.9995941661892181}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998567803098599}, {"start": 434, "end": 441, "word": "savings", "entity_group": "OBJ_NAME", "score": 0.9990208069880991}]}
{"doc_id": "-907072760", "document": "A bubble tea store sells two products: almond bubble tea and ginger bubble tea. The store makes x1 bottles of almond bubble tea a day at a profit of $5 each and x2 bottles of ginger bubble tea a day at a profit of $9 each. (x1 and x2 are unknowns and they both must be greater than or equal to 0). Currently, the demand is limited to at most 120 bottles of almond bubble tea per day and at most 200 bottles of ginger bubble tea per day. Also, the store can make a maximum of 300 bottles of bubble tea (ignoring the type) per day. How many of each bubble tea should be made to maximize profit?", "order_mapping": {"almond bubble tea": 0, "ginger bubble tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"almond bubble tea": "5", "ginger bubble tea": "9"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "120", "var": "almond bubble tea", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "200", "var": "ginger bubble tea", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "300", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of bottles of almond bubble tea made per day\n- x2: Number of bottles of ginger bubble tea made per day\n\nObjective:\n- The store aims to maximize its profit. The profit from each bottle of almond bubble tea is $5 and from each bottle of ginger bubble tea is $9. Therefore, the objective function is: Maximize 5x1 + 9x2\n\nConstraints:\n- The demand for almond bubble tea is limited to at most 120 bottles per day, leading to the constraint: x1 <= 120.\n- The demand for ginger bubble tea is limited to at most 200 bottles per day, leading to the constraint: x2 <= 200.\n- The total number of bottles of bubble tea made per day is limited to at most 300, leading to the constraint: x1 + x2 <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x1 + 9x2\nConstraints:\nx1 <= 120\nx2 <= 200\nx1 + x2 <= 300", "canonical": {"objective": [-5.0, -9.0], "constraints": [[1.0, 0.0, 120.0], [0.0, 1.0, 200.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 100, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of almond bubble tea bottles made per day: AlmondBubbleTea\n- Number of ginger bubble tea bottles made per day: GingerBubbleTea\n\nConstraints:\n- Total number of almond and ginger bubble tea bottles made should not exceed 300 per day:\n  AlmondBubbleTea + GingerBubbleTea <= 300\n- At most 120 bottles of almond bubble tea per day:\n  AlmondBubbleTea <= 120\n- At most 200 bottles of ginger bubble tea per day:\n  GingerBubbleTea <= 200\n\nObjective:\n- Maximize profit (5 dollars per almond bubble tea bottle, 9 dollars per ginger bubble tea bottle):\n  5 * AlmondBubbleTea + 9 * GingerBubbleTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlmondBubbleTea = intvar(0, 999999999)  # Number of almond bubble tea bottles made per day\nGingerBubbleTea = intvar(0, 999999999)  # Number of ginger bubble tea bottles made per day\n\n# Constraints\nm = Model()\n\n# Total number of almond and ginger bubble tea bottles made should not exceed 300 per day:\nm += AlmondBubbleTea + GingerBubbleTea <= 300\n# Number of almond bubble tea bottles made should be at most 120 per day:\nm += AlmondBubbleTea <= 120\n# Number of ginger bubble tea bottles made should be at most 200 per day:\nm += GingerBubbleTea <= 200\n\n# Objective\n# Maximize profit (5 dollars per almond bubble tea bottle, 9 dollars per ginger bubble tea bottle):\nm.maximize(5 * AlmondBubbleTea + 9 * GingerBubbleTea)\n", "entities": [{"start": 40, "end": 57, "word": "almond bubble tea", "entity_group": "VAR", "score": 0.9990932959815357}, {"start": 62, "end": 79, "word": "ginger bubble tea", "entity_group": "VAR", "score": 0.9974995143004899}, {"start": 112, "end": 129, "word": "almond bubble tea", "entity_group": "VAR", "score": 0.9988059581609066}, {"start": 141, "end": 147, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999089194349732}, {"start": 153, "end": 154, "word": "5", "entity_group": "PARAM", "score": 0.9994272327990226}, {"start": 178, "end": 195, "word": "ginger bubble tea", "entity_group": "VAR", "score": 0.9983792606375751}, {"start": 207, "end": 213, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9984042301433144}, {"start": 219, "end": 220, "word": "9", "entity_group": "PARAM", "score": 0.9990072761444915}, {"start": 343, "end": 350, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987013631970011}, {"start": 351, "end": 354, "word": "120", "entity_group": "LIMIT", "score": 0.9997376953241244}, {"start": 366, "end": 383, "word": "almond bubble tea", "entity_group": "VAR", "score": 0.9994436069443549}, {"start": 396, "end": 403, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984179231824974}, {"start": 404, "end": 407, "word": "200", "entity_group": "LIMIT", "score": 0.9997321970954242}, {"start": 419, "end": 436, "word": "ginger bubble tea", "entity_group": "VAR", "score": 0.997456298671265}, {"start": 475, "end": 482, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9963441487732835}, {"start": 486, "end": 489, "word": "300", "entity_group": "LIMIT", "score": 0.9997303410414149}, {"start": 590, "end": 598, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9979290162779948}, {"start": 599, "end": 605, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996256445186138}]}
{"doc_id": "-974682365", "document": "A Japanese ramen restaurant sells two bowls of ramen. Shio ramen requires 2 eggs and 1 slice of pork. Shoyu ramen requires 1 egg and 2 slices of pork. The store has available 100 eggs and 60 slices of pork. Formulate an LP to maximize the number of bowls of either type that can be made.", "order_mapping": {"Shio ramen": 0, "Shoyu ramen": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of bowls", "vars": ["Shio ramen", "Shoyu ramen"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"Shio ramen": "2", "Shoyu ramen": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60", "terms": {"Shio ramen": "1", "Shoyu ramen": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bowls of Shio ramen\n- y: Number of bowls of Shoyu ramen\n\nObjective:\n- The objective is to maximize the total number of bowls of either type that can be made (x + y).\n\nConstraints:\n- The store has 100 eggs available, and Shio ramen requires 2 eggs and Shoyu ramen requires 1 egg. This leads to the constraint: 2x + y <= 100.\n- The store has 60 slices of pork available, and Shio ramen requires 1 slice of pork and Shoyu ramen requires 2 slices of pork. This results in the constraint: x + 2y <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + y\nConstraints:\n2x + y <= 100\nx + 2y <= 60", "canonical": {"objective": [-1.0, -1.0], "constraints": [[2.0, 1.0, 100.0], [1.0, 2.0, 60.0]]}, "solution": {"x": 47, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of Shio ramen bowls made: ShioRamen\n- Number of Shoyu ramen bowls made: ShoyuRamen\n\nConstraints:\n- Total eggs used for Shio and Shoyu ramen should not exceed 100 (Shio uses 2 eggs, Shoyu uses 1 egg):\n  2 * ShioRamen + 1 * ShoyuRamen <= 100\n- Total pork slices used for Shio and Shoyu ramen should not exceed 60 (Shio uses 1 slice, Shoyu uses 2 slices):\n  1 * ShioRamen + 2 * ShoyuRamen <= 60\n\nObjective:\n- Maximize the total number of ramen bowls made (Shio + Shoyu):\n  ShioRamen + ShoyuRamen\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShioRamen = intvar(0, 999999999)  # Number of Shio ramen bowls\nShoyuRamen = intvar(0, 999999999)  # Number of Shoyu ramen bowls\n\n# Constraints\nm = Model()\n\n# The store has available 100 eggs:\nm += 2 * ShioRamen + 1 * ShoyuRamen <= 100\n# The store has available 60 slices of pork:\nm += 1 * ShioRamen + 2 * ShoyuRamen <= 60\n\n# Objective\n# Maximize the number of bowls of either type that can be made:\nm.maximize(ShioRamen + ShoyuRamen)\n", "entities": [{"start": 38, "end": 43, "word": "bowls", "entity_group": "OBJ_NAME", "score": 0.9978134164291337}, {"start": 55, "end": 65, "word": "Shio ramen", "entity_group": "VAR", "score": 0.9999479900382083}, {"start": 75, "end": 76, "word": "2", "entity_group": "PARAM", "score": 0.9994647596765974}, {"start": 86, "end": 87, "word": "1", "entity_group": "PARAM", "score": 0.9974602222772134}, {"start": 104, "end": 115, "word": "Shoyu ramen", "entity_group": "VAR", "score": 0.9999371183044833}, {"start": 125, "end": 126, "word": "1", "entity_group": "PARAM", "score": 0.9986586323827151}, {"start": 135, "end": 136, "word": "2", "entity_group": "PARAM", "score": 0.9989632301458853}, {"start": 168, "end": 177, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982938787355344}, {"start": 178, "end": 181, "word": "100", "entity_group": "LIMIT", "score": 0.9992817234126988}, {"start": 191, "end": 193, "word": "60", "entity_group": "LIMIT", "score": 0.9994164357844193}, {"start": 230, "end": 238, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995246689617657}, {"start": 243, "end": 258, "word": "number of bowls", "entity_group": "OBJ_NAME", "score": 0.9733089369346438}]}
{"doc_id": "1890638854", "document": "A furniture company makes two types of tables: regular tables and standing tables. Different sections of the factory with different teams produce each table. Team A can produce at most 25 regular tables per day while team B can produce at most 50 standing tables per day. Both teams require the use of the same woodworking machine and this machine can make at most 60 total tables. Each regular table generates a profit of $150 while each standing table generates a profit of $180. How many of each table should be made to maximize the company's profit?", "order_mapping": {"regular tables": 0, "standing tables": 1, "regular table": 0, "standing table": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular table": "150", "standing table": "180"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "25", "var": "regular tables", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "standing tables", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "60", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular tables\n- y: Number of standing tables\n\nObjective:\n- The company aims to maximize its profit. Each regular table generates a profit of $150 while each standing table generates a profit of $180. Therefore, the objective function is: Maximize 150x + 180y\n\nConstraints:\n- Team A can produce at most 25 regular tables per day, leading to the constraint: x <= 25.\n- Team B can produce at most 50 standing tables per day, leading to the constraint: y <= 50.\n- The woodworking machine can make at most 60 total tables, resulting in the constraint: x + y <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 180y\nConstraints:\nx <= 25\ny <= 50\nx + y <= 60", "canonical": {"objective": [-150.0, -180.0], "constraints": [[1.0, 0.0, 25.0], [0.0, 1.0, 50.0], [1.0, 1.0, 60.0]]}, "solution": {"x": 10, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of regular tables made per day: RegularTables\n- Number of standing tables made per day: StandingTables\n\nConstraints:\n- Team A can produce at most 25 regular tables per day:\n  RegularTables <= 25\n- Team B can produce at most 50 standing tables per day:\n  StandingTables <= 50\n- The woodworking machine can make at most 60 total tables per day:\n  RegularTables + StandingTables <= 60\n\nObjective:\n- Maximize profit (150 dollars per regular table, 180 dollars per standing table):\n  150 * RegularTables + 180 * StandingTables\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularTables = intvar(0, 999999999)  # Number of regular tables made per day\nStandingTables = intvar(0, 999999999)  # Number of standing tables made per day\n\n# Constraints\nm = Model()\n\n# Team A can produce at most 25 regular tables per day:\nm += RegularTables <= 25\n# Team B can produce at most 50 standing tables per day:\nm += StandingTables <= 50\n# The woodworking machine can make at most 60 total tables per day:\nm += RegularTables + StandingTables <= 60\n\n# Objective\n# Maximize profit (150 dollars per regular table, 180 dollars per standing table):\nm.maximize(150 * RegularTables + 180 * StandingTables)\n", "entities": [{"start": 48, "end": 62, "word": "regular tables", "entity_group": "VAR", "score": 0.9999544884519215}, {"start": 67, "end": 82, "word": "standing tables", "entity_group": "VAR", "score": 0.9999728440564475}, {"start": 180, "end": 187, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986839478487374}, {"start": 188, "end": 190, "word": "25", "entity_group": "LIMIT", "score": 0.9994857696809886}, {"start": 191, "end": 205, "word": "regular tables", "entity_group": "VAR", "score": 0.9999416195158833}, {"start": 239, "end": 246, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982640272902469}, {"start": 247, "end": 249, "word": "50", "entity_group": "LIMIT", "score": 0.9992807947952712}, {"start": 250, "end": 265, "word": "standing tables", "entity_group": "VAR", "score": 0.9998916378818117}, {"start": 361, "end": 368, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983099647570982}, {"start": 369, "end": 371, "word": "60", "entity_group": "LIMIT", "score": 0.9995913875177151}, {"start": 392, "end": 405, "word": "regular table", "entity_group": "VAR", "score": 0.9999842908539708}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999925079994319}, {"start": 430, "end": 433, "word": "150", "entity_group": "PARAM", "score": 0.9988608942080445}, {"start": 445, "end": 459, "word": "standing table", "entity_group": "VAR", "score": 0.9999789476497224}, {"start": 472, "end": 478, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999110368963269}, {"start": 484, "end": 487, "word": "180", "entity_group": "PARAM", "score": 0.9994548705449066}, {"start": 531, "end": 539, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999697349096789}, {"start": 555, "end": 561, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999703056526286}]}
{"doc_id": "-1181361842", "document": "Party Supplies Ltd plans to sell superhero costumes and fantasy costumes for Halloween. It takes 20 minutes to make a superhero costume and 15 minutes to make a fantasy costume. Based on market research, the company should make at least 3 times as many fantasy costumes as superhero costumes. The company has about 3000 minutes available to make the costumes. If the profit per superhero costume is $24 and the profit per fantasy costume is $32, how many of each should they make to maximize its total profit?", "order_mapping": {"superhero costumes": 0, "fantasy costumes": 1, "superhero costume": 0, "fantasy costume": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total profit", "terms": {"superhero costume": "24", "fantasy costume": "32"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"superhero costume": "20", "fantasy costume": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "fantasy costumes", "direction": "at least", "param": "3 times", "y_var": "superhero costumes", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of superhero costumes\n- y: Number of fantasy costumes\n\nObjective:\n- Party Supplies Ltd aims to maximize its total profit. The profit per superhero costume is $24 and the profit per fantasy costume is $32. Therefore, the objective function is: Maximize 24x + 32y\n\nConstraints:\n- The company has about 3000 minutes available to make the costumes. It takes 20 minutes to make a superhero costume and 15 minutes to make a fantasy costume, leading to the constraint: 20x + 15y <= 3000.\n- Based on market research, the company should make at least 3 times as many fantasy costumes as superhero costumes, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 24x + 32y\nConstraints:\n20x + 15y <= 3000\ny >= 3x", "canonical": {"objective": [-24.0, -32.0], "constraints": [[20.0, 15.0, 3000.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 0, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of superhero costumes made: SuperheroCostumes\n- Number of fantasy costumes made: FantasyCostumes\n\nConstraints:\n- Total time to make costumes should not exceed 3000 minutes (20 minutes per superhero costume, 15 minutes per fantasy costume):\n  20 * SuperheroCostumes + 15 * FantasyCostumes <= 3000\n- Make at least 3 times as many fantasy costumes as superhero costumes:\n  FantasyCostumes >= 3 * SuperheroCostumes\n\nObjective:\n- Maximize total profit ($24 profit per superhero costume, $32 profit per fantasy costume):\n  24 * SuperheroCostumes + 32 * FantasyCostumes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSuperheroCostumes = intvar(0, 999999999)  # Number of superhero costumes made\nFantasyCostumes = intvar(0, 999999999)  # Number of fantasy costumes made\n\n# Constraints\nm = Model()\n\n# The company has about 3000 minutes available to make the costumes:\nm += 20 * SuperheroCostumes + 15 * FantasyCostumes <= 3000\n# The company should make at least 3 times as many fantasy costumes as superhero costumes:\nm += FantasyCostumes >= 3 * SuperheroCostumes\n\n# Objective\n# Maximize total profit ($24 profit per superhero costume, $32 profit per fantasy costume):\nm.maximize(24 * SuperheroCostumes + 32 * FantasyCostumes)\n", "entities": [{"start": 33, "end": 51, "word": "superhero costumes", "entity_group": "VAR", "score": 0.9999349017455244}, {"start": 56, "end": 72, "word": "fantasy costumes", "entity_group": "VAR", "score": 0.9999814710503161}, {"start": 98, "end": 100, "word": "20", "entity_group": "PARAM", "score": 0.9996637726951842}, {"start": 119, "end": 136, "word": "superhero costume", "entity_group": "VAR", "score": 0.9992120089856759}, {"start": 141, "end": 143, "word": "15", "entity_group": "PARAM", "score": 0.9996391699594606}, {"start": 162, "end": 177, "word": "fantasy costume", "entity_group": "VAR", "score": 0.9999175611493131}, {"start": 231, "end": 239, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981826993691009}, {"start": 240, "end": 241, "word": "3", "entity_group": "PARAM", "score": 0.9977925811138927}, {"start": 256, "end": 272, "word": "fantasy costumes", "entity_group": "VAR", "score": 0.9999598726221888}, {"start": 276, "end": 294, "word": "superhero costumes", "entity_group": "VAR", "score": 0.9999792190844643}, {"start": 319, "end": 323, "word": "3000", "entity_group": "LIMIT", "score": 0.9995199315371406}, {"start": 332, "end": 341, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991998517643815}, {"start": 372, "end": 378, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999331423784014}, {"start": 383, "end": 400, "word": "superhero costume", "entity_group": "VAR", "score": 0.9999470068711823}, {"start": 406, "end": 408, "word": "24", "entity_group": "PARAM", "score": 0.9996126246185213}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384728319131}, {"start": 428, "end": 443, "word": "fantasy costume", "entity_group": "VAR", "score": 0.9999447164715608}, {"start": 449, "end": 451, "word": "32", "entity_group": "PARAM", "score": 0.9996757917060993}, {"start": 491, "end": 499, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994091915397798}, {"start": 504, "end": 516, "word": "total profit", "entity_group": "OBJ_NAME", "score": 0.9774820650503222}]}
{"doc_id": "636857111", "document": "A man insists he can meet his carbohydrate and protein requirements from eating beans and cereal. He wants to get at least 300 g of carbohydrates and 150 g of protein. Each serving of beans contains 50 g of carbohydrates and 20 g of protein while each serving of cereal contains 30 g of carbohydrates and 5 g of protein. If the cost per serving of beans is $2 and the cost per serving of cereal is $1, how many of each should he eat to meet his requirements at minimum cost?", "order_mapping": {"beans": 0, "cereal": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"beans": "2", "cereal": "1"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "300", "terms": {"beans": "50", "cereal": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"beans": "20", "cereal": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of beans\n- y: Number of servings of cereal\n\nObjective:\n- The man wants to minimize his cost while meeting his carbohydrate and protein requirements. The cost per serving of beans is $2 and the cost per serving of cereal is $1. Therefore, the objective function is: Minimize 2x + y\n\nConstraints:\n- He needs to get at least 300 g of carbohydrates, which can be represented as: 50x + 30y >= 300\n- He also needs at least 150 g of protein, which can be represented as: 20x + 5y >= 150\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + y\nConstraints:\n50x + 30y >= 300\n20x + 5y >= 150", "canonical": {"objective": [2.0, 1.0], "constraints": [[-50.0, -30.0, -300.0], [-20.0, -5.0, -150.0]]}, "solution": {"x": 7, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of servings of beans: Beans\n- Number of servings of cereal: Cereal\n\nConstraints:\n- To meet at least 300g of carbohydrates:\n  50 * Beans + 30 * Cereal >= 300\n- To meet at least 150g of protein:\n  20 * Beans + 5 * Cereal >= 150\n\nObjective:\n- Minimize cost (2 dollars per serving of beans and 1 dollar per serving of cereal):\n  2 * Beans + 1 * Cereal\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeans = intvar(0, 999999999)  # Number of servings of beans\nCereal = intvar(0, 999999999)  # Number of servings of cereal\n\n# Constraints\nm = Model()\n\n# Carbohydrates requirement (at least 300g):\nm += 50 * Beans + 30 * Cereal >= 300\n# Protein requirement (at least 150g):\nm += 20 * Beans + 5 * Cereal >= 150\n\n# Objective\n# Minimize cost ($2 per serving of beans and $1 per serving of cereal):\nm.minimize(2 * Beans + 1 * Cereal)\n", "entities": [{"start": 80, "end": 85, "word": "beans", "entity_group": "VAR", "score": 0.9984893564588699}, {"start": 90, "end": 96, "word": "cereal", "entity_group": "VAR", "score": 0.9990687949627741}, {"start": 115, "end": 123, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986990765868506}, {"start": 124, "end": 127, "word": "300", "entity_group": "LIMIT", "score": 0.9991617081654229}, {"start": 151, "end": 154, "word": "150", "entity_group": "LIMIT", "score": 0.9991857220690086}, {"start": 186, "end": 191, "word": "beans", "entity_group": "VAR", "score": 0.9991777266220428}, {"start": 201, "end": 203, "word": "50", "entity_group": "PARAM", "score": 0.9993423588024295}, {"start": 227, "end": 229, "word": "20", "entity_group": "PARAM", "score": 0.9995619720995738}, {"start": 265, "end": 271, "word": "cereal", "entity_group": "VAR", "score": 0.9989381337405417}, {"start": 281, "end": 283, "word": "30", "entity_group": "PARAM", "score": 0.9994778533282632}, {"start": 307, "end": 308, "word": "5", "entity_group": "PARAM", "score": 0.9992005911356753}, {"start": 331, "end": 335, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984173646064858}, {"start": 351, "end": 356, "word": "beans", "entity_group": "VAR", "score": 0.9994481868636627}, {"start": 362, "end": 363, "word": "2", "entity_group": "PARAM", "score": 0.999243332730544}, {"start": 372, "end": 376, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987418175771295}, {"start": 392, "end": 398, "word": "cereal", "entity_group": "VAR", "score": 0.9988965392928932}, {"start": 404, "end": 405, "word": "1", "entity_group": "PARAM", "score": 0.9994830909854383}, {"start": 467, "end": 474, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9938479539244452}, {"start": 475, "end": 479, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9980998499139099}]}
{"doc_id": "1200650324", "document": "A sign company makes signs by hand. They make LED signs and neon signs. The LED signs are made by team A and they can make at most 3 a day. The neon signs are made by team B and they can make at most 4 a day. All signs have to be quality checked by a senior QC inspector and he can check at most 7 signs total a day. If the profit per LED sign is $1500 and the profit per neon sign is $1450, how many of each sign should be made to maximize profit?", "order_mapping": {"LED signs": 0, "neon signs": 1, "LED sign": 0, "neon sign": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"LED sign": "1500", "neon sign": "1450"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "3", "var": "LED signs", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "7", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "4", "var": "neon signs", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of LED signs made\n- y: Number of neon signs made\n\nObjective:\n- The sign company aims to maximize its profit. The profit per LED sign is $1500 and the profit per neon sign is $1450. Therefore, the objective function is: Maximize 1500x + 1450y\n\nConstraints:\n- Team A can make at most 3 LED signs a day, leading to the constraint: x <= 3.\n- Team B can make at most 4 neon signs a day, leading to the constraint: y <= 4.\n- The senior QC inspector can check at most 7 signs total a day, resulting in the constraint: x + y <= 7.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1500x + 1450y\nConstraints:\nx <= 3\ny <= 4\nx + y <= 7", "canonical": {"objective": [-1500.0, -1450.0], "constraints": [[1.0, 0.0, 3.0], [0.0, 1.0, 4.0], [1.0, 1.0, 7.0]]}, "solution": {"x": 3, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of LED signs made per day: LEDSigns\n- Number of neon signs made per day: NeonSigns\n\nConstraints:\n- Team A can make at most 3 LED signs a day:\n  LEDSigns <= 3\n- Team B can make at most 4 neon signs a day:\n  NeonSigns <= 4\n- The senior QC inspector can check at most 7 signs total a day:\n  LEDSigns + NeonSigns <= 7\n\nObjective:\n- Maximize profit ($1500 per LED sign, $1450 per neon sign):\n  1500 * LEDSigns + 1450 * NeonSigns\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLEDSigns = intvar(0, 999999999)  # Number of LED signs made per day\nNeonSigns = intvar(0, 999999999)  # Number of neon signs made per day\n\n# Constraints\nm = Model()\n\n# Team A can make at most 3 LED signs a day:\nm += LEDSigns <= 3\n# Team B can make at most 4 neon signs a day:\nm += NeonSigns <= 4\n# The senior QC inspector can check at most 7 signs total a day:\nm += LEDSigns + NeonSigns <= 7\n\n# Objective\n# Maximize profit ($1500 per LED sign, $1450 per neon sign):\nm.maximize(1500 * LEDSigns + 1450 * NeonSigns)\n", "entities": [{"start": 47, "end": 56, "word": "LED signs", "entity_group": "VAR", "score": 0.9999798985491453}, {"start": 61, "end": 71, "word": "neon signs", "entity_group": "VAR", "score": 0.9999837218854272}, {"start": 78, "end": 87, "word": "LED signs", "entity_group": "VAR", "score": 0.9999882611148806}, {"start": 125, "end": 132, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971567505172393}, {"start": 133, "end": 134, "word": "3", "entity_group": "LIMIT", "score": 0.9996251159064317}, {"start": 147, "end": 157, "word": "neon signs", "entity_group": "VAR", "score": 0.9999823963107327}, {"start": 195, "end": 202, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9966455820235194}, {"start": 203, "end": 204, "word": "4", "entity_group": "LIMIT", "score": 0.9995363626956398}, {"start": 292, "end": 299, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9978713135717928}, {"start": 300, "end": 301, "word": "7", "entity_group": "LIMIT", "score": 0.9997311072879724}, {"start": 329, "end": 335, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999526859658013}, {"start": 340, "end": 348, "word": "LED sign", "entity_group": "VAR", "score": 0.9999740253034491}, {"start": 354, "end": 358, "word": "1500", "entity_group": "PARAM", "score": 0.9995104517322849}, {"start": 367, "end": 373, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998438652715101}, {"start": 378, "end": 387, "word": "neon sign", "entity_group": "VAR", "score": 0.9999559128793412}, {"start": 393, "end": 397, "word": "1450", "entity_group": "PARAM", "score": 0.9994977233044847}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993193030297597}, {"start": 449, "end": 455, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997781723828255}]}
{"doc_id": "1262901358", "document": "A restaurant has new cooks earning $500 a week and senior cooks earning $1000 a week. The weekly wage bill must be kept below $50000. To meet customer demand, they require a minimum of 30 total cooks of whom at least 5 must be senior cooks. In addition, the number of senior cooks should be at least a third the number of new cooks. Formulate a LP to minimize the wage bill.", "order_mapping": {"new cooks": 0, "senior cooks": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"senior cooks": "1000", "new cooks": "500"}}, "const_declarations": [{"type": "sum", "direction": "minimum", "limit": "30", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "senior cooks", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "senior cooks", "direction": "at least", "param": "third", "y_var": "new cooks", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "below", "limit": "50000", "terms": {"new cooks": "500", "senior cooks": "1000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of new cooks\n- y: Number of senior cooks\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both new and senior cooks. Given that new cooks earn $500 per week and senior cooks earn $1000 per week, the objective function is: Minimize 500x + 1000y\n\nConstraints:\n- The restaurant needs to have at least 30 total cooks, forming the constraint: x + y >= 30.\n- At least 5 senior cooks are necessary, hence the constraint: y >= 5.\n- To ensure adequate staffing, the number of senior cooks should be no less than a third of the number of new cooks: y >= 1/3x.\n- To control costs, the total wages for all employees need to be kept below $50000 per week, leading to the constraint: 500x + 1000y <= 50000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 500x + 1000y\nConstraints:\nx + y >= 30\ny >= 5\ny >= 1/3x\n500x + 1000y <= 50000", "canonical": {"objective": [500.0, 1000.0], "constraints": [[-1.0, -1.0, -30.0], [0.0, -1.0, -5.0], [0.3333333333333333, -1.0, 0.0], [500.0, 1000.0, 50000.0]]}, "solution": {"x": 22, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of new cooks employed: NewCooks\n- Number of senior cooks employed: SeniorCooks\n\nConstraints:\n- Total number of cooks should be at least 30:\n  NewCooks + SeniorCooks >= 30\n- At least 5 workers must be senior cooks:\n  SeniorCooks >= 5\n- The number of senior cooks should be at least a third of the number of new cooks:\n  SeniorCooks >= 1/3 * NewCooks\n- Total wage bill should be below $50000 (New cooks earn $500 a week and senior cooks earn $1000 a week):\n  500 * NewCooks + 1000 * SeniorCooks <= 50000\n\nObjective: \n- Minimize the total wage bill (New cooks earn $500 a week and senior cooks earn $1000 a week):\n  500 * NewCooks + 1000 * SeniorCooks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewCooks = intvar(0, 999999999)  # Number of new cooks\nSeniorCooks = intvar(0, 999999999)  # Number of senior cooks\n\n# Constraints\nm = Model()\n\n# The restaurant requires a minimum of 30 total cooks:\nm += NewCooks + SeniorCooks >= 30\n# At least 5 must be senior cooks:\nm += SeniorCooks >= 5\n# The number of senior cooks should be at least a third the number of new cooks:\nm += SeniorCooks >= (1/3) * NewCooks\n# The weekly wage bill must be kept below $50000 (New cooks earn $500 a week and senior cooks earn $1000 a week):\nm += 500 * NewCooks + 1000 * SeniorCooks <= 50000\n\n# Objective\n# Minimize the wage bill (New cooks earn $500 a week and senior cooks earn $1000 a week):\nm.minimize(500 * NewCooks + 1000 * SeniorCooks)\n", "entities": [{"start": 17, "end": 26, "word": "new cooks", "entity_group": "VAR", "score": 0.9999834940980497}, {"start": 27, "end": 34, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9954801337700877}, {"start": 37, "end": 40, "word": "500", "entity_group": "PARAM", "score": 0.9995564284343837}, {"start": 52, "end": 64, "word": "senior cooks", "entity_group": "VAR", "score": 0.999980906814435}, {"start": 65, "end": 72, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9966433584909454}, {"start": 75, "end": 79, "word": "1000", "entity_group": "PARAM", "score": 0.9997073304217701}, {"start": 100, "end": 109, "word": "wage bill", "entity_group": "OBJ_NAME", "score": 0.6384194593109485}, {"start": 123, "end": 128, "word": "below", "entity_group": "CONST_DIR", "score": 0.9884572252869331}, {"start": 131, "end": 136, "word": "50000", "entity_group": "LIMIT", "score": 0.9996663829789317}, {"start": 180, "end": 187, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9932389297611371}, {"start": 191, "end": 193, "word": "30", "entity_group": "LIMIT", "score": 0.9996383427342193}, {"start": 214, "end": 222, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985719688387891}, {"start": 223, "end": 224, "word": "5", "entity_group": "LIMIT", "score": 0.9996226547064587}, {"start": 233, "end": 245, "word": "senior cooks", "entity_group": "VAR", "score": 0.9999805506963891}, {"start": 276, "end": 288, "word": "senior cooks", "entity_group": "VAR", "score": 0.9999814814549115}, {"start": 299, "end": 307, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979244254605336}, {"start": 310, "end": 315, "word": "third", "entity_group": "PARAM", "score": 0.9969893465590204}, {"start": 330, "end": 339, "word": "new cooks", "entity_group": "VAR", "score": 0.9999570177269854}, {"start": 360, "end": 368, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992338422836299}, {"start": 369, "end": 382, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.614307548388825}]}
{"doc_id": "2038778006", "document": "A salad shop makes large and small salads. A large salad takes 45 g of lettuce and 10 g of sauce. A small salad takes 30 g of lettuce and 7 g of sauce. The shop has available 1500 g of lettuce and 1200 g of sauce. If the profit per large salad is $4 and the profit per small salad is $2, how many of each should they make to maximize profit?", "order_mapping": {"large": 0, "small salads": 1, "large salad": 0, "small salad": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large salad": "4", "small salad": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1500", "terms": {"large salad": "45", "small salad": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"large salad": "10", "small salad": "7"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large salads made\n- y: Number of small salads made\n\nObjective:\n- The shop aims to maximize its profit. The profit per large salad is $4 and the profit per small salad is $2. Therefore, the objective function is: Maximize 4x + 2y\n\nConstraints:\n- The shop has 1500 g of lettuce available, and a large salad takes 45 g of lettuce and a small salad takes 30 g of lettuce. This leads to the constraint: 45x + 30y <= 1500.\n- The shop has 1200 g of sauce available, and a large salad takes 10 g of sauce and a small salad takes 7 g of sauce. This results in the constraint: 10x + 7y <= 1200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 2y\nConstraints:\n45x + 30y <= 1500\n10x + 7y <= 1200", "canonical": {"objective": [-4.0, -2.0], "constraints": [[45.0, 30.0, 1500.0], [10.0, 7.0, 1200.0]]}, "solution": {"x": 33, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of large salads made: LargeSalads\n- Number of small salads made: SmallSalads\n\nConstraints:\n- Total lettuce used should not exceed 1500g (45g per large salad, 30g per small salad):\n  45 * LargeSalads + 30 * SmallSalads <= 1500\n- Total sauce used should not exceed 1200g (10g per large salad, 7g per small salad):\n  10 * LargeSalads + 7 * SmallSalads <= 1200\n\nObjective:\n- Maximize profit (4 dollars per large salad, 2 dollars per small salad):\n  4 * LargeSalads + 2 * SmallSalads\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeSalads = intvar(0, 999999999)  # Number of large salads made\nSmallSalads = intvar(0, 999999999)  # Number of small salads made\n\n# Constraints\nm = Model()\n\n# Lettuce constraint (1500g available, large salad takes 45g, small salad takes 30g):\nm += 45 * LargeSalads + 30 * SmallSalads <= 1500\n# Sauce constraint (1200g available, large salad takes 10g, small salad takes 7g):\nm += 10 * LargeSalads + 7 * SmallSalads <= 1200\n\n# Objective\n# Maximize profit (4 dollars per large salad, 2 dollars per small salad):\nm.maximize(4 * LargeSalads + 2 * SmallSalads)\n", "entities": [{"start": 19, "end": 24, "word": "large", "entity_group": "VAR", "score": 0.99811572678068}, {"start": 29, "end": 41, "word": "small salads", "entity_group": "VAR", "score": 0.9999851431178586}, {"start": 46, "end": 57, "word": "large salad", "entity_group": "VAR", "score": 0.99998683491392}, {"start": 64, "end": 66, "word": "45", "entity_group": "PARAM", "score": 0.9995675341322752}, {"start": 84, "end": 86, "word": "10", "entity_group": "PARAM", "score": 0.999620711167036}, {"start": 102, "end": 113, "word": "small salad", "entity_group": "VAR", "score": 0.9999797072132683}, {"start": 120, "end": 122, "word": "30", "entity_group": "PARAM", "score": 0.9996011838453206}, {"start": 140, "end": 141, "word": "7", "entity_group": "PARAM", "score": 0.9994741737325633}, {"start": 168, "end": 177, "word": "available", "entity_group": "CONST_DIR", "score": 0.9976493039575581}, {"start": 178, "end": 182, "word": "1500", "entity_group": "LIMIT", "score": 0.9992881332334805}, {"start": 200, "end": 204, "word": "1200", "entity_group": "LIMIT", "score": 0.9993807601636278}, {"start": 225, "end": 231, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999156177061618}, {"start": 236, "end": 247, "word": "large salad", "entity_group": "VAR", "score": 0.9999350620778579}, {"start": 253, "end": 254, "word": "4", "entity_group": "PARAM", "score": 0.9995624785767606}, {"start": 263, "end": 269, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998623479543493}, {"start": 274, "end": 285, "word": "small salad", "entity_group": "VAR", "score": 0.9999314625883642}, {"start": 291, "end": 292, "word": "2", "entity_group": "PARAM", "score": 0.9996795400469504}, {"start": 332, "end": 340, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 341, "end": 347, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "125732204", "document": "A food truck makes beef burritos and pork burritos. They only has enough materials to make at most 100 burritos. To stay in business, they must sell at least 20 beef burritos and at least 30 pork burritos. However, they only have enough materials, to make at most 70 beef burritos and at most 80 pork burritos. The profit per beef burritos is $3.5 and the profit per pork burritos is $2.1. How many of each burrito should the they sell to maximize profit?", "order_mapping": {"beef burritos": 0, "pork burritos": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"beef burritos": "3.5", "pork burritos": "2.1"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "beef burritos", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "pork burritos", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "beef burritos", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "pork burritos", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of beef burritos\n- y: Number of pork burritos\n\nObjective:\n- The food truck aims to maximize its profit. The profit per beef burrito is $3.5 and the profit per pork burrito is $2.1. Therefore, the objective function is: Maximize 3.5x + 2.1y\n\nConstraints:\n- The food truck can make at most 100 burritos in total, so the constraint is: x + y <= 100.\n- At least 20 beef burritos and 30 pork burritos must be sold, leading to the constraints: x >= 20 and y >= 30.\n- The food truck can make at most 70 beef burritos and at most 80 pork burritos, resulting in the constraints: x <= 70 and y <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3.5x + 2.1y\nConstraints:\nx + y <= 100\nx >= 20\ny >= 30\nx <= 70\ny <= 80", "canonical": {"objective": [-3.5, -2.1], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -20.0], [0.0, -1.0, -30.0], [1.0, 0.0, 70.0], [0.0, 1.0, 80.0]]}, "solution": {"x": 70, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of beef burritos sold: BeefBurritos\n- Number of pork burritos sold: PorkBurritos\n\nConstraints:\n- Total number of burritos made should not exceed 100:\n  BeefBurritos + PorkBurritos <= 100\n- At least 20 beef burritos must be sold:\n  BeefBurritos >= 20\n- At least 30 pork burritos must be sold:\n  PorkBurritos >= 30\n- At most 70 beef burritos can be made:\n  BeefBurritos <= 70\n- At most 80 pork burritos can be made:\n  PorkBurritos <= 80\n\nObjective:\n- Maximize profit (3.5 dollars per beef burrito, 2.1 dollars per pork burrito):\n  3.5 * BeefBurritos + 2.1 * PorkBurritos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeefBurritos = intvar(0, 999999999)  # Number of beef burritos sold\nPorkBurritos = intvar(0, 999999999)  # Number of pork burritos sold\n\n# Constraints\nm = Model()\n\n# Total number of burritos made should not exceed 100:\nm += BeefBurritos + PorkBurritos <= 100\n# At least 20 beef burritos must be sold:\nm += BeefBurritos >= 20\n# At least 30 pork burritos must be sold:\nm += PorkBurritos >= 30\n# At most 70 beef burritos can be made:\nm += BeefBurritos <= 70\n# At most 80 pork burritos can be made:\nm += PorkBurritos <= 80\n\n# Objective\n# Maximize profit (3.5 dollars per beef burrito, 2.1 dollars per pork burrito):\nm.maximize(3.5 * BeefBurritos + 2.1 * PorkBurritos)\n", "entities": [{"start": 19, "end": 32, "word": "beef burritos", "entity_group": "VAR", "score": 0.9999666625835796}, {"start": 37, "end": 50, "word": "pork burritos", "entity_group": "VAR", "score": 0.9999863916218829}, {"start": 92, "end": 99, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998630145301197}, {"start": 100, "end": 103, "word": "100", "entity_group": "LIMIT", "score": 0.9997436591830543}, {"start": 152, "end": 160, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988465563596923}, {"start": 161, "end": 163, "word": "20", "entity_group": "LIMIT", "score": 0.9995486954575116}, {"start": 164, "end": 177, "word": "beef burritos", "entity_group": "VAR", "score": 0.9999556562401996}, {"start": 182, "end": 190, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988176683839091}, {"start": 191, "end": 193, "word": "30", "entity_group": "LIMIT", "score": 0.999220241250499}, {"start": 194, "end": 207, "word": "pork burritos", "entity_group": "VAR", "score": 0.9999507682227611}, {"start": 262, "end": 269, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988849985597177}, {"start": 270, "end": 272, "word": "70", "entity_group": "LIMIT", "score": 0.9996204311252821}, {"start": 273, "end": 286, "word": "beef burritos", "entity_group": "VAR", "score": 0.9999584641590765}, {"start": 291, "end": 298, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988304400422832}, {"start": 299, "end": 301, "word": "80", "entity_group": "LIMIT", "score": 0.9992918169831098}, {"start": 302, "end": 315, "word": "pork burritos", "entity_group": "VAR", "score": 0.9999516195043435}, {"start": 322, "end": 328, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999619703490342}, {"start": 333, "end": 346, "word": "beef burritos", "entity_group": "VAR", "score": 0.9999650072706225}, {"start": 352, "end": 355, "word": "3.5", "entity_group": "PARAM", "score": 0.9996471465489195}, {"start": 364, "end": 370, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350949288877}, {"start": 375, "end": 388, "word": "pork burritos", "entity_group": "VAR", "score": 0.9999321480432671}, {"start": 394, "end": 397, "word": "2.1", "entity_group": "PARAM", "score": 0.9996852740328691}, {"start": 449, "end": 457, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996025467005897}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999910798942371}]}
{"doc_id": "454593242", "document": "Nu Designs makes bookcases and garden chairs. Each bookcase requires 3 hours of woodworking, 2 boxes of nails, and 3 units of varnish. Each garden chair requires 2 hours of woodworking, 4 boxes of nails, and 3 units of varnish. There are 80 hours of woodworking available, 70 boxes of nails available, and 90 units of varnish available. If each bookcase yields a profit of $270 and each garden chair yields a profit of $350, how many of each should be made to maximize profit?", "order_mapping": {"bookcases": 0, "garden chairs": 1, "bookcase": 0, "garden chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"garden chair": "350", "bookcase": "270"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "80", "terms": {"bookcase": "3", "garden chair": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"bookcase": "2", "garden chair": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "90", "terms": {"bookcase": "3", "garden chair": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bookcases to be made\n- y: Number of garden chairs to be made\n\nObjective:\n- The company aims to maximize its profit. Each bookcase yields a profit of $270 and each garden chair yields a profit of $350. Therefore, the objective function is: Maximize 270x + 350y\n\nConstraints:\n- Each bookcase requires 3 hours of woodworking and each garden chair requires 2 hours of woodworking. The total available woodworking hours is 80, leading to the constraint: 3x + 2y <= 80.\n- Each bookcase requires 2 boxes of nails and each garden chair requires 4 boxes of nails. The total available boxes of nails is 70, leading to the constraint: 2x + 4y <= 70.\n- Each bookcase requires 3 units of varnish and each garden chair requires 3 units of varnish. The total available units of varnish is 90, leading to the constraint: 3x + 3y <= 90.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 270x + 350y\nConstraints:\n3x + 2y <= 80\n2x + 4y <= 70\n3x + 3y <= 90", "canonical": {"objective": [-270.0, -350.0], "constraints": [[3.0, 2.0, 80.0], [2.0, 4.0, 70.0], [3.0, 3.0, 90.0]]}, "solution": {"x": 21, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of bookcases made: Bookcases\n- Number of garden chairs made: GardenChairs\n\nConstraints:\n- Woodworking hours constraint (3 hours per bookcase, 2 hours per garden chair, 80 hours available):\n  3 * Bookcases + 2 * GardenChairs <= 80\n- Boxes of nails constraint (2 boxes per bookcase, 4 boxes per garden chair, 70 boxes available):\n  2 * Bookcases + 4 * GardenChairs <= 70\n- Units of varnish constraint (3 units per bookcase and garden chair, 90 units available):\n  3 * Bookcases + 3 * GardenChairs <= 90\n\nObjective:\n- Maximize profit (270 dollars per bookcase, 350 dollars per garden chair):\n  270 * Bookcases + 350 * GardenChairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBookcases = intvar(0, 999999999)  # Number of bookcases made\nGardenChairs = intvar(0, 999999999)  # Number of garden chairs made\n\n# Constraints\nm = Model()\n\n# Woodworking hours constraint (3 hours per bookcase, 2 hours per garden chair, 80 hours available):\nm += 3 * Bookcases + 2 * GardenChairs <= 80\n# Boxes of nails constraint (2 boxes per bookcase, 4 boxes per garden chair, 70 boxes available):\nm += 2 * Bookcases + 4 * GardenChairs <= 70\n# Units of varnish constraint (3 units per bookcase and garden chair, 90 units available):\nm += 3 * Bookcases + 3 * GardenChairs <= 90\n\n# Objective\n# Maximize profit (270 dollars per bookcase, 350 dollars per garden chair):\nm.maximize(270 * Bookcases + 350 * GardenChairs)\n", "entities": [{"start": 17, "end": 26, "word": "bookcases", "entity_group": "VAR", "score": 0.9995068478896909}, {"start": 31, "end": 44, "word": "garden chairs", "entity_group": "VAR", "score": 0.9999813269322324}, {"start": 52, "end": 60, "word": "bookcase", "entity_group": "VAR", "score": 0.9996589042068507}, {"start": 70, "end": 71, "word": "3", "entity_group": "PARAM", "score": 0.9994431562033269}, {"start": 95, "end": 96, "word": "2", "entity_group": "PARAM", "score": 0.9997347458665432}, {"start": 118, "end": 119, "word": "3", "entity_group": "PARAM", "score": 0.9996267085216834}, {"start": 144, "end": 156, "word": "garden chair", "entity_group": "VAR", "score": 0.9999814675305012}, {"start": 166, "end": 167, "word": "2", "entity_group": "PARAM", "score": 0.9996963434379218}, {"start": 191, "end": 192, "word": "4", "entity_group": "PARAM", "score": 0.9997347204400521}, {"start": 214, "end": 215, "word": "3", "entity_group": "PARAM", "score": 0.9995762212005685}, {"start": 245, "end": 247, "word": "80", "entity_group": "LIMIT", "score": 0.9997230345104636}, {"start": 269, "end": 278, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992013823958125}, {"start": 281, "end": 283, "word": "70", "entity_group": "LIMIT", "score": 0.9996745637976111}, {"start": 299, "end": 308, "word": "available", "entity_group": "CONST_DIR", "score": 0.9984998026397017}, {"start": 315, "end": 317, "word": "90", "entity_group": "LIMIT", "score": 0.9996286924848115}, {"start": 335, "end": 344, "word": "available", "entity_group": "CONST_DIR", "score": 0.9984434073712565}, {"start": 355, "end": 363, "word": "bookcase", "entity_group": "VAR", "score": 0.999823002152618}, {"start": 373, "end": 379, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998272804924185}, {"start": 385, "end": 388, "word": "270", "entity_group": "PARAM", "score": 0.9988009179408072}, {"start": 398, "end": 410, "word": "garden chair", "entity_group": "VAR", "score": 0.9999840102335767}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998464987117753}, {"start": 432, "end": 435, "word": "350", "entity_group": "PARAM", "score": 0.9996696376018004}, {"start": 473, "end": 481, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995748698003112}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998307256802953}]}
{"doc_id": "-374196579", "document": "A movie theatre sells regular passes and premium passes, which give better seating. The movie theatre can sell at most 500 passes. The profit per regular pass is $40 and the profit per premium pass is $90. The theatre reserves at least 100 passes to be premium but at least 3 times as many people prefer to buy regular passes than premium passes. How many passes of each type should the movie theatre sell to maximize profit?", "order_mapping": {"regular passes": 0, "premium passes": 1, "regular pass": 0, "premium pass": 1, "premium": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium pass": "90", "regular pass": "40"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "premium", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular passes", "direction": "at least", "param": "3 times", "y_var": "premium passes", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular passes sold\n- y: Number of premium passes sold\n\nObjective:\n- The movie theatre aims to maximize its profit. The profit per regular pass is $40 and the profit per premium pass is $90. Therefore, the objective function is: Maximize 40x + 90y\n\nConstraints:\n- The movie theatre can sell at most 500 passes, so the constraint is: x + y <= 500.\n- The theatre reserves at least 100 passes to be premium, leading to the constraint: y >= 100.\n- At least 3 times as many people prefer to buy regular passes than premium passes, resulting in the constraint: x >= 3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 90y\nConstraints:\nx + y <= 500\ny >= 100\nx >= 3y", "canonical": {"objective": [-40.0, -90.0], "constraints": [[1.0, 1.0, 500.0], [0.0, -1.0, -100.0], [-1.0, 3.0, 0.0]]}, "solution": {"x": 375, "y": 125}, "pseudo_model": "\nDecision Variables:\n- Number of regular passes sold: RegularPasses\n- Number of premium passes sold: PremiumPasses\n\nConstraints:\n- Total number of passes sold should not exceed 500:\n  RegularPasses + PremiumPasses <= 500\n- At least 100 passes should be premium:\n  PremiumPasses >= 100\n- The number of regular passes sold should be at least 3 times the number of premium passes sold:\n  RegularPasses >= 3 * PremiumPasses\n\nObjective:\n- Maximize profit (40 dollars per regular pass, 90 dollars per premium pass):\n  40 * RegularPasses + 90 * PremiumPasses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularPasses = intvar(0, 999999999)  # Number of regular passes sold\nPremiumPasses = intvar(0, 999999999)  # Number of premium passes sold\n\n# Constraints\nm = Model()\n\n# The movie theatre can sell at most 500 passes in total:\nm += RegularPasses + PremiumPasses <= 500\n# The theatre reserves at least 100 passes to be premium:\nm += PremiumPasses >= 100\n# At least 3 times as many people prefer to buy regular passes than premium passes:\nm += RegularPasses >= 3 * PremiumPasses\n\n# Objective\n# Maximize profit (40 dollars per regular pass, 90 dollars per premium pass):\nm.maximize(40 * RegularPasses + 90 * PremiumPasses)\n", "entities": [{"start": 22, "end": 36, "word": "regular passes", "entity_group": "VAR", "score": 0.9999602901050063}, {"start": 41, "end": 55, "word": "premium passes", "entity_group": "VAR", "score": 0.9999839837577327}, {"start": 113, "end": 120, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988223186657001}, {"start": 121, "end": 124, "word": "500", "entity_group": "LIMIT", "score": 0.999729051332909}, {"start": 138, "end": 144, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277520474693}, {"start": 149, "end": 161, "word": "regular pass", "entity_group": "VAR", "score": 0.9999420741291056}, {"start": 167, "end": 169, "word": "40", "entity_group": "PARAM", "score": 0.9995624501632412}, {"start": 178, "end": 184, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350362784383}, {"start": 189, "end": 201, "word": "premium pass", "entity_group": "VAR", "score": 0.9999213996472809}, {"start": 207, "end": 209, "word": "90", "entity_group": "PARAM", "score": 0.9997732626334676}, {"start": 233, "end": 241, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987733182032831}, {"start": 242, "end": 245, "word": "100", "entity_group": "LIMIT", "score": 0.999728291639243}, {"start": 259, "end": 266, "word": "premium", "entity_group": "VAR", "score": 0.9995214803722375}, {"start": 271, "end": 279, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977416258732409}, {"start": 280, "end": 287, "word": "3 times", "entity_group": "PARAM", "score": 0.8483946127202436}, {"start": 317, "end": 331, "word": "regular passes", "entity_group": "VAR", "score": 0.9999641886631521}, {"start": 337, "end": 351, "word": "premium passes", "entity_group": "VAR", "score": 0.9999433106674752}, {"start": 416, "end": 424, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994966827985458}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999812307105001}]}
{"doc_id": "-838296258", "document": "A high-speed train can carry at most 400 passengers. They offer general class tickets as well as sleeper class tickets. The train reserves at least 50 sleeper class tickets. However, at least 1.5 times as many passengers prefer to buy general class tickets than sleeper class tickets. A profit of $200 is made per sleeper class ticket and a profit of $80 is made per general class ticket. How many of each type of ticket should be sold in order to maximize profit? What is that profit?", "order_mapping": {"general class": 0, "sleeper class": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sleeper class": "200", "general class": "80"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "400", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "sleeper class", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "general class", "direction": "at least", "param": "1.5 times", "y_var": "sleeper class", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of general class tickets sold\n- y: Number of sleeper class tickets sold\n\nObjective:\n- The objective is to maximize the profit. A profit of $200 is made per sleeper class ticket and a profit of $80 is made per general class ticket. Therefore, the objective function is: Maximize 200y + 80x\n\nConstraints:\n- The train can carry at most 400 passengers, so the constraint is: x + y <= 400.\n- At least 50 sleeper class tickets need to be sold, leading to the constraint: y >= 50.\n- At least 1.5 times as many passengers prefer to buy general class tickets than sleeper class tickets, resulting in the constraint: x >= 1.5y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200y + 80x\nConstraints:\nx + y <= 400\ny >= 50\nx >= 1.5y", "canonical": {"objective": [-80.0, -200.0], "constraints": [[1.0, 1.0, 400.0], [0.0, -1.0, -50.0], [-1.0, 1.5, 0.0]]}, "solution": {"x": 240, "y": 160}, "pseudo_model": "\nDecision Variables:\n- Number of general class tickets sold: GeneralClass\n- Number of sleeper class tickets sold: SleeperClass\n\nConstraints:\n- Total number of tickets sold should not exceed 400:\n  GeneralClass + SleeperClass <= 400\n- At least 50 sleeper class tickets should be reserved:\n  SleeperClass >= 50\n- At least 1.5 times as many general class tickets as sleeper class tickets should be sold:\n  GeneralClass >= 1.5 * SleeperClass\n\nObjective:\n- Maximize profit ($200 per sleeper class ticket, $80 per general class ticket):\n  200 * SleeperClass + 80 * GeneralClass\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGeneralClass = intvar(0, 999999999)  # Number of general class tickets sold\nSleeperClass = intvar(0, 999999999)  # Number of sleeper class tickets sold\n\n# Constraints\nm = Model()\n\n# The train can carry at most 400 passengers:\nm += GeneralClass + SleeperClass <= 400\n# The train reserves at least 50 sleeper class tickets:\nm += SleeperClass >= 50\n# At least 1.5 times as many passengers prefer general class tickets than sleeper class tickets:\nm += GeneralClass >= 1.5 * SleeperClass\n\n# Objective\n# Maximize profit ($200 per sleeper class ticket, $80 per general class ticket):\nm.maximize(200 * SleeperClass + 80 * GeneralClass)\n", "entities": [{"start": 31, "end": 38, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989348569308771}, {"start": 39, "end": 42, "word": "400", "entity_group": "LIMIT", "score": 0.9997093052019412}, {"start": 67, "end": 80, "word": "general class", "entity_group": "VAR", "score": 0.9999930911450593}, {"start": 100, "end": 113, "word": "sleeper class", "entity_group": "VAR", "score": 0.9999930580951253}, {"start": 143, "end": 151, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985327134503762}, {"start": 152, "end": 154, "word": "50", "entity_group": "LIMIT", "score": 0.9994889250551934}, {"start": 155, "end": 168, "word": "sleeper class", "entity_group": "VAR", "score": 0.9999841632126572}, {"start": 189, "end": 197, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986381073452433}, {"start": 198, "end": 207, "word": "1.5 times", "entity_group": "LIMIT", "score": 0.85683908511331}, {"start": 241, "end": 254, "word": "general class", "entity_group": "VAR", "score": 0.9999953156622442}, {"start": 268, "end": 281, "word": "sleeper class", "entity_group": "VAR", "score": 0.9999953536372568}, {"start": 294, "end": 300, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999539921020042}, {"start": 306, "end": 309, "word": "200", "entity_group": "PARAM", "score": 0.9995977103309506}, {"start": 322, "end": 335, "word": "sleeper class", "entity_group": "VAR", "score": 0.9999950969429678}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999054240996921}, {"start": 361, "end": 363, "word": "80", "entity_group": "PARAM", "score": 0.9996106944867721}, {"start": 376, "end": 389, "word": "general class", "entity_group": "VAR", "score": 0.9999854934794418}, {"start": 458, "end": 466, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9978759054098442}, {"start": 467, "end": 473, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99981409039745}]}
{"doc_id": "-331045302", "document": "An amusement company offers two types of tickets. There is a all-inclusive ticket which offers unlimited rides to all attractions, and a regular ticket that gives one ride to a a limited number of attractions. The company sells 500 tickets in a day due to capacity constraint. They reserve at least 100 of them to be all-inclusive tickets. Since most people just want to try an attraction only once, at least 3 times as many people prefer regular tickets than all-inclusive tickets. If the profit per all-inclusive ticket is $50 and the profit per regular ticker is $20, how many of each should be sold to maximize profit?", "order_mapping": {"all-inclusive ticket": 0, "regular ticket": 1, "all-inclusive tickets": 0, "regular tickets": 1, "regular ticker": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"all-inclusive ticket": "50", "regular ticker": "20"}}, "const_declarations": [{"type": "sum", "direction": "capacity", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "all-inclusive tickets", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "3 times", "y_var": "all-inclusive tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of all-inclusive tickets\n- y: Number of regular tickets\n\nObjective:\n- The company aims to maximize its profit. The profit per all-inclusive ticket is $50 and the profit per regular ticket is $20. Therefore, the objective function is: Maximize 50x + 20y\n\nConstraints:\n- The company sells 500 tickets in a day due to capacity constraint, leading to the constraint: x + y <= 500.\n- At least 100 tickets need to be all-inclusive, resulting in the constraint: x >= 100.\n- Since at least 3 times as many people prefer regular tickets than all-inclusive tickets, the constraint is: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 20y\nConstraints:\nx + y <= 500\nx >= 100\ny >= 3x", "canonical": {"objective": [-50.0, -20.0], "constraints": [[1.0, 1.0, 500.0], [-1.0, 0.0, -100.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 125, "y": 375}, "pseudo_model": "\nDecision Variables:\n- Number of all-inclusive tickets sold: AllInclusiveTickets\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 500:\n  AllInclusiveTickets + RegularTickets <= 500\n- At least 100 tickets should be all-inclusive:\n  AllInclusiveTickets >= 100\n- At least 3 times as many people prefer regular tickets than all-inclusive tickets:\n  RegularTickets >= 3 * AllInclusiveTickets\n\nObjective:\n- Maximize profit (50 dollars per all-inclusive ticket, 20 dollars per regular ticket):\n  50 * AllInclusiveTickets + 20 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAllInclusiveTickets = intvar(0, 999999999)  # Number of all-inclusive tickets sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets sold should not exceed 500:\nm += AllInclusiveTickets + RegularTickets <= 500\n# At least 100 tickets should be all-inclusive:\nm += AllInclusiveTickets >= 100\n# At least 3 times as many people prefer regular tickets than all-inclusive tickets:\nm += RegularTickets >= 3 * AllInclusiveTickets\n\n# Objective\n# Maximize profit (50 dollars per all-inclusive ticket, 20 dollars per regular ticket):\nm.maximize(50 * AllInclusiveTickets + 20 * RegularTickets)\n", "entities": [{"start": 62, "end": 84, "word": "all - inclusive ticket", "entity_group": "VAR", "score": 0.9975556769874759}, {"start": 141, "end": 155, "word": "regular ticket", "entity_group": "VAR", "score": 0.9999079835303111}, {"start": 233, "end": 236, "word": "500", "entity_group": "LIMIT", "score": 0.9997251427872674}, {"start": 261, "end": 269, "word": "capacity", "entity_group": "CONST_DIR", "score": 0.986594583555578}, {"start": 296, "end": 304, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9974986829531804}, {"start": 305, "end": 308, "word": "100", "entity_group": "LIMIT", "score": 0.9995155153889598}, {"start": 323, "end": 346, "word": "all - inclusive tickets", "entity_group": "VAR", "score": 0.9984402034471513}, {"start": 410, "end": 418, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982848661540474}, {"start": 419, "end": 426, "word": "3 times", "entity_group": "PARAM", "score": 0.5546828520767243}, {"start": 449, "end": 464, "word": "regular tickets", "entity_group": "VAR", "score": 0.999903884175063}, {"start": 470, "end": 493, "word": "all - inclusive tickets", "entity_group": "VAR", "score": 0.9983422803548528}, {"start": 503, "end": 509, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996335208608177}, {"start": 514, "end": 536, "word": "all - inclusive ticket", "entity_group": "VAR", "score": 0.9977714574279704}, {"start": 542, "end": 544, "word": "50", "entity_group": "PARAM", "score": 0.9994963388405821}, {"start": 553, "end": 559, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999327216537447}, {"start": 564, "end": 578, "word": "regular ticker", "entity_group": "VAR", "score": 0.9997357856163387}, {"start": 584, "end": 586, "word": "20", "entity_group": "PARAM", "score": 0.9996338769073029}, {"start": 624, "end": 632, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694880339434}, {"start": 633, "end": 639, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856876862}]}
{"doc_id": "-1814291927", "document": "A sports company makes shuttlecocks and volleyballs by hand. The profit per shuttlecock is $3.5, and the profit per volleyball is $10. To make one shuttlecock, 15 minutes of sewing and 5 minutes of quality checking are required. To make a volleyball, 20 minutes of sewing and 10 minutes of quality checking are required. In a month, 4000 minutes of sewing time and 3000 minutes of quality checking time are available. How many of each product should be made to maximize profit?", "order_mapping": {"shuttlecocks": 0, "volleyballs": 1, "shuttlecock": 0, "volleyball": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"shuttlecock": "3.5", "volleyball": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"volleyball": "20", "shuttlecock": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"shuttlecock": "5", "volleyball": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of shuttlecocks made\n- y: Number of volleyballs made\n\nObjective:\n- The sports company aims to maximize its profit. The profit per shuttlecock is $3.5, and the profit per volleyball is $10. Therefore, the objective function is: Maximize 3.5x + 10y\n\nConstraints:\n- The company has 4000 minutes of sewing time available, and to make one shuttlecock, 15 minutes of sewing are required, and to make a volleyball, 20 minutes of sewing are required. This leads to the constraint: 15x + 20y <= 4000.\n- The company has 3000 minutes of quality checking time available, and to make one shuttlecock, 5 minutes of quality checking are required, and to make a volleyball, 10 minutes of quality checking are required. This leads to the constraint: 5x + 10y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3.5x + 10y\nConstraints:\n15x + 20y <= 4000\n5x + 10y <= 3000", "canonical": {"objective": [-3.5, -10.0], "constraints": [[15.0, 20.0, 4000.0], [5.0, 10.0, 3000.0]]}, "solution": {"x": 0, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of shuttlecocks made: Shuttlecocks\n- Number of volleyballs made: Volleyballs\n\nConstraints:\n- Sewing time constraint (4000 minutes available per month):\n  15 * Shuttlecocks + 20 * Volleyballs <= 4000\n- Quality checking time constraint (3000 minutes available per month):\n  5 * Shuttlecocks + 10 * Volleyballs <= 3000\n\nObjective:\n- Maximize profit (3.5 dollars per shuttlecock, 10 dollars per volleyball):\n  3.5 * Shuttlecocks + 10 * Volleyballs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShuttlecocks = intvar(0, 999999999)  # Number of shuttlecocks made\nVolleyballs = intvar(0, 999999999)  # Number of volleyballs made\n\n# Constraints\nm = Model()\n\n# Sewing time constraint (4000 minutes available per month):\nm += 15 * Shuttlecocks + 20 * Volleyballs <= 4000\n# Quality checking time constraint (3000 minutes available per month):\nm += 5 * Shuttlecocks + 10 * Volleyballs <= 3000\n\n# Objective\n# Maximize profit (3.5 dollars per shuttlecock, 10 dollars per volleyball):\nm.maximize(3.5 * Shuttlecocks + 10 * Volleyballs)\n", "entities": [{"start": 23, "end": 35, "word": "shuttlecocks", "entity_group": "VAR", "score": 0.9995272343791486}, {"start": 40, "end": 51, "word": "volleyballs", "entity_group": "VAR", "score": 0.9991137363778217}, {"start": 66, "end": 72, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999763416931062}, {"start": 77, "end": 88, "word": "shuttlecock", "entity_group": "VAR", "score": 0.9978370427646298}, {"start": 94, "end": 97, "word": "3.5", "entity_group": "PARAM", "score": 0.9996490052925703}, {"start": 108, "end": 114, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995190808111112}, {"start": 119, "end": 129, "word": "volleyball", "entity_group": "VAR", "score": 0.9989589500603069}, {"start": 135, "end": 137, "word": "10", "entity_group": "PARAM", "score": 0.9996525063846534}, {"start": 152, "end": 163, "word": "shuttlecock", "entity_group": "VAR", "score": 0.999637562664259}, {"start": 166, "end": 168, "word": "15", "entity_group": "PARAM", "score": 0.999716826342953}, {"start": 191, "end": 192, "word": "5", "entity_group": "PARAM", "score": 0.9997243715892847}, {"start": 246, "end": 256, "word": "volleyball", "entity_group": "VAR", "score": 0.9995742916084553}, {"start": 259, "end": 261, "word": "20", "entity_group": "PARAM", "score": 0.9997198897352146}, {"start": 284, "end": 286, "word": "10", "entity_group": "PARAM", "score": 0.9997243940297686}, {"start": 343, "end": 347, "word": "4000", "entity_group": "LIMIT", "score": 0.999725435397768}, {"start": 375, "end": 379, "word": "3000", "entity_group": "LIMIT", "score": 0.9996226206336334}, {"start": 417, "end": 426, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977563459382648}, {"start": 472, "end": 480, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040364571}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "1052619427", "document": "A food store owner can spend at most $1000 on lemons and bananas. A lemon costs the food store owner $3 and a banana costs him $1.5. Spices are added and each lemon is sold for a profit of $2 while each banana is sold for a profit of $1. The owner estimates that at least 250 lemons but at the most 300 are sold each month. He also estimates that the number of bananas sold is at most a third of the lemons sold. How many lemons and bananas should be sold in order to maximize the profit?", "order_mapping": {"lemons": 0, "bananas": 1, "lemon": 0, "banana": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lemon": "2", "banana": "1"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "1000", "terms": {"lemon": "3", "banana": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "250", "var": "lemons", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at the most", "limit": "300", "var": "lemons", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "bananas", "direction": "at most", "param": "a third", "y_var": "lemons", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of lemons sold\n- y: Number of bananas sold\n\nObjective:\n- The food store owner aims to maximize the profit. The profit from selling each lemon is $2 and from selling each banana is $1. Therefore, the objective function is: Maximize 2x + y\n\nConstraints:\n- The total amount spent on lemons and bananas cannot exceed $1000, leading to the constraint: 3x + 1.5y <= 1000.\n- The owner estimates that at least 250 lemons but at most 300 are sold each month, resulting in the constraints: x >= 250 and x <= 300.\n- The number of bananas sold is at most a third of the lemons sold, leading to the constraint: y <= 1/3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + y\nConstraints:\n3x + 1.5y <= 1000\n250 <= x <= 300\ny <= 1/3x", "canonical": {"objective": [-2.0, -1.0], "constraints": [[3.0, 1.5, 1000.0], [-0.3333333333333333, 1.0, 0.0], [-1.0, 0.0, -250.0], [1.0, 0.0, 300.0]]}, "solution": {"x": 300, "y": 66}, "pseudo_model": "\nDecision Variables:\n- Number of lemons sold: Lemons\n- Number of bananas sold: Bananas\n\nConstraints:\n- The total cost for lemons and bananas should not exceed $1000 (Lemons cost $3 each, Bananas cost $1.5 each):\n  3 * Lemons + 1.5 * Bananas <= 1000\n- At least 250 lemons are sold each month:\n  Lemons >= 250\n- At most 300 lemons are sold each month:\n  Lemons <= 300\n- The number of bananas sold is at most a third of the lemons sold:\n  Bananas <= Lemons / 3\n\nObjective:\n- Maximize profit (2 dollars profit per lemon, 1 dollar profit per banana):\n  2 * Lemons + 1 * Bananas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLemons = intvar(0, 999999999)  # Number of lemons sold\nBananas = intvar(0, 999999999)  # Number of bananas sold\n\n# Constraints\nm = Model()\n\n# The total cost of lemons and bananas should not exceed $1000:\nm += 3 * Lemons + 1.5 * Bananas <= 1000\n# At least 250 lemons are sold:\nm += Lemons >= 250\n# At most 300 lemons are sold:\nm += Lemons <= 300\n# The number of bananas sold is at most a third of the lemons sold:\nm += Bananas <= Lemons / 3\n\n# Objective\n# Maximize profit (2 dollars profit per lemon, 1 dollar profit per banana):\nm.maximize(2 * Lemons + 1 * Bananas)\n", "entities": [{"start": 29, "end": 36, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9920543836461728}, {"start": 39, "end": 43, "word": "1000", "entity_group": "LIMIT", "score": 0.9993219035836455}, {"start": 47, "end": 53, "word": "lemons", "entity_group": "VAR", "score": 0.9996975015009338}, {"start": 58, "end": 65, "word": "bananas", "entity_group": "VAR", "score": 0.9998303266184104}, {"start": 70, "end": 75, "word": "lemon", "entity_group": "VAR", "score": 0.999811903097632}, {"start": 105, "end": 106, "word": "3", "entity_group": "PARAM", "score": 0.9997240844650865}, {"start": 113, "end": 119, "word": "banana", "entity_group": "VAR", "score": 0.9997399872500773}, {"start": 132, "end": 135, "word": "1.5", "entity_group": "PARAM", "score": 0.9997155084557707}, {"start": 164, "end": 169, "word": "lemon", "entity_group": "VAR", "score": 0.9997650553645263}, {"start": 184, "end": 190, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998720065349296}, {"start": 196, "end": 197, "word": "2", "entity_group": "PARAM", "score": 0.9996212701003381}, {"start": 209, "end": 215, "word": "banana", "entity_group": "VAR", "score": 0.9997874722753978}, {"start": 230, "end": 236, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995170334868946}, {"start": 242, "end": 243, "word": "1", "entity_group": "PARAM", "score": 0.999627469714728}, {"start": 271, "end": 279, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989734525154125}, {"start": 280, "end": 283, "word": "250", "entity_group": "LIMIT", "score": 0.9997156703581699}, {"start": 284, "end": 290, "word": "lemons", "entity_group": "VAR", "score": 0.9990935426903292}, {"start": 295, "end": 306, "word": "at the most", "entity_group": "CONST_DIR", "score": 0.9882875491061058}, {"start": 307, "end": 310, "word": "300", "entity_group": "LIMIT", "score": 0.9996513639032371}, {"start": 370, "end": 377, "word": "bananas", "entity_group": "VAR", "score": 0.9995515840986015}, {"start": 386, "end": 393, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971217888612316}, {"start": 394, "end": 401, "word": "a third", "entity_group": "PARAM", "score": 0.8536235304988523}, {"start": 409, "end": 415, "word": "lemons", "entity_group": "VAR", "score": 0.9996483447968851}, {"start": 432, "end": 438, "word": "lemons", "entity_group": "VAR", "score": 0.9997486557719707}, {"start": 443, "end": 450, "word": "bananas", "entity_group": "VAR", "score": 0.9996180370724923}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970534090490312}, {"start": 491, "end": 497, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620238983442}]}
{"doc_id": "796437889", "document": "Andrew is a berry farmer and he has two farms, a local farm and a foreign farm, where he grows raspberries, bilberries, and strawberries. He has a contract to provide a local store with 12 kg of raspberries, 10 kg of bilberries, and 20 kg of strawberries. At his local farm, it costs $200 to operate per day and he can harvest and deliver 2.5 kg of raspberries, 3 kg of bilberries, and 2 kg of strawberries in a day. At his foreign farm, it costs $500 to operate per day and he can harvest and deliver 5 kg of raspberries, 4 kg of bilberries, and 4 kg of strawberries in a day. Formulate an LP to meet his contract while minimizing his cost.", "order_mapping": {"local farm": 0, "foreign farm": 1}, "obj_declaration": {"type": "objective", "direction": "minimizing", "name": "cost", "terms": {"foreign farm": "500", "local farm": "200"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "12", "terms": {"local farm": "2.5", "foreign farm": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "10", "terms": {"local farm": "3", "foreign farm": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "20", "terms": {"local farm": "2", "foreign farm": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Days of operation at the local farm\n- y: Days of operation at the foreign farm\n\nObjective:\n- Andrew wants to minimize his cost while meeting the contract requirements. The cost of operating the local farm is $200 per day and the cost of operating the foreign farm is $500 per day. Therefore, the objective function is: Minimize 200x + 500y\n\nConstraints:\n- Andrew needs to provide 12 kg of raspberries, 10 kg of bilberries, and 20 kg of strawberries to the local store. At the local farm, he can harvest 2.5 kg of raspberries, 3 kg of bilberries, and 2 kg of strawberries in a day. At the foreign farm, he can harvest 5 kg of raspberries, 4 kg of bilberries, and 4 kg of strawberries in a day. These lead to the following constraints:\n    - 2.5x + 5y >= 12 (Raspberries)\n    - 3x + 4y >= 10 (Bilberries)\n    - 2x + 4y >= 20 (Strawberries)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 200x + 500y\nConstraints:\n2.5x + 5y >= 12\n3x + 4y >= 10\n2x + 4y >= 20", "canonical": {"objective": [200.0, 500.0], "constraints": [[-2.5, -5.0, -12.0], [-3.0, -4.0, -10.0], [-2.0, -4.0, -20.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of days the local farm operates: LocalFarmDays\n- Number of days the foreign farm operates: ForeignFarmDays\n\nConstraints:\n- To meet the contract for raspberries (12 kg):\n  2.5 * LocalFarmDays + 5 * ForeignFarmDays >= 12\n- To meet the contract for bilberries (10 kg):\n  3 * LocalFarmDays + 4 * ForeignFarmDays >= 10\n- To meet the contract for strawberries (20 kg):\n  2 * LocalFarmDays + 4 * ForeignFarmDays >= 20\n\nObjective:\n- Minimize cost ($200 per day for local farm, $500 per day for foreign farm):\n  200 * LocalFarmDays + 500 * ForeignFarmDays\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLocalFarmDays = intvar(0, 999999999)  # Number of days the local farm operates\nForeignFarmDays = intvar(0, 999999999)  # Number of days the foreign farm operates\n\n# Constraints\nm = Model()\n\n# To meet the contract for raspberries (12 kg):\nm += 2.5 * LocalFarmDays + 5 * ForeignFarmDays >= 12\n# To meet the contract for bilberries (10 kg):\nm += 3 * LocalFarmDays + 4 * ForeignFarmDays >= 10\n# To meet the contract for strawberries (20 kg):\nm += 2 * LocalFarmDays + 4 * ForeignFarmDays >= 20\n\n# Objective\n# Minimize cost ($200 per day for local farm, $500 per day for foreign farm):\nm.minimize(200 * LocalFarmDays + 500 * ForeignFarmDays)\n", "entities": [{"start": 50, "end": 60, "word": "local farm", "entity_group": "VAR", "score": 0.99995084797064}, {"start": 67, "end": 79, "word": "foreign farm", "entity_group": "VAR", "score": 0.9999709476606237}, {"start": 164, "end": 171, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9932757192602266}, {"start": 191, "end": 193, "word": "12", "entity_group": "LIMIT", "score": 0.9995904435557947}, {"start": 214, "end": 216, "word": "10", "entity_group": "LIMIT", "score": 0.9996969971175127}, {"start": 240, "end": 242, "word": "20", "entity_group": "LIMIT", "score": 0.9993870766980406}, {"start": 271, "end": 281, "word": "local farm", "entity_group": "VAR", "score": 0.9999614374735272}, {"start": 287, "end": 292, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993427035783653}, {"start": 295, "end": 298, "word": "200", "entity_group": "PARAM", "score": 0.9994299307477039}, {"start": 349, "end": 352, "word": "2.5", "entity_group": "PARAM", "score": 0.9997210565863788}, {"start": 373, "end": 374, "word": "3", "entity_group": "PARAM", "score": 0.9997064936736205}, {"start": 398, "end": 399, "word": "2", "entity_group": "PARAM", "score": 0.9996137345022111}, {"start": 437, "end": 449, "word": "foreign farm", "entity_group": "VAR", "score": 0.999917126268701}, {"start": 455, "end": 460, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999342703578878}, {"start": 463, "end": 466, "word": "500", "entity_group": "PARAM", "score": 0.9994299307477039}, {"start": 517, "end": 518, "word": "5", "entity_group": "PARAM", "score": 0.9997477268281855}, {"start": 539, "end": 540, "word": "4", "entity_group": "PARAM", "score": 0.9997267826163313}, {"start": 564, "end": 565, "word": "4", "entity_group": "PARAM", "score": 0.9996155172832074}, {"start": 639, "end": 649, "word": "minimizing", "entity_group": "OBJ_DIR", "score": 0.9989358426180704}, {"start": 654, "end": 658, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9991936197214282}]}
{"doc_id": "720167371", "document": "A record company has $400000 to invest in two artists, a pop artist and a rapper. They have decided to invest at least three times as much money in the pop artist than in the rapper. However the amount invested in the pop artist can be at most $250000. If the money invested in the rapper earns 5% and the money invested in the pop artist earns 3%. How much money should they invest in each to maximize their earnings?", "order_mapping": {"pop artist": 0, "rapper": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"rapper": "5%", "pop artist": "3%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "400000", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "250000", "var": "pop artist", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "pop artist", "direction": "at least", "param": "three times", "y_var": "rapper", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the pop artist\n- y: Dollars invested in the rapper\n\nObjective:\n- The record company aims to maximize its earnings. The money invested in the rapper earns 5% and the money invested in the pop artist earns 3%. Therefore, the objective function is: Maximize 0.03x + 0.05y\n\nConstraints:\n- The total amount available for investment is $400,000, so the constraint is: x + y <= 400000.\n- The amount invested in the pop artist can be at most $250,000, leading to the constraint: x <= 250000.\n- The record company has decided to invest at least three times as much money in the pop artist than in the rapper, resulting in the constraint: x >= 3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.03x + 0.05y\nConstraints:\nx + y <= 400000\nx <= 250000\nx >= 3y", "canonical": {"objective": [-0.03, -0.05], "constraints": [[1.0, 1.0, 400000.0], [1.0, 0.0, 250000.0], [-1.0, 3.0, 0.0]]}, "solution": {"x": 250000, "y": 83333}, "pseudo_model": "\nDecision Variables:\n- Money invested in the pop artist: PopArtist\n- Money invested in the rapper: Rapper\n\nConstraints:\n- Total investment should not exceed $400000:\n  PopArtist + Rapper <= 400000\n- The amount invested in the pop artist can be at most $250000:\n  PopArtist <= 250000\n- Invest at least three times as much in the pop artist as in the rapper:\n  PopArtist >= 3 * Rapper\n\nObjective:\n- Maximize earnings (5% from rapper, 3% from pop artist):\n  0.05 * Rapper + 0.03 * PopArtist\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPopArtist = intvar(0, 999999999)  # Money invested in the pop artist\nRapper = intvar(0, 999999999)  # Money invested in the rapper\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $400000:\nm += PopArtist + Rapper <= 400000\n# The amount invested in the pop artist can be at most $250000:\nm += PopArtist <= 250000\n# They have decided to invest at least three times as much money in the pop artist than in the rapper:\nm += PopArtist >= 3 * Rapper\n\n# Objective\n# Maximize earnings (5% from rapper, 3% from pop artist):\nm.maximize(0.05 * Rapper + 0.03 * PopArtist)\n", "entities": [{"start": 17, "end": 20, "word": "has", "entity_group": "CONST_DIR", "score": 0.997748720811927}, {"start": 23, "end": 29, "word": "400000", "entity_group": "LIMIT", "score": 0.9988958723097029}, {"start": 59, "end": 69, "word": "pop artist", "entity_group": "VAR", "score": 0.9999558354609281}, {"start": 76, "end": 82, "word": "rapper", "entity_group": "VAR", "score": 0.9996796097804308}, {"start": 113, "end": 121, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979860701932819}, {"start": 122, "end": 133, "word": "three times", "entity_group": "PARAM", "score": 0.5484418976459169}, {"start": 155, "end": 165, "word": "pop artist", "entity_group": "VAR", "score": 0.9999828362406091}, {"start": 178, "end": 184, "word": "rapper", "entity_group": "VAR", "score": 0.9986809790094869}, {"start": 222, "end": 232, "word": "pop artist", "entity_group": "VAR", "score": 0.9999743291053389}, {"start": 240, "end": 247, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9932206931993001}, {"start": 250, "end": 256, "word": "250000", "entity_group": "LIMIT", "score": 0.999490643125613}, {"start": 288, "end": 294, "word": "rapper", "entity_group": "VAR", "score": 0.9997582765816251}, {"start": 295, "end": 300, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9496683807196894}, {"start": 301, "end": 304, "word": "5 %", "entity_group": "PARAM", "score": 0.9786316162945443}, {"start": 335, "end": 345, "word": "pop artist", "entity_group": "VAR", "score": 0.9999755783834364}, {"start": 346, "end": 351, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9967255221857984}, {"start": 352, "end": 355, "word": "3 %", "entity_group": "PARAM", "score": 0.9921416074352065}, {"start": 403, "end": 411, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994797152488353}, {"start": 418, "end": 426, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9988735838744232}]}
{"doc_id": "2035548217", "document": "TomMusic would like to attract at least 250 customers into its store daily. Therefore, it decides to sell two popular digital piano models, Piano A and Piano B, at a steep discount to attract foot traffic. TomMusic owner pays $20 and $15 for each unit of Piano A and Piano B respectively and has at its disposition a maximum daily budget of $450 for this sales campaign. For each unit of Piano A model sold, TomMusic incurs a cost of $12 and attracts 25 customers into its store on average. In comparison, each unit of Piano B incurs a lower cost of $4 but only attracts 10 customers on average. How many units of each model should be stocked daily to meet his campaign while minimizing its cost?", "order_mapping": {"Piano A": 0, "Piano B": 1}, "obj_declaration": {"type": "objective", "direction": "minimizing", "name": "cost", "terms": {"Piano B": "4", "Piano A": "12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "250", "terms": {"Piano A": "25", "Piano B": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "450", "terms": {"Piano A": "20", "Piano B": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of units of Piano A stocked daily\n- y: Number of units of Piano B stocked daily\n\nObjective:\n- TomMusic aims to minimize its cost. The owner pays $20 and $15 for each unit of Piano A and Piano B, and incurs a cost of $12 for each unit of Piano A sold and $4 for each unit of Piano B sold. Therefore, the objective function is: Minimize 20x + 15y + 12x + 4y\n\nConstraints:\n- TomMusic wants to attract at least 250 customers into its store daily. Each unit of Piano A attracts 25 customers, and each unit of Piano B attracts 10 customers, leading to the constraint: 25x + 10y >= 250.\n- The daily budget for the sales campaign is $450, so the constraint is: 20x + 15y + 12x + 4y <= 450.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 32x + 19y\nConstraints:\n25x + 10y >= 250\n32x + 19y <= 450", "canonical": {"objective": [32.0, 19.0], "constraints": [[-25.0, -10.0, -250.0], [32.0, 19.0, 450.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Piano A units stocked daily: PianoA\n- Number of Piano B units stocked daily: PianoB\n\nConstraints:\n- To attract at least 250 customers daily:\n  25 * PianoA + 10 * PianoB >= 250\n- Not to exceed the maximum daily budget of $450 for the sales campaign:\n  20 * PianoA + 15 * PianoB <= 450\n\nObjective:\n- Minimize cost (Piano A incurs a cost of $12 per unit, Piano B incurs a cost of $4 per unit):\n  12 * PianoA + 4 * PianoB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPianoA = intvar(0, 999999999)  # Number of Piano A units stocked daily\nPianoB = intvar(0, 999999999)  # Number of Piano B units stocked daily\n\n# Constraints\nm = Model()\n\n# To attract at least 250 customers daily:\nm += 25 * PianoA + 10 * PianoB >= 250\n# Not to exceed the maximum daily budget of $450:\nm += 20 * PianoA + 15 * PianoB <= 450\n\n# Objective\n# Minimize cost (Piano A incurs a cost of $12 per unit, Piano B incurs a cost of $4 per unit):\nm.minimize(12 * PianoA + 4 * PianoB)\n", "entities": [{"start": 31, "end": 39, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990153228203824}, {"start": 40, "end": 43, "word": "250", "entity_group": "LIMIT", "score": 0.9997043055408279}, {"start": 143, "end": 150, "word": "Piano A", "entity_group": "VAR", "score": 0.999968923290679}, {"start": 155, "end": 162, "word": "Piano B", "entity_group": "VAR", "score": 0.9999791783172676}, {"start": 233, "end": 235, "word": "20", "entity_group": "PARAM", "score": 0.9996907817659126}, {"start": 242, "end": 244, "word": "15", "entity_group": "PARAM", "score": 0.9997380450283595}, {"start": 262, "end": 269, "word": "Piano A", "entity_group": "VAR", "score": 0.9999591635776373}, {"start": 274, "end": 281, "word": "Piano B", "entity_group": "VAR", "score": 0.9999768312472024}, {"start": 324, "end": 331, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9991134533196065}, {"start": 350, "end": 353, "word": "450", "entity_group": "LIMIT", "score": 0.999060331227054}, {"start": 397, "end": 404, "word": "Piano A", "entity_group": "VAR", "score": 0.9999356789327911}, {"start": 436, "end": 440, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.998785697680716}, {"start": 446, "end": 448, "word": "12", "entity_group": "PARAM", "score": 0.9990068231451802}, {"start": 462, "end": 464, "word": "25", "entity_group": "PARAM", "score": 0.9997391000297747}, {"start": 532, "end": 539, "word": "Piano B", "entity_group": "VAR", "score": 0.9999897792367489}, {"start": 555, "end": 559, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9672404955731055}, {"start": 565, "end": 566, "word": "4", "entity_group": "PARAM", "score": 0.9989784580484865}, {"start": 571, "end": 575, "word": "only", "entity_group": "CONST_DIR", "score": 0.9893229776155865}, {"start": 585, "end": 587, "word": "10", "entity_group": "PARAM", "score": 0.9995578539517973}, {"start": 691, "end": 701, "word": "minimizing", "entity_group": "OBJ_DIR", "score": 0.999420214425265}, {"start": 706, "end": 710, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984407373420185}]}
{"doc_id": "-1211558483", "document": "X-Luxury Cloth wants to add coats and skirts, both with printed designs, to its collection. Both coats and skirts require designing and printing. Each coat requires 1.5 hours of designing time and 2.5 hours of printing time. Each skirt requires 3 hours of designing time and 3.5 hours of printing time. The designers are available 45 hours a week and the printing machine is available 70 hours per week. Each coat nets the company $12 in profit, and each skirt nets $16 in profit. What ratio of coats and skirts will produce the most profit within the constraints?", "order_mapping": {"coats": 0, "skirts": 1, "coat": 0, "skirt": 1}, "obj_declaration": {"type": "objective", "direction": "most", "name": "profit", "terms": {"coat": "12", "skirt": "16"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "45", "terms": {"coat": "1.5", "skirt": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"coat": "2.5", "skirt": "3.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of coats\n- y: Number of skirts\n\nObjective:\n- X-Luxury Cloth wants to determine the ratio of coats and skirts that will produce the most profit within the given constraints. Each coat nets the company $12 in profit, and each skirt nets $16 in profit. Therefore, the objective function is: Maximize 12x + 16y\n\nConstraints:\n- The designing time available is 45 hours a week, so the constraint is: 1.5x + 3y <= 45.\n- The printing time available is 70 hours per week, leading to the constraint: 2.5x + 3.5y <= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 16y\nConstraints:\n1.5x + 3y <= 45\n2.5x + 3.5y <= 70", "canonical": {"objective": [-12.0, -16.0], "constraints": [[1.5, 3.0, 45.0], [2.5, 3.5, 70.0]]}, "solution": {"x": 28, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of coats produced: Coats\n- Number of skirts produced: Skirts\n\nConstraints:\n- Designers' total available time per week is 45 hours:\n  1.5 * Coats + 3 * Skirts <= 45\n- Printing machine's total available time per week is 70 hours:\n  2.5 * Coats + 3.5 * Skirts <= 70\n\nObjective:\n- Maximize profit (12 dollars per coat, 16 dollars per skirt):\n  12 * Coats + 16 * Skirts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoats = intvar(0, 999999999)  # Number of coats produced\nSkirts = intvar(0, 999999999)  # Number of skirts produced\n\n# Constraints\nm = Model()\n\n# Designers are available 45 hours a week:\nm += 1.5 * Coats + 3 * Skirts <= 45\n# Printing machine is available 70 hours per week:\nm += 2.5 * Coats + 3.5 * Skirts <= 70\n\n# Objective\n# Maximize profit (12 dollars per coat, 16 dollars per skirt):\nm.maximize(12 * Coats + 16 * Skirts)\n", "entities": [{"start": 30, "end": 35, "word": "coats", "entity_group": "VAR", "score": 0.9987982438674153}, {"start": 40, "end": 46, "word": "skirts", "entity_group": "VAR", "score": 0.9984538824023186}, {"start": 102, "end": 107, "word": "coats", "entity_group": "VAR", "score": 0.9997241150728801}, {"start": 112, "end": 118, "word": "skirts", "entity_group": "VAR", "score": 0.998937409885388}, {"start": 157, "end": 161, "word": "coat", "entity_group": "VAR", "score": 0.9996531498887016}, {"start": 171, "end": 174, "word": "1.5", "entity_group": "PARAM", "score": 0.9996568994179361}, {"start": 203, "end": 206, "word": "2.5", "entity_group": "PARAM", "score": 0.9995993765725166}, {"start": 237, "end": 242, "word": "skirt", "entity_group": "VAR", "score": 0.9997106346822041}, {"start": 252, "end": 253, "word": "3", "entity_group": "PARAM", "score": 0.9994420025201101}, {"start": 282, "end": 285, "word": "3.5", "entity_group": "PARAM", "score": 0.9995992514374067}, {"start": 329, "end": 338, "word": "available", "entity_group": "CONST_DIR", "score": 0.995999152812955}, {"start": 339, "end": 341, "word": "45", "entity_group": "LIMIT", "score": 0.9993364107549413}, {"start": 383, "end": 392, "word": "available", "entity_group": "CONST_DIR", "score": 0.9959815576950114}, {"start": 393, "end": 395, "word": "70", "entity_group": "LIMIT", "score": 0.9990403255211039}, {"start": 418, "end": 422, "word": "coat", "entity_group": "VAR", "score": 0.9994455564018244}, {"start": 442, "end": 444, "word": "12", "entity_group": "PARAM", "score": 0.9996478152093102}, {"start": 448, "end": 454, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999724054525297}, {"start": 466, "end": 471, "word": "skirt", "entity_group": "VAR", "score": 0.999807863307698}, {"start": 479, "end": 481, "word": "16", "entity_group": "PARAM", "score": 0.9994993196723218}, {"start": 485, "end": 491, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999341441683154}, {"start": 508, "end": 513, "word": "coats", "entity_group": "VAR", "score": 0.9986301452378149}, {"start": 518, "end": 524, "word": "skirts", "entity_group": "VAR", "score": 0.998193434483458}, {"start": 542, "end": 546, "word": "most", "entity_group": "OBJ_DIR", "score": 0.9982554775304215}, {"start": 547, "end": 553, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998564108700163}]}
{"doc_id": "-2111556473", "document": "A bakery shop makes strawberry and caramel brownies. Every day, there are repeat customers that order at least 50 strawberry brownies and at least 75 caramel brownies. However, the bakery shop can make at most 100 strawberry brownies and at most 150 caramel brownies. Based on past sales, the shop makes at least twice as many strawberry brownies as caramel brownies. If the price of a strawberry brownie is $1.5 and the price of a caramel brownie is $2, how many of each should they make to maximize the revenue?", "order_mapping": {"strawberry": 0, "caramel brownies": 1, "strawberry brownies": 0, "strawberry brownie": 0, "caramel brownie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"strawberry brownie": "1.5", "caramel brownie": "2"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "50", "var": "strawberry brownies", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "75", "var": "caramel brownies", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "strawberry brownies", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "caramel brownies", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "strawberry brownies", "direction": "at least", "param": "twice", "y_var": "caramel brownies", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of strawberry brownies\n- y: Number of caramel brownies\n\nObjective:\n- The bakery shop aims to maximize its revenue. Given the price of a strawberry brownie is $1.5 and the price of a caramel brownie is $2, the objective function is: Maximize 1.5x + 2y\n\nConstraints:\n- At least 50 strawberry brownies need to be made, leading to the constraint: x >= 50.\n- At least 75 caramel brownies need to be made, leading to the constraint: y >= 75.\n- At most 100 strawberry brownies can be made, leading to the constraint: x <= 100.\n- At most 150 caramel brownies can be made, leading to the constraint: y <= 150.\n- The shop makes at least twice as many strawberry brownies as caramel brownies, leading to the constraint: x >= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.5x + 2y\nConstraints:\nx >= 50\ny >= 75\nx <= 100\ny <= 150\nx >= 2y", "canonical": {"objective": [-1.5, -2.0], "constraints": [[-1.0, 0.0, -50.0], [0.0, -1.0, -75.0], [1.0, 0.0, 100.0], [0.0, 1.0, 150.0], [-1.0, 2.0, 0.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of strawberry brownies made per day: StrawberryBrownies\n- Number of caramel brownies made per day: CaramelBrownies\n\nConstraints:\n- At least 50 strawberry brownies and at least 75 caramel brownies:\n  StrawberryBrownies >= 50\n  CaramelBrownies >= 75\n- At most 100 strawberry brownies and at most 150 caramel brownies:\n  StrawberryBrownies <= 100\n  CaramelBrownies <= 150\n- The shop makes at least twice as many strawberry brownies as caramel brownies:\n  StrawberryBrownies >= 2 * CaramelBrownies\n\nObjective:\n- Maximize revenue (1.5 dollars per strawberry brownie, 2 dollars per caramel brownie):\n  1.5 * StrawberryBrownies + 2 * CaramelBrownies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStrawberryBrownies = intvar(0, 999999999)  # Number of strawberry brownies made per day\nCaramelBrownies = intvar(0, 999999999)  # Number of caramel brownies made per day\n\n# Constraints\nm = Model()\n\n# At least 50 strawberry brownies and at least 75 caramel brownies:\nm += StrawberryBrownies >= 50\nm += CaramelBrownies >= 75\n\n# At most 100 strawberry brownies and at most 150 caramel brownies:\nm += StrawberryBrownies <= 100\nm += CaramelBrownies <= 150\n\n# The shop makes at least twice as many strawberry brownies as caramel brownies:\nm += StrawberryBrownies >= 2 * CaramelBrownies\n\n# Objective\n# Maximize revenue (1.5 dollars per strawberry brownie, 2 dollars per caramel brownie):\nm.maximize(1.5 * StrawberryBrownies + 2 * CaramelBrownies)\n", "entities": [{"start": 20, "end": 30, "word": "strawberry", "entity_group": "VAR", "score": 0.9990311913699988}, {"start": 35, "end": 51, "word": "caramel brownies", "entity_group": "VAR", "score": 0.9999797518282951}, {"start": 104, "end": 112, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987648379931597}, {"start": 113, "end": 115, "word": "50", "entity_group": "LIMIT", "score": 0.999563261157069}, {"start": 116, "end": 135, "word": "strawberry brownies", "entity_group": "VAR", "score": 0.9999639525989127}, {"start": 140, "end": 148, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988174979218524}, {"start": 149, "end": 151, "word": "75", "entity_group": "LIMIT", "score": 0.998945952843315}, {"start": 152, "end": 168, "word": "caramel brownies", "entity_group": "VAR", "score": 0.999957119924626}, {"start": 206, "end": 213, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985235369619128}, {"start": 214, "end": 217, "word": "100", "entity_group": "LIMIT", "score": 0.9994982812974595}, {"start": 218, "end": 237, "word": "strawberry brownies", "entity_group": "VAR", "score": 0.9999534759212745}, {"start": 242, "end": 249, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988267110947764}, {"start": 250, "end": 253, "word": "150", "entity_group": "LIMIT", "score": 0.9993977450798563}, {"start": 254, "end": 270, "word": "caramel brownies", "entity_group": "VAR", "score": 0.9999512442028592}, {"start": 310, "end": 318, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997415876874022}, {"start": 319, "end": 324, "word": "twice", "entity_group": "PARAM", "score": 0.995525848378282}, {"start": 333, "end": 352, "word": "strawberry brownies", "entity_group": "VAR", "score": 0.9999715214810094}, {"start": 356, "end": 372, "word": "caramel brownies", "entity_group": "VAR", "score": 0.9999751671586253}, {"start": 382, "end": 387, "word": "price", "entity_group": "OBJ_NAME", "score": 0.9496878433948439}, {"start": 393, "end": 411, "word": "strawberry brownie", "entity_group": "VAR", "score": 0.9999686207302831}, {"start": 417, "end": 420, "word": "1.5", "entity_group": "PARAM", "score": 0.99971528473148}, {"start": 429, "end": 434, "word": "price", "entity_group": "OBJ_NAME", "score": 0.9810142917045188}, {"start": 440, "end": 455, "word": "caramel brownie", "entity_group": "VAR", "score": 0.9999443448761851}, {"start": 461, "end": 462, "word": "2", "entity_group": "PARAM", "score": 0.999681446663046}, {"start": 502, "end": 510, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997108962129959}, {"start": 515, "end": 522, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9989859763173715}]}
{"doc_id": "-1715825597", "document": "An investor has $200000 to invest in four subsets of the music industry: the pop industry, the rap industry, the country industry, and the indie industry. The rate of return for each investment is as follows: pop industry, 5%; rap industry, 4%; country industry, 3%; and indie industry, 3.5%. Here are some restrictions on the investments. The amount invested in the indie industry cannot exceed the amount invested in the pop industry. The amount invested in the rap industry cannot exceed the amount invested in the country industry. Finally at most 20% of the total amount can be in the indie industry. How much should the investor invest in each industry to maximize his return?", "order_mapping": {"pop industry": 0, "rap industry": 1, "country industry": 2, "indie industry": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"pop industry": "5%", "rap industry": "4%", "country industry": "3%", "indie industry": "3.5%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "200000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "indie industry", "direction": "cannot exceed", "y_var": "pop industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "rap industry", "direction": "cannot exceed", "y_var": "country industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "indie industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the pop industry\n- y: Dollars invested in the rap industry\n- z: Dollars invested in the country industry\n- w: Dollars invested in the indie industry\n\nObjective:\n- The investor aims to maximize his return. The rate of return for each investment is as follows: pop industry, 5%; rap industry, 4%; country industry, 3%; and indie industry, 3.5%. Therefore, the objective function is: Maximize 0.05x + 0.04y + 0.03z + 0.035w\n\nConstraints:\n- The total amount available for investment is $200,000, so the constraint is: x + y + z + w <= 200000.\n- The amount invested in the indie industry cannot exceed the amount invested in the pop industry, leading to the constraint: w <= x.\n- The amount invested in the rap industry cannot exceed the amount invested in the country industry, resulting in the constraint: y <= z.\n- At most 20% of the total amount can be in the indie industry, leading to the constraint: w <= 0.20(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.04y + 0.03z + 0.035w\nConstraints:\nx + y + z + w <= 200000\nw <= x\ny <= z\nw <= 0.20(x + y + z + w)", "canonical": {"objective": [-0.05, -0.04, -0.03, -0.035], "constraints": [[1.0, 1.0, 1.0, 1.0, 200000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.2, -0.2, -0.2, 0.8, 0.0]]}, "solution": {"x": 200000, "y": 0, "z": 0, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the pop industry: Pop\n- Amount invested in the rap industry: Rap\n- Amount invested in the country industry: Country\n- Amount invested in the indie industry: Indie\n\nConstraints:\n- Total investment should not exceed $200000:\n  Pop + Rap + Country + Indie <= 200000\n- The amount invested in the indie industry cannot exceed the amount invested in the pop industry:\n  Indie <= Pop\n- The amount invested in the rap industry cannot exceed the amount invested in the country industry:\n  Rap <= Country\n- At most 20% of the total amount can be in the indie industry:\n  Indie <= 0.20 * 200000\n\nObjective:\n- Maximize return (5% for pop, 4% for rap, 3% for country, and 3.5% for indie):\n  0.05 * Pop + 0.04 * Rap + 0.03 * Country + 0.035 * Indie\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPop = intvar(0, 200000)  # Amount invested in the pop industry\nRap = intvar(0, 200000)  # Amount invested in the rap industry\nCountry = intvar(0, 200000)  # Amount invested in the country industry\nIndie = intvar(0, 200000)  # Amount invested in the indie industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $200000:\nm += Pop + Rap + Country + Indie <= 200000\n# The amount invested in the indie industry cannot exceed the amount invested in the pop industry:\nm += Indie <= Pop\n# The amount invested in the rap industry cannot exceed the amount invested in the country industry:\nm += Rap <= Country\n# At most 20% of the total amount can be in the indie industry:\nm += Indie <= 0.20 * 200000\n\n# Objective\n# Maximize return (5% for pop, 4% for rap, 3% for country, and 3.5% for indie):\nm.maximize(0.05 * Pop + 0.04 * Rap + 0.03 * Country + 0.035 * Indie)\n", "entities": [{"start": 12, "end": 15, "word": "has", "entity_group": "CONST_DIR", "score": 0.997418056919226}, {"start": 18, "end": 24, "word": "200000", "entity_group": "LIMIT", "score": 0.9985525133853641}, {"start": 79, "end": 91, "word": "pop industry", "entity_group": "VAR", "score": 0.9999796310108734}, {"start": 98, "end": 110, "word": "rap industry", "entity_group": "VAR", "score": 0.9999776765718144}, {"start": 117, "end": 133, "word": "country industry", "entity_group": "VAR", "score": 0.9999777711361345}, {"start": 144, "end": 158, "word": "indie industry", "entity_group": "VAR", "score": 0.9999137723771344}, {"start": 173, "end": 179, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9837124556750516}, {"start": 216, "end": 228, "word": "pop industry", "entity_group": "VAR", "score": 0.9999744190866477}, {"start": 231, "end": 234, "word": "5 %", "entity_group": "PARAM", "score": 0.9879229800079701}, {"start": 237, "end": 249, "word": "rap industry", "entity_group": "VAR", "score": 0.9999559237136514}, {"start": 252, "end": 255, "word": "4 %", "entity_group": "PARAM", "score": 0.9949978610873544}, {"start": 258, "end": 274, "word": "country industry", "entity_group": "VAR", "score": 0.9999648661748696}, {"start": 277, "end": 280, "word": "3 %", "entity_group": "PARAM", "score": 0.9950266537602005}, {"start": 287, "end": 301, "word": "indie industry", "entity_group": "VAR", "score": 0.9999710715842838}, {"start": 304, "end": 309, "word": "3.5 %", "entity_group": "PARAM", "score": 0.9890368281622441}, {"start": 387, "end": 401, "word": "indie industry", "entity_group": "VAR", "score": 0.9999666167687562}, {"start": 402, "end": 416, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9891044891964306}, {"start": 444, "end": 456, "word": "pop industry", "entity_group": "VAR", "score": 0.9999706070756516}, {"start": 486, "end": 498, "word": "rap industry", "entity_group": "VAR", "score": 0.9999729680869069}, {"start": 499, "end": 513, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9892701994444939}, {"start": 541, "end": 557, "word": "country industry", "entity_group": "VAR", "score": 0.9999778378429292}, {"start": 568, "end": 575, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990786160000638}, {"start": 576, "end": 580, "word": "20 %", "entity_group": "LIMIT", "score": 0.9842654610975614}, {"start": 615, "end": 629, "word": "indie industry", "entity_group": "VAR", "score": 0.9999777571966495}, {"start": 688, "end": 696, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991785510131095}, {"start": 701, "end": 707, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9985021650168481}]}
{"doc_id": "1764286025", "document": "A farm has to deliver its milk. They can either be transported by rail or by truck. Each rail shipment can take 400 litres of milk while each truck shipment can take 200 litres of milk. The cost per rail shipment is $100 and the cost per truck shipment is $85. The farm has a budget of $3000 and the number of rail shipments cannot exceed the number of truck shipments. How many of each shipment should be taken to maximize the number of litres of milk that can be transported?", "order_mapping": {"rail": 0, "truck": 1, "rail shipment": 0, "truck shipment": 1, "rail shipments": 0, "truck shipments": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of litres of milk", "terms": {"truck shipment": "200", "rail shipment": "400"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "3000", "terms": {"rail shipment": "100", "truck shipment": "85"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "rail shipments", "direction": "cannot exceed", "y_var": "truck shipments", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of rail shipments\n- y: Number of truck shipments\n\nObjective:\n- The farm aims to maximize the number of litres of milk that can be transported. Each rail shipment can take 400 litres of milk while each truck shipment can take 200 litres of milk. Therefore, the objective function is: Maximize 400x + 200y\n\nConstraints:\n- The farm has a budget of $3000, so the cost constraint is: 100x + 85y <= 3000.\n- The number of rail shipments cannot exceed the number of truck shipments, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 200y\nConstraints:\n100x + 85y <= 3000\nx <= y", "canonical": {"objective": [-400.0, -200.0], "constraints": [[100.0, 85.0, 3000.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 16, "y": 16}, "pseudo_model": "\nDecision Variables:\n- Number of rail shipments: RailShipments\n- Number of truck shipments: TruckShipments\n\nConstraints:\n- Budget constraint (cost per rail shipment is $100 and cost per truck shipment is $85, with a total budget of $3000):\n  100 * RailShipments + 85 * TruckShipments <= 3000\n- The number of rail shipments cannot exceed the number of truck shipments:\n  RailShipments <= TruckShipments\n\nObjective:\n- Maximize the number of litres of milk transported (400 litres per rail shipment, 200 litres per truck shipment):\n  400 * RailShipments + 200 * TruckShipments\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRailShipments = intvar(0, 999999999)  # Number of rail shipments\nTruckShipments = intvar(0, 999999999)  # Number of truck shipments\n\n# Constraints\nm = Model()\n\n# The farm has a budget of $3000:\nm += 100 * RailShipments + 85 * TruckShipments <= 3000\n# The number of rail shipments cannot exceed the number of truck shipments:\nm += RailShipments <= TruckShipments\n\n# Objective\n# Maximize the number of litres of milk that can be transported (400 litres per rail shipment, 200 litres per truck shipment):\nm.maximize(400 * RailShipments + 200 * TruckShipments)\n", "entities": [{"start": 67, "end": 71, "word": "rail", "entity_group": "VAR", "score": 0.9993589976620885}, {"start": 78, "end": 83, "word": "truck", "entity_group": "VAR", "score": 0.9995856187899275}, {"start": 91, "end": 104, "word": "rail shipment", "entity_group": "VAR", "score": 0.9999792714776408}, {"start": 114, "end": 117, "word": "400", "entity_group": "PARAM", "score": 0.999593135393885}, {"start": 118, "end": 132, "word": "litres of milk", "entity_group": "OBJ_NAME", "score": 0.9659645612186092}, {"start": 144, "end": 158, "word": "truck shipment", "entity_group": "VAR", "score": 0.9999741200087774}, {"start": 168, "end": 171, "word": "200", "entity_group": "PARAM", "score": 0.9995112672909178}, {"start": 172, "end": 186, "word": "litres of milk", "entity_group": "OBJ_NAME", "score": 0.9517703767456515}, {"start": 202, "end": 215, "word": "rail shipment", "entity_group": "VAR", "score": 0.9999794414315827}, {"start": 221, "end": 224, "word": "100", "entity_group": "PARAM", "score": 0.9996496779137268}, {"start": 242, "end": 256, "word": "truck shipment", "entity_group": "VAR", "score": 0.9999345820934935}, {"start": 262, "end": 264, "word": "85", "entity_group": "PARAM", "score": 0.9997562601389727}, {"start": 282, "end": 288, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9975624118388541}, {"start": 294, "end": 298, "word": "3000", "entity_group": "LIMIT", "score": 0.9979239800476922}, {"start": 317, "end": 331, "word": "rail shipments", "entity_group": "VAR", "score": 0.9999288485782063}, {"start": 332, "end": 346, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9916397221124723}, {"start": 361, "end": 376, "word": "truck shipments", "entity_group": "VAR", "score": 0.9999592237113405}, {"start": 424, "end": 432, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995425295359277}, {"start": 437, "end": 461, "word": "number of litres of milk", "entity_group": "OBJ_NAME", "score": 0.9732751118891207}]}
{"doc_id": "-1176378527", "document": "Lucas has 120 acres of land on which he grows carrots and onions. It takes 1.5 days of tractor time and 2.5 days of hand-picking time per acre of carrots. It takes 2 days of tractor time and 2 days of hand-picking time per acre of onions. In a year, there are 120 days available for tractor use and 200 days available for hand-picking. If the profit per acre of carrots is $75 and the profit per acre of onions is $90, how many acres of each should be grown in order to maximize profit?", "order_mapping": {"carrots": 0, "onions": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carrots": "75", "onions": "90"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "120", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "120", "terms": {"carrots": "1.5", "onions": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"carrots": "2.5", "onions": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of carrots\n- y: Acres of onions\n\nObjective:\n- The objective is to maximize profit. The profit per acre of carrots is $75 and the profit per acre of onions is $90. Therefore, the objective function is: Maximize 75x + 90y\n\nConstraints:\n- Lucas has 120 acres of land, so the constraint is: x + y <= 120.\n- It takes 1.5 days of tractor time and 2.5 days of hand-picking time per acre of carrots, and 2 days of tractor time and 2 days of hand-picking time per acre of onions. In a year, there are 120 days available for tractor use and 200 days available for hand-picking. This leads to the constraints: 1.5x + 2x <= 120 and 2.5x + 2y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 75x + 90y\nConstraints:\nx + y <= 120\n1.5x + 2x <= 120\n2.5x + 2y <= 200", "canonical": {"objective": [-75.0, -90.0], "constraints": [[1.0, 1.0, 120.0], [3.5, 0.0, 120.0], [2.5, 2.0, 200.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of acres of carrots: Carrots\n- Number of acres of onions: Onions\n\nConstraints:\n- Total acres of carrots and onions should not exceed 120:\n  Carrots + Onions <= 120\n- Tractor time for carrots (1.5 days per acre) and onions (2 days per acre) should not exceed 120 days:\n  1.5 * Carrots + 2 * Onions <= 120\n- Hand-picking time for carrots (2.5 days per acre) and onions (2 days per acre) should not exceed 200 days:\n  2.5 * Carrots + 2 * Onions <= 200\n\nObjective:\n- Maximize profit (75 dollars per acre of carrots, 90 dollars per acre of onions):\n  75 * Carrots + 90 * Onions\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # Number of acres of carrots\nOnions = intvar(0, 999999999)  # Number of acres of onions\n\n# Constraints\nm = Model()\n\n# Total acres should not exceed 120:\nm += Carrots + Onions <= 120\n# Tractor time for carrots and onions should not exceed 120 days:\nm += 1.5 * Carrots + 2 * Onions <= 120\n# Hand-picking time for carrots and onions should not exceed 200 days:\nm += 2.5 * Carrots + 2 * Onions <= 200\n\n# Objective\n# Maximize profit (75 dollars per acre of carrots, 90 dollars per acre of onions):\nm.maximize(75 * Carrots + 90 * Onions)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.993120332703598}, {"start": 10, "end": 13, "word": "120", "entity_group": "LIMIT", "score": 0.9987171208033575}, {"start": 46, "end": 53, "word": "carrots", "entity_group": "VAR", "score": 0.9993185304984565}, {"start": 58, "end": 64, "word": "onions", "entity_group": "VAR", "score": 0.9994305556742183}, {"start": 76, "end": 79, "word": "1.5", "entity_group": "PARAM", "score": 0.999711200428137}, {"start": 105, "end": 108, "word": "2.5", "entity_group": "PARAM", "score": 0.9995693617781404}, {"start": 149, "end": 156, "word": "carrots", "entity_group": "VAR", "score": 0.998292301500285}, {"start": 168, "end": 169, "word": "2", "entity_group": "PARAM", "score": 0.9997231908549847}, {"start": 195, "end": 196, "word": "2", "entity_group": "PARAM", "score": 0.999569026964009}, {"start": 237, "end": 243, "word": "onions", "entity_group": "VAR", "score": 0.998909654856718}, {"start": 268, "end": 271, "word": "120", "entity_group": "LIMIT", "score": 0.9996495017336002}, {"start": 277, "end": 286, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996013622734331}, {"start": 307, "end": 310, "word": "200", "entity_group": "LIMIT", "score": 0.9997019732363551}, {"start": 316, "end": 325, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983848514672966}, {"start": 354, "end": 360, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999002801229306}, {"start": 373, "end": 380, "word": "carrots", "entity_group": "VAR", "score": 0.9994952128913245}, {"start": 386, "end": 388, "word": "75", "entity_group": "PARAM", "score": 0.99938099900165}, {"start": 397, "end": 403, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713139}, {"start": 416, "end": 422, "word": "onions", "entity_group": "VAR", "score": 0.9994301094745154}, {"start": 428, "end": 430, "word": "90", "entity_group": "PARAM", "score": 0.9995941446297254}, {"start": 484, "end": 492, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852266956683}, {"start": 493, "end": 499, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912472675}]}
{"doc_id": "415803817", "document": "Blue Novel Furniture produces two types of tables, coffee table and bedside table. It takes 2.5 hours to produce the parts of a coffee table and 4.5 hours for those of a bedside table. In addition, it takes 2 hours and 3 hours to assemble a bedside table and coffee table, respectively. Finally, polishing a bedside table takes 3.5 hours, whereas polishing a coffee table requires 1.5 hours. Every month, there are a total of 6500 hours available for producing the parts, 3500 hours for assembling the parts, and 5000 hours for polishing the tables. If the profit made on a coffee table is $50 and the profit on a bedside table is $90, how many of each type of table should be manufactured to maximize the total monthly profit?", "order_mapping": {"coffee table": 0, "bedside table": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bedside table": "90", "coffee table": "50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "6500", "terms": {"coffee table": "2.5", "bedside table": "4.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"bedside table": "2", "coffee table": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5000", "terms": {"bedside table": "3.5", "coffee table": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of coffee tables to be manufactured\n- y: Number of bedside tables to be manufactured\n\nObjective:\n- The company aims to maximize its total monthly profit. The profit made on a coffee table is $50 and the profit on a bedside table is $90. Therefore, the objective function is: Maximize 50x + 90y\n\nConstraints:\n- Production constraint: 2.5x + 4.5y <= 6500 (available hours for producing the parts)\n- Assembly constraint: 3x + 2y <= 3500 (available hours for assembling the parts)\n- Polishing constraint: 1.5x + 3.5y <= 5000 (available hours for polishing the tables)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 90y\nConstraints:\n2.5x + 4.5y <= 6500\n3x + 2y <= 3500\n1.5x + 3.5y <= 5000", "canonical": {"objective": [-50.0, -90.0], "constraints": [[2.5, 4.5, 6500.0], [3.0, 2.0, 3500.0], [1.5, 3.5, 5000.0]]}, "solution": {"x": 125, "y": 1375}, "pseudo_model": "\nDecision Variables:\n- Number of coffee tables produced: CoffeeTable\n- Number of bedside tables produced: BedsideTable\n\nConstraints:\n- Total hours for producing parts should not exceed 6500 hours:\n  2.5 * CoffeeTable + 4.5 * BedsideTable <= 6500\n- Total hours for assembling should not exceed 3500 hours:\n  3 * CoffeeTable + 2 * BedsideTable <= 3500\n- Total hours for polishing should not exceed 5000 hours:\n  1.5 * CoffeeTable + 3.5 * BedsideTable <= 5000\n\nObjective:\n- Maximize profit (50 dollars per coffee table, 90 dollars per bedside table):\n  50 * CoffeeTable + 90 * BedsideTable\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoffeeTable = intvar(0, 999999999)  # Number of coffee tables produced\nBedsideTable = intvar(0, 999999999)  # Number of bedside tables produced\n\n# Constraints\nm = Model()\n\n# Total hours available for producing the parts of tables should not exceed 6500 hours per month:\nm += 2.5 * CoffeeTable + 4.5 * BedsideTable <= 6500\n# Total hours available for assembling the tables should not exceed 3500 hours per month:\nm += 3 * CoffeeTable + 2 * BedsideTable <= 3500\n# Total hours available for polishing the tables should not exceed 5000 hours per month:\nm += 1.5 * CoffeeTable + 3.5 * BedsideTable <= 5000\n\n# Objective\n# Maximize profit (50 dollars per coffee table, 90 dollars per bedside table):\nm.maximize(50 * CoffeeTable + 90 * BedsideTable)\n", "entities": [{"start": 52, "end": 64, "word": "coffee table", "entity_group": "VAR", "score": 0.999963343124933}, {"start": 69, "end": 82, "word": "bedside table", "entity_group": "VAR", "score": 0.9999786912273461}, {"start": 94, "end": 97, "word": "2.5", "entity_group": "PARAM", "score": 0.9992608696051997}, {"start": 130, "end": 142, "word": "coffee table", "entity_group": "VAR", "score": 0.9999389610573736}, {"start": 147, "end": 150, "word": "4.5", "entity_group": "PARAM", "score": 0.9996252398169125}, {"start": 172, "end": 185, "word": "bedside table", "entity_group": "VAR", "score": 0.9999156427758995}, {"start": 211, "end": 212, "word": "2", "entity_group": "PARAM", "score": 0.9995385891435598}, {"start": 223, "end": 224, "word": "3", "entity_group": "PARAM", "score": 0.9996913454996114}, {"start": 245, "end": 258, "word": "bedside table", "entity_group": "VAR", "score": 0.9998340046577701}, {"start": 263, "end": 275, "word": "coffee table", "entity_group": "VAR", "score": 0.9999728173589562}, {"start": 315, "end": 328, "word": "bedside table", "entity_group": "VAR", "score": 0.9999304211328391}, {"start": 335, "end": 338, "word": "3.5", "entity_group": "PARAM", "score": 0.9995308661082398}, {"start": 367, "end": 379, "word": "coffee table", "entity_group": "VAR", "score": 0.9999368674523668}, {"start": 389, "end": 392, "word": "1.5", "entity_group": "PARAM", "score": 0.9995806936532692}, {"start": 436, "end": 440, "word": "6500", "entity_group": "LIMIT", "score": 0.9997634733218218}, {"start": 447, "end": 456, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991625497343782}, {"start": 483, "end": 487, "word": "3500", "entity_group": "LIMIT", "score": 0.9996585741422709}, {"start": 525, "end": 529, "word": "5000", "entity_group": "LIMIT", "score": 0.9996639515694334}, {"start": 570, "end": 576, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999871500777503}, {"start": 587, "end": 599, "word": "coffee table", "entity_group": "VAR", "score": 0.9999239355492137}, {"start": 605, "end": 607, "word": "50", "entity_group": "PARAM", "score": 0.9996081969234432}, {"start": 616, "end": 622, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999941043340811}, {"start": 628, "end": 641, "word": "bedside table", "entity_group": "VAR", "score": 0.999933812774844}, {"start": 647, "end": 649, "word": "90", "entity_group": "PARAM", "score": 0.9996678169222064}, {"start": 709, "end": 717, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992437784516492}, {"start": 736, "end": 742, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999572594595701}]}
{"doc_id": "-197783589", "document": "A furniture store makes desks and chairs. Two different manufacturers make each item. Manufacturer X can make at most 22 desks a day. Manufacturer Y can make at most 28 chairs a day. Both have to be quality checked by another company, and this company can quality check at most 40 items of either type per day. If the profit per desk is $140 and the profit per chair is $120, how many of each should the company make to maximize profit?", "order_mapping": {"desks": 0, "chairs": 1, "desk": 0, "chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chair": "120", "desk": "140"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "40", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "22", "var": "desks", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "28", "var": "chairs", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of desks made\n- y: Number of chairs made\n\nObjective:\n- The furniture store aims to maximize its profit. The profit per desk is $140 and the profit per chair is $120. Therefore, the objective function is: Maximize 140x + 120y\n\nConstraints:\n- Manufacturer X can make at most 22 desks a day, leading to the constraint: x <= 22.\n- Manufacturer Y can make at most 28 chairs a day, leading to the constraint: y <= 28.\n- The quality checking company can quality check at most 40 items of either type per day, resulting in the constraint: x + y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 140x + 120y\nConstraints:\nx <= 22\ny <= 28\nx + y <= 40", "canonical": {"objective": [-140.0, -120.0], "constraints": [[1.0, 0.0, 22.0], [0.0, 1.0, 28.0], [1.0, 1.0, 40.0]]}, "solution": {"x": 22, "y": 18}, "pseudo_model": "\nDecision Variables:\n- Number of desks made per day: Desks\n- Number of chairs made per day: Chairs\n\nConstraints:\n- Manufacturer X can make at most 22 desks a day:\n  Desks <= 22\n- Manufacturer Y can make at most 28 chairs a day:\n  Chairs <= 28\n- The quality check company can check at most 40 items of either type per day:\n  Desks + Chairs <= 40\n\nObjective:\n- Maximize profit (140 dollars per desk, 120 dollars per chair):\n  140 * Desks + 120 * Chairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDesks = intvar(0, 999999999)  # Number of desks made per day\nChairs = intvar(0, 999999999)  # Number of chairs made per day\n\n# Constraints\nm = Model()\n\n# Manufacturer X can make at most 22 desks a day:\nm += Desks <= 22\n# Manufacturer Y can make at most 28 chairs a day:\nm += Chairs <= 28\n# The quality check company can check at most 40 items of either type per day:\nm += Desks + Chairs <= 40\n\n# Objective\n# Maximize profit (140 dollars per desk, 120 dollars per chair):\nm.maximize(140 * Desks + 120 * Chairs)\n", "entities": [{"start": 24, "end": 29, "word": "desks", "entity_group": "VAR", "score": 0.99954071686657}, {"start": 34, "end": 40, "word": "chairs", "entity_group": "VAR", "score": 0.9992889732696554}, {"start": 112, "end": 119, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988488988397507}, {"start": 120, "end": 122, "word": "22", "entity_group": "LIMIT", "score": 0.9996082447546705}, {"start": 123, "end": 128, "word": "desks", "entity_group": "VAR", "score": 0.9995260501906044}, {"start": 161, "end": 168, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988335301165309}, {"start": 169, "end": 171, "word": "28", "entity_group": "LIMIT", "score": 0.9995600667837095}, {"start": 172, "end": 178, "word": "chairs", "entity_group": "VAR", "score": 0.9993655482078638}, {"start": 275, "end": 282, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990160821438644}, {"start": 283, "end": 285, "word": "40", "entity_group": "LIMIT", "score": 0.9997297559375246}, {"start": 324, "end": 330, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999800716468126}, {"start": 335, "end": 339, "word": "desk", "entity_group": "VAR", "score": 0.9995657823882493}, {"start": 345, "end": 348, "word": "140", "entity_group": "PARAM", "score": 0.9993478814005089}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465451}, {"start": 368, "end": 373, "word": "chair", "entity_group": "VAR", "score": 0.99908883297735}, {"start": 379, "end": 382, "word": "120", "entity_group": "PARAM", "score": 0.9994707412182511}, {"start": 429, "end": 437, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 438, "end": 444, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "1694027096", "document": "A factory makes two types of car oils: Regular Synthetic and Premium Synthetic. A container of Regular Synthetic contains 25 grams of substance A, 40 grams of substance B and 36 grams of substance C. A container of Premium Synthetic contains 10 grams of substance A, 25 grams of substance B and 40 grams of substance C. The factory has 1000 grams of substance A, 500 grams of substance B, 900 grams of substance C. In addition, the profit per container of Regular Synthetic is $17.4 and the profit per container of Premium Synthetic is $11.1. How many containers of each oil should the factory make to maximize profit?", "order_mapping": {"Regular Synthetic": 0, "Premium Synthetic": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Regular Synthetic": "17.4", "Premium Synthetic": "11.1"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"Regular Synthetic": "25", "Premium Synthetic": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "500", "terms": {"Regular Synthetic": "40", "Premium Synthetic": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "900", "terms": {"Regular Synthetic": "36", "Premium Synthetic": "40"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of containers of Regular Synthetic\n- y: Number of containers of Premium Synthetic\n\nObjective:\n- The factory aims to maximize its profit. The profit per container of Regular Synthetic is $17.4 and the profit per container of Premium Synthetic is $11.1. Therefore, the objective function is: Maximize 17.4x + 11.1y\n\nConstraints:\n- The factory has limited amounts of substances A, B, and C. The constraints for substance A, B, and C are: 25x + 10y <= 1000, 40x + 25y <= 500, and 36x + 40y <= 900, respectively.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 17.4x + 11.1y\nConstraints:\n25x + 10y <= 1000\n40x + 25y <= 500\n36x + 40y <= 900", "canonical": {"objective": [-17.4, -11.1], "constraints": [[25.0, 10.0, 1000.0], [40.0, 25.0, 500.0], [36.0, 40.0, 900.0]]}, "solution": {"x": 0, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of containers of Regular Synthetic oil: RegularSynthetic\n- Number of containers of Premium Synthetic oil: PremiumSynthetic\n\nConstraints:\n- The total grams of substance A used should not exceed 1000 grams:\n  25 * RegularSynthetic + 10 * PremiumSynthetic <= 1000\n- The total grams of substance B used should not exceed 500 grams:\n  40 * RegularSynthetic + 25 * PremiumSynthetic <= 500\n- The total grams of substance C used should not exceed 900 grams:\n  36 * RegularSynthetic + 40 * PremiumSynthetic <= 900\n\nObjective:\n- Maximize profit (17.4 dollars per container of Regular Synthetic, 11.1 dollars per container of Premium Synthetic):\n  17.4 * RegularSynthetic + 11.1 * PremiumSynthetic\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularSynthetic = intvar(0, 999999999)  # Number of containers of Regular Synthetic oil\nPremiumSynthetic = intvar(0, 999999999)  # Number of containers of Premium Synthetic oil\n\n# Constraints\nm = Model()\n\n# Substance A limit:\nm += 25 * RegularSynthetic + 10 * PremiumSynthetic <= 1000\n# Substance B limit:\nm += 40 * RegularSynthetic + 25 * PremiumSynthetic <= 500\n# Substance C limit:\nm += 36 * RegularSynthetic + 40 * PremiumSynthetic <= 900\n\n# Objective\n# Maximize profit (17.4 dollars per container of Regular Synthetic, 11.1 dollars per container of Premium Synthetic):\nm.maximize(17.4 * RegularSynthetic + 11.1 * PremiumSynthetic)\n", "entities": [{"start": 40, "end": 57, "word": "Regular Synthetic", "entity_group": "VAR", "score": 0.9999629024999369}, {"start": 62, "end": 79, "word": "Premium Synthetic", "entity_group": "VAR", "score": 0.9999783666240722}, {"start": 97, "end": 114, "word": "Regular Synthetic", "entity_group": "VAR", "score": 0.9999719362612189}, {"start": 124, "end": 126, "word": "25", "entity_group": "PARAM", "score": 0.999670977132871}, {"start": 150, "end": 152, "word": "40", "entity_group": "PARAM", "score": 0.9997163778716548}, {"start": 178, "end": 180, "word": "36", "entity_group": "PARAM", "score": 0.9996651127032259}, {"start": 218, "end": 235, "word": "Premium Synthetic", "entity_group": "VAR", "score": 0.9999588971396386}, {"start": 245, "end": 247, "word": "10", "entity_group": "PARAM", "score": 0.999671011209248}, {"start": 271, "end": 273, "word": "25", "entity_group": "PARAM", "score": 0.9997163778716539}, {"start": 299, "end": 301, "word": "40", "entity_group": "PARAM", "score": 0.9995669497102694}, {"start": 336, "end": 339, "word": "has", "entity_group": "CONST_DIR", "score": 0.9988966845025677}, {"start": 340, "end": 344, "word": "1000", "entity_group": "LIMIT", "score": 0.9985345026044293}, {"start": 368, "end": 371, "word": "500", "entity_group": "LIMIT", "score": 0.9997093372819646}, {"start": 395, "end": 398, "word": "900", "entity_group": "LIMIT", "score": 0.9995424906951881}, {"start": 439, "end": 445, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996552363893016}, {"start": 463, "end": 480, "word": "Regular Synthetic", "entity_group": "VAR", "score": 0.9999381791790934}, {"start": 486, "end": 490, "word": "17.4", "entity_group": "PARAM", "score": 0.9996429175580175}, {"start": 499, "end": 505, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997792153044714}, {"start": 523, "end": 540, "word": "Premium Synthetic", "entity_group": "VAR", "score": 0.9998737400146116}, {"start": 546, "end": 550, "word": "11.1", "entity_group": "PARAM", "score": 0.9997179793051181}, {"start": 612, "end": 620, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993297883932426}, {"start": 621, "end": 627, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277416847808}]}
{"doc_id": "-864692003", "document": "An litchi farm is trying to send their litchis to the city. They decide to ship them either by boat or by cargo plane. Each boat trip costs $5000 and can take 500 boxes of litchis while each cargo plane trip costs $3000 and can take 200 boxes. In order to transport all the produce on time, the number of boat trips cannot exceed the number of cargo plane trips. If the farm has a budget of $200000, decide how many to ship by boat or by plane to maximize the boxes of litchis the farm can deliver to their customers.", "order_mapping": {"boat": 0, "cargo plane": 1, "boat trip": 0, "cargo plane trip": 1, "boat trips": 0, "by plane": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "boxes of litchis", "terms": {"boat trip": "500", "cargo plane trip": "200"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "200000", "terms": {"boat trip": "5000", "cargo plane trip": "3000"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "boat trips", "direction": "cannot exceed", "y_var": "cargo plane", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of boat trips\n- y: Number of cargo plane trips\n\nObjective:\n- The farm aims to maximize the number of boxes of litchis delivered to their customers. Each boat trip can take 500 boxes of litchis, and each cargo plane trip can take 200 boxes. Therefore, the objective function is: Maximize 500x + 200y\n\nConstraints:\n- The farm has a budget of $200,000, so the constraint is: 5000x + 3000y <= 200000.\n- The number of boat trips cannot exceed the number of cargo plane trips, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 200y\nConstraints:\n5000x + 3000y <= 200000\nx <= y", "canonical": {"objective": [-500.0, -200.0], "constraints": [[5000.0, 3000.0, 200000.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 25, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of boat trips: BoatTrips\n- Number of cargo plane trips: CargoPlaneTrips\n\nConstraints:\n- The number of boat trips cannot exceed the number of cargo plane trips:\n  BoatTrips <= CargoPlaneTrips\n- The total cost should not exceed the budget of $200000 (5000 dollars per boat trip, 3000 dollars per cargo plane trip):\n  5000 * BoatTrips + 3000 * CargoPlaneTrips <= 200000\n\nObjective:\n- Maximize the boxes of litchis delivered (500 boxes per boat trip, 200 boxes per cargo plane trip):\n  500 * BoatTrips + 200 * CargoPlaneTrips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBoatTrips = intvar(0, 999999999)  # Number of boat trips\nCargoPlaneTrips = intvar(0, 999999999)  # Number of cargo plane trips\n\n# Constraints\nm = Model()\n\n# The number of boat trips cannot exceed the number of cargo plane trips:\nm += BoatTrips <= CargoPlaneTrips\n# The total cost should not exceed the budget of $200000:\nm += 5000 * BoatTrips + 3000 * CargoPlaneTrips <= 200000\n\n# Objective\n# Maximize the boxes of litchis delivered (500 boxes per boat trip, 200 boxes per cargo plane trip):\nm.maximize(500 * BoatTrips + 200 * CargoPlaneTrips)\n", "entities": [{"start": 96, "end": 100, "word": "boat", "entity_group": "VAR", "score": 0.9996463006208909}, {"start": 107, "end": 118, "word": "cargo plane", "entity_group": "VAR", "score": 0.9999792738211519}, {"start": 126, "end": 135, "word": "boat trip", "entity_group": "VAR", "score": 0.9999830831111565}, {"start": 144, "end": 148, "word": "5000", "entity_group": "PARAM", "score": 0.9992004132469097}, {"start": 162, "end": 165, "word": "500", "entity_group": "PARAM", "score": 0.9996856823480685}, {"start": 166, "end": 182, "word": "boxes of litchis", "entity_group": "OBJ_NAME", "score": 0.9927355981535555}, {"start": 194, "end": 210, "word": "cargo plane trip", "entity_group": "VAR", "score": 0.9997338479966765}, {"start": 219, "end": 223, "word": "3000", "entity_group": "PARAM", "score": 0.9994203169223932}, {"start": 237, "end": 240, "word": "200", "entity_group": "PARAM", "score": 0.9995842101441421}, {"start": 241, "end": 246, "word": "boxes", "entity_group": "OBJ_NAME", "score": 0.9930370001648788}, {"start": 311, "end": 321, "word": "boat trips", "entity_group": "VAR", "score": 0.9999703374415846}, {"start": 322, "end": 336, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9908719521879334}, {"start": 351, "end": 362, "word": "cargo plane", "entity_group": "VAR", "score": 0.9999932713614892}, {"start": 389, "end": 395, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9853593961775043}, {"start": 401, "end": 407, "word": "200000", "entity_group": "LIMIT", "score": 0.9990839061678586}, {"start": 437, "end": 441, "word": "boat", "entity_group": "VAR", "score": 0.9993228275086533}, {"start": 445, "end": 453, "word": "by plane", "entity_group": "VAR", "score": 0.9997880244705928}, {"start": 457, "end": 465, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989182386960888}, {"start": 470, "end": 486, "word": "boxes of litchis", "entity_group": "OBJ_NAME", "score": 0.9880599863759235}]}
{"doc_id": "-47282422", "document": "A factory manufactures 2 types of tools, drills and saws, which require the use of two machines, a milling machine and a CNG. It takes 20 minutes on the milling machine and 70 minutes on CNG machine to manufacture a package of drills, while it takes 30 minutes on the milling machine and 90 minutes on the CNG machine to manufacture a package of saws. Each machine is available for a maximum of 800 minutes on any day. The manufacturer can sell a package of drills at a profit of $35 and a package of saws at a profit of $100. Assuming that he can sell all the tools he manufactures, how many packages of each type should the factory owner produce in a day in order to maximize his profit? Determine the maximum profit.", "order_mapping": {"drills": 0, "saws": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"drills": "35", "saws": "100"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "800", "terms": {"drills": "20", "saws": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "800", "terms": {"drills": "70", "saws": "90"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of drills\n- y: Number of packages of saws\n\nObjective:\n- The factory owner aims to maximize his profit. The profit from selling a package of drills is $35 and the profit from selling a package of saws is $100. Therefore, the objective function is: Maximize 35x + 100y\n\nConstraints:\n- Each machine is available for a maximum of 800 minutes on any day. The time taken to manufacture a package of drills and saws on the milling machine and CNG machine can be used to form the constraints:\n    - 20x + 30y <= 800 (milling machine constraint)\n    - 70x + 90y <= 800 (CNG machine constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 35x + 100y\nConstraints:\n20x + 30y <= 800\n70x + 90y <= 800", "canonical": {"objective": [-35.0, -100.0], "constraints": [[20.0, 30.0, 800.0], [70.0, 90.0, 800.0]]}, "solution": {"x": 1, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of packages of drills manufactured per day: Drills\n- Number of packages of saws manufactured per day: Saws\n\nConstraints:\n- Milling machine time for drills and saws should not exceed 800 minutes per day:\n  20 * Drills + 30 * Saws <= 800\n- CNG machine time for drills and saws should not exceed 800 minutes per day:\n  70 * Drills + 90 * Saws <= 800\n\nObjective:\n- Maximize profit (35 dollars profit per package of drills, 100 dollars profit per package of saws):\n  35 * Drills + 100 * Saws\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDrills = intvar(0, 999999999)  # Number of packages of drills manufactured per day\nSaws = intvar(0, 999999999)  # Number of packages of saws manufactured per day\n\n# Constraints\nm = Model()\n\n# Milling machine time constraint (20 minutes for drills, 30 minutes for saws, maximum of 800 minutes available):\nm += 20 * Drills + 30 * Saws <= 800\n# CNG machine time constraint (70 minutes for drills, 90 minutes for saws, maximum of 800 minutes available):\nm += 70 * Drills + 90 * Saws <= 800\n\n# Objective\n# Maximize profit (35 dollars profit per package of drills, 100 dollars profit per package of saws):\nm.maximize(35 * Drills + 100 * Saws)\n", "entities": [{"start": 42, "end": 48, "word": "drills", "entity_group": "VAR", "score": 0.9995028978226029}, {"start": 53, "end": 57, "word": "saws", "entity_group": "VAR", "score": 0.9996388342713355}, {"start": 139, "end": 141, "word": "20", "entity_group": "PARAM", "score": 0.9996644552602633}, {"start": 177, "end": 179, "word": "70", "entity_group": "PARAM", "score": 0.9997047778830473}, {"start": 231, "end": 237, "word": "drills", "entity_group": "VAR", "score": 0.9998070644212425}, {"start": 255, "end": 257, "word": "30", "entity_group": "PARAM", "score": 0.9996384817347339}, {"start": 293, "end": 295, "word": "90", "entity_group": "PARAM", "score": 0.9996352723504289}, {"start": 351, "end": 355, "word": "saws", "entity_group": "VAR", "score": 0.9996977568290912}, {"start": 390, "end": 397, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9974923385292758}, {"start": 401, "end": 404, "word": "800", "entity_group": "LIMIT", "score": 0.9997190548735241}, {"start": 465, "end": 471, "word": "drills", "entity_group": "VAR", "score": 0.9991228907074946}, {"start": 477, "end": 483, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994315416358199}, {"start": 489, "end": 491, "word": "35", "entity_group": "PARAM", "score": 0.99938797283167}, {"start": 509, "end": 513, "word": "saws", "entity_group": "VAR", "score": 0.999512774827729}, {"start": 519, "end": 525, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9985027491700688}, {"start": 531, "end": 534, "word": "100", "entity_group": "PARAM", "score": 0.9996554112261733}, {"start": 680, "end": 688, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9923990483040284}, {"start": 693, "end": 699, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999179864248325}]}
{"doc_id": "1001215896", "document": "Delta Electronics sells two microphones: a regular one and a premium one. The regular microphone costs the store $75 and yields a profit of $80. The premium microphone costs the store $100 and yields a profit of $95. The store owner has a budget of $30000 for investing in microphone inventory and estimates a total monthly demand of at most 300 microphones. How many microphones of either type should be stocked in order to maximize profit?", "order_mapping": {"regular": 0, "premium": 1, "regular microphone": 0, "premium microphone": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular microphone": "80", "premium microphone": "95"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "30000", "terms": {"regular microphone": "75", "premium microphone": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "300", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular microphones\n- y: Number of premium microphones\n\nObjective:\n- The store owner aims to maximize the profit. The regular microphone yields a profit of $80 and the premium microphone yields a profit of $95. Therefore, the objective function is: Maximize 80x + 95y\n\nConstraints:\n- The store owner has a budget of $30000 for investing in microphone inventory, leading to the constraint: 75x + 100y <= 30000.\n- The total monthly demand should be at most 300 microphones, resulting in the constraint: x + y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 80x + 95y\nConstraints:\n75x + 100y <= 30000\nx + y <= 300", "canonical": {"objective": [-80.0, -95.0], "constraints": [[75.0, 100.0, 30000.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 0, "y": 300}, "pseudo_model": "\nDecision Variables:\n- Number of regular microphones stocked: RegularMicrophones\n- Number of premium microphones stocked: PremiumMicrophones\n\nConstraints:\n- The total investment in microphones should not exceed $30000:\n  75 * RegularMicrophones + 100 * PremiumMicrophones <= 30000\n- The total number of microphones stocked should not exceed the monthly demand of 300:\n  RegularMicrophones + PremiumMicrophones <= 300\n\nObjective:\n- Maximize profit:\n  80 * RegularMicrophones + 95 * PremiumMicrophones\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularMicrophones = intvar(0, 999999999)  # Number of regular microphones stocked\nPremiumMicrophones = intvar(0, 999999999)  # Number of premium microphones stocked\n\n# Constraints\nm = Model()\n\n# The total cost of microphones should not exceed the budget of $30000:\n# (Cost of regular microphone * Number of regular microphones) + (Cost of premium microphone * Number of premium microphones) <= $30000\nm += 75 * RegularMicrophones + 100 * PremiumMicrophones <= 30000\n\n# The total number of microphones (regular and premium) should not exceed the estimated demand of 300:\nm += RegularMicrophones + PremiumMicrophones <= 300\n\n# Objective\n# Maximize profit:\n# (Profit from regular microphone * Number of regular microphones) + (Profit from premium microphone * Number of premium microphones)\nm.maximize(80 * RegularMicrophones + 95 * PremiumMicrophones)\n", "entities": [{"start": 44, "end": 51, "word": "regular", "entity_group": "VAR", "score": 0.9995348812239343}, {"start": 62, "end": 69, "word": "premium", "entity_group": "VAR", "score": 0.9997663960338367}, {"start": 80, "end": 98, "word": "regular microphone", "entity_group": "VAR", "score": 0.9999867881610511}, {"start": 117, "end": 119, "word": "75", "entity_group": "PARAM", "score": 0.9995416188491073}, {"start": 133, "end": 139, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999555356231982}, {"start": 145, "end": 147, "word": "80", "entity_group": "PARAM", "score": 0.9995841818430683}, {"start": 154, "end": 172, "word": "premium microphone", "entity_group": "VAR", "score": 0.9999832516744647}, {"start": 191, "end": 194, "word": "100", "entity_group": "PARAM", "score": 0.999541618849107}, {"start": 208, "end": 214, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995898821343856}, {"start": 220, "end": 222, "word": "95", "entity_group": "PARAM", "score": 0.9995015751564813}, {"start": 247, "end": 253, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9906854373679959}, {"start": 259, "end": 264, "word": "30000", "entity_group": "LIMIT", "score": 0.998647764883684}, {"start": 343, "end": 350, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986071824664491}, {"start": 351, "end": 354, "word": "300", "entity_group": "LIMIT", "score": 0.9997123912068897}, {"start": 435, "end": 443, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9946628327077289}, {"start": 444, "end": 450, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990907017272325}]}
{"doc_id": "1925980551", "document": "The Jockspring company wants to use a total market budget of $50,000 to promote a new brand of candy. To do the promotion, the company needs to decide how much to allocate to each of its two advertising channels: (1) newspapers and (2) radio stations. Each day, it costs the company $2,500 and $1,500 to run advertisement spots on newspapers and radio stations, respectively. Based on past ratings, the expected daily reach is 10,000 readers for each newspaper spot and 20,000 users for a radio station spot. The business director believes that both channels should be effectively used to ensure the success of the product launch. She wants to plan at least 5 but no more than 10 newspaper spots. Conversely, the radio station spots need to be at least 20 due to the pricing tier policy. How many times should each of the media channels be used to maximize the reach of the campaign?", "order_mapping": {"newspapers": 0, "radio stations": 1, "newspaper spot": 0, "radio station": 1, "newspaper spots": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "reach", "terms": {"newspaper spot": "10,000", "radio station": "20,000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "50,000", "terms": {"newspapers": "2,500", "radio stations": "1,500"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "10", "var": "newspaper spots", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "radio station", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "newspaper spots", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of newspaper spots\n- y: Number of radio station spots\n\nObjective:\n- The company wants to maximize the reach of the campaign. The expected daily reach is 10,000 readers for each newspaper spot and 20,000 users for a radio station spot. Therefore, the objective function is: Maximize 10000x + 20000y\n\nConstraints:\n- The total market budget is $50,000, so the constraint is: 2500x + 1500y <= 50000.\n- The company wants to plan at least 5 but no more than 10 newspaper spots, leading to the constraint: 5 <= x <= 10.\n- The radio station spots need to be at least 20 due to the pricing tier policy, resulting in the constraint: y >= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10000x + 20000y\nConstraints:\n2500x + 1500y <= 50000\n5 <= x <= 10\ny >= 20", "canonical": {"objective": [-10000.0, -20000.0], "constraints": [[2500.0, 1500.0, 50000.0], [0.0, -1.0, -20.0], [-1.0, 0.0, -5.0], [1.0, 0.0, 10.0]]}, "solution": {"x": 5, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of newspaper spots: NewspaperSpots (at least 5 but no more than 10)\n- Number of radio station spots: RadioStationSpots (at least 20)\n\nConstraints:\n- Total budget constraint: $2,500 per newspaper spot and $1,500 per radio station spot should not exceed $50,000:\n  2500 * NewspaperSpots + 1500 * RadioStationSpots <= 50000\n\nObjective:\n- Maximize reach: 10,000 readers per newspaper spot and 20,000 users per radio station spot:\n  10000 * NewspaperSpots + 20000 * RadioStationSpots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewspaperSpots = intvar(5, 10)  # Number of newspaper spots, at least 5 but no more than 10\nRadioStationSpots = intvar(20, 999999999)  # Number of radio station spots, at least 20\n\n# Constraints\nm = Model()\n\n# Total budget constraint: $2,500 per newspaper spot and $1,500 per radio station spot should not exceed $50,000\nm += 2500 * NewspaperSpots + 1500 * RadioStationSpots <= 50000\n\n# Objective\n# Maximize reach: 10,000 readers per newspaper spot and 20,000 users per radio station spot\nm.maximize(10000 * NewspaperSpots + 20000 * RadioStationSpots)\n", "entities": [{"start": 51, "end": 57, "word": "budget", "entity_group": "CONST_DIR", "score": 0.969818539852767}, {"start": 63, "end": 69, "word": "50,000", "entity_group": "LIMIT", "score": 0.9995066082336139}, {"start": 223, "end": 233, "word": "newspapers", "entity_group": "VAR", "score": 0.999626794556901}, {"start": 244, "end": 258, "word": "radio stations", "entity_group": "VAR", "score": 0.9999742847744666}, {"start": 295, "end": 300, "word": "2,500", "entity_group": "PARAM", "score": 0.9995616133176479}, {"start": 307, "end": 312, "word": "1,500", "entity_group": "PARAM", "score": 0.999719992257266}, {"start": 343, "end": 353, "word": "newspapers", "entity_group": "VAR", "score": 0.9989775317012377}, {"start": 358, "end": 372, "word": "radio stations", "entity_group": "VAR", "score": 0.9999858543620448}, {"start": 433, "end": 438, "word": "reach", "entity_group": "OBJ_NAME", "score": 0.9996478052903678}, {"start": 442, "end": 448, "word": "10,000", "entity_group": "PARAM", "score": 0.9996712399255973}, {"start": 466, "end": 480, "word": "newspaper spot", "entity_group": "VAR", "score": 0.9999777130223051}, {"start": 485, "end": 491, "word": "20,000", "entity_group": "PARAM", "score": 0.999692823053013}, {"start": 504, "end": 517, "word": "radio station", "entity_group": "VAR", "score": 0.9999930167091536}, {"start": 666, "end": 674, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990051581511363}, {"start": 675, "end": 676, "word": "5", "entity_group": "LIMIT", "score": 0.9993038033032569}, {"start": 681, "end": 693, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.997331429972852}, {"start": 694, "end": 696, "word": "10", "entity_group": "LIMIT", "score": 0.9993337565769498}, {"start": 697, "end": 712, "word": "newspaper spots", "entity_group": "VAR", "score": 0.9999690995243739}, {"start": 732, "end": 745, "word": "radio station", "entity_group": "VAR", "score": 0.999992688149972}, {"start": 763, "end": 771, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9974624187977061}, {"start": 772, "end": 774, "word": "20", "entity_group": "LIMIT", "score": 0.999248127934125}, {"start": 868, "end": 876, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9977951669129992}, {"start": 881, "end": 886, "word": "reach", "entity_group": "OBJ_NAME", "score": 0.9883686661836052}]}
{"doc_id": "-1706100768", "document": "Tom is playing a first-person shooter game where a slow shot is worth 3 points and a quick shot is worth 6 points. In total, Tom can take at most 20 shots. He must take at least 8 slow shots and 5 quick shots, but due to time restrictions, he can take at most 12 slow shots or 12 quick shots. How many of each shot must Tom take, assuming all his shots get points, to maximize his score?", "order_mapping": {"slow shot": 0, "quick shot": 1, "slow shots": 0, "quick shots": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "score", "terms": {"quick shot": "6", "slow shot": "3"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "20", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "8", "var": "slow shots", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12", "var": "slow shots", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12", "var": "quick shots", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "quick shots", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of slow shots\n- y: Number of quick shots\n\nObjective:\n- Tom wants to maximize his score. A slow shot is worth 3 points and a quick shot is worth 6 points. Therefore, the objective function is: Maximize 3x + 6y\n\nConstraints:\n- Tom can take at most 20 shots, so the constraint is: x + y <= 20.\n- He must take at least 8 slow shots, leading to the constraint: x >= 8.\n- He must take at least 5 quick shots, leading to the constraint: y >= 5.\n- Due to time restrictions, he can take at most 12 slow shots, leading to the constraint: x <= 12.\n- Due to time restrictions, he can take at most 12 quick shots, leading to the constraint: y <= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 6y\nConstraints:\nx + y <= 20\nx >= 8\ny >= 5\nx <= 12\ny <= 12", "canonical": {"objective": [-3.0, -6.0], "constraints": [[1.0, 1.0, 20.0], [-1.0, 0.0, -8.0], [0.0, -1.0, -5.0], [1.0, 0.0, 12.0], [0.0, 1.0, 12.0]]}, "solution": {"x": 8, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Number of slow shots taken: SlowShots\n- Number of quick shots taken: QuickShots\n\nConstraints:\n- Total number of shots should not exceed 20:\n  SlowShots + QuickShots <= 20\n- At least 8 slow shots should be taken:\n  SlowShots >= 8\n- At most 12 slow shots should be taken:\n  SlowShots <= 12\n- At most 12 quick shots should be taken:\n  QuickShots <= 12\n- At least 5 quick shots should be taken:\n  QuickShots >= 5\n\nObjective:\n- Maximize score (3 points for slow shots, 6 points for quick shots):\n  3 * SlowShots + 6 * QuickShots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSlowShots = intvar(0, 999999999)  # Number of slow shots taken\nQuickShots = intvar(0, 999999999)  # Number of quick shots taken\n\n# Constraints\nm = Model()\n\n# Total number of shots should not exceed 20:\nm += SlowShots + QuickShots <= 20\n# At least 8 slow shots should be taken:\nm += SlowShots >= 8\n# At most 12 slow shots should be taken:\nm += SlowShots <= 12\n# At most 12 quick shots should be taken:\nm += QuickShots <= 12\n# At least 5 quick shots should be taken:\nm += QuickShots >= 5\n\n# Objective\n# Maximize score (3 points for slow shots, 6 points for quick shots):\nm.maximize(3 * SlowShots + 6 * QuickShots)\n", "entities": [{"start": 53, "end": 62, "word": "slow shot", "entity_group": "VAR", "score": 0.9994634726476876}, {"start": 72, "end": 73, "word": "3", "entity_group": "PARAM", "score": 0.9997081325799144}, {"start": 74, "end": 80, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9830303024471057}, {"start": 87, "end": 97, "word": "quick shot", "entity_group": "VAR", "score": 0.9998703088135166}, {"start": 107, "end": 108, "word": "6", "entity_group": "PARAM", "score": 0.9996281996548155}, {"start": 109, "end": 115, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9438560907627978}, {"start": 142, "end": 149, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985947712893073}, {"start": 150, "end": 152, "word": "20", "entity_group": "LIMIT", "score": 0.999722049764749}, {"start": 174, "end": 182, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988196862555823}, {"start": 183, "end": 184, "word": "8", "entity_group": "LIMIT", "score": 0.999560096351054}, {"start": 185, "end": 195, "word": "slow shots", "entity_group": "VAR", "score": 0.9998484522891768}, {"start": 200, "end": 201, "word": "5", "entity_group": "LIMIT", "score": 0.9995660103216311}, {"start": 202, "end": 213, "word": "quick shots", "entity_group": "VAR", "score": 0.9999113895577135}, {"start": 259, "end": 266, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985763973060149}, {"start": 267, "end": 269, "word": "12", "entity_group": "LIMIT", "score": 0.99957062985191}, {"start": 270, "end": 280, "word": "slow shots", "entity_group": "VAR", "score": 0.9998353711477898}, {"start": 284, "end": 286, "word": "12", "entity_group": "LIMIT", "score": 0.99935629500291}, {"start": 287, "end": 298, "word": "quick shots", "entity_group": "VAR", "score": 0.9998992944542473}, {"start": 366, "end": 372, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9918879020216141}, {"start": 378, "end": 386, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989678477778943}, {"start": 391, "end": 396, "word": "score", "entity_group": "OBJ_NAME", "score": 0.998422804573993}]}
{"doc_id": "-757513535", "document": "A food truck wants to make sausages using shrimp and beef. The mixture needs to contain at least 20 units of protein and 25 units of fat. Shrimp costs $36 per kg and beef costs $40 per kg. Per kilogram, shrimp contains 2.5 units of protein and 3 units of fat. Per kilogram, beef contains 4 units of protein and 2.5 units of fat. Determine the minimum cost of the mixture.", "order_mapping": {"shrimp": 0, "beef": 1, "Shrimp": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"beef": "40", "Shrimp": "36"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"shrimp": "2.5", "beef": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "25", "terms": {"shrimp": "3", "beef": "2.5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Kilograms of shrimp\n- y: Kilograms of beef\n\nObjective:\n- The food truck aims to minimize the cost of the mixture. Given that shrimp costs $36 per kg and beef costs $40 per kg, the objective function is: Minimize 36x + 40y\n\nConstraints:\n- The mixture needs to contain at least 20 units of protein, leading to the constraint: 2.5x + 4y >= 20\n- The mixture needs to contain at least 25 units of fat, leading to the constraint: 3x + 2.5y >= 25\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 36x + 40y\nConstraints:\n2.5x + 4y >= 20\n3x + 2.5y >= 25", "canonical": {"objective": [36.0, 40.0], "constraints": [[-2.5, -4.0, -20.0], [-3.0, -2.5, -25.0]]}, "solution": {"x": 9, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount of shrimp in kg: Shrimp\n- Amount of beef in kg: Beef\n\nConstraints:\n- The mixture needs to contain at least 20 units of protein:\n  2.5 * Shrimp + 4 * Beef >= 20\n- The mixture needs to contain at least 25 units of fat:\n  3 * Shrimp + 2.5 * Beef >= 25\n\nObjective:\n- Minimize the cost of the mixture (Shrimp costs $36 per kg and beef costs $40 per kg):\n  36 * Shrimp + 40 * Beef\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShrimp = intvar(0, 999999999)  # Amount of shrimp in kg\nBeef = intvar(0, 999999999)  # Amount of beef in kg\n\n# Constraints\nm = Model()\n\n# The mixture needs to contain at least 20 units of protein:\nm += 2.5 * Shrimp + 4 * Beef >= 20\n# The mixture needs to contain at least 25 units of fat:\nm += 3 * Shrimp + 2.5 * Beef >= 25\n\n# Objective\n# Minimize the cost of the mixture (Shrimp costs $36 per kg and beef costs $40 per kg):\nm.minimize(36 * Shrimp + 40 * Beef)\n", "entities": [{"start": 42, "end": 48, "word": "shrimp", "entity_group": "VAR", "score": 0.998845354624842}, {"start": 53, "end": 57, "word": "beef", "entity_group": "VAR", "score": 0.9995276347872106}, {"start": 89, "end": 97, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991580208540912}, {"start": 98, "end": 100, "word": "20", "entity_group": "LIMIT", "score": 0.9996753554585028}, {"start": 122, "end": 124, "word": "25", "entity_group": "LIMIT", "score": 0.9997270049145578}, {"start": 140, "end": 146, "word": "Shrimp", "entity_group": "VAR", "score": 0.9997466221698784}, {"start": 147, "end": 152, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9958397530473723}, {"start": 155, "end": 157, "word": "36", "entity_group": "PARAM", "score": 0.9996143731030008}, {"start": 169, "end": 173, "word": "beef", "entity_group": "VAR", "score": 0.9996645006071214}, {"start": 174, "end": 179, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9940322173880176}, {"start": 182, "end": 184, "word": "40", "entity_group": "PARAM", "score": 0.9994416252031548}, {"start": 209, "end": 215, "word": "shrimp", "entity_group": "VAR", "score": 0.9994735995866867}, {"start": 225, "end": 228, "word": "2.5", "entity_group": "PARAM", "score": 0.9996687600296756}, {"start": 250, "end": 251, "word": "3", "entity_group": "PARAM", "score": 0.9996480051653517}, {"start": 282, "end": 286, "word": "beef", "entity_group": "VAR", "score": 0.9995386901240872}, {"start": 296, "end": 297, "word": "4", "entity_group": "PARAM", "score": 0.9996683673208864}, {"start": 319, "end": 322, "word": "2.5", "entity_group": "PARAM", "score": 0.9996644260033803}, {"start": 352, "end": 359, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9944760069890679}, {"start": 360, "end": 364, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9971118254824927}]}
{"doc_id": "834095199", "document": "A pasta restaurant is going to purchase pasta rollers. There are two models available. Roller v2 can make 15 kg of spaghetti per cycle, requires 60 grams of fuel per cycle, and costs $9000. Roller v1 can make 9 kg of pasta per cycle, requires 70 grams of fuel per cycle, and costs $4000. The pasta restaurant must make at least 150 kg of spaghetti per cycle and use at most 900 grams of fuel per cycle. How many of each pasta roller should they purchase to minimize costs?", "order_mapping": {"Roller v2": 0, "Roller v1": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Roller v1": "4000", "Roller v2": "9000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"Roller v2": "15", "Roller v1": "9"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "900", "terms": {"Roller v2": "60", "Roller v1": "70"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Roller v2 purchased\n- y: Number of Roller v1 purchased\n\nObjective:\n- The restaurant aims to minimize costs. The cost of Roller v2 is $9000 and the cost of Roller v1 is $4000. Therefore, the objective function is: Minimize 9000x + 4000y\n\nConstraints:\n- The restaurant must make at least 150 kg of spaghetti per cycle, which translates to: 15x + 9y >= 150.\n- The restaurant must use at most 900 grams of fuel per cycle, leading to the constraint: 60x + 70y <= 900.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 9000x + 4000y\nConstraints:\n15x + 9y >= 150\n60x + 70y <= 900", "canonical": {"objective": [9000.0, 4000.0], "constraints": [[-15.0, -9.0, -150.0], [60.0, 70.0, 900.0]]}, "solution": {"x": 6, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of Roller v1 purchased: RollerV1\n- Number of Roller v2 purchased: RollerV2\n\nConstraints:\n- Must make at least 150 kg of spaghetti per cycle:\n  9 * RollerV1 + 15 * RollerV2 >= 150\n- Must use at most 900 grams of fuel per cycle:\n  70 * RollerV1 + 60 * RollerV2 <= 900\n\nObjective:\n- Minimize costs ($4000 for Roller v1, $9000 for Roller v2):\n  4000 * RollerV1 + 9000 * RollerV2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRollerV1 = intvar(0, 999999999)  # Number of Roller v1 purchased\nRollerV2 = intvar(0, 999999999)  # Number of Roller v2 purchased\n\n# Constraints\nm = Model()\n\n# The restaurant must make at least 150 kg of spaghetti per cycle:\nm += 9 * RollerV1 + 15 * RollerV2 >= 150\n# The restaurant must use at most 900 grams of fuel per cycle:\nm += 70 * RollerV1 + 60 * RollerV2 <= 900\n\n# Objective\n# Minimize costs ($4000 for Roller v1, $9000 for Roller v2):\nm.minimize(4000 * RollerV1 + 9000 * RollerV2)\n", "entities": [{"start": 89, "end": 98, "word": "Roller v2", "entity_group": "VAR", "score": 0.9999816634393766}, {"start": 108, "end": 110, "word": "15", "entity_group": "PARAM", "score": 0.9996982687054431}, {"start": 148, "end": 150, "word": "60", "entity_group": "PARAM", "score": 0.9995451517998887}, {"start": 181, "end": 186, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990722008017601}, {"start": 189, "end": 193, "word": "9000", "entity_group": "PARAM", "score": 0.9997253967045192}, {"start": 196, "end": 205, "word": "Roller v1", "entity_group": "VAR", "score": 0.9999853268306758}, {"start": 215, "end": 216, "word": "9", "entity_group": "PARAM", "score": 0.9996817548777969}, {"start": 250, "end": 252, "word": "70", "entity_group": "PARAM", "score": 0.9995480655715668}, {"start": 283, "end": 288, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990442307060018}, {"start": 291, "end": 295, "word": "4000", "entity_group": "PARAM", "score": 0.9997113698335092}, {"start": 329, "end": 337, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992129143609292}, {"start": 338, "end": 341, "word": "150", "entity_group": "LIMIT", "score": 0.9994926475582964}, {"start": 376, "end": 383, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991155055621017}, {"start": 384, "end": 387, "word": "900", "entity_group": "LIMIT", "score": 0.9997274202044545}, {"start": 468, "end": 476, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987954119542314}, {"start": 477, "end": 482, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990105093626673}]}
{"doc_id": "1866828133", "document": "A gardening company employs newcomers earning $400 a week and full-time employees earning $700 a week. The company needs at least 100 gardeners of whom at least 40 must be full-time employees. In addition, to make sure there is supervision, the number of full-time employees should be at least half the number of newcomers. Formulate a LP to minimize the wage bill.", "order_mapping": {"newcomers": 0, "full-time employees": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"newcomers": "400", "full-time employees": "700"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "40", "var": "full-time employees", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "full-time employees", "direction": "at least", "param": "half", "y_var": "newcomers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of newcomers\n- y: Number of full-time employees\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both newcomers and full-time employees. Given that newcomers earn $400 per week and full-time employees earn $700 per week, the objective function is: Minimize 400x + 700y\n\nConstraints:\n- The company needs at least 100 gardeners, so the constraint is: x + y >= 100.\n- At least 40 gardeners must be full-time employees, leading to the constraint: y >= 40.\n- To ensure supervision, the number of full-time employees should be at least half the number of newcomers, resulting in the constraint: y >= 0.5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 400x + 700y\nConstraints:\nx + y >= 100\ny >= 40\ny >= 0.5x", "canonical": {"objective": [400.0, 700.0], "constraints": [[-1.0, -1.0, -100.0], [0.0, -1.0, -40.0], [0.5, -1.0, 0.0]]}, "solution": {"x": 60, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of newcomers employed: Newcomers\n- Number of full-time employees employed: FullTimeEmployees\n\nConstraints:\n- Total number of gardeners (newcomers + full-time employees) should be at least 100:\n  Newcomers + FullTimeEmployees >= 100\n- At least 40 gardeners must be full-time employees:\n  FullTimeEmployees >= 40\n- The number of full-time employees should be at least half the number of newcomers:\n  FullTimeEmployees >= 0.5 * Newcomers\n\nObjective:\n- Minimize the wage bill (Newcomers earn $400 a week and full-time employees earn $700 a week):\n  400 * Newcomers + 700 * FullTimeEmployees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewcomers = intvar(0, 999999999)  # Number of newcomers employed\nFullTimeEmployees = intvar(0, 999999999)  # Number of full-time employees employed\n\n# Constraints\nm = Model()\n\n# The company needs at least 100 gardeners in total:\nm += Newcomers + FullTimeEmployees >= 100\n# At least 40 must be full-time employees:\nm += FullTimeEmployees >= 40\n# The number of full-time employees should be at least half the number of newcomers:\nm += FullTimeEmployees >= 0.5 * Newcomers\n\n# Objective\n# Minimize the wage bill (Newcomers earn $400 a week and full-time employees earn $700 a week):\nm.minimize(400 * Newcomers + 700 * FullTimeEmployees)\n", "entities": [{"start": 28, "end": 37, "word": "newcomers", "entity_group": "VAR", "score": 0.9994213794451242}, {"start": 38, "end": 45, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9849161364558318}, {"start": 48, "end": 51, "word": "400", "entity_group": "PARAM", "score": 0.9992477209202917}, {"start": 63, "end": 84, "word": "full - time employees", "entity_group": "VAR", "score": 0.9992303899234004}, {"start": 85, "end": 92, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9964558591587851}, {"start": 95, "end": 98, "word": "700", "entity_group": "PARAM", "score": 0.9996786308367528}, {"start": 126, "end": 134, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990374971797021}, {"start": 135, "end": 138, "word": "100", "entity_group": "LIMIT", "score": 0.9997297004486076}, {"start": 157, "end": 165, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982251834454361}, {"start": 166, "end": 168, "word": "40", "entity_group": "LIMIT", "score": 0.9996812384402611}, {"start": 177, "end": 198, "word": "full - time employees", "entity_group": "VAR", "score": 0.9991188848584286}, {"start": 265, "end": 286, "word": "full - time employees", "entity_group": "VAR", "score": 0.998739684321915}, {"start": 297, "end": 305, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9972604510651654}, {"start": 306, "end": 310, "word": "half", "entity_group": "PARAM", "score": 0.9948121583663544}, {"start": 325, "end": 334, "word": "newcomers", "entity_group": "VAR", "score": 0.9997888627839359}, {"start": 355, "end": 363, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998673534144425}, {"start": 364, "end": 377, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.6142008559448296}]}
{"doc_id": "-145745089", "document": "Owen has $500,000 available for investment. He wants to invest in the fast food, pharmaceutical, healthcare, and green energy industries. The annual rate of return for each industry is known to be: fast food, 5.5%; pharmaceutical, 3.2%; healthcare, 7.5%; green energy, 11.4%. To make his investments more spread out, he wants to ensure the amount invested in the green energy industry does not exceed the amount invested in the fast food industry. Also the amount invested in the pharmaceutical industry cannot exceed the amount invested in the healthcare industry. Finally, a maximum of 35% can be invested in the green energy industry. How should Owen invest his money to maximize his return?", "order_mapping": {"fast food": 0, "pharmaceutical": 1, "healthcare": 2, "green energy industries": 3, "green energy": 3, "green energy industry": 3, "fast food industry": 0, "pharmaceutical industry": 1, "healthcare industry": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"fast food": "5.5%", "pharmaceutical": "3.2%", "healthcare": "7.5%", "green energy": "11.4%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "500,000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "green energy industry", "direction": "does not exceed", "y_var": "fast food industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "pharmaceutical industry", "direction": "cannot exceed", "y_var": "healthcare industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "maximum", "limit": "35%", "var": "green energy industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the fast food industry\n- y: Dollars invested in the pharmaceutical industry\n- z: Dollars invested in the healthcare industry\n- w: Dollars invested in the green energy industry\n\nObjective:\n- Owen aims to maximize his return on investment. The annual rate of return for each industry is known to be: fast food, 5.5%; pharmaceutical, 3.2%; healthcare, 7.5%; green energy, 11.4%. Therefore, the objective function is: Maximize 0.055x + 0.032y + 0.075z + 0.114w\n\nConstraints:\n- Owen has $500,000 available for investment, so the constraint is: x + y + z + w <= 500000.\n- The amount invested in the green energy industry should not exceed the amount invested in the fast food industry, leading to the constraint: w <= x.\n- The amount invested in the pharmaceutical industry cannot exceed the amount invested in the healthcare industry, resulting in the constraint: y <= z.\n- A maximum of 35% can be invested in the green energy industry, leading to the constraint: w <= 0.35(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.055x + 0.032y + 0.075z + 0.114w\nConstraints:\nx + y + z + w <= 500000\nw <= x\ny <= z\nw <= 0.35(x + y + z + w)", "canonical": {"objective": [-0.055, -0.032, -0.075, -0.114], "constraints": [[1.0, 1.0, 1.0, 1.0, 500000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.35, -0.35, -0.35, 0.65, 0.0]]}, "solution": {"x": 175000, "y": 0, "z": 150000, "w": 175000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the fast food industry: FastFood\n- Amount invested in the pharmaceutical industry: Pharmaceutical\n- Amount invested in the healthcare industry: Healthcare\n- Amount invested in the green energy industry: GreenEnergy\n\nConstraints:\n- Total investment should not exceed $500,000:\n  FastFood + Pharmaceutical + Healthcare + GreenEnergy <= 500000\n- The amount invested in the green energy industry does not exceed the amount invested in the fast food industry:\n  GreenEnergy <= FastFood\n- The amount invested in the pharmaceutical industry cannot exceed the amount invested in the healthcare industry:\n  Pharmaceutical <= Healthcare\n- A maximum of 35% of the total investment can be in the green energy industry:\n  GreenEnergy <= 0.35 * (FastFood + Pharmaceutical + Healthcare + GreenEnergy)\n\nObjective:\n- Maximize return (5.5% for fast food, 3.2% for pharmaceutical, 7.5% for healthcare, 11.4% for green energy):\n  0.055 * FastFood + 0.032 * Pharmaceutical + 0.075 * Healthcare + 0.114 * GreenEnergy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFastFood = intvar(0, 500000)  # Amount invested in the fast food industry\nPharmaceutical = intvar(0, 500000)  # Amount invested in the pharmaceutical industry\nHealthcare = intvar(0, 500000)  # Amount invested in the healthcare industry\nGreenEnergy = intvar(0, 500000)  # Amount invested in the green energy industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $500,000:\nm += FastFood + Pharmaceutical + Healthcare + GreenEnergy <= 500000\n# The amount invested in the green energy industry does not exceed the amount invested in the fast food industry:\nm += GreenEnergy <= FastFood\n# The amount invested in the pharmaceutical industry cannot exceed the amount invested in the healthcare industry:\nm += Pharmaceutical <= Healthcare\n# A maximum of 35% can be invested in the green energy industry:\nm += GreenEnergy <= 0.35 * (FastFood + Pharmaceutical + Healthcare + GreenEnergy)\n\n# Objective\n# Maximize return (5.5% for fast food, 3.2% for pharmaceutical, 7.5% for healthcare, 11.4% for green energy):\nm.maximize(0.055 * FastFood + 0.032 * Pharmaceutical + 0.075 * Healthcare + 0.114 * GreenEnergy)\n", "entities": [{"start": 11, "end": 18, "word": "500,000", "entity_group": "LIMIT", "score": 0.9986784192138989}, {"start": 19, "end": 28, "word": "available", "entity_group": "CONST_DIR", "score": 0.9929237973418413}, {"start": 72, "end": 81, "word": "fast food", "entity_group": "VAR", "score": 0.9999011725724462}, {"start": 84, "end": 98, "word": "pharmaceutical", "entity_group": "VAR", "score": 0.9996530915330354}, {"start": 101, "end": 111, "word": "healthcare", "entity_group": "VAR", "score": 0.9997309182263039}, {"start": 118, "end": 141, "word": "green energy industries", "entity_group": "VAR", "score": 0.9943424218168775}, {"start": 163, "end": 169, "word": "return", "entity_group": "OBJ_NAME", "score": 0.997177479111067}, {"start": 205, "end": 214, "word": "fast food", "entity_group": "VAR", "score": 0.9995876214610652}, {"start": 217, "end": 222, "word": "5.5 %", "entity_group": "PARAM", "score": 0.9956015809162418}, {"start": 225, "end": 239, "word": "pharmaceutical", "entity_group": "VAR", "score": 0.9989211804615641}, {"start": 242, "end": 247, "word": "3.2 %", "entity_group": "PARAM", "score": 0.9912812708816959}, {"start": 250, "end": 260, "word": "healthcare", "entity_group": "VAR", "score": 0.9988909692051625}, {"start": 263, "end": 268, "word": "7.5 %", "entity_group": "PARAM", "score": 0.9777904534935709}, {"start": 271, "end": 283, "word": "green energy", "entity_group": "VAR", "score": 0.999854954976854}, {"start": 286, "end": 292, "word": "11.4 %", "entity_group": "PARAM", "score": 0.9925590971289227}, {"start": 383, "end": 404, "word": "green energy industry", "entity_group": "VAR", "score": 0.997131026357915}, {"start": 405, "end": 420, "word": "does not exceed", "entity_group": "CONST_DIR", "score": 0.9874883003375872}, {"start": 448, "end": 466, "word": "fast food industry", "entity_group": "VAR", "score": 0.996240107393971}, {"start": 501, "end": 524, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.999887377812738}, {"start": 525, "end": 539, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9857349878039701}, {"start": 567, "end": 586, "word": "healthcare industry", "entity_group": "VAR", "score": 0.999903421973753}, {"start": 601, "end": 608, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.995495384291644}, {"start": 612, "end": 616, "word": "35 %", "entity_group": "LIMIT", "score": 0.9622404924827201}, {"start": 640, "end": 661, "word": "green energy industry", "entity_group": "VAR", "score": 0.9969370150349031}, {"start": 700, "end": 708, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993174707395357}, {"start": 713, "end": 719, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9992546700129541}]}
{"doc_id": "-815669778", "document": "Elias Cookie sells chocolate and strawberry cookies. The store can make at most 200 cookies total. To stay in business, they must sell at least 50 chocolate cookies and 70 strawberry cookies. Due to raw material shortages however, they can make at most 120 chocolate cookies and at most 150 strawberry cookies. The profit per chocolate cookie is $1.5 and the profit per strawberry cookie is $1.2. How many of each cookie should they sell to maximize profit?", "order_mapping": {"chocolate": 0, "strawberry cookies": 1, "chocolate cookies": 0, "chocolate cookie": 0, "strawberry cookie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chocolate cookie": "1.5", "strawberry cookie": "1.2"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "chocolate cookies", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "70", "var": "strawberry cookies", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "120", "var": "chocolate cookies", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "strawberry cookies", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate cookies\n- y: Number of strawberry cookies\n\nObjective:\n- The store aims to maximize its profit. The profit per chocolate cookie is $1.5 and the profit per strawberry cookie is $1.2. Therefore, the objective function is: Maximize 1.5x + 1.2y\n\nConstraints:\n- The store can make at most 200 cookies total, leading to the constraint: x + y <= 200.\n- At least 50 chocolate cookies and 70 strawberry cookies must be sold, resulting in the constraints: x >= 50 and y >= 70.\n- Due to raw material shortages, the store can make at most 120 chocolate cookies and at most 150 strawberry cookies, leading to the constraints: x <= 120 and y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.5x + 1.2y\nConstraints:\nx + y <= 200\nx >= 50\ny >= 70\nx <= 120\ny <= 150", "canonical": {"objective": [-1.5, -1.2], "constraints": [[1.0, 1.0, 200.0], [-1.0, 0.0, -50.0], [0.0, -1.0, -70.0], [1.0, 0.0, 120.0], [0.0, 1.0, 150.0]]}, "solution": {"x": 120, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate cookies sold: ChocolateCookies\n- Number of strawberry cookies sold: StrawberryCookies\n\nConstraints:\n- Total number of cookies sold should not exceed 200:\n  ChocolateCookies + StrawberryCookies <= 200\n- At least 50 chocolate cookies must be sold:\n  ChocolateCookies >= 50\n- At least 70 strawberry cookies must be sold:\n  StrawberryCookies >= 70\n- At most 120 chocolate cookies can be made:\n  ChocolateCookies <= 120\n- At most 150 strawberry cookies can be made:\n  StrawberryCookies <= 150\n\nObjective:\n- Maximize profit ($1.5 per chocolate cookie, $1.2 per strawberry cookie):\n  1.5 * ChocolateCookies + 1.2 * StrawberryCookies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateCookies = intvar(0, 999999999)  # Number of chocolate cookies sold\nStrawberryCookies = intvar(0, 999999999)  # Number of strawberry cookies sold\n\n# Constraints\nm = Model()\n\n# The store can make at most 200 cookies total:\nm += ChocolateCookies + StrawberryCookies <= 200\n# They must sell at least 50 chocolate cookies:\nm += ChocolateCookies >= 50\n# They must sell at least 70 strawberry cookies:\nm += StrawberryCookies >= 70\n# They can make at most 120 chocolate cookies:\nm += ChocolateCookies <= 120\n# They can make at most 150 strawberry cookies:\nm += StrawberryCookies <= 150\n\n# Objective\n# Maximize profit ($1.5 per chocolate cookie, $1.2 per strawberry cookie):\nm.maximize(1.5 * ChocolateCookies + 1.2 * StrawberryCookies)\n", "entities": [{"start": 19, "end": 28, "word": "chocolate", "entity_group": "VAR", "score": 0.9994836226706514}, {"start": 33, "end": 51, "word": "strawberry cookies", "entity_group": "VAR", "score": 0.9999679289339232}, {"start": 73, "end": 80, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987913691759355}, {"start": 81, "end": 84, "word": "200", "entity_group": "LIMIT", "score": 0.9996223349876013}, {"start": 138, "end": 146, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988571148992568}, {"start": 147, "end": 149, "word": "50", "entity_group": "LIMIT", "score": 0.9995328111836306}, {"start": 150, "end": 167, "word": "chocolate cookies", "entity_group": "VAR", "score": 0.9999589456906088}, {"start": 172, "end": 174, "word": "70", "entity_group": "LIMIT", "score": 0.9994442589427828}, {"start": 175, "end": 193, "word": "strawberry cookies", "entity_group": "VAR", "score": 0.9999692176858337}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985679883244146}, {"start": 258, "end": 261, "word": "120", "entity_group": "LIMIT", "score": 0.9995370898072827}, {"start": 262, "end": 279, "word": "chocolate cookies", "entity_group": "VAR", "score": 0.9999534742654899}, {"start": 284, "end": 291, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988568148724979}, {"start": 292, "end": 295, "word": "150", "entity_group": "LIMIT", "score": 0.9992848302380429}, {"start": 296, "end": 314, "word": "strawberry cookies", "entity_group": "VAR", "score": 0.9999516179950985}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999619702410818}, {"start": 332, "end": 348, "word": "chocolate cookie", "entity_group": "VAR", "score": 0.9999674179526223}, {"start": 354, "end": 357, "word": "1.5", "entity_group": "PARAM", "score": 0.9996181222158971}, {"start": 366, "end": 372, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999346646535799}, {"start": 377, "end": 394, "word": "strawberry cookie", "entity_group": "VAR", "score": 0.9999422302163188}, {"start": 400, "end": 403, "word": "1.2", "entity_group": "PARAM", "score": 0.9996673438447353}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995071801797902}, {"start": 459, "end": 465, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999054653748952}]}
{"doc_id": "-1952736066", "document": "Organic Farming has 300 acres of land to grow daikons and fennels. Daikons require 0.5 hours of watering and $70 worth of compost per acre. Fennels require 1.5 hours of watering and $50 worth of compost per acre. The farmer has 500 hours available for watering and $7400 available to spend on compost. If the revenue per acre of daikons is $300 and the revenue per acre of fennels is $250, how many acres of each should he grow to maximize his revenue.", "order_mapping": {"daikons": 0, "fennels": 1, "Daikons": 0, "Fennels": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"daikons": "300", "fennels": "250"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"Daikons": "0.5", "Fennels": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "7400", "terms": {"Daikons": "70", "Fennels": "50"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of daikons\n- y: Acres of fennels\n\nObjective:\n- The farmer aims to maximize his revenue. The revenue per acre of daikons is $300 and the revenue per acre of fennels is $250. Therefore, the objective function is: Maximize 300x + 250y\n\nConstraints:\n- The farm has 300 acres of land available, so the constraint is: x + y <= 300.\n- The farmer has 500 hours available for watering, and daikons require 0.5 hours and fennels require 1.5 hours. This leads to the constraint: 0.5x + 1.5y <= 500.\n- The farmer has $7400 available to spend on compost, and daikons require $70 worth of compost per acre and fennels require $50 worth of compost per acre. This results in the constraint: 70x + 50y <= 7400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 250y\nConstraints:\nx + y <= 300\n0.5x + 1.5y <= 500\n70x + 50y <= 7400", "canonical": {"objective": [-300.0, -250.0], "constraints": [[1.0, 1.0, 300.0], [0.5, 1.5, 500.0], [70.0, 50.0, 7400.0]]}, "solution": {"x": 0, "y": 148}, "pseudo_model": "\nDecision Variables:\n- Number of acres of daikons grown: Daikons\n- Number of acres of fennels grown: Fennels\n\nConstraints:\n- Total acres used should not exceed 300:\n  Daikons + Fennels <= 300\n- Total hours of watering should not exceed 500 hours (0.5 hours per acre of daikons, 1.5 hours per acre of fennels):\n  0.5 * Daikons + 1.5 * Fennels <= 500\n- Total amount spent on compost should not exceed $7400 (70 dollars per acre of daikons, 50 dollars per acre of fennels):\n  70 * Daikons + 50 * Fennels <= 7400\n\nObjective:\n- Maximize revenue (300 dollars per acre of daikons, 250 dollars per acre of fennels):\n  300 * Daikons + 250 * Fennels\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaikons = intvar(0, 999999999)  # Number of acres of daikons grown\nFennels = intvar(0, 999999999)  # Number of acres of fennels grown\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 300:\nm += Daikons + Fennels <= 300\n# Total hours of watering should not exceed 500 hours:\nm += 0.5 * Daikons + 1.5 * Fennels <= 500\n# Total amount spent on compost should not exceed $7400:\nm += 70 * Daikons + 50 * Fennels <= 7400\n\n# Objective\n# Maximize revenue (300 dollars per acre of daikons, 250 dollars per acre of fennels):\nm.maximize(300 * Daikons + 250 * Fennels)\n", "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.9949449000708583}, {"start": 20, "end": 23, "word": "300", "entity_group": "LIMIT", "score": 0.9987516549283987}, {"start": 46, "end": 53, "word": "daikons", "entity_group": "VAR", "score": 0.9992427040085226}, {"start": 58, "end": 65, "word": "fennels", "entity_group": "VAR", "score": 0.9988291993969296}, {"start": 68, "end": 75, "word": "Daikons", "entity_group": "VAR", "score": 0.9993879078168781}, {"start": 84, "end": 87, "word": "0.5", "entity_group": "PARAM", "score": 0.9996677428033848}, {"start": 112, "end": 114, "word": "70", "entity_group": "PARAM", "score": 0.9996443929617699}, {"start": 143, "end": 150, "word": "Fennels", "entity_group": "VAR", "score": 0.9996439653602112}, {"start": 159, "end": 162, "word": "1.5", "entity_group": "PARAM", "score": 0.9997233749804413}, {"start": 187, "end": 189, "word": "50", "entity_group": "PARAM", "score": 0.9996443972640131}, {"start": 233, "end": 236, "word": "500", "entity_group": "LIMIT", "score": 0.9997382735262679}, {"start": 243, "end": 252, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981368088156349}, {"start": 272, "end": 276, "word": "7400", "entity_group": "LIMIT", "score": 0.9994157147236178}, {"start": 277, "end": 286, "word": "available", "entity_group": "CONST_DIR", "score": 0.992588948451716}, {"start": 316, "end": 323, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9990123766352575}, {"start": 336, "end": 343, "word": "daikons", "entity_group": "VAR", "score": 0.999495212890171}, {"start": 349, "end": 352, "word": "300", "entity_group": "PARAM", "score": 0.9992430237606272}, {"start": 361, "end": 368, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.998912290705265}, {"start": 381, "end": 388, "word": "fennels", "entity_group": "VAR", "score": 0.9994301095794482}, {"start": 394, "end": 397, "word": "250", "entity_group": "PARAM", "score": 0.999594144629409}, {"start": 441, "end": 449, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997401364371707}, {"start": 454, "end": 461, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9986764024136491}]}
{"doc_id": "-1305902435", "document": "A makeup company hand fills perfume and cologne bottles. Each perfume bottle takes 2 minutes to fill and each cologne bottle takes 2.5 minutes to fill. The company must fill at least 60 perfume bottles and at least 40 cologne bottles. The company has 700 minutes available. If the profit per perfume bottle is $50 and the profit per cologne bottle is $60, how many of each should be filled in order to maximize profit?", "order_mapping": {"perfume": 0, "cologne bottles": 1, "perfume bottle": 0, "cologne bottle": 1, "perfume bottles": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"perfume bottle": "50", "cologne bottle": "60"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "700", "terms": {"perfume bottle": "2", "cologne bottle": "2.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "perfume bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "cologne bottles", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of perfume bottles filled\n- y: Number of cologne bottles filled\n\nObjective:\n- The company aims to maximize its profit. The profit per perfume bottle is $50 and the profit per cologne bottle is $60. Therefore, the objective function is: Maximize 50x + 60y\n\nConstraints:\n- The company has 700 minutes available for filling bottles. Each perfume bottle takes 2 minutes to fill and each cologne bottle takes 2.5 minutes to fill. This leads to the constraint: 2x + 2.5y <= 700.\n- The company must fill at least 60 perfume bottles, leading to the constraint: x >= 60.\n- The company must fill at least 40 cologne bottles, leading to the constraint: y >= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 60y\nConstraints:\n2x + 2.5y <= 700\nx >= 60\ny >= 40", "canonical": {"objective": [-50.0, -60.0], "constraints": [[2.0, 2.5, 700.0], [-1.0, 0.0, -60.0], [0.0, -1.0, -40.0]]}, "solution": {"x": 300, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of perfume bottles filled: PerfumeBottles\n- Number of cologne bottles filled: CologneBottles\n\nConstraints:\n- At least 60 perfume bottles must be filled:\n  PerfumeBottles >= 60\n- At least 40 cologne bottles must be filled:\n  CologneBottles >= 40\n- Total time available is 700 minutes (2 minutes per perfume bottle, 2.5 minutes per cologne bottle):\n  2 * PerfumeBottles + 2.5 * CologneBottles <= 700\n\nObjective:\n- Maximize profit ($50 profit per perfume bottle, $60 profit per cologne bottle):\n  50 * PerfumeBottles + 60 * CologneBottles\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPerfumeBottles = intvar(0, 999999999)  # Number of perfume bottles filled\nCologneBottles = intvar(0, 999999999)  # Number of cologne bottles filled\n\n# Constraints\nm = Model()\n\n# The company must fill at least 60 perfume bottles:\nm += PerfumeBottles >= 60\n# The company must fill at least 40 cologne bottles:\nm += CologneBottles >= 40\n# The company has 700 minutes available (2 minutes per perfume bottle, 2.5 minutes per cologne bottle):\nm += 2 * PerfumeBottles + 2.5 * CologneBottles <= 700\n\n# Objective\n# Maximize profit ($50 per perfume bottle, $60 per cologne bottle):\nm.maximize(50 * PerfumeBottles + 60 * CologneBottles)\n", "entities": [{"start": 28, "end": 35, "word": "perfume", "entity_group": "VAR", "score": 0.9995157704633089}, {"start": 40, "end": 55, "word": "cologne bottles", "entity_group": "VAR", "score": 0.9999784441306958}, {"start": 63, "end": 77, "word": "perfume bottle", "entity_group": "VAR", "score": 0.9999849221231113}, {"start": 84, "end": 85, "word": "2", "entity_group": "PARAM", "score": 0.9996609888191988}, {"start": 111, "end": 125, "word": "cologne bottle", "entity_group": "VAR", "score": 0.9999767664301462}, {"start": 132, "end": 135, "word": "2.5", "entity_group": "PARAM", "score": 0.9995778951800782}, {"start": 176, "end": 184, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988476702209257}, {"start": 185, "end": 187, "word": "60", "entity_group": "LIMIT", "score": 0.9995416230769282}, {"start": 188, "end": 203, "word": "perfume bottles", "entity_group": "VAR", "score": 0.9999390301079482}, {"start": 208, "end": 216, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988511272387455}, {"start": 217, "end": 219, "word": "40", "entity_group": "LIMIT", "score": 0.9995348022115303}, {"start": 220, "end": 235, "word": "cologne bottles", "entity_group": "VAR", "score": 0.9999603012091886}, {"start": 254, "end": 257, "word": "700", "entity_group": "LIMIT", "score": 0.9994095579191603}, {"start": 266, "end": 275, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991929225751768}, {"start": 285, "end": 291, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998599984514744}, {"start": 296, "end": 310, "word": "perfume bottle", "entity_group": "VAR", "score": 0.9999475181167434}, {"start": 316, "end": 318, "word": "50", "entity_group": "PARAM", "score": 0.9995215285707141}, {"start": 327, "end": 333, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384727652063}, {"start": 338, "end": 352, "word": "cologne bottle", "entity_group": "VAR", "score": 0.9999406127386488}, {"start": 358, "end": 360, "word": "60", "entity_group": "PARAM", "score": 0.9996916647503008}, {"start": 409, "end": 417, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852266956495}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912472675}]}
{"doc_id": "-1982324798", "document": "A food truck wants to make bean burritos and beef burritos using 5000 grams of lettuce. The profit per bean burrito is $6.5 and the profit per beef burrito is $9. The bean burrito contains 25 grams of lettuce and the beef burrito contains 18 grams of lettuce. The beef burrito is much more popular and at least four times the amount of beef burritos need to be made than the bean burritos. However, a minimum of 5 bean burritos need to be made. How many of each burrito should be made in order to maximize profit?", "order_mapping": {"bean burritos": 0, "beef burritos": 1, "bean burrito": 0, "beef burrito": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bean burrito": "6.5", "beef burrito": "9"}}, "const_declarations": [{"type": "linear", "direction": "using", "limit": "5000", "terms": {"bean burrito": "25", "beef burrito": "18"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "beef burritos", "direction": "at least", "param": "four times", "y_var": "bean burritos", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5", "var": "bean burritos", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bean burritos\n- y: Number of beef burritos\n\nObjective:\n- The food truck aims to maximize its profit. The profit per bean burrito is $6.5 and the profit per beef burrito is $9. Therefore, the objective function is: Maximize 6.5x + 9y\n\nConstraints:\n- The food truck has 5000 grams of lettuce available, so the constraint is: 25x + 18y <= 5000.\n- The beef burrito needs to be made at least four times the amount of bean burritos, leading to the constraint: y >= 4x.\n- A minimum of 5 bean burritos need to be made, resulting in the constraint: x >= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 6.5x + 9y\nConstraints:\n25x + 18y <= 5000\ny >= 4x\nx >= 5", "canonical": {"objective": [-6.5, -9.0], "constraints": [[25.0, 18.0, 5000.0], [4.0, -1.0, 0.0], [-1.0, 0.0, -5.0]]}, "solution": {"x": 5, "y": 270}, "pseudo_model": "\nDecision Variables:\n- Number of bean burritos made: BeanBurritos\n- Number of beef burritos made: BeefBurritos\n\nConstraints:\n- Total lettuce used should not exceed 5000 grams (25g per bean burrito, 18g per beef burrito):\n  25 * BeanBurritos + 18 * BeefBurritos <= 5000\n- At least four times the amount of beef burritos need to be made than the bean burritos:\n  BeefBurritos >= 4 * BeanBurritos\n- A minimum of 5 bean burritos need to be made:\n  BeanBurritos >= 5\n\nObjective:\n- Maximize profit (6.5 dollars per bean burrito, 9 dollars per beef burrito):\n  6.5 * BeanBurritos + 9 * BeefBurritos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeanBurritos = intvar(0, 999999999)  # Number of bean burritos made\nBeefBurritos = intvar(0, 999999999)  # Number of beef burritos made\n\n# Constraints\nm = Model()\n\n# Total lettuce used should not exceed 5000 grams (25g per bean burrito, 18g per beef burrito):\nm += 25 * BeanBurritos + 18 * BeefBurritos <= 5000\n# At least four times the amount of beef burritos need to be made than the bean burritos:\nm += BeefBurritos >= 4 * BeanBurritos\n# A minimum of 5 bean burritos need to be made:\nm += BeanBurritos >= 5\n\n# Objective\n# Maximize profit (6.5 dollars per bean burrito, 9 dollars per beef burrito):\nm.maximize(6.5 * BeanBurritos + 9 * BeefBurritos)\n", "entities": [{"start": 27, "end": 40, "word": "bean burritos", "entity_group": "VAR", "score": 0.9999857308375677}, {"start": 45, "end": 58, "word": "beef burritos", "entity_group": "VAR", "score": 0.9999819353164006}, {"start": 59, "end": 64, "word": "using", "entity_group": "CONST_DIR", "score": 0.9597640942861826}, {"start": 65, "end": 69, "word": "5000", "entity_group": "LIMIT", "score": 0.9983434242288941}, {"start": 93, "end": 99, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999158582294082}, {"start": 104, "end": 116, "word": "bean burrito", "entity_group": "VAR", "score": 0.9999697298582104}, {"start": 122, "end": 125, "word": "6.5", "entity_group": "PARAM", "score": 0.9996126244616731}, {"start": 134, "end": 140, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999382054955607}, {"start": 145, "end": 157, "word": "beef burrito", "entity_group": "VAR", "score": 0.9999345824668916}, {"start": 163, "end": 164, "word": "9", "entity_group": "PARAM", "score": 0.9997502313391358}, {"start": 171, "end": 183, "word": "bean burrito", "entity_group": "VAR", "score": 0.9999837511030674}, {"start": 193, "end": 195, "word": "25", "entity_group": "PARAM", "score": 0.9996419749644799}, {"start": 221, "end": 233, "word": "beef burrito", "entity_group": "VAR", "score": 0.999983138382384}, {"start": 243, "end": 245, "word": "18", "entity_group": "PARAM", "score": 0.9995222912693492}, {"start": 269, "end": 281, "word": "beef burrito", "entity_group": "VAR", "score": 0.9999777419257204}, {"start": 307, "end": 315, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985100375973077}, {"start": 316, "end": 326, "word": "four times", "entity_group": "PARAM", "score": 0.8949621134515789}, {"start": 341, "end": 354, "word": "beef burritos", "entity_group": "VAR", "score": 0.9999812178488494}, {"start": 380, "end": 393, "word": "bean burritos", "entity_group": "VAR", "score": 0.9999696912741824}, {"start": 408, "end": 415, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9961923549803258}, {"start": 419, "end": 420, "word": "5", "entity_group": "LIMIT", "score": 0.9986963454296802}, {"start": 421, "end": 434, "word": "bean burritos", "entity_group": "VAR", "score": 0.9999703533843711}, {"start": 505, "end": 513, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852783764065}, {"start": 514, "end": 520, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818178479}]}
{"doc_id": "-1550096807", "document": "Zeta Investments is looking to diversify its investments and has $500,000 to invest in a 24-month commitment. They can invest in the education industry yielding a 2.5% return or in the wood industry yielding a 7% return. The board of directors requires that a minimum of 25% of the investment be placed in the education industry and that at most 70% of the investment be placed in the wood industry. How much money should the company invest in each industry to maximize its return on investments?", "order_mapping": {"education industry": 0, "wood industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"education industry": "2.5%", "wood industry": "7%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "500,000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "25%", "var": "education industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "70%", "var": "wood industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the education industry\n- y: Dollars invested in the wood industry\n\nObjective:\n- Zeta Investments aims to maximize its return on investments. The education industry yields a 2.5% return and the wood industry yields a 7% return. Therefore, the objective function is: Maximize 0.025x + 0.07y\n\nConstraints:\n- The total amount available for investment is $500,000, so the constraint is: x + y <= 500000.\n- A minimum of 25% of the investment must be placed in the education industry, leading to the constraint: x >= 0.25(x + y).\n- At most 70% of the investment may be placed in the wood industry, resulting in the constraint: y <= 0.70(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.025x + 0.07y\nConstraints:\nx + y <= 500000\nx >= 0.25(x + y)\ny <= 0.70(x + y)", "canonical": {"objective": [-0.025, -0.07], "constraints": [[1.0, 1.0, 500000.0], [-0.75, 0.25, 0.0], [-0.7, 0.30000000000000004, 0.0]]}, "solution": {"x": 150000, "y": 350000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the education industry: EducationInvestment\n- Amount invested in the wood industry: WoodInvestment\n\nConstraints:\n- Total investment should equal $500,000:\n  EducationInvestment + WoodInvestment == 500000\n- A minimum of 25% of the investment must be in the education industry:\n  EducationInvestment >= 0.25 * (EducationInvestment + WoodInvestment)\n- At most 70% of the investment can be in the wood industry:\n  WoodInvestment <= 0.70 * (EducationInvestment + WoodInvestment)\n\nObjective:\n- Maximize return on investments (2.5% from education industry, 7% from wood industry):\n  0.025 * EducationInvestment + 0.07 * WoodInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEducationInvestment = intvar(0, 999999999)  # Amount invested in the education industry\nWoodInvestment = intvar(0, 999999999)  # Amount invested in the wood industry\n\n# Constraints\nm = Model()\n\n# Total investment should be $500,000:\nm += EducationInvestment + WoodInvestment == 500000\n# A minimum of 25% of the investment must be in the education industry:\nm += EducationInvestment >= 0.25 * (EducationInvestment + WoodInvestment)\n# At most 70% of the investment can be in the wood industry:\nm += WoodInvestment <= 0.70 * (EducationInvestment + WoodInvestment)\n\n# Objective\n# Maximize return on investments (2.5% from education industry, 7% from wood industry):\nm.maximize(0.025 * EducationInvestment + 0.07 * WoodInvestment)\n", "entities": [{"start": 61, "end": 64, "word": "has", "entity_group": "CONST_DIR", "score": 0.9915926784048807}, {"start": 67, "end": 74, "word": "500,000", "entity_group": "LIMIT", "score": 0.9996167722920999}, {"start": 137, "end": 155, "word": "education industry", "entity_group": "VAR", "score": 0.9999800431945983}, {"start": 167, "end": 172, "word": "2.5 %", "entity_group": "PARAM", "score": 0.818448786690866}, {"start": 173, "end": 179, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9875016894975964}, {"start": 190, "end": 203, "word": "wood industry", "entity_group": "VAR", "score": 0.9999747963561036}, {"start": 215, "end": 218, "word": "7 %", "entity_group": "PARAM", "score": 0.7389951076280264}, {"start": 219, "end": 225, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9711249977816159}, {"start": 267, "end": 274, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9941580555905982}, {"start": 278, "end": 282, "word": "25 %", "entity_group": "LIMIT", "score": 0.8994051214279202}, {"start": 318, "end": 336, "word": "education industry", "entity_group": "VAR", "score": 0.9999862504583591}, {"start": 346, "end": 353, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987774633705861}, {"start": 354, "end": 358, "word": "70 %", "entity_group": "LIMIT", "score": 0.9493701717692876}, {"start": 394, "end": 407, "word": "wood industry", "entity_group": "VAR", "score": 0.9999793602510325}, {"start": 471, "end": 479, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994475009595188}, {"start": 484, "end": 490, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9933370334512511}]}
{"doc_id": "-257136206", "document": "A grocery store wants to sell their bulk quantities of gummy bears, gummy worms, and sour candies by mixing them into special combo deals.  They have 1200 grams of gummy bears, 1400 grams of gummy worms, and 900 grams of sour candies. Combo 1 contains 25 grams of gummy bears, 20 grams of gummy worms, and 15 grams of sour candies. Combo 2 contains 12 grams of gummy bears, 21 grams of gummy worms, and 24 grams of sour candies. If the profit per combo 1 is $4 and the profit per combo 2 is $4.50, how many of each should the store sell to maximize profit?", "order_mapping": {"Combo 1": 0, "Combo 2": 1, "combo 1": 0, "combo 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"combo 1": "4", "combo 2": "4.50"}}, "const_declarations": [{"type": "linear", "direction": "have", "limit": "1200", "terms": {"Combo 1": "25", "Combo 2": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "have", "limit": "1400", "terms": {"Combo 1": "20", "Combo 2": "21"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "have", "limit": "900", "terms": {"Combo 1": "15", "Combo 2": "24"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Combo 1 sold\n- y: Number of Combo 2 sold\n\nObjective:\n- The store aims to maximize its profit. The profit per Combo 1 is $4 and the profit per Combo 2 is $4.50. Therefore, the objective function is: Maximize 4x + 4.50y\n\nConstraints:\n- The store has 1200 grams of gummy bears, 1400 grams of gummy worms, and 900 grams of sour candies. The constraints are:\n    - 25x + 12y <= 1200 (gummy bears constraint)\n    - 20x + 21y <= 1400 (gummy worms constraint)\n    - 15x + 24y <= 900 (sour candies constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 4.50y\nConstraints:\n25x + 12y <= 1200\n20x + 21y <= 1400\n15x + 24y <= 900", "canonical": {"objective": [-4.0, -4.5], "constraints": [[25.0, 12.0, 1200.0], [20.0, 21.0, 1400.0], [15.0, 24.0, 900.0]]}, "solution": {"x": 42, "y": 11}, "pseudo_model": "\nDecision Variables:\n- Number of Combo 1 sold: Combo1\n- Number of Combo 2 sold: Combo2\n\nConstraints:\n- Gummy bears used in combos should not exceed 1200 grams:\n  25 * Combo1 + 12 * Combo2 <= 1200\n- Gummy worms used in combos should not exceed 1400 grams:\n  20 * Combo1 + 21 * Combo2 <= 1400\n- Sour candies used in combos should not exceed 900 grams:\n  15 * Combo1 + 24 * Combo2 <= 900\n\nObjective:\n- Maximize profit ($4 per Combo 1, $4.50 per Combo 2):\n  4 * Combo1 + 4.5 * Combo2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCombo1 = intvar(0, 999999999)  # Number of Combo 1 sold\nCombo2 = intvar(0, 999999999)  # Number of Combo 2 sold\n\n# Constraints\nm = Model()\n\n# Gummy bears constraint (1200 grams available):\nm += 25 * Combo1 + 12 * Combo2 <= 1200\n# Gummy worms constraint (1400 grams available):\nm += 20 * Combo1 + 21 * Combo2 <= 1400\n# Sour candies constraint (900 grams available):\nm += 15 * Combo1 + 24 * Combo2 <= 900\n\n# Objective\n# Maximize profit ($4 per Combo 1, $4.50 per Combo 2):\nm.maximize(4 * Combo1 + 4.5 * Combo2)\n", "entities": [{"start": 147, "end": 151, "word": "have", "entity_group": "CONST_DIR", "score": 0.9995117247700929}, {"start": 152, "end": 156, "word": "1200", "entity_group": "LIMIT", "score": 0.9985783556512351}, {"start": 180, "end": 184, "word": "1400", "entity_group": "LIMIT", "score": 0.9996946032373014}, {"start": 212, "end": 215, "word": "900", "entity_group": "LIMIT", "score": 0.9997119828972394}, {"start": 240, "end": 247, "word": "Combo 1", "entity_group": "VAR", "score": 0.9998357917846541}, {"start": 257, "end": 259, "word": "25", "entity_group": "PARAM", "score": 0.9996675203603129}, {"start": 283, "end": 285, "word": "20", "entity_group": "PARAM", "score": 0.9996974292835266}, {"start": 313, "end": 315, "word": "15", "entity_group": "PARAM", "score": 0.9997090084878445}, {"start": 340, "end": 347, "word": "Combo 2", "entity_group": "VAR", "score": 0.9998358030011809}, {"start": 357, "end": 359, "word": "12", "entity_group": "PARAM", "score": 0.9996676388987396}, {"start": 383, "end": 385, "word": "21", "entity_group": "PARAM", "score": 0.9996974292835258}, {"start": 413, "end": 415, "word": "24", "entity_group": "PARAM", "score": 0.9997102459467256}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998996405571448}, {"start": 458, "end": 465, "word": "combo 1", "entity_group": "VAR", "score": 0.9997464345597245}, {"start": 471, "end": 472, "word": "4", "entity_group": "PARAM", "score": 0.9996349653671439}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998979097894662}, {"start": 492, "end": 499, "word": "combo 2", "entity_group": "VAR", "score": 0.9997381606883021}, {"start": 505, "end": 509, "word": "4.50", "entity_group": "PARAM", "score": 0.9996729032347301}, {"start": 554, "end": 562, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 563, "end": 569, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "-201398490", "document": "A farmer has 400 acres of land on which he plants apple and peach trees. He must plant at least 60 acres of apple trees and at least 40 acres of peach trees. He prefers to plant peach trees but can plant at most 3 times the amount of peach trees as apple trees. If the profit per acre of apple trees is $900 and the profit per acre of peach trees is $1100, how many acres of each should he plant to maximize profit?", "order_mapping": {"apple": 0, "peach trees": 1, "apple trees": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"apple trees": "900", "peach trees": "1100"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "400", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "apple trees", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "peach trees", "direction": "at most", "param": "3 times", "y_var": "apple trees", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "peach trees", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of apple trees\n- y: Acres of peach trees\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of apple trees is $900 and the profit per acre of peach trees is $1100. Therefore, the objective function is: Maximize 900x + 1100y\n\nConstraints:\n- The farmer has 400 acres of land available for planting, so the constraint is: x + y <= 400.\n- The farmer must plant at least 60 acres of apple trees, leading to the constraint: x >= 60.\n- The farmer must plant at least 40 acres of peach trees, leading to the constraint: y >= 40.\n- The farmer can plant at most 3 times the amount of peach trees as apple trees, resulting in the constraint: y <= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 900x + 1100y\nConstraints:\nx + y <= 400\nx >= 60\ny >= 40\ny <= 3x", "canonical": {"objective": [-900.0, -1100.0], "constraints": [[1.0, 1.0, 400.0], [-1.0, 0.0, -60.0], [0.0, -1.0, -40.0], [-3.0, 1.0, 0.0]]}, "solution": {"x": 100, "y": 300}, "pseudo_model": "\nDecision Variables:\n- Number of acres of apple trees planted: AppleTrees\n- Number of acres of peach trees planted: PeachTrees\n\nConstraints:\n- Total number of acres used should not exceed 400:\n  AppleTrees + PeachTrees <= 400\n- At least 60 acres of apple trees should be planted:\n  AppleTrees >= 60\n- At least 40 acres of peach trees should be planted:\n  PeachTrees >= 40\n- Can plant at most 3 times the amount of peach trees as apple trees:\n  PeachTrees <= 3 * AppleTrees\n\nObjective:\n- Maximize profit (900 dollars per acre of apple trees, 1100 dollars per acre of peach trees):\n  900 * AppleTrees + 1100 * PeachTrees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAppleTrees = intvar(0, 999999999)  # Number of acres of apple trees\nPeachTrees = intvar(0, 999999999)  # Number of acres of peach trees\n\n# Constraints\nm = Model()\n\n# Total number of acres used should not exceed 400:\nm += AppleTrees + PeachTrees <= 400\n# At least 60 acres of apple trees should be planted:\nm += AppleTrees >= 60\n# At least 40 acres of peach trees should be planted:\nm += PeachTrees >= 40\n# Can plant at most 3 times the amount of peach trees as apple trees:\nm += PeachTrees <= 3 * AppleTrees\n\n# Objective\n# Maximize profit (900 dollars per acre of apple trees, 1100 dollars per acre of peach trees):\nm.maximize(900 * AppleTrees + 1100 * PeachTrees)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9911483532644491}, {"start": 13, "end": 16, "word": "400", "entity_group": "LIMIT", "score": 0.9986823637643584}, {"start": 50, "end": 55, "word": "apple", "entity_group": "VAR", "score": 0.9989776890882659}, {"start": 60, "end": 71, "word": "peach trees", "entity_group": "VAR", "score": 0.9999759696904001}, {"start": 88, "end": 96, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989102374958956}, {"start": 97, "end": 99, "word": "60", "entity_group": "LIMIT", "score": 0.9996972014970612}, {"start": 109, "end": 120, "word": "apple trees", "entity_group": "VAR", "score": 0.9999705830128931}, {"start": 125, "end": 133, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987378327279606}, {"start": 134, "end": 136, "word": "40", "entity_group": "LIMIT", "score": 0.9996926210158975}, {"start": 146, "end": 157, "word": "peach trees", "entity_group": "VAR", "score": 0.999976250286786}, {"start": 180, "end": 191, "word": "peach trees", "entity_group": "VAR", "score": 0.999980216568723}, {"start": 206, "end": 213, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997604337426171}, {"start": 214, "end": 221, "word": "3 times", "entity_group": "PARAM", "score": 0.6621378576140857}, {"start": 236, "end": 247, "word": "peach trees", "entity_group": "VAR", "score": 0.9999059608192568}, {"start": 251, "end": 262, "word": "apple trees", "entity_group": "VAR", "score": 0.999980295115875}, {"start": 272, "end": 278, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996470438089299}, {"start": 291, "end": 302, "word": "apple trees", "entity_group": "VAR", "score": 0.9999610912058526}, {"start": 308, "end": 311, "word": "900", "entity_group": "PARAM", "score": 0.9995081113349987}, {"start": 320, "end": 326, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999889308745867}, {"start": 339, "end": 350, "word": "peach trees", "entity_group": "VAR", "score": 0.9999556509154314}, {"start": 356, "end": 360, "word": "1100", "entity_group": "PARAM", "score": 0.9996803977885248}, {"start": 405, "end": 413, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997390052708541}, {"start": 414, "end": 420, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274898363786}]}
{"doc_id": "-618790770", "document": "A toy shop makes plush toys and action figures. Each plush toy takes 20 minutes of assembly and 4 minutes of packaging. Each action figure takes 15 minutes of assembly and 5 minutes of packaging. The shop has available 1200 minutes for assembly and 900 minutes for packaging. If the profit per plush toy is $4 and the profit per action figure is $4.50, how many of each should be made to maximize profit?", "order_mapping": {"plush toys": 0, "action figures": 1, "plush toy": 0, "action figure": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"action figure": "4.50", "plush toy": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1200", "terms": {"plush toy": "20", "action figure": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "900", "terms": {"plush toy": "4", "action figure": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of plush toys\n- y: Number of action figures\n\nObjective:\n- The toy shop aims to maximize its profit. The profit per plush toy is $4 and the profit per action figure is $4.50. Therefore, the objective function is: Maximize 4x + 4.50y\n\nConstraints:\n- The shop has 1200 minutes available for assembly, and each plush toy takes 20 minutes and each action figure takes 15 minutes. This leads to the constraint: 20x + 15y <= 1200.\n- The shop has 900 minutes available for packaging, and each plush toy takes 4 minutes and each action figure takes 5 minutes. This results in the constraint: 4x + 5y <= 900.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 4.50y\nConstraints:\n20x + 15y <= 1200\n4x + 5y <= 900", "canonical": {"objective": [-4.0, -4.5], "constraints": [[20.0, 15.0, 1200.0], [4.0, 5.0, 900.0]]}, "solution": {"x": 0, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of plush toys made: PlushToys\n- Number of action figures made: ActionFigures\n\nConstraints:\n- Assembly time for all toys should not exceed 1200 minutes (20 minutes per plush toy, 15 minutes per action figure):\n  20 * PlushToys + 15 * ActionFigures <= 1200\n- Packaging time for all toys should not exceed 900 minutes (4 minutes per plush toy, 5 minutes per action figure):\n  4 * PlushToys + 5 * ActionFigures <= 900\n\nObjective:\n- Maximize profit (4 dollars per plush toy, 4.50 dollars per action figure):\n  4 * PlushToys + 4.50 * ActionFigures\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPlushToys = intvar(0, 999999999)  # Number of plush toys made\nActionFigures = intvar(0, 999999999)  # Number of action figures made\n\n# Constraints\nm = Model()\n\n# Assembly time constraints (1200 minutes available):\nm += 20 * PlushToys + 15 * ActionFigures <= 1200\n# Packaging time constraints (900 minutes available):\nm += 4 * PlushToys + 5 * ActionFigures <= 900\n\n# Objective\n# Maximize profit (4 dollars per plush toy, 4.50 dollars per action figure):\nm.maximize(4 * PlushToys + 4.50 * ActionFigures)\n", "entities": [{"start": 17, "end": 27, "word": "plush toys", "entity_group": "VAR", "score": 0.9999684862964868}, {"start": 32, "end": 46, "word": "action figures", "entity_group": "VAR", "score": 0.9999877620674512}, {"start": 54, "end": 63, "word": "plush toy", "entity_group": "VAR", "score": 0.9999749551604735}, {"start": 70, "end": 72, "word": "20", "entity_group": "PARAM", "score": 0.9997112327438319}, {"start": 97, "end": 98, "word": "4", "entity_group": "PARAM", "score": 0.9996969392390301}, {"start": 127, "end": 140, "word": "action figure", "entity_group": "VAR", "score": 0.9999818107281867}, {"start": 147, "end": 149, "word": "15", "entity_group": "PARAM", "score": 0.9997210172754036}, {"start": 174, "end": 175, "word": "5", "entity_group": "PARAM", "score": 0.9996126354819783}, {"start": 212, "end": 221, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991833931821386}, {"start": 222, "end": 226, "word": "1200", "entity_group": "LIMIT", "score": 0.9994169144944356}, {"start": 252, "end": 255, "word": "900", "entity_group": "LIMIT", "score": 0.9995879117479191}, {"start": 287, "end": 293, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999944730166229}, {"start": 298, "end": 307, "word": "plush toy", "entity_group": "VAR", "score": 0.9998863960499288}, {"start": 313, "end": 314, "word": "4", "entity_group": "PARAM", "score": 0.9996126072372197}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999098099226164}, {"start": 334, "end": 347, "word": "action figure", "entity_group": "VAR", "score": 0.9999450050921049}, {"start": 353, "end": 357, "word": "4.50", "entity_group": "PARAM", "score": 0.999675780277594}, {"start": 395, "end": 403, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 404, "end": 410, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "2071029294", "document": "A West Coast train company has a total of 300 seats, first-class seats and regular seats. A profit of $1200 is made on each first-class seat and a profit of $700 is made on each regular seat. The train company reserves at least 50 seats to be first-class but because of the pandemic is finally over, at least 3 times as many people now prefer regular seats to first-class seats to save on travel costs. How many tickets of each type should the company sell to maximize its profit?", "order_mapping": {"first-class seats": 0, "regular seats": 1, "first-class seat": 0, "regular seat": 1, "first-class": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"first-class seat": "1200", "regular seat": "700"}}, "const_declarations": [{"type": "sum", "direction": "total", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "first-class", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular seats", "direction": "at least", "param": "3 times", "y_var": "first-class seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of first-class seats\n- y: Number of regular seats\n\nObjective:\n- The train company aims to maximize its profit. A profit of $1200 is made on each first-class seat and a profit of $700 is made on each regular seat. Therefore, the objective function is: Maximize 1200x + 700y\n\nConstraints:\n- The total number of seats available is 300, so the constraint is: x + y <= 300.\n- At least 50 seats need to be first-class, leading to the constraint: x >= 50.\n- Due to the pandemic being over, at least 3 times as many people now prefer regular seats to first-class seats, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1200x + 700y\nConstraints:\nx + y <= 300\nx >= 50\ny >= 3x", "canonical": {"objective": [-1200.0, -700.0], "constraints": [[1.0, 1.0, 300.0], [-1.0, 0.0, -50.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 75, "y": 225}, "pseudo_model": "\nDecision Variables:\n- Number of first-class seats: FirstClassSeats\n- Number of regular seats: RegularSeats\n\nConstraints:\n- Total number of seats should not exceed 300:\n  FirstClassSeats + RegularSeats <= 300\n- At least 50 seats should be first-class:\n  FirstClassSeats >= 50\n- At least 3 times as many regular seats as first-class seats:\n  RegularSeats >= 3 * FirstClassSeats\n\nObjective:\n- Maximize profit ($1200 per first-class seat, $700 per regular seat):\n  1200 * FirstClassSeats + 700 * RegularSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstClassSeats = intvar(0, 999999999)  # Number of first-class seats\nRegularSeats = intvar(0, 999999999)  # Number of regular seats\n\n# Constraints\nm = Model()\n\n# Total number of seats should not exceed 300:\nm += FirstClassSeats + RegularSeats <= 300\n# At least 50 seats should be first-class:\nm += FirstClassSeats >= 50\n# At least 3 times as many regular seats as first-class seats:\nm += RegularSeats >= 3 * FirstClassSeats\n\n# Objective\n# Maximize profit ($1200 per first-class seat, $700 per regular seat):\nm.maximize(1200 * FirstClassSeats + 700 * RegularSeats)\n", "entities": [{"start": 33, "end": 38, "word": "total", "entity_group": "CONST_DIR", "score": 0.9982143674670513}, {"start": 42, "end": 45, "word": "300", "entity_group": "LIMIT", "score": 0.9993597042862815}, {"start": 54, "end": 73, "word": "first - class seats", "entity_group": "VAR", "score": 0.9992150424641268}, {"start": 78, "end": 91, "word": "regular seats", "entity_group": "VAR", "score": 0.9999727549179269}, {"start": 96, "end": 102, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999702947775999}, {"start": 108, "end": 112, "word": "1200", "entity_group": "PARAM", "score": 0.9995523034798124}, {"start": 129, "end": 147, "word": "first - class seat", "entity_group": "VAR", "score": 0.9992084160370179}, {"start": 154, "end": 160, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999528797640167}, {"start": 166, "end": 169, "word": "700", "entity_group": "PARAM", "score": 0.9995013051266377}, {"start": 186, "end": 198, "word": "regular seat", "entity_group": "VAR", "score": 0.9999548616808198}, {"start": 228, "end": 236, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989458063675309}, {"start": 237, "end": 239, "word": "50", "entity_group": "LIMIT", "score": 0.9996853617535058}, {"start": 252, "end": 265, "word": "first - class", "entity_group": "VAR", "score": 0.9980306237417693}, {"start": 312, "end": 320, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997570772901222}, {"start": 321, "end": 328, "word": "3 times", "entity_group": "PARAM", "score": 0.919441617436111}, {"start": 355, "end": 368, "word": "regular seats", "entity_group": "VAR", "score": 0.9999795025665703}, {"start": 372, "end": 391, "word": "first - class seats", "entity_group": "VAR", "score": 0.9992072394174855}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995879941678315}, {"start": 488, "end": 494, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998629450172357}]}
{"doc_id": "1229366693", "document": "A dietician recommends that his patient eat gummy vitamins to get his mineral requirements. Each blue gummy contains 3 units of calcium, 2 units of vitamin A, and 5 units of iron. Each red gummy contains 4 units of calcium, 3 units of vitamin A, and 2 units of iron. The patient must get at least 40 units of calcium, 45 units of vitamin A, and 20 units of iron. If the cost per blue gummy is $2 and the cost per red gummy is $3, how many of each gummy should the patient purchase to minimize his costs?", "order_mapping": {"blue gummy": 0, "red gummy": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"blue gummy": "2", "red gummy": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "40", "terms": {"blue gummy": "3", "red gummy": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "45", "terms": {"blue gummy": "2", "red gummy": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"blue gummy": "5", "red gummy": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of blue gummies\n- y: Number of red gummies\n\nObjective:\n- The patient aims to minimize his costs. Given that the cost per blue gummy is $2 and the cost per red gummy is $3, the objective function is: Minimize 2x + 3y\n\nConstraints:\n- The patient must get at least 40 units of calcium, which can be represented as the constraint: 3x + 4y >= 40.\n- The patient must get at least 45 units of vitamin A, leading to the constraint: 2x + 3y >= 45.\n- The patient must get at least 20 units of iron, resulting in the constraint: 5x + 2y >= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 3y\nConstraints:\n3x + 4y >= 40\n2x + 3y >= 45\n5x + 2y >= 20", "canonical": {"objective": [2.0, 3.0], "constraints": [[-3.0, -4.0, -40.0], [-2.0, -3.0, -45.0], [-5.0, -2.0, -20.0]]}, "solution": {"x": 0, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of blue gummies purchased: BlueGummy\n- Number of red gummies purchased: RedGummy\n\nConstraints:\n- To meet the calcium requirement (at least 40 units):\n  3 * BlueGummy + 4 * RedGummy >= 40\n- To meet the vitamin A requirement (at least 45 units):\n  2 * BlueGummy + 3 * RedGummy >= 45\n- To meet the iron requirement (at least 20 units):\n  5 * BlueGummy + 2 * RedGummy >= 20\n\nObjective:\n- Minimize costs (2 dollars per blue gummy, 3 dollars per red gummy):\n  2 * BlueGummy + 3 * RedGummy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueGummy = intvar(0, 999999999)  # Number of blue gummies purchased\nRedGummy = intvar(0, 999999999)  # Number of red gummies purchased\n\n# Constraints\nm = Model()\n\n# The patient must get at least 40 units of calcium:\nm += 3 * BlueGummy + 4 * RedGummy >= 40\n# The patient must get at least 45 units of vitamin A:\nm += 2 * BlueGummy + 3 * RedGummy >= 45\n# The patient must get at least 20 units of iron:\nm += 5 * BlueGummy + 2 * RedGummy >= 20\n\n# Objective\n# Minimize costs (2 dollars per blue gummy, 3 dollars per red gummy):\nm.minimize(2 * BlueGummy + 3 * RedGummy)\n", "entities": [{"start": 98, "end": 108, "word": "blue gummy", "entity_group": "VAR", "score": 0.9999304746532132}, {"start": 118, "end": 119, "word": "3", "entity_group": "PARAM", "score": 0.9996220895423766}, {"start": 139, "end": 140, "word": "2", "entity_group": "PARAM", "score": 0.999730572925444}, {"start": 166, "end": 167, "word": "5", "entity_group": "PARAM", "score": 0.999630356708902}, {"start": 189, "end": 198, "word": "red gummy", "entity_group": "VAR", "score": 0.9999346345891823}, {"start": 208, "end": 209, "word": "4", "entity_group": "PARAM", "score": 0.9997095890102615}, {"start": 229, "end": 230, "word": "3", "entity_group": "PARAM", "score": 0.9997305774619044}, {"start": 256, "end": 257, "word": "2", "entity_group": "PARAM", "score": 0.9995523093913949}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992436649737491}, {"start": 304, "end": 306, "word": "40", "entity_group": "LIMIT", "score": 0.9997285204520718}, {"start": 326, "end": 328, "word": "45", "entity_group": "LIMIT", "score": 0.9997393930860685}, {"start": 354, "end": 356, "word": "20", "entity_group": "LIMIT", "score": 0.9994600334091915}, {"start": 380, "end": 384, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.998786626908028}, {"start": 389, "end": 399, "word": "blue gummy", "entity_group": "VAR", "score": 0.9997467711063851}, {"start": 405, "end": 406, "word": "2", "entity_group": "PARAM", "score": 0.9994637766690101}, {"start": 415, "end": 419, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9988455868494793}, {"start": 424, "end": 433, "word": "red gummy", "entity_group": "VAR", "score": 0.9998035698362367}, {"start": 439, "end": 440, "word": "3", "entity_group": "PARAM", "score": 0.9995516380129967}, {"start": 497, "end": 505, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9990980832344862}, {"start": 510, "end": 515, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9983262570075027}]}
{"doc_id": "1160070199", "document": "A boat company provides transportation service for both vehicles and passengers. Due to capacity limit, the company can sell at most 200 tickets. A profit of $130 is made for each vehicle and the company makes a profit of $60 for each passenger. The company reserved a minimum of 20 tickets for vehicles. However, because most people don't have cars, at least 4 times as many tickets are sold for passenger tickets than vehicle tickets. How many of each ticket type should be sold to maximize profit?", "order_mapping": {"vehicles": 0, "passengers": 1, "vehicle": 0, "passenger": 1, "passenger tickets": 1, "vehicle tickets": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"passenger": "60", "vehicle": "130"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "20", "var": "vehicles", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "passenger tickets", "direction": "at least", "param": "4 times", "y_var": "vehicle tickets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of vehicle tickets sold\n- y: Number of passenger tickets sold\n\nObjective:\n- The boat company aims to maximize its profit. The profit made for each vehicle ticket is $130 and for each passenger ticket is $60. Therefore, the objective function is: Maximize 130x + 60y\n\nConstraints:\n- The company can sell at most 200 tickets, so the constraint is: x + y <= 200.\n- A minimum of 20 tickets are reserved for vehicles, leading to the constraint: x >= 20.\n- At least 4 times as many tickets are sold for passenger tickets than vehicle tickets, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 130x + 60y\nConstraints:\nx + y <= 200\nx >= 20\ny >= 4x", "canonical": {"objective": [-130.0, -60.0], "constraints": [[1.0, 1.0, 200.0], [-1.0, 0.0, -20.0], [4.0, -1.0, 0.0]]}, "solution": {"x": 40, "y": 160}, "pseudo_model": "\nDecision Variables:\n- Number of vehicle tickets sold: VehicleTickets\n- Number of passenger tickets sold: PassengerTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 200:\n  VehicleTickets + PassengerTickets <= 200\n- At least 20 tickets must be reserved for vehicles:\n  VehicleTickets >= 20\n- At least 4 times as many tickets are sold for passengers than for vehicles:\n  PassengerTickets >= 4 * VehicleTickets\n\nObjective:\n- Maximize profit (130 dollars per vehicle ticket, 60 dollars per passenger ticket):\n  130 * VehicleTickets + 60 * PassengerTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVehicleTickets = intvar(0, 999999999)  # Number of vehicle tickets sold\nPassengerTickets = intvar(0, 999999999)  # Number of passenger tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets sold should not exceed 200:\nm += VehicleTickets + PassengerTickets <= 200\n# A minimum of 20 tickets must be reserved for vehicles:\nm += VehicleTickets >= 20\n# At least 4 times as many tickets are sold for passengers than for vehicles:\nm += PassengerTickets >= 4 * VehicleTickets\n\n# Objective\n# Maximize profit (130 dollars per vehicle ticket, 60 dollars per passenger ticket):\nm.maximize(130 * VehicleTickets + 60 * PassengerTickets)\n", "entities": [{"start": 56, "end": 64, "word": "vehicles", "entity_group": "VAR", "score": 0.9995643120225725}, {"start": 69, "end": 79, "word": "passengers", "entity_group": "VAR", "score": 0.999591897258362}, {"start": 127, "end": 134, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990288331852826}, {"start": 135, "end": 138, "word": "200", "entity_group": "LIMIT", "score": 0.9996830457200695}, {"start": 151, "end": 157, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998755627885683}, {"start": 163, "end": 166, "word": "130", "entity_group": "PARAM", "score": 0.9997158346406433}, {"start": 184, "end": 191, "word": "vehicle", "entity_group": "VAR", "score": 0.9997609748382065}, {"start": 216, "end": 222, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998881002723312}, {"start": 228, "end": 230, "word": "60", "entity_group": "PARAM", "score": 0.9990979070326592}, {"start": 240, "end": 249, "word": "passenger", "entity_group": "VAR", "score": 0.9996995673018423}, {"start": 275, "end": 282, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9971330208105007}, {"start": 286, "end": 288, "word": "20", "entity_group": "LIMIT", "score": 0.9995606018526852}, {"start": 301, "end": 309, "word": "vehicles", "entity_group": "VAR", "score": 0.9993200707292587}, {"start": 361, "end": 369, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983683241222275}, {"start": 370, "end": 377, "word": "4 times", "entity_group": "PARAM", "score": 0.9122964168145992}, {"start": 407, "end": 424, "word": "passenger tickets", "entity_group": "VAR", "score": 0.9999586130806766}, {"start": 430, "end": 445, "word": "vehicle tickets", "entity_group": "VAR", "score": 0.9998972492518201}, {"start": 495, "end": 503, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.997917719819629}, {"start": 504, "end": 510, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997780105057108}]}
{"doc_id": "-1063681658", "document": "A businessman has $20000 to invest in two factories, a shoe factory and a hat factory. Because the shoe factory has more experience, he has decided to invest at least 4 times as much money in the shoe factory than in the hat factory. However, the amount invested in the shoe factory can be at most $15000. If investments in the shoe factory earn 7% and investments in the hat factory earn 6%, how much money should he invest in each to maximize his earnings?", "order_mapping": {"shoe factory": 0, "hat factory": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"shoe factory": "7%", "hat factory": "6%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "20000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "shoe factory", "direction": "at least", "param": "4 times", "y_var": "hat factory", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "15000", "var": "shoe factory", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the shoe factory\n- y: Dollars invested in the hat factory\n\nObjective:\n- The businessman aims to maximize his earnings. Investments in the shoe factory earn 7% and investments in the hat factory earn 6%. Therefore, the objective function is: Maximize 0.07x + 0.06y\n\nConstraints:\n- The businessman has $20000 to invest, so the constraint is: x + y <= 20000.\n- He has decided to invest at least 4 times as much money in the shoe factory than in the hat factory, leading to the constraint: x >= 4y.\n- The amount invested in the shoe factory can be at most $15000, leading to the constraint: x <= 15000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.07x + 0.06y\nConstraints:\nx + y <= 20000\nx >= 4y\nx <= 15000", "canonical": {"objective": [-0.07, -0.06], "constraints": [[1.0, 1.0, 20000.0], [-1.0, 4.0, 0.0], [1.0, 0.0, 15000.0]]}, "solution": {"x": 15000, "y": 3750}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the shoe factory: ShoeFactory\n- Amount invested in the hat factory: HatFactory\n\nConstraints:\n- Total investment should not exceed $20000:\n  ShoeFactory + HatFactory <= 20000\n- Investment in the shoe factory should be at least 4 times the investment in the hat factory:\n  ShoeFactory >= 4 * HatFactory\n- The amount invested in the shoe factory can be at most $15000:\n  ShoeFactory <= 15000 (Implicitly defined by the variable's domain)\n\nObjective:\n- Maximize earnings (7% from the shoe factory, 6% from the hat factory):\n  0.07 * ShoeFactory + 0.06 * HatFactory\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShoeFactory = intvar(0, 15000)  # Amount invested in the shoe factory\nHatFactory = intvar(0, 20000)  # Amount invested in the hat factory\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $20000:\nm += ShoeFactory + HatFactory <= 20000\n# Investment in the shoe factory should be at least 4 times the investment in the hat factory:\nm += ShoeFactory >= 4 * HatFactory\n# The amount invested in the shoe factory can be at most $15000:\n# This constraint is already enforced by the domain of ShoeFactory variable\n\n# Objective\n# Maximize earnings (7% from the shoe factory, 6% from the hat factory):\nm.maximize(0.07 * ShoeFactory + 0.06 * HatFactory)\n", "entities": [{"start": 14, "end": 17, "word": "has", "entity_group": "CONST_DIR", "score": 0.9960327749387432}, {"start": 20, "end": 25, "word": "20000", "entity_group": "LIMIT", "score": 0.9992861161389378}, {"start": 57, "end": 69, "word": "shoe factory", "entity_group": "VAR", "score": 0.9999694611460775}, {"start": 76, "end": 87, "word": "hat factory", "entity_group": "VAR", "score": 0.9999679128056526}, {"start": 102, "end": 114, "word": "shoe factory", "entity_group": "VAR", "score": 0.9999463070142172}, {"start": 162, "end": 170, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980013385496428}, {"start": 171, "end": 178, "word": "4 times", "entity_group": "PARAM", "score": 0.8986810874357869}, {"start": 200, "end": 212, "word": "shoe factory", "entity_group": "VAR", "score": 0.9999843351542818}, {"start": 225, "end": 236, "word": "hat factory", "entity_group": "VAR", "score": 0.9999692302565988}, {"start": 276, "end": 288, "word": "shoe factory", "entity_group": "VAR", "score": 0.9999736265554164}, {"start": 296, "end": 303, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9884769017279638}, {"start": 306, "end": 311, "word": "15000", "entity_group": "LIMIT", "score": 0.9996695918511861}, {"start": 336, "end": 348, "word": "shoe factory", "entity_group": "VAR", "score": 0.999943664759656}, {"start": 349, "end": 353, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9859314721958705}, {"start": 354, "end": 357, "word": "7 %", "entity_group": "PARAM", "score": 0.9835817471318014}, {"start": 381, "end": 392, "word": "hat factory", "entity_group": "VAR", "score": 0.9999765199331623}, {"start": 393, "end": 397, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9954240484296486}, {"start": 398, "end": 401, "word": "6 %", "entity_group": "PARAM", "score": 0.9919665497682926}, {"start": 447, "end": 455, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203414966803}, {"start": 460, "end": 468, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.998930629298111}]}
{"doc_id": "1326962238", "document": "A small wood shop specializing in furniture can make a maximum of 40 bookcases and 60 coffee tables in a week. It takes a worker 7 hours to make a bookcase and 5 hours to make a coffee table. The profit on a bookcase is $90 and the profit on a coffee table is $65. The total number of hours by all of the employees is at most 150 hours per week. Formulate an LP problem in order to maximize profit.", "order_mapping": {"bookcases": 0, "coffee tables": 1, "bookcase": 0, "coffee table": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bookcase": "90", "coffee table": "65"}}, "const_declarations": [{"type": "upperbound", "direction": "maximum", "limit": "40", "var": "bookcases", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "150", "terms": {"bookcase": "7", "coffee table": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "maximum", "limit": "60", "var": "coffee tables", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bookcases produced\n- y: Number of coffee tables produced\n\nObjective:\n- The wood shop aims to maximize its profit. The profit on a bookcase is $90 and the profit on a coffee table is $65. Therefore, the objective function is: Maximize 90x + 65y\n\nConstraints:\n- The wood shop can make at most 40 bookcases, leading to the constraint: x <= 40.\n- The wood shop can make at most 60 coffee tables, leading to the constraint: y <= 60.\n- The total number of hours worked by all employees is at most 150 hours per week. It takes 7 hours to make a bookcase and 5 hours to make a coffee table, so the constraint is: 7x + 5y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 90x + 65y\nConstraints:\nx <= 40\ny <= 60\n7x + 5y <= 150", "canonical": {"objective": [-90.0, -65.0], "constraints": [[1.0, 0.0, 40.0], [0.0, 1.0, 60.0], [7.0, 5.0, 150.0]]}, "solution": {"x": 0, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of bookcases made per week: Bookcases\n- Number of coffee tables made per week: CoffeeTables\n\nConstraints:\n- Maximum of 40 bookcases per week:\n  Bookcases <= 40\n- Maximum of 60 coffee tables per week:\n  CoffeeTables <= 60\n- Total work hours should not exceed 150 hours per week (7 hours per bookcase, 5 hours per coffee table):\n  7 * Bookcases + 5 * CoffeeTables <= 150\n\nObjective:\n- Maximize profit ($90 profit per bookcase, $65 profit per coffee table):\n  90 * Bookcases + 65 * CoffeeTables\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBookcases = intvar(0, 999999999)  # Number of bookcases made per week\nCoffeeTables = intvar(0, 999999999)  # Number of coffee tables made per week\n\n# Constraints\nm = Model()\n\n# The shop can make a maximum of 40 bookcases per week:\nm += Bookcases <= 40\n# The shop can make a maximum of 60 coffee tables per week:\nm += CoffeeTables <= 60\n# The total number of hours by all employees is at most 150 hours per week (7 hours per bookcase, 5 hours per coffee table):\nm += 7 * Bookcases + 5 * CoffeeTables <= 150\n\n# Objective\n# Maximize profit ($90 profit per bookcase, $65 profit per coffee table):\nm.maximize(90 * Bookcases + 65 * CoffeeTables)\n", "entities": [{"start": 55, "end": 62, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9955215676812513}, {"start": 66, "end": 68, "word": "40", "entity_group": "LIMIT", "score": 0.9996970218203853}, {"start": 69, "end": 78, "word": "bookcases", "entity_group": "VAR", "score": 0.997529803743521}, {"start": 83, "end": 85, "word": "60", "entity_group": "LIMIT", "score": 0.9985350825058984}, {"start": 86, "end": 99, "word": "coffee tables", "entity_group": "VAR", "score": 0.9998194925435671}, {"start": 130, "end": 131, "word": "7", "entity_group": "PARAM", "score": 0.9996090580942087}, {"start": 148, "end": 156, "word": "bookcase", "entity_group": "VAR", "score": 0.9987523781672804}, {"start": 161, "end": 162, "word": "5", "entity_group": "PARAM", "score": 0.9996739090282666}, {"start": 179, "end": 191, "word": "coffee table", "entity_group": "VAR", "score": 0.9987696702557372}, {"start": 198, "end": 204, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999883339868714}, {"start": 210, "end": 218, "word": "bookcase", "entity_group": "VAR", "score": 0.9993857488803626}, {"start": 224, "end": 226, "word": "90", "entity_group": "PARAM", "score": 0.9994626020037761}, {"start": 235, "end": 241, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999174669794579}, {"start": 247, "end": 259, "word": "coffee table", "entity_group": "VAR", "score": 0.9994865018053508}, {"start": 265, "end": 267, "word": "65", "entity_group": "PARAM", "score": 0.9995462927133755}, {"start": 323, "end": 330, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989831468902219}, {"start": 331, "end": 334, "word": "150", "entity_group": "LIMIT", "score": 0.9997515597038985}, {"start": 388, "end": 396, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9875922319642458}, {"start": 397, "end": 403, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9971200941451337}]}
{"doc_id": "-988774507", "document": "A berry farmer has 300 acres of land to grow blueberries and raspberries. Each acre of blueberries costs $60 for fertilizer and takes 3 hours of picking. Each acre of raspberries costs $40 for fertilizer and takes 4 hours of picking. The farmer has available $20000 to spend on fertilizer and 400 hours available for picking. If the profit per acre of blueberries is $200 and the profit per acre of raspberries is $250, how many acres of each should be grown to maximize profit?", "order_mapping": {"blueberries": 0, "raspberries": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"raspberries": "250", "blueberries": "200"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "20000", "terms": {"blueberries": "60", "raspberries": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"blueberries": "3", "raspberries": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of blueberries\n- y: Acres of raspberries\n\nObjective:\n- The farmer aims to maximize profit. The profit per acre of blueberries is $200 and the profit per acre of raspberries is $250. Therefore, the objective function is: Maximize 200x + 250y\n\nConstraints:\n- The farmer has 300 acres of land available, so the constraint is: x + y <= 300.\n- The total amount available for fertilizer is $20,000, leading to the constraint: 60x + 40y <= 20000.\n- The total available picking time is 400 hours, resulting in the constraint: 3x + 4y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 250y\nConstraints:\nx + y <= 300\n60x + 40y <= 20000\n3x + 4y <= 400", "canonical": {"objective": [-200.0, -250.0], "constraints": [[1.0, 1.0, 300.0], [60.0, 40.0, 20000.0], [3.0, 4.0, 400.0]]}, "solution": {"x": 132, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of acres of blueberries grown: Blueberries\n- Number of acres of raspberries grown: Raspberries\n\nConstraints:\n- Total acres used should not exceed 300:\n  Blueberries + Raspberries <= 300\n- Total cost for fertilizer should not exceed $20000 ($60 per acre for blueberries, $40 per acre for raspberries):\n  60 * Blueberries + 40 * Raspberries <= 20000\n- Total hours available for picking should not exceed 400 (3 hours per acre for blueberries, 4 hours per acre for raspberries):\n  3 * Blueberries + 4 * Raspberries <= 400\n\nObjective:\n- Maximize profit ($200 per acre for blueberries, $250 per acre for raspberries):\n  200 * Blueberries + 250 * Raspberries\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueberries = intvar(0, 999999999)  # Number of acres of blueberries\nRaspberries = intvar(0, 999999999)  # Number of acres of raspberries\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 300:\nm += Blueberries + Raspberries <= 300\n# Total cost for fertilizer should not exceed $20000 ($60 per acre for blueberries, $40 per acre for raspberries):\nm += 60 * Blueberries + 40 * Raspberries <= 20000\n# Total hours available for picking should not exceed 400 (3 hours per acre for blueberries, 4 hours per acre for raspberries):\nm += 3 * Blueberries + 4 * Raspberries <= 400\n\n# Objective\n# Maximize profit ($200 per acre for blueberries, $250 per acre for raspberries):\nm.maximize(200 * Blueberries + 250 * Raspberries)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.9937775129560382}, {"start": 19, "end": 22, "word": "300", "entity_group": "LIMIT", "score": 0.9988570638109942}, {"start": 45, "end": 56, "word": "blueberries", "entity_group": "VAR", "score": 0.9981424518292643}, {"start": 61, "end": 72, "word": "raspberries", "entity_group": "VAR", "score": 0.9995535071856506}, {"start": 88, "end": 99, "word": "blueberries", "entity_group": "VAR", "score": 0.9996473863588735}, {"start": 108, "end": 110, "word": "60", "entity_group": "PARAM", "score": 0.9996525734993404}, {"start": 136, "end": 137, "word": "3", "entity_group": "PARAM", "score": 0.9997093840665167}, {"start": 170, "end": 181, "word": "raspberries", "entity_group": "VAR", "score": 0.9995770089970556}, {"start": 190, "end": 192, "word": "40", "entity_group": "PARAM", "score": 0.99965257334989}, {"start": 218, "end": 219, "word": "4", "entity_group": "PARAM", "score": 0.999606495969584}, {"start": 254, "end": 263, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991764195991437}, {"start": 266, "end": 271, "word": "20000", "entity_group": "LIMIT", "score": 0.9995043078977932}, {"start": 299, "end": 302, "word": "400", "entity_group": "LIMIT", "score": 0.9997412724902329}, {"start": 309, "end": 318, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990437648781226}, {"start": 340, "end": 346, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999396986444308}, {"start": 359, "end": 370, "word": "blueberries", "entity_group": "VAR", "score": 0.9994952128922161}, {"start": 376, "end": 379, "word": "200", "entity_group": "PARAM", "score": 0.9992430237606286}, {"start": 388, "end": 394, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713132}, {"start": 407, "end": 418, "word": "raspberries", "entity_group": "VAR", "score": 0.9994301094745145}, {"start": 424, "end": 427, "word": "250", "entity_group": "PARAM", "score": 0.9995941446297246}, {"start": 472, "end": 480, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-2082341508", "document": "In a basketball game, your team can shoot long shots or mid-range shots. Each long shot is worth 3 points and each mid-range shot is worth 2 points. To win against the next team, your team must score at least 95 points. Based on previous games, your team always makes at least 5 long shots in a game. The stats also show that your team efficiency is 25% for long shots and 40% for mid-range shots. Determine the number of long shots and mid-range shots that your team should make to maximize its efficiency?", "order_mapping": {"long shots": 0, "mid-range shots": 1, "long shot": 0, "mid-range shot": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "efficiency", "terms": {"long shots": "25%", "mid-range shots": "40%"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "95", "terms": {"long shot": "3", "mid-range shot": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "long shots", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of long shots\n- y: Number of mid-range shots\n\nObjective:\n- The team aims to maximize its efficiency. The efficiency for long shots is 25% and for mid-range shots is 40%. Therefore, the objective function is: Maximize 0.25x + 0.40y\n\nConstraints:\n- The team must score at least 95 points to win the game. Each long shot is worth 3 points and each mid-range shot is worth 2 points, leading to the constraint: 3x + 2y >= 95.\n- Based on previous games, the team always makes at least 5 long shots in a game, leading to the constraint: x >= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.25x + 0.40y\nConstraints:\n3x + 2y >= 95\nx >= 5", "canonical": {"objective": [-0.25, -0.4], "constraints": [[-3.0, -2.0, -95.0], [-1.0, 0.0, -5.0]]}, "solution": {"x": 100000000, "y": 100000000}, "pseudo_model": "\nDecision Variables:\n- Number of long shots made: LongShots\n- Number of mid-range shots made: MidRangeShots\n\nConstraints:\n- Team must score at least 95 points (3 points per long shot, 2 points per mid-range shot):\n  3 * LongShots + 2 * MidRangeShots >= 95\n- Team always makes at least 5 long shots in a game:\n  LongShots >= 5\n\nObjective:\n- Maximize efficiency (25% for long shots and 40% for mid-range shots):\n  0.25 * LongShots + 0.40 * MidRangeShots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLongShots = intvar(0, 999999999)  # Number of long shots made\nMidRangeShots = intvar(0, 999999999)  # Number of mid-range shots made\n\n# Constraints\nm = Model()\n\n# Your team must score at least 95 points:\nm += 3 * LongShots + 2 * MidRangeShots >= 95\n# Your team always makes at least 5 long shots in a game:\nm += LongShots >= 5\n\n# Objective\n# Maximize efficiency (25% for long shots and 40% for mid-range shots):\n# Note: Since efficiency is a percentage and does not directly translate to a linear objective, we'll assume maximizing the number of successful shots as a proxy for efficiency.\n# This assumption is based on the fact that more successful shots would generally mean a higher efficiency, given the fixed percentages.\nm.maximize(0.25 * LongShots + 0.40 * MidRangeShots)\n", "entities": [{"start": 43, "end": 53, "word": "long shots", "entity_group": "VAR", "score": 0.9999774781424171}, {"start": 57, "end": 74, "word": "mid - range shots", "entity_group": "VAR", "score": 0.9993686072149323}, {"start": 82, "end": 91, "word": "long shot", "entity_group": "VAR", "score": 0.9999615221038348}, {"start": 101, "end": 102, "word": "3", "entity_group": "PARAM", "score": 0.9996388265658364}, {"start": 119, "end": 135, "word": "mid - range shot", "entity_group": "VAR", "score": 0.9993679164678356}, {"start": 145, "end": 146, "word": "2", "entity_group": "PARAM", "score": 0.9995108166619965}, {"start": 208, "end": 216, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986377671461215}, {"start": 217, "end": 219, "word": "95", "entity_group": "LIMIT", "score": 0.999649444861734}, {"start": 278, "end": 286, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998813870967998}, {"start": 287, "end": 288, "word": "5", "entity_group": "LIMIT", "score": 0.9994666450685163}, {"start": 289, "end": 299, "word": "long shots", "entity_group": "VAR", "score": 0.9999353459950987}, {"start": 347, "end": 357, "word": "efficiency", "entity_group": "OBJ_NAME", "score": 0.9978548300809712}, {"start": 361, "end": 365, "word": "25 %", "entity_group": "PARAM", "score": 0.9839116671712181}, {"start": 370, "end": 380, "word": "long shots", "entity_group": "VAR", "score": 0.9999765932863157}, {"start": 385, "end": 389, "word": "40 %", "entity_group": "PARAM", "score": 0.9944734167724734}, {"start": 394, "end": 411, "word": "mid - range shots", "entity_group": "VAR", "score": 0.9988974914337382}, {"start": 438, "end": 448, "word": "long shots", "entity_group": "VAR", "score": 0.9999422131294483}, {"start": 453, "end": 470, "word": "mid - range shots", "entity_group": "VAR", "score": 0.9994938493769905}, {"start": 501, "end": 509, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994028791614836}, {"start": 514, "end": 524, "word": "efficiency", "entity_group": "OBJ_NAME", "score": 0.9992457681531018}]}
{"doc_id": "-356156483", "document": "A man takes two forms of vitamin supplements to get his vitamin B and vitamin D requirements. He needs at least 14 units of vitamin B and 24 units of vitamin D. Per serving, a gummy vitamin contains 2 units of vitamin B and 7 units of vitamin D. Per serving, a powder vitamin contains 6 units of vitamin B and 2 units of vitamin D. If the cost per serving for a gummy vitamin is $1 and the cost per serving of powder vitamin is $3, how many of each should he take to minimize his cost?", "order_mapping": {"gummy vitamin": 0, "powder vitamin": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"powder vitamin": "3", "gummy vitamin": "1"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "14", "terms": {"gummy vitamin": "2", "powder vitamin": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "24", "terms": {"gummy vitamin": "7", "powder vitamin": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of gummy vitamin\n- y: Number of servings of powder vitamin\n\nObjective:\n- The man wants to minimize his cost. The cost per serving for a gummy vitamin is $1 and the cost per serving of powder vitamin is $3. Therefore, the objective function is: Minimize 1x + 3y\n\nConstraints:\n- He needs at least 14 units of vitamin B, which can be represented as: 2x + 6y >= 14\n- He needs at least 24 units of vitamin D, which can be represented as: 7x + 2y >= 24\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 3y\nConstraints:\n2x + 6y >= 14\n7x + 2y >= 24", "canonical": {"objective": [1.0, 3.0], "constraints": [[-2.0, -6.0, -14.0], [-7.0, -2.0, -24.0]]}, "solution": {"x": 7, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of gummy vitamin servings: GummyVitamin\n- Number of powder vitamin servings: PowderVitamin\n\nConstraints:\n- To meet the vitamin B requirement (at least 14 units):\n  2 * GummyVitamin + 6 * PowderVitamin >= 14\n- To meet the vitamin D requirement (at least 24 units):\n  7 * GummyVitamin + 2 * PowderVitamin >= 24\n\nObjective:\n- Minimize cost ($1 per serving for gummy vitamin, $3 per serving for powder vitamin):\n  1 * GummyVitamin + 3 * PowderVitamin\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGummyVitamin = intvar(0, 999999999)  # Number of gummy vitamin servings\nPowderVitamin = intvar(0, 999999999)  # Number of powder vitamin servings\n\n# Constraints\nm = Model()\n\n# Vitamin B requirement (at least 14 units):\nm += 2 * GummyVitamin + 6 * PowderVitamin >= 14\n# Vitamin D requirement (at least 24 units):\nm += 7 * GummyVitamin + 2 * PowderVitamin >= 24\n\n# Objective\n# Minimize cost ($1 per serving for gummy vitamin, $3 per serving for powder vitamin):\nm.minimize(1 * GummyVitamin + 3 * PowderVitamin)\n", "entities": [{"start": 104, "end": 112, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990988273733337}, {"start": 113, "end": 115, "word": "14", "entity_group": "LIMIT", "score": 0.9997479518697713}, {"start": 139, "end": 141, "word": "24", "entity_group": "LIMIT", "score": 0.9993470034034168}, {"start": 178, "end": 191, "word": "gummy vitamin", "entity_group": "VAR", "score": 0.9998886171307553}, {"start": 201, "end": 202, "word": "2", "entity_group": "PARAM", "score": 0.9997248758510586}, {"start": 226, "end": 227, "word": "7", "entity_group": "PARAM", "score": 0.9995163799897433}, {"start": 264, "end": 278, "word": "powder vitamin", "entity_group": "VAR", "score": 0.9999107367077849}, {"start": 288, "end": 289, "word": "6", "entity_group": "PARAM", "score": 0.9997177580639776}, {"start": 313, "end": 314, "word": "2", "entity_group": "PARAM", "score": 0.9995523225042869}, {"start": 342, "end": 346, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.999306224153986}, {"start": 365, "end": 378, "word": "gummy vitamin", "entity_group": "VAR", "score": 0.9998291737061252}, {"start": 384, "end": 385, "word": "1", "entity_group": "PARAM", "score": 0.999424174630022}, {"start": 394, "end": 398, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9983647794481285}, {"start": 414, "end": 428, "word": "powder vitamin", "entity_group": "VAR", "score": 0.9996339315539238}, {"start": 434, "end": 435, "word": "3", "entity_group": "PARAM", "score": 0.9996842876685017}, {"start": 473, "end": 481, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999451817105492}, {"start": 486, "end": 490, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989832555028385}]}
{"doc_id": "1612947890", "document": "A factory makes two types of bags: laptop bags and briefcases. Each laptop bag requires 12 minutes of sewing while each briefcase requires 10 minutes of sewing. Each laptop bag requires 5 minutes of painting while each briefcase requires 9 minutes of painting. There are 300 minutes available for sewing and 500 minutes available for painting. The profit per laptop bag is $80 and the profit per briefcase is $50. How many of each type of bag should the factory make in order to maximize profit?", "order_mapping": {"laptop bags": 0, "briefcases": 1, "laptop bag": 0, "briefcase": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"briefcase": "50", "laptop bag": "80"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"laptop bag": "12", "briefcase": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"laptop bag": "5", "briefcase": "9"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of laptop bags\n- y: Number of briefcases\n\nObjective:\n- The factory aims to maximize its profit. The profit per laptop bag is $80 and the profit per briefcase is $50. Therefore, the objective function is: Maximize 80x + 50y\n\nConstraints:\n- Each laptop bag requires 12 minutes of sewing, and each briefcase requires 10 minutes of sewing. With 300 minutes available for sewing, the constraint is: 12x + 10y <= 300.\n- Each laptop bag requires 5 minutes of painting, and each briefcase requires 9 minutes of painting. With 500 minutes available for painting, the constraint is: 5x + 9y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 80x + 50y\nConstraints:\n12x + 10y <= 300\n5x + 9y <= 500", "canonical": {"objective": [-80.0, -50.0], "constraints": [[12.0, 10.0, 300.0], [5.0, 9.0, 500.0]]}, "solution": {"x": 25, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of laptop bags produced: LaptopBags\n- Number of briefcases produced: Briefcases\n\nConstraints:\n- Total sewing time for all bags should not exceed 300 minutes (12 minutes per laptop bag, 10 minutes per briefcase):\n  12 * LaptopBags + 10 * Briefcases <= 300\n- Total painting time for all bags should not exceed 500 minutes (5 minutes per laptop bag, 9 minutes per briefcase):\n  5 * LaptopBags + 9 * Briefcases <= 500\n\nObjective:\n- Maximize profit ($80 per laptop bag, $50 per briefcase):\n  80 * LaptopBags + 50 * Briefcases\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLaptopBags = intvar(0, 999999999)  # Number of laptop bags produced\nBriefcases = intvar(0, 999999999)  # Number of briefcases produced\n\n# Constraints\nm = Model()\n\n# Sewing time constraints (300 minutes available):\nm += 12 * LaptopBags + 10 * Briefcases <= 300\n# Painting time constraints (500 minutes available):\nm += 5 * LaptopBags + 9 * Briefcases <= 500\n\n# Objective\n# Maximize profit ($80 per laptop bag, $50 per briefcase):\nm.maximize(80 * LaptopBags + 50 * Briefcases)\n", "entities": [{"start": 36, "end": 47, "word": "laptop bags", "entity_group": "VAR", "score": 0.9999766528796827}, {"start": 52, "end": 62, "word": "briefcases", "entity_group": "VAR", "score": 0.9998261516430345}, {"start": 70, "end": 80, "word": "laptop bag", "entity_group": "VAR", "score": 0.9999766373992262}, {"start": 90, "end": 92, "word": "12", "entity_group": "PARAM", "score": 0.9995949774171199}, {"start": 122, "end": 131, "word": "briefcase", "entity_group": "VAR", "score": 0.9997220259110173}, {"start": 141, "end": 143, "word": "10", "entity_group": "PARAM", "score": 0.9996031142895594}, {"start": 169, "end": 179, "word": "laptop bag", "entity_group": "VAR", "score": 0.9999742527797661}, {"start": 189, "end": 190, "word": "5", "entity_group": "PARAM", "score": 0.9995887796620267}, {"start": 222, "end": 231, "word": "briefcase", "entity_group": "VAR", "score": 0.9996840615112362}, {"start": 241, "end": 242, "word": "9", "entity_group": "PARAM", "score": 0.9993429240719814}, {"start": 275, "end": 278, "word": "300", "entity_group": "LIMIT", "score": 0.9997776369624524}, {"start": 287, "end": 296, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993441706453845}, {"start": 312, "end": 315, "word": "500", "entity_group": "LIMIT", "score": 0.9997099391372641}, {"start": 324, "end": 333, "word": "available", "entity_group": "CONST_DIR", "score": 0.998726180465338}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999517881030755}, {"start": 364, "end": 374, "word": "laptop bag", "entity_group": "VAR", "score": 0.9999615907503653}, {"start": 380, "end": 382, "word": "80", "entity_group": "PARAM", "score": 0.9996017518003139}, {"start": 391, "end": 397, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998470966628482}, {"start": 402, "end": 411, "word": "briefcase", "entity_group": "VAR", "score": 0.9990143080222648}, {"start": 417, "end": 419, "word": "50", "entity_group": "PARAM", "score": 0.9995067795799932}, {"start": 487, "end": 495, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993210574349483}, {"start": 496, "end": 502, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147077}]}
{"doc_id": "-631420779", "document": "Two sisters, Joy and Willa, run a stand selling green tea and pancakes. A pitcher of green tea takes 0.7 hours of Joy's time along with 0.3 hours of Willa's time. A batch of pancakes takes 1.2 hours of Joy's time and 0.6 hours of Willa's time. Joy has 8 hours available each day, but since Willa has hockey lessons, she only has 5 hours available each day. They get $2.5 profit per pitcher of green tea, and $10 per batch of pancakes. Formulate an LP to maximize profit.", "order_mapping": {"green tea": 0, "pancakes": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"green tea": "2.5", "pancakes": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "8", "terms": {"green tea": "0.7", "pancakes": "1.2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5", "terms": {"green tea": "0.3", "pancakes": "0.6"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pitchers of green tea\n- y: Number of batches of pancakes\n\nObjective:\n- The sisters aim to maximize their profit. They earn $2.5 profit per pitcher of green tea and $10 per batch of pancakes. Therefore, the objective function is: Maximize 2.5x + 10y\n\nConstraints:\n- Joy has 8 hours available each day, so the time constraint for green tea and pancakes is: 0.7x + 1.2y <= 8\n- Willa has 5 hours available each day, so the time constraint for green tea and pancakes is: 0.3x + 0.6y <= 5\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2.5x + 10y\nConstraints:\n0.7x + 1.2y <= 8\n0.3x + 0.6y <= 5", "canonical": {"objective": [-2.5, -10.0], "constraints": [[0.7, 1.2, 8.0], [0.3, 0.6, 5.0]]}, "solution": {"x": 1, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of pitchers of green tea: GreenTea\n- Number of batches of pancakes: Pancakes\n\nConstraints:\n- Joy's time constraint (0.7 hours per pitcher of green tea and 1.2 hours per batch of pancakes, 8 hours available):\n  0.7 * GreenTea + 1.2 * Pancakes <= 8\n- Willa's time constraint (0.3 hours per pitcher of green tea and 0.6 hours per batch of pancakes, 5 hours available):\n  0.3 * GreenTea + 0.6 * Pancakes <= 5\n\nObjective:\n- Maximize profit ($2.5 profit per pitcher of green tea and $10 profit per batch of pancakes):\n  2.5 * GreenTea + 10 * Pancakes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGreenTea = intvar(0, 999999999)  # Number of pitchers of green tea\nPancakes = intvar(0, 999999999)  # Number of batches of pancakes\n\n# Constraints\nm = Model()\n\n# Joy's time constraint (8 hours available):\nm += 0.7 * GreenTea + 1.2 * Pancakes <= 8\n# Willa's time constraint (5 hours available):\nm += 0.3 * GreenTea + 0.6 * Pancakes <= 5\n\n# Objective\n# Maximize profit ($2.5 per pitcher of green tea, $10 per batch of pancakes):\nm.maximize(2.5 * GreenTea + 10 * Pancakes)\n", "entities": [{"start": 50, "end": 59, "word": "green tea", "entity_group": "VAR", "score": 0.9997399793753596}, {"start": 64, "end": 72, "word": "pancakes", "entity_group": "VAR", "score": 0.999741042077621}, {"start": 88, "end": 97, "word": "green tea", "entity_group": "VAR", "score": 0.9998349650429345}, {"start": 104, "end": 107, "word": "0.7", "entity_group": "PARAM", "score": 0.999608451165199}, {"start": 140, "end": 143, "word": "0.3", "entity_group": "PARAM", "score": 0.999695854275259}, {"start": 180, "end": 188, "word": "pancakes", "entity_group": "VAR", "score": 0.9983695720177768}, {"start": 195, "end": 198, "word": "1.2", "entity_group": "PARAM", "score": 0.9996278771196667}, {"start": 224, "end": 227, "word": "0.6", "entity_group": "PARAM", "score": 0.9996191491504341}, {"start": 261, "end": 262, "word": "8", "entity_group": "LIMIT", "score": 0.9996669119238584}, {"start": 269, "end": 278, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991257967172551}, {"start": 340, "end": 341, "word": "5", "entity_group": "LIMIT", "score": 0.9997299673507078}, {"start": 348, "end": 357, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994675202314629}, {"start": 380, "end": 383, "word": "2.5", "entity_group": "PARAM", "score": 0.9996346295477762}, {"start": 384, "end": 390, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994148590125078}, {"start": 406, "end": 415, "word": "green tea", "entity_group": "VAR", "score": 0.9996935552432644}, {"start": 424, "end": 426, "word": "10", "entity_group": "PARAM", "score": 0.9997415744139655}, {"start": 440, "end": 448, "word": "pancakes", "entity_group": "VAR", "score": 0.9997508979110707}, {"start": 470, "end": 478, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990707746861741}, {"start": 479, "end": 485, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995115464882208}]}
{"doc_id": "-215214153", "document": "A lighting company makes desk lamps and chandeliers. Each desk lamp takes 20 minutes of manufacturing time and 1 light bulb. Each chandelier takes 60 minutes of manufacturing time and requires 15 light bulbs. The company must make at least 40 desk lamps. They have 1500 minutes of manufacturing time available and 300 light bulbs available. If the profit per desk lamp is $200 and the profit per chandelier is $500, how many of each should they make to maximize profit?", "order_mapping": {"desk lamps": 0, "chandeliers": 1, "desk lamp": 0, "chandelier": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"desk lamp": "200", "chandelier": "500"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "40", "var": "desk lamps", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"desk lamp": "20", "chandelier": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"desk lamp": "1", "chandelier": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of desk lamps to be made\n- y: Number of chandeliers to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per desk lamp is $200 and the profit per chandelier is $500. Therefore, the objective function is: Maximize 200x + 500y\n\nConstraints:\n- The company must make at least 40 desk lamps, leading to the constraint: x >= 40.\n- The total manufacturing time available is 1500 minutes, and each desk lamp takes 20 minutes while each chandelier takes 60 minutes. This results in the constraint: 20x + 60y <= 1500.\n- The company has 300 light bulbs available, and each desk lamp requires 1 light bulb while each chandelier requires 15 light bulbs. This leads to the constraint: x + 15y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 500y\nConstraints:\nx >= 40\n20x + 60y <= 1500\nx + 15y <= 300", "canonical": {"objective": [-200.0, -500.0], "constraints": [[-1.0, 0.0, -40.0], [20.0, 60.0, 1500.0], [1.0, 15.0, 300.0]]}, "solution": {"x": 75, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of desk lamps made: DeskLamps\n- Number of chandeliers made: Chandeliers\n\nConstraints:\n- At least 40 desk lamps must be made:\n  DeskLamps >= 40\n- Total manufacturing time for all products should not exceed 1500 minutes:\n  20 * DeskLamps + 60 * Chandeliers <= 1500\n- Total light bulbs used for all products should not exceed 300:\n  1 * DeskLamps + 15 * Chandeliers <= 300\n\nObjective:\n- Maximize profit ($200 per desk lamp, $500 per chandelier):\n  200 * DeskLamps + 500 * Chandeliers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDeskLamps = intvar(0, 999999999)  # Number of desk lamps made\nChandeliers = intvar(0, 999999999)  # Number of chandeliers made\n\n# Constraints\nm = Model()\n\n# The company must make at least 40 desk lamps:\nm += DeskLamps >= 40\n# They have 1500 minutes of manufacturing time available:\nm += 20 * DeskLamps + 60 * Chandeliers <= 1500\n# They have 300 light bulbs available:\nm += 1 * DeskLamps + 15 * Chandeliers <= 300\n\n# Objective\n# Maximize profit ($200 per desk lamp, $500 per chandelier):\nm.maximize(200 * DeskLamps + 500 * Chandeliers)\n", "entities": [{"start": 25, "end": 35, "word": "desk lamps", "entity_group": "VAR", "score": 0.9999778551267372}, {"start": 40, "end": 51, "word": "chandeliers", "entity_group": "VAR", "score": 0.9996266252045736}, {"start": 59, "end": 68, "word": "desk lamp", "entity_group": "VAR", "score": 0.9999807180954293}, {"start": 75, "end": 77, "word": "20", "entity_group": "PARAM", "score": 0.9996339154000382}, {"start": 112, "end": 113, "word": "1", "entity_group": "PARAM", "score": 0.9995976445681981}, {"start": 132, "end": 142, "word": "chandelier", "entity_group": "VAR", "score": 0.9996980633806517}, {"start": 149, "end": 151, "word": "60", "entity_group": "PARAM", "score": 0.9996089456053591}, {"start": 195, "end": 197, "word": "15", "entity_group": "PARAM", "score": 0.9997188467061764}, {"start": 234, "end": 242, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987860352452939}, {"start": 243, "end": 245, "word": "40", "entity_group": "LIMIT", "score": 0.9995251362838593}, {"start": 246, "end": 256, "word": "desk lamps", "entity_group": "VAR", "score": 0.999882445745794}, {"start": 269, "end": 273, "word": "1500", "entity_group": "LIMIT", "score": 0.9997070583961108}, {"start": 304, "end": 313, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991003891864256}, {"start": 318, "end": 321, "word": "300", "entity_group": "LIMIT", "score": 0.9986519166602227}, {"start": 334, "end": 343, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989646302264926}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999112552163467}, {"start": 364, "end": 373, "word": "desk lamp", "entity_group": "VAR", "score": 0.9999475181167902}, {"start": 379, "end": 382, "word": "200", "entity_group": "PARAM", "score": 0.9996423893738337}, {"start": 391, "end": 397, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999053283254773}, {"start": 402, "end": 412, "word": "chandelier", "entity_group": "VAR", "score": 0.9990888329755457}, {"start": 418, "end": 421, "word": "500", "entity_group": "PARAM", "score": 0.9994708202870373}, {"start": 461, "end": 469, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997620086430532}, {"start": 470, "end": 476, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368929248437}]}
{"doc_id": "-1018049027", "document": "A milk tea shop has 50000 ml of milk to make two milk teas: black milk tea and green milk tea. A bottle of black milk tea contains 300 ml of milk while a bottle of green milk tea has 200 ml of milk. The shop knows that they need to make at least three times the number of bottles of black milk tea than green milk tea. They also know that they need to make at least 10 bottles of green milk tea. Each bottle of black milk tea is sold for a profit of $2.5 and each bottle of green milk tea is sold for a profit of $7. How many of each type of milk tea needs to be made in order to maximize profit?", "order_mapping": {"black milk tea": 0, "green milk tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"green milk tea": "7", "black milk tea": "2.5"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "50000", "terms": {"black milk tea": "300", "green milk tea": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "black milk tea", "direction": "at least", "param": "three times", "y_var": "green milk tea", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "green milk tea", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of black milk tea\n- y: Number of bottles of green milk tea\n\nObjective:\n- The milk tea shop aims to maximize its profit. Each bottle of black milk tea is sold for a profit of $2.5 and each bottle of green milk tea is sold for a profit of $7. Therefore, the objective function is: Maximize 2.5x + 7y\n\nConstraints:\n- The shop has 50000 ml of milk available, and each bottle of black milk tea contains 300 ml of milk and each bottle of green milk tea contains 200 ml of milk. This leads to the constraint: 300x + 200y <= 50000.\n- The shop needs to make at least three times the number of bottles of black milk tea than green milk tea, resulting in the constraint: x >= 3y.\n- The shop needs to make at least 10 bottles of green milk tea, leading to the constraint: y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2.5x + 7y\nConstraints:\n300x + 200y <= 50000\nx >= 3y\ny >= 10", "canonical": {"objective": [-2.5, -7.0], "constraints": [[300.0, 200.0, 50000.0], [-1.0, 3.0, 0.0], [0.0, -1.0, -10.0]]}, "solution": {"x": 136, "y": 45}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of black milk tea: BlackMilkTea\n- Number of bottles of green milk tea: GreenMilkTea\n\nConstraints:\n- Total milk used should not exceed 50000 ml (300 ml per bottle of black milk tea, 200 ml per bottle of green milk tea):\n  300 * BlackMilkTea + 200 * GreenMilkTea <= 50000\n- Number of bottles of black milk tea should be at least three times the number of bottles of green milk tea:\n  BlackMilkTea >= 3 * GreenMilkTea\n- At least 10 bottles of green milk tea should be made:\n  GreenMilkTea >= 10\n\nObjective:\n- Maximize profit (2.5 dollars per bottle of black milk tea, 7 dollars per bottle of green milk tea):\n  2.5 * BlackMilkTea + 7 * GreenMilkTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlackMilkTea = intvar(0, 999999999)  # Number of bottles of black milk tea\nGreenMilkTea = intvar(0, 999999999)  # Number of bottles of green milk tea\n\n# Constraints\nm = Model()\n\n# Total milk used should not exceed 50000 ml:\nm += 300 * BlackMilkTea + 200 * GreenMilkTea <= 50000\n# Number of bottles of black milk tea should be at least three times the number of bottles of green milk tea:\nm += BlackMilkTea >= 3 * GreenMilkTea\n# At least 10 bottles of green milk tea should be made:\nm += GreenMilkTea >= 10\n\n# Objective\n# Maximize profit (2.5 dollars per bottle of black milk tea, 7 dollars per bottle of green milk tea):\nm.maximize(2.5 * BlackMilkTea + 7 * GreenMilkTea)\n", "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.9948005661599946}, {"start": 20, "end": 25, "word": "50000", "entity_group": "LIMIT", "score": 0.9986147410192863}, {"start": 61, "end": 75, "word": "black milk tea", "entity_group": "VAR", "score": 0.9970561852299211}, {"start": 80, "end": 94, "word": "green milk tea", "entity_group": "VAR", "score": 0.9973718842569275}, {"start": 109, "end": 123, "word": "black milk tea", "entity_group": "VAR", "score": 0.9989917715850397}, {"start": 133, "end": 136, "word": "300", "entity_group": "PARAM", "score": 0.9995957500669255}, {"start": 166, "end": 180, "word": "green milk tea", "entity_group": "VAR", "score": 0.9992695067329102}, {"start": 185, "end": 188, "word": "200", "entity_group": "PARAM", "score": 0.9995800372425677}, {"start": 240, "end": 248, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982990215152756}, {"start": 249, "end": 260, "word": "three times", "entity_group": "PARAM", "score": 0.720405176783082}, {"start": 286, "end": 300, "word": "black milk tea", "entity_group": "VAR", "score": 0.9991983199505863}, {"start": 306, "end": 320, "word": "green milk tea", "entity_group": "VAR", "score": 0.9984086098426139}, {"start": 361, "end": 369, "word": "at least", "entity_group": "CONST_DIR", "score": 0.99885978511655}, {"start": 370, "end": 372, "word": "10", "entity_group": "LIMIT", "score": 0.9996436385086188}, {"start": 384, "end": 398, "word": "green milk tea", "entity_group": "VAR", "score": 0.9993103117488032}, {"start": 416, "end": 430, "word": "black milk tea", "entity_group": "VAR", "score": 0.9992850239753129}, {"start": 445, "end": 451, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998646700190237}, {"start": 457, "end": 460, "word": "2.5", "entity_group": "PARAM", "score": 0.9996022583094873}, {"start": 480, "end": 494, "word": "green milk tea", "entity_group": "VAR", "score": 0.9995692419377752}, {"start": 509, "end": 515, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990923315493377}, {"start": 521, "end": 522, "word": "7", "entity_group": "PARAM", "score": 0.9996047604392907}, {"start": 588, "end": 596, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9949482298500768}, {"start": 597, "end": 603, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996634200134428}]}
{"doc_id": "1109593584", "document": "A scooter company sells two types of scooters: foldable scooters and electric scooters. The profit per foldable scooter is $150 and the profit per electric scooter is $200. Each product requires time with the design team and engineering team. Each foldable scooter needs 1.5 hours with the design team and 4 hours with the engineering team. Each electric scooter needs 3 hours with the design team and 6 hours with the engineering team. Per month, there are 4000 hours available on the design team and 5000 hours available on the engineering team. How many of each should the company make per month to maximize profit?", "order_mapping": {"foldable scooters": 0, "electric scooters": 1, "foldable scooter": 0, "electric scooter": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"foldable scooter": "150", "electric scooter": "200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"foldable scooter": "1.5", "electric scooter": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5000", "terms": {"foldable scooter": "4", "electric scooter": "6"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of foldable scooters\n- y: Number of electric scooters\n\nObjective:\n- The company aims to maximize its profit. The profit per foldable scooter is $150 and the profit per electric scooter is $200. Therefore, the objective function is: Maximize 150x + 200y\n\nConstraints:\n- Each foldable scooter needs 1.5 hours with the design team and each electric scooter needs 3 hours with the design team. The total available design team hours is 4000, leading to the constraint: 1.5x + 3y <= 4000.\n- Each foldable scooter needs 4 hours with the engineering team and each electric scooter needs 6 hours with the engineering team. The total available engineering team hours is 5000, leading to the constraint: 4x + 6y <= 5000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 200y\nConstraints:\n1.5x + 3y <= 4000\n4x + 6y <= 5000", "canonical": {"objective": [-150.0, -200.0], "constraints": [[1.5, 3.0, 4000.0], [4.0, 6.0, 5000.0]]}, "solution": {"x": 1250, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of foldable scooters produced per month: FoldableScooters\n- Number of electric scooters produced per month: ElectricScooters\n\nConstraints:\n- Design team hours constraint (4000 hours available per month):\n  1.5 * FoldableScooters + 3 * ElectricScooters <= 4000\n- Engineering team hours constraint (5000 hours available per month):\n  4 * FoldableScooters + 6 * ElectricScooters <= 5000\n\nObjective:\n- Maximize profit ($150 per foldable scooter, $200 per electric scooter):\n  150 * FoldableScooters + 200 * ElectricScooters\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFoldableScooters = intvar(0, 999999999)  # Number of foldable scooters produced per month\nElectricScooters = intvar(0, 999999999)  # Number of electric scooters produced per month\n\n# Constraints\nm = Model()\n\n# Design team hours constraint (4000 hours available per month):\nm += 1.5 * FoldableScooters + 3 * ElectricScooters <= 4000\n# Engineering team hours constraint (5000 hours available per month):\nm += 4 * FoldableScooters + 6 * ElectricScooters <= 5000\n\n# Objective\n# Maximize profit ($150 per foldable scooter, $200 per electric scooter):\nm.maximize(150 * FoldableScooters + 200 * ElectricScooters)\n", "entities": [{"start": 48, "end": 65, "word": "foldable scooters", "entity_group": "VAR", "score": 0.9999477352072202}, {"start": 70, "end": 87, "word": "electric scooters", "entity_group": "VAR", "score": 0.9999762762403439}, {"start": 94, "end": 100, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999541879724365}, {"start": 105, "end": 121, "word": "foldable scooter", "entity_group": "VAR", "score": 0.9999503540648037}, {"start": 127, "end": 130, "word": "150", "entity_group": "PARAM", "score": 0.999562450163242}, {"start": 139, "end": 145, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350362784389}, {"start": 150, "end": 166, "word": "electric scooter", "entity_group": "VAR", "score": 0.9999274404087048}, {"start": 172, "end": 175, "word": "200", "entity_group": "PARAM", "score": 0.9997012215954958}, {"start": 254, "end": 270, "word": "foldable scooter", "entity_group": "VAR", "score": 0.9999750274407275}, {"start": 277, "end": 280, "word": "1.5", "entity_group": "PARAM", "score": 0.9996634433723217}, {"start": 312, "end": 313, "word": "4", "entity_group": "PARAM", "score": 0.9996637533059806}, {"start": 353, "end": 369, "word": "electric scooter", "entity_group": "VAR", "score": 0.9999747245562086}, {"start": 376, "end": 377, "word": "3", "entity_group": "PARAM", "score": 0.9996646607174573}, {"start": 409, "end": 410, "word": "6", "entity_group": "PARAM", "score": 0.9996631982377595}, {"start": 467, "end": 471, "word": "4000", "entity_group": "LIMIT", "score": 0.9995639357870595}, {"start": 478, "end": 487, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992342190511416}, {"start": 511, "end": 515, "word": "5000", "entity_group": "LIMIT", "score": 0.9996191054972258}, {"start": 522, "end": 531, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986606788149364}, {"start": 612, "end": 620, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990102089885006}, {"start": 621, "end": 627, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998030705952816}]}
{"doc_id": "2128667133", "document": "A company has to send out their products overseas. They can send the products using a shipping container which can take 1000 products each or by using cargo planes which can take 800 products each. The cost per shipping container sent is $5000 and the cost per cargo plane sent is $6000. In addition, due to shipping delays, the number of shipping containers sent cannot exceed the number of cargo planes sent. If the store has a budget of $20000, how should they spend their money to maximize the number of products that can be sent?", "order_mapping": {"shipping container": 0, "cargo planes": 1, "cargo plane": 1, "shipping containers": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of products", "terms": {"shipping container": "1000", "cargo planes": "800"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "20000", "terms": {"shipping container": "5000", "cargo plane": "6000"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "shipping containers", "direction": "cannot exceed", "y_var": "cargo planes", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of shipping containers sent\n- y: Number of cargo planes sent\n\nObjective:\n- The company aims to maximize the number of products that can be sent. Each shipping container can take 1000 products and each cargo plane can take 800 products. Therefore, the objective function is: Maximize 1000x + 800y\n\nConstraints:\n- The company has a budget of $20000, so the constraint is: 5000x + 6000y <= 20000.\n- The number of shipping containers sent cannot exceed the number of cargo planes sent, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1000x + 800y\nConstraints:\n5000x + 6000y <= 20000\nx <= y", "canonical": {"objective": [-1000.0, -800.0], "constraints": [[5000.0, 6000.0, 20000.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 1, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of shipping containers used: ShippingContainers\n- Number of cargo planes used: CargoPlanes\n\nConstraints:\n- The total cost should not exceed the budget of $20000 (cost per shipping container is $5000, cost per cargo plane is $6000):\n  5000 * ShippingContainers + 6000 * CargoPlanes <= 20000\n- The number of shipping containers sent cannot exceed the number of cargo planes sent:\n  ShippingContainers <= CargoPlanes\n\nObjective:\n- Maximize the number of products sent (1000 products per shipping container, 800 products per cargo plane):\n  1000 * ShippingContainers + 800 * CargoPlanes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShippingContainers = intvar(0, 999999999)  # Number of shipping containers used\nCargoPlanes = intvar(0, 999999999)  # Number of cargo planes used\n\n# Constraints\nm = Model()\n\n# The total cost should not exceed the budget of $20000:\nm += 5000 * ShippingContainers + 6000 * CargoPlanes <= 20000\n# The number of shipping containers sent cannot exceed the number of cargo planes sent:\nm += ShippingContainers <= CargoPlanes\n\n# Objective\n# Maximize the number of products sent (1000 products per shipping container, 800 products per cargo plane):\nm.maximize(1000 * ShippingContainers + 800 * CargoPlanes)\n", "entities": [{"start": 32, "end": 40, "word": "products", "entity_group": "OBJ_NAME", "score": 0.994414173906271}, {"start": 70, "end": 78, "word": "products", "entity_group": "OBJ_NAME", "score": 0.9987139183002898}, {"start": 87, "end": 105, "word": "shipping container", "entity_group": "VAR", "score": 0.9999548970049785}, {"start": 121, "end": 125, "word": "1000", "entity_group": "PARAM", "score": 0.9994598474370767}, {"start": 126, "end": 134, "word": "products", "entity_group": "OBJ_NAME", "score": 0.9871704599174163}, {"start": 152, "end": 164, "word": "cargo planes", "entity_group": "VAR", "score": 0.9997571878412571}, {"start": 180, "end": 183, "word": "800", "entity_group": "PARAM", "score": 0.9990992689342235}, {"start": 184, "end": 192, "word": "products", "entity_group": "OBJ_NAME", "score": 0.9941266770024136}, {"start": 213, "end": 231, "word": "shipping container", "entity_group": "VAR", "score": 0.9999412421839885}, {"start": 242, "end": 246, "word": "5000", "entity_group": "PARAM", "score": 0.9993041045167964}, {"start": 264, "end": 275, "word": "cargo plane", "entity_group": "VAR", "score": 0.9996294833449187}, {"start": 286, "end": 290, "word": "6000", "entity_group": "PARAM", "score": 0.9987742966061037}, {"start": 346, "end": 365, "word": "shipping containers", "entity_group": "VAR", "score": 0.9999506612772}, {"start": 371, "end": 385, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9928997529692767}, {"start": 400, "end": 412, "word": "cargo planes", "entity_group": "VAR", "score": 0.999903765056841}, {"start": 439, "end": 445, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9858828999863117}, {"start": 451, "end": 456, "word": "20000", "entity_group": "LIMIT", "score": 0.9990963339618413}, {"start": 496, "end": 504, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995443127949171}, {"start": 509, "end": 527, "word": "number of products", "entity_group": "OBJ_NAME", "score": 0.9905790599001539}]}
{"doc_id": "-1942954068", "document": "A clothing company makes coats and shirts. Each coat and shirt requires operations done by three teams: measuring, cutting, and sewing. The measuring team is available for at most 50 hours, the cutting team is available for at most 35 hours, and the sewing team is available for at most 40 hours. A coat requires 0.7 hours of measuring, 0.5 hours of cutting, and 0.9 hours of sewing. A shirt requires 0.2 hours of measuring, 0.3 hours of cutting, and 0.5 hours of sewing. The profit per coat is $6 and the profit per shirt is $11. How many of each should be made in order to maximize profit?", "order_mapping": {"coats": 0, "shirts": 1, "coat": 0, "shirt": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"shirt": "11", "coat": "6"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "50", "terms": {"coat": "0.7", "shirt": "0.2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "35", "terms": {"coat": "0.5", "shirt": "0.3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "40", "terms": {"shirt": "0.5", "coat": "0.9"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of coats to be made\n- y: Number of shirts to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per coat is $6 and the profit per shirt is $11. Therefore, the objective function is: Maximize 6x + 11y\n\nConstraints:\n- The measuring team is available for at most 50 hours, and each coat requires 0.7 hours and each shirt requires 0.2 hours. This leads to the constraint: 0.7x + 0.2y <= 50.\n- The cutting team is available for at most 35 hours, and each coat requires 0.5 hours and each shirt requires 0.3 hours. This leads to the constraint: 0.5x + 0.3y <= 35.\n- The sewing team is available for at most 40 hours, and each coat requires 0.9 hours and each shirt requires 0.5 hours. This leads to the constraint: 0.9x + 0.5y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 6x + 11y\nConstraints:\n0.7x + 0.2y <= 50\n0.5x + 0.3y <= 35\n0.9x + 0.5y <= 40", "canonical": {"objective": [-6.0, -11.0], "constraints": [[0.7, 0.2, 50.0], [0.5, 0.3, 35.0], [0.9, 0.5, 40.0]]}, "solution": {"x": 0, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of coats made: Coats\n- Number of shirts made: Shirts\n\nConstraints:\n- Measuring team's time limit (50 hours):\n  0.7 * Coats + 0.2 * Shirts <= 50\n- Cutting team's time limit (35 hours):\n  0.5 * Coats + 0.3 * Shirts <= 35\n- Sewing team's time limit (40 hours):\n  0.9 * Coats + 0.5 * Shirts <= 40\n\nObjective:\n- Maximize profit (6 dollars per coat, 11 dollars per shirt):\n  6 * Coats + 11 * Shirts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoats = intvar(0, 999999999)  # Number of coats made\nShirts = intvar(0, 999999999)  # Number of shirts made\n\n# Constraints\nm = Model()\n\n# Measuring team is available for at most 50 hours:\nm += 0.7 * Coats + 0.2 * Shirts <= 50\n# Cutting team is available for at most 35 hours:\nm += 0.5 * Coats + 0.3 * Shirts <= 35\n# Sewing team is available for at most 40 hours:\nm += 0.9 * Coats + 0.5 * Shirts <= 40\n\n# Objective\n# Maximize profit (6 dollars per coat, 11 dollars per shirt):\nm.maximize(6 * Coats + 11 * Shirts)\n", "entities": [{"start": 25, "end": 30, "word": "coats", "entity_group": "VAR", "score": 0.9996033308836084}, {"start": 35, "end": 41, "word": "shirts", "entity_group": "VAR", "score": 0.9997399671356771}, {"start": 49, "end": 53, "word": "coat", "entity_group": "VAR", "score": 0.9996568250113238}, {"start": 58, "end": 63, "word": "shirt", "entity_group": "VAR", "score": 0.9995454842550061}, {"start": 177, "end": 184, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986143718202787}, {"start": 185, "end": 187, "word": "50", "entity_group": "LIMIT", "score": 0.9997750677810305}, {"start": 230, "end": 237, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9977426675787896}, {"start": 238, "end": 240, "word": "35", "entity_group": "LIMIT", "score": 0.9997764102990803}, {"start": 286, "end": 293, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983492977256687}, {"start": 294, "end": 296, "word": "40", "entity_group": "LIMIT", "score": 0.9997732571343689}, {"start": 307, "end": 311, "word": "coat", "entity_group": "VAR", "score": 0.9997230099072897}, {"start": 321, "end": 324, "word": "0.7", "entity_group": "PARAM", "score": 0.9996148095417225}, {"start": 346, "end": 349, "word": "0.5", "entity_group": "PARAM", "score": 0.9997267683039202}, {"start": 373, "end": 376, "word": "0.9", "entity_group": "PARAM", "score": 0.9996399583785196}, {"start": 397, "end": 402, "word": "shirt", "entity_group": "VAR", "score": 0.9996177830778785}, {"start": 412, "end": 415, "word": "0.2", "entity_group": "PARAM", "score": 0.9996467309982878}, {"start": 437, "end": 440, "word": "0.3", "entity_group": "PARAM", "score": 0.9997267683039189}, {"start": 464, "end": 467, "word": "0.5", "entity_group": "PARAM", "score": 0.9995080692346056}, {"start": 490, "end": 496, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997849190888908}, {"start": 501, "end": 505, "word": "coat", "entity_group": "VAR", "score": 0.999246358091894}, {"start": 511, "end": 512, "word": "6", "entity_group": "PARAM", "score": 0.9993342537171531}, {"start": 521, "end": 527, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998650243232166}, {"start": 532, "end": 537, "word": "shirt", "entity_group": "VAR", "score": 0.9983828651027028}, {"start": 543, "end": 545, "word": "11", "entity_group": "PARAM", "score": 0.9994643027806992}, {"start": 592, "end": 600, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852675868956}, {"start": 601, "end": 607, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818145833}]}
{"doc_id": "2033729916", "document": "Adam decides to invest $12,000 in mutual funds and the stock market. Mutual funds yield a 2.5% return, whereas stock yields an average return of 5.5%. To meet his long-term investment goal, he needs to place at least $5,000 in the stock market. Nonetheless, he is risk averse and wants at least 40% of his money to be safely invested in mutual funds. Help Adam determine an asset allocation that will maximize his average return.", "order_mapping": {"mutual funds": 0, "stock market": 1, "Mutual funds": 0, "stock": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"Mutual funds": "2.5%", "stock": "5.5%"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5,000", "var": "stock market", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "mutual funds", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "invest", "limit": "12,000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in mutual funds\n- y: Dollars invested in the stock market\n\nObjective:\n- Adam wants to maximize his average return. Mutual funds yield a 2.5% return, and stock yields an average return of 5.5%. Therefore, the objective function is: Maximize 0.025x + 0.055y\n\nConstraints:\n- Adam has $12,000 to invest, so the constraint is: x + y <= 12000.\n- To meet his long-term investment goal, he needs to place at least $5,000 in the stock market, leading to the constraint: y >= 5000.\n- Adam wants at least 40% of his money to be safely invested in mutual funds, resulting in the constraint: x >= 0.40(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.025x + 0.055y\nConstraints:\nx + y <= 12000\ny >= 5000\nx >= 0.40(x + y)", "canonical": {"objective": [-0.025, -0.055], "constraints": [[1.0, 1.0, 12000.0], [0.0, -1.0, -5000.0], [-0.6, 0.4, 0.0]]}, "solution": {"x": 4800, "y": 7200}, "pseudo_model": "\nDecision Variables:\n- Amount invested in mutual funds: MutualFunds\n- Amount invested in the stock market: StockMarket\n\nConstraints:\n- Total investment should not exceed $12,000:\n  MutualFunds + StockMarket <= 12000\n- At least $5,000 must be placed in the stock market:\n  StockMarket >= 5000\n- At least 40% of his money to be invested in mutual funds:\n  MutualFunds >= 0.4 * (MutualFunds + StockMarket)\n\nObjective:\n- Maximize average return (2.5% from mutual funds, 5.5% from stock market):\n  0.025 * MutualFunds + 0.055 * StockMarket\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMutualFunds = intvar(0, 12000)  # Amount invested in mutual funds\nStockMarket = intvar(0, 12000)  # Amount invested in the stock market\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $12,000:\nm += MutualFunds + StockMarket <= 12000\n# At least $5,000 must be placed in the stock market:\nm += StockMarket >= 5000\n# At least 40% of his money to be invested in mutual funds:\nm += MutualFunds >= 0.4 * (MutualFunds + StockMarket)\n\n# Objective\n# Maximize average return (2.5% from mutual funds, 5.5% from stock market):\nm.maximize(0.025 * MutualFunds + 0.055 * StockMarket)\n", "entities": [{"start": 16, "end": 22, "word": "invest", "entity_group": "CONST_DIR", "score": 0.9990920232490336}, {"start": 25, "end": 31, "word": "12,000", "entity_group": "LIMIT", "score": 0.9992751633159132}, {"start": 35, "end": 47, "word": "mutual funds", "entity_group": "VAR", "score": 0.9999222709441914}, {"start": 56, "end": 68, "word": "stock market", "entity_group": "VAR", "score": 0.9999324310478865}, {"start": 71, "end": 83, "word": "Mutual funds", "entity_group": "VAR", "score": 0.9999704488054542}, {"start": 92, "end": 97, "word": "2.5 %", "entity_group": "PARAM", "score": 0.8919444122351623}, {"start": 98, "end": 104, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9977454750884147}, {"start": 115, "end": 120, "word": "stock", "entity_group": "VAR", "score": 0.9988635722808307}, {"start": 139, "end": 145, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9892192733354941}, {"start": 149, "end": 154, "word": "5.5 %", "entity_group": "PARAM", "score": 0.9929751829545513}, {"start": 217, "end": 225, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9964716505924459}, {"start": 228, "end": 233, "word": "5,000", "entity_group": "LIMIT", "score": 0.999086798977202}, {"start": 241, "end": 253, "word": "stock market", "entity_group": "VAR", "score": 0.9999047632901735}, {"start": 298, "end": 306, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989198587586505}, {"start": 307, "end": 311, "word": "40 %", "entity_group": "LIMIT", "score": 0.9810469368941003}, {"start": 350, "end": 362, "word": "mutual funds", "entity_group": "VAR", "score": 0.9999476038202705}, {"start": 415, "end": 423, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9946155645932826}, {"start": 436, "end": 442, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9984202017735122}]}
{"doc_id": "-1723877534", "document": "Joy Bakery uses a dough mixer and a commercial bake oven to make bagels and croissants. Each machine can run for at most 2500 hours per year. To bake a batch of bagels takes 2 hours in the dough mixer and 3.5 hours in the oven. A batch of croissants requires 1.5 hours in the mixer and 2 hours in the oven. The profit per batch of bagels is $7.5 and the profit per batch of croissants is $5. How should the bakery operate to maximize total profit?", "order_mapping": {"bagels": 0, "croissants": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bagels": "7.5", "croissants": "5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "2500", "terms": {"bagels": "2", "croissants": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "2500", "terms": {"croissants": "2", "bagels": "3.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of batches of bagels\n- y: Number of batches of croissants\n\nObjective:\n- The bakery aims to maximize its total profit. The profit per batch of bagels is $7.5 and the profit per batch of croissants is $5. Therefore, the objective function is: Maximize 7.5x + 5y\n\nConstraints:\n- The dough mixer and the commercial bake oven can run for at most 2500 hours per year. Baking a batch of bagels takes 2 hours in the dough mixer and 3.5 hours in the oven, while a batch of croissants requires 1.5 hours in the mixer and 2 hours in the oven. These constraints can be formulated as: 2x + 1.5y <= 2500 (for the dough mixer) and 3.5x + 2y <= 2500 (for the oven).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7.5x + 5y\nConstraints:\n2x + 1.5y <= 2500\n3.5x + 2y <= 2500", "canonical": {"objective": [-7.5, -5.0], "constraints": [[2.0, 1.5, 2500.0], [3.5, 2.0, 2500.0]]}, "solution": {"x": 0, "y": 1250}, "pseudo_model": "\nDecision Variables:\n- Number of batches of bagels: Bagels\n- Number of batches of croissants: Croissants\n\nConstraints:\n- Dough mixer usage for both bagels and croissants should not exceed 2500 hours per year:\n  2 * Bagels + 1.5 * Croissants <= 2500\n- Oven usage for both bagels and croissants should not exceed 2500 hours per year:\n  3.5 * Bagels + 2 * Croissants <= 2500\n\nObjective:\n- Maximize profit (7.5 dollars per batch of bagels, 5 dollars per batch of croissants):\n  7.5 * Bagels + 5 * Croissants\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBagels = intvar(0, 999999999)  # Number of batches of bagels\nCroissants = intvar(0, 999999999)  # Number of batches of croissants\n\n# Constraints\nm = Model()\n\n# Dough mixer usage for both bagels and croissants should not exceed 2500 hours per year:\nm += 2 * Bagels + 1.5 * Croissants <= 2500\n# Oven usage for both bagels and croissants should not exceed 2500 hours per year:\nm += 3.5 * Bagels + 2 * Croissants <= 2500\n\n# Objective\n# Maximize profit (7.5 dollars per batch of bagels, 5 dollars per batch of croissants):\nm.maximize(7.5 * Bagels + 5 * Croissants)\n", "entities": [{"start": 65, "end": 71, "word": "bagels", "entity_group": "VAR", "score": 0.99973609712826}, {"start": 76, "end": 86, "word": "croissants", "entity_group": "VAR", "score": 0.9963654731667776}, {"start": 114, "end": 121, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991695034300269}, {"start": 122, "end": 126, "word": "2500", "entity_group": "LIMIT", "score": 0.9997667138084132}, {"start": 163, "end": 169, "word": "bagels", "entity_group": "VAR", "score": 0.9995515587637914}, {"start": 176, "end": 177, "word": "2", "entity_group": "PARAM", "score": 0.9996033726459048}, {"start": 207, "end": 210, "word": "3.5", "entity_group": "PARAM", "score": 0.9995240360881752}, {"start": 242, "end": 252, "word": "croissants", "entity_group": "VAR", "score": 0.99942733779799}, {"start": 262, "end": 265, "word": "1.5", "entity_group": "PARAM", "score": 0.9996351737942627}, {"start": 289, "end": 290, "word": "2", "entity_group": "PARAM", "score": 0.9995592848269731}, {"start": 315, "end": 321, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999186776809783}, {"start": 335, "end": 341, "word": "bagels", "entity_group": "VAR", "score": 0.9991661843869418}, {"start": 347, "end": 350, "word": "7.5", "entity_group": "PARAM", "score": 0.9992433656602422}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999145935232434}, {"start": 379, "end": 389, "word": "croissants", "entity_group": "VAR", "score": 0.9986897345472447}, {"start": 395, "end": 396, "word": "5", "entity_group": "PARAM", "score": 0.9997051979216783}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9966082826685099}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999252502041888}]}
{"doc_id": "-1689259006", "document": "A milk tea store wants to make milk tea that has some red bean and pudding toppings. Each red bean topping contains 1.5 grams of sugar and 2.5 grams of butter; each pudding topping contains 3 grams of sugar and 1.2 grams of butter. For health reasons, the milk tea will have at most 3 red bean toppings. To make the milk tea tasty, at least 7 grams of sugar and 10 grams of butter must be used in the toppings of the milk tea. If it costs $1.5 to make one red bean topping and $2 for one pudding topping, what is the optimal combination of red bean and pudding toppings to minimize the cost?", "order_mapping": {"red bean": 0, "pudding toppings": 1, "red bean topping": 0, "pudding topping": 1, "red bean toppings": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"red bean topping": "1.5", "pudding topping": "2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "7", "terms": {"red bean topping": "1.5", "pudding topping": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "10", "terms": {"red bean topping": "2.5", "pudding topping": "1.2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "3", "var": "red bean toppings", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of red bean toppings\n- y: Number of pudding toppings\n\nObjective:\n- The milk tea store aims to minimize the cost of making the milk tea. Given that it costs $1.5 to make one red bean topping and $2 for one pudding topping, the objective function is: Minimize 1.5x + 2y\n\nConstraints:\n- At most 3 red bean toppings can be used, leading to the constraint: x <= 3.\n- At least 7 grams of sugar and 10 grams of butter must be used in the toppings of the milk tea. This translates to the following constraints: 1.5x + 3y >= 7 and 2.5x + 1.2y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1.5x + 2y\nConstraints:\nx <= 3\n1.5x + 3y >= 7\n2.5x + 1.2y >= 10", "canonical": {"objective": [1.5, 2.0], "constraints": [[1.0, 0.0, 3.0], [-1.5, -3.0, -7.0], [-2.5, -1.2, -10.0]]}, "solution": {"x": 3, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of red bean toppings: RedBeanToppings (at most 3)\n- Number of pudding toppings: PuddingToppings\n\nConstraints:\n- Sugar requirement: At least 7 grams of sugar needed:\n  1.5 * RedBeanToppings + 3 * PuddingToppings >= 7\n- Butter requirement: At least 10 grams of butter needed:\n  2.5 * RedBeanToppings + 1.2 * PuddingToppings >= 10\n\nObjective:\n- Minimize the cost of toppings ($1.5 per red bean topping, $2 per pudding topping):\n  1.5 * RedBeanToppings + 2 * PuddingToppings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRedBeanToppings = intvar(0, 3)  # Number of red bean toppings, at most 3\nPuddingToppings = intvar(0, 999999999)  # Number of pudding toppings, no upper limit specified\n\n# Constraints\nm = Model()\n\n# Sugar and butter requirements for the milk tea\n# At least 7 grams of sugar:\nm += 1.5 * RedBeanToppings + 3 * PuddingToppings >= 7\n# At least 10 grams of butter:\nm += 2.5 * RedBeanToppings + 1.2 * PuddingToppings >= 10\n\n# Objective\n# Minimize cost ($1.5 per red bean topping, $2 per pudding topping):\nm.minimize(1.5 * RedBeanToppings + 2 * PuddingToppings)\n", "entities": [{"start": 54, "end": 62, "word": "red bean", "entity_group": "VAR", "score": 0.9997939809270534}, {"start": 67, "end": 83, "word": "pudding toppings", "entity_group": "VAR", "score": 0.9999190670629233}, {"start": 91, "end": 107, "word": "red bean topping", "entity_group": "VAR", "score": 0.9990551662061328}, {"start": 117, "end": 120, "word": "1.5", "entity_group": "PARAM", "score": 0.9996643601748866}, {"start": 140, "end": 143, "word": "2.5", "entity_group": "PARAM", "score": 0.9996996609074976}, {"start": 167, "end": 182, "word": "pudding topping", "entity_group": "VAR", "score": 0.9999198825506738}, {"start": 192, "end": 193, "word": "3", "entity_group": "PARAM", "score": 0.9997284061838428}, {"start": 213, "end": 216, "word": "1.2", "entity_group": "PARAM", "score": 0.9996520082829283}, {"start": 279, "end": 286, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985877555514449}, {"start": 287, "end": 288, "word": "3", "entity_group": "LIMIT", "score": 0.9994620052481084}, {"start": 289, "end": 306, "word": "red bean toppings", "entity_group": "VAR", "score": 0.9979382213359144}, {"start": 338, "end": 346, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999221803144678}, {"start": 347, "end": 348, "word": "7", "entity_group": "LIMIT", "score": 0.9997691191991898}, {"start": 368, "end": 370, "word": "10", "entity_group": "LIMIT", "score": 0.9997424503670633}, {"start": 440, "end": 445, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9980288051122389}, {"start": 448, "end": 451, "word": "1.5", "entity_group": "PARAM", "score": 0.9997264598602491}, {"start": 464, "end": 480, "word": "red bean topping", "entity_group": "VAR", "score": 0.9970213647597025}, {"start": 487, "end": 488, "word": "2", "entity_group": "PARAM", "score": 0.9997091681822203}, {"start": 497, "end": 512, "word": "pudding topping", "entity_group": "VAR", "score": 0.9999287236599352}, {"start": 550, "end": 558, "word": "red bean", "entity_group": "VAR", "score": 0.9998344431725186}, {"start": 563, "end": 579, "word": "pudding toppings", "entity_group": "VAR", "score": 0.9999372293706948}, {"start": 583, "end": 591, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9982805393674992}, {"start": 596, "end": 600, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9975462867119697}]}
{"doc_id": "1133814426", "document": "A store sells ramen in large and small packages. Each large package costs the store $3 and each small package costs the store $1. The store has a budget of $2000. In addition, each large package takes 3 units of shelf space while each small package takes 1 unit of shelf space. The store has available 400 units of shelf space. Also the store wants to make sure that at least 70% of all stock is small packages. If the profit per large package is $3 and the profit per small package is $0.50, how many of each should the store keep in stock to maximize profit?", "order_mapping": {"large": 0, "small packages": 1, "large package": 0, "small package": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large package": "3", "small package": "0.50"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "2000", "terms": {"large package": "3", "small package": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"large package": "3", "small package": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "70%", "var": "small packages", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large packages of ramen\n- y: Number of small packages of ramen\n\nObjective:\n- The store aims to maximize its profit. The profit per large package is $3 and the profit per small package is $0.50. Therefore, the objective function is: Maximize 3x + 0.50y\n\nConstraints:\n- The store has a budget of $2000, so the cost constraint is: 3x + y <= 2000.\n- The store has 400 units of shelf space available, leading to the constraint: 3x + y <= 400.\n- The store wants to ensure that at least 70% of all stock is small packages, resulting in the constraint: y >= 0.70(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 0.50y\nConstraints:\n3x + y <= 2000\n3x + y <= 400\ny >= 0.70(x + y)", "canonical": {"objective": [-3.0, -0.5], "constraints": [[3.0, 1.0, 2000.0], [3.0, 1.0, 400.0], [0.7, -0.30000000000000004, 0.0]]}, "solution": {"x": 75, "y": 175}, "pseudo_model": "\nDecision Variables:\n- Number of large packages in stock: LargePackages\n- Number of small packages in stock: SmallPackages\n\nConstraints:\n- The store's budget cannot exceed $2000:\n  3 * LargePackages + 1 * SmallPackages <= 2000\n- The store's available shelf space cannot exceed 400 units:\n  3 * LargePackages + 1 * SmallPackages <= 400\n- At least 70% of all stock must be small packages:\n  SmallPackages >= 0.7 * (LargePackages + SmallPackages)\n\nObjective:\n- Maximize profit ($3 profit per large package, $0.50 profit per small package):\n  3 * LargePackages + 0.50 * SmallPackages\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargePackages = intvar(0, 999999999)  # Number of large packages\nSmallPackages = intvar(0, 999999999)  # Number of small packages\n\n# Constraints\nm = Model()\n\n# The store has a budget of $2000:\nm += 3 * LargePackages + 1 * SmallPackages <= 2000\n# The store has available 400 units of shelf space:\nm += 3 * LargePackages + 1 * SmallPackages <= 400\n# At least 70% of all stock is small packages:\nm += SmallPackages >= 0.7 * (LargePackages + SmallPackages)\n\n# Objective\n# Maximize profit ($3 per large package, $0.50 per small package):\nm.maximize(3 * LargePackages + 0.50 * SmallPackages)\n", "entities": [{"start": 23, "end": 28, "word": "large", "entity_group": "VAR", "score": 0.9989232957795741}, {"start": 33, "end": 47, "word": "small packages", "entity_group": "VAR", "score": 0.9999626927960482}, {"start": 55, "end": 68, "word": "large package", "entity_group": "VAR", "score": 0.9999866369883105}, {"start": 87, "end": 88, "word": "3", "entity_group": "PARAM", "score": 0.9994244467205298}, {"start": 98, "end": 111, "word": "small package", "entity_group": "VAR", "score": 0.9999847768085418}, {"start": 130, "end": 131, "word": "1", "entity_group": "PARAM", "score": 0.9996909942207965}, {"start": 150, "end": 156, "word": "budget", "entity_group": "CONST_DIR", "score": 0.993047643244692}, {"start": 162, "end": 166, "word": "2000", "entity_group": "LIMIT", "score": 0.9980483960721181}, {"start": 188, "end": 201, "word": "large package", "entity_group": "VAR", "score": 0.999972683856401}, {"start": 208, "end": 209, "word": "3", "entity_group": "PARAM", "score": 0.999684530534409}, {"start": 242, "end": 255, "word": "small package", "entity_group": "VAR", "score": 0.9999761565368487}, {"start": 262, "end": 263, "word": "1", "entity_group": "PARAM", "score": 0.9987882176109832}, {"start": 300, "end": 309, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990771569145527}, {"start": 310, "end": 313, "word": "400", "entity_group": "LIMIT", "score": 0.9993142813641812}, {"start": 376, "end": 384, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9971078389651132}, {"start": 385, "end": 389, "word": "70 %", "entity_group": "LIMIT", "score": 0.9644528359982744}, {"start": 406, "end": 420, "word": "small packages", "entity_group": "VAR", "score": 0.9999745386128436}, {"start": 430, "end": 436, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998965576322766}, {"start": 441, "end": 454, "word": "large package", "entity_group": "VAR", "score": 0.9999347891020591}, {"start": 460, "end": 461, "word": "3", "entity_group": "PARAM", "score": 0.9995624457446749}, {"start": 470, "end": 476, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998623479543806}, {"start": 481, "end": 494, "word": "small package", "entity_group": "VAR", "score": 0.9999314375833833}, {"start": 500, "end": 504, "word": "0.50", "entity_group": "PARAM", "score": 0.9996795476667346}, {"start": 558, "end": 566, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.998856759569568}, {"start": 567, "end": 573, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994748300407567}]}
{"doc_id": "-1352169480", "document": "William is a potato farmer and he has to send his product to the city. He can transport his potato packages by regular truck which can take 70 packages per trip or by refrigerated truck which can take 100 packages per trip. The cost per regular truck trip is $50 and the cost per refrigerated truck trip is $70. He wants to spend at most $5000 and the number of refrigerated truck trips must not exceed the number of regular truck trips. Formulate an LP to maximize the number of potato packages that can be transported.", "order_mapping": {"regular truck": 0, "refrigerated truck": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of potato packages", "terms": {"regular truck": "70", "refrigerated truck": "100"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "5000", "terms": {"regular truck": "50", "refrigerated truck": "70"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "refrigerated truck", "direction": "must not exceed", "y_var": "regular truck", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of trips made by regular truck\n- y: Number of trips made by refrigerated truck\n\nObjective:\n- William wants to maximize the number of potato packages that can be transported. The regular truck can take 70 packages per trip and the refrigerated truck can take 100 packages per trip. Therefore, the objective function is: Maximize 70x + 100y\n\nConstraints:\n- William wants to spend at most $5000, so the cost constraint is: 50x + 70y <= 5000.\n- The number of refrigerated truck trips must not exceed the number of regular truck trips, leading to the constraint: y <= x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 100y\nConstraints:\n50x + 70y <= 5000\ny <= x", "canonical": {"objective": [-70.0, -100.0], "constraints": [[50.0, 70.0, 5000.0], [-1.0, 1.0, 0.0]]}, "solution": {"x": 44, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of regular truck trips: RegularTruckTrips\n- Number of refrigerated truck trips: RefrigeratedTruckTrips\n\nConstraints:\n- Total cost of trips should not exceed $5000 (cost per regular truck trip is $50, cost per refrigerated truck trip is $70):\n  50 * RegularTruckTrips + 70 * RefrigeratedTruckTrips <= 5000\n- Number of refrigerated truck trips must not exceed the number of regular truck trips:\n  RefrigeratedTruckTrips <= RegularTruckTrips\n\nObjective:\n- Maximize the number of potato packages transported (70 packages per regular truck trip, 100 packages per refrigerated truck trip):\n  70 * RegularTruckTrips + 100 * RefrigeratedTruckTrips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularTruckTrips = intvar(0, 999999999)  # Number of regular truck trips\nRefrigeratedTruckTrips = intvar(0, 999999999)  # Number of refrigerated truck trips\n\n# Constraints\nm = Model()\n\n# Total cost should not exceed $5000:\nm += 50 * RegularTruckTrips + 70 * RefrigeratedTruckTrips <= 5000\n# Number of refrigerated truck trips must not exceed the number of regular truck trips:\nm += RefrigeratedTruckTrips <= RegularTruckTrips\n\n# Objective\n# Maximize the number of potato packages transported (70 packages per regular truck trip, 100 packages per refrigerated truck trip):\nm.maximize(70 * RegularTruckTrips + 100 * RefrigeratedTruckTrips)\n", "entities": [{"start": 93, "end": 108, "word": "potato packages", "entity_group": "OBJ_NAME", "score": 0.9799296740904684}, {"start": 112, "end": 125, "word": "regular truck", "entity_group": "VAR", "score": 0.9999420932168821}, {"start": 141, "end": 143, "word": "70", "entity_group": "PARAM", "score": 0.9997239917728473}, {"start": 144, "end": 152, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.995611613469547}, {"start": 168, "end": 186, "word": "refrigerated truck", "entity_group": "VAR", "score": 0.9998808335085128}, {"start": 202, "end": 205, "word": "100", "entity_group": "PARAM", "score": 0.9994514378575416}, {"start": 206, "end": 214, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.9921307711119228}, {"start": 239, "end": 252, "word": "regular truck", "entity_group": "VAR", "score": 0.9999854044890292}, {"start": 263, "end": 265, "word": "50", "entity_group": "PARAM", "score": 0.9996678764124846}, {"start": 283, "end": 301, "word": "refrigerated truck", "entity_group": "VAR", "score": 0.9999765137349291}, {"start": 312, "end": 314, "word": "70", "entity_group": "PARAM", "score": 0.9996300242654397}, {"start": 335, "end": 342, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9966218114374931}, {"start": 345, "end": 349, "word": "5000", "entity_group": "LIMIT", "score": 0.9992531222117307}, {"start": 368, "end": 386, "word": "refrigerated truck", "entity_group": "VAR", "score": 0.999990878915903}, {"start": 393, "end": 408, "word": "must not exceed", "entity_group": "CONST_DIR", "score": 0.9958122356863296}, {"start": 423, "end": 436, "word": "regular truck", "entity_group": "VAR", "score": 0.9999926565008703}, {"start": 464, "end": 472, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993549992870505}, {"start": 477, "end": 502, "word": "number of potato packages", "entity_group": "OBJ_NAME", "score": 0.9745374844936286}]}
{"doc_id": "-1008461120", "document": "A factory packages glass jars and plates. Glass jars take 15 minutes of worker time and 3 units of cardboard. Plates take 12 minutes of worker time and 4 units of cardboard. The factory has 620 minutes of worker time available and 120 units of cardboard available. If the profit per glass jar packaged is $2 and the profit per plate packaged is $2.50, how many of each should they package to maximize profit?", "order_mapping": {"glass jars": 0, "plates": 1, "Glass jars": 0, "Plates": 1, "glass jar": 0, "plate": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"glass jar": "2", "plate": "2.50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "620", "terms": {"Glass jars": "15", "Plates": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "120", "terms": {"Glass jars": "3", "Plates": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of glass jars packaged\n- y: Number of plates packaged\n\nObjective:\n- The factory aims to maximize its profit. The profit per glass jar packaged is $2 and the profit per plate packaged is $2.50. Therefore, the objective function is: Maximize 2x + 2.50y\n\nConstraints:\n- The factory has 620 minutes of worker time available. Packaging glass jars takes 15 minutes each and plates take 12 minutes each, leading to the constraint: 15x + 12y <= 620.\n- The factory has 120 units of cardboard available. Packaging glass jars requires 3 units each and plates require 4 units each, resulting in the constraint: 3x + 4y <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 2.50y\nConstraints:\n15x + 12y <= 620\n3x + 4y <= 120", "canonical": {"objective": [-2.0, -2.5], "constraints": [[15.0, 12.0, 620.0], [3.0, 4.0, 120.0]]}, "solution": {"x": 40, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of glass jars packaged: GlassJars\n- Number of plates packaged: Plates\n\nConstraints:\n- Worker time constraint (620 minutes available):\n  15 * GlassJars + 12 * Plates <= 620\n- Cardboard constraint (120 units available):\n  3 * GlassJars + 4 * Plates <= 120\n\nObjective:\n- Maximize profit ($2 per glass jar, $2.50 per plate):\n  2 * GlassJars + 2.5 * Plates\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGlassJars = intvar(0, 999999999)  # Number of glass jars packaged\nPlates = intvar(0, 999999999)  # Number of plates packaged\n\n# Constraints\nm = Model()\n\n# Worker time constraint (620 minutes available):\nm += 15 * GlassJars + 12 * Plates <= 620\n# Cardboard constraint (120 units available):\nm += 3 * GlassJars + 4 * Plates <= 120\n\n# Objective\n# Maximize profit ($2 per glass jar, $2.50 per plate):\nm.maximize(2 * GlassJars + 2.5 * Plates)\n", "entities": [{"start": 19, "end": 29, "word": "glass jars", "entity_group": "VAR", "score": 0.9999864989546194}, {"start": 34, "end": 40, "word": "plates", "entity_group": "VAR", "score": 0.9997498572981968}, {"start": 43, "end": 53, "word": "Glass jars", "entity_group": "VAR", "score": 0.9999782257560165}, {"start": 59, "end": 61, "word": "15", "entity_group": "PARAM", "score": 0.9997191768793083}, {"start": 89, "end": 90, "word": "3", "entity_group": "PARAM", "score": 0.9994430800442548}, {"start": 112, "end": 118, "word": "Plates", "entity_group": "VAR", "score": 0.9997174342298027}, {"start": 124, "end": 126, "word": "12", "entity_group": "PARAM", "score": 0.9997229618072934}, {"start": 154, "end": 155, "word": "4", "entity_group": "PARAM", "score": 0.999514355476172}, {"start": 193, "end": 196, "word": "620", "entity_group": "LIMIT", "score": 0.999725231983155}, {"start": 220, "end": 229, "word": "available", "entity_group": "CONST_DIR", "score": 0.999634854766926}, {"start": 234, "end": 237, "word": "120", "entity_group": "LIMIT", "score": 0.9996657137488975}, {"start": 257, "end": 266, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983115614925354}, {"start": 276, "end": 282, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998328971517225}, {"start": 287, "end": 296, "word": "glass jar", "entity_group": "VAR", "score": 0.9998516321637616}, {"start": 311, "end": 312, "word": "2", "entity_group": "PARAM", "score": 0.9991074741073187}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999338455488679}, {"start": 332, "end": 337, "word": "plate", "entity_group": "VAR", "score": 0.9994143945102182}, {"start": 352, "end": 356, "word": "2.50", "entity_group": "PARAM", "score": 0.9996530338567171}, {"start": 399, "end": 407, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843680345001}, {"start": 408, "end": 414, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368872053741}]}
{"doc_id": "812718675", "document": "A farm wants to manufacture a special plant growth compound using two fertilizers: P100 and Y200. Each kg of fertilizer P100 contains 11 units of nitrogen, 6 units of phosphoric acid, 5 units of vitamin A and 4 units of vitamin B. Each kg of fertilizer Y200 contains 9 units of nitrogen, 10 units of phosphoric acid, 8 units of vitamin A and 6 units of vitamin B. To be effective, the plant growth compound requires a minimum 200 units of nitrogen, a minimum of 150 units of phosphoric acid, and no more than 300 units of vitamin A. How many kg of each fertilizer should be used to minimize the amount of vitamin B in the compound? What is the minimum amount of vitamin B?", "order_mapping": {"P100": 0, "Y200": 1, "fertilizer P100": 0, "fertilizer Y200": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of vitamin B", "terms": {"fertilizer Y200": "6", "fertilizer P100": "4"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "200", "terms": {"fertilizer P100": "11", "fertilizer Y200": "9"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "150", "terms": {"fertilizer P100": "6", "fertilizer Y200": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "no more than", "limit": "300", "terms": {"fertilizer P100": "5", "fertilizer Y200": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of fertilizer P100\n- y: kg of fertilizer Y200\n\nObjective:\n- The farm wants to minimize the amount of vitamin B in the compound. Each kg of fertilizer P100 contains 4 units of vitamin B, and each kg of fertilizer Y200 contains 6 units of vitamin B. Therefore, the objective function is: Minimize 4x + 6y\n\nConstraints:\n- The plant growth compound requires a minimum of 200 units of nitrogen, which translates to the constraint: 11x + 9y >= 200.\n- The compound also requires a minimum of 150 units of phosphoric acid, leading to the constraint: 6x + 10y >= 150.\n- The compound should contain no more than 300 units of vitamin A, resulting in the constraint: 5x + 8y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4x + 6y\nConstraints:\n11x + 9y >= 200\n6x + 10y >= 150\n5x + 8y <= 300", "canonical": {"objective": [4.0, 6.0], "constraints": [[-11.0, -9.0, -200.0], [-6.0, -10.0, -150.0], [5.0, 8.0, 300.0]]}, "solution": {"x": 12, "y": 8}, "pseudo_model": "\nDecision Variables:\n- kg of fertilizer P100 used: P100\n- kg of fertilizer Y200 used: Y200\n\nConstraints:\n- Minimum 200 units of nitrogen required:\n  11 * P100 + 9 * Y200 >= 200\n- Minimum 150 units of phosphoric acid required:\n  6 * P100 + 10 * Y200 >= 150\n- No more than 300 units of vitamin A allowed:\n  5 * P100 + 8 * Y200 <= 300\n\nObjective:\n- Minimize the amount of vitamin B in the compound (4 units per kg of P100, 6 units per kg of Y200):\n  4 * P100 + 6 * Y200\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nP100 = intvar(0, 999999999)  # kg of fertilizer P100 used\nY200 = intvar(0, 999999999)  # kg of fertilizer Y200 used\n\n# Constraints\nm = Model()\n\n# Minimum 200 units of nitrogen required:\nm += 11 * P100 + 9 * Y200 >= 200\n# Minimum 150 units of phosphoric acid required:\nm += 6 * P100 + 10 * Y200 >= 150\n# No more than 300 units of vitamin A allowed:\nm += 5 * P100 + 8 * Y200 <= 300\n\n# Objective\n# Minimize the amount of vitamin B in the compound (4 units per kg of P100, 6 units per kg of Y200):\nm.minimize(4 * P100 + 6 * Y200)\n", "entities": [{"start": 84, "end": 88, "word": "P100", "entity_group": "VAR", "score": 0.9966060980168177}, {"start": 93, "end": 97, "word": "Y200", "entity_group": "VAR", "score": 0.9997381632635192}, {"start": 111, "end": 126, "word": "fertilizer P100", "entity_group": "VAR", "score": 0.9998469224044604}, {"start": 136, "end": 138, "word": "11", "entity_group": "PARAM", "score": 0.9995649630824253}, {"start": 159, "end": 160, "word": "6", "entity_group": "PARAM", "score": 0.9997458901743834}, {"start": 188, "end": 189, "word": "5", "entity_group": "PARAM", "score": 0.9997048325642844}, {"start": 213, "end": 214, "word": "4", "entity_group": "PARAM", "score": 0.9996362911800794}, {"start": 224, "end": 234, "word": "vitamin B.", "entity_group": "OBJ_NAME", "score": 0.9961832202966039}, {"start": 246, "end": 261, "word": "fertilizer Y200", "entity_group": "VAR", "score": 0.9999092161917433}, {"start": 271, "end": 272, "word": "9", "entity_group": "PARAM", "score": 0.9995649575500768}, {"start": 293, "end": 295, "word": "10", "entity_group": "PARAM", "score": 0.9997454955077371}, {"start": 323, "end": 324, "word": "8", "entity_group": "PARAM", "score": 0.999704832564284}, {"start": 348, "end": 349, "word": "6", "entity_group": "PARAM", "score": 0.9995195291183795}, {"start": 359, "end": 369, "word": "vitamin B.", "entity_group": "OBJ_NAME", "score": 0.9943986676766661}, {"start": 425, "end": 432, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9948888612366796}, {"start": 433, "end": 436, "word": "200", "entity_group": "LIMIT", "score": 0.9989806534054069}, {"start": 459, "end": 466, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9977300315156814}, {"start": 470, "end": 473, "word": "150", "entity_group": "LIMIT", "score": 0.9997202620482405}, {"start": 505, "end": 517, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9946583677890134}, {"start": 518, "end": 521, "word": "300", "entity_group": "LIMIT", "score": 0.9997203512441143}, {"start": 591, "end": 599, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9923231762724772}, {"start": 604, "end": 623, "word": "amount of vitamin B", "entity_group": "OBJ_NAME", "score": 0.9440921232544714}]}
{"doc_id": "-261742752", "document": "Nova Furniture sells two types of chairs \u2013 a desk chair and a garden chair. Each desk chair costs $200 to make and each garden chair costs $300 to make. The company estimates that the total monthly demand of these two types of chairs combined will be at most 250 units. The monthly manufacturing budget for chairs is $35000. Determine the number of units of each type of chair the company should make to get maximum profit if the profit on each desk chair and garden chair are $100 and $150, respectively.", "order_mapping": {"desk chair": 0, "garden chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"desk chair": "100", "garden chair": "150"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "35000", "terms": {"desk chair": "200", "garden chair": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "250", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of desk chairs to make\n- y: Number of garden chairs to make\n\nObjective:\n- The company aims to maximize its profit. The profit on each desk chair is $100 and on each garden chair is $150. Therefore, the objective function is: Maximize 100x + 150y\n\nConstraints:\n- The monthly manufacturing budget for chairs is $35000, leading to the constraint: 200x + 300y <= 35000.\n- The total monthly demand of these two types of chairs combined will be at most 250 units, resulting in the constraint: x + y <= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 150y\nConstraints:\n200x + 300y <= 35000\nx + y <= 250", "canonical": {"objective": [-100.0, -150.0], "constraints": [[200.0, 300.0, 35000.0], [1.0, 1.0, 250.0]]}, "solution": {"x": 1, "y": 116}, "pseudo_model": "\nDecision Variables:\n- Number of desk chairs made per month: DeskChair\n- Number of garden chairs made per month: GardenChair\n\nConstraints:\n- Total number of chairs made should not exceed 250 units per month:\n  DeskChair + GardenChair <= 250\n- The monthly manufacturing budget for chairs is $35000 (costs are $200 for a desk chair and $300 for a garden chair):\n  200 * DeskChair + 300 * GardenChair <= 35000\n\nObjective:\n- Maximize profit ($100 profit per desk chair, $150 profit per garden chair):\n  100 * DeskChair + 150 * GardenChair\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDeskChair = intvar(0, 999999999)  # Number of desk chairs made per month\nGardenChair = intvar(0, 999999999)  # Number of garden chairs made per month\n\n# Constraints\nm = Model()\n\n# Total number of chairs made should not exceed 250 units per month:\nm += DeskChair + GardenChair <= 250\n# The monthly manufacturing budget for chairs is $35000:\nm += 200 * DeskChair + 300 * GardenChair <= 35000\n\n# Objective\n# Maximize profit ($100 profit per desk chair, $150 profit per garden chair):\nm.maximize(100 * DeskChair + 150 * GardenChair)\n", "entities": [{"start": 45, "end": 55, "word": "desk chair", "entity_group": "VAR", "score": 0.9999528632648992}, {"start": 62, "end": 74, "word": "garden chair", "entity_group": "VAR", "score": 0.9999767378894423}, {"start": 82, "end": 92, "word": "desk chair", "entity_group": "VAR", "score": 0.9999834490283391}, {"start": 101, "end": 104, "word": "200", "entity_group": "PARAM", "score": 0.9996563436774644}, {"start": 122, "end": 134, "word": "garden chair", "entity_group": "VAR", "score": 0.9999793596332152}, {"start": 143, "end": 146, "word": "300", "entity_group": "PARAM", "score": 0.9997121277381494}, {"start": 255, "end": 262, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984748173478531}, {"start": 263, "end": 266, "word": "250", "entity_group": "LIMIT", "score": 0.9997606364511707}, {"start": 301, "end": 307, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9958645075995177}, {"start": 324, "end": 329, "word": "35000", "entity_group": "LIMIT", "score": 0.9978740452287801}, {"start": 415, "end": 422, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9894194085080154}, {"start": 423, "end": 429, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999313625971155}, {"start": 437, "end": 443, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998267655761169}, {"start": 452, "end": 462, "word": "desk chair", "entity_group": "VAR", "score": 0.9999779518485353}, {"start": 467, "end": 479, "word": "garden chair", "entity_group": "VAR", "score": 0.9999849501522174}, {"start": 486, "end": 489, "word": "100", "entity_group": "PARAM", "score": 0.9996595444231594}, {"start": 496, "end": 499, "word": "150", "entity_group": "PARAM", "score": 0.9997584612183308}]}
{"doc_id": "-267933721", "document": "A violin factory makes modern violins and baroque violin. A modern violin takes 5 hours of woodworking time and 3.5 hours of assembling time. A baroque violin takes 4 hours of woodworking time and 5 hours of assembling time. The factory has 150 hours of woodworking time and 200 hours of assembling time available per day among all the workers. The profit per modern violin is $150 and the profit per baroque violin is $200. How many of each instrument should the factory make to maximize profits?", "order_mapping": {"modern violins": 0, "baroque violin": 1, "modern violin": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"baroque violin": "200", "modern violin": "150"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"modern violin": "5", "baroque violin": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"modern violin": "3.5", "baroque violin": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of modern violins\n- y: Number of baroque violins\n\nObjective:\n- The factory aims to maximize its profits. The profit per modern violin is $150 and the profit per baroque violin is $200. Therefore, the objective function is: Maximize 150x + 200y\n\nConstraints:\n- The woodworking time available per day is 150 hours, so the constraint is: 5x + 4y <= 150.\n- The assembling time available per day is 200 hours, leading to the constraint: 3.5x + 5y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 200y\nConstraints:\n5x + 4y <= 150\n3.5x + 5y <= 200", "canonical": {"objective": [-150.0, -200.0], "constraints": [[5.0, 4.0, 150.0], [3.5, 5.0, 200.0]]}, "solution": {"x": 0, "y": 37}, "pseudo_model": "\nDecision Variables:\n- Number of modern violins made per day: ModernViolins\n- Number of baroque violins made per day: BaroqueViolins\n\nConstraints:\n- Woodworking time for all violins should not exceed 150 hours per day:\n  5 * ModernViolins + 4 * BaroqueViolins <= 150\n- Assembling time for all violins should not exceed 200 hours per day:\n  3.5 * ModernViolins + 5 * BaroqueViolins <= 200\n\nObjective:\n- Maximize profits ($150 profit per modern violin, $200 profit per baroque violin):\n  150 * ModernViolins + 200 * BaroqueViolins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nModernViolins = intvar(0, 999999999)  # Number of modern violins made per day\nBaroqueViolins = intvar(0, 999999999)  # Number of baroque violins made per day\n\n# Constraints\nm = Model()\n\n# Woodworking time constraints (150 hours available):\nm += 5 * ModernViolins + 4 * BaroqueViolins <= 150\n# Assembling time constraints (200 hours available):\nm += 3.5 * ModernViolins + 5 * BaroqueViolins <= 200\n\n# Objective\n# Maximize profits ($150 per modern violin, $200 per baroque violin):\nm.maximize(150 * ModernViolins + 200 * BaroqueViolins)\n", "entities": [{"start": 23, "end": 37, "word": "modern violins", "entity_group": "VAR", "score": 0.999957455777344}, {"start": 42, "end": 56, "word": "baroque violin", "entity_group": "VAR", "score": 0.99998581877081}, {"start": 61, "end": 74, "word": "modern violin", "entity_group": "VAR", "score": 0.9999838996572072}, {"start": 81, "end": 82, "word": "5", "entity_group": "PARAM", "score": 0.9997110894237478}, {"start": 113, "end": 116, "word": "3.5", "entity_group": "PARAM", "score": 0.9994533579379606}, {"start": 146, "end": 160, "word": "baroque violin", "entity_group": "VAR", "score": 0.999972915135643}, {"start": 167, "end": 168, "word": "4", "entity_group": "PARAM", "score": 0.9997209776786032}, {"start": 199, "end": 200, "word": "5", "entity_group": "PARAM", "score": 0.99945321236985}, {"start": 244, "end": 247, "word": "150", "entity_group": "LIMIT", "score": 0.9996863997831392}, {"start": 278, "end": 281, "word": "200", "entity_group": "LIMIT", "score": 0.9993772256439438}, {"start": 307, "end": 316, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993135153327694}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999477943275018}, {"start": 364, "end": 377, "word": "modern violin", "entity_group": "VAR", "score": 0.99994441450132}, {"start": 383, "end": 386, "word": "150", "entity_group": "PARAM", "score": 0.9995624501632415}, {"start": 395, "end": 401, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350362784374}, {"start": 406, "end": 420, "word": "baroque violin", "entity_group": "VAR", "score": 0.9998880512430761}, {"start": 426, "end": 429, "word": "200", "entity_group": "PARAM", "score": 0.9996676227296034}, {"start": 487, "end": 495, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998122867790796}, {"start": 496, "end": 503, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996202407577269}]}
{"doc_id": "-1162965426", "document": "IND Foods factory produces basmati rice and bananas. To make one kilogram of basmati rice requires 1.5 hours of human labor, 2 hours of machine work, and 3 hours of resting under the sun. To make one kilogram of bananas requires 2 hours of human labor, 4 hours of machine work, and 1.5 hours of resting under the sun. The factory only has 90 hours of human labor, 150 hours of machine labor, and 70 hours of time under the sun available. The net profit per kilogram of basmati rice is $15 and the net profit per kilogram of bananas is $28. How many kilograms of each should the factory make in order to maximize profit?", "order_mapping": {"basmati rice": 0, "bananas": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"basmati rice": "15", "bananas": "28"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "90", "terms": {"basmati rice": "1.5", "bananas": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "150", "terms": {"basmati rice": "2", "bananas": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"bananas": "1.5", "basmati rice": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Kilograms of basmati rice produced\n- y: Kilograms of bananas produced\n\nObjective:\n- The factory aims to maximize its profit. The net profit per kilogram of basmati rice is $15 and the net profit per kilogram of bananas is $28. Therefore, the objective function is: Maximize 15x + 28y\n\nConstraints:\n- The factory has limited hours of human labor, machine work, and time under the sun available. The constraints are:\n    - 1.5x + 2y <= 90 (human labor)\n    - 2x + 4y <= 150 (machine work)\n    - 3x + 1.5y <= 70 (time under the sun)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 15x + 28y\nConstraints:\n1.5x + 2y <= 90\n2x + 4y <= 150\n3x + 1.5y <= 70", "canonical": {"objective": [-15.0, -28.0], "constraints": [[1.5, 2.0, 90.0], [2.0, 4.0, 150.0], [3.0, 1.5, 70.0]]}, "solution": {"x": 5, "y": 35}, "pseudo_model": "\nDecision Variables:\n- Kilograms of basmati rice produced: BasmatiRice\n- Kilograms of bananas produced: Bananas\n\nConstraints:\n- Human labor constraint (90 hours available):\n  1.5 * BasmatiRice + 2 * Bananas <= 90\n- Machine work constraint (150 hours available):\n  2 * BasmatiRice + 4 * Bananas <= 150\n- Time under the sun constraint (70 hours available):\n  3 * BasmatiRice + 1.5 * Bananas <= 70\n\nObjective:\n- Maximize profit (15 dollars per kilogram of basmati rice, 28 dollars per kilogram of bananas):\n  15 * BasmatiRice + 28 * Bananas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBasmatiRice = intvar(0, 999999999)  # Kilograms of basmati rice produced\nBananas = intvar(0, 999999999)  # Kilograms of bananas produced\n\n# Constraints\nm = Model()\n\n# Human labor constraint (90 hours available):\nm += 1.5 * BasmatiRice + 2 * Bananas <= 90\n# Machine work constraint (150 hours available):\nm += 2 * BasmatiRice + 4 * Bananas <= 150\n# Time under the sun constraint (70 hours available):\nm += 3 * BasmatiRice + 1.5 * Bananas <= 70\n\n# Objective\n# Maximize profit (15 dollars per kilogram of basmati rice, 28 dollars per kilogram of bananas):\nm.maximize(15 * BasmatiRice + 28 * Bananas)\n", "entities": [{"start": 27, "end": 39, "word": "basmati rice", "entity_group": "VAR", "score": 0.9999501021276848}, {"start": 44, "end": 51, "word": "bananas", "entity_group": "VAR", "score": 0.9984736145632097}, {"start": 78, "end": 90, "word": "basmati rice", "entity_group": "VAR", "score": 0.9999363273188628}, {"start": 100, "end": 103, "word": "1.5", "entity_group": "PARAM", "score": 0.9996332823684853}, {"start": 127, "end": 128, "word": "2", "entity_group": "PARAM", "score": 0.9997006586273296}, {"start": 157, "end": 158, "word": "3", "entity_group": "PARAM", "score": 0.999595811147173}, {"start": 216, "end": 223, "word": "bananas", "entity_group": "VAR", "score": 0.9992940284180075}, {"start": 233, "end": 234, "word": "2", "entity_group": "PARAM", "score": 0.9997313467339434}, {"start": 258, "end": 259, "word": "4", "entity_group": "PARAM", "score": 0.9997008641653197}, {"start": 288, "end": 291, "word": "1.5", "entity_group": "PARAM", "score": 0.9995958039299029}, {"start": 346, "end": 348, "word": "90", "entity_group": "LIMIT", "score": 0.9997850108082895}, {"start": 372, "end": 375, "word": "150", "entity_group": "LIMIT", "score": 0.9996997839869215}, {"start": 405, "end": 407, "word": "70", "entity_group": "LIMIT", "score": 0.9996099872504071}, {"start": 436, "end": 445, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985227470735708}, {"start": 452, "end": 462, "word": "net profit", "entity_group": "OBJ_NAME", "score": 0.9828143061250322}, {"start": 479, "end": 491, "word": "basmati rice", "entity_group": "VAR", "score": 0.9999045034847238}, {"start": 497, "end": 499, "word": "15", "entity_group": "PARAM", "score": 0.9997380084308054}, {"start": 508, "end": 518, "word": "net profit", "entity_group": "OBJ_NAME", "score": 0.9742339737657432}, {"start": 535, "end": 542, "word": "bananas", "entity_group": "VAR", "score": 0.9994257663280361}, {"start": 548, "end": 550, "word": "28", "entity_group": "PARAM", "score": 0.9995941268432113}, {"start": 616, "end": 624, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9932105743466143}, {"start": 625, "end": 631, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147071}]}
{"doc_id": "1877717441", "document": "A beverage company wants to promote their new product. They want to maximize the exposure with a budget of at most $200000. To do so, the company needs to decide how much of the budget to spend on each of its two most effective media: (1) newspaper and (2) television. Each newspaper advertisement costs $2500; each television advertisement cover costs $5000. The company knows from experience that it is important to use both media. The product exposure is 30000 readers for each newspaper advertisement and 50000 viewers for each television advertisement. It makes a decision that at least 12 but at most 24 newspaper advertisements be ordered, and that at least 10 television advertisements should be contracted. How many times should each of the two media be used to obtain maximum exposure while staying within the budget?", "order_mapping": {"newspaper": 0, "television": 1, "newspaper advertisement": 0, "television advertisement": 1, "newspaper advertisements": 0, "television advertisements": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "exposure", "terms": {"newspaper advertisement": "30000", "television advertisement": "50000"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "200000", "terms": {"newspaper advertisement": "2500", "television advertisement": "5000"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "newspaper advertisements", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "24", "var": "newspaper advertisements", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "television advertisements", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of newspaper advertisements\n- y: Number of television advertisements\n\nObjective:\n- The company aims to maximize the exposure. The exposure for each newspaper advertisement is 30000 and for each television advertisement is 50000. Therefore, the objective function is: Maximize 30000x + 50000y\n\nConstraints:\n- The total budget available for promotion is at most $200000, leading to the constraint: 2500x + 5000y <= 200000.\n- The company decides that at least 12 but at most 24 newspaper advertisements should be ordered, leading to the constraints: 12 <= x <= 24.\n- The company also decides that at least 10 television advertisements should be contracted, leading to the constraint: y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30000x + 50000y\nConstraints:\n2500x + 5000y <= 200000\n12 <= x <= 24\ny >= 10", "canonical": {"objective": [-30000.0, -50000.0], "constraints": [[2500.0, 5000.0, 200000.0], [0.0, -1.0, -10.0], [-1.0, 0.0, -12.0], [1.0, 0.0, 24.0]]}, "solution": {"x": 24, "y": 28}, "pseudo_model": "\nDecision Variables:\n- Number of newspaper advertisements: NewspaperAds\n- Number of television advertisements: TelevisionAds\n\nConstraints:\n- Budget constraint with $2500 per newspaper ad and $5000 per television ad, total budget at most $200000:\n  2500 * NewspaperAds + 5000 * TelevisionAds <= 200000\n- At least 12 but at most 24 newspaper advertisements:\n  12 <= NewspaperAds <= 24\n- At least 10 television advertisements:\n  TelevisionAds >= 10\n\nObjective:\n- Maximize exposure with 30000 readers per newspaper ad and 50000 viewers per television ad:\n  30000 * NewspaperAds + 50000 * TelevisionAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewspaperAds = intvar(0, 999999999)  # Number of newspaper advertisements\nTelevisionAds = intvar(0, 999999999)  # Number of television advertisements\n\n# Constraints\nm = Model()\n\n# Budget constraint: $2500 per newspaper ad and $5000 per television ad, total budget at most $200000\nm += 2500 * NewspaperAds + 5000 * TelevisionAds <= 200000\n# At least 12 but at most 24 newspaper advertisements\nm += NewspaperAds >= 12\nm += NewspaperAds <= 24\n# At least 10 television advertisements\nm += TelevisionAds >= 10\n\n# Objective\n# Maximize exposure: 30000 readers per newspaper ad and 50000 viewers per television ad\nm.maximize(30000 * NewspaperAds + 50000 * TelevisionAds)\n", "entities": [{"start": 82, "end": 90, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9871465066045106}, {"start": 108, "end": 115, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9938820094107458}, {"start": 118, "end": 124, "word": "200000", "entity_group": "LIMIT", "score": 0.9982262249664626}, {"start": 246, "end": 255, "word": "newspaper", "entity_group": "VAR", "score": 0.9997012484808343}, {"start": 266, "end": 276, "word": "television", "entity_group": "VAR", "score": 0.9996938009531808}, {"start": 284, "end": 307, "word": "newspaper advertisement", "entity_group": "VAR", "score": 0.9999840188932506}, {"start": 316, "end": 320, "word": "2500", "entity_group": "PARAM", "score": 0.9997315291761952}, {"start": 328, "end": 352, "word": "television advertisement", "entity_group": "VAR", "score": 0.9999287503513976}, {"start": 367, "end": 371, "word": "5000", "entity_group": "PARAM", "score": 0.9996031505680936}, {"start": 461, "end": 469, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.999275299650615}, {"start": 473, "end": 478, "word": "30000", "entity_group": "PARAM", "score": 0.9996212443654107}, {"start": 496, "end": 519, "word": "newspaper advertisement", "entity_group": "VAR", "score": 0.9999755799602662}, {"start": 524, "end": 529, "word": "50000", "entity_group": "PARAM", "score": 0.9996929135322355}, {"start": 547, "end": 571, "word": "television advertisement", "entity_group": "VAR", "score": 0.999897444334761}, {"start": 599, "end": 607, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989704599611691}, {"start": 608, "end": 610, "word": "12", "entity_group": "LIMIT", "score": 0.9995889190263941}, {"start": 615, "end": 622, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988755985763041}, {"start": 623, "end": 625, "word": "24", "entity_group": "LIMIT", "score": 0.9994102164351425}, {"start": 626, "end": 650, "word": "newspaper advertisements", "entity_group": "VAR", "score": 0.9999201807420057}, {"start": 673, "end": 681, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988025237712287}, {"start": 682, "end": 684, "word": "10", "entity_group": "LIMIT", "score": 0.999572575855879}, {"start": 685, "end": 710, "word": "television advertisements", "entity_group": "VAR", "score": 0.999781696419853}, {"start": 796, "end": 803, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9829810475229663}, {"start": 804, "end": 812, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9994960686664272}]}
{"doc_id": "-1747006103", "document": "Kappa Medical wants to mix two creams to create a mixture that contains at least 4 units of compound X and 8 units of compound Y. The amount of compound X and compound Y in cream Alpha is 2 units/mg and 2.7 units/mg respectively. On the other hand, the amount of compound X and compound Y in cream Beta is 4.1 units/mg and 3.2 units/mg respectively. It costs $0.70 per mg to purchase cream Alpha and $0.90 per mg to purchase cream Beta. Formulate an LP to minimize the cost of such a mixture.", "order_mapping": {"cream Alpha": 0, "cream Beta": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"cream Alpha": "0.70", "cream Beta": "0.90"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "4", "terms": {"cream Alpha": "2", "cream Beta": "4.1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "8", "terms": {"cream Alpha": "2.7", "cream Beta": "3.2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Amount of cream Alpha in mg\n- y: Amount of cream Beta in mg\n\nObjective:\n- The goal is to minimize the cost of the mixture. The cost of cream Alpha is $0.70 per mg and the cost of cream Beta is $0.90 per mg. Therefore, the objective function is: Minimize 0.70x + 0.90y\n\nConstraints:\n- The mixture should contain at least 4 units of compound X, which translates to the constraint: 2x + 4.1y >= 4.\n- The mixture should contain at least 8 units of compound Y, leading to the constraint: 2.7x + 3.2y >= 8.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.70x + 0.90y\nConstraints:\n2x + 4.1y >= 4\n2.7x + 3.2y >= 8", "canonical": {"objective": [0.7, 0.9], "constraints": [[-2.0, -4.1, -4.0], [-2.7, -3.2, -8.0]]}, "solution": {"x": 3, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount of cream Alpha in mg: CreamAlpha\n- Amount of cream Beta in mg: CreamBeta\n\nConstraints:\n- The mixture must contain at least 4 units of compound X:\n  2 * CreamAlpha + 4.1 * CreamBeta >= 4\n- The mixture must contain at least 8 units of compound Y:\n  2.7 * CreamAlpha + 3.2 * CreamBeta >= 8\n\nObjective:\n- Minimize the cost of the mixture (0.70 dollars per mg for cream Alpha and 0.90 dollars per mg for cream Beta):\n  0.70 * CreamAlpha + 0.90 * CreamBeta\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCreamAlpha = intvar(0, 999999999)  # Amount of cream Alpha in mg\nCreamBeta = intvar(0, 999999999)  # Amount of cream Beta in mg\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 4 units of compound X:\nm += 2 * CreamAlpha + 4.1 * CreamBeta >= 4\n# The mixture must contain at least 8 units of compound Y:\nm += 2.7 * CreamAlpha + 3.2 * CreamBeta >= 8\n\n# Objective\n# Minimize the cost of the mixture (0.70 dollars per mg for cream Alpha and 0.90 dollars per mg for cream Beta):\nm.minimize(0.70 * CreamAlpha + 0.90 * CreamBeta)\n", "entities": [{"start": 72, "end": 80, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987148666320528}, {"start": 81, "end": 82, "word": "4", "entity_group": "LIMIT", "score": 0.9997020051209962}, {"start": 107, "end": 108, "word": "8", "entity_group": "LIMIT", "score": 0.9996807525475856}, {"start": 173, "end": 184, "word": "cream Alpha", "entity_group": "VAR", "score": 0.9998959471989385}, {"start": 188, "end": 189, "word": "2", "entity_group": "PARAM", "score": 0.9996551232615003}, {"start": 205, "end": 208, "word": "2.7", "entity_group": "PARAM", "score": 0.9997199352796803}, {"start": 298, "end": 308, "word": "cream Beta", "entity_group": "VAR", "score": 0.999894473471242}, {"start": 312, "end": 315, "word": "4.1", "entity_group": "PARAM", "score": 0.9996552453277208}, {"start": 331, "end": 334, "word": "3.2", "entity_group": "PARAM", "score": 0.9997385302304682}, {"start": 364, "end": 369, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9997143248234639}, {"start": 372, "end": 376, "word": "0.70", "entity_group": "PARAM", "score": 0.9993250722820173}, {"start": 396, "end": 407, "word": "cream Alpha", "entity_group": "VAR", "score": 0.9996842494269818}, {"start": 414, "end": 418, "word": "0.90", "entity_group": "PARAM", "score": 0.9996724587507441}, {"start": 438, "end": 448, "word": "cream Beta", "entity_group": "VAR", "score": 0.9998528782178456}, {"start": 470, "end": 478, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9981436967675862}, {"start": 483, "end": 487, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9928306434473162}]}
{"doc_id": "-1724208777", "document": "A furniture store sells only bookcases and dining tables. They have 1200 sq ft of floor space available. A bookcase requires 15 sq ft of floor space while a dining table requires 8 sq ft of floor space. The profit per bookcase is $150 and the profit per dining table is $200. Management requires at least 20% of all items in stock to be bookcases. While a bookcase ties up $1200 in capital, a dining table ties up $1500 in capital. The store wants to have a maximum of $50000 worth of capital tied up at any time. Formulate an LP in order to maximize the store's profit.", "order_mapping": {"bookcases": 0, "dining tables": 1, "bookcase": 0, "dining table": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bookcase": "150", "dining table": "200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1200", "terms": {"dining table": "8", "bookcase": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "bookcases", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "50000", "terms": {"bookcase": "1200", "dining table": "1500"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bookcases\n- y: Number of dining tables\n\nObjective:\n- The store aims to maximize its profit. The profit per bookcase is $150 and the profit per dining table is $200. Therefore, the objective function is: Maximize 150x + 200y\n\nConstraints:\n- The store has 1200 sq ft of floor space available, and a bookcase requires 15 sq ft while a dining table requires 8 sq ft. This leads to the constraint: 15x + 8y <= 1200.\n- Management requires at least 20% of all items in stock to be bookcases, resulting in the constraint: x >= 0.20(x + y).\n- The store wants to have a maximum of $50000 worth of capital tied up at any time. Given that a bookcase ties up $1200 in capital and a dining table ties up $1500 in capital, the constraint is: 1200x + 1500y <= 50000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 200y\nConstraints:\n15x + 8y <= 1200\nx >= 0.20(x + y)\n1200x + 1500y <= 50000", "canonical": {"objective": [-150.0, -200.0], "constraints": [[15.0, 8.0, 1200.0], [-0.8, 0.2, 0.0], [1200.0, 1500.0, 50000.0]]}, "solution": {"x": 9, "y": 26}, "pseudo_model": "\nDecision Variables:\n- Number of bookcases: Bookcases\n- Number of dining tables: DiningTables\n\nConstraints:\n- Total floor space used by bookcases and dining tables should not exceed 1200 sq ft:\n  15 * Bookcases + 8 * DiningTables <= 1200\n- At least 20% of all items in stock must be bookcases:\n  Bookcases >= 0.20 * (Bookcases + DiningTables)\n- Total capital tied up by bookcases and dining tables should not exceed $50000:\n  1200 * Bookcases + 1500 * DiningTables <= 50000\n\nObjective:\n- Maximize profit ($150 profit per bookcase, $200 profit per dining table):\n  150 * Bookcases + 200 * DiningTables\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBookcases = intvar(0, 999999999)  # Number of bookcases\nDiningTables = intvar(0, 999999999)  # Number of dining tables\n\n# Constraints\nm = Model()\n\n# Floor space constraint (15 sq ft per bookcase, 8 sq ft per dining table, 1200 sq ft available):\nm += 15 * Bookcases + 8 * DiningTables <= 1200\n# At least 20% of all items must be bookcases:\nm += Bookcases >= 0.20 * (Bookcases + DiningTables)\n# Capital tied up constraint ($1200 per bookcase, $1500 per dining table, $50000 maximum):\nm += 1200 * Bookcases + 1500 * DiningTables <= 50000\n\n# Objective\n# Maximize profit ($150 per bookcase, $200 per dining table):\nm.maximize(150 * Bookcases + 200 * DiningTables)\n", "entities": [{"start": 29, "end": 38, "word": "bookcases", "entity_group": "VAR", "score": 0.9997195763203977}, {"start": 43, "end": 56, "word": "dining tables", "entity_group": "VAR", "score": 0.9999831808756651}, {"start": 69, "end": 73, "word": "1200", "entity_group": "LIMIT", "score": 0.9996298856660984}, {"start": 95, "end": 104, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993523460766423}, {"start": 109, "end": 117, "word": "bookcase", "entity_group": "VAR", "score": 0.9996377684774883}, {"start": 127, "end": 129, "word": "15", "entity_group": "PARAM", "score": 0.9996605523736742}, {"start": 159, "end": 171, "word": "dining table", "entity_group": "VAR", "score": 0.9999721645860985}, {"start": 181, "end": 182, "word": "8", "entity_group": "PARAM", "score": 0.9996065714384096}, {"start": 210, "end": 216, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998356964275863}, {"start": 221, "end": 229, "word": "bookcase", "entity_group": "VAR", "score": 0.9987230188886074}, {"start": 235, "end": 238, "word": "150", "entity_group": "PARAM", "score": 0.9990449701918512}, {"start": 247, "end": 253, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999402909374152}, {"start": 258, "end": 270, "word": "dining table", "entity_group": "VAR", "score": 0.9999518128920681}, {"start": 276, "end": 279, "word": "200", "entity_group": "PARAM", "score": 0.99973035571585}, {"start": 302, "end": 310, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999097114359465}, {"start": 311, "end": 315, "word": "20 %", "entity_group": "LIMIT", "score": 0.8429724479197215}, {"start": 344, "end": 353, "word": "bookcases", "entity_group": "VAR", "score": 0.9991702947373198}, {"start": 364, "end": 372, "word": "bookcase", "entity_group": "VAR", "score": 0.9997852151223126}, {"start": 383, "end": 387, "word": "1200", "entity_group": "PARAM", "score": 0.9996372582374743}, {"start": 403, "end": 415, "word": "dining table", "entity_group": "VAR", "score": 0.9999574632147985}, {"start": 426, "end": 430, "word": "1500", "entity_group": "PARAM", "score": 0.9994274261742441}, {"start": 470, "end": 477, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9944594122641153}, {"start": 483, "end": 488, "word": "50000", "entity_group": "LIMIT", "score": 0.9971730356486025}, {"start": 556, "end": 564, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9967361273314943}, {"start": 578, "end": 584, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999962542489292}]}
{"doc_id": "1840103420", "document": "Amazing Decor buys and sells both furniture and carpet. Each furniture takes 12 square feet of space while each carpet takes 7 square feet of space. The company has 1200 square feet of space available. Buying a furniture costs the store $300 and buying a carpet costs the store $80. The company has a budget of $30000. In addition, at least 20% of items in stock have to be furniture. If the profit per furniture sold is $40 and the profit per carpet sold is $30, how many of each should the company buy and sell to maximize profit?", "order_mapping": {"furniture": 0, "carpet": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"furniture": "40", "carpet": "30"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1200", "terms": {"furniture": "12", "carpet": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "30000", "terms": {"furniture": "300", "carpet": "80"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "furniture", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of furniture items bought and sold\n- y: Number of carpet items bought and sold\n\nObjective:\n- The company aims to maximize its profit. The profit per furniture sold is $40 and the profit per carpet sold is $30. Therefore, the objective function is: Maximize 40x + 30y\n\nConstraints:\n- The company has 1200 square feet of space available. Each furniture takes 12 square feet of space and each carpet takes 7 square feet of space, leading to the constraint: 12x + 7y <= 1200.\n- The company has a budget of $30000. Buying a furniture costs the store $300 and buying a carpet costs the store $80, resulting in the constraint: 300x + 80y <= 30000.\n- At least 20% of items in stock have to be furniture, leading to the constraint: x >= 0.20(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 30y\nConstraints:\n12x + 7y <= 1200\n300x + 80y <= 30000\nx >= 0.20(x + y)", "canonical": {"objective": [-40.0, -30.0], "constraints": [[12.0, 7.0, 1200.0], [300.0, 80.0, 30000.0], [-0.8, 0.2, 0.0]]}, "solution": {"x": 30, "y": 120}, "pseudo_model": "\nDecision Variables:\n- Number of furniture items bought and sold: Furniture\n- Number of carpet items bought and sold: Carpet\n\nConstraints:\n- Space constraint: 12 sq ft per furniture and 7 sq ft per carpet, with a total of 1200 sq ft available:\n  12 * Furniture + 7 * Carpet <= 1200\n- Budget constraint: $300 per furniture and $80 per carpet, with a total budget of $30000:\n  300 * Furniture + 80 * Carpet <= 30000\n- At least 20% of items in stock have to be furniture:\n  Furniture >= 0.20 * (Furniture + Carpet)\n\nObjective:\n- Maximize profit: $40 profit per furniture sold and $30 profit per carpet sold:\n  40 * Furniture + 30 * Carpet\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFurniture = intvar(0, 999999999)  # Number of furniture items\nCarpet = intvar(0, 999999999)  # Number of carpet items\n\n# Constraints\nm = Model()\n\n# Space constraint: Each furniture takes 12 sq ft and each carpet takes 7 sq ft, with a total of 1200 sq ft available\nm += 12 * Furniture + 7 * Carpet <= 1200\n# Budget constraint: Buying a furniture costs $300 and a carpet costs $80, with a total budget of $30000\nm += 300 * Furniture + 80 * Carpet <= 30000\n# At least 20% of items in stock have to be furniture\n# This means the number of furniture items must be at least 20% of the total number of items\nm += Furniture >= 0.20 * (Furniture + Carpet)\n\n# Objective\n# Maximize profit: $40 profit per furniture sold and $30 profit per carpet sold\nm.maximize(40 * Furniture + 30 * Carpet)\n", "entities": [{"start": 34, "end": 43, "word": "furniture", "entity_group": "VAR", "score": 0.9995593179946967}, {"start": 48, "end": 54, "word": "carpet", "entity_group": "VAR", "score": 0.9998327942492703}, {"start": 62, "end": 71, "word": "furniture", "entity_group": "VAR", "score": 0.9995963088024218}, {"start": 78, "end": 80, "word": "12", "entity_group": "PARAM", "score": 0.9993683998581591}, {"start": 113, "end": 119, "word": "carpet", "entity_group": "VAR", "score": 0.9997395257115164}, {"start": 126, "end": 127, "word": "7", "entity_group": "PARAM", "score": 0.999412698734263}, {"start": 167, "end": 171, "word": "1200", "entity_group": "LIMIT", "score": 0.9996837749256746}, {"start": 193, "end": 202, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991703820847008}, {"start": 214, "end": 223, "word": "furniture", "entity_group": "VAR", "score": 0.9997550888617837}, {"start": 242, "end": 245, "word": "300", "entity_group": "PARAM", "score": 0.9995234984275873}, {"start": 259, "end": 265, "word": "carpet", "entity_group": "VAR", "score": 0.9996765495161962}, {"start": 284, "end": 286, "word": "80", "entity_group": "PARAM", "score": 0.9997356239076599}, {"start": 307, "end": 313, "word": "budget", "entity_group": "CONST_DIR", "score": 0.993047643202503}, {"start": 319, "end": 324, "word": "30000", "entity_group": "PARAM", "score": 0.99910846588256}, {"start": 341, "end": 349, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991707313453433}, {"start": 350, "end": 354, "word": "20 %", "entity_group": "LIMIT", "score": 0.9776629490693343}, {"start": 384, "end": 393, "word": "furniture", "entity_group": "VAR", "score": 0.9997053731147165}, {"start": 403, "end": 409, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998994596665634}, {"start": 414, "end": 423, "word": "furniture", "entity_group": "VAR", "score": 0.9986239327509233}, {"start": 434, "end": 436, "word": "40", "entity_group": "PARAM", "score": 0.9995965170761626}, {"start": 445, "end": 451, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999938621630872}, {"start": 456, "end": 462, "word": "carpet", "entity_group": "VAR", "score": 0.9990377006135015}, {"start": 473, "end": 475, "word": "30", "entity_group": "PARAM", "score": 0.9996530293429747}, {"start": 530, "end": 538, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987210781682757}, {"start": 539, "end": 545, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997433452488922}]}
{"doc_id": "1094773395", "document": "A cosmetics company makes high-end skincare products whose main customers are wealthy women, both young girls and middle-aged women. In order to promote their product line, they decided to invest in short commercial spots on two types of programs: social media and television. While each social media commercial is seen by 5 million young girls and 1 million middle-aged women, each television commercial is seen by 3 million young girls and 7 million middle-aged women. A 1-minute social media ad costs $30,000, and a 1-minute television ad costs $50,000. The company would like the commercials to be seen by at least 20 million young girls and 30 million middle-aged women. Use linear programming to determine how the cosmetics company can meet its advertising requirements at minimum cost.", "order_mapping": {"social media": 0, "television": 1, "social media commercial": 0, "television commercial": 1, "social media ad": 0, "television ad": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"television ad": "50,000", "social media ad": "30,000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"social media commercial": "5", "television commercial": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"social media commercial": "1", "television commercial": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of social media commercials\n- y: Number of television commercials\n\nObjective:\n- The cosmetics company aims to minimize its advertising cost. Each social media ad costs $30,000, and each television ad costs $50,000. Therefore, the objective function is: Minimize 30000x + 50000y\n\nConstraints:\n- The commercials need to be seen by at least 20 million young girls and 30 million middle-aged women. Each social media commercial is seen by 5 million young girls and 1 million middle-aged women, and each television commercial is seen by 3 million young girls and 7 million middle-aged women. This leads to the constraints: 5x + 3y >= 20 and x + 7y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 30000x + 50000y\nConstraints:\n5x + 3y >= 20\nx + 7y >= 30", "canonical": {"objective": [30000.0, 50000.0], "constraints": [[-5.0, -3.0, -20.0], [-1.0, -7.0, -30.0]]}, "solution": {"x": 2, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of social media ads: SocialMediaAds\n- Number of television ads: TelevisionAds\n\nConstraints:\n- Commercials to be seen by at least 20 million young girls:\n  5 * SocialMediaAds + 3 * TelevisionAds >= 20\n- Commercials to be seen by at least 30 million middle-aged women:\n  1 * SocialMediaAds + 7 * TelevisionAds >= 30\n\nObjective:\n- Minimize cost ($30,000 per social media ad, $50,000 per television ad):\n  30000 * SocialMediaAds + 50000 * TelevisionAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSocialMediaAds = intvar(0, 999999999)  # Number of social media ads\nTelevisionAds = intvar(0, 999999999)  # Number of television ads\n\n# Constraints\nm = Model()\n\n# Commercials to be seen by at least 20 million young girls:\nm += 5 * SocialMediaAds + 3 * TelevisionAds >= 20\n# Commercials to be seen by at least 30 million middle-aged women:\nm += 1 * SocialMediaAds + 7 * TelevisionAds >= 30\n\n# Objective\n# Minimize cost ($30,000 per social media ad, $50,000 per television ad):\nm.minimize(30000 * SocialMediaAds + 50000 * TelevisionAds)\n", "entities": [{"start": 256, "end": 268, "word": "social media", "entity_group": "VAR", "score": 0.9999676861751869}, {"start": 273, "end": 283, "word": "television", "entity_group": "VAR", "score": 0.9997224250237519}, {"start": 297, "end": 320, "word": "social media commercial", "entity_group": "VAR", "score": 0.9995741412551018}, {"start": 332, "end": 333, "word": "5", "entity_group": "PARAM", "score": 0.999337051114609}, {"start": 358, "end": 359, "word": "1", "entity_group": "PARAM", "score": 0.9997121820579102}, {"start": 395, "end": 416, "word": "television commercial", "entity_group": "VAR", "score": 0.9999851033158511}, {"start": 428, "end": 429, "word": "3", "entity_group": "PARAM", "score": 0.9995182502785519}, {"start": 454, "end": 455, "word": "7", "entity_group": "PARAM", "score": 0.999681071494304}, {"start": 499, "end": 514, "word": "social media ad", "entity_group": "VAR", "score": 0.999246483684145}, {"start": 515, "end": 520, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999406792082437}, {"start": 523, "end": 529, "word": "30,000", "entity_group": "PARAM", "score": 0.9997082472981432}, {"start": 549, "end": 562, "word": "television ad", "entity_group": "VAR", "score": 0.99997051878497}, {"start": 563, "end": 568, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995756706129352}, {"start": 571, "end": 577, "word": "50,000", "entity_group": "PARAM", "score": 0.9994685837514353}, {"start": 633, "end": 641, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988098281329248}, {"start": 642, "end": 644, "word": "20", "entity_group": "LIMIT", "score": 0.9994348884637441}, {"start": 669, "end": 671, "word": "30", "entity_group": "LIMIT", "score": 0.9995464899366142}, {"start": 805, "end": 812, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9883506581343294}, {"start": 813, "end": 817, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986507061602447}]}
{"doc_id": "334482831", "document": "The company would like to design an office space with two types of desks: regular desks and standing desks. The company can spend at most $2500. Regular desks cost $150, take up 6 square feet of space, and seat 4 employees. Standing desks cost $200, take up 5 square feet of space, and seat 6 employees. The office can have at most 250 square feet of desks. How many of each desk should the company buy in order to maximize the seating availability?", "order_mapping": {"regular desks": 0, "standing desks": 1, "Regular desks": 0, "Standing desks": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "seating availability", "terms": {"Standing desks": "6", "Regular desks": "4"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "2500", "terms": {"Regular desks": "150", "Standing desks": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "250", "terms": {"Regular desks": "6", "Standing desks": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular desks\n- y: Number of standing desks\n\nObjective:\n- The company wants to maximize the seating availability. Regular desks seat 4 employees each, and standing desks seat 6 employees each. Therefore, the objective function is: Maximize 4x + 6y\n\nConstraints:\n- The company can spend at most $2500, so the cost constraint is: 150x + 200y <= 2500.\n- The office can have at most 250 square feet of desks, leading to the space constraint: 6x + 5y <= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 6y\nConstraints:\n150x + 200y <= 2500\n6x + 5y <= 250", "canonical": {"objective": [-4.0, -6.0], "constraints": [[150.0, 200.0, 2500.0], [6.0, 5.0, 250.0]]}, "solution": {"x": 2, "y": 11}, "pseudo_model": "\nDecision Variables:\n- Number of regular desks: RegularDesks\n- Number of standing desks: StandingDesks\n\nConstraints:\n- Total cost should not exceed $2500 (Regular desks cost $150, Standing desks cost $200):\n  150 * RegularDesks + 200 * StandingDesks <= 2500\n- Total space should not exceed 250 square feet (Regular desks take up 6 sq ft, Standing desks take up 5 sq ft):\n  6 * RegularDesks + 5 * StandingDesks <= 250\n\nObjective:\n- Maximize seating availability (4 seats per regular desk, 6 seats per standing desk):\n  4 * RegularDesks + 6 * StandingDesks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularDesks = intvar(0, 999999999)  # Number of regular desks\nStandingDesks = intvar(0, 999999999)  # Number of standing desks\n\n# Constraints\nm = Model()\n\n# The company can spend at most $2500:\nm += 150 * RegularDesks + 200 * StandingDesks <= 2500\n# The office can have at most 250 square feet of desks:\nm += 6 * RegularDesks + 5 * StandingDesks <= 250\n\n# Objective\n# Maximize seating availability (4 seats per regular desk, 6 seats per standing desk):\nm.maximize(4 * RegularDesks + 6 * StandingDesks)\n", "entities": [{"start": 75, "end": 88, "word": "regular desks", "entity_group": "VAR", "score": 0.9999461708303377}, {"start": 93, "end": 107, "word": "standing desks", "entity_group": "VAR", "score": 0.9999761753059242}, {"start": 132, "end": 139, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9958874091251009}, {"start": 142, "end": 146, "word": "2500", "entity_group": "LIMIT", "score": 0.9996482664107337}, {"start": 149, "end": 162, "word": "Regular desks", "entity_group": "VAR", "score": 0.9999572445556695}, {"start": 170, "end": 173, "word": "150", "entity_group": "PARAM", "score": 0.9997248429018397}, {"start": 184, "end": 185, "word": "6", "entity_group": "PARAM", "score": 0.9996950704247062}, {"start": 213, "end": 217, "word": "seat", "entity_group": "OBJ_NAME", "score": 0.987621256484593}, {"start": 218, "end": 219, "word": "4", "entity_group": "PARAM", "score": 0.997826638491791}, {"start": 232, "end": 246, "word": "Standing desks", "entity_group": "VAR", "score": 0.9999484439780828}, {"start": 254, "end": 257, "word": "200", "entity_group": "PARAM", "score": 0.9997078254912547}, {"start": 268, "end": 269, "word": "5", "entity_group": "PARAM", "score": 0.9996950704247066}, {"start": 297, "end": 301, "word": "seat", "entity_group": "OBJ_NAME", "score": 0.9917170193185336}, {"start": 302, "end": 303, "word": "6", "entity_group": "PARAM", "score": 0.9975970076998187}, {"start": 336, "end": 343, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998287610993042}, {"start": 344, "end": 347, "word": "250", "entity_group": "LIMIT", "score": 0.9994757716639857}, {"start": 428, "end": 436, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9907869438573415}, {"start": 441, "end": 461, "word": "seating availability", "entity_group": "OBJ_NAME", "score": 0.9908387991411224}]}
{"doc_id": "-131587418", "document": "A leatherworker has 2000 units of leather to make wallets and purses. Each wallet needs 2 units of leather and each purse needs 4 units of leather. Due to popularity, at least four times as many purses are needed than wallets and there needs to be at least 10 wallets made. If the profit per wallet is $40 and the profit per purse is $85, how many of each should be made to maximize profit?", "order_mapping": {"wallets": 0, "purses": 1, "wallet": 0, "purse": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"wallet": "40", "purse": "85"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "10", "var": "wallets", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "2000", "terms": {"wallet": "2", "purse": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "purses", "direction": "at least", "param": "four times", "y_var": "wallets", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of wallets\n- y: Number of purses\n\nObjective:\n- The leatherworker aims to maximize the profit. The profit per wallet is $40 and the profit per purse is $85. Therefore, the objective function is: Maximize 40x + 85y\n\nConstraints:\n- The leatherworker has 2000 units of leather available, so the constraint is: 2x + 4y <= 2000.\n- At least 10 wallets need to be made, leading to the constraint: x >= 10.\n- Due to popularity, at least four times as many purses are needed than wallets, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 85y\nConstraints:\n2x + 4y <= 2000\nx >= 10\ny >= 4x", "canonical": {"objective": [-40.0, -85.0], "constraints": [[2.0, 4.0, 2000.0], [-1.0, 0.0, -10.0], [4.0, -1.0, 0.0]]}, "solution": {"x": 10, "y": 495}, "pseudo_model": "\nDecision Variables:\n- Number of wallets made: Wallets\n- Number of purses made: Purses\n\nConstraints:\n- Total leather usage for wallets and purses should not exceed 2000 units (2 units per wallet, 4 units per purse):\n  2 * Wallets + 4 * Purses <= 2000\n- At least four times as many purses as wallets:\n  Purses >= 4 * Wallets\n- At least 10 wallets need to be made:\n  Wallets >= 10\n\nObjective:\n- Maximize profit (40 dollars per wallet, 85 dollars per purse):\n  40 * Wallets + 85 * Purses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWallets = intvar(0, 999999999)  # Number of wallets made\nPurses = intvar(0, 999999999)  # Number of purses made\n\n# Constraints\nm = Model()\n\n# Total leather usage should not exceed 2000 units (2 units per wallet, 4 units per purse):\nm += 2 * Wallets + 4 * Purses <= 2000\n# At least four times as many purses as wallets:\nm += Purses >= 4 * Wallets\n# At least 10 wallets need to be made:\nm += Wallets >= 10\n\n# Objective\n# Maximize profit (40 dollars per wallet, 85 dollars per purse):\nm.maximize(40 * Wallets + 85 * Purses)\n", "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.9950796147214026}, {"start": 20, "end": 24, "word": "2000", "entity_group": "LIMIT", "score": 0.9987723263829406}, {"start": 50, "end": 57, "word": "wallets", "entity_group": "VAR", "score": 0.99932105373692}, {"start": 62, "end": 68, "word": "purses", "entity_group": "VAR", "score": 0.9997638144285891}, {"start": 76, "end": 82, "word": "wallet", "entity_group": "VAR", "score": 0.9996434909911579}, {"start": 89, "end": 90, "word": "2", "entity_group": "PARAM", "score": 0.999673376331958}, {"start": 117, "end": 122, "word": "purse", "entity_group": "VAR", "score": 0.9997024558741869}, {"start": 129, "end": 130, "word": "4", "entity_group": "PARAM", "score": 0.9990945154532476}, {"start": 170, "end": 178, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976824434445956}, {"start": 179, "end": 189, "word": "four times", "entity_group": "PARAM", "score": 0.8847500752079719}, {"start": 198, "end": 204, "word": "purses", "entity_group": "VAR", "score": 0.9997535273809368}, {"start": 221, "end": 228, "word": "wallets", "entity_group": "VAR", "score": 0.9993657691910575}, {"start": 251, "end": 259, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978902155030285}, {"start": 260, "end": 262, "word": "10", "entity_group": "LIMIT", "score": 0.9996120667061604}, {"start": 263, "end": 270, "word": "wallets", "entity_group": "VAR", "score": 0.9994830130521358}, {"start": 285, "end": 291, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996940635317741}, {"start": 296, "end": 302, "word": "wallet", "entity_group": "VAR", "score": 0.9995902417874428}, {"start": 308, "end": 310, "word": "40", "entity_group": "PARAM", "score": 0.9993478814005075}, {"start": 319, "end": 325, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465452}, {"start": 330, "end": 335, "word": "purse", "entity_group": "VAR", "score": 0.9990975872183067}, {"start": 341, "end": 343, "word": "85", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 381, "end": 389, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 390, "end": 396, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "839077637", "document": "Sofia Paint store mixes two brands of paint, Iota and Lambda, to create a new mixture of paint. A can of Iota paint costs $8 and a can of Lambda paint costs $12. A can of Iota paint contains 3 units of dye, 5 units of thinner, and 6 units of oil. A can of Lambda paint contains 5 units of dye, 8 units of thinner, and 3 units of oil. The minimum requirements of dye, thinner, and oil for the new mixture are 10 units, 12 units, and 15 units, respectively. How many cans of each paint brand should be mixed to achieve the new mixture at a minimum cost?", "order_mapping": {"Iota": 0, "Lambda": 1, "Iota paint": 0, "Lambda paint": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Iota paint": "8", "Lambda paint": "12"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "10", "terms": {"Iota paint": "3", "Lambda paint": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "12", "terms": {"Iota paint": "5", "Lambda paint": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "15", "terms": {"Iota paint": "6", "Lambda paint": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans of Iota paint\n- y: Number of cans of Lambda paint\n\nObjective:\n- The store aims to minimize the cost of the new mixture. Given that a can of Iota paint costs $8 and a can of Lambda paint costs $12, the objective function is: Minimize 8x + 12y\n\nConstraints:\n- The minimum requirements of dye, thinner, and oil for the new mixture are 10 units, 12 units, and 15 units, respectively. This leads to the following constraints:\n    - 3x + 5y >= 10 (dye)\n    - 5x + 8y >= 12 (thinner)\n    - 6x + 3y >= 15 (oil)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 8x + 12y\nConstraints:\n3x + 5y >= 10\n5x + 8y >= 12\n6x + 3y >= 15", "canonical": {"objective": [8.0, 12.0], "constraints": [[-3.0, -5.0, -10.0], [-5.0, -8.0, -12.0], [-6.0, -3.0, -15.0]]}, "solution": {"x": 2, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of cans of Iota paint: Iota\n- Number of cans of Lambda paint: Lambda\n\nConstraints:\n- Dye requirement (at least 10 units):\n  3*Iota + 5*Lambda >= 10\n- Thinner requirement (at least 12 units):\n  5*Iota + 8*Lambda >= 12\n- Oil requirement (at least 15 units):\n  6*Iota + 3*Lambda >= 15\n\nObjective:\n- Minimize cost of the mixture:\n  8*Iota + 12*Lambda\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIota = intvar(0, 999999999)  # Number of cans of Iota paint\nLambda = intvar(0, 999999999)  # Number of cans of Lambda paint\n\n# Constraints\nm = Model()\n\n# Minimum requirements for the new mixture:\n# Dye: 3 units from Iota and 5 units from Lambda should be at least 10 units\nm += 3*Iota + 5*Lambda >= 10\n# Thinner: 5 units from Iota and 8 units from Lambda should be at least 12 units\nm += 5*Iota + 8*Lambda >= 12\n# Oil: 6 units from Iota and 3 units from Lambda should be at least 15 units\nm += 6*Iota + 3*Lambda >= 15\n\n# Objective\n# Minimize cost: $8 per can of Iota and $12 per can of Lambda\nm.minimize(8*Iota + 12*Lambda)\n", "entities": [{"start": 46, "end": 50, "word": "Iota", "entity_group": "VAR", "score": 0.9984714821420332}, {"start": 55, "end": 61, "word": "Lambda", "entity_group": "VAR", "score": 0.9996638892321739}, {"start": 108, "end": 118, "word": "Iota paint", "entity_group": "VAR", "score": 0.9999828398834231}, {"start": 119, "end": 124, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992696756712364}, {"start": 127, "end": 128, "word": "8", "entity_group": "PARAM", "score": 0.9994920659886524}, {"start": 142, "end": 154, "word": "Lambda paint", "entity_group": "VAR", "score": 0.999945044070576}, {"start": 155, "end": 160, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9998076087723188}, {"start": 163, "end": 165, "word": "12", "entity_group": "PARAM", "score": 0.999628297644287}, {"start": 177, "end": 187, "word": "Iota paint", "entity_group": "VAR", "score": 0.9999681691690346}, {"start": 197, "end": 198, "word": "3", "entity_group": "PARAM", "score": 0.9996304978086997}, {"start": 214, "end": 215, "word": "5", "entity_group": "PARAM", "score": 0.9997397223382454}, {"start": 239, "end": 240, "word": "6", "entity_group": "PARAM", "score": 0.9996933849583164}, {"start": 265, "end": 277, "word": "Lambda paint", "entity_group": "VAR", "score": 0.9999776434395949}, {"start": 287, "end": 288, "word": "5", "entity_group": "PARAM", "score": 0.9996304978107285}, {"start": 304, "end": 305, "word": "8", "entity_group": "PARAM", "score": 0.9997397223382429}, {"start": 329, "end": 330, "word": "3", "entity_group": "PARAM", "score": 0.9996587722476511}, {"start": 350, "end": 357, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.999610745406015}, {"start": 422, "end": 424, "word": "10", "entity_group": "LIMIT", "score": 0.9995221882360932}, {"start": 433, "end": 435, "word": "12", "entity_group": "LIMIT", "score": 0.9994052771686317}, {"start": 448, "end": 450, "word": "15", "entity_group": "LIMIT", "score": 0.9995607154648358}, {"start": 556, "end": 563, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9913879826131835}, {"start": 564, "end": 568, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984892628624816}]}
{"doc_id": "1158106256", "document": "A woman owns two cafes. Running cafe 1 for an hour costs $400 and makes 12 lattes, 18 americanos, and 16 macchiatos. Running cafe 2 for an hour costs $550 and makes 14 lattes, 20 americanos, and 9 macchiatos. To meet demand, she must make at least 90 lattes, 80 americanos, and 40 macchiatos. How many hours should she run each cafe to minimize costs?", "order_mapping": {"cafe 1": 0, "cafe 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"cafe 1": "400", "cafe 2": "550"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "90", "terms": {}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hours cafe 1 is run\n- y: Number of hours cafe 2 is run\n\nObjective:\n- The woman wants to minimize her costs. Running cafe 1 for an hour costs $400 and running cafe 2 for an hour costs $550. Therefore, the objective function is: Minimize 400x + 550y\n\nConstraints:\n- To meet demand, she must make at least 90 lattes, 80 americanos, and 40 macchiatos. The production of each type of coffee is given by the following equations:\n    12x + 14y >= 90 (lattes)\n    18x + 20y >= 80 (americanos)\n    16x + 9y >= 40 (macchiatos)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 400x + 550y\nConstraints:\n12x + 14y >= 90\n18x + 20y >= 80\n16x + 9y >= 40", "canonical": {"objective": [400.0, 550.0], "constraints": [[-12.0, -14.0, -90.0], [-18.0, -20.0, -80.0], [-16.0, -9.0, -40.0]]}, "solution": {"x": 8, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of hours cafe 1 is run: HoursCafe1\n- Number of hours cafe 2 is run: HoursCafe2\n\nConstraints:\n- To meet demand for lattes (at least 90 lattes):\n  12*HoursCafe1 + 14*HoursCafe2 >= 90\n- To meet demand for americanos (at least 80 americanos):\n  18*HoursCafe1 + 20*HoursCafe2 >= 80\n- To meet demand for macchiatos (at least 40 macchiatos):\n  16*HoursCafe1 + 9*HoursCafe2 >= 40\n\nObjective:\n- Minimize costs ($400 per hour for cafe 1, $550 per hour for cafe 2):\n  400*HoursCafe1 + 550*HoursCafe2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHoursCafe1 = intvar(0, 999999999)  # Number of hours cafe 1 is run\nHoursCafe2 = intvar(0, 999999999)  # Number of hours cafe 2 is run\n\n# Constraints\nm = Model()\n\n# To meet demand for lattes:\nm += 12*HoursCafe1 + 14*HoursCafe2 >= 90\n# To meet demand for americanos:\nm += 18*HoursCafe1 + 20*HoursCafe2 >= 80\n# To meet demand for macchiatos:\nm += 16*HoursCafe1 + 9*HoursCafe2 >= 40\n\n# Objective\n# Minimize costs ($400 per hour for cafe 1, $550 per hour for cafe 2):\nm.minimize(400*HoursCafe1 + 550*HoursCafe2)\n", "entities": [{"start": 33, "end": 39, "word": "cafe 1", "entity_group": "VAR", "score": 0.9998589307589901}, {"start": 52, "end": 57, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988641240602688}, {"start": 60, "end": 63, "word": "400", "entity_group": "PARAM", "score": 0.9994907984655114}, {"start": 74, "end": 76, "word": "12", "entity_group": "PARAM", "score": 0.9996836627701589}, {"start": 86, "end": 88, "word": "18", "entity_group": "PARAM", "score": 0.999648204400415}, {"start": 106, "end": 108, "word": "16", "entity_group": "PARAM", "score": 0.9996159861161783}, {"start": 130, "end": 136, "word": "cafe 2", "entity_group": "VAR", "score": 0.9998736040028453}, {"start": 149, "end": 154, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988641240602704}, {"start": 157, "end": 160, "word": "550", "entity_group": "PARAM", "score": 0.9994907984655129}, {"start": 171, "end": 173, "word": "14", "entity_group": "PARAM", "score": 0.9996836627701604}, {"start": 183, "end": 185, "word": "20", "entity_group": "PARAM", "score": 0.9996482044425941}, {"start": 203, "end": 204, "word": "9", "entity_group": "PARAM", "score": 0.9996865866530246}, {"start": 249, "end": 257, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989929055836734}, {"start": 258, "end": 260, "word": "90", "entity_group": "LIMIT", "score": 0.9997373740668528}, {"start": 270, "end": 272, "word": "80", "entity_group": "LIMIT", "score": 0.9996679491212509}, {"start": 290, "end": 292, "word": "40", "entity_group": "LIMIT", "score": 0.9995839206810885}, {"start": 349, "end": 357, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994236158482}, {"start": 358, "end": 363, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.997532206129645}]}
{"doc_id": "-1900987309", "document": "A factory makes dotted paper and grid paper. Both have to go through a cutting machine and a printing machine. A ream of dotted paper requires 3 minutes on the cutting machine and 5.5 minutes on the printing machine. A ream of grid paper requires 1.5 minutes on the cutting machine and 7 minutes on the printing machine. In a week, each machine is available for 3000 minutes. There is a profit of $5.5 per ream of dotted paper and a profit of $11 per ream of grid paper. How many reams of each should the factory make to maximize profit?", "order_mapping": {"dotted paper": 0, "grid paper": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"dotted paper": "5.5", "grid paper": "11"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"dotted paper": "3", "grid paper": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"dotted paper": "5.5", "grid paper": "7"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of reams of dotted paper\n- y: Number of reams of grid paper\n\nObjective:\n- The factory aims to maximize its profit. The profit per ream of dotted paper is $5.5 and the profit per ream of grid paper is $11. Therefore, the objective function is: Maximize 5.5x + 11y\n\nConstraints:\n- The cutting machine and printing machine each have a weekly availability of 3000 minutes. The time taken for each type of paper on each machine must not exceed this availability. This leads to the following constraints:\n    - 3x + 1.5y <= 3000 (cutting machine constraint)\n    - 5.5x + 7y <= 3000 (printing machine constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5.5x + 11y\nConstraints:\n3x + 1.5y <= 3000\n5.5x + 7y <= 3000", "canonical": {"objective": [-5.5, -11.0], "constraints": [[3.0, 1.5, 3000.0], [5.5, 7.0, 3000.0]]}, "solution": {"x": 0, "y": 428}, "pseudo_model": "\nDecision Variables:\n- Number of reams of dotted paper produced: DottedPaper\n- Number of reams of grid paper produced: GridPaper\n\nConstraints:\n- Cutting machine time for both types of paper should not exceed 3000 minutes per week:\n  3 * DottedPaper + 1.5 * GridPaper <= 3000\n- Printing machine time for both types of paper should not exceed 3000 minutes per week:\n  5.5 * DottedPaper + 7 * GridPaper <= 3000\n\nObjective:\n- Maximize profit (5.5 dollars per ream of dotted paper, 11 dollars per ream of grid paper):\n  5.5 * DottedPaper + 11 * GridPaper\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDottedPaper = intvar(0, 999999999)  # Number of reams of dotted paper\nGridPaper = intvar(0, 999999999)  # Number of reams of grid paper\n\n# Constraints\nm = Model()\n\n# Cutting machine time constraint (3000 minutes available per week):\nm += 3 * DottedPaper + 1.5 * GridPaper <= 3000\n# Printing machine time constraint (3000 minutes available per week):\nm += 5.5 * DottedPaper + 7 * GridPaper <= 3000\n\n# Objective\n# Maximize profit (5.5 dollars per ream of dotted paper, 11 dollars per ream of grid paper):\nm.maximize(5.5 * DottedPaper + 11 * GridPaper)\n", "entities": [{"start": 16, "end": 28, "word": "dotted paper", "entity_group": "VAR", "score": 0.9999762183269453}, {"start": 33, "end": 43, "word": "grid paper", "entity_group": "VAR", "score": 0.9999771280719978}, {"start": 123, "end": 135, "word": "dotted paper", "entity_group": "VAR", "score": 0.9999837059855822}, {"start": 145, "end": 146, "word": "3", "entity_group": "PARAM", "score": 0.9995651979941478}, {"start": 182, "end": 185, "word": "5.5", "entity_group": "PARAM", "score": 0.9996637633869254}, {"start": 230, "end": 240, "word": "grid paper", "entity_group": "VAR", "score": 0.9999798111269741}, {"start": 250, "end": 253, "word": "1.5", "entity_group": "PARAM", "score": 0.9995204705775942}, {"start": 289, "end": 290, "word": "7", "entity_group": "PARAM", "score": 0.9996635915889762}, {"start": 353, "end": 362, "word": "available", "entity_group": "CONST_DIR", "score": 0.9974271035579508}, {"start": 367, "end": 371, "word": "3000", "entity_group": "LIMIT", "score": 0.999757639433944}, {"start": 393, "end": 399, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993586968030929}, {"start": 405, "end": 408, "word": "5.5", "entity_group": "PARAM", "score": 0.999602416554839}, {"start": 421, "end": 433, "word": "dotted paper", "entity_group": "VAR", "score": 0.9999662767031363}, {"start": 440, "end": 446, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998391443644427}, {"start": 452, "end": 454, "word": "11", "entity_group": "PARAM", "score": 0.9996868837924074}, {"start": 467, "end": 477, "word": "grid paper", "entity_group": "VAR", "score": 0.9999526504767273}, {"start": 530, "end": 538, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993497511518207}, {"start": 539, "end": 545, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998151744374345}]}
{"doc_id": "495029314", "document": "A grandmother knits blankets and sweaters for her community. A blanket requires 30 units of yarn and 5 hours of knitting. A sweater requires 20 units of yarn and 4 hours of knitting. The grandmother has 200 units of yarn available and 40 hours of knitting available. If the profit per blanket is $5.50 and the profit per sweater is $5, how many of each should she knit to maximize her profit?", "order_mapping": {"blankets": 0, "sweaters": 1, "blanket": 0, "sweater": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"blanket": "5.50", "sweater": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"blanket": "30", "sweater": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "40", "terms": {"blanket": "5", "sweater": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of blankets knitted\n- y: Number of sweaters knitted\n\nObjective:\n- The grandmother aims to maximize her profit. The profit per blanket is $5.50 and the profit per sweater is $5. Therefore, the objective function is: Maximize 5.50x + 5y\n\nConstraints:\n- The grandmother has 200 units of yarn available, and each blanket requires 30 units of yarn and each sweater requires 20 units of yarn. This leads to the constraint: 30x + 20y <= 200.\n- The grandmother has 40 hours of knitting available, and each blanket requires 5 hours of knitting and each sweater requires 4 hours of knitting. This leads to the constraint: 5x + 4y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5.50x + 5y\nConstraints:\n30x + 20y <= 200\n5x + 4y <= 40", "canonical": {"objective": [-5.5, -5.0], "constraints": [[30.0, 20.0, 200.0], [5.0, 4.0, 40.0]]}, "solution": {"x": 0, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of blankets knitted: Blankets\n- Number of sweaters knitted: Sweaters\n\nConstraints:\n- Total yarn used for blankets and sweaters should not exceed 200 units:\n  30 * Blankets + 20 * Sweaters <= 200\n- Total knitting hours for blankets and sweaters should not exceed 40 hours:\n  5 * Blankets + 4 * Sweaters <= 40\n\nObjective:\n- Maximize profit (5.50 dollars per blanket, 5 dollars per sweater):\n  5.50 * Blankets + 5 * Sweaters\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlankets = intvar(0, 999999999)  # Number of blankets knitted\nSweaters = intvar(0, 999999999)  # Number of sweaters knitted\n\n# Constraints\nm = Model()\n\n# The grandmother has 200 units of yarn available:\nm += 30 * Blankets + 20 * Sweaters <= 200\n# The grandmother has 40 hours of knitting available:\nm += 5 * Blankets + 4 * Sweaters <= 40\n\n# Objective\n# Maximize profit (5.50 dollars per blanket, 5 dollars per sweater):\nm.maximize(5.50 * Blankets + 5 * Sweaters)\n", "entities": [{"start": 20, "end": 28, "word": "blankets", "entity_group": "VAR", "score": 0.9997349445836228}, {"start": 33, "end": 41, "word": "sweaters", "entity_group": "VAR", "score": 0.9993207656471044}, {"start": 64, "end": 71, "word": "blanket", "entity_group": "VAR", "score": 0.9994947202606748}, {"start": 81, "end": 83, "word": "30", "entity_group": "PARAM", "score": 0.9996881491276339}, {"start": 102, "end": 103, "word": "5", "entity_group": "PARAM", "score": 0.9996969590452347}, {"start": 126, "end": 133, "word": "sweater", "entity_group": "VAR", "score": 0.9995612533881354}, {"start": 143, "end": 145, "word": "20", "entity_group": "PARAM", "score": 0.9996965129448834}, {"start": 164, "end": 165, "word": "4", "entity_group": "PARAM", "score": 0.9996130645289729}, {"start": 206, "end": 209, "word": "200", "entity_group": "LIMIT", "score": 0.9997154650828489}, {"start": 224, "end": 233, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990687839942191}, {"start": 238, "end": 240, "word": "40", "entity_group": "LIMIT", "score": 0.9995073583741968}, {"start": 259, "end": 268, "word": "available", "entity_group": "CONST_DIR", "score": 0.998052157567128}, {"start": 278, "end": 284, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999702023790021}, {"start": 289, "end": 296, "word": "blanket", "entity_group": "VAR", "score": 0.9995072883625463}, {"start": 302, "end": 306, "word": "5.50", "entity_group": "PARAM", "score": 0.9993478814005105}, {"start": 315, "end": 321, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465461}, {"start": 326, "end": 333, "word": "sweater", "entity_group": "VAR", "score": 0.9990888329773507}, {"start": 339, "end": 340, "word": "5", "entity_group": "PARAM", "score": 0.9994707336700691}, {"start": 379, "end": 387, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997353643283781}, {"start": 392, "end": 398, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999399111547944}]}
{"doc_id": "1967220861", "document": "A farmer has 200 acres of land to grow oranges and grapefruits. He must grow at least 60 acres of oranges and at least 50 acres of grapefruits. The farmer prefers to grow more grapefruits than oranges but due to a shortage, he can grow at most twice the amount of grapefruits as oranges. If the profit per acre of oranges is $200, and the profit per acre of grapefruits is $220, how many acres of each should be grown to maximize profit?", "order_mapping": {"oranges": 0, "grapefruits": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"oranges": "200", "grapefruits": "220"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "oranges", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "grapefruits", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "grapefruits", "direction": "more", "y_var": "oranges", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "grapefruits", "direction": "at most", "param": "twice", "y_var": "oranges", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of oranges\n- y: Acres of grapefruits\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of oranges is $200, and the profit per acre of grapefruits is $220. Therefore, the objective function is: Maximize 200x + 220y\n\nConstraints:\n- The farmer has 200 acres of land available for growing oranges and grapefruits, so the constraint is: x + y <= 200.\n- The farmer must grow at least 60 acres of oranges, leading to the constraint: x >= 60.\n- The farmer must grow at least 50 acres of grapefruits, resulting in the constraint: y >= 50.\n- The farmer prefers to grow more grapefruits than oranges, which can be expressed as: y >= x.\n- Due to a shortage, the farmer can grow at most twice the amount of grapefruits as oranges, leading to the constraint: y <= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 220y\nConstraints:\nx + y <= 200\nx >= 60\ny >= 50\ny >= x\ny <= 2x", "canonical": {"objective": [-200.0, -220.0], "constraints": [[1.0, 1.0, 200.0], [-1.0, 0.0, -60.0], [0.0, -1.0, -50.0], [1.0, -1.0, 0.0], [-2.0, 1.0, 0.0]]}, "solution": {"x": 67, "y": 133}, "pseudo_model": "\nDecision Variables:\n- Acres of oranges grown: Oranges\n- Acres of grapefruits grown: Grapefruits\n\nConstraints:\n- Total acres used should not exceed 200:\n  Oranges + Grapefruits <= 200\n- At least 60 acres of oranges:\n  Oranges >= 60\n- At least 50 acres of grapefruits:\n  Grapefruits >= 50\n- Can grow at most twice the amount of grapefruits as oranges:\n  Grapefruits <= 2 * Oranges\n\nObjective:\n- Maximize profit (200 dollars per acre of oranges, 220 dollars per acre of grapefruits):\n  200 * Oranges + 220 * Grapefruits\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOranges = intvar(0, 999999999)  # Acres of oranges\nGrapefruits = intvar(0, 999999999)  # Acres of grapefruits\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 200:\nm += Oranges + Grapefruits <= 200\n# At least 60 acres of oranges:\nm += Oranges >= 60\n# At least 50 acres of grapefruits:\nm += Grapefruits >= 50\n# Prefer to grow more grapefruits than oranges\nm += Grapefruits > Oranges\n# Can grow at most twice the amount of grapefruits as oranges:\nm += Grapefruits <= 2 * Oranges\n\n# Objective\n# Maximize profit (200 dollars per acre of oranges, 220 dollars per acre of grapefruits):\nm.maximize(200 * Oranges + 220 * Grapefruits)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9924370747486134}, {"start": 13, "end": 16, "word": "200", "entity_group": "LIMIT", "score": 0.9987257294274344}, {"start": 39, "end": 46, "word": "oranges", "entity_group": "VAR", "score": 0.9985713715026692}, {"start": 51, "end": 62, "word": "grapefruits", "entity_group": "VAR", "score": 0.9995995275171812}, {"start": 78, "end": 86, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992233273285129}, {"start": 87, "end": 89, "word": "60", "entity_group": "LIMIT", "score": 0.9997427280644903}, {"start": 99, "end": 106, "word": "oranges", "entity_group": "VAR", "score": 0.999113450073372}, {"start": 111, "end": 119, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992477462003617}, {"start": 120, "end": 122, "word": "50", "entity_group": "LIMIT", "score": 0.9996910454710349}, {"start": 132, "end": 143, "word": "grapefruits", "entity_group": "VAR", "score": 0.9997336541151375}, {"start": 173, "end": 177, "word": "more", "entity_group": "CONST_DIR", "score": 0.993065885936148}, {"start": 178, "end": 189, "word": "grapefruits", "entity_group": "VAR", "score": 0.9976118425349028}, {"start": 195, "end": 202, "word": "oranges", "entity_group": "VAR", "score": 0.999576129115341}, {"start": 239, "end": 246, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9963493725184958}, {"start": 247, "end": 252, "word": "twice", "entity_group": "PARAM", "score": 0.9939123630163926}, {"start": 267, "end": 278, "word": "grapefruits", "entity_group": "VAR", "score": 0.9993873208196024}, {"start": 282, "end": 289, "word": "oranges", "entity_group": "VAR", "score": 0.9997798552654552}, {"start": 299, "end": 305, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998995453798353}, {"start": 318, "end": 325, "word": "oranges", "entity_group": "VAR", "score": 0.9989146534051949}, {"start": 331, "end": 334, "word": "200", "entity_group": "PARAM", "score": 0.9996799683136265}, {"start": 345, "end": 351, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999107113536183}, {"start": 364, "end": 375, "word": "grapefruits", "entity_group": "VAR", "score": 0.999430109474557}, {"start": 381, "end": 384, "word": "220", "entity_group": "PARAM", "score": 0.9996451587778276}, {"start": 429, "end": 437, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 438, "end": 444, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1461740387", "document": "An electronics store owner wants to know how many headsets and keyboards are enough to keep in inventory. A headset will earn the store $80 in profits, and a keyboard will earn $50. A headset requires 2.5 sq ft of floor space, whereas a keyboard requires 1.5 sq ft. In total, 200 sq ft of floor space is available. The store stocks only headsets and keyboards. Corporate has required that at least 70% of all appliances in stock be keyboards. Finally, a headset costs $200 for the store, and a keyboard, $110. The store wants to spend at most $10000. Formulate an LP that can be used to maximize the store's profit.", "order_mapping": {"headsets": 0, "keyboards": 1, "headset": 0, "keyboard": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"headset": "80", "keyboard": "50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"headset": "2.5", "keyboard": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "70%", "var": "keyboards", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "10000", "terms": {"headset": "200", "keyboard": "110"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of headsets\n- y: Number of keyboards\n\nObjective:\n- The store aims to maximize its profit. A headset will earn the store $80 in profits, and a keyboard will earn $50. Therefore, the objective function is: Maximize 80x + 50y\n\nConstraints:\n- The total floor space available is 200 sq ft, so the constraint is: 2.5x + 1.5y <= 200.\n- Corporate requires that at least 70% of all appliances in stock be keyboards, leading to the constraint: y >= 0.7(x + y).\n- The store wants to spend at most $10000, resulting in the constraint: 200x + 110y <= 10000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 80x + 50y\nConstraints:\n2.5x + 1.5y <= 200\ny >= 0.7(x + y)\n200x + 110y <= 10000", "canonical": {"objective": [-80.0, -50.0], "constraints": [[2.5, 1.5, 200.0], [0.7, -0.30000000000000004, 0.0], [200.0, 110.0, 10000.0]]}, "solution": {"x": 1, "y": 89}, "pseudo_model": "\nDecision Variables:\n- Number of headsets in inventory: Headsets\n- Number of keyboards in inventory: Keyboards\n\nConstraints:\n- Total floor space used by headsets and keyboards should not exceed 200 sq ft:\n  2.5 * Headsets + 1.5 * Keyboards <= 200\n- At least 70% of all appliances in stock must be keyboards:\n  Keyboards >= 0.7 * (Headsets + Keyboards)\n- The total cost of headsets and keyboards should not exceed $10000:\n  200 * Headsets + 110 * Keyboards <= 10000\n\nObjective:\n- Maximize profit (80 dollars profit per headset, 50 dollars profit per keyboard):\n  80 * Headsets + 50 * Keyboards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeadsets = intvar(0, 999999999)  # Number of headsets\nKeyboards = intvar(0, 999999999)  # Number of keyboards\n\n# Constraints\nm = Model()\n\n# Total floor space used by headsets and keyboards should not exceed 200 sq ft:\nm += 2.5 * Headsets + 1.5 * Keyboards <= 200\n# At least 70% of all appliances in stock must be keyboards:\nm += Keyboards >= 0.7 * (Headsets + Keyboards)\n# The total cost of headsets and keyboards should not exceed $10000:\nm += 200 * Headsets + 110 * Keyboards <= 10000\n\n# Objective\n# Maximize profit (80 dollars profit per headset, 50 dollars profit per keyboard):\nm.maximize(80 * Headsets + 50 * Keyboards)\n", "entities": [{"start": 50, "end": 58, "word": "headsets", "entity_group": "VAR", "score": 0.9993928786367895}, {"start": 63, "end": 72, "word": "keyboards", "entity_group": "VAR", "score": 0.9989196744378745}, {"start": 109, "end": 116, "word": "headset", "entity_group": "VAR", "score": 0.9990950734627453}, {"start": 139, "end": 141, "word": "80", "entity_group": "PARAM", "score": 0.999582429904567}, {"start": 145, "end": 152, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9998471171053128}, {"start": 161, "end": 169, "word": "keyboard", "entity_group": "VAR", "score": 0.9993629658661106}, {"start": 182, "end": 184, "word": "50", "entity_group": "PARAM", "score": 0.9997081304241526}, {"start": 189, "end": 196, "word": "headset", "entity_group": "VAR", "score": 0.9997368722685354}, {"start": 206, "end": 209, "word": "2.5", "entity_group": "PARAM", "score": 0.9996321535482536}, {"start": 243, "end": 251, "word": "keyboard", "entity_group": "VAR", "score": 0.9995316289809172}, {"start": 261, "end": 264, "word": "1.5", "entity_group": "PARAM", "score": 0.9996535430086412}, {"start": 284, "end": 287, "word": "200", "entity_group": "LIMIT", "score": 0.9987932198005885}, {"start": 312, "end": 321, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989290977683166}, {"start": 346, "end": 354, "word": "headsets", "entity_group": "VAR", "score": 0.9997663099122737}, {"start": 359, "end": 368, "word": "keyboards", "entity_group": "VAR", "score": 0.9990996360594764}, {"start": 399, "end": 407, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989241607133899}, {"start": 408, "end": 412, "word": "70 %", "entity_group": "LIMIT", "score": 0.8380718526016139}, {"start": 443, "end": 452, "word": "keyboards", "entity_group": "VAR", "score": 0.9997680726556941}, {"start": 467, "end": 474, "word": "headset", "entity_group": "VAR", "score": 0.9997744647708677}, {"start": 483, "end": 486, "word": "200", "entity_group": "PARAM", "score": 0.9995763793910031}, {"start": 509, "end": 517, "word": "keyboard", "entity_group": "VAR", "score": 0.9998119943868521}, {"start": 522, "end": 525, "word": "110", "entity_group": "PARAM", "score": 0.999731078277938}, {"start": 553, "end": 560, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9958047374326928}, {"start": 563, "end": 568, "word": "10000", "entity_group": "LIMIT", "score": 0.9996596208963948}, {"start": 607, "end": 615, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961797465427689}, {"start": 629, "end": 635, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999043391077075}]}
{"doc_id": "-117212297", "document": "A company makes surfboards and skateboards. Each surfboard requires 5 units of wood and 3 units of paint. Each skateboard requires 4 units of wood and 2 units of paint. At the company, there are 700 units of wood available and 320 units of paint. If the profit per surfboard is $70 and the profit per skateboard is $45, how many of each should be made to maximize profit?", "order_mapping": {"surfboards": 0, "skateboards": 1, "surfboard": 0, "skateboard": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"surfboard": "70", "skateboard": "45"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "700", "terms": {"surfboard": "5", "skateboard": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "320", "terms": {"surfboard": "3", "skateboard": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of surfboards to be made\n- y: Number of skateboards to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per surfboard is $70 and the profit per skateboard is $45. Therefore, the objective function is: Maximize 70x + 45y\n\nConstraints:\n- The company has 700 units of wood available and each surfboard requires 5 units of wood and each skateboard requires 4 units of wood. This leads to the constraint: 5x + 4y <= 700.\n- The company has 320 units of paint available and each surfboard requires 3 units of paint and each skateboard requires 2 units of paint. This results in the constraint: 3x + 2y <= 320.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 45y\nConstraints:\n5x + 4y <= 700\n3x + 2y <= 320", "canonical": {"objective": [-70.0, -45.0], "constraints": [[5.0, 4.0, 700.0], [3.0, 2.0, 320.0]]}, "solution": {"x": 106, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of surfboards made: Surfboards\n- Number of skateboards made: Skateboards\n\nConstraints:\n- Wood usage for surfboards and skateboards should not exceed 700 units:\n  5*Surfboards + 4*Skateboards <= 700\n- Paint usage for surfboards and skateboards should not exceed 320 units:\n  3*Surfboards + 2*Skateboards <= 320\n\nObjective:\n- Maximize profit, given $70 profit per surfboard and $45 profit per skateboard:\n  70*Surfboards + 45*Skateboards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSurfboards = intvar(0, 999999999)  # Number of surfboards made\nSkateboards = intvar(0, 999999999)  # Number of skateboards made\n\n# Constraints\nm = Model()\n\n# Wood constraint: 5 units per surfboard and 4 units per skateboard, 700 units available\nm += 5*Surfboards + 4*Skateboards <= 700\n# Paint constraint: 3 units per surfboard and 2 units per skateboard, 320 units available\nm += 3*Surfboards + 2*Skateboards <= 320\n\n# Objective\n# Maximize profit: $70 per surfboard and $45 per skateboard\nm.maximize(70*Surfboards + 45*Skateboards)\n", "entities": [{"start": 16, "end": 26, "word": "surfboards", "entity_group": "VAR", "score": 0.9994447704507765}, {"start": 31, "end": 42, "word": "skateboards", "entity_group": "VAR", "score": 0.9997879762048687}, {"start": 50, "end": 59, "word": "surfboard", "entity_group": "VAR", "score": 0.9996473494279795}, {"start": 69, "end": 70, "word": "5", "entity_group": "PARAM", "score": 0.9996990905622266}, {"start": 89, "end": 90, "word": "3", "entity_group": "PARAM", "score": 0.9997150740967209}, {"start": 113, "end": 123, "word": "skateboard", "entity_group": "VAR", "score": 0.9996383328415444}, {"start": 133, "end": 134, "word": "4", "entity_group": "PARAM", "score": 0.9996710758719406}, {"start": 153, "end": 154, "word": "2", "entity_group": "PARAM", "score": 0.9996514908910555}, {"start": 199, "end": 202, "word": "700", "entity_group": "LIMIT", "score": 0.9997325342726635}, {"start": 217, "end": 226, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993834629101208}, {"start": 231, "end": 234, "word": "320", "entity_group": "LIMIT", "score": 0.9992249602371309}, {"start": 259, "end": 265, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998807619349708}, {"start": 270, "end": 279, "word": "surfboard", "entity_group": "VAR", "score": 0.9996403737697651}, {"start": 285, "end": 287, "word": "70", "entity_group": "PARAM", "score": 0.9991341235341227}, {"start": 296, "end": 302, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688958356791}, {"start": 307, "end": 317, "word": "skateboard", "entity_group": "VAR", "score": 0.9994201489605631}, {"start": 323, "end": 325, "word": "45", "entity_group": "PARAM", "score": 0.9994707648838381}, {"start": 363, "end": 371, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 372, "end": 378, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "2050861890", "document": "Marty has $10000 to invest in both the wood and bamboo industries. He has decided that the investment in the wood industry must be at least four times as much as that in the bamboo industry. However, he has restricted to invest at most $7000 in the wood industry. If investments in the wood industry earn 7% return and investments in the bamboo industry earn a 3% return, how much should he invest in each to maximize his average return?", "order_mapping": {"wood": 0, "bamboo industries": 1, "wood industry": 0, "bamboo industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"wood industry": "7%", "bamboo industry": "3%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "10000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "wood industry", "direction": "at least", "param": "four", "y_var": "bamboo industry", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "7000", "var": "wood industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the wood industry\n- y: Dollars invested in the bamboo industry\n\nObjective:\n- Marty wants to maximize his average return. The return on investments in the wood industry is 7% and in the bamboo industry is 3%. Therefore, the objective function is: Maximize 0.07x + 0.03y\n\nConstraints:\n- Marty has $10,000 to invest, so the constraint is: x + y <= 10000.\n- The investment in the wood industry must be at least four times as much as that in the bamboo industry, leading to the constraint: x >= 4y.\n- Marty can invest at most $7,000 in the wood industry, resulting in the constraint: x <= 7000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.07x + 0.03y\nConstraints:\nx + y <= 10000\nx >= 4y\nx <= 7000", "canonical": {"objective": [-0.07, -0.03], "constraints": [[1.0, 1.0, 10000.0], [-1.0, 4.0, 0.0], [1.0, 0.0, 7000.0]]}, "solution": {"x": 7000, "y": 1750}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the wood industry: WoodIndustry\n- Amount invested in the bamboo industry: BambooIndustry\n\nConstraints:\n- Total investment should not exceed $10000:\n  WoodIndustry + BambooIndustry <= 10000\n- Investment in the wood industry must be at least four times as much as that in the bamboo industry:\n  WoodIndustry >= 4 * BambooIndustry\n- Investment in the wood industry is restricted to at most $7000:\n  WoodIndustry <= 7000\n\nObjective:\n- Maximize average return (7% return from the wood industry, 3% return from the bamboo industry):\n  0.07 * WoodIndustry + 0.03 * BambooIndustry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWoodIndustry = intvar(0, 999999999)  # Amount invested in the wood industry\nBambooIndustry = intvar(0, 999999999)  # Amount invested in the bamboo industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $10000:\nm += WoodIndustry + BambooIndustry <= 10000\n# Investment in the wood industry must be at least four times as much as that in the bamboo industry:\nm += WoodIndustry >= 4 * BambooIndustry\n# Investment in the wood industry is restricted to at most $7000:\nm += WoodIndustry <= 7000\n\n# Objective\n# Maximize average return (7% return from the wood industry, 3% return from the bamboo industry):\nm.maximize(0.07 * WoodIndustry + 0.03 * BambooIndustry)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9963033230139845}, {"start": 12, "end": 17, "word": "10000", "entity_group": "LIMIT", "score": 0.9990660537765141}, {"start": 40, "end": 44, "word": "wood", "entity_group": "VAR", "score": 0.9992999207110017}, {"start": 49, "end": 66, "word": "bamboo industries", "entity_group": "VAR", "score": 0.9998255807088298}, {"start": 111, "end": 124, "word": "wood industry", "entity_group": "VAR", "score": 0.9999726407220744}, {"start": 133, "end": 141, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9942259426029016}, {"start": 142, "end": 152, "word": "four times", "entity_group": "PARAM", "score": 0.6340384325634849}, {"start": 176, "end": 191, "word": "bamboo industry", "entity_group": "VAR", "score": 0.9998851472620024}, {"start": 232, "end": 239, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9946422444471616}, {"start": 242, "end": 246, "word": "7000", "entity_group": "LIMIT", "score": 0.9996658391451997}, {"start": 254, "end": 267, "word": "wood industry", "entity_group": "VAR", "score": 0.9999746703617768}, {"start": 292, "end": 305, "word": "wood industry", "entity_group": "VAR", "score": 0.9999696029621928}, {"start": 311, "end": 314, "word": "7 %", "entity_group": "PARAM", "score": 0.8842318708374733}, {"start": 315, "end": 321, "word": "return", "entity_group": "OBJ_NAME", "score": 0.996373568152209}, {"start": 345, "end": 360, "word": "bamboo industry", "entity_group": "VAR", "score": 0.9999524106688963}, {"start": 368, "end": 371, "word": "3 %", "entity_group": "PARAM", "score": 0.7807959994132115}, {"start": 372, "end": 378, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9943637499793697}, {"start": 418, "end": 426, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990160472517019}, {"start": 439, "end": 445, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9975780969566352}]}
{"doc_id": "1126424265", "document": "A food truck sells burritos and tacitos. To stay in business, they must sell at least 30 orders of burritos but they can make at most 100 orders of burritos. Also, they must sell at least 20 orders of tacitos but they can make at most 150 orders of tacitos. Due to the lack of help, the food truck can only sell 250 orders in total. If the price per order of burritos is $17 and the price per order of tacitos is $12, how many orders of each should they sell to maximize the revenue?", "order_mapping": {"burritos": 0, "tacitos": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"burritos": "17", "tacitos": "12"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "30", "var": "burritos", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "burritos", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "tacitos", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "total", "limit": "250", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "tacitos", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of orders of burritos\n- y: Number of orders of tacitos\n\nObjective:\n- The food truck aims to maximize its revenue. Given that the price per order of burritos is $17 and the price per order of tacitos is $12, the objective function is: Maximize 17x + 12y\n\nConstraints:\n- The food truck must sell at least 30 orders of burritos, leading to the constraint: x >= 30.\n- The food truck can make at most 100 orders of burritos, resulting in the constraint: x <= 100.\n- The food truck must sell at least 20 orders of tacitos, leading to the constraint: y >= 20.\n- The food truck can make at most 150 orders of tacitos, resulting in the constraint: y <= 150.\n- The total number of orders must not exceed 250, leading to the constraint: x + y <= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 17x + 12y\nConstraints:\nx >= 30\nx <= 100\ny >= 20\ny <= 150\nx + y <= 250", "canonical": {"objective": [-17.0, -12.0], "constraints": [[-1.0, 0.0, -30.0], [1.0, 0.0, 100.0], [0.0, -1.0, -20.0], [0.0, 1.0, 150.0], [1.0, 1.0, 250.0]]}, "solution": {"x": 100, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of burrito orders sold: Burritos\n- Number of tacito orders sold: Tacitos\n\nConstraints:\n- Must sell at least 30 orders of burritos:\n  Burritos >= 30\n- Can make at most 100 orders of burritos:\n  Burritos <= 100\n- Must sell at least 20 orders of tacitos:\n  Tacitos >= 20\n- Can make at most 150 orders of tacitos:\n  Tacitos <= 150\n- Can only sell 250 orders in total:\n  Burritos + Tacitos <= 250\n\nObjective:\n- Maximize revenue (17 dollars per order of burritos, 12 dollars per order of tacitos):\n  17 * Burritos + 12 * Tacitos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurritos = intvar(0, 999999999)  # Number of burrito orders\nTacitos = intvar(0, 999999999)  # Number of tacito orders\n\n# Constraints\nm = Model()\n\n# Must sell at least 30 orders of burritos:\nm += Burritos >= 30\n# Can make at most 100 orders of burritos:\nm += Burritos <= 100\n# Must sell at least 20 orders of tacitos:\nm += Tacitos >= 20\n# Can make at most 150 orders of tacitos:\nm += Tacitos <= 150\n# Can only sell 250 orders in total:\nm += Burritos + Tacitos <= 250\n\n# Objective\n# Maximize revenue (17 dollars per order of burritos, 12 dollars per order of tacitos):\nm.maximize(17 * Burritos + 12 * Tacitos)\n", "entities": [{"start": 19, "end": 27, "word": "burritos", "entity_group": "VAR", "score": 0.9994655428001706}, {"start": 32, "end": 39, "word": "tacitos", "entity_group": "VAR", "score": 0.9994245166468743}, {"start": 79, "end": 87, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992267847311302}, {"start": 88, "end": 90, "word": "30", "entity_group": "LIMIT", "score": 0.9997334092045446}, {"start": 101, "end": 109, "word": "burritos", "entity_group": "VAR", "score": 0.9996179934790284}, {"start": 128, "end": 135, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991433430270753}, {"start": 136, "end": 139, "word": "100", "entity_group": "LIMIT", "score": 0.9997196295128392}, {"start": 150, "end": 158, "word": "burritos", "entity_group": "VAR", "score": 0.9997107353978074}, {"start": 183, "end": 191, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991633938127189}, {"start": 192, "end": 194, "word": "20", "entity_group": "LIMIT", "score": 0.9997334530300339}, {"start": 205, "end": 212, "word": "tacitos", "entity_group": "VAR", "score": 0.9996179934790288}, {"start": 231, "end": 238, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991331399272491}, {"start": 239, "end": 242, "word": "150", "entity_group": "LIMIT", "score": 0.9996174019696721}, {"start": 253, "end": 260, "word": "tacitos", "entity_group": "VAR", "score": 0.9996988074856841}, {"start": 318, "end": 321, "word": "250", "entity_group": "LIMIT", "score": 0.9971589653536325}, {"start": 332, "end": 337, "word": "total", "entity_group": "CONST_DIR", "score": 0.9955207132243483}, {"start": 347, "end": 352, "word": "price", "entity_group": "OBJ_NAME", "score": 0.9918260164480924}, {"start": 366, "end": 374, "word": "burritos", "entity_group": "VAR", "score": 0.9994813940855305}, {"start": 380, "end": 382, "word": "17", "entity_group": "PARAM", "score": 0.9993504032466509}, {"start": 391, "end": 396, "word": "price", "entity_group": "OBJ_NAME", "score": 0.993608562371356}, {"start": 410, "end": 417, "word": "tacitos", "entity_group": "VAR", "score": 0.9994250914843356}, {"start": 423, "end": 425, "word": "12", "entity_group": "PARAM", "score": 0.9995899883397407}, {"start": 472, "end": 480, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997452375669613}, {"start": 485, "end": 492, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9989855900436662}]}
{"doc_id": "285799206", "document": "A glass company makes sliding doors and windows. They have orders for at least 120 sliding doors and at least 110 windows per day. However, due to supply constraints, the company can make at most 210 sliding doors and at most 170 windows per day. In addition, they have a contract to ship at least 250 products of either type per day. If the profit per sliding door is $30 and the profit per window is $25, how many of each should the company make to maximize profit?", "order_mapping": {"sliding doors": 0, "windows": 1, "sliding door": 0, "window": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sliding door": "30", "window": "25"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "120", "var": "sliding doors", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "110", "var": "windows", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "210", "var": "sliding doors", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "170", "var": "windows", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "250", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sliding doors made per day\n- y: Number of windows made per day\n\nObjective:\n- The company aims to maximize its profit. The profit per sliding door is $30 and the profit per window is $25. Therefore, the objective function is: Maximize 30x + 25y\n\nConstraints:\n- The company has orders for at least 120 sliding doors and at least 110 windows per day, leading to the constraints: x >= 120 and y >= 110.\n- Due to supply constraints, the company can make at most 210 sliding doors and at most 170 windows per day, resulting in the constraints: x <= 210 and y <= 170.\n- The company has a contract to ship at least 250 products of either type per day, leading to the constraint: x + y >= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 25y\nConstraints:\nx >= 120\ny >= 110\nx <= 210\ny <= 170\nx + y >= 250", "canonical": {"objective": [-30.0, -25.0], "constraints": [[-1.0, 0.0, -120.0], [0.0, -1.0, -110.0], [1.0, 0.0, 210.0], [0.0, 1.0, 170.0], [-1.0, -1.0, -250.0]]}, "solution": {"x": 210, "y": 170}, "pseudo_model": "\nDecision Variables:\n- Number of sliding doors made per day: SlidingDoors\n- Number of windows made per day: Windows\n\nConstraints:\n- At least 120 sliding doors per day:\n  SlidingDoors >= 120\n- At least 110 windows per day:\n  Windows >= 110\n- At most 210 sliding doors per day:\n  SlidingDoors <= 210\n- At most 170 windows per day:\n  Windows <= 170\n- At least 250 products (sliding doors + windows) per day:\n  SlidingDoors + Windows >= 250\n\nObjective:\n- Maximize profit (30 dollars per sliding door, 25 dollars per window):\n  30 * SlidingDoors + 25 * Windows\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSlidingDoors = intvar(0, 999999999)  # Number of sliding doors made per day\nWindows = intvar(0, 999999999)  # Number of windows made per day\n\n# Constraints\nm = Model()\n\n# At least 120 sliding doors per day:\nm += SlidingDoors >= 120\n# At least 110 windows per day:\nm += Windows >= 110\n# At most 210 sliding doors per day:\nm += SlidingDoors <= 210\n# At most 170 windows per day:\nm += Windows <= 170\n# At least 250 products (sliding doors + windows) per day:\nm += SlidingDoors + Windows >= 250\n\n# Objective\n# Maximize profit (30 dollars per sliding door, 25 dollars per window):\nm.maximize(30 * SlidingDoors + 25 * Windows)\n", "entities": [{"start": 22, "end": 35, "word": "sliding doors", "entity_group": "VAR", "score": 0.9999592260138603}, {"start": 40, "end": 47, "word": "windows", "entity_group": "VAR", "score": 0.9989559048684108}, {"start": 71, "end": 79, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988529491265696}, {"start": 80, "end": 83, "word": "120", "entity_group": "LIMIT", "score": 0.9995563855922677}, {"start": 84, "end": 97, "word": "sliding doors", "entity_group": "VAR", "score": 0.9999135088911678}, {"start": 102, "end": 110, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992437727774693}, {"start": 111, "end": 114, "word": "110", "entity_group": "LIMIT", "score": 0.9996553457237346}, {"start": 115, "end": 122, "word": "windows", "entity_group": "VAR", "score": 0.991597926922901}, {"start": 192, "end": 199, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986865966400642}, {"start": 200, "end": 203, "word": "210", "entity_group": "LIMIT", "score": 0.9995303204599051}, {"start": 204, "end": 217, "word": "sliding doors", "entity_group": "VAR", "score": 0.9999055075280985}, {"start": 222, "end": 229, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992346057319765}, {"start": 230, "end": 233, "word": "170", "entity_group": "LIMIT", "score": 0.9996521388633798}, {"start": 234, "end": 241, "word": "windows", "entity_group": "VAR", "score": 0.997472576582343}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987265112972834}, {"start": 304, "end": 307, "word": "250", "entity_group": "LIMIT", "score": 0.9996698823599129}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999470920749455}, {"start": 360, "end": 372, "word": "sliding door", "entity_group": "VAR", "score": 0.999934533080562}, {"start": 378, "end": 380, "word": "30", "entity_group": "PARAM", "score": 0.9996423889228562}, {"start": 389, "end": 395, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999053254563889}, {"start": 400, "end": 406, "word": "window", "entity_group": "VAR", "score": 0.9990888329755441}, {"start": 412, "end": 414, "word": "25", "entity_group": "PARAM", "score": 0.9994707412182511}, {"start": 461, "end": 469, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 470, "end": 476, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "1457598668", "document": "Theta Sandwich wants to advertise its new product. They want to use three types of ads: newspaper ads, radio ads, and television ads. The cost for each option along with the expected viewership is given. A newspaper ad costs $1200 and attracts 5000 viewers. A radio ad costs $500 and attracts 1000 viewers. A television ad costs $2000 and attracts 8000 viewers. To avoid annoying customers, the city has limited the number of radio ads from a single company to 10. In addition, at most a third of the total number of ads should be television ads and at least 20% of the ads should be newspaper ads. If the weekly budget is $100000, how many ads of each type should be run in order to maximize the number of viewers?", "order_mapping": {"newspaper ads": 0, "radio ads": 1, "television ads": 2, "newspaper ad": 0, "radio ad": 1, "television ad": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of viewers", "terms": {"newspaper ad": "5000", "radio ad": "1000", "television ad": "8000"}}, "const_declarations": [{"type": "upperbound", "direction": "limited the number", "limit": "10", "var": "radio ads", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "television ads", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "newspaper ads", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "100000", "terms": {"newspaper ad": "1200", "radio ad": "500", "television ad": "2000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of newspaper ads\n- y: Number of radio ads\n- z: Number of television ads\n\nObjective:\n- The goal is to maximize the number of viewers. The expected viewership for each type of ad is given as follows: newspaper ad attracts 5000 viewers, radio ad attracts 1000 viewers, and television ad attracts 8000 viewers. Therefore, the objective function is: Maximize 5000x + 1000y + 8000z\n\nConstraints:\n- The weekly budget is $100000, so the cost constraint is: 1200x + 500y + 2000z <= 100000.\n- The city has limited the number of radio ads from a single company to 10, leading to the constraint: y <= 10.\n- At most a third of the total number of ads should be television ads, resulting in the constraint: z <= (x + y + z)/3.\n- At least 20% of the ads should be newspaper ads, leading to the constraint: x >= 0.20(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5000x + 1000y + 8000z\nConstraints:\n1200x + 500y + 2000z <= 100000\ny <= 10\nz <= (x + y + z)/3\nx >= 0.20(x + y + z)", "canonical": {"objective": [-5000.0, -1000.0, -8000.0], "constraints": [[1200.0, 500.0, 2000.0, 100000.0], [0.0, 1.0, 0.0, 10.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.8, 0.2, 0.2, 0.0]]}, "solution": {"x": 80, "y": 0, "z": 2}, "pseudo_model": "\nDecision Variables:\n- Number of newspaper ads: NewspaperAds\n- Number of radio ads: RadioAds\n- Number of television ads: TelevisionAds\n\nConstraints:\n- The number of radio ads is limited to 10:\n  RadioAds <= 10\n- At most a third of the total number of ads should be television ads:\n  TelevisionAds <= 1/3 * (NewspaperAds + RadioAds + TelevisionAds)\n- At least 20% of the ads should be newspaper ads:\n  NewspaperAds >= 0.20 * (NewspaperAds + RadioAds + TelevisionAds)\n- The weekly budget is $100000:\n  1200 * NewspaperAds + 500 * RadioAds + 2000 * TelevisionAds <= 100000\n\nObjective:\n- Maximize the number of viewers (5000 viewers per newspaper ad, 1000 viewers per radio ad, 8000 viewers per television ad):\n  5000 * NewspaperAds + 1000 * RadioAds + 8000 * TelevisionAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewspaperAds = intvar(0, 999999999)  # Number of newspaper ads\nRadioAds = intvar(0, 999999999)  # Number of radio ads\nTelevisionAds = intvar(0, 999999999)  # Number of television ads\n\n# Constraints\nm = Model()\n\n# The city has limited the number of radio ads from a single company to 10:\nm += RadioAds <= 10\n# At most a third of the total number of ads should be television ads:\nm += TelevisionAds <= (1/3) * (NewspaperAds + RadioAds + TelevisionAds)\n# At least 20% of the ads should be newspaper ads:\nm += NewspaperAds >= 0.20 * (NewspaperAds + RadioAds + TelevisionAds)\n# Weekly budget is $100000:\nm += 1200 * NewspaperAds + 500 * RadioAds + 2000 * TelevisionAds <= 100000\n\n# Objective\n# Maximize the number of viewers (5000 viewers per newspaper ad, 1000 viewers per radio ad, 8000 viewers per television ad):\nm.maximize(5000 * NewspaperAds + 1000 * RadioAds + 8000 * TelevisionAds)\n", "entities": [{"start": 90, "end": 103, "word": "newspaper ads", "entity_group": "VAR", "score": 0.9999756960817979}, {"start": 106, "end": 115, "word": "radio ads", "entity_group": "VAR", "score": 0.9999626047645198}, {"start": 122, "end": 136, "word": "television ads", "entity_group": "VAR", "score": 0.999955025643563}, {"start": 212, "end": 224, "word": "newspaper ad", "entity_group": "VAR", "score": 0.9999860089479391}, {"start": 233, "end": 237, "word": "1200", "entity_group": "PARAM", "score": 0.9994290814802589}, {"start": 251, "end": 255, "word": "5000", "entity_group": "PARAM", "score": 0.9996999738723605}, {"start": 256, "end": 263, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9988113087180212}, {"start": 268, "end": 276, "word": "radio ad", "entity_group": "VAR", "score": 0.9999837699277973}, {"start": 285, "end": 288, "word": "500", "entity_group": "PARAM", "score": 0.9994291183260683}, {"start": 302, "end": 306, "word": "1000", "entity_group": "PARAM", "score": 0.9996999738723608}, {"start": 307, "end": 314, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9988113087180214}, {"start": 319, "end": 332, "word": "television ad", "entity_group": "VAR", "score": 0.9999837699277982}, {"start": 341, "end": 345, "word": "2000", "entity_group": "PARAM", "score": 0.9995808095330729}, {"start": 359, "end": 363, "word": "8000", "entity_group": "PARAM", "score": 0.9996928037719304}, {"start": 364, "end": 371, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9991189886389399}, {"start": 417, "end": 435, "word": "limited the number", "entity_group": "CONST_DIR", "score": 0.9715183869739309}, {"start": 439, "end": 448, "word": "radio ads", "entity_group": "VAR", "score": 0.9998718079507527}, {"start": 474, "end": 476, "word": "10", "entity_group": "LIMIT", "score": 0.9992685422635857}, {"start": 493, "end": 500, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9950901719740062}, {"start": 503, "end": 508, "word": "third", "entity_group": "LIMIT", "score": 0.9934598964537772}, {"start": 546, "end": 560, "word": "television ads", "entity_group": "VAR", "score": 0.9999555577446119}, {"start": 565, "end": 573, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986830281507274}, {"start": 574, "end": 578, "word": "20 %", "entity_group": "LIMIT", "score": 0.9827047452280959}, {"start": 600, "end": 613, "word": "newspaper ads", "entity_group": "VAR", "score": 0.999976460890746}, {"start": 630, "end": 636, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9978786180771774}, {"start": 642, "end": 648, "word": "100000", "entity_group": "LIMIT", "score": 0.999519854621471}, {"start": 703, "end": 711, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.997031997142856}, {"start": 716, "end": 733, "word": "number of viewers", "entity_group": "OBJ_NAME", "score": 0.9884086799764854}]}
{"doc_id": "1581587735", "document": "James has available a field of 120 square feet in which he plants aster flowers and stonecrops. The seed for aster costs $20 per square foot. The seed for stonecrops costs $45 per square foot. James has available a budget of $5000 to spend on seeds. The profit per square foot of aster flowers is $60 and the profit per square foot of stonecrops is $80. Find the optimal solution for James in order to maximize profit.", "order_mapping": {"aster flowers": 0, "stonecrops.": 1, "aster": 0, "stonecrops": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"aster flowers": "60", "stonecrops": "80"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "120", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "5000", "terms": {"aster": "20", "stonecrops": "45"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Square feet of land planted with aster flowers\n- y: Square feet of land planted with stonecrops\n\nObjective:\n- James aims to maximize his profit. The profit per square foot of aster flowers is $60 and the profit per square foot of stonecrops is $80. Therefore, the objective function is: Maximize 60x + 80y\n\nConstraints:\n- James has a total of 120 square feet of land available for planting, leading to the constraint: x + y <= 120.\n- James has a budget of $5000 to spend on seeds. The seed for aster costs $20 per square foot and the seed for stonecrops costs $45 per square foot, resulting in the constraint: 20x + 45y <= 5000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 60x + 80y\nConstraints:\nx + y <= 120\n20x + 45y <= 5000", "canonical": {"objective": [-60.0, -80.0], "constraints": [[1.0, 1.0, 120.0], [20.0, 45.0, 5000.0]]}, "solution": {"x": 16, "y": 104}, "pseudo_model": "\nDecision Variables:\n- Square feet of aster flowers planted: Aster\n- Square feet of stonecrops planted: Stonecrops\n\nConstraints:\n- Total area planted should not exceed 120 square feet:\n  Aster + Stonecrops <= 120\n- Total cost of seeds should not exceed $5000 (Aster: $20/sq ft, Stonecrops: $45/sq ft):\n  20 * Aster + 45 * Stonecrops <= 5000\n\nObjective:\n- Maximize profit (Aster: $60/sq ft, Stonecrops: $80/sq ft):\n  60 * Aster + 80 * Stonecrops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAster = intvar(0, 999999999)  # Square feet of aster flowers planted\nStonecrops = intvar(0, 999999999)  # Square feet of stonecrops planted\n\n# Constraints\nm = Model()\n\n# Total area planted should not exceed 120 square feet:\nm += Aster + Stonecrops <= 120\n# Total cost of seeds should not exceed $5000 (Aster: $20/sq ft, Stonecrops: $45/sq ft):\nm += 20 * Aster + 45 * Stonecrops <= 5000\n\n# Objective\n# Maximize profit (Aster: $60/sq ft, Stonecrops: $80/sq ft):\nm.maximize(60 * Aster + 80 * Stonecrops)\n", "entities": [{"start": 10, "end": 19, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990409496805751}, {"start": 31, "end": 34, "word": "120", "entity_group": "LIMIT", "score": 0.9990225574448841}, {"start": 66, "end": 79, "word": "aster flowers", "entity_group": "VAR", "score": 0.9999750392990073}, {"start": 84, "end": 94, "word": "stonecrops", "entity_group": "VAR", "score": 0.9997825132422711}, {"start": 110, "end": 115, "word": "aster", "entity_group": "VAR", "score": 0.999520845602521}, {"start": 124, "end": 126, "word": "20", "entity_group": "PARAM", "score": 0.995156648102049}, {"start": 158, "end": 168, "word": "stonecrops", "entity_group": "VAR", "score": 0.9995938169644707}, {"start": 177, "end": 179, "word": "45", "entity_group": "PARAM", "score": 0.9974736379859295}, {"start": 220, "end": 226, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9918392695102886}, {"start": 232, "end": 236, "word": "5000", "entity_group": "LIMIT", "score": 0.998724261658001}, {"start": 261, "end": 267, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999757369043184}, {"start": 287, "end": 300, "word": "aster flowers", "entity_group": "VAR", "score": 0.9999790286835785}, {"start": 306, "end": 308, "word": "60", "entity_group": "PARAM", "score": 0.9996979284395827}, {"start": 317, "end": 323, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998104781234575}, {"start": 343, "end": 353, "word": "stonecrops", "entity_group": "VAR", "score": 0.9976430859044348}, {"start": 359, "end": 361, "word": "80", "entity_group": "PARAM", "score": 0.9994955017369439}, {"start": 412, "end": 420, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.992872466701766}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996184799183387}]}
{"doc_id": "-92144789", "document": "Theta Electronics must determine how many keyboards and PC controllers to keep in stock. A keyboard requires 12 sq ft of floor space, whereas a PC controller requires 4 sq ft. The store has 200 sq ft of floor space available. The profit per keyboard sold is $20 and the profit per PC controller sold is $10. The store stocks only keyboards and PC controllers. Past sales dictate that at least 35% of all items in stock be PC controllers. Finally, a keyboard ties up $200 in capital, and a PC controller, $150. The store wants to have a maximum of $5,000 worth of capital tied up at any time. Formulate an LP that can be used to maximize profit.", "order_mapping": {"keyboards": 0, "PC controllers": 1, "keyboard": 0, "PC controller": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"keyboard": "20", "PC controller": "10"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "200", "terms": {"keyboard": "12", "PC controller": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "5,000", "terms": {"keyboard": "200", "PC controller": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "35%", "var": "PC controllers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of keyboards to keep in stock\n- y: Number of PC controllers to keep in stock\n\nObjective:\n- The store aims to maximize its profit. The profit per keyboard sold is $20 and the profit per PC controller sold is $10. Therefore, the objective function is: Maximize 20x + 10y\n\nConstraints:\n- The store has 200 sq ft of floor space available, and each keyboard requires 12 sq ft and each PC controller requires 4 sq ft. This leads to the constraint: 12x + 4y <= 200.\n- The store wants to have a maximum of $5,000 worth of capital tied up at any time. Given that a keyboard ties up $200 in capital and a PC controller ties up $150, the constraint is: 200x + 150y <= 5000.\n- Past sales dictate that at least 35% of all items in stock be PC controllers, leading to the constraint: y >= 0.35(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 10y\nConstraints:\n12x + 4y <= 200\n200x + 150y <= 5000\ny >= 0.35(x + y)", "canonical": {"objective": [-20.0, -10.0], "constraints": [[12.0, 4.0, 200.0], [200.0, 150.0, 5000.0], [0.35, -0.65, 0.0]]}, "solution": {"x": 10, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of keyboards to keep in stock: Keyboards\n- Number of PC controllers to keep in stock: PCControllers\n\nConstraints:\n- The store has 200 sq ft of floor space available:\n  12 * Keyboards + 4 * PCControllers <= 200\n- The store wants to have a maximum of $5,000 worth of capital tied up at any time:\n  200 * Keyboards + 150 * PCControllers <= 5000\n- At least 35% of all items in stock must be PC controllers:\n  PCControllers >= 0.35 * (Keyboards + PCControllers)\n\nObjective:\n- Maximize profit (20 dollars per keyboard, 10 dollars per PC controller):\n  20 * Keyboards + 10 * PCControllers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKeyboards = intvar(0, 999999999)  # Number of keyboards to keep in stock\nPCControllers = intvar(0, 999999999)  # Number of PC controllers to keep in stock\n\n# Constraints\nm = Model()\n\n# The store has 200 sq ft of floor space available:\nm += 12 * Keyboards + 4 * PCControllers <= 200\n# The store wants to have a maximum of $5,000 worth of capital tied up at any time:\nm += 200 * Keyboards + 150 * PCControllers <= 5000\n# Past sales dictate that at least 35% of all items in stock be PC controllers:\nm += PCControllers >= 0.35 * (Keyboards + PCControllers)\n\n# Objective\n# Maximize profit (20 dollars per keyboard, 10 dollars per PC controller):\nm.maximize(20 * Keyboards + 10 * PCControllers)\n", "entities": [{"start": 42, "end": 51, "word": "keyboards", "entity_group": "VAR", "score": 0.9993621621668546}, {"start": 56, "end": 70, "word": "PC controllers", "entity_group": "VAR", "score": 0.999976260147291}, {"start": 92, "end": 100, "word": "keyboard", "entity_group": "VAR", "score": 0.9995433704124779}, {"start": 110, "end": 112, "word": "12", "entity_group": "PARAM", "score": 0.9994979995036422}, {"start": 146, "end": 159, "word": "PC controller", "entity_group": "VAR", "score": 0.9999648406091051}, {"start": 169, "end": 170, "word": "4", "entity_group": "PARAM", "score": 0.999475685141486}, {"start": 189, "end": 192, "word": "has", "entity_group": "CONST_DIR", "score": 0.9941040960708292}, {"start": 193, "end": 196, "word": "200", "entity_group": "LIMIT", "score": 0.9975669653235328}, {"start": 234, "end": 240, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999064392012682}, {"start": 245, "end": 253, "word": "keyboard", "entity_group": "VAR", "score": 0.9993866786186825}, {"start": 264, "end": 266, "word": "20", "entity_group": "PARAM", "score": 0.9994623197259169}, {"start": 275, "end": 281, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999382648485747}, {"start": 286, "end": 299, "word": "PC controller", "entity_group": "VAR", "score": 0.999903672927964}, {"start": 310, "end": 312, "word": "10", "entity_group": "PARAM", "score": 0.9995935781928803}, {"start": 337, "end": 346, "word": "keyboards", "entity_group": "VAR", "score": 0.9996736675526954}, {"start": 351, "end": 365, "word": "PC controllers", "entity_group": "VAR", "score": 0.9999839632610641}, {"start": 392, "end": 400, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990022334544613}, {"start": 401, "end": 405, "word": "35 %", "entity_group": "LIMIT", "score": 0.9236180459175082}, {"start": 431, "end": 445, "word": "PC controllers", "entity_group": "VAR", "score": 0.9999785285676536}, {"start": 460, "end": 468, "word": "keyboard", "entity_group": "VAR", "score": 0.9990465100537685}, {"start": 479, "end": 482, "word": "200", "entity_group": "PARAM", "score": 0.9995832489985164}, {"start": 502, "end": 515, "word": "PC controller", "entity_group": "VAR", "score": 0.9998113038840267}, {"start": 520, "end": 523, "word": "150", "entity_group": "PARAM", "score": 0.9996592803665268}, {"start": 552, "end": 559, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9942863603418286}, {"start": 565, "end": 570, "word": "5,000", "entity_group": "LIMIT", "score": 0.9983784445544717}, {"start": 646, "end": 654, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9931770878204628}, {"start": 655, "end": 661, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998856570334067}]}
{"doc_id": "789180705", "document": "A sandwich shop produces premium and regular versions of their sandwiches. A premium sandwich takes 6 minutes of preparation and requires 5 slices of meat to make. A regular sandwich takes 4 minutes of preparation and requires 1 slice of meat to make. The shop has in total 400 minutes of preparation time and 100 slices of meat. If the profit per premium sandwich is $5 and the profit per regular sandwich is $1, how many of each should be made to maximize profit?", "order_mapping": {"premium": 0, "regular": 1, "premium sandwich": 0, "regular sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular sandwich": "1", "premium sandwich": "5"}}, "const_declarations": [{"type": "linear", "direction": "in total", "limit": "400", "terms": {"premium sandwich": "6", "regular sandwich": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "in total", "limit": "100", "terms": {"regular sandwich": "1", "premium sandwich": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of premium sandwiches\n- y: Number of regular sandwiches\n\nObjective:\n- The sandwich shop aims to maximize its profit. The profit per premium sandwich is $5 and the profit per regular sandwich is $1. Therefore, the objective function is: Maximize 5x + y\n\nConstraints:\n- The shop has a total of 400 minutes of preparation time, and a premium sandwich takes 6 minutes of preparation and a regular sandwich takes 4 minutes. This leads to the constraint: 6x + 4y <= 400.\n- The shop has a total of 100 slices of meat, and a premium sandwich requires 5 slices of meat and a regular sandwich requires 1 slice. This results in the constraint: 5x + y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + y\nConstraints:\n6x + 4y <= 400\n5x + y <= 100", "canonical": {"objective": [-5.0, -1.0], "constraints": [[6.0, 4.0, 400.0], [5.0, 1.0, 100.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of premium sandwiches made: PremiumSandwiches\n- Number of regular sandwiches made: RegularSandwiches\n\nConstraints:\n- Total preparation time for all sandwiches should not exceed 400 minutes:\n  6 * PremiumSandwiches + 4 * RegularSandwiches <= 400\n- Total slices of meat used should not exceed 100 slices:\n  5 * PremiumSandwiches + 1 * RegularSandwiches <= 100\n\nObjective:\n- Maximize profit (5 dollars per premium sandwich, 1 dollar per regular sandwich):\n  5 * PremiumSandwiches + 1 * RegularSandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumSandwiches = intvar(0, 999999999)  # Number of premium sandwiches made\nRegularSandwiches = intvar(0, 999999999)  # Number of regular sandwiches made\n\n# Constraints\nm = Model()\n\n# Total preparation time for all sandwiches should not exceed 400 minutes:\n# (6 minutes per premium sandwich, 4 minutes per regular sandwich)\nm += 6 * PremiumSandwiches + 4 * RegularSandwiches <= 400\n\n# Total slices of meat used should not exceed 100 slices:\n# (5 slices per premium sandwich, 1 slice per regular sandwich)\nm += 5 * PremiumSandwiches + 1 * RegularSandwiches <= 100\n\n# Objective\n# Maximize profit (5 dollars per premium sandwich, 1 dollar per regular sandwich):\nm.maximize(5 * PremiumSandwiches + 1 * RegularSandwiches)\n", "entities": [{"start": 25, "end": 32, "word": "premium", "entity_group": "VAR", "score": 0.9997357022458947}, {"start": 37, "end": 44, "word": "regular", "entity_group": "VAR", "score": 0.9993356996205741}, {"start": 78, "end": 94, "word": "premium sandwich", "entity_group": "VAR", "score": 0.9999851446554926}, {"start": 101, "end": 102, "word": "6", "entity_group": "PARAM", "score": 0.999632841351042}, {"start": 139, "end": 140, "word": "5", "entity_group": "PARAM", "score": 0.9996667073270395}, {"start": 168, "end": 184, "word": "regular sandwich", "entity_group": "VAR", "score": 0.9999816492959683}, {"start": 191, "end": 192, "word": "4", "entity_group": "PARAM", "score": 0.9996918673742811}, {"start": 229, "end": 230, "word": "1", "entity_group": "PARAM", "score": 0.9994327621600074}, {"start": 268, "end": 276, "word": "in total", "entity_group": "CONST_DIR", "score": 0.9877569825016025}, {"start": 277, "end": 280, "word": "400", "entity_group": "LIMIT", "score": 0.9994183043468168}, {"start": 313, "end": 316, "word": "100", "entity_group": "LIMIT", "score": 0.9994932332918031}, {"start": 341, "end": 347, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999429828760951}, {"start": 352, "end": 368, "word": "premium sandwich", "entity_group": "VAR", "score": 0.9999468584436265}, {"start": 374, "end": 375, "word": "5", "entity_group": "PARAM", "score": 0.9995594368044923}, {"start": 384, "end": 390, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354496881062}, {"start": 395, "end": 411, "word": "regular sandwich", "entity_group": "VAR", "score": 0.9999318285097081}, {"start": 417, "end": 418, "word": "1", "entity_group": "PARAM", "score": 0.999679542865528}, {"start": 456, "end": 464, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 465, "end": 471, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-849740004", "document": "Pierre is working on his e-commerce dream. He buys sandals and slippers for $50 and $20 respectively, and plans to re-sell them. He knows that, for this summer, the demand for sandals is at least three times the demand for the slippers. Since he wants to start small, Pierre decides to invest at most $3000 buying for his first inventory. If the profit per sandal sold is $70 and the profit per slipper sold is $30, how many of each should he buy to maximize his profit?", "order_mapping": {"sandals": 0, "slippers": 1, "sandal": 0, "slipper": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sandal": "70", "slipper": "30"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "3000", "terms": {"sandals": "50", "slippers": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "sandals", "direction": "at least", "param": "three times", "y_var": "slippers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sandals bought\n- y: Number of slippers bought\n\nObjective:\n- Pierre aims to maximize his profit. The profit per sandal sold is $70 and the profit per slipper sold is $30. Therefore, the objective function is: Maximize 70x + 30y\n\nConstraints:\n- Pierre plans to invest at most $3000 buying for his first inventory, leading to the constraint: 50x + 20y <= 3000.\n- The demand for sandals is at least three times the demand for the slippers, resulting in the constraint: x >= 3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 30y\nConstraints:\n50x + 20y <= 3000\nx >= 3y", "canonical": {"objective": [-70.0, -30.0], "constraints": [[50.0, 20.0, 3000.0], [-1.0, 3.0, 0.0]]}, "solution": {"x": 54, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of sandals bought: Sandals\n- Number of slippers bought: Slippers\n\nConstraints:\n- Total investment for buying sandals and slippers should not exceed $3000:\n  50 * Sandals + 20 * Slippers <= 3000\n- Demand for sandals is at least three times the demand for slippers:\n  Sandals >= 3 * Slippers\n\nObjective:\n- Maximize profit (Profit per sandal is $70, profit per slipper is $30):\n  70 * Sandals + 30 * Slippers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSandals = intvar(0, 999999999)  # Number of sandals Pierre buys\nSlippers = intvar(0, 999999999)  # Number of slippers Pierre buys\n\n# Constraints\nm = Model()\n\n# Pierre decides to invest at most $3000 buying for his first inventory:\nm += 50 * Sandals + 20 * Slippers <= 3000\n# The demand for sandals is at least three times the demand for the slippers:\nm += Sandals >= 3 * Slippers\n\n# Objective\n# Maximize profit (Profit per sandal sold is $70, profit per slipper sold is $30):\nm.maximize(70 * Sandals + 30 * Slippers)\n", "entities": [{"start": 54, "end": 61, "word": "sandals", "entity_group": "VAR", "score": 0.9995969916863533}, {"start": 66, "end": 74, "word": "slippers", "entity_group": "VAR", "score": 0.9995734983402398}, {"start": 81, "end": 83, "word": "50", "entity_group": "PARAM", "score": 0.9995601442397614}, {"start": 90, "end": 92, "word": "20", "entity_group": "PARAM", "score": 0.9997021603626722}, {"start": 187, "end": 194, "word": "sandals", "entity_group": "VAR", "score": 0.9993264590024427}, {"start": 198, "end": 206, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979331348794611}, {"start": 207, "end": 218, "word": "three times", "entity_group": "PARAM", "score": 0.8517242699034028}, {"start": 238, "end": 246, "word": "slippers", "entity_group": "VAR", "score": 0.9997646002510342}, {"start": 306, "end": 313, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9964802048469434}, {"start": 316, "end": 320, "word": "3000", "entity_group": "LIMIT", "score": 0.9996463534607563}, {"start": 361, "end": 367, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999027461755723}, {"start": 372, "end": 378, "word": "sandal", "entity_group": "VAR", "score": 0.9988900733603784}, {"start": 389, "end": 391, "word": "70", "entity_group": "PARAM", "score": 0.9995965170761609}, {"start": 400, "end": 406, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386216308701}, {"start": 411, "end": 418, "word": "slipper", "entity_group": "VAR", "score": 0.9990377006134996}, {"start": 429, "end": 431, "word": "30", "entity_group": "PARAM", "score": 0.999653033336774}, {"start": 468, "end": 476, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997615763846747}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999262676825229}]}
{"doc_id": "-913047001", "document": "Nova Network wants to design a plan to bid for the job of providing a computer network for city offices. It can build three types of layouts using workstations, servers, and switches. It has 2000 workstations, 500 servers, and 300 switches. A ring layout uses 50 workstations, 20 servers, and 10 switches; a tree layout uses 30 workstations, 15 servers, and 7 switches; and a mesh layout uses 100 workstations, 50 servers, and 30 switches. The net profit is $2000 for each ring layout, $4000 for each tree layout, and $8000 for each mesh layout.  How many layouts of each type should be used to yield maximum profit?", "order_mapping": {"ring layout": 0, "tree layout": 1, "mesh layout": 2}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"ring layout": "2000", "tree layout": "4000", "mesh layout": "8000"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "2000", "terms": {"ring layout": "50", "tree layout": "30", "mesh layout": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "500", "terms": {"ring layout": "20", "tree layout": "15", "mesh layout": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "300", "terms": {"ring layout": "10", "tree layout": "7", "mesh layout": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ring layouts\n- y: Number of tree layouts\n- z: Number of mesh layouts\n\nObjective:\n- The objective is to maximize the profit. The net profit is $2000 for each ring layout, $4000 for each tree layout, and $8000 for each mesh layout. Therefore, the objective function is: Maximize 2000x + 4000y + 8000z\n\nConstraints:\n- The number of workstations, servers, and switches used in the layouts must not exceed the available quantity. This leads to the following constraints:\n    - 50x + 30y + 100z <= 2000 (workstations)\n    - 20x + 15y + 50z <= 500 (servers)\n    - 10x + 7y + 30z <= 300 (switches)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2000x + 4000y + 8000z\nConstraints:\n50x + 30y + 100z <= 2000\n20x + 15y + 50z <= 500\n10x + 7y + 30z <= 300", "canonical": {"objective": [-2000.0, -4000.0, -8000.0], "constraints": [[50.0, 30.0, 100.0, 2000.0], [20.0, 15.0, 50.0, 500.0], [10.0, 7.0, 30.0, 300.0]]}, "solution": {"x": 0, "y": 33, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of ring layouts: RingLayouts\n- Number of tree layouts: TreeLayouts\n- Number of mesh layouts: MeshLayouts\n\nConstraints:\n- Total use of workstations should not exceed 2000:\n  50 * RingLayouts + 30 * TreeLayouts + 100 * MeshLayouts <= 2000\n- Total use of servers should not exceed 500:\n  20 * RingLayouts + 15 * TreeLayouts + 50 * MeshLayouts <= 500\n- Total use of switches should not exceed 300:\n  10 * RingLayouts + 7 * TreeLayouts + 30 * MeshLayouts <= 300\n\nObjective:\n- Maximize profit (2000 dollars for each ring layout, 4000 dollars for each tree layout, 8000 dollars for each mesh layout):\n  2000 * RingLayouts + 4000 * TreeLayouts + 8000 * MeshLayouts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRingLayouts = intvar(0, 999999999)  # Number of ring layouts\nTreeLayouts = intvar(0, 999999999)  # Number of tree layouts\nMeshLayouts = intvar(0, 999999999)  # Number of mesh layouts\n\n# Constraints\nm = Model()\n\n# Constraints on resources (workstations, servers, switches)\n# 2000 workstations available:\nm += 50 * RingLayouts + 30 * TreeLayouts + 100 * MeshLayouts <= 2000\n# 500 servers available:\nm += 20 * RingLayouts + 15 * TreeLayouts + 50 * MeshLayouts <= 500\n# 300 switches available:\nm += 10 * RingLayouts + 7 * TreeLayouts + 30 * MeshLayouts <= 300\n\n# Objective\n# Maximize profit (2000 for each ring layout, 4000 for each tree layout, 8000 for each mesh layout):\nm.maximize(2000 * RingLayouts + 4000 * TreeLayouts + 8000 * MeshLayouts)\n", "entities": [{"start": 191, "end": 194, "word": "has", "entity_group": "CONST_DIR", "score": 0.9915255531980967}, {"start": 195, "end": 199, "word": "2000", "entity_group": "LIMIT", "score": 0.9988056697420274}, {"start": 215, "end": 218, "word": "500", "entity_group": "LIMIT", "score": 0.9995079734713653}, {"start": 233, "end": 236, "word": "300", "entity_group": "LIMIT", "score": 0.9996615117749758}, {"start": 250, "end": 261, "word": "ring layout", "entity_group": "VAR", "score": 0.9999501717312067}, {"start": 267, "end": 269, "word": "50", "entity_group": "PARAM", "score": 0.9989508810732121}, {"start": 285, "end": 287, "word": "20", "entity_group": "PARAM", "score": 0.9993591105718512}, {"start": 302, "end": 304, "word": "10", "entity_group": "PARAM", "score": 0.9996675658555304}, {"start": 318, "end": 329, "word": "tree layout", "entity_group": "VAR", "score": 0.9999329952544345}, {"start": 335, "end": 337, "word": "30", "entity_group": "PARAM", "score": 0.9989510233039599}, {"start": 353, "end": 355, "word": "15", "entity_group": "PARAM", "score": 0.9993593618902943}, {"start": 370, "end": 371, "word": "7", "entity_group": "PARAM", "score": 0.999615198207483}, {"start": 389, "end": 400, "word": "mesh layout", "entity_group": "VAR", "score": 0.9999468286270152}, {"start": 406, "end": 409, "word": "100", "entity_group": "PARAM", "score": 0.9992436032925895}, {"start": 425, "end": 427, "word": "50", "entity_group": "PARAM", "score": 0.9993591928079897}, {"start": 442, "end": 444, "word": "30", "entity_group": "PARAM", "score": 0.9996846683059919}, {"start": 464, "end": 470, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999591084762041}, {"start": 476, "end": 480, "word": "2000", "entity_group": "PARAM", "score": 0.9992303104859132}, {"start": 490, "end": 501, "word": "ring layout", "entity_group": "VAR", "score": 0.9998875789530052}, {"start": 506, "end": 510, "word": "4000", "entity_group": "PARAM", "score": 0.9995197847958657}, {"start": 520, "end": 531, "word": "tree layout", "entity_group": "VAR", "score": 0.9996193861419704}, {"start": 540, "end": 544, "word": "8000", "entity_group": "PARAM", "score": 0.9996011486353819}, {"start": 554, "end": 565, "word": "mesh layout", "entity_group": "VAR", "score": 0.9998638373557222}, {"start": 622, "end": 629, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.994833813887488}, {"start": 630, "end": 636, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999972216138042}]}
{"doc_id": "1000020458", "document": "A company makes kayaks and canoes. The company has available 8000 minutes for assembly and 4000 minutes for quality checking. Each kayak takes 60 minutes of assembly and 15 minutes of quality checking. Each canoe takes 80 minutes of assembly and 25 minutes of quality checking. If the profit per kayak is $300 and the profit per canoe is $450, how many of each should they make to maximize profit?", "order_mapping": {"kayaks": 0, "canoes": 1, "kayak": 0, "canoe": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"kayak": "300", "canoe": "450"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "8000", "terms": {"kayak": "60", "canoe": "80"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"kayak": "15", "canoe": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of kayaks\n- y: Number of canoes\n\nObjective:\n- The company aims to maximize its profit. The profit per kayak is $300 and the profit per canoe is $450. Therefore, the objective function is: Maximize 300x + 450y\n\nConstraints:\n- The company has 8000 minutes available for assembly, and each kayak takes 60 minutes and each canoe takes 80 minutes. This leads to the constraint: 60x + 80y <= 8000.\n- The company also has 4000 minutes available for quality checking, and each kayak takes 15 minutes and each canoe takes 25 minutes. This results in the constraint: 15x + 25y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 450y\nConstraints:\n60x + 80y <= 8000\n15x + 25y <= 4000", "canonical": {"objective": [-300.0, -450.0], "constraints": [[60.0, 80.0, 8000.0], [15.0, 25.0, 4000.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of kayaks made: Kayaks\n- Number of canoes made: Canoes\n\nConstraints:\n- Total assembly time for kayaks and canoes should not exceed 8000 minutes:\n  60 * Kayaks + 80 * Canoes <= 8000\n- Total quality checking time for kayaks and canoes should not exceed 4000 minutes:\n  15 * Kayaks + 25 * Canoes <= 4000\n\nObjective:\n- Maximize profit (300 dollars per kayak, 450 dollars per canoe):\n  300 * Kayaks + 450 * Canoes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKayaks = intvar(0, 999999999)  # Number of kayaks made\nCanoes = intvar(0, 999999999)  # Number of canoes made\n\n# Constraints\nm = Model()\n\n# Total assembly time for kayaks and canoes should not exceed 8000 minutes:\nm += 60 * Kayaks + 80 * Canoes <= 8000\n# Total quality checking time for kayaks and canoes should not exceed 4000 minutes:\nm += 15 * Kayaks + 25 * Canoes <= 4000\n\n# Objective\n# Maximize profit (300 dollars per kayak, 450 dollars per canoe):\nm.maximize(300 * Kayaks + 450 * Canoes)\n", "entities": [{"start": 16, "end": 22, "word": "kayaks", "entity_group": "VAR", "score": 0.9994435382395296}, {"start": 27, "end": 33, "word": "canoes", "entity_group": "VAR", "score": 0.9997492964625257}, {"start": 52, "end": 61, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992010434935374}, {"start": 62, "end": 66, "word": "8000", "entity_group": "LIMIT", "score": 0.999403264401142}, {"start": 92, "end": 96, "word": "4000", "entity_group": "LIMIT", "score": 0.9997103745076931}, {"start": 133, "end": 138, "word": "kayak", "entity_group": "VAR", "score": 0.9996248426844953}, {"start": 145, "end": 147, "word": "60", "entity_group": "PARAM", "score": 0.9996387103303316}, {"start": 172, "end": 174, "word": "15", "entity_group": "PARAM", "score": 0.9996935896104988}, {"start": 210, "end": 215, "word": "canoe", "entity_group": "VAR", "score": 0.9996544749467509}, {"start": 222, "end": 224, "word": "80", "entity_group": "PARAM", "score": 0.9996593145994255}, {"start": 249, "end": 251, "word": "25", "entity_group": "PARAM", "score": 0.9997192033108533}, {"start": 289, "end": 295, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997353840053658}, {"start": 300, "end": 305, "word": "kayak", "entity_group": "VAR", "score": 0.9994143151373611}, {"start": 311, "end": 314, "word": "300", "entity_group": "PARAM", "score": 0.999347881400514}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465473}, {"start": 334, "end": 339, "word": "canoe", "entity_group": "VAR", "score": 0.9990888329773521}, {"start": 345, "end": 348, "word": "450", "entity_group": "PARAM", "score": 0.9994707590399271}, {"start": 388, "end": 396, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 397, "end": 403, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "2054560331", "document": "A cat shelter feeds their cats using cat foods and canned tuna. Each packet of cat food costs $12 while each can of tuna costs $7. Each packet of cat food contains 5 grams of carbohydrates, 15 grams of vitamins, and 12 grams of protein. Each can of tuna contains 7 grams of carbohydrates, 12 grams of vitamins, and 15 grams of protein. The cat shelter needs in total 700 grams of carbohydrates, 1100 grams of vitamins, and 900 grams of protein to feed their cats. How many of each should they buy to minimize costs?", "order_mapping": {"cat foods": 0, "canned tuna": 1, "cat food": 0, "tuna": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"cat food": "12", "tuna": "7"}}, "const_declarations": [{"type": "linear", "direction": "in total", "limit": "700", "terms": {"cat food": "5", "tuna": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "in total", "limit": "1100", "terms": {"cat food": "15", "tuna": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "in total", "limit": "900", "terms": {"cat food": "12", "tuna": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packets of cat food\n- y: Number of cans of tuna\n\nObjective:\n- The shelter aims to minimize the cost of feeding the cats. Each packet of cat food costs $12 and each can of tuna costs $7. Therefore, the objective function is: Minimize 12x + 7y\n\nConstraints:\n- The shelter needs in total 700 grams of carbohydrates, 1100 grams of vitamins, and 900 grams of protein to feed their cats. This leads to the following constraints:\n    - 5x + 7y >= 700 (carbohydrates constraint)\n    - 15x + 12y >= 1100 (vitamins constraint)\n    - 12x + 15y >= 900 (protein constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 12x + 7y\nConstraints:\n5x + 7y >= 700\n15x + 12y >= 1100\n12x + 15y >= 900", "canonical": {"objective": [12.0, 7.0], "constraints": [[-5.0, -7.0, -700.0], [-15.0, -12.0, -1100.0], [-12.0, -15.0, -900.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of packets of cat food bought: CatFood\n- Number of cans of tuna bought: Tuna\n\nConstraints:\n- Total carbohydrates needed is at least 700 grams:\n  5 * CatFood + 7 * Tuna >= 700\n- Total vitamins needed is at least 1100 grams:\n  15 * CatFood + 12 * Tuna >= 1100\n- Total protein needed is at least 900 grams:\n  12 * CatFood + 15 * Tuna >= 900\n\nObjective:\n- Minimize costs (12 dollars per packet of cat food, 7 dollars per can of tuna):\n  12 * CatFood + 7 * Tuna\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCatFood = intvar(0, 999999999)  # Number of packets of cat food\nTuna = intvar(0, 999999999)  # Number of cans of tuna\n\n# Constraints\nm = Model()\n\n# Total carbohydrates needed is at least 700 grams:\nm += 5 * CatFood + 7 * Tuna >= 700\n# Total vitamins needed is at least 1100 grams:\nm += 15 * CatFood + 12 * Tuna >= 1100\n# Total protein needed is at least 900 grams:\nm += 12 * CatFood + 15 * Tuna >= 900\n\n# Objective\n# Minimize costs (12 dollars per packet of cat food, 7 dollars per can of tuna):\nm.minimize(12 * CatFood + 7 * Tuna)\n", "entities": [{"start": 37, "end": 46, "word": "cat foods", "entity_group": "VAR", "score": 0.99998423931363}, {"start": 51, "end": 62, "word": "canned tuna", "entity_group": "VAR", "score": 0.999979797052398}, {"start": 80, "end": 88, "word": "cat food", "entity_group": "VAR", "score": 0.9999680836488961}, {"start": 89, "end": 94, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992333114752291}, {"start": 97, "end": 99, "word": "12", "entity_group": "PARAM", "score": 0.9996494275749551}, {"start": 118, "end": 122, "word": "tuna", "entity_group": "VAR", "score": 0.9994192663727469}, {"start": 123, "end": 128, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9930655117573153}, {"start": 131, "end": 132, "word": "7", "entity_group": "PARAM", "score": 0.9995344176883566}, {"start": 150, "end": 158, "word": "cat food", "entity_group": "VAR", "score": 0.9999524161809275}, {"start": 168, "end": 169, "word": "5", "entity_group": "PARAM", "score": 0.9996144783003358}, {"start": 195, "end": 197, "word": "15", "entity_group": "PARAM", "score": 0.9997354638098179}, {"start": 222, "end": 224, "word": "12", "entity_group": "PARAM", "score": 0.9996143493040448}, {"start": 256, "end": 260, "word": "tuna", "entity_group": "VAR", "score": 0.9989251438558836}, {"start": 270, "end": 271, "word": "7", "entity_group": "PARAM", "score": 0.9996543282030645}, {"start": 297, "end": 299, "word": "12", "entity_group": "PARAM", "score": 0.9997354584090096}, {"start": 324, "end": 326, "word": "15", "entity_group": "PARAM", "score": 0.99946810269878}, {"start": 368, "end": 376, "word": "in total", "entity_group": "CONST_DIR", "score": 0.9971201020524089}, {"start": 377, "end": 380, "word": "700", "entity_group": "LIMIT", "score": 0.9995238822582332}, {"start": 406, "end": 410, "word": "1100", "entity_group": "LIMIT", "score": 0.9997521103001412}, {"start": 435, "end": 438, "word": "900", "entity_group": "LIMIT", "score": 0.9995694034368585}, {"start": 513, "end": 521, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997145442954305}, {"start": 522, "end": 527, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999123820191416}]}
{"doc_id": "1567569708", "document": "Robert would like to mix his colored cocktails. He has a white cocktail that has 7% alcohol and 10% sugar and a green cocktail that has 2% alcohol and 25% sugar. The white cocktail costs $5.5 per kilogram and the green cocktail costs $12 per kilogram. He wants to create a super cocktail that has a minimum of 5 kilograms of alcohol and 25 kilograms of sugar. How much of each cocktail should he mix in order to create the super cocktail at the minimum cost?", "order_mapping": {"white cocktail": 0, "green cocktail": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"green cocktail": "12", "white cocktail": "5.5"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "5", "terms": {"white cocktail": "7%", "green cocktail": "2%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "25", "terms": {"white cocktail": "10%", "green cocktail": "25%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kilograms of white cocktail to mix\n- y: kilograms of green cocktail to mix\n\nObjective:\n- Robert wants to minimize the cost of creating the super cocktail. The white cocktail costs $5.5 per kilogram and the green cocktail costs $12 per kilogram. Therefore, the objective function is: Minimize 5.5x + 12y\n\nConstraints:\n- The super cocktail should have a minimum of 5 kilograms of alcohol, leading to the constraint: 0.07x + 0.02y >= 5\n- The super cocktail should have a minimum of 25 kilograms of sugar, leading to the constraint: 0.10x + 0.25y >= 25\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5.5x + 12y\nConstraints:\n0.07x + 0.02y >= 5\n0.10x + 0.25y >= 25", "canonical": {"objective": [5.5, 12.0], "constraints": [[-0.07, -0.02, -5.0], [-0.1, -0.25, -25.0]]}, "solution": {"x": 50, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Amount of white cocktail in kilograms: WhiteCocktail\n- Amount of green cocktail in kilograms: GreenCocktail\n\nConstraints:\n- The super cocktail needs a minimum of 5 kilograms of alcohol (7% from white cocktail, 2% from green cocktail):\n  0.07 * WhiteCocktail + 0.02 * GreenCocktail >= 5\n- The super cocktail needs a minimum of 25 kilograms of sugar (10% from white cocktail, 25% from green cocktail):\n  0.10 * WhiteCocktail + 0.25 * GreenCocktail >= 25\n\nObjective:\n- Minimize cost ($5.5 per kilogram for white cocktail, $12 per kilogram for green cocktail):\n  5.5 * WhiteCocktail + 12 * GreenCocktail\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWhiteCocktail = intvar(0, 999999999)  # Amount of white cocktail in kilograms\nGreenCocktail = intvar(0, 999999999)  # Amount of green cocktail in kilograms\n\n# Constraints\nm = Model()\n\n# The super cocktail needs a minimum of 5 kilograms of alcohol:\nm += 0.07 * WhiteCocktail + 0.02 * GreenCocktail >= 5\n# The super cocktail needs a minimum of 25 kilograms of sugar:\nm += 0.10 * WhiteCocktail + 0.25 * GreenCocktail >= 25\n\n# Objective\n# Minimize cost ($5.5 per kilogram for white cocktail, $12 per kilogram for green cocktail):\nm.minimize(5.5 * WhiteCocktail + 12 * GreenCocktail)\n", "entities": [{"start": 58, "end": 72, "word": "white cocktail", "entity_group": "VAR", "score": 0.9999078185723186}, {"start": 82, "end": 85, "word": "7 %", "entity_group": "PARAM", "score": 0.9912386349517027}, {"start": 98, "end": 102, "word": "10 %", "entity_group": "PARAM", "score": 0.9952427556927859}, {"start": 115, "end": 129, "word": "green cocktail", "entity_group": "VAR", "score": 0.9998564795164508}, {"start": 139, "end": 142, "word": "2 %", "entity_group": "PARAM", "score": 0.9897516236585472}, {"start": 155, "end": 159, "word": "25 %", "entity_group": "PARAM", "score": 0.9928032892239975}, {"start": 172, "end": 186, "word": "white cocktail", "entity_group": "VAR", "score": 0.9999798839616445}, {"start": 187, "end": 192, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9960493638791575}, {"start": 195, "end": 198, "word": "5.5", "entity_group": "PARAM", "score": 0.9996224792584328}, {"start": 220, "end": 234, "word": "green cocktail", "entity_group": "VAR", "score": 0.9999804823328197}, {"start": 235, "end": 240, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9989851786850202}, {"start": 243, "end": 245, "word": "12", "entity_group": "PARAM", "score": 0.9995681753127781}, {"start": 308, "end": 315, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9991264782414084}, {"start": 319, "end": 320, "word": "5", "entity_group": "LIMIT", "score": 0.9997786411516123}, {"start": 346, "end": 348, "word": "25", "entity_group": "LIMIT", "score": 0.9996216924864612}, {"start": 455, "end": 462, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9915364734692491}, {"start": 463, "end": 467, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9985336344337865}]}
{"doc_id": "794407334", "document": "Theta Electronics makes two phone models: a regular model and a premium model. Each regular model requires 70 minutes of assembly and 25 minutes of software verification. Each premium model requires 100 minutes of assembly and 30 minutes of software verification. The maximum available time for assembly is 6000 minutes and the maximum available time for software verification is 4000 minutes. If the company makes a profit of $200 per regular model and a profit of $500 per premium model, how many of each should be made to maximize profit?", "order_mapping": {"regular model": 0, "premium model": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular model": "200", "premium model": "500"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "6000", "terms": {"regular model": "70", "premium model": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"regular model": "25", "premium model": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular models\n- y: Number of premium models\n\nObjective:\n- The company aims to maximize its profit. The profit per regular model is $200 and the profit per premium model is $500. Therefore, the objective function is: Maximize 200x + 500y\n\nConstraints:\n- The maximum available time for assembly is 6000 minutes, and each regular model requires 70 minutes while each premium model requires 100 minutes. This leads to the constraint: 70x + 100y <= 6000.\n- The maximum available time for software verification is 4000 minutes, and each regular model requires 25 minutes while each premium model requires 30 minutes. This results in the constraint: 25x + 30y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 500y\nConstraints:\n70x + 100y <= 6000\n25x + 30y <= 4000", "canonical": {"objective": [-200.0, -500.0], "constraints": [[70.0, 100.0, 6000.0], [25.0, 30.0, 4000.0]]}, "solution": {"x": 0, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of regular models made: RegularModel\n- Number of premium models made: PremiumModel\n\nConstraints:\n- Assembly time constraint (6000 minutes maximum):\n  70 * RegularModel + 100 * PremiumModel <= 6000\n- Software verification time constraint (4000 minutes maximum):\n  25 * RegularModel + 30 * PremiumModel <= 4000\n\nObjective:\n- Maximize profit ($200 per regular model, $500 per premium model):\n  200 * RegularModel + 500 * PremiumModel\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularModel = intvar(0, 999999999)  # Number of regular models made\nPremiumModel = intvar(0, 999999999)  # Number of premium models made\n\n# Constraints\nm = Model()\n\n# Maximum available time for assembly (6000 minutes):\nm += 70 * RegularModel + 100 * PremiumModel <= 6000\n# Maximum available time for software verification (4000 minutes):\nm += 25 * RegularModel + 30 * PremiumModel <= 4000\n\n# Objective\n# Maximize profit ($200 per regular model, $500 per premium model):\nm.maximize(200 * RegularModel + 500 * PremiumModel)\n", "entities": [{"start": 45, "end": 58, "word": "regular model", "entity_group": "VAR", "score": 0.9999286551319991}, {"start": 65, "end": 78, "word": "premium model", "entity_group": "VAR", "score": 0.999977812283766}, {"start": 86, "end": 99, "word": "regular model", "entity_group": "VAR", "score": 0.9999842709197441}, {"start": 109, "end": 111, "word": "70", "entity_group": "PARAM", "score": 0.9997208831077821}, {"start": 136, "end": 138, "word": "25", "entity_group": "PARAM", "score": 0.9997086407507305}, {"start": 179, "end": 192, "word": "premium model", "entity_group": "VAR", "score": 0.9999783356499446}, {"start": 202, "end": 205, "word": "100", "entity_group": "PARAM", "score": 0.9997298335807802}, {"start": 230, "end": 232, "word": "30", "entity_group": "PARAM", "score": 0.9997086389250686}, {"start": 311, "end": 315, "word": "6000", "entity_group": "LIMIT", "score": 0.9997216751903075}, {"start": 384, "end": 388, "word": "4000", "entity_group": "LIMIT", "score": 0.9995337825420819}, {"start": 422, "end": 428, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996599973237397}, {"start": 434, "end": 437, "word": "200", "entity_group": "PARAM", "score": 0.9991507837351612}, {"start": 442, "end": 455, "word": "regular model", "entity_group": "VAR", "score": 0.999968557623564}, {"start": 462, "end": 468, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999830891846078}, {"start": 474, "end": 477, "word": "500", "entity_group": "PARAM", "score": 0.9995166826522129}, {"start": 482, "end": 495, "word": "premium model", "entity_group": "VAR", "score": 0.9999658376501664}, {"start": 533, "end": 541, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994845787652616}, {"start": 542, "end": 548, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998127223798491}]}
{"doc_id": "1475791337", "document": "Boarstone factory has two types of machines: a regular one and an advanced one. A regular machine can perform 5 tasks per hour, requires 2 workers, and costs $1000. An advanced machine can perform 25 tasks per hour, requires 5 workers, and costs $10000. The factory wants to complete at least 120 tasks per hour with a maximum of 20 workers. How many of each type of machine, regular and advanced, need to be used in order to minimize cost and meet the requirements?", "order_mapping": {"regular": 0, "advanced": 1, "regular machine": 0, "advanced machine": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"advanced machine": "10000", "regular machine": "1000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "120", "terms": {"regular machine": "5", "advanced machine": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "20", "terms": {"regular machine": "2", "advanced machine": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular machines\n- y: Number of advanced machines\n\nObjective:\n- The factory aims to minimize the cost, given that a regular machine costs $1000 and an advanced machine costs $10000. Therefore, the objective function is: Minimize 1000x + 10000y\n\nConstraints:\n- The factory wants to complete at least 120 tasks per hour, which can be formulated as: 5x + 25y >= 120.\n- The factory wants to use a maximum of 20 workers, which can be formulated as: 2x + 5y <= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1000x + 10000y\nConstraints:\n5x + 25y >= 120\n2x + 5y <= 20", "canonical": {"objective": [1000.0, 10000.0], "constraints": [[-5.0, -25.0, -120.0], [2.0, 5.0, 20.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of regular machines: RegularMachines\n- Number of advanced machines: AdvancedMachines\n\nConstraints:\n- To complete at least 120 tasks per hour:\n  5 * RegularMachines + 25 * AdvancedMachines >= 120\n- Using a maximum of 20 workers:\n  2 * RegularMachines + 5 * AdvancedMachines <= 20\n\nObjective:\n- Minimize cost ($1000 for a regular machine, $10000 for an advanced machine):\n  1000 * RegularMachines + 10000 * AdvancedMachines\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularMachines = intvar(0, 999999999)  # Number of regular machines\nAdvancedMachines = intvar(0, 999999999)  # Number of advanced machines\n\n# Constraints\nm = Model()\n\n# The factory needs to complete at least 120 tasks per hour:\nm += 5 * RegularMachines + 25 * AdvancedMachines >= 120\n# The factory can use a maximum of 20 workers:\nm += 2 * RegularMachines + 5 * AdvancedMachines <= 20\n\n# Objective\n# Minimize cost ($1000 for a regular machine, $10000 for an advanced machine):\nm.minimize(1000 * RegularMachines + 10000 * AdvancedMachines)\n", "entities": [{"start": 48, "end": 55, "word": "regular", "entity_group": "VAR", "score": 0.9996036202545742}, {"start": 67, "end": 75, "word": "advanced", "entity_group": "VAR", "score": 0.9996606454222127}, {"start": 84, "end": 99, "word": "regular machine", "entity_group": "VAR", "score": 0.9999818895784205}, {"start": 112, "end": 113, "word": "5", "entity_group": "PARAM", "score": 0.9996313289375547}, {"start": 140, "end": 141, "word": "2", "entity_group": "PARAM", "score": 0.9995062542998696}, {"start": 156, "end": 161, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9983956568619298}, {"start": 164, "end": 168, "word": "1000", "entity_group": "PARAM", "score": 0.9997332314960309}, {"start": 174, "end": 190, "word": "advanced machine", "entity_group": "VAR", "score": 0.9999769544004581}, {"start": 203, "end": 205, "word": "25", "entity_group": "PARAM", "score": 0.9996313434810296}, {"start": 232, "end": 233, "word": "5", "entity_group": "PARAM", "score": 0.9993957034197801}, {"start": 248, "end": 253, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9974229442098845}, {"start": 256, "end": 261, "word": "10000", "entity_group": "PARAM", "score": 0.9997034065354732}, {"start": 294, "end": 302, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991398664152169}, {"start": 303, "end": 306, "word": "120", "entity_group": "LIMIT", "score": 0.9993787442409858}, {"start": 329, "end": 336, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9901425736445127}, {"start": 340, "end": 342, "word": "20", "entity_group": "LIMIT", "score": 0.9994337458112}, {"start": 388, "end": 395, "word": "regular", "entity_group": "VAR", "score": 0.9995852502551222}, {"start": 400, "end": 408, "word": "advanced", "entity_group": "VAR", "score": 0.9995633960066675}, {"start": 439, "end": 447, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9625536535419017}, {"start": 448, "end": 452, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9852220215305715}]}
{"doc_id": "-871648047", "document": "Bob has a 250 acre berry farm on which to plant cranberries and bilberries. Bob has $9000 to spend on watering and 600 days worth of labor available. For each acre of cranberries, 5 days worth of labor and $25 in watering costs is required. For each acre of bilberries, 4 days worth of labor and $30 in watering costs is required. The profit per acre of cranberries is $66 and the profit per acre of bilberries is $73. Formulate an LP problem in order to maximize profit.", "order_mapping": {"cranberries": 0, "bilberries": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cranberries": "66", "bilberries": "73"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "250", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "9000", "terms": {"cranberries": "5", "bilberries": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"cranberries": "25", "bilberries": "30"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of cranberries\n- y: Acres of bilberries\n\nObjective:\n- The objective is to maximize profit. The profit per acre of cranberries is $66 and the profit per acre of bilberries is $73. Therefore, the objective function is: Maximize 66x + 73y\n\nConstraints:\n- Bob has a 250 acre farm, so the constraint is: x + y <= 250.\n- Bob has $9000 to spend on watering, leading to the constraint: 25x + 30y <= 9000.\n- Bob has 600 days worth of labor available, resulting in the constraint: 5x + 4y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 66x + 73y\nConstraints:\nx + y <= 250\n25x + 30y <= 9000\n5x + 4y <= 600", "canonical": {"objective": [-66.0, -73.0], "constraints": [[1.0, 1.0, 250.0], [25.0, 30.0, 9000.0], [5.0, 4.0, 600.0]]}, "solution": {"x": 0, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of acres of cranberries: Cranberries\n- Number of acres of bilberries: Bilberries\n\nConstraints:\n- Total acres of cranberries and bilberries should not exceed 250:\n  Cranberries + Bilberries <= 250\n- Labor constraint (5 days per acre of cranberries and 4 days per acre of bilberries should not exceed 600 days):\n  5 * Cranberries + 4 * Bilberries <= 600\n- Watering cost constraint ($25 per acre of cranberries and $30 per acre of bilberries should not exceed $9000):\n  25 * Cranberries + 30 * Bilberries <= 9000\n\nObjective:\n- Maximize profit ($66 per acre of cranberries and $73 per acre of bilberries):\n  66 * Cranberries + 73 * Bilberries\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCranberries = intvar(0, 999999999)  # Number of acres of cranberries\nBilberries = intvar(0, 999999999)  # Number of acres of bilberries\n\n# Constraints\nm = Model()\n\n# Total acres should not exceed 250:\nm += Cranberries + Bilberries <= 250\n# Labor constraint: 5 days per acre of cranberries and 4 days per acre of bilberries should not exceed 600 days:\nm += 5 * Cranberries + 4 * Bilberries <= 600\n# Watering cost constraint: $25 per acre of cranberries and $30 per acre of bilberries should not exceed $9000:\nm += 25 * Cranberries + 30 * Bilberries <= 9000\n\n# Objective\n# Maximize profit ($66 per acre of cranberries and $73 per acre of bilberries):\nm.maximize(66 * Cranberries + 73 * Bilberries)\n", "entities": [{"start": 4, "end": 7, "word": "has", "entity_group": "CONST_DIR", "score": 0.9951078416499907}, {"start": 10, "end": 13, "word": "250", "entity_group": "LIMIT", "score": 0.9995793393102016}, {"start": 48, "end": 59, "word": "cranberries", "entity_group": "VAR", "score": 0.9969342280543475}, {"start": 64, "end": 74, "word": "bilberries", "entity_group": "VAR", "score": 0.9991859936342419}, {"start": 87, "end": 91, "word": "9000", "entity_group": "LIMIT", "score": 0.9996824245689784}, {"start": 117, "end": 120, "word": "600", "entity_group": "LIMIT", "score": 0.9995880673988593}, {"start": 141, "end": 150, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995529748834349}, {"start": 170, "end": 181, "word": "cranberries", "entity_group": "VAR", "score": 0.9995297609683544}, {"start": 184, "end": 185, "word": "5", "entity_group": "PARAM", "score": 0.9996950371854014}, {"start": 212, "end": 214, "word": "25", "entity_group": "PARAM", "score": 0.9995547461975111}, {"start": 264, "end": 274, "word": "bilberries", "entity_group": "VAR", "score": 0.9994950239863556}, {"start": 277, "end": 278, "word": "4", "entity_group": "PARAM", "score": 0.9996952345738567}, {"start": 305, "end": 307, "word": "30", "entity_group": "PARAM", "score": 0.9995547463091394}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998829875809955}, {"start": 363, "end": 374, "word": "cranberries", "entity_group": "VAR", "score": 0.9992492858480663}, {"start": 380, "end": 382, "word": "66", "entity_group": "PARAM", "score": 0.9992430239354045}, {"start": 391, "end": 397, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999351204611837}, {"start": 410, "end": 420, "word": "bilberries", "entity_group": "VAR", "score": 0.9987565535013134}, {"start": 426, "end": 428, "word": "73", "entity_group": "PARAM", "score": 0.999597835294383}, {"start": 467, "end": 475, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9875922319642492}, {"start": 476, "end": 482, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9971200941451337}]}
{"doc_id": "-919179028", "document": "Julia is on a strict diet and insists on only taking vanilla protein bars and organic meal replacement shakes. She wants to save money and minimize the cost but must get enough protein and carbs, and not too much fat. Vanilla protein bars cost $10 per serving and contain 30 units of protein, 50 units of carbs, and 2 units of fat. Organic meal replacement shakes cost $15 per serving and contain 10 units of protein, 20 units of carbs, and 5 units of fat. Julia requires at least 155 units of protein and 140 units of carbs but must not eat more than 55 units of fat each day. Formulate the problem as an LP problem in order to minimize cost.", "order_mapping": {"vanilla protein bars": 0, "meal replacement shakes": 1, "Vanilla protein bars": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"meal replacement shakes": "15", "Vanilla protein bars": "10"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "155", "terms": {"Vanilla protein bars": "30", "meal replacement shakes": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "140", "terms": {"Vanilla protein bars": "50", "meal replacement shakes": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "not eat more than", "limit": "55", "terms": {"meal replacement shakes": "5", "Vanilla protein bars": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of vanilla protein bars\n- y: Number of meal replacement shakes\n\nObjective:\n- Minimize the cost while meeting the nutritional requirements. Vanilla protein bars cost $10 per serving and organic meal replacement shakes cost $15 per serving. The objective function is: Minimize 10x + 15y\n\nConstraints:\n- Julia requires at least 155 units of protein, which translates to the constraint: 30x + 10y >= 155.\n- Julia requires at least 140 units of carbs, leading to the constraint: 50x + 20y >= 140.\n- Julia must not consume more than 55 units of fat, resulting in the constraint: 2x + 5y <= 55.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 10x + 15y\nConstraints:\n30x + 10y >= 155\n50x + 20y >= 140\n2x + 5y <= 55", "canonical": {"objective": [10.0, 15.0], "constraints": [[-30.0, -10.0, -155.0], [-50.0, -20.0, -140.0], [2.0, 5.0, 55.0]]}, "solution": {"x": 6, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of vanilla protein bars consumed: VanillaProteinBars\n- Number of meal replacement shakes consumed: MealReplacementShakes\n\nConstraints:\n- Julia requires at least 155 units of protein:\n  30 * VanillaProteinBars + 10 * MealReplacementShakes >= 155\n- Julia requires at least 140 units of carbs:\n  50 * VanillaProteinBars + 20 * MealReplacementShakes >= 140\n- Julia must not eat more than 55 units of fat each day:\n  2 * VanillaProteinBars + 5 * MealReplacementShakes <= 55\n\nObjective:\n- Minimize cost ($10 per serving of vanilla protein bars and $15 per serving of meal replacement shakes):\n  10 * VanillaProteinBars + 15 * MealReplacementShakes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVanillaProteinBars = intvar(0, 999999999)  # Number of vanilla protein bars consumed\nMealReplacementShakes = intvar(0, 999999999)  # Number of meal replacement shakes consumed\n\n# Constraints\nm = Model()\n\n# Julia requires at least 155 units of protein:\nm += 30 * VanillaProteinBars + 10 * MealReplacementShakes >= 155\n# Julia requires at least 140 units of carbs:\nm += 50 * VanillaProteinBars + 20 * MealReplacementShakes >= 140\n# Julia must not eat more than 55 units of fat each day:\nm += 2 * VanillaProteinBars + 5 * MealReplacementShakes <= 55\n\n# Objective\n# Minimize cost ($10 per serving of vanilla protein bars and $15 per serving of meal replacement shakes):\nm.minimize(10 * VanillaProteinBars + 15 * MealReplacementShakes)\n", "entities": [{"start": 53, "end": 73, "word": "vanilla protein bars", "entity_group": "VAR", "score": 0.9994916695750057}, {"start": 86, "end": 109, "word": "meal replacement shakes", "entity_group": "VAR", "score": 0.9996201463022633}, {"start": 140, "end": 148, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9587565631501103}, {"start": 153, "end": 157, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.99460952629556}, {"start": 221, "end": 241, "word": "Vanilla protein bars", "entity_group": "VAR", "score": 0.9996982995274108}, {"start": 242, "end": 246, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9979958236865167}, {"start": 249, "end": 251, "word": "10", "entity_group": "PARAM", "score": 0.9994313173994529}, {"start": 276, "end": 278, "word": "30", "entity_group": "PARAM", "score": 0.9997044026571581}, {"start": 298, "end": 300, "word": "50", "entity_group": "PARAM", "score": 0.9997412521005352}, {"start": 322, "end": 323, "word": "2", "entity_group": "PARAM", "score": 0.9996669384937453}, {"start": 347, "end": 370, "word": "meal replacement shakes", "entity_group": "VAR", "score": 0.9993277308278374}, {"start": 371, "end": 375, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.997445345270454}, {"start": 378, "end": 380, "word": "15", "entity_group": "PARAM", "score": 0.9993388807454507}, {"start": 405, "end": 407, "word": "10", "entity_group": "PARAM", "score": 0.9997044026571563}, {"start": 427, "end": 429, "word": "20", "entity_group": "PARAM", "score": 0.9997412521005333}, {"start": 451, "end": 452, "word": "5", "entity_group": "PARAM", "score": 0.9996367501379966}, {"start": 483, "end": 491, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999110867113165}, {"start": 492, "end": 495, "word": "155", "entity_group": "LIMIT", "score": 0.9997452288200774}, {"start": 517, "end": 520, "word": "140", "entity_group": "LIMIT", "score": 0.999739586120898}, {"start": 545, "end": 562, "word": "not eat more than", "entity_group": "CONST_DIR", "score": 0.9682067465942394}, {"start": 563, "end": 565, "word": "55", "entity_group": "LIMIT", "score": 0.9997390889028779}, {"start": 641, "end": 649, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9008371396724507}, {"start": 650, "end": 654, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.8835497988262879}]}
{"doc_id": "1211410105", "document": "Marty has $20000 to invest in the fishing and transportation industries. The fishing industry yields a $0.3 return per dollar invested whereas the transportation industry yields a $0.15 return per dollar invested. At least 40% of the money has to be used in fishing and at least $5000 has to be invested in transportation. How much should he invest in each to maximize his return?", "order_mapping": {"fishing": 0, "transportation industries": 1, "fishing industry": 0, "transportation industry": 1, "transportation": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"fishing industry": "0.3", "transportation industry": "0.15"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "20000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "At least", "limit": "40%", "var": "fishing", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5000", "var": "transportation", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the fishing industry\n- y: Dollars invested in the transportation industry\n\nObjective:\n- Marty wants to maximize his return. The fishing industry yields a $0.3 return per dollar invested, and the transportation industry yields a $0.15 return per dollar invested. Therefore, the objective function is: Maximize 0.3x + 0.15y\n\nConstraints:\n- Marty has $20000 to invest, so the constraint is: x + y <= 20000.\n- At least 40% of the money has to be used in fishing, leading to the constraint: x >= 0.4(x + y).\n- At least $5000 has to be invested in transportation, leading to the constraint: y >= 5000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.3x + 0.15y\nConstraints:\nx + y <= 20000\nx >= 0.4(x + y)\ny >= 5000", "canonical": {"objective": [-0.3, -0.15], "constraints": [[1.0, 1.0, 20000.0], [-0.6, 0.4, 0.0], [0.0, -1.0, -5000.0]]}, "solution": {"x": 15000, "y": 5000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the fishing industry: Fishing\n- Amount invested in the transportation industry: Transportation\n\nConstraints:\n- Total investment should not exceed 20000 dollars:\n  Fishing + Transportation <= 20000\n- At least 40% of the money has to be used in fishing:\n  Fishing >= 0.4 * (Fishing + Transportation)\n- At least 5000 dollars has to be invested in transportation:\n  Transportation >= 5000\n\nObjective:\n- Maximize return (0.3 return per dollar invested in fishing, 0.15 return per dollar invested in transportation):\n  0.3 * Fishing + 0.15 * Transportation\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishing = intvar(0, 999999999)  # Amount invested in the fishing industry\nTransportation = intvar(0, 999999999)  # Amount invested in the transportation industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $20000:\nm += Fishing + Transportation <= 20000\n# At least 40% of the money has to be used in fishing:\nm += Fishing >= 0.4 * (Fishing + Transportation)\n# At least $5000 has to be invested in transportation:\nm += Transportation >= 5000\n\n# Objective\n# Maximize return (0.3 return per dollar invested in fishing, 0.15 return per dollar invested in transportation):\nm.maximize(0.3 * Fishing + 0.15 * Transportation)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9901330221528217}, {"start": 12, "end": 17, "word": "20000", "entity_group": "LIMIT", "score": 0.9993440207258122}, {"start": 35, "end": 42, "word": "fishing", "entity_group": "VAR", "score": 0.9988984327627705}, {"start": 47, "end": 72, "word": "transportation industries", "entity_group": "VAR", "score": 0.9997538875407525}, {"start": 79, "end": 95, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999512313700316}, {"start": 107, "end": 110, "word": "0.3", "entity_group": "PARAM", "score": 0.9972529186057886}, {"start": 111, "end": 117, "word": "return", "entity_group": "OBJ_NAME", "score": 0.991317047393436}, {"start": 150, "end": 173, "word": "transportation industry", "entity_group": "VAR", "score": 0.9999520430752589}, {"start": 185, "end": 189, "word": "0.15", "entity_group": "PARAM", "score": 0.9985102711448283}, {"start": 190, "end": 196, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9924611693420335}, {"start": 219, "end": 227, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9974244459879001}, {"start": 228, "end": 232, "word": "40 %", "entity_group": "LIMIT", "score": 0.9903391054359235}, {"start": 264, "end": 271, "word": "fishing", "entity_group": "VAR", "score": 0.9993500801733085}, {"start": 276, "end": 284, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9955024368762548}, {"start": 287, "end": 291, "word": "5000", "entity_group": "LIMIT", "score": 0.9995098595504127}, {"start": 314, "end": 328, "word": "transportation", "entity_group": "VAR", "score": 0.9997019069266891}, {"start": 368, "end": 376, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203412751991}, {"start": 381, "end": 387, "word": "return", "entity_group": "OBJ_NAME", "score": 0.999031542278541}]}
{"doc_id": "-707305018", "document": "A berry picker must pick at least 3000 strawberries and 15000 raspberries. He visits two farms. For each hour at farm 1 he spends, he can pick 50 strawberries and 300 raspberries. For each hour at farm 2 he spends, he can catch 70 strawberries and 200 raspberries. How many hours should he spend at each farm to minimize the amount of time he spends at both farms?", "order_mapping": {"farm 1": 0, "farm 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "amount of time", "vars": ["farm 2", "farm 1"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "3000", "terms": {"farm 2": "70", "farm 1": "50"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15000", "terms": {"farm 1": "300", "farm 2": "200"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours spent at farm 1\n- y: Hours spent at farm 2\n\nObjective:\n- The berry picker wants to minimize the amount of time spent at both farms. Therefore, the objective function is not explicitly given, but it can be inferred that the objective is to minimize the total time, which can be represented as: Minimize x + y\n\nConstraints:\n- The berry picker must pick at least 3000 strawberries, which can be formulated as: 50x + 70y >= 3000\n- The berry picker must pick at least 15000 raspberries, which can be formulated as: 300x + 200y >= 15000\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + y\nConstraints:\n50x + 70y >= 3000\n300x + 200y >= 15000", "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -70.0, -3000.0], [-300.0, -200.0, -15000.0]]}, "solution": {"x": 40, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of hours spent at farm 1: HoursFarm1\n- Number of hours spent at farm 2: HoursFarm2\n\nConstraints:\n- To meet the strawberry picking requirement (at least 3000 strawberries):\n  50 * HoursFarm1 + 70 * HoursFarm2 >= 3000\n- To meet the raspberry picking requirement (at least 15000 raspberries):\n  300 * HoursFarm1 + 200 * HoursFarm2 >= 15000\n\nObjective:\n- Minimize the total amount of time spent at both farms:\n  HoursFarm1 + HoursFarm2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHoursFarm1 = intvar(0, 999999999)  # Number of hours spent at farm 1\nHoursFarm2 = intvar(0, 999999999)  # Number of hours spent at farm 2\n\n# Constraints\nm = Model()\n\n# At least 3000 strawberries must be picked:\nm += 50 * HoursFarm1 + 70 * HoursFarm2 >= 3000\n# At least 15000 raspberries must be picked:\nm += 300 * HoursFarm1 + 200 * HoursFarm2 >= 15000\n\n# Objective\n# Minimize the total amount of time spent at both farms:\nm.minimize(HoursFarm1 + HoursFarm2)\n", "entities": [{"start": 25, "end": 33, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986571737381109}, {"start": 34, "end": 38, "word": "3000", "entity_group": "LIMIT", "score": 0.9996416670728185}, {"start": 56, "end": 61, "word": "15000", "entity_group": "LIMIT", "score": 0.9997216153108712}, {"start": 107, "end": 111, "word": "hour", "entity_group": "OBJ_NAME", "score": 0.9780043444380051}, {"start": 115, "end": 121, "word": "farm 1", "entity_group": "VAR", "score": 0.9997868562068855}, {"start": 146, "end": 148, "word": "50", "entity_group": "PARAM", "score": 0.9995482996742402}, {"start": 166, "end": 169, "word": "300", "entity_group": "PARAM", "score": 0.9997128342181073}, {"start": 193, "end": 197, "word": "hour", "entity_group": "OBJ_NAME", "score": 0.9760434596712375}, {"start": 201, "end": 207, "word": "farm 2", "entity_group": "VAR", "score": 0.9997868606277791}, {"start": 233, "end": 235, "word": "70", "entity_group": "PARAM", "score": 0.9996528941601178}, {"start": 253, "end": 256, "word": "200", "entity_group": "PARAM", "score": 0.9996767696590062}, {"start": 280, "end": 285, "word": "hours", "entity_group": "OBJ_NAME", "score": 0.9893673911066384}, {"start": 318, "end": 326, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9981940398681892}, {"start": 331, "end": 345, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9815666671237177}]}
{"doc_id": "-1624408933", "document": "Nolan decides to take part in a physics contest with multiple choice questions worth 2 points each and short answer questions worth 5 points each. In this contest, he can answer at most 30 questions. In addition, he must answer at least 15 multiple choice questions and at least 10 short answer questions. Nolan can answer at most 20 multiple choice questions and 20 short answer questions. Assuming all his answers are correct, how many of each type of question should Nolan answer to maximize his score?", "order_mapping": {"multiple choice questions": 0, "short answer questions": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "score", "terms": {"multiple choice questions": "2", "short answer questions": "5"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "30", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "multiple choice questions", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "short answer questions", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "20", "var": "multiple choice questions", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "20", "var": "short answer questions", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of multiple choice questions answered\n- y: Number of short answer questions answered\n\nObjective:\n- Nolan wants to maximize his score, where each multiple choice question is worth 2 points and each short answer question is worth 5 points. Therefore, the objective function is: Maximize 2x + 5y\n\nConstraints:\n- Nolan can answer at most 30 questions, leading to the constraint: x + y <= 30.\n- He must answer at least 15 multiple choice questions, resulting in the constraint: x >= 15.\n- He must answer at least 10 short answer questions, leading to the constraint: y >= 10.\n- He can answer at most 20 multiple choice questions, resulting in the constraint: x <= 20.\n- He can answer at most 20 short answer questions, leading to the constraint: y <= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 5y\nConstraints:\nx + y <= 30\nx >= 15\ny >= 10\nx <= 20\ny <= 20", "canonical": {"objective": [-2.0, -5.0], "constraints": [[1.0, 1.0, 30.0], [-1.0, 0.0, -15.0], [0.0, -1.0, -10.0], [1.0, 0.0, 20.0], [0.0, 1.0, 20.0]]}, "solution": {"x": 15, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of multiple choice questions answered: MultipleChoiceQuestions\n- Number of short answer questions answered: ShortAnswerQuestions\n\nConstraints:\n- Total number of questions answered should not exceed 30:\n  MultipleChoiceQuestions + ShortAnswerQuestions <= 30\n- At least 15 multiple choice questions should be answered:\n  MultipleChoiceQuestions >= 15\n- At least 10 short answer questions should be answered:\n  ShortAnswerQuestions >= 10\n- At most 20 multiple choice questions can be answered:\n  MultipleChoiceQuestions <= 20\n- At most 20 short answer questions can be answered:\n  ShortAnswerQuestions <= 20\n\nObjective:\n- Maximize score (2 points for each multiple choice question, 5 points for each short answer question):\n  2 * MultipleChoiceQuestions + 5 * ShortAnswerQuestions\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMultipleChoiceQuestions = intvar(0, 999999999)  # Number of multiple choice questions answered\nShortAnswerQuestions = intvar(0, 999999999)  # Number of short answer questions answered\n\n# Constraints\nm = Model()\n\n# Nolan can answer at most 30 questions in total:\nm += MultipleChoiceQuestions + ShortAnswerQuestions <= 30\n# He must answer at least 15 multiple choice questions:\nm += MultipleChoiceQuestions >= 15\n# He must answer at least 10 short answer questions:\nm += ShortAnswerQuestions >= 10\n# He can answer at most 20 multiple choice questions:\nm += MultipleChoiceQuestions <= 20\n# He can answer at most 20 short answer questions:\nm += ShortAnswerQuestions <= 20\n\n# Objective\n# Maximize score (2 points for each multiple choice question, 5 points for each short answer question):\nm.maximize(2 * MultipleChoiceQuestions + 5 * ShortAnswerQuestions)\n", "entities": [{"start": 53, "end": 78, "word": "multiple choice questions", "entity_group": "VAR", "score": 0.9990854148937317}, {"start": 85, "end": 86, "word": "2", "entity_group": "PARAM", "score": 0.9996964357527653}, {"start": 87, "end": 93, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9854385574101134}, {"start": 103, "end": 125, "word": "short answer questions", "entity_group": "VAR", "score": 0.998560970394146}, {"start": 132, "end": 133, "word": "5", "entity_group": "PARAM", "score": 0.999682499928172}, {"start": 134, "end": 140, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9878305588307981}, {"start": 180, "end": 187, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985046829276274}, {"start": 188, "end": 190, "word": "30", "entity_group": "LIMIT", "score": 0.9997090203649697}, {"start": 232, "end": 240, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988373216618927}, {"start": 241, "end": 243, "word": "15", "entity_group": "LIMIT", "score": 0.9995674135396456}, {"start": 244, "end": 269, "word": "multiple choice questions", "entity_group": "VAR", "score": 0.9994359830380022}, {"start": 274, "end": 282, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990460148201014}, {"start": 283, "end": 285, "word": "10", "entity_group": "LIMIT", "score": 0.9993698723101806}, {"start": 286, "end": 308, "word": "short answer questions", "entity_group": "VAR", "score": 0.9993983019682214}, {"start": 328, "end": 335, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988092982078798}, {"start": 336, "end": 338, "word": "20", "entity_group": "LIMIT", "score": 0.9995685933719253}, {"start": 339, "end": 364, "word": "multiple choice questions", "entity_group": "VAR", "score": 0.9995910050941684}, {"start": 369, "end": 371, "word": "20", "entity_group": "LIMIT", "score": 0.9995398719802513}, {"start": 372, "end": 394, "word": "short answer questions", "entity_group": "VAR", "score": 0.9995375221169983}, {"start": 493, "end": 501, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994353781487307}, {"start": 506, "end": 511, "word": "score", "entity_group": "OBJ_NAME", "score": 0.9989043104329651}]}
{"doc_id": "-1400155083", "document": "A pizza shop sells pepperoni and Hawaiian pizzas. They must sell at least 35 pepperoni pizzas but cannot sell more than 40. They must also sell at least 40 Hawaiian pizzas but cannot sell more than 70. In total, they only have enough supplies to sell 90 pizzas total. If the profit per pepperoni pizza is $4 and the profit per Hawaiian pizza is $5, how many of each should they sell to maximize profit?", "order_mapping": {"pepperoni": 0, "Hawaiian pizzas": 1, "pepperoni pizzas": 0, "pepperoni pizza": 0, "Hawaiian pizza": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pepperoni pizza": "4", "Hawaiian pizza": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "35", "var": "pepperoni pizzas", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "cannot sell more than", "limit": "40", "var": "pepperoni pizzas", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "Hawaiian pizzas", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "cannot sell more than", "limit": "70", "var": "Hawaiian pizzas", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "90", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pepperoni pizzas sold\n- y: Number of Hawaiian pizzas sold\n\nObjective:\n- The pizza shop aims to maximize its profit. The profit per pepperoni pizza is $4 and the profit per Hawaiian pizza is $5. Therefore, the objective function is: Maximize 4x + 5y\n\nConstraints:\n- The shop must sell at least 35 but no more than 40 pepperoni pizzas, leading to the constraints: 35 <= x <= 40.\n- The shop must sell at least 40 but no more than 70 Hawaiian pizzas, leading to the constraints: 40 <= y <= 70.\n- In total, they only have enough supplies to sell 90 pizzas, resulting in the constraint: x + y <= 90.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 5y\nConstraints:\n35 <= x <= 40\n40 <= y <= 70\nx + y <= 90", "canonical": {"objective": [-4.0, -5.0], "constraints": [[0.0, -1.0, -40.0], [1.0, 1.0, 90.0], [-1.0, 0.0, -35.0], [1.0, 0.0, 40.0]]}, "solution": {"x": 35, "y": 55}, "pseudo_model": "\nDecision Variables:\n- Number of pepperoni pizzas sold: PepperoniPizzas (at least 35, at most 40)\n- Number of Hawaiian pizzas sold: HawaiianPizzas (at least 40, at most 70)\n\nConstraints:\n- Total number of pizzas sold should not exceed 90:\n  PepperoniPizzas + HawaiianPizzas <= 90\n\nObjective:\n- Maximize profit (4 dollars per pepperoni pizza, 5 dollars per Hawaiian pizza):\n  4 * PepperoniPizzas + 5 * HawaiianPizzas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPepperoniPizzas = intvar(35, 40)  # Number of pepperoni pizzas sold\nHawaiianPizzas = intvar(40, 70)  # Number of Hawaiian pizzas sold\n\n# Constraints\nm = Model()\n\n# Total number of pizzas sold should not exceed 90:\nm += PepperoniPizzas + HawaiianPizzas <= 90\n\n# Objective\n# Maximize profit (4 dollars per pepperoni pizza, 5 dollars per Hawaiian pizza):\nm.maximize(4 * PepperoniPizzas + 5 * HawaiianPizzas)\n", "entities": [{"start": 19, "end": 28, "word": "pepperoni", "entity_group": "VAR", "score": 0.9996618027756861}, {"start": 33, "end": 48, "word": "Hawaiian pizzas", "entity_group": "VAR", "score": 0.9999826881509494}, {"start": 66, "end": 74, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987325827944018}, {"start": 75, "end": 77, "word": "35", "entity_group": "LIMIT", "score": 0.999554705698693}, {"start": 78, "end": 94, "word": "pepperoni pizzas", "entity_group": "VAR", "score": 0.9999469385703461}, {"start": 99, "end": 121, "word": "can not sell more than", "entity_group": "CONST_DIR", "score": 0.8518273923829716}, {"start": 122, "end": 124, "word": "40", "entity_group": "LIMIT", "score": 0.9994591861914262}, {"start": 147, "end": 155, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998803308011522}, {"start": 156, "end": 158, "word": "40", "entity_group": "LIMIT", "score": 0.9995670959999219}, {"start": 159, "end": 174, "word": "Hawaiian pizzas", "entity_group": "VAR", "score": 0.9999582819010269}, {"start": 179, "end": 201, "word": "can not sell more than", "entity_group": "CONST_DIR", "score": 0.8461899817741536}, {"start": 202, "end": 204, "word": "70", "entity_group": "LIMIT", "score": 0.9995197243310375}, {"start": 223, "end": 227, "word": "only", "entity_group": "CONST_DIR", "score": 0.990067388917861}, {"start": 257, "end": 259, "word": "90", "entity_group": "LIMIT", "score": 0.9993195086533347}, {"start": 282, "end": 288, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998875108124172}, {"start": 293, "end": 308, "word": "pepperoni pizza", "entity_group": "VAR", "score": 0.9999472515651562}, {"start": 314, "end": 315, "word": "4", "entity_group": "PARAM", "score": 0.9993850051439014}, {"start": 324, "end": 330, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999333965220774}, {"start": 335, "end": 349, "word": "Hawaiian pizza", "entity_group": "VAR", "score": 0.9999279623263805}, {"start": 355, "end": 356, "word": "5", "entity_group": "PARAM", "score": 0.9996665876141776}, {"start": 396, "end": 404, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997565524788867}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368889597712}]}
{"doc_id": "1503083816", "document": "You need to buy cabinets to store your seasonings and spices. A small cabinet takes 4 sq ft of space and costs $70. A large cabinet takes 8 sq ft and costs $120. You have 200 sq ft of space available in your kitchen and a budget of $1400. If the small cabinet can hold 30 seasonings and spices and a large cabinet can hold 40 seasonings and spices, how many of each should you buy to maximize the number of seasonings and spices you can store.", "order_mapping": {"small cabinet": 0, "large cabinet": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "seasonings and spices", "terms": {"large cabinet": "40", "small cabinet": "30"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"small cabinet": "4", "large cabinet": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "1400", "terms": {"small cabinet": "70", "large cabinet": "120"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small cabinets\n- y: Number of large cabinets\n\nObjective:\n- The goal is to maximize the number of seasonings and spices that can be stored. A small cabinet can hold 30 seasonings and spices, and a large cabinet can hold 40. Therefore, the objective function is: Maximize 30x + 40y\n\nConstraints:\n- The available space in the kitchen is 200 sq ft, so the constraint is: 4x + 8y <= 200.\n- The budget is $1400, leading to the constraint: 70x + 120y <= 1400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x + 40y\nConstraints:\n4x + 8y <= 200\n70x + 120y <= 1400", "canonical": {"objective": [-30.0, -40.0], "constraints": [[4.0, 8.0, 200.0], [70.0, 120.0, 1400.0]]}, "solution": {"x": 20, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of small cabinets: SmallCabinet\n- Number of large cabinets: LargeCabinet\n\nConstraints:\n- Total space used by small and large cabinets should not exceed 200 sq ft:\n  4 * SmallCabinet + 8 * LargeCabinet <= 200\n- Total cost of small and large cabinets should not exceed $1400:\n  70 * SmallCabinet + 120 * LargeCabinet <= 1400\n\nObjective:\n- Maximize the total number of seasonings and spices stored (30 per small cabinet, 40 per large cabinet):\n  30 * SmallCabinet + 40 * LargeCabinet\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallCabinet = intvar(0, 999999999)  # Number of small cabinets\nLargeCabinet = intvar(0, 999999999)  # Number of large cabinets\n\n# Constraints\nm = Model()\n\n# Space constraint: 4 sq ft for small cabinet and 8 sq ft for large cabinet, total available space is 200 sq ft\nm += 4 * SmallCabinet + 8 * LargeCabinet <= 200\n# Budget constraint: $70 for small cabinet and $120 for large cabinet, total budget is $1400\nm += 70 * SmallCabinet + 120 * LargeCabinet <= 1400\n\n# Objective\n# Maximize the number of seasonings and spices stored: 30 per small cabinet and 40 per large cabinet\nm.maximize(30 * SmallCabinet + 40 * LargeCabinet)\n", "entities": [{"start": 39, "end": 60, "word": "seasonings and spices", "entity_group": "OBJ_NAME", "score": 0.9877916928797261}, {"start": 65, "end": 78, "word": "small cabinet", "entity_group": "VAR", "score": 0.9999781872168961}, {"start": 85, "end": 86, "word": "4", "entity_group": "PARAM", "score": 0.9995564963075866}, {"start": 114, "end": 116, "word": "70", "entity_group": "PARAM", "score": 0.9997227833761383}, {"start": 121, "end": 134, "word": "large cabinet", "entity_group": "VAR", "score": 0.9999803450439165}, {"start": 141, "end": 142, "word": "8", "entity_group": "PARAM", "score": 0.9997109732744511}, {"start": 161, "end": 164, "word": "120", "entity_group": "PARAM", "score": 0.9996135952469574}, {"start": 176, "end": 179, "word": "200", "entity_group": "LIMIT", "score": 0.9996796673643098}, {"start": 195, "end": 204, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992565762066207}, {"start": 227, "end": 233, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9921868893891307}, {"start": 239, "end": 243, "word": "1400", "entity_group": "LIMIT", "score": 0.9995510893170907}, {"start": 253, "end": 266, "word": "small cabinet", "entity_group": "VAR", "score": 0.9999820824951741}, {"start": 276, "end": 278, "word": "30", "entity_group": "PARAM", "score": 0.9997215813509887}, {"start": 279, "end": 300, "word": "seasonings and spices", "entity_group": "OBJ_NAME", "score": 0.9829200918058925}, {"start": 307, "end": 320, "word": "large cabinet", "entity_group": "VAR", "score": 0.9999466297480086}, {"start": 330, "end": 332, "word": "40", "entity_group": "PARAM", "score": 0.9996549938784733}, {"start": 333, "end": 354, "word": "seasonings and spices", "entity_group": "OBJ_NAME", "score": 0.9660466580378801}, {"start": 392, "end": 400, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997611604436946}, {"start": 415, "end": 436, "word": "seasonings and spices", "entity_group": "OBJ_NAME", "score": 0.9693139281900826}]}
{"doc_id": "1609629473", "document": "A company makes two types of cars, a SUV and a sedan. The SUV takes 200 minutes on the manufacturing line and 120 minutes of testing. The sedan takes 150 minutes on the manufacturing line and 100 minutes of testing. The company has 20000 minutes available on the manufacturing line and 10000 minutes available for testing. If the profit per SUV is $10000 and the profit per sedan is $9000, how many of each should they make to maximize profit?", "order_mapping": {"SUV": 0, "sedan": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sedan": "9000", "SUV": "10000"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "20000", "terms": {"SUV": "200", "sedan": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "10000", "terms": {"SUV": "120", "sedan": "100"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of SUVs produced\n- y: Number of sedans produced\n\nObjective:\n- The company aims to maximize its profit. The profit per SUV is $10000 and the profit per sedan is $9000. Therefore, the objective function is: Maximize 10000x + 9000y\n\nConstraints:\n- The available time on the manufacturing line is 20000 minutes, and the manufacturing time for each SUV is 200 minutes and for each sedan is 150 minutes. This leads to the constraint: 200x + 150y <= 20000.\n- The available time for testing is 10000 minutes, and the testing time for each SUV is 120 minutes and for each sedan is 100 minutes. This results in the constraint: 120x + 100y <= 10000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10000x + 9000y\nConstraints:\n200x + 150y <= 20000\n120x + 100y <= 10000", "canonical": {"objective": [-10000.0, -9000.0], "constraints": [[200.0, 150.0, 20000.0], [120.0, 100.0, 10000.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of SUVs produced: SUV\n- Number of sedans produced: Sedan\n\nConstraints:\n- Total manufacturing time for SUVs and sedans should not exceed 20000 minutes:\n  200 * SUV + 150 * Sedan <= 20000\n- Total testing time for SUVs and sedans should not exceed 10000 minutes:\n  120 * SUV + 100 * Sedan <= 10000\n\nObjective:\n- Maximize profit (10000 dollars per SUV, 9000 dollars per sedan):\n  10000 * SUV + 9000 * Sedan\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSUV = intvar(0, 999999999)  # Number of SUVs produced\nSedan = intvar(0, 999999999)  # Number of sedans produced\n\n# Constraints\nm = Model()\n\n# Total manufacturing time for SUVs and sedans should not exceed 20000 minutes:\nm += 200 * SUV + 150 * Sedan <= 20000\n# Total testing time for SUVs and sedans should not exceed 10000 minutes:\nm += 120 * SUV + 100 * Sedan <= 10000\n\n# Objective\n# Maximize profit (10000 dollars per SUV, 9000 dollars per sedan):\nm.maximize(10000 * SUV + 9000 * Sedan)\n", "entities": [{"start": 38, "end": 41, "word": "SUV", "entity_group": "VAR", "score": 0.9997298938927377}, {"start": 48, "end": 53, "word": "sedan", "entity_group": "VAR", "score": 0.999848650415352}, {"start": 60, "end": 63, "word": "SUV", "entity_group": "VAR", "score": 0.9996771647677533}, {"start": 70, "end": 73, "word": "200", "entity_group": "PARAM", "score": 0.9995821437856904}, {"start": 112, "end": 115, "word": "120", "entity_group": "PARAM", "score": 0.9994208604230588}, {"start": 141, "end": 146, "word": "sedan", "entity_group": "VAR", "score": 0.9996435475409485}, {"start": 153, "end": 156, "word": "150", "entity_group": "PARAM", "score": 0.9996038995545723}, {"start": 195, "end": 198, "word": "100", "entity_group": "PARAM", "score": 0.9992711907400429}, {"start": 236, "end": 241, "word": "20000", "entity_group": "LIMIT", "score": 0.9996479813401634}, {"start": 250, "end": 259, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987104176863639}, {"start": 290, "end": 295, "word": "10000", "entity_group": "LIMIT", "score": 0.9997370859870777}, {"start": 304, "end": 313, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990628767375166}, {"start": 335, "end": 341, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998952670579258}, {"start": 346, "end": 349, "word": "SUV", "entity_group": "VAR", "score": 0.9997056128340686}, {"start": 355, "end": 360, "word": "10000", "entity_group": "PARAM", "score": 0.9993478703864086}, {"start": 369, "end": 375, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997058843831078}, {"start": 380, "end": 385, "word": "sedan", "entity_group": "VAR", "score": 0.9990888329852882}, {"start": 391, "end": 395, "word": "9000", "entity_group": "PARAM", "score": 0.9994707590399271}, {"start": 435, "end": 443, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 444, "end": 450, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "-672891245", "document": "A factory makes tomato paste using two types of tomatoes. Cherry tomatoes contain 5 grams of sugar per unit and 1.5 grams of acid per unit. Cocktail tomatoes contain 2.5 grams of sugar per unit and 3 grams of acid per unit. Past sales has shown that the factory needs at least 350 grams of sugar and 250  grams of acid to make a tasty tomato paste. If cherry tomatoes cost $3 per unit and cocktail tomatoes cost $4 per unit, how many units of each tomato should be used to make the tasty tomato paste at a minimum cost. What is this cost?", "order_mapping": {"Cherry tomatoes": 0, "Cocktail tomatoes": 1, "cherry tomatoes": 0, "cocktail tomatoes": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"cherry tomatoes": "3", "cocktail tomatoes": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "350", "terms": {"Cherry tomatoes": "5", "Cocktail tomatoes": "2.5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "250", "terms": {"Cherry tomatoes": "1.5", "Cocktail tomatoes": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of cherry tomatoes\n- y: Units of cocktail tomatoes\n\nObjective:\n- The factory aims to minimize the cost of making the tomato paste. Given that cherry tomatoes cost $3 per unit and cocktail tomatoes cost $4 per unit, the objective function is: Minimize 3x + 4y\n\nConstraints:\n- The factory needs at least 350 grams of sugar, which can be formulated as: 5x + 2.5y >= 350\n- The factory needs at least 250 grams of acid, which can be formulated as: 1.5x + 3y >= 250\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 4y\nConstraints:\n5x + 2.5y >= 350\n1.5x + 3y >= 250", "canonical": {"objective": [3.0, 4.0], "constraints": [[-5.0, -2.5, -350.0], [-1.5, -3.0, -250.0]]}, "solution": {"x": 39, "y": 64}, "pseudo_model": "\nDecision Variables:\n- Number of cherry tomato units used: CherryTomatoes\n- Number of cocktail tomato units used: CocktailTomatoes\n\nConstraints:\n- At least 350 grams of sugar required:\n  5 * CherryTomatoes + 2.5 * CocktailTomatoes >= 350\n- At least 250 grams of acid required:\n  1.5 * CherryTomatoes + 3 * CocktailTomatoes >= 250\n\nObjective:\n- Minimize cost (3 dollars per unit of cherry tomatoes, 4 dollars per unit of cocktail tomatoes):\n  3 * CherryTomatoes + 4 * CocktailTomatoes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCherryTomatoes = intvar(0, 999999999)  # Number of cherry tomato units used\nCocktailTomatoes = intvar(0, 999999999)  # Number of cocktail tomato units used\n\n# Constraints\nm = Model()\n\n# The factory needs at least 350 grams of sugar:\nm += 5 * CherryTomatoes + 2.5 * CocktailTomatoes >= 350\n# The factory needs at least 250 grams of acid:\nm += 1.5 * CherryTomatoes + 3 * CocktailTomatoes >= 250\n\n# Objective\n# Minimize cost (3 dollars per unit of cherry tomatoes, 4 dollars per unit of cocktail tomatoes):\nm.minimize(3 * CherryTomatoes + 4 * CocktailTomatoes)\n", "entities": [{"start": 59, "end": 74, "word": "Cherry tomatoes", "entity_group": "VAR", "score": 0.9999031329251941}, {"start": 83, "end": 84, "word": "5", "entity_group": "PARAM", "score": 0.9996511629759086}, {"start": 113, "end": 116, "word": "1.5", "entity_group": "PARAM", "score": 0.9996650484397089}, {"start": 142, "end": 159, "word": "Cocktail tomatoes", "entity_group": "VAR", "score": 0.9998773728489068}, {"start": 168, "end": 171, "word": "2.5", "entity_group": "PARAM", "score": 0.9995770519192505}, {"start": 200, "end": 201, "word": "3", "entity_group": "PARAM", "score": 0.9996650197731322}, {"start": 271, "end": 279, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991170381192115}, {"start": 280, "end": 283, "word": "350", "entity_group": "LIMIT", "score": 0.9997580743386609}, {"start": 303, "end": 306, "word": "250", "entity_group": "LIMIT", "score": 0.9995963166626971}, {"start": 355, "end": 370, "word": "cherry tomatoes", "entity_group": "VAR", "score": 0.9999066205333921}, {"start": 371, "end": 375, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9979563723230015}, {"start": 378, "end": 379, "word": "3", "entity_group": "PARAM", "score": 0.9994188788310169}, {"start": 393, "end": 410, "word": "cocktail tomatoes", "entity_group": "VAR", "score": 0.9999295377069781}, {"start": 411, "end": 415, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9990414223394908}, {"start": 418, "end": 419, "word": "4", "entity_group": "PARAM", "score": 0.9996231089246121}, {"start": 512, "end": 519, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9865521362696533}, {"start": 520, "end": 524, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9985477400362496}]}
{"doc_id": "-1549050915", "document": "In a warm region, a hostel offers heated rooms and unheated rooms. The hostel has 40 rooms available. The hostel reserves at least 15 rooms to be heated. However, at least 4 times as many people prefer unheated rooms to heated rooms. If the profit per heated room is $50 and the profit per unheated room is $35, how many of each room type should be sold to maximize profit?", "order_mapping": {"heated rooms": 0, "unheated rooms": 1, "heated": 0, "heated room": 0, "unheated room": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"heated room": "50", "unheated room": "35"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "40", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "heated", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "unheated rooms", "direction": "at least", "param": "4 times", "y_var": "heated rooms", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of heated rooms\n- y: Number of unheated rooms\n\nObjective:\n- The hostel aims to maximize its profit. The profit per heated room is $50 and the profit per unheated room is $35. Therefore, the objective function is: Maximize 50x + 35y\n\nConstraints:\n- The hostel has a total of 40 rooms available, so the constraint is: x + y <= 40.\n- At least 15 rooms need to be heated, leading to the constraint: x >= 15.\n- At least 4 times as many people prefer unheated rooms to heated rooms, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 35y\nConstraints:\nx + y <= 40\nx >= 15\ny >= 4x", "canonical": {"objective": [-50.0, -35.0], "constraints": [[1.0, 1.0, 40.0], [-1.0, 0.0, -15.0], [4.0, -1.0, 0.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of heated rooms sold: HeatedRooms\n- Number of unheated rooms sold: UnheatedRooms\n\nConstraints:\n- Total number of rooms sold should not exceed 40:\n  HeatedRooms + UnheatedRooms <= 40\n- At least 15 rooms must be heated:\n  HeatedRooms >= 15\n- At least 4 times as many unheated rooms as heated rooms:\n  UnheatedRooms >= 4 * HeatedRooms\n\nObjective:\n- Maximize profit ($50 per heated room, $35 per unheated room):\n  50 * HeatedRooms + 35 * UnheatedRooms\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeatedRooms = intvar(0, 999999999)  # Number of heated rooms sold\nUnheatedRooms = intvar(0, 999999999)  # Number of unheated rooms sold\n\n# Constraints\nm = Model()\n\n# Total number of rooms available is 40:\nm += HeatedRooms + UnheatedRooms <= 40\n# At least 15 rooms must be heated:\nm += HeatedRooms >= 15\n# At least 4 times as many people prefer unheated rooms to heated rooms:\nm += UnheatedRooms >= 4 * HeatedRooms\n\n# Objective\n# Maximize profit ($50 per heated room, $35 per unheated room):\nm.maximize(50 * HeatedRooms + 35 * UnheatedRooms)\n", "entities": [{"start": 35, "end": 47, "word": "heated rooms", "entity_group": "VAR", "score": 0.9999723621234995}, {"start": 52, "end": 66, "word": "unheated rooms", "entity_group": "VAR", "score": 0.9999897820388148}, {"start": 80, "end": 83, "word": "has", "entity_group": "CONST_DIR", "score": 0.9965924628548992}, {"start": 84, "end": 86, "word": "40", "entity_group": "LIMIT", "score": 0.9987093464563503}, {"start": 125, "end": 133, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984358192403664}, {"start": 134, "end": 136, "word": "15", "entity_group": "LIMIT", "score": 0.9997077998900753}, {"start": 149, "end": 155, "word": "heated", "entity_group": "VAR", "score": 0.9997665051464122}, {"start": 168, "end": 176, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984015116106938}, {"start": 177, "end": 184, "word": "4 times", "entity_group": "PARAM", "score": 0.7361180789651862}, {"start": 207, "end": 221, "word": "unheated rooms", "entity_group": "VAR", "score": 0.9999510706636144}, {"start": 225, "end": 237, "word": "heated rooms", "entity_group": "VAR", "score": 0.9999745753878588}, {"start": 247, "end": 253, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999896136872501}, {"start": 258, "end": 269, "word": "heated room", "entity_group": "VAR", "score": 0.9999454634296692}, {"start": 275, "end": 277, "word": "50", "entity_group": "PARAM", "score": 0.9995979660270317}, {"start": 286, "end": 292, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354492282138}, {"start": 297, "end": 310, "word": "unheated room", "entity_group": "VAR", "score": 0.9999474574466405}, {"start": 316, "end": 318, "word": "35", "entity_group": "PARAM", "score": 0.999687781545089}, {"start": 366, "end": 374, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987336556974256}, {"start": 375, "end": 381, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999146952430046}]}
{"doc_id": "-1023483692", "document": "A cafe company has two locations, a university cafe and a downtown cafe. The university cafe costs $400 to run for 1 hour while the downtown cafe costs $700 to run for 1 hour. In an hour, the university cafe yields 30 cappuccinos, 40 lattes, and 60 regular coffees. In an hour, the downtown cafe yields 40 cappuccinos, 70 lattes, and 110 regular coffees. The cafe company must produce at least 900 cappuccinos, 700 lattes, and 1400 regular coffees in total. How many hours should each cafe be run to minimize costs?", "order_mapping": {"university cafe": 0, "downtown cafe": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"university cafe": "400", "downtown cafe": "700"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "900", "terms": {"university cafe": "30", "downtown cafe": "40"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "700", "terms": {"university cafe": "40", "downtown cafe": "70"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1400", "terms": {"university cafe": "60", "downtown cafe": "110"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours to run the university cafe\n- y: Hours to run the downtown cafe\n\nObjective:\n- The cafe company aims to minimize costs. The university cafe costs $400 to run for 1 hour, and the downtown cafe costs $700 to run for 1 hour. Therefore, the objective function is: Minimize 400x + 700y\n\nConstraints:\n- The cafe company must produce at least 900 cappuccinos, 700 lattes, and 1400 regular coffees in total. This leads to the following constraints:\n    - 30x + 40y >= 900 (cappuccinos)\n    - 40x + 70y >= 700 (lattes)\n    - 60x + 110y >= 1400 (regular coffees)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 400x + 700y\nConstraints:\n30x + 40y >= 900\n40x + 70y >= 700\n60x + 110y >= 1400", "canonical": {"objective": [400.0, 700.0], "constraints": [[-30.0, -40.0, -900.0], [-40.0, -70.0, -700.0], [-60.0, -110.0, -1400.0]]}, "solution": {"x": 30, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Hours the university cafe runs: UniversityCafeHours\n- Hours the downtown cafe runs: DowntownCafeHours\n\nConstraints:\n- To produce at least 900 cappuccinos:\n  30 * UniversityCafeHours + 40 * DowntownCafeHours >= 900\n- To produce at least 700 lattes:\n  40 * UniversityCafeHours + 70 * DowntownCafeHours >= 700\n- To produce at least 1400 regular coffees:\n  60 * UniversityCafeHours + 110 * DowntownCafeHours >= 1400\n\nObjective:\n- Minimize costs ($400 per hour for the university cafe, $700 per hour for the downtown cafe):\n  400 * UniversityCafeHours + 700 * DowntownCafeHours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nUniversityCafeHours = intvar(0, 999999999)  # Hours the university cafe runs\nDowntownCafeHours = intvar(0, 999999999)  # Hours the downtown cafe runs\n\n# Constraints\nm = Model()\n\n# The cafe company must produce at least 900 cappuccinos:\nm += 30 * UniversityCafeHours + 40 * DowntownCafeHours >= 900\n# The cafe company must produce at least 700 lattes:\nm += 40 * UniversityCafeHours + 70 * DowntownCafeHours >= 700\n# The cafe company must produce at least 1400 regular coffees:\nm += 60 * UniversityCafeHours + 110 * DowntownCafeHours >= 1400\n\n# Objective\n# Minimize costs ($400 per hour for the university cafe, $700 per hour for the downtown cafe):\nm.minimize(400 * UniversityCafeHours + 700 * DowntownCafeHours)\n", "entities": [{"start": 37, "end": 52, "word": "university cafe", "entity_group": "VAR", "score": 0.9999589168618237}, {"start": 59, "end": 72, "word": "downtown cafe", "entity_group": "VAR", "score": 0.9999836937449743}, {"start": 79, "end": 94, "word": "university cafe", "entity_group": "VAR", "score": 0.9999855199565926}, {"start": 95, "end": 100, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9986730426334339}, {"start": 103, "end": 106, "word": "400", "entity_group": "PARAM", "score": 0.9997307648228643}, {"start": 135, "end": 148, "word": "downtown cafe", "entity_group": "VAR", "score": 0.9999847513039568}, {"start": 149, "end": 154, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990202054855957}, {"start": 157, "end": 160, "word": "700", "entity_group": "PARAM", "score": 0.9997323931511461}, {"start": 198, "end": 213, "word": "university cafe", "entity_group": "VAR", "score": 0.9999850038117717}, {"start": 221, "end": 223, "word": "30", "entity_group": "PARAM", "score": 0.9996299182039244}, {"start": 238, "end": 240, "word": "40", "entity_group": "PARAM", "score": 0.9991756504997157}, {"start": 254, "end": 256, "word": "60", "entity_group": "PARAM", "score": 0.9996262918979477}, {"start": 292, "end": 305, "word": "downtown cafe", "entity_group": "VAR", "score": 0.9999850039605324}, {"start": 313, "end": 315, "word": "40", "entity_group": "PARAM", "score": 0.9996299182039251}, {"start": 330, "end": 332, "word": "70", "entity_group": "PARAM", "score": 0.9991756504995797}, {"start": 346, "end": 349, "word": "110", "entity_group": "PARAM", "score": 0.999581693477692}, {"start": 398, "end": 406, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989098729165495}, {"start": 407, "end": 410, "word": "900", "entity_group": "LIMIT", "score": 0.9996322912185767}, {"start": 425, "end": 428, "word": "700", "entity_group": "LIMIT", "score": 0.9996810518892223}, {"start": 442, "end": 446, "word": "1400", "entity_group": "LIMIT", "score": 0.9994131041929442}, {"start": 516, "end": 524, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999590969336557}, {"start": 525, "end": 530, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998265581217041}]}
{"doc_id": "1869490233", "document": "A startup plans to hire computer engineers earning $1000 a week and software engineers earning $800 a week. The startup requires at least a total of 50 engineers, of whom at least 10 must be computer engineers. To make sure the startup can release their first product, the number of software engineers should be at least twice of the number of computer engineers. Help the startup find the right number of engineers of each type to minimize the labor cost.", "order_mapping": {"computer engineers": 0, "software engineers": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"computer engineers": "1000", "software engineers": "800"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "computer engineers", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "software engineers", "direction": "at least", "param": "twice", "y_var": "computer engineers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of computer engineers\n- y: Number of software engineers\n\nObjective:\n- The startup aims to minimize the labor cost. Computer engineers earn $1000 a week and software engineers earn $800 a week. Therefore, the objective function is: Minimize 1000x + 800y\n\nConstraints:\n- The startup needs at least a total of 50 engineers, leading to the constraint: x + y >= 50.\n- At least 10 engineers must be computer engineers, leading to the constraint: x >= 10.\n- The number of software engineers should be at least twice the number of computer engineers, leading to the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1000x + 800y\nConstraints:\nx + y >= 50\nx >= 10\ny >= 2x", "canonical": {"objective": [1000.0, 800.0], "constraints": [[-1.0, -1.0, -50.0], [-1.0, 0.0, -10.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 10, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of computer engineers: ComputerEngineers\n- Number of software engineers: SoftwareEngineers\n\nConstraints:\n- Total number of engineers should be at least 50:\n  ComputerEngineers + SoftwareEngineers >= 50\n- At least 10 computer engineers:\n  ComputerEngineers >= 10\n- Number of software engineers should be at least twice the number of computer engineers:\n  SoftwareEngineers >= 2 * ComputerEngineers\n\nObjective:\n- Minimize labor cost (1000 dollars per week for computer engineers, 800 dollars per week for software engineers):\n  1000 * ComputerEngineers + 800 * SoftwareEngineers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nComputerEngineers = intvar(0, 999999999)  # Number of computer engineers\nSoftwareEngineers = intvar(0, 999999999)  # Number of software engineers\n\n# Constraints\nm = Model()\n\n# The startup requires at least a total of 50 engineers:\nm += ComputerEngineers + SoftwareEngineers >= 50\n# At least 10 must be computer engineers:\nm += ComputerEngineers >= 10\n# The number of software engineers should be at least twice the number of computer engineers:\nm += SoftwareEngineers >= 2 * ComputerEngineers\n\n# Objective\n# Minimize the labor cost (computer engineers earn $1000 a week, software engineers earn $800 a week):\nm.minimize(1000 * ComputerEngineers + 800 * SoftwareEngineers)\n", "entities": [{"start": 24, "end": 42, "word": "computer engineers", "entity_group": "VAR", "score": 0.9999656146520833}, {"start": 43, "end": 50, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9835151661311642}, {"start": 53, "end": 57, "word": "1000", "entity_group": "PARAM", "score": 0.9995687337926344}, {"start": 69, "end": 87, "word": "software engineers", "entity_group": "VAR", "score": 0.9999771833224634}, {"start": 88, "end": 95, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9952386397693371}, {"start": 98, "end": 101, "word": "800", "entity_group": "PARAM", "score": 0.9997014747175686}, {"start": 132, "end": 140, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9966043788299216}, {"start": 152, "end": 154, "word": "50", "entity_group": "LIMIT", "score": 0.9997220548619125}, {"start": 175, "end": 183, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998647634248414}, {"start": 184, "end": 186, "word": "10", "entity_group": "LIMIT", "score": 0.9996537056816861}, {"start": 195, "end": 213, "word": "computer engineers", "entity_group": "VAR", "score": 0.9999757822617191}, {"start": 289, "end": 307, "word": "software engineers", "entity_group": "VAR", "score": 0.9999559738269657}, {"start": 318, "end": 326, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9966348090503359}, {"start": 327, "end": 332, "word": "twice", "entity_group": "PARAM", "score": 0.9772541263306497}, {"start": 350, "end": 368, "word": "computer engineers", "entity_group": "VAR", "score": 0.9999461195375151}, {"start": 439, "end": 447, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9982115039774379}, {"start": 458, "end": 462, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9983238750447001}]}
{"doc_id": "-636662142", "document": "CE Chemicals produces two types of products, adhesives and plasticizers. To produce each type of product, we need to use both an automatic device and a human-operated device. On a given day, each processing device is available for at most 450 minutes. To extract a package of adhesives, it takes 6 minutes of processing on the automatic device and 5 minutes on human-operated device. To extract a package of plasticizers, the automatic device needs to be run for 8 minutes and the human-operated device for 4 minutes. The manufacturer can sell a package of adhesives for a revenue of $8.5 and plasticizers for a revenue of $11.5. Assuming that the company can sell all the products it produces, how many packages of each product should be produced daily in order to maximize the revenue?", "order_mapping": {"adhesives": 0, "plasticizers": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"adhesives": "8.5", "plasticizers": "11.5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "450", "terms": {"adhesives": "6", "plasticizers": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "450", "terms": {"adhesives": "5", "plasticizers": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of adhesives produced daily\n- y: Number of packages of plasticizers produced daily\n\nObjective:\n- The company aims to maximize its revenue. The revenue from selling a package of adhesives is $8.5 and from selling a package of plasticizers is $11.5. Therefore, the objective function is: Maximize 8.5x + 11.5y\n\nConstraints:\n- The processing devices are available for at most 450 minutes each day. The time taken to produce each type of product on the processing devices forms the constraints:\n  - 6x + 8y <= 450 (Automatic device constraint)\n  - 5x + 4y <= 450 (Human-operated device constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 8.5x + 11.5y\nConstraints:\n6x + 8y <= 450\n5x + 4y <= 450", "canonical": {"objective": [-8.5, -11.5], "constraints": [[6.0, 8.0, 450.0], [5.0, 4.0, 450.0]]}, "solution": {"x": 3, "y": 54}, "pseudo_model": "\nDecision Variables:\n- Number of packages of adhesives produced daily: Adhesives\n- Number of packages of plasticizers produced daily: Plasticizers\n\nConstraints:\n- For the automatic device, the total processing time should not exceed 450 minutes:\n  6 * Adhesives + 8 * Plasticizers <= 450\n- For the human-operated device, the total processing time should not exceed 450 minutes:\n  5 * Adhesives + 4 * Plasticizers <= 450\n\nObjective:\n- Maximize revenue (8.5 dollars per package of adhesives, 11.5 dollars per package of plasticizers):\n  8.5 * Adhesives + 11.5 * Plasticizers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAdhesives = intvar(0, 999999999)  # Number of packages of adhesives produced daily\nPlasticizers = intvar(0, 999999999)  # Number of packages of plasticizers produced daily\n\n# Constraints\nm = Model()\n\n# Each processing device is available for at most 450 minutes:\n# For the automatic device:\nm += 6 * Adhesives + 8 * Plasticizers <= 450\n# For the human-operated device:\nm += 5 * Adhesives + 4 * Plasticizers <= 450\n\n# Objective\n# Maximize revenue (8.5 dollars per package of adhesives, 11.5 dollars per package of plasticizers):\nm.maximize(8.5 * Adhesives + 11.5 * Plasticizers)\n", "entities": [{"start": 46, "end": 55, "word": "adhesives", "entity_group": "VAR", "score": 0.998990411813425}, {"start": 60, "end": 72, "word": "plasticizers", "entity_group": "VAR", "score": 0.999576131953629}, {"start": 238, "end": 245, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9961889209712729}, {"start": 246, "end": 249, "word": "450", "entity_group": "LIMIT", "score": 0.9997778531372354}, {"start": 284, "end": 293, "word": "adhesives", "entity_group": "VAR", "score": 0.9989451920558454}, {"start": 305, "end": 306, "word": "6", "entity_group": "PARAM", "score": 0.9995971228122774}, {"start": 357, "end": 358, "word": "5", "entity_group": "PARAM", "score": 0.9996294247243602}, {"start": 420, "end": 432, "word": "plasticizers", "entity_group": "VAR", "score": 0.9997276141897825}, {"start": 476, "end": 477, "word": "8", "entity_group": "PARAM", "score": 0.9996971428552532}, {"start": 522, "end": 523, "word": "4", "entity_group": "PARAM", "score": 0.9996859477296127}, {"start": 573, "end": 582, "word": "adhesives", "entity_group": "VAR", "score": 0.9991142036471239}, {"start": 589, "end": 596, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9814261138989986}, {"start": 602, "end": 605, "word": "8.5", "entity_group": "PARAM", "score": 0.9997002041790477}, {"start": 610, "end": 622, "word": "plasticizers", "entity_group": "VAR", "score": 0.9990906308106752}, {"start": 629, "end": 636, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9918223368281627}, {"start": 642, "end": 646, "word": "11.5", "entity_group": "PARAM", "score": 0.9995627291597796}, {"start": 786, "end": 794, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995627259071748}, {"start": 799, "end": 806, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9984584386392429}]}
{"doc_id": "-30300855", "document": "A family has 100 acres of farmland on which to grow carrots and green peas. Both vegetables have to be watered and sprayed with bug repellant. There are 135 days per year available for watering and 110 days per year available for spraying bug spray. It takes 0.7 days to water an acre of carrots and 1.2 days to spray an acre of carrots. It takes 0.4 days to water an acre of green peas and 1.5 days to spray an acre of green peas. The family earns a profit of $250 per acre of carrots and $340 per acre of green peas. How many acres of each vegetable should be planted in order to maximize profit?", "order_mapping": {"carrots": 0, "green peas": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carrots": "250", "green peas": "340"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "135", "terms": {"carrots": "0.7", "green peas": "0.4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "110", "terms": {"carrots": "1.2", "green peas": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of carrots to be planted\n- y: Acres of green peas to be planted\n\nObjective:\n- The family aims to maximize their profit. The profit earned per acre is $250 for carrots and $340 for green peas. Therefore, the objective function is: Maximize 250x + 340y\n\nConstraints:\n- The family has 100 acres of farmland, so the constraint is: x + y <= 100.\n- There are 135 days per year available for watering, and it takes 0.7 days to water an acre of carrots and 0.4 days to water an acre of green peas. This leads to the constraint: 0.7x + 0.4y <= 135.\n- There are 110 days per year available for spraying bug spray, and it takes 1.2 days to spray an acre of carrots and 1.5 days to spray an acre of green peas. This results in the constraint: 1.2x + 1.5y <= 110.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 250x + 340y\nConstraints:\nx + y <= 100\n0.7x + 0.4y <= 135\n1.2x + 1.5y <= 110", "canonical": {"objective": [-250.0, -340.0], "constraints": [[1.0, 1.0, 100.0], [0.7, 0.4, 135.0], [1.2, 1.5, 110.0]]}, "solution": {"x": 0, "y": 73}, "pseudo_model": "\nDecision Variables:\n- Number of acres of carrots: Carrots\n- Number of acres of green peas: GreenPeas\n\nConstraints:\n- Total acres of carrots and green peas should not exceed 100:\n  Carrots + GreenPeas <= 100\n- Watering constraint (0.7 days per acre for carrots and 0.4 days per acre for green peas, with 135 days available):\n  0.7 * Carrots + 0.4 * GreenPeas <= 135\n- Spraying constraint (1.2 days per acre for carrots and 1.5 days per acre for green peas, with 110 days available):\n  1.2 * Carrots + 1.5 * GreenPeas <= 110\n\nObjective:\n- Maximize profit (250 dollars per acre of carrots, 340 dollars per acre of green peas):\n  250 * Carrots + 340 * GreenPeas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # Number of acres of carrots\nGreenPeas = intvar(0, 999999999)  # Number of acres of green peas\n\n# Constraints\nm = Model()\n\n# Total acres of carrots and green peas should not exceed 100:\nm += Carrots + GreenPeas <= 100\n# Watering constraint: 0.7 days per acre for carrots and 0.4 days per acre for green peas, with 135 days available:\nm += 0.7 * Carrots + 0.4 * GreenPeas <= 135\n# Spraying constraint: 1.2 days per acre for carrots and 1.5 days per acre for green peas, with 110 days available:\nm += 1.2 * Carrots + 1.5 * GreenPeas <= 110\n\n# Objective\n# Maximize profit (250 dollars per acre of carrots, 340 dollars per acre of green peas):\nm.maximize(250 * Carrots + 340 * GreenPeas)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9911195007909787}, {"start": 13, "end": 16, "word": "100", "entity_group": "LIMIT", "score": 0.9986860323469702}, {"start": 52, "end": 59, "word": "carrots", "entity_group": "VAR", "score": 0.997933319009084}, {"start": 64, "end": 74, "word": "green peas", "entity_group": "VAR", "score": 0.9999748924361619}, {"start": 155, "end": 158, "word": "135", "entity_group": "LIMIT", "score": 0.9996892288440217}, {"start": 173, "end": 182, "word": "available", "entity_group": "CONST_DIR", "score": 0.9976687658185875}, {"start": 200, "end": 203, "word": "110", "entity_group": "LIMIT", "score": 0.9996696506883742}, {"start": 218, "end": 227, "word": "available", "entity_group": "CONST_DIR", "score": 0.9975953062431027}, {"start": 262, "end": 265, "word": "0.7", "entity_group": "PARAM", "score": 0.9990067945528139}, {"start": 291, "end": 298, "word": "carrots", "entity_group": "VAR", "score": 0.999266316150681}, {"start": 303, "end": 306, "word": "1.2", "entity_group": "PARAM", "score": 0.9996755145002447}, {"start": 332, "end": 339, "word": "carrots", "entity_group": "VAR", "score": 0.9996444015312913}, {"start": 351, "end": 354, "word": "0.4", "entity_group": "PARAM", "score": 0.9993619650499346}, {"start": 380, "end": 390, "word": "green peas", "entity_group": "VAR", "score": 0.9999260778286775}, {"start": 395, "end": 398, "word": "1.5", "entity_group": "PARAM", "score": 0.9994601132918643}, {"start": 424, "end": 434, "word": "green peas", "entity_group": "VAR", "score": 0.9999648736744289}, {"start": 456, "end": 462, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999176727086305}, {"start": 468, "end": 471, "word": "250", "entity_group": "PARAM", "score": 0.9994034417916778}, {"start": 484, "end": 491, "word": "carrots", "entity_group": "VAR", "score": 0.9994974123345243}, {"start": 498, "end": 501, "word": "340", "entity_group": "PARAM", "score": 0.99965542684794}, {"start": 514, "end": 524, "word": "green peas", "entity_group": "VAR", "score": 0.9999436422185424}, {"start": 590, "end": 598, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9966899138567613}, {"start": 599, "end": 605, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996424955947787}]}
{"doc_id": "1300005456", "document": "A framing company frames printed art and paintings. Each printed art takes 10 minutes for printing and 5 minutes for framing. Each painting takes 0 minutes for printing and 15 minutes for framing. The company has available 150 minutes for printing and 400 minutes for framing. If the profit per printed art sold is $5 and the profit per painting sold is $8, how many of each should they produce to maximize profits?", "order_mapping": {"printed art": 0, "paintings": 1, "painting": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"printed art": "5", "painting": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"printed art": "10", "painting": "0"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"printed art": "5", "painting": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of printed arts produced\n- y: Number of paintings produced\n\nObjective:\n- The company aims to maximize its profits. The profit per printed art sold is $5 and the profit per painting sold is $8. Therefore, the objective function is: Maximize 5x + 8y\n\nConstraints:\n- The company has 150 minutes available for printing, and each printed art takes 10 minutes for printing, leading to the constraint: 10x <= 150.\n- The company has 400 minutes available for framing, and each printed art takes 5 minutes for framing, while each painting takes 15 minutes for framing. This results in the constraint: 5x + 15y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 8y\nConstraints:\n10x <= 150\n5x + 15y <= 400", "canonical": {"objective": [-5.0, -8.0], "constraints": [[10.0, 0.0, 150.0], [5.0, 15.0, 400.0]]}, "solution": {"x": 14, "y": 22}, "pseudo_model": "\nDecision Variables:\n- Number of printed arts produced: PrintedArt\n- Number of paintings produced: Paintings\n\nConstraints:\n- Total printing time for printed arts should not exceed 150 minutes:\n  10 * PrintedArt <= 150\n- Total framing time for both printed arts and paintings should not exceed 400 minutes:\n  5 * PrintedArt + 15 * Paintings <= 400\n\nObjective:\n- Maximize profits (5 dollars per printed art, 8 dollars per painting):\n  5 * PrintedArt + 8 * Paintings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPrintedArt = intvar(0, 999999999)  # Number of printed arts produced\nPaintings = intvar(0, 999999999)  # Number of paintings produced\n\n# Constraints\nm = Model()\n\n# Total printing time should not exceed 150 minutes:\n# Each printed art takes 10 minutes for printing\nm += 10 * PrintedArt <= 150\n# Total framing time should not exceed 400 minutes:\n# Each printed art takes 5 minutes for framing, each painting takes 15 minutes for framing\nm += 5 * PrintedArt + 15 * Paintings <= 400\n\n# Objective\n# Maximize profits (5 dollars per printed art, 8 dollars per painting):\nm.maximize(5 * PrintedArt + 8 * Paintings)\n", "entities": [{"start": 25, "end": 36, "word": "printed art", "entity_group": "VAR", "score": 0.9999310078258752}, {"start": 41, "end": 50, "word": "paintings", "entity_group": "VAR", "score": 0.9997453525933016}, {"start": 58, "end": 69, "word": "printed art", "entity_group": "VAR", "score": 0.999987889605086}, {"start": 76, "end": 78, "word": "10", "entity_group": "PARAM", "score": 0.9996863125091728}, {"start": 104, "end": 105, "word": "5", "entity_group": "PARAM", "score": 0.9996981488603262}, {"start": 133, "end": 141, "word": "painting", "entity_group": "VAR", "score": 0.9995750289504336}, {"start": 148, "end": 149, "word": "0", "entity_group": "PARAM", "score": 0.9996470608254964}, {"start": 175, "end": 177, "word": "15", "entity_group": "PARAM", "score": 0.9996052181909395}, {"start": 216, "end": 225, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991808431896922}, {"start": 226, "end": 229, "word": "150", "entity_group": "LIMIT", "score": 0.999418019081705}, {"start": 255, "end": 258, "word": "400", "entity_group": "LIMIT", "score": 0.9995884947030594}, {"start": 288, "end": 294, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999158406008938}, {"start": 299, "end": 310, "word": "printed art", "entity_group": "VAR", "score": 0.9997302374672735}, {"start": 321, "end": 322, "word": "5", "entity_group": "PARAM", "score": 0.9994065957256711}, {"start": 331, "end": 337, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386214965207}, {"start": 342, "end": 350, "word": "painting", "entity_group": "VAR", "score": 0.9990377006135015}, {"start": 361, "end": 362, "word": "8", "entity_group": "PARAM", "score": 0.9996530276416216}, {"start": 405, "end": 413, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998575081258496}, {"start": 414, "end": 421, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996474049077713}]}
{"doc_id": "356566587", "document": "ABC Toys Co makes RC drones and model cars using wood and paint. A RC drone requires 7 units of wood and 30 units of paint. A model car requires 4 units of wood and 20 units of paint. The hobbyist has available 200 units of wood and 900 units of paint. If the profit per RC drone is $50 and the profit per model car is $90, how many of each toy should be made to maximize his profit?", "order_mapping": {"RC drones": 0, "model cars": 1, "RC drone": 0, "model car": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"RC drone": "50", "model car": "90"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"RC drone": "7", "model car": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "900", "terms": {"RC drone": "30", "model car": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of RC drones produced\n- y: Number of model cars produced\n\nObjective:\n- The hobbyist aims to maximize profit. The profit per RC drone is $50 and the profit per model car is $90. Therefore, the objective function is: Maximize 50x + 90y\n\nConstraints:\n- The hobbyist has 200 units of wood available, and a RC drone requires 7 units of wood and a model car requires 4 units of wood. This leads to the constraint: 7x + 4y <= 200.\n- The hobbyist has 900 units of paint available, and a RC drone requires 30 units of paint and a model car requires 20 units of paint. This leads to the constraint: 30x + 20y <= 900.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 90y\nConstraints:\n7x + 4y <= 200\n30x + 20y <= 900", "canonical": {"objective": [-50.0, -90.0], "constraints": [[7.0, 4.0, 200.0], [30.0, 20.0, 900.0]]}, "solution": {"x": 0, "y": 45}, "pseudo_model": "\nDecision Variables:\n- Number of RC drones made: RCDrones\n- Number of model cars made: ModelCars\n\nConstraints:\n- Wood usage for RC drones and model cars should not exceed 200 units:\n  7 * RCDrones + 4 * ModelCars <= 200\n- Paint usage for RC drones and model cars should not exceed 900 units:\n  30 * RCDrones + 20 * ModelCars <= 900\n\nObjective:\n- Maximize profit ($50 profit per RC drone and $90 profit per model car):\n  50 * RCDrones + 90 * ModelCars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRCDrones = intvar(0, 999999999)  # Number of RC drones made\nModelCars = intvar(0, 999999999)  # Number of model cars made\n\n# Constraints\nm = Model()\n\n# Wood constraint: 7 units per RC drone and 4 units per model car, with 200 units available\nm += 7 * RCDrones + 4 * ModelCars <= 200\n# Paint constraint: 30 units per RC drone and 20 units per model car, with 900 units available\nm += 30 * RCDrones + 20 * ModelCars <= 900\n\n# Objective\n# Maximize profit ($50 per RC drone and $90 per model car)\nm.maximize(50 * RCDrones + 90 * ModelCars)\n", "entities": [{"start": 18, "end": 27, "word": "RC drones", "entity_group": "VAR", "score": 0.9999728707603562}, {"start": 32, "end": 42, "word": "model cars", "entity_group": "VAR", "score": 0.9999834559046091}, {"start": 68, "end": 76, "word": "RC drone", "entity_group": "VAR", "score": 0.9999838721778019}, {"start": 86, "end": 87, "word": "7", "entity_group": "PARAM", "score": 0.9996728485807436}, {"start": 106, "end": 108, "word": "30", "entity_group": "PARAM", "score": 0.9997336938841923}, {"start": 128, "end": 137, "word": "model car", "entity_group": "VAR", "score": 0.9999709657789221}, {"start": 147, "end": 148, "word": "4", "entity_group": "PARAM", "score": 0.9996918653438358}, {"start": 167, "end": 169, "word": "20", "entity_group": "PARAM", "score": 0.9997049789281054}, {"start": 204, "end": 213, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987411302907523}, {"start": 214, "end": 217, "word": "200", "entity_group": "LIMIT", "score": 0.9993703442385794}, {"start": 236, "end": 239, "word": "900", "entity_group": "LIMIT", "score": 0.9997127550161886}, {"start": 264, "end": 270, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999943298456594}, {"start": 275, "end": 283, "word": "RC drone", "entity_group": "VAR", "score": 0.9999453707865358}, {"start": 289, "end": 291, "word": "50", "entity_group": "PARAM", "score": 0.9995901791615963}, {"start": 300, "end": 306, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999391660242939}, {"start": 311, "end": 320, "word": "model car", "entity_group": "VAR", "score": 0.9998841124539452}, {"start": 326, "end": 328, "word": "90", "entity_group": "PARAM", "score": 0.9996638576690153}, {"start": 370, "end": 378, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996422312222185}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999433784038347}]}
{"doc_id": "1894232673", "document": "Luke is a carrot farmer and he has 150 acres of land on which he grows Danvers carrots and Nantes carrots. The net revenue per acre of Danvers carrots is $600 and the net revenue per acre of Nantes carrots is $300. Each acre of Danvers carrots requires 2.5 days worth of labor and $100 in maintenance costs. Each acre of Nantes carrots requires 3.7 days worth of labor and $200 in maintenance costs. Luke has $20000 available to spend on maintenance costs and 300 days worth of labor available. How many acres of each should be grown in order to maximize net revenue?", "order_mapping": {"Danvers carrots": 0, "Nantes carrots": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "net revenue", "terms": {"Danvers carrots": "600", "Nantes carrots": "300"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"Danvers carrots": "2.5", "Nantes carrots": "3.7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "20000", "terms": {"Danvers carrots": "100", "Nantes carrots": "200"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of Danvers carrots\n- y: Acres of Nantes carrots\n\nObjective:\n- Luke wants to maximize the net revenue. The net revenue per acre of Danvers carrots is $600 and the net revenue per acre of Nantes carrots is $300. Therefore, the objective function is: Maximize 600x + 300y\n\nConstraints:\n- Luke has 150 acres of land available for growing carrots, leading to the constraint: x + y <= 150.\n- The total labor available is 300 days, and each acre of Danvers carrots requires 2.5 days worth of labor and each acre of Nantes carrots requires 3.7 days worth of labor. This results in the constraint: 2.5x + 3.7y <= 300.\n- Luke has $20000 available to spend on maintenance costs, and each acre of Danvers carrots requires $100 in maintenance costs and each acre of Nantes carrots requires $200 in maintenance costs. This leads to the constraint: 100x + 200y <= 20000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 600x + 300y\nConstraints:\nx + y <= 150\n2.5x + 3.7y <= 300\n100x + 200y <= 20000", "canonical": {"objective": [-600.0, -300.0], "constraints": [[1.0, 1.0, 150.0], [2.5, 3.7, 300.0], [100.0, 200.0, 20000.0]]}, "solution": {"x": 120, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Acres of Danvers carrots grown: DanversCarrots\n- Acres of Nantes carrots grown: NantesCarrots\n\nConstraints:\n- Total acres used should not exceed 150:\n  DanversCarrots + NantesCarrots <= 150\n- Total labor used should not exceed 300 days (2.5 days per acre of Danvers, 3.7 days per acre of Nantes):\n  2.5 * DanversCarrots + 3.7 * NantesCarrots <= 300\n- Total maintenance cost should not exceed $20000 (100 dollars per acre of Danvers, 200 dollars per acre of Nantes):\n  100 * DanversCarrots + 200 * NantesCarrots <= 20000\n\nObjective:\n- Maximize net revenue (600 dollars per acre of Danvers carrots, 300 dollars per acre of Nantes carrots):\n  600 * DanversCarrots + 300 * NantesCarrots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDanversCarrots = intvar(0, 999999999)  # Acres of Danvers carrots\nNantesCarrots = intvar(0, 999999999)  # Acres of Nantes carrots\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 150:\nm += DanversCarrots + NantesCarrots <= 150\n# Total labor used should not exceed 300 days:\nm += 2.5 * DanversCarrots + 3.7 * NantesCarrots <= 300\n# Total maintenance cost should not exceed $20000:\nm += 100 * DanversCarrots + 200 * NantesCarrots <= 20000\n\n# Objective\n# Maximize net revenue (600 dollars per acre of Danvers carrots, 300 dollars per acre of Nantes carrots):\nm.maximize(600 * DanversCarrots + 300 * NantesCarrots)\n", "entities": [{"start": 31, "end": 34, "word": "has", "entity_group": "CONST_DIR", "score": 0.9970975749073969}, {"start": 35, "end": 38, "word": "150", "entity_group": "LIMIT", "score": 0.998781478455563}, {"start": 71, "end": 86, "word": "Danvers carrots", "entity_group": "VAR", "score": 0.9999778446132972}, {"start": 91, "end": 105, "word": "Nantes carrots", "entity_group": "VAR", "score": 0.9999822860520622}, {"start": 112, "end": 123, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9922907219126447}, {"start": 136, "end": 151, "word": "Danvers carrots", "entity_group": "VAR", "score": 0.9999486181791509}, {"start": 157, "end": 160, "word": "600", "entity_group": "PARAM", "score": 0.9996750308085864}, {"start": 169, "end": 180, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.993160422141271}, {"start": 193, "end": 207, "word": "Nantes carrots", "entity_group": "VAR", "score": 0.9999520348392974}, {"start": 213, "end": 216, "word": "300", "entity_group": "PARAM", "score": 0.9996856103634827}, {"start": 232, "end": 247, "word": "Danvers carrots", "entity_group": "VAR", "score": 0.9999724310768962}, {"start": 257, "end": 260, "word": "2.5", "entity_group": "PARAM", "score": 0.9995523551586079}, {"start": 287, "end": 290, "word": "100", "entity_group": "PARAM", "score": 0.9995053811630283}, {"start": 327, "end": 341, "word": "Nantes carrots", "entity_group": "VAR", "score": 0.999972594886347}, {"start": 351, "end": 354, "word": "3.7", "entity_group": "PARAM", "score": 0.9995523551590408}, {"start": 381, "end": 384, "word": "200", "entity_group": "PARAM", "score": 0.9992790272818635}, {"start": 419, "end": 424, "word": "20000", "entity_group": "LIMIT", "score": 0.9985252177374377}, {"start": 425, "end": 434, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988399501873233}, {"start": 469, "end": 472, "word": "300", "entity_group": "LIMIT", "score": 0.9994572579505775}, {"start": 493, "end": 502, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991842180052577}, {"start": 556, "end": 564, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985282972915297}, {"start": 565, "end": 576, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9809817412557331}]}
{"doc_id": "611957227", "document": "Tim Bakery sells chocolate croissants and strawberry croissants. The store pays a baker $3 and $5 for each unit of a chocolate and strawberry croissant respectively. The store makes a profit of $4 per chocolate croissant and a profit of $6 per strawberry croissant. In a month, the store owner expects to sell at most 1200 croissants and wants to spend at most $6000. How many of each type of croissant should be made in order to maximize the total monthly profit?", "order_mapping": {"chocolate croissants": 0, "strawberry croissants": 1, "chocolate": 0, "strawberry croissant": 1, "chocolate croissant": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"chocolate croissant": "4", "strawberry croissant": "6"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "1200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "6000", "terms": {"chocolate": "3", "strawberry croissant": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chocolate croissants\n- y: Number of strawberry croissants\n\nObjective:\n- The store owner aims to maximize the total monthly profit. The store makes a profit of $4 per chocolate croissant and a profit of $6 per strawberry croissant. Therefore, the objective function is: Maximize 4x + 6y\n\nConstraints:\n- The store owner expects to sell at most 1200 croissants, leading to the constraint: x + y <= 1200.\n- The store wants to spend at most $6000, given that the store pays a baker $3 and $5 for each unit of a chocolate and strawberry croissant respectively. This results in the constraint: 3x + 5y <= 6000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 6y\nConstraints:\nx + y <= 1200\n3x + 5y <= 6000", "canonical": {"objective": [-4.0, -6.0], "constraints": [[1.0, 1.0, 1200.0], [3.0, 5.0, 6000.0]]}, "solution": {"x": 0, "y": 1200}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate croissants made per month: ChocolateCroissants\n- Number of strawberry croissants made per month: StrawberryCroissants\n\nConstraints:\n- Total number of croissants sold should not exceed 1200 per month:\n  ChocolateCroissants + StrawberryCroissants <= 1200\n- The total cost of making croissants should not exceed $6000 per month (3 dollars per chocolate croissant, 5 dollars per strawberry croissant):\n  3 * ChocolateCroissants + 5 * StrawberryCroissants <= 6000\n\nObjective:\n- Maximize profit (4 dollars profit per chocolate croissant, 6 dollars profit per strawberry croissant):\n  4 * ChocolateCroissants + 6 * StrawberryCroissants\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateCroissants = intvar(0, 999999999)  # Number of chocolate croissants made per month\nStrawberryCroissants = intvar(0, 999999999)  # Number of strawberry croissants made per month\n\n# Constraints\nm = Model()\n\n# Total number of croissants sold should not exceed 1200 per month:\nm += ChocolateCroissants + StrawberryCroissants <= 1200\n# The total cost of making croissants should not exceed $6000 per month:\nm += 3 * ChocolateCroissants + 5 * StrawberryCroissants <= 6000\n\n# Objective\n# Maximize profit (4 dollars profit per chocolate croissant, 6 dollars profit per strawberry croissant):\nm.maximize(4 * ChocolateCroissants + 6 * StrawberryCroissants)\n", "entities": [{"start": 17, "end": 37, "word": "chocolate croissants", "entity_group": "VAR", "score": 0.9999429845042468}, {"start": 42, "end": 63, "word": "strawberry croissants", "entity_group": "VAR", "score": 0.9999844139696408}, {"start": 91, "end": 92, "word": "3", "entity_group": "PARAM", "score": 0.9995483943276172}, {"start": 99, "end": 100, "word": "5", "entity_group": "PARAM", "score": 0.9995929037885813}, {"start": 120, "end": 129, "word": "chocolate", "entity_group": "VAR", "score": 0.9990209300271925}, {"start": 134, "end": 154, "word": "strawberry croissant", "entity_group": "VAR", "score": 0.9999748053106221}, {"start": 188, "end": 194, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998852208116719}, {"start": 200, "end": 201, "word": "4", "entity_group": "PARAM", "score": 0.9995886811417687}, {"start": 206, "end": 225, "word": "chocolate croissant", "entity_group": "VAR", "score": 0.9999797529054907}, {"start": 232, "end": 238, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998650131518928}, {"start": 244, "end": 245, "word": "6", "entity_group": "PARAM", "score": 0.9990648842822871}, {"start": 250, "end": 270, "word": "strawberry croissant", "entity_group": "VAR", "score": 0.9999653330186883}, {"start": 318, "end": 325, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986560377547158}, {"start": 326, "end": 330, "word": "1200", "entity_group": "LIMIT", "score": 0.9993851617732665}, {"start": 361, "end": 368, "word": "at most", "entity_group": "CONST_DIR", "score": 0.992517144648744}, {"start": 371, "end": 375, "word": "6000", "entity_group": "LIMIT", "score": 0.99956658851398}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9955061828981759}, {"start": 467, "end": 473, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999153493856494}]}
{"doc_id": "583736451", "document": "Great Sounds Co makes headphones and earphones. Each headphone requires 30 dollars of labor to make whereas each earphone requires only 20 dollars. In addition, each headphone requires 50 minutes of production time and each earphone requires 40 minutes of production time. The manufacturer has at most 2000 dollars of budget and at most 2500 minutes of production time. If the profit per headphone is $350 and the profit per earphone is $120, how many of each product should be made to maximize profit?", "order_mapping": {"headphones": 0, "earphones": 1, "headphone": 2, "earphone": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"headphone": "350", "earphone": "120"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "2500", "terms": {"headphone": "50", "earphone": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "2000", "terms": {"headphone": "30", "earphone": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of headphones\n- y: Number of earphones\n\nObjective:\n- The company aims to maximize its profit. The profit per headphone is $350 and the profit per earphone is $120. Therefore, the objective function is: Maximize 350x + 120y\n\nConstraints:\n- The total production time available is at most 2500 minutes, so the constraint is: 50x + 40y <= 2500.\n- The total budget available is at most $2000, leading to the constraint: 30x + 20y <= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 350x + 120y\nConstraints:\n50x + 40y <= 2500\n30x + 20y <= 2000", "canonical": {"objective": [-350.0, -120.0, 0.0, 0.0], "constraints": [[50.0, 40.0, 0.0, 0.0, 2500.0], [30.0, 20.0, 0.0, 0.0, 2000.0]]}, "solution": {"x": 50, "y": 0, "z": 0, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Number of headphones made: Headphones\n- Number of earphones made: Earphones\n\nConstraints:\n- Budget constraint (at most 2000 dollars):\n  30 * Headphones + 20 * Earphones <= 2000\n- Production time constraint (at most 2500 minutes):\n  50 * Headphones + 40 * Earphones <= 2500\n\nObjective:\n- Maximize profit (350 dollars per headphone, 120 dollars per earphone):\n  350 * Headphones + 120 * Earphones\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeadphones = intvar(0, 999999999)  # Number of headphones made\nEarphones = intvar(0, 999999999)  # Number of earphones made\n\n# Constraints\nm = Model()\n\n# The manufacturer has at most 2000 dollars of budget:\nm += 30 * Headphones + 20 * Earphones <= 2000\n# The manufacturer has at most 2500 minutes of production time:\nm += 50 * Headphones + 40 * Earphones <= 2500\n\n# Objective\n# Maximize profit (350 dollars per headphone, 120 dollars per earphone):\nm.maximize(350 * Headphones + 120 * Earphones)\n", "entities": [{"start": 22, "end": 32, "word": "headphones", "entity_group": "VAR", "score": 0.9997529994224308}, {"start": 37, "end": 46, "word": "earphones", "entity_group": "VAR", "score": 0.9997426075863219}, {"start": 54, "end": 63, "word": "headphone", "entity_group": "VAR", "score": 0.9996404113954506}, {"start": 73, "end": 75, "word": "30", "entity_group": "PARAM", "score": 0.9996590611370664}, {"start": 114, "end": 122, "word": "earphone", "entity_group": "VAR", "score": 0.9981234240416627}, {"start": 137, "end": 139, "word": "20", "entity_group": "PARAM", "score": 0.9997013532730082}, {"start": 169, "end": 178, "word": "headphone", "entity_group": "VAR", "score": 0.9996065872855286}, {"start": 188, "end": 190, "word": "50", "entity_group": "PARAM", "score": 0.9994966785033776}, {"start": 227, "end": 235, "word": "earphone", "entity_group": "VAR", "score": 0.9998074756534155}, {"start": 245, "end": 247, "word": "40", "entity_group": "PARAM", "score": 0.9989306237054644}, {"start": 306, "end": 310, "word": "2000", "entity_group": "LIMIT", "score": 0.9997286900918292}, {"start": 322, "end": 328, "word": "budget", "entity_group": "CONST_DIR", "score": 0.98026880333368}, {"start": 333, "end": 340, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990338303212959}, {"start": 341, "end": 345, "word": "2500", "entity_group": "LIMIT", "score": 0.9997480891762822}, {"start": 382, "end": 388, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997021334276679}, {"start": 393, "end": 402, "word": "headphone", "entity_group": "VAR", "score": 0.9996207211301192}, {"start": 408, "end": 411, "word": "350", "entity_group": "PARAM", "score": 0.9993478814005062}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465446}, {"start": 431, "end": 439, "word": "earphone", "entity_group": "VAR", "score": 0.9990975872165897}, {"start": 445, "end": 448, "word": "120", "entity_group": "PARAM", "score": 0.9994256462727535}, {"start": 494, "end": 502, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040364571}, {"start": 503, "end": 509, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "1519284406", "document": "Omega Seafood fishes in two areas, the Indian and Arctic oceans. In a week, they must provide 20 tons of fish, 12 tons of crab, and 10 tons of shrimp. It costs the company $6000 per day to operate in the Indian ocean and $9000 per day to operate in the Arctic ocean. In a day's operation in the Indian ocean, the company can catch 3.4 tons of fish, 2.2 tons of crab, and 1.5 tons of shrimp. In a day's operation in the Arctic ocean, the company can catch 6 tons of fish, 5 tons of crab, and 3 tons of shrimp. How many days a week should fishing be done in each ocean to minimize costs?", "order_mapping": {"Indian": 0, "Arctic oceans": 1, "Indian ocean": 0, "Arctic ocean": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"Indian ocean": "6000", "Arctic ocean": "9000"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "20", "terms": {"Indian ocean": "3.4", "Arctic ocean": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "12", "terms": {"Indian ocean": "2.2", "Arctic ocean": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "10", "terms": {"Indian ocean": "1.5", "Arctic ocean": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Days of operation in the Indian ocean\n- y: Days of operation in the Arctic ocean\n\nObjective:\n- The company aims to minimize its operating costs. It costs $6000 per day to operate in the Indian ocean and $9000 per day to operate in the Arctic ocean. Therefore, the objective function is: Minimize 6000x + 9000y\n\nConstraints:\n- The company must provide 20 tons of fish, 12 tons of crab, and 10 tons of shrimp in a week. In a day's operation in the Indian ocean, the company can catch 3.4 tons of fish, 2.2 tons of crab, and 1.5 tons of shrimp. In a day's operation in the Arctic ocean, the company can catch 6 tons of fish, 5 tons of crab, and 3 tons of shrimp. These constraints can be formulated as:\n    - 3.4x + 6y >= 20 (fish)\n    - 2.2x + 5y >= 12 (crab)\n    - 1.5x + 3y >= 10 (shrimp)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6000x + 9000y\nConstraints:\n3.4x + 6y >= 20\n2.2x + 5y >= 12\n1.5x + 3y >= 10", "canonical": {"objective": [6000.0, 9000.0], "constraints": [[-3.4, -6.0, -20.0], [-2.2, -5.0, -12.0], [-1.5, -3.0, -10.0]]}, "solution": {"x": 1, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of days fishing in the Indian Ocean: DaysIndianOcean\n- Number of days fishing in the Arctic Ocean: DaysArcticOcean\n\nConstraints:\n- To provide at least 20 tons of fish:\n  3.4 * DaysIndianOcean + 6 * DaysArcticOcean >= 20\n- To provide at least 12 tons of crab:\n  2.2 * DaysIndianOcean + 5 * DaysArcticOcean >= 12\n- To provide at least 10 tons of shrimp:\n  1.5 * DaysIndianOcean + 3 * DaysArcticOcean >= 10\n\nObjective:\n- Minimize costs ($6000 per day for Indian Ocean, $9000 per day for Arctic Ocean):\n  6000 * DaysIndianOcean + 9000 * DaysArcticOcean\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaysIndianOcean = intvar(0, 999999999)  # Number of days fishing in the Indian Ocean\nDaysArcticOcean = intvar(0, 999999999)  # Number of days fishing in the Arctic Ocean\n\n# Constraints\nm = Model()\n\n# To provide at least 20 tons of fish:\nm += 3.4 * DaysIndianOcean + 6 * DaysArcticOcean >= 20\n# To provide at least 12 tons of crab:\nm += 2.2 * DaysIndianOcean + 5 * DaysArcticOcean >= 12\n# To provide at least 10 tons of shrimp:\nm += 1.5 * DaysIndianOcean + 3 * DaysArcticOcean >= 10\n\n# Objective\n# Minimize costs ($6000 per day for Indian Ocean, $9000 per day for Arctic Ocean):\nm.minimize(6000 * DaysIndianOcean + 9000 * DaysArcticOcean)\n", "entities": [{"start": 40, "end": 46, "word": "Indian", "entity_group": "VAR", "score": 0.9996273722213558}, {"start": 51, "end": 64, "word": "Arctic oceans", "entity_group": "VAR", "score": 0.9999000660441039}, {"start": 89, "end": 96, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9957323530837922}, {"start": 97, "end": 99, "word": "20", "entity_group": "LIMIT", "score": 0.9990328067909605}, {"start": 115, "end": 117, "word": "12", "entity_group": "LIMIT", "score": 0.9997545538806573}, {"start": 137, "end": 139, "word": "10", "entity_group": "LIMIT", "score": 0.9994975629745493}, {"start": 160, "end": 165, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9938973670807093}, {"start": 180, "end": 184, "word": "6000", "entity_group": "PARAM", "score": 0.9994419338004579}, {"start": 211, "end": 223, "word": "Indian ocean", "entity_group": "VAR", "score": 0.9999298752439488}, {"start": 230, "end": 234, "word": "9000", "entity_group": "PARAM", "score": 0.9995311641756294}, {"start": 261, "end": 273, "word": "Arctic ocean", "entity_group": "VAR", "score": 0.9999413465477974}, {"start": 305, "end": 317, "word": "Indian ocean", "entity_group": "VAR", "score": 0.9999189031241454}, {"start": 342, "end": 345, "word": "3.4", "entity_group": "PARAM", "score": 0.9997390289505004}, {"start": 361, "end": 364, "word": "2.2", "entity_group": "PARAM", "score": 0.9997421278961215}, {"start": 384, "end": 387, "word": "1.5", "entity_group": "PARAM", "score": 0.999253375198551}, {"start": 434, "end": 446, "word": "Arctic ocean", "entity_group": "VAR", "score": 0.9999415232432988}, {"start": 471, "end": 472, "word": "6", "entity_group": "PARAM", "score": 0.99973904619374}, {"start": 488, "end": 489, "word": "5", "entity_group": "PARAM", "score": 0.9997421541080354}, {"start": 509, "end": 510, "word": "3", "entity_group": "PARAM", "score": 0.9994121107967542}, {"start": 589, "end": 597, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9991579381037238}, {"start": 598, "end": 603, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988153618389138}]}
{"doc_id": "-414671050", "document": "Sweet Popcorn store has 35 pounds of butter popcorn and 45 pounds of caramel popcorn. They sell two mixed bags: a family mix and a party mix. The family mix sells for $4.5 a pound while the party mix sells for $6 a pound. The family mix has 50% caramel popcorn and 50% butter popcorn. The party mix has 80% caramel popcorn and 20% butter popcorn. How many bags of each mix should be made in order to maximize profit?", "order_mapping": {"family mix": 0, "party mix": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"party mix": "6", "family mix": "4.5"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "35", "terms": {"family mix": "50%", "party mix": "80%"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "45", "terms": {"family mix": "50%", "party mix": "20%"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of family mix\n- y: Number of bags of party mix\n\nObjective:\n- The store aims to maximize its profit. The family mix sells for $4.5 a pound and the party mix sells for $6 a pound. Therefore, the objective function is: Maximize 4.5x + 6y\n\nConstraints:\n- The store has 35 pounds of butter popcorn and 45 pounds of caramel popcorn. The family mix has 50% caramel popcorn and 50% butter popcorn, and the party mix has 80% caramel popcorn and 20% butter popcorn. These constraints can be expressed as:\n    - 0.5x + 0.8y <= 35 (caramel popcorn constraint)\n    - 0.5x + 0.2y <= 45 (butter popcorn constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4.5x + 6y\nConstraints:\n0.5x + 0.8y <= 35\n0.5x + 0.2y <= 45", "canonical": {"objective": [-4.5, -6.0], "constraints": [[0.5, 0.8, 35.0], [0.5, 0.2, 45.0]]}, "solution": {"x": 70, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of pounds of family mix to be made: FamilyMix\n- Number of pounds of party mix to be made: PartyMix\n\nConstraints:\n- For butter popcorn (35 pounds available):\n  0.5 * FamilyMix (50% of family mix) + 0.2 * PartyMix (20% of party mix) <= 35\n- For caramel popcorn (45 pounds available):\n  0.5 * FamilyMix (50% of family mix) + 0.8 * PartyMix (80% of party mix) <= 45\n\nObjective:\n- Maximize profit:\n  4.5 * FamilyMix (family mix sells for $4.5 a pound) + 6 * PartyMix (party mix sells for $6 a pound)\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFamilyMix = intvar(0, 999999999)  # Number of pounds of family mix\nPartyMix = intvar(0, 999999999)  # Number of pounds of party mix\n\n# Constraints\nm = Model()\n\n# Constraint for butter popcorn (35 pounds available):\n# Family mix uses 50% butter popcorn, Party mix uses 20% butter popcorn\nm += 0.5 * FamilyMix + 0.2 * PartyMix <= 35\n\n# Constraint for caramel popcorn (45 pounds available):\n# Family mix uses 50% caramel popcorn, Party mix uses 80% caramel popcorn\nm += 0.5 * FamilyMix + 0.8 * PartyMix <= 45\n\n# Objective\n# Maximize profit (Family mix sells for $4.5 a pound, Party mix sells for $6 a pound):\nm.maximize(4.5 * FamilyMix + 6 * PartyMix)\n", "entities": [{"start": 20, "end": 23, "word": "has", "entity_group": "CONST_DIR", "score": 0.9991923834907568}, {"start": 24, "end": 26, "word": "35", "entity_group": "LIMIT", "score": 0.9986915866811412}, {"start": 56, "end": 58, "word": "45", "entity_group": "LIMIT", "score": 0.9995895597498478}, {"start": 116, "end": 126, "word": "family mix", "entity_group": "VAR", "score": 0.9999385881818341}, {"start": 133, "end": 142, "word": "party mix", "entity_group": "VAR", "score": 0.9998438429521268}, {"start": 149, "end": 159, "word": "family mix", "entity_group": "VAR", "score": 0.999979985998416}, {"start": 160, "end": 165, "word": "sells", "entity_group": "OBJ_NAME", "score": 0.985169298877841}, {"start": 172, "end": 175, "word": "4.5", "entity_group": "PARAM", "score": 0.999492477709168}, {"start": 194, "end": 203, "word": "party mix", "entity_group": "VAR", "score": 0.9999803892807629}, {"start": 204, "end": 209, "word": "sells", "entity_group": "OBJ_NAME", "score": 0.990757193664703}, {"start": 216, "end": 217, "word": "6", "entity_group": "PARAM", "score": 0.9994306421292218}, {"start": 232, "end": 242, "word": "family mix", "entity_group": "VAR", "score": 0.9999836559940353}, {"start": 247, "end": 251, "word": "50 %", "entity_group": "PARAM", "score": 0.9943729902362132}, {"start": 272, "end": 276, "word": "50 %", "entity_group": "PARAM", "score": 0.9866930823137727}, {"start": 298, "end": 307, "word": "party mix", "entity_group": "VAR", "score": 0.9999790318513142}, {"start": 312, "end": 316, "word": "80 %", "entity_group": "PARAM", "score": 0.9943728364352145}, {"start": 337, "end": 341, "word": "20 %", "entity_group": "PARAM", "score": 0.9844940668875576}, {"start": 412, "end": 420, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.996185286075547}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818202311}]}
{"doc_id": "-1110516940", "document": "John mixes two brands of cereal to ensure he gets at least 400 units of iron and 450 units of fiber. A serving of cereal A contains 25 units of iron and 30 units of fiber. A serving of cereal B contains 20 units of iron and 40 units of fiber. If cereal A costs $0.45 per serving and cereal B costs $0.55 per serving, how many servings of each should John buy in order to minimize costs?", "order_mapping": {"cereal A": 0, "cereal B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"cereal A": "0.45", "cereal B": "0.55"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "400", "terms": {"cereal A": "25", "cereal B": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "450", "terms": {"cereal A": "30", "cereal B": "40"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of cereal A\n- y: Number of servings of cereal B\n\nObjective:\n- John wants to minimize the cost of buying the cereals. Cereal A costs $0.45 per serving and cereal B costs $0.55 per serving. Therefore, the objective function is: Minimize 0.45x + 0.55y\n\nConstraints:\n- John needs to ensure he gets at least 400 units of iron, which can be represented as: 25x + 20y >= 400.\n- John also needs to ensure he gets at least 450 units of fiber, which can be represented as: 30x + 40y >= 450.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.45x + 0.55y\nConstraints:\n25x + 20y >= 400\n30x + 40y >= 450", "canonical": {"objective": [0.45, 0.55], "constraints": [[-25.0, -20.0, -400.0], [-30.0, -40.0, -450.0]]}, "solution": {"x": 16, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of servings of cereal A bought: CerealA\n- Number of servings of cereal B bought: CerealB\n\nConstraints:\n- To meet the iron requirement (at least 400 units):\n  25 * CerealA + 20 * CerealB >= 400\n- To meet the fiber requirement (at least 450 units):\n  30 * CerealA + 40 * CerealB >= 450\n\nObjective:\n- Minimize costs (0.45 dollars per serving of cereal A, 0.55 dollars per serving of cereal B):\n  0.45 * CerealA + 0.55 * CerealB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCerealA = intvar(0, 999999999)  # Number of servings of cereal A\nCerealB = intvar(0, 999999999)  # Number of servings of cereal B\n\n# Constraints\nm = Model()\n\n# John needs at least 400 units of iron:\nm += 25 * CerealA + 20 * CerealB >= 400\n# John needs at least 450 units of fiber:\nm += 30 * CerealA + 40 * CerealB >= 450\n\n# Objective\n# Minimize costs (0.45 dollars per serving of cereal A, 0.55 dollars per serving of cereal B):\nm.minimize(0.45 * CerealA + 0.55 * CerealB)\n", "entities": [{"start": 50, "end": 58, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990701204261023}, {"start": 59, "end": 62, "word": "400", "entity_group": "LIMIT", "score": 0.9997376187481953}, {"start": 81, "end": 84, "word": "450", "entity_group": "LIMIT", "score": 0.999705093293867}, {"start": 115, "end": 123, "word": "cereal A", "entity_group": "VAR", "score": 0.9999286902010456}, {"start": 133, "end": 135, "word": "25", "entity_group": "PARAM", "score": 0.9995654912836964}, {"start": 154, "end": 156, "word": "30", "entity_group": "PARAM", "score": 0.9997142345708174}, {"start": 187, "end": 195, "word": "cereal B", "entity_group": "VAR", "score": 0.9999363112896085}, {"start": 205, "end": 207, "word": "20", "entity_group": "PARAM", "score": 0.9996210700983336}, {"start": 226, "end": 228, "word": "40", "entity_group": "PARAM", "score": 0.9997009369691087}, {"start": 249, "end": 257, "word": "cereal A", "entity_group": "VAR", "score": 0.9999312150401098}, {"start": 258, "end": 263, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990846930905035}, {"start": 266, "end": 270, "word": "0.45", "entity_group": "PARAM", "score": 0.9995504236725321}, {"start": 287, "end": 295, "word": "cereal B", "entity_group": "VAR", "score": 0.9999414653837845}, {"start": 296, "end": 301, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993731373259501}, {"start": 304, "end": 308, "word": "0.55", "entity_group": "PARAM", "score": 0.9996489651779941}, {"start": 377, "end": 385, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9944738667234626}, {"start": 386, "end": 391, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9945144582489834}]}
{"doc_id": "-868287186", "document": "Mia Clothing makes fancy skirts and coats. Both of these items require use of a sewing machine and embroidery machine. A skirt requires 3 hours on the sewing machine and 5 hours on the embroidery machine. A coat requires 2 hours on the sewing machine and 3.5 hours on the embroidery machine. In a week, there are 25 hours available on the sewing machine and 35 hours available on the embroidery machine. If the profit per skirt is $300 and the profit per coat is $500, what should the weekly production be to maximize profit?", "order_mapping": {"skirts": 0, "coats": 1, "skirt": 0, "coat": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"skirt": "300", "coat": "500"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "25", "terms": {"skirt": "3", "coat": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "35", "terms": {"skirt": "5", "coat": "3.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of skirts produced per week\n- y: Number of coats produced per week\n\nObjective:\n- The objective is to maximize the profit. The profit per skirt is $300 and the profit per coat is $500. Therefore, the objective function is: Maximize 300x + 500y\n\nConstraints:\n- Each skirt requires 3 hours on the sewing machine and each coat requires 2 hours on the sewing machine. The total available hours on the sewing machine is 25, leading to the constraint: 3x + 2y <= 25.\n- Each skirt requires 5 hours on the embroidery machine and each coat requires 3.5 hours on the embroidery machine. The total available hours on the embroidery machine is 35, leading to the constraint: 5x + 3.5y <= 35.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 500y\nConstraints:\n3x + 2y <= 25\n5x + 3.5y <= 35", "canonical": {"objective": [-300.0, -500.0], "constraints": [[3.0, 2.0, 25.0], [5.0, 3.5, 35.0]]}, "solution": {"x": 0, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of skirts produced per week: Skirts\n- Number of coats produced per week: Coats\n\nConstraints:\n- Sewing machine hours for skirts and coats should not exceed 25 hours per week:\n  3 * Skirts + 2 * Coats <= 25\n- Embroidery machine hours for skirts and coats should not exceed 35 hours per week:\n  5 * Skirts + 3.5 * Coats <= 35\n\nObjective:\n- Maximize profit (300 dollars per skirt, 500 dollars per coat):\n  300 * Skirts + 500 * Coats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSkirts = intvar(0, 999999999)  # Number of skirts produced per week\nCoats = intvar(0, 999999999)  # Number of coats produced per week\n\n# Constraints\nm = Model()\n\n# Total hours used on the sewing machine should not exceed 25 hours per week:\nm += 3 * Skirts + 2 * Coats <= 25\n# Total hours used on the embroidery machine should not exceed 35 hours per week:\nm += 5 * Skirts + 3.5 * Coats <= 35\n\n# Objective\n# Maximize profit (300 dollars per skirt, 500 dollars per coat):\nm.maximize(300 * Skirts + 500 * Coats)\n", "entities": [{"start": 25, "end": 31, "word": "skirts", "entity_group": "VAR", "score": 0.9995042093098021}, {"start": 36, "end": 41, "word": "coats", "entity_group": "VAR", "score": 0.9993642540363956}, {"start": 123, "end": 128, "word": "skirt", "entity_group": "VAR", "score": 0.9997130820093549}, {"start": 138, "end": 139, "word": "3", "entity_group": "PARAM", "score": 0.9993267564065182}, {"start": 172, "end": 173, "word": "5", "entity_group": "PARAM", "score": 0.9996636559604852}, {"start": 210, "end": 214, "word": "coat", "entity_group": "VAR", "score": 0.9997676147759004}, {"start": 224, "end": 225, "word": "2", "entity_group": "PARAM", "score": 0.9990595432716485}, {"start": 258, "end": 261, "word": "3.5", "entity_group": "PARAM", "score": 0.999663825139777}, {"start": 318, "end": 320, "word": "25", "entity_group": "LIMIT", "score": 0.9995810500031256}, {"start": 327, "end": 336, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991687448283201}, {"start": 363, "end": 365, "word": "35", "entity_group": "LIMIT", "score": 0.9996191056652354}, {"start": 372, "end": 381, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989345710207282}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999642297864726}, {"start": 428, "end": 433, "word": "skirt", "entity_group": "VAR", "score": 0.9995387262592379}, {"start": 439, "end": 442, "word": "300", "entity_group": "PARAM", "score": 0.9991625054702337}, {"start": 451, "end": 457, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999094567805062}, {"start": 462, "end": 466, "word": "coat", "entity_group": "VAR", "score": 0.9991319765032639}, {"start": 472, "end": 475, "word": "500", "entity_group": "PARAM", "score": 0.9995978746211774}, {"start": 518, "end": 526, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993393604278421}, {"start": 527, "end": 533, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999445799962448}]}
{"doc_id": "1462210894", "document": "Thomas has 50 cows and feeds them on silage and mixed grains. Silage costs $215 per kilogram while mixed grains cost $320 per kilogram. Each kilogram of silage contains 0.5 kilograms of protein, 0.2 kilograms of vitamins, and 0.1 kilograms of minerals. Each kilogram of mixed grains contains 0.2 kilograms of protein, 0.1 kilograms of vitamins, and 0.2 kilograms of minerals. Each cow requires a minimum of 2 kilograms of protein and 1.5 kilograms of minerals per day. However, each cow can have at most 1.0 kilograms of vitamins per day. How should Thomas feed his cows in order to minimize cost while ensuring the cows get the required nutrition?", "order_mapping": {"silage": 0, "mixed grains": 1, "Silage": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Silage": "215", "mixed grains": "320"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "2", "terms": {"silage": "0.5", "mixed grains": "0.2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1.0", "terms": {"silage": "0.2", "mixed grains": "0.1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "1.5", "terms": {"silage": "0.1", "mixed grains": "0.2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Kilograms of silage\n- y: Kilograms of mixed grains\n\nObjective:\n- Thomas wants to minimize the cost of feeding his cows. Silage costs $215 per kilogram and mixed grains cost $320 per kilogram. Therefore, the objective function is: Minimize 215x + 320y\n\nConstraints:\n- Each kilogram of silage contains 0.5 kilograms of protein and each kilogram of mixed grains contains 0.2 kilograms of protein. Each cow requires a minimum of 2 kilograms of protein per day, leading to the constraint: 0.5x + 0.2y >= 2.\n- Each kilogram of silage contains 0.2 kilograms of vitamins and each kilogram of mixed grains contains 0.1 kilograms of vitamins. Each cow can have at most 1.0 kilograms of vitamins per day, leading to the constraint: 0.2x + 0.1y <= 1.0.\n- Each kilogram of silage contains 0.1 kilograms of minerals and each kilogram of mixed grains contains 0.2 kilograms of minerals. Each cow requires a minimum of 1.5 kilograms of minerals per day, leading to the constraint: 0.1x + 0.2y >= 1.5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 215x + 320y\nConstraints:\n0.5x + 0.2y >= 2\n0.2x + 0.1y <= 1.0\n0.1x + 0.2y >= 1.5", "canonical": {"objective": [215.0, 320.0], "constraints": [[-0.5, -0.2, -2.0], [0.2, 0.1, 1.0], [-0.1, -0.2, -1.5]]}, "solution": {"x": 1, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Kilograms of silage bought: Silage\n- Kilograms of mixed grains bought: MixedGrains\n\nConstraints:\n- Protein requirement (minimum of 2 kilograms per day):\n  0.5 * Silage + 0.2 * MixedGrains >= 2\n- Vitamin limit (at most 1.0 kilograms per day):\n  0.2 * Silage + 0.1 * MixedGrains <= 1.0\n- Mineral requirement (minimum of 1.5 kilograms per day):\n  0.1 * Silage + 0.2 * MixedGrains >= 1.5\n\nObjective:\n- Minimize cost (Silage costs $215 per kilogram, mixed grains cost $320 per kilogram):\n  215 * Silage + 320 * MixedGrains\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSilage = intvar(0, 999999999)  # Kilograms of silage bought\nMixedGrains = intvar(0, 999999999)  # Kilograms of mixed grains bought\n\n# Constraints\nm = Model()\n\n# Each cow requires a minimum of 2 kilograms of protein per day:\nm += 0.5 * Silage + 0.2 * MixedGrains >= 2\n# Each cow can have at most 1.0 kilograms of vitamins per day:\nm += 0.2 * Silage + 0.1 * MixedGrains <= 1.0\n# Each cow requires a minimum of 1.5 kilograms of minerals per day:\nm += 0.1 * Silage + 0.2 * MixedGrains >= 1.5\n\n# Objective\n# Minimize cost (Silage costs $215 per kilogram, mixed grains cost $320 per kilogram):\nm.minimize(215 * Silage + 320 * MixedGrains)\n", "entities": [{"start": 37, "end": 43, "word": "silage", "entity_group": "VAR", "score": 0.9985159297147346}, {"start": 48, "end": 60, "word": "mixed grains", "entity_group": "VAR", "score": 0.9999666777544196}, {"start": 63, "end": 69, "word": "Silage", "entity_group": "VAR", "score": 0.9995133907512072}, {"start": 70, "end": 75, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9976824514019907}, {"start": 78, "end": 81, "word": "215", "entity_group": "PARAM", "score": 0.9994751905906791}, {"start": 101, "end": 113, "word": "mixed grains", "entity_group": "VAR", "score": 0.9999626864251269}, {"start": 114, "end": 118, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989907586953091}, {"start": 121, "end": 124, "word": "320", "entity_group": "PARAM", "score": 0.9996077148640103}, {"start": 157, "end": 163, "word": "silage", "entity_group": "VAR", "score": 0.9990987229621134}, {"start": 173, "end": 176, "word": "0.5", "entity_group": "PARAM", "score": 0.999682440143265}, {"start": 200, "end": 203, "word": "0.2", "entity_group": "PARAM", "score": 0.9997361135774482}, {"start": 232, "end": 235, "word": "0.1", "entity_group": "PARAM", "score": 0.9996599398581775}, {"start": 277, "end": 289, "word": "mixed grains", "entity_group": "VAR", "score": 0.999974961945073}, {"start": 299, "end": 302, "word": "0.2", "entity_group": "PARAM", "score": 0.9996556573185169}, {"start": 326, "end": 329, "word": "0.1", "entity_group": "PARAM", "score": 0.9997360990552935}, {"start": 358, "end": 361, "word": "0.2", "entity_group": "PARAM", "score": 0.9995791328794191}, {"start": 406, "end": 413, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9983200215137207}, {"start": 417, "end": 418, "word": "2", "entity_group": "LIMIT", "score": 0.9997672753154104}, {"start": 444, "end": 447, "word": "1.5", "entity_group": "LIMIT", "score": 0.9997143738057372}, {"start": 508, "end": 515, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990881145359801}, {"start": 516, "end": 519, "word": "1.0", "entity_group": "LIMIT", "score": 0.9997297082169965}, {"start": 596, "end": 604, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9836604567056969}, {"start": 605, "end": 609, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9872855914581306}]}
{"doc_id": "1571791236", "document": "Iota Software has full-time employees earning $800 per week and part-time employees earning $400 per week. The projects require at least 60 employees, of whom at least 40 have to be full-time employees. Due to corporate law, the number of full-time employees should be at least a third of the number of part-time employees. It is also required to keep the weekly wage bill below $30000. Formulate an LP to minimize the wage bill.", "order_mapping": {"full-time employees": 0, "part-time employees": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"full-time employees": "800", "part-time employees": "400"}}, "const_declarations": [{"type": "linear", "direction": "below", "limit": "30000", "terms": {"full-time employees": "800", "part-time employees": "400"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "60", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "full-time employees", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "full-time employees", "direction": "at least", "param": "third", "y_var": "part-time employees", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of full-time employees\n- y: Number of part-time employees\n\nObjective:\n- Minimize the weekly wage bill. Full-time employees earn $800 per week and part-time employees earn $400 per week. Therefore, the objective function is: Minimize 800x + 400y\n\nConstraints:\n- The total wage bill needs to be kept below $30000, leading to the constraint: 800x + 400y <= 30000.\n- The projects require at least 60 employees, forming the constraint: x + y >= 60.\n- At least 40 employees have to be full-time, leading to the constraint: x >= 40.\n- The number of full-time employees should be at least a third of the number of part-time employees, resulting in the constraint: x >= 1/3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 800x + 400y\nConstraints:\n800x + 400y <= 30000\nx + y >= 60\nx >= 40\nx >= 1/3y", "canonical": {"objective": [800.0, 400.0], "constraints": [[800.0, 400.0, 30000.0], [-1.0, -1.0, -60.0], [-1.0, 0.0, -40.0], [-1.0, 0.3333333333333333, 0.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of full-time employees: FullTimeEmployees\n- Number of part-time employees: PartTimeEmployees\n\nConstraints:\n- Total number of employees should be at least 60:\n  FullTimeEmployees + PartTimeEmployees >= 60\n- At least 40 employees must be full-time:\n  FullTimeEmployees >= 40\n- The number of full-time employees should be at least a third of the number of part-time employees:\n  FullTimeEmployees >= 1/3 * PartTimeEmployees\n- Weekly wage bill should be below $30000:\n  800 * FullTimeEmployees + 400 * PartTimeEmployees <= 30000\n\nObjective:\n- Minimize the wage bill:\n  800 * FullTimeEmployees + 400 * PartTimeEmployees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFullTimeEmployees = intvar(0, 999999999)  # Number of full-time employees\nPartTimeEmployees = intvar(0, 999999999)  # Number of part-time employees\n\n# Constraints\nm = Model()\n\n# The projects require at least 60 employees:\nm += FullTimeEmployees + PartTimeEmployees >= 60\n# At least 40 have to be full-time employees:\nm += FullTimeEmployees >= 40\n# The number of full-time employees should be at least a third of the number of part-time employees:\nm += FullTimeEmployees >= (1/3) * PartTimeEmployees\n# Keep the weekly wage bill below $30000:\nm += 800 * FullTimeEmployees + 400 * PartTimeEmployees <= 30000\n\n# Objective\n# Minimize the wage bill:\nm.minimize(800 * FullTimeEmployees + 400 * PartTimeEmployees)\n", "entities": [{"start": 18, "end": 39, "word": "full - time employees", "entity_group": "VAR", "score": 0.9991404478350929}, {"start": 40, "end": 47, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9950211506629534}, {"start": 50, "end": 53, "word": "800", "entity_group": "PARAM", "score": 0.9995582295565206}, {"start": 67, "end": 88, "word": "part - time employees", "entity_group": "VAR", "score": 0.9992649038942185}, {"start": 89, "end": 96, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9950576177321014}, {"start": 99, "end": 102, "word": "400", "entity_group": "PARAM", "score": 0.9995211613089672}, {"start": 135, "end": 143, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987931433561962}, {"start": 144, "end": 146, "word": "60", "entity_group": "LIMIT", "score": 0.9997118849714628}, {"start": 167, "end": 175, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982317936870431}, {"start": 176, "end": 178, "word": "40", "entity_group": "LIMIT", "score": 0.9996674575466842}, {"start": 190, "end": 211, "word": "full - time employees", "entity_group": "VAR", "score": 0.9992530129058178}, {"start": 251, "end": 272, "word": "full - time employees", "entity_group": "VAR", "score": 0.9991875115423782}, {"start": 283, "end": 291, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9971722513465378}, {"start": 294, "end": 299, "word": "third", "entity_group": "PARAM", "score": 0.9971925663710095}, {"start": 317, "end": 338, "word": "part - time employees", "entity_group": "VAR", "score": 0.9993099529455733}, {"start": 373, "end": 389, "word": "weekly wage bill", "entity_group": "OBJ_NAME", "score": 0.488647206108197}, {"start": 390, "end": 395, "word": "below", "entity_group": "CONST_DIR", "score": 0.9851510814659671}, {"start": 398, "end": 403, "word": "30000", "entity_group": "LIMIT", "score": 0.9997037628975741}, {"start": 425, "end": 433, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9988599860862836}, {"start": 434, "end": 447, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.7882524261650913}]}
{"doc_id": "-387572139", "document": "Kald Vehicle makes minivans and trucks, each requiring the use of an assembly machine and a painting machine. It takes 2 hours on the assembly machine and 1.5 hours on the painting machine to make a minivan. On the other hand, it takes 4 hours on the assembly machine and 2 hours on the painting machine to make a truck. The profit per minivan is $1200 and the profit per truck is $1700. The assembly machine is available for at most 12 hours per day and the painting machine is available for at most 11 hours per day. How many of each vehicle should the company make in order to maximize profit?", "order_mapping": {"minivans": 0, "trucks": 1, "minivan": 0, "truck": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"truck": "1700", "minivan": "1200"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "12", "terms": {"minivan": "2", "truck": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "11", "terms": {"minivan": "1.5", "truck": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of minivans\n- y: Number of trucks\n\nObjective:\n- The company aims to maximize its profit. The profit per minivan is $1200 and the profit per truck is $1700. Therefore, the objective function is: Maximize 1200x + 1700y\n\nConstraints:\n- The assembly machine is available for at most 12 hours per day, and it takes 2 hours on the assembly machine to make a minivan and 4 hours to make a truck. This leads to the constraint: 2x + 4y <= 12.\n- The painting machine is available for at most 11 hours per day, and it takes 1.5 hours on the painting machine to make a minivan and 2 hours to make a truck. This results in the constraint: 1.5x + 2y <= 11.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1200x + 1700y\nConstraints:\n2x + 4y <= 12\n1.5x + 2y <= 11", "canonical": {"objective": [-1200.0, -1700.0], "constraints": [[2.0, 4.0, 12.0], [1.5, 2.0, 11.0]]}, "solution": {"x": 6, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of minivans produced: Minivans\n- Number of trucks produced: Trucks\n\nConstraints:\n- Assembly machine time constraint (2 hours for a minivan, 4 hours for a truck, at most 12 hours available):\n  2 * Minivans + 4 * Trucks <= 12\n- Painting machine time constraint (1.5 hours for a minivan, 2 hours for a truck, at most 11 hours available):\n  1.5 * Minivans + 2 * Trucks <= 11\n\nObjective:\n- Maximize profit ($1200 per minivan, $1700 per truck):\n  1200 * Minivans + 1700 * Trucks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMinivans = intvar(0, 999999999)  # Number of minivans produced\nTrucks = intvar(0, 999999999)  # Number of trucks produced\n\n# Constraints\nm = Model()\n\n# Assembly machine time constraint (2 hours for a minivan, 4 hours for a truck, at most 12 hours available):\nm += 2 * Minivans + 4 * Trucks <= 12\n# Painting machine time constraint (1.5 hours for a minivan, 2 hours for a truck, at most 11 hours available):\nm += 1.5 * Minivans + 2 * Trucks <= 11\n\n# Objective\n# Maximize profit ($1200 per minivan, $1700 per truck):\nm.maximize(1200 * Minivans + 1700 * Trucks)\n", "entities": [{"start": 19, "end": 27, "word": "minivans", "entity_group": "VAR", "score": 0.9987091379731324}, {"start": 32, "end": 38, "word": "trucks", "entity_group": "VAR", "score": 0.9983464637341053}, {"start": 121, "end": 122, "word": "2", "entity_group": "PARAM", "score": 0.9996079186517355}, {"start": 157, "end": 160, "word": "1.5", "entity_group": "PARAM", "score": 0.9996574984636254}, {"start": 201, "end": 208, "word": "minivan", "entity_group": "VAR", "score": 0.9997142487761984}, {"start": 240, "end": 241, "word": "4", "entity_group": "PARAM", "score": 0.9996850464222848}, {"start": 276, "end": 277, "word": "2", "entity_group": "PARAM", "score": 0.9996570914017567}, {"start": 318, "end": 323, "word": "truck", "entity_group": "VAR", "score": 0.9993050104969464}, {"start": 330, "end": 336, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997751135491505}, {"start": 341, "end": 348, "word": "minivan", "entity_group": "VAR", "score": 0.9994402125363763}, {"start": 354, "end": 358, "word": "1200", "entity_group": "PARAM", "score": 0.9993469717129815}, {"start": 367, "end": 373, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998239666324911}, {"start": 378, "end": 383, "word": "truck", "entity_group": "VAR", "score": 0.998860317491129}, {"start": 389, "end": 393, "word": "1700", "entity_group": "PARAM", "score": 0.9996984779008873}, {"start": 434, "end": 441, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987152209023586}, {"start": 442, "end": 444, "word": "12", "entity_group": "LIMIT", "score": 0.9997847286214211}, {"start": 501, "end": 508, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987910716212528}, {"start": 509, "end": 511, "word": "11", "entity_group": "LIMIT", "score": 0.9997647572944746}, {"start": 589, "end": 597, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993210574349281}, {"start": 598, "end": 604, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147079}]}
{"doc_id": "-1971177107", "document": "A boy buys and sells two types of hoodies. Zippered hoodies cost him $20 each and pullover hoodies cost his $15 each. He can spend a total of $450. He can sell at most 25 hoodies total. If the profit per zippered hoodie is $5 and the profit per pullover hoodie is $4, how many of each should he buy and sell to maximize his profit?", "order_mapping": {"Zippered hoodies": 0, "pullover hoodies": 1, "zippered hoodie": 0, "pullover hoodie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"zippered hoodie": "5", "pullover hoodie": "4"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "25", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "a total of", "limit": "450", "terms": {"Zippered hoodies": "20", "pullover hoodies": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of zippered hoodies bought and sold\n- y: Number of pullover hoodies bought and sold\n\nObjective:\n- The boy aims to maximize his profit. The profit per zippered hoodie is $5 and the profit per pullover hoodie is $4. Therefore, the objective function is: Maximize 5x + 4y\n\nConstraints:\n- He can sell at most 25 hoodies in total, leading to the constraint: x + y <= 25.\n- He can spend a total of $450, so the constraint is: 20x + 15y <= 450.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 4y\nConstraints:\nx + y <= 25\n20x + 15y <= 450", "canonical": {"objective": [-5.0, -4.0], "constraints": [[1.0, 1.0, 25.0], [20.0, 15.0, 450.0]]}, "solution": {"x": 15, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of zippered hoodies bought and sold: ZipperedHoodies\n- Number of pullover hoodies bought and sold: PulloverHoodies\n\nConstraints:\n- Total cost of zippered and pullover hoodies should not exceed $450:\n  20 * ZipperedHoodies + 15 * PulloverHoodies <= 450\n- Total number of hoodies sold should not exceed 25:\n  ZipperedHoodies + PulloverHoodies <= 25\n\nObjective:\n- Maximize profit ($5 profit per zippered hoodie, $4 profit per pullover hoodie):\n  5 * ZipperedHoodies + 4 * PulloverHoodies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nZipperedHoodies = intvar(0, 999999999)  # Number of zippered hoodies bought and sold\nPulloverHoodies = intvar(0, 999999999)  # Number of pullover hoodies bought and sold\n\n# Constraints\nm = Model()\n\n# He can spend a total of $450 on hoodies:\nm += 20 * ZipperedHoodies + 15 * PulloverHoodies <= 450\n# He can sell at most 25 hoodies total:\nm += ZipperedHoodies + PulloverHoodies <= 25\n\n# Objective\n# Maximize profit ($5 profit per zippered hoodie, $4 profit per pullover hoodie):\nm.maximize(5 * ZipperedHoodies + 4 * PulloverHoodies)\n", "entities": [{"start": 44, "end": 60, "word": "Zippered hoodies", "entity_group": "VAR", "score": 0.9999790439286876}, {"start": 72, "end": 74, "word": "20", "entity_group": "PARAM", "score": 0.9997379573479656}, {"start": 84, "end": 100, "word": "pullover hoodies", "entity_group": "VAR", "score": 0.9999449631225078}, {"start": 112, "end": 114, "word": "15", "entity_group": "PARAM", "score": 0.9996498783677006}, {"start": 135, "end": 145, "word": "a total of", "entity_group": "CONST_DIR", "score": 0.9557829821798295}, {"start": 148, "end": 151, "word": "450", "entity_group": "LIMIT", "score": 0.9987748070506984}, {"start": 166, "end": 173, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988037605552442}, {"start": 174, "end": 176, "word": "25", "entity_group": "LIMIT", "score": 0.999558262867209}, {"start": 200, "end": 206, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999837072803176}, {"start": 211, "end": 226, "word": "zippered hoodie", "entity_group": "VAR", "score": 0.9997881558384044}, {"start": 232, "end": 233, "word": "5", "entity_group": "PARAM", "score": 0.9994652829053123}, {"start": 242, "end": 248, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999366194890611}, {"start": 253, "end": 268, "word": "pullover hoodie", "entity_group": "VAR", "score": 0.9997695047762677}, {"start": 274, "end": 275, "word": "4", "entity_group": "PARAM", "score": 0.999652931629018}, {"start": 321, "end": 329, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991509220316331}, {"start": 334, "end": 340, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998330376543432}]}
{"doc_id": "-342979720", "document": "A telecommunications company installs internet service and TV service in buildings. Each internet service takes 60 minutes of wiring time and 10 minutes of box installation time. Each TV service takes 50 minutes of wiring time and 20 minutes of box installation time. The company has available 7000 minutes of wiring time and 4000 minutes of box installation time. If the profit per internet service installation is $100 and the profit per TV service installation is $120, how many of each should be installed to maximize profit?", "order_mapping": {"internet service": 0, "TV service": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"internet service": "100", "TV service": "120"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "7000", "terms": {"internet service": "60", "TV service": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"internet service": "10", "TV service": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of internet service installations\n- y: Number of TV service installations\n\nObjective:\n- The company aims to maximize its profit. The profit per internet service installation is $100 and the profit per TV service installation is $120. Therefore, the objective function is: Maximize 100x + 120y\n\nConstraints:\n- The company has 7000 minutes of wiring time available, and each internet service takes 60 minutes of wiring time and each TV service takes 50 minutes of wiring time. This leads to the constraint: 60x + 50y <= 7000.\n- The company has 4000 minutes of box installation time available, and each internet service takes 10 minutes of box installation time and each TV service takes 20 minutes of box installation time. This results in the constraint: 10x + 20y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 120y\nConstraints:\n60x + 50y <= 7000\n10x + 20y <= 4000", "canonical": {"objective": [-100.0, -120.0], "constraints": [[60.0, 50.0, 7000.0], [10.0, 20.0, 4000.0]]}, "solution": {"x": 0, "y": 140}, "pseudo_model": "\nDecision Variables:\n- Number of internet services installed: InternetService\n- Number of TV services installed: TVService\n\nConstraints:\n- Total wiring time for all installations should not exceed 7000 minutes:\n  60 * InternetService + 50 * TVService <= 7000\n- Total box installation time for all installations should not exceed 4000 minutes:\n  10 * InternetService + 20 * TVService <= 4000\n\nObjective:\n- Maximize profit (100 dollars per internet service installation, 120 dollars per TV service installation):\n  100 * InternetService + 120 * TVService\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nInternetService = intvar(0, 999999999)  # Number of internet services installed\nTVService = intvar(0, 999999999)  # Number of TV services installed\n\n# Constraints\nm = Model()\n\n# Total wiring time for all installations should not exceed 7000 minutes:\nm += 60 * InternetService + 50 * TVService <= 7000\n# Total box installation time for all installations should not exceed 4000 minutes:\nm += 10 * InternetService + 20 * TVService <= 4000\n\n# Objective\n# Maximize profit (100 dollars per internet service installation, 120 dollars per TV service installation):\nm.maximize(100 * InternetService + 120 * TVService)\n", "entities": [{"start": 38, "end": 54, "word": "internet service", "entity_group": "VAR", "score": 0.9999607256565735}, {"start": 59, "end": 69, "word": "TV service", "entity_group": "VAR", "score": 0.9999852172896302}, {"start": 90, "end": 106, "word": "internet service", "entity_group": "VAR", "score": 0.9999851247624174}, {"start": 113, "end": 115, "word": "60", "entity_group": "PARAM", "score": 0.9997031792929211}, {"start": 143, "end": 145, "word": "10", "entity_group": "PARAM", "score": 0.9996610705415965}, {"start": 186, "end": 196, "word": "TV service", "entity_group": "VAR", "score": 0.9999821112224632}, {"start": 203, "end": 205, "word": "50", "entity_group": "PARAM", "score": 0.9997121346798253}, {"start": 233, "end": 235, "word": "20", "entity_group": "PARAM", "score": 0.9996610705417619}, {"start": 287, "end": 296, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996110151611537}, {"start": 297, "end": 301, "word": "7000", "entity_group": "LIMIT", "score": 0.9993291152804051}, {"start": 329, "end": 333, "word": "4000", "entity_group": "LIMIT", "score": 0.9996227274615945}, {"start": 376, "end": 382, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997809862252588}, {"start": 387, "end": 403, "word": "internet service", "entity_group": "VAR", "score": 0.999957644480152}, {"start": 422, "end": 425, "word": "100", "entity_group": "PARAM", "score": 0.9991695686929949}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999391633890712}, {"start": 445, "end": 455, "word": "TV service", "entity_group": "VAR", "score": 0.9999794823373979}, {"start": 474, "end": 477, "word": "120", "entity_group": "PARAM", "score": 0.9994856932250715}, {"start": 520, "end": 528, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996793201601307}, {"start": 529, "end": 535, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274877081419}]}
{"doc_id": "-1995830584", "document": "A processing plant cleans and shells both crabs and lobsters. Each crab takes 4 minutes of cleaning and 15 minutes of shelling. Each lobster takes 5 minutes of cleaning and 12 minutes of shelling. The processing plant has 400 minutes available for cleaning and 900 minutes available for shelling. If the profit per crab is $14 and the profit per lobster is $18, how many of each should the processing plant clean and shell to maximize profit?", "order_mapping": {"crabs": 0, "lobsters": 1, "crab": 0, "lobster": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"crab": "14", "lobster": "18"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"crab": "4", "lobster": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "900", "terms": {"crab": "15", "lobster": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of crabs to clean and shell\n- y: Number of lobsters to clean and shell\n\nObjective:\n- The processing plant aims to maximize its profit. The profit per crab is $14 and the profit per lobster is $18. Therefore, the objective function is: Maximize 14x + 18y\n\nConstraints:\n- The processing plant has 400 minutes available for cleaning, and each crab takes 4 minutes of cleaning and each lobster takes 5 minutes of cleaning. This leads to the constraint: 4x + 5y <= 400.\n- The processing plant has 900 minutes available for shelling, and each crab takes 15 minutes of shelling and each lobster takes 12 minutes of shelling. This results in the constraint: 15x + 12y <= 900.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 14x + 18y\nConstraints:\n4x + 5y <= 400\n15x + 12y <= 900", "canonical": {"objective": [-14.0, -18.0], "constraints": [[4.0, 5.0, 400.0], [15.0, 12.0, 900.0]]}, "solution": {"x": 0, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Number of crabs processed: Crabs\n- Number of lobsters processed: Lobsters\n\nConstraints:\n- Total cleaning time for crabs and lobsters should not exceed 400 minutes:\n  4 * Crabs + 5 * Lobsters <= 400\n- Total shelling time for crabs and lobsters should not exceed 900 minutes:\n  15 * Crabs + 12 * Lobsters <= 900\n\nObjective:\n- Maximize profit ($14 per crab, $18 per lobster):\n  14 * Crabs + 18 * Lobsters\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCrabs = intvar(0, 999999999)  # Number of crabs processed\nLobsters = intvar(0, 999999999)  # Number of lobsters processed\n\n# Constraints\nm = Model()\n\n# Total cleaning time for crabs and lobsters should not exceed 400 minutes:\n# (4 minutes per crab, 5 minutes per lobster)\nm += 4 * Crabs + 5 * Lobsters <= 400\n\n# Total shelling time for crabs and lobsters should not exceed 900 minutes:\n# (15 minutes per crab, 12 minutes per lobster)\nm += 15 * Crabs + 12 * Lobsters <= 900\n\n# Objective\n# Maximize profit ($14 per crab, $18 per lobster):\nm.maximize(14 * Crabs + 18 * Lobsters)\n", "entities": [{"start": 42, "end": 47, "word": "crabs", "entity_group": "VAR", "score": 0.9992983381014924}, {"start": 52, "end": 60, "word": "lobsters", "entity_group": "VAR", "score": 0.9998166218932817}, {"start": 68, "end": 72, "word": "crab", "entity_group": "VAR", "score": 0.9995350053972116}, {"start": 79, "end": 80, "word": "4", "entity_group": "PARAM", "score": 0.9997016584640874}, {"start": 105, "end": 107, "word": "15", "entity_group": "PARAM", "score": 0.9996969908841412}, {"start": 135, "end": 142, "word": "lobster", "entity_group": "VAR", "score": 0.9995465231787446}, {"start": 149, "end": 150, "word": "5", "entity_group": "PARAM", "score": 0.9996757833789467}, {"start": 175, "end": 177, "word": "12", "entity_group": "PARAM", "score": 0.9996171490557676}, {"start": 225, "end": 228, "word": "400", "entity_group": "LIMIT", "score": 0.9997511713286952}, {"start": 237, "end": 246, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988870168680227}, {"start": 264, "end": 267, "word": "900", "entity_group": "LIMIT", "score": 0.9997516894955834}, {"start": 276, "end": 285, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988916950196136}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998937694295225}, {"start": 319, "end": 323, "word": "crab", "entity_group": "VAR", "score": 0.9995602983009623}, {"start": 329, "end": 331, "word": "14", "entity_group": "PARAM", "score": 0.9991625054702319}, {"start": 340, "end": 346, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999909456788139}, {"start": 351, "end": 358, "word": "lobster", "entity_group": "VAR", "score": 0.999088832975341}, {"start": 364, "end": 366, "word": "18", "entity_group": "PARAM", "score": 0.9994707412182511}, {"start": 433, "end": 441, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9964738164916066}, {"start": 442, "end": 448, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998645346976204}]}
{"doc_id": "-1611900017", "document": "Frank has 1500 acres of land on which he plans to grow carrots and pumpkins. He has at most 1000 hours of tractor time available and $25000 of capital available. Each acre of carrots requires 15 hours of tractor work and $12 of capital, and each acre of pumpkins requires 20 hours of tractor work and $55 of capital. If the profit from an acre of carrots is $80 and the profit from an acre of pumpkins is $124, how many acres of each crop should he plant to maximize his profit?", "order_mapping": {"carrots": 0, "pumpkins": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pumpkins": "124", "carrots": "80"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "1500", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1000", "terms": {"carrots": "15", "pumpkins": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "25000", "terms": {"carrots": "12", "pumpkins": "55"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of carrots\n- y: Acres of pumpkins\n\nObjective:\n- Frank wants to maximize his profit. The profit from an acre of carrots is $80 and the profit from an acre of pumpkins is $124. Therefore, the objective function is: Maximize 80x + 124y\n\nConstraints:\n- Frank has 1500 acres of land available, so the constraint is: x + y <= 1500.\n- He has at most 1000 hours of tractor time available, and each acre of carrots requires 15 hours of tractor work and each acre of pumpkins requires 20 hours of tractor work. This leads to the constraint: 15x + 20y <= 1000.\n- He has $25000 of capital available, and each acre of carrots requires $12 of capital and each acre of pumpkins requires $55 of capital. This results in the constraint: 12x + 55y <= 25000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 80x + 124y\nConstraints:\nx + y <= 1500\n15x + 20y <= 1000\n12x + 55y <= 25000", "canonical": {"objective": [-80.0, -124.0], "constraints": [[1.0, 1.0, 1500.0], [15.0, 20.0, 1000.0], [12.0, 55.0, 25000.0]]}, "solution": {"x": 0, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of acres of carrots planted: Carrots\n- Number of acres of pumpkins planted: Pumpkins\n\nConstraints:\n- Total acres planted should not exceed 1500:\n  Carrots + Pumpkins <= 1500\n- Tractor time for both crops should not exceed 1000 hours (15 hours per acre for carrots, 20 hours per acre for pumpkins):\n  15 * Carrots + 20 * Pumpkins <= 1000\n- Capital spent on both crops should not exceed $25000 ($12 per acre for carrots, $55 per acre for pumpkins):\n  12 * Carrots + 55 * Pumpkins <= 25000\n\nObjective:\n- Maximize profit ($80 profit per acre of carrots, $124 profit per acre of pumpkins):\n  80 * Carrots + 124 * Pumpkins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # Number of acres of carrots\nPumpkins = intvar(0, 999999999)  # Number of acres of pumpkins\n\n# Constraints\nm = Model()\n\n# Total acres of carrots and pumpkins should not exceed 1500:\nm += Carrots + Pumpkins <= 1500\n# Tractor time for carrots (15 hours per acre) and pumpkins (20 hours per acre) should not exceed 1000 hours:\nm += 15 * Carrots + 20 * Pumpkins <= 1000\n# Capital for carrots ($12 per acre) and pumpkins ($55 per acre) should not exceed $25000:\nm += 12 * Carrots + 55 * Pumpkins <= 25000\n\n# Objective\n# Maximize profit ($80 per acre of carrots, $124 per acre of pumpkins):\nm.maximize(80 * Carrots + 124 * Pumpkins)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9903200744596526}, {"start": 10, "end": 14, "word": "1500", "entity_group": "LIMIT", "score": 0.9988120009290494}, {"start": 55, "end": 62, "word": "carrots", "entity_group": "VAR", "score": 0.9989588044679745}, {"start": 67, "end": 75, "word": "pumpkins", "entity_group": "VAR", "score": 0.9987237128195854}, {"start": 85, "end": 92, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986208535468302}, {"start": 93, "end": 97, "word": "1000", "entity_group": "LIMIT", "score": 0.9997218928743041}, {"start": 136, "end": 141, "word": "25000", "entity_group": "LIMIT", "score": 0.9989478526745286}, {"start": 178, "end": 185, "word": "carrots", "entity_group": "VAR", "score": 0.9997182174502351}, {"start": 195, "end": 197, "word": "15", "entity_group": "PARAM", "score": 0.9997348974006028}, {"start": 226, "end": 228, "word": "12", "entity_group": "PARAM", "score": 0.9997094158035371}, {"start": 259, "end": 267, "word": "pumpkins", "entity_group": "VAR", "score": 0.9996727042306941}, {"start": 277, "end": 279, "word": "20", "entity_group": "PARAM", "score": 0.9997406491128783}, {"start": 308, "end": 310, "word": "55", "entity_group": "PARAM", "score": 0.9996749492799493}, {"start": 331, "end": 337, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998127941118844}, {"start": 354, "end": 361, "word": "carrots", "entity_group": "VAR", "score": 0.9991170262907245}, {"start": 367, "end": 369, "word": "80", "entity_group": "PARAM", "score": 0.9994277816232552}, {"start": 378, "end": 384, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998650279459225}, {"start": 401, "end": 409, "word": "pumpkins", "entity_group": "VAR", "score": 0.9988616140321536}, {"start": 415, "end": 418, "word": "124", "entity_group": "PARAM", "score": 0.9995461736207389}, {"start": 468, "end": 476, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843924705536}, {"start": 481, "end": 487, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999939718251647}]}
{"doc_id": "460760959", "document": "A souvenir shop can display and sell at most 100 umbrellas. A profit of $3 is made on each red umbrella and a profit of $5 is made on each blue umbrella. The souvenir shop makes sure a minimum of 10 umbrellas displayed are red. However, due to their popularity, at least 4 times as many customers prefer blue umbrellas to red umbrellas. Assuming the souvenir shop can sell all their umbrellas, how many of each umbrella type, red umbrella and blue umbrella, should be displayed and sold in order to maximize profit?", "order_mapping": {"red umbrella": 0, "blue umbrella": 1, "red": 0, "blue umbrellas": 1, "red umbrellas": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"red umbrella": "3", "blue umbrella": "5"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10", "var": "red", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "blue umbrellas", "direction": "at least", "param": "4 times", "y_var": "red umbrellas", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of red umbrellas\n- y: Number of blue umbrellas\n\nObjective:\n- The souvenir shop aims to maximize its profit. A profit of $3 is made on each red umbrella and a profit of $5 is made on each blue umbrella. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The shop can display and sell at most 100 umbrellas, so the constraint is: x + y <= 100.\n- A minimum of 10 umbrellas displayed must be red, leading to the constraint: x >= 10.\n- Due to their popularity, at least 4 times as many customers prefer blue umbrellas to red umbrellas, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\nx + y <= 100\nx >= 10\ny >= 4x", "canonical": {"objective": [-3.0, -5.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -10.0], [4.0, -1.0, 0.0]]}, "solution": {"x": 10, "y": 90}, "pseudo_model": "\nDecision Variables:\n- Number of red umbrellas displayed and sold: RedUmbrellas\n- Number of blue umbrellas displayed and sold: BlueUmbrellas\n\nConstraints:\n- Total number of umbrellas (red and blue) displayed and sold should not exceed 100:\n  RedUmbrellas + BlueUmbrellas <= 100\n- At least 10 umbrellas displayed must be red:\n  RedUmbrellas >= 10\n- The number of blue umbrellas must be at least 4 times the number of red umbrellas:\n  BlueUmbrellas >= 4 * RedUmbrellas\n\nObjective:\n- Maximize profit (3 dollars profit per red umbrella, 5 dollars profit per blue umbrella):\n  3 * RedUmbrellas + 5 * BlueUmbrellas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRedUmbrellas = intvar(0, 999999999)  # Number of red umbrellas\nBlueUmbrellas = intvar(0, 999999999)  # Number of blue umbrellas\n\n# Constraints\nm = Model()\n\n# The shop can display and sell at most 100 umbrellas:\nm += RedUmbrellas + BlueUmbrellas <= 100\n# A minimum of 10 umbrellas displayed must be red:\nm += RedUmbrellas >= 10\n# At least 4 times as many customers prefer blue umbrellas to red umbrellas:\nm += BlueUmbrellas >= 4 * RedUmbrellas\n\n# Objective\n# Maximize profit (3 dollars profit per red umbrella, 5 dollars profit per blue umbrella):\nm.maximize(3 * RedUmbrellas + 5 * BlueUmbrellas)\n", "entities": [{"start": 37, "end": 44, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986776969619798}, {"start": 45, "end": 48, "word": "100", "entity_group": "LIMIT", "score": 0.9996692626269098}, {"start": 63, "end": 69, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998483761844138}, {"start": 75, "end": 76, "word": "3", "entity_group": "PARAM", "score": 0.9995088770361589}, {"start": 93, "end": 105, "word": "red umbrella", "entity_group": "VAR", "score": 0.9999713584349784}, {"start": 112, "end": 118, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998212262352907}, {"start": 124, "end": 125, "word": "5", "entity_group": "PARAM", "score": 0.9995832252723705}, {"start": 142, "end": 155, "word": "blue umbrella", "entity_group": "VAR", "score": 0.9999520724480406}, {"start": 189, "end": 196, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9932663800125235}, {"start": 200, "end": 202, "word": "10", "entity_group": "LIMIT", "score": 0.9997104984204113}, {"start": 227, "end": 230, "word": "red", "entity_group": "VAR", "score": 0.9994741627290489}, {"start": 269, "end": 277, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997980239904849}, {"start": 278, "end": 285, "word": "4 times", "entity_group": "PARAM", "score": 0.7679660988603543}, {"start": 311, "end": 325, "word": "blue umbrellas", "entity_group": "VAR", "score": 0.9999376286295003}, {"start": 329, "end": 342, "word": "red umbrellas", "entity_group": "VAR", "score": 0.9999775579936473}, {"start": 436, "end": 448, "word": "red umbrella", "entity_group": "VAR", "score": 0.9999769102826416}, {"start": 453, "end": 466, "word": "blue umbrella", "entity_group": "VAR", "score": 0.9999904577314099}, {"start": 510, "end": 518, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995440267660302}, {"start": 519, "end": 525, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9991236384607343}]}
{"doc_id": "341875970", "document": "A fish food company makes small and bulk size containers of fish food. To make a small container of fish food, it takes 10 units of fish food and 2 minutes to fill. To make a bulk size container of fish food, it takes 30 units of fish food and 7 minutes to fill. The company has 200 units of fish food available and 120 minutes of filling time available. If the profit per small container of fish food is $2 and the profit per bulk size container of fish food is $7, how many of each should the company make to maximize profit?", "order_mapping": {"small": 0, "bulk size": 1, "small container": 0, "bulk size container": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bulk size container": "7", "small container": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"small container": "10", "bulk size": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "120", "terms": {"bulk size": "7", "small container": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small containers of fish food\n- y: Number of bulk size containers of fish food\n\nObjective:\n- The company aims to maximize its profit. The profit per small container of fish food is $2 and the profit per bulk size container of fish food is $7. Therefore, the objective function is: Maximize 2x + 7y\n\nConstraints:\n- The company has 200 units of fish food available, and it takes 10 units for a small container and 30 units for a bulk size container. This leads to the constraint: 10x + 30y <= 200.\n- The company has 120 minutes of filling time available, and it takes 2 minutes for a small container and 7 minutes for a bulk size container. This results in the constraint: 2x + 7y <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 7y\nConstraints:\n10x + 30y <= 200\n2x + 7y <= 120", "canonical": {"objective": [-2.0, -7.0], "constraints": [[10.0, 30.0, 200.0], [2.0, 7.0, 120.0]]}, "solution": {"x": 2, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of small containers of fish food made: SmallContainers\n- Number of bulk size containers of fish food made: BulkSizeContainers\n\nConstraints:\n- Total units of fish food used should not exceed 200 units:\n  10 * SmallContainers + 30 * BulkSizeContainers <= 200\n- Total filling time should not exceed 120 minutes:\n  2 * SmallContainers + 7 * BulkSizeContainers <= 120\n\nObjective:\n- Maximize profit (2 dollars per small container, 7 dollars per bulk size container):\n  2 * SmallContainers + 7 * BulkSizeContainers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallContainers = intvar(0, 999999999)  # Number of small containers of fish food made\nBulkSizeContainers = intvar(0, 999999999)  # Number of bulk size containers of fish food made\n\n# Constraints\nm = Model()\n\n# The company has 200 units of fish food available:\nm += 10 * SmallContainers + 30 * BulkSizeContainers <= 200\n# The company has 120 minutes of filling time available:\nm += 2 * SmallContainers + 7 * BulkSizeContainers <= 120\n\n# Objective\n# Maximize profit (2 dollars per small container, 7 dollars per bulk size container):\nm.maximize(2 * SmallContainers + 7 * BulkSizeContainers)\n", "entities": [{"start": 26, "end": 31, "word": "small", "entity_group": "VAR", "score": 0.9996756092347236}, {"start": 36, "end": 40, "word": "bulk", "entity_group": "VAR", "score": 0.9982778256906631}, {"start": 82, "end": 97, "word": "small container", "entity_group": "VAR", "score": 0.9999651181082487}, {"start": 122, "end": 124, "word": "10", "entity_group": "PARAM", "score": 0.999672416883359}, {"start": 148, "end": 149, "word": "2", "entity_group": "PARAM", "score": 0.9995393766494679}, {"start": 178, "end": 187, "word": "bulk size", "entity_group": "VAR", "score": 0.9999838862411979}, {"start": 222, "end": 224, "word": "30", "entity_group": "PARAM", "score": 0.9996724168775167}, {"start": 248, "end": 249, "word": "7", "entity_group": "PARAM", "score": 0.9995082139470586}, {"start": 284, "end": 287, "word": "200", "entity_group": "LIMIT", "score": 0.999730571579638}, {"start": 307, "end": 316, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990289574084547}, {"start": 321, "end": 324, "word": "120", "entity_group": "LIMIT", "score": 0.9996676485057083}, {"start": 349, "end": 358, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992051141100767}, {"start": 368, "end": 374, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9986086248623521}, {"start": 379, "end": 394, "word": "small container", "entity_group": "VAR", "score": 0.9999566520420928}, {"start": 413, "end": 414, "word": "2", "entity_group": "PARAM", "score": 0.999696866777134}, {"start": 423, "end": 429, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999391948117401}, {"start": 434, "end": 453, "word": "bulk size container", "entity_group": "VAR", "score": 0.7753417608395337}, {"start": 472, "end": 473, "word": "7", "entity_group": "PARAM", "score": 0.9997122745394731}, {"start": 520, "end": 528, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996964240543539}, {"start": 529, "end": 535, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277552805353}]}
{"doc_id": "-282771990", "document": "A snack company wants to make a special mix using previous snack mixes, snack mix A and snack mix B. Each snack mix A has 20 cashews and 30 peanuts. Each snack mix B has 10 cashews and 45 peanuts.  The special mix must contain at least 90 cashews and 80 peanuts. In addition, there can be at most 12 of snack mix A in the mixture. If the cost per snack mix A is $1.00 and the cost per snack mix B is $1.20, how many of each should be in the mixture to minimize costs?", "order_mapping": {"snack mix A": 0, "snack mix B.": 1, "snack mix B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"snack mix A": "1.00", "snack mix B": "1.20"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "90", "terms": {"snack mix A": "20", "snack mix B": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"snack mix A": "30", "snack mix B": "45"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12", "var": "snack mix A", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of snack mix A\n- y: Number of snack mix B\n\nObjective:\n- The snack company aims to minimize costs. Given that the cost per snack mix A is $1.00 and the cost per snack mix B is $1.20, the objective function is: Minimize 1.00x + 1.20y\n\nConstraints:\n- The special mix must contain at least 90 cashews and 80 peanuts. This leads to the constraints: 20x + 10y >= 90 (for cashews) and 30x + 45y >= 80 (for peanuts).\n- There can be at most 12 of snack mix A in the mixture, resulting in the constraint: x <= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1.00x + 1.20y\nConstraints:\n20x + 10y >= 90\n30x + 45y >= 80\nx <= 12", "canonical": {"objective": [1.0, 1.2], "constraints": [[-20.0, -10.0, -90.0], [-30.0, -45.0, -80.0], [1.0, 0.0, 12.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of snack mix A in the mixture: SnackMixA\n- Number of snack mix B in the mixture: SnackMixB\n\nConstraints:\n- The special mix must contain at least 90 cashews (20 from A, 10 from B):\n  20 * SnackMixA + 10 * SnackMixB >= 90\n- The special mix must contain at least 80 peanuts (30 from A, 45 from B):\n  30 * SnackMixA + 45 * SnackMixB >= 80\n- There can be at most 12 of snack mix A in the mixture:\n  SnackMixA <= 12\n\nObjective:\n- Minimize costs (cost per snack mix A is $1.00 and cost per snack mix B is $1.20):\n  1.00 * SnackMixA + 1.20 * SnackMixB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSnackMixA = intvar(0, 999999999)  # Number of snack mix A in the mixture\nSnackMixB = intvar(0, 999999999)  # Number of snack mix B in the mixture\n\n# Constraints\nm = Model()\n\n# The special mix must contain at least 90 cashews:\nm += 20 * SnackMixA + 10 * SnackMixB >= 90\n# The special mix must contain at least 80 peanuts:\nm += 30 * SnackMixA + 45 * SnackMixB >= 80\n# There can be at most 12 of snack mix A in the mixture:\nm += SnackMixA <= 12\n\n# Objective\n# Minimize costs (cost per snack mix A is $1.00 and cost per snack mix B is $1.20):\nm.minimize(1.00 * SnackMixA + 1.20 * SnackMixB)\n", "entities": [{"start": 73, "end": 84, "word": "snack mix A", "entity_group": "VAR", "score": 0.9882116474636624}, {"start": 89, "end": 101, "word": "snack mix B.", "entity_group": "VAR", "score": 0.9848905510713623}, {"start": 107, "end": 118, "word": "snack mix A", "entity_group": "VAR", "score": 0.9952041621035383}, {"start": 123, "end": 125, "word": "20", "entity_group": "PARAM", "score": 0.9995991398158618}, {"start": 138, "end": 140, "word": "30", "entity_group": "PARAM", "score": 0.9995791001482932}, {"start": 156, "end": 167, "word": "snack mix B", "entity_group": "VAR", "score": 0.99850389237534}, {"start": 172, "end": 174, "word": "10", "entity_group": "PARAM", "score": 0.9996598708330345}, {"start": 187, "end": 189, "word": "45", "entity_group": "PARAM", "score": 0.9995711623504021}, {"start": 229, "end": 237, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986979741247684}, {"start": 238, "end": 240, "word": "90", "entity_group": "LIMIT", "score": 0.9996739849260732}, {"start": 253, "end": 255, "word": "80", "entity_group": "LIMIT", "score": 0.9996646251226993}, {"start": 293, "end": 300, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984922797494842}, {"start": 301, "end": 303, "word": "12", "entity_group": "LIMIT", "score": 0.998958008143121}, {"start": 307, "end": 318, "word": "snack mix A", "entity_group": "VAR", "score": 0.9913405818700428}, {"start": 343, "end": 347, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9965116188465285}, {"start": 352, "end": 363, "word": "snack mix A", "entity_group": "VAR", "score": 0.9937665354190551}, {"start": 369, "end": 373, "word": "1.00", "entity_group": "PARAM", "score": 0.999028108490574}, {"start": 382, "end": 386, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9974104741290988}, {"start": 391, "end": 402, "word": "snack mix B", "entity_group": "VAR", "score": 0.9944098848340548}, {"start": 408, "end": 412, "word": "1.20", "entity_group": "PARAM", "score": 0.9992244803315452}, {"start": 460, "end": 468, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994684665477501}, {"start": 469, "end": 474, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9977132289017027}]}
{"doc_id": "-1524876908", "document": "Bluelight Kitchen makes two types of dish detergents: Clear Liquid and Fresh Mint. Clear Liquid consists of 15% soap and 6.5% citric acid and Fresh Mint consists of 7% soap and 10.5% citric acid. After doing some research, the company realizes that it needs to use at least 25 kg of soap and 20 kg of citric acid. If Clear Liquid costs $6.5 per kg and Fresh Mint costs $5.5 per kg, determine how much of each type of detergents should be produced so that chemical requirements are met at a minimum cost.", "order_mapping": {"Clear Liquid": 0, "Fresh Mint": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Fresh Mint": "5.5", "Clear Liquid": "6.5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "25", "terms": {"Clear Liquid": "15%", "Fresh Mint": "7%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"Clear Liquid": "6.5%", "Fresh Mint": "10.5%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of Clear Liquid produced\n- y: kg of Fresh Mint produced\n\nObjective:\n- The company aims to minimize the cost of production. Given that Clear Liquid costs $6.5 per kg and Fresh Mint costs $5.5 per kg, the objective function is: Minimize 6.5x + 5.5y\n\nConstraints:\n- The company needs to use at least 25 kg of soap, leading to the constraint: 0.15x + 0.07y >= 25\n- The company needs to use at least 20 kg of citric acid, leading to the constraint: 0.065x + 0.105y >= 20\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6.5x + 5.5y\nConstraints:\n0.15x + 0.07y >= 25\n0.065x + 0.105y >= 20", "canonical": {"objective": [6.5, 5.5], "constraints": [[-0.15, -0.07, -25.0], [-0.065, -0.105, -20.0]]}, "solution": {"x": 109, "y": 124}, "pseudo_model": "\nDecision Variables:\n- Amount of Clear Liquid produced (in kg): ClearLiquid\n- Amount of Fresh Mint produced (in kg): FreshMint\n\nConstraints:\n- Soap requirement (at least 25 kg):\n  0.15 * ClearLiquid + 0.07 * FreshMint >= 25\n- Citric acid requirement (at least 20 kg):\n  0.065 * ClearLiquid + 0.105 * FreshMint >= 20\n\nObjective:\n- Minimize cost (Clear Liquid costs $6.5 per kg and Fresh Mint costs $5.5 per kg):\n  6.5 * ClearLiquid + 5.5 * FreshMint\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nClearLiquid = intvar(0, 999999999)  # Amount of Clear Liquid produced (in kg)\nFreshMint = intvar(0, 999999999)  # Amount of Fresh Mint produced (in kg)\n\n# Constraints\nm = Model()\n\n# Soap requirement: at least 25 kg of soap\n# Clear Liquid has 15% soap and Fresh Mint has 7% soap\nm += 0.15 * ClearLiquid + 0.07 * FreshMint >= 25\n\n# Citric acid requirement: at least 20 kg of citric acid\n# Clear Liquid has 6.5% citric acid and Fresh Mint has 10.5% citric acid\nm += 0.065 * ClearLiquid + 0.105 * FreshMint >= 20\n\n# Objective\n# Minimize cost: Clear Liquid costs $6.5 per kg and Fresh Mint costs $5.5 per kg\nm.minimize(6.5 * ClearLiquid + 5.5 * FreshMint)\n", "entities": [{"start": 55, "end": 67, "word": "Clear Liquid", "entity_group": "VAR", "score": 0.9999784664461323}, {"start": 72, "end": 82, "word": "Fresh Mint", "entity_group": "VAR", "score": 0.9999797664810729}, {"start": 85, "end": 97, "word": "Clear Liquid", "entity_group": "VAR", "score": 0.9999820062680065}, {"start": 110, "end": 114, "word": "15 %", "entity_group": "PARAM", "score": 0.9425880424739906}, {"start": 124, "end": 129, "word": "6.5 %", "entity_group": "PARAM", "score": 0.9923627083527816}, {"start": 146, "end": 156, "word": "Fresh Mint", "entity_group": "VAR", "score": 0.9999832338173292}, {"start": 169, "end": 172, "word": "7 %", "entity_group": "PARAM", "score": 0.9188835005465107}, {"start": 182, "end": 188, "word": "10.5 %", "entity_group": "PARAM", "score": 0.9914395448603326}, {"start": 273, "end": 281, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990880115063637}, {"start": 282, "end": 284, "word": "25", "entity_group": "LIMIT", "score": 0.999717437410632}, {"start": 300, "end": 302, "word": "20", "entity_group": "LIMIT", "score": 0.9997083414335483}, {"start": 326, "end": 338, "word": "Clear Liquid", "entity_group": "VAR", "score": 0.9999866276580918}, {"start": 339, "end": 344, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994550562663547}, {"start": 347, "end": 350, "word": "6.5", "entity_group": "PARAM", "score": 0.9996501549448875}, {"start": 362, "end": 372, "word": "Fresh Mint", "entity_group": "VAR", "score": 0.9999825899714413}, {"start": 373, "end": 378, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.99943597146765}, {"start": 381, "end": 384, "word": "5.5", "entity_group": "PARAM", "score": 0.9995803595768411}, {"start": 502, "end": 509, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9921492022918377}, {"start": 510, "end": 514, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9982016767387026}]}
{"doc_id": "-117120382", "document": "An e-commerce company sells face masks and hand sanitizers. He has a budget of $1000 and each face mask costs $1.5 whereas each hand sanitizer costs $3. Each mask is then sold for a profit of $1 while each sanitizer is sold for a profit of $1.5. The owner estimates that at least 80 but at most 500 face masks are sold each day. He also estimates that the number of hand sanitizers sold will be at most half the number of face masks sold. How many of each item should he have in stock to maximize his daily profit?", "order_mapping": {"face masks": 0, "hand sanitizers": 1, "face mask": 0, "hand sanitizer": 1, "mask": 0, "sanitizer": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mask": "1", "sanitizer": "1.5"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "500", "var": "face masks", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "80", "var": "face masks", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "hand sanitizers", "direction": "at most", "param": "half", "y_var": "face masks", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of face masks\n- y: Number of hand sanitizers\n\nObjective:\n- The owner aims to maximize his daily profit. Each face mask is sold for a profit of $1 and each hand sanitizer is sold for a profit of $1.5. Therefore, the objective function is: Maximize 1x + 1.5y\n\nConstraints:\n- The total budget available for purchase is $1000, so the constraint is: 1.5x + 3y <= 1000.\n- At least 80 but at most 500 face masks are sold each day, leading to the constraint: x >= 80 and x <= 500.\n- The number of hand sanitizers sold will be at most half the number of face masks sold, resulting in the constraint: y <= 0.5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 1.5y\nConstraints:\n1.5x + 3y <= 1000\nx >= 80\nx <= 500\ny <= 0.5x", "canonical": {"objective": [-1.0, -1.5], "constraints": [[1.5, 3.0, 1000.0], [-1.0, 0.0, -80.0], [1.0, 0.0, 500.0], [-0.5, 1.0, 0.0]]}, "solution": {"x": 500, "y": 83}, "pseudo_model": "\nDecision Variables:\n- Number of face masks in stock: FaceMasks\n- Number of hand sanitizers in stock: HandSanitizers\n\nConstraints:\n- Budget constraint (each face mask costs $1.5, each hand sanitizer costs $3, total budget $1000):\n  1.5 * FaceMasks + 3 * HandSanitizers <= 1000\n- Face masks sold per day should be at least 80 and at most 500:\n  80 <= FaceMasks <= 500\n- Number of hand sanitizers sold should be at most half the number of face masks sold:\n  HandSanitizers <= 0.5 * FaceMasks\n\nObjective:\n- Maximize daily profit (profit of $1 per face mask, $1.5 per hand sanitizer):\n  1 * FaceMasks + 1.5 * HandSanitizers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFaceMasks = intvar(0, 999999999)  # Number of face masks in stock\nHandSanitizers = intvar(0, 999999999)  # Number of hand sanitizers in stock\n\n# Constraints\nm = Model()\n\n# The owner has a budget of $1000, each face mask costs $1.5, and each hand sanitizer costs $3:\nm += 1.5 * FaceMasks + 3 * HandSanitizers <= 1000\n# At least 80 but at most 500 face masks are sold each day:\nm += FaceMasks >= 80\nm += FaceMasks <= 500\n# The number of hand sanitizers sold will be at most half the number of face masks sold:\nm += HandSanitizers <= 0.5 * FaceMasks\n\n# Objective\n# Maximize daily profit (each mask sold for a profit of $1, each sanitizer sold for a profit of $1.5):\nm.maximize(1 * FaceMasks + 1.5 * HandSanitizers)\n", "entities": [{"start": 30, "end": 40, "word": "face masks", "entity_group": "VAR", "score": 0.9999670631383789}, {"start": 45, "end": 60, "word": "hand sanitizers", "entity_group": "VAR", "score": 0.9999857398468812}, {"start": 72, "end": 78, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9973092223776707}, {"start": 84, "end": 88, "word": "1000", "entity_group": "LIMIT", "score": 0.9987858032493141}, {"start": 98, "end": 107, "word": "face mask", "entity_group": "VAR", "score": 0.9999853446113096}, {"start": 116, "end": 119, "word": "1.5", "entity_group": "PARAM", "score": 0.9997207596952143}, {"start": 133, "end": 147, "word": "hand sanitizer", "entity_group": "VAR", "score": 0.9999839690445311}, {"start": 156, "end": 157, "word": "3", "entity_group": "PARAM", "score": 0.9997333432661545}, {"start": 165, "end": 169, "word": "mask", "entity_group": "VAR", "score": 0.9994415363899599}, {"start": 189, "end": 195, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999230431060099}, {"start": 201, "end": 202, "word": "1", "entity_group": "PARAM", "score": 0.9994965797105215}, {"start": 214, "end": 223, "word": "sanitizer", "entity_group": "VAR", "score": 0.9997921220501453}, {"start": 238, "end": 244, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995177510983617}, {"start": 250, "end": 253, "word": "1.5", "entity_group": "PARAM", "score": 0.9995523774460654}, {"start": 281, "end": 289, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990645599740191}, {"start": 290, "end": 292, "word": "80", "entity_group": "LIMIT", "score": 0.9995938324185067}, {"start": 297, "end": 304, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988896832845426}, {"start": 305, "end": 308, "word": "500", "entity_group": "LIMIT", "score": 0.9994410758121965}, {"start": 309, "end": 319, "word": "face masks", "entity_group": "VAR", "score": 0.9999545669011203}, {"start": 377, "end": 392, "word": "hand sanitizers", "entity_group": "VAR", "score": 0.9999367884078788}, {"start": 406, "end": 413, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9963194240474524}, {"start": 414, "end": 418, "word": "half", "entity_group": "PARAM", "score": 0.9948090257559239}, {"start": 433, "end": 443, "word": "face masks", "entity_group": "VAR", "score": 0.9999522472104619}, {"start": 500, "end": 508, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.99900035687384}, {"start": 519, "end": 525, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997550238356098}]}
{"doc_id": "-1488895992", "document": "A gardener grows lettuce and tomatoes in their 300 sqft backyard. The profit per sqft of lettuce is $2 and the profit per sqft of tomatoes is $3. In addition, bug spray must be used to grow both lettuce and tomatoes. Per sqft of lettuce, 5 mL of bug spray are needed. Per sqft of tomatoes, 7 mL of bug spray are needed. The gardener has available 255 mL of bug spray. How many of sqft of each should the gardener grow to maximize profit?", "order_mapping": {"lettuce": 0, "tomatoes": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lettuce": "2", "tomatoes": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "255", "terms": {"lettuce": "5", "tomatoes": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "in", "limit": "300", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Square feet of lettuce\n- y: Square feet of tomatoes\n\nObjective:\n- The gardener aims to maximize profit. The profit per square foot of lettuce is $2 and the profit per square foot of tomatoes is $3. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- Bug spray availability: The bug spray needed for lettuce and tomatoes should not exceed the available bug spray, which translates to the constraint: 5x + 7y <= 255.\n- Space constraint: The total area for growing lettuce and tomatoes is 300 sqft, leading to the constraint: x + y <= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\n5x + 7y <= 255\nx + y <= 300", "canonical": {"objective": [-2.0, -3.0], "constraints": [[5.0, 7.0, 255.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 2, "y": 35}, "pseudo_model": "\nDecision Variables:\n- Sqft of lettuce grown: Lettuce\n- Sqft of tomatoes grown: Tomatoes\n\nConstraints:\n- Total sqft used for lettuce and tomatoes should not exceed 300 sqft:\n  Lettuce + Tomatoes <= 300\n- Total bug spray used should not exceed 255 mL (5 mL per sqft of lettuce, 7 mL per sqft of tomatoes):\n  5 * Lettuce + 7 * Tomatoes <= 255\n\nObjective:\n- Maximize profit (2 dollars per sqft of lettuce, 3 dollars per sqft of tomatoes):\n  2 * Lettuce + 3 * Tomatoes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLettuce = intvar(0, 999999999)  # sqft of lettuce\nTomatoes = intvar(0, 999999999)  # sqft of tomatoes\n\n# Constraints\nm = Model()\n\n# Total sqft used for lettuce and tomatoes should not exceed 300 sqft:\nm += Lettuce + Tomatoes <= 300\n# Total bug spray used should not exceed 255 mL (5 mL per sqft of lettuce, 7 mL per sqft of tomatoes):\nm += 5 * Lettuce + 7 * Tomatoes <= 255\n\n# Objective\n# Maximize profit (2 dollars per sqft of lettuce, 3 dollars per sqft of tomatoes):\nm.maximize(2 * Lettuce + 3 * Tomatoes)\n", "entities": [{"start": 17, "end": 24, "word": "lettuce", "entity_group": "VAR", "score": 0.9988772904994083}, {"start": 29, "end": 37, "word": "tomatoes", "entity_group": "VAR", "score": 0.9986791431612931}, {"start": 38, "end": 40, "word": "in", "entity_group": "CONST_DIR", "score": 0.9366301520528825}, {"start": 47, "end": 50, "word": "300", "entity_group": "LIMIT", "score": 0.999532223393228}, {"start": 71, "end": 77, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999666071297304}, {"start": 90, "end": 97, "word": "lettuce", "entity_group": "VAR", "score": 0.9989590817196501}, {"start": 103, "end": 104, "word": "2", "entity_group": "PARAM", "score": 0.9988037493202013}, {"start": 113, "end": 119, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350558206935}, {"start": 132, "end": 140, "word": "tomatoes", "entity_group": "VAR", "score": 0.9990022148825737}, {"start": 146, "end": 147, "word": "3", "entity_group": "PARAM", "score": 0.9995270446402511}, {"start": 200, "end": 207, "word": "lettuce", "entity_group": "VAR", "score": 0.999295889066565}, {"start": 212, "end": 220, "word": "tomatoes", "entity_group": "VAR", "score": 0.9998118190052238}, {"start": 235, "end": 242, "word": "lettuce", "entity_group": "VAR", "score": 0.9994534316582373}, {"start": 245, "end": 246, "word": "5", "entity_group": "PARAM", "score": 0.9997089567359551}, {"start": 288, "end": 296, "word": "tomatoes", "entity_group": "VAR", "score": 0.999419760748797}, {"start": 299, "end": 300, "word": "7", "entity_group": "PARAM", "score": 0.999688166658627}, {"start": 347, "end": 356, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993029034679768}, {"start": 357, "end": 360, "word": "255", "entity_group": "LIMIT", "score": 0.9991286986353155}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.99958665347353}, {"start": 441, "end": 447, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728166}]}
{"doc_id": "1350493270", "document": "Emma wants to eat a diet that includes a minimum of 120 units of proteins and 30 units of fat. She can eat pork and shrimp to supplement her current vegetable-based diet. Pork costs $3 per unit and shrimp costs $5.5 per unit. One unit of Pork has 15 units of proteins and 4 units of fat. One unit of shrimp has 22 units of proteins and 7 units of fat. Formulate this as a linear programming problem. Find the minimum cost for a diet that consists of a mixture of these foods and also meets the minimal nutritional requirements.", "order_mapping": {"pork": 0, "shrimp": 1, "Pork": 0}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Pork": "3", "shrimp": "5.5"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "120", "terms": {"shrimp": "22", "Pork": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "30", "terms": {"Pork": "4", "shrimp": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of pork to be eaten\n- y: Units of shrimp to be eaten\n\nObjective:\n- Emma wants to minimize the cost of her diet. Pork costs $3 per unit and shrimp costs $5.5 per unit. Therefore, the objective function is: Minimize 3x + 5.5y\n\nConstraints:\n- Emma needs to consume a minimum of 120 units of proteins, which can be formulated as: 15x + 22y >= 120.\n- Emma also needs to consume a minimum of 30 units of fat, which can be formulated as: 4x + 7y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 5.5y\nConstraints:\n15x + 22y >= 120\n4x + 7y >= 30", "canonical": {"objective": [3.0, 5.5], "constraints": [[-15.0, -22.0, -120.0], [-4.0, -7.0, -30.0]]}, "solution": {"x": 8, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of units of pork: Pork\n- Number of units of shrimp: Shrimp\n\nConstraints:\n- To meet the minimum protein requirement (120 units):\n  15 * Pork + 22 * Shrimp >= 120\n- To meet the minimum fat requirement (30 units):\n  4 * Pork + 7 * Shrimp >= 30\n\nObjective:\n- Minimize the total cost of the diet:\n  3 * Pork + 5.5 * Shrimp\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPork = intvar(0, 999999999)  # Number of units of pork\nShrimp = intvar(0, 999999999)  # Number of units of shrimp\n\n# Constraints\nm = Model()\n\n# Minimum of 120 units of proteins:\nm += 15 * Pork + 22 * Shrimp >= 120\n# Minimum of 30 units of fat:\nm += 4 * Pork + 7 * Shrimp >= 30\n\n# Objective\n# Minimize cost (Pork costs $3 per unit, shrimp costs $5.5 per unit):\nm.minimize(3 * Pork + 5.5 * Shrimp)\n", "entities": [{"start": 41, "end": 48, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9976056560233779}, {"start": 52, "end": 55, "word": "120", "entity_group": "LIMIT", "score": 0.9997709316422265}, {"start": 78, "end": 80, "word": "30", "entity_group": "LIMIT", "score": 0.9996539172972061}, {"start": 108, "end": 112, "word": "pork", "entity_group": "VAR", "score": 0.9994170808699653}, {"start": 117, "end": 123, "word": "shrimp", "entity_group": "VAR", "score": 0.9993734932609168}, {"start": 175, "end": 179, "word": "Pork", "entity_group": "VAR", "score": 0.9995553905705005}, {"start": 180, "end": 185, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9968506388336017}, {"start": 188, "end": 189, "word": "3", "entity_group": "PARAM", "score": 0.9996017025327354}, {"start": 203, "end": 209, "word": "shrimp", "entity_group": "VAR", "score": 0.9997309770406878}, {"start": 210, "end": 215, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9948083259001781}, {"start": 218, "end": 221, "word": "5.5", "entity_group": "PARAM", "score": 0.9992949497292347}, {"start": 245, "end": 249, "word": "Pork", "entity_group": "VAR", "score": 0.9980288937366993}, {"start": 254, "end": 256, "word": "15", "entity_group": "PARAM", "score": 0.999743894866534}, {"start": 279, "end": 280, "word": "4", "entity_group": "PARAM", "score": 0.9996809172924418}, {"start": 308, "end": 314, "word": "shrimp", "entity_group": "VAR", "score": 0.9987835950285262}, {"start": 319, "end": 321, "word": "22", "entity_group": "PARAM", "score": 0.9997360350041}, {"start": 344, "end": 345, "word": "7", "entity_group": "PARAM", "score": 0.9996703123299956}, {"start": 419, "end": 426, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9784566795079549}, {"start": 427, "end": 431, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9976599057058293}]}
{"doc_id": "929102639", "document": "You have $50000 available to invest in either the solar energy industry or the wind energy industry. Money placed in the solar energy industry yields a return of 6% while money placed in the wind energy industry yields a return of 5%. With high expectations of the wind energy industry, you decide that at least 70% of your investment be placed in the wind energy industry. In addition, at most 20% of your investment can be in the solar energy industry. How much should you invest in each to maximize your return?", "order_mapping": {"solar energy industry": 0, "wind energy industry": 1, "wind energy": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"solar energy industry": "6%", "wind energy industry": "5%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "50000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "70%", "var": "wind energy industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "solar energy industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the solar energy industry\n- y: Dollars invested in the wind energy industry\n\nObjective:\n- The goal is to maximize the return on investment. Money placed in the solar energy industry yields a return of 6% while money placed in the wind energy industry yields a return of 5%. Therefore, the objective function is: Maximize 0.06x + 0.05y\n\nConstraints:\n- The total amount available for investment is $50,000, so the constraint is: x + y <= 50000.\n- At least 70% of the investment should be in the wind energy industry, leading to the constraint: y >= 0.70(x + y).\n- At most 20% of the investment can be in the solar energy industry, resulting in the constraint: x <= 0.20(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.06x + 0.05y\nConstraints:\nx + y <= 50000\ny >= 0.70(x + y)\nx <= 0.20(x + y)", "canonical": {"objective": [-0.06, -0.05], "constraints": [[1.0, 1.0, 50000.0], [0.7, -0.30000000000000004, 0.0], [0.8, -0.2, 0.0]]}, "solution": {"x": 10000, "y": 40000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the solar energy industry: SolarInvestment\n- Amount invested in the wind energy industry: WindInvestment\n\nConstraints:\n- Total investment should not exceed $50000:\n  SolarInvestment + WindInvestment <= 50000\n- At least 70% of the investment should be in the wind energy industry:\n  WindInvestment >= 0.70 * (SolarInvestment + WindInvestment)\n- At most 20% of the investment can be in the solar energy industry:\n  SolarInvestment <= 0.20 * (SolarInvestment + WindInvestment)\n\nObjective:\n- Maximize return (6% from solar energy industry, 5% from wind energy industry):\n  0.06 * SolarInvestment + 0.05 * WindInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSolarInvestment = intvar(0, 999999999)  # Amount invested in the solar energy industry\nWindInvestment = intvar(0, 999999999)  # Amount invested in the wind energy industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $50000:\nm += SolarInvestment + WindInvestment <= 50000\n# At least 70% of your investment should be in the wind energy industry:\nm += WindInvestment >= 0.70 * (SolarInvestment + WindInvestment)\n# At most 20% of your investment can be in the solar energy industry:\nm += SolarInvestment <= 0.20 * (SolarInvestment + WindInvestment)\n\n# Objective\n# Maximize return (6% from solar energy industry, 5% from wind energy industry):\nm.maximize(0.06 * SolarInvestment + 0.05 * WindInvestment)\n", "entities": [{"start": 11, "end": 16, "word": "50000", "entity_group": "LIMIT", "score": 0.9970936403458868}, {"start": 17, "end": 26, "word": "available", "entity_group": "CONST_DIR", "score": 0.9965268293197351}, {"start": 51, "end": 72, "word": "solar energy industry", "entity_group": "VAR", "score": 0.9995674836800128}, {"start": 80, "end": 100, "word": "wind energy industry", "entity_group": "VAR", "score": 0.999542035658538}, {"start": 123, "end": 144, "word": "solar energy industry", "entity_group": "VAR", "score": 0.9986217335958154}, {"start": 154, "end": 160, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9991887335305019}, {"start": 164, "end": 167, "word": "6 %", "entity_group": "PARAM", "score": 0.9515730605135143}, {"start": 194, "end": 214, "word": "wind energy industry", "entity_group": "VAR", "score": 0.9997659756446214}, {"start": 224, "end": 230, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9948739362208062}, {"start": 234, "end": 237, "word": "5 %", "entity_group": "PARAM", "score": 0.9832905205349118}, {"start": 270, "end": 281, "word": "wind energy", "entity_group": "VAR", "score": 0.9999940776662856}, {"start": 309, "end": 317, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987076455645201}, {"start": 318, "end": 322, "word": "70 %", "entity_group": "LIMIT", "score": 0.9342527083562873}, {"start": 359, "end": 379, "word": "wind energy industry", "entity_group": "VAR", "score": 0.7815510905588248}, {"start": 396, "end": 403, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998574262030259}, {"start": 404, "end": 408, "word": "20 %", "entity_group": "LIMIT", "score": 0.9663531150833014}, {"start": 442, "end": 463, "word": "solar energy industry", "entity_group": "VAR", "score": 0.9966939476846853}, {"start": 504, "end": 512, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999480241609613}, {"start": 518, "end": 524, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9989806348009503}]}
{"doc_id": "-214665832", "document": "A cereal company makes nutritional cereal, kids' cereal, and sugary cereal. Each box of nutritional cereal requires 3 units of oat and 1 unit of sugar. Each kids' cereal requires 1.5 units of oat and 1.5 units of sugar. Each sugary cereal requires 2 units of oat and 4 units of sugar. The company has available 500 units of oat and 700 units of sugar. If the revenue per box of nutritional cereal is $1, the revenue per kids' cereal is $1.50, and the revenue per sugary cereal is $2, how many of each should they make to maximize revenue?", "order_mapping": {"nutritional cereal": 0, "kids' cereal": 1, "sugary cereal": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"nutritional cereal": "1", "kids' cereal": "1.50", "sugary cereal": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"nutritional cereal": "3", "kids' cereal": "1.5", "sugary cereal": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"nutritional cereal": "1", "kids' cereal": "1.5", "sugary cereal": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of boxes of nutritional cereal\n- y: Number of boxes of kids' cereal\n- z: Number of boxes of sugary cereal\n\nObjective:\n- The company aims to maximize its revenue. The revenue per box of nutritional cereal is $1, the revenue per kids' cereal is $1.50, and the revenue per sugary cereal is $2. Therefore, the objective function is: Maximize x + 1.5y + 2z\n\nConstraints:\n- The company has available 500 units of oat and 700 units of sugar. Each box of nutritional cereal requires 3 units of oat and 1 unit of sugar, each kids' cereal requires 1.5 units of oat and 1.5 units of sugar, and each sugary cereal requires 2 units of oat and 4 units of sugar. These lead to the following constraints:\n    - 3x + 1.5y + 2z <= 500 (oat constraint)\n    - x + 1.5y + 4z <= 700 (sugar constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 1.5y + 2z\nConstraints:\n3x + 1.5y + 2z <= 500\nx + 1.5y + 4z <= 700", "canonical": {"objective": [-1.0, -1.5, -2.0], "constraints": [[3.0, 1.5, 2.0, 500.0], [1.0, 1.5, 4.0, 700.0]]}, "solution": {"x": 0, "y": 200, "z": 100}, "pseudo_model": "\nDecision Variables:\n- Number of nutritional cereal boxes: NutritionalCereal\n- Number of kids' cereal boxes: KidsCereal\n- Number of sugary cereal boxes: SugaryCereal\n\nConstraints:\n- Total oat usage should not exceed 500 units:\n  3*NutritionalCereal + 1.5*KidsCereal + 2*SugaryCereal <= 500\n- Total sugar usage should not exceed 700 units:\n  1*NutritionalCereal + 1.5*KidsCereal + 4*SugaryCereal <= 700\n\nObjective:\n- Maximize revenue:\n  $1*NutritionalCereal + $1.5*KidsCereal + $2*SugaryCereal\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNutritionalCereal = intvar(0, 999999999)  # Number of nutritional cereal boxes\nKidsCereal = intvar(0, 999999999)  # Number of kids' cereal boxes\nSugaryCereal = intvar(0, 999999999)  # Number of sugary cereal boxes\n\n# Constraints\nm = Model()\n\n# Oat constraint: 3 units for nutritional, 1.5 for kids', 2 for sugary; total available is 500 units\nm += 3*NutritionalCereal + 1.5*KidsCereal + 2*SugaryCereal <= 500\n# Sugar constraint: 1 unit for nutritional, 1.5 for kids', 4 for sugary; total available is 700 units\nm += 1*NutritionalCereal + 1.5*KidsCereal + 4*SugaryCereal <= 700\n\n# Objective\n# Maximize revenue: $1 for nutritional, $1.50 for kids', $2 for sugary\nm.maximize(1*NutritionalCereal + 1.5*KidsCereal + 2*SugaryCereal)\n", "entities": [{"start": 23, "end": 41, "word": "nutritional cereal", "entity_group": "VAR", "score": 0.999961386115991}, {"start": 44, "end": 57, "word": "kids ' cereal", "entity_group": "VAR", "score": 0.9994397071545819}, {"start": 64, "end": 77, "word": "sugary cereal", "entity_group": "VAR", "score": 0.9999731398118441}, {"start": 92, "end": 110, "word": "nutritional cereal", "entity_group": "VAR", "score": 0.9999792471659453}, {"start": 120, "end": 121, "word": "3", "entity_group": "PARAM", "score": 0.9996580392665386}, {"start": 139, "end": 140, "word": "1", "entity_group": "PARAM", "score": 0.999649376471603}, {"start": 162, "end": 175, "word": "kids ' cereal", "entity_group": "VAR", "score": 0.999483429383279}, {"start": 185, "end": 188, "word": "1.5", "entity_group": "PARAM", "score": 0.9997133033243236}, {"start": 206, "end": 209, "word": "1.5", "entity_group": "PARAM", "score": 0.999722757107066}, {"start": 232, "end": 245, "word": "sugary cereal", "entity_group": "VAR", "score": 0.9999783721606842}, {"start": 255, "end": 256, "word": "2", "entity_group": "PARAM", "score": 0.9997297485298349}, {"start": 274, "end": 275, "word": "4", "entity_group": "PARAM", "score": 0.9996759771531174}, {"start": 309, "end": 318, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987401507759752}, {"start": 319, "end": 322, "word": "500", "entity_group": "LIMIT", "score": 0.9994029761720337}, {"start": 340, "end": 343, "word": "700", "entity_group": "LIMIT", "score": 0.9996764535133308}, {"start": 368, "end": 375, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9986162892267926}, {"start": 387, "end": 405, "word": "nutritional cereal", "entity_group": "VAR", "score": 0.9999180259629619}, {"start": 411, "end": 412, "word": "1", "entity_group": "PARAM", "score": 0.9995247125992525}, {"start": 419, "end": 426, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9993787855387746}, {"start": 431, "end": 444, "word": "kids ' cereal", "entity_group": "VAR", "score": 0.9976347366105592}, {"start": 450, "end": 454, "word": "1.50", "entity_group": "PARAM", "score": 0.9997432932184291}, {"start": 465, "end": 472, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9984430897078124}, {"start": 477, "end": 490, "word": "sugary cereal", "entity_group": "VAR", "score": 0.9999314548446482}, {"start": 496, "end": 497, "word": "2", "entity_group": "PARAM", "score": 0.9996795400469501}, {"start": 537, "end": 545, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996894848190445}, {"start": 546, "end": 553, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.998935605984694}]}
{"doc_id": "-1400177241", "document": "A neighbourhood community builds and paints sheds and treehouses. Each shed takes 4 hours to build and 2 hours to paint. Each treehouse takes 2 hours to build and 1.5 hours to paint. The neighbourhood community has at most 40 hours available for building and 30 hours available for painting. If the neighbourhood community makes a profit of $700 per shed and a profit of $500 per treehouse, how many of each should they make to maximize their profit?", "order_mapping": {"sheds": 0, "treehouses": 1, "shed": 0, "treehouse": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"treehouse": "500", "shed": "700"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "40", "terms": {"shed": "4", "treehouse": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "30", "terms": {"shed": "2", "treehouse": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sheds\n- y: Number of treehouses\n\nObjective:\n- The community aims to maximize its profit. The profit per shed is $700 and the profit per treehouse is $500. Therefore, the objective function is: Maximize 700x + 500y\n\nConstraints:\n- The community has at most 40 hours available for building, and each shed takes 4 hours to build and each treehouse takes 2 hours to build. This leads to the constraint: 4x + 2y <= 40.\n- The community has at most 30 hours available for painting, and each shed takes 2 hours to paint and each treehouse takes 1.5 hours to paint. This results in the constraint: 2x + 1.5y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 700x + 500y\nConstraints:\n4x + 2y <= 40\n2x + 1.5y <= 30", "canonical": {"objective": [-700.0, -500.0], "constraints": [[4.0, 2.0, 40.0], [2.0, 1.5, 30.0]]}, "solution": {"x": 0, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of sheds: Sheds\n- Number of treehouses: Treehouses\n\nConstraints:\n- Total hours for building should not exceed 40 hours (4 hours per shed, 2 hours per treehouse):\n  4 * Sheds + 2 * Treehouses <= 40\n- Total hours for painting should not exceed 30 hours (2 hours per shed, 1.5 hours per treehouse):\n  2 * Sheds + 1.5 * Treehouses <= 30\n\nObjective:\n- Maximize profit (700 dollars per shed, 500 dollars per treehouse):\n  700 * Sheds + 500 * Treehouses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSheds = intvar(0, 999999999)  # Number of sheds\nTreehouses = intvar(0, 999999999)  # Number of treehouses\n\n# Constraints\nm = Model()\n\n# Total hours available for building should not exceed 40 hours:\n# Each shed takes 4 hours to build and each treehouse takes 2 hours to build\nm += 4 * Sheds + 2 * Treehouses <= 40\n\n# Total hours available for painting should not exceed 30 hours:\n# Each shed takes 2 hours to paint and each treehouse takes 1.5 hours to paint\nm += 2 * Sheds + 1.5 * Treehouses <= 30\n\n# Objective\n# Maximize profit (700 dollars per shed, 500 dollars per treehouse):\nm.maximize(700 * Sheds + 500 * Treehouses)\n", "entities": [{"start": 44, "end": 49, "word": "sheds", "entity_group": "VAR", "score": 0.9996074468875926}, {"start": 54, "end": 64, "word": "treehouses", "entity_group": "VAR", "score": 0.9997999764388255}, {"start": 72, "end": 76, "word": "shed", "entity_group": "VAR", "score": 0.9996850095237798}, {"start": 83, "end": 84, "word": "4", "entity_group": "PARAM", "score": 0.9996777096411072}, {"start": 104, "end": 105, "word": "2", "entity_group": "PARAM", "score": 0.9997219695205208}, {"start": 128, "end": 137, "word": "treehouse", "entity_group": "VAR", "score": 0.999377293298205}, {"start": 144, "end": 145, "word": "2", "entity_group": "PARAM", "score": 0.9995984655321014}, {"start": 165, "end": 168, "word": "1.5", "entity_group": "PARAM", "score": 0.9996547209004116}, {"start": 218, "end": 225, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998631920490266}, {"start": 226, "end": 228, "word": "40", "entity_group": "LIMIT", "score": 0.999748093642386}, {"start": 262, "end": 264, "word": "30", "entity_group": "LIMIT", "score": 0.9997305531703946}, {"start": 271, "end": 280, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988855272721021}, {"start": 335, "end": 341, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998893636081294}, {"start": 347, "end": 350, "word": "700", "entity_group": "PARAM", "score": 0.999297422920126}, {"start": 355, "end": 359, "word": "shed", "entity_group": "VAR", "score": 0.998719397373943}, {"start": 366, "end": 372, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999762619376277}, {"start": 378, "end": 381, "word": "500", "entity_group": "PARAM", "score": 0.9990831208214855}, {"start": 386, "end": 395, "word": "treehouse", "entity_group": "VAR", "score": 0.9992562085794132}, {"start": 435, "end": 443, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997108804118913}, {"start": 450, "end": 456, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998409485691092}]}
{"doc_id": "339134760", "document": "One batch of shortbread cookies is made of 256g of flour and 200g of butter while a batch of peanut butter cookies requires 180g of flour and 250g of butter. Please find the maximum number of batches of cookies we can bake using 3500g of flour and 2500g of butter assuming that there is no shortage of the other ingredients used in making the cookies.", "order_mapping": {"shortbread cookies": 0, "peanut butter cookies": 1}, "obj_declaration": {"type": "objvar", "direction": "maximum", "name": "number of batches", "vars": ["shortbread cookies", "peanut butter cookies"]}, "const_declarations": [], "explanation": "Variables:\n- x: Number of batches of shortbread cookies\n- y: Number of batches of peanut butter cookies\n\nObjective:\n- The goal is to find the maximum number of batches of cookies that can be baked. There are no specific profit or cost considerations, so the objective is simply to maximize the number of batches of cookies. \n\nConstraints:\n- Each batch of shortbread cookies requires 256g of flour and 200g of butter, while each batch of peanut butter cookies requires 180g of flour and 250g of butter. Therefore, the constraints are:\n    - 256x + 180y <= 3500 (flour constraint)\n    - 200x + 250y <= 2500 (butter constraint)\n    - x >= 0 (non-negativity constraint for shortbread cookies)\n    - y >= 0 (non-negativity constraint for peanut butter cookies)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + y\nConstraints:\n256x + 180y <= 3500\n200x + 250y <= 2500\nx >= 0\ny >= 0", "canonical": {"objective": [-1.0, -1.0], "constraints": [[256.0, 180.0, 3500.0], [200.0, 250.0, 2500.0]]}, "solution": {"x": 12, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of batches of shortbread cookies: ShortbreadCookies\n- Number of batches of peanut butter cookies: PeanutButterCookies\n\nConstraints:\n- Total flour used should not exceed 3500g (256g for shortbread, 180g for peanut butter cookies):\n  256 * ShortbreadCookies + 180 * PeanutButterCookies <= 3500\n- Total butter used should not exceed 2500g (200g for shortbread, 250g for peanut butter cookies):\n  200 * ShortbreadCookies + 250 * PeanutButterCookies <= 2500\n\nObjective:\n- Maximize the total number of batches of cookies:\n  ShortbreadCookies + PeanutButterCookies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShortbreadCookies = intvar(0, 999999999)  # Number of batches of shortbread cookies\nPeanutButterCookies = intvar(0, 999999999)  # Number of batches of peanut butter cookies\n\n# Constraints\nm = Model()\n\n# Total flour used should not exceed 3500g (256g for shortbread, 180g for peanut butter cookies):\nm += 256 * ShortbreadCookies + 180 * PeanutButterCookies <= 3500\n# Total butter used should not exceed 2500g (200g for shortbread, 250g for peanut butter cookies):\nm += 200 * ShortbreadCookies + 250 * PeanutButterCookies <= 2500\n\n# Objective\n# Maximize the total number of batches of cookies:\nm.maximize(ShortbreadCookies + PeanutButterCookies)\n", "entities": [{"start": 13, "end": 31, "word": "shortbread cookies", "entity_group": "VAR", "score": 0.99974278711424}, {"start": 43, "end": 46, "word": "256", "entity_group": "PARAM", "score": 0.9988469636759023}, {"start": 62, "end": 65, "word": "200", "entity_group": "PARAM", "score": 0.9996799519191906}, {"start": 95, "end": 116, "word": "peanut butter cookies", "entity_group": "VAR", "score": 0.996561461223902}, {"start": 126, "end": 129, "word": "180", "entity_group": "PARAM", "score": 0.999209903224721}, {"start": 145, "end": 148, "word": "250", "entity_group": "PARAM", "score": 0.999518808788351}, {"start": 179, "end": 186, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.96045682419655}, {"start": 187, "end": 204, "word": "number of batches", "entity_group": "OBJ_NAME", "score": 0.989100920958521}, {"start": 228, "end": 233, "word": "using", "entity_group": "CONST_DIR", "score": 0.7390551751407377}, {"start": 234, "end": 238, "word": "3500", "entity_group": "PARAM", "score": 0.9983057424481865}, {"start": 254, "end": 258, "word": "2500", "entity_group": "PARAM", "score": 0.9995920026642096}]}
{"doc_id": "-1823459785", "document": "Peter produces a plant growth compound by mixing two types of fertilizer: GreenCycle and GrowSafe. This growth compound must contain at least 9 units of nitrous oxide and 5 units of vitamin mix. Fertilizer GreenCycle and GrowSafe cost $1.5 and $1.8 per kg, respectively. Fertilizer GreenCycle contains 2.1 units of nitrous oxide per kg and 1.3 units of vitamin mix per kg. Fertilizer GrowSafe contains 3.5 units of nitrous oxide per kg and 1.1 units of vitamin mix per kg. Determine the minimum cost of Peter's compound.", "order_mapping": {"GreenCycle": 0, "GrowSafe": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"GreenCycle": "1.5", "GrowSafe": "1.8"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "9", "terms": {"GreenCycle": "2.1", "GrowSafe": "3.5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "5", "terms": {"GrowSafe": "1.1", "GreenCycle": "1.3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of GreenCycle fertilizer\n- y: kg of GrowSafe fertilizer\n\nObjective:\n- Peter wants to minimize the cost of the compound. The cost of GreenCycle and GrowSafe fertilizers are $1.5 and $1.8 per kg, respectively. Therefore, the objective function is: Minimize 1.5x + 1.8y\n\nConstraints:\n- The compound must contain at least 9 units of nitrous oxide, leading to the constraint: 2.1x + 3.5y >= 9\n- The compound must contain at least 5 units of vitamin mix, leading to the constraint: 1.3x + 1.1y >= 5\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1.5x + 1.8y\nConstraints:\n2.1x + 3.5y >= 9\n1.3x + 1.1y >= 5", "canonical": {"objective": [1.5, 1.8], "constraints": [[-2.1, -3.5, -9.0], [-1.3, -1.1, -5.0]]}, "solution": {"x": 3, "y": 1}, "pseudo_model": "\nDecision Variables:\n- kg of GreenCycle fertilizer used: GreenCycle\n- kg of GrowSafe fertilizer used: GrowSafe\n\nConstraints:\n- The compound must contain at least 9 units of nitrous oxide:\n  2.1 * GreenCycle + 3.5 * GrowSafe >= 9\n- The compound must contain at least 5 units of vitamin mix:\n  1.3 * GreenCycle + 1.1 * GrowSafe >= 5\n\nObjective:\n- Minimize the cost of the compound (GreenCycle costs $1.5 per kg, GrowSafe costs $1.8 per kg):\n  1.5 * GreenCycle + 1.8 * GrowSafe\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGreenCycle = intvar(0, 999999999)  # kg of GreenCycle fertilizer\nGrowSafe = intvar(0, 999999999)  # kg of GrowSafe fertilizer\n\n# Constraints\nm = Model()\n\n# The growth compound must contain at least 9 units of nitrous oxide:\nm += 2.1 * GreenCycle + 3.5 * GrowSafe >= 9\n# The growth compound must contain at least 5 units of vitamin mix:\nm += 1.3 * GreenCycle + 1.1 * GrowSafe >= 5\n\n# Objective\n# Minimize the cost of the compound (GreenCycle costs $1.5 per kg, GrowSafe costs $1.8 per kg):\nm.minimize(1.5 * GreenCycle + 1.8 * GrowSafe)\n", "entities": [{"start": 75, "end": 85, "word": "GreenCycle", "entity_group": "VAR", "score": 0.99970372290155}, {"start": 90, "end": 98, "word": "GrowSafe", "entity_group": "VAR", "score": 0.9997310507298727}, {"start": 135, "end": 143, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985974921088383}, {"start": 144, "end": 145, "word": "9", "entity_group": "LIMIT", "score": 0.9997049611407617}, {"start": 173, "end": 174, "word": "5", "entity_group": "LIMIT", "score": 0.9996730865805727}, {"start": 209, "end": 219, "word": "GreenCycle", "entity_group": "VAR", "score": 0.9996230676264218}, {"start": 224, "end": 232, "word": "GrowSafe", "entity_group": "VAR", "score": 0.9988524015526197}, {"start": 233, "end": 237, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9915210163873593}, {"start": 240, "end": 243, "word": "1.5", "entity_group": "PARAM", "score": 0.9985866296393546}, {"start": 250, "end": 253, "word": "1.8", "entity_group": "PARAM", "score": 0.9994701466857346}, {"start": 289, "end": 299, "word": "GreenCycle", "entity_group": "VAR", "score": 0.999757903832835}, {"start": 309, "end": 312, "word": "2.1", "entity_group": "PARAM", "score": 0.9996932328722987}, {"start": 347, "end": 350, "word": "1.3", "entity_group": "PARAM", "score": 0.9997291425454}, {"start": 392, "end": 400, "word": "GrowSafe", "entity_group": "VAR", "score": 0.9996438970853744}, {"start": 410, "end": 413, "word": "3.5", "entity_group": "PARAM", "score": 0.9996956963927243}, {"start": 448, "end": 451, "word": "1.1", "entity_group": "PARAM", "score": 0.9997273356878346}, {"start": 496, "end": 503, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9853451662324765}, {"start": 504, "end": 508, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9973897979016062}]}
{"doc_id": "815648330", "document": "A small family business makes homemade apple pies and blueberry pies. It takes 30 minutes to make one apple pie and 40 minutes to make a blueberry pie. The family business only operates for 4500 minutes per week. Due to fruit availability, they can make at most 70 apple pies and at most 60 blueberry pies. If the profit per apple pie is $5 and the profit per blueberry pie is $6, how many of each pie should they make to maximize their profit?", "order_mapping": {"apple pies": 0, "blueberry pies": 1, "apple pie": 0, "blueberry pie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"apple pie": "5", "blueberry pie": "6"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "4500", "terms": {"blueberry pies": "30", "apple pie": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "apple pies", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "60", "var": "blueberry pies", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of apple pies\n- y: Number of blueberry pies\n\nObjective:\n- The family business aims to maximize its profit. The profit per apple pie is $5 and the profit per blueberry pie is $6. Therefore, the objective function is: Maximize 5x + 6y\n\nConstraints:\n- The family business operates for 4500 minutes per week, and it takes 30 minutes to make a blueberry pie and 40 minutes to make a blueberry pie. This leads to the constraint: 30y + 40x <= 4500.\n- The family can make at most 70 apple pies, leading to the constraint: x <= 70.\n- The family can make at most 60 blueberry pies, leading to the constraint: y <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 6y\nConstraints:\n30y + 40x <= 4500\nx <= 70\ny <= 60", "canonical": {"objective": [-5.0, -6.0], "constraints": [[40.0, 30.0, 4500.0], [1.0, 0.0, 70.0], [0.0, 1.0, 60.0]]}, "solution": {"x": 67, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of apple pies made per week: ApplePies\n- Number of blueberry pies made per week: BlueberryPies\n\nConstraints:\n- Total time to make pies should not exceed 4500 minutes per week (30 minutes per apple pie, 40 minutes per blueberry pie):\n  30 * ApplePies + 40 * BlueberryPies <= 4500\n- At most 70 apple pies can be made:\n  ApplePies <= 70\n- At most 60 blueberry pies can be made:\n  BlueberryPies <= 60\n\nObjective:\n- Maximize profit (5 dollars per apple pie, 6 dollars per blueberry pie):\n  5 * ApplePies + 6 * BlueberryPies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nApplePies = intvar(0, 999999999)  # Number of apple pies made per week\nBlueberryPies = intvar(0, 999999999)  # Number of blueberry pies made per week\n\n# Constraints\nm = Model()\n\n# Total time to make pies should not exceed 4500 minutes per week:\nm += 30 * ApplePies + 40 * BlueberryPies <= 4500\n# At most 70 apple pies can be made:\nm += ApplePies <= 70\n# At most 60 blueberry pies can be made:\nm += BlueberryPies <= 60\n\n# Objective\n# Maximize profit (5 dollars per apple pie, 6 dollars per blueberry pie):\nm.maximize(5 * ApplePies + 6 * BlueberryPies)\n", "entities": [{"start": 39, "end": 49, "word": "apple pies", "entity_group": "VAR", "score": 0.9999604850779954}, {"start": 54, "end": 68, "word": "blueberry pies", "entity_group": "VAR", "score": 0.9999814272024659}, {"start": 80, "end": 82, "word": "30", "entity_group": "PARAM", "score": 0.999652367745273}, {"start": 103, "end": 112, "word": "apple pie", "entity_group": "VAR", "score": 0.9969794447985545}, {"start": 117, "end": 119, "word": "40", "entity_group": "PARAM", "score": 0.999620681983565}, {"start": 138, "end": 151, "word": "blueberry pie", "entity_group": "VAR", "score": 0.9996885709485115}, {"start": 174, "end": 178, "word": "only", "entity_group": "CONST_DIR", "score": 0.9734986931684457}, {"start": 192, "end": 196, "word": "4500", "entity_group": "LIMIT", "score": 0.9983647366968497}, {"start": 258, "end": 265, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986447829558974}, {"start": 266, "end": 268, "word": "70", "entity_group": "LIMIT", "score": 0.9995451651384112}, {"start": 269, "end": 279, "word": "apple pies", "entity_group": "VAR", "score": 0.9998624041697474}, {"start": 284, "end": 291, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987226774309154}, {"start": 292, "end": 294, "word": "60", "entity_group": "LIMIT", "score": 0.9993367600829861}, {"start": 295, "end": 309, "word": "blueberry pies", "entity_group": "VAR", "score": 0.9999538371921778}, {"start": 319, "end": 325, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997863603473082}, {"start": 330, "end": 339, "word": "apple pie", "entity_group": "VAR", "score": 0.9995559026331101}, {"start": 345, "end": 346, "word": "5", "entity_group": "PARAM", "score": 0.999533641632045}, {"start": 355, "end": 361, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999109105475993}, {"start": 366, "end": 379, "word": "blueberry pie", "entity_group": "VAR", "score": 0.9998839504495851}, {"start": 385, "end": 386, "word": "6", "entity_group": "PARAM", "score": 0.9996638549302009}, {"start": 430, "end": 438, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997035235484445}, {"start": 445, "end": 451, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368604061255}]}
{"doc_id": "-901265690", "document": "You are playing a game where you can catch fish or birds. Each fish caught is 4 points and each bird caught is 6 points. You have to catch at least 6 fishes and at least 2 birds to progress. However, you only have time to catch at most 9 fishes and at most 4 birds. In total, you can catch no more than 12 animals. How many of each type of animal should you catch to maximize your points?", "order_mapping": {"fish": 0, "birds": 1, "bird": 1, "fishes": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"fish": "4", "bird": "6"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "9", "var": "fishes", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "4", "var": "birds", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "6", "var": "fishes", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "birds", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "no more than", "limit": "12", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of fishes caught\n- y: Number of birds caught\n\nObjective:\n- The goal is to maximize the total points earned. Each fish caught is 4 points and each bird caught is 6 points. Therefore, the objective function is: Maximize 4x + 6y\n\nConstraints:\n- At least 6 fishes must be caught, leading to the constraint: x >= 6.\n- At least 2 birds must be caught, leading to the constraint: y >= 2.\n- At most 9 fishes can be caught, leading to the constraint: x <= 9.\n- At most 4 birds can be caught, leading to the constraint: y <= 4.\n- The total number of animals caught should not exceed 12, leading to the constraint: x + y <= 12.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 6y\nConstraints:\nx >= 6\ny >= 2\nx <= 9\ny <= 4\nx + y <= 12", "canonical": {"objective": [-4.0, -6.0], "constraints": [[-1.0, 0.0, -6.0], [0.0, -1.0, -2.0], [1.0, 0.0, 9.0], [0.0, 1.0, 4.0], [1.0, 1.0, 12.0]]}, "solution": {"x": 8, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of fishes caught: Fishes\n- Number of birds caught: Birds\n\nConstraints:\n- At least 6 fishes must be caught:\n  Fishes >= 6\n- At least 2 birds must be caught:\n  Birds >= 2\n- At most 9 fishes can be caught:\n  Fishes <= 9\n- At most 4 birds can be caught:\n  Birds <= 4\n- No more than 12 animals in total can be caught:\n  Fishes + Birds <= 12\n\nObjective:\n- Maximize points (4 points per fish, 6 points per bird):\n  4 * Fishes + 6 * Birds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishes = intvar(0, 999999999)  # Number of fishes caught\nBirds = intvar(0, 999999999)  # Number of birds caught\n\n# Constraints\nm = Model()\n\n# You have to catch at least 6 fishes:\nm += Fishes >= 6\n# You have to catch at least 2 birds:\nm += Birds >= 2\n# You can catch at most 9 fishes:\nm += Fishes <= 9\n# You can catch at most 4 birds:\nm += Birds <= 4\n# In total, you can catch no more than 12 animals:\nm += Fishes + Birds <= 12\n\n# Objective\n# Maximize points (4 points per fish, 6 points per bird):\nm.maximize(4 * Fishes + 6 * Birds)\n", "entities": [{"start": 43, "end": 47, "word": "fish", "entity_group": "VAR", "score": 0.9995267767992659}, {"start": 51, "end": 56, "word": "birds", "entity_group": "VAR", "score": 0.9997798441263667}, {"start": 64, "end": 68, "word": "fish", "entity_group": "VAR", "score": 0.9996102387540539}, {"start": 79, "end": 80, "word": "4", "entity_group": "PARAM", "score": 0.9995847525971192}, {"start": 81, "end": 87, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9876797671752822}, {"start": 97, "end": 101, "word": "bird", "entity_group": "VAR", "score": 0.9998234032225638}, {"start": 112, "end": 113, "word": "6", "entity_group": "PARAM", "score": 0.9996776274296384}, {"start": 114, "end": 120, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9916644803737829}, {"start": 141, "end": 149, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998733258471395}, {"start": 150, "end": 151, "word": "6", "entity_group": "LIMIT", "score": 0.9992330840714722}, {"start": 152, "end": 158, "word": "fishes", "entity_group": "VAR", "score": 0.9986963108409416}, {"start": 163, "end": 171, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987310032496484}, {"start": 172, "end": 173, "word": "2", "entity_group": "LIMIT", "score": 0.999739814937675}, {"start": 174, "end": 179, "word": "birds", "entity_group": "VAR", "score": 0.9969130454245089}, {"start": 232, "end": 239, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985973653395473}, {"start": 240, "end": 241, "word": "9", "entity_group": "LIMIT", "score": 0.9996888835629572}, {"start": 242, "end": 248, "word": "fishes", "entity_group": "VAR", "score": 0.9989640985632637}, {"start": 253, "end": 260, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988023672631395}, {"start": 261, "end": 262, "word": "4", "entity_group": "LIMIT", "score": 0.9997481453026105}, {"start": 263, "end": 268, "word": "birds", "entity_group": "VAR", "score": 0.9962954727353133}, {"start": 296, "end": 308, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9955841225903374}, {"start": 309, "end": 311, "word": "12", "entity_group": "LIMIT", "score": 0.9996620926509463}, {"start": 374, "end": 382, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994415097605136}, {"start": 388, "end": 394, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9981438878691278}]}
{"doc_id": "-1968400749", "document": "In an exam, you can solve easy questions worth 4 points each or hard questions worth 10 points each. You have to solve at least 4 easy questions and 2 hard question to pass. Due to time restrictions, you can solve at most 12 easy questions and 4 hard questions. In total, you can only solve a maximum of 9 questions. How many of each question type should you solve to maximize your points?", "order_mapping": {"easy questions": 0, "hard questions": 1, "hard question": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"easy questions": "4", "hard questions": "10"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "4", "var": "easy questions", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "hard question", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12", "var": "easy questions", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "4", "var": "hard questions", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "9", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of easy questions solved\n- y: Number of hard questions solved\n\nObjective:\n- The goal is to maximize the total points earned. Each easy question is worth 4 points and each hard question is worth 10 points. Therefore, the objective function is: Maximize 4x + 10y\n\nConstraints:\n- At least 4 easy questions must be solved: x >= 4\n- At least 2 hard questions must be solved: y >= 2\n- At most 12 easy questions can be solved: x <= 12\n- At most 4 hard questions can be solved: y <= 4\n- The total number of questions solved cannot exceed 9: x + y <= 9\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 10y\nConstraints:\nx >= 4\ny >= 2\nx <= 12\ny <= 4\nx + y <= 9", "canonical": {"objective": [-4.0, -10.0], "constraints": [[-1.0, 0.0, -4.0], [0.0, -1.0, -2.0], [1.0, 0.0, 12.0], [0.0, 1.0, 4.0], [1.0, 1.0, 9.0]]}, "solution": {"x": 5, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of easy questions solved: EasyQuestions\n- Number of hard questions solved: HardQuestions\n\nConstraints:\n- At least 4 easy questions and 2 hard questions must be solved to pass:\n  EasyQuestions >= 4\n  HardQuestions >= 2\n- At most 12 easy questions and 4 hard questions can be solved due to time restrictions:\n  EasyQuestions <= 12\n  HardQuestions <= 4\n- A maximum of 9 questions in total can be solved:\n  EasyQuestions + HardQuestions <= 9\n\nObjective:\n- Maximize points (4 points for each easy question, 10 points for each hard question):\n  4 * EasyQuestions + 10 * HardQuestions\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEasyQuestions = intvar(0, 999999999)  # Number of easy questions solved\nHardQuestions = intvar(0, 999999999)  # Number of hard questions solved\n\n# Constraints\nm = Model()\n\n# You have to solve at least 4 easy questions and 2 hard questions to pass:\nm += EasyQuestions >= 4\nm += HardQuestions >= 2\n\n# Due to time restrictions, you can solve at most 12 easy questions and 4 hard questions:\nm += EasyQuestions <= 12\nm += HardQuestions <= 4\n\n# In total, you can only solve a maximum of 9 questions:\nm += EasyQuestions + HardQuestions <= 9\n\n# Objective\n# Maximize points (4 points for each easy question, 10 points for each hard question):\nm.maximize(4 * EasyQuestions + 10 * HardQuestions)\n", "entities": [{"start": 27, "end": 41, "word": "easy questions", "entity_group": "VAR", "score": 0.9999827872157679}, {"start": 48, "end": 49, "word": "4", "entity_group": "PARAM", "score": 0.9997179839204016}, {"start": 50, "end": 56, "word": "points", "entity_group": "OBJ_NAME", "score": 0.988026028987303}, {"start": 65, "end": 79, "word": "hard questions", "entity_group": "VAR", "score": 0.9999740396919558}, {"start": 86, "end": 88, "word": "10", "entity_group": "PARAM", "score": 0.9996180390664545}, {"start": 89, "end": 95, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9983060964080887}, {"start": 121, "end": 129, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989646845160265}, {"start": 130, "end": 131, "word": "4", "entity_group": "LIMIT", "score": 0.9993829179201567}, {"start": 132, "end": 146, "word": "easy questions", "entity_group": "VAR", "score": 0.9999716576498738}, {"start": 151, "end": 152, "word": "2", "entity_group": "LIMIT", "score": 0.9995447623364807}, {"start": 153, "end": 166, "word": "hard question", "entity_group": "VAR", "score": 0.9999705805524084}, {"start": 218, "end": 225, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987182009284188}, {"start": 226, "end": 228, "word": "12", "entity_group": "LIMIT", "score": 0.9995457704759515}, {"start": 229, "end": 243, "word": "easy questions", "entity_group": "VAR", "score": 0.9999540539736568}, {"start": 248, "end": 249, "word": "4", "entity_group": "LIMIT", "score": 0.9996896271090348}, {"start": 250, "end": 264, "word": "hard questions", "entity_group": "VAR", "score": 0.9999597964082237}, {"start": 299, "end": 306, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9905960492027055}, {"start": 310, "end": 311, "word": "9", "entity_group": "LIMIT", "score": 0.999625773598061}, {"start": 375, "end": 383, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999168495066774}, {"start": 389, "end": 395, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9992064397503487}]}
{"doc_id": "-313424632", "document": "A company makes regular desks and standing desks. Regular desks require 20 units of wood while standing desks require 15 units of wood. Regular desks take 10 minutes to package while standing desks take 20 minutes to package. The company has 4000 units of wood available and 1500 minutes of packaging time available. If the profit per regular desk is $200 and the standing desk is $300, how many of each should be made to maximize profit?", "order_mapping": {"regular desks": 0, "standing desks": 1, "Regular desks": 0, "regular desk": 0, "standing desk": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"standing desk": "300", "regular desk": "200"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"Regular desks": "20", "standing desks": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"Regular desks": "10", "standing desks": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular desks\n- y: Number of standing desks\n\nObjective:\n- The company aims to maximize its profit. The profit per regular desk is $200 and the profit per standing desk is $300. Therefore, the objective function is: Maximize 200x + 300y\n\nConstraints:\n- The company has 4000 units of wood available, and regular desks require 20 units of wood while standing desks require 15 units of wood. This leads to the constraint: 20x + 15y <= 4000.\n- The company has 1500 minutes of packaging time available, and regular desks take 10 minutes to package while standing desks take 20 minutes to package. This results in the constraint: 10x + 20y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 300y\nConstraints:\n20x + 15y <= 4000\n10x + 20y <= 1500", "canonical": {"objective": [-200.0, -300.0], "constraints": [[20.0, 15.0, 4000.0], [10.0, 20.0, 1500.0]]}, "solution": {"x": 150, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of regular desks made: RegularDesks\n- Number of standing desks made: StandingDesks\n\nConstraints:\n- Wood usage for both types of desks should not exceed 4000 units:\n  20 * RegularDesks + 15 * StandingDesks <= 4000\n- Packaging time for both types of desks should not exceed 1500 minutes:\n  10 * RegularDesks + 20 * StandingDesks <= 1500\n\nObjective:\n- Maximize profit, with $200 profit per regular desk and $300 profit per standing desk:\n  200 * RegularDesks + 300 * StandingDesks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularDesks = intvar(0, 999999999)  # Number of regular desks made\nStandingDesks = intvar(0, 999999999)  # Number of standing desks made\n\n# Constraints\nm = Model()\n\n# Wood constraint: 20 units of wood for a regular desk and 15 units for a standing desk with 4000 units available\nm += 20 * RegularDesks + 15 * StandingDesks <= 4000\n# Packaging time constraint: 10 minutes for a regular desk and 20 minutes for a standing desk with 1500 minutes available\nm += 10 * RegularDesks + 20 * StandingDesks <= 1500\n\n# Objective\n# Maximize profit: $200 per regular desk and $300 per standing desk\nm.maximize(200 * RegularDesks + 300 * StandingDesks)\n", "entities": [{"start": 16, "end": 29, "word": "regular desks", "entity_group": "VAR", "score": 0.9999827282947062}, {"start": 34, "end": 48, "word": "standing desks", "entity_group": "VAR", "score": 0.9999849686925505}, {"start": 51, "end": 64, "word": "Regular desks", "entity_group": "VAR", "score": 0.9999740318214143}, {"start": 73, "end": 75, "word": "20", "entity_group": "PARAM", "score": 0.9996279407724097}, {"start": 96, "end": 110, "word": "standing desks", "entity_group": "VAR", "score": 0.9999761491335388}, {"start": 119, "end": 121, "word": "15", "entity_group": "PARAM", "score": 0.9996383357345736}, {"start": 138, "end": 151, "word": "Regular desks", "entity_group": "VAR", "score": 0.9999735792563754}, {"start": 157, "end": 159, "word": "10", "entity_group": "PARAM", "score": 0.9995941275220781}, {"start": 185, "end": 199, "word": "standing desks", "entity_group": "VAR", "score": 0.9999260679183849}, {"start": 205, "end": 207, "word": "20", "entity_group": "PARAM", "score": 0.9994526781898272}, {"start": 245, "end": 249, "word": "4000", "entity_group": "LIMIT", "score": 0.9997125156544973}, {"start": 264, "end": 273, "word": "available", "entity_group": "CONST_DIR", "score": 0.9946562537620416}, {"start": 278, "end": 282, "word": "1500", "entity_group": "LIMIT", "score": 0.9996360679249261}, {"start": 309, "end": 318, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992829725001494}, {"start": 328, "end": 334, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998168432915042}, {"start": 339, "end": 351, "word": "regular desk", "entity_group": "VAR", "score": 0.9999463139620414}, {"start": 357, "end": 360, "word": "200", "entity_group": "PARAM", "score": 0.9997351761081298}, {"start": 369, "end": 382, "word": "standing desk", "entity_group": "VAR", "score": 0.9999805729857859}, {"start": 388, "end": 391, "word": "300", "entity_group": "PARAM", "score": 0.999705549353079}, {"start": 429, "end": 437, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 438, "end": 444, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-1906439142", "document": "A restaurant makes prepackaged takeout meals. The breakfast option takes 7 minutes to prepare and 2 minutes to package. The lunch option takes 8 minutes to prepare and 3 minutes to package. The restaurant has 700 minutes available for preparations and 500 minutes available for packaging. If the profit per breakfast option is $10 and the profit per lunch option is $8, how many of each should the restaurant make to maximize profit?", "order_mapping": {"breakfast option": 0, "lunch option": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"breakfast option": "10", "lunch option": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "700", "terms": {"breakfast option": "7", "lunch option": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"breakfast option": "2", "lunch option": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of breakfast options made\n- y: Number of lunch options made\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per breakfast option is $10 and the profit per lunch option is $8. Therefore, the objective function is: Maximize 10x + 8y\n\nConstraints:\n- The restaurant has 700 minutes available for preparations, so the constraint is: 7x + 8y <= 700.\n- The restaurant has 500 minutes available for packaging, so the constraint is: 2x + 3y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 8y\nConstraints:\n7x + 8y <= 700\n2x + 3y <= 500", "canonical": {"objective": [-10.0, -8.0], "constraints": [[7.0, 8.0, 700.0], [2.0, 3.0, 500.0]]}, "solution": {"x": 100, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of breakfast options made: BreakfastOption\n- Number of lunch options made: LunchOption\n\nConstraints:\n- Total preparation time for breakfast and lunch options should not exceed 700 minutes:\n  7 * BreakfastOption + 8 * LunchOption <= 700\n- Total packaging time for breakfast and lunch options should not exceed 500 minutes:\n  2 * BreakfastOption + 3 * LunchOption <= 500\n\nObjective:\n- Maximize profit (10 dollars per breakfast option, 8 dollars per lunch option):\n  10 * BreakfastOption + 8 * LunchOption\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBreakfastOption = intvar(0, 999999999)  # Number of breakfast options made\nLunchOption = intvar(0, 999999999)  # Number of lunch options made\n\n# Constraints\nm = Model()\n\n# Total preparation time for breakfast and lunch options should not exceed 700 minutes:\nm += 7 * BreakfastOption + 8 * LunchOption <= 700\n# Total packaging time for breakfast and lunch options should not exceed 500 minutes:\nm += 2 * BreakfastOption + 3 * LunchOption <= 500\n\n# Objective\n# Maximize profit (10 dollars per breakfast option, 8 dollars per lunch option):\nm.maximize(10 * BreakfastOption + 8 * LunchOption)\n", "entities": [{"start": 51, "end": 67, "word": "breakfast option", "entity_group": "VAR", "score": 0.9999467705757507}, {"start": 74, "end": 75, "word": "7", "entity_group": "PARAM", "score": 0.9995334273654212}, {"start": 99, "end": 100, "word": "2", "entity_group": "PARAM", "score": 0.999651312058049}, {"start": 126, "end": 138, "word": "lunch option", "entity_group": "VAR", "score": 0.9999370310203115}, {"start": 145, "end": 146, "word": "8", "entity_group": "PARAM", "score": 0.9996515033558674}, {"start": 170, "end": 171, "word": "3", "entity_group": "PARAM", "score": 0.9996513178224437}, {"start": 212, "end": 215, "word": "700", "entity_group": "LIMIT", "score": 0.9997413258561484}, {"start": 224, "end": 233, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985956311660809}, {"start": 255, "end": 258, "word": "500", "entity_group": "LIMIT", "score": 0.9997481744527318}, {"start": 267, "end": 276, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990129599445425}, {"start": 300, "end": 306, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999443539097619}, {"start": 311, "end": 327, "word": "breakfast option", "entity_group": "VAR", "score": 0.9997990262181168}, {"start": 333, "end": 335, "word": "10", "entity_group": "PARAM", "score": 0.9995338059585529}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999366200447691}, {"start": 355, "end": 367, "word": "lunch option", "entity_group": "VAR", "score": 0.9997882261159778}, {"start": 373, "end": 374, "word": "8", "entity_group": "PARAM", "score": 0.9996300811113319}, {"start": 424, "end": 432, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 433, "end": 439, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-860126962", "document": "A double-decker bus can carry at most 50 passengers. It has two seat types: bottom deck seats and top deck seats. A profit of $25 is made on each bottom deck seat ticket and a profit of $35 is made on each top deck seat ticket. The bus factory reserves at least 10 seats as bottom deck seats. However, a minimum of 2 times as many passengers prefer to travel on top deck seats than on bottom deck seats. How many seats of each type should be made to maximize profit?", "order_mapping": {"bottom deck seats": 0, "top deck seats": 1, "bottom deck seat": 0, "top deck seat": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bottom deck seat": "25", "top deck seat": "35"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "bottom deck seats", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "top deck seats", "direction": "minimum", "param": "2 times", "y_var": "bottom deck seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottom deck seats\n- y: Number of top deck seats\n\nObjective:\n- The bus factory aims to maximize its profit. A profit of $25 is made on each bottom deck seat ticket and a profit of $35 is made on each top deck seat ticket. Therefore, the objective function is: Maximize 25x + 35y\n\nConstraints:\n- The bus can carry at most 50 passengers, so the constraint is: x + y <= 50.\n- The factory reserves at least 10 seats as bottom deck seats, leading to the constraint: x >= 10.\n- A minimum of 2 times as many passengers prefer to travel on top deck seats than on bottom deck seats, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25x + 35y\nConstraints:\nx + y <= 50\nx >= 10\ny >= 2x", "canonical": {"objective": [-25.0, -35.0], "constraints": [[1.0, 1.0, 50.0], [-1.0, 0.0, -10.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 10, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of bottom deck seats: BottomDeckSeats\n- Number of top deck seats: TopDeckSeats\n\nConstraints:\n- Total number of seats should not exceed 50:\n  BottomDeckSeats + TopDeckSeats <= 50\n- At least 10 seats should be bottom deck seats:\n  BottomDeckSeats >= 10\n- At least 2 times as many top deck seats as bottom deck seats:\n  TopDeckSeats >= 2 * BottomDeckSeats\n\nObjective:\n- Maximize profit ($25 profit per bottom deck seat, $35 profit per top deck seat):\n  25 * BottomDeckSeats + 35 * TopDeckSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBottomDeckSeats = intvar(0, 999999999)  # Number of bottom deck seats\nTopDeckSeats = intvar(0, 999999999)  # Number of top deck seats\n\n# Constraints\nm = Model()\n\n# The bus can carry at most 50 passengers:\nm += BottomDeckSeats + TopDeckSeats <= 50\n# At least 10 seats as bottom deck seats:\nm += BottomDeckSeats >= 10\n# A minimum of 2 times as many passengers prefer to travel on top deck seats than on bottom deck seats:\nm += TopDeckSeats >= 2 * BottomDeckSeats\n\n# Objective\n# Maximize profit ($25 profit per bottom deck seat, $35 profit per top deck seat):\nm.maximize(25 * BottomDeckSeats + 35 * TopDeckSeats)\n", "entities": [{"start": 32, "end": 39, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989072809021774}, {"start": 40, "end": 42, "word": "50", "entity_group": "LIMIT", "score": 0.9997402288821189}, {"start": 80, "end": 97, "word": "bottom deck seats", "entity_group": "VAR", "score": 0.9988964608400359}, {"start": 102, "end": 116, "word": "top deck seats", "entity_group": "VAR", "score": 0.9989806127450236}, {"start": 121, "end": 127, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999972910815732}, {"start": 133, "end": 135, "word": "25", "entity_group": "PARAM", "score": 0.9995181018339433}, {"start": 152, "end": 168, "word": "bottom deck seat", "entity_group": "VAR", "score": 0.9998757013591923}, {"start": 182, "end": 188, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998294738904981}, {"start": 194, "end": 196, "word": "35", "entity_group": "PARAM", "score": 0.9994847790762352}, {"start": 213, "end": 226, "word": "top deck seat", "entity_group": "VAR", "score": 0.999888754435079}, {"start": 261, "end": 269, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988562883973875}, {"start": 270, "end": 272, "word": "10", "entity_group": "LIMIT", "score": 0.9997342828132552}, {"start": 282, "end": 299, "word": "bottom deck seats", "entity_group": "VAR", "score": 0.9993062226772521}, {"start": 314, "end": 321, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9981214039633759}, {"start": 325, "end": 332, "word": "2 times", "entity_group": "PARAM", "score": 0.7812628876121127}, {"start": 372, "end": 386, "word": "top deck seats", "entity_group": "VAR", "score": 0.9995506956489782}, {"start": 395, "end": 412, "word": "bottom deck seats", "entity_group": "VAR", "score": 0.9993581368751626}, {"start": 461, "end": 469, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040367392}, {"start": 470, "end": 476, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "-1843155546", "document": "Daniel and David are running a bakery store to sell pancakes and bagels. Each batch of pancakes takes 25 minutes of Daniel's time and 15 minutes of David's time. Each batch of bagels takes 9 minutes of Daniel's time and 20 minutes of David's time. In a day, Daniel has 150 minutes available and David has 350 minutes available. If the profit per batch of pancakes is $25 and the profit per batch of bagels is $30, how many batches of each should be made to maximize profit?", "order_mapping": {"pancakes": 0, "bagels": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pancakes": "25", "bagels": "30"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"pancakes": "25", "bagels": "9"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "350", "terms": {"pancakes": "15", "bagels": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Batches of pancakes\n- y: Batches of bagels\n\nObjective:\n- The bakery aims to maximize its profit. The profit per batch of pancakes is $25 and the profit per batch of bagels is $30. Therefore, the objective function is: Maximize 25x + 30y\n\nConstraints:\n- Daniel's time available is 150 minutes, and each batch of pancakes takes 25 minutes and each batch of bagels takes 9 minutes of his time. This leads to the constraint: 25x + 9y <= 150.\n- David's time available is 350 minutes, and each batch of pancakes takes 15 minutes and each batch of bagels takes 20 minutes of his time. This results in the constraint: 15x + 20y <= 350.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25x + 30y\nConstraints:\n25x + 9y <= 150\n15x + 20y <= 350", "canonical": {"objective": [-25.0, -30.0], "constraints": [[25.0, 9.0, 150.0], [15.0, 20.0, 350.0]]}, "solution": {"x": 0, "y": 16}, "pseudo_model": "\nDecision Variables:\n- Number of batches of pancakes: Pancakes\n- Number of batches of bagels: Bagels\n\nConstraints:\n- Daniel's time constraint (150 minutes available):\n  25 * Pancakes + 9 * Bagels <= 150\n- David's time constraint (350 minutes available):\n  15 * Pancakes + 20 * Bagels <= 350\n\nObjective:\n- Maximize profit (25 dollars per batch of pancakes, 30 dollars per batch of bagels):\n  25 * Pancakes + 30 * Bagels\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPancakes = intvar(0, 999999999)  # Number of batches of pancakes\nBagels = intvar(0, 999999999)  # Number of batches of bagels\n\n# Constraints\nm = Model()\n\n# Daniel's time constraint (150 minutes available):\nm += 25 * Pancakes + 9 * Bagels <= 150\n# David's time constraint (350 minutes available):\nm += 15 * Pancakes + 20 * Bagels <= 350\n\n# Objective\n# Maximize profit (25 dollars per batch of pancakes, 30 dollars per batch of bagels):\nm.maximize(25 * Pancakes + 30 * Bagels)\n", "entities": [{"start": 52, "end": 60, "word": "pancakes", "entity_group": "VAR", "score": 0.9992349382842656}, {"start": 65, "end": 71, "word": "bagels", "entity_group": "VAR", "score": 0.9980084757339264}, {"start": 88, "end": 96, "word": "pancakes", "entity_group": "VAR", "score": 0.9992674106395466}, {"start": 103, "end": 105, "word": "25", "entity_group": "PARAM", "score": 0.9996285074505945}, {"start": 136, "end": 138, "word": "15", "entity_group": "PARAM", "score": 0.9996772700777987}, {"start": 180, "end": 186, "word": "bagels", "entity_group": "VAR", "score": 0.9985237298610484}, {"start": 193, "end": 194, "word": "9", "entity_group": "PARAM", "score": 0.9996273506023315}, {"start": 225, "end": 227, "word": "20", "entity_group": "PARAM", "score": 0.9996816674938752}, {"start": 277, "end": 280, "word": "150", "entity_group": "LIMIT", "score": 0.9997025807386507}, {"start": 289, "end": 298, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982588310814889}, {"start": 313, "end": 316, "word": "350", "entity_group": "LIMIT", "score": 0.9997579487434823}, {"start": 325, "end": 334, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993147487987887}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995439049247732}, {"start": 364, "end": 372, "word": "pancakes", "entity_group": "VAR", "score": 0.9995746266394271}, {"start": 378, "end": 380, "word": "25", "entity_group": "PARAM", "score": 0.9994981277273683}, {"start": 389, "end": 395, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998081478682107}, {"start": 409, "end": 415, "word": "bagels", "entity_group": "VAR", "score": 0.9993688484963146}, {"start": 421, "end": 423, "word": "30", "entity_group": "PARAM", "score": 0.9995900834674488}, {"start": 469, "end": 477, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994845860304205}, {"start": 478, "end": 484, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998127223814167}]}
{"doc_id": "-1596596902", "document": "Kim has $40000 to invest in two technology industries. She decides to invest in the LED display industry and microprocessor industry. Money invested in the LED display industry yields a return of 4% while money invested in the microprocessor industry yields a return of 5.5%. She has been advised to invest at least 20% of the money in the LED display industry and at most 65% in the microprocessor industry. How much should she invest in each to maximize her return?", "order_mapping": {"LED display industry": 0, "microprocessor industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"LED display industry": "4%", "microprocessor industry": "5.5%"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "20%", "var": "LED display industry", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "65%", "var": "microprocessor industry", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "40000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the LED display industry\n- y: Dollars invested in the microprocessor industry\n\nObjective:\n- Kim aims to maximize her return on investment. The return on investment for the LED display industry is 4% and for the microprocessor industry is 5.5%. Therefore, the objective function is: Maximize 0.04x + 0.055y\n\nConstraints:\n- Kim has $40000 to invest, so the constraint is: x + y <= 40000.\n- She has been advised to invest at least 20% of the money in the LED display industry, leading to the constraint: x >= 0.20(x + y).\n- She has also been advised to invest at most 65% in the microprocessor industry, resulting in the constraint: y <= 0.65(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.04x + 0.055y\nConstraints:\nx + y <= 40000\nx >= 0.20(x + y)\ny <= 0.65(x + y)", "canonical": {"objective": [-0.04, -0.055], "constraints": [[1.0, 1.0, 40000.0], [-0.8, 0.2, 0.0], [-0.65, 0.35, 0.0]]}, "solution": {"x": 14000, "y": 26000}, "pseudo_model": "\nDecision Variables:\n- Money invested in the LED display industry: LEDInvestment\n- Money invested in the microprocessor industry: MicroprocessorInvestment\n\nConstraints:\n- Total investment should not exceed $40000:\n  LEDInvestment + MicroprocessorInvestment <= 40000\n- At least 20% of the money should be invested in the LED display industry:\n  LEDInvestment >= 0.20 * (LEDInvestment + MicroprocessorInvestment)\n- At most 65% of the money should be invested in the microprocessor industry:\n  MicroprocessorInvestment <= 0.65 * (LEDInvestment + MicroprocessorInvestment)\n\nObjective:\n- Maximize return (4% from LED display industry, 5.5% from microprocessor industry):\n  0.04 * LEDInvestment + 0.055 * MicroprocessorInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLEDInvestment = intvar(0, 40000)  # Money invested in the LED display industry\nMicroprocessorInvestment = intvar(0, 40000)  # Money invested in the microprocessor industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $40000:\nm += LEDInvestment + MicroprocessorInvestment <= 40000\n# At least 20% of the money should be invested in the LED display industry:\nm += LEDInvestment >= 0.20 * (LEDInvestment + MicroprocessorInvestment)\n# At most 65% of the money should be invested in the microprocessor industry:\nm += MicroprocessorInvestment <= 0.65 * (LEDInvestment + MicroprocessorInvestment)\n\n# Objective\n# Maximize return (4% from LED display industry, 5.5% from microprocessor industry):\nm.maximize(0.04 * LEDInvestment + 0.055 * MicroprocessorInvestment)\n", "entities": [{"start": 4, "end": 7, "word": "has", "entity_group": "CONST_DIR", "score": 0.9936706671865081}, {"start": 10, "end": 15, "word": "40000", "entity_group": "LIMIT", "score": 0.9992856528448609}, {"start": 86, "end": 106, "word": "LED display industry", "entity_group": "VAR", "score": 0.9992093789220902}, {"start": 111, "end": 134, "word": "microprocessor industry", "entity_group": "VAR", "score": 0.9999724846272058}, {"start": 159, "end": 179, "word": "LED display industry", "entity_group": "VAR", "score": 0.9996879880018043}, {"start": 189, "end": 195, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9978028733189522}, {"start": 199, "end": 202, "word": "4 %", "entity_group": "PARAM", "score": 0.9872276532535206}, {"start": 231, "end": 254, "word": "microprocessor industry", "entity_group": "VAR", "score": 0.9999812385970915}, {"start": 264, "end": 270, "word": "return", "entity_group": "OBJ_NAME", "score": 0.994513479308983}, {"start": 274, "end": 279, "word": "5.5 %", "entity_group": "PARAM", "score": 0.9884551202875886}, {"start": 313, "end": 321, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998432202031522}, {"start": 322, "end": 326, "word": "20 %", "entity_group": "LIMIT", "score": 0.9908329751668169}, {"start": 347, "end": 367, "word": "LED display industry", "entity_group": "VAR", "score": 0.9986513738226516}, {"start": 372, "end": 379, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9978435218453848}, {"start": 380, "end": 384, "word": "65 %", "entity_group": "LIMIT", "score": 0.9390196075729828}, {"start": 392, "end": 415, "word": "microprocessor industry", "entity_group": "VAR", "score": 0.9999716946973374}, {"start": 456, "end": 464, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994802389200576}, {"start": 469, "end": 475, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9990315444022113}]}
{"doc_id": "1529036966", "document": "Natural Pharmacy is using 2000 grams of a rare plant extract to make two drugs: Alpha and Beta. One bottle of Alpha contains 15 grams of extract and one bottle of Beta contains 25 grams. Demand is such that at least three times as many Alpha are needed than Beta. A minimum of 10 bottles of Beta need to be made. One bottle of Alpha is sold for a profit of $4 while one bottle of Beta is sold at a profit of $6. How many of each drug should be prepared to maximize profit?", "order_mapping": {"Alpha": 0, "Beta": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Beta": "6", "Alpha": "4"}}, "const_declarations": [{"type": "linear", "direction": "using", "limit": "2000", "terms": {"Alpha": "15", "Beta": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "Alpha", "direction": "at least", "param": "three times", "y_var": "Beta", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10", "var": "Beta", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of Alpha\n- y: Number of bottles of Beta\n\nObjective:\n- The pharmacy aims to maximize its profit. One bottle of Alpha is sold for a profit of $4 while one bottle of Beta is sold at a profit of $6. Therefore, the objective function is: Maximize 4x + 6y\n\nConstraints:\n- The pharmacy has 2000 grams of the rare plant extract available, so the constraint is: 15x + 25y <= 2000.\n- Demand requires at least three times as many Alpha as Beta, leading to the constraint: x >= 3y.\n- A minimum of 10 bottles of Beta need to be made, resulting in the constraint: y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 6y\nConstraints:\n15x + 25y <= 2000\nx >= 3y\ny >= 10", "canonical": {"objective": [-4.0, -6.0], "constraints": [[15.0, 25.0, 2000.0], [-1.0, 3.0, 0.0], [0.0, -1.0, -10.0]]}, "solution": {"x": 115, "y": 11}, "pseudo_model": "\nDecision Variables:\n- Number of Alpha bottles made: Alpha\n- Number of Beta bottles made: Beta\n\nConstraints:\n- Total grams of extract used should not exceed 2000 grams (15 grams per Alpha, 25 grams per Beta):\n  15 * Alpha + 25 * Beta <= 2000\n- At least three times as many Alpha bottles are needed than Beta:\n  Alpha >= 3 * Beta\n- A minimum of 10 bottles of Beta need to be made:\n  Beta >= 10\n\nObjective:\n- Maximize profit (4 dollars per bottle of Alpha, 6 dollars per bottle of Beta):\n  4 * Alpha + 6 * Beta\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlpha = intvar(0, 999999999)  # Number of Alpha bottles made\nBeta = intvar(0, 999999999)  # Number of Beta bottles made\n\n# Constraints\nm = Model()\n\n# Total grams of extract used should not exceed 2000 grams:\nm += 15 * Alpha + 25 * Beta <= 2000\n# At least three times as many Alpha bottles are needed than Beta:\nm += Alpha >= 3 * Beta\n# A minimum of 10 bottles of Beta need to be made:\nm += Beta >= 10\n\n# Objective\n# Maximize profit (4 dollars per bottle of Alpha, 6 dollars per bottle of Beta):\nm.maximize(4 * Alpha + 6 * Beta)\n", "entities": [{"start": 20, "end": 25, "word": "using", "entity_group": "CONST_DIR", "score": 0.9920446349822277}, {"start": 26, "end": 30, "word": "2000", "entity_group": "LIMIT", "score": 0.9987014734102179}, {"start": 81, "end": 86, "word": "Alpha", "entity_group": "VAR", "score": 0.9990522159964105}, {"start": 91, "end": 95, "word": "Beta", "entity_group": "VAR", "score": 0.999600014647266}, {"start": 112, "end": 117, "word": "Alpha", "entity_group": "VAR", "score": 0.999174297796976}, {"start": 127, "end": 129, "word": "15", "entity_group": "PARAM", "score": 0.9996767876386368}, {"start": 165, "end": 169, "word": "Beta", "entity_group": "VAR", "score": 0.9985454526242362}, {"start": 179, "end": 181, "word": "25", "entity_group": "PARAM", "score": 0.9997319792084296}, {"start": 210, "end": 218, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978798386527087}, {"start": 219, "end": 224, "word": "three", "entity_group": "PARAM", "score": 0.9938903614157717}, {"start": 239, "end": 244, "word": "Alpha", "entity_group": "VAR", "score": 0.9993969759899439}, {"start": 261, "end": 265, "word": "Beta", "entity_group": "VAR", "score": 0.9994008905177791}, {"start": 270, "end": 277, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9995923477771305}, {"start": 281, "end": 283, "word": "10", "entity_group": "LIMIT", "score": 0.9996151947871632}, {"start": 295, "end": 299, "word": "Beta", "entity_group": "VAR", "score": 0.996953707954515}, {"start": 332, "end": 337, "word": "Alpha", "entity_group": "VAR", "score": 0.9994763581350481}, {"start": 352, "end": 358, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998815995136727}, {"start": 364, "end": 365, "word": "4", "entity_group": "PARAM", "score": 0.9991702531982679}, {"start": 386, "end": 390, "word": "Beta", "entity_group": "VAR", "score": 0.998076717598346}, {"start": 404, "end": 410, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994866431264432}, {"start": 416, "end": 417, "word": "6", "entity_group": "PARAM", "score": 0.9995483767077771}, {"start": 464, "end": 472, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800851728}, {"start": 473, "end": 479, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147306236481}]}
{"doc_id": "-1257061820", "document": "A wood artist makes cutting boards and chairs. Each cutting board takes 30 minutes to make while each chair takes 70 minutes to make. In a week, the artist only has 1500 minutes available to do woodworking. In addition, he only has enough wood to make 40 items total. If he makes a profit of $14 per cutting board and a profit of $25 per chair, how many of each should he make to maximize his profit?", "order_mapping": {"cutting boards": 0, "chairs": 1, "cutting board": 0, "chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cutting board": "14", "chair": "25"}}, "const_declarations": [{"type": "sum", "direction": "only", "limit": "40", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"cutting board": "30", "chair": "70"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cutting boards\n- y: Number of chairs\n\nObjective:\n- The wood artist aims to maximize his profit. He makes a profit of $14 per cutting board and a profit of $25 per chair. Therefore, the objective function is: Maximize 14x + 25y\n\nConstraints:\n- The wood artist only has enough wood to make 40 items total, leading to the constraint: x + y <= 40.\n- In a week, the artist only has 1500 minutes available for woodworking. Each cutting board takes 30 minutes to make and each chair takes 70 minutes to make, resulting in the constraint: 30x + 70y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 14x + 25y\nConstraints:\nx + y <= 40\n30x + 70y <= 1500", "canonical": {"objective": [-14.0, -25.0], "constraints": [[1.0, 1.0, 40.0], [30.0, 70.0, 1500.0]]}, "solution": {"x": 33, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of cutting boards made: CuttingBoards\n- Number of chairs made: Chairs\n\nConstraints:\n- Total number of items (cutting boards and chairs) should not exceed 40:\n  CuttingBoards + Chairs <= 40\n- Total time for making cutting boards and chairs should not exceed 1500 minutes (30 minutes per cutting board, 70 minutes per chair):\n  30 * CuttingBoards + 70 * Chairs <= 1500\n\nObjective:\n- Maximize profit ($14 profit per cutting board, $25 profit per chair):\n  14 * CuttingBoards + 25 * Chairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCuttingBoards = intvar(0, 999999999)  # Number of cutting boards made\nChairs = intvar(0, 999999999)  # Number of chairs made\n\n# Constraints\nm = Model()\n\n# The artist can make a total of 40 items:\nm += CuttingBoards + Chairs <= 40\n# The artist has 1500 minutes available for woodworking:\nm += 30 * CuttingBoards + 70 * Chairs <= 1500\n\n# Objective\n# Maximize profit ($14 per cutting board, $25 per chair):\nm.maximize(14 * CuttingBoards + 25 * Chairs)\n", "entities": [{"start": 20, "end": 34, "word": "cutting boards", "entity_group": "VAR", "score": 0.9999742380337054}, {"start": 39, "end": 45, "word": "chairs", "entity_group": "VAR", "score": 0.9995320253676298}, {"start": 53, "end": 66, "word": "cutting board", "entity_group": "VAR", "score": 0.9999816377667785}, {"start": 73, "end": 75, "word": "30", "entity_group": "PARAM", "score": 0.9995029132423071}, {"start": 103, "end": 108, "word": "chair", "entity_group": "VAR", "score": 0.9989840964747428}, {"start": 115, "end": 117, "word": "70", "entity_group": "PARAM", "score": 0.9987328871518072}, {"start": 168, "end": 172, "word": "1500", "entity_group": "LIMIT", "score": 0.999744720500887}, {"start": 181, "end": 190, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982431625848288}, {"start": 228, "end": 232, "word": "only", "entity_group": "CONST_DIR", "score": 0.99660839084145}, {"start": 257, "end": 259, "word": "40", "entity_group": "LIMIT", "score": 0.99930028958933}, {"start": 288, "end": 294, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999319912965904}, {"start": 300, "end": 302, "word": "14", "entity_group": "PARAM", "score": 0.9996019557397079}, {"start": 307, "end": 320, "word": "cutting board", "entity_group": "VAR", "score": 0.9999736520100451}, {"start": 327, "end": 333, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998558947560358}, {"start": 339, "end": 341, "word": "25", "entity_group": "PARAM", "score": 0.9994321652358119}, {"start": 346, "end": 351, "word": "chair", "entity_group": "VAR", "score": 0.9988311982561002}, {"start": 389, "end": 397, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997495988115745}, {"start": 402, "end": 408, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999848175245612}]}
{"doc_id": "1958464730", "document": "A farmer has 40 acres of land to grow corn and wheat. He must grow at least 6 acres of corn and at least 12 acres of wheat. Although corn is easier to grow, he can only grow at most 2 times the amount of corn as wheat in case insects ruin his corn. If the profit per acre of corn is $200 and the profit per acre of wheat is $300, how many acres of each should he grow to make maximum profit?", "order_mapping": {"corn": 0, "wheat": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"corn": "200", "wheat": "300"}}, "const_declarations": [{"type": "xby", "x_var": "corn", "direction": "at most", "param": "2 times", "y_var": "wheat", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "6", "var": "corn", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "wheat", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of corn\n- y: Acres of wheat\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of corn is $200 and the profit per acre of wheat is $300. Therefore, the objective function is: Maximize 200x + 300y\n\nConstraints:\n- The farmer has 40 acres of land, so the constraint is: x + y <= 40.\n- He must grow at least 6 acres of corn, leading to the constraint: x >= 6.\n- He must grow at least 12 acres of wheat, resulting in the constraint: y >= 12.\n- He can only grow at most 2 times the amount of corn as wheat, in case insects ruin his corn, leading to the constraint: x <= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 300y\nConstraints:\nx + y <= 40\nx >= 6\ny >= 12\nx <= 2y", "canonical": {"objective": [-200.0, -300.0], "constraints": [[1.0, 1.0, 40.0], [-1.0, 0.0, -6.0], [0.0, -1.0, -12.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 6, "y": 34}, "pseudo_model": "\nDecision Variables:\n- Number of acres of corn: Corn\n- Number of acres of wheat: Wheat\n\nConstraints:\n- Total land available for both crops is 40 acres:\n  Corn + Wheat <= 40\n- Must grow at least 6 acres of corn:\n  Corn >= 6\n- Must grow at least 12 acres of wheat:\n  Wheat >= 12\n- Can only grow at most 2 times the amount of corn as wheat:\n  Corn <= 2 * Wheat\n\nObjective:\n- Maximize profit (profit per acre of corn is $200, profit per acre of wheat is $300):\n  200 * Corn + 300 * Wheat\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCorn = intvar(0, 999999999)  # Number of acres of corn\nWheat = intvar(0, 999999999)  # Number of acres of wheat\n\n# Constraints\nm = Model()\n\n# Total land constraint (40 acres to grow corn and wheat):\nm += Corn + Wheat <= 40\n# At least 6 acres of corn:\nm += Corn >= 6\n# At least 12 acres of wheat:\nm += Wheat >= 12\n# Can only grow at most 2 times the amount of corn as wheat:\nm += Corn <= 2 * Wheat\n\n# Objective\n# Maximize profit ($200 per acre of corn, $300 per acre of wheat):\nm.maximize(200 * Corn + 300 * Wheat)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9972709650026362}, {"start": 13, "end": 15, "word": "40", "entity_group": "LIMIT", "score": 0.9986867673858787}, {"start": 38, "end": 42, "word": "corn", "entity_group": "VAR", "score": 0.9978702910951248}, {"start": 47, "end": 52, "word": "wheat", "entity_group": "VAR", "score": 0.9994416800692256}, {"start": 68, "end": 76, "word": "at least", "entity_group": "CONST_DIR", "score": 0.99920707716812}, {"start": 77, "end": 78, "word": "6", "entity_group": "LIMIT", "score": 0.9997428919236141}, {"start": 88, "end": 92, "word": "corn", "entity_group": "VAR", "score": 0.99879548933401}, {"start": 97, "end": 105, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992668935005028}, {"start": 106, "end": 108, "word": "12", "entity_group": "LIMIT", "score": 0.9997555238484653}, {"start": 118, "end": 123, "word": "wheat", "entity_group": "VAR", "score": 0.9997665742573292}, {"start": 135, "end": 139, "word": "corn", "entity_group": "VAR", "score": 0.9990330481420436}, {"start": 177, "end": 184, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981520000091568}, {"start": 185, "end": 192, "word": "2 times", "entity_group": "PARAM", "score": 0.7898255756308452}, {"start": 207, "end": 211, "word": "corn", "entity_group": "VAR", "score": 0.9990390620354408}, {"start": 215, "end": 220, "word": "wheat", "entity_group": "VAR", "score": 0.9995272534617249}, {"start": 246, "end": 250, "word": "corn", "entity_group": "VAR", "score": 0.9997594480829742}, {"start": 260, "end": 266, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999415051675418}, {"start": 279, "end": 283, "word": "corn", "entity_group": "VAR", "score": 0.9993061161943013}, {"start": 289, "end": 292, "word": "200", "entity_group": "PARAM", "score": 0.9991383623431184}, {"start": 301, "end": 307, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999325424351381}, {"start": 320, "end": 325, "word": "wheat", "entity_group": "VAR", "score": 0.99911915345075}, {"start": 331, "end": 334, "word": "300", "entity_group": "PARAM", "score": 0.999548408195037}, {"start": 383, "end": 390, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9945818867887669}, {"start": 391, "end": 397, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999428419275046}]}
{"doc_id": "-185815606", "document": "A bubble tea truck sells and delivers regular milk tea and fresh fruit tea during the pandemic. The profit on a cup of regular milk tea is 1.5$, and the profit on a cup of fresh fruit tea is 1.8$. In order to thrive, it must sell at least 45 cups of regular milk tea but can make at most 60 in a day. It must also sell at least 55 cups of fresh fruit tea due to its high demand, but can not prepare more than 75 a day. Due to staff shortage, the bubble tea truck can only prepare up to 120 items in total. How many of each item should it prepare to satisfy its customers and maximize its daily profit?", "order_mapping": {"regular milk tea": 0, "fresh fruit tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular milk tea": "1.5", "fresh fruit tea": "1.8$."}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "45", "var": "regular milk tea", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "60", "var": "regular milk tea", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "55", "var": "fresh fruit tea", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "not prepare more than", "limit": "75", "var": "fresh fruit tea", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "in total", "limit": "120", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular milk tea cups prepared\n- y: Number of fresh fruit tea cups prepared\n\nObjective:\n- The bubble tea truck aims to maximize its daily profit. The profit on a cup of regular milk tea is $1.5, and the profit on a cup of fresh fruit tea is $1.8. Therefore, the objective function is: Maximize 1.5x + 1.8y\n\nConstraints:\n- At least 45 cups of regular milk tea must be sold, leading to the constraint: x >= 45.\n- At most 60 cups of regular milk tea can be prepared, leading to the constraint: x <= 60.\n- At least 55 cups of fresh fruit tea must be sold, leading to the constraint: y >= 55.\n- At most 75 cups of fresh fruit tea can be prepared, leading to the constraint: y <= 75.\n- Due to staff shortage, the total number of items prepared cannot exceed 120, leading to the constraint: x + y <= 120.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.5x + 1.8y\nConstraints:\nx >= 45\nx <= 60\ny >= 55\ny <= 75\nx + y <= 120", "canonical": {"objective": [-1.5, -1.8], "constraints": [[-1.0, 0.0, -45.0], [1.0, 0.0, 60.0], [0.0, -1.0, -55.0], [0.0, 1.0, 75.0], [1.0, 1.0, 120.0]]}, "solution": {"x": 45, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Number of regular milk tea cups prepared: RegularMilkTea\n- Number of fresh fruit tea cups prepared: FreshFruitTea\n\nConstraints:\n- Regular milk tea must be prepared at least 45 cups and at most 60 cups:\n  45 <= RegularMilkTea <= 60\n- Fresh fruit tea must be prepared at least 55 cups and at most 75 cups:\n  55 <= FreshFruitTea <= 75\n- Total items prepared (regular milk tea + fresh fruit tea) should not exceed 120:\n  RegularMilkTea + FreshFruitTea <= 120\n\nObjective:\n- Maximize profit (1.5$ per cup of regular milk tea, 1.8$ per cup of fresh fruit tea):\n  1.5 * RegularMilkTea + 1.8 * FreshFruitTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularMilkTea = intvar(0, 999999999)  # Number of regular milk tea cups prepared\nFreshFruitTea = intvar(0, 999999999)  # Number of fresh fruit tea cups prepared\n\n# Constraints\nm = Model()\n\n# Regular milk tea constraints:\nm += RegularMilkTea >= 45  # At least 45 cups\nm += RegularMilkTea <= 60  # At most 60 cups\n\n# Fresh fruit tea constraints:\nm += FreshFruitTea >= 55  # At least 55 cups\nm += FreshFruitTea <= 75  # At most 75 cups\n\n# Total items prepared should not exceed 120:\nm += RegularMilkTea + FreshFruitTea <= 120\n\n# Objective\n# Maximize profit (1.5$ per cup of regular milk tea, 1.8$ per cup of fresh fruit tea):\nm.maximize(1.5 * RegularMilkTea + 1.8 * FreshFruitTea)\n", "entities": [{"start": 38, "end": 54, "word": "regular milk tea", "entity_group": "VAR", "score": 0.9989160188453946}, {"start": 59, "end": 74, "word": "fresh fruit tea", "entity_group": "VAR", "score": 0.9833435210275113}, {"start": 101, "end": 107, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355703129471}, {"start": 120, "end": 136, "word": "regular milk tea", "entity_group": "VAR", "score": 0.9958327659963577}, {"start": 140, "end": 143, "word": "1.5", "entity_group": "PARAM", "score": 0.9995314043710884}, {"start": 156, "end": 162, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999421523479363}, {"start": 175, "end": 190, "word": "fresh fruit tea", "entity_group": "VAR", "score": 0.9980933797300404}, {"start": 194, "end": 199, "word": "1.8$.", "entity_group": "PARAM", "score": 0.9993834266140084}, {"start": 234, "end": 242, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987788995622464}, {"start": 243, "end": 245, "word": "45", "entity_group": "LIMIT", "score": 0.9996935183776409}, {"start": 254, "end": 270, "word": "regular milk tea", "entity_group": "VAR", "score": 0.9991126673889672}, {"start": 284, "end": 291, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974562545993482}, {"start": 292, "end": 294, "word": "60", "entity_group": "LIMIT", "score": 0.9994027288563538}, {"start": 324, "end": 332, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990728053706531}, {"start": 333, "end": 335, "word": "55", "entity_group": "LIMIT", "score": 0.9996624439143978}, {"start": 344, "end": 359, "word": "fresh fruit tea", "entity_group": "VAR", "score": 0.9995334239289566}, {"start": 393, "end": 414, "word": "not prepare more than", "entity_group": "CONST_DIR", "score": 0.9500171062584414}, {"start": 415, "end": 417, "word": "75", "entity_group": "LIMIT", "score": 0.9995926326713931}, {"start": 494, "end": 497, "word": "120", "entity_group": "LIMIT", "score": 0.9996059657164772}, {"start": 504, "end": 512, "word": "in total", "entity_group": "CONST_DIR", "score": 0.9901640349994524}, {"start": 584, "end": 592, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9971025987065014}, {"start": 603, "end": 609, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994872380486893}]}
{"doc_id": "-1286317952", "document": "There will be a concert hosted by the local community and it has 250 seats. The first-floor seats make a profit of $100 each and the second-floor seats make a profit of $70 each. At least 70 seats will be assigned as first-floor seats. On the other hand, at least 2 times as many people prefer the second-floor seats to the first-floor seats. Find the maximum profit. Also, determine how many seats of each type must be sold to reach this amount.", "order_mapping": {"first-floor seats": 0, "second-floor seats": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"first-floor seats": "100", "second-floor seats": "70"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "250", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "At least", "limit": "70", "var": "first-floor seats", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "second-floor seats", "direction": "at least", "param": "2 times", "y_var": "first-floor seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of first-floor seats\n- y: Number of second-floor seats\n\nObjective:\n- The objective is to maximize the profit from ticket sales. The profit from each first-floor seat is $100 and from each second-floor seat is $70. Therefore, the objective function is: Maximize 100x + 70y\n\nConstraints:\n- The total number of seats available is 250, so the constraint is: x + y <= 250.\n- At least 70 seats will be assigned as first-floor seats, leading to the constraint: x >= 70.\n- At least 2 times as many people prefer the second-floor seats to the first-floor seats, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 70y\nConstraints:\nx + y <= 250\nx >= 70\ny >= 2x", "canonical": {"objective": [-100.0, -70.0], "constraints": [[1.0, 1.0, 250.0], [-1.0, 0.0, -70.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 83, "y": 167}, "pseudo_model": "\nDecision Variables:\n- Number of first-floor seats sold: FirstFloorSeats\n- Number of second-floor seats sold: SecondFloorSeats\n\nConstraints:\n- Total number of seats (first-floor + second-floor) should not exceed 250:\n  FirstFloorSeats + SecondFloorSeats <= 250\n- At least 70 first-floor seats:\n  FirstFloorSeats >= 70\n- Second-floor seats should be at least 2 times the number of first-floor seats:\n  SecondFloorSeats >= 2 * FirstFloorSeats\n\nObjective:\n- Maximize profit ($100 profit per first-floor seat, $70 profit per second-floor seat):\n  100 * FirstFloorSeats + 70 * SecondFloorSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstFloorSeats = intvar(0, 999999999)  # Number of first-floor seats sold\nSecondFloorSeats = intvar(0, 999999999)  # Number of second-floor seats sold\n\n# Constraints\nm = Model()\n\n# Total number of seats is 250:\nm += FirstFloorSeats + SecondFloorSeats <= 250\n# At least 70 seats will be assigned as first-floor seats:\nm += FirstFloorSeats >= 70\n# At least 2 times as many people prefer the second-floor seats to the first-floor seats:\nm += SecondFloorSeats >= 2 * FirstFloorSeats\n\n# Objective\n# Maximize profit ($100 per first-floor seat, $70 per second-floor seat):\nm.maximize(100 * FirstFloorSeats + 70 * SecondFloorSeats)\n", "entities": [{"start": 61, "end": 64, "word": "has", "entity_group": "CONST_DIR", "score": 0.995772933956972}, {"start": 65, "end": 68, "word": "250", "entity_group": "LIMIT", "score": 0.9988326964460374}, {"start": 81, "end": 100, "word": "first - floor seats", "entity_group": "VAR", "score": 0.9994132528792885}, {"start": 108, "end": 114, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996620322752588}, {"start": 120, "end": 123, "word": "100", "entity_group": "PARAM", "score": 0.9994347246478007}, {"start": 137, "end": 157, "word": "second - floor seats", "entity_group": "VAR", "score": 0.9994659952419626}, {"start": 165, "end": 171, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997506741654749}, {"start": 177, "end": 179, "word": "70", "entity_group": "PARAM", "score": 0.9994057198560115}, {"start": 187, "end": 195, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9978832135061032}, {"start": 196, "end": 198, "word": "70", "entity_group": "LIMIT", "score": 0.9996708557567145}, {"start": 225, "end": 244, "word": "first - floor seats", "entity_group": "VAR", "score": 0.99914459283772}, {"start": 267, "end": 275, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981607075635023}, {"start": 276, "end": 283, "word": "2 times", "entity_group": "PARAM", "score": 0.6148775700423782}, {"start": 310, "end": 330, "word": "second - floor seats", "entity_group": "VAR", "score": 0.9994218162235575}, {"start": 338, "end": 357, "word": "first - floor seats", "entity_group": "VAR", "score": 0.9992165132687886}, {"start": 369, "end": 376, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9816695895968796}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998275563924052}]}
{"doc_id": "-915636384", "document": "A computer store can spend at most $20,000 on computers. Each laptop costs $500 and each desktop costs $400. The profit per laptop sold is $210 and the profit per desktop sold is $160. The store owner estimates that at least 20 laptops but at most 35 are sold each month. In addition, the number of desktops sold is at most a third of the number of laptops sold. How many of each should the store sell to maximize profit?", "order_mapping": {"laptop": 0, "desktop": 1, "laptops": 0, "desktops": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"desktop": "160", "laptop": "210"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "20,000", "terms": {"laptop": "500", "desktop": "400"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "laptops", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "35", "var": "laptops", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "desktops", "direction": "at most", "param": "third", "y_var": "laptops", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of laptops sold\n- y: Number of desktops sold\n\nObjective:\n- The store aims to maximize its profit. The profit per laptop sold is $210 and the profit per desktop sold is $160. Therefore, the objective function is: Maximize 210x + 160y\n\nConstraints:\n- The store can spend at most $20,000 on computers, so the constraint is: 500x + 400y <= 20000.\n- The store estimates that at least 20 but at most 35 laptops are sold each month, leading to the constraints: x >= 20 and x <= 35.\n- The number of desktops sold is at most a third of the number of laptops sold, resulting in the constraint: y <= (1/3)x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 210x + 160y\nConstraints:\n500x + 400y <= 20000\nx >= 20\nx <= 35\ny <= (1/3)x", "canonical": {"objective": [-210.0, -160.0], "constraints": [[500.0, 400.0, 20000.0], [-1.0, 0.0, -20.0], [1.0, 0.0, 35.0], [-0.3333333333333333, 1.0, 0.0]]}, "solution": {"x": 32, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of laptops sold: Laptops\n- Number of desktops sold: Desktops\n\nConstraints:\n- The store can spend at most $20,000 on computers (each laptop costs $500 and each desktop costs $400):\n  500 * Laptops + 400 * Desktops <= 20000\n- At least 20 laptops but at most 35 are sold each month:\n  20 <= Laptops <= 35\n- The number of desktops sold is at most a third of the number of laptops sold:\n  Desktops <= 1/3 * Laptops\n\nObjective:\n- Maximize profit (profit per laptop sold is $210 and per desktop sold is $160):\n  210 * Laptops + 160 * Desktops\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLaptops = intvar(0, 999999999)  # Number of laptops sold\nDesktops = intvar(0, 999999999)  # Number of desktops sold\n\n# Constraints\nm = Model()\n\n# The store can spend at most $20,000 on computers:\nm += 500 * Laptops + 400 * Desktops <= 20000\n# At least 20 laptops but at most 35 are sold each month:\nm += Laptops >= 20\nm += Laptops <= 35\n# The number of desktops sold is at most a third of the number of laptops sold:\nm += Desktops <= (1/3) * Laptops\n\n# Objective\n# Maximize profit (profit per laptop sold is $210 and per desktop sold is $160):\nm.maximize(210 * Laptops + 160 * Desktops)\n", "entities": [{"start": 27, "end": 34, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9960048849367631}, {"start": 37, "end": 43, "word": "20,000", "entity_group": "LIMIT", "score": 0.9994068582336484}, {"start": 64, "end": 70, "word": "laptop", "entity_group": "VAR", "score": 0.9997213243939068}, {"start": 79, "end": 82, "word": "500", "entity_group": "PARAM", "score": 0.9996788458766035}, {"start": 92, "end": 99, "word": "desktop", "entity_group": "VAR", "score": 0.9997314774698032}, {"start": 108, "end": 111, "word": "400", "entity_group": "PARAM", "score": 0.9995847786340654}, {"start": 118, "end": 124, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999397409583886}, {"start": 129, "end": 135, "word": "laptop", "entity_group": "VAR", "score": 0.9992920020712119}, {"start": 146, "end": 149, "word": "210", "entity_group": "PARAM", "score": 0.9995440184086422}, {"start": 158, "end": 164, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999382359181663}, {"start": 169, "end": 176, "word": "desktop", "entity_group": "VAR", "score": 0.999035749298278}, {"start": 187, "end": 190, "word": "160", "entity_group": "PARAM", "score": 0.9996870825059548}, {"start": 224, "end": 232, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987053544307416}, {"start": 233, "end": 235, "word": "20", "entity_group": "LIMIT", "score": 0.9996649491504239}, {"start": 236, "end": 243, "word": "laptops", "entity_group": "VAR", "score": 0.9989601604216608}, {"start": 248, "end": 255, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981867350683622}, {"start": 256, "end": 258, "word": "35", "entity_group": "LIMIT", "score": 0.9995933356221078}, {"start": 309, "end": 317, "word": "desktops", "entity_group": "VAR", "score": 0.9985635876584679}, {"start": 326, "end": 333, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9941364947520732}, {"start": 336, "end": 341, "word": "third", "entity_group": "PARAM", "score": 0.9971232431804442}, {"start": 359, "end": 366, "word": "laptops", "entity_group": "VAR", "score": 0.9995366302397735}, {"start": 416, "end": 424, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "1858714184", "document": "An electronics factory manufactures two calculators: solar calculators and finance calculators, using silicon, plastic, and steel. To make a solar calculator, 5 grams of silicon, 4 grams of plastic, and 2 grams of steel are needed. The profit per solar calculator is $12. To make a finance calculator, 3 grams of silicon, 5 grams of plastic, and 3 grams of steel are needed. The profit per finance calculator is $9. Even though the company can sell as many calculators as it produces, there is only 150 grams of silicon, 150 grams of plastic, and 70 grams of steel available. Formulate an LP to maximize profit.", "order_mapping": {"solar calculators": 0, "finance calculators": 1, "solar calculator": 0, "finance calculator": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"solar calculator": "12", "finance calculator": "9"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"solar calculator": "5", "finance calculator": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "150", "terms": {"solar calculator": "4", "finance calculator": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"solar calculator": "2", "finance calculator": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of solar calculators produced\n- y: Number of finance calculators produced\n\nObjective:\n- The factory aims to maximize its profit. The profit per solar calculator is $12 and the profit per finance calculator is $9. Therefore, the objective function is: Maximize 12x + 9y\n\nConstraints:\n- The available resources are limited to 150 grams of silicon, 150 grams of plastic, and 70 grams of steel. This leads to the following constraints:\n    - 5x + 3y <= 150 (silicon constraint)\n    - 4x + 5y <= 150 (plastic constraint)\n    - 2x + 3y <= 70 (steel constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 9y\nConstraints:\n5x + 3y <= 150\n4x + 5y <= 150\n2x + 3y <= 70", "canonical": {"objective": [-12.0, -9.0], "constraints": [[5.0, 3.0, 150.0], [4.0, 5.0, 150.0], [2.0, 3.0, 70.0]]}, "solution": {"x": 27, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of solar calculators produced: SolarCalculators\n- Number of finance calculators produced: FinanceCalculators\n\nConstraints:\n- Silicon usage for both types of calculators should not exceed 150 grams:\n  5 * SolarCalculators + 3 * FinanceCalculators <= 150\n- Plastic usage for both types of calculators should not exceed 150 grams:\n  4 * SolarCalculators + 5 * FinanceCalculators <= 150\n- Steel usage for both types of calculators should not exceed 70 grams:\n  2 * SolarCalculators + 3 * FinanceCalculators <= 70\n\nObjective:\n- Maximize profit ($12 profit per solar calculator, $9 profit per finance calculator):\n  12 * SolarCalculators + 9 * FinanceCalculators\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSolarCalculators = intvar(0, 999999999)  # Number of solar calculators produced\nFinanceCalculators = intvar(0, 999999999)  # Number of finance calculators produced\n\n# Constraints\nm = Model()\n\n# Silicon constraint (150 grams available):\nm += 5 * SolarCalculators + 3 * FinanceCalculators <= 150\n# Plastic constraint (150 grams available):\nm += 4 * SolarCalculators + 5 * FinanceCalculators <= 150\n# Steel constraint (70 grams available):\nm += 2 * SolarCalculators + 3 * FinanceCalculators <= 70\n\n# Objective\n# Maximize profit ($12 per solar calculator, $9 per finance calculator):\nm.maximize(12 * SolarCalculators + 9 * FinanceCalculators)\n", "entities": [{"start": 54, "end": 71, "word": "solar calculators", "entity_group": "VAR", "score": 0.999975074955471}, {"start": 76, "end": 95, "word": "finance calculators", "entity_group": "VAR", "score": 0.9999817774289558}, {"start": 146, "end": 162, "word": "solar calculator", "entity_group": "VAR", "score": 0.9999526968210254}, {"start": 165, "end": 166, "word": "5", "entity_group": "PARAM", "score": 0.9997116226710994}, {"start": 186, "end": 187, "word": "4", "entity_group": "PARAM", "score": 0.9997345640306498}, {"start": 211, "end": 212, "word": "2", "entity_group": "PARAM", "score": 0.9996924908925116}, {"start": 245, "end": 251, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99992841700233}, {"start": 256, "end": 272, "word": "solar calculator", "entity_group": "VAR", "score": 0.9999256784950197}, {"start": 278, "end": 280, "word": "12", "entity_group": "PARAM", "score": 0.9997172328551056}, {"start": 293, "end": 311, "word": "finance calculator", "entity_group": "VAR", "score": 0.9999444698697012}, {"start": 314, "end": 315, "word": "3", "entity_group": "PARAM", "score": 0.9996960500650556}, {"start": 335, "end": 336, "word": "5", "entity_group": "PARAM", "score": 0.9997345138905639}, {"start": 360, "end": 361, "word": "3", "entity_group": "PARAM", "score": 0.9996924848924932}, {"start": 394, "end": 400, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999353746370104}, {"start": 405, "end": 423, "word": "finance calculator", "entity_group": "VAR", "score": 0.9999398476068011}, {"start": 429, "end": 430, "word": "9", "entity_group": "PARAM", "score": 0.9997332267508836}, {"start": 517, "end": 520, "word": "150", "entity_group": "LIMIT", "score": 0.9997635862870843}, {"start": 540, "end": 543, "word": "150", "entity_group": "LIMIT", "score": 0.9997544751057585}, {"start": 567, "end": 569, "word": "70", "entity_group": "LIMIT", "score": 0.9996542350303271}, {"start": 585, "end": 594, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978086556480187}, {"start": 616, "end": 624, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994070053081018}, {"start": 625, "end": 631, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995116631055723}]}
{"doc_id": "-27745871", "document": "A wedding cake company mixes two cake mixes to get a perfect consistency. Vanilla cake mix contains 3% leavening agent and 55% flour. Chocolate cake mix contains 2% leavening agent and 43% flour. The final mixture needs at least 0.3 kg of leavening agent and 10 kg of flour. If the cost per kg of vanilla cake mix is $10 and the cost per kg of chocolate cake mix is $15, how many kg of each should the wedding cake company buy to minimize costs?", "order_mapping": {"Vanilla cake mix": 0, "Chocolate cake mix": 1, "vanilla cake mix": 0, "chocolate cake mix": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"vanilla cake mix": "10", "chocolate cake mix": "15"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "0.3", "terms": {"Vanilla cake mix": "3%", "Chocolate cake mix": "2%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "10", "terms": {"Vanilla cake mix": "55%", "Chocolate cake mix": "43%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of vanilla cake mix\n- y: kg of chocolate cake mix\n\nObjective:\n- The wedding cake company aims to minimize costs. The cost per kg of vanilla cake mix is $10 and the cost per kg of chocolate cake mix is $15. Therefore, the objective function is: Minimize 10x + 15y\n\nConstraints:\n- The final mixture needs at least 0.3 kg of leavening agent, which can be expressed as: 0.03x + 0.02y >= 0.3\n- The final mixture needs at least 10 kg of flour, which can be expressed as: 0.55x + 0.43y >= 10\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 10x + 15y\nConstraints:\n0.03x + 0.02y >= 0.3\n0.55x + 0.43y >= 10", "canonical": {"objective": [10.0, 15.0], "constraints": [[-0.03, -0.02, -0.3], [-0.55, -0.43, -10.0]]}, "solution": {"x": 19, "y": 0}, "pseudo_model": "\nDecision Variables:\n- kg of vanilla cake mix bought: VanillaCakeMix\n- kg of chocolate cake mix bought: ChocolateCakeMix\n\nConstraints:\n- The final mixture needs at least 0.3 kg of leavening agent (3% in vanilla, 2% in chocolate):\n  0.03 * VanillaCakeMix + 0.02 * ChocolateCakeMix >= 0.3\n- The final mixture needs at least 10 kg of flour (55% in vanilla, 43% in chocolate):\n  0.55 * VanillaCakeMix + 0.43 * ChocolateCakeMix >= 10\n\nObjective:\n- Minimize costs ($10 per kg of vanilla cake mix and $15 per kg of chocolate cake mix):\n  10 * VanillaCakeMix + 15 * ChocolateCakeMix\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVanillaCakeMix = intvar(0, 999999999)  # kg of vanilla cake mix\nChocolateCakeMix = intvar(0, 999999999)  # kg of chocolate cake mix\n\n# Constraints\nm = Model()\n\n# The final mixture needs at least 0.3 kg of leavening agent:\nm += 0.03 * VanillaCakeMix + 0.02 * ChocolateCakeMix >= 0.3\n# The final mixture needs at least 10 kg of flour:\nm += 0.55 * VanillaCakeMix + 0.43 * ChocolateCakeMix >= 10\n\n# Objective\n# Minimize costs ($10 per kg of vanilla cake mix and $15 per kg of chocolate cake mix):\nm.minimize(10 * VanillaCakeMix + 15 * ChocolateCakeMix)\n", "entities": [{"start": 75, "end": 91, "word": "Vanilla cake mix", "entity_group": "VAR", "score": 0.9989938185456225}, {"start": 101, "end": 104, "word": "3 %", "entity_group": "PARAM", "score": 0.9261613815302601}, {"start": 125, "end": 129, "word": "55 %", "entity_group": "PARAM", "score": 0.9918513726666938}, {"start": 138, "end": 156, "word": "Chocolate cake mix", "entity_group": "VAR", "score": 0.9980340228117194}, {"start": 166, "end": 169, "word": "2 %", "entity_group": "PARAM", "score": 0.89908351796683}, {"start": 190, "end": 194, "word": "43 %", "entity_group": "PARAM", "score": 0.9917917208545418}, {"start": 227, "end": 235, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990584578653734}, {"start": 236, "end": 239, "word": "0.3", "entity_group": "LIMIT", "score": 0.9997120094616515}, {"start": 266, "end": 268, "word": "10", "entity_group": "LIMIT", "score": 0.9991152648239847}, {"start": 290, "end": 294, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987426537996614}, {"start": 305, "end": 321, "word": "vanilla cake mix", "entity_group": "VAR", "score": 0.9946367720508384}, {"start": 327, "end": 329, "word": "10", "entity_group": "PARAM", "score": 0.9983431673506559}, {"start": 338, "end": 342, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9988375172038062}, {"start": 353, "end": 371, "word": "chocolate cake mix", "entity_group": "VAR", "score": 0.9937683955345089}, {"start": 377, "end": 379, "word": "15", "entity_group": "PARAM", "score": 0.9995140218495675}, {"start": 441, "end": 449, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9990555032411256}, {"start": 450, "end": 455, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9962052469179449}]}
{"doc_id": "-1745177797", "document": "Gabriel has lemons and pecans to eat. A pound of lemons costs $12 and contains 3 units of calcium, 4 units of potassium, and 7 units of zinc per pound. A pound of pecans costs $10 and contains 5 units of calcium, 4 units of potassium, and 9 units of zinc per pound. There is nothing else available to eat and Gabriel must meet his daily requirements of at least 25 units of calcium, 18 units of potassium, and 19 units of zinc. How many pounds of each should Gabriel eat to minimize his cost?", "order_mapping": {"lemons": 0, "pecans": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"pecans": "10", "lemons": "12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "25", "terms": {"lemons": "3", "pecans": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "18", "terms": {"lemons": "4", "pecans": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "19", "terms": {"lemons": "7", "pecans": "9"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Pounds of lemons to eat\n- y: Pounds of pecans to eat\n\nObjective:\n- Gabriel wants to minimize his cost. A pound of lemons costs $12 and a pound of pecans costs $10. Therefore, the objective function is: Minimize 12x + 10y\n\nConstraints:\n- Gabriel must meet his daily requirements of at least 25 units of calcium, 18 units of potassium, and 19 units of zinc. This leads to the following constraints:\n    - 3x + 5y >= 25 (calcium)\n    - 4x + 4y >= 18 (potassium)\n    - 7x + 9y >= 19 (zinc)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 12x + 10y\nConstraints:\n3x + 5y >= 25\n4x + 4y >= 18\n7x + 9y >= 19", "canonical": {"objective": [12.0, 10.0], "constraints": [[-3.0, -5.0, -25.0], [-4.0, -4.0, -18.0], [-7.0, -9.0, -19.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of pounds of lemons Gabriel eats: Lemons\n- Number of pounds of pecans Gabriel eats: Pecans\n\nConstraints:\n- Gabriel must meet his daily requirements of at least 25 units of calcium:\n  3*Lemons + 5*Pecans >= 25\n- Gabriel must meet his daily requirements of at least 18 units of potassium:\n  4*Lemons + 4*Pecans >= 18\n- Gabriel must meet his daily requirements of at least 19 units of zinc:\n  7*Lemons + 9*Pecans >= 19\n\nObjective:\n- Minimize cost (12 dollars per pound of lemons, 10 dollars per pound of pecans):\n  12*Lemons + 10*Pecans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLemons = intvar(0, 999999999)  # Number of pounds of lemons Gabriel eats\nPecans = intvar(0, 999999999)  # Number of pounds of pecans Gabriel eats\n\n# Constraints\nm = Model()\n\n# Gabriel's daily requirements:\n# At least 25 units of calcium:\nm += 3*Lemons + 5*Pecans >= 25\n# At least 18 units of potassium:\nm += 4*Lemons + 4*Pecans >= 18\n# At least 19 units of zinc:\nm += 7*Lemons + 9*Pecans >= 19\n\n# Objective\n# Minimize cost (12 dollars per pound of lemons, 10 dollars per pound of pecans):\nm.minimize(12*Lemons + 10*Pecans)\n", "entities": [{"start": 12, "end": 18, "word": "lemons", "entity_group": "VAR", "score": 0.9997682230077304}, {"start": 23, "end": 29, "word": "pecans", "entity_group": "VAR", "score": 0.9994292059414672}, {"start": 50, "end": 56, "word": "lemons", "entity_group": "VAR", "score": 0.999585472083093}, {"start": 57, "end": 62, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9961123026646129}, {"start": 65, "end": 67, "word": "12", "entity_group": "PARAM", "score": 0.999555741699942}, {"start": 81, "end": 82, "word": "3", "entity_group": "PARAM", "score": 0.9996715137330484}, {"start": 102, "end": 103, "word": "4", "entity_group": "PARAM", "score": 0.9997345195843438}, {"start": 129, "end": 130, "word": "7", "entity_group": "PARAM", "score": 0.9996178005993948}, {"start": 168, "end": 174, "word": "pecans", "entity_group": "VAR", "score": 0.9996057165663523}, {"start": 175, "end": 180, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9959206063203628}, {"start": 183, "end": 185, "word": "10", "entity_group": "PARAM", "score": 0.9995557417044016}, {"start": 199, "end": 200, "word": "5", "entity_group": "PARAM", "score": 0.9996715137330484}, {"start": 220, "end": 221, "word": "4", "entity_group": "PARAM", "score": 0.9997345195843438}, {"start": 247, "end": 248, "word": "9", "entity_group": "PARAM", "score": 0.9996177989257233}, {"start": 362, "end": 370, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992030093027203}, {"start": 371, "end": 373, "word": "25", "entity_group": "LIMIT", "score": 0.9997178095962632}, {"start": 393, "end": 395, "word": "18", "entity_group": "LIMIT", "score": 0.9997356502979144}, {"start": 421, "end": 423, "word": "19", "entity_group": "LIMIT", "score": 0.9992901342934378}, {"start": 486, "end": 494, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999136501923632}, {"start": 499, "end": 503, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9969274393515588}]}
{"doc_id": "737447686", "document": "A furniture factory makes two products: bedside tables and bookcases. Both products have to go through two processes: crafting and polishing. For each bedside table, the workers spend 2.5 hours crafting and 1.5 hours polishing. For each bookcase, the workers spend 5 hours crafting and 3 hours polishing. On any day, there is a maximum of 30 crafting hours available and 20 polishing hours available. The profit from the sale of each bedside table is $200 and the profit from the sale of each bookcase is $500. The factory can sell everything they make. How should they schedule daily production in order to maximize profit?", "order_mapping": {"bedside tables": 0, "bookcases": 1, "bedside table": 0, "bookcase": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bedside table": "200", "bookcase": "500"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "30", "terms": {"bedside table": "2.5", "bookcase": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "20", "terms": {"bedside table": "1.5", "bookcase": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bedside tables produced daily\n- y: Number of bookcases produced daily\n\nObjective:\n- The factory aims to maximize its daily profit. The profit from the sale of each bedside table is $200 and the profit from the sale of each bookcase is $500. Therefore, the objective function is: Maximize 200x + 500y\n\nConstraints:\n- The maximum crafting hours available daily is 30, so the constraint is: 2.5x + 5y <= 30.\n- The maximum polishing hours available daily is 20, leading to the constraint: 1.5x + 3y <= 20.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 500y\nConstraints:\n2.5x + 5y <= 30\n1.5x + 3y <= 20", "canonical": {"objective": [-200.0, -500.0], "constraints": [[2.5, 5.0, 30.0], [1.5, 3.0, 20.0]]}, "solution": {"x": 0, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of bedside tables produced: BedsideTables\n- Number of bookcases produced: Bookcases\n\nConstraints:\n- Maximum of 30 crafting hours available (2.5 hours per bedside table, 5 hours per bookcase):\n  2.5 * BedsideTables + 5 * Bookcases <= 30\n- Maximum of 20 polishing hours available (1.5 hours per bedside table, 3 hours per bookcase):\n  1.5 * BedsideTables + 3 * Bookcases <= 20\n\nObjective:\n- Maximize profit ($200 per bedside table, $500 per bookcase):\n  200 * BedsideTables + 500 * Bookcases\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBedsideTables = intvar(0, 999999999)  # Number of bedside tables produced\nBookcases = intvar(0, 999999999)  # Number of bookcases produced\n\n# Constraints\nm = Model()\n\n# Maximum of 30 crafting hours available:\nm += 2.5 * BedsideTables + 5 * Bookcases <= 30\n# Maximum of 20 polishing hours available:\nm += 1.5 * BedsideTables + 3 * Bookcases <= 20\n\n# Objective\n# Maximize profit ($200 per bedside table, $500 per bookcase):\nm.maximize(200 * BedsideTables + 500 * Bookcases)\n", "entities": [{"start": 41, "end": 55, "word": "bedside tables", "entity_group": "VAR", "score": 0.9999744814602611}, {"start": 60, "end": 69, "word": "bookcases", "entity_group": "VAR", "score": 0.9996688567700616}, {"start": 155, "end": 168, "word": "bedside table", "entity_group": "VAR", "score": 0.9999775337721577}, {"start": 189, "end": 192, "word": "2.5", "entity_group": "PARAM", "score": 0.9985394086530966}, {"start": 212, "end": 215, "word": "1.5", "entity_group": "PARAM", "score": 0.9992870077394355}, {"start": 243, "end": 251, "word": "bookcase", "entity_group": "VAR", "score": 0.9998274394847482}, {"start": 272, "end": 273, "word": "5", "entity_group": "PARAM", "score": 0.9996177000477248}, {"start": 293, "end": 294, "word": "3", "entity_group": "PARAM", "score": 0.9993822041233019}, {"start": 337, "end": 344, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9961238945836283}, {"start": 348, "end": 350, "word": "30", "entity_group": "LIMIT", "score": 0.9993983273932944}, {"start": 380, "end": 382, "word": "20", "entity_group": "LIMIT", "score": 0.9989172406024234}, {"start": 399, "end": 408, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991289384673077}, {"start": 415, "end": 421, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998536805485891}, {"start": 444, "end": 457, "word": "bedside table", "entity_group": "VAR", "score": 0.9999680722422767}, {"start": 463, "end": 466, "word": "200", "entity_group": "PARAM", "score": 0.9996165648006721}, {"start": 475, "end": 481, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999458996421258}, {"start": 504, "end": 512, "word": "bookcase", "entity_group": "VAR", "score": 0.9980486089808887}, {"start": 518, "end": 521, "word": "500", "entity_group": "PARAM", "score": 0.9997413484182692}, {"start": 622, "end": 630, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9979851631978022}, {"start": 631, "end": 637, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997295254659694}]}
{"doc_id": "-963004865", "document": "A company sells blankets and bedsheets. Each blanket takes 14 minutes to cut and 12 minutes to hem. Each bedsheet takes 17 minutes to cut and 14 minutes to hem. There are 2000 minutes available for cutting and 1500 minutes available for hemming. If the profit per blanket is $24 and the profit per bedsheet is $21, how many of each should be made to maximize profit?", "order_mapping": {"blankets": 0, "bedsheets": 1, "blanket": 0, "bedsheet": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"blanket": "24", "bedsheet": "21"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"blanket": "14", "bedsheet": "17"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"blanket": "12", "bedsheet": "14"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of blankets to be made\n- y: Number of bedsheets to be made\n\nObjective:\n- The company aims to maximize its profit. The profit per blanket is $24 and the profit per bedsheet is $21. Therefore, the objective function is: Maximize 24x + 21y\n\nConstraints:\n- The available time for cutting is 2000 minutes, and each blanket takes 14 minutes to cut and each bedsheet takes 17 minutes to cut. This leads to the constraint: 14x + 17y <= 2000.\n- The available time for hemming is 1500 minutes, and each blanket takes 12 minutes to hem and each bedsheet takes 14 minutes to hem. This results in the constraint: 12x + 14y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 24x + 21y\nConstraints:\n14x + 17y <= 2000\n12x + 14y <= 1500", "canonical": {"objective": [-24.0, -21.0], "constraints": [[14.0, 17.0, 2000.0], [12.0, 14.0, 1500.0]]}, "solution": {"x": 125, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of blankets made: Blankets\n- Number of bedsheets made: Bedsheets\n\nConstraints:\n- Total minutes for cutting should not exceed 2000:\n  14 * Blankets + 17 * Bedsheets <= 2000\n- Total minutes for hemming should not exceed 1500:\n  12 * Blankets + 14 * Bedsheets <= 1500\n\nObjective:\n- Maximize profit (24 dollars per blanket, 21 dollars per bedsheet):\n  24 * Blankets + 21 * Bedsheets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlankets = intvar(0, 999999999)  # Number of blankets made\nBedsheets = intvar(0, 999999999)  # Number of bedsheets made\n\n# Constraints\nm = Model()\n\n# Total minutes available for cutting and hemming:\n# 14 minutes to cut a blanket and 17 minutes to cut a bedsheet, with 2000 minutes available for cutting\nm += 14 * Blankets + 17 * Bedsheets <= 2000\n# 12 minutes to hem a blanket and 14 minutes to hem a bedsheet, with 1500 minutes available for hemming\nm += 12 * Blankets + 14 * Bedsheets <= 1500\n\n# Objective\n# Maximize profit (24 dollars per blanket, 21 dollars per bedsheet):\nm.maximize(24 * Blankets + 21 * Bedsheets)\n", "entities": [{"start": 16, "end": 24, "word": "blankets", "entity_group": "VAR", "score": 0.9997138974609906}, {"start": 29, "end": 38, "word": "bedsheets", "entity_group": "VAR", "score": 0.9997915779759124}, {"start": 46, "end": 53, "word": "blanket", "entity_group": "VAR", "score": 0.9996996718668623}, {"start": 60, "end": 62, "word": "14", "entity_group": "PARAM", "score": 0.999688085236301}, {"start": 82, "end": 84, "word": "12", "entity_group": "PARAM", "score": 0.9997356589084553}, {"start": 107, "end": 115, "word": "bedsheet", "entity_group": "VAR", "score": 0.9993838209504695}, {"start": 122, "end": 124, "word": "17", "entity_group": "PARAM", "score": 0.99961942022235}, {"start": 144, "end": 146, "word": "14", "entity_group": "PARAM", "score": 0.9997191835219804}, {"start": 174, "end": 178, "word": "2000", "entity_group": "LIMIT", "score": 0.9997740026720479}, {"start": 187, "end": 196, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992742380827064}, {"start": 213, "end": 217, "word": "1500", "entity_group": "LIMIT", "score": 0.999748416674979}, {"start": 226, "end": 235, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988916823321989}, {"start": 257, "end": 263, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999903360152356}, {"start": 268, "end": 275, "word": "blanket", "entity_group": "VAR", "score": 0.9994906852689517}, {"start": 281, "end": 283, "word": "24", "entity_group": "PARAM", "score": 0.9991341235341273}, {"start": 292, "end": 298, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688958356791}, {"start": 303, "end": 311, "word": "bedsheet", "entity_group": "VAR", "score": 0.9994201489605631}, {"start": 317, "end": 319, "word": "21", "entity_group": "PARAM", "score": 0.9994707648838381}, {"start": 357, "end": 365, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 366, "end": 372, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-301688101", "document": "Angela mixes French perfume and Spanish perfume together to create a new mixture. The mixture must contain at least 150 units of flower scent and 60 units of fruit scent. Each bottle of French perfume contains 50 units of fruit scent and 20 units of flower scent. Each bottle of Spanish perfume contains 40 units of fruit scent and 30 units of flower scent. If the cost per bottle of French perfume is $50.00 and the cost per bottle of Spanish perfume is $45.00, how many of each should Angela buy to minimize costs?", "order_mapping": {"French perfume": 0, "Spanish perfume": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"French perfume": "50.00", "Spanish perfume": "45.00"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"French perfume": "20", "Spanish perfume": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "60", "terms": {"French perfume": "50", "Spanish perfume": "40"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of French perfume\n- y: Number of bottles of Spanish perfume\n\nObjective:\n- Angela wants to minimize costs. Each bottle of French perfume costs $50.00 and each bottle of Spanish perfume costs $45.00. Therefore, the objective function is: Minimize 50x + 45y\n\nConstraints:\n- The mixture must contain at least 150 units of flower scent, which can be formulated as: 20x + 30y >= 150.\n- The mixture must contain at least 60 units of fruit scent, which can be formulated as: 50x + 40y >= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 50x + 45y\nConstraints:\n20x + 30y >= 150\n50x + 40y >= 60", "canonical": {"objective": [50.0, 45.0], "constraints": [[-20.0, -30.0, -150.0], [-50.0, -40.0, -60.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of French perfume: FrenchPerfume\n- Number of bottles of Spanish perfume: SpanishPerfume\n\nConstraints:\n- The mixture must contain at least 150 units of flower scent:\n  20 * FrenchPerfume + 30 * SpanishPerfume >= 150\n- The mixture must contain at least 60 units of fruit scent:\n  50 * FrenchPerfume + 40 * SpanishPerfume >= 60\n\nObjective:\n- Minimize costs ($50.00 per bottle of French perfume and $45.00 per bottle of Spanish perfume):\n  50 * FrenchPerfume + 45 * SpanishPerfume\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFrenchPerfume = intvar(0, 999999999)  # Number of bottles of French perfume\nSpanishPerfume = intvar(0, 999999999)  # Number of bottles of Spanish perfume\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 150 units of flower scent:\nm += 20 * FrenchPerfume + 30 * SpanishPerfume >= 150\n# The mixture must contain at least 60 units of fruit scent:\nm += 50 * FrenchPerfume + 40 * SpanishPerfume >= 60\n\n# Objective\n# Minimize costs ($50.00 per bottle of French perfume and $45.00 per bottle of Spanish perfume):\nm.minimize(50 * FrenchPerfume + 45 * SpanishPerfume)\n", "entities": [{"start": 13, "end": 27, "word": "French perfume", "entity_group": "VAR", "score": 0.9999724550536768}, {"start": 32, "end": 47, "word": "Spanish perfume", "entity_group": "VAR", "score": 0.9999717886365508}, {"start": 108, "end": 116, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998876197672648}, {"start": 117, "end": 120, "word": "150", "entity_group": "LIMIT", "score": 0.9997020650601949}, {"start": 147, "end": 149, "word": "60", "entity_group": "LIMIT", "score": 0.9995781362210885}, {"start": 188, "end": 202, "word": "French perfume", "entity_group": "VAR", "score": 0.999979781816811}, {"start": 212, "end": 214, "word": "50", "entity_group": "PARAM", "score": 0.9996782762565403}, {"start": 240, "end": 242, "word": "20", "entity_group": "PARAM", "score": 0.9996436100580977}, {"start": 282, "end": 297, "word": "Spanish perfume", "entity_group": "VAR", "score": 0.9999797818168147}, {"start": 307, "end": 309, "word": "40", "entity_group": "PARAM", "score": 0.9996782677449301}, {"start": 335, "end": 337, "word": "30", "entity_group": "PARAM", "score": 0.9996892506343688}, {"start": 369, "end": 373, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9970040846555382}, {"start": 388, "end": 402, "word": "French perfume", "entity_group": "VAR", "score": 0.9999363404283406}, {"start": 408, "end": 413, "word": "50.00", "entity_group": "PARAM", "score": 0.9992074770837738}, {"start": 422, "end": 426, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.998523562552662}, {"start": 441, "end": 456, "word": "Spanish perfume", "entity_group": "VAR", "score": 0.9999094011570899}, {"start": 462, "end": 467, "word": "45.00", "entity_group": "PARAM", "score": 0.9996167247426335}, {"start": 508, "end": 516, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999714441480877}, {"start": 517, "end": 522, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988743947768206}]}
{"doc_id": "-1256233986", "document": "You are buying vehicles to transport foods and will keep them in your parking lot. A small vehicle costs $7000, takes 1 parking spot, and can carry 10 boxes of foods. A large vehicle costs $14000, takes 2 parking spots, and can carry 25 boxes of foods. You have a $200000 limit and have at most 30 parking spots. How many of each vehicle should be purchased to maximize the number of boxes of foods you can carry?", "order_mapping": {"small vehicle": 0, "large vehicle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of boxes of foods", "terms": {"large vehicle": "25", "small vehicle": "10"}}, "const_declarations": [{"type": "linear", "direction": "limit", "limit": "200000", "terms": {"small vehicle": "7000", "large vehicle": "14000"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "30", "terms": {"small vehicle": "1", "large vehicle": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small vehicles\n- y: Number of large vehicles\n\nObjective:\n- The goal is to maximize the number of boxes of foods that can be carried. A small vehicle can carry 10 boxes of foods, and a large vehicle can carry 25 boxes of foods. Therefore, the objective function is: Maximize 10x + 25y\n\nConstraints:\n- The total cost of the vehicles should not exceed the $200,000 limit, leading to the constraint: 7000x + 14000y <= 200000.\n- The total number of parking spots used by the vehicles should be at most 30, resulting in the constraint: x + 2y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 25y\nConstraints:\n7000x + 14000y <= 200000\nx + 2y <= 30", "canonical": {"objective": [-10.0, -25.0], "constraints": [[7000.0, 14000.0, 200000.0], [1.0, 2.0, 30.0]]}, "solution": {"x": 0, "y": 14}, "pseudo_model": "\nDecision Variables:\n- Number of small vehicles purchased: SmallVehicle\n- Number of large vehicles purchased: LargeVehicle\n\nConstraints:\n- Total cost for purchasing vehicles should not exceed $200000:\n  7000 * SmallVehicle + 14000 * LargeVehicle <= 200000\n- Total number of parking spots used should not exceed 30:\n  1 * SmallVehicle + 2 * LargeVehicle <= 30\n\nObjective:\n- Maximize the number of boxes of foods that can be carried:\n  10 * SmallVehicle + 25 * LargeVehicle\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallVehicle = intvar(0, 999999999)  # Number of small vehicles purchased\nLargeVehicle = intvar(0, 999999999)  # Number of large vehicles purchased\n\n# Constraints\nm = Model()\n\n# Total cost of purchasing vehicles should not exceed $200000:\n# (Small vehicle costs $7000, Large vehicle costs $14000)\nm += 7000 * SmallVehicle + 14000 * LargeVehicle <= 200000\n\n# Total number of parking spots used should not exceed 30:\n# (Small vehicle takes 1 spot, Large vehicle takes 2 spots)\nm += 1 * SmallVehicle + 2 * LargeVehicle <= 30\n\n# Objective\n# Maximize the number of boxes of foods that can be carried:\n# (Small vehicle can carry 10 boxes, Large vehicle can carry 25 boxes)\nm.maximize(10 * SmallVehicle + 25 * LargeVehicle)\n", "entities": [{"start": 86, "end": 99, "word": "small vehicle", "entity_group": "VAR", "score": 0.9998626321102771}, {"start": 108, "end": 112, "word": "7000", "entity_group": "PARAM", "score": 0.9997210532261023}, {"start": 121, "end": 122, "word": "1", "entity_group": "PARAM", "score": 0.9987222992194561}, {"start": 152, "end": 154, "word": "10", "entity_group": "PARAM", "score": 0.9982167659462221}, {"start": 155, "end": 169, "word": "boxes of foods", "entity_group": "OBJ_NAME", "score": 0.991475476723699}, {"start": 174, "end": 187, "word": "large vehicle", "entity_group": "VAR", "score": 0.9999098201883918}, {"start": 196, "end": 201, "word": "14000", "entity_group": "PARAM", "score": 0.9996692283654436}, {"start": 210, "end": 211, "word": "2", "entity_group": "PARAM", "score": 0.9987225833364817}, {"start": 242, "end": 244, "word": "25", "entity_group": "PARAM", "score": 0.9983498585251642}, {"start": 245, "end": 259, "word": "boxes of foods", "entity_group": "OBJ_NAME", "score": 0.9911457943198152}, {"start": 275, "end": 281, "word": "200000", "entity_group": "LIMIT", "score": 0.9974496714357178}, {"start": 282, "end": 287, "word": "limit", "entity_group": "CONST_DIR", "score": 0.9887052043824636}, {"start": 297, "end": 304, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988378714020236}, {"start": 305, "end": 307, "word": "30", "entity_group": "LIMIT", "score": 0.9991838495294738}, {"start": 372, "end": 380, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997001478947537}, {"start": 385, "end": 409, "word": "number of boxes of foods", "entity_group": "OBJ_NAME", "score": 0.9865640862275359}]}
{"doc_id": "-400300871", "document": "A man has $500000 to invest in four industries. He can invest in the pharmaceutical industry, renewable energy industry, entertainment industry, and construction industry. The return on investment for each of the industries is as follows: pharmaceutical, 5%; renewable energy, 3%; entertainment, 4%; and construction 4.5%. To be safe, he wants to make sure the amount invested in the construction industry does not exceed the amount invested in the pharmaceutical industry. Also the amount invested in the renewable energy industry cannot exceed the amount invested in the entertainment industry. Lastly, at most 20% of the investment can be in the construction industry. How much should he invested in each industry to maximize his returns?", "order_mapping": {"pharmaceutical industry": 0, "renewable energy industry": 1, "entertainment industry": 2, "construction industry": 3, "pharmaceutical": 0, "renewable energy": 1, "entertainment": 2, "construction": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "returns", "terms": {"pharmaceutical": "5%", "renewable energy": "3%", "entertainment": "4%", "construction": "4.5%"}}, "const_declarations": [{"type": "xy", "x_var": "construction industry", "direction": "does not exceed", "y_var": "pharmaceutical industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "construction industry", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "500000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "renewable energy industry", "direction": "cannot exceed", "y_var": "entertainment industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the pharmaceutical industry\n- y: Dollars invested in the renewable energy industry\n- z: Dollars invested in the entertainment industry\n- w: Dollars invested in the construction industry\n\nObjective:\n- The man wants to maximize his returns. The return on investment for each industry is as follows: pharmaceutical, 5%; renewable energy, 3%; entertainment, 4%; and construction, 4.5%. Therefore, the objective function is: Maximize 0.05x + 0.03y + 0.04z + 0.045w\n\nConstraints:\n- The total amount available for investment is $500,000, so the constraint is: x + y + z + w <= 500000.\n- The amount invested in the construction industry cannot exceed the amount invested in the pharmaceutical industry, leading to the constraint: w <= x.\n- At most 20% of the investment can be in the construction industry, leading to the constraint: w <= 0.20(x + y + z + w).\n- The amount invested in the renewable energy industry cannot exceed the amount invested in the entertainment industry, resulting in the constraint: y <= z.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.05x + 0.03y + 0.04z + 0.045w\nConstraints:\nx + y + z + w <= 500000\nw <= x\nw <= 0.20(x + y + z + w)\ny <= z", "canonical": {"objective": [-0.05, -0.03, -0.04, -0.045], "constraints": [[1.0, 1.0, 1.0, 1.0, 500000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [-0.2, -0.2, -0.2, 0.8, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 500000, "y": 0, "z": 0, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the pharmaceutical industry: Pharmaceutical\n- Amount invested in the renewable energy industry: RenewableEnergy\n- Amount invested in the entertainment industry: Entertainment\n- Amount invested in the construction industry: Construction\n\nConstraints:\n- Total investment should be exactly $500000:\n  Pharmaceutical + RenewableEnergy + Entertainment + Construction <= 500000\n- The amount invested in the construction industry does not exceed the amount invested in the pharmaceutical industry:\n  Construction <= Pharmaceutical\n- The amount invested in the renewable energy industry cannot exceed the amount invested in the entertainment industry:\n  RenewableEnergy <= Entertainment\n- At most 20% of the investment can be in the construction industry:\n  Construction <= 0.20 * (Pharmaceutical + RenewableEnergy + Entertainment + Construction)\n\nObjective:\n- Maximize returns (5% for pharmaceutical, 3% for renewable energy, 4% for entertainment, 4.5% for construction):\n  0.05 * Pharmaceutical + 0.03 * RenewableEnergy + 0.04 * Entertainment + 0.045 * Construction\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPharmaceutical = intvar(0, 999999999)  # Amount invested in the pharmaceutical industry\nRenewableEnergy = intvar(0, 999999999)  # Amount invested in the renewable energy industry\nEntertainment = intvar(0, 999999999)  # Amount invested in the entertainment industry\nConstruction = intvar(0, 999999999)  # Amount invested in the construction industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $500000:\nm += Pharmaceutical + RenewableEnergy + Entertainment + Construction <= 500000\n# The amount invested in the construction industry does not exceed the amount invested in the pharmaceutical industry:\nm += Construction <= Pharmaceutical\n# The amount invested in the renewable energy industry cannot exceed the amount invested in the entertainment industry:\nm += RenewableEnergy <= Entertainment\n# At most 20% of the investment can be in the construction industry:\nm += Construction <= 0.20 * (Pharmaceutical + RenewableEnergy + Entertainment + Construction)\n\n# Objective\n# Maximize returns (5% for pharmaceutical, 3% for renewable energy, 4% for entertainment, 4.5% for construction):\nm.maximize(0.05 * Pharmaceutical + 0.03 * RenewableEnergy + 0.04 * Entertainment + 0.045 * Construction)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.997184276877139}, {"start": 12, "end": 18, "word": "500000", "entity_group": "LIMIT", "score": 0.9988289508375953}, {"start": 71, "end": 94, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.9999598358826364}, {"start": 97, "end": 122, "word": "renewable energy industry", "entity_group": "VAR", "score": 0.999587982914196}, {"start": 125, "end": 147, "word": "entertainment industry", "entity_group": "VAR", "score": 0.9999784769495106}, {"start": 154, "end": 175, "word": "construction industry", "entity_group": "VAR", "score": 0.9999538935399966}, {"start": 182, "end": 188, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9987349299850321}, {"start": 246, "end": 260, "word": "pharmaceutical", "entity_group": "VAR", "score": 0.9993970308992329}, {"start": 263, "end": 266, "word": "5 %", "entity_group": "PARAM", "score": 0.9817582134361978}, {"start": 269, "end": 285, "word": "renewable energy", "entity_group": "VAR", "score": 0.9999689400642292}, {"start": 288, "end": 291, "word": "3 %", "entity_group": "PARAM", "score": 0.9922581525188376}, {"start": 294, "end": 307, "word": "entertainment", "entity_group": "VAR", "score": 0.9986068494423678}, {"start": 310, "end": 313, "word": "4 %", "entity_group": "PARAM", "score": 0.9981188932789319}, {"start": 320, "end": 332, "word": "construction", "entity_group": "VAR", "score": 0.999098504708329}, {"start": 333, "end": 338, "word": "4.5 %", "entity_group": "PARAM", "score": 0.9894142301923649}, {"start": 403, "end": 424, "word": "construction industry", "entity_group": "VAR", "score": 0.9999749019458893}, {"start": 425, "end": 440, "word": "does not exceed", "entity_group": "CONST_DIR", "score": 0.9902883546766462}, {"start": 468, "end": 491, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.9999606990163341}, {"start": 526, "end": 551, "word": "renewable energy industry", "entity_group": "VAR", "score": 0.9992737839004877}, {"start": 552, "end": 566, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9870796083135659}, {"start": 594, "end": 616, "word": "entertainment industry", "entity_group": "VAR", "score": 0.9999800216296597}, {"start": 628, "end": 635, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9979695954758158}, {"start": 636, "end": 640, "word": "20 %", "entity_group": "LIMIT", "score": 0.9401141337430556}, {"start": 673, "end": 694, "word": "construction industry", "entity_group": "VAR", "score": 0.9999826583841559}, {"start": 745, "end": 753, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9978205769342444}, {"start": 758, "end": 765, "word": "returns", "entity_group": "OBJ_NAME", "score": 0.9989087046432275}]}
{"doc_id": "-416996117", "document": "Gary eats only noodles and cakes for a diet. A serving of noodles contains 5 units of proteins and 12 units of minerals. A serving of cake contains 4 units of proteins and 8 units of minerals. He wants to receive at most 100 units of proteins and at most 30 units of minerals. If noodles cost $3 per serving and each cake cost $5, how many servings of each food should Gary eat to minimize his cost?", "order_mapping": {"noodles": 0, "cakes": 1, "cake": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"noodles": "3", "cake": "5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "100", "terms": {"noodles": "5", "cake": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "30", "terms": {"noodles": "12", "cake": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of servings of noodles\n- y: Number of servings of cakes\n\nObjective:\n- Gary wants to minimize his cost. Noodles cost $3 per serving and each cake costs $5. Therefore, the objective function is: Minimize 3x + 5y\n\nConstraints:\n- Gary wants to receive at most 100 units of proteins, leading to the constraint: 5x + 4y <= 100.\n- He also wants to receive at most 30 units of minerals, leading to the constraint: 12x + 8y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 5y\nConstraints:\n5x + 4y <= 100\n12x + 8y <= 30", "canonical": {"objective": [3.0, 5.0], "constraints": [[5.0, 4.0, 100.0], [12.0, 8.0, 30.0]]}, "solution": {"x": 0, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of servings of noodles: Noodles\n- Number of servings of cakes: Cakes\n\nConstraints:\n- Total protein intake should be at most 100 units:\n  5 * Noodles + 4 * Cakes <= 100\n- Total mineral intake should be at most 30 units:\n  12 * Noodles + 8 * Cakes <= 30\n\nObjective:\n- Minimize cost (3 dollars per serving of noodles, 5 dollars per serving of cake):\n  3 * Noodles + 5 * Cakes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNoodles = intvar(0, 999999999)  # Number of servings of noodles\nCakes = intvar(0, 999999999)  # Number of servings of cakes\n\n# Constraints\nm = Model()\n\n# Protein constraint: at most 100 units of proteins\nm += 5 * Noodles + 4 * Cakes <= 100\n# Mineral constraint: at most 30 units of minerals\nm += 12 * Noodles + 8 * Cakes <= 30\n\n# Objective\n# Minimize cost (3 dollars per serving of noodles, 5 dollars per serving of cake):\nm.minimize(3 * Noodles + 5 * Cakes)\n", "entities": [{"start": 15, "end": 22, "word": "noodles", "entity_group": "VAR", "score": 0.9997564105005801}, {"start": 27, "end": 32, "word": "cakes", "entity_group": "VAR", "score": 0.998852987180049}, {"start": 59, "end": 66, "word": "noodles", "entity_group": "VAR", "score": 0.9989991908555074}, {"start": 76, "end": 77, "word": "5", "entity_group": "PARAM", "score": 0.9996780087214016}, {"start": 100, "end": 102, "word": "12", "entity_group": "PARAM", "score": 0.9997137743197265}, {"start": 136, "end": 140, "word": "cake", "entity_group": "VAR", "score": 0.999264894364336}, {"start": 150, "end": 151, "word": "4", "entity_group": "PARAM", "score": 0.9996758384151072}, {"start": 174, "end": 175, "word": "8", "entity_group": "PARAM", "score": 0.9997101213591577}, {"start": 216, "end": 223, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992685720593422}, {"start": 224, "end": 227, "word": "100", "entity_group": "LIMIT", "score": 0.9996881443502516}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992698218027489}, {"start": 258, "end": 260, "word": "30", "entity_group": "LIMIT", "score": 0.9997634868584975}, {"start": 284, "end": 291, "word": "noodles", "entity_group": "VAR", "score": 0.9988166138818223}, {"start": 292, "end": 296, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9958987890673718}, {"start": 299, "end": 300, "word": "3", "entity_group": "PARAM", "score": 0.9996758796430606}, {"start": 322, "end": 326, "word": "cake", "entity_group": "VAR", "score": 0.9995404235251223}, {"start": 327, "end": 331, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9971341638749779}, {"start": 334, "end": 335, "word": "5", "entity_group": "PARAM", "score": 0.9997140410266893}, {"start": 388, "end": 396, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992744713804182}, {"start": 401, "end": 405, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986378634640096}]}
{"doc_id": "603259629", "document": "A store sells two salad bowls. The individual salad contains 5 units of lettuce, 2 units of tomatoes, and 2 units of sauce. The family-sized salad contains 18 units of lettuce, 6 units of tomatoes, and 5 units of sauce. The store has available 220 units of lettuce, 150 units of tomatoes, and 140 units of sauce. If the profit per individual salad is $4 and the profit per family-sized salad is $7, how many of each should they sell to maximize profit?", "order_mapping": {"individual salad": 0, "family-sized salad": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"family-sized salad": "7", "individual salad": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "220", "terms": {"individual salad": "5", "family-sized salad": "18"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "150", "terms": {"individual salad": "2", "family-sized salad": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "140", "terms": {"individual salad": "2", "family-sized salad": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of individual salads sold\n- y: Number of family-sized salads sold\n\nObjective:\n- The store aims to maximize its profit. The profit per individual salad is $4 and the profit per family-sized salad is $7. Therefore, the objective function is: Maximize 4x + 7y\n\nConstraints:\n- The store has 220 units of lettuce available, and the individual salad contains 5 units of lettuce while the family-sized salad contains 18 units of lettuce. This leads to the constraint: 5x + 18y <= 220.\n- The store has 150 units of tomatoes available, and the individual salad contains 2 units of tomatoes while the family-sized salad contains 6 units of tomatoes. This leads to the constraint: 2x + 6y <= 150.\n- The store has 140 units of sauce available, and the individual salad contains 2 units of sauce while the family-sized salad contains 5 units of sauce. This leads to the constraint: 2x + 5y <= 140.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 7y\nConstraints:\n5x + 18y <= 220\n2x + 6y <= 150\n2x + 5y <= 140", "canonical": {"objective": [-4.0, -7.0], "constraints": [[5.0, 18.0, 220.0], [2.0, 6.0, 150.0], [2.0, 5.0, 140.0]]}, "solution": {"x": 44, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of individual salads sold: IndividualSalad\n- Number of family-sized salads sold: FamilySizedSalad\n\nConstraints:\n- Lettuce constraint (220 units available):\n  5 * IndividualSalad + 18 * FamilySizedSalad <= 220\n- Tomatoes constraint (150 units available):\n  2 * IndividualSalad + 6 * FamilySizedSalad <= 150\n- Sauce constraint (140 units available):\n  2 * IndividualSalad + 5 * FamilySizedSalad <= 140\n\nObjective:\n- Maximize profit (4 dollars per individual salad, 7 dollars per family-sized salad):\n  4 * IndividualSalad + 7 * FamilySizedSalad\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIndividualSalad = intvar(0, 999999999)  # Number of individual salads sold\nFamilySizedSalad = intvar(0, 999999999)  # Number of family-sized salads sold\n\n# Constraints\nm = Model()\n\n# Lettuce constraint (220 units available):\nm += 5 * IndividualSalad + 18 * FamilySizedSalad <= 220\n# Tomatoes constraint (150 units available):\nm += 2 * IndividualSalad + 6 * FamilySizedSalad <= 150\n# Sauce constraint (140 units available):\nm += 2 * IndividualSalad + 5 * FamilySizedSalad <= 140\n\n# Objective\n# Maximize profit (4 dollars per individual salad, 7 dollars per family-sized salad):\nm.maximize(4 * IndividualSalad + 7 * FamilySizedSalad)\n", "entities": [{"start": 36, "end": 52, "word": "individual salad", "entity_group": "VAR", "score": 0.999937538168875}, {"start": 62, "end": 63, "word": "5", "entity_group": "PARAM", "score": 0.9996321596264911}, {"start": 83, "end": 84, "word": "2", "entity_group": "PARAM", "score": 0.9997346988356722}, {"start": 109, "end": 110, "word": "2", "entity_group": "PARAM", "score": 0.9995495573897832}, {"start": 132, "end": 152, "word": "family - sized salad", "entity_group": "VAR", "score": 0.998687267125984}, {"start": 162, "end": 164, "word": "18", "entity_group": "PARAM", "score": 0.9996522890220623}, {"start": 184, "end": 185, "word": "6", "entity_group": "PARAM", "score": 0.9997346750071451}, {"start": 210, "end": 211, "word": "5", "entity_group": "PARAM", "score": 0.9994635257512883}, {"start": 243, "end": 252, "word": "available", "entity_group": "CONST_DIR", "score": 0.998735346971908}, {"start": 253, "end": 256, "word": "220", "entity_group": "LIMIT", "score": 0.9993941884927515}, {"start": 276, "end": 279, "word": "150", "entity_group": "LIMIT", "score": 0.9997542638558252}, {"start": 304, "end": 307, "word": "140", "entity_group": "LIMIT", "score": 0.9993318734252462}, {"start": 332, "end": 338, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280476493585}, {"start": 343, "end": 359, "word": "individual salad", "entity_group": "VAR", "score": 0.9997467711062534}, {"start": 365, "end": 366, "word": "4", "entity_group": "PARAM", "score": 0.999584705745136}, {"start": 375, "end": 381, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999109725771981}, {"start": 386, "end": 406, "word": "family - sized salad", "entity_group": "VAR", "score": 0.997559242060771}, {"start": 412, "end": 413, "word": "7", "entity_group": "PARAM", "score": 0.999653192840254}, {"start": 453, "end": 461, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843680345001}, {"start": 462, "end": 468, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368872053741}]}
{"doc_id": "1468112927", "document": "A brunch restaurant makes eggs benedicts and hashbrowns. Each eggs benedict requires 10 grams of butter and 1 egg. Each hashbrown requires 5 grams of butter and 2 eggs. The restaurant has available 5000 grams of butter and 600 eggs. If the profit per eggs benedict is $4 and the profit per hashbrown is $2, how many of each should be made to maximize profit?", "order_mapping": {"eggs benedicts": 0, "hashbrowns.": 1, "eggs benedict": 0, "hashbrown": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"eggs benedict": "4", "hashbrown": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"eggs benedict": "10", "hashbrown": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"eggs benedict": "1", "hashbrown": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of eggs benedicts to be made\n- y: Number of hashbrowns to be made\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per eggs benedict is $4 and the profit per hashbrown is $2. Therefore, the objective function is: Maximize 4x + 2y\n\nConstraints:\n- The restaurant has 5000 grams of butter available. Each eggs benedict requires 10 grams of butter and each hashbrown requires 5 grams of butter. This leads to the constraint: 10x + 5y <= 5000.\n- The restaurant has 600 eggs available. Each eggs benedict requires 1 egg and each hashbrown requires 2 eggs. This results in the constraint: x + 2y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 2y\nConstraints:\n10x + 5y <= 5000\nx + 2y <= 600", "canonical": {"objective": [-4.0, -2.0], "constraints": [[10.0, 5.0, 5000.0], [1.0, 2.0, 600.0]]}, "solution": {"x": 500, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of eggs benedicts made: EggsBenedict\n- Number of hashbrowns made: Hashbrown\n\nConstraints:\n- Butter usage should not exceed 5000 grams (10 grams per eggs benedict, 5 grams per hashbrown):\n  10 * EggsBenedict + 5 * Hashbrown <= 5000\n- Egg usage should not exceed 600 eggs (1 egg per eggs benedict, 2 eggs per hashbrown):\n  1 * EggsBenedict + 2 * Hashbrown <= 600\n\nObjective:\n- Maximize profit (4 dollars per eggs benedict, 2 dollars per hashbrown):\n  4 * EggsBenedict + 2 * Hashbrown\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEggsBenedict = intvar(0, 999999999)  # Number of eggs benedicts made\nHashbrown = intvar(0, 999999999)  # Number of hashbrowns made\n\n# Constraints\nm = Model()\n\n# Butter constraint: 10 grams per eggs benedict and 5 grams per hashbrown, with 5000 grams available:\nm += 10 * EggsBenedict + 5 * Hashbrown <= 5000\n# Egg constraint: 1 egg per eggs benedict and 2 eggs per hashbrown, with 600 eggs available:\nm += 1 * EggsBenedict + 2 * Hashbrown <= 600\n\n# Objective\n# Maximize profit (4 dollars per eggs benedict, 2 dollars per hashbrown):\nm.maximize(4 * EggsBenedict + 2 * Hashbrown)\n", "entities": [{"start": 26, "end": 40, "word": "eggs benedicts", "entity_group": "VAR", "score": 0.9999616807874168}, {"start": 45, "end": 55, "word": "hashbrowns", "entity_group": "VAR", "score": 0.9996767464006133}, {"start": 63, "end": 76, "word": "eggs benedict", "entity_group": "VAR", "score": 0.9999809818190821}, {"start": 86, "end": 88, "word": "10", "entity_group": "PARAM", "score": 0.9996278919854087}, {"start": 109, "end": 110, "word": "1", "entity_group": "PARAM", "score": 0.9996522231459474}, {"start": 122, "end": 131, "word": "hashbrown", "entity_group": "VAR", "score": 0.999700222271261}, {"start": 141, "end": 142, "word": "5", "entity_group": "PARAM", "score": 0.9995793356263947}, {"start": 163, "end": 164, "word": "2", "entity_group": "PARAM", "score": 0.9997202807386161}, {"start": 191, "end": 200, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988639295111363}, {"start": 201, "end": 205, "word": "5000", "entity_group": "LIMIT", "score": 0.9994258763038371}, {"start": 226, "end": 229, "word": "600", "entity_group": "LIMIT", "score": 0.9997132438148173}, {"start": 244, "end": 250, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999017062077005}, {"start": 255, "end": 268, "word": "eggs benedict", "entity_group": "VAR", "score": 0.999943027965763}, {"start": 274, "end": 275, "word": "4", "entity_group": "PARAM", "score": 0.9996030180857585}, {"start": 284, "end": 290, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999053303172614}, {"start": 295, "end": 304, "word": "hashbrown", "entity_group": "VAR", "score": 0.9994201489571329}, {"start": 310, "end": 311, "word": "2", "entity_group": "PARAM", "score": 0.9994707268349006}, {"start": 349, "end": 357, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 358, "end": 364, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "1944978859", "document": "A clothing store can spend at most $50000 on coats and shirts. A coat costs the store $55 and is sold for a profit of $12. A shirt costs the store $25 and is sold for a profit of $8. The store owner estimates that at least 60 but at most 100 coats are sold each month. The owner also estimates that the number of shirts sold is at most four times the number of coats sold. How many of each item, coats and shirts, should be sold in order to maximize profit?", "order_mapping": {"coats": 0, "shirts": 1, "coat": 0, "shirt": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"shirt": "8", "coat": "12"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "50000", "terms": {"coat": "55", "shirt": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "coats", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "coats", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "shirts", "direction": "at most", "param": "four times", "y_var": "coats", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of coats sold\n- y: Number of shirts sold\n\nObjective:\n- The store aims to maximize its profit. A coat is sold for a profit of $12 and a shirt is sold for a profit of $8. Therefore, the objective function is: Maximize 12x + 8y\n\nConstraints:\n- The store can spend at most $50000 on coats and shirts, leading to the constraint: 55x + 25y <= 50000.\n- The store estimates that at least 60 but at most 100 coats are sold each month, resulting in the constraints: x >= 60 and x <= 100.\n- The number of shirts sold is at most four times the number of coats sold, leading to the constraint: y <= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 8y\nConstraints:\n55x + 25y <= 50000\nx >= 60\nx <= 100\ny <= 4x", "canonical": {"objective": [-12.0, -8.0], "constraints": [[55.0, 25.0, 50000.0], [-1.0, 0.0, -60.0], [1.0, 0.0, 100.0], [-4.0, 1.0, 0.0]]}, "solution": {"x": 100, "y": 400}, "pseudo_model": "\nDecision Variables:\n- Number of coats sold: Coats\n- Number of shirts sold: Shirts\n\nConstraints:\n- The store can spend at most $50000 on coats and shirts (Coat costs $55, Shirt costs $25):\n  55 * Coats + 25 * Shirts <= 50000\n- At least 60 but at most 100 coats are sold each month:\n  60 <= Coats <= 100\n- The number of shirts sold is at most four times the number of coats sold:\n  Shirts <= 4 * Coats\n\nObjective:\n- Maximize profit ($12 profit per coat, $8 profit per shirt):\n  12 * Coats + 8 * Shirts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoats = intvar(0, 999999999)  # Number of coats sold\nShirts = intvar(0, 999999999)  # Number of shirts sold\n\n# Constraints\nm = Model()\n\n# The store can spend at most $50000 on coats and shirts:\nm += 55 * Coats + 25 * Shirts <= 50000\n# At least 60 but at most 100 coats are sold each month:\nm += Coats >= 60\nm += Coats <= 100\n# The number of shirts sold is at most four times the number of coats sold:\nm += Shirts <= 4 * Coats\n\n# Objective\n# Maximize profit ($12 profit per coat, $8 profit per shirt):\nm.maximize(12 * Coats + 8 * Shirts)\n", "entities": [{"start": 27, "end": 34, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9965696103387222}, {"start": 37, "end": 42, "word": "50000", "entity_group": "LIMIT", "score": 0.9984204661569644}, {"start": 46, "end": 51, "word": "coats", "entity_group": "VAR", "score": 0.9996998924808993}, {"start": 56, "end": 62, "word": "shirts", "entity_group": "VAR", "score": 0.9998324126745276}, {"start": 67, "end": 71, "word": "coat", "entity_group": "VAR", "score": 0.9997854403708201}, {"start": 90, "end": 92, "word": "55", "entity_group": "PARAM", "score": 0.999637288307989}, {"start": 111, "end": 117, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997053706831859}, {"start": 123, "end": 125, "word": "12", "entity_group": "PARAM", "score": 0.9997388551865825}, {"start": 130, "end": 135, "word": "shirt", "entity_group": "VAR", "score": 0.9998069789178391}, {"start": 154, "end": 156, "word": "25", "entity_group": "PARAM", "score": 0.9996372882819253}, {"start": 175, "end": 181, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995388697697148}, {"start": 187, "end": 188, "word": "8", "entity_group": "PARAM", "score": 0.9996811696241468}, {"start": 222, "end": 230, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989370653676891}, {"start": 231, "end": 233, "word": "60", "entity_group": "LIMIT", "score": 0.9992790211485305}, {"start": 238, "end": 245, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989441134167086}, {"start": 246, "end": 249, "word": "100", "entity_group": "LIMIT", "score": 0.9996600026833522}, {"start": 250, "end": 255, "word": "coats", "entity_group": "VAR", "score": 0.9991883104391451}, {"start": 322, "end": 328, "word": "shirts", "entity_group": "VAR", "score": 0.9994816703395254}, {"start": 337, "end": 344, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976593546806316}, {"start": 345, "end": 355, "word": "four times", "entity_group": "PARAM", "score": 0.8189645006876713}, {"start": 370, "end": 375, "word": "coats", "entity_group": "VAR", "score": 0.9993214914615112}, {"start": 407, "end": 412, "word": "coats", "entity_group": "VAR", "score": 0.9996604827933763}, {"start": 417, "end": 423, "word": "shirts", "entity_group": "VAR", "score": 0.99968742874463}, {"start": 453, "end": 461, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.996185251892095}, {"start": 462, "end": 468, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912550595}]}
{"doc_id": "1442198615", "document": "A teddy bear shop makes two sizes of teddy bears - small and large. Both require time for filling and stitching. A small teddy bear requires 5 minutes of filling and 25 minutes of stitching. A large teddy bear requires 10 minutes of filling and 35 minutes of stitching. The shop has 700 minutes available per day for filling and 900 minutes available per day for stitching. The profit per small teddy bear is $50 and the profit per large teddy bear is $8. How many of each teddy bear should the shop make to maximize their profits?", "order_mapping": {"small": 0, "large": 1, "small teddy bear": 0, "large teddy bear": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"small teddy bear": "50", "large teddy bear": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "700", "terms": {"small teddy bear": "5", "large teddy bear": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "900", "terms": {"large teddy bear": "35", "small teddy bear": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small teddy bears\n- y: Number of large teddy bears\n\nObjective:\n- The shop aims to maximize its profits. The profit per small teddy bear is $50 and the profit per large teddy bear is $80. Therefore, the objective function is: Maximize 50x + 80y\n\nConstraints:\n- The shop has 700 minutes available per day for filling, and each small teddy bear requires 5 minutes of filling and each large teddy bear requires 10 minutes of filling. This leads to the constraint: 5x + 10y <= 700.\n- The shop has 900 minutes available per day for stitching, and each small teddy bear requires 25 minutes of stitching and each large teddy bear requires 35 minutes of stitching. This results in the constraint: 25x + 35y <= 900.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 80y\nConstraints:\n5x + 10y <= 700\n25x + 35y <= 900", "canonical": {"objective": [-50.0, -80.0], "constraints": [[5.0, 10.0, 700.0], [25.0, 35.0, 900.0]]}, "solution": {"x": 1, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of small teddy bears made per day: SmallTeddy\n- Number of large teddy bears made per day: LargeTeddy\n\nConstraints:\n- Total minutes for filling should not exceed 700 per day (5 minutes for a small teddy, 10 minutes for a large teddy):\n  5 * SmallTeddy + 10 * LargeTeddy <= 700\n- Total minutes for stitching should not exceed 900 per day (25 minutes for a small teddy, 35 minutes for a large teddy):\n  25 * SmallTeddy + 35 * LargeTeddy <= 900\n\nObjective:\n- Maximize profits (50 dollars per small teddy bear, 8 dollars per large teddy bear):\n  50 * SmallTeddy + 8 * LargeTeddy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallTeddy = intvar(0, 999999999)  # Number of small teddy bears made per day\nLargeTeddy = intvar(0, 999999999)  # Number of large teddy bears made per day\n\n# Constraints\nm = Model()\n\n# Total minutes for filling should not exceed 700 per day:\nm += 5 * SmallTeddy + 10 * LargeTeddy <= 700\n# Total minutes for stitching should not exceed 900 per day:\nm += 25 * SmallTeddy + 35 * LargeTeddy <= 900\n\n# Objective\n# Maximize profits (50 dollars per small teddy bear, 8 dollars per large teddy bear):\nm.maximize(50 * SmallTeddy + 8 * LargeTeddy)\n", "entities": [{"start": 51, "end": 56, "word": "small", "entity_group": "VAR", "score": 0.9993246209558403}, {"start": 61, "end": 66, "word": "large", "entity_group": "VAR", "score": 0.9996827530360097}, {"start": 117, "end": 133, "word": "small teddy bear", "entity_group": "VAR", "score": 0.998025604994118}, {"start": 143, "end": 144, "word": "5", "entity_group": "PARAM", "score": 0.9996566783282067}, {"start": 168, "end": 170, "word": "25", "entity_group": "PARAM", "score": 0.9997127415210254}, {"start": 196, "end": 212, "word": "large teddy bear", "entity_group": "VAR", "score": 0.9981809802301361}, {"start": 222, "end": 224, "word": "10", "entity_group": "PARAM", "score": 0.9996566783298639}, {"start": 248, "end": 250, "word": "35", "entity_group": "PARAM", "score": 0.9996825259699573}, {"start": 287, "end": 290, "word": "700", "entity_group": "LIMIT", "score": 0.9996912890876409}, {"start": 299, "end": 308, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996144005654966}, {"start": 333, "end": 336, "word": "900", "entity_group": "LIMIT", "score": 0.9996356743835019}, {"start": 345, "end": 354, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992675893464542}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9986447034664008}, {"start": 394, "end": 410, "word": "small teddy bear", "entity_group": "VAR", "score": 0.995478022922513}, {"start": 416, "end": 418, "word": "50", "entity_group": "PARAM", "score": 0.9996693307179298}, {"start": 427, "end": 433, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999273573562667}, {"start": 438, "end": 454, "word": "large teddy bear", "entity_group": "VAR", "score": 0.9930280349721593}, {"start": 460, "end": 461, "word": "8", "entity_group": "PARAM", "score": 0.9997242463502228}, {"start": 516, "end": 524, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996017642786852}, {"start": 531, "end": 538, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9992920564866397}]}
{"doc_id": "1259789310", "document": "Andy likes to mix his two post-workout drinks: chocolate milk and vegetable juice. Chocolate milk costs $3.5 per bottle, contains 6 units of potassium, 4 units of magnesium, and 5 units of calcium. Vegetable juice costs $6 per bottle and contains 9 units of potassium, 5 units of magnesium, and 7 units of calcium. David likes to make sure he gets at least 20 units of potassium, 8 units of magnesium, and 12 units of calcium after each workout. How many bottles of each drink should he buy and mix in order to ensure a minimum cost? What is the minimum cost?", "order_mapping": {"chocolate milk": 0, "vegetable juice": 1, "Chocolate milk": 0, "Vegetable juice": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Chocolate milk": "3.5", "Vegetable juice": "6"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"Chocolate milk": "6", "Vegetable juice": "9"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "8", "terms": {"Chocolate milk": "4", "Vegetable juice": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "12", "terms": {"Chocolate milk": "5", "Vegetable juice": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of chocolate milk\n- y: Number of bottles of vegetable juice\n\nObjective:\n- Andy wants to minimize the cost of the drinks. Chocolate milk costs $3.5 per bottle and vegetable juice costs $6 per bottle. Therefore, the objective function is: Minimize 3.5x + 6y\n\nConstraints:\n- Andy needs to ensure that he gets at least 20 units of potassium, 8 units of magnesium, and 12 units of calcium after each workout. This leads to the following constraints:\n    - 6x + 9y >= 20 (potassium constraint)\n    - 4x + 5y >= 8 (magnesium constraint)\n    - 5x + 7y >= 12 (calcium constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3.5x + 6y\nConstraints:\n6x + 9y >= 20\n4x + 5y >= 8\n5x + 7y >= 12", "canonical": {"objective": [3.5, 6.0], "constraints": [[-6.0, -9.0, -20.0], [-4.0, -5.0, -8.0], [-5.0, -7.0, -12.0]]}, "solution": {"x": 2, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of chocolate milk bottles: ChocolateMilk\n- Number of vegetable juice bottles: VegetableJuice\n\nConstraints:\n- Andy needs at least 20 units of potassium:\n  6 * ChocolateMilk + 9 * VegetableJuice >= 20\n- Andy needs at least 8 units of magnesium:\n  4 * ChocolateMilk + 5 * VegetableJuice >= 8\n- Andy needs at least 12 units of calcium:\n  5 * ChocolateMilk + 7 * VegetableJuice >= 12\n\nObjective:\n- Minimize cost (Chocolate milk costs $3.5 per bottle, Vegetable juice costs $6 per bottle):\n  3.5 * ChocolateMilk + 6 * VegetableJuice\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateMilk = intvar(0, 999999999)  # Number of chocolate milk bottles\nVegetableJuice = intvar(0, 999999999)  # Number of vegetable juice bottles\n\n# Constraints\nm = Model()\n\n# Andy needs at least 20 units of potassium:\nm += 6 * ChocolateMilk + 9 * VegetableJuice >= 20\n# Andy needs at least 8 units of magnesium:\nm += 4 * ChocolateMilk + 5 * VegetableJuice >= 8\n# Andy needs at least 12 units of calcium:\nm += 5 * ChocolateMilk + 7 * VegetableJuice >= 12\n\n# Objective\n# Minimize cost (Chocolate milk costs $3.5 per bottle, Vegetable juice costs $6 per bottle):\nm.minimize(3.5 * ChocolateMilk + 6 * VegetableJuice)\n", "entities": [{"start": 50, "end": 64, "word": "chocolate milk", "entity_group": "VAR", "score": 0.9999667805299655}, {"start": 69, "end": 84, "word": "vegetable juice", "entity_group": "VAR", "score": 0.9999785038792918}, {"start": 87, "end": 101, "word": "Chocolate milk", "entity_group": "VAR", "score": 0.9999756972266981}, {"start": 102, "end": 107, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998609068675166}, {"start": 110, "end": 113, "word": "3.5", "entity_group": "PARAM", "score": 0.9997069405248694}, {"start": 136, "end": 137, "word": "6", "entity_group": "PARAM", "score": 0.9996028278703197}, {"start": 159, "end": 160, "word": "4", "entity_group": "PARAM", "score": 0.9997345454353691}, {"start": 186, "end": 187, "word": "5", "entity_group": "PARAM", "score": 0.9995886050205991}, {"start": 207, "end": 222, "word": "Vegetable juice", "entity_group": "VAR", "score": 0.999980310684385}, {"start": 223, "end": 228, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994368449652985}, {"start": 231, "end": 232, "word": "6", "entity_group": "PARAM", "score": 0.9997225345626571}, {"start": 257, "end": 258, "word": "9", "entity_group": "PARAM", "score": 0.9997043506043731}, {"start": 280, "end": 281, "word": "5", "entity_group": "PARAM", "score": 0.9997344984480712}, {"start": 307, "end": 308, "word": "7", "entity_group": "PARAM", "score": 0.9994576374720501}, {"start": 361, "end": 369, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991598996202027}, {"start": 370, "end": 372, "word": "20", "entity_group": "LIMIT", "score": 0.9997520377691081}, {"start": 394, "end": 395, "word": "8", "entity_group": "LIMIT", "score": 0.9997462403293319}, {"start": 421, "end": 423, "word": "12", "entity_group": "LIMIT", "score": 0.9994932910324806}, {"start": 536, "end": 543, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9893011550325332}, {"start": 544, "end": 548, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9984865039490366}]}
{"doc_id": "-1527320177", "document": "A construction company makes bulldozers and forklifts. Each bulldozer takes 3 hours on the assembly line and 2 hours of QC time. Each forklift takes 2 hours on the assembly line and 1.5 hours of QC time. There are 600 hours of assembly line time available and 400 hours of QC time available. If the profit per bulldozer is $7000 and the profit per forklift is $6000, how many of each should the construction company make to maximize profit?", "order_mapping": {"bulldozers": 0, "forklifts": 1, "bulldozer": 0, "forklift": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"forklift": "6000", "bulldozer": "7000"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "600", "terms": {"bulldozer": "3", "forklift": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"forklift": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bulldozers\n- y: Number of forklifts\n\nObjective:\n- The construction company aims to maximize its profit. The profit per bulldozer is $7000 and the profit per forklift is $6000. Therefore, the objective function is: Maximize 7000x + 6000y\n\nConstraints:\n- The assembly line time available is 600 hours, so the constraint is: 3x + 2y <= 600.\n- The QC time available is 400 hours, leading to the constraint: 2x + 1.5y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7000x + 6000y\nConstraints:\n3x + 2y <= 600\n2x + 1.5y <= 400", "canonical": {"objective": [-7000.0, -6000.0], "constraints": [[3.0, 2.0, 600.0], [2.0, 1.5, 400.0]]}, "solution": {"x": 2, "y": 264}, "pseudo_model": "\nDecision Variables:\n- Number of bulldozers made: Bulldozers\n- Number of forklifts made: Forklifts\n\nConstraints:\n- Assembly line time constraint (600 hours available):\n  3 * Bulldozers + 2 * Forklifts <= 600\n- QC time constraint (400 hours available, assuming 2 hours of QC time for bulldozers as per standard practice):\n  2 * Bulldozers + 1.5 * Forklifts <= 400\n\nObjective:\n- Maximize profit (7000 dollars per bulldozer, 6000 dollars per forklift):\n  7000 * Bulldozers + 6000 * Forklifts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBulldozers = intvar(0, 999999999)  # Number of bulldozers made\nForklifts = intvar(0, 999999999)  # Number of forklifts made\n\n# Constraints\nm = Model()\n\n# Assembly line time constraint (600 hours available):\nm += 3 * Bulldozers + 2 * Forklifts <= 600\n# QC time constraint (400 hours available, note: missing bulldozer QC time in the problem statement, assuming it as per standard practice):\nm += 2 * Bulldozers + 1.5 * Forklifts <= 400\n\n# Objective\n# Maximize profit (7000 dollars per bulldozer, 6000 dollars per forklift):\nm.maximize(7000 * Bulldozers + 6000 * Forklifts)\n", "entities": [{"start": 29, "end": 39, "word": "bulldozers", "entity_group": "VAR", "score": 0.9996251628957953}, {"start": 44, "end": 53, "word": "forklifts", "entity_group": "VAR", "score": 0.9997528194059832}, {"start": 61, "end": 70, "word": "bulldozer", "entity_group": "VAR", "score": 0.9997506414348455}, {"start": 77, "end": 78, "word": "3", "entity_group": "PARAM", "score": 0.9996171642273007}, {"start": 110, "end": 111, "word": "2", "entity_group": "PARAM", "score": 0.9995679199109977}, {"start": 136, "end": 144, "word": "forklift", "entity_group": "VAR", "score": 0.9997544163180695}, {"start": 151, "end": 152, "word": "2", "entity_group": "PARAM", "score": 0.9993741726850578}, {"start": 184, "end": 187, "word": "1.5", "entity_group": "PARAM", "score": 0.9996431033098074}, {"start": 217, "end": 220, "word": "600", "entity_group": "LIMIT", "score": 0.9997113631925598}, {"start": 249, "end": 258, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982648421811104}, {"start": 263, "end": 266, "word": "400", "entity_group": "LIMIT", "score": 0.9996663711171341}, {"start": 284, "end": 293, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992626191428778}, {"start": 303, "end": 309, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999184779613151}, {"start": 314, "end": 323, "word": "bulldozer", "entity_group": "VAR", "score": 0.9995073092706148}, {"start": 329, "end": 333, "word": "7000", "entity_group": "PARAM", "score": 0.9991341423377285}, {"start": 342, "end": 348, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999868427508362}, {"start": 353, "end": 361, "word": "forklift", "entity_group": "VAR", "score": 0.9994077364598528}, {"start": 367, "end": 371, "word": "6000", "entity_group": "PARAM", "score": 0.9994643097845968}, {"start": 431, "end": 439, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993350363977429}, {"start": 440, "end": 446, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997873425507654}]}
{"doc_id": "-1727076879", "document": "A flight has 150 tickets. A profit of $150 is made on each first-class ticket and a profit of $350 is made on each economy-class ticket. The flight reserves at least 20 tickets to be first-class but because the journey is short, at least 3 times as many people prefer to save money and travel by economy-class than first-class. How many of each ticket type should be sold to passengers to maximize profit?", "order_mapping": {"first-class": 0, "economy-class": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"first-class": "150", "economy-class": "350"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "first-class", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "economy-class", "direction": "at least", "param": "3 times", "y_var": "first-class", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of first-class tickets sold\n- y: Number of economy-class tickets sold\n\nObjective:\n- The airline aims to maximize its profit. A profit of $150 is made on each first-class ticket and a profit of $350 is made on each economy-class ticket. Therefore, the objective function is: Maximize 150x + 350y\n\nConstraints:\n- The flight has a total of 150 tickets available, so the constraint is: x + y <= 150.\n- At least 20 tickets are reserved to be first-class, leading to the constraint: x >= 20.\n- Due to the short journey, at least 3 times as many people prefer to save money and travel by economy-class than first-class, resulting in the constraint: y >= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 350y\nConstraints:\nx + y <= 150\nx >= 20\ny >= 3x", "canonical": {"objective": [-150.0, -350.0], "constraints": [[1.0, 1.0, 150.0], [-1.0, 0.0, -20.0], [3.0, -1.0, 0.0]]}, "solution": {"x": 20, "y": 130}, "pseudo_model": "\nDecision Variables:\n- Number of first-class tickets sold: FirstClass\n- Number of economy-class tickets sold: EconomyClass\n\nConstraints:\n- Total number of tickets sold should not exceed 150:\n  FirstClass + EconomyClass <= 150\n- At least 20 tickets must be first-class:\n  FirstClass >= 20\n- At least 3 times as many economy-class tickets as first-class tickets:\n  EconomyClass >= 3 * FirstClass\n\nObjective:\n- Maximize profit ($150 profit per first-class ticket, $350 profit per economy-class ticket):\n  150 * FirstClass + 350 * EconomyClass\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstClass = intvar(0, 999999999)  # Number of first-class tickets sold\nEconomyClass = intvar(0, 999999999)  # Number of economy-class tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets is limited to 150:\nm += FirstClass + EconomyClass <= 150\n# At least 20 tickets must be first-class:\nm += FirstClass >= 20\n# At least 3 times as many people prefer economy-class over first-class:\nm += EconomyClass >= 3 * FirstClass\n\n# Objective\n# Maximize profit ($150 profit per first-class ticket, $350 profit per economy-class ticket):\nm.maximize(150 * FirstClass + 350 * EconomyClass)\n", "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9912075581112548}, {"start": 13, "end": 16, "word": "150", "entity_group": "LIMIT", "score": 0.9985140545631088}, {"start": 29, "end": 35, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999014838650737}, {"start": 41, "end": 44, "word": "150", "entity_group": "PARAM", "score": 0.9994595726983645}, {"start": 61, "end": 74, "word": "first - class", "entity_group": "VAR", "score": 0.9997998166914884}, {"start": 88, "end": 94, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999535487621614}, {"start": 100, "end": 103, "word": "350", "entity_group": "PARAM", "score": 0.9995981336789356}, {"start": 120, "end": 135, "word": "economy - class", "entity_group": "VAR", "score": 0.9994049669983518}, {"start": 165, "end": 173, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981924248253283}, {"start": 174, "end": 176, "word": "20", "entity_group": "LIMIT", "score": 0.9997046523889551}, {"start": 191, "end": 204, "word": "first - class", "entity_group": "VAR", "score": 0.999186857044005}, {"start": 240, "end": 248, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998165790008434}, {"start": 249, "end": 256, "word": "3 times", "entity_group": "PARAM", "score": 0.8567629752112766}, {"start": 307, "end": 322, "word": "economy - class", "entity_group": "VAR", "score": 0.9990862746198049}, {"start": 328, "end": 341, "word": "first - class", "entity_group": "VAR", "score": 0.9985750367333995}, {"start": 405, "end": 413, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994540845808056}, {"start": 414, "end": 420, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999736163381505}]}
{"doc_id": "1180514101", "document": "Bob is a potato farmer and he has to transport his potatoes using trucks and vans. Each truck can take 150 potatoes and each van can take 80 potatoes. The cost of running each truck is $20 per trip and the cost of running each van is $12 per trip. Bob wants to spend at most $250 on transporting his potatoes. Due to traffic laws, the number of trucks must be less than the number of vans. Formulate an LP to maximize the number of potatoes that can be transported.", "order_mapping": {"trucks": 0, "vans": 1, "truck": 0, "van": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of potatoes", "terms": {"truck": "150", "van": "80"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "250", "terms": {"truck": "20", "van": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "trucks", "direction": "less than", "y_var": "vans", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of trucks\n- y: Number of vans\n\nObjective:\n- Bob wants to maximize the number of potatoes that can be transported. Each truck can take 150 potatoes and each van can take 80 potatoes. Therefore, the objective function is: Maximize 150x + 80y\n\nConstraints:\n- Bob wants to spend at most $250 on transporting his potatoes. The cost of running each truck is $20 per trip and the cost of running each van is $12 per trip, leading to the constraint: 20x + 12y <= 250.\n- Due to traffic laws, the number of trucks must be less than the number of vans, resulting in the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 80y\nConstraints:\n20x + 12y <= 250\nx <= y", "canonical": {"objective": [-150.0, -80.0], "constraints": [[20.0, 12.0, 250.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 7, "y": 9}, "pseudo_model": "\nDecision Variables:\n- Number of trucks used: Trucks\n- Number of vans used: Vans\n\nConstraints:\n- Total cost of running trucks and vans should not exceed $250 (Cost: $20 per truck, $12 per van):\n  20 * Trucks + 12 * Vans <= 250\n- The number of trucks must be less than the number of vans:\n  Trucks < Vans\n\nObjective:\n- Maximize the number of potatoes transported (150 potatoes per truck, 80 potatoes per van):\n  150 * Trucks + 80 * Vans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrucks = intvar(0, 999999999)  # Number of trucks\nVans = intvar(0, 999999999)  # Number of vans\n\n# Constraints\nm = Model()\n\n# The cost of running trucks and vans should be at most $250:\nm += 20 * Trucks + 12 * Vans <= 250\n# The number of trucks must be less than the number of vans:\nm += Trucks < Vans\n\n# Objective\n# Maximize the number of potatoes that can be transported (150 potatoes per truck, 80 potatoes per van):\nm.maximize(150 * Trucks + 80 * Vans)\n", "entities": [{"start": 66, "end": 72, "word": "trucks", "entity_group": "VAR", "score": 0.9995560359158424}, {"start": 77, "end": 81, "word": "vans", "entity_group": "VAR", "score": 0.9998374154215401}, {"start": 89, "end": 94, "word": "truck", "entity_group": "VAR", "score": 0.9995296896397057}, {"start": 104, "end": 107, "word": "150", "entity_group": "PARAM", "score": 0.9995111001711554}, {"start": 108, "end": 116, "word": "potatoes", "entity_group": "OBJ_NAME", "score": 0.9969508641881648}, {"start": 126, "end": 129, "word": "van", "entity_group": "VAR", "score": 0.9992031739767971}, {"start": 139, "end": 141, "word": "80", "entity_group": "PARAM", "score": 0.999648124575656}, {"start": 142, "end": 150, "word": "potatoes", "entity_group": "OBJ_NAME", "score": 0.9971346716373339}, {"start": 178, "end": 183, "word": "truck", "entity_group": "VAR", "score": 0.9994594596932581}, {"start": 189, "end": 191, "word": "20", "entity_group": "PARAM", "score": 0.9995704707414319}, {"start": 230, "end": 233, "word": "van", "entity_group": "VAR", "score": 0.9992616276749106}, {"start": 239, "end": 241, "word": "12", "entity_group": "PARAM", "score": 0.9995328255667639}, {"start": 272, "end": 279, "word": "at most", "entity_group": "CONST_DIR", "score": 0.996576001609464}, {"start": 282, "end": 285, "word": "250", "entity_group": "LIMIT", "score": 0.9988147655059011}, {"start": 353, "end": 359, "word": "trucks", "entity_group": "VAR", "score": 0.9983152784670127}, {"start": 368, "end": 377, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9932100127691993}, {"start": 392, "end": 396, "word": "vans", "entity_group": "VAR", "score": 0.9997926127463544}, {"start": 418, "end": 426, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995677183110648}, {"start": 431, "end": 449, "word": "number of potatoes", "entity_group": "OBJ_NAME", "score": 0.98743726532977}]}
{"doc_id": "-1376782236", "document": "An investment bank has $800000 available to invest in a 24-month commitment. It can either invest in the pharmaceutical industry which yields a 5.5% return or in the fast food industry which yields a 12% return. The bank requires that a minimum of 55% of the investment must be placed in the pharmaceutical industry. Due to recent issues in fast food, the bank has decided that at most 40% of its investment be placed in the fast food industry. How much should the bank invest in each area in order to maximize its return on investments?", "order_mapping": {"pharmaceutical industry": 0, "fast food industry": 1, "fast food": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"fast food industry": "12%", "pharmaceutical industry": "5.5%"}}, "const_declarations": [{"type": "ratio", "direction": "minimum", "limit": "55%", "var": "pharmaceutical industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "fast food industry", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "available", "limit": "800000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the pharmaceutical industry\n- y: Dollars invested in the fast food industry\n\nObjective:\n- The investment bank aims to maximize its return on investments. The pharmaceutical industry yields a 5.5% return and the fast food industry yields a 12% return. Therefore, the objective function is: Maximize 0.055x + 0.12y\n\nConstraints:\n- The total amount available for investment is $800,000, so the constraint is: x + y <= 800000.\n- A minimum of 55% of the investment must be placed in the pharmaceutical industry, leading to the constraint: x >= 0.55(x + y).\n- At most 40% of the investment can be placed in the fast food industry, leading to the constraint: y <= 0.40(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.055x + 0.12y\nConstraints:\nx + y <= 800000\nx >= 0.55(x + y)\ny <= 0.40(x + y)", "canonical": {"objective": [-0.055, -0.12], "constraints": [[1.0, 1.0, 800000.0], [-0.44999999999999996, 0.55, 0.0], [-0.4, 0.6, 0.0]]}, "solution": {"x": 480000, "y": 320000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the pharmaceutical industry: Pharmaceutical\n- Amount invested in the fast food industry: FastFood\n\nConstraints:\n- Total investment equals $800000:\n  Pharmaceutical + FastFood == 800000\n- At least 55% of the investment must be in the pharmaceutical industry:\n  Pharmaceutical >= 0.55 * 800000\n- At most 40% of the investment can be in the fast food industry:\n  FastFood <= 0.40 * 800000\n\nObjective:\n- Maximize return on investments (5.5% from pharmaceutical, 12% from fast food):\n  0.055 * Pharmaceutical + 0.12 * FastFood\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPharmaceutical = intvar(0, 999999999)  # Investment in the pharmaceutical industry\nFastFood = intvar(0, 999999999)  # Investment in the fast food industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $800000:\nm += Pharmaceutical + FastFood <= 800000\n# At least 55% of the investment must be in the pharmaceutical industry:\nm += Pharmaceutical >= 0.55 * (Pharmaceutical + FastFood)\n# At most 40% of the investment can be in the fast food industry:\nm += FastFood <= 0.40 * (Pharmaceutical + FastFood)\n\n# Objective\n# Maximize return on investments (5.5% from pharmaceutical, 12% from fast food):\nm.maximize(0.055 * Pharmaceutical + 0.12 * FastFood)\n", "entities": [{"start": 25, "end": 31, "word": "800000", "entity_group": "LIMIT", "score": 0.9990439786822537}, {"start": 32, "end": 41, "word": "available", "entity_group": "CONST_DIR", "score": 0.9958253170571484}, {"start": 109, "end": 132, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.9999768292182837}, {"start": 148, "end": 153, "word": "5.5 %", "entity_group": "PARAM", "score": 0.7376516971183326}, {"start": 154, "end": 160, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9991519784399997}, {"start": 171, "end": 189, "word": "fast food industry", "entity_group": "VAR", "score": 0.9995052381345035}, {"start": 205, "end": 209, "word": "12 %", "entity_group": "PARAM", "score": 0.7984412373084923}, {"start": 210, "end": 216, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9992474700048931}, {"start": 244, "end": 251, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9953397188191243}, {"start": 255, "end": 259, "word": "55 %", "entity_group": "LIMIT", "score": 0.9587040210763521}, {"start": 300, "end": 323, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.9999597824304302}, {"start": 350, "end": 359, "word": "fast food", "entity_group": "VAR", "score": 0.9998584185816729}, {"start": 388, "end": 395, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987995853103543}, {"start": 396, "end": 400, "word": "40 %", "entity_group": "LIMIT", "score": 0.894520525620903}, {"start": 436, "end": 454, "word": "fast food industry", "entity_group": "VAR", "score": 0.999390263692794}, {"start": 514, "end": 522, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9952914038740417}, {"start": 527, "end": 533, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9950225920544892}]}
{"doc_id": "1428531079", "document": "A ferry can carry at most 120 people and sells regular rate tickets and concession rate tickets. A profit of $2 is made on each regular rate ticket and a profit of $0.50 is made on each concession rate ticket. The ferry reserves at least 15 tickets for concession rate. However, at least 5 times as many tickets sold are regular rate tickets than concession rate tickets. How many of each type of ticket should be sold to maximize profit?", "order_mapping": {"regular rate tickets": 0, "concession rate tickets": 1, "regular rate ticket": 0, "concession rate ticket": 1, "concession rate": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"concession rate ticket": "0.50", "regular rate ticket": "2"}}, "const_declarations": [{"type": "xby", "x_var": "regular rate tickets", "direction": "at least", "param": "5 times", "y_var": "concession rate tickets", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "120", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "concession rate", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular rate tickets sold\n- y: Number of concession rate tickets sold\n\nObjective:\n- The ferry aims to maximize its profit. A profit of $2 is made on each regular rate ticket and a profit of $0.50 is made on each concession rate ticket. Therefore, the objective function is: Maximize 2x + 0.50y\n\nConstraints:\n- The ferry can carry at most 120 people, so the constraint is: x + y <= 120.\n- The ferry reserves at least 15 tickets for concession rate, leading to the constraint: y >= 15.\n- At least 5 times as many tickets sold are regular rate tickets than concession rate tickets, resulting in the constraint: x >= 5y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 0.50y\nConstraints:\nx + y <= 120\ny >= 15\nx >= 5y", "canonical": {"objective": [-2.0, -0.5], "constraints": [[1.0, 1.0, 120.0], [0.0, -1.0, -15.0], [-1.0, 5.0, 0.0]]}, "solution": {"x": 105, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of regular rate tickets sold: RegularRateTickets\n- Number of concession rate tickets sold: ConcessionRateTickets\n\nConstraints:\n- Total number of tickets sold should not exceed 120:\n  RegularRateTickets + ConcessionRateTickets <= 120\n- At least 15 concession rate tickets should be sold:\n  ConcessionRateTickets >= 15\n- At least 5 times as many regular rate tickets should be sold as concession rate tickets:\n  RegularRateTickets >= 5 * ConcessionRateTickets\n\nObjective:\n- Maximize profit ($2 profit per regular rate ticket, $0.50 profit per concession rate ticket):\n  2 * RegularRateTickets + 0.50 * ConcessionRateTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularRateTickets = intvar(0, 999999999)  # Number of regular rate tickets sold\nConcessionRateTickets = intvar(0, 999999999)  # Number of concession rate tickets sold\n\n# Constraints\nm = Model()\n\n# The ferry can carry at most 120 people:\nm += RegularRateTickets + ConcessionRateTickets <= 120\n# The ferry reserves at least 15 tickets for concession rate:\nm += ConcessionRateTickets >= 15\n# At least 5 times as many tickets sold are regular rate tickets than concession rate tickets:\nm += RegularRateTickets >= 5 * ConcessionRateTickets\n\n# Objective\n# Maximize profit ($2 profit per regular rate ticket, $0.50 profit per concession rate ticket):\nm.maximize(2 * RegularRateTickets + 0.50 * ConcessionRateTickets)\n", "entities": [{"start": 18, "end": 25, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998881651226496}, {"start": 26, "end": 29, "word": "120", "entity_group": "LIMIT", "score": 0.9996665558617714}, {"start": 47, "end": 67, "word": "regular rate tickets", "entity_group": "VAR", "score": 0.998927904087945}, {"start": 72, "end": 95, "word": "concession rate tickets", "entity_group": "VAR", "score": 0.9989822445636304}, {"start": 100, "end": 106, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999192545413255}, {"start": 112, "end": 113, "word": "2", "entity_group": "PARAM", "score": 0.9995181004367311}, {"start": 130, "end": 149, "word": "regular rate ticket", "entity_group": "VAR", "score": 0.9987072258647212}, {"start": 156, "end": 162, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999709980155371}, {"start": 168, "end": 172, "word": "0.50", "entity_group": "PARAM", "score": 0.9995951679345688}, {"start": 189, "end": 211, "word": "concession rate ticket", "entity_group": "VAR", "score": 0.9995154576118926}, {"start": 233, "end": 241, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984429009050569}, {"start": 242, "end": 244, "word": "15", "entity_group": "LIMIT", "score": 0.9997437566348437}, {"start": 257, "end": 272, "word": "concession rate", "entity_group": "VAR", "score": 0.9999290306723349}, {"start": 285, "end": 293, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978168108865703}, {"start": 294, "end": 301, "word": "5 times", "entity_group": "PARAM", "score": 0.8004356444246494}, {"start": 327, "end": 347, "word": "regular rate tickets", "entity_group": "VAR", "score": 0.99964037599833}, {"start": 353, "end": 376, "word": "concession rate tickets", "entity_group": "VAR", "score": 0.9990691484310602}, {"start": 429, "end": 437, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994103228497168}, {"start": 438, "end": 444, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280326548371}]}
{"doc_id": "-1974542599", "document": "Leeside Designs sells office and dining chairs. An office chair costs the company $200 and a dining chair costs the company $250. The profit per office chair sold is $120 and the profit per dining chair sold is $180. The company does not want to invest more than $20000 on chairs and estimates a monthly demand of at most 130 total chairs. How many of each chair should the company stock in order to maximize profit?", "order_mapping": {"office": 0, "dining chairs": 1, "office chair": 0, "dining chair": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"dining chair": "180", "office chair": "120"}}, "const_declarations": [{"type": "linear", "direction": "not want to invest more than", "limit": "20000", "terms": {"office chair": "200", "dining chair": "250"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "130", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of office chairs\n- y: Number of dining chairs\n\nObjective:\n- The company aims to maximize its profit. The profit per office chair sold is $120 and the profit per dining chair sold is $180. Therefore, the objective function is: Maximize 120x + 180y\n\nConstraints:\n- The company does not want to invest more than $20000 on chairs. Given that an office chair costs $200 and a dining chair costs $250, the investment constraint is: 200x + 250y <= 20000.\n- The company estimates a monthly demand of at most 130 total chairs, leading to the constraint: x + y <= 130.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 120x + 180y\nConstraints:\n200x + 250y <= 20000\nx + y <= 130", "canonical": {"objective": [-120.0, -180.0], "constraints": [[200.0, 250.0, 20000.0], [1.0, 1.0, 130.0]]}, "solution": {"x": 0, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of office chairs: OfficeChairs\n- Number of dining chairs: DiningChairs\n\nConstraints:\n- The company does not want to invest more than $20000 on chairs (office chair costs $200, dining chair costs $250):\n  200 * OfficeChairs + 250 * DiningChairs <= 20000\n- Monthly demand of at most 130 total chairs:\n  OfficeChairs + DiningChairs <= 130\n\nObjective:\n- Maximize profit ($120 profit per office chair, $180 profit per dining chair):\n  120 * OfficeChairs + 180 * DiningChairs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOfficeChairs = intvar(0, 999999999)  # Number of office chairs\nDiningChairs = intvar(0, 999999999)  # Number of dining chairs\n\n# Constraints\nm = Model()\n\n# The company does not want to invest more than $20000 on chairs:\nm += 200 * OfficeChairs + 250 * DiningChairs <= 20000\n# The monthly demand of at most 130 total chairs:\nm += OfficeChairs + DiningChairs <= 130\n\n# Objective\n# Maximize profit ($120 per office chair, $180 per dining chair):\nm.maximize(120 * OfficeChairs + 180 * DiningChairs)\n", "entities": [{"start": 22, "end": 28, "word": "office", "entity_group": "VAR", "score": 0.999695651826898}, {"start": 33, "end": 46, "word": "dining chairs", "entity_group": "VAR", "score": 0.9999643921088756}, {"start": 52, "end": 64, "word": "office chair", "entity_group": "VAR", "score": 0.9999866282996425}, {"start": 85, "end": 88, "word": "200", "entity_group": "PARAM", "score": 0.998598990115959}, {"start": 95, "end": 107, "word": "dining chair", "entity_group": "VAR", "score": 0.9999825472761397}, {"start": 128, "end": 131, "word": "250", "entity_group": "PARAM", "score": 0.9994551468620813}, {"start": 138, "end": 144, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997189026295219}, {"start": 149, "end": 161, "word": "office chair", "entity_group": "VAR", "score": 0.9999264442101565}, {"start": 172, "end": 175, "word": "120", "entity_group": "PARAM", "score": 0.9994787736793408}, {"start": 184, "end": 190, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998428584940915}, {"start": 195, "end": 207, "word": "dining chair", "entity_group": "VAR", "score": 0.9999287805750412}, {"start": 218, "end": 221, "word": "180", "entity_group": "PARAM", "score": 0.9997206249667501}, {"start": 241, "end": 269, "word": "not want to invest more than", "entity_group": "CONST_DIR", "score": 0.9277756223715412}, {"start": 272, "end": 277, "word": "20000", "entity_group": "LIMIT", "score": 0.9996668071978706}, {"start": 322, "end": 329, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983690384670233}, {"start": 330, "end": 333, "word": "130", "entity_group": "LIMIT", "score": 0.9996009874038735}, {"start": 409, "end": 417, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.988927461446203}, {"start": 418, "end": 424, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.998784985385099}]}
{"doc_id": "-1588647623", "document": "Eric is a world-famous wood artist. He manufactures two types of decors made of oak. The first product, a display shelf, requires 25 minutes each for carving and 20 minutes each for polishing. The second decor is a plant stand and it requires 20 minutes each for carving and 10 minutes each for polishing. There are 350 minutes available for carving and 600 for polishing. The profit is $55 each for the display shelf and $45 for each plant stand. How many decors of each type should the artist create in order to maximize his profit?", "order_mapping": {"display shelf": 0, "plant stand": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"plant stand": "45", "display shelf": "55"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "350", "terms": {"display shelf": "25", "plant stand": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"display shelf": "20", "plant stand": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of display shelves manufactured\n- y: Number of plant stands manufactured\n\nObjective:\n- The artist aims to maximize his profit. The profit is $55 for each display shelf and $45 for each plant stand. Therefore, the objective function is: Maximize 55x + 45y\n\nConstraints:\n- The total time available for carving is 350 minutes, and the time required for carving each display shelf is 25 minutes and for each plant stand is 20 minutes. This leads to the constraint: 25x + 20y <= 350.\n- The total time available for polishing is 600 minutes, and the time required for polishing each display shelf is 20 minutes and for each plant stand is 10 minutes. This results in the constraint: 20x + 10y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 55x + 45y\nConstraints:\n25x + 20y <= 350\n20x + 10y <= 600", "canonical": {"objective": [-55.0, -45.0], "constraints": [[25.0, 20.0, 350.0], [20.0, 10.0, 600.0]]}, "solution": {"x": 2, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of display shelves made: DisplayShelf\n- Number of plant stands made: PlantStand\n\nConstraints:\n- Total carving time for all decors should not exceed 350 minutes:\n  25 * DisplayShelf + 20 * PlantStand <= 350\n- Total polishing time for all decors should not exceed 600 minutes:\n  20 * DisplayShelf + 10 * PlantStand <= 600\n\nObjective:\n- Maximize profit ($55 for each display shelf and $45 for each plant stand):\n  55 * DisplayShelf + 45 * PlantStand\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDisplayShelf = intvar(0, 999999999)  # Number of display shelves made\nPlantStand = intvar(0, 999999999)  # Number of plant stands made\n\n# Constraints\nm = Model()\n\n# Carving time constraints (350 minutes available):\nm += 25 * DisplayShelf + 20 * PlantStand <= 350\n# Polishing time constraints (600 minutes available):\nm += 20 * DisplayShelf + 10 * PlantStand <= 600\n\n# Objective\n# Maximize profit ($55 for each display shelf and $45 for each plant stand):\nm.maximize(55 * DisplayShelf + 45 * PlantStand)\n", "entities": [{"start": 111, "end": 124, "word": "display shelf", "entity_group": "VAR", "score": 0.9999726268197567}, {"start": 136, "end": 138, "word": "25", "entity_group": "PARAM", "score": 0.9997015193270912}, {"start": 168, "end": 170, "word": "20", "entity_group": "PARAM", "score": 0.9997378797463589}, {"start": 222, "end": 233, "word": "plant stand", "entity_group": "VAR", "score": 0.9999770819408462}, {"start": 250, "end": 252, "word": "20", "entity_group": "PARAM", "score": 0.999720533849576}, {"start": 282, "end": 284, "word": "10", "entity_group": "PARAM", "score": 0.9997514950659426}, {"start": 324, "end": 327, "word": "350", "entity_group": "LIMIT", "score": 0.9997880177312963}, {"start": 336, "end": 345, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985778003469516}, {"start": 362, "end": 365, "word": "600", "entity_group": "LIMIT", "score": 0.9994149704484508}, {"start": 386, "end": 392, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999183610305192}, {"start": 398, "end": 400, "word": "55", "entity_group": "PARAM", "score": 0.9996035224450383}, {"start": 414, "end": 427, "word": "display shelf", "entity_group": "VAR", "score": 0.9999804317425349}, {"start": 434, "end": 436, "word": "45", "entity_group": "PARAM", "score": 0.9997566943438291}, {"start": 446, "end": 457, "word": "plant stand", "entity_group": "VAR", "score": 0.9999623741926029}, {"start": 526, "end": 534, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9950835158847097}, {"start": 539, "end": 545, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999962019020579}]}
{"doc_id": "837193748", "document": "Gabriel is growing pumpkins and carrots on his farm. He has 100 acres available on which he must grow a minimum of 7 acres of pumpkins and a minimum of 12 acres of carrots to meet demands. The profit per pumpkin is $2.5 and the profit per carrot is $3.4. He prefers to grow more carrots than pumpkins but limitations in his workforce allow him to grow at most three times the amount of carrots as pumpkins. How many of each produce should Gabriel grow in order to maximize his profit?", "order_mapping": {"pumpkins": 0, "carrots": 1, "pumpkin": 0, "carrot": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pumpkin": "2.5", "carrot": "3.4"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "7", "var": "pumpkins", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "12", "var": "carrots", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "carrots", "direction": "more", "y_var": "pumpkins", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "carrots", "direction": "at most", "param": "three times", "y_var": "pumpkins", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of pumpkins\n- y: Acres of carrots\n\nObjective:\n- Gabriel wants to maximize his profit. The profit per pumpkin is $2.5 and the profit per carrot is $3.4. Therefore, the objective function is: Maximize 2.5x + 3.4y\n\nConstraints:\n- Gabriel has 100 acres available for growing pumpkins and carrots, so the constraint is: x + y <= 100.\n- He must grow a minimum of 7 acres of pumpkins and a minimum of 12 acres of carrots, leading to the constraints: x >= 7 and y >= 12.\n- Gabriel prefers to grow more carrots than pumpkins, so the constraint is: y >= x.\n- His workforce limitations allow him to grow at most three times the amount of carrots as pumpkins, leading to the constraint: y <= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2.5x + 3.4y\nConstraints:\nx + y <= 100\nx >= 7\ny >= 12\ny >= x\ny <= 3x", "canonical": {"objective": [-2.5, -3.4], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -7.0], [0.0, -1.0, -12.0], [1.0, -1.0, 0.0], [-3.0, 1.0, 0.0]]}, "solution": {"x": 25, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Acres of pumpkins grown: Pumpkins\n- Acres of carrots grown: Carrots\n\nConstraints:\n- Total acres used should not exceed 100:\n  Pumpkins + Carrots <= 100\n- At least 7 acres of pumpkins:\n  Pumpkins >= 7\n- At least 12 acres of carrots:\n  Carrots >= 12\n- Carrots can be at most three times the amount of pumpkins:\n  Carrots <= 3 * Pumpkins\n\nObjective:\n- Maximize profit (2.5 dollars per acre of pumpkins, 3.4 dollars per acre of carrots):\n  2.5 * Pumpkins + 3.4 * Carrots\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPumpkins = intvar(0, 999999999)  # Acres of pumpkins\nCarrots = intvar(0, 999999999)  # Acres of carrots\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 100:\nm += Pumpkins + Carrots <= 100\n# At least 7 acres of pumpkins:\nm += Pumpkins >= 7\n# At least 12 acres of carrots:\nm += Carrots >= 12\n# Prefer to grow more carrots than pumpkins (implicitly satisfied by other constraints)\n# Carrots can be at most three times the amount of pumpkins:\nm += Carrots <= 3 * Pumpkins\n\n# Objective\n# Maximize profit (2.5 dollars per acre of pumpkins, 3.4 dollars per acre of carrots):\nm.maximize(2.5 * Pumpkins + 3.4 * Carrots)\n", "entities": [{"start": 19, "end": 27, "word": "pumpkins", "entity_group": "VAR", "score": 0.9994965959229137}, {"start": 32, "end": 39, "word": "carrots", "entity_group": "VAR", "score": 0.9984510724293689}, {"start": 61, "end": 64, "word": "100", "entity_group": "LIMIT", "score": 0.9997668632122417}, {"start": 71, "end": 80, "word": "available", "entity_group": "CONST_DIR", "score": 0.99879287891177}, {"start": 105, "end": 112, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.997826864825311}, {"start": 116, "end": 117, "word": "7", "entity_group": "LIMIT", "score": 0.9997764014023934}, {"start": 127, "end": 135, "word": "pumpkins", "entity_group": "VAR", "score": 0.9984811325938703}, {"start": 142, "end": 149, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9987535884063715}, {"start": 153, "end": 155, "word": "12", "entity_group": "LIMIT", "score": 0.9997244106032406}, {"start": 165, "end": 172, "word": "carrots", "entity_group": "VAR", "score": 0.9972030112373115}, {"start": 195, "end": 201, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999846349907047}, {"start": 206, "end": 213, "word": "pumpkin", "entity_group": "VAR", "score": 0.9995151896634992}, {"start": 219, "end": 222, "word": "2.5", "entity_group": "PARAM", "score": 0.9993469761684761}, {"start": 231, "end": 237, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998655606934773}, {"start": 242, "end": 248, "word": "carrot", "entity_group": "VAR", "score": 0.9991461040534145}, {"start": 254, "end": 257, "word": "3.4", "entity_group": "PARAM", "score": 0.9992975861114213}, {"start": 279, "end": 283, "word": "more", "entity_group": "CONST_DIR", "score": 0.9957376256111871}, {"start": 284, "end": 291, "word": "carrots", "entity_group": "VAR", "score": 0.9978868677354042}, {"start": 297, "end": 305, "word": "pumpkins", "entity_group": "VAR", "score": 0.9991651777968594}, {"start": 357, "end": 364, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9969502921406643}, {"start": 365, "end": 376, "word": "three times", "entity_group": "PARAM", "score": 0.6946119865464919}, {"start": 391, "end": 398, "word": "carrots", "entity_group": "VAR", "score": 0.999143094753067}, {"start": 402, "end": 410, "word": "pumpkins", "entity_group": "VAR", "score": 0.9996481884147109}, {"start": 470, "end": 478, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9955810561567715}, {"start": 483, "end": 489, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620190942388}]}
{"doc_id": "-2143410996", "document": "A candy store hand makes gummy bears. Each packet of fruit gummy bears takes 10 minutes to make and each packet of sour gummy bears takes 15 minutes to make. The store has available 2000 minutes to make the packets. In addition, they can make at most 120 fruit gummy bears packets and 70 sour gummy bears packets. If the profit per packet of fruit gummy bears is $1 and the profit per packet of sour gummy bears is $1.25, how many of each should they make to maximize profit?", "order_mapping": {"fruit gummy bears": 0, "sour gummy bears": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fruit gummy bears": "1", "sour gummy bears": "1.25"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"fruit gummy bears": "10", "sour gummy bears": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "120", "var": "fruit gummy bears", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "sour gummy bears", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packets of fruit gummy bears\n- y: Number of packets of sour gummy bears\n\nObjective:\n- The store aims to maximize its profit. The profit per packet of fruit gummy bears is $1 and the profit per packet of sour gummy bears is $1.25. Therefore, the objective function is: Maximize x + 1.25y\n\nConstraints:\n- The store has 2000 minutes available to make the packets. Each packet of fruit gummy bears takes 10 minutes and each packet of sour gummy bears takes 15 minutes, leading to the constraint: 10x + 15y <= 2000.\n- The store can make at most 120 fruit gummy bears packets, resulting in the constraint: x <= 120.\n- The store can make at most 70 sour gummy bears packets, leading to the constraint: y <= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 1.25y\nConstraints:\n10x + 15y <= 2000\nx <= 120\ny <= 70", "canonical": {"objective": [-1.0, -1.25], "constraints": [[10.0, 15.0, 2000.0], [1.0, 0.0, 120.0], [0.0, 1.0, 70.0]]}, "solution": {"x": 119, "y": 54}, "pseudo_model": "\nDecision Variables:\n- Number of fruit gummy bears packets made: FruitGummyBears\n- Number of sour gummy bears packets made: SourGummyBears\n\nConstraints:\n- Total time to make packets should not exceed 2000 minutes (10 minutes per fruit gummy bear packet, 15 minutes per sour gummy bear packet):\n  10 * FruitGummyBears + 15 * SourGummyBears <= 2000\n- At most 120 fruit gummy bears packets can be made:\n  FruitGummyBears <= 120\n- At most 70 sour gummy bears packets can be made:\n  SourGummyBears <= 70\n\nObjective:\n- Maximize profit ($1 per packet of fruit gummy bears, $1.25 per packet of sour gummy bears):\n  1 * FruitGummyBears + 1.25 * SourGummyBears\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFruitGummyBears = intvar(0, 999999999)  # Number of fruit gummy bears packets made\nSourGummyBears = intvar(0, 999999999)  # Number of sour gummy bears packets made\n\n# Constraints\nm = Model()\n\n# The store has available 2000 minutes to make the packets:\nm += 10 * FruitGummyBears + 15 * SourGummyBears <= 2000\n# They can make at most 120 fruit gummy bears packets:\nm += FruitGummyBears <= 120\n# They can make at most 70 sour gummy bears packets:\nm += SourGummyBears <= 70\n\n# Objective\n# Maximize profit ($1 per packet of fruit gummy bears, $1.25 per packet of sour gummy bears):\nm.maximize(1 * FruitGummyBears + 1.25 * SourGummyBears)\n", "entities": [{"start": 54, "end": 71, "word": "fruit gummy bears", "entity_group": "VAR", "score": 0.9993661355669811}, {"start": 78, "end": 80, "word": "10", "entity_group": "PARAM", "score": 0.9995447298600407}, {"start": 116, "end": 132, "word": "sour gummy bears", "entity_group": "VAR", "score": 0.9979743364772596}, {"start": 139, "end": 141, "word": "15", "entity_group": "PARAM", "score": 0.9994361857301429}, {"start": 174, "end": 183, "word": "available", "entity_group": "CONST_DIR", "score": 0.9980396005172633}, {"start": 184, "end": 188, "word": "2000", "entity_group": "LIMIT", "score": 0.9993519544832011}, {"start": 247, "end": 254, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989664359387752}, {"start": 255, "end": 258, "word": "120", "entity_group": "LIMIT", "score": 0.9995490386933165}, {"start": 259, "end": 276, "word": "fruit gummy bears", "entity_group": "VAR", "score": 0.9999145510992661}, {"start": 289, "end": 291, "word": "70", "entity_group": "LIMIT", "score": 0.9990799354615968}, {"start": 292, "end": 308, "word": "sour gummy bears", "entity_group": "VAR", "score": 0.9994904774101855}, {"start": 326, "end": 332, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999195802688736}, {"start": 347, "end": 364, "word": "fruit gummy bears", "entity_group": "VAR", "score": 0.9996130212725638}, {"start": 370, "end": 371, "word": "1", "entity_group": "PARAM", "score": 0.9994345549599838}, {"start": 380, "end": 386, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999495506105749}, {"start": 401, "end": 417, "word": "sour gummy bears", "entity_group": "VAR", "score": 0.997113746067442}, {"start": 423, "end": 427, "word": "1.25", "entity_group": "PARAM", "score": 0.9997145901491941}, {"start": 467, "end": 475, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 476, "end": 482, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "1876661826", "document": "In an arcade shooter, each duck shot is 5 points and each goose shot is 6 points. You must shoot at least 5 ducks and at least 3 geese to pass the level. However, you can shoot at most 12 ducks and at most 7 geese. In addition, you only have enough bullets to shoot 15 animals total. How many of each animal should you shoot to maximize your points?", "order_mapping": {"duck shot": 0, "goose shot": 1, "ducks": 0, "geese": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "points", "terms": {"goose shot": "6", "duck shot": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5", "var": "ducks", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "geese", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12", "var": "ducks", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "7", "var": "geese", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "15", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ducks shot\n- y: Number of geese shot\n\nObjective:\n- The objective is to maximize the points scored. Each duck shot is 5 points and each goose shot is 6 points. Therefore, the objective function is: Maximize 5x + 6y\n\nConstraints:\n- At least 5 ducks must be shot: x >= 5\n- At least 3 geese must be shot: y >= 3\n- At most 12 ducks can be shot: x <= 12\n- At most 7 geese can be shot: y <= 7\n- The total number of animals shot cannot exceed 15: x + y <= 15\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 6y\nConstraints:\nx >= 5\ny >= 3\nx <= 12\ny <= 7\nx + y <= 15", "canonical": {"objective": [-5.0, -6.0], "constraints": [[-1.0, 0.0, -5.0], [0.0, -1.0, -3.0], [1.0, 0.0, 12.0], [0.0, 1.0, 7.0], [1.0, 1.0, 15.0]]}, "solution": {"x": 8, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of ducks shot: Ducks\n- Number of geese shot: Geese\n\nConstraints:\n- At least 5 ducks must be shot:\n  Ducks >= 5\n- At least 3 geese must be shot:\n  Geese >= 3\n- At most 12 ducks can be shot:\n  Ducks <= 12\n- At most 7 geese can be shot:\n  Geese <= 7\n- Only enough bullets to shoot 15 animals total:\n  Ducks + Geese <= 15\n\nObjective:\n- Maximize points (5 points per duck shot, 6 points per goose shot):\n  5 * Ducks + 6 * Geese\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDucks = intvar(0, 999999999)  # Number of ducks shot\nGeese = intvar(0, 999999999)  # Number of geese shot\n\n# Constraints\nm = Model()\n\n# You must shoot at least 5 ducks:\nm += Ducks >= 5\n# You must shoot at least 3 geese:\nm += Geese >= 3\n# You can shoot at most 12 ducks:\nm += Ducks <= 12\n# You can shoot at most 7 geese:\nm += Geese <= 7\n# You only have enough bullets to shoot 15 animals total:\nm += Ducks + Geese <= 15\n\n# Objective\n# Maximize points (5 points per duck shot, 6 points per goose shot):\nm.maximize(5 * Ducks + 6 * Geese)\n", "entities": [{"start": 28, "end": 37, "word": "duck shot", "entity_group": "VAR", "score": 0.9997230007222359}, {"start": 41, "end": 42, "word": "5", "entity_group": "PARAM", "score": 0.9996826289538884}, {"start": 43, "end": 49, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9933634118930088}, {"start": 59, "end": 69, "word": "goose shot", "entity_group": "VAR", "score": 0.999791140585939}, {"start": 73, "end": 74, "word": "6", "entity_group": "PARAM", "score": 0.9995955795905614}, {"start": 75, "end": 81, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9969108451171391}, {"start": 99, "end": 107, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984448137671073}, {"start": 108, "end": 109, "word": "5", "entity_group": "LIMIT", "score": 0.999700940608492}, {"start": 110, "end": 115, "word": "ducks", "entity_group": "VAR", "score": 0.997352612805619}, {"start": 120, "end": 128, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986322589830502}, {"start": 129, "end": 130, "word": "3", "entity_group": "LIMIT", "score": 0.9997531882280397}, {"start": 131, "end": 136, "word": "geese", "entity_group": "VAR", "score": 0.9981715272467201}, {"start": 181, "end": 188, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988866621672992}, {"start": 189, "end": 191, "word": "12", "entity_group": "LIMIT", "score": 0.9996916139177097}, {"start": 192, "end": 197, "word": "ducks", "entity_group": "VAR", "score": 0.9987227462540554}, {"start": 202, "end": 209, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987445235229819}, {"start": 210, "end": 211, "word": "7", "entity_group": "LIMIT", "score": 0.9997503101508487}, {"start": 212, "end": 217, "word": "geese", "entity_group": "VAR", "score": 0.9979835826674591}, {"start": 238, "end": 242, "word": "only", "entity_group": "CONST_DIR", "score": 0.9915269669353473}, {"start": 272, "end": 274, "word": "15", "entity_group": "LIMIT", "score": 0.9989116475816818}, {"start": 335, "end": 343, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999548318257455}, {"start": 349, "end": 355, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9981440408142676}]}
{"doc_id": "1959646428", "document": "An investment bank has $200000 available to invest in a 24-month commitment. The bank can either invest in the stock market or cryptocurrency. The money placed in the stock market yields a 2.5% return, while the money placed in cryptocurrency yields a 7% return. The bank has been advised to place at least 45% of the investment in the stock market. Due to recent issues with cryptocurrency, the bank has decided that at most 25% of the investment be placed in cryptocurrency. How much should the bank invest in each area to maximize its return on investment?", "order_mapping": {"stock market": 0, "cryptocurrency": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"stock market": "2.5%", "cryptocurrency": "7%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "200000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "45%", "var": "stock market", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "25%", "var": "cryptocurrency", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the stock market\n- y: Dollars invested in cryptocurrency\n\nObjective:\n- The investment bank aims to maximize its return on investment. The money placed in the stock market yields a 2.5% return, and the money placed in cryptocurrency yields a 7% return. Therefore, the objective function is: Maximize 0.025x + 0.07y\n\nConstraints:\n- The total amount available for investment is $200,000, so the constraint is: x + y <= 200000.\n- The bank has been advised to place at least 45% of the investment in the stock market, leading to the constraint: x >= 0.45(x + y).\n- Due to recent issues with cryptocurrency, the bank has decided that at most 25% of the investment be placed in cryptocurrency, resulting in the constraint: y <= 0.25(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.025x + 0.07y\nConstraints:\nx + y <= 200000\nx >= 0.45(x + y)\ny <= 0.25(x + y)", "canonical": {"objective": [-0.025, -0.07], "constraints": [[1.0, 1.0, 200000.0], [-0.55, 0.45, 0.0], [-0.25, 0.75, 0.0]]}, "solution": {"x": 150000, "y": 50000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the stock market: StockMarket\n- Amount invested in cryptocurrency: Cryptocurrency\n\nConstraints:\n- Total investment should not exceed $200000:\n  StockMarket + Cryptocurrency <= 200000\n- At least 45% of the investment should be in the stock market:\n  StockMarket >= 0.45 * (StockMarket + Cryptocurrency)\n- At most 25% of the investment should be in cryptocurrency:\n  Cryptocurrency <= 0.25 * (StockMarket + Cryptocurrency)\n\nObjective:\n- Maximize return on investment (2.5% from stock market, 7% from cryptocurrency):\n  0.025 * StockMarket + 0.07 * Cryptocurrency\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStockMarket = intvar(0, 999999999)  # Amount invested in the stock market\nCryptocurrency = intvar(0, 999999999)  # Amount invested in cryptocurrency\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $200000:\nm += StockMarket + Cryptocurrency <= 200000\n# At least 45% of the investment should be in the stock market:\nm += StockMarket >= 0.45 * (StockMarket + Cryptocurrency)\n# At most 25% of the investment should be in cryptocurrency:\nm += Cryptocurrency <= 0.25 * (StockMarket + Cryptocurrency)\n\n# Objective\n# Maximize return on investment (2.5% from stock market, 7% from cryptocurrency):\nm.maximize(0.025 * StockMarket + 0.07 * Cryptocurrency)\n", "entities": [{"start": 25, "end": 31, "word": "200000", "entity_group": "LIMIT", "score": 0.9990439567467255}, {"start": 32, "end": 41, "word": "available", "entity_group": "CONST_DIR", "score": 0.9958253170308634}, {"start": 115, "end": 127, "word": "stock market", "entity_group": "VAR", "score": 0.9999337225977859}, {"start": 131, "end": 145, "word": "cryptocurrency", "entity_group": "VAR", "score": 0.9993525735402422}, {"start": 172, "end": 184, "word": "stock market", "entity_group": "VAR", "score": 0.9999375441142438}, {"start": 194, "end": 199, "word": "2.5 %", "entity_group": "PARAM", "score": 0.8970441096979554}, {"start": 200, "end": 206, "word": "return", "entity_group": "OBJ_NAME", "score": 0.99665280641144}, {"start": 235, "end": 249, "word": "cryptocurrency", "entity_group": "VAR", "score": 0.9996866323909411}, {"start": 259, "end": 262, "word": "7 %", "entity_group": "PARAM", "score": 0.8410269196087052}, {"start": 263, "end": 269, "word": "return", "entity_group": "OBJ_NAME", "score": 0.998856919558408}, {"start": 307, "end": 315, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988063394315719}, {"start": 316, "end": 320, "word": "45 %", "entity_group": "LIMIT", "score": 0.9879623824531066}, {"start": 346, "end": 358, "word": "stock market", "entity_group": "VAR", "score": 0.999889752212142}, {"start": 387, "end": 401, "word": "cryptocurrency", "entity_group": "VAR", "score": 0.9996845628934556}, {"start": 430, "end": 437, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988229055722674}, {"start": 438, "end": 442, "word": "25 %", "entity_group": "LIMIT", "score": 0.8645170066492807}, {"start": 474, "end": 488, "word": "cryptocurrency", "entity_group": "VAR", "score": 0.9998177107021909}, {"start": 539, "end": 547, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994523370031597}, {"start": 552, "end": 558, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9955548535010049}]}
{"doc_id": "608336077", "document": "Cooper is a store owner and he can spend at most $1000 on potatoes and pumpkins. A potato costs Cooper $0.50 and a pumpkin costs Cooper $0.90. Each potato is sold for a profit of $1.5 and each pumpkin is sold for a profit of $2.8. Cooper estimates that the number of pumpkins sold is at most a third of the number of potatoes sold. He also estimates that at least 250 potatoes but at most 800 potatoes are sold each month. How many of each, potatoes and pumpkins, should be sold in order to maximize the profit?", "order_mapping": {"potatoes": 0, "pumpkins": 1, "potato": 0, "pumpkin": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"potato": "1.5", "pumpkin": "2.8"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "1000", "terms": {"potato": "0.50", "pumpkin": "0.90"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "pumpkins", "direction": "at most", "param": "third", "y_var": "potatoes", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "250", "var": "potatoes", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "800", "var": "potatoes", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of potatoes sold\n- y: Number of pumpkins sold\n\nObjective:\n- Cooper wants to maximize his profit. Each potato is sold for a profit of $1.5 and each pumpkin is sold for a profit of $2.8. Therefore, the objective function is: Maximize 1.5x + 2.8y\n\nConstraints:\n- Cooper can spend at most $1000, so the cost constraint is: 0.50x + 0.90y <= 1000.\n- The number of pumpkins sold is at most a third of the number of potatoes sold, leading to the constraint: y <= (1/3)x.\n- At least 250 potatoes but at most 800 potatoes are sold each month, resulting in the constraints: x >= 250 and x <= 800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.5x + 2.8y\nConstraints:\n0.50x + 0.90y <= 1000\ny <= (1/3)x\nx >= 250\nx <= 800", "canonical": {"objective": [-1.5, -2.8], "constraints": [[0.5, 0.9, 1000.0], [-0.3333333333333333, 1.0, 0.0], [-1.0, 0.0, -250.0], [1.0, 0.0, 800.0]]}, "solution": {"x": 800, "y": 266}, "pseudo_model": "\nDecision Variables:\n- Number of potatoes sold: Potatoes\n- Number of pumpkins sold: Pumpkins\n\nConstraints:\n- Cooper can spend at most $1000 on potatoes and pumpkins (potato costs $0.50, pumpkin costs $0.90):\n  0.50 * Potatoes + 0.90 * Pumpkins <= 1000\n- The number of pumpkins sold is at most a third of the number of potatoes sold:\n  Pumpkins <= 1/3 * Potatoes\n- At least 250 potatoes but at most 800 potatoes are sold each month:\n  250 <= Potatoes <= 800\n\nObjective:\n- Maximize profit (profit of $1.5 per potato and $2.8 per pumpkin):\n  1.5 * Potatoes + 2.8 * Pumpkins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPotatoes = intvar(0, 999999999)  # Number of potatoes sold\nPumpkins = intvar(0, 999999999)  # Number of pumpkins sold\n\n# Constraints\nm = Model()\n\n# Cooper can spend at most $1000 on potatoes and pumpkins:\nm += 0.50 * Potatoes + 0.90 * Pumpkins <= 1000\n# The number of pumpkins sold is at most a third of the number of potatoes sold:\nm += Pumpkins <= (1/3) * Potatoes\n# At least 250 potatoes are sold:\nm += Potatoes >= 250\n# At most 800 potatoes are sold:\nm += Potatoes <= 800\n\n# Objective\n# Maximize profit (profit of $1.5 per potato and $2.8 per pumpkin):\nm.maximize(1.5 * Potatoes + 2.8 * Pumpkins)\n", "entities": [{"start": 41, "end": 48, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9941871659386775}, {"start": 51, "end": 55, "word": "1000", "entity_group": "LIMIT", "score": 0.9992090712506169}, {"start": 59, "end": 67, "word": "potatoes", "entity_group": "VAR", "score": 0.9995718933864931}, {"start": 72, "end": 80, "word": "pumpkins", "entity_group": "VAR", "score": 0.999821697832163}, {"start": 85, "end": 91, "word": "potato", "entity_group": "VAR", "score": 0.9995897624813255}, {"start": 107, "end": 111, "word": "0.50", "entity_group": "PARAM", "score": 0.9997444643038238}, {"start": 118, "end": 125, "word": "pumpkin", "entity_group": "VAR", "score": 0.9997514954635971}, {"start": 141, "end": 145, "word": "0.90", "entity_group": "PARAM", "score": 0.9996934328743163}, {"start": 153, "end": 159, "word": "potato", "entity_group": "VAR", "score": 0.9996768413844895}, {"start": 174, "end": 180, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998354218154256}, {"start": 186, "end": 189, "word": "1.5", "entity_group": "PARAM", "score": 0.9996585756674792}, {"start": 199, "end": 206, "word": "pumpkin", "entity_group": "VAR", "score": 0.9998227976118045}, {"start": 221, "end": 227, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994074416501987}, {"start": 233, "end": 236, "word": "2.8", "entity_group": "PARAM", "score": 0.9996218795396332}, {"start": 275, "end": 283, "word": "pumpkins", "entity_group": "VAR", "score": 0.9986012576941802}, {"start": 292, "end": 299, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9942390467968867}, {"start": 302, "end": 307, "word": "third", "entity_group": "PARAM", "score": 0.9959171022445849}, {"start": 325, "end": 333, "word": "potatoes", "entity_group": "VAR", "score": 0.9992911344812009}, {"start": 364, "end": 372, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990684259301441}, {"start": 373, "end": 376, "word": "250", "entity_group": "LIMIT", "score": 0.9997168704972011}, {"start": 377, "end": 385, "word": "potatoes", "entity_group": "VAR", "score": 0.9991972590892728}, {"start": 390, "end": 397, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988579040240048}, {"start": 398, "end": 401, "word": "800", "entity_group": "LIMIT", "score": 0.999735362459597}, {"start": 402, "end": 410, "word": "potatoes", "entity_group": "VAR", "score": 0.9984018882841191}, {"start": 452, "end": 460, "word": "potatoes", "entity_group": "VAR", "score": 0.9988982487762377}, {"start": 465, "end": 473, "word": "pumpkins", "entity_group": "VAR", "score": 0.9997318119368459}, {"start": 503, "end": 511, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970533990570982}, {"start": 516, "end": 522, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620238983442}]}
{"doc_id": "-1795331689", "document": "A sandwich store makes meatballs and ham sandwiches. Each meatball sandwich requires 25 grams of meat, 10 grams of cheese, and 50 grams of sauce. Each ham sandwich requires 30 grams of meat, 25 grams of cheese, and 20 grams of sauce. The store has available 4000 grams of meat, 5000 grams of cheese, and 5200 grams of sauce. If the profit per meatball sandwich is $3 and the profit per ham sandwich is $3.50, how many of each should be made to maximize profit?", "order_mapping": {"meatballs": 0, "ham sandwiches": 1, "meatball sandwich": 0, "ham sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"meatball sandwich": "3", "ham sandwich": "3.50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"meatball sandwich": "25", "ham sandwich": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5000", "terms": {"meatball sandwich": "10", "ham sandwich": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "5200", "terms": {"meatball sandwich": "50", "ham sandwich": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of meatball sandwiches\n- y: Number of ham sandwiches\n\nObjective:\n- The store aims to maximize its profit. The profit per meatball sandwich is $3 and the profit per ham sandwich is $3.50. Therefore, the objective function is: Maximize 3x + 3.50y\n\nConstraints:\n- The store has available 4000 grams of meat, 5000 grams of cheese, and 5200 grams of sauce. Each meatball sandwich requires 25 grams of meat, 10 grams of cheese, and 50 grams of sauce, and each ham sandwich requires 30 grams of meat, 25 grams of cheese, and 20 grams of sauce. These lead to the following constraints:\n    - 25x + 30y <= 4000 (meat constraint)\n    - 10x + 25y <= 5000 (cheese constraint)\n    - 50x + 20y <= 5200 (sauce constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 3.50y\nConstraints:\n25x + 30y <= 4000\n10x + 25y <= 5000\n50x + 20y <= 5200", "canonical": {"objective": [-3.0, -3.5], "constraints": [[25.0, 30.0, 4000.0], [10.0, 25.0, 5000.0], [50.0, 20.0, 5200.0]]}, "solution": {"x": 76, "y": 70}, "pseudo_model": "\nDecision Variables:\n- Number of meatball sandwiches made: MeatballSandwich\n- Number of ham sandwiches made: HamSandwich\n\nConstraints:\n- Meat constraint (25g per meatball sandwich and 30g per ham sandwich, 4000g available):\n  25 * MeatballSandwich + 30 * HamSandwich <= 4000\n- Cheese constraint (10g per meatball sandwich and 25g per ham sandwich, 5000g available):\n  10 * MeatballSandwich + 25 * HamSandwich <= 5000\n- Sauce constraint (50g per meatball sandwich and 20g per ham sandwich, 5200g available):\n  50 * MeatballSandwich + 20 * HamSandwich <= 5200\n\nObjective:\n- Maximize profit ($3 per meatball sandwich, $3.50 per ham sandwich):\n  3 * MeatballSandwich + 3.5 * HamSandwich\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMeatballSandwich = intvar(0, 999999999)  # Number of meatball sandwiches made\nHamSandwich = intvar(0, 999999999)  # Number of ham sandwiches made\n\n# Constraints\nm = Model()\n\n# Meat constraint: 25g per meatball sandwich and 30g per ham sandwich, 4000g available\nm += 25 * MeatballSandwich + 30 * HamSandwich <= 4000\n# Cheese constraint: 10g per meatball sandwich and 25g per ham sandwich, 5000g available\nm += 10 * MeatballSandwich + 25 * HamSandwich <= 5000\n# Sauce constraint: 50g per meatball sandwich and 20g per ham sandwich, 5200g available\nm += 50 * MeatballSandwich + 20 * HamSandwich <= 5200\n\n# Objective\n# Maximize profit ($3 per meatball sandwich, $3.50 per ham sandwich):\nm.maximize(3 * MeatballSandwich + 3.5 * HamSandwich)\n", "entities": [{"start": 23, "end": 32, "word": "meatballs", "entity_group": "VAR", "score": 0.9995762688127917}, {"start": 37, "end": 51, "word": "ham sandwiches", "entity_group": "VAR", "score": 0.9999869501976809}, {"start": 59, "end": 76, "word": "meatball sandwich", "entity_group": "VAR", "score": 0.9999763328951955}, {"start": 86, "end": 88, "word": "25", "entity_group": "PARAM", "score": 0.9996919796258408}, {"start": 105, "end": 107, "word": "10", "entity_group": "PARAM", "score": 0.9997351153964997}, {"start": 130, "end": 132, "word": "50", "entity_group": "PARAM", "score": 0.9996062913857133}, {"start": 155, "end": 167, "word": "ham sandwich", "entity_group": "VAR", "score": 0.9999807900789557}, {"start": 177, "end": 179, "word": "30", "entity_group": "PARAM", "score": 0.99972331503457}, {"start": 196, "end": 198, "word": "25", "entity_group": "PARAM", "score": 0.9997351153964056}, {"start": 221, "end": 223, "word": "20", "entity_group": "PARAM", "score": 0.9994131960623419}, {"start": 255, "end": 264, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990190166214985}, {"start": 265, "end": 269, "word": "4000", "entity_group": "LIMIT", "score": 0.999401828524461}, {"start": 286, "end": 290, "word": "5000", "entity_group": "LIMIT", "score": 0.999754830749336}, {"start": 313, "end": 317, "word": "5200", "entity_group": "LIMIT", "score": 0.9992543342616599}, {"start": 342, "end": 348, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998297472861857}, {"start": 353, "end": 370, "word": "meatball sandwich", "entity_group": "VAR", "score": 0.9999432514599141}, {"start": 376, "end": 377, "word": "3", "entity_group": "PARAM", "score": 0.9996443170413011}, {"start": 386, "end": 392, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386053456585}, {"start": 397, "end": 409, "word": "ham sandwich", "entity_group": "VAR", "score": 0.9999457528464815}, {"start": 415, "end": 419, "word": "3.50", "entity_group": "PARAM", "score": 0.9996417553060728}, {"start": 457, "end": 465, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "877880223", "document": "A toy company makes bear plush toys and dog plush toys. Each bear takes 15 minutes to make and each dog takes 12 minutes to make. The company has 1000 minutes available to make both plush toys. Due to the popularity of bears, the company must make at least two times as many bears as dogs. If the profit per bear is $4 and the profit per dog is $5, how many of each should be made to maximize profit?", "order_mapping": {"bear plush toys": 0, "dog plush": 1, "bear": 0, "dog": 1, "bears": 0, "dogs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bear": "4", "dog": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"bear": "15", "dog": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "bears", "direction": "at least", "param": "two times", "y_var": "dogs", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bear plush toys\n- y: Number of dog plush toys\n\nObjective:\n- The company aims to maximize its profit. The profit per bear is $4 and the profit per dog is $5. Therefore, the objective function is: Maximize 4x + 5y\n\nConstraints:\n- The company has 1000 minutes available to make both plush toys. Each bear takes 15 minutes to make and each dog takes 12 minutes to make, leading to the constraint: 15x + 12y <= 1000.\n- The company must make at least two times as many bears as dogs, resulting in the constraint: x >= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 5y\nConstraints:\n15x + 12y <= 1000\nx >= 2y", "canonical": {"objective": [-4.0, -5.0], "constraints": [[15.0, 12.0, 1000.0], [-1.0, 2.0, 0.0]]}, "solution": {"x": 48, "y": 23}, "pseudo_model": "\nDecision Variables:\n- Number of bear plush toys made: Bears\n- Number of dog plush toys made: Dogs\n\nConstraints:\n- Total time to make both plush toys should not exceed 1000 minutes (15 minutes per bear, 12 minutes per dog):\n  15 * Bears + 12 * Dogs <= 1000\n- At least two times as many bears as dogs:\n  Bears >= 2 * Dogs\n\nObjective:\n- Maximize profit (4 dollars per bear, 5 dollars per dog):\n  4 * Bears + 5 * Dogs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBears = intvar(0, 999999999)  # Number of bear plush toys made\nDogs = intvar(0, 999999999)  # Number of dog plush toys made\n\n# Constraints\nm = Model()\n\n# Total time to make both plush toys should not exceed 1000 minutes:\n# (15 minutes per bear, 12 minutes per dog)\nm += 15 * Bears + 12 * Dogs <= 1000\n# The company must make at least two times as many bears as dogs:\nm += Bears >= 2 * Dogs\n\n# Objective\n# Maximize profit (4 dollars per bear, 5 dollars per dog):\nm.maximize(4 * Bears + 5 * Dogs)\n", "entities": [{"start": 20, "end": 35, "word": "bear plush toys", "entity_group": "VAR", "score": 0.9990208168039366}, {"start": 40, "end": 49, "word": "dog plush", "entity_group": "VAR", "score": 0.9999920037189973}, {"start": 62, "end": 66, "word": "bear", "entity_group": "VAR", "score": 0.9996095558818904}, {"start": 73, "end": 75, "word": "15", "entity_group": "PARAM", "score": 0.9994805550259395}, {"start": 101, "end": 104, "word": "dog", "entity_group": "VAR", "score": 0.998948523040885}, {"start": 111, "end": 113, "word": "12", "entity_group": "PARAM", "score": 0.9992614403751591}, {"start": 148, "end": 152, "word": "1000", "entity_group": "LIMIT", "score": 0.9995634094111773}, {"start": 161, "end": 170, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990669577301596}, {"start": 222, "end": 227, "word": "bears", "entity_group": "VAR", "score": 0.9996761542442779}, {"start": 252, "end": 260, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980286910045642}, {"start": 261, "end": 270, "word": "two times", "entity_group": "PARAM", "score": 0.8180212933665949}, {"start": 279, "end": 284, "word": "bears", "entity_group": "VAR", "score": 0.9996186327169657}, {"start": 288, "end": 292, "word": "dogs", "entity_group": "VAR", "score": 0.9995457362951138}, {"start": 302, "end": 308, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996760839891226}, {"start": 313, "end": 317, "word": "bear", "entity_group": "VAR", "score": 0.9996172548504817}, {"start": 323, "end": 324, "word": "4", "entity_group": "PARAM", "score": 0.9993484245491766}, {"start": 333, "end": 339, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998705485606116}, {"start": 344, "end": 347, "word": "dog", "entity_group": "VAR", "score": 0.9978355025145943}, {"start": 353, "end": 354, "word": "5", "entity_group": "PARAM", "score": 0.9993390975993368}, {"start": 392, "end": 400, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 401, "end": 407, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-1492133110", "document": "Beta Audio makes two types of speakers: regular speakers and portable speakers. Two different teams make each type of speaker. Team A can make at most 120 regular speakers per day and Team B can make at most 200 portable speakers per day. Both teams require the use of a shared testing machine, and this machine can be used to make a maximum of 300 total speakers per day. The profit per regular speaker is $40 and the profit per portable speaker is $60. How many of each speaker should be made to maximize profit?", "order_mapping": {"regular speakers": 0, "portable speakers": 1, "regular speaker": 0, "portable speaker": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular speaker": "40", "portable speaker": "60"}}, "const_declarations": [{"type": "sum", "direction": "maximum", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "200", "var": "portable speakers", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "120", "var": "regular speakers", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular speakers made per day\n- y: Number of portable speakers made per day\n\nObjective:\n- The company aims to maximize its profit. The profit per regular speaker is $40 and the profit per portable speaker is $60. Therefore, the objective function is: Maximize 40x + 60y\n\nConstraints:\n- The shared testing machine can be used to make a maximum of 300 total speakers per day, leading to the constraint: x + y <= 300.\n- Team A can make at most 120 regular speakers per day, resulting in the constraint: x <= 120.\n- Team B can make at most 200 portable speakers per day, leading to the constraint: y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 60y\nConstraints:\nx + y <= 300\nx <= 120\ny <= 200", "canonical": {"objective": [-40.0, -60.0], "constraints": [[1.0, 1.0, 300.0], [1.0, 0.0, 120.0], [0.0, 1.0, 200.0]]}, "solution": {"x": 100, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of regular speakers made per day: RegularSpeakers\n- Number of portable speakers made per day: PortableSpeakers\n\nConstraints:\n- Total number of speakers made by both teams should not exceed 300 per day:\n  RegularSpeakers + PortableSpeakers <= 300\n- Team A can make at most 120 regular speakers per day:\n  RegularSpeakers <= 120\n- Team B can make at most 200 portable speakers per day:\n  PortableSpeakers <= 200\n\nObjective:\n- Maximize profit (40 dollars per regular speaker, 60 dollars per portable speaker):\n  40 * RegularSpeakers + 60 * PortableSpeakers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularSpeakers = intvar(0, 999999999)  # Number of regular speakers made per day\nPortableSpeakers = intvar(0, 999999999)  # Number of portable speakers made per day\n\n# Constraints\nm = Model()\n\n# Total number of speakers made by both teams should not exceed 300 per day:\nm += RegularSpeakers + PortableSpeakers <= 300\n# Team A can make at most 120 regular speakers per day:\nm += RegularSpeakers <= 120\n# Team B can make at most 200 portable speakers per day:\nm += PortableSpeakers <= 200\n\n# Objective\n# Maximize profit (40 dollars per regular speaker, 60 dollars per portable speaker):\nm.maximize(40 * RegularSpeakers + 60 * PortableSpeakers)\n", "entities": [{"start": 41, "end": 57, "word": "regular speakers", "entity_group": "VAR", "score": 0.9999555918286114}, {"start": 62, "end": 79, "word": "portable speakers", "entity_group": "VAR", "score": 0.9999716946121517}, {"start": 146, "end": 153, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987063554838589}, {"start": 154, "end": 157, "word": "120", "entity_group": "LIMIT", "score": 0.9995410631341316}, {"start": 158, "end": 174, "word": "regular speakers", "entity_group": "VAR", "score": 0.9999581158735069}, {"start": 203, "end": 210, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982042245872896}, {"start": 211, "end": 214, "word": "200", "entity_group": "LIMIT", "score": 0.9993572924047391}, {"start": 215, "end": 232, "word": "portable speakers", "entity_group": "VAR", "score": 0.9999380282019183}, {"start": 339, "end": 346, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9911036960876087}, {"start": 350, "end": 353, "word": "300", "entity_group": "LIMIT", "score": 0.9996299218481899}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999364478795336}, {"start": 394, "end": 409, "word": "regular speaker", "entity_group": "VAR", "score": 0.9999578609378887}, {"start": 415, "end": 417, "word": "40", "entity_group": "PARAM", "score": 0.9995624501632423}, {"start": 426, "end": 432, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999935036278438}, {"start": 437, "end": 453, "word": "portable speaker", "entity_group": "VAR", "score": 0.9998884174738814}, {"start": 459, "end": 461, "word": "60", "entity_group": "PARAM", "score": 0.9996676227288867}, {"start": 507, "end": 515, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040364571}, {"start": 516, "end": 522, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "-2062598061", "document": "Ella has $15000 to invest in the healthcare and fashion industries. The money invested in the healthcare industry earns 12% while the money invested in the fashion industry earns 9.5%. She has decided that the money invested in the healthcare industry be at least two times as much as the money invested in the fashion industry. However, the money invested in the healthcare industry must be at most $12000. How much should she invest in each industry in order to maximize profit?", "order_mapping": {"healthcare": 0, "fashion industries": 1, "healthcare industry": 0, "fashion industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fashion industry": "9.5%", "healthcare industry": "12%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "15000", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "12000", "var": "healthcare industry", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "healthcare industry", "direction": "at least", "param": "two times", "y_var": "fashion industry", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the healthcare industry\n- y: Dollars invested in the fashion industry\n\nObjective:\n- Ella wants to maximize her profit. The money invested in the healthcare industry earns 12% while the money invested in the fashion industry earns 9.5%. Therefore, the objective function is: Maximize 0.12x + 0.095y\n\nConstraints:\n- Ella has $15000 to invest, so the constraint is: x + y <= 15000.\n- The money invested in the healthcare industry must be at most $12000, leading to the constraint: x <= 12000.\n- Ella has decided that the money invested in the healthcare industry be at least two times as much as the money invested in the fashion industry, resulting in the constraint: x >= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.12x + 0.095y\nConstraints:\nx + y <= 15000\nx <= 12000\nx >= 2y", "canonical": {"objective": [-0.12, -0.095], "constraints": [[1.0, 1.0, 15000.0], [1.0, 0.0, 12000.0], [-1.0, 2.0, 0.0]]}, "solution": {"x": 12000, "y": 3000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the healthcare industry: Healthcare\n- Amount invested in the fashion industry: Fashion\n\nConstraints:\n- Total investment should not exceed $15000:\n  Healthcare + Fashion <= 15000\n- The money invested in the healthcare industry must be at least two times as much as the money invested in the fashion industry:\n  Healthcare >= 2 * Fashion\n- The money invested in the healthcare industry must be at most $12000:\n  Healthcare <= 12000\n\nObjective:\n- Maximize profit (12% from healthcare, 9.5% from fashion):\n  0.12 * Healthcare + 0.095 * Fashion\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHealthcare = intvar(0, 12000)  # Amount invested in the healthcare industry\nFashion = intvar(0, 15000)  # Amount invested in the fashion industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $15000:\nm += Healthcare + Fashion <= 15000\n# The money invested in the healthcare industry must be at least two times as much as the money invested in the fashion industry:\nm += Healthcare >= 2 * Fashion\n# The money invested in the healthcare industry must be at most $12000:\nm += Healthcare <= 12000\n\n# Objective\n# Maximize profit (12% from healthcare, 9.5% from fashion):\nm.maximize(0.12 * Healthcare + 0.095 * Fashion)\n", "entities": [{"start": 5, "end": 8, "word": "has", "entity_group": "CONST_DIR", "score": 0.9941255725018685}, {"start": 11, "end": 16, "word": "15000", "entity_group": "LIMIT", "score": 0.9992742259107522}, {"start": 34, "end": 44, "word": "healthcare", "entity_group": "VAR", "score": 0.9993266550692294}, {"start": 49, "end": 67, "word": "fashion industries", "entity_group": "VAR", "score": 0.999825537331758}, {"start": 96, "end": 115, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999318017620312}, {"start": 116, "end": 121, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9955719029238399}, {"start": 122, "end": 126, "word": "12 %", "entity_group": "PARAM", "score": 0.9887663000536016}, {"start": 159, "end": 175, "word": "fashion industry", "entity_group": "VAR", "score": 0.9999151890982281}, {"start": 176, "end": 181, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.988358846470765}, {"start": 182, "end": 187, "word": "9.5 %", "entity_group": "PARAM", "score": 0.9852973699579961}, {"start": 237, "end": 256, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999082181233335}, {"start": 260, "end": 268, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9941944393669082}, {"start": 269, "end": 272, "word": "two", "entity_group": "PARAM", "score": 0.9916926176418535}, {"start": 316, "end": 332, "word": "fashion industry", "entity_group": "VAR", "score": 0.9999286893864457}, {"start": 371, "end": 390, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9998979364170203}, {"start": 399, "end": 406, "word": "at most", "entity_group": "CONST_DIR", "score": 0.993193998952096}, {"start": 409, "end": 414, "word": "12000", "entity_group": "LIMIT", "score": 0.9996644572314287}, {"start": 473, "end": 481, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9938382215249928}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997283316322069}]}
{"doc_id": "-1970166929", "document": "Martin has $2000000 to invest in the following technology sectors: GPUs, CPUs, software and mobile devices. The annual rate of return for each is as follows: GPUs, 4%; CPUs, 6%, software, 11%, mobile devices, 8%. Martin has the following conditions. The amount he invests in GPUs cannot exceed the amount invested in CPUs. Similarly, the amount invested in mobile devices cannot exceed the amount invested in software. Lastly, at most 9% of the investment can be in GPUs. How much money should Martin invest in each sector to maximize his return?", "order_mapping": {"GPUs": 0, "CPUs": 1, "software": 2, "mobile devices": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"GPUs": "4%", "CPUs": "6%", "software": "11%", "mobile devices": "8%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "2000000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "GPUs", "direction": "cannot exceed", "y_var": "CPUs", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "mobile devices", "direction": "cannot exceed", "y_var": "software", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "9%", "var": "GPUs", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in GPUs\n- y: Dollars invested in CPUs\n- z: Dollars invested in software\n- w: Dollars invested in mobile devices\n\nObjective:\n- Martin aims to maximize his return. The annual rate of return for each sector is as follows: GPUs, 4%; CPUs, 6%; software, 11%; mobile devices, 8%. Therefore, the objective function is: Maximize 0.04x + 0.06y + 0.11z + 0.08w\n\nConstraints:\n- The total amount available for investment is $2,000,000, so the constraint is: x + y + z + w <= 2000000.\n- The amount invested in GPUs cannot exceed the amount invested in CPUs, leading to the constraint: x <= y.\n- The amount invested in mobile devices cannot exceed the amount invested in software, resulting in the constraint: w <= z.\n- At most 9% of the investment can be in GPUs, leading to the constraint: x <= 0.09(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.04x + 0.06y + 0.11z + 0.08w\nConstraints:\nx + y + z + w <= 2000000\nx <= y\nw <= z\nx <= 0.09(x + y + z + w)", "canonical": {"objective": [-0.04, -0.06, -0.11, -0.08], "constraints": [[1.0, 1.0, 1.0, 1.0, 2000000.0], [1.0, -1.0, 0.0, 0.0, 0.0], [0.0, 0.0, -1.0, 1.0, 0.0], [0.91, -0.09, -0.09, -0.09, 0.0]]}, "solution": {"x": 0, "y": 0, "z": 2000000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in GPUs: GPUs\n- Amount invested in CPUs: CPUs\n- Amount invested in software: Software\n- Amount invested in mobile devices: MobileDevices\n\nConstraints:\n- Total investment should not exceed $2000000:\n  GPUs + CPUs + Software + MobileDevices <= 2000000\n- The amount invested in GPUs cannot exceed the amount invested in CPUs:\n  GPUs <= CPUs\n- The amount invested in mobile devices cannot exceed the amount invested in software:\n  MobileDevices <= Software\n- At most 9% of the investment can be in GPUs:\n  GPUs <= 0.09 * (GPUs + CPUs + Software + MobileDevices)\n\nObjective:\n- Maximize return (4% for GPUs, 6% for CPUs, 11% for software, 8% for mobile devices):\n  0.04 * GPUs + 0.06 * CPUs + 0.11 * Software + 0.08 * MobileDevices\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGPUs = intvar(0, 2000000)  # Amount invested in GPUs\nCPUs = intvar(0, 2000000)  # Amount invested in CPUs\nSoftware = intvar(0, 2000000)  # Amount invested in software\nMobileDevices = intvar(0, 2000000)  # Amount invested in mobile devices\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $2000000:\nm += GPUs + CPUs + Software + MobileDevices <= 2000000\n# The amount invested in GPUs cannot exceed the amount invested in CPUs:\nm += GPUs <= CPUs\n# The amount invested in mobile devices cannot exceed the amount invested in software:\nm += MobileDevices <= Software\n# At most 9% of the investment can be in GPUs:\nm += GPUs <= 0.09 * (GPUs + CPUs + Software + MobileDevices)\n\n# Objective\n# Maximize return (4% for GPUs, 6% for CPUs, 11% for software, 8% for mobile devices):\nm.maximize(0.04 * GPUs + 0.06 * CPUs + 0.11 * Software + 0.08 * MobileDevices)\n", "entities": [{"start": 7, "end": 10, "word": "has", "entity_group": "CONST_DIR", "score": 0.9901327190030157}, {"start": 13, "end": 20, "word": "2000000", "entity_group": "LIMIT", "score": 0.9992243903633772}, {"start": 69, "end": 73, "word": "GPUs", "entity_group": "VAR", "score": 0.9996508023318376}, {"start": 76, "end": 80, "word": "CPUs", "entity_group": "VAR", "score": 0.9992599328280032}, {"start": 83, "end": 91, "word": "software", "entity_group": "VAR", "score": 0.9990319775023507}, {"start": 96, "end": 110, "word": "mobile devices", "entity_group": "VAR", "score": 0.9999687890298998}, {"start": 132, "end": 138, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9926485410883785}, {"start": 164, "end": 168, "word": "GPUs", "entity_group": "VAR", "score": 0.9992143362935045}, {"start": 171, "end": 174, "word": "4 %", "entity_group": "PARAM", "score": 0.9976498619677877}, {"start": 177, "end": 181, "word": "CPUs", "entity_group": "VAR", "score": 0.999094378666005}, {"start": 184, "end": 187, "word": "6 %", "entity_group": "PARAM", "score": 0.9892249795919751}, {"start": 190, "end": 198, "word": "software", "entity_group": "VAR", "score": 0.9993598310224985}, {"start": 201, "end": 205, "word": "11 %", "entity_group": "PARAM", "score": 0.9953124668225576}, {"start": 208, "end": 222, "word": "mobile devices", "entity_group": "VAR", "score": 0.9999615500004738}, {"start": 225, "end": 228, "word": "8 %", "entity_group": "PARAM", "score": 0.9901562455125206}, {"start": 294, "end": 298, "word": "GPUs", "entity_group": "VAR", "score": 0.9996782200373929}, {"start": 299, "end": 313, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.971690415591454}, {"start": 337, "end": 341, "word": "CPUs", "entity_group": "VAR", "score": 0.9997296742271448}, {"start": 379, "end": 393, "word": "mobile devices", "entity_group": "VAR", "score": 0.9999453922117127}, {"start": 394, "end": 408, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9786105373290099}, {"start": 432, "end": 440, "word": "software", "entity_group": "VAR", "score": 0.9997382681005651}, {"start": 452, "end": 459, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988258356770069}, {"start": 460, "end": 463, "word": "9 %", "entity_group": "LIMIT", "score": 0.9567561584430667}, {"start": 492, "end": 496, "word": "GPUs", "entity_group": "VAR", "score": 0.9998207281226432}, {"start": 553, "end": 561, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991784570825001}, {"start": 566, "end": 572, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9985021650168959}]}
{"doc_id": "-63495762", "document": "Eta Auto makes two versions of the same car, a hybrid model and an electric model. They make y1 hybrid models per day and y2 electric models per day. The profit per hybrid model is $4500 and the profit per electric model is $5500 (y1 and y2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to at most 9 hybrid models and 5 electric models. In addition, the manufacturer can make a maximum of 10 total cars a day. How many cars of each model should the manufacturer make in order to maximize profit?", "order_mapping": {"hybrid model": 0, "electric model": 1, "hybrid models": 0, "electric models": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"electric model": "5500", "hybrid model": "4500"}}, "const_declarations": [{"type": "sum", "direction": "maximum", "limit": "10", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "9", "var": "hybrid models", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "electric models", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- y1: Number of hybrid models produced per day\n- y2: Number of electric models produced per day\n\nObjective:\n- The manufacturer aims to maximize its daily profit. The profit per hybrid model is $4500 and the profit per electric model is $5500. Therefore, the objective function is: Maximize 4500y1 + 5500y2\n\nConstraints:\n- The manufacturer can make a maximum of 10 total cars a day, leading to the constraint: y1 + y2 <= 10.\n- The daily demand for these cars is limited to at most 9 hybrid models, resulting in the constraint: y1 <= 9.\n- The daily demand for these cars is limited to at most 5 electric models, leading to the constraint: y2 <= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4500y1 + 5500y2\nConstraints:\ny1 + y2 <= 10\ny1 <= 9\ny2 <= 5", "canonical": {"objective": [0.0, -4500.0], "constraints": [[0.0, 2.0, 7.0], [0.0, 1.0, 8.0], [0.0, 1.0, 3.0]]}, "solution": {"x": 0, "y": 3}, "pseudo_model": "\nDecision Variables:\n- Number of hybrid models made per day: HybridModels\n- Number of electric models made per day: ElectricModels\n\nConstraints:\n- Total number of cars made should not exceed 10 per day:\n  HybridModels + ElectricModels <= 10\n- At most 9 hybrid models per day:\n  HybridModels <= 9\n- At most 5 electric models per day:\n  ElectricModels <= 5\n\nObjective:\n- Maximize profit (4500 dollars per hybrid model, 5500 dollars per electric model):\n  4500 * HybridModels + 5500 * ElectricModels\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHybridModels = intvar(0, 999999999)  # Number of hybrid models made per day\nElectricModels = intvar(0, 999999999)  # Number of electric models made per day\n\n# Constraints\nm = Model()\n\n# Total number of cars made should not exceed 10 per day:\nm += HybridModels + ElectricModels <= 10\n# Number of hybrid models made should be at most 9 per day:\nm += HybridModels <= 9\n# Number of electric models made should be at most 5 per day:\nm += ElectricModels <= 5\n\n# Objective\n# Maximize profit (4500 dollars per hybrid model, 5500 dollars per electric model):\nm.maximize(4500 * HybridModels + 5500 * ElectricModels)\n", "entities": [{"start": 48, "end": 60, "word": "hybrid model", "entity_group": "VAR", "score": 0.9999778001384256}, {"start": 68, "end": 82, "word": "electric model", "entity_group": "VAR", "score": 0.9999790466344153}, {"start": 98, "end": 111, "word": "hybrid models", "entity_group": "VAR", "score": 0.999984584263819}, {"start": 127, "end": 142, "word": "electric models", "entity_group": "VAR", "score": 0.9999470141848465}, {"start": 157, "end": 163, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999418542418539}, {"start": 168, "end": 180, "word": "hybrid model", "entity_group": "VAR", "score": 0.9999538830963888}, {"start": 186, "end": 190, "word": "4500", "entity_group": "PARAM", "score": 0.9995624501632423}, {"start": 199, "end": 205, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999935036278438}, {"start": 210, "end": 224, "word": "electric model", "entity_group": "VAR", "score": 0.9999209416012724}, {"start": 230, "end": 234, "word": "5500", "entity_group": "PARAM", "score": 0.9996808528494174}, {"start": 348, "end": 355, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99839971606631}, {"start": 356, "end": 357, "word": "9", "entity_group": "LIMIT", "score": 0.999619405218098}, {"start": 358, "end": 371, "word": "hybrid models", "entity_group": "VAR", "score": 0.9999581101545622}, {"start": 376, "end": 377, "word": "5", "entity_group": "LIMIT", "score": 0.9996896318395746}, {"start": 378, "end": 393, "word": "electric models", "entity_group": "VAR", "score": 0.9999693257373858}, {"start": 438, "end": 445, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9942959461916262}, {"start": 449, "end": 451, "word": "10", "entity_group": "LIMIT", "score": 0.9996440888679868}, {"start": 540, "end": 548, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993210574349281}, {"start": 549, "end": 555, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147079}]}
{"doc_id": "-2047585894", "document": "Eli has 100 acres available to grow beans and pumpkins. He must grow a minimum of 5 acres of beans and 10 acres of pumpkins. Pumpkins sell better so he prefers to plant more pumpkins than beans. However, due to labor constraints, he can only plant at most 3 times the quantity of pumpkins as beans. If the profit per acre of beans is $100 and the profit per acre of pumpkins is $110, how many acres of each should Eli plant to maximize profit?", "order_mapping": {"beans": 0, "pumpkins": 1, "Pumpkins": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"beans": "100", "pumpkins": "110"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5", "var": "beans", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10", "var": "pumpkins", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "pumpkins", "direction": "more", "y_var": "beans", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "pumpkins", "direction": "at most", "param": "3 times", "y_var": "beans", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of beans\n- y: Acres of pumpkins\n\nObjective:\n- Eli wants to maximize his profit. The profit per acre of beans is $100 and the profit per acre of pumpkins is $110. Therefore, the objective function is: Maximize 100x + 110y\n\nConstraints:\n- Eli has 100 acres available for planting, so the constraint is: x + y <= 100.\n- He must grow a minimum of 5 acres of beans and 10 acres of pumpkins, leading to the constraints: x >= 5 and y >= 10.\n- Eli prefers to plant more pumpkins than beans, so the constraint is: y >= x.\n- Due to labor constraints, he can only plant at most 3 times the quantity of pumpkins as beans, leading to the constraint: y <= 3x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 110y\nConstraints:\nx + y <= 100\nx >= 5\ny >= 10\ny >= x\ny <= 3x", "canonical": {"objective": [-100.0, -110.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -10.0], [1.0, -1.0, 0.0], [-3.0, 1.0, 0.0]]}, "solution": {"x": 25, "y": 75}, "pseudo_model": "\nDecision Variables:\n- Number of acres for beans: Beans\n- Number of acres for pumpkins: Pumpkins\n\nConstraints:\n- Total acres available for planting is 100:\n  Beans + Pumpkins <= 100\n- Minimum of 5 acres of beans:\n  Beans >= 5\n- Minimum of 10 acres of pumpkins:\n  Pumpkins >= 10\n- Can only plant at most 3 times the quantity of pumpkins as beans:\n  Pumpkins <= 3 * Beans\n\nObjective:\n- Maximize profit (profit per acre of beans is $100, profit per acre of pumpkins is $110):\n  100 * Beans + 110 * Pumpkins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeans = intvar(0, 999999999)  # Number of acres for beans\nPumpkins = intvar(0, 999999999)  # Number of acres for pumpkins\n\n# Constraints\nm = Model()\n\n# Total acres available for planting is 100:\nm += Beans + Pumpkins <= 100\n# Must grow a minimum of 5 acres of beans:\nm += Beans >= 5\n# Must grow a minimum of 10 acres of pumpkins:\nm += Pumpkins >= 10\n# Prefer to plant more pumpkins than beans (implicit in the objective function and the 3 times constraint)\n# Can only plant at most 3 times the quantity of pumpkins as beans:\nm += Pumpkins <= 3 * Beans\n\n# Objective\n# Maximize profit (profit per acre of beans is $100, profit per acre of pumpkins is $110):\nm.maximize(100 * Beans + 110 * Pumpkins)\n", "entities": [{"start": 8, "end": 11, "word": "100", "entity_group": "LIMIT", "score": 0.9995776403251198}, {"start": 18, "end": 27, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993831319117635}, {"start": 36, "end": 41, "word": "beans", "entity_group": "VAR", "score": 0.9992968071873868}, {"start": 46, "end": 54, "word": "pumpkins", "entity_group": "VAR", "score": 0.9989934544009406}, {"start": 72, "end": 79, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9970486446895617}, {"start": 83, "end": 84, "word": "5", "entity_group": "LIMIT", "score": 0.9997741453001215}, {"start": 94, "end": 99, "word": "beans", "entity_group": "VAR", "score": 0.9979990619453525}, {"start": 104, "end": 106, "word": "10", "entity_group": "LIMIT", "score": 0.9997228400332233}, {"start": 116, "end": 124, "word": "pumpkins", "entity_group": "VAR", "score": 0.9996149947032054}, {"start": 127, "end": 135, "word": "Pumpkins", "entity_group": "VAR", "score": 0.9995763633644225}, {"start": 171, "end": 175, "word": "more", "entity_group": "CONST_DIR", "score": 0.9959282463969631}, {"start": 176, "end": 184, "word": "pumpkins", "entity_group": "VAR", "score": 0.9976370220797659}, {"start": 190, "end": 195, "word": "beans", "entity_group": "VAR", "score": 0.9996031908531559}, {"start": 253, "end": 260, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974521748798995}, {"start": 261, "end": 268, "word": "3 times", "entity_group": "PARAM", "score": 0.5000272639974145}, {"start": 285, "end": 293, "word": "pumpkins", "entity_group": "VAR", "score": 0.9994806504454992}, {"start": 297, "end": 302, "word": "beans", "entity_group": "VAR", "score": 0.9997804186777439}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998995453797728}, {"start": 331, "end": 336, "word": "beans", "entity_group": "VAR", "score": 0.9994952128877883}, {"start": 342, "end": 345, "word": "100", "entity_group": "PARAM", "score": 0.9992432702918816}, {"start": 354, "end": 360, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927981840414}, {"start": 373, "end": 381, "word": "pumpkins", "entity_group": "VAR", "score": 0.9992276033266423}, {"start": 387, "end": 390, "word": "110", "entity_group": "PARAM", "score": 0.9995941661920631}, {"start": 436, "end": 444, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843475604922}, {"start": 445, "end": 451, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998661900137685}]}
{"doc_id": "-147514762", "document": "An electronics store sells televisions and speakers. A television costs the store $400 and a speaker costs the store $200. The store can spend at most $25000. The store sells at least 20 televisions but at most 75 televisions. Also the number of speakers sold is at most a half of the number of televisions sold. If the profit per television sold is $400 and the profit per speaker sold is $250, how many of each should the store buy and sell to maximize profit?", "order_mapping": {"televisions": 0, "speakers": 1, "television": 0, "speaker": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"speaker": "250", "television": "400"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "25000", "terms": {"television": "400", "speaker": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "televisions", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "75", "var": "televisions", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "speakers", "direction": "at most", "param": "half", "y_var": "televisions", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of televisions bought and sold\n- y: Number of speakers bought and sold\n\nObjective:\n- The store aims to maximize its profit. The profit per television sold is $400 and the profit per speaker sold is $250. Therefore, the objective function is: Maximize 400x + 250y\n\nConstraints:\n- The store can spend at most $25000, so the constraint is: 400x + 200y <= 25000.\n- The store sells at least 20 televisions but at most 75 televisions, leading to the constraints: 20 <= x <= 75.\n- The number of speakers sold is at most a half of the number of televisions sold, resulting in the constraint: y <= 0.5x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 250y\nConstraints:\n400x + 200y <= 25000\n20 <= x <= 75\ny <= 0.5x", "canonical": {"objective": [-400.0, -250.0], "constraints": [[400.0, 200.0, 25000.0], [-0.5, 1.0, 0.0], [-1.0, 0.0, -20.0], [1.0, 0.0, 75.0]]}, "solution": {"x": 50, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of televisions bought and sold: Televisions\n- Number of speakers bought and sold: Speakers\n\nConstraints:\n- The store can spend at most $25000 on buying televisions and speakers:\n  400 * Televisions + 200 * Speakers <= 25000\n- The store sells at least 20 televisions but at most 75 televisions:\n  20 <= Televisions <= 75\n- The number of speakers sold is at most half of the number of televisions sold:\n  Speakers <= 0.5 * Televisions\n\nObjective:\n- Maximize profit (Profit per television sold is $400 and per speaker sold is $250):\n  400 * Televisions + 250 * Speakers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTelevisions = intvar(0, 999999999)  # Number of televisions bought and sold\nSpeakers = intvar(0, 999999999)  # Number of speakers bought and sold\n\n# Constraints\nm = Model()\n\n# The store can spend at most $25000 (A television costs $400 and a speaker costs $200):\nm += 400 * Televisions + 200 * Speakers <= 25000\n# The store sells at least 20 televisions but at most 75 televisions:\nm += Televisions >= 20\nm += Televisions <= 75\n# The number of speakers sold is at most half of the number of televisions sold:\nm += Speakers <= 0.5 * Televisions\n\n# Objective\n# Maximize profit (Profit per television sold is $400 and per speaker sold is $250):\nm.maximize(400 * Televisions + 250 * Speakers)\n", "entities": [{"start": 27, "end": 38, "word": "televisions", "entity_group": "VAR", "score": 0.9997763071054329}, {"start": 43, "end": 51, "word": "speakers", "entity_group": "VAR", "score": 0.9997336021908928}, {"start": 56, "end": 66, "word": "television", "entity_group": "VAR", "score": 0.999731145336498}, {"start": 85, "end": 88, "word": "400", "entity_group": "PARAM", "score": 0.999729169114006}, {"start": 95, "end": 102, "word": "speaker", "entity_group": "VAR", "score": 0.9998219254318669}, {"start": 121, "end": 124, "word": "200", "entity_group": "PARAM", "score": 0.9997210160285644}, {"start": 147, "end": 154, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9960110229680139}, {"start": 157, "end": 162, "word": "25000", "entity_group": "LIMIT", "score": 0.9997026761468939}, {"start": 181, "end": 189, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986745189999279}, {"start": 190, "end": 192, "word": "20", "entity_group": "LIMIT", "score": 0.9997004459492684}, {"start": 193, "end": 204, "word": "televisions", "entity_group": "VAR", "score": 0.9990602444871053}, {"start": 209, "end": 216, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987223076942648}, {"start": 217, "end": 219, "word": "75", "entity_group": "LIMIT", "score": 0.9997471194395487}, {"start": 220, "end": 231, "word": "televisions", "entity_group": "VAR", "score": 0.9995627565746972}, {"start": 253, "end": 261, "word": "speakers", "entity_group": "VAR", "score": 0.9989380093529908}, {"start": 270, "end": 277, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9968930130529723}, {"start": 280, "end": 284, "word": "half", "entity_group": "PARAM", "score": 0.989400270769092}, {"start": 302, "end": 313, "word": "televisions", "entity_group": "VAR", "score": 0.9990964900685557}, {"start": 328, "end": 334, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998912539729427}, {"start": 339, "end": 349, "word": "television", "entity_group": "VAR", "score": 0.9993427397032876}, {"start": 360, "end": 363, "word": "400", "entity_group": "PARAM", "score": 0.999596517076162}, {"start": 372, "end": 378, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386216308711}, {"start": 383, "end": 390, "word": "speaker", "entity_group": "VAR", "score": 0.9990377006135007}, {"start": 401, "end": 404, "word": "250", "entity_group": "PARAM", "score": 0.9996530293429743}, {"start": 457, "end": 465, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987210781682757}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997433452488922}]}
{"doc_id": "-337748765", "document": "A furniture company employs designers earning $1,500 per week and assemblers earning $1,000 per week. It is required to keep the weekly wage bill below $50,000. The company requires a minimum of 20 staff, of whom at least 10 must be assemblers. Union regulations require that the number of designers should be at least one third the number of assemblers. Formulate an LP to minimize the wage bill.", "order_mapping": {"designers": 0, "assemblers": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"designers": "1,500", "assemblers": "1,000"}}, "const_declarations": [{"type": "linear", "direction": "below", "limit": "50,000", "terms": {"designers": "1,500", "assemblers": "1,000"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "20", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "assemblers", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "designers", "direction": "at least", "param": "one third", "y_var": "assemblers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of designers\n- y: Number of assemblers\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both designers and assemblers. Given that designers earn $1,500 per week and assemblers earn $1,000 per week, the objective function is: Minimize 1500x + 1000y\n\nConstraints:\n- The total wage bill needs to be kept below $50,000, leading to the constraint: 1500x + 1000y <= 50000.\n- The company needs a minimum of 20 staff, so the constraint is: x + y >= 20.\n- At least 10 staff must be assemblers, leading to the constraint: y >= 10.\n- Union regulations require that the number of designers should be at least one third the number of assemblers, resulting in the constraint: x >= 1/3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1500x + 1000y\nConstraints:\n1500x + 1000y <= 50000\nx + y >= 20\ny >= 10\nx >= 1/3y", "canonical": {"objective": [1500.0, 1000.0], "constraints": [[1500.0, 1000.0, 50000.0], [-1.0, -1.0, -20.0], [0.0, -1.0, -10.0], [-1.0, 0.3333333333333333, 0.0]]}, "solution": {"x": 5, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of designers employed: Designers\n- Number of assemblers employed: Assemblers\n\nConstraints:\n- Weekly wage bill should be below $50,000:\n  1500 * Designers + 1000 * Assemblers <= 50000\n- Minimum of 20 staff required:\n  Designers + Assemblers >= 20\n- At least 10 assemblers required:\n  Assemblers >= 10\n- Number of designers should be at least one third the number of assemblers:\n  Designers >= 1/3 * Assemblers\n\nObjective:\n- Minimize the wage bill:\n  1500 * Designers + 1000 * Assemblers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDesigners = intvar(0, 999999999)  # number of designers employed\nAssemblers = intvar(0, 999999999)  # number of assemblers employed\n\n# Constraints\nm = Model()\n\n# The weekly wage bill should be kept below $50,000:\nm += 1500 * Designers + 1000 * Assemblers <= 50000\n# The company requires a minimum of 20 staff:\nm += Designers + Assemblers >= 20\n# At least 10 must be assemblers:\nm += Assemblers >= 10\n# The number of designers should be at least one third the number of assemblers:\nm += Designers >= (1/3) * Assemblers\n\n# Objective\n# Minimize the wage bill:\nm.minimize(1500 * Designers + 1000 * Assemblers)\n", "entities": [{"start": 28, "end": 37, "word": "designers", "entity_group": "VAR", "score": 0.9995205025744338}, {"start": 38, "end": 45, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9853474135653248}, {"start": 48, "end": 53, "word": "1,500", "entity_group": "PARAM", "score": 0.9994160930422461}, {"start": 67, "end": 77, "word": "assemblers", "entity_group": "VAR", "score": 0.9997544559389575}, {"start": 78, "end": 85, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9689633650061059}, {"start": 88, "end": 93, "word": "1,000", "entity_group": "PARAM", "score": 0.9993994069702214}, {"start": 132, "end": 148, "word": "weekly wage bill", "entity_group": "OBJ_NAME", "score": 0.3082754116924619}, {"start": 149, "end": 154, "word": "below", "entity_group": "CONST_DIR", "score": 0.987825282863391}, {"start": 157, "end": 163, "word": "50,000", "entity_group": "LIMIT", "score": 0.9997067153795964}, {"start": 189, "end": 196, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9939776374276201}, {"start": 200, "end": 202, "word": "20", "entity_group": "LIMIT", "score": 0.9994950035014135}, {"start": 219, "end": 227, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985142372462505}, {"start": 228, "end": 230, "word": "10", "entity_group": "LIMIT", "score": 0.9997070224073739}, {"start": 239, "end": 249, "word": "assemblers", "entity_group": "VAR", "score": 0.9997189051889998}, {"start": 297, "end": 306, "word": "designers", "entity_group": "VAR", "score": 0.999009996212619}, {"start": 317, "end": 325, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977121149279982}, {"start": 326, "end": 335, "word": "one third", "entity_group": "PARAM", "score": 0.9093811541192125}, {"start": 350, "end": 360, "word": "assemblers", "entity_group": "VAR", "score": 0.9997274900779042}, {"start": 382, "end": 390, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987758005404119}, {"start": 391, "end": 404, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.7882408311459391}]}
{"doc_id": "-448827668", "document": "A cruise ship can take at most 1500 people. A profit of $500 is made on each long-term cruise ticket and a profit of $150 is made on each week-long cruise ticket. There are a minimum of 35 long-term cruise tickets available. However, at least 4 times as many people prefer to buy week-long cruise tickets than long-term cruise tickets. How many of each ticket should be sold to maximize profit?", "order_mapping": {"long-term cruise": 0, "week-long cruise": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"long-term cruise": "500", "week-long cruise": "150"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "1500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "35", "var": "long-term cruise", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "week-long cruise", "direction": "at least", "param": "4 times", "y_var": "long-term cruise", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of long-term cruise tickets sold\n- y: Number of week-long cruise tickets sold\n\nObjective:\n- The cruise ship aims to maximize its profit. A profit of $500 is made on each long-term cruise ticket and a profit of $150 is made on each week-long cruise ticket. Therefore, the objective function is: Maximize 500x + 150y\n\nConstraints:\n- The cruise ship can take at most 1500 people, so the constraint is: x + y <= 1500.\n- There are a minimum of 35 long-term cruise tickets available, leading to the constraint: x >= 35.\n- At least 4 times as many people prefer to buy week-long cruise tickets than long-term cruise tickets, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 150y\nConstraints:\nx + y <= 1500\nx >= 35\ny >= 4x", "canonical": {"objective": [-500.0, -150.0], "constraints": [[1.0, 1.0, 1500.0], [-1.0, 0.0, -35.0], [4.0, -1.0, 0.0]]}, "solution": {"x": 300, "y": 1200}, "pseudo_model": "\nDecision Variables:\n- Number of long-term cruise tickets sold: LongTermCruise\n- Number of week-long cruise tickets sold: WeekLongCruise\n\nConstraints:\n- Total number of tickets sold should not exceed 1500:\n  LongTermCruise + WeekLongCruise <= 1500\n- At least 35 long-term cruise tickets should be sold:\n  LongTermCruise >= 35\n- The number of week-long cruise tickets sold should be at least 4 times the number of long-term cruise tickets sold:\n  WeekLongCruise >= 4 * LongTermCruise\n\nObjective:\n- Maximize profit ($500 profit per long-term cruise ticket, $150 profit per week-long cruise ticket):\n  500 * LongTermCruise + 150 * WeekLongCruise\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLongTermCruise = intvar(0, 999999999)  # Number of long-term cruise tickets sold\nWeekLongCruise = intvar(0, 999999999)  # Number of week-long cruise tickets sold\n\n# Constraints\nm = Model()\n\n# The cruise ship can take at most 1500 people:\nm += LongTermCruise + WeekLongCruise <= 1500\n# There are a minimum of 35 long-term cruise tickets available:\nm += LongTermCruise >= 35\n# At least 4 times as many people prefer week-long cruise tickets than long-term cruise tickets:\nm += WeekLongCruise >= 4 * LongTermCruise\n\n# Objective\n# Maximize profit ($500 profit per long-term cruise ticket, $150 profit per week-long cruise ticket):\nm.maximize(500 * LongTermCruise + 150 * WeekLongCruise)\n", "entities": [{"start": 23, "end": 30, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989010834804709}, {"start": 31, "end": 35, "word": "1500", "entity_group": "LIMIT", "score": 0.9996272016490705}, {"start": 47, "end": 53, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999404892615271}, {"start": 59, "end": 62, "word": "500", "entity_group": "PARAM", "score": 0.9995726107800995}, {"start": 79, "end": 97, "word": "long - term cruise", "entity_group": "VAR", "score": 0.9996950025583651}, {"start": 111, "end": 117, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998604413171768}, {"start": 123, "end": 126, "word": "150", "entity_group": "PARAM", "score": 0.9996577984238537}, {"start": 143, "end": 161, "word": "week - long cruise", "entity_group": "VAR", "score": 0.9987929473525462}, {"start": 183, "end": 190, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9962247321624907}, {"start": 194, "end": 196, "word": "35", "entity_group": "LIMIT", "score": 0.999431553310161}, {"start": 197, "end": 215, "word": "long - term cruise", "entity_group": "VAR", "score": 0.9996119649023331}, {"start": 246, "end": 254, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977631949536742}, {"start": 255, "end": 262, "word": "4 times", "entity_group": "PARAM", "score": 0.8644317872603741}, {"start": 292, "end": 310, "word": "week - long cruise", "entity_group": "VAR", "score": 0.9989412502896027}, {"start": 324, "end": 342, "word": "long - term cruise", "entity_group": "VAR", "score": 0.9996945149456458}, {"start": 395, "end": 403, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995676800936676}, {"start": 404, "end": 410, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999914730623649}]}
{"doc_id": "493111753", "document": "Modern Bicycle sells two models of a bike: a folding bike and a touring bike. The folding bike costs $550 and yields a profit of $200. The touring bike costs $700 and yields a profit of $350. The bike shop owner knows that the monthly demand will be at most 100 bikes. He also wants to make sure that there is at most $30000 worth of bikes in stock. How many bikes of each type should be stocked in order to maximize profit?", "order_mapping": {"folding bike": 0, "touring bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"folding bike": "200", "touring bike": "350"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "30000", "terms": {"folding bike": "550", "touring bike": "700"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of folding bikes\n- y: Number of touring bikes\n\nObjective:\n- The bike shop owner wants to maximize the profit. The folding bike costs $550 and yields a profit of $200, while the touring bike costs $700 and yields a profit of $350. Therefore, the objective function is: Maximize 200x + 350y\n\nConstraints:\n- The monthly demand will be at most 100 bikes, leading to the constraint: x + y <= 100.\n- The total value of bikes in stock should be at most $30000, leading to the constraint: 550x + 700y <= 30000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 350y\nConstraints:\nx + y <= 100\n550x + 700y <= 30000", "canonical": {"objective": [-200.0, -350.0], "constraints": [[1.0, 1.0, 100.0], [550.0, 700.0, 30000.0]]}, "solution": {"x": 1, "y": 42}, "pseudo_model": "\nDecision Variables:\n- Number of folding bikes stocked: FoldingBikes\n- Number of touring bikes stocked: TouringBikes\n\nConstraints:\n- Total number of bikes stocked should not exceed 100:\n  FoldingBikes + TouringBikes <= 100\n- The total cost of bikes in stock should not exceed $30000 (folding bike costs $550, touring bike costs $700):\n  550 * FoldingBikes + 700 * TouringBikes <= 30000\n\nObjective:\n- Maximize profit ($200 profit per folding bike, $350 profit per touring bike):\n  200 * FoldingBikes + 350 * TouringBikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFoldingBikes = intvar(0, 999999999)  # Number of folding bikes stocked\nTouringBikes = intvar(0, 999999999)  # Number of touring bikes stocked\n\n# Constraints\nm = Model()\n\n# Total number of bikes stocked should not exceed 100:\nm += FoldingBikes + TouringBikes <= 100\n# The total cost of bikes in stock should not exceed $30000:\nm += 550 * FoldingBikes + 700 * TouringBikes <= 30000\n\n# Objective\n# Maximize profit ($200 profit per folding bike, $350 profit per touring bike):\nm.maximize(200 * FoldingBikes + 350 * TouringBikes)\n", "entities": [{"start": 46, "end": 58, "word": "folding bike", "entity_group": "VAR", "score": 0.9999310568570454}, {"start": 65, "end": 77, "word": "touring bike", "entity_group": "VAR", "score": 0.9999755286418244}, {"start": 84, "end": 96, "word": "folding bike", "entity_group": "VAR", "score": 0.9999818201208885}, {"start": 105, "end": 108, "word": "550", "entity_group": "PARAM", "score": 0.9996790006049531}, {"start": 122, "end": 128, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997705510132607}, {"start": 134, "end": 137, "word": "200", "entity_group": "PARAM", "score": 0.9996525704989927}, {"start": 144, "end": 156, "word": "touring bike", "entity_group": "VAR", "score": 0.999983008451884}, {"start": 165, "end": 168, "word": "700", "entity_group": "PARAM", "score": 0.999676327659234}, {"start": 182, "end": 188, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999770551012464}, {"start": 194, "end": 197, "word": "350", "entity_group": "PARAM", "score": 0.9997314527433426}, {"start": 258, "end": 265, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998897308289424}, {"start": 266, "end": 269, "word": "100", "entity_group": "LIMIT", "score": 0.9997429355757341}, {"start": 319, "end": 326, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974600856890306}, {"start": 329, "end": 334, "word": "30000", "entity_group": "LIMIT", "score": 0.9994264642520971}, {"start": 419, "end": 427, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9946628327077289}, {"start": 428, "end": 434, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990907017272325}]}
{"doc_id": "-946574927", "document": "A milk company makes ice cream and cheese. Two different teams produce ice cream and cheese. The ice cream team has a maximum daily production of 50 units of ice cream while the cheese team has a maximum daily production of 80 units of cheese. However, both items require time on a shared processing machine and this machine can process at most 100 units of total units of items per day. If the profit per unit of ice cream is $2.5 and the profit per unit of cheese is $4, how many units of each should the company make in order to maximize profits?", "order_mapping": {"ice cream": 0, "cheese": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"ice cream": "2.5", "cheese": "4"}}, "const_declarations": [{"type": "upperbound", "direction": "maximum", "limit": "50", "var": "ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "maximum", "limit": "80", "var": "cheese", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of ice cream produced\n- y: Units of cheese produced\n\nObjective:\n- The company aims to maximize its profits. The profit per unit of ice cream is $2.5 and the profit per unit of cheese is $4. Therefore, the objective function is: Maximize 2.5x + 4y\n\nConstraints:\n- The ice cream team has a maximum daily production of 50 units of ice cream, leading to the constraint: x <= 50.\n- The cheese team has a maximum daily production of 80 units of cheese, leading to the constraint: y <= 80.\n- The shared processing machine can process at most 100 units of total items per day, resulting in the constraint: x + y <= 100.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2.5x + 4y\nConstraints:\nx <= 50\ny <= 80\nx + y <= 100", "canonical": {"objective": [-2.5, -4.0], "constraints": [[1.0, 0.0, 50.0], [0.0, 1.0, 80.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 20, "y": 80}, "pseudo_model": "\nDecision Variables:\n- Number of units of ice cream produced per day: IceCream\n- Number of units of cheese produced per day: Cheese\n\nConstraints:\n- Ice cream team's maximum daily production is 50 units:\n  IceCream <= 50\n- Cheese team's maximum daily production is 80 units:\n  Cheese <= 80\n- Shared processing machine can process at most 100 units of items per day:\n  IceCream + Cheese <= 100\n\nObjective:\n- Maximize profits (2.5 dollars per unit of ice cream, 4 dollars per unit of cheese):\n  2.5 * IceCream + 4 * Cheese\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIceCream = intvar(0, 999999999)  # Number of units of ice cream produced per day\nCheese = intvar(0, 999999999)  # Number of units of cheese produced per day\n\n# Constraints\nm = Model()\n\n# Maximum daily production constraints:\nm += IceCream <= 50  # for ice cream\nm += Cheese <= 80  # for cheese\n\n# Shared processing machine constraint (maximum 100 units processed per day):\nm += IceCream + Cheese <= 100\n\n# Objective\n# Maximize profits (2.5 dollars per unit of ice cream, 4 dollars per unit of cheese):\nm.maximize(2.5 * IceCream + 4 * Cheese)\n", "entities": [{"start": 21, "end": 30, "word": "ice cream", "entity_group": "VAR", "score": 0.9999632412907965}, {"start": 35, "end": 41, "word": "cheese", "entity_group": "VAR", "score": 0.9992977461129968}, {"start": 72, "end": 81, "word": "ice cream", "entity_group": "VAR", "score": 0.9999652713935149}, {"start": 86, "end": 92, "word": "cheese", "entity_group": "VAR", "score": 0.9997950327385571}, {"start": 99, "end": 108, "word": "ice cream", "entity_group": "VAR", "score": 0.9999824811576413}, {"start": 120, "end": 127, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9996905756591005}, {"start": 148, "end": 150, "word": "50", "entity_group": "LIMIT", "score": 0.9995233862848707}, {"start": 160, "end": 169, "word": "ice cream", "entity_group": "VAR", "score": 0.9999752860622378}, {"start": 180, "end": 186, "word": "cheese", "entity_group": "VAR", "score": 0.9990024363912746}, {"start": 198, "end": 205, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9995967545012361}, {"start": 226, "end": 228, "word": "80", "entity_group": "LIMIT", "score": 0.9994439895791555}, {"start": 238, "end": 244, "word": "cheese", "entity_group": "VAR", "score": 0.9989356965529596}, {"start": 341, "end": 348, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986469171433616}, {"start": 349, "end": 352, "word": "100", "entity_group": "LIMIT", "score": 0.9996642440149008}, {"start": 400, "end": 406, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999900860110768}, {"start": 419, "end": 428, "word": "ice cream", "entity_group": "VAR", "score": 0.9999495700656663}, {"start": 434, "end": 437, "word": "2.5", "entity_group": "PARAM", "score": 0.9993511621178192}, {"start": 446, "end": 452, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999392589394385}, {"start": 465, "end": 471, "word": "cheese", "entity_group": "VAR", "score": 0.9992071621804381}, {"start": 477, "end": 478, "word": "4", "entity_group": "PARAM", "score": 0.9995553645432712}, {"start": 540, "end": 548, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9977510919906841}, {"start": 549, "end": 556, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9988790670593285}]}
{"doc_id": "1365390442", "document": "A construction worker mixes two different concrete mixes. One unit of mix A contains 5 unit of cement, 2 units of sand, and 1 unit of gravel. One unit of mix B contains 6 units of cement, 1 unit of sand, and 2 units of gravel. The new mixture must contain at least 70 units of cement, 20 units of sand, and 15 units of gravel. If the cost per unit of mix A is $1 and the cost per unit of mix B is $1.25, how many of each should be mixed to minimize costs?", "order_mapping": {"mix A": 0, "mix B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"mix A": "1", "mix B": "1.25"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "70", "terms": {"mix A": "5", "mix B": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"mix A": "2", "mix B": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"mix A": "1", "mix B": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of mix A\n- y: Units of mix B\n\nObjective:\n- The construction worker aims to minimize costs. The cost per unit of mix A is $1 and the cost per unit of mix B is $1.25. Therefore, the objective function is: Minimize x + 1.25y\n\nConstraints:\n- The new mixture must contain at least 70 units of cement, 20 units of sand, and 15 units of gravel. This leads to the following constraints:\n    - 5x + 6y >= 70 (cement constraint)\n    - 2x + y >= 20 (sand constraint)\n    - x + 2y >= 15 (gravel constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + 1.25y\nConstraints:\n5x + 6y >= 70\n2x + y >= 20\nx + 2y >= 15", "canonical": {"objective": [1.0, 1.25], "constraints": [[-5.0, -6.0, -70.0], [-2.0, -1.0, -20.0], [-1.0, -2.0, -15.0]]}, "solution": {"x": 8, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of units of mix A: MixA\n- Number of units of mix B: MixB\n\nConstraints:\n- The new mixture must contain at least 70 units of cement:\n  5 * MixA + 6 * MixB >= 70\n- The new mixture must contain at least 20 units of sand:\n  2 * MixA + 1 * MixB >= 20\n- The new mixture must contain at least 15 units of gravel:\n  1 * MixA + 2 * MixB >= 15\n\nObjective:\n- Minimize costs (cost per unit of mix A is $1, cost per unit of mix B is $1.25):\n  1 * MixA + 1.25 * MixB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMixA = intvar(0, 999999999)  # Number of units of mix A\nMixB = intvar(0, 999999999)  # Number of units of mix B\n\n# Constraints\nm = Model()\n\n# The new mixture must contain at least 70 units of cement:\nm += 5 * MixA + 6 * MixB >= 70\n# The new mixture must contain at least 20 units of sand:\nm += 2 * MixA + 1 * MixB >= 20\n# The new mixture must contain at least 15 units of gravel:\nm += 1 * MixA + 2 * MixB >= 15\n\n# Objective\n# Minimize costs (cost per unit of mix A is $1, cost per unit of mix B is $1.25):\nm.minimize(1 * MixA + 1.25 * MixB)\n", "entities": [{"start": 71, "end": 76, "word": "mix A", "entity_group": "VAR", "score": 0.9997482341282057}, {"start": 86, "end": 87, "word": "5", "entity_group": "PARAM", "score": 0.9987527204171369}, {"start": 105, "end": 106, "word": "2", "entity_group": "PARAM", "score": 0.9997308615007764}, {"start": 127, "end": 128, "word": "1", "entity_group": "PARAM", "score": 0.9990031253046823}, {"start": 158, "end": 163, "word": "mix B", "entity_group": "VAR", "score": 0.9999220628576974}, {"start": 173, "end": 174, "word": "6", "entity_group": "PARAM", "score": 0.999558211350921}, {"start": 193, "end": 194, "word": "1", "entity_group": "PARAM", "score": 0.9996908953888686}, {"start": 214, "end": 215, "word": "2", "entity_group": "PARAM", "score": 0.9991250369218281}, {"start": 263, "end": 271, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990915376457922}, {"start": 272, "end": 274, "word": "70", "entity_group": "LIMIT", "score": 0.999735428957022}, {"start": 293, "end": 295, "word": "20", "entity_group": "LIMIT", "score": 0.9997462233445682}, {"start": 316, "end": 318, "word": "15", "entity_group": "LIMIT", "score": 0.9992460106528456}, {"start": 344, "end": 348, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9979762765823226}, {"start": 361, "end": 366, "word": "mix A", "entity_group": "VAR", "score": 0.9996320406126832}, {"start": 372, "end": 373, "word": "1", "entity_group": "PARAM", "score": 0.9995088336599066}, {"start": 382, "end": 386, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9967435634528902}, {"start": 399, "end": 404, "word": "mix B", "entity_group": "VAR", "score": 0.9995992378168461}, {"start": 410, "end": 414, "word": "1.25", "entity_group": "PARAM", "score": 0.9996566629328919}, {"start": 453, "end": 461, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996863680210475}, {"start": 462, "end": 467, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990203819609212}]}
{"doc_id": "159070851", "document": "Jack needs to find at least 80 shrimps and 50 conches to pay his monthly rent for his beach house. There are two beaches that Jack frequents: Silver Beach and Lucent Beach. Each day at Silver beach, Jack finds 7 shrimps and 3 conches. Each day at Lucent Beach, Jack finds 4 shrimps and 6 conches. Formulate an LP to help Jack meet his requirements while spending a minimal amount of time.", "order_mapping": {"Silver Beach": 0, "Lucent Beach": 1, "Silver beach": 1}, "obj_declaration": {"type": "objvar", "direction": "minimal", "name": "amount of time", "vars": ["Silver beach", "Lucent Beach"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "80", "terms": {"Silver beach": "7", "Lucent Beach": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"Silver beach": "3", "Lucent Beach": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Amount of time spent at Silver Beach\n- y: Amount of time spent at Lucent Beach\n\nObjective:\n- Jack wants to minimize the total amount of time spent at the beaches. Therefore, the objective function is: Minimize x + y\n\nConstraints:\n- Jack needs to find at least 80 shrimps, which can be formulated as: 7x + 4y >= 80\n- Jack also needs to find at least 50 conches, which can be formulated as: 3x + 6y >= 50\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + y\nConstraints:\n7x + 4y >= 80\n3x + 6y >= 50", "canonical": {"objective": [1.0, 1.0], "constraints": [[-7.0, -4.0, -80.0], [-3.0, -6.0, -50.0]]}, "solution": {"x": 8, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of days Jack spends at Silver Beach: SilverBeachDays\n- Number of days Jack spends at Lucent Beach: LucentBeachDays\n\nConstraints:\n- To meet the requirement of at least 80 shrimps:\n  7 * SilverBeachDays + 4 * LucentBeachDays >= 80\n- To meet the requirement of at least 50 conches:\n  3 * SilverBeachDays + 6 * LucentBeachDays >= 50\n\nObjective:\n- Minimize the total amount of time (days) spent:\n  SilverBeachDays + LucentBeachDays\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSilverBeachDays = intvar(0, 999999999)  # Number of days Jack spends at Silver Beach\nLucentBeachDays = intvar(0, 999999999)  # Number of days Jack spends at Lucent Beach\n\n# Constraints\nm = Model()\n\n# Jack needs to find at least 80 shrimps:\nm += 7 * SilverBeachDays + 4 * LucentBeachDays >= 80\n# Jack needs to find at least 50 conches:\nm += 3 * SilverBeachDays + 6 * LucentBeachDays >= 50\n\n# Objective\n# Minimize the total amount of time (days) spent:\nm.minimize(SilverBeachDays + LucentBeachDays)\n", "entities": [{"start": 19, "end": 27, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989887310216192}, {"start": 28, "end": 30, "word": "80", "entity_group": "LIMIT", "score": 0.999577485209497}, {"start": 43, "end": 45, "word": "50", "entity_group": "LIMIT", "score": 0.9997146987144061}, {"start": 144, "end": 156, "word": "Silver Beach", "entity_group": "VAR", "score": 0.9999654286070341}, {"start": 161, "end": 173, "word": "Lucent Beach", "entity_group": "VAR", "score": 0.9999816096759742}, {"start": 181, "end": 184, "word": "day", "entity_group": "OBJ_NAME", "score": 0.6775222387981131}, {"start": 188, "end": 200, "word": "Silver beach", "entity_group": "VAR", "score": 0.9999631996774414}, {"start": 214, "end": 215, "word": "7", "entity_group": "PARAM", "score": 0.9993761198337088}, {"start": 228, "end": 229, "word": "3", "entity_group": "PARAM", "score": 0.9997194498671312}, {"start": 245, "end": 248, "word": "day", "entity_group": "OBJ_NAME", "score": 0.6500019008630689}, {"start": 252, "end": 264, "word": "Lucent Beach", "entity_group": "VAR", "score": 0.9999468830311731}, {"start": 278, "end": 279, "word": "4", "entity_group": "PARAM", "score": 0.9994604654726088}, {"start": 292, "end": 293, "word": "6", "entity_group": "PARAM", "score": 0.9996647046369274}, {"start": 372, "end": 379, "word": "minimal", "entity_group": "OBJ_DIR", "score": 0.9977044904340322}, {"start": 380, "end": 394, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9808072105729198}]}
{"doc_id": "-522392392", "document": "You have $20000 to invest in four different companies who specialize in specific products. There is a electric vehicle company, a microprocessor company, a business analytics software company, and a construction supply company. The return on investment for each is as follows: electric vehicle company, 4%; microprocessor company, 2.5%; business analytics software company, 5%; construction supply company 3%. You have self imposed some restrictions on your investment. For instance, the amount invested in the construction supply company cannot exceed the amount invested in the electric vehicle company. In addition, the amount invested in the microprocessor company cannot exceed the amount invested in the business analytics software company. Finally at most 20% of your total investment can be in the construction supply company. Formulate a LP to maximize your returns.", "order_mapping": {"electric vehicle company": 0, "microprocessor company": 1, "business analytics software company": 2, "construction supply company": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "returns", "terms": {"electric vehicle company": "4%", "microprocessor company": "2.5%", "business analytics software company": "5%", "construction supply company": "3%"}}, "const_declarations": [{"type": "sum", "direction": "have", "limit": "20000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "construction supply company", "direction": "cannot exceed", "y_var": "electric vehicle company", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "construction supply company", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "microprocessor company", "direction": "cannot exceed", "y_var": "business analytics software company", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in electric vehicle company\n- y: Dollars invested in microprocessor company\n- z: Dollars invested in business analytics software company\n- w: Dollars invested in construction supply company\n\nObjective:\n- The goal is to maximize the returns on the investment. The return on investment for each company is as follows: electric vehicle company, 4%; microprocessor company, 2.5%; business analytics software company, 5%; construction supply company, 3%. Therefore, the objective function is: Maximize 0.04x + 0.025y + 0.05z + 0.03w\n\nConstraints:\n- The total amount available for investment is $20,000, so the constraint is: x + y + z + w <= 20000.\n- The amount invested in the construction supply company cannot exceed the amount invested in the electric vehicle company, leading to the constraint: w <= x.\n- At most 20% of the total investment can be in the construction supply company, leading to the constraint: w <= 0.20(x + y + z + w).\n- The amount invested in the microprocessor company cannot exceed the amount invested in the business analytics software company, resulting in the constraint: y <= z.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.04x + 0.025y + 0.05z + 0.03w\nConstraints:\nx + y + z + w <= 20000\nw <= x\nw <= 0.20(x + y + z + w)\ny <= z", "canonical": {"objective": [-0.04, -0.025, -0.05, -0.03], "constraints": [[1.0, 1.0, 1.0, 1.0, 20000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [-0.2, -0.2, -0.2, 0.8, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0]]}, "solution": {"x": 0, "y": 0, "z": 20000, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the electric vehicle company: ElectricVehicle\n- Amount invested in the microprocessor company: Microprocessor\n- Amount invested in the business analytics software company: BusinessAnalytics\n- Amount invested in the construction supply company: ConstructionSupply\n\nConstraints:\n- Total investment should not exceed $20000:\n  ElectricVehicle + Microprocessor + BusinessAnalytics + ConstructionSupply <= 20000\n- The amount invested in the construction supply company cannot exceed the amount invested in the electric vehicle company:\n  ConstructionSupply <= ElectricVehicle\n- The amount invested in the microprocessor company cannot exceed the amount invested in the business analytics software company:\n  Microprocessor <= BusinessAnalytics\n- At most 20% of the total investment can be in the construction supply company:\n  ConstructionSupply <= 0.20 * (ElectricVehicle + Microprocessor + BusinessAnalytics + ConstructionSupply)\n\nObjective:\n- Maximize returns (4% for electric vehicle, 2.5% for microprocessor, 5% for business analytics, 3% for construction supply):\n  0.04 * ElectricVehicle + 0.025 * Microprocessor + 0.05 * BusinessAnalytics + 0.03 * ConstructionSupply\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nElectricVehicle = intvar(0, 20000)  # Amount invested in the electric vehicle company\nMicroprocessor = intvar(0, 20000)  # Amount invested in the microprocessor company\nBusinessAnalytics = intvar(0, 20000)  # Amount invested in the business analytics software company\nConstructionSupply = intvar(0, 20000)  # Amount invested in the construction supply company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $20000:\nm += ElectricVehicle + Microprocessor + BusinessAnalytics + ConstructionSupply <= 20000\n# The amount invested in the construction supply company cannot exceed the amount invested in the electric vehicle company:\nm += ConstructionSupply <= ElectricVehicle\n# The amount invested in the microprocessor company cannot exceed the amount invested in the business analytics software company:\nm += Microprocessor <= BusinessAnalytics\n# At most 20% of the total investment can be in the construction supply company:\nm += ConstructionSupply <= 0.20 * (ElectricVehicle + Microprocessor + BusinessAnalytics + ConstructionSupply)\n\n# Objective\n# Maximize returns (4% for electric vehicle, 2.5% for microprocessor, 5% for business analytics, 3% for construction supply):\nm.maximize(0.04 * ElectricVehicle + 0.025 * Microprocessor + 0.05 * BusinessAnalytics + 0.03 * ConstructionSupply)\n", "entities": [{"start": 4, "end": 8, "word": "have", "entity_group": "CONST_DIR", "score": 0.9967985810173092}, {"start": 11, "end": 16, "word": "20000", "entity_group": "LIMIT", "score": 0.9993288009691932}, {"start": 104, "end": 128, "word": "electric vehicle company", "entity_group": "VAR", "score": 0.9991552922105369}, {"start": 133, "end": 155, "word": "microprocessor company", "entity_group": "VAR", "score": 0.9999372777747237}, {"start": 160, "end": 195, "word": "business analytics software company", "entity_group": "VAR", "score": 0.9995705140450322}, {"start": 204, "end": 231, "word": "construction supply company", "entity_group": "VAR", "score": 0.9994991420646916}, {"start": 238, "end": 244, "word": "return", "entity_group": "OBJ_NAME", "score": 0.998908488725435}, {"start": 284, "end": 308, "word": "electric vehicle company", "entity_group": "VAR", "score": 0.9989920222082431}, {"start": 311, "end": 314, "word": "4 %", "entity_group": "PARAM", "score": 0.9964975612060577}, {"start": 317, "end": 339, "word": "microprocessor company", "entity_group": "VAR", "score": 0.9999754579118749}, {"start": 342, "end": 347, "word": "2.5 %", "entity_group": "PARAM", "score": 0.9965747557098136}, {"start": 350, "end": 385, "word": "business analytics software company", "entity_group": "VAR", "score": 0.9988226017717168}, {"start": 388, "end": 391, "word": "5 %", "entity_group": "PARAM", "score": 0.9733922747702878}, {"start": 394, "end": 421, "word": "construction supply company", "entity_group": "VAR", "score": 0.9991448435090294}, {"start": 422, "end": 425, "word": "3 %", "entity_group": "PARAM", "score": 0.9637453329060321}, {"start": 531, "end": 558, "word": "construction supply company", "entity_group": "VAR", "score": 0.9993872330883498}, {"start": 559, "end": 573, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9834620342297635}, {"start": 601, "end": 625, "word": "electric vehicle company", "entity_group": "VAR", "score": 0.999318049550518}, {"start": 669, "end": 691, "word": "microprocessor company", "entity_group": "VAR", "score": 0.9999728019941879}, {"start": 692, "end": 706, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9896961341041401}, {"start": 734, "end": 769, "word": "business analytics software company", "entity_group": "VAR", "score": 0.9989485004525409}, {"start": 780, "end": 787, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984120468881134}, {"start": 788, "end": 792, "word": "20 %", "entity_group": "LIMIT", "score": 0.9855839000198772}, {"start": 832, "end": 859, "word": "construction supply company", "entity_group": "VAR", "score": 0.9991965987912632}, {"start": 880, "end": 888, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999542965253221}, {"start": 894, "end": 901, "word": "returns", "entity_group": "OBJ_NAME", "score": 0.9996076026748141}]}
{"doc_id": "-1347623997", "document": "A luxury hotel has 500 rooms. A profit of $100 is made on each regular room and a profit of $500 is made on each premium room. The hotel reserves at least 100 rooms for regular rooms. However, a minimum of twice as many customers prefer to stay in a premium room than stay in a regular room. Determine how many rooms of each type should be sold in order to maximize the profit for the hotel.", "order_mapping": {"regular room": 0, "premium room": 1, "regular rooms": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular room": "100", "premium room": "500"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "regular rooms", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "premium room", "direction": "minimum", "param": "twice", "y_var": "regular room", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular rooms sold\n- y: Number of premium rooms sold\n\nObjective:\n- The hotel aims to maximize its profit. The profit made on each regular room is $100 and on each premium room is $500. Therefore, the objective function is: Maximize 100x + 500y\n\nConstraints:\n- The hotel has a total of 500 rooms available, so the constraint is: x + y <= 500.\n- At least 100 rooms should be reserved for regular rooms, leading to the constraint: x >= 100.\n- A minimum of twice as many customers prefer to stay in a premium room than stay in a regular room, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 500y\nConstraints:\nx + y <= 500\nx >= 100\ny >= 2x", "canonical": {"objective": [-100.0, -500.0], "constraints": [[1.0, 1.0, 500.0], [-1.0, 0.0, -100.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 100, "y": 400}, "pseudo_model": "\nDecision Variables:\n- Number of regular rooms sold: RegularRooms\n- Number of premium rooms sold: PremiumRooms\n\nConstraints:\n- Total number of rooms sold should not exceed 500:\n  RegularRooms + PremiumRooms <= 500\n- At least 100 rooms are reserved for regular rooms:\n  RegularRooms >= 100\n- A minimum of twice as many customers prefer premium rooms over regular rooms:\n  PremiumRooms >= 2 * RegularRooms\n\nObjective:\n- Maximize profit ($100 profit per regular room, $500 profit per premium room):\n  100 * RegularRooms + 500 * PremiumRooms\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularRooms = intvar(0, 999999999)  # Number of regular rooms sold\nPremiumRooms = intvar(0, 999999999)  # Number of premium rooms sold\n\n# Constraints\nm = Model()\n\n# The hotel has a total of 500 rooms:\nm += RegularRooms + PremiumRooms <= 500\n# At least 100 rooms are reserved for regular rooms:\nm += RegularRooms >= 100\n# A minimum of twice as many customers prefer to stay in a premium room than in a regular room:\nm += PremiumRooms >= 2 * RegularRooms\n\n# Objective\n# Maximize profit ($100 profit per regular room, $500 profit per premium room):\nm.maximize(100 * RegularRooms + 500 * PremiumRooms)\n", "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.9925042336355813}, {"start": 19, "end": 22, "word": "500", "entity_group": "LIMIT", "score": 0.998751916011011}, {"start": 33, "end": 39, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999363708614034}, {"start": 45, "end": 48, "word": "100", "entity_group": "PARAM", "score": 0.9993908960507949}, {"start": 65, "end": 77, "word": "regular room", "entity_group": "VAR", "score": 0.9997956787412504}, {"start": 84, "end": 90, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999264122666658}, {"start": 96, "end": 99, "word": "500", "entity_group": "PARAM", "score": 0.9995076072677033}, {"start": 116, "end": 128, "word": "premium room", "entity_group": "VAR", "score": 0.999852419529135}, {"start": 150, "end": 158, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983614423880456}, {"start": 159, "end": 162, "word": "100", "entity_group": "LIMIT", "score": 0.9997284901887548}, {"start": 173, "end": 186, "word": "regular rooms", "entity_group": "VAR", "score": 0.9998935667695792}, {"start": 201, "end": 208, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9990714808719515}, {"start": 212, "end": 217, "word": "twice", "entity_group": "PARAM", "score": 0.9955642949429137}, {"start": 256, "end": 268, "word": "premium room", "entity_group": "VAR", "score": 0.9996932109858337}, {"start": 284, "end": 296, "word": "regular room", "entity_group": "VAR", "score": 0.9997208875628466}, {"start": 364, "end": 372, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9986230568833885}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998723950860486}]}
{"doc_id": "316977720", "document": "A pet store feeds their dogs by making a mixture from two bags. Bag A contains 3 units of protein and 4 units of calcium per bag. Bag B contains 4 units of protein and 2 units of calcium per bag. The mixture must contain at least 30 units of protein and 35 units of calcium. Bag A costs $3.50 per bag and Bag B costs $2.50 per bag. Formulate an LP to minimize the cost for the mixture.", "order_mapping": {"Bag A": 0, "Bag B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Bag A": "3.50", "Bag B": "2.50"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "30", "terms": {"Bag A": "3", "Bag B": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "35", "terms": {"Bag A": "4", "Bag B": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of Bag A\n- y: Number of bags of Bag B\n\nObjective:\n- The pet store aims to minimize the cost for the mixture. Bag A costs $3.50 per bag and Bag B costs $2.50 per bag. Therefore, the objective function is: Minimize 3.50x + 2.50y\n\nConstraints:\n- The mixture must contain at least 30 units of protein, leading to the constraint: 3x + 4y >= 30.\n- The mixture must contain at least 35 units of calcium, leading to the constraint: 4x + 2y >= 35.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3.50x + 2.50y\nConstraints:\n3x + 4y >= 30\n4x + 2y >= 35", "canonical": {"objective": [3.5, 2.5], "constraints": [[-3.0, -4.0, -30.0], [-4.0, -2.0, -35.0]]}, "solution": {"x": 8, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of Bag A used: BagA\n- Number of Bag B used: BagB\n\nConstraints:\n- The mixture must contain at least 30 units of protein:\n  3 * BagA + 4 * BagB >= 30\n- The mixture must contain at least 35 units of calcium:\n  4 * BagA + 2 * BagB >= 35\n\nObjective:\n- Minimize the cost for the mixture (Bag A costs $3.50 per bag and Bag B costs $2.50 per bag):\n  3.50 * BagA + 2.50 * BagB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBagA = intvar(0, 999999999)  # Number of Bag A used\nBagB = intvar(0, 999999999)  # Number of Bag B used\n\n# Constraints\nm = Model()\n\n# The mixture must contain at least 30 units of protein:\nm += 3 * BagA + 4 * BagB >= 30\n# The mixture must contain at least 35 units of calcium:\nm += 4 * BagA + 2 * BagB >= 35\n\n# Objective\n# Minimize the cost for the mixture (Bag A costs $3.50 per bag and Bag B costs $2.50 per bag):\nm.minimize(3.50 * BagA + 2.50 * BagB)\n", "entities": [{"start": 65, "end": 70, "word": "Bag A", "entity_group": "VAR", "score": 0.9999496618444453}, {"start": 80, "end": 81, "word": "3", "entity_group": "PARAM", "score": 0.9997065194961031}, {"start": 103, "end": 104, "word": "4", "entity_group": "PARAM", "score": 0.9997098501633237}, {"start": 132, "end": 137, "word": "Bag B", "entity_group": "VAR", "score": 0.9999033161517915}, {"start": 147, "end": 148, "word": "4", "entity_group": "PARAM", "score": 0.9996854474925024}, {"start": 170, "end": 171, "word": "2", "entity_group": "PARAM", "score": 0.9997097084681912}, {"start": 224, "end": 232, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992060910737884}, {"start": 233, "end": 235, "word": "30", "entity_group": "LIMIT", "score": 0.9997380672705398}, {"start": 257, "end": 259, "word": "35", "entity_group": "LIMIT", "score": 0.9996200006337356}, {"start": 279, "end": 284, "word": "Bag A", "entity_group": "VAR", "score": 0.999895282768258}, {"start": 285, "end": 290, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9997166711767631}, {"start": 293, "end": 297, "word": "3.50", "entity_group": "PARAM", "score": 0.9996824887367728}, {"start": 310, "end": 315, "word": "Bag B", "entity_group": "VAR", "score": 0.9999369161979819}, {"start": 316, "end": 321, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994570388016406}, {"start": 324, "end": 328, "word": "2.50", "entity_group": "PARAM", "score": 0.999450628808212}, {"start": 358, "end": 366, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992988752258637}, {"start": 371, "end": 375, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9961670426151573}]}
{"doc_id": "-13162692", "document": "A seafood factory packages fish meat and shrimp meat. All packages must pass through a weight checking machine and a packaging inspection machine. In a week, each machine is available for at most 1200 minutes. A package of fish meat requires 3 minutes in the weight checking machine and 15 minutes in the packaging inspection machine. A package of shrimp meat requires 1.5 minutes in the weight checking machine and 7 minutes in the packaging inspection machine. A package of fish meat generates a profit of $7 while a package of shrimp generates a profit of $3. Formulate an LP to maximize profit.", "order_mapping": {"fish meat": 0, "shrimp meat": 1, "shrimp": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fish meat": "7", "shrimp": "3"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "1200", "terms": {"fish meat": "3", "shrimp meat": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1200", "terms": {"fish meat": "15", "shrimp meat": "7"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of fish meat\n- y: Number of packages of shrimp meat\n\nObjective:\n- The factory aims to maximize its profit. A package of fish meat generates a profit of $7 while a package of shrimp meat generates a profit of $3. Therefore, the objective function is: Maximize 7x + 3y\n\nConstraints:\n- The weight checking machine and packaging inspection machine are available for at most 1200 minutes each in a week. Each package of fish meat requires 3 minutes in the weight checking machine and 15 minutes in the packaging inspection machine, while each package of shrimp meat requires 1.5 minutes in the weight checking machine and 7 minutes in the packaging inspection machine. These constraints can be formulated as:\n    - 3x + 1.5y <= 1200 (for the weight checking machine)\n    - 15x + 7y <= 1200 (for the packaging inspection machine)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 3y\nConstraints:\n3x + 1.5y <= 1200\n15x + 7y <= 1200", "canonical": {"objective": [-7.0, -3.0], "constraints": [[3.0, 1.5, 1200.0], [15.0, 7.0, 1200.0]]}, "solution": {"x": 80, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of fish meat packages: FishMeatPackages\n- Number of shrimp meat packages: ShrimpMeatPackages\n\nConstraints:\n- Weight checking machine time for all packages should not exceed 1200 minutes per week:\n  3 * FishMeatPackages + 1.5 * ShrimpMeatPackages <= 1200\n- Packaging inspection machine time for all packages should not exceed 1200 minutes per week:\n  15 * FishMeatPackages + 7 * ShrimpMeatPackages <= 1200\n\nObjective:\n- Maximize profit (7 dollars per fish meat package, 3 dollars per shrimp package):\n  7 * FishMeatPackages + 3 * ShrimpMeatPackages\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishMeatPackages = intvar(0, 999999999)  # Number of fish meat packages\nShrimpMeatPackages = intvar(0, 999999999)  # Number of shrimp meat packages\n\n# Constraints\nm = Model()\n\n# Weight checking machine constraint (at most 1200 minutes per week):\nm += 3 * FishMeatPackages + 1.5 * ShrimpMeatPackages <= 1200\n# Packaging inspection machine constraint (at most 1200 minutes per week):\nm += 15 * FishMeatPackages + 7 * ShrimpMeatPackages <= 1200\n\n# Objective\n# Maximize profit (7 dollars per fish meat package, 3 dollars per shrimp package):\nm.maximize(7 * FishMeatPackages + 3 * ShrimpMeatPackages)\n", "entities": [{"start": 27, "end": 36, "word": "fish meat", "entity_group": "VAR", "score": 0.9999481858825531}, {"start": 41, "end": 52, "word": "shrimp meat", "entity_group": "VAR", "score": 0.9999549197691681}, {"start": 191, "end": 198, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987046763896}, {"start": 199, "end": 203, "word": "1200", "entity_group": "LIMIT", "score": 0.9997509128265256}, {"start": 227, "end": 236, "word": "fish meat", "entity_group": "VAR", "score": 0.9999699352669731}, {"start": 246, "end": 247, "word": "3", "entity_group": "PARAM", "score": 0.9992155310589461}, {"start": 291, "end": 293, "word": "15", "entity_group": "PARAM", "score": 0.9996930860187381}, {"start": 353, "end": 364, "word": "shrimp meat", "entity_group": "VAR", "score": 0.9999796183495848}, {"start": 374, "end": 377, "word": "1.5", "entity_group": "PARAM", "score": 0.9993339349432073}, {"start": 421, "end": 422, "word": "7", "entity_group": "PARAM", "score": 0.9996781961583872}, {"start": 482, "end": 491, "word": "fish meat", "entity_group": "VAR", "score": 0.999979361539158}, {"start": 504, "end": 510, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620175630294}, {"start": 516, "end": 517, "word": "7", "entity_group": "PARAM", "score": 0.999461054064091}, {"start": 537, "end": 543, "word": "shrimp", "entity_group": "VAR", "score": 0.9994641357486193}, {"start": 556, "end": 562, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992322551974594}, {"start": 568, "end": 569, "word": "3", "entity_group": "PARAM", "score": 0.9996663539862001}, {"start": 591, "end": 599, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993736722467188}, {"start": 600, "end": 606, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995116765260578}]}
{"doc_id": "-725251297", "document": "A gem store makes earrings and watches using gems, each requiring the use of a heating machine and a polishing machine. On any day, the heating machine is available for at the most 14 hours and the polishing machine for at the most 10 hours. It takes 2 hours on the heating machine and 1.5 hours on the polishing machine to make a pair of earrings. It takes 3.5 hours on the heating machine and 2 hours on the polishing machine to make a watch. The profit from the sale of a pair of earrings is $45 and the profit from the sale of a watch is $70. Assuming the store can sell all the earrings and watches it makes, how should the store owner schedule his daily production in order to maximize his profit?", "order_mapping": {"earrings": 0, "watches": 1, "watch": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"earrings": "45", "watch": "70"}}, "const_declarations": [{"type": "linear", "direction": "at the most", "limit": "14", "terms": {"earrings": "2", "watch": "3.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at the most", "limit": "10", "terms": {"watch": "2", "earrings": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of pairs of earrings produced\n- y: Number of watches produced\n\nObjective:\n- The store owner aims to maximize his profit. The profit from the sale of a pair of earrings is $45 and the profit from the sale of a watch is $70. Therefore, the objective function is: Maximize 45x + 70y\n\nConstraints:\n- The heating machine is available for at most 14 hours and the time taken to produce each item is given. This leads to the constraint: 2x + 3.5y <= 14 (heating machine constraint)\n- The polishing machine is available for at most 10 hours, leading to the constraint: 1.5x + 2y <= 10 (polishing machine constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 45x + 70y\nConstraints:\n2x + 3.5y <= 14\n1.5x + 2y <= 10", "canonical": {"objective": [-45.0, -70.0], "constraints": [[2.0, 3.5, 14.0], [1.5, 2.0, 10.0]]}, "solution": {"x": 5, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of pairs of earrings made per day: Earrings\n- Number of watches made per day: Watches\n\nConstraints:\n- Heating machine usage for earrings and watches should not exceed 14 hours per day:\n  2 * Earrings + 3.5 * Watches <= 14\n- Polishing machine usage for earrings and watches should not exceed 10 hours per day:\n  1.5 * Earrings + 2 * Watches <= 10\n\nObjective:\n- Maximize profit (45 dollars per pair of earrings, 70 dollars per watch):\n  45 * Earrings + 70 * Watches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEarrings = intvar(0, 999999999)  # Number of pairs of earrings made per day\nWatches = intvar(0, 999999999)  # Number of watches made per day\n\n# Constraints\nm = Model()\n\n# Heating machine is available for at the most 14 hours per day:\nm += 2 * Earrings + 3.5 * Watches <= 14\n# Polishing machine is available for at the most 10 hours per day:\nm += 1.5 * Earrings + 2 * Watches <= 10\n\n# Objective\n# Maximize profit (45 dollars per pair of earrings, 70 dollars per watch):\nm.maximize(45 * Earrings + 70 * Watches)\n", "entities": [{"start": 18, "end": 26, "word": "earrings", "entity_group": "VAR", "score": 0.998263047090682}, {"start": 31, "end": 38, "word": "watches", "entity_group": "VAR", "score": 0.9987738561870526}, {"start": 172, "end": 183, "word": "at the most", "entity_group": "CONST_DIR", "score": 0.9913107493631684}, {"start": 184, "end": 186, "word": "14", "entity_group": "LIMIT", "score": 0.9997458680020918}, {"start": 223, "end": 234, "word": "at the most", "entity_group": "CONST_DIR", "score": 0.9937544570935307}, {"start": 235, "end": 237, "word": "10", "entity_group": "LIMIT", "score": 0.9997439824433905}, {"start": 255, "end": 256, "word": "2", "entity_group": "PARAM", "score": 0.9996513383238904}, {"start": 290, "end": 293, "word": "1.5", "entity_group": "PARAM", "score": 0.999653153873883}, {"start": 343, "end": 351, "word": "earrings", "entity_group": "VAR", "score": 0.9993732842263571}, {"start": 363, "end": 366, "word": "3.5", "entity_group": "PARAM", "score": 0.9997012170379772}, {"start": 400, "end": 401, "word": "2", "entity_group": "PARAM", "score": 0.9996527110558457}, {"start": 443, "end": 448, "word": "watch", "entity_group": "VAR", "score": 0.999307662973775}, {"start": 455, "end": 461, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998345591065148}, {"start": 489, "end": 497, "word": "earrings", "entity_group": "VAR", "score": 0.9988866768018994}, {"start": 503, "end": 505, "word": "45", "entity_group": "PARAM", "score": 0.9992960513186425}, {"start": 514, "end": 520, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998887757616658}, {"start": 540, "end": 545, "word": "watch", "entity_group": "VAR", "score": 0.9980843591677683}, {"start": 551, "end": 553, "word": "70", "entity_group": "PARAM", "score": 0.9997312777433021}, {"start": 592, "end": 600, "word": "earrings", "entity_group": "VAR", "score": 0.9997543573881392}, {"start": 605, "end": 612, "word": "watches", "entity_group": "VAR", "score": 0.9991305081214579}, {"start": 693, "end": 701, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9975534830077825}, {"start": 706, "end": 712, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999534458253344}]}
{"doc_id": "-1935674089", "document": "A woman has $6000 to invest in energy companies. She can invest in a solar energy company and a wind energy company. Each dollar invested in the solar energy company yields a profit of $0.10 while each dollar invested in the wind energy company yields a profit of $0.09. She wants to invest a minimum of 45% of her investment into the solar energy company and at least $3000 in the wind energy company. How much money should she invest in each to maximize her profit?", "order_mapping": {"solar energy company": 0, "wind energy company": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"wind energy company": "0.09", "solar energy company": "0.10"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "6000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "45%", "var": "solar energy company", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3000", "var": "wind energy company", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the solar energy company\n- y: Dollars invested in the wind energy company\n\nObjective:\n- The woman aims to maximize her profit. Each dollar invested in the solar energy company yields a profit of $0.10, and each dollar invested in the wind energy company yields a profit of $0.09. Therefore, the objective function is: Maximize 0.10x + 0.09y\n\nConstraints:\n- The woman has $6000 to invest, so the constraint is: x + y <= 6000.\n- She wants to invest a minimum of 45% of her investment into the solar energy company, leading to the constraint: x >= 0.45(x + y).\n- She also wants to invest at least $3000 in the wind energy company, resulting in the constraint: y >= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.10x + 0.09y\nConstraints:\nx + y <= 6000\nx >= 0.45(x + y)\ny >= 3000", "canonical": {"objective": [-0.1, -0.09], "constraints": [[1.0, 1.0, 6000.0], [-0.55, 0.45, 0.0], [0.0, -1.0, -3000.0]]}, "solution": {"x": 3000, "y": 3000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the solar energy company: SolarInvestment\n- Amount invested in the wind energy company: WindInvestment\n\nConstraints:\n- Total investment should not exceed 6000 dollars:\n  SolarInvestment + WindInvestment <= 6000\n- At least 45% of the total investment should be in the solar energy company:\n  SolarInvestment >= 0.45 * (SolarInvestment + WindInvestment)\n- At least 3000 dollars should be invested in the wind energy company:\n  WindInvestment >= 3000\n\nObjective:\n- Maximize profit (0.10 dollars profit per dollar invested in the solar energy company, 0.09 dollars profit per dollar invested in the wind energy company):\n  0.10 * SolarInvestment + 0.09 * WindInvestment\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSolarInvestment = intvar(0, 999999999)  # Amount invested in the solar energy company\nWindInvestment = intvar(0, 999999999)  # Amount invested in the wind energy company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $6000:\nm += SolarInvestment + WindInvestment <= 6000\n# At least 45% of her investment into the solar energy company:\nm += SolarInvestment >= 0.45 * (SolarInvestment + WindInvestment)\n# At least $3000 in the wind energy company:\nm += WindInvestment >= 3000\n\n# Objective\n# Maximize profit (0.10 dollars per dollar invested in the solar energy company, 0.09 dollars per dollar invested in the wind energy company):\nm.maximize(0.10 * SolarInvestment + 0.09 * WindInvestment)\n", "entities": [{"start": 8, "end": 11, "word": "has", "entity_group": "CONST_DIR", "score": 0.9959617242743308}, {"start": 14, "end": 18, "word": "6000", "entity_group": "LIMIT", "score": 0.9993152852422853}, {"start": 71, "end": 91, "word": "solar energy company", "entity_group": "VAR", "score": 0.9995120018974711}, {"start": 98, "end": 117, "word": "wind energy company", "entity_group": "VAR", "score": 0.9992738352021292}, {"start": 148, "end": 168, "word": "solar energy company", "entity_group": "VAR", "score": 0.9995576782568089}, {"start": 178, "end": 184, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999589857463821}, {"start": 190, "end": 194, "word": "0.10", "entity_group": "PARAM", "score": 0.9991121116080083}, {"start": 229, "end": 248, "word": "wind energy company", "entity_group": "VAR", "score": 0.9997014168999794}, {"start": 258, "end": 264, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9991267533635048}, {"start": 270, "end": 274, "word": "0.09", "entity_group": "PARAM", "score": 0.9991235786131146}, {"start": 299, "end": 306, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9937691673918304}, {"start": 310, "end": 314, "word": "45 %", "entity_group": "LIMIT", "score": 0.9458760552828147}, {"start": 342, "end": 362, "word": "solar energy company", "entity_group": "VAR", "score": 0.9981815030621173}, {"start": 367, "end": 375, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9970984333789509}, {"start": 378, "end": 382, "word": "3000", "entity_group": "LIMIT", "score": 0.9991571345401756}, {"start": 390, "end": 409, "word": "wind energy company", "entity_group": "VAR", "score": 0.9993230847497185}, {"start": 456, "end": 464, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994802415117818}, {"start": 469, "end": 475, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999425846280965}]}
{"doc_id": "503287325", "document": "Steven owns two rice processing machines. Machine X costs $400 to operate per day and can produce and deliver 3 bags of basmati rice, 5 bags of brown rice, and 7 bags of jasmine rice. Machine Y costs $500 to operate per day and can produce and deliver 4 bags of basmati rice, 8 bags of brown rice, and 3 bag of jasmine rice. Steven recently obtained a contract to provide a restaurant with 20 bags of basmati rice, 30 bags of brown rice, and 25 bags of jasmine rice. How can we minimize Steven's total costs?", "order_mapping": {"Machine X": 0, "Machine Y": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total costs", "terms": {"Machine X": "400", "Machine Y": "500"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "20", "terms": {"Machine X": "3", "Machine Y": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "30", "terms": {"Machine X": "5", "Machine Y": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "25", "terms": {"Machine X": "7", "Machine Y": "3"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of days Machine X is operated\n- y: Number of days Machine Y is operated\n\nObjective:\n- The goal is to minimize Steven's total costs. Machine X costs $400 to operate per day and Machine Y costs $500 to operate per day. Therefore, the objective function is: Minimize 400x + 500y\n\nConstraints:\n- Steven needs to provide 20 bags of basmati rice, 30 bags of brown rice, and 25 bags of jasmine rice. The production and delivery capabilities of the machines are as follows:\n    - Machine X: 3 bags of basmati rice, 5 bags of brown rice, and 7 bags of jasmine rice per day\n    - Machine Y: 4 bags of basmati rice, 8 bags of brown rice, and 3 bags of jasmine rice per day\n  These lead to the following constraints:\n    - 3x + 4y >= 20 (basmati rice)\n    - 5x + 8y >= 30 (brown rice)\n    - 7x + 3y >= 25 (jasmine rice)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 400x + 500y\nConstraints:\n3x + 4y >= 20\n5x + 8y >= 30\n7x + 3y >= 25", "canonical": {"objective": [400.0, 500.0], "constraints": [[-3.0, -4.0, -20.0], [-5.0, -8.0, -30.0], [-7.0, -3.0, -25.0]]}, "solution": {"x": 4, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of days Machine X operates: MachineX\n- Number of days Machine Y operates: MachineY\n\nConstraints:\n- To meet the basmati rice requirement (20 bags):\n  3 * MachineX + 4 * MachineY >= 20\n- To meet the brown rice requirement (30 bags):\n  5 * MachineX + 8 * MachineY >= 30\n- To meet the jasmine rice requirement (25 bags):\n  7 * MachineX + 3 * MachineY >= 25\n\nObjective:\n- Minimize total costs ($400 per day for Machine X, $500 per day for Machine Y):\n  400 * MachineX + 500 * MachineY\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMachineX = intvar(0, 999999999)  # Number of days Machine X operates\nMachineY = intvar(0, 999999999)  # Number of days Machine Y operates\n\n# Constraints\nm = Model()\n\n# Basmati rice requirement (20 bags):\nm += 3 * MachineX + 4 * MachineY >= 20\n# Brown rice requirement (30 bags):\nm += 5 * MachineX + 8 * MachineY >= 30\n# Jasmine rice requirement (25 bags):\nm += 7 * MachineX + 3 * MachineY >= 25\n\n# Objective\n# Minimize total costs ($400 per day for Machine X, $500 per day for Machine Y):\nm.minimize(400 * MachineX + 500 * MachineY)\n", "entities": [{"start": 43, "end": 52, "word": "Machine X", "entity_group": "VAR", "score": 0.9998554565973252}, {"start": 53, "end": 58, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9986437245780256}, {"start": 61, "end": 64, "word": "400", "entity_group": "PARAM", "score": 0.999658678129375}, {"start": 112, "end": 113, "word": "3", "entity_group": "PARAM", "score": 0.9997529341175161}, {"start": 137, "end": 138, "word": "5", "entity_group": "PARAM", "score": 0.9996996559344594}, {"start": 164, "end": 165, "word": "7", "entity_group": "PARAM", "score": 0.9996744873612177}, {"start": 189, "end": 198, "word": "Machine Y", "entity_group": "VAR", "score": 0.9998304686252946}, {"start": 199, "end": 204, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991614862370198}, {"start": 207, "end": 210, "word": "500", "entity_group": "PARAM", "score": 0.9997268097740539}, {"start": 258, "end": 259, "word": "4", "entity_group": "PARAM", "score": 0.9997529593815868}, {"start": 283, "end": 284, "word": "8", "entity_group": "PARAM", "score": 0.9996808987359649}, {"start": 310, "end": 311, "word": "3", "entity_group": "PARAM", "score": 0.9995804437647327}, {"start": 373, "end": 380, "word": "provide", "entity_group": "CONST_DIR", "score": 0.995846183648841}, {"start": 399, "end": 401, "word": "20", "entity_group": "LIMIT", "score": 0.9997362209133114}, {"start": 425, "end": 427, "word": "30", "entity_group": "LIMIT", "score": 0.9996706517436703}, {"start": 453, "end": 455, "word": "25", "entity_group": "LIMIT", "score": 0.9996634017742073}, {"start": 490, "end": 498, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9855928719819874}, {"start": 509, "end": 520, "word": "total costs", "entity_group": "OBJ_NAME", "score": 0.9926696645081102}]}
{"doc_id": "2086021215", "document": "A sign company makes neon and metal signs. Each neon sign takes 3 hours for crafting and 2 hours for installation. Each metal sign takes 2 hours for crafting and 1.5 hours for installation. The company has available 950 hours for crafting and 400 hours for installation. If the profit per neon sign is $200 and the profit per metal sign is $100, how many of each should the company craft and install to maximize profit?", "order_mapping": {"neon": 0, "metal signs": 1, "neon sign": 0, "metal sign": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"neon sign": "200", "metal sign": "100"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "950", "terms": {"neon sign": "3", "metal sign": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"neon sign": "2", "metal sign": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of neon signs to be crafted and installed\n- y: Number of metal signs to be crafted and installed\n\nObjective:\n- The sign company aims to maximize its profit. The profit per neon sign is $200 and the profit per metal sign is $100. Therefore, the objective function is: Maximize 200x + 100y\n\nConstraints:\n- The company has 950 hours available for crafting, and each neon sign takes 3 hours for crafting and each metal sign takes 2 hours for crafting. This leads to the constraint: 3x + 2y <= 950.\n- The company has 400 hours available for installation, and each neon sign takes 2 hours for installation and each metal sign takes 1.5 hours for installation. This results in the constraint: 2x + 1.5y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 100y\nConstraints:\n3x + 2y <= 950\n2x + 1.5y <= 400", "canonical": {"objective": [-200.0, -100.0], "constraints": [[3.0, 2.0, 950.0], [2.0, 1.5, 400.0]]}, "solution": {"x": 200, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of neon signs crafted and installed: NeonSigns\n- Number of metal signs crafted and installed: MetalSigns\n\nConstraints:\n- Total crafting hours for neon and metal signs should not exceed 950 hours:\n  3 * NeonSigns + 2 * MetalSigns <= 950\n- Total installation hours for neon and metal signs should not exceed 400 hours:\n  2 * NeonSigns + 1.5 * MetalSigns <= 400\n\nObjective:\n- Maximize profit (200 dollars per neon sign, 100 dollars per metal sign):\n  200 * NeonSigns + 100 * MetalSigns\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNeonSigns = intvar(0, 999999999)  # Number of neon signs crafted and installed\nMetalSigns = intvar(0, 999999999)  # Number of metal signs crafted and installed\n\n# Constraints\nm = Model()\n\n# Total crafting hours for neon and metal signs should not exceed 950 hours:\nm += 3 * NeonSigns + 2 * MetalSigns <= 950\n# Total installation hours for neon and metal signs should not exceed 400 hours:\nm += 2 * NeonSigns + 1.5 * MetalSigns <= 400\n\n# Objective\n# Maximize profit (200 dollars per neon sign, 100 dollars per metal sign):\nm.maximize(200 * NeonSigns + 100 * MetalSigns)\n", "entities": [{"start": 21, "end": 25, "word": "neon", "entity_group": "VAR", "score": 0.9994569926142168}, {"start": 30, "end": 41, "word": "metal signs", "entity_group": "VAR", "score": 0.999983941424971}, {"start": 49, "end": 58, "word": "neon sign", "entity_group": "VAR", "score": 0.9999841452258446}, {"start": 65, "end": 66, "word": "3", "entity_group": "PARAM", "score": 0.9996981005346464}, {"start": 90, "end": 91, "word": "2", "entity_group": "PARAM", "score": 0.9997169707874715}, {"start": 122, "end": 132, "word": "metal sign", "entity_group": "VAR", "score": 0.999979878379797}, {"start": 139, "end": 140, "word": "2", "entity_group": "PARAM", "score": 0.9997278751180538}, {"start": 164, "end": 167, "word": "1.5", "entity_group": "PARAM", "score": 0.9996554652779936}, {"start": 209, "end": 218, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991655019856499}, {"start": 219, "end": 222, "word": "950", "entity_group": "LIMIT", "score": 0.999417602696919}, {"start": 246, "end": 249, "word": "400", "entity_group": "LIMIT", "score": 0.9996548445654585}, {"start": 282, "end": 288, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999403765858}, {"start": 293, "end": 302, "word": "neon sign", "entity_group": "VAR", "score": 0.9999475314348658}, {"start": 308, "end": 311, "word": "200", "entity_group": "PARAM", "score": 0.9996126246185222}, {"start": 320, "end": 326, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999938472831914}, {"start": 331, "end": 341, "word": "metal sign", "entity_group": "VAR", "score": 0.9999447164715625}, {"start": 347, "end": 350, "word": "100", "entity_group": "PARAM", "score": 0.9996757786827887}, {"start": 410, "end": 418, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999011524677519}, {"start": 419, "end": 425, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998647588561279}]}
{"doc_id": "1911422792", "document": "An underground factory has 120 sq. feet of space. It makes low-quality headsets and keyboards. Headsets require 2.5 hours of labor and cost $10 for each sq. foot of space allocated for headset production (cost of electricity and equipment). Keyboards require 3.5 hours of labor and cost $12 for each sq. foot of space allocated for keyboard production. Headsets produce a net revenue of $45 per sq. foot while keyboards produce a net revenue of $80 per sq. foot. The factory wants to spend at most $5500 and 2500 hours of labor. What is the optimal factory layout to maximize revenue?", "order_mapping": {"headsets": 0, "keyboards": 1, "Headsets": 0, "headset": 0, "Keyboards": 1, "keyboard": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"Headsets": "45", "keyboards": "80"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "120", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "2500", "terms": {"Headsets": "2.5", "Keyboards": "3.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "5500", "terms": {"Headsets": "10", "Keyboards": "12"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Sq. feet allocated for headset production\n- y: Sq. feet allocated for keyboard production\n\nObjective:\n- The factory aims to maximize its revenue. Headsets produce a net revenue of $45 per sq. foot while keyboards produce a net revenue of $80 per sq. foot. Therefore, the objective function is: Maximize 45x + 80y\n\nConstraints:\n- The factory has a total of 120 sq. feet of space, so the constraint is: x + y <= 120.\n- The factory wants to spend at most $5500, and the cost for headsets and keyboards are $10 and $12 per sq. foot, respectively. This leads to the constraint: 10x + 12y <= 5500.\n- The factory wants to use at most 2500 hours of labor, and headsets require 2.5 hours of labor while keyboards require 3.5 hours. This results in the constraint: 2.5x + 3.5y <= 2500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 45x + 80y\nConstraints:\nx + y <= 120\n10x + 12y <= 5500\n2.5x + 3.5y <= 2500", "canonical": {"objective": [-45.0, -80.0], "constraints": [[1.0, 1.0, 120.0], [10.0, 12.0, 5500.0], [2.5, 3.5, 2500.0]]}, "solution": {"x": 0, "y": 120}, "pseudo_model": "\nDecision Variables:\n- Square feet allocated for headset production: Headsets\n- Square feet allocated for keyboard production: Keyboards\n\nConstraints:\n- Total space allocated should not exceed 120 sq. feet:\n  Headsets + Keyboards <= 120\n- Total labor hours should not exceed 2500 hours (2.5 hours for headsets, 3.5 hours for keyboards):\n  2.5 * Headsets + 3.5 * Keyboards <= 2500\n- Total cost should not exceed $5500 ($10/sq. foot for headsets, $12/sq. foot for keyboards):\n  10 * Headsets + 12 * Keyboards <= 5500\n\nObjective:\n- Maximize revenue ($45/sq. foot for headsets, $80/sq. foot for keyboards):\n  45 * Headsets + 80 * Keyboards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeadsets = intvar(0, 999999999)  # sq. feet allocated for headset production\nKeyboards = intvar(0, 999999999)  # sq. feet allocated for keyboard production\n\n# Constraints\nm = Model()\n\n# The total space allocated should not exceed 120 sq. feet:\nm += Headsets + Keyboards <= 120\n# The total labor hours should not exceed 2500 hours (2.5 hours for headsets, 3.5 hours for keyboards):\nm += 2.5 * Headsets + 3.5 * Keyboards <= 2500\n# The total cost should not exceed $5500 ($10/sq. foot for headsets, $12/sq. foot for keyboards):\nm += 10 * Headsets + 12 * Keyboards <= 5500\n\n# Objective\n# Maximize revenue ($45/sq. foot for headsets, $80/sq. foot for keyboards):\nm.maximize(45 * Headsets + 80 * Keyboards)\n", "entities": [{"start": 23, "end": 26, "word": "has", "entity_group": "CONST_DIR", "score": 0.9879412749817849}, {"start": 27, "end": 30, "word": "120", "entity_group": "LIMIT", "score": 0.9976259960842336}, {"start": 75, "end": 83, "word": "headsets", "entity_group": "VAR", "score": 0.9997532991883253}, {"start": 88, "end": 97, "word": "keyboards", "entity_group": "VAR", "score": 0.999487878301211}, {"start": 100, "end": 108, "word": "Headsets", "entity_group": "VAR", "score": 0.9993521356182096}, {"start": 117, "end": 120, "word": "2.5", "entity_group": "PARAM", "score": 0.9997161992388757}, {"start": 147, "end": 149, "word": "10", "entity_group": "PARAM", "score": 0.9988033770553001}, {"start": 192, "end": 199, "word": "headset", "entity_group": "VAR", "score": 0.99653716309791}, {"start": 251, "end": 260, "word": "Keyboards", "entity_group": "VAR", "score": 0.999624134149726}, {"start": 269, "end": 272, "word": "3.5", "entity_group": "PARAM", "score": 0.9997097948165816}, {"start": 299, "end": 301, "word": "12", "entity_group": "PARAM", "score": 0.9986254182991587}, {"start": 344, "end": 352, "word": "keyboard", "entity_group": "VAR", "score": 0.9979863302639178}, {"start": 366, "end": 374, "word": "Headsets", "entity_group": "VAR", "score": 0.9997217602373591}, {"start": 385, "end": 396, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9538620050497963}, {"start": 402, "end": 404, "word": "45", "entity_group": "PARAM", "score": 0.999482941340262}, {"start": 425, "end": 434, "word": "keyboards", "entity_group": "VAR", "score": 0.9997893380016758}, {"start": 445, "end": 456, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9349630970129633}, {"start": 462, "end": 464, "word": "80", "entity_group": "PARAM", "score": 0.99892280350292}, {"start": 508, "end": 515, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9945502846499564}, {"start": 518, "end": 522, "word": "5500", "entity_group": "LIMIT", "score": 0.9995650077019822}, {"start": 527, "end": 531, "word": "2500", "entity_group": "LIMIT", "score": 0.9996380591526474}, {"start": 587, "end": 595, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992837442651968}, {"start": 596, "end": 603, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9985232252533116}]}
{"doc_id": "-734844204", "document": "Rho Burrito sell two burritos: a Mexican burrito and a Korean burrito. The burritos are made using cheese, beans, and onions. A Mexican burrito requires 7 units of cheese and 8 units of beans. A Korean burrito requires 5 units of cheese and 5 units of onions. There are 70 units of cheese available, 60 units of beans available, and 45 units of onions available. The profit per Mexican burrito is $7 and the profit per Korean burrito is $4.5. Formulate as an LP to maximize profit.", "order_mapping": {"Mexican burrito": 0, "Korean burrito": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Mexican burrito": "7", "Korean burrito": "4.5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "70", "terms": {"Mexican burrito": "7", "Korean burrito": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60", "terms": {"Mexican burrito": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "45", "terms": {"Korean burrito": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Mexican burritos to be sold\n- y: Number of Korean burritos to be sold\n\nObjective:\n- The objective is to maximize the profit. The profit per Mexican burrito is $7 and the profit per Korean burrito is $4.5. Therefore, the objective function is: Maximize 7x + 4.5y\n\nConstraints:\n- The availability of ingredients limits the production of burritos. The constraint for cheese is: 7x + 5y <= 70\n- The constraint for beans is: 8x <= 60\n- The constraint for onions is: 5y <= 45\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 4.5y\nConstraints:\n7x + 5y <= 70\n8x <= 60\n5y <= 45", "canonical": {"objective": [-7.0, -4.5], "constraints": [[7.0, 5.0, 70.0], [8.0, 0.0, 60.0], [0.0, 5.0, 45.0]]}, "solution": {"x": 7, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of Mexican burritos made: MexicanBurrito\n- Number of Korean burritos made: KoreanBurrito\n\nConstraints:\n- Cheese usage for both burritos should not exceed 70 units:\n  7 * MexicanBurrito + 5 * KoreanBurrito <= 70\n- Beans usage for Mexican burritos should not exceed 60 units:\n  8 * MexicanBurrito <= 60\n- Onions usage for Korean burritos should not exceed 45 units:\n  5 * KoreanBurrito <= 45\n\nObjective:\n- Maximize profit (7 dollars per Mexican burrito, 4.5 dollars per Korean burrito):\n  7 * MexicanBurrito + 4.5 * KoreanBurrito\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMexicanBurrito = intvar(0, 999999999)  # Number of Mexican burritos made\nKoreanBurrito = intvar(0, 999999999)  # Number of Korean burritos made\n\n# Constraints\nm = Model()\n\n# Cheese constraint (70 units available, Mexican burrito requires 7 units, Korean burrito requires 5 units):\nm += 7 * MexicanBurrito + 5 * KoreanBurrito <= 70\n# Beans constraint (60 units available, Mexican burrito requires 8 units):\nm += 8 * MexicanBurrito <= 60\n# Onions constraint (45 units available, Korean burrito requires 5 units):\nm += 5 * KoreanBurrito <= 45\n\n# Objective\n# Maximize profit (7 dollars per Mexican burrito, 4.5 dollars per Korean burrito):\nm.maximize(7 * MexicanBurrito + 4.5 * KoreanBurrito)\n", "entities": [{"start": 34, "end": 49, "word": "Mexican burrito", "entity_group": "VAR", "score": 0.9999605532606679}, {"start": 56, "end": 70, "word": "Korean burrito", "entity_group": "VAR", "score": 0.9999692775505349}, {"start": 133, "end": 148, "word": "Mexican burrito", "entity_group": "VAR", "score": 0.9999741367710093}, {"start": 158, "end": 159, "word": "7", "entity_group": "PARAM", "score": 0.9996638320757576}, {"start": 180, "end": 181, "word": "8", "entity_group": "PARAM", "score": 0.9997403392153028}, {"start": 201, "end": 215, "word": "Korean burrito", "entity_group": "VAR", "score": 0.9999750869937829}, {"start": 225, "end": 226, "word": "5", "entity_group": "PARAM", "score": 0.9996741564065273}, {"start": 247, "end": 248, "word": "5", "entity_group": "PARAM", "score": 0.9997231606578671}, {"start": 277, "end": 279, "word": "70", "entity_group": "LIMIT", "score": 0.9997418898936539}, {"start": 296, "end": 305, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993278510307347}, {"start": 308, "end": 310, "word": "60", "entity_group": "LIMIT", "score": 0.9996727384885392}, {"start": 326, "end": 335, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986522850839507}, {"start": 342, "end": 344, "word": "45", "entity_group": "LIMIT", "score": 0.999639558876359}, {"start": 361, "end": 370, "word": "available", "entity_group": "CONST_DIR", "score": 0.9976692590262157}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999491117117351}, {"start": 388, "end": 403, "word": "Mexican burrito", "entity_group": "VAR", "score": 0.999951288112584}, {"start": 409, "end": 410, "word": "7", "entity_group": "PARAM", "score": 0.9993358247585271}, {"start": 419, "end": 425, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999329703773546}, {"start": 430, "end": 444, "word": "Korean burrito", "entity_group": "VAR", "score": 0.9998679672782987}, {"start": 450, "end": 453, "word": "4.5", "entity_group": "PARAM", "score": 0.9996822939887531}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9981023908602452}, {"start": 487, "end": 493, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997624718954359}]}
{"doc_id": "1012426882", "document": "Sid has to meet his daily requirements of 2 servings of meat, 1 serving of dairy, 4 servings of vegetables, and 3 servings of grains. He can eat a hamburger, which has 1 serving of meat, 0.5 servings of dairy, 1 serving of vegetables and 1 serving of grains or he can eat a plate of pasta, which has 0 servings of meat, 1 serving of dairy, 1 serving of vegetables and 2 servings of grains. If a hamburger costs $3 and a plate of pasta costs $4, how many of each item should he buy to meet his requirements at minimum cost?", "order_mapping": {"hamburger": 0, "pasta": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"hamburger": "3", "pasta": "4"}}, "const_declarations": [{"type": "linear", "direction": "requirements", "limit": "2", "terms": {"hamburger": "1", "pasta": "0"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "requirements", "limit": "1", "terms": {"hamburger": "0.5", "pasta": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "requirements", "limit": "4", "terms": {"hamburger": "1", "pasta": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "requirements", "limit": "3", "terms": {"hamburger": "1", "pasta": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hamburgers\n- y: Number of plates of pasta\n\nObjective:\n- Sid wants to minimize his cost. A hamburger costs $3 and a plate of pasta costs $4. Therefore, the objective function is: Minimize 3x + 4y\n\nConstraints:\n- Sid needs to meet his daily requirements of 2 servings of meat, 1 serving of dairy, 4 servings of vegetables, and 3 servings of grains. The nutritional content of each item is as follows:\n    - Hamburger: 1 serving of meat, 0.5 servings of dairy, 1 serving of vegetables, and 1 serving of grains\n    - Pasta: 0 servings of meat, 1 serving of dairy, 1 serving of vegetables, and 2 servings of grains\n  These requirements can be expressed as the following constraints:\n    - 1x + 0y >= 2 (meat)\n    - 0.5x + 1y >= 1 (dairy)\n    - 1x + 1y >= 4 (vegetables)\n    - 1x + 2y >= 3 (grains)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 4y\nConstraints:\nx + 0.5y >= 2\n0.5x + y >= 1\nx + y >= 4\nx + 2y >= 3", "canonical": {"objective": [3.0, 4.0], "constraints": [[-1.0, -0.5, -2.0], [-0.5, -1.0, -1.0], [-1.0, -1.0, -4.0], [-1.0, -2.0, -3.0]]}, "solution": {"x": 4, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of hamburgers bought: Hamburger\n- Number of plates of pasta bought: Pasta\n\nConstraints:\n- Meat requirement (at least 2 servings):\n  1*Hamburger + 0*Pasta >= 2\n- Dairy requirement (at least 1 serving):\n  0.5*Hamburger + 1*Pasta >= 1\n- Vegetables requirement (at least 4 servings):\n  1*Hamburger + 1*Pasta >= 4\n- Grains requirement (at least 3 servings):\n  1*Hamburger + 2*Pasta >= 3\n\nObjective:\n- Minimize cost (3 dollars per hamburger, 4 dollars per plate of pasta):\n  3*Hamburger + 4*Pasta\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHamburger = intvar(0, 999999999)  # Number of hamburgers\nPasta = intvar(0, 999999999)  # Number of plates of pasta\n\n# Constraints\nm = Model()\n\n# Meat requirement (2 servings): 1 serving from a hamburger, 0 from pasta\nm += 1*Hamburger + 0*Pasta >= 2\n# Dairy requirement (1 serving): 0.5 servings from a hamburger, 1 from pasta\nm += 0.5*Hamburger + 1*Pasta >= 1\n# Vegetables requirement (4 servings): 1 serving from both hamburger and pasta\nm += 1*Hamburger + 1*Pasta >= 4\n# Grains requirement (3 servings): 1 serving from a hamburger, 2 from pasta\nm += 1*Hamburger + 2*Pasta >= 3\n\n# Objective\n# Minimize cost: $3 per hamburger, $4 per plate of pasta\nm.minimize(3*Hamburger + 4*Pasta)\n", "entities": [{"start": 26, "end": 38, "word": "requirements", "entity_group": "CONST_DIR", "score": 0.9941085785137244}, {"start": 42, "end": 43, "word": "2", "entity_group": "LIMIT", "score": 0.9996662585661539}, {"start": 63, "end": 64, "word": "1", "entity_group": "LIMIT", "score": 0.9995939714187079}, {"start": 84, "end": 85, "word": "4", "entity_group": "LIMIT", "score": 0.9997359984867363}, {"start": 115, "end": 116, "word": "3", "entity_group": "LIMIT", "score": 0.9994738829365658}, {"start": 151, "end": 160, "word": "hamburger", "entity_group": "VAR", "score": 0.9996415365200727}, {"start": 173, "end": 174, "word": "1", "entity_group": "PARAM", "score": 0.9996550284326783}, {"start": 193, "end": 196, "word": "0.5", "entity_group": "PARAM", "score": 0.999712220378646}, {"start": 217, "end": 218, "word": "1", "entity_group": "PARAM", "score": 0.9996477792549435}, {"start": 245, "end": 246, "word": "1", "entity_group": "PARAM", "score": 0.9993846006600599}, {"start": 290, "end": 295, "word": "pasta", "entity_group": "VAR", "score": 0.9970788590112317}, {"start": 308, "end": 309, "word": "0", "entity_group": "PARAM", "score": 0.9996983326065987}, {"start": 329, "end": 330, "word": "1", "entity_group": "PARAM", "score": 0.9995334251212901}, {"start": 350, "end": 351, "word": "1", "entity_group": "PARAM", "score": 0.9996271425041627}, {"start": 378, "end": 379, "word": "2", "entity_group": "PARAM", "score": 0.9995297012654493}, {"start": 406, "end": 415, "word": "hamburger", "entity_group": "VAR", "score": 0.9998370363977802}, {"start": 416, "end": 421, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9933669583351801}, {"start": 424, "end": 425, "word": "3", "entity_group": "PARAM", "score": 0.9995443682854915}, {"start": 441, "end": 446, "word": "pasta", "entity_group": "VAR", "score": 0.9993976581824002}, {"start": 447, "end": 452, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9952811318242422}, {"start": 455, "end": 456, "word": "4", "entity_group": "PARAM", "score": 0.9994838064883289}, {"start": 523, "end": 530, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9938512474825936}, {"start": 531, "end": 535, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9980998807335556}]}
{"doc_id": "-949723129", "document": "A company makes small and large chessboards. Each small chessboard takes 5 minutes of cutting and 10 minutes of assembly. Each large chessboard takes 10 minutes of cutting and 20 minutes of assembly. The company has available 400 minutes for cutting and 700 minutes for assembly. If the profit per small chessboard is $4 and the profit per large chessboard is $8, how many of each should be made to maximize profit?", "order_mapping": {"small": 0, "large chessboards": 1, "small chessboard": 0, "large chessboard": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large chessboard": "8", "small chessboard": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"small chessboard": "5", "large chessboard": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"small chessboard": "10", "large chessboard": "20"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of small chessboards\n- y: Number of large chessboards\n\nObjective:\n- The company aims to maximize its profit. The profit per small chessboard is $4 and the profit per large chessboard is $8. Therefore, the objective function is: Maximize 4x + 8y\n\nConstraints:\n- The company has 400 minutes available for cutting, and each small chessboard takes 5 minutes of cutting and each large chessboard takes 10 minutes of cutting. This leads to the constraint: 5x + 10y <= 400.\n- The company has 700 minutes available for assembly, and each small chessboard takes 10 minutes of assembly and each large chessboard takes 20 minutes of assembly. This results in the constraint: 10x + 20y <= 700.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 8y\nConstraints:\n5x + 10y <= 400\n10x + 20y <= 700", "canonical": {"objective": [-4.0, -8.0], "constraints": [[5.0, 10.0, 400.0], [10.0, 20.0, 700.0]]}, "solution": {"x": 70, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of small chessboards made: SmallChessboards\n- Number of large chessboards made: LargeChessboards\n\nConstraints:\n- Total cutting time for small and large chessboards should not exceed 400 minutes:\n  5 * SmallChessboards + 10 * LargeChessboards <= 400\n- Total assembly time for small and large chessboards should not exceed 700 minutes:\n  10 * SmallChessboards + 20 * LargeChessboards <= 700\n\nObjective:\n- Maximize profit (4 dollars per small chessboard, 8 dollars per large chessboard):\n  4 * SmallChessboards + 8 * LargeChessboards\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallChessboards = intvar(0, 999999999)  # Number of small chessboards made\nLargeChessboards = intvar(0, 999999999)  # Number of large chessboards made\n\n# Constraints\nm = Model()\n\n# Total cutting time for small and large chessboards should not exceed 400 minutes:\nm += 5 * SmallChessboards + 10 * LargeChessboards <= 400\n# Total assembly time for small and large chessboards should not exceed 700 minutes:\nm += 10 * SmallChessboards + 20 * LargeChessboards <= 700\n\n# Objective\n# Maximize profit (4 dollars per small chessboard, 8 dollars per large chessboard):\nm.maximize(4 * SmallChessboards + 8 * LargeChessboards)\n", "entities": [{"start": 16, "end": 21, "word": "small", "entity_group": "VAR", "score": 0.9995143232276974}, {"start": 26, "end": 43, "word": "large chessboards", "entity_group": "VAR", "score": 0.9999794147290312}, {"start": 51, "end": 67, "word": "small chessboard", "entity_group": "VAR", "score": 0.9999846981255385}, {"start": 74, "end": 75, "word": "5", "entity_group": "PARAM", "score": 0.9997034352182975}, {"start": 99, "end": 101, "word": "10", "entity_group": "PARAM", "score": 0.9997149924528326}, {"start": 129, "end": 145, "word": "large chessboard", "entity_group": "VAR", "score": 0.9999776544057498}, {"start": 152, "end": 154, "word": "10", "entity_group": "PARAM", "score": 0.9997289219759564}, {"start": 178, "end": 180, "word": "20", "entity_group": "PARAM", "score": 0.9996567024773685}, {"start": 219, "end": 228, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991584169835774}, {"start": 229, "end": 232, "word": "400", "entity_group": "LIMIT", "score": 0.9994182540857468}, {"start": 257, "end": 260, "word": "700", "entity_group": "LIMIT", "score": 0.999651513236403}, {"start": 291, "end": 297, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997091849459088}, {"start": 302, "end": 318, "word": "small chessboard", "entity_group": "VAR", "score": 0.9999350355900829}, {"start": 324, "end": 325, "word": "4", "entity_group": "PARAM", "score": 0.9995624785767597}, {"start": 334, "end": 340, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354484870424}, {"start": 345, "end": 361, "word": "large chessboard", "entity_group": "VAR", "score": 0.999931828541101}, {"start": 367, "end": 368, "word": "8", "entity_group": "PARAM", "score": 0.999679542865528}, {"start": 406, "end": 414, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 415, "end": 421, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-814235434", "document": "An ice cream truck sells strawberry and mint ice cream cakes. The profit per strawberry ice cream cake is $2.5 and the profit per mint ice cream cake is $4. The ice cream truck must make at least 10 cakes of strawberry ice cream but cannot make more than 20 cakes. It must also make at least 20 mint ice cream cakes but can not make more than 40 cakes. In total, the ice cream truck can make at most 50 total cakes. How many cakes of each flavor should they make to maximize profit?", "order_mapping": {"strawberry": 0, "mint ice cream cakes": 1, "strawberry ice cream cake": 0, "mint ice cream cake": 1, "strawberry ice cream": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"strawberry ice cream cake": "2.5", "mint ice cream cake": "4"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "10", "var": "strawberry ice cream", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "cannot make more than", "limit": "20", "var": "strawberry ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "can not make more than", "limit": "40", "var": "mint ice cream cakes", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "mint ice cream cakes", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "50", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of strawberry ice cream cakes\n- y: Number of mint ice cream cakes\n\nObjective:\n- The ice cream truck aims to maximize its profit. The profit per strawberry ice cream cake is $2.5 and the profit per mint ice cream cake is $4. Therefore, the objective function is: Maximize 2.5x + 4y\n\nConstraints:\n- The ice cream truck must make at least 10 cakes of strawberry ice cream, leading to the constraint: x >= 10.\n- The ice cream truck cannot make more than 20 cakes of strawberry ice cream, leading to the constraint: x <= 20.\n- The ice cream truck must make at least 20 mint ice cream cakes, leading to the constraint: y >= 20.\n- The ice cream truck cannot make more than 40 cakes of mint ice cream, leading to the constraint: y <= 40.\n- In total, the ice cream truck can make at most 50 total cakes, leading to the constraint: x + y <= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2.5x + 4y\nConstraints:\nx >= 10\nx <= 20\ny >= 20\ny <= 40\nx + y <= 50", "canonical": {"objective": [-2.5, -4.0], "constraints": [[-1.0, 0.0, -10.0], [1.0, 0.0, 20.0], [0.0, -1.0, -20.0], [0.0, 1.0, 40.0], [1.0, 1.0, 50.0]]}, "solution": {"x": 10, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of strawberry ice cream cakes made: StrawberryCakes\n- Number of mint ice cream cakes made: MintCakes\n\nConstraints:\n- Strawberry cakes must be at least 10 and no more than 20:\n  10 <= StrawberryCakes <= 20\n- Mint cakes must be at least 20 and no more than 40:\n  20 <= MintCakes <= 40\n- Total number of cakes made should not exceed 50:\n  StrawberryCakes + MintCakes <= 50\n\nObjective:\n- Maximize profit (2.5 dollars per strawberry cake, 4 dollars per mint cake):\n  2.5 * StrawberryCakes + 4 * MintCakes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStrawberryCakes = intvar(0, 999999999)  # Number of strawberry ice cream cakes made\nMintCakes = intvar(0, 999999999)  # Number of mint ice cream cakes made\n\n# Constraints\nm = Model()\n\n# Strawberry cakes constraints:\nm += StrawberryCakes >= 10  # At least 10 strawberry cakes\nm += StrawberryCakes <= 20  # No more than 20 strawberry cakes\n\n# Mint cakes constraints:\nm += MintCakes >= 20  # At least 20 mint cakes\nm += MintCakes <= 40  # No more than 40 mint cakes\n\n# Total cakes constraint:\nm += StrawberryCakes + MintCakes <= 50  # No more than 50 total cakes\n\n# Objective\n# Maximize profit (2.5 dollars per strawberry cake, 4 dollars per mint cake):\nm.maximize(2.5 * StrawberryCakes + 4 * MintCakes)\n", "entities": [{"start": 25, "end": 35, "word": "strawberry", "entity_group": "VAR", "score": 0.9996138235133658}, {"start": 40, "end": 60, "word": "mint ice cream cakes", "entity_group": "VAR", "score": 0.9992191818179786}, {"start": 67, "end": 73, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999922754079854}, {"start": 78, "end": 103, "word": "strawberry ice cream cake", "entity_group": "VAR", "score": 0.9990319162680392}, {"start": 109, "end": 112, "word": "2.5", "entity_group": "PARAM", "score": 0.9980908880796979}, {"start": 121, "end": 127, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999114006491705}, {"start": 132, "end": 151, "word": "mint ice cream cake", "entity_group": "VAR", "score": 0.9985024488586787}, {"start": 157, "end": 158, "word": "4", "entity_group": "PARAM", "score": 0.999561446894179}, {"start": 191, "end": 199, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987421450036309}, {"start": 200, "end": 202, "word": "10", "entity_group": "LIMIT", "score": 0.999708673683316}, {"start": 212, "end": 232, "word": "strawberry ice cream", "entity_group": "VAR", "score": 0.9982180178374447}, {"start": 237, "end": 259, "word": "can not make more than", "entity_group": "CONST_DIR", "score": 0.9628014476859865}, {"start": 260, "end": 262, "word": "20", "entity_group": "LIMIT", "score": 0.999761846664094}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990415941193754}, {"start": 298, "end": 300, "word": "20", "entity_group": "LIMIT", "score": 0.9995221418290828}, {"start": 301, "end": 321, "word": "mint ice cream cakes", "entity_group": "VAR", "score": 0.9989857938129416}, {"start": 326, "end": 348, "word": "can not make more than", "entity_group": "CONST_DIR", "score": 0.9459125680849524}, {"start": 349, "end": 351, "word": "40", "entity_group": "LIMIT", "score": 0.9997013490231891}, {"start": 400, "end": 407, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9921620474226915}, {"start": 408, "end": 410, "word": "50", "entity_group": "LIMIT", "score": 0.9995589136477517}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996959595073649}, {"start": 484, "end": 490, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269901225997}]}
{"doc_id": "1476574617", "document": "Fancy Clothing Co makes red shirts and green shirts. A red shirt requires 2 unit of dye, 5 units of water, and 20 worker minutes. A green shirt requires 5 units of dye, 8 units of water, and 25 worker minutes. The company only has 1500 units of dye, 3000 units of water, and 8000 worker minutes available. If the profit per red shirt is $20 and the profit per green shirt is $35, how many of each should be made to maximize profit?", "order_mapping": {"red shirts": 0, "green shirts": 1, "red shirt": 0, "green shirt": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"red shirt": "20", "green shirt": "35"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1500", "terms": {"red shirt": "2", "green shirt": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"red shirt": "5", "green shirt": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "8000", "terms": {"red shirt": "20", "green shirt": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of red shirts\n- y: Number of green shirts\n\nObjective:\n- The company aims to maximize its profit. The profit per red shirt is $20 and the profit per green shirt is $35. Therefore, the objective function is: Maximize 20x + 35y\n\nConstraints:\n- The company has limited resources: 1500 units of dye, 3000 units of water, and 8000 worker minutes. These constraints can be formulated as:\n    - 2x + 5y <= 1500 (dye constraint)\n    - 5x + 8y <= 3000 (water constraint)\n    - 20x + 25y <= 8000 (worker minutes constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 35y\nConstraints:\n2x + 5y <= 1500\n5x + 8y <= 3000\n20x + 25y <= 8000", "canonical": {"objective": [-20.0, -35.0], "constraints": [[2.0, 5.0, 1500.0], [5.0, 8.0, 3000.0], [20.0, 25.0, 8000.0]]}, "solution": {"x": 50, "y": 280}, "pseudo_model": "\nDecision Variables:\n- Number of red shirts made: RedShirts\n- Number of green shirts made: GreenShirts\n\nConstraints:\n- Dye usage for red and green shirts should not exceed 1500 units:\n  2 * RedShirts + 5 * GreenShirts <= 1500\n- Water usage for red and green shirts should not exceed 3000 units:\n  5 * RedShirts + 8 * GreenShirts <= 3000\n- Worker minutes for red and green shirts should not exceed 8000 minutes:\n  20 * RedShirts + 25 * GreenShirts <= 8000\n\nObjective:\n- Maximize profit (20 dollars per red shirt, 35 dollars per green shirt):\n  20 * RedShirts + 35 * GreenShirts\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRedShirts = intvar(0, 999999999)  # Number of red shirts made\nGreenShirts = intvar(0, 999999999)  # Number of green shirts made\n\n# Constraints\nm = Model()\n\n# Dye constraint: 2 units for a red shirt, 5 units for a green shirt, 1500 units available\nm += 2 * RedShirts + 5 * GreenShirts <= 1500\n# Water constraint: 5 units for a red shirt, 8 units for a green shirt, 3000 units available\nm += 5 * RedShirts + 8 * GreenShirts <= 3000\n# Worker minutes constraint: 20 minutes for a red shirt, 25 minutes for a green shirt, 8000 minutes available\nm += 20 * RedShirts + 25 * GreenShirts <= 8000\n\n# Objective\n# Maximize profit: $20 per red shirt, $35 per green shirt\nm.maximize(20 * RedShirts + 35 * GreenShirts)\n", "entities": [{"start": 24, "end": 34, "word": "red shirts", "entity_group": "VAR", "score": 0.9999599589798698}, {"start": 39, "end": 51, "word": "green shirts", "entity_group": "VAR", "score": 0.9999798150458816}, {"start": 56, "end": 65, "word": "red shirt", "entity_group": "VAR", "score": 0.9999869853856227}, {"start": 75, "end": 76, "word": "2", "entity_group": "PARAM", "score": 0.99957368642072}, {"start": 91, "end": 92, "word": "5", "entity_group": "PARAM", "score": 0.9997332570792092}, {"start": 114, "end": 116, "word": "20", "entity_group": "PARAM", "score": 0.999330778614567}, {"start": 136, "end": 147, "word": "green shirt", "entity_group": "VAR", "score": 0.9999731869441991}, {"start": 157, "end": 158, "word": "5", "entity_group": "PARAM", "score": 0.9996910278176958}, {"start": 174, "end": 175, "word": "8", "entity_group": "PARAM", "score": 0.9997387940872813}, {"start": 197, "end": 199, "word": "25", "entity_group": "PARAM", "score": 0.9994133016959194}, {"start": 238, "end": 242, "word": "1500", "entity_group": "LIMIT", "score": 0.9997563853484867}, {"start": 258, "end": 262, "word": "3000", "entity_group": "LIMIT", "score": 0.9997484722192685}, {"start": 284, "end": 288, "word": "8000", "entity_group": "LIMIT", "score": 0.9956027986972614}, {"start": 304, "end": 313, "word": "available", "entity_group": "CONST_DIR", "score": 0.998838101173985}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998705381689097}, {"start": 334, "end": 343, "word": "red shirt", "entity_group": "VAR", "score": 0.9999515313584896}, {"start": 349, "end": 351, "word": "20", "entity_group": "PARAM", "score": 0.99948637873312}, {"start": 360, "end": 366, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999354490095786}, {"start": 371, "end": 382, "word": "green shirt", "entity_group": "VAR", "score": 0.9999318285097084}, {"start": 388, "end": 390, "word": "35", "entity_group": "PARAM", "score": 0.9996795568543727}, {"start": 428, "end": 436, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 437, "end": 443, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "1092036773", "document": "Bob Fashion produces two types of lipsticks: cream lipsticks and matte lipsticks. The profit per cream lipstick is $70 and the profit per matte lipstick is $100. It takes 3.5 hours to produce the raw materials for one cream lipstick, 5 hours to mix and 2 hours in packing. It takes 5 hours to produce the raw materials for one matte lipstick, 3 hours to mix and 1.5 hours in packing. Per month, 300 hours are available for preparing the raw materials, 400 hours for mixing and 200 hours for packing the lipsticks.  How many of each type of lipstick should be produced in order to maximize the total monthly profit?", "order_mapping": {"cream lipsticks": 0, "matte lipsticks": 1, "cream lipstick": 0, "matte lipstick": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cream lipstick": "70", "matte lipstick": "100"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"cream lipstick": "3.5", "matte lipstick": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"cream lipstick": "5", "matte lipstick": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"cream lipstick": "2", "matte lipstick": "1.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cream lipsticks produced\n- y: Number of matte lipsticks produced\n\nObjective:\n- The objective is to maximize the total monthly profit. The profit per cream lipstick is $70 and the profit per matte lipstick is $100. Therefore, the objective function is: Maximize 70x + 100y\n\nConstraints:\n- The production of cream lipsticks requires 3.5 hours for raw materials, 5 hours for mixing, and 2 hours for packing. The total available hours for each activity are 300, 400, and 200 respectively. These constraints can be formulated as:\n    - 3.5x + 5y <= 300 (raw materials)\n    - 5x + 3y <= 400 (mixing)\n    - 2x + 1.5y <= 200 (packing)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 100y\nConstraints:\n3.5x + 5y <= 300\n5x + 3y <= 400\n2x + 1.5y <= 200", "canonical": {"objective": [-70.0, -100.0], "constraints": [[3.5, 5.0, 300.0], [5.0, 3.0, 400.0], [2.0, 1.5, 200.0]]}, "solution": {"x": 0, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of cream lipsticks produced: CreamLipsticks\n- Number of matte lipsticks produced: MatteLipsticks\n\nConstraints:\n- Time constraints for producing the raw materials, mixing, and packing:\n  - 300 hours available for preparing the raw materials:\n    3.5 * CreamLipsticks + 5 * MatteLipsticks <= 300\n  - 400 hours available for mixing:\n    5 * CreamLipsticks + 3 * MatteLipsticks <= 400\n  - 200 hours available for packing:\n    2 * CreamLipsticks + 1.5 * MatteLipsticks <= 200\n\nObjective:\n- Maximize total monthly profit (70 dollars per cream lipstick, 100 dollars per matte lipstick):\n  70 * CreamLipsticks + 100 * MatteLipsticks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCreamLipsticks = intvar(0, 999999999)  # Number of cream lipsticks produced\nMatteLipsticks = intvar(0, 999999999)  # Number of matte lipsticks produced\n\n# Constraints\nm = Model()\n\n# Time constraints for producing the raw materials, mixing, and packing:\n# 300 hours available for preparing the raw materials:\nm += 3.5 * CreamLipsticks + 5 * MatteLipsticks <= 300\n# 400 hours available for mixing:\nm += 5 * CreamLipsticks + 3 * MatteLipsticks <= 400\n# 200 hours available for packing:\nm += 2 * CreamLipsticks + 1.5 * MatteLipsticks <= 200\n\n# Objective\n# Maximize total monthly profit (70 dollars per cream lipstick, 100 dollars per matte lipstick):\nm.maximize(70 * CreamLipsticks + 100 * MatteLipsticks)\n", "entities": [{"start": 46, "end": 61, "word": "cream lipsticks", "entity_group": "VAR", "score": 0.9999581351404639}, {"start": 66, "end": 81, "word": "matte lipsticks", "entity_group": "VAR", "score": 0.9999764997746836}, {"start": 88, "end": 94, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999587262761865}, {"start": 99, "end": 113, "word": "cream lipstick", "entity_group": "VAR", "score": 0.999958849386591}, {"start": 119, "end": 121, "word": "70", "entity_group": "PARAM", "score": 0.9995594374337782}, {"start": 130, "end": 136, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350374781959}, {"start": 141, "end": 155, "word": "matte lipstick", "entity_group": "VAR", "score": 0.999928829245605}, {"start": 161, "end": 164, "word": "100", "entity_group": "PARAM", "score": 0.9996455963832862}, {"start": 176, "end": 179, "word": "3.5", "entity_group": "PARAM", "score": 0.9997227254409283}, {"start": 223, "end": 237, "word": "cream lipstick", "entity_group": "VAR", "score": 0.9999701881946603}, {"start": 240, "end": 241, "word": "5", "entity_group": "PARAM", "score": 0.9997028534642658}, {"start": 259, "end": 260, "word": "2", "entity_group": "PARAM", "score": 0.9996468131773385}, {"start": 289, "end": 290, "word": "5", "entity_group": "PARAM", "score": 0.9996715924692899}, {"start": 334, "end": 348, "word": "matte lipstick", "entity_group": "VAR", "score": 0.9999632110976497}, {"start": 351, "end": 352, "word": "3", "entity_group": "PARAM", "score": 0.999718373369929}, {"start": 370, "end": 373, "word": "1.5", "entity_group": "PARAM", "score": 0.9994869255684631}, {"start": 405, "end": 408, "word": "300", "entity_group": "LIMIT", "score": 0.997610365216681}, {"start": 419, "end": 428, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994352666960119}, {"start": 463, "end": 466, "word": "400", "entity_group": "LIMIT", "score": 0.9997375787726286}, {"start": 488, "end": 491, "word": "200", "entity_group": "LIMIT", "score": 0.9996718481434901}, {"start": 591, "end": 599, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9955830864577679}, {"start": 618, "end": 624, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999664573951763}]}
{"doc_id": "-1805362172", "document": "A tutoring company wants to advertise their service using advertisements on the internet. They decided to use three types of advertisements: advertisements on search engines, advertisements on videos, and advertisements on social media. The cost and expected influence of each type of advertisement are given as follows. An advertisement on a search engine costs $50000 and reaches 100000 users. An advertisement on a video costs $5000 and reaches 7000 users. Finally, an advertisement on social media costs $1000 and reaches 800 users. The company can make at most 4 advertisements on videos. In addition, at most a half of all advertisements must be on social media. Finally, at least 10% of advertisements should be on search engines. If the weekly budget is $850000, how many of each commercial should be made to maximize influence?", "order_mapping": {"search engines": 0, "videos": 1, "social media": 2, "search engine": 0, "video": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "influence", "terms": {"social media": "800", "video": "7000", "search engine": "100000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "850000", "terms": {"search engine": "50000", "video": "5000", "social media": "1000"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "4", "var": "videos", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "half", "var": "social media", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "10%", "var": "search engines", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of advertisements on search engines\n- y: Number of advertisements on videos\n- z: Number of advertisements on social media\n\nObjective:\n- The tutoring company aims to maximize the influence of their advertisements. The influence of each type of advertisement is given as follows: search engine - 100000 users, video - 7000 users, social media - 800 users. Therefore, the objective function is: Maximize 100000x + 7000y + 800z\n\nConstraints:\n- The weekly budget is $850000, so the constraint is: 50000x + 5000y + 1000z <= 850000.\n- The company can make at most 4 advertisements on videos, leading to the constraint: y <= 4.\n- At most a half of all advertisements must be on social media, resulting in the constraint: z <= 0.5(x + y + z).\n- At least 10% of advertisements should be on search engines, leading to the constraint: x >= 0.10(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100000x + 7000y + 800z\nConstraints:\n50000x + 5000y + 1000z <= 850000\ny <= 4\nz <= 0.5(x + y + z)\nx >= 0.10(x + y + z)", "canonical": {"objective": [-100000.0, -7000.0, -800.0], "constraints": [[50000.0, 5000.0, 1000.0, 850000.0], [0.0, 1.0, 0.0, 4.0], [-0.5, -0.5, 0.5, 0.0], [-0.9, 0.1, 0.1, 0.0]]}, "solution": {"x": 17, "y": 0, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of advertisements on search engines: SearchEngineAds\n- Number of advertisements on videos: VideoAds\n- Number of advertisements on social media: SocialMediaAds\n\nConstraints:\n- Weekly budget should not exceed $850000:\n  50000 * SearchEngineAds + 5000 * VideoAds + 1000 * SocialMediaAds <= 850000\n- At most 4 advertisements on videos:\n  VideoAds <= 4\n- At most half of all advertisements must be on social media:\n  SocialMediaAds <= 0.5 * (SearchEngineAds + VideoAds + SocialMediaAds)\n- At least 10% of advertisements should be on search engines:\n  SearchEngineAds >= 0.1 * (SearchEngineAds + VideoAds + SocialMediaAds)\n\nObjective:\n- Maximize influence (100000 users per search engine ad, 7000 users per video ad, 800 users per social media ad):\n  100000 * SearchEngineAds + 7000 * VideoAds + 800 * SocialMediaAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSearchEngineAds = intvar(0, 999999999)  # Number of advertisements on search engines\nVideoAds = intvar(0, 999999999)  # Number of advertisements on videos\nSocialMediaAds = intvar(0, 999999999)  # Number of advertisements on social media\n\n# Constraints\nm = Model()\n\n# Weekly budget constraint ($850000):\nm += 50000 * SearchEngineAds + 5000 * VideoAds + 1000 * SocialMediaAds <= 850000\n# At most 4 advertisements on videos:\nm += VideoAds <= 4\n# At most half of all advertisements must be on social media:\nm += SocialMediaAds <= 0.5 * (SearchEngineAds + VideoAds + SocialMediaAds)\n# At least 10% of advertisements should be on search engines:\nm += SearchEngineAds >= 0.1 * (SearchEngineAds + VideoAds + SocialMediaAds)\n\n# Objective\n# Maximize influence (100000 users per search engine ad, 7000 users per video ad, 800 users per social media ad):\nm.maximize(100000 * SearchEngineAds + 7000 * VideoAds + 800 * SocialMediaAds)\n", "entities": [{"start": 161, "end": 175, "word": "search engines", "entity_group": "VAR", "score": 0.9999761898966583}, {"start": 196, "end": 202, "word": "videos", "entity_group": "VAR", "score": 0.9994982393430448}, {"start": 227, "end": 239, "word": "social media", "entity_group": "VAR", "score": 0.9998454092289814}, {"start": 264, "end": 273, "word": "influence", "entity_group": "OBJ_NAME", "score": 0.9965318328054031}, {"start": 349, "end": 362, "word": "search engine", "entity_group": "VAR", "score": 0.9999501319929099}, {"start": 371, "end": 376, "word": "50000", "entity_group": "PARAM", "score": 0.9994737959022084}, {"start": 381, "end": 388, "word": "reaches", "entity_group": "OBJ_NAME", "score": 0.9593176747840761}, {"start": 389, "end": 395, "word": "100000", "entity_group": "PARAM", "score": 0.997759861004919}, {"start": 426, "end": 431, "word": "video", "entity_group": "VAR", "score": 0.9996946623101722}, {"start": 440, "end": 444, "word": "5000", "entity_group": "PARAM", "score": 0.9993093788751104}, {"start": 449, "end": 456, "word": "reaches", "entity_group": "OBJ_NAME", "score": 0.9779242224131878}, {"start": 457, "end": 461, "word": "7000", "entity_group": "PARAM", "score": 0.9979291677344909}, {"start": 500, "end": 512, "word": "social media", "entity_group": "VAR", "score": 0.9998820178970729}, {"start": 521, "end": 525, "word": "1000", "entity_group": "PARAM", "score": 0.9990395308578748}, {"start": 530, "end": 537, "word": "reaches", "entity_group": "OBJ_NAME", "score": 0.9969375693886652}, {"start": 538, "end": 541, "word": "800", "entity_group": "PARAM", "score": 0.9975812617444467}, {"start": 571, "end": 578, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991556138907067}, {"start": 579, "end": 580, "word": "4", "entity_group": "LIMIT", "score": 0.9997131584768393}, {"start": 599, "end": 605, "word": "videos", "entity_group": "VAR", "score": 0.9996786737760436}, {"start": 622, "end": 629, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9968385088567961}, {"start": 632, "end": 636, "word": "half", "entity_group": "LIMIT", "score": 0.9280255820536698}, {"start": 670, "end": 682, "word": "social media", "entity_group": "VAR", "score": 0.9999027921468497}, {"start": 695, "end": 703, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992376246897607}, {"start": 704, "end": 708, "word": "10 %", "entity_group": "LIMIT", "score": 0.9747294364008547}, {"start": 740, "end": 754, "word": "search engines", "entity_group": "VAR", "score": 0.9999797092119571}, {"start": 771, "end": 777, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9961905554880206}, {"start": 783, "end": 789, "word": "850000", "entity_group": "LIMIT", "score": 0.9994640582117214}, {"start": 838, "end": 846, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995756027744621}, {"start": 847, "end": 856, "word": "influence", "entity_group": "OBJ_NAME", "score": 0.9985624677348288}]}
{"doc_id": "-229455193", "document": "A city has $200000 available to invest in a 9-month commitment.  They have decided to invest in both the film and healthcare industries. After consulting an advisor, the city has decided to invest a minimum of 25% in the film industry and at most 60% in the healthcare industry. The money placed in the film industry yields an 8% return and the money placed in the healthcare industry yields a 10% return. How much should the city invest in each industry to maximize its return on investment over this period of time?", "order_mapping": {"film": 0, "healthcare industries": 1, "film industry": 0, "healthcare industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"film industry": "8%", "healthcare industry": "10%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "200000", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "25%", "var": "film industry", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "60%", "var": "healthcare industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the film industry\n- y: Dollars invested in the healthcare industry\n\nObjective:\n- The city aims to maximize its return on investment over the 9-month period. The money placed in the film industry yields an 8% return and the money placed in the healthcare industry yields a 10% return. Therefore, the objective function is: Maximize 0.08x + 0.10y\n\nConstraints:\n- The city has $200,000 available to invest, so the constraint is: x + y <= 200000.\n- The city has decided to invest a minimum of 25% in the film industry, leading to the constraint: x >= 0.25(x + y).\n- At most 60% of the total investment may be in the healthcare industry, leading to the constraint: y <= 0.60(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.08x + 0.10y\nConstraints:\nx + y <= 200000\nx >= 0.25(x + y)\ny <= 0.60(x + y)", "canonical": {"objective": [-0.08, -0.1], "constraints": [[1.0, 1.0, 200000.0], [-0.75, 0.25, 0.0], [-0.6, 0.4, 0.0]]}, "solution": {"x": 80000, "y": 120000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the film industry: FilmIndustry\n- Amount invested in the healthcare industry: HealthcareIndustry\n\nConstraints:\n- Total investment in both industries equals the available amount:\n  FilmIndustry + HealthcareIndustry <= 200000\n- At least 25% of the total investment must be in the film industry:\n  FilmIndustry >= 0.25 * (FilmIndustry + HealthcareIndustry)\n- At most 60% of the total investment can be in the healthcare industry:\n  HealthcareIndustry <= 0.60 * (FilmIndustry + HealthcareIndustry)\n\nObjective:\n- Maximize return on investment (8% from the film industry, 10% from the healthcare industry):\n  0.08 * FilmIndustry + 0.10 * HealthcareIndustry\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFilmIndustry = intvar(0, 999999999)  # Amount invested in the film industry\nHealthcareIndustry = intvar(0, 999999999)  # Amount invested in the healthcare industry\n\n# Constraints\nm = Model()\n\n# The total investment in both industries should not exceed the available amount:\nm += FilmIndustry + HealthcareIndustry <= 200000\n# At least 25% of the total investment must be in the film industry:\nm += FilmIndustry >= 0.25 * (FilmIndustry + HealthcareIndustry)\n# At most 60% of the total investment can be in the healthcare industry:\nm += HealthcareIndustry <= 0.60 * (FilmIndustry + HealthcareIndustry)\n\n# Objective\n# Maximize return on investment (8% from the film industry, 10% from the healthcare industry):\nm.maximize(0.08 * FilmIndustry + 0.10 * HealthcareIndustry)\n", "entities": [{"start": 13, "end": 19, "word": "200000", "entity_group": "LIMIT", "score": 0.9996126009964107}, {"start": 20, "end": 29, "word": "available", "entity_group": "CONST_DIR", "score": 0.9945248118870814}, {"start": 108, "end": 112, "word": "film", "entity_group": "VAR", "score": 0.9994638392774924}, {"start": 117, "end": 138, "word": "healthcare industries", "entity_group": "VAR", "score": 0.9998792341600226}, {"start": 204, "end": 211, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9915426970143447}, {"start": 215, "end": 219, "word": "25 %", "entity_group": "LIMIT", "score": 0.8803145786207671}, {"start": 227, "end": 240, "word": "film industry", "entity_group": "VAR", "score": 0.9999705440493842}, {"start": 245, "end": 252, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997780490425071}, {"start": 253, "end": 257, "word": "60 %", "entity_group": "LIMIT", "score": 0.605575051582843}, {"start": 265, "end": 284, "word": "healthcare industry", "entity_group": "VAR", "score": 0.99986674199301}, {"start": 311, "end": 324, "word": "film industry", "entity_group": "VAR", "score": 0.9999847092398337}, {"start": 335, "end": 338, "word": "8 %", "entity_group": "PARAM", "score": 0.6937124841704398}, {"start": 339, "end": 345, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9706975616979778}, {"start": 374, "end": 393, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999453304511245}, {"start": 403, "end": 407, "word": "10 %", "entity_group": "PARAM", "score": 0.7328084963359006}, {"start": 408, "end": 414, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9950203163631738}, {"start": 469, "end": 477, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9976515539332343}, {"start": 482, "end": 488, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9955536654876949}]}
{"doc_id": "1908220477", "document": "John's trainer has given him a list of available food options as well as the macronutrient content and cost per serving of each food. A certain amount of macronutrients is required each day. For example, here is the data corresponding to rice and beef and the three macronutrients (proteins, carbs, and fat). Each serving of rice contains 2 units of protein, 80 units of carbs, and 1 unit of fat. Each serving of beef contains 20 units of protein, 200 units of carbs, and 16 units of fat. A serving of rice costs $5 and a serving of beef costs $30. John's trainer requires him to get at least 50 units of protein, 1000 units of carbs, and 40 units of fat per day. Find out how many servings of each food to consume per day to meet the requirements at minimal cost.", "order_mapping": {"rice": 0, "beef": 1}, "obj_declaration": {"type": "objective", "direction": "minimal", "name": "cost", "terms": {"beef": "30", "rice": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"rice": "2", "beef": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"rice": "80", "beef": "200"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"rice": "1", "beef": "16"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Servings of rice\n- y: Servings of beef\n\nObjective:\n- The goal is to minimize the cost of the food consumed. Given that each serving of rice costs $5 and each serving of beef costs $30, the objective function is: Minimize 5x + 30y\n\nConstraints:\n- John needs to consume at least 50 units of protein, 1000 units of carbs, and 40 units of fat per day. This leads to the following constraints:\n    - 2x + 20y >= 50 (protein constraint)\n    - 80x + 200y >= 1000 (carbs constraint)\n    - x + 16y >= 40 (fat constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 30y\nConstraints:\n2x + 20y >= 50\n80x + 200y >= 1000\nx + 16y >= 40", "canonical": {"objective": [5.0, 30.0], "constraints": [[-2.0, -20.0, -50.0], [-80.0, -200.0, -1000.0], [-1.0, -16.0, -40.0]]}, "solution": {"x": 8, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of servings of rice consumed per day: Rice\n- Number of servings of beef consumed per day: Beef\n\nConstraints:\n- Protein requirement (at least 50 units per day):\n  2 * Rice + 20 * Beef >= 50\n- Carbs requirement (at least 1000 units per day):\n  80 * Rice + 200 * Beef >= 1000\n- Fat requirement (at least 40 units per day):\n  1 * Rice + 16 * Beef >= 40\n\nObjective:\n- Minimize cost (Rice costs $5 per serving, Beef costs $30 per serving):\n  5 * Rice + 30 * Beef\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRice = intvar(0, 999999999)  # Number of servings of rice consumed per day\nBeef = intvar(0, 999999999)  # Number of servings of beef consumed per day\n\n# Constraints\nm = Model()\n\n# Protein requirement (at least 50 units per day):\nm += 2 * Rice + 20 * Beef >= 50\n# Carbs requirement (at least 1000 units per day):\nm += 80 * Rice + 200 * Beef >= 1000\n# Fat requirement (at least 40 units per day):\nm += 1 * Rice + 16 * Beef >= 40\n\n# Objective\n# Minimize cost (Rice costs $5 per serving, Beef costs $30 per serving):\nm.minimize(5 * Rice + 30 * Beef)\n", "entities": [{"start": 242, "end": 246, "word": "rice", "entity_group": "VAR", "score": 0.9995903619543401}, {"start": 251, "end": 255, "word": "beef", "entity_group": "VAR", "score": 0.9995173760497859}, {"start": 334, "end": 338, "word": "rice", "entity_group": "VAR", "score": 0.9993493478024202}, {"start": 348, "end": 349, "word": "2", "entity_group": "PARAM", "score": 0.9996378011227616}, {"start": 369, "end": 371, "word": "80", "entity_group": "PARAM", "score": 0.9997361255347971}, {"start": 393, "end": 394, "word": "1", "entity_group": "PARAM", "score": 0.9995270087092516}, {"start": 425, "end": 429, "word": "beef", "entity_group": "VAR", "score": 0.9993129433584375}, {"start": 439, "end": 441, "word": "20", "entity_group": "PARAM", "score": 0.99963765717963}, {"start": 461, "end": 464, "word": "200", "entity_group": "PARAM", "score": 0.9997361248158556}, {"start": 486, "end": 488, "word": "16", "entity_group": "PARAM", "score": 0.9996834568178743}, {"start": 517, "end": 521, "word": "rice", "entity_group": "VAR", "score": 0.9992007262055254}, {"start": 522, "end": 527, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.976331705480518}, {"start": 530, "end": 531, "word": "5", "entity_group": "PARAM", "score": 0.999428658943612}, {"start": 549, "end": 553, "word": "beef", "entity_group": "VAR", "score": 0.9981532208151398}, {"start": 554, "end": 559, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9792324616220496}, {"start": 562, "end": 564, "word": "30", "entity_group": "PARAM", "score": 0.9995416237233812}, {"start": 603, "end": 611, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991295061555118}, {"start": 612, "end": 614, "word": "50", "entity_group": "LIMIT", "score": 0.9996464858352242}, {"start": 634, "end": 638, "word": "1000", "entity_group": "LIMIT", "score": 0.9997456440952531}, {"start": 660, "end": 662, "word": "40", "entity_group": "LIMIT", "score": 0.9996594168888673}, {"start": 773, "end": 780, "word": "minimal", "entity_group": "OBJ_DIR", "score": 0.9973003977857828}, {"start": 781, "end": 785, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9908615651818562}]}
{"doc_id": "635359047", "document": "XYZ Automobile sells SUV cars and minivans. Two different factories produce these cars. The SUV  car factory can make at most 5 SUV cars per day while the minivan car factory can make at most 3 minivans per day. The company outsources the finishing touches to a third party, which can process at most 5 vehicle of either type per day. If the profit per SUV car is $7500 and the profit per minivan is $4000, how many of each vehicle should the company make to maximize profit?", "order_mapping": {"SUV cars": 0, "minivans": 1, "SUV  car": 0, "minivan car": 1, "SUV car": 0, "minivan": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"SUV car": "7500", "minivan": "4000"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "5", "var": "SUV cars", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "3", "var": "minivans", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "5", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of SUV cars produced per day\n- y: Number of minivans produced per day\n\nObjective:\n- The company aims to maximize its profit. The profit per SUV car is $7500 and the profit per minivan is $4000. Therefore, the objective function is: Maximize 7500x + 4000y\n\nConstraints:\n- The SUV car factory can make at most 5 SUV cars per day, leading to the constraint: x <= 5.\n- The minivan car factory can make at most 3 minivans per day, leading to the constraint: y <= 3.\n- The third-party finishing process can handle at most 5 vehicles of either type per day, resulting in the constraint: x + y <= 5.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7500x + 4000y\nConstraints:\nx <= 5\ny <= 3\nx + y <= 5", "canonical": {"objective": [-7500.0, -4000.0], "constraints": [[1.0, 0.0, 5.0], [0.0, 1.0, 3.0], [1.0, 1.0, 5.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of SUV cars made per day: SUVs\n- Number of minivans made per day: Minivans\n\nConstraints:\n- SUV car factory can make at most 5 SUV cars per day:\n  SUVs <= 5\n- Minivan car factory can make at most 3 minivans per day:\n  Minivans <= 3\n- The third party can process at most 5 vehicles of either type per day:\n  SUVs + Minivans <= 5\n\nObjective:\n- Maximize profit (7500 dollars per SUV car, 4000 dollars per minivan):\n  7500 * SUVs + 4000 * Minivans\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSUVs = intvar(0, 5)  # Number of SUV cars made per day\nMinivans = intvar(0, 3)  # Number of minivans made per day\n\n# Constraints\nm = Model()\n\n# SUV car factory can make at most 5 SUV cars per day:\nm += SUVs <= 5\n# Minivan car factory can make at most 3 minivans per day:\nm += Minivans <= 3\n# The third party can process at most 5 vehicles of either type per day:\nm += SUVs + Minivans <= 5\n\n# Objective\n# Maximize profit (7500 dollars per SUV car, 4000 dollars per minivan):\nm.maximize(7500 * SUVs + 4000 * Minivans)\n", "entities": [{"start": 21, "end": 29, "word": "SUV cars", "entity_group": "VAR", "score": 0.9999870219598361}, {"start": 34, "end": 42, "word": "minivans", "entity_group": "VAR", "score": 0.9993453129606292}, {"start": 94, "end": 101, "word": "SUV car", "entity_group": "VAR", "score": 0.9999945248150719}, {"start": 119, "end": 126, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981965615348133}, {"start": 127, "end": 128, "word": "5", "entity_group": "LIMIT", "score": 0.999564902494095}, {"start": 129, "end": 137, "word": "SUV cars", "entity_group": "VAR", "score": 0.9999518871252638}, {"start": 156, "end": 167, "word": "minivan car", "entity_group": "VAR", "score": 0.9999643107853003}, {"start": 185, "end": 192, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998299615399728}, {"start": 193, "end": 194, "word": "3", "entity_group": "LIMIT", "score": 0.9993622362824917}, {"start": 195, "end": 203, "word": "minivans", "entity_group": "VAR", "score": 0.9991619064755829}, {"start": 296, "end": 303, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989452295495659}, {"start": 304, "end": 305, "word": "5", "entity_group": "LIMIT", "score": 0.9995663397061793}, {"start": 346, "end": 352, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999462689164528}, {"start": 357, "end": 364, "word": "SUV car", "entity_group": "VAR", "score": 0.9998839503795629}, {"start": 370, "end": 374, "word": "7500", "entity_group": "PARAM", "score": 0.9995406301915052}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998500733706672}, {"start": 394, "end": 401, "word": "minivan", "entity_group": "VAR", "score": 0.9994113888923427}, {"start": 407, "end": 411, "word": "4000", "entity_group": "PARAM", "score": 0.9994256570350748}, {"start": 466, "end": 474, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994938024516942}, {"start": 475, "end": 481, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277472233759}]}
{"doc_id": "-1395627543", "document": "A food truck makes two different sandwiches: an egg sandwich and a ham sandwich. Both need eggs and ham. Each egg sandwich requires 5 eggs and 2 slices of ham. Each ham sandwich requires 1 egg and 4 slices of ham. The truck has a total of 50 eggs and 60 slices of ham. It makes a profit of $3.5 per egg sandwich and a profit of $5 per ham sandwich. How many of each sandwich should be made to maximize profit?", "order_mapping": {"egg sandwich": 0, "ham sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"egg sandwich": "3.5", "ham sandwich": "5"}}, "const_declarations": [{"type": "linear", "direction": "a total of", "limit": "50", "terms": {"egg sandwich": "5", "ham sandwich": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "a total of", "limit": "60", "terms": {"egg sandwich": "2", "ham sandwich": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of egg sandwiches\n- y: Number of ham sandwiches\n\nObjective:\n- The food truck aims to maximize its profit. It makes a profit of $3.5 per egg sandwich and a profit of $5 per ham sandwich. Therefore, the objective function is: Maximize 3.5x + 5y\n\nConstraints:\n- Each egg sandwich requires 5 eggs and each ham sandwich requires 1 egg, so the constraint for eggs is: 5x + y <= 50.\n- Each egg sandwich requires 2 slices of ham and each ham sandwich requires 4 slices of ham, so the constraint for ham slices is: 2x + 4y <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3.5x + 5y\nConstraints:\n5x + y <= 50\n2x + 4y <= 60", "canonical": {"objective": [-3.5, -5.0], "constraints": [[5.0, 1.0, 50.0], [2.0, 4.0, 60.0]]}, "solution": {"x": 6, "y": 12}, "pseudo_model": "\nDecision Variables:\n- Number of egg sandwiches made: EggSandwich\n- Number of ham sandwiches made: HamSandwich\n\nConstraints:\n- The truck has a total of 50 eggs, and each egg sandwich requires 5 eggs while each ham sandwich requires 1 egg:\n  5 * EggSandwich + 1 * HamSandwich <= 50\n- The truck has a total of 60 slices of ham, and each egg sandwich requires 2 slices of ham while each ham sandwich requires 4 slices of ham:\n  2 * EggSandwich + 4 * HamSandwich <= 60\n\nObjective:\n- Maximize profit (3.5 dollars per egg sandwich, 5 dollars per ham sandwich):\n  3.5 * EggSandwich + 5 * HamSandwich\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEggSandwich = intvar(0, 999999999)  # Number of egg sandwiches made\nHamSandwich = intvar(0, 999999999)  # Number of ham sandwiches made\n\n# Constraints\nm = Model()\n\n# The truck has a total of 50 eggs:\nm += 5 * EggSandwich + 1 * HamSandwich <= 50\n# The truck has a total of 60 slices of ham:\nm += 2 * EggSandwich + 4 * HamSandwich <= 60\n\n# Objective\n# Maximize profit (3.5 dollars per egg sandwich, 5 dollars per ham sandwich):\nm.maximize(3.5 * EggSandwich + 5 * HamSandwich)\n", "entities": [{"start": 49, "end": 61, "word": "egg sandwich", "entity_group": "VAR", "score": 0.9999871204451736}, {"start": 68, "end": 80, "word": "ham sandwich", "entity_group": "VAR", "score": 0.9999483532105401}, {"start": 113, "end": 125, "word": "egg sandwich", "entity_group": "VAR", "score": 0.9999838745015008}, {"start": 135, "end": 136, "word": "5", "entity_group": "PARAM", "score": 0.9995383850221881}, {"start": 146, "end": 147, "word": "2", "entity_group": "PARAM", "score": 0.9993975352451162}, {"start": 169, "end": 181, "word": "ham sandwich", "entity_group": "VAR", "score": 0.9999852397291287}, {"start": 191, "end": 192, "word": "1", "entity_group": "PARAM", "score": 0.9990888849251695}, {"start": 201, "end": 202, "word": "4", "entity_group": "PARAM", "score": 0.9990383560588046}, {"start": 233, "end": 243, "word": "a total of", "entity_group": "CONST_DIR", "score": 0.9829763993691687}, {"start": 244, "end": 246, "word": "50", "entity_group": "LIMIT", "score": 0.9994503592607642}, {"start": 256, "end": 258, "word": "60", "entity_group": "LIMIT", "score": 0.9995088068177775}, {"start": 286, "end": 292, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997345001124153}, {"start": 298, "end": 301, "word": "3.5", "entity_group": "PARAM", "score": 0.9995980631492213}, {"start": 306, "end": 318, "word": "egg sandwich", "entity_group": "VAR", "score": 0.9999730341773866}, {"start": 325, "end": 331, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997914315481853}, {"start": 337, "end": 338, "word": "5", "entity_group": "PARAM", "score": 0.9993063279127455}, {"start": 343, "end": 355, "word": "ham sandwich", "entity_group": "VAR", "score": 0.9999593340624677}, {"start": 402, "end": 410, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993193030297597}, {"start": 411, "end": 417, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997781723828255}]}
{"doc_id": "438270023", "document": "A cafe makes lattes and cappuccinos. Both of which require milk and coffee. Each latte needs 4 units of milk and 1 unit of coffee. Each cappuccino requires 2 units of milk and 2 units of coffee. The cafe has a total of 80 units of milk and 50 units of coffee available. If the profit per latte is $2 and the profit per cappuccino is $1, how many of each should be made to maximize profit?", "order_mapping": {"lattes": 0, "cappuccinos": 1, "latte": 0, "cappuccino": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"latte": "2", "cappuccino": "1"}}, "const_declarations": [{"type": "linear", "direction": "a total of", "limit": "80", "terms": {"cappuccino": "2", "latte": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"latte": "1", "cappuccino": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of lattes\n- y: Number of cappuccinos\n\nObjective:\n- The cafe aims to maximize its profit. The profit per latte is $2 and the profit per cappuccino is $1. Therefore, the objective function is: Maximize 2x + y\n\nConstraints:\n- The cafe has a total of 80 units of milk and 50 units of coffee available. Each latte needs 4 units of milk and 1 unit of coffee, and each cappuccino requires 2 units of milk and 2 units of coffee. These constraints can be formulated as:\n    - 4x + 2y <= 80 (milk constraint)\n    - x + 2y <= 50 (coffee constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + y\nConstraints:\n4x + 2y <= 80\nx + 2y <= 50", "canonical": {"objective": [-2.0, -1.0], "constraints": [[4.0, 2.0, 80.0], [1.0, 2.0, 50.0]]}, "solution": {"x": 20, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of lattes made: Lattes\n- Number of cappuccinos made: Cappuccinos\n\nConstraints:\n- Milk constraint (4 units per latte, 2 units per cappuccino, 80 units total):\n  4*Lattes + 2*Cappuccinos <= 80\n- Coffee constraint (1 unit per latte, 2 units per cappuccino, 50 units total):\n  1*Lattes + 2*Cappuccinos <= 50\n\nObjective:\n- Maximize profit ($2 per latte, $1 per cappuccino):\n  2*Lattes + 1*Cappuccinos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLattes = intvar(0, 999999999)  # Number of lattes made\nCappuccinos = intvar(0, 999999999)  # Number of cappuccinos made\n\n# Constraints\nm = Model()\n\n# Milk constraint: 4 units of milk per latte and 2 units per cappuccino, total of 80 units available\nm += 4*Lattes + 2*Cappuccinos <= 80\n# Coffee constraint: 1 unit of coffee per latte and 2 units per cappuccino, total of 50 units available\nm += 1*Lattes + 2*Cappuccinos <= 50\n\n# Objective\n# Maximize profit: $2 per latte and $1 per cappuccino\nm.maximize(2*Lattes + 1*Cappuccinos)\n", "entities": [{"start": 13, "end": 19, "word": "lattes", "entity_group": "VAR", "score": 0.9990905885842668}, {"start": 24, "end": 35, "word": "cappuccinos", "entity_group": "VAR", "score": 0.9997020510990843}, {"start": 83, "end": 88, "word": "latte", "entity_group": "VAR", "score": 0.9996501220154871}, {"start": 95, "end": 96, "word": "4", "entity_group": "PARAM", "score": 0.9996525001505966}, {"start": 115, "end": 116, "word": "1", "entity_group": "PARAM", "score": 0.9997062063906825}, {"start": 139, "end": 149, "word": "cappuccino", "entity_group": "VAR", "score": 0.9996101784812376}, {"start": 159, "end": 160, "word": "2", "entity_group": "PARAM", "score": 0.9996691206613592}, {"start": 179, "end": 180, "word": "2", "entity_group": "PARAM", "score": 0.9997057214675632}, {"start": 212, "end": 222, "word": "a total of", "entity_group": "CONST_DIR", "score": 0.9863784496677317}, {"start": 223, "end": 225, "word": "80", "entity_group": "LIMIT", "score": 0.9994899418547789}, {"start": 244, "end": 246, "word": "50", "entity_group": "LIMIT", "score": 0.9997282377278469}, {"start": 263, "end": 272, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977491884365999}, {"start": 282, "end": 288, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997020222909596}, {"start": 293, "end": 298, "word": "latte", "entity_group": "VAR", "score": 0.9996520817541872}, {"start": 304, "end": 305, "word": "2", "entity_group": "PARAM", "score": 0.9991340877797357}, {"start": 314, "end": 320, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998292088256779}, {"start": 325, "end": 335, "word": "cappuccino", "entity_group": "VAR", "score": 0.9994201489643024}, {"start": 341, "end": 342, "word": "1", "entity_group": "PARAM", "score": 0.9994707338041853}, {"start": 380, "end": 388, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 389, "end": 395, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-2105580086", "document": "A doctor prescribed two supplements to a patient. Supplement A contains 3 units of calcium, 2 units of vitamin A, and 3 units of vitamin B per supplement. Supplement B contains 4 units of calcium, 1 unit of vitamin A, and 2 units of vitamin B per supplement. Supplement A costs $3.50 per supplement while supplement B costs $3.80 per supplement. The patient must get at least 25 units of calcium, 20 units of vitamin A, and 18 units of vitamin B. How many of each supplement should he buy to minimize his cost?", "order_mapping": {"Supplement A": 0, "Supplement B": 1, "supplement B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"supplement B": "3.80", "Supplement A": "3.50"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "25", "terms": {"Supplement A": "3", "Supplement B": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20", "terms": {"Supplement A": "2", "Supplement B": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "18", "terms": {"Supplement A": "3", "Supplement B": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of supplement A to buy\n- y: Number of supplement B to buy\n\nObjective:\n- The patient wants to minimize the cost of the supplements. Supplement A costs $3.50 per supplement and supplement B costs $3.80 per supplement. Therefore, the objective function is: Minimize 3.50x + 3.80y\n\nConstraints:\n- The patient must get at least 25 units of calcium, 20 units of vitamin A, and 18 units of vitamin B. This leads to the following constraints:\n    - 3x + 4y >= 25 (calcium)\n    - 2x + y >= 20 (vitamin A)\n    - 3x + 2y >= 18 (vitamin B)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3.50x + 3.80y\nConstraints:\n3x + 4y >= 25\n2x + y >= 20\n3x + 2y >= 18", "canonical": {"objective": [3.5, 3.8], "constraints": [[-3.0, -4.0, -25.0], [-2.0, -1.0, -20.0], [-3.0, -2.0, -18.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Supplement A bought: SupplementA\n- Number of Supplement B bought: SupplementB\n\nConstraints:\n- At least 25 units of calcium required:\n  3 * SupplementA + 4 * SupplementB >= 25\n- At least 20 units of vitamin A required:\n  2 * SupplementA + 1 * SupplementB >= 20\n- At least 18 units of vitamin B required:\n  3 * SupplementA + 2 * SupplementB >= 18\n\nObjective:\n- Minimize cost ($3.50 per Supplement A and $3.80 per Supplement B):\n  3.50 * SupplementA + 3.80 * SupplementB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSupplementA = intvar(0, 999999999)  # Number of Supplement A bought\nSupplementB = intvar(0, 999999999)  # Number of Supplement B bought\n\n# Constraints\nm = Model()\n\n# The patient must get at least 25 units of calcium:\nm += 3 * SupplementA + 4 * SupplementB >= 25\n# The patient must get at least 20 units of vitamin A:\nm += 2 * SupplementA + 1 * SupplementB >= 20\n# The patient must get at least 18 units of vitamin B:\nm += 3 * SupplementA + 2 * SupplementB >= 18\n\n# Objective\n# Minimize cost ($3.50 per Supplement A and $3.80 per Supplement B):\nm.minimize(3.50 * SupplementA + 3.80 * SupplementB)\n", "entities": [{"start": 51, "end": 63, "word": "Supplement A", "entity_group": "VAR", "score": 0.9998718830025736}, {"start": 73, "end": 74, "word": "3", "entity_group": "PARAM", "score": 0.999622152496822}, {"start": 94, "end": 95, "word": "2", "entity_group": "PARAM", "score": 0.99973060237605}, {"start": 121, "end": 122, "word": "3", "entity_group": "PARAM", "score": 0.9996747915926489}, {"start": 159, "end": 171, "word": "Supplement B", "entity_group": "VAR", "score": 0.9998820938211799}, {"start": 181, "end": 182, "word": "4", "entity_group": "PARAM", "score": 0.999654963430707}, {"start": 202, "end": 203, "word": "1", "entity_group": "PARAM", "score": 0.9996565539804758}, {"start": 228, "end": 229, "word": "2", "entity_group": "PARAM", "score": 0.9996972457785637}, {"start": 266, "end": 278, "word": "Supplement A", "entity_group": "VAR", "score": 0.9998604619867107}, {"start": 279, "end": 284, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996756761621024}, {"start": 287, "end": 291, "word": "3.50", "entity_group": "PARAM", "score": 0.9997085370704704}, {"start": 313, "end": 325, "word": "supplement B", "entity_group": "VAR", "score": 0.999914054888507}, {"start": 326, "end": 331, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999032859941919}, {"start": 334, "end": 338, "word": "3.80", "entity_group": "PARAM", "score": 0.999629654206322}, {"start": 377, "end": 385, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992212252507798}, {"start": 386, "end": 388, "word": "25", "entity_group": "LIMIT", "score": 0.9997285187879944}, {"start": 408, "end": 410, "word": "20", "entity_group": "LIMIT", "score": 0.9997395414225602}, {"start": 436, "end": 438, "word": "18", "entity_group": "LIMIT", "score": 0.9995063826839897}, {"start": 504, "end": 512, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993734972359154}, {"start": 517, "end": 521, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987566496365053}]}
{"doc_id": "9925844", "document": "A passenger train carries at most 500 passengers. A profit of $75 is made for each first class seat with a pillow and a profit of $50 is made on each second class seat. The train reserves at least 100 seats for the first class seats. However, at least twice as many passengers prefer to save money and travel by second class than by first class. How many seats of each type should be sold in order to maximize profit?", "order_mapping": {"first class": 0, "second class": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"first class": "75", "second class": "50"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "first class", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "second class", "direction": "at least", "param": "twice", "y_var": "first class", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of first class seats sold\n- y: Number of second class seats sold\n\nObjective:\n- The objective is to maximize the profit. A profit of $75 is made for each first class seat and a profit of $50 is made on each second class seat. Therefore, the objective function is: Maximize 75x + 50y\n\nConstraints:\n- The train can carry at most 500 passengers, so the constraint is: x + y <= 500.\n- At least 100 seats should be reserved for first class, leading to the constraint: x >= 100.\n- At least twice as many passengers prefer second class than first class, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 75x + 50y\nConstraints:\nx + y <= 500\nx >= 100\ny >= 2x", "canonical": {"objective": [-75.0, -50.0], "constraints": [[1.0, 1.0, 500.0], [-1.0, 0.0, -100.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 166, "y": 334}, "pseudo_model": "\nDecision Variables:\n- Number of first class seats sold: FirstClass\n- Number of second class seats sold: SecondClass\n\nConstraints:\n- Total number of passengers (first class and second class combined) should not exceed 500:\n  FirstClass + SecondClass <= 500\n- At least 100 seats should be reserved for first class:\n  FirstClass >= 100\n- At least twice as many passengers prefer second class than first class:\n  SecondClass >= 2 * FirstClass\n\nObjective:\n- Maximize profit (75 dollars per first class seat, 50 dollars per second class seat):\n  75 * FirstClass + 50 * SecondClass\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstClass = intvar(0, 999999999)  # Number of first class seats sold\nSecondClass = intvar(0, 999999999)  # Number of second class seats sold\n\n# Constraints\nm = Model()\n\n# Total number of passengers should not exceed 500:\nm += FirstClass + SecondClass <= 500\n# At least 100 seats should be reserved for first class:\nm += FirstClass >= 100\n# At least twice as many passengers prefer second class than first class:\nm += SecondClass >= 2 * FirstClass\n\n# Objective\n# Maximize profit (75 dollars per first class seat, 50 dollars per second class seat):\nm.maximize(75 * FirstClass + 50 * SecondClass)\n", "entities": [{"start": 26, "end": 33, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990428283930074}, {"start": 34, "end": 37, "word": "500", "entity_group": "LIMIT", "score": 0.9996856672608612}, {"start": 53, "end": 59, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999407586999131}, {"start": 65, "end": 67, "word": "75", "entity_group": "PARAM", "score": 0.9997031652265627}, {"start": 85, "end": 96, "word": "first class", "entity_group": "VAR", "score": 0.9999368959894248}, {"start": 122, "end": 128, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999463078416465}, {"start": 134, "end": 136, "word": "50", "entity_group": "PARAM", "score": 0.9994831755821122}, {"start": 153, "end": 165, "word": "second class", "entity_group": "VAR", "score": 0.9999203718344294}, {"start": 192, "end": 200, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984133102424748}, {"start": 201, "end": 204, "word": "100", "entity_group": "LIMIT", "score": 0.9997393370819558}, {"start": 219, "end": 230, "word": "first class", "entity_group": "VAR", "score": 0.9999856878514521}, {"start": 249, "end": 257, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9974541930991588}, {"start": 258, "end": 263, "word": "twice", "entity_group": "PARAM", "score": 0.9951972732416225}, {"start": 318, "end": 330, "word": "second class", "entity_group": "VAR", "score": 0.999774444756877}, {"start": 339, "end": 350, "word": "first class", "entity_group": "VAR", "score": 0.999870882241898}, {"start": 408, "end": 416, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.996185237486461}, {"start": 417, "end": 423, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912505945}]}
{"doc_id": "155829587", "document": "A steel company produces 120 tons of iron ore and 70 tons of zinc ore each month. These can be treated in different ways to produce three types of vessels: general purpose vessels, pharmaceutical vessels or pressure vessels. To produce 1 set of general purpose vessels requires 3.5 tons of iron ore and 2 tons of zinc ore. To produce 1 set of pharmaceutical vessels requires 4 tons of iron ore and 5 tons of zinc ore. Finally, to produce 1 set of pressure vessels requires 2 tons of iron ore and 3.5 tons of zinc ore. The profit per set from selling the vessels are $2000, $3000 and $4500 for the general purpose, pharmaceutical, and pressure vessels respectively. How many sets of each type of vessel should be produced to maximize profit?", "order_mapping": {"general purpose vessels": 0, "pharmaceutical vessels": 1, "pressure vessels": 2, "general purpose": 0, "pharmaceutical": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"general purpose": "2000", "pharmaceutical": "3000", "pressure vessels": "4500"}}, "const_declarations": [{"type": "linear", "direction": "produces", "limit": "120", "terms": {"general purpose vessels": "3.5", "pharmaceutical vessels": "4", "pressure vessels": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "produces", "limit": "70", "terms": {"general purpose vessels": "2", "pharmaceutical vessels": "5", "pressure vessels": "3.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of sets of general purpose vessels to be produced\n- y: Number of sets of pharmaceutical vessels to be produced\n- z: Number of sets of pressure vessels to be produced\n\nObjective:\n- The company aims to maximize its profit. The profit per set from selling the vessels are $2000, $3000, and $4500 for the general purpose, pharmaceutical, and pressure vessels respectively. Therefore, the objective function is: Maximize 2000x + 3000y + 4500z\n\nConstraints:\n- The company produces 120 tons of iron ore each month, and to produce 1 set of general purpose vessels requires 3.5 tons of iron ore, to produce 1 set of pharmaceutical vessels requires 4 tons of iron ore, and to produce 1 set of pressure vessels requires 2 tons of iron ore. This leads to the constraint: 3.5x + 4y + 2z <= 120.\n- The company produces 70 tons of zinc ore each month, and to produce 1 set of general purpose vessels requires 2 tons of zinc ore, to produce 1 set of pharmaceutical vessels requires 5 tons of zinc ore, and to produce 1 set of pressure vessels requires 3.5 tons of zinc ore. This leads to the constraint: 2x + 5y + 3.5z <= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2000x + 3000y + 4500z\nConstraints:\n3.5x + 4y + 2z <= 120\n2x + 5y + 3.5z <= 70", "canonical": {"objective": [-2000.0, -3000.0, -4500.0], "constraints": [[3.5, 4.0, 2.0, 120.0], [2.0, 5.0, 3.5, 70.0]]}, "solution": {"x": 0, "y": 0, "z": 20}, "pseudo_model": "\nDecision Variables:\n- Number of sets of general purpose vessels produced: GeneralPurpose\n- Number of sets of pharmaceutical vessels produced: Pharmaceutical\n- Number of sets of pressure vessels produced: PressureVessels\n\nConstraints:\n- Iron ore usage should not exceed 120 tons:\n  3.5 * GeneralPurpose + 4 * Pharmaceutical + 2 * PressureVessels <= 120\n- Zinc ore usage should not exceed 70 tons:\n  2 * GeneralPurpose + 5 * Pharmaceutical + 3.5 * PressureVessels <= 70\n\nObjective:\n- Maximize profit ($2000 for general purpose, $3000 for pharmaceutical, $4500 for pressure vessels):\n  2000 * GeneralPurpose + 3000 * Pharmaceutical + 4500 * PressureVessels\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGeneralPurpose = intvar(0, 999999999)  # Number of sets of general purpose vessels produced\nPharmaceutical = intvar(0, 999999999)  # Number of sets of pharmaceutical vessels produced\nPressureVessels = intvar(0, 999999999)  # Number of sets of pressure vessels produced\n\n# Constraints\nm = Model()\n\n# Iron ore constraint (120 tons available):\n# 3.5 tons for general purpose, 4 tons for pharmaceutical, 2 tons for pressure vessels\nm += 3.5 * GeneralPurpose + 4 * Pharmaceutical + 2 * PressureVessels <= 120\n\n# Zinc ore constraint (70 tons available):\n# 2 tons for general purpose, 5 tons for pharmaceutical, 3.5 tons for pressure vessels\nm += 2 * GeneralPurpose + 5 * Pharmaceutical + 3.5 * PressureVessels <= 70\n\n# Objective\n# Maximize profit ($2000 for general purpose, $3000 for pharmaceutical, $4500 for pressure vessels):\nm.maximize(2000 * GeneralPurpose + 3000 * Pharmaceutical + 4500 * PressureVessels)\n", "entities": [{"start": 16, "end": 24, "word": "produces", "entity_group": "CONST_DIR", "score": 0.9993374977863481}, {"start": 25, "end": 28, "word": "120", "entity_group": "LIMIT", "score": 0.9989069476905675}, {"start": 50, "end": 52, "word": "70", "entity_group": "LIMIT", "score": 0.9996779213379224}, {"start": 158, "end": 181, "word": "general purpose vessels", "entity_group": "VAR", "score": 0.9993549684829597}, {"start": 184, "end": 206, "word": "pharmaceutical vessels", "entity_group": "VAR", "score": 0.999976424137059}, {"start": 210, "end": 226, "word": "pressure vessels", "entity_group": "VAR", "score": 0.9999737245684595}, {"start": 249, "end": 272, "word": "general purpose vessels", "entity_group": "VAR", "score": 0.9994376025753295}, {"start": 282, "end": 285, "word": "3.5", "entity_group": "PARAM", "score": 0.9997213755256963}, {"start": 307, "end": 308, "word": "2", "entity_group": "PARAM", "score": 0.9996734907740782}, {"start": 348, "end": 370, "word": "pharmaceutical vessels", "entity_group": "VAR", "score": 0.9999559209137573}, {"start": 380, "end": 381, "word": "4", "entity_group": "PARAM", "score": 0.9996658043044315}, {"start": 403, "end": 404, "word": "5", "entity_group": "PARAM", "score": 0.9996744189248221}, {"start": 454, "end": 470, "word": "pressure vessels", "entity_group": "VAR", "score": 0.9999643752902047}, {"start": 480, "end": 481, "word": "2", "entity_group": "PARAM", "score": 0.999635927180362}, {"start": 503, "end": 506, "word": "3.5", "entity_group": "PARAM", "score": 0.9996185183583183}, {"start": 530, "end": 536, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999567220621409}, {"start": 576, "end": 580, "word": "2000", "entity_group": "PARAM", "score": 0.9996848107921686}, {"start": 585, "end": 589, "word": "3000", "entity_group": "PARAM", "score": 0.9995617287835041}, {"start": 596, "end": 600, "word": "4500", "entity_group": "PARAM", "score": 0.9997622281402223}, {"start": 609, "end": 624, "word": "general purpose", "entity_group": "VAR", "score": 0.9999730904380442}, {"start": 627, "end": 641, "word": "pharmaceutical", "entity_group": "VAR", "score": 0.9997660605700093}, {"start": 648, "end": 664, "word": "pressure vessels", "entity_group": "VAR", "score": 0.9999869812797456}, {"start": 739, "end": 747, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994103228409341}, {"start": 748, "end": 754, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280326548363}]}
{"doc_id": "-1149460127", "document": "A fast food restaurant makes cheeseburgers and fries. They make x1 cheeseburgers per day at a profit of $1.50 per cheeseburger and x2 fries per day at a profit of $1 per fries (x1 and x2 must be greater than or equal to 0). There is a daily demand for at most 110 cheeseburgers and 80 fries. The restaurant only has capacity to make a maximum of 150 items of either type. How many of each should they produce to maximize profit?", "order_mapping": {"cheeseburgers": 0, "fries": 1, "cheeseburger": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cheeseburgers": "1.50", "cheeseburger": "1"}}, "const_declarations": [{"type": "sum", "direction": "maximum", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "110", "var": "cheeseburgers", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "fries", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of cheeseburgers produced per day\n- x2: Number of fries produced per day\n\nObjective:\n- The restaurant aims to maximize its daily profit. The profit for each cheeseburger is $1.50 and for each fries is $1. Therefore, the objective function is: Maximize 1.50x1 + 1x2\n\nConstraints:\n- The restaurant has a capacity to make a maximum of 150 items of either type, leading to the constraint: x1 + x2 <= 150.\n- There is a daily demand for at most 110 cheeseburgers, leading to the constraint: x1 <= 110.\n- There is a daily demand for at most 80 fries, leading to the constraint: x2 <= 80.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.50x1 + 1x2\nConstraints:\nx1 + x2 <= 150\nx1 <= 110\nx2 <= 80", "canonical": {"objective": [-1.5, -1.0], "constraints": [[1.0, 1.0, 150.0], [1.0, 0.0, 110.0], [0.0, 1.0, 80.0]]}, "solution": {"x": 110, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of cheeseburgers made per day: Cheeseburgers\n- Number of fries made per day: Fries\n\nConstraints:\n- Total number of cheeseburgers and fries made should not exceed 150 per day:\n  Cheeseburgers + Fries <= 150\n- At most 110 cheeseburgers per day:\n  Cheeseburgers <= 110\n- At most 80 fries per day:\n  Fries <= 80\n\nObjective:\n- Maximize profit (1.50 dollars per cheeseburger, 1 dollar per fries):\n  1.50 * Cheeseburgers + 1 * Fries\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCheeseburgers = intvar(0, 999999999)  # Number of cheeseburgers made per day\nFries = intvar(0, 999999999)  # Number of fries made per day\n\n# Constraints\nm = Model()\n\n# Total number of cheeseburgers and fries made should not exceed 150 per day:\nm += Cheeseburgers + Fries <= 150\n# Number of cheeseburgers made should be at most 110 per day:\nm += Cheeseburgers <= 110\n# Number of fries made should be at most 80 per day:\nm += Fries <= 80\n\n# Objective\n# Maximize profit (1.50 dollars per cheeseburger, 1 dollar per fries):\nm.maximize(1.50 * Cheeseburgers + 1 * Fries)\n", "entities": [{"start": 29, "end": 42, "word": "cheeseburgers", "entity_group": "VAR", "score": 0.998899311412704}, {"start": 47, "end": 52, "word": "fries", "entity_group": "VAR", "score": 0.9984773082306106}, {"start": 68, "end": 81, "word": "cheeseburgers", "entity_group": "VAR", "score": 0.9994229892522516}, {"start": 95, "end": 101, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996773768084984}, {"start": 107, "end": 111, "word": "1.50", "entity_group": "PARAM", "score": 0.9988357596330115}, {"start": 116, "end": 128, "word": "cheeseburger", "entity_group": "VAR", "score": 0.9986563074476984}, {"start": 136, "end": 141, "word": "fries", "entity_group": "VAR", "score": 0.9995343562572696}, {"start": 155, "end": 161, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993963455482111}, {"start": 167, "end": 168, "word": "1", "entity_group": "PARAM", "score": 0.9991894689169745}, {"start": 173, "end": 178, "word": "fries", "entity_group": "VAR", "score": 0.9992033629812002}, {"start": 258, "end": 265, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989061116371925}, {"start": 266, "end": 269, "word": "110", "entity_group": "LIMIT", "score": 0.9997292097542219}, {"start": 270, "end": 283, "word": "cheeseburgers", "entity_group": "VAR", "score": 0.9983892910328668}, {"start": 288, "end": 290, "word": "80", "entity_group": "LIMIT", "score": 0.9997281166164478}, {"start": 291, "end": 296, "word": "fries", "entity_group": "VAR", "score": 0.9996514751467753}, {"start": 342, "end": 349, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9947763118892338}, {"start": 353, "end": 356, "word": "150", "entity_group": "LIMIT", "score": 0.9997110721959972}, {"start": 420, "end": 428, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997565524788856}, {"start": 429, "end": 435, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368889597712}]}
{"doc_id": "179700628", "document": "Fred can invest up to $5000 in the farming industry. Each dollar invested in a fertilizer company yields a $0.14 profit. Each dollar invested in a pesticide company yields a $0.15 profit. He wants to invest at least 50% in the fertilizer company and at least $1000 in the pesticide company. How much money should he invest in each to maximize profit?", "order_mapping": {"fertilizer company": 0, "pesticide company": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pesticide company": "0.15", "fertilizer company": "0.14"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "5000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "50%", "var": "fertilizer company", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "1000", "var": "pesticide company", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the fertilizer company\n- y: Dollars invested in the pesticide company\n\nObjective:\n- Fred aims to maximize his profit. Each dollar invested in a fertilizer company yields a $0.14 profit, and each dollar invested in a pesticide company yields a $0.15 profit. Therefore, the objective function is: Maximize 0.14x + 0.15y\n\nConstraints:\n- Fred can invest up to $5000 in total, so the constraint is: x + y <= 5000.\n- He wants to invest at least 50% in the fertilizer company, leading to the constraint: x >= 0.50(x + y).\n- He also wants to invest at least $1000 in the pesticide company, resulting in the constraint: y >= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.14x + 0.15y\nConstraints:\nx + y <= 5000\nx >= 0.50(x + y)\ny >= 1000", "canonical": {"objective": [-0.14, -0.15], "constraints": [[1.0, 1.0, 5000.0], [-0.5, 0.5, 0.0], [0.0, -1.0, -1000.0]]}, "solution": {"x": 2500, "y": 2500}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the fertilizer company: FertilizerCompany\n- Amount invested in the pesticide company: PesticideCompany\n\nConstraints:\n- Total investment should not exceed 5000 dollars:\n  FertilizerCompany + PesticideCompany <= 5000\n- At least 50% of the total investment should be in the fertilizer company:\n  FertilizerCompany >= 0.5 * (FertilizerCompany + PesticideCompany)\n- At least 1000 dollars should be invested in the pesticide company:\n  PesticideCompany >= 1000\n\nObjective:\n- Maximize profit (0.14 profit per dollar invested in the fertilizer company, 0.15 profit per dollar invested in the pesticide company):\n  0.14 * FertilizerCompany + 0.15 * PesticideCompany\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFertilizerCompany = intvar(0, 999999999)  # Amount invested in the fertilizer company\nPesticideCompany = intvar(0, 999999999)  # Amount invested in the pesticide company\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $5000:\nm += FertilizerCompany + PesticideCompany <= 5000\n# At least 50% in the fertilizer company:\nm += FertilizerCompany >= 0.5 * (FertilizerCompany + PesticideCompany)\n# At least $1000 in the pesticide company:\nm += PesticideCompany >= 1000\n\n# Objective\n# Maximize profit (0.14 profit per dollar invested in the fertilizer company, 0.15 profit per dollar invested in the pesticide company):\nm.maximize(0.14 * FertilizerCompany + 0.15 * PesticideCompany)\n", "entities": [{"start": 16, "end": 21, "word": "up to", "entity_group": "CONST_DIR", "score": 0.994246653987558}, {"start": 24, "end": 28, "word": "5000", "entity_group": "LIMIT", "score": 0.9983396850373589}, {"start": 81, "end": 99, "word": "fertilizer company", "entity_group": "VAR", "score": 0.9998834359557606}, {"start": 111, "end": 115, "word": "0.14", "entity_group": "PARAM", "score": 0.9963189238349813}, {"start": 116, "end": 122, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995414475981202}, {"start": 151, "end": 168, "word": "pesticide company", "entity_group": "VAR", "score": 0.9998834348386555}, {"start": 180, "end": 184, "word": "0.15", "entity_group": "PARAM", "score": 0.999206662329255}, {"start": 185, "end": 191, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997231955859351}, {"start": 213, "end": 221, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988334554171403}, {"start": 222, "end": 226, "word": "50 %", "entity_group": "LIMIT", "score": 0.9488072978680618}, {"start": 234, "end": 252, "word": "fertilizer company", "entity_group": "VAR", "score": 0.9998374382535811}, {"start": 257, "end": 265, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9965507668740616}, {"start": 268, "end": 272, "word": "1000", "entity_group": "LIMIT", "score": 0.99671915820401}, {"start": 280, "end": 297, "word": "pesticide company", "entity_group": "VAR", "score": 0.9998944995423157}, {"start": 343, "end": 351, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993698846654426}, {"start": 352, "end": 358, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994794569577221}]}
{"doc_id": "-2034307602", "document": "A bubble tea shop makes taro and mango bubble teas. Three ingredients are needed to make the bubble teas: milk tea, taro, and mango. One taro bubble tea requires 3 units of taro and 4 units of milk. One mango bubble tea requires 3 units of mango and 5 units of milk. The shop has available 60 units of taro, 60 units of mango, and 140 units of milk. If the profit per taro bubble tea is $4 and the profit per mango bubble tea is $6, how many of each should be made to maximize profit?", "order_mapping": {"taro": 0, "mango bubble teas": 1, "taro bubble tea": 0, "mango bubble tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mango bubble tea": "6", "taro bubble tea": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "60", "terms": {"taro bubble tea": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60", "terms": {"mango bubble tea": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "140", "terms": {"taro bubble tea": "4", "mango bubble tea": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of taro bubble teas\n- y: Number of mango bubble teas\n\nObjective:\n- The bubble tea shop aims to maximize its profit. The profit per taro bubble tea is $4 and the profit per mango bubble tea is $6. Therefore, the objective function is: Maximize 4x + 6y\n\nConstraints:\n- The shop has available 60 units of taro, so the constraint is: 3x <= 60.\n- The shop has available 60 units of mango, so the constraint is: 3y <= 60.\n- The shop has available 140 units of milk, which is used for both types of bubble teas. This leads to the constraint: 4x + 5y <= 140.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 6y\nConstraints:\n3x <= 60\n3y <= 60\n4x + 5y <= 140", "canonical": {"objective": [-4.0, -6.0], "constraints": [[3.0, 0.0, 60.0], [0.0, 3.0, 60.0], [4.0, 5.0, 140.0]]}, "solution": {"x": 10, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of taro bubble teas made: TaroBubbleTea\n- Number of mango bubble teas made: MangoBubbleTea\n\nConstraints:\n- The shop has available 60 units of taro, each taro bubble tea requires 3 units of taro:\n  3 * TaroBubbleTea <= 60\n- The shop has available 60 units of mango, each mango bubble tea requires 3 units of mango:\n  3 * MangoBubbleTea <= 60\n- The shop has available 140 units of milk, each taro bubble tea requires 4 units of milk and each mango bubble tea requires 5 units of milk:\n  4 * TaroBubbleTea + 5 * MangoBubbleTea <= 140\n\nObjective:\n- Maximize profit (4 dollars per taro bubble tea, 6 dollars per mango bubble tea):\n  4 * TaroBubbleTea + 6 * MangoBubbleTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTaroBubbleTea = intvar(0, 999999999)  # Number of taro bubble teas made\nMangoBubbleTea = intvar(0, 999999999)  # Number of mango bubble teas made\n\n# Constraints\nm = Model()\n\n# The shop has available 60 units of taro:\nm += 3 * TaroBubbleTea <= 60\n# The shop has available 60 units of mango:\nm += 3 * MangoBubbleTea <= 60\n# The shop has available 140 units of milk:\nm += 4 * TaroBubbleTea + 5 * MangoBubbleTea <= 140\n\n# Objective\n# Maximize profit (4 dollars per taro bubble tea, 6 dollars per mango bubble tea):\nm.maximize(4 * TaroBubbleTea + 6 * MangoBubbleTea)\n", "entities": [{"start": 24, "end": 28, "word": "taro", "entity_group": "VAR", "score": 0.9992538045846961}, {"start": 33, "end": 50, "word": "mango bubble teas", "entity_group": "VAR", "score": 0.9997191993911592}, {"start": 142, "end": 157, "word": "taro bubble tea", "entity_group": "VAR", "score": 0.999388752381894}, {"start": 167, "end": 168, "word": "3", "entity_group": "PARAM", "score": 0.999694377971073}, {"start": 187, "end": 188, "word": "4", "entity_group": "PARAM", "score": 0.9997030465987111}, {"start": 209, "end": 225, "word": "mango bubble tea", "entity_group": "VAR", "score": 0.9994654244995338}, {"start": 235, "end": 236, "word": "3", "entity_group": "PARAM", "score": 0.9996940581884154}, {"start": 256, "end": 257, "word": "5", "entity_group": "PARAM", "score": 0.9996566361314703}, {"start": 287, "end": 296, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987353469719044}, {"start": 297, "end": 299, "word": "60", "entity_group": "LIMIT", "score": 0.9993941884927606}, {"start": 316, "end": 318, "word": "60", "entity_group": "LIMIT", "score": 0.9997548426062313}, {"start": 340, "end": 343, "word": "140", "entity_group": "LIMIT", "score": 0.9992460344130785}, {"start": 367, "end": 373, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999471736051515}, {"start": 378, "end": 393, "word": "taro bubble tea", "entity_group": "VAR", "score": 0.9988136553523111}, {"start": 399, "end": 400, "word": "4", "entity_group": "PARAM", "score": 0.9993657224508087}, {"start": 409, "end": 415, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999119648393051}, {"start": 420, "end": 436, "word": "mango bubble tea", "entity_group": "VAR", "score": 0.9983407091172417}, {"start": 442, "end": 443, "word": "6", "entity_group": "PARAM", "score": 0.9994832288123844}, {"start": 481, "end": 489, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 490, "end": 496, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-1183653605", "document": "Iota Game spends at most $50000 on controllers and speakers each month. A controller costs the store $150 and a speaker costs $100. Each controller is sold for a profit of $70 while each speaker is sold for a profit of $20. The store estimates that a minimum of 15 but at most 60 controllers are sold each month. They also estimate that the number of speakers sold is at most four times the number of controllers sold. How many of each, controllers and speakers, should be sold in order to maximize the profit?", "order_mapping": {"controllers": 0, "speakers": 1, "controller": 0, "speaker": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"controller": "70", "speaker": "20"}}, "const_declarations": [{"type": "lowerbound", "direction": "minimum", "limit": "15", "var": "controllers", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "60", "var": "controllers", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "speakers", "direction": "at most", "param": "four times", "y_var": "controllers", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50000", "terms": {"controller": "150", "speaker": "100"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of controllers sold\n- y: Number of speakers sold\n\nObjective:\n- The store aims to maximize its profit. Each controller is sold for a profit of $70 and each speaker is sold for a profit of $20. Therefore, the objective function is: Maximize 70x + 20y\n\nConstraints:\n- The store spends at most $50000 on controllers and speakers each month, leading to the constraint: 150x + 100y <= 50000.\n- A minimum of 15 but at most 60 controllers are sold each month, leading to the constraint: 15 <= x <= 60.\n- The number of speakers sold is at most four times the number of controllers sold, leading to the constraint: y <= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 20y\nConstraints:\n15 <= x <= 60\ny <= 4x\n150x + 100y <= 50000", "canonical": {"objective": [-70.0, -20.0], "constraints": [[-4.0, 1.0, 0.0], [150.0, 100.0, 50000.0], [-1.0, 0.0, -15.0], [1.0, 0.0, 60.0]]}, "solution": {"x": 60, "y": 240}, "pseudo_model": "\nDecision Variables:\n- Number of controllers sold: Controllers\n- Number of speakers sold: Speakers\n\nConstraints:\n- Spending at most $50000 on controllers and speakers each month:\n  150 * Controllers + 100 * Speakers <= 50000\n- A minimum of 15 controllers are sold each month:\n  Controllers >= 15\n- At most 60 controllers are sold each month:\n  Controllers <= 60\n- The number of speakers sold is at most four times the number of controllers sold:\n  Speakers <= 4 * Controllers\n\nObjective:\n- Maximize profit ($70 profit per controller, $20 profit per speaker):\n  70 * Controllers + 20 * Speakers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nControllers = intvar(0, 999999999)  # Number of controllers sold\nSpeakers = intvar(0, 999999999)  # Number of speakers sold\n\n# Constraints\nm = Model()\n\n# Spending at most $50000 on controllers and speakers each month:\nm += 150 * Controllers + 100 * Speakers <= 50000\n# A minimum of 15 controllers are sold each month:\nm += Controllers >= 15\n# At most 60 controllers are sold each month:\nm += Controllers <= 60\n# The number of speakers sold is at most four times the number of controllers sold:\nm += Speakers <= 4 * Controllers\n\n# Objective\n# Maximize profit ($70 profit per controller, $20 profit per speaker):\nm.maximize(70 * Controllers + 20 * Speakers)\n", "entities": [{"start": 17, "end": 24, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9958477137158286}, {"start": 27, "end": 32, "word": "50000", "entity_group": "LIMIT", "score": 0.9992179229002802}, {"start": 36, "end": 47, "word": "controllers", "entity_group": "VAR", "score": 0.9990206487889047}, {"start": 52, "end": 60, "word": "speakers", "entity_group": "VAR", "score": 0.9997158737158643}, {"start": 76, "end": 86, "word": "controller", "entity_group": "VAR", "score": 0.9997017892836526}, {"start": 105, "end": 108, "word": "150", "entity_group": "PARAM", "score": 0.9997184888106735}, {"start": 115, "end": 122, "word": "speaker", "entity_group": "VAR", "score": 0.9998059450990928}, {"start": 131, "end": 134, "word": "100", "entity_group": "PARAM", "score": 0.9996985192566565}, {"start": 142, "end": 152, "word": "controller", "entity_group": "VAR", "score": 0.999427111012834}, {"start": 167, "end": 173, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998001160601351}, {"start": 179, "end": 181, "word": "70", "entity_group": "PARAM", "score": 0.9996291775408938}, {"start": 193, "end": 200, "word": "speaker", "entity_group": "VAR", "score": 0.9997874656635414}, {"start": 215, "end": 221, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996555711647973}, {"start": 227, "end": 229, "word": "20", "entity_group": "PARAM", "score": 0.9996293569939496}, {"start": 259, "end": 266, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9963900840071108}, {"start": 270, "end": 272, "word": "15", "entity_group": "LIMIT", "score": 0.9990316487576881}, {"start": 277, "end": 284, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987498653064674}, {"start": 285, "end": 287, "word": "60", "entity_group": "LIMIT", "score": 0.9996491655410269}, {"start": 288, "end": 299, "word": "controllers", "entity_group": "VAR", "score": 0.9994071522912886}, {"start": 360, "end": 368, "word": "speakers", "entity_group": "VAR", "score": 0.9994803907254229}, {"start": 377, "end": 384, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9969877410470283}, {"start": 385, "end": 389, "word": "four", "entity_group": "PARAM", "score": 0.9940793554844828}, {"start": 410, "end": 421, "word": "controllers", "entity_group": "VAR", "score": 0.9991263839653732}, {"start": 448, "end": 459, "word": "controllers", "entity_group": "VAR", "score": 0.9992991139582589}, {"start": 464, "end": 472, "word": "speakers", "entity_group": "VAR", "score": 0.9997362189252207}, {"start": 502, "end": 510, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970533990570982}, {"start": 515, "end": 521, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620238983442}]}
{"doc_id": "2038058304", "document": "A sandwich store makes subs and flatbreads. Each sub takes 3 minutes of preparation and 2 minutes of toasting. Each flatbread takes 4 minutes of preparation and 1 minute of toasting. The store has available 2000 minutes for preparation and 2200 minutes for toasting. If the profit per sub is $3 and the profit per flatbread is $2.50, how many of each should they make to maximize profit?", "order_mapping": {"subs": 0, "flatbreads": 1, "sub": 0, "flatbread": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sub": "3", "flatbread": "2.50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"sub": "3", "flatbread": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2200", "terms": {"flatbread": "1", "sub": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of subs\n- y: Number of flatbreads\n\nObjective:\n- The store aims to maximize its profit. The profit per sub is $3 and the profit per flatbread is $2.50. Therefore, the objective function is: Maximize 3x + 2.50y\n\nConstraints:\n- The store has 2000 minutes available for preparation, and each sub takes 3 minutes of preparation and each flatbread takes 4 minutes of preparation. This leads to the constraint: 3x + 4y <= 2000.\n- The store has 2200 minutes available for toasting, and each sub takes 2 minutes of toasting and each flatbread takes 1 minute of toasting. This results in the constraint: 2x + y <= 2200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 2.50y\nConstraints:\n3x + 4y <= 2000\n2x + y <= 2200", "canonical": {"objective": [-3.0, -2.5], "constraints": [[3.0, 4.0, 2000.0], [2.0, 1.0, 2200.0]]}, "solution": {"x": 666, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of subs made: Subs\n- Number of flatbreads made: Flatbreads\n\nConstraints:\n- Total preparation time for subs and flatbreads should not exceed 2000 minutes:\n  3 * Subs + 4 * Flatbreads <= 2000\n- Total toasting time for subs and flatbreads should not exceed 2200 minutes:\n  2 * Subs + 1 * Flatbreads <= 2200\n\nObjective:\n- Maximize profit (3 dollars per sub, 2.5 dollars per flatbread):\n  3 * Subs + 2.5 * Flatbreads\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSubs = intvar(0, 999999999)  # Number of subs made\nFlatbreads = intvar(0, 999999999)  # Number of flatbreads made\n\n# Constraints\nm = Model()\n\n# Total preparation time for subs and flatbreads should not exceed 2000 minutes:\n# (3 minutes per sub, 4 minutes per flatbread)\nm += 3 * Subs + 4 * Flatbreads <= 2000\n\n# Total toasting time for subs and flatbreads should not exceed 2200 minutes:\n# (2 minutes per sub, 1 minute per flatbread)\nm += 2 * Subs + 1 * Flatbreads <= 2200\n\n# Objective\n# Maximize profit (3 dollars per sub, 2.5 dollars per flatbread):\nm.maximize(3 * Subs + 2.5 * Flatbreads)\n", "entities": [{"start": 23, "end": 27, "word": "subs", "entity_group": "VAR", "score": 0.9996275308500222}, {"start": 32, "end": 42, "word": "flatbreads", "entity_group": "VAR", "score": 0.999780921956997}, {"start": 50, "end": 53, "word": "sub", "entity_group": "VAR", "score": 0.9995180858613715}, {"start": 60, "end": 61, "word": "3", "entity_group": "PARAM", "score": 0.9997223762805301}, {"start": 89, "end": 90, "word": "2", "entity_group": "PARAM", "score": 0.9996977541505017}, {"start": 118, "end": 127, "word": "flatbread", "entity_group": "VAR", "score": 0.999638073066311}, {"start": 134, "end": 135, "word": "4", "entity_group": "PARAM", "score": 0.9996974276042384}, {"start": 163, "end": 164, "word": "1", "entity_group": "PARAM", "score": 0.9992249645087088}, {"start": 200, "end": 209, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991760921135743}, {"start": 210, "end": 214, "word": "2000", "entity_group": "LIMIT", "score": 0.9994169161803417}, {"start": 243, "end": 247, "word": "2200", "entity_group": "LIMIT", "score": 0.9995879117479207}, {"start": 278, "end": 284, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999877526764848}, {"start": 289, "end": 292, "word": "sub", "entity_group": "VAR", "score": 0.9989186033681617}, {"start": 298, "end": 299, "word": "3", "entity_group": "PARAM", "score": 0.9991340354032286}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997815241201239}, {"start": 319, "end": 328, "word": "flatbread", "entity_group": "VAR", "score": 0.9994113888997378}, {"start": 334, "end": 338, "word": "2.50", "entity_group": "PARAM", "score": 0.9994707628284798}, {"start": 378, "end": 386, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 387, "end": 393, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "379931422", "document": "Calcium and magnesium are found in pork meat and shrimp meat. A serving of pork meat costs $6.5 and contains 3 units of calcium and 5 units of magnesium. A serving of shrimp meat costs $9 and contains 5 units of calcium and 9 units of magnesium. If at least 25 units of calcium and 35 units of magnesium must be consumed daily, formulate an LP to minimize cost.", "order_mapping": {"pork meat": 0, "shrimp meat": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"shrimp meat": "9", "pork meat": "6.5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "25", "terms": {"pork meat": "3", "shrimp meat": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "35", "terms": {"pork meat": "5", "shrimp meat": "9"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: servings of pork meat\n- y: servings of shrimp meat\n\nObjective:\n- The objective is to minimize the cost of the meat. A serving of pork meat costs $6.5 and a serving of shrimp meat costs $9. Therefore, the objective function is: Minimize 6.5x + 9y\n\nConstraints:\n- At least 25 units of calcium must be consumed daily, leading to the constraint: 3x + 5y >= 25\n- At least 35 units of magnesium must be consumed daily, leading to the constraint: 5x + 9y >= 35\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6.5x + 9y\nConstraints:\n3x + 5y >= 25\n5x + 9y >= 35", "canonical": {"objective": [6.5, 9.0], "constraints": [[-3.0, -5.0, -25.0], [-5.0, -9.0, -35.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of servings of pork meat: PorkMeat\n- Number of servings of shrimp meat: ShrimpMeat\n\nConstraints:\n- To meet the daily requirement of at least 25 units of calcium:\n  3 * PorkMeat + 5 * ShrimpMeat >= 25\n- To meet the daily requirement of at least 35 units of magnesium:\n  5 * PorkMeat + 9 * ShrimpMeat >= 35\n\nObjective:\n- Minimize the total cost of servings (6.5 dollars per serving of pork meat, 9 dollars per serving of shrimp meat):\n  6.5 * PorkMeat + 9 * ShrimpMeat\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPorkMeat = intvar(0, 999999999)  # Number of servings of pork meat\nShrimpMeat = intvar(0, 999999999)  # Number of servings of shrimp meat\n\n# Constraints\nm = Model()\n\n# At least 25 units of calcium must be consumed daily:\nm += 3 * PorkMeat + 5 * ShrimpMeat >= 25\n# At least 35 units of magnesium must be consumed daily:\nm += 5 * PorkMeat + 9 * ShrimpMeat >= 35\n\n# Objective\n# Minimize cost (6.5 dollars per serving of pork meat, 9 dollars per serving of shrimp meat):\nm.minimize(6.5 * PorkMeat + 9 * ShrimpMeat)\n", "entities": [{"start": 35, "end": 44, "word": "pork meat", "entity_group": "VAR", "score": 0.9999614356972201}, {"start": 49, "end": 60, "word": "shrimp meat", "entity_group": "VAR", "score": 0.9999761312023578}, {"start": 76, "end": 85, "word": "pork meat", "entity_group": "VAR", "score": 0.9999737103479143}, {"start": 86, "end": 91, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996384264850402}, {"start": 94, "end": 97, "word": "6.5", "entity_group": "PARAM", "score": 0.9996796141261142}, {"start": 111, "end": 112, "word": "3", "entity_group": "PARAM", "score": 0.9997328359003276}, {"start": 134, "end": 135, "word": "5", "entity_group": "PARAM", "score": 0.9997317478775807}, {"start": 170, "end": 181, "word": "shrimp meat", "entity_group": "VAR", "score": 0.9999760248629022}, {"start": 182, "end": 187, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9996384267881209}, {"start": 190, "end": 191, "word": "9", "entity_group": "PARAM", "score": 0.9996796167850974}, {"start": 205, "end": 206, "word": "5", "entity_group": "PARAM", "score": 0.9997328359021428}, {"start": 228, "end": 229, "word": "9", "entity_group": "PARAM", "score": 0.9996888209846103}, {"start": 254, "end": 262, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990759632733989}, {"start": 263, "end": 265, "word": "25", "entity_group": "LIMIT", "score": 0.9997503827815699}, {"start": 287, "end": 289, "word": "35", "entity_group": "LIMIT", "score": 0.9997592409560468}, {"start": 353, "end": 361, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9987213962568084}, {"start": 362, "end": 366, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9923292321022209}]}
{"doc_id": "-2013750349", "document": "Royal Asset Investment plans to invest a total of $200,000 in mutual funds and cryptocurrencies, which yield a 4.1% return and a 7.5% return, respectively. Internal policies require the company to diversify the asset allocation so that the minimum investment in mutual funds is 45% of the total investment. Due to the risk of blockchain technology, no more than 30% of the total investment should be allocated to cryptocurrencies. How much should the Royal Asset Investment allocate to each asset so as to maximize its average return?", "order_mapping": {"mutual funds": 0, "cryptocurrencies": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"mutual funds": "4.1%", "cryptocurrencies": "7.5"}}, "const_declarations": [{"type": "sum", "direction": "total", "limit": "200,000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "no more than", "limit": "30%", "var": "cryptocurrencies", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "45%", "var": "mutual funds", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in mutual funds\n- y: Dollars invested in cryptocurrencies\n\nObjective:\n- The company aims to maximize its average return. The returns on mutual funds and cryptocurrencies are 4.1% and 7.5% respectively. Therefore, the objective function is: Maximize 0.041x + 0.075y\n\nConstraints:\n- The total investment is $200,000, so the constraint is: x + y <= 200000.\n- The minimum investment in mutual funds should be 45% of the total investment, leading to the constraint: x >= 0.45(x + y).\n- No more than 30% of the total investment should be allocated to cryptocurrencies, resulting in the constraint: y <= 0.30(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.041x + 0.075y\nConstraints:\nx + y <= 200000\nx >= 0.45(x + y)\ny <= 0.30(x + y)", "canonical": {"objective": [-0.041, -0.075], "constraints": [[1.0, 1.0, 200000.0], [-0.55, 0.45, 0.0], [-0.3, 0.7, 0.0]]}, "solution": {"x": 140000, "y": 60000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in mutual funds: MutualFunds\n- Amount invested in cryptocurrencies: Cryptocurrencies\n\nConstraints:\n- Total investment should be $200,000:\n  MutualFunds + Cryptocurrencies <= 200000\n- At least 45% of the total investment should be in mutual funds:\n  MutualFunds >= 45% of total investment\n- No more than 30% of the total investment should be in cryptocurrencies:\n  Cryptocurrencies <= 30% of total investment\n\nObjective:\n- Maximize average return (4.1% from mutual funds, 7.5% from cryptocurrencies):\n  4.1% * MutualFunds + 7.5% * Cryptocurrencies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMutualFunds = intvar(0, 999999999)  # Amount invested in mutual funds\nCryptocurrencies = intvar(0, 999999999)  # Amount invested in cryptocurrencies\n\n# Constraints\nm = Model()\n\n# The total investment in mutual funds and cryptocurrencies should be $200,000:\nm += MutualFunds + Cryptocurrencies <= 200000\n# At least 45% of the total investment should be in mutual funds:\nm += MutualFunds >= 0.45 * (MutualFunds + Cryptocurrencies)\n# No more than 30% of the total investment should be in cryptocurrencies:\nm += Cryptocurrencies <= 0.30 * (MutualFunds + Cryptocurrencies)\n\n# Objective\n# Maximize average return (4.1% from mutual funds, 7.5% from cryptocurrencies):\nm.maximize(0.041 * MutualFunds + 0.075 * Cryptocurrencies)\n", "entities": [{"start": 41, "end": 46, "word": "total", "entity_group": "CONST_DIR", "score": 0.9961179773959048}, {"start": 52, "end": 59, "word": "200,000", "entity_group": "LIMIT", "score": 0.9975143538811718}, {"start": 63, "end": 75, "word": "mutual funds", "entity_group": "VAR", "score": 0.9999372156026376}, {"start": 80, "end": 96, "word": "cryptocurrencies", "entity_group": "VAR", "score": 0.9997787423129206}, {"start": 113, "end": 118, "word": "4.1 %", "entity_group": "PARAM", "score": 0.9150213759180472}, {"start": 119, "end": 125, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9950900022650281}, {"start": 132, "end": 135, "word": "7.5", "entity_group": "PARAM", "score": 0.9998328700213016}, {"start": 138, "end": 144, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9879022628234382}, {"start": 246, "end": 253, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.998687256913589}, {"start": 268, "end": 280, "word": "mutual funds", "entity_group": "VAR", "score": 0.9999498711913923}, {"start": 284, "end": 288, "word": "45 %", "entity_group": "LIMIT", "score": 0.9531791490861659}, {"start": 358, "end": 370, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9941188173528346}, {"start": 371, "end": 375, "word": "30 %", "entity_group": "LIMIT", "score": 0.9783118683839734}, {"start": 423, "end": 439, "word": "cryptocurrencies", "entity_group": "VAR", "score": 0.9997271101856795}, {"start": 517, "end": 525, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988568859257282}, {"start": 538, "end": 544, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9976954845131644}]}
{"doc_id": "-1435950157", "document": "Tom Designs manufactures three coats: long, short, and mini. These coats are produced in two different factories: a north one and a south one. Running the north factory for an hour costs $200 and produces 20 long coats, 15 short coats, and 10 mini coats. Running the south factory for an hour costs $400 and yields 30 long coats, 25 short coats, and 30 mini coats. To meet customer demands, a minimum of 75 long coats, 30 short coats, and 40 mini coats must be produced daily. Determine a daily production plan that minimizes the cost of meeting the company\u2019s daily demands.", "order_mapping": {"north one": 0, "south one": 1, "north factory": 0, "south factory": 1}, "obj_declaration": {"type": "objective", "direction": "minimizes", "name": "cost", "terms": {"north factory": "200", "south factory": "400"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "75", "terms": {"north factory": "20", "south factory": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "30", "terms": {"north factory": "15", "south factory": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "40", "terms": {"north factory": "10", "south factory": "30"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours of operation for the north factory\n- y: Hours of operation for the south factory\n\nObjective:\n- The company aims to minimize the cost of meeting the daily demands. Running the north factory for an hour costs $200 and running the south factory for an hour costs $400. Therefore, the objective function is: Minimize 200x + 400y\n\nConstraints:\n- To meet customer demands, a minimum of 75 long coats must be produced daily, which translates to the constraint: 20x + 30y >= 75.\n- Similarly, at least 30 short coats must be produced daily, leading to the constraint: 15x + 25y >= 30.\n- Additionally, a minimum of 40 mini coats must be produced daily, resulting in the constraint: 10x + 30y >= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 200x + 400y\nConstraints:\n20x + 30y >= 75\n15x + 25y >= 30\n10x + 30y >= 40", "canonical": {"objective": [200.0, 400.0], "constraints": [[-20.0, -30.0, -75.0], [-15.0, -25.0, -30.0], [-10.0, -30.0, -40.0]]}, "solution": {"x": 4, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Hours the north factory runs: NorthFactoryHours\n- Hours the south factory runs: SouthFactoryHours\n\nConstraints:\n- To meet customer demands for long coats (at least 75 long coats):\n  20 * NorthFactoryHours + 30 * SouthFactoryHours >= 75\n- To meet customer demands for short coats (at least 30 short coats):\n  15 * NorthFactoryHours + 25 * SouthFactoryHours >= 30\n- To meet customer demands for mini coats (at least 40 mini coats):\n  10 * NorthFactoryHours + 30 * SouthFactoryHours >= 40\n\nObjective:\n- Minimize the cost of meeting the company\u2019s daily demands (running the north factory costs $200 per hour, south factory costs $400 per hour):\n  200 * NorthFactoryHours + 400 * SouthFactoryHours\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNorthFactoryHours = intvar(0, 999999999)  # Hours the north factory runs\nSouthFactoryHours = intvar(0, 999999999)  # Hours the south factory runs\n\n# Constraints\nm = Model()\n\n# To meet customer demands for long coats (at least 75 long coats):\nm += 20 * NorthFactoryHours + 30 * SouthFactoryHours >= 75\n# To meet customer demands for short coats (at least 30 short coats):\nm += 15 * NorthFactoryHours + 25 * SouthFactoryHours >= 30\n# To meet customer demands for mini coats (at least 40 mini coats):\nm += 10 * NorthFactoryHours + 30 * SouthFactoryHours >= 40\n\n# Objective\n# Minimize the cost of meeting the company\u2019s daily demands (running the north factory costs $200 per hour, south factory costs $400 per hour):\nm.minimize(200 * NorthFactoryHours + 400 * SouthFactoryHours)\n", "entities": [{"start": 121, "end": 130, "word": "north one", "entity_group": "VAR", "score": 0.9996006896463904}, {"start": 137, "end": 146, "word": "south one", "entity_group": "VAR", "score": 0.9990849344186001}, {"start": 161, "end": 174, "word": "north factory", "entity_group": "VAR", "score": 0.9999135083380674}, {"start": 187, "end": 192, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9989484581878645}, {"start": 195, "end": 198, "word": "200", "entity_group": "PARAM", "score": 0.9993762122856027}, {"start": 212, "end": 214, "word": "20", "entity_group": "PARAM", "score": 0.9997332739196818}, {"start": 228, "end": 230, "word": "15", "entity_group": "PARAM", "score": 0.9995893237431548}, {"start": 249, "end": 251, "word": "10", "entity_group": "PARAM", "score": 0.999708558972068}, {"start": 277, "end": 290, "word": "south factory", "entity_group": "VAR", "score": 0.9999406992371018}, {"start": 303, "end": 308, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988836929906287}, {"start": 311, "end": 314, "word": "400", "entity_group": "PARAM", "score": 0.9994755978838656}, {"start": 326, "end": 328, "word": "30", "entity_group": "PARAM", "score": 0.9996776505696378}, {"start": 342, "end": 344, "word": "25", "entity_group": "PARAM", "score": 0.9995894894268056}, {"start": 363, "end": 365, "word": "30", "entity_group": "PARAM", "score": 0.9996847985088205}, {"start": 408, "end": 415, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.996657611750896}, {"start": 419, "end": 421, "word": "75", "entity_group": "LIMIT", "score": 0.9993913598985853}, {"start": 435, "end": 437, "word": "30", "entity_group": "LIMIT", "score": 0.9995160164329918}, {"start": 456, "end": 458, "word": "40", "entity_group": "LIMIT", "score": 0.9996968395290767}, {"start": 534, "end": 543, "word": "minimizes", "entity_group": "OBJ_DIR", "score": 0.9926220793565779}, {"start": 548, "end": 552, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9889366328970363}]}
{"doc_id": "1194994066", "document": "A bike factory builds two types of bikes: road bikes and mountain bikes. One road bike requires 3 hours of tooling on the grinder and then 2 hours of tooling on the polisher. One mountain bike requires 5 hours of tooling on the grinder and then 2.5 hours of tooling on the polisher. The factory makes a profit of $70 per road bike and $100 per mountain bike. Each machine, the grinder and polisher, can only be used for a maximum of 12 hours per day. How many units of each, road bikes and mountain bikes, should the factory produce to maximize profit?", "order_mapping": {"road bikes": 0, "mountain bikes": 1, "road bike": 0, "mountain bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"road bike": "70", "mountain bike": "100"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "12", "terms": {"road bike": "3", "mountain bike": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "12", "terms": {"road bike": "2", "mountain bike": "2.5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of road bikes produced\n- y: Number of mountain bikes produced\n\nObjective:\n- The factory aims to maximize its profit. The profit per road bike is $70 and the profit per mountain bike is $100. Therefore, the objective function is: Maximize 70x + 100y\n\nConstraints:\n- The tooling time on the grinder and polisher should not exceed 12 hours each per day. This leads to the constraints: 3x + 5y <= 12 (grinder) and 2x + 2.5y <= 12 (polisher).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 100y\nConstraints:\n3x + 5y <= 12\n2x + 2.5y <= 12", "canonical": {"objective": [-70.0, -100.0], "constraints": [[3.0, 5.0, 12.0], [2.0, 2.5, 12.0]]}, "solution": {"x": 4, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of road bikes produced: RoadBikes\n- Number of mountain bikes produced: MountainBikes\n\nConstraints:\n- Grinder machine usage for road and mountain bikes should not exceed 12 hours per day:\n  3 * RoadBikes + 5 * MountainBikes <= 12\n- Polisher machine usage for road and mountain bikes should not exceed 12 hours per day:\n  2 * RoadBikes + 2.5 * MountainBikes <= 12\n\nObjective:\n- Maximize profit (70 dollars per road bike, 100 dollars per mountain bike):\n  70 * RoadBikes + 100 * MountainBikes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRoadBikes = intvar(0, 999999999)  # Number of road bikes produced\nMountainBikes = intvar(0, 999999999)  # Number of mountain bikes produced\n\n# Constraints\nm = Model()\n\n# Grinder machine usage should not exceed 12 hours per day:\nm += 3 * RoadBikes + 5 * MountainBikes <= 12\n# Polisher machine usage should not exceed 12 hours per day:\nm += 2 * RoadBikes + 2.5 * MountainBikes <= 12\n\n# Objective\n# Maximize profit (70 dollars per road bike, 100 dollars per mountain bike):\nm.maximize(70 * RoadBikes + 100 * MountainBikes)\n", "entities": [{"start": 43, "end": 53, "word": "road bikes", "entity_group": "VAR", "score": 0.9999783125461471}, {"start": 58, "end": 72, "word": "mountain bikes", "entity_group": "VAR", "score": 0.999979096239605}, {"start": 79, "end": 88, "word": "road bike", "entity_group": "VAR", "score": 0.999977703345081}, {"start": 98, "end": 99, "word": "3", "entity_group": "PARAM", "score": 0.9995442282254289}, {"start": 141, "end": 142, "word": "2", "entity_group": "PARAM", "score": 0.9997265386852366}, {"start": 182, "end": 195, "word": "mountain bike", "entity_group": "VAR", "score": 0.9999792595794778}, {"start": 205, "end": 206, "word": "5", "entity_group": "PARAM", "score": 0.9994384242731903}, {"start": 248, "end": 251, "word": "2.5", "entity_group": "PARAM", "score": 0.9997263390735484}, {"start": 307, "end": 313, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998914816810603}, {"start": 319, "end": 321, "word": "70", "entity_group": "PARAM", "score": 0.9993651319113933}, {"start": 326, "end": 335, "word": "road bike", "entity_group": "VAR", "score": 0.9999794698470149}, {"start": 342, "end": 345, "word": "100", "entity_group": "PARAM", "score": 0.999660565575559}, {"start": 350, "end": 363, "word": "mountain bike", "entity_group": "VAR", "score": 0.9999731990817796}, {"start": 431, "end": 438, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9973577285273357}, {"start": 442, "end": 444, "word": "12", "entity_group": "LIMIT", "score": 0.9991957472184751}, {"start": 486, "end": 496, "word": "road bikes", "entity_group": "VAR", "score": 0.9999707963551254}, {"start": 501, "end": 515, "word": "mountain bikes", "entity_group": "VAR", "score": 0.9999813539962175}, {"start": 548, "end": 556, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988824377640013}, {"start": 557, "end": 563, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927716943148}]}
{"doc_id": "1981196061", "document": "A company produces action figures and toy cars. Each action figure takes 5 minutes of production time and $2 worth of plastic. Each toy car takes 8 minutes of production time and $2.50 worth of plastic. The company has available 1000 minutes for production and $1000 worth of plastic. If the company earns $2 per action figure and $3 per toy car, how many of each should they produce to maximize their earnings?", "order_mapping": {"action figures": 0, "toy cars": 1, "action figure": 2, "toy car": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"action figure": "2", "toy car": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"action figure": "5", "toy car": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1000", "terms": {"action figure": "2", "toy car": "2.50"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of action figures produced\n- y: Number of toy cars produced\n\nObjective:\n- The company aims to maximize its earnings. The company earns $2 per action figure and $3 per toy car. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- Each action figure takes 5 minutes of production time and each toy car takes 8 minutes. The total available production time is 1000 minutes, leading to the constraint: 5x + 8y <= 1000.\n- Each action figure requires $2 worth of plastic and each toy car requires $2.50. The total available plastic is worth $1000, resulting in the constraint: 2x + 2.50y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\n5x + 8y <= 1000\n2x + 2.50y <= 1000", "canonical": {"objective": [-2.0, -3.0, 0.0], "constraints": [[5.0, 8.0, 0.0, 1000.0], [2.0, 2.5, 0.0, 1000.0]]}, "solution": {"x": 200, "y": 0, "z": 0}, "pseudo_model": "\nDecision Variables:\n- Number of action figures produced: ActionFigures\n- Number of toy cars produced: ToyCars\n\nConstraints:\n- Total production time for action figures and toy cars should not exceed 1000 minutes:\n  5 * ActionFigures + 8 * ToyCars <= 1000\n- Total cost of plastic for action figures and toy cars should not exceed $1000:\n  2 * ActionFigures + 2.5 * ToyCars <= 1000\n\nObjective:\n- Maximize earnings ($2 per action figure and $3 per toy car):\n  2 * ActionFigures + 3 * ToyCars\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nActionFigures = intvar(0, 999999999)  # Number of action figures produced\nToyCars = intvar(0, 999999999)  # Number of toy cars produced\n\n# Constraints\nm = Model()\n\n# Total production time for action figures and toy cars should not exceed 1000 minutes:\nm += 5 * ActionFigures + 8 * ToyCars <= 1000\n# Total cost of plastic for action figures and toy cars should not exceed $1000:\nm += 2 * ActionFigures + 2.5 * ToyCars <= 1000\n\n# Objective\n# Maximize earnings ($2 per action figure and $3 per toy car):\nm.maximize(2 * ActionFigures + 3 * ToyCars)\n", "entities": [{"start": 19, "end": 33, "word": "action figures", "entity_group": "VAR", "score": 0.9999799054947196}, {"start": 38, "end": 46, "word": "toy cars", "entity_group": "VAR", "score": 0.9999882242818913}, {"start": 54, "end": 67, "word": "action figure", "entity_group": "VAR", "score": 0.9999784181940252}, {"start": 74, "end": 75, "word": "5", "entity_group": "PARAM", "score": 0.9996976713666549}, {"start": 109, "end": 110, "word": "2", "entity_group": "PARAM", "score": 0.9996897623184541}, {"start": 135, "end": 142, "word": "toy car", "entity_group": "VAR", "score": 0.9999850175100891}, {"start": 149, "end": 150, "word": "8", "entity_group": "PARAM", "score": 0.9997250767002953}, {"start": 184, "end": 188, "word": "2.50", "entity_group": "PARAM", "score": 0.9995967299659784}, {"start": 224, "end": 233, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991221792170287}, {"start": 234, "end": 238, "word": "1000", "entity_group": "LIMIT", "score": 0.9994182788905285}, {"start": 268, "end": 272, "word": "1000", "entity_group": "LIMIT", "score": 0.9990976325286819}, {"start": 307, "end": 312, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9919419014556328}, {"start": 315, "end": 316, "word": "2", "entity_group": "PARAM", "score": 0.9994237647615216}, {"start": 321, "end": 334, "word": "action figure", "entity_group": "VAR", "score": 0.9999829092849909}, {"start": 341, "end": 342, "word": "3", "entity_group": "PARAM", "score": 0.9996837284891246}, {"start": 347, "end": 354, "word": "toy car", "entity_group": "VAR", "score": 0.9999490668533468}, {"start": 397, "end": 405, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997013845528808}, {"start": 412, "end": 420, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9988232431203341}]}
{"doc_id": "877479920", "document": "A fast-food restaurant sells burgers and sandwiches. To stay in business, they must sell at least 100 burgers and at least 80 sandwiches. However, they only have enough supplies to make at most 120 burgers and at most 100 sandwiches. Given their tight schedule, they can only cook at most 200 items total. The profit per burger is $4.5 and the profit per sandwich is $5. How many of each item should they sell to maximize profit?", "order_mapping": {"burgers": 0, "sandwiches": 1, "burger": 0, "sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"burger": "4.5", "sandwich": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "100", "var": "burgers", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "80", "var": "sandwiches", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "120", "var": "burgers", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "sandwiches", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of burgers sold\n- y: Number of sandwiches sold\n\nObjective:\n- The fast-food restaurant aims to maximize its profit. The profit per burger is $4.5 and the profit per sandwich is $5. Therefore, the objective function is: Maximize 4.5x + 5y\n\nConstraints:\n- The restaurant must sell at least 100 burgers, leading to the constraint: x >= 100.\n- The restaurant must sell at least 80 sandwiches, leading to the constraint: y >= 80.\n- The restaurant can make at most 120 burgers, leading to the constraint: x <= 120.\n- The restaurant can make at most 100 sandwiches, leading to the constraint: y <= 100.\n- The restaurant can only cook at most 200 items total, leading to the constraint: x + y <= 200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4.5x + 5y\nConstraints:\nx >= 100\ny >= 80\nx <= 120\ny <= 100\nx + y <= 200", "canonical": {"objective": [-4.5, -5.0], "constraints": [[-1.0, 0.0, -100.0], [0.0, -1.0, -80.0], [1.0, 0.0, 120.0], [0.0, 1.0, 100.0], [1.0, 1.0, 200.0]]}, "solution": {"x": 100, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of burgers sold: Burgers\n- Number of sandwiches sold: Sandwiches\n\nConstraints:\n- At least 100 burgers must be sold:\n  Burgers >= 100\n- At least 80 sandwiches must be sold:\n  Sandwiches >= 80\n- At most 120 burgers can be made:\n  Burgers <= 120\n- At most 100 sandwiches can be made:\n  Sandwiches <= 100\n- Total number of items cooked should not exceed 200:\n  Burgers + Sandwiches <= 200\n\nObjective:\n- Maximize profit (4.5 dollars per burger, 5 dollars per sandwich):\n  4.5 * Burgers + 5 * Sandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurgers = intvar(0, 999999999)  # Number of burgers sold\nSandwiches = intvar(0, 999999999)  # Number of sandwiches sold\n\n# Constraints\nm = Model()\n\n# They must sell at least 100 burgers:\nm += Burgers >= 100\n# They must sell at least 80 sandwiches:\nm += Sandwiches >= 80\n# They can only make at most 120 burgers:\nm += Burgers <= 120\n# They can only make at most 100 sandwiches:\nm += Sandwiches <= 100\n# They can only cook at most 200 items total:\nm += Burgers + Sandwiches <= 200\n\n# Objective\n# Maximize profit (4.5 dollars per burger, 5 dollars per sandwich):\nm.maximize(4.5 * Burgers + 5 * Sandwiches)\n", "entities": [{"start": 31, "end": 38, "word": "burgers", "entity_group": "VAR", "score": 0.9996799768487803}, {"start": 43, "end": 53, "word": "sandwiches", "entity_group": "VAR", "score": 0.9991576002097008}, {"start": 93, "end": 101, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990154284018505}, {"start": 102, "end": 105, "word": "100", "entity_group": "LIMIT", "score": 0.9996996024208227}, {"start": 106, "end": 113, "word": "burgers", "entity_group": "VAR", "score": 0.9993163894397812}, {"start": 118, "end": 126, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998887093297772}, {"start": 127, "end": 129, "word": "80", "entity_group": "LIMIT", "score": 0.9997493456504263}, {"start": 130, "end": 140, "word": "sandwiches", "entity_group": "VAR", "score": 0.9993085870945229}, {"start": 192, "end": 199, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989400630231878}, {"start": 200, "end": 203, "word": "120", "entity_group": "LIMIT", "score": 0.9997121671851934}, {"start": 204, "end": 211, "word": "burgers", "entity_group": "VAR", "score": 0.9989288015300619}, {"start": 216, "end": 223, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989653886814773}, {"start": 224, "end": 227, "word": "100", "entity_group": "LIMIT", "score": 0.9997503850756339}, {"start": 228, "end": 238, "word": "sandwiches", "entity_group": "VAR", "score": 0.9995095716227074}, {"start": 289, "end": 296, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987464274087983}, {"start": 297, "end": 300, "word": "200", "entity_group": "LIMIT", "score": 0.9997407003057559}, {"start": 319, "end": 325, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998992343613494}, {"start": 330, "end": 336, "word": "burger", "entity_group": "VAR", "score": 0.9991622515700734}, {"start": 342, "end": 345, "word": "4.5", "entity_group": "PARAM", "score": 0.9993469716878899}, {"start": 354, "end": 360, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998239681825617}, {"start": 365, "end": 373, "word": "sandwich", "entity_group": "VAR", "score": 0.9983777760556537}, {"start": 379, "end": 380, "word": "5", "entity_group": "PARAM", "score": 0.9994255863740704}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995899089792601}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269817457224}]}
{"doc_id": "-1576481997", "document": "Amy owns a bakery and sells two types of bread: croissant and ficelle. Each croissant requires 12 minutes of mixing and 2 tablespoons of vanilla extract. Each ficelle requires 17 minutes of mixing and 1 tablespoon of vanilla extract. There are 350 minutes of mixing time available and 45 tablespoons of vanilla extract available. Each croissant can be sold for $4.5 and each ficelle can be sold for $3.5. Formulate an LP to maximize Amy's revenue, then graphically solve the LP. (A fractional number of bread is okay)", "order_mapping": {"croissant": 0, "ficelle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"croissant": "4.5", "ficelle": "3.5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "350", "terms": {"croissant": "12", "ficelle": "17"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "45", "terms": {"croissant": "2", "ficelle": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of croissants\n- y: Quantity of ficelles\n\nObjective:\n- The objective is to maximize the revenue. Each croissant can be sold for $4.5 and each ficelle can be sold for $3.5. Therefore, the objective function is: Maximize 4.5x + 3.5y\n\nConstraints:\n- There are 350 minutes of mixing time available, so the constraint is: 12x + 17y <= 350.\n- There are 45 tablespoons of vanilla extract available, leading to the constraint: 2x + y <= 45.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4.5x + 3.5y\nConstraints:\n12x + 17y <= 350\n2x + y <= 45", "canonical": {"objective": [-4.5, -3.5], "constraints": [[12.0, 17.0, 350.0], [2.0, 1.0, 45.0]]}, "solution": {"x": 19, "y": 7}, "pseudo_model": "\nDecision Variables:\n- Number of croissants made: Croissant\n- Number of ficelles made: Ficelle\n\nConstraints:\n- Mixing time constraint (350 minutes available):\n  12 * Croissant + 17 * Ficelle <= 350\n- Vanilla extract constraint (45 tablespoons available):\n  2 * Croissant + 1 * Ficelle <= 45\n\nObjective:\n- Maximize revenue (4.5 dollars per croissant, 3.5 dollars per ficelle):\n  4.5 * Croissant + 3.5 * Ficelle\n\nGraphical Solution Steps:\n1. Plot the constraints on a graph with Croissant on the x-axis and Ficelle on the y-axis.\n2. Identify the feasible region that satisfies all constraints.\n3. The optimal solution lies on the boundary of the feasible region that maximizes the objective function.\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCroissant = intvar(0, 999999999)  # Number of croissants made\nFicelle = intvar(0, 999999999)  # Number of ficelles made\n\n# Constraints\nm = Model()\n\n# Mixing time constraint (350 minutes available):\nm += 12 * Croissant + 17 * Ficelle <= 350\n# Vanilla extract constraint (45 tablespoons available):\nm += 2 * Croissant + 1 * Ficelle <= 45\n\n# Objective\n# Maximize revenue (4.5 dollars per croissant, 3.5 dollars per ficelle):\nm.maximize(4.5 * Croissant + 3.5 * Ficelle)\n\n", "entities": [{"start": 49, "end": 58, "word": "croissant", "entity_group": "VAR", "score": 0.9994911959185114}, {"start": 63, "end": 70, "word": "ficelle", "entity_group": "VAR", "score": 0.9997835052067175}, {"start": 78, "end": 87, "word": "croissant", "entity_group": "VAR", "score": 0.9995347755306597}, {"start": 97, "end": 99, "word": "12", "entity_group": "PARAM", "score": 0.9996629812705706}, {"start": 122, "end": 123, "word": "2", "entity_group": "PARAM", "score": 0.9996969265049155}, {"start": 162, "end": 169, "word": "ficelle", "entity_group": "VAR", "score": 0.9995937472123334}, {"start": 179, "end": 181, "word": "17", "entity_group": "PARAM", "score": 0.9996174628681971}, {"start": 204, "end": 205, "word": "1", "entity_group": "PARAM", "score": 0.9996327833179628}, {"start": 248, "end": 251, "word": "350", "entity_group": "LIMIT", "score": 0.9996986328311726}, {"start": 275, "end": 284, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992040807903896}, {"start": 289, "end": 291, "word": "45", "entity_group": "LIMIT", "score": 0.9997135105487911}, {"start": 323, "end": 332, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992342468962416}, {"start": 340, "end": 349, "word": "croissant", "entity_group": "VAR", "score": 0.9995171481039985}, {"start": 357, "end": 361, "word": "sold", "entity_group": "OBJ_NAME", "score": 0.9937897819528964}, {"start": 368, "end": 371, "word": "4.5", "entity_group": "PARAM", "score": 0.9996175026925808}, {"start": 381, "end": 388, "word": "ficelle", "entity_group": "VAR", "score": 0.9998077636450868}, {"start": 396, "end": 400, "word": "sold", "entity_group": "OBJ_NAME", "score": 0.9361166520636578}, {"start": 407, "end": 410, "word": "3.5", "entity_group": "PARAM", "score": 0.9996341755549649}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9984322277600962}, {"start": 448, "end": 455, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9970760031601085}]}
{"doc_id": "1962550027", "document": "A cyclist only eats chicken and potatoes. He wants to make sure he gets a minimum of 80 grams of protein, 50 grams of fat, and 100 grams of carbs. Chicken contains 20 grams of protein, 4 grams of fat, and 4 grams of carbs. Potatoes contain 2 grams of protein, 3 grams of fat, and 7 grams of carbs. If the cost per chicken is $6 and the cost per potato is $2, how many of each should he buy to minimize his costs?", "order_mapping": {"chicken": 0, "potatoes": 1, "Chicken": 0, "Potatoes": 1, "potato": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"potato": "2", "chicken": "6"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "80", "terms": {"Chicken": "20", "Potatoes": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"Chicken": "4", "Potatoes": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "100", "terms": {"Chicken": "4", "Potatoes": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of chickens\n- y: Number of potatoes\n\nObjective:\n- The cyclist aims to minimize his costs. The cost per chicken is $6 and the cost per potato is $2. Therefore, the objective function is: Minimize 6x + 2y\n\nConstraints:\n- The cyclist needs to ensure he gets a minimum of 80 grams of protein, 50 grams of fat, and 100 grams of carbs. The nutritional content of chicken and potatoes can be used to form the following constraints:\n    - 20x + 2y >= 80 (protein constraint)\n    - 4x + 3y >= 50 (fat constraint)\n    - 4x + 7y >= 100 (carb constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6x + 2y\nConstraints:\n20x + 2y >= 80\n4x + 3y >= 50\n4x + 7y >= 100", "canonical": {"objective": [6.0, 2.0], "constraints": [[-20.0, -2.0, -80.0], [-4.0, -3.0, -50.0], [-4.0, -7.0, -100.0]]}, "solution": {"x": 3, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of chickens bought: Chicken\n- Number of potatoes bought: Potatoes\n\nConstraints:\n- To meet the minimum of 80 grams of protein:\n  20 * Chicken + 2 * Potatoes >= 80\n- To meet the minimum of 50 grams of fat:\n  4 * Chicken + 3 * Potatoes >= 50\n- To meet the minimum of 100 grams of carbs:\n  4 * Chicken + 7 * Potatoes >= 100\n\nObjective:\n- Minimize costs (6 dollars per chicken, 2 dollars per potato):\n  6 * Chicken + 2 * Potatoes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChicken = intvar(0, 999999999)  # Number of chickens bought\nPotatoes = intvar(0, 999999999)  # Number of potatoes bought\n\n# Constraints\nm = Model()\n\n# Minimum of 80 grams of protein:\nm += 20 * Chicken + 2 * Potatoes >= 80\n# Minimum of 50 grams of fat:\nm += 4 * Chicken + 3 * Potatoes >= 50\n# Minimum of 100 grams of carbs:\nm += 4 * Chicken + 7 * Potatoes >= 100\n\n# Objective\n# Minimize costs (6 dollars per chicken, 2 dollars per potato):\nm.minimize(6 * Chicken + 2 * Potatoes)\n", "entities": [{"start": 20, "end": 27, "word": "chicken", "entity_group": "VAR", "score": 0.9984543563358419}, {"start": 32, "end": 40, "word": "potatoes", "entity_group": "VAR", "score": 0.9993760337463626}, {"start": 75, "end": 82, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9971542973426187}, {"start": 86, "end": 88, "word": "80", "entity_group": "LIMIT", "score": 0.9997755316076491}, {"start": 108, "end": 110, "word": "50", "entity_group": "LIMIT", "score": 0.9997588583797531}, {"start": 130, "end": 133, "word": "100", "entity_group": "LIMIT", "score": 0.9994984582480748}, {"start": 151, "end": 158, "word": "Chicken", "entity_group": "VAR", "score": 0.9997465832462266}, {"start": 168, "end": 170, "word": "20", "entity_group": "PARAM", "score": 0.9997176642046921}, {"start": 190, "end": 191, "word": "4", "entity_group": "PARAM", "score": 0.9997376145712763}, {"start": 211, "end": 212, "word": "4", "entity_group": "PARAM", "score": 0.999540604895293}, {"start": 230, "end": 238, "word": "Potatoes", "entity_group": "VAR", "score": 0.9996208725046231}, {"start": 247, "end": 248, "word": "2", "entity_group": "PARAM", "score": 0.999717761740685}, {"start": 268, "end": 269, "word": "3", "entity_group": "PARAM", "score": 0.9997436775476746}, {"start": 289, "end": 290, "word": "7", "entity_group": "PARAM", "score": 0.9993889378659196}, {"start": 315, "end": 319, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9977552845118203}, {"start": 324, "end": 331, "word": "chicken", "entity_group": "VAR", "score": 0.9995315197156563}, {"start": 337, "end": 338, "word": "6", "entity_group": "PARAM", "score": 0.9993478745628296}, {"start": 347, "end": 351, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9977912101252998}, {"start": 356, "end": 362, "word": "potato", "entity_group": "VAR", "score": 0.9990888330751424}, {"start": 368, "end": 369, "word": "2", "entity_group": "PARAM", "score": 0.9994707279692839}, {"start": 406, "end": 414, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994779554127431}, {"start": 419, "end": 424, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990897010109112}]}
{"doc_id": "2077426897", "document": "An investment institution has decided to invest in the stock market for the first time. Currently, it has $800,000 to invest, some in ABC Software and the rest in XYZ Designs. The money invested in ABC Software must not be greater than $300,000. The institution has decided that the money invested in ABC Software must be at least a half as much as that in XYZ Designs. If the ABC Software earns 12%, and the XYZ Designs earns 7.5%, how much money should it invest in each to maximize profit?", "order_mapping": {"ABC Software": 0, "XYZ Designs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"ABC Software": "12%", "XYZ Designs": "7.5%"}}, "const_declarations": [{"type": "upperbound", "direction": "not be greater than", "limit": "300,000", "var": "ABC Software", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "800,000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "ABC Software", "direction": "at least", "param": "half", "y_var": "XYZ Designs", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in ABC Software\n- y: Dollars invested in XYZ Designs\n\nObjective:\n- The institution aims to maximize its profit. The annual rate of return on each investment is known to be: ABC Software, 12%; XYZ Designs, 7.5%. Therefore, the objective function is: Maximize 0.12x + 0.075y\n\nConstraints:\n- The total amount available for investment is $800,000, so the constraint is: x + y <= 800,000.\n- The money invested in ABC Software must not be greater than $300,000, leading to the constraint: x <= 300,000.\n- The money invested in ABC Software must be at least half as much as that in XYZ Designs, resulting in the constraint: x >= 0.5y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.12x + 0.075y\nConstraints:\nx + y <= 800,000\nx <= 300,000\nx >= 0.5y", "canonical": {"objective": [-0.12, -0.075], "constraints": []}, "solution": {"x": 100000000, "y": 100000000}, "pseudo_model": "\nDecision Variables:\n- Money invested in ABC Software: ABC_Software\n- Money invested in XYZ Designs: XYZ_Designs\n\nConstraints:\n- Total money invested should not exceed $800,000:\n  ABC_Software + XYZ_Designs <= 800000\n- Money invested in ABC Software must not be greater than $300,000:\n  ABC_Software <= 300000\n- Money invested in ABC Software must be at least half as much as that in XYZ Designs:\n  ABC_Software >= 0.5 * XYZ_Designs\n\nObjective:\n- Maximize profit (12% from ABC Software, 7.5% from XYZ Designs):\n  0.12 * ABC_Software + 0.075 * XYZ_Designs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nABC_Software = intvar(0, 999999999)  # Money invested in ABC Software\nXYZ_Designs = intvar(0, 999999999)  # Money invested in XYZ Designs\n\n# Constraints\nm = Model()\n\n# Total money invested should not exceed $800,000:\nm += ABC_Software + XYZ_Designs <= 800000\n# Money invested in ABC Software must not be greater than $300,000:\nm += ABC_Software <= 300000\n# Money invested in ABC Software must be at least half as much as that in XYZ Designs:\nm += ABC_Software >= 0.5 * XYZ_Designs\n\n# Objective\n# Maximize profit (12% from ABC Software, 7.5% from XYZ Designs):\nm.maximize(0.12 * ABC_Software + 0.075 * XYZ_Designs)\n", "entities": [{"start": 104, "end": 107, "word": "has", "entity_group": "CONST_DIR", "score": 0.9970767531437643}, {"start": 110, "end": 117, "word": "800,000", "entity_group": "LIMIT", "score": 0.9995749758701707}, {"start": 138, "end": 150, "word": "ABC Software", "entity_group": "VAR", "score": 0.9999781687946324}, {"start": 167, "end": 178, "word": "XYZ Designs", "entity_group": "VAR", "score": 0.9998793277034761}, {"start": 203, "end": 215, "word": "ABC Software", "entity_group": "VAR", "score": 0.9999903103587744}, {"start": 221, "end": 240, "word": "not be greater than", "entity_group": "CONST_DIR", "score": 0.8993594320311095}, {"start": 243, "end": 250, "word": "300,000", "entity_group": "LIMIT", "score": 0.9997005973916757}, {"start": 308, "end": 320, "word": "ABC Software", "entity_group": "VAR", "score": 0.9999715852565484}, {"start": 329, "end": 337, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9912145616449329}, {"start": 340, "end": 344, "word": "half", "entity_group": "PARAM", "score": 0.9972032616824438}, {"start": 364, "end": 375, "word": "XYZ Designs", "entity_group": "VAR", "score": 0.999914445604878}, {"start": 385, "end": 397, "word": "ABC Software", "entity_group": "VAR", "score": 0.9999785975838139}, {"start": 398, "end": 403, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9935280172412035}, {"start": 404, "end": 408, "word": "12 %", "entity_group": "PARAM", "score": 0.9959603560436213}, {"start": 419, "end": 430, "word": "XYZ Designs", "entity_group": "VAR", "score": 0.9999452886227839}, {"start": 431, "end": 436, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9967144219435566}, {"start": 437, "end": 442, "word": "7.5 %", "entity_group": "PARAM", "score": 0.9955704829405445}, {"start": 488, "end": 496, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993700382533129}, {"start": 497, "end": 503, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997319382120905}]}
{"doc_id": "797233732", "document": "A company sells tea and coffee in small tins. Each tea tin takes 4 minutes to fill and 1 minute to label. Each coffee tin takes 3 minutes to fill and 2 minutes to label. The company has available 500 minutes for filling and 600 minutes for labeling. If the profit per tea tin is $11 and the profit per coffee tin is $13, how many of each should they sell to maximize profit?", "order_mapping": {"tea": 0, "coffee": 1, "tea tin": 0, "coffee tin": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"tea tin": "11", "coffee tin": "13"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"coffee tin": "3", "tea tin": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"coffee tin": "2", "tea tin": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of tea tins\n- y: Number of coffee tins\n\nObjective:\n- The company aims to maximize its profit. The profit per tea tin is $11 and the profit per coffee tin is $13. Therefore, the objective function is: Maximize 11x + 13y\n\nConstraints:\n- The company has 500 minutes available for filling, and each tea tin takes 4 minutes to fill and each coffee tin takes 3 minutes to fill. This leads to the constraint: 4x + 3y <= 500.\n- The company has 600 minutes available for labeling, and each tea tin takes 1 minute to label and each coffee tin takes 2 minutes to label. This results in the constraint: x + 2y <= 600.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 11x + 13y\nConstraints:\n4x + 3y <= 500\nx + 2y <= 600", "canonical": {"objective": [-11.0, -13.0], "constraints": [[4.0, 3.0, 500.0], [1.0, 2.0, 600.0]]}, "solution": {"x": 0, "y": 166}, "pseudo_model": "\nDecision Variables:\n- Number of tea tins: TeaTins\n- Number of coffee tins: CoffeeTins\n\nConstraints:\n- Total minutes for filling tea and coffee tins should not exceed 500 minutes:\n  4 * TeaTins + 3 * CoffeeTins <= 500\n- Total minutes for labeling tea and coffee tins should not exceed 600 minutes:\n  1 * TeaTins + 2 * CoffeeTins <= 600\n\nObjective:\n- Maximize profit (11 dollars per tea tin, 13 dollars per coffee tin):\n  11 * TeaTins + 13 * CoffeeTins\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTeaTins = intvar(0, 999999999)  # Number of tea tins\nCoffeeTins = intvar(0, 999999999)  # Number of coffee tins\n\n# Constraints\nm = Model()\n\n# Total minutes for filling should not exceed 500:\nm += 4 * TeaTins + 3 * CoffeeTins <= 500\n# Total minutes for labeling should not exceed 600:\nm += 1 * TeaTins + 2 * CoffeeTins <= 600\n\n# Objective\n# Maximize profit (11 dollars per tea tin, 13 dollars per coffee tin):\nm.maximize(11 * TeaTins + 13 * CoffeeTins)\n", "entities": [{"start": 16, "end": 19, "word": "tea", "entity_group": "VAR", "score": 0.9983491964882554}, {"start": 24, "end": 30, "word": "coffee", "entity_group": "VAR", "score": 0.9833383548933459}, {"start": 52, "end": 59, "word": "tea tin", "entity_group": "VAR", "score": 0.9999836030853262}, {"start": 66, "end": 67, "word": "4", "entity_group": "PARAM", "score": 0.9996801648393252}, {"start": 88, "end": 89, "word": "1", "entity_group": "PARAM", "score": 0.9995900780093904}, {"start": 113, "end": 123, "word": "coffee tin", "entity_group": "VAR", "score": 0.9999783487455874}, {"start": 130, "end": 131, "word": "3", "entity_group": "PARAM", "score": 0.9997215545618402}, {"start": 152, "end": 153, "word": "2", "entity_group": "PARAM", "score": 0.9996513117754192}, {"start": 189, "end": 198, "word": "available", "entity_group": "CONST_DIR", "score": 0.998971678656473}, {"start": 199, "end": 202, "word": "500", "entity_group": "LIMIT", "score": 0.9993883040728773}, {"start": 227, "end": 230, "word": "600", "entity_group": "LIMIT", "score": 0.9995879117479217}, {"start": 261, "end": 267, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999450285156971}, {"start": 272, "end": 279, "word": "tea tin", "entity_group": "VAR", "score": 0.9998910597455092}, {"start": 285, "end": 287, "word": "11", "entity_group": "PARAM", "score": 0.9995537865816198}, {"start": 296, "end": 302, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999111125293464}, {"start": 307, "end": 317, "word": "coffee tin", "entity_group": "VAR", "score": 0.9998325256089681}, {"start": 323, "end": 325, "word": "13", "entity_group": "PARAM", "score": 0.9996757742260716}, {"start": 365, "end": 373, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996843680345001}, {"start": 374, "end": 380, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368872053741}]}
{"doc_id": "-161695218", "document": "John is an artisan and he makes two types of terracotta pots: an oval pot and a square pot. Each oval pot requires 40 minutes of shaping time and 50 minutes of baking time. Each square pot requires 35 minutes of shaping time and 80 minutes of baking time. Per week, there are 2500 minutes available for shaping and 3800 minutes available for baking. The profit per oval pot is $4.5 and the profit per square pot is $8. How many pots of each type should he make to maximize profit?", "order_mapping": {"oval pot": 0, "square pot": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"square pot": "8", "oval pot": "4.5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2500", "terms": {"oval pot": "40", "square pot": "35"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3800", "terms": {"oval pot": "50", "square pot": "80"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of oval pots\n- y: Number of square pots\n\nObjective:\n- John wants to maximize his profit. The profit per oval pot is $4.5 and the profit per square pot is $8. Therefore, the objective function is: Maximize 4.5x + 8y\n\nConstraints:\n- Each oval pot requires 40 minutes of shaping time and each square pot requires 35 minutes. The total available shaping time is 2500 minutes, leading to the constraint: 40x + 35y <= 2500.\n- Each oval pot requires 50 minutes of baking time and each square pot requires 80 minutes. The total available baking time is 3800 minutes, leading to the constraint: 50x + 80y <= 3800.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4.5x + 8y\nConstraints:\n40x + 35y <= 2500\n50x + 80y <= 3800", "canonical": {"objective": [-4.5, -8.0], "constraints": [[40.0, 35.0, 2500.0], [50.0, 80.0, 3800.0]]}, "solution": {"x": 4, "y": 45}, "pseudo_model": "\nDecision Variables:\n- Number of oval pots made per week: OvalPot\n- Number of square pots made per week: SquarePot\n\nConstraints:\n- Total shaping time for all pots should not exceed 2500 minutes per week:\n  40 * OvalPot + 35 * SquarePot <= 2500\n- Total baking time for all pots should not exceed 3800 minutes per week:\n  50 * OvalPot + 80 * SquarePot <= 3800\n\nObjective:\n- Maximize profit (4.5 dollars per oval pot, 8 dollars per square pot):\n  4.5 * OvalPot + 8 * SquarePot\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOvalPot = intvar(0, 999999999)  # Number of oval pots made per week\nSquarePot = intvar(0, 999999999)  # Number of square pots made per week\n\n# Constraints\nm = Model()\n\n# Total shaping time for all pots should not exceed 2500 minutes per week:\nm += 40 * OvalPot + 35 * SquarePot <= 2500\n# Total baking time for all pots should not exceed 3800 minutes per week:\nm += 50 * OvalPot + 80 * SquarePot <= 3800\n\n# Objective\n# Maximize profit (4.5 dollars per oval pot, 8 dollars per square pot):\nm.maximize(4.5 * OvalPot + 8 * SquarePot)\n", "entities": [{"start": 66, "end": 74, "word": "oval pot", "entity_group": "VAR", "score": 0.9999419472478813}, {"start": 81, "end": 91, "word": "square pot", "entity_group": "VAR", "score": 0.9999709683738052}, {"start": 99, "end": 107, "word": "oval pot", "entity_group": "VAR", "score": 0.9999827190896493}, {"start": 117, "end": 119, "word": "40", "entity_group": "PARAM", "score": 0.9997208786967303}, {"start": 148, "end": 150, "word": "50", "entity_group": "PARAM", "score": 0.9994538959615561}, {"start": 181, "end": 191, "word": "square pot", "entity_group": "VAR", "score": 0.999965714223458}, {"start": 201, "end": 203, "word": "35", "entity_group": "PARAM", "score": 0.9997252650749819}, {"start": 232, "end": 234, "word": "80", "entity_group": "PARAM", "score": 0.9994184190459459}, {"start": 281, "end": 285, "word": "2500", "entity_group": "LIMIT", "score": 0.999767458490961}, {"start": 294, "end": 303, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993801294856457}, {"start": 320, "end": 324, "word": "3800", "entity_group": "LIMIT", "score": 0.9997099391368443}, {"start": 333, "end": 342, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987261764880433}, {"start": 360, "end": 366, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999441404671259}, {"start": 371, "end": 379, "word": "oval pot", "entity_group": "VAR", "score": 0.999956560148631}, {"start": 385, "end": 388, "word": "4.5", "entity_group": "PARAM", "score": 0.9995624174196232}, {"start": 397, "end": 403, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999000815986164}, {"start": 408, "end": 418, "word": "square pot", "entity_group": "VAR", "score": 0.9997898852378171}, {"start": 424, "end": 425, "word": "8", "entity_group": "PARAM", "score": 0.9996727101630292}, {"start": 473, "end": 481, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996719844748885}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147428743027}]}
{"doc_id": "1419130428", "document": "Samuel has 90 acres of land to grow wheat and corn. Each acre of wheat requires $10 in maintenance and 4 hours of care. Each acre of corn requires $20 in maintenance and 3 hours of care. He has at most $1400 to spend on maintenance and 90 hours of time available for care keeping. If the profit per acre of wheat is $50 and the profit per acre of corn is $90, how many acres of each should be grown to maximize profit?", "order_mapping": {"wheat": 0, "corn": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"wheat": "50", "corn": "90"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "90", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1400", "terms": {"wheat": "10", "corn": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "90", "terms": {"corn": "3", "wheat": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of wheat\n- y: Acres of corn\n\nObjective:\n- Samuel wants to maximize his profit. The profit per acre of wheat is $50 and the profit per acre of corn is $90. Therefore, the objective function is: Maximize 50x + 90y\n\nConstraints:\n- Samuel has 90 acres of land available, so the constraint is: x + y <= 90.\n- He has at most $1400 to spend on maintenance, leading to the constraint: 10x + 20y <= 1400.\n- He has 90 hours of time available for care keeping, resulting in the constraint: 4x + 3y <= 90.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 90y\nConstraints:\nx + y <= 90\n10x + 20y <= 1400\n4x + 3y <= 90", "canonical": {"objective": [-50.0, -90.0], "constraints": [[1.0, 1.0, 90.0], [10.0, 20.0, 1400.0], [4.0, 3.0, 90.0]]}, "solution": {"x": 0, "y": 30}, "pseudo_model": "\nDecision Variables:\n- Number of acres of wheat grown: Wheat\n- Number of acres of corn grown: Corn\n\nConstraints:\n- Total acres of wheat and corn should not exceed 90:\n  Wheat + Corn <= 90\n- Maintenance cost for wheat and corn should not exceed $1400:\n  10 * Wheat + 20 * Corn <= 1400\n- Total care hours for wheat and corn should not exceed 90 hours:\n  4 * Wheat + 3 * Corn <= 90\n\nObjective:\n- Maximize profit (profit per acre of wheat is $50, profit per acre of corn is $90):\n  50 * Wheat + 90 * Corn\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWheat = intvar(0, 999999999)  # Number of acres of wheat\nCorn = intvar(0, 999999999)  # Number of acres of corn\n\n# Constraints\nm = Model()\n\n# Total acres of wheat and corn should not exceed 90:\nm += Wheat + Corn <= 90\n# Maintenance cost should not exceed $1400 ($10 per acre of wheat, $20 per acre of corn):\nm += 10 * Wheat + 20 * Corn <= 1400\n# Total care hours should not exceed 90 hours (4 hours per acre of wheat, 3 hours per acre of corn):\nm += 4 * Wheat + 3 * Corn <= 90\n\n# Objective\n# Maximize profit ($50 profit per acre of wheat, $90 profit per acre of corn):\nm.maximize(50 * Wheat + 90 * Corn)\n", "entities": [{"start": 7, "end": 10, "word": "has", "entity_group": "CONST_DIR", "score": 0.993669144048267}, {"start": 11, "end": 13, "word": "90", "entity_group": "LIMIT", "score": 0.9987644163416477}, {"start": 36, "end": 41, "word": "wheat", "entity_group": "VAR", "score": 0.9972209494777629}, {"start": 46, "end": 50, "word": "corn", "entity_group": "VAR", "score": 0.9993591239543922}, {"start": 66, "end": 71, "word": "wheat", "entity_group": "VAR", "score": 0.9992294854013106}, {"start": 83, "end": 85, "word": "10", "entity_group": "PARAM", "score": 0.9987143337485891}, {"start": 105, "end": 106, "word": "4", "entity_group": "PARAM", "score": 0.9997184781338383}, {"start": 136, "end": 140, "word": "corn", "entity_group": "VAR", "score": 0.999402201226426}, {"start": 152, "end": 154, "word": "20", "entity_group": "PARAM", "score": 0.9987450575908619}, {"start": 174, "end": 175, "word": "3", "entity_group": "PARAM", "score": 0.9996942108192676}, {"start": 199, "end": 206, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9959495382492866}, {"start": 209, "end": 213, "word": "1400", "entity_group": "LIMIT", "score": 0.999544232465327}, {"start": 242, "end": 244, "word": "90", "entity_group": "LIMIT", "score": 0.9996565391605444}, {"start": 259, "end": 268, "word": "available", "entity_group": "CONST_DIR", "score": 0.9771627171960695}, {"start": 295, "end": 301, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997880697746033}, {"start": 314, "end": 319, "word": "wheat", "entity_group": "VAR", "score": 0.9992322178722622}, {"start": 325, "end": 327, "word": "50", "entity_group": "PARAM", "score": 0.9991193928684104}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999294905741658}, {"start": 355, "end": 359, "word": "corn", "entity_group": "VAR", "score": 0.9992071620348908}, {"start": 365, "end": 367, "word": "90", "entity_group": "PARAM", "score": 0.9995553517030774}, {"start": 412, "end": 420, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "715710952", "document": "An art gallery sells paintings and photo prints. A painting takes 7 sq ft of wall space while a photo print takes 4 sq ft of wall space. The gallery has 200 sq ft of wall space available. A painting costs the gallery $400 and a photo print costs the gallery $200. The gallery has a budget of $7000. In addition, at least 20% of items in stock must be photo prints. If the profit per painting sold is $330 and the profit per photo print sold is $170, how many of each should the gallery stock to maximize profit?", "order_mapping": {"paintings": 0, "photo prints": 1, "painting": 0, "photo print": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"painting": "330", "photo print": "170"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "200", "terms": {"painting": "7", "photo print": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "7000", "terms": {"painting": "400", "photo print": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "photo prints", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of paintings\n- y: Number of photo prints\n\nObjective:\n- The gallery aims to maximize its profit. The profit per painting sold is $330 and the profit per photo print sold is $170. Therefore, the objective function is: Maximize 330x + 170y\n\nConstraints:\n- The gallery has 200 sq ft of wall space available, and a painting takes 7 sq ft while a photo print takes 4 sq ft. This leads to the constraint: 7x + 4y <= 200.\n- The gallery has a budget of $7000, and a painting costs $400 while a photo print costs $200. This results in the constraint: 400x + 200y <= 7000.\n- At least 20% of items in stock must be photo prints, leading to the constraint: y >= 0.20(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 330x + 170y\nConstraints:\n7x + 4y <= 200\n400x + 200y <= 7000\ny >= 0.20(x + y)", "canonical": {"objective": [-330.0, -170.0], "constraints": [[7.0, 4.0, 200.0], [400.0, 200.0, 7000.0], [0.2, -0.8, 0.0]]}, "solution": {"x": 0, "y": 35}, "pseudo_model": "\nDecision Variables:\n- Number of paintings stocked: Paintings\n- Number of photo prints stocked: PhotoPrints\n\nConstraints:\n- Total wall space used by paintings and photo prints should not exceed 200 sq ft:\n  7 * Paintings + 4 * PhotoPrints <= 200\n- Total cost of paintings and photo prints should not exceed $7000:\n  400 * Paintings + 200 * PhotoPrints <= 7000\n- At least 20% of items in stock must be photo prints:\n  PhotoPrints >= 0.20 * (Paintings + PhotoPrints)\n\nObjective:\n- Maximize profit ($330 profit per painting, $170 profit per photo print):\n  330 * Paintings + 170 * PhotoPrints\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPaintings = intvar(0, 999999999)  # Number of paintings the gallery stocks\nPhotoPrints = intvar(0, 999999999)  # Number of photo prints the gallery stocks\n\n# Constraints\nm = Model()\n\n# The gallery has 200 sq ft of wall space available:\nm += 7 * Paintings + 4 * PhotoPrints <= 200\n# The gallery has a budget of $7000:\nm += 400 * Paintings + 200 * PhotoPrints <= 7000\n# At least 20% of items in stock must be photo prints:\nm += PhotoPrints >= 0.20 * (Paintings + PhotoPrints)\n\n# Objective\n# Maximize profit ($330 per painting sold, $170 per photo print sold):\nm.maximize(330 * Paintings + 170 * PhotoPrints)\n", "entities": [{"start": 21, "end": 30, "word": "paintings", "entity_group": "VAR", "score": 0.9997566980728723}, {"start": 35, "end": 47, "word": "photo prints", "entity_group": "VAR", "score": 0.999988832828413}, {"start": 52, "end": 60, "word": "painting", "entity_group": "VAR", "score": 0.9997359944677575}, {"start": 67, "end": 68, "word": "7", "entity_group": "PARAM", "score": 0.9993592951888622}, {"start": 97, "end": 108, "word": "photo print", "entity_group": "VAR", "score": 0.9999721645861118}, {"start": 115, "end": 116, "word": "4", "entity_group": "PARAM", "score": 0.9996067807502772}, {"start": 151, "end": 154, "word": "has", "entity_group": "CONST_DIR", "score": 0.9967917682625503}, {"start": 155, "end": 158, "word": "200", "entity_group": "LIMIT", "score": 0.9975724030667972}, {"start": 193, "end": 201, "word": "painting", "entity_group": "VAR", "score": 0.9996745690238212}, {"start": 222, "end": 225, "word": "400", "entity_group": "PARAM", "score": 0.9996412364096527}, {"start": 232, "end": 243, "word": "photo print", "entity_group": "VAR", "score": 0.9999825472808781}, {"start": 264, "end": 267, "word": "200", "entity_group": "PARAM", "score": 0.9996125252670263}, {"start": 288, "end": 294, "word": "budget", "entity_group": "CONST_DIR", "score": 0.993047643391629}, {"start": 300, "end": 304, "word": "7000", "entity_group": "LIMIT", "score": 0.998491133018293}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991707315362611}, {"start": 330, "end": 334, "word": "20 %", "entity_group": "LIMIT", "score": 0.9781875405307365}, {"start": 361, "end": 373, "word": "photo prints", "entity_group": "VAR", "score": 0.9999785502693923}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99984341762665}, {"start": 394, "end": 402, "word": "painting", "entity_group": "VAR", "score": 0.998932041637478}, {"start": 413, "end": 416, "word": "330", "entity_group": "PARAM", "score": 0.9995712585373426}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384589172221}, {"start": 436, "end": 447, "word": "photo print", "entity_group": "VAR", "score": 0.9999420253544303}, {"start": 458, "end": 461, "word": "170", "entity_group": "PARAM", "score": 0.9994149714205522}, {"start": 509, "end": 517, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996868626839831}, {"start": 518, "end": 524, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999210075013456}]}
{"doc_id": "-347968584", "document": "A makeup store sells perfume and mascara. The store has a budget of $20,000. Each bottle of perfume costs the store $50 and each bottle of mascara costs the store $40. Each bottle of perfume is then sold for a profit of $20 while each bottle of mascara is sold for a profit of $15. The owner estimates that at least 20 but at most 40 bottles of perfume will be sold. The number of mascara sold is at most a third the number of perfume sold. How many bottles of perfume and mascara should the store buy and sell to maximize profit?", "order_mapping": {"perfume": 0, "mascara": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mascara": "15", "perfume": "20"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "20,000", "terms": {"perfume": "50", "mascara": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "perfume", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40", "var": "perfume", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "mascara", "direction": "at most", "param": "third", "y_var": "perfume", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bottles of perfume to buy and sell\n- y: Number of bottles of mascara to buy and sell\n\nObjective:\n- The store aims to maximize its profit. Each bottle of perfume is sold for a profit of $20, and each bottle of mascara is sold for a profit of $15. Therefore, the objective function is: Maximize 20x + 15y\n\nConstraints:\n- The store has a budget of $20,000, so the constraint is: 50x + 40y <= 20000.\n- The owner estimates that at least 20 but at most 40 bottles of perfume will be sold, leading to the constraint: 20 <= x <= 40.\n- The number of mascara sold is at most a third the number of perfume sold, resulting in the constraint: y <= (1/3)x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 15y\nConstraints:\n50x + 40y <= 20000\n20 <= x <= 40\ny <= (1/3)x", "canonical": {"objective": [-20.0, -15.0], "constraints": [[50.0, 40.0, 20000.0], [-0.3333333333333333, 1.0, 0.0], [-1.0, 0.0, -20.0], [1.0, 0.0, 40.0]]}, "solution": {"x": 40, "y": 13}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of perfume bought and sold: Perfume\n- Number of bottles of mascara bought and sold: Mascara\n\nConstraints:\n- The store has a budget of $20,000 (each bottle of perfume costs $50 and each bottle of mascara costs $40):\n  50 * Perfume + 40 * Mascara <= 20000\n- At least 20 but at most 40 bottles of perfume will be sold:\n  20 <= Perfume <= 40\n- The number of mascara sold is at most a third the number of perfume sold:\n  Mascara <= 1/3 * Perfume\n\nObjective:\n- Maximize profit ($20 profit per bottle of perfume, $15 profit per bottle of mascara):\n  20 * Perfume + 15 * Mascara\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPerfume = intvar(0, 999999999)  # Number of bottles of perfume bought and sold\nMascara = intvar(0, 999999999)  # Number of bottles of mascara bought and sold\n\n# Constraints\nm = Model()\n\n# The store has a budget of $20,000:\nm += 50 * Perfume + 40 * Mascara <= 20000\n# At least 20 but at most 40 bottles of perfume will be sold:\nm += Perfume >= 20\nm += Perfume <= 40\n# The number of mascara sold is at most a third the number of perfume sold:\nm += Mascara <= (1/3) * Perfume\n\n# Objective\n# Maximize profit ($20 profit per bottle of perfume, $15 profit per bottle of mascara):\nm.maximize(20 * Perfume + 15 * Mascara)\n", "entities": [{"start": 21, "end": 28, "word": "perfume", "entity_group": "VAR", "score": 0.9997276233691512}, {"start": 33, "end": 40, "word": "mascara", "entity_group": "VAR", "score": 0.999646552473814}, {"start": 59, "end": 65, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9969902880861492}, {"start": 71, "end": 77, "word": "20,000", "entity_group": "LIMIT", "score": 0.9990605509303556}, {"start": 95, "end": 102, "word": "perfume", "entity_group": "VAR", "score": 0.9996131897725841}, {"start": 121, "end": 123, "word": "50", "entity_group": "PARAM", "score": 0.9997099829524185}, {"start": 143, "end": 150, "word": "mascara", "entity_group": "VAR", "score": 0.9995105094200433}, {"start": 169, "end": 171, "word": "40", "entity_group": "PARAM", "score": 0.9997313603017115}, {"start": 189, "end": 196, "word": "perfume", "entity_group": "VAR", "score": 0.9993543237492861}, {"start": 216, "end": 222, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999613791790447}, {"start": 228, "end": 230, "word": "20", "entity_group": "PARAM", "score": 0.9996430918687563}, {"start": 252, "end": 259, "word": "mascara", "entity_group": "VAR", "score": 0.9997046379154332}, {"start": 274, "end": 280, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994246154452511}, {"start": 286, "end": 288, "word": "15", "entity_group": "PARAM", "score": 0.9995523746032737}, {"start": 316, "end": 324, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991052900716146}, {"start": 325, "end": 327, "word": "20", "entity_group": "LIMIT", "score": 0.9993616559131225}, {"start": 332, "end": 339, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992554077316989}, {"start": 340, "end": 342, "word": "40", "entity_group": "LIMIT", "score": 0.9996894356109607}, {"start": 354, "end": 361, "word": "perfume", "entity_group": "VAR", "score": 0.9972321934121972}, {"start": 391, "end": 398, "word": "mascara", "entity_group": "VAR", "score": 0.9991229037893775}, {"start": 407, "end": 414, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9979595413199545}, {"start": 417, "end": 422, "word": "third", "entity_group": "PARAM", "score": 0.9975071461065432}, {"start": 437, "end": 444, "word": "perfume", "entity_group": "VAR", "score": 0.9990630558291607}, {"start": 472, "end": 479, "word": "perfume", "entity_group": "VAR", "score": 0.9995729786781505}, {"start": 484, "end": 491, "word": "mascara", "entity_group": "VAR", "score": 0.9997326777152237}, {"start": 525, "end": 533, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987210781676281}, {"start": 534, "end": 540, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997433452488921}]}
{"doc_id": "823166508", "document": "Mary follows a new daily diet for which she needs to have at least 100 grams of vitamin A, 500 grams of vitamin C, and 3000 grams of proteins. In order to do so, her dietician recommended her to drink a protein drink or fruit snack. The protein drink costs $4 per serving and contains 45 grams of vitamin A, 200 grams of vitamin C, and 300 grams of proteins. Fruit snack costs $12 per serving and contains 400 grams of vitamin A, 600 unit of vitamin C, and 200 grams of proteins. How many servings of each should Mary buy to minimize her cost?", "order_mapping": {"protein drink": 0, "fruit snack": 1, "Fruit snack": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Fruit snack": "12", "protein drink": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"protein drink": "45", "Fruit snack": "400"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"protein drink": "200", "Fruit snack": "600"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3000", "terms": {"protein drink": "300", "Fruit snack": "200"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Servings of protein drink\n- y: Servings of fruit snack\n\nObjective:\n- Mary wants to minimize her cost. The protein drink costs $4 per serving and the fruit snack costs $12 per serving. Therefore, the objective function is: Minimize 4x + 12y\n\nConstraints:\n- Mary needs to have at least 100 grams of vitamin A, which translates to the constraint: 45x + 400y >= 100.\n- She also needs to have at least 500 grams of vitamin C, leading to the constraint: 200x + 600y >= 500.\n- Additionally, she needs to have at least 3000 grams of proteins, resulting in the constraint: 300x + 200y >= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4x + 12y\nConstraints:\n45x + 400y >= 100\n200x + 600y >= 500\n300x + 200y >= 3000", "canonical": {"objective": [4.0, 12.0], "constraints": [[-45.0, -400.0, -100.0], [-200.0, -600.0, -500.0], [-300.0, -200.0, -3000.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of protein drink servings: ProteinDrink\n- Number of fruit snack servings: FruitSnack\n\nConstraints:\n- To meet the vitamin A requirement:\n  45 * ProteinDrink + 400 * FruitSnack >= 100\n- To meet the vitamin C requirement:\n  200 * ProteinDrink + 600 * FruitSnack >= 500\n- To meet the protein requirement:\n  300 * ProteinDrink + 200 * FruitSnack >= 3000\n\nObjective:\n- Minimize the total cost:\n  4 * ProteinDrink + 12 * FruitSnack\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProteinDrink = intvar(0, 999999999)  # Number of protein drink servings\nFruitSnack = intvar(0, 999999999)  # Number of fruit snack servings\n\n# Constraints\nm = Model()\n\n# At least 100 grams of vitamin A:\nm += 45 * ProteinDrink + 400 * FruitSnack >= 100\n# At least 500 grams of vitamin C:\nm += 200 * ProteinDrink + 600 * FruitSnack >= 500\n# At least 3000 grams of proteins:\nm += 300 * ProteinDrink + 200 * FruitSnack >= 3000\n\n# Objective\n# Minimize cost (4 dollars per protein drink serving, 12 dollars per fruit snack serving):\nm.minimize(4 * ProteinDrink + 12 * FruitSnack)\n", "entities": [{"start": 58, "end": 66, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986309125742414}, {"start": 67, "end": 70, "word": "100", "entity_group": "LIMIT", "score": 0.9995859144538153}, {"start": 92, "end": 95, "word": "500", "entity_group": "LIMIT", "score": 0.9996426158395082}, {"start": 121, "end": 125, "word": "3000", "entity_group": "LIMIT", "score": 0.9995462920324788}, {"start": 207, "end": 220, "word": "protein drink", "entity_group": "VAR", "score": 0.9996928145811718}, {"start": 224, "end": 235, "word": "fruit snack", "entity_group": "VAR", "score": 0.9999812310692159}, {"start": 242, "end": 255, "word": "protein drink", "entity_group": "VAR", "score": 0.9999853363107961}, {"start": 256, "end": 261, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9975500957494962}, {"start": 264, "end": 265, "word": "4", "entity_group": "PARAM", "score": 0.9997062420043159}, {"start": 291, "end": 293, "word": "45", "entity_group": "PARAM", "score": 0.9997126898126335}, {"start": 315, "end": 318, "word": "200", "entity_group": "PARAM", "score": 0.9996913579536278}, {"start": 344, "end": 347, "word": "300", "entity_group": "PARAM", "score": 0.9996550719690656}, {"start": 368, "end": 379, "word": "Fruit snack", "entity_group": "VAR", "score": 0.9999818076341117}, {"start": 380, "end": 385, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993357849984977}, {"start": 388, "end": 390, "word": "12", "entity_group": "PARAM", "score": 0.9997038713707809}, {"start": 416, "end": 419, "word": "400", "entity_group": "PARAM", "score": 0.9997127082561771}, {"start": 441, "end": 444, "word": "600", "entity_group": "PARAM", "score": 0.9995118449867837}, {"start": 469, "end": 472, "word": "200", "entity_group": "PARAM", "score": 0.9996461972987636}, {"start": 538, "end": 546, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994066230280574}, {"start": 551, "end": 555, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986484284990752}]}
{"doc_id": "-1828241964", "document": "Thunder Wood is a logging company and it cuts three specific trees: Elm, Oak, and Alder. The company has two operations. The north side operation costs $450 to operate per day and produces 5 elm trees, 5 oak trees, and 4 alder trees daily. The south side operation costs $550 to operate per day and produces 6 elm trees, 4 oak trees, and 6 alder trees daily. The logging company must provide a paper pulp with 25 elm trees, 15 oak trees, and 30 alder trees per week. How many days a week should each operation be run in order to minimize cost while meeting the requirements?", "order_mapping": {"north side": 0, "south side": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"north side": "450", "south side": "550"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "25", "terms": {"north side": "5", "south side": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "15", "terms": {"north side": "5", "south side": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "30", "terms": {"north side": "4", "south side": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of days the north side operation is run per week\n- y: Number of days the south side operation is run per week\n\nObjective:\n- The logging company aims to minimize its cost. The north side operation costs $450 per day and the south side operation costs $550 per day. Therefore, the objective function is: Minimize 450x + 550y\n\nConstraints:\n- The company must provide a paper pulp with 25 elm trees per week, leading to the constraint: 5x + 6y >= 25.\n- The company must provide a paper pulp with 15 oak trees per week, leading to the constraint: 5x + 4y >= 15.\n- The company must provide a paper pulp with 30 alder trees per week, leading to the constraint: 4x + 6y >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 450x + 550y\nConstraints:\n5x + 6y >= 25\n5x + 4y >= 15\n4x + 6y >= 30", "canonical": {"objective": [450.0, 550.0], "constraints": [[-5.0, -6.0, -25.0], [-5.0, -4.0, -15.0], [-4.0, -6.0, -30.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of days the north side operation runs per week: NorthSideDays\n- Number of days the south side operation runs per week: SouthSideDays\n\nConstraints:\n- Elm trees requirement per week (25 elm trees needed):\n  5 * NorthSideDays + 6 * SouthSideDays >= 25\n- Oak trees requirement per week (15 oak trees needed):\n  5 * NorthSideDays + 4 * SouthSideDays >= 15\n- Alder trees requirement per week (30 alder trees needed):\n  4 * NorthSideDays + 6 * SouthSideDays >= 30\n\nObjective:\n- Minimize cost (North side operation costs $450 per day, South side operation costs $550 per day):\n  450 * NorthSideDays + 550 * SouthSideDays\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNorthSideDays = intvar(0, 7)  # Number of days the north side operation runs per week\nSouthSideDays = intvar(0, 7)  # Number of days the south side operation runs per week\n\n# Constraints\nm = Model()\n\n# Elm trees requirement per week:\nm += 5 * NorthSideDays + 6 * SouthSideDays >= 25\n# Oak trees requirement per week:\nm += 5 * NorthSideDays + 4 * SouthSideDays >= 15\n# Alder trees requirement per week:\nm += 4 * NorthSideDays + 6 * SouthSideDays >= 30\n\n# Objective\n# Minimize cost (North side operation costs $450 per day, South side operation costs $550 per day):\nm.minimize(450 * NorthSideDays + 550 * SouthSideDays)\n", "entities": [{"start": 130, "end": 140, "word": "north side", "entity_group": "VAR", "score": 0.9999598068951405}, {"start": 151, "end": 156, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9983370043035872}, {"start": 159, "end": 162, "word": "450", "entity_group": "PARAM", "score": 0.9997442714606843}, {"start": 195, "end": 196, "word": "5", "entity_group": "PARAM", "score": 0.9995899937489312}, {"start": 209, "end": 210, "word": "5", "entity_group": "PARAM", "score": 0.9994657096153371}, {"start": 227, "end": 228, "word": "4", "entity_group": "PARAM", "score": 0.9982486616640076}, {"start": 253, "end": 263, "word": "south side", "entity_group": "VAR", "score": 0.999945990350524}, {"start": 274, "end": 279, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991074278021835}, {"start": 282, "end": 285, "word": "550", "entity_group": "PARAM", "score": 0.9997442713944791}, {"start": 318, "end": 319, "word": "6", "entity_group": "PARAM", "score": 0.999589993748932}, {"start": 332, "end": 333, "word": "4", "entity_group": "PARAM", "score": 0.9994659024001433}, {"start": 350, "end": 351, "word": "6", "entity_group": "PARAM", "score": 0.9987254548460108}, {"start": 397, "end": 404, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9958854718900292}, {"start": 423, "end": 425, "word": "25", "entity_group": "LIMIT", "score": 0.998691301849234}, {"start": 438, "end": 440, "word": "15", "entity_group": "LIMIT", "score": 0.9994656466227778}, {"start": 457, "end": 459, "word": "30", "entity_group": "LIMIT", "score": 0.9992080390085983}, {"start": 545, "end": 553, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9735960914807732}, {"start": 554, "end": 558, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9922242859454887}]}
{"doc_id": "-1790324203", "document": "A small grocery weighs and packages their bulk foods. Each container of nuts takes 10 minutes of weighing and 5 minutes of packaging. Each container of candy takes 5 minutes of weighing and 8 minutes of packaging. The grocery has available 1000 minutes for weighing and 1500 minutes for packaging. If the profit per container of nuts is $5 and the profit per container of candy is $3, how many of each should the grocery prepare to maximize profit?", "order_mapping": {"nuts": 0, "candy": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"candy": "3", "nuts": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"nuts": "10", "candy": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"nuts": "5", "candy": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of containers of nuts\n- y: Number of containers of candy\n\nObjective:\n- The grocery aims to maximize its profit. The profit per container of nuts is $5 and the profit per container of candy is $3. Therefore, the objective function is: Maximize 5x + 3y\n\nConstraints:\n- The grocery has 1000 minutes available for weighing, and each container of nuts takes 10 minutes of weighing and each container of candy takes 5 minutes of weighing. This leads to the constraint: 10x + 5y <= 1000.\n- The grocery has 1500 minutes available for packaging, and each container of nuts takes 5 minutes of packaging and each container of candy takes 8 minutes of packaging. This results in the constraint: 5x + 8y <= 1500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5x + 3y\nConstraints:\n10x + 5y <= 1000\n5x + 8y <= 1500", "canonical": {"objective": [-5.0, -3.0], "constraints": [[10.0, 5.0, 1000.0], [5.0, 8.0, 1500.0]]}, "solution": {"x": 10, "y": 180}, "pseudo_model": "\nDecision Variables:\n- Number of containers of nuts prepared: Nuts\n- Number of containers of candy prepared: Candy\n\nConstraints:\n- Total minutes for weighing should not exceed 1000 (10 minutes per container of nuts, 5 minutes per container of candy):\n  10 * Nuts + 5 * Candy <= 1000\n- Total minutes for packaging should not exceed 1500 (5 minutes per container of nuts, 8 minutes per container of candy):\n  5 * Nuts + 8 * Candy <= 1500\n\nObjective:\n- Maximize profit (5 dollars per container of nuts, 3 dollars per container of candy):\n  5 * Nuts + 3 * Candy\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNuts = intvar(0, 999999999)  # Number of containers of nuts prepared\nCandy = intvar(0, 999999999)  # Number of containers of candy prepared\n\n# Constraints\nm = Model()\n\n# Total minutes for weighing should not exceed 1000:\nm += 10 * Nuts + 5 * Candy <= 1000\n# Total minutes for packaging should not exceed 1500:\nm += 5 * Nuts + 8 * Candy <= 1500\n\n# Objective\n# Maximize profit (5 dollars per container of nuts, 3 dollars per container of candy):\nm.maximize(5 * Nuts + 3 * Candy)\n", "entities": [{"start": 73, "end": 77, "word": "nuts", "entity_group": "VAR", "score": 0.9992224633804019}, {"start": 84, "end": 86, "word": "10", "entity_group": "PARAM", "score": 0.9996843198560698}, {"start": 111, "end": 112, "word": "5", "entity_group": "PARAM", "score": 0.9997134529770823}, {"start": 154, "end": 159, "word": "candy", "entity_group": "VAR", "score": 0.9991798558416816}, {"start": 166, "end": 167, "word": "5", "entity_group": "PARAM", "score": 0.9996812093095045}, {"start": 192, "end": 193, "word": "8", "entity_group": "PARAM", "score": 0.9996278448905372}, {"start": 233, "end": 242, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991833963099273}, {"start": 243, "end": 247, "word": "1000", "entity_group": "LIMIT", "score": 0.9994100928672862}, {"start": 273, "end": 277, "word": "1500", "entity_group": "LIMIT", "score": 0.9995879117479226}, {"start": 309, "end": 315, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999301851583207}, {"start": 333, "end": 337, "word": "nuts", "entity_group": "VAR", "score": 0.999403590708423}, {"start": 343, "end": 344, "word": "5", "entity_group": "PARAM", "score": 0.9992124426233756}, {"start": 353, "end": 359, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355270714316}, {"start": 377, "end": 382, "word": "candy", "entity_group": "VAR", "score": 0.9988417586848563}, {"start": 388, "end": 389, "word": "3", "entity_group": "PARAM", "score": 0.999365694220046}, {"start": 439, "end": 447, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726915}, {"start": 448, "end": 454, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "1421633003", "document": "Matthew has $2000000 to invest in the iron and steel, tobacco, healthcare, and food industries. Matthew is a smart investor and he knows the amount invested in the food industry cannot exceed the amount invested in the iron and steel industry. Also the amount invested in the tobacco industry cannot exceed the amount invested in the healthcare industry. Finally at most 20% of the total amount invested can be in the food industry. The return on investment in each of the industries is as follows: iron and steel, 9.5%; tobacco, 12.4%; healthcare, 5.6%; food, 4.8%. Matthew wants to maximize his return.", "order_mapping": {"iron and steel": 0, "tobacco": 1, "healthcare": 2, "food industries": 3, "food industry": 3, "iron and steel industry": 0, "tobacco industry": 1, "healthcare industry": 2, "food": 3}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"iron and steel": "9.5%", "tobacco": "12.4%", "healthcare": "5.6%", "food": "4.8%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "2000000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "food industry", "direction": "cannot exceed", "y_var": "iron and steel industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "tobacco industry", "direction": "cannot exceed", "y_var": "healthcare industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "food industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in iron and steel industry\n- y: Dollars invested in tobacco industry\n- z: Dollars invested in healthcare industry\n- w: Dollars invested in food industry\n\nObjective:\n- Matthew wants to maximize his return on investment. The return on investment in each of the industries is as follows: iron and steel, 9.5%; tobacco, 12.4%; healthcare, 5.6%; food, 4.8%. Therefore, the objective function is: Maximize 0.095x + 0.124y + 0.056z + 0.048w\n\nConstraints:\n- Matthew has $2000000 to invest, so the constraint is: x + y + z + w <= 2000000.\n- The amount invested in the food industry cannot exceed the amount invested in the iron and steel industry, leading to the constraint: w <= x.\n- The amount invested in the tobacco industry cannot exceed the amount invested in the healthcare industry, resulting in the constraint: y <= z.\n- At most 20% of the total amount invested can be in the food industry, leading to the constraint: w <= 0.20(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.095x + 0.124y + 0.056z + 0.048w\nConstraints:\nx + y + z + w <= 2000000\nw <= x\ny <= z\nw <= 0.20(x + y + z + w)", "canonical": {"objective": [-0.095, -0.124, -0.056, -0.048], "constraints": [[1.0, 1.0, 1.0, 1.0, 2000000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.2, -0.2, -0.2, 0.8, 0.0]]}, "solution": {"x": 2000000, "y": 0, "z": 0, "w": 0}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the iron and steel industry: IronSteel\n- Amount invested in the tobacco industry: Tobacco\n- Amount invested in the healthcare industry: Healthcare\n- Amount invested in the food industry: Food\n\nConstraints:\n- Total amount invested should not exceed $2000000:\n  IronSteel + Tobacco + Healthcare + Food <= 2000000\n- The amount invested in the food industry cannot exceed the amount invested in the iron and steel industry:\n  Food <= IronSteel\n- The amount invested in the tobacco industry cannot exceed the amount invested in the healthcare industry:\n  Tobacco <= Healthcare\n- At most 20% of the total amount invested can be in the food industry:\n  Food <= 0.20 * (IronSteel + Tobacco + Healthcare + Food)\n\nObjective:\n- Maximize return (9.5% for iron and steel, 12.4% for tobacco, 5.6% for healthcare, 4.8% for food):\n  0.095 * IronSteel + 0.124 * Tobacco + 0.056 * Healthcare + 0.048 * Food\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIronSteel = intvar(0, 2000000)  # Amount invested in the iron and steel industry\nTobacco = intvar(0, 2000000)  # Amount invested in the tobacco industry\nHealthcare = intvar(0, 2000000)  # Amount invested in the healthcare industry\nFood = intvar(0, 2000000)  # Amount invested in the food industry\n\n# Constraints\nm = Model()\n\n# Total amount invested should not exceed $2000000:\nm += IronSteel + Tobacco + Healthcare + Food <= 2000000\n# The amount invested in the food industry cannot exceed the amount invested in the iron and steel industry:\nm += Food <= IronSteel\n# The amount invested in the tobacco industry cannot exceed the amount invested in the healthcare industry:\nm += Tobacco <= Healthcare\n# At most 20% of the total amount invested can be in the food industry:\nm += Food <= 0.20 * (IronSteel + Tobacco + Healthcare + Food)\n\n# Objective\n# Maximize return (9.5% for iron and steel, 12.4% for tobacco, 5.6% for healthcare, 4.8% for food):\nm.maximize(0.095 * IronSteel + 0.124 * Tobacco + 0.056 * Healthcare + 0.048 * Food)\n", "entities": [{"start": 8, "end": 11, "word": "has", "entity_group": "CONST_DIR", "score": 0.9912493186750571}, {"start": 14, "end": 21, "word": "2000000", "entity_group": "LIMIT", "score": 0.9994690687235163}, {"start": 39, "end": 53, "word": "iron and steel", "entity_group": "VAR", "score": 0.9993240840588055}, {"start": 56, "end": 63, "word": "tobacco", "entity_group": "VAR", "score": 0.9997958283917615}, {"start": 66, "end": 76, "word": "healthcare", "entity_group": "VAR", "score": 0.9997930002745048}, {"start": 83, "end": 98, "word": "food industries", "entity_group": "VAR", "score": 0.9999883493648138}, {"start": 169, "end": 182, "word": "food industry", "entity_group": "VAR", "score": 0.9999748858946244}, {"start": 183, "end": 197, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9886719458667516}, {"start": 225, "end": 248, "word": "iron and steel industry", "entity_group": "VAR", "score": 0.9983350530996616}, {"start": 283, "end": 299, "word": "tobacco industry", "entity_group": "VAR", "score": 0.9999107478806204}, {"start": 300, "end": 314, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9864750242491835}, {"start": 342, "end": 361, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999145163479518}, {"start": 372, "end": 379, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991348085496137}, {"start": 380, "end": 384, "word": "20 %", "entity_group": "LIMIT", "score": 0.9701892098379007}, {"start": 428, "end": 441, "word": "food industry", "entity_group": "VAR", "score": 0.9999571639841924}, {"start": 448, "end": 454, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9969316363087521}, {"start": 511, "end": 525, "word": "iron and steel", "entity_group": "VAR", "score": 0.99652665375411}, {"start": 528, "end": 533, "word": "9.5 %", "entity_group": "PARAM", "score": 0.9911922059733691}, {"start": 536, "end": 543, "word": "tobacco", "entity_group": "VAR", "score": 0.9986461338381402}, {"start": 546, "end": 552, "word": "12.4 %", "entity_group": "PARAM", "score": 0.9912813056688227}, {"start": 555, "end": 565, "word": "healthcare", "entity_group": "VAR", "score": 0.9991225971705935}, {"start": 568, "end": 573, "word": "5.6 %", "entity_group": "PARAM", "score": 0.9927998137102378}, {"start": 576, "end": 580, "word": "food", "entity_group": "VAR", "score": 0.9971300705872452}, {"start": 583, "end": 588, "word": "4.8 %", "entity_group": "PARAM", "score": 0.9885484293598403}, {"start": 608, "end": 616, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9962745383202718}, {"start": 621, "end": 627, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9977267773454243}]}
{"doc_id": "2040768743", "document": "A small tea shop wants to sell cups of green tea and black tea. It takes 3 minutes to make a cup of green tea and 5 minutes to make a cup of black tea. The shop owner only has 560 minutes a week to make drinks (green tea and black tea). In addition, the owner only has enough product to make 150 total cups per week. She makes a profit of $2 on each cup of green tea and a profit of $3 on each cup of black tea. How many cups of green tea and black tea should the shop owner make each week to maximize profit, assuming she sells all her cups?", "order_mapping": {"green tea": 0, "black tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"green tea": "2", "black tea": "3"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "560", "terms": {"green tea": "3", "black tea": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "total", "limit": "150", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Cups of green tea to be made per week\n- y: Cups of black tea to be made per week\n\nObjective:\n- The shop owner aims to maximize her profit. She makes a profit of $2 on each cup of green tea and a profit of $3 on each cup of black tea. Therefore, the objective function is: Maximize 2x + 3y\n\nConstraints:\n- The shop owner has 560 minutes a week to make drinks, and it takes 3 minutes to make a cup of green tea and 5 minutes to make a cup of black tea. This leads to the constraint: 3x + 5y <= 560.\n- The shop owner only has enough product to make 150 total cups per week, resulting in the constraint: x + y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + 3y\nConstraints:\n3x + 5y <= 560\nx + y <= 150", "canonical": {"objective": [-2.0, -3.0], "constraints": [[3.0, 5.0, 560.0], [1.0, 1.0, 150.0]]}, "solution": {"x": 95, "y": 55}, "pseudo_model": "\nDecision Variables:\n- Number of cups of green tea made per week: GreenTea\n- Number of cups of black tea made per week: BlackTea\n\nConstraints:\n- The total time to make drinks should not exceed 560 minutes per week (3 minutes for green tea, 5 minutes for black tea):\n  3 * GreenTea + 5 * BlackTea <= 560\n- The total number of cups made should not exceed 150 per week:\n  GreenTea + BlackTea <= 150\n\nObjective:\n- Maximize profit ($2 profit per cup of green tea and $3 profit per cup of black tea):\n  2 * GreenTea + 3 * BlackTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGreenTea = intvar(0, 999999999)  # Number of cups of green tea made per week\nBlackTea = intvar(0, 999999999)  # Number of cups of black tea made per week\n\n# Constraints\nm = Model()\n\n# The total time to make drinks should not exceed 560 minutes per week:\n# (3 minutes for a cup of green tea and 5 minutes for a cup of black tea)\nm += 3 * GreenTea + 5 * BlackTea <= 560\n\n# The total number of cups made should not exceed 150 per week:\nm += GreenTea + BlackTea <= 150\n\n# Objective\n# Maximize profit ($2 profit per cup of green tea and $3 profit per cup of black tea):\nm.maximize(2 * GreenTea + 3 * BlackTea)\n", "entities": [{"start": 39, "end": 48, "word": "green tea", "entity_group": "VAR", "score": 0.9998892221068432}, {"start": 53, "end": 62, "word": "black tea", "entity_group": "VAR", "score": 0.9999242584055291}, {"start": 74, "end": 75, "word": "3", "entity_group": "PARAM", "score": 0.9997042730131952}, {"start": 101, "end": 110, "word": "green tea", "entity_group": "VAR", "score": 0.9995305648465811}, {"start": 115, "end": 116, "word": "5", "entity_group": "PARAM", "score": 0.9996210791177064}, {"start": 142, "end": 151, "word": "black tea", "entity_group": "VAR", "score": 0.9999130483931264}, {"start": 169, "end": 173, "word": "only", "entity_group": "CONST_DIR", "score": 0.9972731008705878}, {"start": 178, "end": 181, "word": "560", "entity_group": "LIMIT", "score": 0.999719304404741}, {"start": 214, "end": 223, "word": "green tea", "entity_group": "VAR", "score": 0.9998995513929243}, {"start": 228, "end": 237, "word": "black tea", "entity_group": "VAR", "score": 0.9999520860286515}, {"start": 298, "end": 301, "word": "150", "entity_group": "LIMIT", "score": 0.9989733069196657}, {"start": 302, "end": 307, "word": "total", "entity_group": "CONST_DIR", "score": 0.9955507217847037}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998175159090819}, {"start": 348, "end": 349, "word": "2", "entity_group": "PARAM", "score": 0.9994562063842851}, {"start": 365, "end": 374, "word": "green tea", "entity_group": "VAR", "score": 0.9999216292290535}, {"start": 381, "end": 387, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999767085141886}, {"start": 393, "end": 394, "word": "3", "entity_group": "PARAM", "score": 0.9995914958055171}, {"start": 410, "end": 419, "word": "black tea", "entity_group": "VAR", "score": 0.9999319508557519}, {"start": 439, "end": 448, "word": "green tea", "entity_group": "VAR", "score": 0.9999132950930806}, {"start": 453, "end": 462, "word": "black tea", "entity_group": "VAR", "score": 0.9999606351988664}, {"start": 503, "end": 511, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9870875773435198}, {"start": 512, "end": 518, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997134136354083}]}
{"doc_id": "-1096202168", "document": "A vacuum repair company repairs home vacuums and shop vacuums. Each shop vacuum requires 1 hour of disassembly and 2 hours of repair. Each home vacuum requires 0.5 hours of disassembly and 1 hour of repair. The company has available 300 hours for disassembly and 400 hours for repair. If the profit per home vacuum repaired is $20 and the profit per shop vacuum repaired is $35, how many of each should the company repair to maximize profit?", "order_mapping": {"home vacuums": 0, "shop vacuums": 1, "shop vacuum": 1, "home vacuum": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"home vacuum": "20", "shop vacuum": "35"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"shop vacuum": "1", "home vacuum": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"shop vacuum": "2", "home vacuum": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of home vacuums repaired\n- y: Number of shop vacuums repaired\n\nObjective:\n- The company aims to maximize its profit. The profit per home vacuum repaired is $20 and the profit per shop vacuum repaired is $35. Therefore, the objective function is: Maximize 20x + 35y\n\nConstraints:\n- The company has 300 hours available for disassembly, and each home vacuum requires 0.5 hours of disassembly and each shop vacuum requires 1 hour of disassembly. This leads to the constraint: 0.5x + y <= 300.\n- The company has 400 hours available for repair, and each home vacuum requires 1 hour of repair and each shop vacuum requires 2 hours of repair. This results in the constraint: x + 2y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 20x + 35y\nConstraints:\n0.5x + y <= 300\nx + 2y <= 400", "canonical": {"objective": [-20.0, -35.0], "constraints": [[0.5, 1.0, 300.0], [1.0, 2.0, 400.0]]}, "solution": {"x": 400, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of home vacuums repaired: HomeVacuums\n- Number of shop vacuums repaired: ShopVacuums\n\nConstraints:\n- Disassembly time should not exceed 300 hours:\n  1 * ShopVacuums + 0.5 * HomeVacuums <= 300\n- Repair time should not exceed 400 hours:\n  2 * ShopVacuums + 1 * HomeVacuums <= 400\n\nObjective:\n- Maximize profit ($35 per shop vacuum, $20 per home vacuum):\n  35 * ShopVacuums + 20 * HomeVacuums\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHomeVacuums = intvar(0, 999999999)  # Number of home vacuums repaired\nShopVacuums = intvar(0, 999999999)  # Number of shop vacuums repaired\n\n# Constraints\nm = Model()\n\n# Disassembly time constraints (300 hours available):\n# Each shop vacuum requires 1 hour of disassembly, each home vacuum requires 0.5 hours\nm += 1 * ShopVacuums + 0.5 * HomeVacuums <= 300\n\n# Repair time constraints (400 hours available):\n# Each shop vacuum requires 2 hours of repair, each home vacuum requires 1 hour\nm += 2 * ShopVacuums + 1 * HomeVacuums <= 400\n\n# Objective\n# Maximize profit ($35 per shop vacuum, $20 per home vacuum):\nm.maximize(35 * ShopVacuums + 20 * HomeVacuums)\n", "entities": [{"start": 32, "end": 44, "word": "home vacuums", "entity_group": "VAR", "score": 0.9999738306026117}, {"start": 49, "end": 61, "word": "shop vacuums", "entity_group": "VAR", "score": 0.9999877158454014}, {"start": 69, "end": 80, "word": "shop vacuum", "entity_group": "VAR", "score": 0.999982727258854}, {"start": 90, "end": 91, "word": "1", "entity_group": "PARAM", "score": 0.9996233652185699}, {"start": 116, "end": 117, "word": "2", "entity_group": "PARAM", "score": 0.9997044432609382}, {"start": 141, "end": 152, "word": "home vacuum", "entity_group": "VAR", "score": 0.9999812215115791}, {"start": 162, "end": 165, "word": "0.5", "entity_group": "PARAM", "score": 0.9997305230080646}, {"start": 191, "end": 192, "word": "1", "entity_group": "PARAM", "score": 0.999386728860661}, {"start": 226, "end": 235, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991522133701456}, {"start": 236, "end": 239, "word": "300", "entity_group": "LIMIT", "score": 0.9994225999012274}, {"start": 266, "end": 269, "word": "400", "entity_group": "LIMIT", "score": 0.9996515132364037}, {"start": 296, "end": 302, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999925596773643}, {"start": 307, "end": 318, "word": "home vacuum", "entity_group": "VAR", "score": 0.9999319317713183}, {"start": 333, "end": 335, "word": "20", "entity_group": "PARAM", "score": 0.9991771842563391}, {"start": 344, "end": 350, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999321931954306}, {"start": 355, "end": 366, "word": "shop vacuum", "entity_group": "VAR", "score": 0.9999604719170627}, {"start": 381, "end": 383, "word": "35", "entity_group": "PARAM", "score": 0.9994149672095382}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999586653472691}, {"start": 441, "end": 447, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "1009345361", "document": "A film company is deciding where to promote their new movie. Some options include Banana Livestream, Durian TV, and Orange Premium Video advertisements. The cost for each option and the number of viewers they each attract are given. On Banana Livestream, each ad costs $1500 and attracts 300,000 viewers. On Durian TV, each ad costs $300 and attracts 10,000 viewers. On Orange Premium Video, each ad costs $500 and attracts 12,000 viewers. Durian TV limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on Orange Premium Video. And at least 5% should occur on Banana Livestream. The weekly advertising budget is $20000. How many advertisements should be run in each of the three types of media to maximize the total audience?", "order_mapping": {"Banana Livestream": 0, "Durian TV": 1, "Orange Premium Video": 2, "Orange Premium": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "audience", "terms": {"Banana Livestream": "300,000", "Durian TV": "10,000", "Orange Premium Video": "12,000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "20000", "terms": {"Banana Livestream": "1500", "Orange Premium Video": "500", "Durian TV": "300"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "limits the number", "limit": "fifteen", "var": "Durian TV", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "Orange Premium", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "5%", "var": "Banana Livestream", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of advertisements on Banana Livestream\n- y: Number of advertisements on Durian TV\n- z: Number of advertisements on Orange Premium Video\n\nObjective:\n- The film company aims to maximize the total audience. The number of viewers attracted by each type of advertisement is given: Banana Livestream - 300,000 viewers per ad, Durian TV - 10,000 viewers per ad, Orange Premium Video - 12,000 viewers per ad. Therefore, the objective function is: Maximize 300000x + 10000y + 12000z\n\nConstraints:\n- The weekly advertising budget is $20,000, leading to the constraint: 1500x + 300y + 500z <= 20000.\n- Durian TV limits the number of advertisements from a single company to fifteen, resulting in the constraint: y <= 15.\n- At most a third of the total number of advertisements should occur on Orange Premium Video, leading to the constraint: z <= (x + y + z)/3.\n- At least 5% of the total number of advertisements should occur on Banana Livestream, resulting in the constraint: x >= 0.05(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300000x + 10000y + 12000z\nConstraints:\n1500x + 300y + 500z <= 20000\ny <= 15\nz <= (x + y + z)/3\nx >= 0.05(x + y + z)", "canonical": {"objective": [-300000.0, -10000.0, -12000.0], "constraints": [[1500.0, 300.0, 500.0, 20000.0], [0.0, 1.0, 0.0, 15.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.95, 0.05, 0.05, 0.0]]}, "solution": {"x": 13, "y": 0, "z": 1}, "pseudo_model": "\nDecision Variables:\n- Number of ads on Banana Livestream: BananaAds\n- Number of ads on Durian TV: DurianAds\n- Number of ads on Orange Premium Video: OrangeAds\n\nConstraints:\n- Weekly advertising budget should not exceed $20000:\n  1500 * BananaAds + 300 * DurianAds + 500 * OrangeAds <= 20000\n- Durian TV limits the number of advertisements to fifteen:\n  DurianAds <= 15\n- At most a third of the total number of advertisements should occur on Orange Premium Video:\n  OrangeAds <= 1/3 * (BananaAds + DurianAds + OrangeAds)\n- At least 5% of the advertisements should occur on Banana Livestream:\n  BananaAds >= 0.05 * (BananaAds + DurianAds + OrangeAds)\n\nObjective:\n- Maximize total audience (300,000 viewers per Banana ad, 10,000 viewers per Durian ad, 12,000 viewers per Orange ad):\n  300000 * BananaAds + 10000 * DurianAds + 12000 * OrangeAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBananaAds = intvar(0, 999999999)  # Number of ads on Banana Livestream\nDurianAds = intvar(0, 999999999)  # Number of ads on Durian TV\nOrangeAds = intvar(0, 999999999)  # Number of ads on Orange Premium Video\n\n# Constraints\nm = Model()\n\n# Weekly advertising budget constraint ($20000):\nm += 1500 * BananaAds + 300 * DurianAds + 500 * OrangeAds <= 20000\n# Durian TV limits the number of advertisements to fifteen:\nm += DurianAds <= 15\n# At most a third of the total number of advertisements should occur on Orange Premium Video:\nm += OrangeAds <= (1/3) * (BananaAds + DurianAds + OrangeAds)\n# At least 5% of the advertisements should occur on Banana Livestream:\nm += BananaAds >= 0.05 * (BananaAds + DurianAds + OrangeAds)\n\n# Objective\n# Maximize total audience (300,000 viewers per Banana ad, 10,000 viewers per Durian ad, 12,000 viewers per Orange ad):\nm.maximize(300000 * BananaAds + 10000 * DurianAds + 12000 * OrangeAds)\n", "entities": [{"start": 83, "end": 100, "word": "Banana Livestream", "entity_group": "VAR", "score": 0.9999844340131508}, {"start": 103, "end": 112, "word": "Durian TV", "entity_group": "VAR", "score": 0.9999807034060915}, {"start": 119, "end": 139, "word": "Orange Premium Video", "entity_group": "VAR", "score": 0.9984866985295093}, {"start": 200, "end": 207, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9913388556609328}, {"start": 241, "end": 258, "word": "Banana Livestream", "entity_group": "VAR", "score": 0.9999732793801792}, {"start": 277, "end": 281, "word": "1500", "entity_group": "PARAM", "score": 0.9994431465242927}, {"start": 295, "end": 302, "word": "300,000", "entity_group": "PARAM", "score": 0.9996777144376329}, {"start": 303, "end": 310, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.988205559789156}, {"start": 316, "end": 325, "word": "Durian TV", "entity_group": "VAR", "score": 0.9999730567960315}, {"start": 344, "end": 347, "word": "300", "entity_group": "PARAM", "score": 0.999443145902032}, {"start": 361, "end": 367, "word": "10,000", "entity_group": "PARAM", "score": 0.9997225030755282}, {"start": 368, "end": 375, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9900065645430588}, {"start": 381, "end": 401, "word": "Orange Premium Video", "entity_group": "VAR", "score": 0.9995235887998841}, {"start": 420, "end": 423, "word": "500", "entity_group": "PARAM", "score": 0.9997255642294802}, {"start": 437, "end": 443, "word": "12,000", "entity_group": "PARAM", "score": 0.9996802034868131}, {"start": 444, "end": 451, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9938433028559687}, {"start": 454, "end": 463, "word": "Durian TV", "entity_group": "VAR", "score": 0.9999742271838958}, {"start": 464, "end": 481, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9773673154789358}, {"start": 525, "end": 532, "word": "fifteen", "entity_group": "LIMIT", "score": 0.9993865586591578}, {"start": 615, "end": 622, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9973567058102638}, {"start": 625, "end": 630, "word": "third", "entity_group": "LIMIT", "score": 0.9915195173870074}, {"start": 685, "end": 699, "word": "Orange Premium", "entity_group": "VAR", "score": 0.9999952092485239}, {"start": 712, "end": 720, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990498364006193}, {"start": 721, "end": 724, "word": "5 %", "entity_group": "LIMIT", "score": 0.9475115841246706}, {"start": 741, "end": 758, "word": "Banana Livestream", "entity_group": "VAR", "score": 0.9999707993831373}, {"start": 784, "end": 790, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9905769250433486}, {"start": 796, "end": 801, "word": "20000", "entity_group": "LIMIT", "score": 0.9996290763183864}, {"start": 881, "end": 889, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991923340924509}, {"start": 900, "end": 908, "word": "audience", "entity_group": "OBJ_NAME", "score": 0.9987724190172591}]}
{"doc_id": "-361325577", "document": "An electronics company produces entry-level devices and premium devices. The company makes a $300 profit for each entry-level device sold and a $200 profit for each premium device sold. Note that the daily demand for entry-level devices is at most 20 and the daily demand for premium devices is at most 15. In addition, the company can only sell at most 30 devices total per day. How many devices of each type should the company sell to maximize profit?", "order_mapping": {"entry-level devices": 0, "premium devices": 1, "entry-level device": 0, "premium device": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"entry-level device": "300", "premium device": "200"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "20", "var": "entry-level devices", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "15", "var": "premium devices", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of entry-level devices sold\n- y: Number of premium devices sold\n\nObjective:\n- The company aims to maximize its profit. The company makes a $300 profit for each entry-level device sold and a $200 profit for each premium device sold. Therefore, the objective function is: Maximize 300x + 200y\n\nConstraints:\n- The daily demand for entry-level devices is at most 20, leading to the constraint: x <= 20.\n- The daily demand for premium devices is at most 15, leading to the constraint: y <= 15.\n- The company can only sell at most 30 devices total per day, resulting in the constraint: x + y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 200y\nConstraints:\nx <= 20\ny <= 15\nx + y <= 30", "canonical": {"objective": [-300.0, -200.0], "constraints": [[1.0, 0.0, 20.0], [0.0, 1.0, 15.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 20, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of entry-level devices sold per day: EntryLevelDevices\n- Number of premium devices sold per day: PremiumDevices\n\nConstraints:\n- At most 20 entry-level devices can be sold per day:\n  EntryLevelDevices <= 20\n- At most 15 premium devices can be sold per day:\n  PremiumDevices <= 15\n- Total devices sold per day should not exceed 30:\n  EntryLevelDevices + PremiumDevices <= 30\n\nObjective:\n- Maximize profit ($300 profit per entry-level device, $200 profit per premium device):\n  300 * EntryLevelDevices + 200 * PremiumDevices\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEntryLevelDevices = intvar(0, 999999999)  # Number of entry-level devices sold per day\nPremiumDevices = intvar(0, 999999999)  # Number of premium devices sold per day\n\n# Constraints\nm = Model()\n\n# Daily demand constraints:\nm += EntryLevelDevices <= 20  # At most 20 entry-level devices can be sold per day\nm += PremiumDevices <= 15  # At most 15 premium devices can be sold per day\n\n# Total devices sold per day should not exceed 30:\nm += EntryLevelDevices + PremiumDevices <= 30\n\n# Objective\n# Maximize profit ($300 profit per entry-level device, $200 profit per premium device):\nm.maximize(300 * EntryLevelDevices + 200 * PremiumDevices)\n", "entities": [{"start": 32, "end": 53, "word": "entry - level devices", "entity_group": "VAR", "score": 0.9984279357299539}, {"start": 58, "end": 73, "word": "premium devices", "entity_group": "VAR", "score": 0.9999872066704715}, {"start": 98, "end": 101, "word": "300", "entity_group": "PARAM", "score": 0.9990091091206573}, {"start": 102, "end": 108, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9988421762861478}, {"start": 118, "end": 138, "word": "entry - level device", "entity_group": "VAR", "score": 0.9994852393228285}, {"start": 152, "end": 155, "word": "200", "entity_group": "PARAM", "score": 0.9990065807189942}, {"start": 156, "end": 162, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994598732146504}, {"start": 172, "end": 186, "word": "premium device", "entity_group": "VAR", "score": 0.999944893794669}, {"start": 225, "end": 246, "word": "entry - level devices", "entity_group": "VAR", "score": 0.9979577850265925}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976696286096413}, {"start": 258, "end": 260, "word": "20", "entity_group": "LIMIT", "score": 0.9994418409948925}, {"start": 286, "end": 301, "word": "premium devices", "entity_group": "VAR", "score": 0.9999343183256695}, {"start": 305, "end": 312, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971464339185381}, {"start": 313, "end": 315, "word": "15", "entity_group": "LIMIT", "score": 0.999691532307714}, {"start": 358, "end": 365, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986263940542891}, {"start": 366, "end": 368, "word": "30", "entity_group": "LIMIT", "score": 0.9997669168480033}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994859155828364}, {"start": 459, "end": 465, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277417441317}]}
{"doc_id": "-855803158", "document": "A chef mixes two types of seasoning to ensure the new mixture contains a minimum of 5 units of pepper and 6 units of salt. Seasoning A contains 2 units of pepper and 1 unit of salt per kg. Seasoning B contains 1 unit of pepper and 4 units of salt per kg. If it costs $1.50 per kg of seasoning A and $3 per kg of seasoning B, how many kg of each should the chef buy to minimize her costs?", "order_mapping": {"Seasoning A": 0, "Seasoning B": 1, "seasoning A": 0, "seasoning B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"seasoning A": "1.50", "seasoning B": "3"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "5", "terms": {"Seasoning A": "2", "Seasoning B": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "6", "terms": {"Seasoning A": "1", "Seasoning B": "4"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of seasoning A to be bought\n- y: kg of seasoning B to be bought\n\nObjective:\n- The chef wants to minimize her costs. Given that it costs $1.50 per kg of seasoning A and $3 per kg of seasoning B, the objective function is: Minimize 1.50x + 3y\n\nConstraints:\n- The new mixture must contain a minimum of 5 units of pepper and 6 units of salt. This leads to the constraints: 2x + y >= 5 and x + 4y >= 6.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1.50x + 3y\nConstraints:\n2x + y >= 5\nx + 4y >= 6", "canonical": {"objective": [1.5, 3.0], "constraints": [[-2.0, -1.0, -5.0], [-1.0, -4.0, -6.0]]}, "solution": {"x": 2, "y": 1}, "pseudo_model": "\nDecision Variables:\n- kg of seasoning A bought: SeasoningA\n- kg of seasoning B bought: SeasoningB\n\nConstraints:\n- The new mixture must contain a minimum of 5 units of pepper:\n  2 * SeasoningA + 1 * SeasoningB >= 5\n- The new mixture must contain a minimum of 6 units of salt:\n  1 * SeasoningA + 4 * SeasoningB >= 6\n\nObjective:\n- Minimize costs ($1.50 per kg of seasoning A and $3 per kg of seasoning B):\n  1.50 * SeasoningA + 3 * SeasoningB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSeasoningA = intvar(0, 999999999)  # kg of seasoning A\nSeasoningB = intvar(0, 999999999)  # kg of seasoning B\n\n# Constraints\nm = Model()\n\n# The new mixture must contain a minimum of 5 units of pepper:\nm += 2 * SeasoningA + 1 * SeasoningB >= 5\n# The new mixture must contain a minimum of 6 units of salt:\nm += 1 * SeasoningA + 4 * SeasoningB >= 6\n\n# Objective\n# Minimize costs ($1.50 per kg of seasoning A and $3 per kg of seasoning B):\nm.minimize(1.50 * SeasoningA + 3 * SeasoningB)\n", "entities": [{"start": 73, "end": 80, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9981738601087304}, {"start": 84, "end": 85, "word": "5", "entity_group": "LIMIT", "score": 0.9997364340087961}, {"start": 106, "end": 107, "word": "6", "entity_group": "LIMIT", "score": 0.9997138944423205}, {"start": 124, "end": 135, "word": "Seasoning A", "entity_group": "VAR", "score": 0.9999112501672868}, {"start": 145, "end": 146, "word": "2", "entity_group": "PARAM", "score": 0.9996314895261762}, {"start": 167, "end": 168, "word": "1", "entity_group": "PARAM", "score": 0.9995500846159447}, {"start": 191, "end": 202, "word": "Seasoning B", "entity_group": "VAR", "score": 0.9999256187329385}, {"start": 212, "end": 213, "word": "1", "entity_group": "PARAM", "score": 0.9994916253835007}, {"start": 233, "end": 234, "word": "4", "entity_group": "PARAM", "score": 0.9996730201721221}, {"start": 264, "end": 269, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993848432866216}, {"start": 272, "end": 276, "word": "1.50", "entity_group": "PARAM", "score": 0.9996390782555296}, {"start": 287, "end": 298, "word": "seasoning A", "entity_group": "VAR", "score": 0.9992556395970852}, {"start": 305, "end": 306, "word": "3", "entity_group": "PARAM", "score": 0.9997328184705696}, {"start": 317, "end": 328, "word": "seasoning B", "entity_group": "VAR", "score": 0.9997967388289368}, {"start": 374, "end": 382, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993099230962745}, {"start": 387, "end": 392, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9979506423219803}]}
{"doc_id": "-749201814", "document": "An artisan kitchen company sells handmade wooden plates and forks. Each plate takes 30 minutes of woodworker time and each fork takes 20 minutes of woodworker time. The store has 5000 minutes of woodworker time available. Since forks are most popular, the store must make at least twice the number of forks as plates. If the profit per plate is $10 and the profit per fork is $8, how many of each should be made to maximize profit?", "order_mapping": {"plates": 0, "forks": 1, "plate": 0, "fork": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fork": "8", "plate": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"plate": "30", "fork": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "forks", "direction": "at least", "param": "twice", "y_var": "plates", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of plates\n- y: Number of forks\n\nObjective:\n- The company aims to maximize its profit. The profit per plate is $10 and the profit per fork is $8. Therefore, the objective function is: Maximize 10x + 8y\n\nConstraints:\n- The total woodworker time available is 5000 minutes, so the constraint is: 30x + 20y <= 5000.\n- The store must make at least twice the number of forks as plates, leading to the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 8y\nConstraints:\n30x + 20y <= 5000\ny >= 2x", "canonical": {"objective": [-10.0, -8.0], "constraints": [[30.0, 20.0, 5000.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 0, "y": 250}, "pseudo_model": "\nDecision Variables:\n- Number of plates made: Plates\n- Number of forks made: Forks\n\nConstraints:\n- Total woodworker time for plates (30 minutes each) and forks (20 minutes each) should not exceed 5000 minutes:\n  30 * Plates + 20 * Forks <= 5000\n- At least twice the number of forks as plates should be made:\n  Forks >= 2 * Plates\n\nObjective:\n- Maximize profit (10 dollars per plate, 8 dollars per fork):\n  10 * Plates + 8 * Forks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPlates = intvar(0, 999999999)  # Number of plates made\nForks = intvar(0, 999999999)  # Number of forks made\n\n# Constraints\nm = Model()\n\n# Total woodworker time for plates and forks should not exceed 5000 minutes:\nm += 30 * Plates + 20 * Forks <= 5000\n# The store must make at least twice the number of forks as plates:\nm += Forks >= 2 * Plates\n\n# Objective\n# Maximize profit (10 dollars per plate, 8 dollars per fork):\nm.maximize(10 * Plates + 8 * Forks)\n", "entities": [{"start": 49, "end": 55, "word": "plates", "entity_group": "VAR", "score": 0.9988282552950316}, {"start": 60, "end": 65, "word": "forks", "entity_group": "VAR", "score": 0.9998174382992967}, {"start": 73, "end": 78, "word": "plate", "entity_group": "VAR", "score": 0.9997277714390749}, {"start": 85, "end": 87, "word": "30", "entity_group": "PARAM", "score": 0.9996565105072874}, {"start": 124, "end": 128, "word": "fork", "entity_group": "VAR", "score": 0.9998074756534141}, {"start": 135, "end": 137, "word": "20", "entity_group": "PARAM", "score": 0.9989306237054635}, {"start": 181, "end": 185, "word": "5000", "entity_group": "LIMIT", "score": 0.9996687581881837}, {"start": 213, "end": 222, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991517379213474}, {"start": 231, "end": 236, "word": "forks", "entity_group": "VAR", "score": 0.9991554521018532}, {"start": 276, "end": 284, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985569507927377}, {"start": 285, "end": 290, "word": "twice", "entity_group": "LIMIT", "score": 0.9959294702347576}, {"start": 305, "end": 310, "word": "forks", "entity_group": "VAR", "score": 0.9996082068914044}, {"start": 314, "end": 320, "word": "plates", "entity_group": "VAR", "score": 0.9997798751216879}, {"start": 330, "end": 336, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999805766575564}, {"start": 341, "end": 346, "word": "plate", "entity_group": "VAR", "score": 0.9990529174787529}, {"start": 352, "end": 354, "word": "10", "entity_group": "PARAM", "score": 0.9993478814005211}, {"start": 363, "end": 369, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465444}, {"start": 374, "end": 378, "word": "fork", "entity_group": "VAR", "score": 0.9990975872183059}, {"start": 384, "end": 385, "word": "8", "entity_group": "PARAM", "score": 0.9994707344140322}, {"start": 423, "end": 431, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 432, "end": 438, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "1885080399", "document": "A pizza shop specializes in pizza and they make two types. Pizza A requires 4 units of mozzarella cheese and 5 units of American cheese. Pizza B requires 5 units of mozzarella cheese and 3 units of American cheese. The shop has 600 units and 500 units of mozzarella and American cheese available, respectively. If the profit per pizza A is $3 and the profit per pizza B is $4, how many of each should the shop make to maximize profit?", "order_mapping": {"Pizza A": 0, "Pizza B": 1, "pizza A": 0, "pizza B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pizza B": "4", "pizza A": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "600", "terms": {"Pizza A": "4", "Pizza B": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"Pizza A": "5", "Pizza B": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Pizza A\n- y: Number of Pizza B\n\nObjective:\n- The pizza shop aims to maximize its profit. The profit per Pizza A is $3 and the profit per Pizza B is $4. Therefore, the objective function is: Maximize 3x + 4y\n\nConstraints:\n- The shop has 600 units of mozzarella and 500 units of American cheese available. The usage of cheese for Pizza A and Pizza B can be represented as: 4x + 5y <= 600 (mozzarella constraint) and 5x + 3y <= 500 (American cheese constraint).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 4y\nConstraints:\n4x + 5y <= 600\n5x + 3y <= 500", "canonical": {"objective": [-3.0, -4.0], "constraints": [[4.0, 5.0, 600.0], [5.0, 3.0, 500.0]]}, "solution": {"x": 0, "y": 120}, "pseudo_model": "\nDecision Variables:\n- Number of Pizza A made: PizzaA\n- Number of Pizza B made: PizzaB\n\nConstraints:\n- Mozzarella cheese usage for both pizzas should not exceed 600 units:\n  4 * PizzaA + 5 * PizzaB <= 600\n- American cheese usage for both pizzas should not exceed 500 units:\n  5 * PizzaA + 3 * PizzaB <= 500\n\nObjective:\n- Maximize profit (3 dollars per Pizza A, 4 dollars per Pizza B):\n  3 * PizzaA + 4 * PizzaB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPizzaA = intvar(0, 999999999)  # Number of Pizza A made\nPizzaB = intvar(0, 999999999)  # Number of Pizza B made\n\n# Constraints\nm = Model()\n\n# Mozzarella cheese constraint (600 units available):\nm += 4 * PizzaA + 5 * PizzaB <= 600\n# American cheese constraint (500 units available):\nm += 5 * PizzaA + 3 * PizzaB <= 500\n\n# Objective\n# Maximize profit (3 dollars per Pizza A, 4 dollars per Pizza B):\nm.maximize(3 * PizzaA + 4 * PizzaB)\n", "entities": [{"start": 60, "end": 67, "word": "Pizza A", "entity_group": "VAR", "score": 0.9999778207632515}, {"start": 77, "end": 78, "word": "4", "entity_group": "PARAM", "score": 0.9997178873596687}, {"start": 110, "end": 111, "word": "5", "entity_group": "PARAM", "score": 0.9996938397385131}, {"start": 139, "end": 146, "word": "Pizza B", "entity_group": "VAR", "score": 0.9999133890665427}, {"start": 156, "end": 157, "word": "5", "entity_group": "PARAM", "score": 0.9995794780761726}, {"start": 189, "end": 190, "word": "3", "entity_group": "PARAM", "score": 0.999653409814894}, {"start": 231, "end": 234, "word": "600", "entity_group": "LIMIT", "score": 0.9996185519754248}, {"start": 245, "end": 248, "word": "500", "entity_group": "LIMIT", "score": 0.9996118992924472}, {"start": 289, "end": 298, "word": "available", "entity_group": "CONST_DIR", "score": 0.998832141278295}, {"start": 323, "end": 329, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999390743962856}, {"start": 334, "end": 341, "word": "pizza A", "entity_group": "VAR", "score": 0.9999250300828924}, {"start": 347, "end": 348, "word": "3", "entity_group": "PARAM", "score": 0.999612792103581}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999907542216068}, {"start": 368, "end": 375, "word": "pizza B", "entity_group": "VAR", "score": 0.9997655081518206}, {"start": 381, "end": 382, "word": "4", "entity_group": "PARAM", "score": 0.9996300785864805}, {"start": 426, "end": 434, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 435, "end": 441, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "799759512", "document": "A salad shop sells two salads, Caesar salad and Mediterranean salad. Each salad uses different amounts of lettuce, sauce, and cheese. Caesar salad uses 100 g of lettuce, 10 g of sauce, and 5 g of cheese. Mediterranean salad uses 150 g of lettuce, 15 g of sauce, and 15 g of cheese. The store has available 20000 g of lettuce, 2000 g of sauce, and 3000 g of cheese. If the profit per Caesar salad is $7 and the profit per Mediterranean salad is $9, how many of each salad should be made to maximize profit?", "order_mapping": {"Caesar salad": 0, "Mediterranean salad": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Caesar salad": "7", "Mediterranean salad": "9"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "20000", "terms": {"Caesar salad": "100", "Mediterranean salad": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"Caesar salad": "10", "Mediterranean salad": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"Caesar salad": "5", "Mediterranean salad": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Caesar salads to be made\n- y: Number of Mediterranean salads to be made\n\nObjective:\n- The salad shop aims to maximize its profit. The profit per Caesar salad is $7 and the profit per Mediterranean salad is $9. Therefore, the objective function is: Maximize 7x + 9y\n\nConstraints:\n- The shop has available 20000 g of lettuce, 2000 g of sauce, and 3000 g of cheese. The usage of ingredients for each salad is as follows:\n    - 100 g of lettuce, 10 g of sauce, and 5 g of cheese for Caesar salad\n    - 150 g of lettuce, 15 g of sauce, and 15 g of cheese for Mediterranean salad\n  These constraints can be formulated as:\n    - 100x + 150y <= 20000 (lettuce constraint)\n    - 10x + 15y <= 2000 (sauce constraint)\n    - 5x + 15y <= 3000 (cheese constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 9y\nConstraints:\n100x + 150y <= 20000\n10x + 15y <= 2000\n5x + 15y <= 3000", "canonical": {"objective": [-7.0, -9.0], "constraints": [[100.0, 150.0, 20000.0], [10.0, 15.0, 2000.0], [5.0, 15.0, 3000.0]]}, "solution": {"x": 200, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Caesar salads made: CaesarSalads\n- Number of Mediterranean salads made: MediterraneanSalads\n\nConstraints:\n- Lettuce constraint (20000 g available):\n  100 * CaesarSalads + 150 * MediterraneanSalads <= 20000\n- Sauce constraint (2000 g available):\n  10 * CaesarSalads + 15 * MediterraneanSalads <= 2000\n- Cheese constraint (3000 g available):\n  5 * CaesarSalads + 15 * MediterraneanSalads <= 3000\n\nObjective:\n- Maximize profit (7 dollars per Caesar salad, 9 dollars per Mediterranean salad):\n  7 * CaesarSalads + 9 * MediterraneanSalads\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCaesarSalads = intvar(0, 999999999)  # Number of Caesar salads made\nMediterraneanSalads = intvar(0, 999999999)  # Number of Mediterranean salads made\n\n# Constraints\nm = Model()\n\n# Lettuce constraint (20000 g available):\nm += 100 * CaesarSalads + 150 * MediterraneanSalads <= 20000\n# Sauce constraint (2000 g available):\nm += 10 * CaesarSalads + 15 * MediterraneanSalads <= 2000\n# Cheese constraint (3000 g available):\nm += 5 * CaesarSalads + 15 * MediterraneanSalads <= 3000\n\n# Objective\n# Maximize profit (7 dollars per Caesar salad, 9 dollars per Mediterranean salad):\nm.maximize(7 * CaesarSalads + 9 * MediterraneanSalads)\n", "entities": [{"start": 32, "end": 44, "word": "Caesar salad", "entity_group": "VAR", "score": 0.9999734964887292}, {"start": 49, "end": 68, "word": "Mediterranean salad", "entity_group": "VAR", "score": 0.9999792570757265}, {"start": 139, "end": 151, "word": "Caesar salad", "entity_group": "VAR", "score": 0.9999878900214247}, {"start": 157, "end": 160, "word": "100", "entity_group": "PARAM", "score": 0.9993881567488906}, {"start": 176, "end": 178, "word": "10", "entity_group": "PARAM", "score": 0.999584742127818}, {"start": 196, "end": 197, "word": "5", "entity_group": "PARAM", "score": 0.9990650522925795}, {"start": 212, "end": 231, "word": "Mediterranean salad", "entity_group": "VAR", "score": 0.9999748777808447}, {"start": 237, "end": 240, "word": "150", "entity_group": "PARAM", "score": 0.9993908978695287}, {"start": 256, "end": 258, "word": "15", "entity_group": "PARAM", "score": 0.9996109629326129}, {"start": 276, "end": 278, "word": "15", "entity_group": "PARAM", "score": 0.9988140724112875}, {"start": 307, "end": 316, "word": "available", "entity_group": "CONST_DIR", "score": 0.9975750974510808}, {"start": 317, "end": 322, "word": "20000", "entity_group": "LIMIT", "score": 0.9992901750738696}, {"start": 338, "end": 342, "word": "2000", "entity_group": "LIMIT", "score": 0.9996509547969717}, {"start": 360, "end": 364, "word": "3000", "entity_group": "LIMIT", "score": 0.9983241481413405}, {"start": 386, "end": 392, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999030570967342}, {"start": 397, "end": 409, "word": "Caesar salad", "entity_group": "VAR", "score": 0.999945920258801}, {"start": 415, "end": 416, "word": "7", "entity_group": "PARAM", "score": 0.9993078489341951}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999365213617063}, {"start": 436, "end": 455, "word": "Mediterranean salad", "entity_group": "VAR", "score": 0.9999469772028217}, {"start": 461, "end": 462, "word": "9", "entity_group": "PARAM", "score": 0.999625876562374}, {"start": 506, "end": 514, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040364571}, {"start": 515, "end": 521, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "916913873", "document": "CaMilk has 25,000 grams of milk available to make muffins and milk cakes. Consumer research determines that at least twice the amount of the milk cakes are needed than the muffins and there need to be at least 50 muffins made. Each muffin needs 15 grams of milk and is sold for a profit of $6.5. In contrast, a milk cake needs 100 grams of milk each and sells for a profit of $8.5. How many of each product should CaMilk prepare to obtain the maximum profit?", "order_mapping": {"muffins": 0, "milk cakes": 1, "muffin": 0, "milk cake": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"muffin": "6.5", "milk cake": "8.5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "25,000", "terms": {"muffin": "15", "milk cake": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "milk cakes", "direction": "at least", "param": "twice", "y_var": "muffins", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "muffins", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of muffins\n- y: Number of milk cakes\n\nObjective:\n- CaMilk aims to maximize its profit. Each muffin is sold for a profit of $6.5, and each milk cake is sold for a profit of $8.5. Therefore, the objective function is: Maximize 6.5x + 8.5y\n\nConstraints:\n- CaMilk has 25,000 grams of milk available, and each muffin requires 15 grams and each milk cake requires 100 grams. This leads to the constraint: 15x + 100y <= 25000.\n- Consumer research determines that at least twice the amount of milk cakes are needed than the muffins, resulting in the constraint: y >= 2x.\n- There need to be at least 50 muffins made, leading to the constraint: x >= 50.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 6.5x + 8.5y\nConstraints:\n15x + 100y <= 25000\ny >= 2x\nx >= 50", "canonical": {"objective": [-6.5, -8.5], "constraints": [[15.0, 100.0, 25000.0], [2.0, -1.0, 0.0], [-1.0, 0.0, -50.0]]}, "solution": {"x": 116, "y": 232}, "pseudo_model": "\nDecision Variables:\n- Number of muffins made: Muffins\n- Number of milk cakes made: MilkCakes\n\nConstraints:\n- Total milk used should not exceed 25,000 grams (15 grams per muffin, 100 grams per milk cake):\n  15 * Muffins + 100 * MilkCakes <= 25000\n- At least twice the amount of milk cakes are needed than the muffins:\n  MilkCakes >= 2 * Muffins\n- There need to be at least 50 muffins made:\n  Muffins >= 50\n\nObjective:\n- Maximize profit (6.5 dollars per muffin, 8.5 dollars per milk cake):\n  6.5 * Muffins + 8.5 * MilkCakes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMuffins = intvar(0, 999999999)  # Number of muffins made\nMilkCakes = intvar(0, 999999999)  # Number of milk cakes made\n\n# Constraints\nm = Model()\n\n# Total milk used should not exceed 25,000 grams:\nm += 15 * Muffins + 100 * MilkCakes <= 25000\n# At least twice the amount of milk cakes are needed than the muffins:\nm += MilkCakes >= 2 * Muffins\n# There need to be at least 50 muffins made:\nm += Muffins >= 50\n\n# Objective\n# Maximize profit (6.5 dollars per muffin, 8.5 dollars per milk cake):\nm.maximize(6.5 * Muffins + 8.5 * MilkCakes)\n", "entities": [{"start": 11, "end": 17, "word": "25,000", "entity_group": "LIMIT", "score": 0.9997331032278699}, {"start": 32, "end": 41, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983226079567749}, {"start": 50, "end": 57, "word": "muffins", "entity_group": "VAR", "score": 0.9992515645278561}, {"start": 62, "end": 72, "word": "milk cakes", "entity_group": "VAR", "score": 0.9999740115427226}, {"start": 109, "end": 117, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986363008568624}, {"start": 118, "end": 123, "word": "twice", "entity_group": "LIMIT", "score": 0.9955197564144361}, {"start": 142, "end": 152, "word": "milk cakes", "entity_group": "VAR", "score": 0.9999782690151873}, {"start": 173, "end": 180, "word": "muffins", "entity_group": "VAR", "score": 0.9977578616557373}, {"start": 202, "end": 210, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981487282244357}, {"start": 211, "end": 213, "word": "50", "entity_group": "LIMIT", "score": 0.9996919074526065}, {"start": 214, "end": 221, "word": "muffins", "entity_group": "VAR", "score": 0.9996115852415858}, {"start": 234, "end": 240, "word": "muffin", "entity_group": "VAR", "score": 0.999624858400077}, {"start": 247, "end": 249, "word": "15", "entity_group": "PARAM", "score": 0.9990753813828901}, {"start": 282, "end": 288, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998517586299946}, {"start": 294, "end": 297, "word": "6.5", "entity_group": "PARAM", "score": 0.9995989021003029}, {"start": 316, "end": 325, "word": "milk cake", "entity_group": "VAR", "score": 0.9999461449400404}, {"start": 332, "end": 335, "word": "100", "entity_group": "PARAM", "score": 0.9996635716830656}, {"start": 371, "end": 377, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999841753707136}, {"start": 383, "end": 386, "word": "8.5", "entity_group": "PARAM", "score": 0.9992967757686751}, {"start": 450, "end": 457, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9866953247594444}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999149747716207}]}
{"doc_id": "-1017657947", "document": "A man wants to do his weekly meal prep but wants to minimize his fat intake. He eats two meals. Each meal of chicken salad contains 20 units of protein, 20 units of carbs, 15 units of fat, and 10 units of fiber. Each meal of beef tacos contains 25 units of protein, 25 units of carbs, 25 units of fat, and 2 units of fiber. The man needs at least 120 units of protein and 150 units of carbs. However he wants to consume at most 25 units of fiber. How many meals of each should he produce to minimize his fat intake?", "order_mapping": {"chicken salad": 0, "beef tacos": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "fat intake", "terms": {"beef tacos": "25", "chicken salad": "15"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "120", "terms": {"chicken salad": "20", "beef tacos": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"chicken salad": "20", "beef tacos": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "25", "terms": {"chicken salad": "10", "beef tacos": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of meals of chicken salad\n- y: Number of meals of beef tacos\n\nObjective:\n- The man wants to minimize his fat intake. Each meal of chicken salad contains 15 units of fat, and each meal of beef tacos contains 25 units of fat. Therefore, the objective function is: Minimize 15x + 25y\n\nConstraints:\n- The man needs at least 120 units of protein, which translates to the constraint: 20x + 25y >= 120.\n- The man needs at least 150 units of carbs, leading to the constraint: 20x + 25y >= 150.\n- The man wants to consume at most 25 units of fiber, resulting in the constraint: 10x + 2y <= 25.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 15x + 25y\nConstraints:\n20x + 25y >= 120\n20x + 25y >= 150\n10x + 2y <= 25", "canonical": {"objective": [15.0, 25.0], "constraints": [[-20.0, -25.0, -120.0], [-20.0, -25.0, -150.0], [10.0, 2.0, 25.0]]}, "solution": {"x": 0, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of chicken salad meals: ChickenSalad\n- Number of beef tacos meals: BeefTacos\n\nConstraints:\n- Protein requirement (at least 120 units):\n  20 * ChickenSalad + 25 * BeefTacos >= 120\n- Carbs requirement (at least 150 units):\n  20 * ChickenSalad + 25 * BeefTacos >= 150\n- Fiber limit (at most 25 units):\n  10 * ChickenSalad + 2 * BeefTacos <= 25\n\nObjective:\n- Minimize fat intake (15 units from chicken salad, 25 units from beef tacos):\n  15 * ChickenSalad + 25 * BeefTacos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChickenSalad = intvar(0, 999999999)  # Number of chicken salad meals\nBeefTacos = intvar(0, 999999999)  # Number of beef tacos meals\n\n# Constraints\nm = Model()\n\n# Protein requirement (at least 120 units):\nm += 20 * ChickenSalad + 25 * BeefTacos >= 120\n# Carbs requirement (at least 150 units):\nm += 20 * ChickenSalad + 25 * BeefTacos >= 150\n# Fiber limit (at most 25 units):\nm += 10 * ChickenSalad + 2 * BeefTacos <= 25\n\n# Objective\n# Minimize fat intake (15 units from chicken salad, 25 units from beef tacos):\nm.minimize(15 * ChickenSalad + 25 * BeefTacos)\n", "entities": [{"start": 65, "end": 75, "word": "fat intake", "entity_group": "OBJ_NAME", "score": 0.9811604311832742}, {"start": 111, "end": 124, "word": "chicken salad", "entity_group": "VAR", "score": 0.9998828996840923}, {"start": 134, "end": 136, "word": "20", "entity_group": "PARAM", "score": 0.9994627501511556}, {"start": 156, "end": 158, "word": "20", "entity_group": "PARAM", "score": 0.9997346761650312}, {"start": 176, "end": 178, "word": "15", "entity_group": "PARAM", "score": 0.9997317842101527}, {"start": 188, "end": 191, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9820430996785473}, {"start": 198, "end": 200, "word": "10", "entity_group": "PARAM", "score": 0.9995825520604028}, {"start": 231, "end": 241, "word": "beef tacos", "entity_group": "VAR", "score": 0.9999422337898587}, {"start": 251, "end": 253, "word": "25", "entity_group": "PARAM", "score": 0.9994718178925015}, {"start": 273, "end": 275, "word": "25", "entity_group": "PARAM", "score": 0.9997347221200781}, {"start": 293, "end": 295, "word": "25", "entity_group": "PARAM", "score": 0.9997317842101541}, {"start": 305, "end": 308, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9820430996785611}, {"start": 315, "end": 316, "word": "2", "entity_group": "PARAM", "score": 0.9993976610138856}, {"start": 348, "end": 356, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989032246748977}, {"start": 357, "end": 360, "word": "120", "entity_group": "LIMIT", "score": 0.9997410367146072}, {"start": 382, "end": 385, "word": "150", "entity_group": "LIMIT", "score": 0.9997247850751775}, {"start": 431, "end": 438, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990993378649086}, {"start": 439, "end": 441, "word": "25", "entity_group": "LIMIT", "score": 0.9991519721158952}, {"start": 503, "end": 511, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992899109673671}, {"start": 516, "end": 526, "word": "fat intake", "entity_group": "OBJ_NAME", "score": 0.9894648916241222}]}
{"doc_id": "2068785825", "document": "Tom's Florist sells sunflowers and roses every day. The profit per bouquet of sunflowers sold is $7 and the profit per bouquet of roses sold is $12. Each bouquet of sunflowers needs 4 minutes of clipping and 3 minutes of packaging. Each bouquet of roses requires 5 minutes of clipping and 7 minutes of packaging. In total, there are 1200 minutes available for clipping and 800 minutes available for packaging. Having signed a contract with a local restaurant, at least 30 bouquets of sunflowers must be picked. There is no such limit on bouquets of roses. Formulate an LP to maximize profit.", "order_mapping": {"sunflowers": 0, "roses": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"sunflowers": "7", "roses": "12"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1200", "terms": {"sunflowers": "4", "roses": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"sunflowers": "3", "roses": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "sunflowers", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bouquets of sunflowers sold\n- y: Number of bouquets of roses sold\n\nObjective:\n- The florist aims to maximize the profit. The profit per bouquet of sunflowers sold is $7 and the profit per bouquet of roses sold is $12. Therefore, the objective function is: Maximize 7x + 12y\n\nConstraints:\n- Each bouquet of sunflowers needs 4 minutes of clipping and each bouquet of roses needs 5 minutes of clipping. The total available clipping time is 1200 minutes, leading to the constraint: 4x + 5y <= 1200.\n- Each bouquet of sunflowers needs 3 minutes of packaging and each bouquet of roses needs 7 minutes of packaging. The total available packaging time is 800 minutes, leading to the constraint: 3x + 7y <= 800.\n- At least 30 bouquets of sunflowers must be picked, leading to the constraint: x >= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 12y\nConstraints:\n4x + 5y <= 1200\n3x + 7y <= 800\nx >= 30", "canonical": {"objective": [-7.0, -12.0], "constraints": [[4.0, 5.0, 1200.0], [3.0, 7.0, 800.0], [-1.0, 0.0, -30.0]]}, "solution": {"x": 266, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of bouquets of sunflowers sold per day: Sunflowers\n- Number of bouquets of roses sold per day: Roses\n\nConstraints:\n- Clipping time for all bouquets should not exceed 1200 minutes:\n  4 * Sunflowers + 5 * Roses <= 1200\n- Packaging time for all bouquets should not exceed 800 minutes:\n  3 * Sunflowers + 7 * Roses <= 800\n- At least 30 bouquets of sunflowers must be picked:\n  Sunflowers >= 30\n\nObjective:\n- Maximize profit (7 dollars per bouquet of sunflowers, 12 dollars per bouquet of roses):\n  7 * Sunflowers + 12 * Roses\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSunflowers = intvar(0, 999999999)  # Number of bouquets of sunflowers sold per day\nRoses = intvar(0, 999999999)  # Number of bouquets of roses sold per day\n\n# Constraints\nm = Model()\n\n# Clipping time constraint (1200 minutes available):\nm += 4 * Sunflowers + 5 * Roses <= 1200\n# Packaging time constraint (800 minutes available):\nm += 3 * Sunflowers + 7 * Roses <= 800\n# At least 30 bouquets of sunflowers must be picked:\nm += Sunflowers >= 30\n\n# Objective\n# Maximize profit (7 dollars per bouquet of sunflowers, 12 dollars per bouquet of roses):\nm.maximize(7 * Sunflowers + 12 * Roses)\n", "entities": [{"start": 21, "end": 31, "word": "sunflowers", "entity_group": "VAR", "score": 0.9996225505543446}, {"start": 36, "end": 41, "word": "roses", "entity_group": "VAR", "score": 0.9993107614989531}, {"start": 58, "end": 64, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998661198428712}, {"start": 80, "end": 90, "word": "sunflowers", "entity_group": "VAR", "score": 0.9982778545513048}, {"start": 101, "end": 102, "word": "7", "entity_group": "PARAM", "score": 0.9996336087245663}, {"start": 111, "end": 117, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999186696490472}, {"start": 133, "end": 138, "word": "roses", "entity_group": "VAR", "score": 0.9988376490832259}, {"start": 149, "end": 151, "word": "12", "entity_group": "PARAM", "score": 0.9995525217793985}, {"start": 170, "end": 180, "word": "sunflowers", "entity_group": "VAR", "score": 0.9993267628645398}, {"start": 187, "end": 188, "word": "4", "entity_group": "PARAM", "score": 0.9996849456288288}, {"start": 213, "end": 214, "word": "3", "entity_group": "PARAM", "score": 0.9997281016246344}, {"start": 254, "end": 259, "word": "roses", "entity_group": "VAR", "score": 0.9994636950770724}, {"start": 269, "end": 270, "word": "5", "entity_group": "PARAM", "score": 0.9997067627877761}, {"start": 295, "end": 296, "word": "7", "entity_group": "PARAM", "score": 0.9996618911248774}, {"start": 341, "end": 345, "word": "1200", "entity_group": "LIMIT", "score": 0.9997691745127425}, {"start": 354, "end": 363, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993167013484333}, {"start": 381, "end": 384, "word": "800", "entity_group": "LIMIT", "score": 0.9997518243339406}, {"start": 393, "end": 402, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977156595658794}, {"start": 470, "end": 478, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990201262259893}, {"start": 479, "end": 481, "word": "30", "entity_group": "LIMIT", "score": 0.9997544785511224}, {"start": 494, "end": 504, "word": "sunflowers", "entity_group": "VAR", "score": 0.9990018623882052}, {"start": 560, "end": 565, "word": "roses", "entity_group": "VAR", "score": 0.9997973031677511}, {"start": 587, "end": 595, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996119494508301}, {"start": 596, "end": 602, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999511757469773}]}
{"doc_id": "1106730800", "document": "A dessert factory makes cakes and pies. Each cake requires 4 units of sugar and 5 units of flour. Each pie requires 5 units of sugar and 3 units of flour. The factory has 1000 units of sugar and 1200 units of flour agent available. If the revenue per cake made is $4 and the revenue per pie made is $3, how many of each should be made to maximize revenue?", "order_mapping": {"cakes": 0, "pies": 1, "cake": 0, "pie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"cake": "4", "pie": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"cake": "4", "pie": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"cake": "5", "pie": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cakes made\n- y: Number of pies made\n\nObjective:\n- The dessert factory aims to maximize its revenue. The revenue per cake made is $4 and the revenue per pie made is $3. Therefore, the objective function is: Maximize 4x + 3y\n\nConstraints:\n- The factory has 1000 units of sugar available, and each cake requires 4 units of sugar and each pie requires 5 units of sugar. This leads to the constraint: 4x + 5y <= 1000.\n- The factory has 1200 units of flour available, and each cake requires 5 units of flour and each pie requires 3 units of flour. This results in the constraint: 5x + 3y <= 1200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 4x + 3y\nConstraints:\n4x + 5y <= 1000\n5x + 3y <= 1200", "canonical": {"objective": [-4.0, -3.0], "constraints": [[4.0, 5.0, 1000.0], [5.0, 3.0, 1200.0]]}, "solution": {"x": 231, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of cakes made: Cakes\n- Number of pies made: Pies\n\nConstraints:\n- Sugar usage for cakes and pies should not exceed 1000 units:\n  4 * Cakes + 5 * Pies <= 1000\n- Flour usage for cakes and pies should not exceed 1200 units:\n  5 * Cakes + 3 * Pies <= 1200\n\nObjective:\n- Maximize revenue (4 dollars per cake and 3 dollars per pie):\n  4 * Cakes + 3 * Pies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCakes = intvar(0, 999999999)  # Number of cakes made\nPies = intvar(0, 999999999)  # Number of pies made\n\n# Constraints\nm = Model()\n\n# Sugar constraint: 4 units per cake and 5 units per pie, with 1000 units available:\nm += 4 * Cakes + 5 * Pies <= 1000\n# Flour constraint: 5 units per cake and 3 units per pie, with 1200 units available:\nm += 5 * Cakes + 3 * Pies <= 1200\n\n# Objective\n# Maximize revenue (4 dollars per cake and 3 dollars per pie):\nm.maximize(4 * Cakes + 3 * Pies)\n", "entities": [{"start": 24, "end": 29, "word": "cakes", "entity_group": "VAR", "score": 0.9996251628956332}, {"start": 34, "end": 38, "word": "pies", "entity_group": "VAR", "score": 0.999734458889358}, {"start": 46, "end": 50, "word": "cake", "entity_group": "VAR", "score": 0.9996473494324958}, {"start": 60, "end": 61, "word": "4", "entity_group": "PARAM", "score": 0.9996991183379506}, {"start": 81, "end": 82, "word": "5", "entity_group": "PARAM", "score": 0.9997147251550863}, {"start": 105, "end": 108, "word": "pie", "entity_group": "VAR", "score": 0.9992639857576986}, {"start": 118, "end": 119, "word": "5", "entity_group": "PARAM", "score": 0.9996842055847301}, {"start": 139, "end": 140, "word": "3", "entity_group": "PARAM", "score": 0.9996566400430805}, {"start": 174, "end": 178, "word": "1000", "entity_group": "LIMIT", "score": 0.9997332499848532}, {"start": 198, "end": 202, "word": "1200", "entity_group": "LIMIT", "score": 0.9997189196740699}, {"start": 224, "end": 233, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991820214927859}, {"start": 243, "end": 250, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9976305099584791}, {"start": 255, "end": 259, "word": "cake", "entity_group": "VAR", "score": 0.9990772062043959}, {"start": 270, "end": 271, "word": "4", "entity_group": "PARAM", "score": 0.9995990290707173}, {"start": 280, "end": 287, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9989523855446926}, {"start": 292, "end": 295, "word": "pie", "entity_group": "VAR", "score": 0.9976618601438311}, {"start": 306, "end": 307, "word": "3", "entity_group": "PARAM", "score": 0.9996104936635293}, {"start": 345, "end": 353, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996757757014475}, {"start": 354, "end": 361, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9987772414849716}]}
{"doc_id": "876167589", "document": "Lucas has acquired 150 acres of tropical land. He wants to plant mango trees and durian trees, as he knows he can sell all the durians and mangos harvested. Mango trees cost $150 per acre to maintain, yield a profit of $200 per acre, and require 6 days worth of labor per acre. Durian trees cost $180 per acre to maintain, yield a profit of $300 per acre, and require 3 days worth of labor per acre. Lucas has a budget of $20000 and 700 days worth of labor available (among all his workers). How many acres of each tree should Lucas plant in order to maximize profit?", "order_mapping": {"mango trees": 0, "durian trees": 1, "durians": 1, "mangos": 0, "Mango trees": 0, "Durian trees": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Mango trees": "200", "Durian trees": "300"}}, "const_declarations": [{"type": "sum", "direction": "acquired", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "20000", "terms": {"Durian trees": "180", "Mango trees": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"Mango trees": "6", "Durian trees": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of mango trees to plant\n- y: Acres of durian trees to plant\n\nObjective:\n- Lucas aims to maximize his profit. The profit from mango trees is $200 per acre and from durian trees is $300 per acre. Therefore, the objective function is: Maximize 200x + 300y\n\nConstraints:\n- Lucas has acquired 150 acres of land, so the constraint is: x + y <= 150.\n- Lucas has a budget of $20000, which leads to the constraint: 150x + 180y <= 20000.\n- Lucas has 700 days worth of labor available, leading to the constraint: 6x + 3y <= 700.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 300y\nConstraints:\nx + y <= 150\n150x + 180y <= 20000\n6x + 3y <= 700", "canonical": {"objective": [-200.0, -300.0], "constraints": [[1.0, 1.0, 150.0], [150.0, 180.0, 20000.0], [6.0, 3.0, 700.0]]}, "solution": {"x": 0, "y": 111}, "pseudo_model": "\nDecision Variables:\n- Number of acres planted with mango trees: MangoTrees\n- Number of acres planted with durian trees: DurianTrees\n\nConstraints:\n- Total acres planted should not exceed 150:\n  MangoTrees + DurianTrees <= 150\n- Budget constraint: $150 per acre for mango trees and $180 per acre for durian trees should not exceed $20000:\n  150 * MangoTrees + 180 * DurianTrees <= 20000\n- Labor constraint: 6 days per acre for mango trees and 3 days per acre for durian trees should not exceed 700 days:\n  6 * MangoTrees + 3 * DurianTrees <= 700\n\nObjective:\n- Maximize profit (profit of $200 per acre for mango trees and $300 per acre for durian trees):\n  200 * MangoTrees + 300 * DurianTrees\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMangoTrees = intvar(0, 999999999)  # Number of acres planted with mango trees\nDurianTrees = intvar(0, 999999999)  # Number of acres planted with durian trees\n\n# Constraints\nm = Model()\n\n# Total acres planted should not exceed 150:\nm += MangoTrees + DurianTrees <= 150\n# Budget constraint: $150 per acre for mango trees and $180 per acre for durian trees should not exceed $20000:\nm += 150 * MangoTrees + 180 * DurianTrees <= 20000\n# Labor constraint: 6 days per acre for mango trees and 3 days per acre for durian trees should not exceed 700 days:\nm += 6 * MangoTrees + 3 * DurianTrees <= 700\n\n# Objective\n# Maximize profit (profit of $200 per acre for mango trees and $300 per acre for durian trees):\nm.maximize(200 * MangoTrees + 300 * DurianTrees)\n", "entities": [{"start": 10, "end": 18, "word": "acquired", "entity_group": "CONST_DIR", "score": 0.9983825348589531}, {"start": 19, "end": 22, "word": "150", "entity_group": "LIMIT", "score": 0.9989031981998165}, {"start": 66, "end": 77, "word": "mango trees", "entity_group": "VAR", "score": 0.9999609923685944}, {"start": 82, "end": 94, "word": "durian trees", "entity_group": "VAR", "score": 0.9999809371526973}, {"start": 129, "end": 136, "word": "durians", "entity_group": "VAR", "score": 0.9996508450360532}, {"start": 141, "end": 147, "word": "mangos", "entity_group": "VAR", "score": 0.9997930664648811}, {"start": 160, "end": 171, "word": "Mango trees", "entity_group": "VAR", "score": 0.9999769893968293}, {"start": 179, "end": 182, "word": "150", "entity_group": "PARAM", "score": 0.9995561429100377}, {"start": 214, "end": 220, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998619595646453}, {"start": 226, "end": 229, "word": "200", "entity_group": "PARAM", "score": 0.9992907161799102}, {"start": 253, "end": 254, "word": "6", "entity_group": "PARAM", "score": 0.9997093562065377}, {"start": 286, "end": 298, "word": "Durian trees", "entity_group": "VAR", "score": 0.9999692508891681}, {"start": 306, "end": 309, "word": "180", "entity_group": "PARAM", "score": 0.9994907323515707}, {"start": 341, "end": 347, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999861959564647}, {"start": 353, "end": 356, "word": "300", "entity_group": "PARAM", "score": 0.9992907161799117}, {"start": 380, "end": 381, "word": "3", "entity_group": "PARAM", "score": 0.9997093562055756}, {"start": 425, "end": 431, "word": "budget", "entity_group": "CONST_DIR", "score": 0.998465814682725}, {"start": 437, "end": 442, "word": "20000", "entity_group": "LIMIT", "score": 0.9984889204910934}, {"start": 447, "end": 450, "word": "700", "entity_group": "LIMIT", "score": 0.9993822984463019}, {"start": 471, "end": 480, "word": "available", "entity_group": "CONST_DIR", "score": 0.9997295969839567}, {"start": 568, "end": 576, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.990776318410023}, {"start": 577, "end": 583, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9988012061959632}]}
{"doc_id": "-935766467", "document": "A company is looking to purchase ads to place in three video categories: DIY videos, shopping videos, and unboxing videos. The cost of placing an ad in each video and the expected viewership is given as follows. Each ad placed in a DIY video costs $5000 and reaches 10000 viewers. Each ad placed in a shopping video costs $3200 and reaches 4000 viewers. Finally, each ad placed in an unboxing video costs $4000 and reaches 9000 viewers. There are few DIY videos, hence the number of ads placed on DIY videos is at most 5. In addition, at most half the number of ads should be at unboxing videos, and at least 20% of ads should be in shopping videos. If the company has a budget of $120000, how many ads should they place in each category to maximize viewership.", "order_mapping": {"DIY videos": 0, "shopping videos": 1, "unboxing videos": 2, "DIY video": 0, "shopping video": 1, "unboxing video": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"DIY video": "10000", "unboxing video": "9000", "shopping video": "4000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "120000", "terms": {"DIY video": "5000", "shopping video": "3200", "unboxing video": "4000"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "half", "var": "unboxing videos", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "shopping videos", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "DIY videos", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads placed in DIY videos\n- y: Number of ads placed in shopping videos\n- z: Number of ads placed in unboxing videos\n\nObjective:\n- The company aims to maximize viewership. The expected viewership for each ad placed in the respective video categories is as follows: DIY videos - 10000 viewers, shopping videos - 4000 viewers, unboxing videos - 9000 viewers. Therefore, the objective function is: Maximize 10000x + 4000y + 9000z\n\nConstraints:\n- The company has a budget of $120000, so the cost of placing ads should not exceed this amount, leading to the constraint: 5000x + 3200y + 4000z <= 120000.\n- The number of ads placed on DIY videos is at most 5, leading to the constraint: x <= 5.\n- At most half the number of ads should be at unboxing videos, leading to the constraint: z <= 0.5(x + y).\n- At least 20% of ads should be in shopping videos, leading to the constraint: y >= 0.20(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10000x + 4000y + 9000z\nConstraints:\n5000x + 3200y + 4000z <= 120000\nx <= 5\nz <= 0.5(x + y)\ny >= 0.20(x + y + z)", "canonical": {"objective": [-10000.0, -4000.0, -9000.0], "constraints": [[5000.0, 3200.0, 4000.0, 120000.0], [1.0, 0.0, 0.0, 5.0], [-0.5, -0.5, 1.0, 0.0], [0.2, -0.8, 0.2, 0.0]]}, "solution": {"x": 5, "y": 17, "z": 10}, "pseudo_model": "\nDecision Variables:\n- Number of ads in DIY videos: DIYAds (at most 5)\n- Number of ads in shopping videos: ShoppingAds\n- Number of ads in unboxing videos: UnboxingAds\n\nConstraints:\n- Total cost of ads should not exceed $120000:\n  5000 * DIYAds + 3200 * ShoppingAds + 4000 * UnboxingAds <= 120000\n- At most half the number of ads should be at unboxing videos:\n  UnboxingAds <= 0.5 * (DIYAds + ShoppingAds + UnboxingAds)\n- At least 20% of ads should be in shopping videos:\n  ShoppingAds >= 0.2 * (DIYAds + ShoppingAds + UnboxingAds)\n\nObjective:\n- Maximize viewership (10000 viewers per DIY ad, 4000 viewers per shopping ad, 9000 viewers per unboxing ad):\n  10000 * DIYAds + 4000 * ShoppingAds + 9000 * UnboxingAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDIYAds = intvar(0, 5)  # Number of ads in DIY videos, at most 5\nShoppingAds = intvar(0, 999999999)  # Number of ads in shopping videos\nUnboxingAds = intvar(0, 999999999)  # Number of ads in unboxing videos\n\n# Constraints\nm = Model()\n\n# Budget constraint: Total cost should not exceed $120000\nm += 5000 * DIYAds + 3200 * ShoppingAds + 4000 * UnboxingAds <= 120000\n# At most half the number of ads should be at unboxing videos\nm += UnboxingAds <= 0.5 * (DIYAds + ShoppingAds + UnboxingAds)\n# At least 20% of ads should be in shopping videos\nm += ShoppingAds >= 0.2 * (DIYAds + ShoppingAds + UnboxingAds)\n\n# Objective\n# Maximize viewership\nm.maximize(10000 * DIYAds + 4000 * ShoppingAds + 9000 * UnboxingAds)\n", "entities": [{"start": 74, "end": 84, "word": "DIY videos", "entity_group": "VAR", "score": 0.9999742392465246}, {"start": 87, "end": 102, "word": "shopping videos", "entity_group": "VAR", "score": 0.9999703962203812}, {"start": 109, "end": 124, "word": "unboxing videos", "entity_group": "VAR", "score": 0.9999670846005471}, {"start": 184, "end": 194, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.9951357624730638}, {"start": 237, "end": 246, "word": "DIY video", "entity_group": "VAR", "score": 0.9999490764276522}, {"start": 255, "end": 259, "word": "5000", "entity_group": "PARAM", "score": 0.999346275118954}, {"start": 272, "end": 277, "word": "10000", "entity_group": "PARAM", "score": 0.9996625027207463}, {"start": 278, "end": 285, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9870599807995246}, {"start": 308, "end": 322, "word": "shopping video", "entity_group": "VAR", "score": 0.9999507748743321}, {"start": 331, "end": 335, "word": "3200", "entity_group": "PARAM", "score": 0.9995383287056439}, {"start": 348, "end": 352, "word": "4000", "entity_group": "PARAM", "score": 0.9997252367798894}, {"start": 353, "end": 360, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9894588627607609}, {"start": 394, "end": 408, "word": "unboxing video", "entity_group": "VAR", "score": 0.9999610727877285}, {"start": 417, "end": 421, "word": "4000", "entity_group": "PARAM", "score": 0.9996074872182794}, {"start": 434, "end": 438, "word": "9000", "entity_group": "PARAM", "score": 0.9997274710022609}, {"start": 439, "end": 446, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9890806939039819}, {"start": 463, "end": 473, "word": "DIY videos", "entity_group": "VAR", "score": 0.9999710250893115}, {"start": 510, "end": 520, "word": "DIY videos", "entity_group": "VAR", "score": 0.9999264039851775}, {"start": 524, "end": 531, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997851825246448}, {"start": 532, "end": 533, "word": "5", "entity_group": "LIMIT", "score": 0.9996832005898201}, {"start": 550, "end": 557, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987513834923425}, {"start": 558, "end": 562, "word": "half", "entity_group": "LIMIT", "score": 0.9959236343331274}, {"start": 594, "end": 609, "word": "unboxing videos", "entity_group": "VAR", "score": 0.9999613612579482}, {"start": 616, "end": 624, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993425107041257}, {"start": 625, "end": 629, "word": "20 %", "entity_group": "LIMIT", "score": 0.9859076465599169}, {"start": 650, "end": 665, "word": "shopping videos", "entity_group": "VAR", "score": 0.9999603284090373}, {"start": 689, "end": 695, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9927428289049095}, {"start": 701, "end": 707, "word": "120000", "entity_group": "LIMIT", "score": 0.9993327955595904}, {"start": 761, "end": 769, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994750492497175}, {"start": 770, "end": 780, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.998512810073421}]}
{"doc_id": "1198821053", "document": "Luca would like to invest up to $20000 in the fishing and education industries. Each dollar invested in the fishing industry yields a $1.30 profit and each dollar invested in the education industry yields a $2.10 profit. A minimum of $5000 must be invested in the education industry and at least 30% of all money invested must be in the fishing industry. Formulate an LP that can be used to maximize Luca's profit.", "order_mapping": {"fishing": 0, "education industries": 1, "fishing industry": 0, "education industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"education industry": "2.10", "fishing industry": "1.30"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "20000", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5000", "var": "education industry", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "fishing industry", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the fishing industry\n- y: Dollars invested in the education industry\n\nObjective:\n- Luca aims to maximize his profit. Each dollar invested in the fishing industry yields a $1.30 profit and each dollar invested in the education industry yields a $2.10 profit. Therefore, the objective function is: Maximize 1.30x + 2.10y\n\nConstraints:\n- Luca can invest up to $20000 in total, so the constraint is: x + y <= 20000.\n- A minimum of $5000 must be invested in the education industry, leading to the constraint: y >= 5000.\n- At least 30% of all money invested must be in the fishing industry. This translates to: x >= 0.30(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.30x + 2.10y\nConstraints:\nx + y <= 20000\ny >= 5000\nx >= 0.30(x + y)", "canonical": {"objective": [-1.3, -2.1], "constraints": [[1.0, 1.0, 20000.0], [0.0, -1.0, -5000.0], [-0.7, 0.3, 0.0]]}, "solution": {"x": 6000, "y": 14000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the fishing industry: Fishing\n- Amount invested in the education industry: Education\n\nConstraints:\n- Total investment should not exceed 20000 dollars:\n  Fishing + Education <= 20000\n- Minimum investment of 5000 dollars in the education industry:\n  Education >= 5000\n- At least 30% of all money invested must be in the fishing industry:\n  Fishing >= 0.30 * (Fishing + Education)\n\nObjective:\n- Maximize profit ($1.30 profit per dollar invested in the fishing industry, $2.10 profit per dollar invested in the education industry):\n  1.30 * Fishing + 2.10 * Education\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishing = intvar(0, 999999999)  # Amount invested in the fishing industry\nEducation = intvar(0, 999999999)  # Amount invested in the education industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $20000:\nm += Fishing + Education <= 20000\n# Minimum investment of $5000 in the education industry:\nm += Education >= 5000\n# At least 30% of all money invested must be in the fishing industry:\nm += Fishing >= 0.30 * (Fishing + Education)\n\n# Objective\n# Maximize profit ($1.30 profit per dollar invested in the fishing industry, $2.10 profit per dollar invested in the education industry):\nm.maximize(1.30 * Fishing + 2.10 * Education)\n", "entities": [{"start": 26, "end": 31, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9937561347683108}, {"start": 34, "end": 39, "word": "20000", "entity_group": "LIMIT", "score": 0.9995786025837093}, {"start": 47, "end": 54, "word": "fishing", "entity_group": "VAR", "score": 0.9993246958904648}, {"start": 59, "end": 79, "word": "education industries", "entity_group": "VAR", "score": 0.9998089513986639}, {"start": 110, "end": 126, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999847126501519}, {"start": 138, "end": 142, "word": "1.30", "entity_group": "PARAM", "score": 0.9959273513038717}, {"start": 143, "end": 149, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9974259974105308}, {"start": 182, "end": 200, "word": "education industry", "entity_group": "VAR", "score": 0.9999494383613042}, {"start": 212, "end": 216, "word": "2.10", "entity_group": "PARAM", "score": 0.9990436413987512}, {"start": 217, "end": 223, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.998868038555895}, {"start": 228, "end": 235, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9971790945750987}, {"start": 241, "end": 245, "word": "5000", "entity_group": "LIMIT", "score": 0.9992626693182544}, {"start": 270, "end": 288, "word": "education industry", "entity_group": "VAR", "score": 0.999860139131488}, {"start": 293, "end": 301, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986668030367113}, {"start": 302, "end": 306, "word": "30 %", "entity_group": "LIMIT", "score": 0.7211058237945063}, {"start": 344, "end": 360, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999778869653798}, {"start": 399, "end": 407, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9957586835104583}, {"start": 416, "end": 422, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997993508772187}]}
{"doc_id": "1198659824", "document": "A furniture company makes regular refrigerators and energy-efficient refrigerators. There is an expected demand of at least 25 regular refrigerators and 40 energy-efficient refrigerators each day. However, due to the size of their factory, they can make at most 100 regular refrigerators and 70 energy-efficient refrigerators per day. To satisfy a contract, a minimum of 90 refrigerators must be made each day. If the profit per regular refrigerator sold is $50 and the profit per energy-efficient refrigerator sold is $80, how many refrigerators of each type should be made to maximize profit?", "order_mapping": {"regular refrigerators": 0, "energy-efficient refrigerators": 1, "regular refrigerator": 0, "energy-efficient refrigerator": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"energy-efficient refrigerator": "80", "regular refrigerator": "50"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "25", "var": "regular refrigerators", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "energy-efficient refrigerators", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "regular refrigerators", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "energy-efficient refrigerators", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "90", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of regular refrigerators made per day\n- y: Number of energy-efficient refrigerators made per day\n\nObjective:\n- The company aims to maximize its profit. The profit per regular refrigerator sold is $50 and the profit per energy-efficient refrigerator sold is $80. Therefore, the objective function is: Maximize 50x + 80y\n\nConstraints:\n- There is an expected demand of at least 25 regular refrigerators and 40 energy-efficient refrigerators each day, leading to the constraints: x >= 25 and y >= 40.\n- The company can make at most 100 regular refrigerators and 70 energy-efficient refrigerators per day, resulting in the constraints: x <= 100 and y <= 70.\n- To satisfy a contract, a minimum of 90 refrigerators must be made each day, leading to the constraint: x + y >= 90.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 50x + 80y\nConstraints:\nx >= 25\ny >= 40\nx <= 100\ny <= 70\nx + y >= 90", "canonical": {"objective": [-50.0, -80.0], "constraints": [[-1.0, 0.0, -25.0], [0.0, -1.0, -40.0], [1.0, 0.0, 100.0], [0.0, 1.0, 70.0], [-1.0, -1.0, -90.0]]}, "solution": {"x": 100, "y": 70}, "pseudo_model": "\nDecision Variables:\n- Number of regular refrigerators made per day: RegularRefrigerators\n- Number of energy-efficient refrigerators made per day: EnergyEfficientRefrigerators\n\nConstraints:\n- At least 25 regular refrigerators must be made each day:\n  RegularRefrigerators >= 25\n- At least 40 energy-efficient refrigerators must be made each day:\n  EnergyEfficientRefrigerators >= 40\n- At most 100 regular refrigerators can be made each day:\n  RegularRefrigerators <= 100\n- At most 70 energy-efficient refrigerators can be made each day:\n  EnergyEfficientRefrigerators <= 70\n- A minimum of 90 refrigerators (regular + energy-efficient) must be made each day to satisfy a contract:\n  RegularRefrigerators + EnergyEfficientRefrigerators >= 90\n\nObjective:\n- Maximize profit (50 dollars per regular refrigerator, 80 dollars per energy-efficient refrigerator):\n  50 * RegularRefrigerators + 80 * EnergyEfficientRefrigerators\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularRefrigerators = intvar(0, 999999999)  # Number of regular refrigerators made per day\nEnergyEfficientRefrigerators = intvar(0, 999999999)  # Number of energy-efficient refrigerators made per day\n\n# Constraints\nm = Model()\n\n# Expected demand constraints:\nm += RegularRefrigerators >= 25  # At least 25 regular refrigerators\nm += EnergyEfficientRefrigerators >= 40  # At least 40 energy-efficient refrigerators\n\n# Factory capacity constraints:\nm += RegularRefrigerators <= 100  # At most 100 regular refrigerators\nm += EnergyEfficientRefrigerators <= 70  # At most 70 energy-efficient refrigerators\n\n# Contract requirement:\nm += RegularRefrigerators + EnergyEfficientRefrigerators >= 90  # A minimum of 90 refrigerators in total\n\n# Objective\n# Maximize profit (50 dollars per regular refrigerator, 80 dollars per energy-efficient refrigerator):\nm.maximize(50 * RegularRefrigerators + 80 * EnergyEfficientRefrigerators)\n", "entities": [{"start": 26, "end": 47, "word": "regular refrigerators", "entity_group": "VAR", "score": 0.9999715637248985}, {"start": 52, "end": 84, "word": "energy - efficient refrigerators", "entity_group": "VAR", "score": 0.9985788505623139}, {"start": 118, "end": 126, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977586346364451}, {"start": 127, "end": 129, "word": "25", "entity_group": "LIMIT", "score": 0.9994437477482472}, {"start": 130, "end": 151, "word": "regular refrigerators", "entity_group": "VAR", "score": 0.9999722474714384}, {"start": 156, "end": 158, "word": "40", "entity_group": "LIMIT", "score": 0.9996294845461239}, {"start": 159, "end": 191, "word": "energy - efficient refrigerators", "entity_group": "VAR", "score": 0.9978447529161212}, {"start": 262, "end": 269, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987069304050934}, {"start": 270, "end": 273, "word": "100", "entity_group": "LIMIT", "score": 0.999550105878103}, {"start": 274, "end": 295, "word": "regular refrigerators", "entity_group": "VAR", "score": 0.9999678805319065}, {"start": 300, "end": 302, "word": "70", "entity_group": "LIMIT", "score": 0.9996304342175244}, {"start": 303, "end": 335, "word": "energy - efficient refrigerators", "entity_group": "VAR", "score": 0.9973184033106516}, {"start": 372, "end": 379, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9966851605933671}, {"start": 383, "end": 385, "word": "90", "entity_group": "LIMIT", "score": 0.9995789399685704}, {"start": 431, "end": 437, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999438154427355}, {"start": 442, "end": 462, "word": "regular refrigerator", "entity_group": "VAR", "score": 0.9998635570961983}, {"start": 473, "end": 475, "word": "50", "entity_group": "PARAM", "score": 0.9996985564408983}, {"start": 484, "end": 490, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999493799402049}, {"start": 495, "end": 526, "word": "energy - efficient refrigerator", "entity_group": "VAR", "score": 0.9975334423177449}, {"start": 537, "end": 539, "word": "80", "entity_group": "PARAM", "score": 0.9996734584687758}, {"start": 596, "end": 604, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040367392}, {"start": 605, "end": 611, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}]}
{"doc_id": "-1278751305", "document": "James is following a fitness plan and has decided to mix two brands of protein drinks to create a new mixture. The Delta brand costs $2.5 per can and contains 8 units of protein, 7 units of carbs, and 5 units of fat. The Phi brand costs $4 per can and contains 12 units of protein, 5 units of carbs, and 7 units of fat. James wants to create a mixture having at least 80 units of protein, 50 units of carbs, and 65 units of fat. How many cans of each brand of drink should be mixed to create the new mixture at minimum cost?", "order_mapping": {"Delta brand": 0, "Phi brand": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Delta brand": "2.5", "Phi brand": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "80", "terms": {"Delta brand": "8", "Phi brand": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"Delta brand": "7", "Phi brand": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "65", "terms": {"Delta brand": "5", "Phi brand": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cans of Delta brand protein drink\n- y: Number of cans of Phi brand protein drink\n\nObjective:\n- James wants to minimize the cost of creating the new mixture. The Delta brand costs $2.5 per can and the Phi brand costs $4 per can. Therefore, the objective function is: Minimize 2.5x + 4y\n\nConstraints:\n- The new mixture should have at least 80 units of protein, 50 units of carbs, and 65 units of fat. This leads to the following constraints:\n    - 8x + 12y >= 80 (protein constraint)\n    - 7x + 5y >= 50 (carbs constraint)\n    - 5x + 7y >= 65 (fat constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2.5x + 4y\nConstraints:\n8x + 12y >= 80\n7x + 5y >= 50\n5x + 7y >= 65", "canonical": {"objective": [2.5, 4.0], "constraints": [[-8.0, -12.0, -80.0], [-7.0, -5.0, -50.0], [-5.0, -7.0, -65.0]]}, "solution": {"x": 13, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Delta brand cans: DeltaBrand\n- Number of Phi brand cans: PhiBrand\n\nConstraints:\n- Protein requirement: at least 80 units of protein\n  8 * DeltaBrand + 12 * PhiBrand >= 80\n- Carbs requirement: at least 50 units of carbs\n  7 * DeltaBrand + 5 * PhiBrand >= 50\n- Fat requirement: at least 65 units of fat\n  5 * DeltaBrand + 7 * PhiBrand >= 65\n\nObjective:\n- Minimize cost (Delta brand costs $2.5 per can, Phi brand costs $4 per can)\n  2.5 * DeltaBrand + 4 * PhiBrand\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDeltaBrand = intvar(0, 999999999)  # Number of Delta brand cans\nPhiBrand = intvar(0, 999999999)  # Number of Phi brand cans\n\n# Constraints\nm = Model()\n\n# Protein constraint: at least 80 units of protein\nm += 8 * DeltaBrand + 12 * PhiBrand >= 80\n# Carbs constraint: at least 50 units of carbs\nm += 7 * DeltaBrand + 5 * PhiBrand >= 50\n# Fat constraint: at least 65 units of fat\nm += 5 * DeltaBrand + 7 * PhiBrand >= 65\n\n# Objective\n# Minimize cost (Delta brand costs $2.5 per can, Phi brand costs $4 per can)\nm.minimize(2.5 * DeltaBrand + 4 * PhiBrand)\n", "entities": [{"start": 116, "end": 127, "word": "Delta brand", "entity_group": "VAR", "score": 0.9999525127596043}, {"start": 128, "end": 133, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9984279457161513}, {"start": 136, "end": 139, "word": "2.5", "entity_group": "PARAM", "score": 0.999581268464192}, {"start": 161, "end": 162, "word": "8", "entity_group": "PARAM", "score": 0.9997043474137762}, {"start": 182, "end": 183, "word": "7", "entity_group": "PARAM", "score": 0.9997340463577716}, {"start": 205, "end": 206, "word": "5", "entity_group": "PARAM", "score": 0.9995843224414914}, {"start": 226, "end": 235, "word": "Phi brand", "entity_group": "VAR", "score": 0.9999448877520526}, {"start": 236, "end": 241, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988042490937824}, {"start": 244, "end": 245, "word": "4", "entity_group": "PARAM", "score": 0.999392142146078}, {"start": 267, "end": 269, "word": "12", "entity_group": "PARAM", "score": 0.9997043486558203}, {"start": 289, "end": 290, "word": "5", "entity_group": "PARAM", "score": 0.9997340463577721}, {"start": 312, "end": 313, "word": "7", "entity_group": "PARAM", "score": 0.99953538720918}, {"start": 368, "end": 376, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990766114828925}, {"start": 377, "end": 379, "word": "80", "entity_group": "LIMIT", "score": 0.9997392458446263}, {"start": 399, "end": 401, "word": "50", "entity_group": "LIMIT", "score": 0.9997456440947248}, {"start": 423, "end": 425, "word": "65", "entity_group": "LIMIT", "score": 0.9994777151410261}, {"start": 523, "end": 530, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9895152375180384}, {"start": 531, "end": 535, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986899991174393}]}
{"doc_id": "-1542644642", "document": "Amanda has 4000 acres of land to grow apple and peach trees. Apple trees cost $50 for their saplings, and they take 3 hours to maintain per acre. Peach trees cost $80 for their saplings and take 5 hours to maintain per acre. Amanda has a budget of $30000 for saplings and has 600 available hours for maintenance. If the profit per acre of apples is $15 and the profit per acre of peaches is $25, how many acres of each should be grown to maximize profit?", "order_mapping": {"apple": 0, "peach trees": 1, "Apple trees": 0, "Peach trees": 1, "apples": 0, "peaches": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peaches": "25", "apples": "15"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "30000", "terms": {"Apple trees": "50", "Peach trees": "80"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"Apple trees": "3", "Peach trees": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "4000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land for apple trees\n- y: Acres of land for peach trees\n\nObjective:\n- The objective is to maximize the profit. The profit per acre of apples is $15 and the profit per acre of peaches is $25. Therefore, the objective function is: Maximize 15x + 25y\n\nConstraints:\n- Amanda has a budget of $30000 for saplings, leading to the constraint: 50x + 80y <= 30000.\n- Amanda has 600 available hours for maintenance, resulting in the constraint: 3x + 5y <= 600.\n- Amanda has 4000 acres of land available for growing apple and peach trees, leading to the constraint: x + y <= 4000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 15x + 25y\nConstraints:\n50x + 80y <= 30000\n3x + 5y <= 600\nx + y <= 4000", "canonical": {"objective": [-15.0, -25.0], "constraints": [[50.0, 80.0, 30000.0], [3.0, 5.0, 600.0], [1.0, 1.0, 4000.0]]}, "solution": {"x": 0, "y": 120}, "pseudo_model": "\nDecision Variables:\n- Number of acres for apple trees: AppleAcres\n- Number of acres for peach trees: PeachAcres\n\nConstraints:\n- Total acres used should not exceed 4000:\n  AppleAcres + PeachAcres <= 4000\n- Budget constraint for saplings ($50 for apple and $80 for peach per acre):\n  50 * AppleAcres + 80 * PeachAcres <= 30000\n- Maintenance hours constraint (3 hours for apple and 5 hours for peach per acre):\n  3 * AppleAcres + 5 * PeachAcres <= 600\n\nObjective:\n- Maximize profit ($15 per acre for apples and $25 per acre for peaches):\n  15 * AppleAcres + 25 * PeachAcres\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAppleAcres = intvar(0, 999999999)  # Number of acres for apple trees\nPeachAcres = intvar(0, 999999999)  # Number of acres for peach trees\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 4000:\nm += AppleAcres + PeachAcres <= 4000\n# Budget constraint for saplings ($50 for apple and $80 for peach per acre):\nm += 50 * AppleAcres + 80 * PeachAcres <= 30000\n# Maintenance hours constraint (3 hours for apple and 5 hours for peach per acre):\nm += 3 * AppleAcres + 5 * PeachAcres <= 600\n\n# Objective\n# Maximize profit ($15 per acre for apples and $25 per acre for peaches):\nm.maximize(15 * AppleAcres + 25 * PeachAcres)\n", "entities": [{"start": 7, "end": 10, "word": "has", "entity_group": "CONST_DIR", "score": 0.9939757962222633}, {"start": 11, "end": 15, "word": "4000", "entity_group": "LIMIT", "score": 0.9987518054319258}, {"start": 38, "end": 43, "word": "apple", "entity_group": "VAR", "score": 0.9982955081864515}, {"start": 48, "end": 59, "word": "peach trees", "entity_group": "VAR", "score": 0.9999827132882875}, {"start": 62, "end": 73, "word": "Apple trees", "entity_group": "VAR", "score": 0.9999803697894031}, {"start": 81, "end": 83, "word": "50", "entity_group": "PARAM", "score": 0.9995627466827108}, {"start": 119, "end": 120, "word": "3", "entity_group": "PARAM", "score": 0.9996508212869141}, {"start": 150, "end": 161, "word": "Peach trees", "entity_group": "VAR", "score": 0.9999636882921097}, {"start": 169, "end": 171, "word": "80", "entity_group": "PARAM", "score": 0.999671749481008}, {"start": 200, "end": 201, "word": "5", "entity_group": "PARAM", "score": 0.9997064262854949}, {"start": 244, "end": 250, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9988792281749954}, {"start": 256, "end": 261, "word": "30000", "entity_group": "LIMIT", "score": 0.998052728402915}, {"start": 283, "end": 286, "word": "600", "entity_group": "LIMIT", "score": 0.9997595189011408}, {"start": 287, "end": 296, "word": "available", "entity_group": "CONST_DIR", "score": 0.9948262596281348}, {"start": 328, "end": 334, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999264521999911}, {"start": 347, "end": 353, "word": "apples", "entity_group": "VAR", "score": 0.9994952128917539}, {"start": 359, "end": 361, "word": "15", "entity_group": "PARAM", "score": 0.9992430237606268}, {"start": 370, "end": 376, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999355073713111}, {"start": 389, "end": 396, "word": "peaches", "entity_group": "VAR", "score": 0.9994301892844142}, {"start": 402, "end": 404, "word": "25", "entity_group": "PARAM", "score": 0.9995826668131577}, {"start": 449, "end": 457, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694963358727}, {"start": 458, "end": 464, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856883212}]}
{"doc_id": "1477942004", "document": "An artist uses cotton to make both mini bears and dogs. Each mini bear requires 8 units of cotton and each mini dog requires 7 units of cotton. The artist has available 400 units of cotton. However, due to time constraints, the artist can make at most 40 animals total. If the profit per mini bear sold is $40 and the profit per mini dog sold is $47, how many of each should the artist make to maximize profit?", "order_mapping": {"mini bears": 0, "dogs": 1, "mini bear": 0, "mini dog": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mini bear": "40", "mini dog": "47"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"mini bear": "8", "mini dog": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "40", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of mini bears\n- y: Number of mini dogs\n\nObjective:\n- The artist aims to maximize profit. The profit per mini bear sold is $40 and the profit per mini dog sold is $47. Therefore, the objective function is: Maximize 40x + 47y\n\nConstraints:\n- The artist has 400 units of cotton available, and each mini bear requires 8 units of cotton and each mini dog requires 7 units of cotton. This leads to the constraint: 8x + 7y <= 400.\n- Due to time constraints, the artist can make at most 40 animals total, resulting in the constraint: x + y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 40x + 47y\nConstraints:\n8x + 7y <= 400\nx + y <= 40", "canonical": {"objective": [-40.0, -47.0], "constraints": [[8.0, 7.0, 400.0], [1.0, 1.0, 40.0]]}, "solution": {"x": 0, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of mini bears made: MiniBears\n- Number of mini dogs made: MiniDogs\n\nConstraints:\n- The total cotton used for both mini bears and mini dogs should not exceed 400 units:\n  8 * MiniBears + 7 * MiniDogs <= 400\n- The total number of animals (mini bears and mini dogs) made should not exceed 40:\n  MiniBears + MiniDogs <= 40\n\nObjective:\n- Maximize profit (40 dollars per mini bear, 47 dollars per mini dog):\n  40 * MiniBears + 47 * MiniDogs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMiniBears = intvar(0, 999999999)  # Number of mini bears made\nMiniDogs = intvar(0, 999999999)  # Number of mini dogs made\n\n# Constraints\nm = Model()\n\n# The total cotton used for both mini bears and mini dogs should not exceed 400 units:\nm += 8 * MiniBears + 7 * MiniDogs <= 400\n# The total number of animals (mini bears and mini dogs) made should not exceed 40:\nm += MiniBears + MiniDogs <= 40\n\n# Objective\n# Maximize profit (40 dollars per mini bear, 47 dollars per mini dog):\nm.maximize(40 * MiniBears + 47 * MiniDogs)\n", "entities": [{"start": 35, "end": 45, "word": "mini bears", "entity_group": "VAR", "score": 0.9998172274582593}, {"start": 50, "end": 54, "word": "dogs", "entity_group": "VAR", "score": 0.9997165657418027}, {"start": 62, "end": 71, "word": "mini bear", "entity_group": "VAR", "score": 0.9999773899309703}, {"start": 81, "end": 82, "word": "8", "entity_group": "PARAM", "score": 0.9996709489009387}, {"start": 108, "end": 116, "word": "mini dog", "entity_group": "VAR", "score": 0.99990731665981}, {"start": 126, "end": 127, "word": "7", "entity_group": "PARAM", "score": 0.9995375313880078}, {"start": 161, "end": 170, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987415774623248}, {"start": 171, "end": 174, "word": "400", "entity_group": "LIMIT", "score": 0.9993121591839702}, {"start": 249, "end": 256, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986567562097024}, {"start": 257, "end": 259, "word": "40", "entity_group": "LIMIT", "score": 0.9996980699189004}, {"start": 283, "end": 289, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999770239236709}, {"start": 294, "end": 303, "word": "mini bear", "entity_group": "VAR", "score": 0.9998512810190534}, {"start": 314, "end": 316, "word": "40", "entity_group": "PARAM", "score": 0.9996390124530892}, {"start": 325, "end": 331, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999938728180711}, {"start": 336, "end": 344, "word": "mini dog", "entity_group": "VAR", "score": 0.9995256212909818}, {"start": 355, "end": 357, "word": "47", "entity_group": "PARAM", "score": 0.9996832666091992}, {"start": 403, "end": 411, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 412, "end": 418, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "789654879", "document": "A fragrance shop makes a mixture of perfume using essential oils and fruit scents. A unit of essential oil contains 3 units of aromatic notes and lasts up to 9 hours. A unit of fruit scent has 10 units of aromatic notes but lasts only for 4 hours. The shop wants to make sure that the mixture contains at least 6 units of aromatic notes and lasts at least for 7 hours.  The mixture can also contain at most 8 units of aromatic notes. If a unit of essential oil costs $3.50 and a unit of fruit scent costs $2, how many units of each ingredient should be used to minimize cost of the mixture?", "order_mapping": {"essential oils": 0, "fruit scents": 1, "essential oil": 0, "fruit scent": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"essential oil": "3.50", "fruit scent": "2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "6", "terms": {"essential oil": "3", "fruit scent": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "7", "terms": {"fruit scent": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "8", "terms": {"essential oil": "3", "fruit scent": "10"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of essential oils\n- y: Units of fruit scents\n\nObjective:\n- The shop aims to minimize the cost of the mixture. Given that a unit of essential oil costs $3.50 and a unit of fruit scent costs $2, the objective function is: Minimize 3.50x + 2y\n\nConstraints:\n- The mixture must contain at least 6 units of aromatic notes, which can be formulated as: 3x + 10y >= 6\n- The mixture must last at least 7 hours, which can be formulated as: 9x + 4y >= 7\n- The mixture can contain at most 8 units of aromatic notes, leading to the constraint: 3x + 10y <= 8\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3.50x + 2y\nConstraints:\n3x + 10y >= 6\n9x + 4y >= 7\n3x + 10y <= 8", "canonical": {"objective": [3.5, 2.0], "constraints": [[-3.0, -10.0, -6.0], [-9.0, -4.0, -7.0], [3.0, 10.0, 8.0]]}, "solution": {"x": 2, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of units of essential oil used: EssentialOil\n- Number of units of fruit scent used: FruitScent\n\nConstraints:\n- The mixture should contain at least 6 units of aromatic notes:\n  3 * EssentialOil + 10 * FruitScent >= 6\n- The mixture should last at least for 7 hours:\n  9 * EssentialOil + 4 * FruitScent >= 7\n- The mixture can contain at most 8 units of aromatic notes:\n  3 * EssentialOil + 10 * FruitScent <= 8\n\nObjective:\n- Minimize cost of the mixture (Essential oil costs $3.50 per unit, fruit scent costs $2 per unit):\n  3.5 * EssentialOil + 2 * FruitScent\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEssentialOil = intvar(0, 999999999)  # Number of units of essential oil\nFruitScent = intvar(0, 999999999)  # Number of units of fruit scent\n\n# Constraints\nm = Model()\n\n# The mixture should contain at least 6 units of aromatic notes:\nm += 3 * EssentialOil + 10 * FruitScent >= 6\n# The mixture should last at least for 7 hours:\n# Note: Only fruit scent contributes to the duration constraint directly, but essential oil's duration is not less than the requirement.\nm += 9 * EssentialOil + 4 * FruitScent >= 7\n# The mixture can contain at most 8 units of aromatic notes:\nm += 3 * EssentialOil + 10 * FruitScent <= 8\n\n# Objective\n# Minimize cost of the mixture (Essential oil costs $3.50 per unit, fruit scent costs $2 per unit):\nm.minimize(3.5 * EssentialOil + 2 * FruitScent)\n", "entities": [{"start": 50, "end": 64, "word": "essential oils", "entity_group": "VAR", "score": 0.9999598882126585}, {"start": 69, "end": 81, "word": "fruit scents", "entity_group": "VAR", "score": 0.9999886739170125}, {"start": 94, "end": 107, "word": "essential oil", "entity_group": "VAR", "score": 0.9999287490663636}, {"start": 117, "end": 118, "word": "3", "entity_group": "PARAM", "score": 0.9995849179062455}, {"start": 159, "end": 160, "word": "9", "entity_group": "LIMIT", "score": 0.9997865033480372}, {"start": 179, "end": 190, "word": "fruit scent", "entity_group": "VAR", "score": 0.9999667222133345}, {"start": 195, "end": 197, "word": "10", "entity_group": "PARAM", "score": 0.9996689771647964}, {"start": 241, "end": 242, "word": "4", "entity_group": "PARAM", "score": 0.9997035639129296}, {"start": 305, "end": 313, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990542771748839}, {"start": 314, "end": 315, "word": "6", "entity_group": "LIMIT", "score": 0.9997014463848375}, {"start": 350, "end": 358, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9974803048277646}, {"start": 363, "end": 364, "word": "7", "entity_group": "LIMIT", "score": 0.9996967875812491}, {"start": 402, "end": 409, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998777754594361}, {"start": 410, "end": 411, "word": "8", "entity_group": "LIMIT", "score": 0.9996725256114}, {"start": 451, "end": 464, "word": "essential oil", "entity_group": "VAR", "score": 0.9998609135597643}, {"start": 465, "end": 470, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9998071328882275}, {"start": 473, "end": 477, "word": "3.50", "entity_group": "PARAM", "score": 0.9996434686605561}, {"start": 492, "end": 503, "word": "fruit scent", "entity_group": "VAR", "score": 0.9999472986433444}, {"start": 504, "end": 509, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9998851322030831}, {"start": 512, "end": 513, "word": "2", "entity_group": "PARAM", "score": 0.9996818875890897}, {"start": 568, "end": 576, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.991658535167469}, {"start": 577, "end": 581, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9774519621309171}]}
{"doc_id": "-1202959445", "document": "Theta Fishing wants to transport their catch. They can either use freight trains or cargo ships. Freight trains can take 2000 fish per trip while cargo ships can take 7000 fish per trip. The cost per trip for freight trains is $100 while the cost per trip for cargo ships is $180. The budget is at most $1500 and the number of freight train trips must be less than the number of cargo ship trips. Formulate an LP to maximize the number of fish that can be transported.", "order_mapping": {"freight trains": 0, "cargo ships": 1, "Freight trains": 0, "freight train": 0, "cargo ship": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of fish", "terms": {"cargo ships": "7000", "Freight trains": "2000"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "1500", "terms": {"freight trains": "100", "cargo ships": "180"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "freight train", "direction": "less than", "y_var": "cargo ship", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of trips by freight trains\n- y: Number of trips by cargo ships\n\nObjective:\n- The objective is to maximize the number of fish that can be transported. Freight trains can take 2000 fish per trip, and cargo ships can take 7000 fish per trip. Therefore, the objective function is: Maximize 2000x + 7000y\n\nConstraints:\n- The budget is at most $1500, and the cost per trip for freight trains is $100, and for cargo ships is $180. This leads to the constraint: 100x + 180y <= 1500.\n- The number of freight train trips must be less than the number of cargo ship trips, leading to the constraint: x <= y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2000x + 7000y\nConstraints:\n100x + 180y <= 1500\nx <= y", "canonical": {"objective": [-2000.0, -7000.0], "constraints": [[100.0, 180.0, 1500.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 0, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of freight train trips: FreightTrains\n- Number of cargo ship trips: CargoShips\n\nConstraints:\n- The budget for transportation is at most $1500:\n  100 * FreightTrains + 180 * CargoShips <= 1500\n- The number of freight train trips must be less than the number of cargo ship trips:\n  FreightTrains < CargoShips\n\nObjective:\n- Maximize the number of fish that can be transported (2000 fish per freight train trip, 7000 fish per cargo ship trip):\n  2000 * FreightTrains + 7000 * CargoShips\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFreightTrains = intvar(0, 999999999)  # Number of freight train trips\nCargoShips = intvar(0, 999999999)  # Number of cargo ship trips\n\n# Constraints\nm = Model()\n\n# The budget for transportation is at most $1500:\nm += 100 * FreightTrains + 180 * CargoShips <= 1500\n# The number of freight train trips must be less than the number of cargo ship trips:\nm += FreightTrains < CargoShips\n\n# Objective\n# Maximize the number of fish that can be transported (2000 fish per freight train trip, 7000 fish per cargo ship trip):\nm.maximize(2000 * FreightTrains + 7000 * CargoShips)\n", "entities": [{"start": 67, "end": 81, "word": "freight trains", "entity_group": "VAR", "score": 0.999971496432893}, {"start": 85, "end": 96, "word": "cargo ships", "entity_group": "VAR", "score": 0.999975938384111}, {"start": 99, "end": 113, "word": "Freight trains", "entity_group": "VAR", "score": 0.9999789456259371}, {"start": 123, "end": 127, "word": "2000", "entity_group": "PARAM", "score": 0.9994853210230106}, {"start": 128, "end": 132, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.9889154189824619}, {"start": 148, "end": 159, "word": "cargo ships", "entity_group": "VAR", "score": 0.9999645591553472}, {"start": 169, "end": 173, "word": "7000", "entity_group": "PARAM", "score": 0.999033659978515}, {"start": 174, "end": 178, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.9942682885888519}, {"start": 212, "end": 226, "word": "freight trains", "entity_group": "VAR", "score": 0.9999569668042599}, {"start": 232, "end": 235, "word": "100", "entity_group": "PARAM", "score": 0.9996456722918405}, {"start": 264, "end": 275, "word": "cargo ships", "entity_group": "VAR", "score": 0.9999212267211008}, {"start": 281, "end": 284, "word": "180", "entity_group": "PARAM", "score": 0.9997379497464485}, {"start": 301, "end": 308, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9924763077771839}, {"start": 311, "end": 315, "word": "1500", "entity_group": "LIMIT", "score": 0.9989209770402794}, {"start": 334, "end": 347, "word": "freight train", "entity_group": "VAR", "score": 0.9999923332196625}, {"start": 362, "end": 371, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9829158531778647}, {"start": 386, "end": 396, "word": "cargo ship", "entity_group": "VAR", "score": 0.9999936464745952}, {"start": 424, "end": 432, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994443826912086}, {"start": 437, "end": 451, "word": "number of fish", "entity_group": "OBJ_NAME", "score": 0.9874527739982558}]}
{"doc_id": "1864501490", "document": "An investor has $500000 to invest in two software companies, company A and company B. He has decided to invest at least two times as much money in company A than in company B. In addition, he can invest at most $200000 in company B. If investments in company A yield 9% returns and investments in company B yield 12% returns, how much should he invest in each to maximize earnings?", "order_mapping": {"company A": 0, "company B.": 1, "company B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"company A": "9%", "company B": "12%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "500000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "company A", "direction": "at least", "param": "two times", "y_var": "company B.", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "200000", "var": "company B.", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in company A\n- y: Dollars invested in company B\n\nObjective:\n- The investor aims to maximize his earnings. The returns on investments in company A and company B are 9% and 12% respectively. Therefore, the objective function is: Maximize 0.09x + 0.12y\n\nConstraints:\n- The investor has $500,000 to invest, so the constraint is: x + y <= 500000.\n- He has decided to invest at least two times as much money in company A than in company B, leading to the constraint: x >= 2y.\n- He can invest at most $200,000 in company B, resulting in the constraint: y <= 200000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.09x + 0.12y\nConstraints:\nx + y <= 500000\nx >= 2y\ny <= 200000", "canonical": {"objective": [-0.09, -0.12], "constraints": [[1.0, 1.0, 500000.0], [-1.0, 2.0, 0.0], [0.0, 1.0, 200000.0]]}, "solution": {"x": 333334, "y": 166666}, "pseudo_model": "\nDecision Variables:\n- Amount invested in company A: CompanyA\n- Amount invested in company B: CompanyB\n\nConstraints:\n- Total investment should not exceed $500000:\n  CompanyA + CompanyB <= 500000\n- Investment in company A should be at least two times the investment in company B:\n  CompanyA >= 2 * CompanyB\n- Investment in company B should be at most $200000:\n  CompanyB <= 200000\n\nObjective:\n- Maximize earnings (9% returns from company A, 12% returns from company B):\n  0.09 * CompanyA + 0.12 * CompanyB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCompanyA = intvar(0, 999999999)  # Amount invested in company A\nCompanyB = intvar(0, 999999999)  # Amount invested in company B\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $500000:\nm += CompanyA + CompanyB <= 500000\n# Investment in company A should be at least two times the investment in company B:\nm += CompanyA >= 2 * CompanyB\n# Investment in company B should be at most $200000:\nm += CompanyB <= 200000\n\n# Objective\n# Maximize earnings (9% returns from company A, 12% returns from company B):\nm.maximize(0.09 * CompanyA + 0.12 * CompanyB)\n", "entities": [{"start": 12, "end": 15, "word": "has", "entity_group": "CONST_DIR", "score": 0.9972044245809247}, {"start": 18, "end": 24, "word": "500000", "entity_group": "LIMIT", "score": 0.9994666773573722}, {"start": 63, "end": 72, "word": "company A", "entity_group": "VAR", "score": 0.9999408860820047}, {"start": 77, "end": 87, "word": "company B.", "entity_group": "VAR", "score": 0.9999027015682431}, {"start": 113, "end": 121, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973258308537479}, {"start": 122, "end": 131, "word": "two times", "entity_group": "PARAM", "score": 0.8028251628082742}, {"start": 149, "end": 158, "word": "company A", "entity_group": "VAR", "score": 0.9998675103735211}, {"start": 167, "end": 177, "word": "company B.", "entity_group": "VAR", "score": 0.9997334730070596}, {"start": 206, "end": 213, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9957087399965948}, {"start": 216, "end": 222, "word": "200000", "entity_group": "LIMIT", "score": 0.9969590019143287}, {"start": 226, "end": 236, "word": "company B.", "entity_group": "VAR", "score": 0.999880234738422}, {"start": 255, "end": 264, "word": "company A", "entity_group": "VAR", "score": 0.9999676383972185}, {"start": 271, "end": 274, "word": "9 %", "entity_group": "PARAM", "score": 0.9742847516455612}, {"start": 275, "end": 282, "word": "returns", "entity_group": "OBJ_NAME", "score": 0.9488826797663232}, {"start": 302, "end": 311, "word": "company B", "entity_group": "VAR", "score": 0.9997791380739707}, {"start": 318, "end": 322, "word": "12 %", "entity_group": "PARAM", "score": 0.9938511140717718}, {"start": 323, "end": 330, "word": "returns", "entity_group": "OBJ_NAME", "score": 0.9844042374239517}, {"start": 370, "end": 378, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996421443402658}, {"start": 379, "end": 387, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.990124867327053}]}
{"doc_id": "1448763159", "document": "A dessert restaurant makes cakes and cupcakes. Each type of dessert requires time in the oven and cooling rack. A batch of cupcakes requires 20 minutes in the oven and 60 minutes cooling. A batch of cakes requires 60 minutes in the oven and 120 minutes cooling. Additionally, the oven is available for 9000 minutes per month, the cooling rack is available for 12000 minutes per month. If the profit per batch of cupcakes is $10 and the profit per batch of cake is $25, how many batches of each should be made to maximize profit?", "order_mapping": {"cakes": 0, "cupcakes": 1, "cake": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"cupcakes": "10", "cake": "25"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "9000", "terms": {"cupcakes": "20", "cakes": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "12000", "terms": {"cakes": "120", "cupcakes": "60"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Batches of cakes\n- y: Batches of cupcakes\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per batch of cupcakes is $10 and the profit per batch of cake is $25. Therefore, the objective function is: Maximize 25x + 10y\n\nConstraints:\n- The oven is available for 9000 minutes per month, and each batch of cakes requires 60 minutes in the oven and each batch of cupcakes requires 20 minutes in the oven. This leads to the constraint: 60x + 20y <= 9000.\n- The cooling rack is available for 12000 minutes per month, and each batch of cakes requires 120 minutes on the cooling rack and each batch of cupcakes requires 60 minutes on the cooling rack. This results in the constraint: 120x + 60y <= 12000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25x + 10y\nConstraints:\n60x + 20y <= 9000\n120x + 60y <= 12000", "canonical": {"objective": [-25.0, -10.0], "constraints": [[60.0, 20.0, 9000.0], [120.0, 60.0, 12000.0]]}, "solution": {"x": 100, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of cake batches made: Cakes\n- Number of cupcake batches made: Cupcakes\n\nConstraints:\n- Oven time for cakes and cupcakes should not exceed 9000 minutes per month:\n  60 * Cakes + 20 * Cupcakes <= 9000\n- Cooling rack time for cakes and cupcakes should not exceed 12000 minutes per month:\n  120 * Cakes + 60 * Cupcakes <= 12000\n\nObjective:\n- Maximize profit ($25 per cake batch and $10 per cupcake batch):\n  25 * Cakes + 10 * Cupcakes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCakes = intvar(0, 999999999)  # Number of cake batches made\nCupcakes = intvar(0, 999999999)  # Number of cupcake batches made\n\n# Constraints\nm = Model()\n\n# Oven time constraint: 60 minutes for cakes and 20 minutes for cupcakes, available for 9000 minutes per month\nm += (60 * Cakes + 20 * Cupcakes) <= 9000\n# Cooling rack time constraint: 120 minutes for cakes and 60 minutes for cupcakes, available for 12000 minutes per month\nm += (120 * Cakes + 60 * Cupcakes) <= 12000\n\n# Objective\n# Maximize profit: $25 per cake batch and $10 per cupcake batch\nm.maximize(25 * Cakes + 10 * Cupcakes)\n", "entities": [{"start": 27, "end": 32, "word": "cakes", "entity_group": "VAR", "score": 0.9993653150142543}, {"start": 37, "end": 45, "word": "cupcakes", "entity_group": "VAR", "score": 0.9994303402160372}, {"start": 125, "end": 133, "word": "cupcakes", "entity_group": "VAR", "score": 0.9981096887219563}, {"start": 143, "end": 145, "word": "20", "entity_group": "PARAM", "score": 0.9996349905769598}, {"start": 170, "end": 172, "word": "60", "entity_group": "PARAM", "score": 0.9996047475760557}, {"start": 202, "end": 207, "word": "cakes", "entity_group": "VAR", "score": 0.9991520286646627}, {"start": 217, "end": 219, "word": "60", "entity_group": "PARAM", "score": 0.9996350021407743}, {"start": 244, "end": 247, "word": "120", "entity_group": "PARAM", "score": 0.9995486856620203}, {"start": 293, "end": 302, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992902631866758}, {"start": 307, "end": 311, "word": "9000", "entity_group": "LIMIT", "score": 0.9997140245762979}, {"start": 352, "end": 361, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994505167597127}, {"start": 366, "end": 371, "word": "12000", "entity_group": "LIMIT", "score": 0.9995299947197736}, {"start": 399, "end": 405, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999238122836424}, {"start": 419, "end": 427, "word": "cupcakes", "entity_group": "VAR", "score": 0.9994481868638526}, {"start": 433, "end": 435, "word": "10", "entity_group": "PARAM", "score": 0.9992433629975758}, {"start": 444, "end": 450, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999253859308979}, {"start": 464, "end": 468, "word": "cake", "entity_group": "VAR", "score": 0.9991141345806135}, {"start": 474, "end": 476, "word": "25", "entity_group": "PARAM", "score": 0.9995504149914424}, {"start": 522, "end": 530, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 531, "end": 537, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}]}
{"doc_id": "-939257051", "document": "Amazing Arts makes large and small artworks. The store has available 200 units of paint, 100 units of glitter, and 80 units of glue. To make a large artwork requires 5 units of paint, 3 units of glitter, and 4 units of glue. To make a small artwork requires 3 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of large artworks and 10 units of small artworks. If the profit per large artwork is $200 and the profit per small artwork is $75, how many of each artwork should be made to maximize profit?", "order_mapping": {"large": 0, "small artworks": 1, "large artwork": 0, "small artwork": 1, "large artworks": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large artwork": "200", "small artwork": "75"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"large artwork": "5", "small artwork": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "100", "terms": {"large artwork": "3", "small artwork": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "80", "terms": {"large artwork": "3", "small artwork": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "large artworks", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "small artworks", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of large artworks\n- y: Number of small artworks\n\nObjective:\n- The store aims to maximize its profit. The profit per large artwork is $200 and the profit per small artwork is $75. Therefore, the objective function is: Maximize 200x + 75y\n\nConstraints:\n- The store has available 200 units of paint, 100 units of glitter, and 80 units of glue. To make a large artwork requires 5 units of paint, 3 units of glitter, and 4 units of glue, and to make a small artwork requires 3 units of paint, 1 unit of glitter, and 2 units of glue. These constraints can be formulated as:\n    - 5x + 3y <= 200 (paint constraint)\n    - 3x + y <= 100 (glitter constraint)\n    - 4x + 2y <= 80 (glue constraint)\n- The store must make at least 5 units of large artworks and 10 units of small artworks, leading to the constraints: x >= 5 and y >= 10.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 75y\nConstraints:\n5x + 3y <= 200\n3x + y <= 100\n4x + 2y <= 80\nx >= 5\ny >= 10", "canonical": {"objective": [-200.0, -75.0], "constraints": [[5.0, 3.0, 200.0], [3.0, 1.0, 100.0], [4.0, 2.0, 80.0], [-1.0, 0.0, -5.0], [0.0, -1.0, -10.0]]}, "solution": {"x": 15, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Number of large artworks made: LargeArtworks\n- Number of small artworks made: SmallArtworks\n\nConstraints:\n- Paint constraint (200 units available):\n  5 * LargeArtworks + 3 * SmallArtworks <= 200\n- Glitter constraint (100 units available):\n  3 * LargeArtworks + 1 * SmallArtworks <= 100\n- Glue constraint (80 units available):\n  4 * LargeArtworks + 2 * SmallArtworks <= 80\n- At least 5 large artworks must be made:\n  LargeArtworks >= 5\n- At least 10 small artworks must be made:\n  SmallArtworks >= 10\n\nObjective:\n- Maximize profit (200 dollars per large artwork, 75 dollars per small artwork):\n  200 * LargeArtworks + 75 * SmallArtworks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeArtworks = intvar(0, 999999999)  # Number of large artworks made\nSmallArtworks = intvar(0, 999999999)  # Number of small artworks made\n\n# Constraints\nm = Model()\n\n# Resource constraints based on available materials:\n# Paint constraint (200 units available):\nm += 5 * LargeArtworks + 3 * SmallArtworks <= 200\n# Glitter constraint (100 units available):\nm += 3 * LargeArtworks + 1 * SmallArtworks <= 100\n# Glue constraint (80 units available):\nm += 4 * LargeArtworks + 2 * SmallArtworks <= 80\n\n# Production constraints:\n# At least 5 large artworks must be made:\nm += LargeArtworks >= 5\n# At least 10 small artworks must be made:\nm += SmallArtworks >= 10\n\n# Objective\n# Maximize profit (200 dollars per large artwork, 75 dollars per small artwork):\nm.maximize(200 * LargeArtworks + 75 * SmallArtworks)\n", "entities": [{"start": 19, "end": 24, "word": "large", "entity_group": "VAR", "score": 0.9949926620084782}, {"start": 29, "end": 43, "word": "small artworks", "entity_group": "VAR", "score": 0.999974784634799}, {"start": 60, "end": 69, "word": "available", "entity_group": "CONST_DIR", "score": 0.9983994815313691}, {"start": 70, "end": 73, "word": "200", "entity_group": "LIMIT", "score": 0.9994180415746037}, {"start": 91, "end": 94, "word": "100", "entity_group": "LIMIT", "score": 0.9997548426062329}, {"start": 118, "end": 120, "word": "80", "entity_group": "LIMIT", "score": 0.9994661641673449}, {"start": 147, "end": 160, "word": "large artwork", "entity_group": "VAR", "score": 0.9999840509610686}, {"start": 170, "end": 171, "word": "5", "entity_group": "PARAM", "score": 0.9996365872282794}, {"start": 189, "end": 190, "word": "3", "entity_group": "PARAM", "score": 0.9997351602174135}, {"start": 214, "end": 215, "word": "4", "entity_group": "PARAM", "score": 0.9995430431535712}, {"start": 242, "end": 255, "word": "small artwork", "entity_group": "VAR", "score": 0.9999840510822147}, {"start": 265, "end": 266, "word": "3", "entity_group": "PARAM", "score": 0.9996334193427501}, {"start": 284, "end": 285, "word": "1", "entity_group": "PARAM", "score": 0.9996834959964241}, {"start": 308, "end": 309, "word": "2", "entity_group": "PARAM", "score": 0.9991253086782659}, {"start": 346, "end": 354, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989276864374887}, {"start": 355, "end": 356, "word": "5", "entity_group": "LIMIT", "score": 0.9997005580921628}, {"start": 366, "end": 380, "word": "large artworks", "entity_group": "VAR", "score": 0.9999742991710979}, {"start": 385, "end": 387, "word": "10", "entity_group": "LIMIT", "score": 0.9996867606659086}, {"start": 397, "end": 411, "word": "small artworks", "entity_group": "VAR", "score": 0.9999607414502028}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998964176233361}, {"start": 432, "end": 445, "word": "large artwork", "entity_group": "VAR", "score": 0.9999551255187148}, {"start": 451, "end": 454, "word": "200", "entity_group": "PARAM", "score": 0.9995698888999551}, {"start": 463, "end": 469, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998155593757364}, {"start": 474, "end": 487, "word": "small artwork", "entity_group": "VAR", "score": 0.9999521095192229}, {"start": 493, "end": 495, "word": "75", "entity_group": "PARAM", "score": 0.9996710469779467}, {"start": 541, "end": 549, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994907089477179}, {"start": 550, "end": 556, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998862371700117}]}
{"doc_id": "-534214523", "document": "Adrian needs to gain weight for a role and decides to eat only bagels and burgers. He wants to eat a minimum of 2500 calories per day and at least 500 grams of fat per day. Each bagel costs $4.5 and contains 250 calories and 15 grams of fat. Each burger costs $12 and contains 800 calories and 23.5 grams of fat. How many of each should Adrian eat to minimize costs?", "order_mapping": {"bagels": 0, "burgers": 1, "bagel": 0, "burger": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"bagel": "4.5", "burger": "12"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "2500", "terms": {"bagel": "250", "burger": "800"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"bagel": "15", "burger": "23.5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bagels\n- y: Number of burgers\n\nObjective:\n- Adrian wants to minimize his costs. Each bagel costs $4.5 and each burger costs $12. Therefore, the objective function is: Minimize 4.5x + 12y\n\nConstraints:\n- Adrian needs to consume a minimum of 2500 calories per day, which can be formulated as: 250x + 800y >= 2500.\n- Adrian also needs to consume at least 500 grams of fat per day, leading to the constraint: 15x + 23.5y >= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 4.5x + 12y\nConstraints:\n250x + 800y >= 2500\n15x + 23.5y >= 500", "canonical": {"objective": [4.5, 12.0], "constraints": [[-250.0, -800.0, -2500.0], [-15.0, -23.5, -500.0]]}, "solution": {"x": 34, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of bagels Adrian eats: Bagels\n- Number of burgers Adrian eats: Burgers\n\nConstraints:\n- Adrian needs a minimum of 2500 calories per day:\n  250 * Bagels + 800 * Burgers >= 2500\n- Adrian needs at least 500 grams of fat per day:\n  15 * Bagels + 23.5 * Burgers >= 500\n\nObjective:\n- Minimize costs (Each bagel costs $4.5 and each burger costs $12):\n  4.5 * Bagels + 12 * Burgers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBagels = intvar(0, 999999999)  # Number of bagels Adrian eats\nBurgers = intvar(0, 999999999)  # Number of burgers Adrian eats\n\n# Constraints\nm = Model()\n\n# Adrian wants to eat a minimum of 2500 calories per day:\nm += 250 * Bagels + 800 * Burgers >= 2500\n# Adrian wants to eat at least 500 grams of fat per day:\nm += 15 * Bagels + 23.5 * Burgers >= 500\n\n# Objective\n# Minimize costs (Each bagel costs $4.5 and each burger costs $12):\nm.minimize(4.5 * Bagels + 12 * Burgers)\n", "entities": [{"start": 63, "end": 69, "word": "bagels", "entity_group": "VAR", "score": 0.9997643318831624}, {"start": 74, "end": 81, "word": "burgers", "entity_group": "VAR", "score": 0.9989180331847113}, {"start": 102, "end": 109, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.997678743834707}, {"start": 113, "end": 117, "word": "2500", "entity_group": "LIMIT", "score": 0.9997547187931783}, {"start": 139, "end": 147, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993575855552066}, {"start": 148, "end": 151, "word": "500", "entity_group": "LIMIT", "score": 0.999735040613398}, {"start": 180, "end": 185, "word": "bagel", "entity_group": "VAR", "score": 0.9996778296060506}, {"start": 186, "end": 191, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9948282772597541}, {"start": 194, "end": 197, "word": "4.5", "entity_group": "PARAM", "score": 0.9996442624748877}, {"start": 211, "end": 214, "word": "250", "entity_group": "PARAM", "score": 0.9996904703287385}, {"start": 228, "end": 230, "word": "15", "entity_group": "PARAM", "score": 0.9996800805309255}, {"start": 251, "end": 257, "word": "burger", "entity_group": "VAR", "score": 0.9997384655173925}, {"start": 258, "end": 263, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9976781408024968}, {"start": 266, "end": 268, "word": "12", "entity_group": "PARAM", "score": 0.9997428121755204}, {"start": 282, "end": 285, "word": "800", "entity_group": "PARAM", "score": 0.999461678519506}, {"start": 299, "end": 303, "word": "23.5", "entity_group": "PARAM", "score": 0.9995574974038172}, {"start": 357, "end": 365, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997144354262286}, {"start": 366, "end": 371, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9988574104958219}]}
{"doc_id": "919309131", "document": "GrusCreation firm employs researchers and developers. Researchers earn $2500 per week while developers earn $1500 per week. The project requires at least 50 workers, of whom at least 30 must be developers. To achieve novelty in the project, the number of researchers must be at least a third of the number of developers. The company wants to keep the weekly payroll to be at most $250000. How can GrusCreation firm employ the different type of staff to minimize wages.", "order_mapping": {"researchers": 0, "developers": 1, "Researchers": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "wages", "terms": {"Researchers": "2500", "developers": "1500"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "developers", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "researchers", "direction": "at least", "param": "third", "y_var": "developers", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "250000", "terms": {"Researchers": "2500", "developers": "1500"}, "operator": "LESS_OR_EQUAL"}], "explanation": "To minimize the wages while meeting the given constraints, we can formulate the following linear programming model:\n\nVariables:\n- x: Number of researchers\n- y: Number of developers\n\nObjective:\n- Minimize the weekly wage bill, which comprises the wages for both researchers and developers. Given that researchers earn $2500 per week and developers earn $1500 per week, the objective function is: Minimize 2500x + 1500y\n\nConstraints:\n1. The project requires at least 50 workers, so the constraint is: x + y >= 50.\n2. At least 30 workers must be developers, leading to the constraint: y >= 30.\n3. To achieve novelty in the project, the number of researchers must be at least a third of the number of developers, resulting in the constraint: x >= 1/3y.\n4. The total weekly payroll should be at most $250,000, leading to the constraint: 2500x + 1500y <= 250000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2500x + 1500y\nConstraints:\nx + y >= 50\ny >= 30\nx >= 1/3y\n2500x + 1500y <= 250000", "canonical": {"objective": [2500.0, 1500.0], "constraints": [[-1.0, -1.0, -50.0], [0.0, -1.0, -30.0], [-1.0, 0.3333333333333333, 0.0], [2500.0, 1500.0, 250000.0]]}, "solution": {"x": 13, "y": 37}, "pseudo_model": "\nDecision Variables:\n- Number of researchers employed: Researchers\n- Number of developers employed: Developers\n\nConstraints:\n- Total number of workers should be at least 50:\n  Researchers + Developers >= 50\n- At least 30 workers must be developers:\n  Developers >= 30\n- The number of researchers must be at least a third of the number of developers:\n  Researchers >= 1/3 * Developers\n- Total wages should be at most $250000 (Researchers earn $2500 per week and developers earn $1500 per week):\n  2500 * Researchers + 1500 * Developers <= 250000\n\nObjective: \n- Minimize the total wages (Researchers earn $2500 per week and developers earn $1500 per week):\n  2500 * Researchers + 1500 * Developers\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nResearchers = intvar(0, 999999999)  # number of researchers\nDevelopers = intvar(0, 999999999)  # number of developers\n\n# Constraints\nm = Model()\n\n# The project requires at least 50 workers:\nm += Researchers + Developers >= 50\n# At least 30 must be developers:\nm += Developers >= 30\n# The number of researchers must be at least a third of the number of developers:\nm += Researchers >= (1/3) * Developers\n# The company wants to keep the weekly payroll to be at most $250000 (Researchers earn $2500 per week and developers earn $1500 per week):\nm += 2500 * Researchers + 1500 * Developers <= 250000\n\n# Objective\n# Minimize the total wages (Researchers earn $2500 per week and developers earn $1500 per week):\nm.minimize(2500 * Researchers + 1500 * Developers)\n", "entities": [{"start": 26, "end": 37, "word": "researchers", "entity_group": "VAR", "score": 0.9996240835440915}, {"start": 42, "end": 52, "word": "developers", "entity_group": "VAR", "score": 0.9984795701839163}, {"start": 55, "end": 66, "word": "Researchers", "entity_group": "VAR", "score": 0.9996903786148656}, {"start": 67, "end": 71, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9885848073196932}, {"start": 74, "end": 78, "word": "2500", "entity_group": "PARAM", "score": 0.999674979967647}, {"start": 94, "end": 104, "word": "developers", "entity_group": "VAR", "score": 0.999808641926981}, {"start": 105, "end": 109, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9544339977999876}, {"start": 112, "end": 116, "word": "1500", "entity_group": "PARAM", "score": 0.9996278407418181}, {"start": 149, "end": 157, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987703606050817}, {"start": 158, "end": 160, "word": "50", "entity_group": "LIMIT", "score": 0.9997076282334826}, {"start": 179, "end": 187, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983151909240197}, {"start": 188, "end": 190, "word": "30", "entity_group": "LIMIT", "score": 0.9996913401850629}, {"start": 199, "end": 209, "word": "developers", "entity_group": "VAR", "score": 0.9997717136375185}, {"start": 262, "end": 273, "word": "researchers", "entity_group": "VAR", "score": 0.9991972088509449}, {"start": 282, "end": 290, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997056677063867}, {"start": 293, "end": 298, "word": "third", "entity_group": "PARAM", "score": 0.9969859299634078}, {"start": 316, "end": 326, "word": "developers", "entity_group": "VAR", "score": 0.9995703914076403}, {"start": 380, "end": 387, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9961221450292008}, {"start": 390, "end": 396, "word": "250000", "entity_group": "LIMIT", "score": 0.9996834261913967}, {"start": 463, "end": 471, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9995892791193548}, {"start": 472, "end": 477, "word": "wages", "entity_group": "OBJ_NAME", "score": 0.993999157487261}]}
{"doc_id": "365497562", "document": "A pie shop sells apple and peach pies. In a day, they must sell at least 15 apple pies and at least 12 peach pies. However, they can make at most 20 apple pies and at most 18 peach pies. In addition, they only have enough pie crusts to make 30 pies total of either type. If the profit per apple pie is $7 and the profit per peach pie is $8, how many of each should they make to maximize profit?", "order_mapping": {"apple": 0, "peach pies": 1, "apple pies": 0, "apple pie": 0, "peach pie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"peach pie": "8", "apple pie": "7"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "15", "var": "apple pies", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "peach pies", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "20", "var": "apple pies", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "18", "var": "peach pies", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "30", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of apple pies\n- y: Number of peach pies\n\nObjective:\n- The pie shop aims to maximize its profit. The profit per apple pie is $7 and the profit per peach pie is $8. Therefore, the objective function is: Maximize 7x + 8y\n\nConstraints:\n- At least 15 apple pies must be sold, leading to the constraint: x >= 15.\n- At least 12 peach pies must be sold, leading to the constraint: y >= 12.\n- At most 20 apple pies can be made, leading to the constraint: x <= 20.\n- At most 18 peach pies can be made, leading to the constraint: y <= 18.\n- The shop only has enough pie crusts to make 30 pies total, resulting in the constraint: x + y <= 30.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 7x + 8y\nConstraints:\nx >= 15\ny >= 12\nx <= 20\ny <= 18\nx + y <= 30", "canonical": {"objective": [-7.0, -8.0], "constraints": [[-1.0, 0.0, -15.0], [0.0, -1.0, -12.0], [1.0, 0.0, 20.0], [0.0, 1.0, 18.0], [1.0, 1.0, 30.0]]}, "solution": {"x": 15, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of apple pies made per day: ApplePies\n- Number of peach pies made per day: PeachPies\n\nConstraints:\n- At least 15 apple pies and at least 12 peach pies must be sold:\n  ApplePies >= 15\n  PeachPies >= 12\n- At most 20 apple pies and at most 18 peach pies can be made:\n  ApplePies <= 20\n  PeachPies <= 18\n- Only enough pie crusts to make 30 pies total:\n  ApplePies + PeachPies <= 30\n\nObjective:\n- Maximize profit (7 dollars per apple pie, 8 dollars per peach pie):\n  7 * ApplePies + 8 * PeachPies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nApplePies = intvar(0, 999999999)  # Number of apple pies made per day\nPeachPies = intvar(0, 999999999)  # Number of peach pies made per day\n\n# Constraints\nm = Model()\n\n# At least 15 apple pies and at least 12 peach pies must be sold:\nm += ApplePies >= 15\nm += PeachPies >= 12\n\n# At most 20 apple pies and at most 18 peach pies can be made:\nm += ApplePies <= 20\nm += PeachPies <= 18\n\n# Only enough pie crusts to make 30 pies total:\nm += ApplePies + PeachPies <= 30\n\n# Objective\n# Maximize profit (7 dollars per apple pie, 8 dollars per peach pie):\nm.maximize(7 * ApplePies + 8 * PeachPies)\n", "entities": [{"start": 17, "end": 22, "word": "apple", "entity_group": "VAR", "score": 0.9995351445467905}, {"start": 27, "end": 37, "word": "peach pies", "entity_group": "VAR", "score": 0.9999790857821459}, {"start": 66, "end": 74, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988089247853061}, {"start": 75, "end": 77, "word": "15", "entity_group": "LIMIT", "score": 0.999549440169864}, {"start": 78, "end": 88, "word": "apple pies", "entity_group": "VAR", "score": 0.9999556562324383}, {"start": 93, "end": 101, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988172993237714}, {"start": 102, "end": 104, "word": "12", "entity_group": "LIMIT", "score": 0.9992202412381554}, {"start": 105, "end": 115, "word": "peach pies", "entity_group": "VAR", "score": 0.9999510678666645}, {"start": 142, "end": 149, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984272150711739}, {"start": 150, "end": 152, "word": "20", "entity_group": "LIMIT", "score": 0.9995382756971904}, {"start": 153, "end": 163, "word": "apple pies", "entity_group": "VAR", "score": 0.9999573295749788}, {"start": 168, "end": 175, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988103757143494}, {"start": 176, "end": 178, "word": "18", "entity_group": "LIMIT", "score": 0.9994235462105165}, {"start": 179, "end": 189, "word": "peach pies", "entity_group": "VAR", "score": 0.9999422380603656}, {"start": 211, "end": 215, "word": "only", "entity_group": "CONST_DIR", "score": 0.9932176549065924}, {"start": 247, "end": 249, "word": "30", "entity_group": "LIMIT", "score": 0.9996670894588604}, {"start": 285, "end": 291, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99991906575979}, {"start": 296, "end": 305, "word": "apple pie", "entity_group": "VAR", "score": 0.9998866623031298}, {"start": 311, "end": 312, "word": "7", "entity_group": "PARAM", "score": 0.9996126029808496}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999111112748116}, {"start": 332, "end": 341, "word": "peach pie", "entity_group": "VAR", "score": 0.9998836790462086}, {"start": 347, "end": 348, "word": "8", "entity_group": "PARAM", "score": 0.999673537160741}, {"start": 388, "end": 396, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996898234579996}, {"start": 397, "end": 403, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999368911701516}]}
{"doc_id": "118743640", "document": "A sign shop makes storefront signs and street signs. Each requires time for cutting, printing, and assembly. Each storefront sign takes 2 hours of cutting, 1 hour of printing, and 2 hours of assembly. Each street sign takes 1 hour of cutting, 0.5 hours of printing, and 0.8 hours of assembly. The sign shop has 100 hours available for cutting, 50 hours available for printing, and 60 hours available for assembly. If the profit per storefront sign is $400 and the profit per street sign is $120, how many of each should be made to maximize profit?", "order_mapping": {"storefront signs": 0, "street signs": 1, "storefront sign": 0, "street sign": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"storefront sign": "400", "street sign": "120"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"storefront sign": "2", "street sign": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"storefront sign": "1", "street sign": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60", "terms": {"storefront sign": "2", "street sign": "0.8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of storefront signs\n- y: Number of street signs\n\nObjective:\n- The sign shop aims to maximize its profit. The profit per storefront sign is $400 and the profit per street sign is $120. Therefore, the objective function is: Maximize 400x + 120y\n\nConstraints:\n- The sign shop has 100 hours available for cutting, so the constraint is: 2x + y <= 100.\n- The sign shop has 50 hours available for printing, leading to the constraint: x + 0.5y <= 50.\n- The sign shop has 60 hours available for assembly, resulting in the constraint: 2x + 0.8y <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 120y\nConstraints:\n2x + y <= 100\nx + 0.5y <= 50\n2x + 0.8y <= 60", "canonical": {"objective": [-400.0, -120.0], "constraints": [[2.0, 1.0, 100.0], [1.0, 0.5, 50.0], [2.0, 0.8, 60.0]]}, "solution": {"x": 30, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of storefront signs made: StorefrontSigns\n- Number of street signs made: StreetSigns\n\nConstraints:\n- Cutting time for all signs should not exceed 100 hours:\n  2 * StorefrontSigns + 1 * StreetSigns <= 100\n- Printing time for all signs should not exceed 50 hours:\n  1 * StorefrontSigns + 0.5 * StreetSigns <= 50\n- Assembly time for all signs should not exceed 60 hours:\n  2 * StorefrontSigns + 0.8 * StreetSigns <= 60\n\nObjective:\n- Maximize profit (400 dollars per storefront sign, 120 dollars per street sign):\n  400 * StorefrontSigns + 120 * StreetSigns\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStorefrontSigns = intvar(0, 999999999)  # Number of storefront signs made\nStreetSigns = intvar(0, 999999999)  # Number of street signs made\n\n# Constraints\nm = Model()\n\n# Time constraints for cutting, printing, and assembly\nm += 2 * StorefrontSigns + 1 * StreetSigns <= 100  # Cutting time limit\nm += 1 * StorefrontSigns + 0.5 * StreetSigns <= 50  # Printing time limit\nm += 2 * StorefrontSigns + 0.8 * StreetSigns <= 60  # Assembly time limit\n\n# Objective\n# Maximize profit (400 dollars per storefront sign, 120 dollars per street sign):\nm.maximize(400 * StorefrontSigns + 120 * StreetSigns)\n", "entities": [{"start": 18, "end": 34, "word": "storefront signs", "entity_group": "VAR", "score": 0.9999650785843492}, {"start": 39, "end": 51, "word": "street signs", "entity_group": "VAR", "score": 0.9999873081251092}, {"start": 118, "end": 133, "word": "storefront sign", "entity_group": "VAR", "score": 0.9999795376372472}, {"start": 140, "end": 141, "word": "2", "entity_group": "PARAM", "score": 0.9996488239329092}, {"start": 161, "end": 162, "word": "1", "entity_group": "PARAM", "score": 0.9996525412992466}, {"start": 186, "end": 187, "word": "2", "entity_group": "PARAM", "score": 0.9996105765431496}, {"start": 213, "end": 224, "word": "street sign", "entity_group": "VAR", "score": 0.9999816607525022}, {"start": 231, "end": 232, "word": "1", "entity_group": "PARAM", "score": 0.9994708660335113}, {"start": 251, "end": 254, "word": "0.5", "entity_group": "PARAM", "score": 0.999719017522829}, {"start": 279, "end": 282, "word": "0.8", "entity_group": "PARAM", "score": 0.9995726685352958}, {"start": 321, "end": 324, "word": "100", "entity_group": "LIMIT", "score": 0.9997195525607642}, {"start": 331, "end": 340, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988251075244281}, {"start": 355, "end": 357, "word": "50", "entity_group": "LIMIT", "score": 0.9997253458950152}, {"start": 364, "end": 373, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991961137105183}, {"start": 393, "end": 395, "word": "60", "entity_group": "LIMIT", "score": 0.9997071534527594}, {"start": 402, "end": 411, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992476563316727}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999458613689451}, {"start": 445, "end": 460, "word": "storefront sign", "entity_group": "VAR", "score": 0.9999427041913845}, {"start": 466, "end": 469, "word": "400", "entity_group": "PARAM", "score": 0.9996400822466438}, {"start": 478, "end": 484, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999384731361836}, {"start": 489, "end": 500, "word": "street sign", "entity_group": "VAR", "score": 0.9999450048231512}, {"start": 506, "end": 509, "word": "120", "entity_group": "PARAM", "score": 0.999675780277594}, {"start": 547, "end": 555, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 556, "end": 562, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "-1294018002", "document": "Bob has 100 acres of agricultural land in which he wants to plant daisies and peonies. The seeds for daisies costs $20 per acre, whereas the seeds for peonies costs $35 per acre. The profit per acre of daisies is $55, whereas the profit for peonies is $80 an acre. If Bob has a maximum budget of $3000 to spend on seeds, determine how many daisies and peonies he needs to plant to maximize his profit.", "order_mapping": {"daisies": 0, "peonies": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"daisies": "55", "peonies": "80"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "3000", "terms": {"daisies": "20", "peonies": "35"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land planted with daisies\n- y: Acres of land planted with peonies\n\nObjective:\n- Bob wants to maximize his profit. The profit per acre of daisies is $55, and the profit for peonies is $80 an acre. Therefore, the objective function is: Maximize 55x + 80y\n\nConstraints:\n- Bob has 100 acres of agricultural land available, so the constraint is: x + y <= 100.\n- Bob has a maximum budget of $3000 to spend on seeds, which translates to the constraint: 20x + 35y <= 3000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 55x + 80y\nConstraints:\nx + y <= 100\n20x + 35y <= 3000", "canonical": {"objective": [-55.0, -80.0], "constraints": [[1.0, 1.0, 100.0], [20.0, 35.0, 3000.0]]}, "solution": {"x": 34, "y": 66}, "pseudo_model": "\nDecision Variables:\n- Number of acres planted with daisies: Daisies\n- Number of acres planted with peonies: Peonies\n\nConstraints:\n- Total acres of daisies and peonies should not exceed 100:\n  Daisies + Peonies <= 100\n- The cost of seeds for daisies and peonies should not exceed $3000 (Cost per acre: $20 for daisies, $35 for peonies):\n  20 * Daisies + 35 * Peonies <= 3000\n\nObjective:\n- Maximize profit (Profit per acre: $55 for daisies, $80 for peonies):\n  55 * Daisies + 80 * Peonies\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaisies = intvar(0, 999999999)  # Number of acres planted with daisies\nPeonies = intvar(0, 999999999)  # Number of acres planted with peonies\n\n# Constraints\nm = Model()\n\n# Total acres of daisies and peonies should not exceed 100:\nm += Daisies + Peonies <= 100\n# The cost of seeds for daisies and peonies should not exceed $3000:\nm += 20 * Daisies + 35 * Peonies <= 3000\n\n# Objective\n# Maximize profit (Profit per acre: $55 for daisies, $80 for peonies):\nm.maximize(55 * Daisies + 80 * Peonies)\n", "entities": [{"start": 4, "end": 7, "word": "has", "entity_group": "CONST_DIR", "score": 0.9976346103029174}, {"start": 8, "end": 11, "word": "100", "entity_group": "LIMIT", "score": 0.9985770700309414}, {"start": 66, "end": 73, "word": "daisies", "entity_group": "VAR", "score": 0.9983650555881507}, {"start": 78, "end": 85, "word": "peonies", "entity_group": "VAR", "score": 0.995782670401474}, {"start": 102, "end": 109, "word": "daisies", "entity_group": "VAR", "score": 0.999699696916217}, {"start": 118, "end": 120, "word": "20", "entity_group": "PARAM", "score": 0.9993981407650834}, {"start": 154, "end": 161, "word": "peonies", "entity_group": "VAR", "score": 0.9997619952284124}, {"start": 170, "end": 172, "word": "35", "entity_group": "PARAM", "score": 0.9993315409791784}, {"start": 188, "end": 194, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999900637769881}, {"start": 207, "end": 214, "word": "daisies", "entity_group": "VAR", "score": 0.9982558182217076}, {"start": 220, "end": 222, "word": "55", "entity_group": "PARAM", "score": 0.9996870478077579}, {"start": 237, "end": 243, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997445251581248}, {"start": 248, "end": 255, "word": "peonies", "entity_group": "VAR", "score": 0.9995978365672751}, {"start": 261, "end": 263, "word": "80", "entity_group": "PARAM", "score": 0.998594577232958}, {"start": 287, "end": 301, "word": "maximum budget", "entity_group": "CONST_DIR", "score": 0.6334588584398074}, {"start": 307, "end": 311, "word": "3000", "entity_group": "LIMIT", "score": 0.9987171410049241}, {"start": 351, "end": 358, "word": "daisies", "entity_group": "VAR", "score": 0.9998199390432954}, {"start": 363, "end": 370, "word": "peonies", "entity_group": "VAR", "score": 0.9991923957886787}, {"start": 392, "end": 400, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9986874704586837}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998674610905796}]}
{"doc_id": "-1680076123", "document": "An apple farm produces Granny Smith apples and McIntosh apples. They can make at most 100 kg of Granny Smith apples and at most 120 kg of McIntosh apples. In addition, they must supply at least 25 kg of Granny Smith apples and 50 kg of McIntosh apples per day. Both require time in a cleaning machine. Each kg of Granny Smith apples and McIntosh apples requires 3 hours at the cleaning machine. The cleaning machine is available for at most 15 hours per day. If the profit per kg of Granny Smith apples is $2 and the profit per kg of McIntosh apples is $1, how many kg of each should be made to maximize profit?", "order_mapping": {"Granny Smith apples": 0, "McIntosh apples": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Granny Smith apples": "2", "McIntosh apples": "1"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "Granny Smith apples", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "120", "var": "McIntosh apples", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "25", "var": "Granny Smith apples", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "McIntosh apples", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "15", "terms": {"Granny Smith apples": "3", "McIntosh apples": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of Granny Smith apples produced\n- y: kg of McIntosh apples produced\n\nObjective:\n- The farm aims to maximize its profit. The profit per kg of Granny Smith apples is $2 and the profit per kg of McIntosh apples is $1. Therefore, the objective function is: Maximize 2x + y\n\nConstraints:\n- The farm can produce at most 100 kg of Granny Smith apples, leading to the constraint: x <= 100.\n- The farm can produce at most 120 kg of McIntosh apples, leading to the constraint: y <= 120.\n- The farm must supply at least 25 kg of Granny Smith apples, leading to the constraint: x >= 25.\n- The farm must supply at least 50 kg of McIntosh apples, leading to the constraint: y >= 50.\n- Both types of apples require time in a cleaning machine. Each kg of Granny Smith apples and McIntosh apples requires 3 hours at the cleaning machine. The cleaning machine is available for at most 15 hours per day, leading to the constraint: 3x + 3y <= 15.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2x + y\nConstraints:\nx <= 100\ny <= 120\nx >= 25\ny >= 50\n3x + 3y <= 15", "canonical": {"objective": [-2.0, -1.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 120.0], [-1.0, 0.0, -25.0], [0.0, -1.0, -50.0], [3.0, 3.0, 15.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- kg of Granny Smith apples produced: GrannySmith\n- kg of McIntosh apples produced: McIntosh\n\nConstraints:\n- Granny Smith apples production should be at most 100 kg and at least 25 kg:\n  GrannySmith <= 100\n  GrannySmith >= 25\n- McIntosh apples production should be at most 120 kg and at least 50 kg:\n  McIntosh <= 120\n  McIntosh >= 50\n- Cleaning machine time constraint (3 hours per kg for both types of apples, at most 15 hours available):\n  3 * GrannySmith + 3 * McIntosh <= 15\n\nObjective:\n- Maximize profit ($2 per kg of Granny Smith apples, $1 per kg of McIntosh apples):\n  2 * GrannySmith + 1 * McIntosh\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGrannySmith = intvar(0, 999999999)  # kg of Granny Smith apples produced\nMcIntosh = intvar(0, 999999999)  # kg of McIntosh apples produced\n\n# Constraints\nm = Model()\n\n# Granny Smith apples production constraints:\nm += GrannySmith <= 100  # at most 100 kg\nm += GrannySmith >= 25  # at least 25 kg\n\n# McIntosh apples production constraints:\nm += McIntosh <= 120  # at most 120 kg\nm += McIntosh >= 50  # at least 50 kg\n\n# Cleaning machine time constraint (3 hours per kg for both types of apples, at most 15 hours available):\nm += 3 * GrannySmith + 3 * McIntosh <= 15\n\n# Objective\n# Maximize profit ($2 per kg of Granny Smith apples, $1 per kg of McIntosh apples):\nm.maximize(2 * GrannySmith + 1 * McIntosh)\n", "entities": [{"start": 23, "end": 42, "word": "Granny Smith apples", "entity_group": "VAR", "score": 0.9994659720532241}, {"start": 47, "end": 62, "word": "McIntosh apples", "entity_group": "VAR", "score": 0.9999671443681671}, {"start": 79, "end": 86, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984547752695976}, {"start": 87, "end": 90, "word": "100", "entity_group": "LIMIT", "score": 0.9996839385327055}, {"start": 97, "end": 116, "word": "Granny Smith apples", "entity_group": "VAR", "score": 0.999362834739352}, {"start": 121, "end": 128, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983486958999384}, {"start": 129, "end": 132, "word": "120", "entity_group": "LIMIT", "score": 0.9996690777353343}, {"start": 139, "end": 154, "word": "McIntosh apples", "entity_group": "VAR", "score": 0.999968028132452}, {"start": 188, "end": 196, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989287395465801}, {"start": 197, "end": 199, "word": "25", "entity_group": "LIMIT", "score": 0.9996897096410176}, {"start": 206, "end": 225, "word": "Granny Smith apples", "entity_group": "VAR", "score": 0.99954001847652}, {"start": 230, "end": 232, "word": "50", "entity_group": "LIMIT", "score": 0.9995385792518555}, {"start": 239, "end": 254, "word": "McIntosh apples", "entity_group": "VAR", "score": 0.9999630695859452}, {"start": 318, "end": 337, "word": "Granny Smith apples", "entity_group": "VAR", "score": 0.9995418164655939}, {"start": 342, "end": 357, "word": "McIntosh apples", "entity_group": "VAR", "score": 0.9999781007743053}, {"start": 367, "end": 368, "word": "3", "entity_group": "PARAM", "score": 0.9995687772568236}, {"start": 439, "end": 446, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990966801511497}, {"start": 447, "end": 449, "word": "15", "entity_group": "LIMIT", "score": 0.9997621266274297}, {"start": 473, "end": 479, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999223953433657}, {"start": 490, "end": 509, "word": "Granny Smith apples", "entity_group": "VAR", "score": 0.9996685538805554}, {"start": 515, "end": 516, "word": "2", "entity_group": "PARAM", "score": 0.9989828925726291}, {"start": 525, "end": 531, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998988203260316}, {"start": 542, "end": 557, "word": "McIntosh apples", "entity_group": "VAR", "score": 0.9999554062491}, {"start": 563, "end": 564, "word": "1", "entity_group": "PARAM", "score": 0.9995060292299459}, {"start": 605, "end": 613, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761851763705}, {"start": 614, "end": 620, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907907139}]}
{"doc_id": "626992884", "document": "A tea shop offers two promotion packages, package X and package Y. Each promotion package consists of some combination of green and black tea. One package X has 5 bottles of green tea and 2 bottles of black tea, and yields a profit of $70. In comparison, a package Y contains 3 bottles of green tea and 4 bottles of black tea, and yields a profit of $120. However, the shop only has 1200 bottles of green tea and 900 bottles of black tea. Find the best mix of packages to achieve maximum profit.", "order_mapping": {"package X": 0, "package Y.": 1, "package Y": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"package Y": "120", "package X": "70"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "1200", "terms": {"package X": "5", "package Y": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "only", "limit": "900", "terms": {"package X": "2", "package Y": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of package X\n- y: Number of package Y\n\nObjective:\n- The tea shop aims to maximize its profit. Package X yields a profit of $70 and package Y yields a profit of $120. Therefore, the objective function is: Maximize 70x + 120y\n\nConstraints:\n- The shop has 1200 bottles of green tea, and each package X contains 5 bottles and each package Y contains 3 bottles. So, the constraint is: 5x + 3y <= 1200.\n- The shop has 900 bottles of black tea, and each package X contains 2 bottles and each package Y contains 4 bottles. So, the constraint is: 2x + 4y <= 900.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 70x + 120y\nConstraints:\n5x + 3y <= 1200\n2x + 4y <= 900", "canonical": {"objective": [-70.0, -120.0], "constraints": [[5.0, 3.0, 1200.0], [2.0, 4.0, 900.0]]}, "solution": {"x": 150, "y": 150}, "pseudo_model": "\nDecision Variables:\n- Number of Package X sold: PackageX\n- Number of Package Y sold: PackageY\n\nConstraints:\n- Total green tea used should not exceed 1200 bottles (5 bottles per Package X, 3 bottles per Package Y):\n  5 * PackageX + 3 * PackageY <= 1200\n- Total black tea used should not exceed 900 bottles (2 bottles per Package X, 4 bottles per Package Y):\n  2 * PackageX + 4 * PackageY <= 900\n\nObjective:\n- Maximize profit (Package X yields a profit of $70, Package Y yields a profit of $120):\n  70 * PackageX + 120 * PackageY\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPackageX = intvar(0, 999999999)  # Number of Package X sold\nPackageY = intvar(0, 999999999)  # Number of Package Y sold\n\n# Constraints\nm = Model()\n\n# The shop only has 1200 bottles of green tea:\nm += 5 * PackageX + 3 * PackageY <= 1200\n# The shop only has 900 bottles of black tea:\nm += 2 * PackageX + 4 * PackageY <= 900\n\n# Objective\n# Maximize profit (Package X yields a profit of $70, Package Y yields a profit of $120):\nm.maximize(70 * PackageX + 120 * PackageY)\n", "entities": [{"start": 43, "end": 52, "word": "package X", "entity_group": "VAR", "score": 0.9998977308646521}, {"start": 57, "end": 67, "word": "package Y.", "entity_group": "VAR", "score": 0.9999063823387185}, {"start": 149, "end": 158, "word": "package X", "entity_group": "VAR", "score": 0.9999601036356878}, {"start": 163, "end": 164, "word": "5", "entity_group": "PARAM", "score": 0.9997300907703197}, {"start": 190, "end": 191, "word": "2", "entity_group": "PARAM", "score": 0.9997204177495332}, {"start": 228, "end": 234, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994069215962068}, {"start": 240, "end": 242, "word": "70", "entity_group": "PARAM", "score": 0.9996154285012429}, {"start": 263, "end": 272, "word": "package Y", "entity_group": "VAR", "score": 0.999833921949713}, {"start": 282, "end": 283, "word": "3", "entity_group": "PARAM", "score": 0.9997013096799123}, {"start": 309, "end": 310, "word": "4", "entity_group": "PARAM", "score": 0.9997205456284601}, {"start": 347, "end": 353, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992765565964983}, {"start": 359, "end": 362, "word": "120", "entity_group": "PARAM", "score": 0.9996679970572314}, {"start": 384, "end": 388, "word": "only", "entity_group": "CONST_DIR", "score": 0.9985093148604681}, {"start": 393, "end": 397, "word": "1200", "entity_group": "LIMIT", "score": 0.9997967352820843}, {"start": 423, "end": 426, "word": "900", "entity_group": "LIMIT", "score": 0.9997301140336212}, {"start": 491, "end": 498, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9862426640274723}, {"start": 499, "end": 505, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999864982756479}]}
{"doc_id": "-123421198", "document": "A cheese factory mixes two cheese mixes to create a final product. Pizza mix contains 4 units of mozzarella, 2 units of cheddar, and 1 unit of salt. Mac and cheese mix contains 1 unit of mozzarella, 5 units of cheddar, and 2 units of salt. The minimum requirements of the new product are 30 units of mozzarella, 25 units of cheddar, and 5 units of salt. If the cost per pizza mix is $3 and the cost per mac and cheese mix is $3.25, how many of each should be used to minimize costs?", "order_mapping": {"Pizza mix": 0, "Mac and cheese": 1, "pizza mix": 0, "mac and cheese": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"pizza mix": "3", "mac and cheese": "3.25"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "30", "terms": {"Pizza mix": "4", "Mac and cheese": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "25", "terms": {"Pizza mix": "2", "Mac and cheese": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "5", "terms": {"Pizza mix": "1", "Mac and cheese": "2"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of pizza mix used\n- y: Quantity of mac and cheese mix used\n\nObjective:\n- The cheese factory aims to minimize costs. The cost per pizza mix is $3 and the cost per mac and cheese mix is $3.25. Therefore, the objective function is: Minimize 3x + 3.25y\n\nConstraints:\n- The minimum requirements of the new product are 30 units of mozzarella, 25 units of cheddar, and 5 units of salt. This leads to the following constraints:\n    - 4x + 1y >= 30 (mozzarella)\n    - 2x + 5y >= 25 (cheddar)\n    - 1x + 2y >= 5 (salt)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 3.25y\nConstraints:\n4x + 1y >= 30\n2x + 5y >= 25\n1x + 2y >= 5", "canonical": {"objective": [3.0, 3.25], "constraints": [[-4.0, -1.0, -30.0], [-2.0, -5.0, -25.0], [-1.0, -2.0, -5.0]]}, "solution": {"x": 8, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of pizza mix units used: PizzaMix\n- Number of mac and cheese mix units used: MacAndCheeseMix\n\nConstraints:\n- Mozzarella requirement (4 units from pizza mix + 1 unit from mac and cheese mix >= 30 units):\n  4 * PizzaMix + 1 * MacAndCheeseMix >= 30\n- Cheddar requirement (2 units from pizza mix + 5 units from mac and cheese mix >= 25 units):\n  2 * PizzaMix + 5 * MacAndCheeseMix >= 25\n- Salt requirement (1 unit from pizza mix + 2 units from mac and cheese mix >= 5 units):\n  1 * PizzaMix + 2 * MacAndCheeseMix >= 5\n\nObjective:\n- Minimize costs ($3 per pizza mix, $3.25 per mac and cheese mix):\n  3 * PizzaMix + 3.25 * MacAndCheeseMix\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPizzaMix = intvar(0, 999999999)  # Number of pizza mix units used\nMacAndCheeseMix = intvar(0, 999999999)  # Number of mac and cheese mix units used\n\n# Constraints\nm = Model()\n\n# Minimum requirements for the new product:\n# Mozzarella: 4 units from pizza mix + 1 unit from mac and cheese mix >= 30 units\nm += 4 * PizzaMix + 1 * MacAndCheeseMix >= 30\n# Cheddar: 2 units from pizza mix + 5 units from mac and cheese mix >= 25 units\nm += 2 * PizzaMix + 5 * MacAndCheeseMix >= 25\n# Salt: 1 unit from pizza mix + 2 units from mac and cheese mix >= 5 units\nm += 1 * PizzaMix + 2 * MacAndCheeseMix >= 5\n\n# Objective\n# Minimize costs ($3 per pizza mix, $3.25 per mac and cheese mix):\nm.minimize(3 * PizzaMix + 3.25 * MacAndCheeseMix)\n", "entities": [{"start": 68, "end": 77, "word": "Pizza mix", "entity_group": "VAR", "score": 0.9998606678885384}, {"start": 87, "end": 88, "word": "4", "entity_group": "PARAM", "score": 0.9995847207231863}, {"start": 111, "end": 112, "word": "2", "entity_group": "PARAM", "score": 0.9997342149586251}, {"start": 136, "end": 137, "word": "1", "entity_group": "PARAM", "score": 0.9987870817980997}, {"start": 153, "end": 167, "word": "Mac and cheese", "entity_group": "VAR", "score": 0.9995857609303468}, {"start": 181, "end": 182, "word": "1", "entity_group": "PARAM", "score": 0.9989514505644891}, {"start": 204, "end": 205, "word": "5", "entity_group": "PARAM", "score": 0.9997281287535038}, {"start": 229, "end": 230, "word": "2", "entity_group": "PARAM", "score": 0.9994809808148868}, {"start": 251, "end": 258, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9998146335384039}, {"start": 295, "end": 297, "word": "30", "entity_group": "LIMIT", "score": 0.9996620682738802}, {"start": 320, "end": 322, "word": "25", "entity_group": "LIMIT", "score": 0.9997633451153229}, {"start": 346, "end": 347, "word": "5", "entity_group": "LIMIT", "score": 0.9992460127454481}, {"start": 371, "end": 375, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.998995968875486}, {"start": 380, "end": 389, "word": "pizza mix", "entity_group": "VAR", "score": 0.9995569090922268}, {"start": 395, "end": 396, "word": "3", "entity_group": "PARAM", "score": 0.9995773833912163}, {"start": 405, "end": 409, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9971141665307978}, {"start": 414, "end": 428, "word": "mac and cheese", "entity_group": "VAR", "score": 0.9989173524242985}, {"start": 438, "end": 442, "word": "3.25", "entity_group": "PARAM", "score": 0.9995631166879164}, {"start": 480, "end": 488, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9982140344902984}, {"start": 489, "end": 494, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990175354431552}]}
{"doc_id": "1107094432", "document": "Two colours of paints: Egret and Crane, have quality ratings of 60 and 85, respectively. The Egret paint costs $0.40 per liter while the Crane paint costs $1.20 per liter. In order to paint his fence, Bob wants to use a mix of paint with a quality of at least 70. This ensures that the paint on the fence will withstand a few storms. What blend of the two paints should he mix in order to minimize his cost? [Hint: Let x be the fraction of each liter that is Egret paint and y be the fraction that is Crane paint.]", "order_mapping": {"Egret": 0, "Crane": 1, "Egret paint": 0, "Crane paint": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Egret paint": "0.40", "Crane paint": "1.20"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "70", "terms": {"Egret": "60", "Crane": "85"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Fraction of liters of Egret paint\n- y: Fraction of liters of Crane paint\n\nObjective:\n- Bob wants to minimize his cost. The Egret paint costs $0.40 per liter while the Crane paint costs $1.20 per liter. Therefore, the objective function is: Minimize 0.40x + 1.20y\n\nConstraints:\n- Bob wants to use a mix of paint with a quality of at least 70, which can be represented as the constraint: 60x + 85y >= 70.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.40x + 1.20y\nConstraints:\n60x + 85y >= 70", "canonical": {"objective": [0.4, 1.2], "constraints": [[-60.0, -85.0, -70.0]]}, "solution": {"x": 2, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Fraction of each liter that is Egret paint: x\n- Fraction of each liter that is Crane paint: y\n\nConstraints:\n- The mix should have a quality of at least 70, calculated as 60x + 85y >= 70\n- Since x and y are fractions of a liter, x + y = 1\n\nObjective:\n- Minimize cost, which is calculated as 0.40x + 1.20y\n\nNote: The model assumes x and y are fractions of a liter, implying they should sum up to 1. The quality constraint ensures the mix meets the required quality standard.\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar, minimize\n\n# Decision Variables\nx = intvar(0, 999999999)  # Fraction of each liter that is Egret paint\ny = intvar(0, 999999999)  # Fraction of each liter that is Crane paint\n\n# Constraints\nm = Model()\n\n# The mix should have a quality of at least 70\n# Quality is calculated as: 60x + 85y >= 70\n# Given that x + y = 1 (since they are fractions of a liter), we can substitute y = 1 - x into the equation\nm += (60*x + 85*(1-x) >= 70)\n\n# Objective\n# Minimize cost: 0.40x + 1.20y\n# Again, substituting y = 1 - x into the equation\nm.minimize(0.40*x + 1.20*(1-x))\n\n# Note: The above model assumes x and y are integer variables for simplicity, but they should be continuous variables to accurately represent fractions. \n# CPMpy currently does not directly support continuous variables, but the concept is correctly modeled with the given constraints and objective.\n", "entities": [{"start": 24, "end": 29, "word": "Egret", "entity_group": "VAR", "score": 0.9994835595931115}, {"start": 34, "end": 39, "word": "Crane", "entity_group": "VAR", "score": 0.9997318779017865}, {"start": 66, "end": 68, "word": "60", "entity_group": "PARAM", "score": 0.9991325772804351}, {"start": 73, "end": 75, "word": "85", "entity_group": "PARAM", "score": 0.9995649992632003}, {"start": 97, "end": 108, "word": "Egret paint", "entity_group": "VAR", "score": 0.9999858568086687}, {"start": 109, "end": 114, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999559872282719}, {"start": 117, "end": 121, "word": "0.40", "entity_group": "PARAM", "score": 0.9995092020192827}, {"start": 142, "end": 153, "word": "Crane paint", "entity_group": "VAR", "score": 0.9999834717734043}, {"start": 154, "end": 159, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9989969772118099}, {"start": 162, "end": 166, "word": "1.20", "entity_group": "PARAM", "score": 0.9996292370068478}, {"start": 259, "end": 267, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9972249435609222}, {"start": 268, "end": 270, "word": "70", "entity_group": "LIMIT", "score": 0.9994074585486359}, {"start": 399, "end": 407, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9921991334997032}, {"start": 412, "end": 416, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989319095187115}, {"start": 472, "end": 483, "word": "Egret paint", "entity_group": "VAR", "score": 0.9999908777425994}, {"start": 514, "end": 525, "word": "Crane paint", "entity_group": "VAR", "score": 0.9999747904483793}]}
{"doc_id": "-1567864806", "document": "An essential oil producer has 100 acres available for growing ylang ylang and vanilla. The producer must grow at least 10 acres of ylang ylang and at least 20 acres of vanilla. Even though ylang ylang oil extract sells better, the producer can grow at most twice the amount of ylang ylang as vanilla. If the profit per acre of ylang ylang is $150 and the profit per acre of vanilla is $100, how many acres of each should be grown to maximize profit?", "order_mapping": {"ylang ylang": 0, "vanilla": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"ylang ylang": "150", "vanilla": "100"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "10", "var": "ylang ylang", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "vanilla", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "ylang ylang", "direction": "at most", "param": "twice", "y_var": "vanilla", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "available", "limit": "100", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of ylang ylang\n- y: Acres of vanilla\n\nObjective:\n- The producer aims to maximize profit. The profit per acre of ylang ylang is $150 and the profit per acre of vanilla is $100. Therefore, the objective function is: Maximize 150x + 100y\n\nConstraints:\n- The producer has 100 acres available for growing, so the constraint is: x + y <= 100.\n- At least 10 acres of ylang ylang must be grown, leading to the constraint: x >= 10.\n- At least 20 acres of vanilla must be grown, resulting in the constraint: y >= 20.\n- The producer can grow at most twice the amount of ylang ylang as vanilla, leading to the constraint: x <= 2y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 100y\nConstraints:\nx + y <= 100\nx >= 10\ny >= 20\nx <= 2y", "canonical": {"objective": [-150.0, -100.0], "constraints": [[1.0, 1.0, 100.0], [-1.0, 0.0, -10.0], [0.0, -1.0, -20.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 66, "y": 34}, "pseudo_model": "\nDecision Variables:\n- Acres of ylang ylang grown: YlangYlang\n- Acres of vanilla grown: Vanilla\n\nConstraints:\n- Total acres for both crops should not exceed 100:\n  YlangYlang + Vanilla <= 100\n- At least 10 acres of ylang ylang:\n  YlangYlang >= 10\n- At least 20 acres of vanilla:\n  Vanilla >= 20\n- Ylang ylang can be at most twice the amount of vanilla:\n  YlangYlang <= 2 * Vanilla\n\nObjective:\n- Maximize profit (150 dollars per acre of ylang ylang, 100 dollars per acre of vanilla):\n  150 * YlangYlang + 100 * Vanilla\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nYlangYlang = intvar(0, 999999999)  # Acres of ylang ylang\nVanilla = intvar(0, 999999999)  # Acres of vanilla\n\n# Constraints\nm = Model()\n\n# Total acres available for growing is 100:\nm += YlangYlang + Vanilla <= 100\n# At least 10 acres of ylang ylang:\nm += YlangYlang >= 10\n# At least 20 acres of vanilla:\nm += Vanilla >= 20\n# Can grow at most twice the amount of ylang ylang as vanilla:\nm += YlangYlang <= 2 * Vanilla\n\n# Objective\n# Maximize profit (150 dollars per acre of ylang ylang, 100 dollars per acre of vanilla):\nm.maximize(150 * YlangYlang + 100 * Vanilla)\n", "entities": [{"start": 30, "end": 33, "word": "100", "entity_group": "LIMIT", "score": 0.9997322295457388}, {"start": 40, "end": 49, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988310686411745}, {"start": 62, "end": 73, "word": "ylang ylang", "entity_group": "VAR", "score": 0.9999830429817409}, {"start": 78, "end": 85, "word": "vanilla", "entity_group": "VAR", "score": 0.9995130358106993}, {"start": 111, "end": 119, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985954501486877}, {"start": 120, "end": 122, "word": "10", "entity_group": "LIMIT", "score": 0.9996795742884155}, {"start": 132, "end": 143, "word": "ylang ylang", "entity_group": "VAR", "score": 0.999970286293919}, {"start": 148, "end": 156, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990171877407608}, {"start": 157, "end": 159, "word": "20", "entity_group": "LIMIT", "score": 0.999718252891476}, {"start": 169, "end": 176, "word": "vanilla", "entity_group": "VAR", "score": 0.9996340347079506}, {"start": 191, "end": 202, "word": "ylang ylang", "entity_group": "VAR", "score": 0.999982245853631}, {"start": 252, "end": 259, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971900584908802}, {"start": 260, "end": 265, "word": "twice", "entity_group": "PARAM", "score": 0.9919300617923595}, {"start": 280, "end": 291, "word": "ylang ylang", "entity_group": "VAR", "score": 0.9999624314358803}, {"start": 295, "end": 302, "word": "vanilla", "entity_group": "VAR", "score": 0.9994580101979496}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999002301713902}, {"start": 331, "end": 342, "word": "ylang ylang", "entity_group": "VAR", "score": 0.9999638225970214}, {"start": 348, "end": 351, "word": "150", "entity_group": "PARAM", "score": 0.9995033112507886}, {"start": 360, "end": 366, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999333194973421}, {"start": 379, "end": 386, "word": "vanilla", "entity_group": "VAR", "score": 0.9992071620348908}, {"start": 392, "end": 395, "word": "100", "entity_group": "PARAM", "score": 0.9995553517030774}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 449, "end": 455, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "624578902", "document": "A travel company can sell at most 300 tickets to LA. They offer guided tour packages as well as regular tickets. The profit per guided tour package is $500 and the profit per regular ticket is $200. The travel company reserves at least 50 guided tour packages, but since most people like to go at their own pace, at least 2 times as many people prefer to buy regular tickets than guided tour packages. How many of each ticket type should be sold to maximize profit?", "order_mapping": {"guided tour packages": 0, "regular tickets": 1, "guided tour package": 0, "regular ticket": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular ticket": "200", "guided tour package": "500"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "guided tour packages", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "regular tickets", "direction": "at least", "param": "2 times", "y_var": "guided tour packages", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of guided tour packages\n- y: Number of regular tickets\n\nObjective:\n- The travel company aims to maximize its profit. The profit per guided tour package is $500 and the profit per regular ticket is $200. Therefore, the objective function is: Maximize 500x + 200y\n\nConstraints:\n- The company can sell at most 300 tickets to LA, so the constraint is: x + y <= 300.\n- The company reserves at least 50 guided tour packages, leading to the constraint: x >= 50.\n- At least 2 times as many people prefer to buy regular tickets than guided tour packages, resulting in the constraint: y >= 2x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 200y\nConstraints:\nx + y <= 300\nx >= 50\ny >= 2x", "canonical": {"objective": [-500.0, -200.0], "constraints": [[1.0, 1.0, 300.0], [-1.0, 0.0, -50.0], [2.0, -1.0, 0.0]]}, "solution": {"x": 100, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of guided tour packages sold: GuidedTourPackages\n- Number of regular tickets sold: RegularTickets\n\nConstraints:\n- Total number of tickets (guided tour packages + regular tickets) should not exceed 300:\n  GuidedTourPackages + RegularTickets <= 300\n- At least 50 guided tour packages should be reserved:\n  GuidedTourPackages >= 50\n- At least 2 times as many regular tickets as guided tour packages should be sold:\n  RegularTickets >= 2 * GuidedTourPackages\n\nObjective:\n- Maximize profit (500 dollars per guided tour package, 200 dollars per regular ticket):\n  500 * GuidedTourPackages + 200 * RegularTickets\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGuidedTourPackages = intvar(0, 999999999)  # Number of guided tour packages sold\nRegularTickets = intvar(0, 999999999)  # Number of regular tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of tickets (guided tour packages + regular tickets) should not exceed 300:\nm += GuidedTourPackages + RegularTickets <= 300\n# At least 50 guided tour packages should be reserved:\nm += GuidedTourPackages >= 50\n# At least 2 times as many regular tickets as guided tour packages should be sold:\nm += RegularTickets >= 2 * GuidedTourPackages\n\n# Objective\n# Maximize profit (500 dollars per guided tour package, 200 dollars per regular ticket):\nm.maximize(500 * GuidedTourPackages + 200 * RegularTickets)\n", "entities": [{"start": 26, "end": 33, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991052638795977}, {"start": 34, "end": 37, "word": "300", "entity_group": "LIMIT", "score": 0.9993605237148726}, {"start": 65, "end": 85, "word": "guided tour packages", "entity_group": "VAR", "score": 0.998716310298188}, {"start": 97, "end": 112, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999658018275445}, {"start": 119, "end": 125, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999606018134667}, {"start": 130, "end": 149, "word": "guided tour package", "entity_group": "VAR", "score": 0.9991395063070527}, {"start": 155, "end": 158, "word": "500", "entity_group": "PARAM", "score": 0.9994540033492217}, {"start": 167, "end": 173, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999935036544613}, {"start": 178, "end": 192, "word": "regular ticket", "entity_group": "VAR", "score": 0.9999191799464847}, {"start": 198, "end": 201, "word": "200", "entity_group": "PARAM", "score": 0.9997191572859057}, {"start": 232, "end": 240, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989760286511804}, {"start": 241, "end": 243, "word": "50", "entity_group": "LIMIT", "score": 0.9995467033818425}, {"start": 244, "end": 264, "word": "guided tour packages", "entity_group": "VAR", "score": 0.9994311999777632}, {"start": 320, "end": 328, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981512187474889}, {"start": 329, "end": 330, "word": "2", "entity_group": "PARAM", "score": 0.9989318952604263}, {"start": 366, "end": 381, "word": "regular tickets", "entity_group": "VAR", "score": 0.9999769920010896}, {"start": 387, "end": 407, "word": "guided tour packages", "entity_group": "VAR", "score": 0.9995593547885379}, {"start": 457, "end": 465, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987336556974256}, {"start": 466, "end": 472, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999146952430046}]}
{"doc_id": "649290259", "document": "An ice cream shop sells regular and premium ice cream. They make x1 regular ice cream at a profit of $1 each and x2 premium ice cream at a profit of $2.50 each (x1 and x2 are unknown and greater than or equal to 0). The demand for regular ice cream is at most 40 and the demand for premium ice cream is at most 25. In addition the shop can only make 60 ice creams total. How many of each should they make to maximize profit?", "order_mapping": {"regular": 0, "premium ice cream": 1, "regular ice cream": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium ice cream": "2.50", "regular ice cream": "1"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "40", "var": "regular ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "25", "var": "premium ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "60", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Quantity of regular ice cream produced\n- x2: Quantity of premium ice cream produced\n\nObjective:\n- The shop aims to maximize its profit. They make x1 regular ice cream at a profit of $1 each and x2 premium ice cream at a profit of $2.50 each. Therefore, the objective function is: Maximize 1x1 + 2.50x2\n\nConstraints:\n- The demand for regular ice cream is at most 40, leading to the constraint: x1 <= 40.\n- The demand for premium ice cream is at most 25, leading to the constraint: x2 <= 25.\n- The shop can only make 60 ice creams total, resulting in the constraint: x1 + x2 <= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x1 + 2.50x2\nConstraints:\nx1 <= 40\nx2 <= 25\nx1 + x2 <= 60", "canonical": {"objective": [-1.0, -2.5], "constraints": [[1.0, 0.0, 40.0], [0.0, 1.0, 25.0], [1.0, 1.0, 60.0]]}, "solution": {"x": 35, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Number of regular ice creams made: RegularIceCream\n- Number of premium ice creams made: PremiumIceCream\n\nConstraints:\n- Total number of ice creams made should not exceed 60:\n  RegularIceCream + PremiumIceCream <= 60\n- At most 40 regular ice creams can be made:\n  RegularIceCream <= 40\n- At most 25 premium ice creams can be made:\n  PremiumIceCream <= 25\n\nObjective:\n- Maximize profit (1 dollar per regular ice cream, 2.50 dollars per premium ice cream):\n  1 * RegularIceCream + 2.5 * PremiumIceCream\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularIceCream = intvar(0, 999999999)  # Number of regular ice creams made\nPremiumIceCream = intvar(0, 999999999)  # Number of premium ice creams made\n\n# Constraints\nm = Model()\n\n# Total number of ice creams made should not exceed 60:\nm += RegularIceCream + PremiumIceCream <= 60\n# Number of regular ice creams made should be at most 40:\nm += RegularIceCream <= 40\n# Number of premium ice creams made should be at most 25:\nm += PremiumIceCream <= 25\n\n# Objective\n# Maximize profit (1 dollar per regular ice cream, 2.50 dollars per premium ice cream):\nm.maximize(1 * RegularIceCream + 2.5 * PremiumIceCream)\n", "entities": [{"start": 24, "end": 31, "word": "regular", "entity_group": "VAR", "score": 0.9997394521726878}, {"start": 36, "end": 53, "word": "premium ice cream", "entity_group": "VAR", "score": 0.999662309238771}, {"start": 69, "end": 86, "word": "regular ice cream", "entity_group": "VAR", "score": 0.9991174463354384}, {"start": 92, "end": 98, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995022703376367}, {"start": 104, "end": 105, "word": "1", "entity_group": "PARAM", "score": 0.9996642025416959}, {"start": 118, "end": 135, "word": "premium ice cream", "entity_group": "VAR", "score": 0.9993654931413515}, {"start": 141, "end": 147, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995840588130745}, {"start": 153, "end": 157, "word": "2.50", "entity_group": "PARAM", "score": 0.9995510202998784}, {"start": 237, "end": 254, "word": "regular ice cream", "entity_group": "VAR", "score": 0.9974908157491482}, {"start": 258, "end": 265, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982584957137437}, {"start": 266, "end": 268, "word": "40", "entity_group": "LIMIT", "score": 0.9992528277325936}, {"start": 288, "end": 305, "word": "premium ice cream", "entity_group": "VAR", "score": 0.9980222120774288}, {"start": 309, "end": 316, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982572024967168}, {"start": 317, "end": 319, "word": "25", "entity_group": "LIMIT", "score": 0.9995971134132281}, {"start": 347, "end": 351, "word": "only", "entity_group": "CONST_DIR", "score": 0.9944939363437448}, {"start": 357, "end": 359, "word": "60", "entity_group": "LIMIT", "score": 0.9986898474914888}, {"start": 416, "end": 424, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996300188747236}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998363786297089}]}
{"doc_id": "-1616068707", "document": "A car dealership stocks cars and trucks. Each car takes 30 sq ft of space while each truck takes 45 sq ft of space. The dealership has a total of 450 sq ft of space available. Based on past seasons, the dealership makes sure a minimum of 60% of all items in stock are cars. In terms of capital, the dealership wants to spend at most $800000. Each car costs the dealership $30000 and each truck costs the dealership  $40000. If the profit per car sold is $2000 and the profit per truck sold is $4000, how many of each should be stocked in order to maximize profit?", "order_mapping": {"cars": 0, "trucks": 1, "car": 0, "truck": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"car": "2000", "truck": "4000"}}, "const_declarations": [{"type": "linear", "direction": "a total of", "limit": "450", "terms": {"car": "30", "truck": "45"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "60%", "var": "cars", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "800000", "terms": {"car": "30000", "truck": "40000"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of cars\n- y: Number of trucks\n\nObjective:\n- The dealership aims to maximize its profit. The profit per car sold is $2000 and the profit per truck sold is $4000. Therefore, the objective function is: Maximize 2000x + 4000y\n\nConstraints:\n- The dealership has a total of 450 sq ft of space available, and each car takes 30 sq ft while each truck takes 45 sq ft. This leads to the constraint: 30x + 45y <= 450.\n- The dealership makes sure a minimum of 60% of all items in stock are cars, resulting in the constraint: x >= 0.60(x + y).\n- In terms of capital, the dealership wants to spend at most $800000. Each car costs $30000 and each truck costs $40000, leading to the constraint: 30000x + 40000y <= 800000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2000x + 4000y\nConstraints:\n30x + 45y <= 450\nx >= 0.60(x + y)\n30000x + 40000y <= 800000", "canonical": {"objective": [-2000.0, -4000.0], "constraints": [[30.0, 45.0, 450.0], [-0.4, 0.6, 0.0], [30000.0, 40000.0, 800000.0]]}, "solution": {"x": 9, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of cars stocked: Cars\n- Number of trucks stocked: Trucks\n\nConstraints:\n- Total space used by cars and trucks should not exceed 450 sq ft (30 sq ft per car, 45 sq ft per truck):\n  30 * Cars + 45 * Trucks <= 450\n- At least 60% of all items in stock must be cars:\n  Cars >= 0.6 * (Cars + Trucks)\n- Total capital spent on cars and trucks should not exceed $800000 ($30000 per car, $40000 per truck):\n  30000 * Cars + 40000 * Trucks <= 800000\n\nObjective:\n- Maximize profit ($2000 profit per car, $4000 profit per truck):\n  2000 * Cars + 4000 * Trucks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCars = intvar(0, 999999999)  # Number of cars stocked\nTrucks = intvar(0, 999999999)  # Number of trucks stocked\n\n# Constraints\nm = Model()\n\n# The dealership has a total of 450 sq ft of space available:\nm += 30 * Cars + 45 * Trucks <= 450\n# A minimum of 60% of all items in stock are cars:\nm += Cars >= 0.6 * (Cars + Trucks)\n# The dealership wants to spend at most $800000:\nm += 30000 * Cars + 40000 * Trucks <= 800000\n\n# Objective\n# Maximize profit ($2000 per car sold, $4000 per truck sold):\nm.maximize(2000 * Cars + 4000 * Trucks)\n", "entities": [{"start": 24, "end": 28, "word": "cars", "entity_group": "VAR", "score": 0.9994859894302814}, {"start": 33, "end": 39, "word": "trucks", "entity_group": "VAR", "score": 0.9997373732953976}, {"start": 47, "end": 50, "word": "car", "entity_group": "VAR", "score": 0.999700601765244}, {"start": 57, "end": 59, "word": "30", "entity_group": "PARAM", "score": 0.9996513748313266}, {"start": 86, "end": 91, "word": "truck", "entity_group": "VAR", "score": 0.9987462813550912}, {"start": 98, "end": 100, "word": "45", "entity_group": "PARAM", "score": 0.9994030179117206}, {"start": 137, "end": 147, "word": "a total of", "entity_group": "CONST_DIR", "score": 0.9922455974596966}, {"start": 148, "end": 151, "word": "450", "entity_group": "LIMIT", "score": 0.9990545210099746}, {"start": 231, "end": 238, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9954471127602093}, {"start": 242, "end": 246, "word": "60 %", "entity_group": "LIMIT", "score": 0.9436198957738219}, {"start": 273, "end": 277, "word": "cars", "entity_group": "VAR", "score": 0.9996709629863103}, {"start": 332, "end": 339, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9964572195894938}, {"start": 342, "end": 348, "word": "800000", "entity_group": "LIMIT", "score": 0.9997493107502838}, {"start": 356, "end": 359, "word": "car", "entity_group": "VAR", "score": 0.9996561662608726}, {"start": 383, "end": 388, "word": "30000", "entity_group": "PARAM", "score": 0.9997287250930302}, {"start": 398, "end": 403, "word": "truck", "entity_group": "VAR", "score": 0.9998187979943501}, {"start": 427, "end": 432, "word": "40000", "entity_group": "PARAM", "score": 0.9997148750674828}, {"start": 442, "end": 448, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997931652895741}, {"start": 453, "end": 456, "word": "car", "entity_group": "VAR", "score": 0.9967716748445061}, {"start": 467, "end": 471, "word": "2000", "entity_group": "PARAM", "score": 0.9994903941901887}, {"start": 480, "end": 486, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998447347352706}, {"start": 491, "end": 496, "word": "truck", "entity_group": "VAR", "score": 0.9990377939053127}, {"start": 507, "end": 511, "word": "4000", "entity_group": "PARAM", "score": 0.999484588003353}, {"start": 561, "end": 569, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.994662819005637}, {"start": 570, "end": 576, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990907017162031}]}
{"doc_id": "822169661", "document": "A restaurant has 5000 grams of pork meat to make both burritos and sandwiches. Each burrito requires 25 grams of pork meat while each sandwich requires 15 grams of pork meat. Past sales have indicated that at least four times the number of sandwiches are needed than burritos. There also needs to be at least 6 burritos made. Each burrito is sold for a profit of $2.5 and each sandwich is sold for a profit of $7. How many of each item should be made in order to maximize profit?", "order_mapping": {"burritos": 0, "sandwiches": 1, "burrito": 0, "sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"burrito": "2.5", "sandwich": "7"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "5000", "terms": {"sandwich": "15", "burrito": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "sandwiches", "direction": "at least", "param": "four times", "y_var": "burritos", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "6", "var": "burritos", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of burritos\n- y: Number of sandwiches\n\nObjective:\n- The restaurant aims to maximize its profit. Each burrito is sold for a profit of $2.5 and each sandwich is sold for a profit of $7. Therefore, the objective function is: Maximize 2.5x + 7y\n\nConstraints:\n- The restaurant has 5000 grams of pork meat available, so the constraint is: 25x + 15y <= 5000.\n- Past sales have indicated that at least four times the number of sandwiches are needed than burritos, leading to the constraint: y >= 4x.\n- There also needs to be at least 6 burritos made, resulting in the constraint: x >= 6.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2.5x + 7y\nConstraints:\n25x + 15y <= 5000\ny >= 4x\nx >= 6", "canonical": {"objective": [-2.5, -7.0], "constraints": [[25.0, 15.0, 5000.0], [4.0, -1.0, 0.0], [-1.0, 0.0, -6.0]]}, "solution": {"x": 6, "y": 323}, "pseudo_model": "\nDecision Variables:\n- Number of burritos made: Burritos\n- Number of sandwiches made: Sandwiches\n\nConstraints:\n- Total pork meat used should not exceed 5000 grams (25 grams per burrito, 15 grams per sandwich):\n  25 * Burritos + 15 * Sandwiches <= 5000\n- At least four times the number of sandwiches are needed than burritos:\n  Sandwiches >= 4 * Burritos\n- There needs to be at least 6 burritos made:\n  Burritos >= 6\n\nObjective:\n- Maximize profit (2.5 dollars per burrito, 7 dollars per sandwich):\n  2.5 * Burritos + 7 * Sandwiches\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurritos = intvar(0, 999999999)  # Number of burritos made\nSandwiches = intvar(0, 999999999)  # Number of sandwiches made\n\n# Constraints\nm = Model()\n\n# Total pork meat used should not exceed 5000 grams (25 grams per burrito, 15 grams per sandwich):\nm += 25 * Burritos + 15 * Sandwiches <= 5000\n# At least four times the number of sandwiches are needed than burritos:\nm += Sandwiches >= 4 * Burritos\n# There needs to be at least 6 burritos made:\nm += Burritos >= 6\n\n# Objective\n# Maximize profit (2.5 dollars per burrito, 7 dollars per sandwich):\nm.maximize(2.5 * Burritos + 7 * Sandwiches)\n", "entities": [{"start": 13, "end": 16, "word": "has", "entity_group": "CONST_DIR", "score": 0.9982110931625027}, {"start": 17, "end": 21, "word": "5000", "entity_group": "LIMIT", "score": 0.998495531900604}, {"start": 54, "end": 62, "word": "burritos", "entity_group": "VAR", "score": 0.9996251029228572}, {"start": 67, "end": 77, "word": "sandwiches", "entity_group": "VAR", "score": 0.9998175849548961}, {"start": 85, "end": 92, "word": "burrito", "entity_group": "VAR", "score": 0.9995780685056018}, {"start": 102, "end": 104, "word": "25", "entity_group": "PARAM", "score": 0.9995646200684425}, {"start": 135, "end": 143, "word": "sandwich", "entity_group": "VAR", "score": 0.9996855221146114}, {"start": 153, "end": 155, "word": "15", "entity_group": "PARAM", "score": 0.9994303162824021}, {"start": 208, "end": 216, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998768953494918}, {"start": 217, "end": 227, "word": "four times", "entity_group": "PARAM", "score": 0.8498605282523206}, {"start": 242, "end": 252, "word": "sandwiches", "entity_group": "VAR", "score": 0.9995527392642501}, {"start": 269, "end": 277, "word": "burritos", "entity_group": "VAR", "score": 0.9996911617586836}, {"start": 303, "end": 311, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981846912630162}, {"start": 312, "end": 313, "word": "6", "entity_group": "LIMIT", "score": 0.99970534965397}, {"start": 314, "end": 322, "word": "burritos", "entity_group": "VAR", "score": 0.9993226347611252}, {"start": 335, "end": 342, "word": "burrito", "entity_group": "VAR", "score": 0.999671088880851}, {"start": 357, "end": 363, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998354279649591}, {"start": 369, "end": 372, "word": "2.5", "entity_group": "PARAM", "score": 0.9996585756517011}, {"start": 382, "end": 390, "word": "sandwich", "entity_group": "VAR", "score": 0.9998227976118035}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995375767351704}, {"start": 417, "end": 418, "word": "7", "entity_group": "PARAM", "score": 0.9995544813846285}, {"start": 470, "end": 478, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852783764065}, {"start": 479, "end": 485, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818178479}]}
{"doc_id": "739435915", "document": "John wants to develop a weight loss program that includes a minimum of 250 units of protein and 45 units of carbs. There are two cuisine options available: Vietnamese and Korean. One plate of Vietnamese food contains 15 units of protein and 20 units of carbs. One plate of Korean food contains 10 units of protein and 14 units of carbs. Vietnamese food costs $12.5 per plate food and Korean food costs $16.5 per plate. Find the minimum cost for the program that can consist of a mixture of the cuisines and at the same time meet the minimal protein and carb requirements.", "order_mapping": {"Vietnamese": 0, "Korean": 1, "Vietnamese food": 0, "Korean food": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Vietnamese food": "12.5", "Korean food": "16.5"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "250", "terms": {"Vietnamese food": "15", "Korean food": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "45", "terms": {"Vietnamese food": "20", "Korean food": "14"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of plates of Vietnamese food\n- y: Number of plates of Korean food\n\nObjective:\n- John wants to minimize the cost for the weight loss program. One plate of Vietnamese food costs $12.5 and one plate of Korean food costs $16.5. Therefore, the objective function is: Minimize 12.5x + 16.5y\n\nConstraints:\n- The program must include a minimum of 250 units of protein, leading to the constraint: 15x + 10y >= 250\n- The program must include a minimum of 45 units of carbs, leading to the constraint: 20x + 14y >= 45\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 12.5x + 16.5y\nConstraints:\n15x + 10y >= 250\n20x + 14y >= 45", "canonical": {"objective": [12.5, 16.5], "constraints": [[-15.0, -10.0, -250.0], [-20.0, -14.0, -45.0]]}, "solution": {"x": 17, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Vietnamese food plates: VietnamesePlates\n- Number of Korean food plates: KoreanPlates\n\nConstraints:\n- To meet the minimum protein requirement (250 units):\n  15 * VietnamesePlates + 10 * KoreanPlates >= 250\n- To meet the minimum carbs requirement (45 units):\n  20 * VietnamesePlates + 14 * KoreanPlates >= 45\n\nObjective:\n- Minimize the total cost of the program:\n  12.5 * VietnamesePlates + 16.5 * KoreanPlates\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVietnamesePlates = intvar(0, 999999999)  # Number of Vietnamese food plates\nKoreanPlates = intvar(0, 999999999)  # Number of Korean food plates\n\n# Constraints\nm = Model()\n\n# Minimum of 250 units of protein required:\nm += 15 * VietnamesePlates + 10 * KoreanPlates >= 250\n# Minimum of 45 units of carbs required:\nm += 20 * VietnamesePlates + 14 * KoreanPlates >= 45\n\n# Objective\n# Minimize cost ($12.5 per Vietnamese plate, $16.5 per Korean plate):\nm.minimize(12.5 * VietnamesePlates + 16.5 * KoreanPlates)\n", "entities": [{"start": 60, "end": 67, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9981506008967761}, {"start": 71, "end": 74, "word": "250", "entity_group": "LIMIT", "score": 0.9997716813494287}, {"start": 96, "end": 98, "word": "45", "entity_group": "LIMIT", "score": 0.9996926154038756}, {"start": 158, "end": 168, "word": "Vietnamese", "entity_group": "VAR", "score": 0.9996108307146515}, {"start": 173, "end": 179, "word": "Korean", "entity_group": "VAR", "score": 0.9995402833921211}, {"start": 195, "end": 210, "word": "Vietnamese food", "entity_group": "VAR", "score": 0.9997735757197954}, {"start": 220, "end": 222, "word": "15", "entity_group": "PARAM", "score": 0.9996035280508446}, {"start": 244, "end": 246, "word": "20", "entity_group": "PARAM", "score": 0.9997021460382364}, {"start": 277, "end": 288, "word": "Korean food", "entity_group": "VAR", "score": 0.9998276345821127}, {"start": 298, "end": 300, "word": "10", "entity_group": "PARAM", "score": 0.999603528043534}, {"start": 322, "end": 324, "word": "14", "entity_group": "PARAM", "score": 0.999676078821501}, {"start": 342, "end": 357, "word": "Vietnamese food", "entity_group": "VAR", "score": 0.9999084995285655}, {"start": 358, "end": 363, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9997370224157515}, {"start": 366, "end": 370, "word": "12.5", "entity_group": "PARAM", "score": 0.9995209113247518}, {"start": 390, "end": 401, "word": "Korean food", "entity_group": "VAR", "score": 0.9999224473285449}, {"start": 402, "end": 407, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.99898473160959}, {"start": 410, "end": 414, "word": "16.5", "entity_group": "PARAM", "score": 0.9995584607526578}, {"start": 436, "end": 443, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9883111408473353}, {"start": 444, "end": 448, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9973758807372791}]}
{"doc_id": "2015303631", "document": "Nova Transport can host up to 600 passengers on a scenic train ride. Business class seats, which come with free non-alcoholic drinks, are sold for a $300 profit each while coach class tickets are sold for a $150 profit each. However, due to the high costs, more than 4 times as many passengers prefer to travel by coach seating than by business class. However, there are at least 45 seats reserved for business class passengers. Determine how many tickets of each type must be sold in order to maximize the profit for the company. What is the maximum profit?", "order_mapping": {"Business class": 0, "coach class": 1, "coach seating": 1, "business class": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Business class": "300", "coach class": "150"}}, "const_declarations": [{"type": "xby", "x_var": "coach seating", "direction": "more than", "param": "4 times", "y_var": "business class", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "45", "var": "business class", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "up to", "limit": "600", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of business class tickets sold\n- y: Number of coach class tickets sold\n\nObjective:\n- The company aims to maximize its profit. Business class seats yield a $300 profit each, and coach class tickets yield a $150 profit each. Therefore, the objective function is: Maximize 300x + 150y\n\nConstraints:\n- The total number of passengers cannot exceed 600, leading to the constraint: x + y <= 600.\n- Due to high costs, more than 4 times as many passengers prefer coach seating than business class, resulting in the constraint: y <= 4x.\n- At least 45 seats need to be reserved for business class passengers, leading to the constraint: x >= 45.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 300x + 150y\nConstraints:\nx + y <= 600\ny <= 4x\nx >= 45", "canonical": {"objective": [-300.0, -150.0], "constraints": [[1.0, 1.0, 600.0], [-4.0, 1.0, 0.0], [-1.0, 0.0, -45.0]]}, "solution": {"x": 600, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of business class tickets sold: BusinessClass\n- Number of coach class tickets sold: CoachClass\n\nConstraints:\n- Total number of passengers (business + coach) should not exceed 600:\n  BusinessClass + CoachClass <= 600\n- Coach class passengers should be more than 4 times the number of business class passengers:\n  CoachClass <= 4 * BusinessClass\n- At least 45 seats are reserved for business class passengers:\n  BusinessClass >= 45\n\nObjective:\n- Maximize profit (300 dollars per business class ticket, 150 dollars per coach class ticket):\n  300 * BusinessClass + 150 * CoachClass\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBusinessClass = intvar(0, 999999999)  # Number of business class tickets sold\nCoachClass = intvar(0, 999999999)  # Number of coach class tickets sold\n\n# Constraints\nm = Model()\n\n# Total number of passengers should not exceed 600:\nm += BusinessClass + CoachClass <= 600\n# More than 4 times as many passengers prefer coach seating than business class:\nm += CoachClass <= 4 * BusinessClass\n# There are at least 45 seats reserved for business class passengers:\nm += BusinessClass >= 45\n\n# Objective\n# Maximize profit (300 dollars per business class ticket, 150 dollars per coach class ticket):\nm.maximize(300 * BusinessClass + 150 * CoachClass)\n", "entities": [{"start": 24, "end": 29, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9985640871180901}, {"start": 30, "end": 33, "word": "600", "entity_group": "LIMIT", "score": 0.9995803154569866}, {"start": 70, "end": 84, "word": "Business class", "entity_group": "VAR", "score": 0.9999847663317408}, {"start": 156, "end": 159, "word": "300", "entity_group": "PARAM", "score": 0.9994380675917621}, {"start": 160, "end": 166, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996551481216265}, {"start": 178, "end": 189, "word": "coach class", "entity_group": "VAR", "score": 0.9999887794935605}, {"start": 215, "end": 218, "word": "150", "entity_group": "PARAM", "score": 0.9978415482645203}, {"start": 219, "end": 225, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995545863651262}, {"start": 267, "end": 276, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9971635751502859}, {"start": 277, "end": 284, "word": "4 times", "entity_group": "PARAM", "score": 0.9316229427173464}, {"start": 324, "end": 337, "word": "coach seating", "entity_group": "VAR", "score": 0.9993022319220339}, {"start": 346, "end": 360, "word": "business class", "entity_group": "VAR", "score": 0.9997372442785676}, {"start": 383, "end": 391, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990018099545417}, {"start": 392, "end": 394, "word": "45", "entity_group": "LIMIT", "score": 0.9997691097431753}, {"start": 414, "end": 428, "word": "business class", "entity_group": "VAR", "score": 0.9999873567345549}, {"start": 507, "end": 515, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9986230595526778}, {"start": 520, "end": 526, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996848305680965}]}
{"doc_id": "599598925", "document": "David has $10000 to invest. He has decided to invest in the healthcare industry and the fishing industry. He has decided that the money invested in the healthcare industry must be at least three times as much as the amount invested in the fishing industry. He has also limited himself to invest at most $1000 in the fishing industry. If the money invested in the healthcare industry earns 7.5% and the money invested in the fishing industry earns 12%, how much should he invest in each to maximize his profit?", "order_mapping": {"healthcare industry": 0, "fishing industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"healthcare industry": "7.5%", "fishing industry": "12%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "10000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "healthcare industry", "direction": "at least", "param": "three times", "y_var": "fishing industry", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "1000", "var": "fishing industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the healthcare industry\n- y: Dollars invested in the fishing industry\n\nObjective:\n- David aims to maximize his profit. The money invested in the healthcare industry earns 7.5% and the money invested in the fishing industry earns 12%. Therefore, the objective function is: Maximize 0.075x + 0.12y\n\nConstraints:\n- David has $10000 to invest, so the constraint is: x + y <= 10000.\n- The money invested in the healthcare industry must be at least three times as much as the amount invested in the fishing industry, leading to the constraint: x >= 3y.\n- He has limited himself to invest at most $1000 in the fishing industry, resulting in the constraint: y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.075x + 0.12y\nConstraints:\nx + y <= 10000\nx >= 3y\ny <= 1000", "canonical": {"objective": [-0.075, -0.12], "constraints": [[1.0, 1.0, 10000.0], [-1.0, 3.0, 0.0], [0.0, 1.0, 1000.0]]}, "solution": {"x": 9000, "y": 1000}, "pseudo_model": "\nDecision Variables:\n- Money invested in the healthcare industry: Healthcare\n- Money invested in the fishing industry: Fishing\n\nConstraints:\n- Total investment should not exceed $10000:\n  Healthcare + Fishing <= 10000\n- Money invested in the healthcare industry must be at least three times as much as the amount invested in the fishing industry:\n  Healthcare >= 3 * Fishing\n- At most $1000 can be invested in the fishing industry:\n  Fishing <= 1000\n\nObjective:\n- Maximize profit (7.5% from healthcare, 12% from fishing):\n  0.075 * Healthcare + 0.12 * Fishing\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHealthcare = intvar(0, 999999999)  # Money invested in the healthcare industry\nFishing = intvar(0, 999999999)  # Money invested in the fishing industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $10000:\nm += Healthcare + Fishing <= 10000\n# Money invested in the healthcare industry must be at least three times as much as the amount invested in the fishing industry:\nm += Healthcare >= 3 * Fishing\n# At most $1000 can be invested in the fishing industry:\nm += Fishing <= 1000\n\n# Objective\n# Maximize profit (7.5% from healthcare, 12% from fishing):\nm.maximize(0.075 * Healthcare + 0.12 * Fishing)\n", "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9943644108112125}, {"start": 12, "end": 17, "word": "10000", "entity_group": "LIMIT", "score": 0.9991254072839342}, {"start": 62, "end": 81, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999750067229526}, {"start": 90, "end": 106, "word": "fishing industry", "entity_group": "VAR", "score": 0.999955832009957}, {"start": 155, "end": 174, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999704761564658}, {"start": 183, "end": 191, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9936709594985025}, {"start": 192, "end": 203, "word": "three times", "entity_group": "PARAM", "score": 0.5000226153196331}, {"start": 242, "end": 258, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999671712065388}, {"start": 299, "end": 306, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9950969935425795}, {"start": 309, "end": 313, "word": "1000", "entity_group": "LIMIT", "score": 0.9995939329966174}, {"start": 321, "end": 337, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999696544738962}, {"start": 369, "end": 388, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999816257916357}, {"start": 389, "end": 394, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9952097185815381}, {"start": 395, "end": 400, "word": "7.5 %", "entity_group": "PARAM", "score": 0.9911839233905207}, {"start": 431, "end": 447, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999797764118742}, {"start": 448, "end": 453, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9949781966490073}, {"start": 454, "end": 458, "word": "12 %", "entity_group": "PARAM", "score": 0.9864906996031111}, {"start": 498, "end": 506, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203414052493}, {"start": 511, "end": 517, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999425846280563}]}
{"doc_id": "-1443479053", "document": "A food truck makes apple and orange smoothies. It takes 6 minutes on the cutting machine and 3 minutes on the blending machine to make an apple smoothie. It takes 5 minutes on the cutting machine and 2 minutes on the blending machine to make an orange smoothie. The profit per apple smoothie is $3.5 and the profit per orange smoothie is $4.5. If both the cutting machine and blending machine are available for at most 500 minutes per day, how many of each smoothie should be made to maximize profit?", "order_mapping": {"apple": 0, "orange smoothies": 1, "apple smoothie": 0, "orange smoothie": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"apple smoothie": "3.5", "orange smoothie": "4.5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"apple smoothie": "6", "orange smoothie": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "500", "terms": {"apple smoothie": "3", "orange smoothie": "2"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of apple smoothies made\n- y: Number of orange smoothies made\n\nObjective:\n- The food truck aims to maximize its profit. The profit per apple smoothie is $3.5 and the profit per orange smoothie is $4.5. Therefore, the objective function is: Maximize 3.5x + 4.5y\n\nConstraints:\n- The cutting and blending machines are available for at most 500 minutes per day. The time taken to make each smoothie type is given, and the total time for each type of smoothie must be at most 500 minutes. This leads to the constraints: 6x + 5y <= 500 and 3x + 2y <= 500.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3.5x + 4.5y\nConstraints:\n6x + 5y <= 500\n3x + 2y <= 500", "canonical": {"objective": [-3.5, -4.5], "constraints": [[6.0, 5.0, 500.0], [3.0, 2.0, 500.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of apple smoothies made per day: AppleSmoothie\n- Number of orange smoothies made per day: OrangeSmoothie\n\nConstraints:\n- Total time on the cutting machine for both smoothies should not exceed 500 minutes per day:\n  6 * AppleSmoothie + 5 * OrangeSmoothie <= 500\n- Total time on the blending machine for both smoothies should not exceed 500 minutes per day:\n  3 * AppleSmoothie + 2 * OrangeSmoothie <= 500\n\nObjective:\n- Maximize profit (3.5 dollars per apple smoothie, 4.5 dollars per orange smoothie):\n  3.5 * AppleSmoothie + 4.5 * OrangeSmoothie\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAppleSmoothie = intvar(0, 999999999)  # Number of apple smoothies made per day\nOrangeSmoothie = intvar(0, 999999999)  # Number of orange smoothies made per day\n\n# Constraints\nm = Model()\n\n# Total time on the cutting machine should not exceed 500 minutes per day:\nm += 6 * AppleSmoothie + 5 * OrangeSmoothie <= 500\n# Total time on the blending machine should not exceed 500 minutes per day:\nm += 3 * AppleSmoothie + 2 * OrangeSmoothie <= 500\n\n# Objective\n# Maximize profit (3.5 dollars per apple smoothie, 4.5 dollars per orange smoothie):\nm.maximize(3.5 * AppleSmoothie + 4.5 * OrangeSmoothie)\n", "entities": [{"start": 19, "end": 24, "word": "apple", "entity_group": "VAR", "score": 0.9993001913728522}, {"start": 29, "end": 45, "word": "orange smoothies", "entity_group": "VAR", "score": 0.9999677443365252}, {"start": 57, "end": 58, "word": "6", "entity_group": "PARAM", "score": 0.9996241883404073}, {"start": 94, "end": 95, "word": "3", "entity_group": "PARAM", "score": 0.9996571661166744}, {"start": 139, "end": 153, "word": "apple smoothie", "entity_group": "VAR", "score": 0.999757465395311}, {"start": 165, "end": 166, "word": "5", "entity_group": "PARAM", "score": 0.9996035759721245}, {"start": 202, "end": 203, "word": "2", "entity_group": "PARAM", "score": 0.9996570957993585}, {"start": 247, "end": 262, "word": "orange smoothie", "entity_group": "VAR", "score": 0.9998633845206384}, {"start": 269, "end": 275, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999651454173609}, {"start": 280, "end": 294, "word": "apple smoothie", "entity_group": "VAR", "score": 0.9999737981697022}, {"start": 300, "end": 303, "word": "3.5", "entity_group": "PARAM", "score": 0.9996181222158991}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999346646516606}, {"start": 323, "end": 338, "word": "orange smoothie", "entity_group": "VAR", "score": 0.9999621825388143}, {"start": 344, "end": 347, "word": "4.5", "entity_group": "PARAM", "score": 0.9997564409253701}, {"start": 417, "end": 424, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991245896434034}, {"start": 425, "end": 428, "word": "500", "entity_group": "LIMIT", "score": 0.9997766790095703}, {"start": 491, "end": 499, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994907089477179}, {"start": 500, "end": 506, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998862371700117}]}
{"doc_id": "1912502114", "document": "Daniel has two types of liquid supplementation available: Zeta and Phi. After consulting with a doctor, he finds that he needs a minimum of 25 grams of iron and 40 grams of vitamin A. Zeta supplementation consists of 15% iron and 20% vitamin A while Phi supplementation consists of 20% iron and 45% vitamin A. Zeta supplementation costs $0.08 per gram while Phi supplementation costs $0.18 per gram. How much of each supplementation should be used to meet his requirements and minimize cost?", "order_mapping": {"Zeta": 0, "Phi": 1, "Zeta supplementation": 0, "Phi supplementation": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Zeta supplementation": "0.08", "Phi supplementation": "0.18"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "25", "terms": {"Zeta supplementation": "15%", "Phi supplementation": "20%"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "40", "terms": {"Zeta supplementation": "20%", "Phi supplementation": "45%"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Grams of Zeta supplementation\n- y: Grams of Phi supplementation\n\nObjective:\n- Daniel wants to minimize the cost of the supplementation. Zeta supplementation costs $0.08 per gram, and Phi supplementation costs $0.18 per gram. Therefore, the objective function is: Minimize 0.08x + 0.18y\n\nConstraints:\n- Daniel needs a minimum of 25 grams of iron, which can be formulated as: 0.15x + 0.20y >= 25\n- Daniel also needs a minimum of 40 grams of vitamin A, which can be formulated as: 0.20x + 0.45y >= 40\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.08x + 0.18y\nConstraints:\n0.15x + 0.20y >= 25\n0.20x + 0.45y >= 40", "canonical": {"objective": [0.08, 0.18], "constraints": [[-0.15, -0.2, -25.0], [-0.2, -0.45, -40.0]]}, "solution": {"x": 200, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount of Zeta supplementation used in grams: Zeta\n- Amount of Phi supplementation used in grams: Phi\n\nConstraints:\n- Iron requirement (minimum of 25 grams):\n  0.15 * Zeta + 0.20 * Phi >= 25\n- Vitamin A requirement (minimum of 40 grams):\n  0.20 * Zeta + 0.45 * Phi >= 40\n\nObjective:\n- Minimize cost (Zeta costs $0.08 per gram and Phi costs $0.18 per gram):\n  0.08 * Zeta + 0.18 * Phi\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nZeta = intvar(0, 999999999)  # Amount of Zeta supplementation in grams\nPhi = intvar(0, 999999999)  # Amount of Phi supplementation in grams\n\n# Constraints\nm = Model()\n\n# Iron requirement (minimum of 25 grams):\n# Zeta has 15% iron and Phi has 20% iron\nm += 0.15 * Zeta + 0.20 * Phi >= 25\n\n# Vitamin A requirement (minimum of 40 grams):\n# Zeta has 20% vitamin A and Phi has 45% vitamin A\nm += 0.20 * Zeta + 0.45 * Phi >= 40\n\n# Objective\n# Minimize cost (Zeta costs $0.08 per gram and Phi costs $0.18 per gram):\nm.minimize(0.08 * Zeta + 0.18 * Phi)\n", "entities": [{"start": 59, "end": 63, "word": "Zeta", "entity_group": "VAR", "score": 0.9972328663510064}, {"start": 68, "end": 71, "word": "Phi", "entity_group": "VAR", "score": 0.9985677460225036}, {"start": 132, "end": 139, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9983626359155955}, {"start": 143, "end": 145, "word": "25", "entity_group": "LIMIT", "score": 0.9997800676386615}, {"start": 164, "end": 166, "word": "40", "entity_group": "LIMIT", "score": 0.9996689944302695}, {"start": 187, "end": 207, "word": "Zeta supplementation", "entity_group": "VAR", "score": 0.999984798534893}, {"start": 220, "end": 224, "word": "15 %", "entity_group": "PARAM", "score": 0.9580609385483497}, {"start": 234, "end": 238, "word": "20 %", "entity_group": "PARAM", "score": 0.9919129650466912}, {"start": 255, "end": 274, "word": "Phi supplementation", "entity_group": "VAR", "score": 0.9999777368300848}, {"start": 287, "end": 291, "word": "20 %", "entity_group": "PARAM", "score": 0.9767582762523048}, {"start": 301, "end": 305, "word": "45 %", "entity_group": "PARAM", "score": 0.9919068582105532}, {"start": 317, "end": 337, "word": "Zeta supplementation", "entity_group": "VAR", "score": 0.9999788625568885}, {"start": 338, "end": 343, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9986141968570597}, {"start": 346, "end": 350, "word": "0.08", "entity_group": "PARAM", "score": 0.9995898586758833}, {"start": 366, "end": 385, "word": "Phi supplementation", "entity_group": "VAR", "score": 0.9999780772724466}, {"start": 386, "end": 391, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9984347041852453}, {"start": 394, "end": 398, "word": "0.18", "entity_group": "PARAM", "score": 0.998287971463491}, {"start": 487, "end": 495, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9862285514050944}, {"start": 496, "end": 500, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.994463246023771}]}
{"doc_id": "1726213376", "document": "Steven wants to invest in pharmaceutical companies and has a total budget of at most $100000. He has two choices which include Delta and Omega. Each dollar invested in Delta yields a $0.80 profit and each dollar invested in Omega yields a $1.2 profit. A minimum of 25% of all money invested must be in Delta, and at least $10000 must be in Omega. Formulate an LP that can be used to maximize total profit earned from Steven's investment.", "order_mapping": {"Delta": 0, "Omega": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Delta": "0.80", "Omega": "1.2"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "25%", "var": "Delta", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10000", "var": "Omega", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in Delta\n- y: Dollars invested in Omega\n\nObjective:\n- Steven aims to maximize his total profit earned from the investment. Each dollar invested in Delta yields a $0.80 profit and each dollar invested in Omega yields a $1.2 profit. Therefore, the objective function is: Maximize 0.80x + 1.2y\n\nConstraints:\n- Steven has a total budget of at most $100,000, so the constraint is: x + y <= 100000.\n- A minimum of 25% of all money invested must be in Delta, leading to the constraint: x >= 0.25(x + y).\n- At least $10,000 must be invested in Omega, leading to the constraint: y >= 10000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.80x + 1.2y\nConstraints:\nx + y <= 100000\nx >= 0.25(x + y)\ny >= 10000", "canonical": {"objective": [-0.8, -1.2], "constraints": [[1.0, 1.0, 100000.0], [-0.75, 0.25, 0.0], [0.0, -1.0, -10000.0]]}, "solution": {"x": 25000, "y": 75000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in Delta: Delta\n- Amount invested in Omega: Omega\n\nConstraints:\n- Total investment should not exceed 100000 dollars:\n  Delta + Omega <= 100000\n- A minimum of 25% of all money invested must be in Delta:\n  Delta >= 0.25 * (Delta + Omega)\n- At least 10000 dollars must be in Omega:\n  Omega >= 10000\n\nObjective:\n- Maximize total profit (0.80 profit per dollar in Delta, 1.2 profit per dollar in Omega):\n  0.80 * Delta + 1.2 * Omega\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDelta = intvar(0, 999999999)  # Amount invested in Delta\nOmega = intvar(0, 999999999)  # Amount invested in Omega\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $100000:\nm += Delta + Omega <= 100000\n# A minimum of 25% of all money invested must be in Delta:\nm += Delta >= 0.25 * (Delta + Omega)\n# At least $10000 must be in Omega:\nm += Omega >= 10000\n\n# Objective\n# Maximize total profit (0.80 profit per dollar in Delta, 1.2 profit per dollar in Omega):\nm.maximize(0.80 * Delta + 1.2 * Omega)\n", "entities": [{"start": 77, "end": 84, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9953730056730032}, {"start": 87, "end": 93, "word": "100000", "entity_group": "LIMIT", "score": 0.9980863926649974}, {"start": 129, "end": 134, "word": "Delta", "entity_group": "VAR", "score": 0.9980020743149657}, {"start": 139, "end": 144, "word": "Omega", "entity_group": "VAR", "score": 0.9998036223495667}, {"start": 171, "end": 176, "word": "Delta", "entity_group": "VAR", "score": 0.9997670382111292}, {"start": 188, "end": 192, "word": "0.80", "entity_group": "PARAM", "score": 0.997476466107697}, {"start": 193, "end": 199, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.998577344851516}, {"start": 228, "end": 233, "word": "Omega", "entity_group": "VAR", "score": 0.999797880602089}, {"start": 245, "end": 248, "word": "1.2", "entity_group": "PARAM", "score": 0.9993995387751028}, {"start": 249, "end": 255, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994994938134412}, {"start": 260, "end": 267, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9986838683802209}, {"start": 271, "end": 275, "word": "25 %", "entity_group": "LIMIT", "score": 0.937290732102914}, {"start": 309, "end": 314, "word": "Delta", "entity_group": "VAR", "score": 0.9996363486582406}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9968538090383146}, {"start": 332, "end": 337, "word": "10000", "entity_group": "LIMIT", "score": 0.9990497508406309}, {"start": 349, "end": 354, "word": "Omega", "entity_group": "VAR", "score": 0.999821806223279}, {"start": 393, "end": 401, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9926176467332666}, {"start": 408, "end": 414, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999298471152703}]}
{"doc_id": "-1264330103", "document": "Alex is making a special vitamin mix using two drinks: orange juice and apple juice. The vitamin mix must contain at least 100 units of Vitamin A, at least 200 units of vitamin D, and at most 150 units of vitamin E. A cup of orange juice contains 6 units of Vitamin A, 5 units of Vitamin D, 12 units of Vitamin E, and 3 units of Vitamin K. A cup of apple juice contains 10 units of Vitamin A, 3 units of Vitamin D, 15 units of Vitamin E, and 9 units of Vitamin K. How many cups of each drink should be used to make the vitamin mix in order to minimize the amount of Vitamin K?", "order_mapping": {"orange juice": 0, "apple juice": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of Vitamin K", "terms": {"apple juice": "9", "orange juice": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"orange juice": "6", "apple juice": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "200", "terms": {"orange juice": "5", "apple juice": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "150", "terms": {"orange juice": "12", "apple juice": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Cups of orange juice\n- y: Cups of apple juice\n\nObjective:\n- The goal is to minimize the amount of Vitamin K in the vitamin mix. The objective function is: Minimize 9y + 3x\n\nConstraints:\n- The vitamin mix must contain at least 100 units of Vitamin A, which translates to the constraint: 6x + 10y >= 100.\n- The mix must contain at least 200 units of Vitamin D, leading to the constraint: 5x + 3y >= 200.\n- The mix must contain at most 150 units of Vitamin E, resulting in the constraint: 12x + 15y <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 9y + 3x\nConstraints:\n6x + 10y >= 100\n5x + 3y >= 200\n12x + 15y <= 150", "canonical": {"objective": [3.0, 9.0], "constraints": [[-6.0, -10.0, -100.0], [-5.0, -3.0, -200.0], [12.0, 15.0, 150.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of cups of orange juice: OrangeJuice\n- Number of cups of apple juice: AppleJuice\n\nConstraints:\n- Vitamin A requirement (at least 100 units):\n  6 * OrangeJuice + 10 * AppleJuice >= 100\n- Vitamin D requirement (at least 200 units):\n  5 * OrangeJuice + 3 * AppleJuice >= 200\n- Vitamin E requirement (at most 150 units):\n  12 * OrangeJuice + 15 * AppleJuice <= 150\n\nObjective:\n- Minimize the amount of Vitamin K (3 units per cup of orange juice, 9 units per cup of apple juice):\n  3 * OrangeJuice + 9 * AppleJuice\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOrangeJuice = intvar(0, 999999999)  # Number of cups of orange juice\nAppleJuice = intvar(0, 999999999)  # Number of cups of apple juice\n\n# Constraints\nm = Model()\n\n# Vitamin A requirement (at least 100 units):\nm += 6 * OrangeJuice + 10 * AppleJuice >= 100\n# Vitamin D requirement (at least 200 units):\nm += 5 * OrangeJuice + 3 * AppleJuice >= 200\n# Vitamin E requirement (at most 150 units):\nm += 12 * OrangeJuice + 15 * AppleJuice <= 150\n\n# Objective\n# Minimize the amount of Vitamin K (3 units per cup of orange juice, 9 units per cup of apple juice):\nm.minimize(3 * OrangeJuice + 9 * AppleJuice)\n", "entities": [{"start": 56, "end": 68, "word": "orange juice", "entity_group": "VAR", "score": 0.9999589562451388}, {"start": 73, "end": 84, "word": "apple juice", "entity_group": "VAR", "score": 0.9999788118779945}, {"start": 116, "end": 124, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988743079091131}, {"start": 125, "end": 128, "word": "100", "entity_group": "LIMIT", "score": 0.99961372553347}, {"start": 150, "end": 158, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986451518030333}, {"start": 159, "end": 162, "word": "200", "entity_group": "LIMIT", "score": 0.9996756134288348}, {"start": 188, "end": 195, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989895072973031}, {"start": 196, "end": 199, "word": "150", "entity_group": "LIMIT", "score": 0.9996527358063994}, {"start": 229, "end": 241, "word": "orange juice", "entity_group": "VAR", "score": 0.9999390600865243}, {"start": 251, "end": 252, "word": "6", "entity_group": "PARAM", "score": 0.999587500111541}, {"start": 274, "end": 275, "word": "5", "entity_group": "PARAM", "score": 0.9997132129663889}, {"start": 297, "end": 299, "word": "12", "entity_group": "PARAM", "score": 0.9997067912846564}, {"start": 325, "end": 326, "word": "3", "entity_group": "PARAM", "score": 0.999646612992488}, {"start": 336, "end": 346, "word": "Vitamin K.", "entity_group": "OBJ_NAME", "score": 0.9966335674910167}, {"start": 356, "end": 367, "word": "apple juice", "entity_group": "VAR", "score": 0.9999599094545799}, {"start": 377, "end": 379, "word": "10", "entity_group": "PARAM", "score": 0.9995875457887065}, {"start": 401, "end": 402, "word": "3", "entity_group": "PARAM", "score": 0.9997132129663889}, {"start": 424, "end": 426, "word": "15", "entity_group": "PARAM", "score": 0.9997067912846564}, {"start": 452, "end": 453, "word": "9", "entity_group": "PARAM", "score": 0.999580156224991}, {"start": 463, "end": 473, "word": "Vitamin K.", "entity_group": "OBJ_NAME", "score": 0.9873954877547655}, {"start": 553, "end": 561, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9835777451004172}, {"start": 566, "end": 585, "word": "amount of Vitamin K", "entity_group": "OBJ_NAME", "score": 0.9729321753644536}]}
{"doc_id": "-1329470525", "document": "In a video game, Alison has to collect 40 stars and 80 snowballs. There are two areas. Starry Mountain and Frosty Hills, where she can find these resources. For each hour in Starry Mountain that she spends, she gets 5 stars and 2 snowballs. For each hour in Frosty Hills that she spends, she gets 1 star and 12 snowballs. Formulate an LP to minimize the amount of time spent in both areas.", "order_mapping": {"Starry Mountain": 0, "Frosty Hills": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "amount of time", "vars": ["Starry Mountain", "Frosty Hills"]}, "const_declarations": [{"type": "linear", "direction": "has to collect", "limit": "40", "terms": {"Starry Mountain": "5", "Frosty Hills": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has to collect", "limit": "80", "terms": {"Starry Mountain": "2", "Frosty Hills": "12"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Hours spent in Starry Mountain\n- y: Hours spent in Frosty Hills\n\nObjective:\n- The objective is to minimize the amount of time spent in both areas. Therefore, the objective function is: Minimize x + y\n\nConstraints:\n- Alison has to collect 40 stars, which can be formulated as: 5x + y >= 40\n- Alison has to collect 80 snowballs, which can be formulated as: 2x + 12y >= 80\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: x + y\nConstraints:\n5x + y >= 40\n2x + 12y >= 80", "canonical": {"objective": [1.0, 1.0], "constraints": [[-5.0, -1.0, -40.0], [-2.0, -12.0, -80.0]]}, "solution": {"x": 7, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Time spent in Starry Mountain: StarryMountain\n- Time spent in Frosty Hills: FrostyHills\n\nConstraints:\n- To collect at least 40 stars:\n  5 * StarryMountain + 1 * FrostyHills >= 40\n- To collect at least 80 snowballs:\n  2 * StarryMountain + 12 * FrostyHills >= 80\n\nObjective:\n- Minimize the total amount of time spent in both areas:\n  StarryMountain + FrostyHills\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStarryMountain = intvar(0, 999999999)  # Time spent in Starry Mountain\nFrostyHills = intvar(0, 999999999)  # Time spent in Frosty Hills\n\n# Constraints\nm = Model()\n\n# Alison has to collect at least 40 stars:\nm += 5 * StarryMountain + 1 * FrostyHills >= 40\n# Alison has to collect at least 80 snowballs:\nm += 2 * StarryMountain + 12 * FrostyHills >= 80\n\n# Objective\n# Minimize the total amount of time spent in both areas:\nm.minimize(StarryMountain + FrostyHills)\n", "entities": [{"start": 25, "end": 39, "word": "has to collect", "entity_group": "CONST_DIR", "score": 0.9941889705623418}, {"start": 40, "end": 42, "word": "40", "entity_group": "LIMIT", "score": 0.9997384594288645}, {"start": 53, "end": 55, "word": "80", "entity_group": "LIMIT", "score": 0.999682996830105}, {"start": 90, "end": 105, "word": "Starry Mountain", "entity_group": "VAR", "score": 0.9999561669534053}, {"start": 110, "end": 122, "word": "Frosty Hills", "entity_group": "VAR", "score": 0.999980504534226}, {"start": 166, "end": 175, "word": "each hour", "entity_group": "OBJ_NAME", "score": 0.5595904804198867}, {"start": 179, "end": 194, "word": "Starry Mountain", "entity_group": "VAR", "score": 0.9999243470012403}, {"start": 222, "end": 223, "word": "5", "entity_group": "PARAM", "score": 0.9996962177356233}, {"start": 234, "end": 235, "word": "2", "entity_group": "PARAM", "score": 0.999701497421792}, {"start": 252, "end": 261, "word": "each hour", "entity_group": "OBJ_NAME", "score": 0.6443067035575899}, {"start": 265, "end": 277, "word": "Frosty Hills", "entity_group": "VAR", "score": 0.9999500198385411}, {"start": 305, "end": 306, "word": "1", "entity_group": "PARAM", "score": 0.9995531092400846}, {"start": 316, "end": 318, "word": "12", "entity_group": "PARAM", "score": 0.9996788222222565}, {"start": 350, "end": 358, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9973564106755368}, {"start": 363, "end": 377, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9815273435994429}]}
{"doc_id": "-2133935107", "document": "John Designs crafts two types of necklaces: platinum and silver necklaces. Each platinum necklace takes 4 hours to design and 15 hours to craft. Each silver necklace takes 7 hours to design and 5 hours to craft. The designing team is available for 35 hours and the crafting team is available for 40 hours. The profit is $2000 per platinum necklace and $700 per silver necklace. How many necklaces of each type should the company make to maximize their profit?", "order_mapping": {"platinum": 0, "silver necklaces": 1, "platinum necklace": 0, "silver necklace": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"platinum necklace": "2000", "silver necklace": "700"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "35", "terms": {"platinum necklace": "4", "silver necklace": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "40", "terms": {"platinum necklace": "15", "silver necklace": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of platinum necklaces\n- y: Number of silver necklaces\n\nObjective:\n- The company aims to maximize its profit. The profit is $2000 per platinum necklace and $700 per silver necklace. Therefore, the objective function is: Maximize 2000x + 700y\n\nConstraints:\n- The designing team is available for 35 hours, and each platinum necklace takes 4 hours to design and each silver necklace takes 7 hours to design. This leads to the constraint: 4x + 7y <= 35.\n- The crafting team is available for 40 hours, and each platinum necklace takes 15 hours to craft and each silver necklace takes 5 hours to craft. This results in the constraint: 15x + 5y <= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 2000x + 700y\nConstraints:\n4x + 7y <= 35\n15x + 5y <= 40", "canonical": {"objective": [-2000.0, -700.0], "constraints": [[4.0, 7.0, 35.0], [15.0, 5.0, 40.0]]}, "solution": {"x": 2, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of platinum necklaces made: PlatinumNecklaces\n- Number of silver necklaces made: SilverNecklaces\n\nConstraints:\n- Designing team is available for 35 hours (4 hours per platinum necklace, 7 hours per silver necklace):\n  4 * PlatinumNecklaces + 7 * SilverNecklaces <= 35\n- Crafting team is available for 40 hours (15 hours per platinum necklace, 5 hours per silver necklace):\n  15 * PlatinumNecklaces + 5 * SilverNecklaces <= 40\n\nObjective:\n- Maximize profit ($2000 per platinum necklace, $700 per silver necklace):\n  2000 * PlatinumNecklaces + 700 * SilverNecklaces\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPlatinumNecklaces = intvar(0, 999999999)  # Number of platinum necklaces made\nSilverNecklaces = intvar(0, 999999999)  # Number of silver necklaces made\n\n# Constraints\nm = Model()\n\n# Designing team is available for 35 hours:\nm += 4 * PlatinumNecklaces + 7 * SilverNecklaces <= 35\n# Crafting team is available for 40 hours:\nm += 15 * PlatinumNecklaces + 5 * SilverNecklaces <= 40\n\n# Objective\n# Maximize profit ($2000 per platinum necklace, $700 per silver necklace):\nm.maximize(2000 * PlatinumNecklaces + 700 * SilverNecklaces)\n", "entities": [{"start": 45, "end": 53, "word": "platinum", "entity_group": "VAR", "score": 0.9994795337040695}, {"start": 58, "end": 74, "word": "silver necklaces", "entity_group": "VAR", "score": 0.9999785674454885}, {"start": 82, "end": 99, "word": "platinum necklace", "entity_group": "VAR", "score": 0.9999843107802884}, {"start": 106, "end": 107, "word": "4", "entity_group": "PARAM", "score": 0.9996992363414514}, {"start": 128, "end": 130, "word": "15", "entity_group": "PARAM", "score": 0.9997213001416857}, {"start": 153, "end": 168, "word": "silver necklace", "entity_group": "VAR", "score": 0.9999796584149941}, {"start": 175, "end": 176, "word": "7", "entity_group": "PARAM", "score": 0.9997118979854436}, {"start": 197, "end": 198, "word": "5", "entity_group": "PARAM", "score": 0.9996513118321034}, {"start": 238, "end": 247, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982274535562727}, {"start": 252, "end": 254, "word": "35", "entity_group": "LIMIT", "score": 0.9997248592696616}, {"start": 286, "end": 295, "word": "available", "entity_group": "CONST_DIR", "score": 0.99291137743262}, {"start": 300, "end": 302, "word": "40", "entity_group": "LIMIT", "score": 0.9997108157509914}, {"start": 315, "end": 321, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999766466486409}, {"start": 327, "end": 331, "word": "2000", "entity_group": "PARAM", "score": 0.999456348767063}, {"start": 336, "end": 353, "word": "platinum necklace", "entity_group": "VAR", "score": 0.9999805743040485}, {"start": 360, "end": 363, "word": "700", "entity_group": "PARAM", "score": 0.999616851877138}, {"start": 368, "end": 383, "word": "silver necklace", "entity_group": "VAR", "score": 0.9999638015391906}, {"start": 445, "end": 453, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996017472989602}, {"start": 460, "end": 466, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998553399283532}]}
{"doc_id": "1377434768", "document": "Zeta Monitor makes LCD and LED monitors. Projections indicate a demand of at least 150 LCD monitors and 80 LED monitors each day. Because of the manual labor involved, at most 300 LCD monitors and 280 LED monitors can be made each day. To satisfy a contract with an electronics shop, at least 250 total monitors must be made each day. The factory makes a profit of $25 per LCD monitor and $70 per LED monitor. How many of each monitor should the company make to maximize profit?", "order_mapping": {"LCD": 0, "LED monitors": 1, "LCD monitors": 0, "LCD monitor": 0, "LED monitor": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"LCD monitor": "25", "LED monitor": "70"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "150", "var": "LCD monitors", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "80", "var": "LED monitors", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "300", "var": "LCD monitors", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "280", "var": "LED monitors", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "250", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of LCD monitors\n- y: Number of LED monitors\n\nObjective:\n- The company aims to maximize its profit. The profit per unit for LCD monitors is $25 and for LED monitors is $70. Therefore, the objective function is: Maximize 25x + 70y\n\nConstraints:\n- At least 150 LCD monitors and 80 LED monitors must be produced each day, leading to the constraints: x >= 150 and y >= 80.\n- At most 300 LCD monitors and 280 LED monitors can be made each day, resulting in the constraints: x <= 300 and y <= 280.\n- To satisfy a contract with an electronics shop, at least 250 total monitors must be made each day, leading to the constraint: x + y >= 250.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 25x + 70y\nConstraints:\nx >= 150\ny >= 80\nx <= 300\ny <= 280\nx + y >= 250", "canonical": {"objective": [-25.0, -70.0], "constraints": [[-1.0, 0.0, -150.0], [0.0, -1.0, -80.0], [1.0, 0.0, 300.0], [0.0, 1.0, 280.0], [-1.0, -1.0, -250.0]]}, "solution": {"x": 300, "y": 280}, "pseudo_model": "\nDecision Variables:\n- Number of LCD monitors made per day: LCDMonitors\n- Number of LED monitors made per day: LEDMonitors\n\nConstraints:\n- At least 150 LCD monitors each day:\n  LCDMonitors >= 150\n- At least 80 LED monitors each day:\n  LEDMonitors >= 80\n- At most 300 LCD monitors each day:\n  LCDMonitors <= 300\n- At most 280 LED monitors each day:\n  LEDMonitors <= 280\n- At least 250 total monitors each day (to satisfy a contract):\n  LCDMonitors + LEDMonitors >= 250\n\nObjective:\n- Maximize profit ($25 per LCD monitor and $70 per LED monitor):\n  25 * LCDMonitors + 70 * LEDMonitors\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLCDMonitors = intvar(0, 999999999)  # Number of LCD monitors made per day\nLEDMonitors = intvar(0, 999999999)  # Number of LED monitors made per day\n\n# Constraints\nm = Model()\n\n# Demand constraints\nm += LCDMonitors >= 150  # At least 150 LCD monitors each day\nm += LEDMonitors >= 80  # At least 80 LED monitors each day\n\n# Production capacity constraints\nm += LCDMonitors <= 300  # At most 300 LCD monitors each day\nm += LEDMonitors <= 280  # At most 280 LED monitors each day\n\n# Contract requirement\nm += LCDMonitors + LEDMonitors >= 250  # At least 250 total monitors each day\n\n# Objective\n# Maximize profit ($25 per LCD monitor and $70 per LED monitor)\nm.maximize(25 * LCDMonitors + 70 * LEDMonitors)\n", "entities": [{"start": 19, "end": 22, "word": "LCD", "entity_group": "VAR", "score": 0.9991730385141742}, {"start": 27, "end": 39, "word": "LED monitors", "entity_group": "VAR", "score": 0.9999745902355295}, {"start": 75, "end": 83, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986096818751459}, {"start": 84, "end": 87, "word": "150", "entity_group": "LIMIT", "score": 0.9994623376516791}, {"start": 88, "end": 100, "word": "LCD monitors", "entity_group": "VAR", "score": 0.9999694043151739}, {"start": 105, "end": 107, "word": "80", "entity_group": "LIMIT", "score": 0.9995225801462171}, {"start": 108, "end": 120, "word": "LED monitors", "entity_group": "VAR", "score": 0.9999077862838391}, {"start": 171, "end": 178, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987541254848092}, {"start": 179, "end": 182, "word": "300", "entity_group": "LIMIT", "score": 0.9995920996088782}, {"start": 183, "end": 195, "word": "LCD monitors", "entity_group": "VAR", "score": 0.9999647635560988}, {"start": 200, "end": 203, "word": "280", "entity_group": "LIMIT", "score": 0.9994525795048189}, {"start": 204, "end": 216, "word": "LED monitors", "entity_group": "VAR", "score": 0.9999468446639433}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985277271636658}, {"start": 298, "end": 301, "word": "250", "entity_group": "LIMIT", "score": 0.9995366292357306}, {"start": 361, "end": 367, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998356843610862}, {"start": 373, "end": 375, "word": "25", "entity_group": "PARAM", "score": 0.9995627033473069}, {"start": 380, "end": 391, "word": "LCD monitor", "entity_group": "VAR", "score": 0.9999793024106461}, {"start": 398, "end": 400, "word": "70", "entity_group": "PARAM", "score": 0.9996543371371155}, {"start": 405, "end": 416, "word": "LED monitor", "entity_group": "VAR", "score": 0.9999619930307116}, {"start": 471, "end": 479, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994938024516942}, {"start": 480, "end": 486, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277472233759}]}
{"doc_id": "-2080370374", "document": "Alpha Glass makes two types of glass panes: a bulletproof glass pane and a fire-rated glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 350 minutes per day. It takes 4 minutes in the heating machine and 6 minutes in the cooling machine to make one bulletproof glass pane. It takes 7 minutes in the heating machine and 9 minutes in the cooling machine to make one fire-rated glass pane. The profit per pane of bulletproof glass is $12 and the profit per pane of fire-rated glass is $9.5. How many panes of each glass type should the company make to maximize profit? What is the maximum profit?", "order_mapping": {"bulletproof glass pane": 0, "fire-rated glass pane": 1, "bulletproof glass": 0, "fire-rated glass": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bulletproof glass": "12", "fire-rated glass": "9.5"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "350", "terms": {"bulletproof glass pane": "4", "fire-rated glass pane": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "350", "terms": {"bulletproof glass pane": "6", "fire-rated glass pane": "9"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bulletproof glass panes\n- y: Number of fire-rated glass panes\n\nObjective:\n- The company aims to maximize its profit. The profit per pane of bulletproof glass is $12 and the profit per pane of fire-rated glass is $9.5. Therefore, the objective function is: Maximize 12x + 9.5y\n\nConstraints:\n- The total time available on the heating and cooling machines is 350 minutes per day. It takes 4 minutes in the heating machine and 6 minutes in the cooling machine to make one bulletproof glass pane, and 7 minutes in the heating machine and 9 minutes in the cooling machine to make one fire-rated glass pane. This leads to the constraints: 4x + 7y <= 350 and 6x + 9y <= 350.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 9.5y\nConstraints:\n4x + 7y <= 350\n6x + 9y <= 350", "canonical": {"objective": [-12.0, -9.5], "constraints": [[4.0, 7.0, 350.0], [6.0, 9.0, 350.0]]}, "solution": {"x": 58, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of bulletproof glass panes made: BulletproofGlass\n- Number of fire-rated glass panes made: FireRatedGlass\n\nConstraints:\n- Heating machine time for both types of glass panes should not exceed 350 minutes per day:\n  4 * BulletproofGlass + 7 * FireRatedGlass <= 350\n- Cooling machine time for both types of glass panes should not exceed 350 minutes per day:\n  6 * BulletproofGlass + 9 * FireRatedGlass <= 350\n\nObjective:\n- Maximize profit (12 dollars per bulletproof glass pane, 9.5 dollars per fire-rated glass pane):\n  12 * BulletproofGlass + 9.5 * FireRatedGlass\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBulletproofGlass = intvar(0, 999999999)  # Number of bulletproof glass panes made\nFireRatedGlass = intvar(0, 999999999)  # Number of fire-rated glass panes made\n\n# Constraints\nm = Model()\n\n# Time constraints for heating machine (4 minutes for bulletproof, 7 minutes for fire-rated, max 350 minutes):\nm += 4 * BulletproofGlass + 7 * FireRatedGlass <= 350\n# Time constraints for cooling machine (6 minutes for bulletproof, 9 minutes for fire-rated, max 350 minutes):\nm += 6 * BulletproofGlass + 9 * FireRatedGlass <= 350\n\n# Objective\n# Maximize profit (12 dollars per bulletproof glass pane, 9.5 dollars per fire-rated glass pane):\nm.maximize(12 * BulletproofGlass + 9.5 * FireRatedGlass)\n", "entities": [{"start": 47, "end": 69, "word": "bulletproof glass pane", "entity_group": "VAR", "score": 0.9997029802221122}, {"start": 76, "end": 99, "word": "fire - rated glass pane", "entity_group": "VAR", "score": 0.9982715312999637}, {"start": 189, "end": 196, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9989396136048291}, {"start": 200, "end": 203, "word": "350", "entity_group": "LIMIT", "score": 0.9997084335779596}, {"start": 231, "end": 232, "word": "4", "entity_group": "PARAM", "score": 0.9996406923787776}, {"start": 268, "end": 269, "word": "6", "entity_group": "PARAM", "score": 0.9996615433027114}, {"start": 313, "end": 335, "word": "bulletproof glass pane", "entity_group": "VAR", "score": 0.9991669103471799}, {"start": 347, "end": 348, "word": "7", "entity_group": "PARAM", "score": 0.9993850529051865}, {"start": 384, "end": 385, "word": "9", "entity_group": "PARAM", "score": 0.9996411354611846}, {"start": 429, "end": 452, "word": "fire - rated glass pane", "entity_group": "VAR", "score": 0.9983239173544395}, {"start": 459, "end": 465, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998652173277712}, {"start": 478, "end": 495, "word": "bulletproof glass", "entity_group": "VAR", "score": 0.9996804996324805}, {"start": 501, "end": 503, "word": "12", "entity_group": "PARAM", "score": 0.9995730819244784}, {"start": 512, "end": 518, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999209959793842}, {"start": 531, "end": 549, "word": "fire - rated glass", "entity_group": "VAR", "score": 0.9969595566770176}, {"start": 555, "end": 558, "word": "9.5", "entity_group": "PARAM", "score": 0.9996843218166813}, {"start": 622, "end": 630, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997168448030275}, {"start": 631, "end": 637, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999598259309675}, {"start": 660, "end": 666, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999711379617047}]}
{"doc_id": "1450943790", "document": "A gardener mixes soil to produce his own soil mix to fulfill his compost and loam requirements. There are two types of soil, an outdoor soil and an indoor soil. The indoor soil costs $2 and contains 2 units of compost and 3 units of loam. The outdoor soil costs $3 and contains 4 units of compost and 6 units of loam. If the gardener requires at least 80 units of compost and 70 units of loam per week, how much of each soil should he purchase to minimize his cost?", "order_mapping": {"outdoor soil": 0, "indoor soil": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"indoor soil": "2", "outdoor soil": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "80", "terms": {"indoor soil": "2", "outdoor soil": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "70", "terms": {"indoor soil": "3", "outdoor soil": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Quantity of outdoor soil\n- y: Quantity of indoor soil\n\nObjective:\n- The gardener aims to minimize his cost. The cost of outdoor soil is $3 and the cost of indoor soil is $2. Therefore, the objective function is: Minimize 3x + 2y\n\nConstraints:\n- The gardener requires at least 80 units of compost, which can be expressed as: 4x + 2y >= 80\n- The gardener requires at least 70 units of loam, which can be expressed as: 6x + 3y >= 70\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 3x + 2y\nConstraints:\n4x + 2y >= 80\n6x + 3y >= 70", "canonical": {"objective": [3.0, 2.0], "constraints": [[-4.0, -2.0, -80.0], [-6.0, -3.0, -70.0]]}, "solution": {"x": 20, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount of indoor soil purchased: IndoorSoil\n- Amount of outdoor soil purchased: OutdoorSoil\n\nConstraints:\n- At least 80 units of compost are required per week:\n  2 * IndoorSoil + 4 * OutdoorSoil >= 80\n- At least 70 units of loam are required per week:\n  3 * IndoorSoil + 6 * OutdoorSoil >= 70\n\nObjective:\n- Minimize cost (Indoor soil costs $2, Outdoor soil costs $3):\n  2 * IndoorSoil + 3 * OutdoorSoil\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIndoorSoil = intvar(0, 999999999)  # Amount of indoor soil purchased\nOutdoorSoil = intvar(0, 999999999)  # Amount of outdoor soil purchased\n\n# Constraints\nm = Model()\n\n# The gardener requires at least 80 units of compost per week:\nm += 2 * IndoorSoil + 4 * OutdoorSoil >= 80\n# The gardener requires at least 70 units of loam per week:\nm += 3 * IndoorSoil + 6 * OutdoorSoil >= 70\n\n# Objective\n# Minimize cost (Indoor soil costs $2, Outdoor soil costs $3):\nm.minimize(2 * IndoorSoil + 3 * OutdoorSoil)\n", "entities": [{"start": 130, "end": 142, "word": "outdoor soil", "entity_group": "VAR", "score": 0.9999713603227022}, {"start": 150, "end": 161, "word": "indoor soil", "entity_group": "VAR", "score": 0.9999877370809434}, {"start": 168, "end": 179, "word": "indoor soil", "entity_group": "VAR", "score": 0.9999865957765455}, {"start": 180, "end": 185, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994363926387139}, {"start": 188, "end": 189, "word": "2", "entity_group": "PARAM", "score": 0.9996437367436991}, {"start": 203, "end": 204, "word": "2", "entity_group": "PARAM", "score": 0.9997290575927652}, {"start": 226, "end": 227, "word": "3", "entity_group": "PARAM", "score": 0.9996848926071085}, {"start": 248, "end": 260, "word": "outdoor soil", "entity_group": "VAR", "score": 0.9999802994991202}, {"start": 261, "end": 266, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995001656017587}, {"start": 269, "end": 270, "word": "3", "entity_group": "PARAM", "score": 0.9996437208932405}, {"start": 284, "end": 285, "word": "4", "entity_group": "PARAM", "score": 0.9997290814972031}, {"start": 307, "end": 308, "word": "6", "entity_group": "PARAM", "score": 0.9996479595404862}, {"start": 350, "end": 358, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992336255075358}, {"start": 359, "end": 361, "word": "80", "entity_group": "LIMIT", "score": 0.9997551230535489}, {"start": 383, "end": 385, "word": "70", "entity_group": "LIMIT", "score": 0.999694904589414}, {"start": 455, "end": 463, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993090310349731}, {"start": 468, "end": 472, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989832478923693}]}
{"doc_id": "-2099506892", "document": "A paint manufacturer produces 350 kg of dye and 250 kg of filler each week. By using different techniques, they can produce three different paint products for sale: oil paintings, acrylic paintings, and watercolor paintings. The profit per kg for selling the paint is $150, $180, $220 for the oil painting, acrylic painting, and watercolor painting respectively. Producing 1 kg of oil paintings requires 6.5 kg of dye and 15 kg of filler. Producing 1 kg of acrylic paintings requires 8 kg of dye and 12 kg of filler. Producing 1 kg of watercolor paintings requires 16 kg of dye and 5 kg of filler. Formulate the problem of deciding how much of each paint to make each week as a LP problem in order to maximize profit.", "order_mapping": {"oil paintings": 0, "acrylic paintings": 1, "watercolor paintings": 2, "oil painting": 0, "acrylic painting": 1, "watercolor painting": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"oil painting": "150", "acrylic painting": "180", "watercolor painting": "220"}}, "const_declarations": [{"type": "linear", "direction": "produces", "limit": "350", "terms": {"oil paintings": "6.5", "acrylic paintings": "8", "watercolor paintings": "16"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "produces", "limit": "250", "terms": {"oil paintings": "15", "acrylic paintings": "12", "watercolor paintings": "5"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kg of oil paintings produced\n- y: kg of acrylic paintings produced\n- z: kg of watercolor paintings produced\n\nObjective:\n- The manufacturer aims to maximize the profit. The profit per kg for selling the paint is $150, $180, $220 for the oil painting, acrylic painting, and watercolor painting respectively. Therefore, the objective function is: Maximize 150x + 180y + 220z\n\nConstraints:\n- The manufacturer can produce 350 kg of dye and 250 kg of filler each week. The production of each type of painting requires a certain amount of dye and filler. These constraints can be formulated as:\n    - 6.5x + 8y + 16z <= 350 (dye constraint)\n    - 15x + 12y + 5z <= 250 (filler constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 180y + 220z\nConstraints:\n6.5x + 8y + 16z <= 350\n15x + 12y + 5z <= 250", "canonical": {"objective": [-150.0, -180.0, -220.0], "constraints": [[6.5, 8.0, 16.0, 350.0], [15.0, 12.0, 5.0, 250.0]]}, "solution": {"x": 0, "y": 15, "z": 14}, "pseudo_model": "\nDecision Variables:\n- kg of oil paintings produced each week: OilPaintings\n- kg of acrylic paintings produced each week: AcrylicPaintings\n- kg of watercolor paintings produced each week: WatercolorPaintings\n\nConstraints:\n- Total dye used should not exceed 350 kg per week:\n  6.5 * OilPaintings + 8 * AcrylicPaintings + 16 * WatercolorPaintings <= 350\n- Total filler used should not exceed 250 kg per week:\n  15 * OilPaintings + 12 * AcrylicPaintings + 5 * WatercolorPaintings <= 250\n\nObjective:\n- Maximize profit (150 dollars per kg of oil painting, 180 dollars per kg of acrylic painting, 220 dollars per kg of watercolor painting):\n  150 * OilPaintings + 180 * AcrylicPaintings + 220 * WatercolorPaintings\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOilPaintings = intvar(0, 999999999)  # kg of oil paintings produced each week\nAcrylicPaintings = intvar(0, 999999999)  # kg of acrylic paintings produced each week\nWatercolorPaintings = intvar(0, 999999999)  # kg of watercolor paintings produced each week\n\n# Constraints\nm = Model()\n\n# Total dye used should not exceed 350 kg per week:\nm += 6.5 * OilPaintings + 8 * AcrylicPaintings + 16 * WatercolorPaintings <= 350\n# Total filler used should not exceed 250 kg per week:\nm += 15 * OilPaintings + 12 * AcrylicPaintings + 5 * WatercolorPaintings <= 250\n\n# Objective\n# Maximize profit (150 dollars per kg of oil painting, 180 dollars per kg of acrylic painting, 220 dollars per kg of watercolor painting):\nm.maximize(150 * OilPaintings + 180 * AcrylicPaintings + 220 * WatercolorPaintings)\n", "entities": [{"start": 21, "end": 29, "word": "produces", "entity_group": "CONST_DIR", "score": 0.9980171010994202}, {"start": 30, "end": 33, "word": "350", "entity_group": "LIMIT", "score": 0.9991078438693912}, {"start": 48, "end": 51, "word": "250", "entity_group": "LIMIT", "score": 0.9997030968915338}, {"start": 168, "end": 181, "word": "oil paintings", "entity_group": "VAR", "score": 0.9999741656525049}, {"start": 184, "end": 201, "word": "acrylic paintings", "entity_group": "VAR", "score": 0.9999841432748862}, {"start": 208, "end": 228, "word": "watercolor paintings", "entity_group": "VAR", "score": 0.9999534639585749}, {"start": 235, "end": 241, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999719649480451}, {"start": 276, "end": 279, "word": "150", "entity_group": "PARAM", "score": 0.9995155094966134}, {"start": 284, "end": 287, "word": "180", "entity_group": "PARAM", "score": 0.9996853041613998}, {"start": 292, "end": 295, "word": "220", "entity_group": "PARAM", "score": 0.9997206099574408}, {"start": 304, "end": 316, "word": "oil painting", "entity_group": "VAR", "score": 0.999969263574406}, {"start": 319, "end": 335, "word": "acrylic painting", "entity_group": "VAR", "score": 0.9999783254417534}, {"start": 342, "end": 361, "word": "watercolor painting", "entity_group": "VAR", "score": 0.9999196615036632}, {"start": 395, "end": 408, "word": "oil paintings", "entity_group": "VAR", "score": 0.9999638879034433}, {"start": 418, "end": 421, "word": "6.5", "entity_group": "PARAM", "score": 0.9996857206083394}, {"start": 436, "end": 438, "word": "15", "entity_group": "PARAM", "score": 0.9997021743314598}, {"start": 472, "end": 489, "word": "acrylic paintings", "entity_group": "VAR", "score": 0.9999624578657047}, {"start": 499, "end": 500, "word": "8", "entity_group": "PARAM", "score": 0.999685782711675}, {"start": 515, "end": 517, "word": "12", "entity_group": "PARAM", "score": 0.9997021743314128}, {"start": 551, "end": 571, "word": "watercolor paintings", "entity_group": "VAR", "score": 0.9999592233417042}, {"start": 581, "end": 583, "word": "16", "entity_group": "PARAM", "score": 0.9996857908828157}, {"start": 598, "end": 599, "word": "5", "entity_group": "PARAM", "score": 0.999656242372597}, {"start": 718, "end": 726, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9855824023825899}, {"start": 727, "end": 733, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9971149442944984}]}
{"doc_id": "711862731", "document": "Iota Food wants to advertise the release of their new product using ads in three areas: grocery stores, train stations, and water parks. They have a weekly advertising budget of $50000. The cost of an ad in each area and their audience reach is given. An ad in a grocery store costs $300 and reaches 10000 viewers. An ad at a train station costs $500 and reaches 20000 viewers. An ad in a water park costs $1000 and reaches 50000 viewers. The city limits the number of ads at a train station from a single company to 15. In order to maintain balance, at most a third of the total number of ads should be in water parks and a minimum of 10% of ads should be in grocery stores. How many ads should be run in each of the three areas in order to maximize viewership?", "order_mapping": {"grocery stores": 0, "train stations": 1, "water parks": 2, "grocery store": 0, "train station": 1, "water park": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "viewership", "terms": {"train station": "20000", "grocery store": "10000", "water park": "50000"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "50000", "terms": {"grocery store": "300", "train station": "500", "water park": "1000"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "limits the number", "limit": "15", "var": "train station", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "water parks", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "10%", "var": "grocery stores", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ads in grocery stores\n- y: Number of ads in train stations\n- z: Number of ads in water parks\n\nObjective:\n- Iota Food wants to maximize viewership. The audience reach for each ad in a grocery store is 10000, in a train station is 20000, and in a water park is 50000. Therefore, the objective function is: Maximize 10000x + 20000y + 50000z\n\nConstraints:\n- The weekly advertising budget is $50000, leading to the constraint: 300x + 500y + 1000z <= 50000.\n- The city limits the number of ads at a train station to 15, resulting in the constraint: y <= 15.\n- At most a third of the total number of ads should be in water parks, leading to the constraint: z <= (x + y + z)/3.\n- A minimum of 10% of ads should be in grocery stores, resulting in the constraint: x >= 0.10(x + y + z).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10000x + 20000y + 50000z\nConstraints:\n300x + 500y + 1000z <= 50000\ny <= 15\nz <= (x + y + z)/3\nx >= 0.10(x + y + z)", "canonical": {"objective": [-10000.0, -20000.0, -50000.0], "constraints": [[300.0, 500.0, 1000.0, 50000.0], [0.0, 1.0, 0.0, 15.0], [-0.3333333333333333, -0.3333333333333333, 0.6666666666666667, 0.0], [-0.9, 0.1, 0.1, 0.0]]}, "solution": {"x": 45, "y": 15, "z": 29}, "pseudo_model": "\nDecision Variables:\n- Number of ads in grocery stores: GroceryAds\n- Number of ads at train stations: TrainAds\n- Number of ads in water parks: WaterParkAds\n\nConstraints:\n- Weekly advertising budget should not exceed $50000:\n  300 * GroceryAds + 500 * TrainAds + 1000 * WaterParkAds <= 50000\n- At most 15 ads at train stations:\n  TrainAds <= 15\n- At most a third of the total number of ads should be in water parks:\n  WaterParkAds <= 1/3 * (GroceryAds + TrainAds + WaterParkAds)\n- A minimum of 10% of ads should be in grocery stores:\n  GroceryAds >= 0.10 * (GroceryAds + TrainAds + WaterParkAds)\n\nObjective:\n- Maximize viewership (10000 viewers per grocery store ad, 20000 viewers per train station ad, 50000 viewers per water park ad):\n  10000 * GroceryAds + 20000 * TrainAds + 50000 * WaterParkAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGroceryAds = intvar(0, 999999999)  # Number of ads in grocery stores\nTrainAds = intvar(0, 999999999)  # Number of ads at train stations\nWaterParkAds = intvar(0, 999999999)  # Number of ads in water parks\n\n# Constraints\nm = Model()\n\n# Weekly advertising budget of $50000:\nm += 300 * GroceryAds + 500 * TrainAds + 1000 * WaterParkAds <= 50000\n# City limits the number of ads at a train station to 15:\nm += TrainAds <= 15\n# At most a third of the total number of ads should be in water parks:\nm += WaterParkAds <= (1/3) * (GroceryAds + TrainAds + WaterParkAds)\n# A minimum of 10% of ads should be in grocery stores:\nm += GroceryAds >= 0.10 * (GroceryAds + TrainAds + WaterParkAds)\n\n# Objective\n# Maximize viewership (10000 viewers per grocery store ad, 20000 viewers per train station ad, 50000 viewers per water park ad):\nm.maximize(10000 * GroceryAds + 20000 * TrainAds + 50000 * WaterParkAds)\n", "entities": [{"start": 89, "end": 103, "word": "grocery stores", "entity_group": "VAR", "score": 0.9999661553283241}, {"start": 106, "end": 120, "word": "train stations", "entity_group": "VAR", "score": 0.9999723154771739}, {"start": 127, "end": 138, "word": "water parks", "entity_group": "VAR", "score": 0.9999714407842644}, {"start": 172, "end": 178, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9909471867011506}, {"start": 184, "end": 189, "word": "50000", "entity_group": "LIMIT", "score": 0.99963810553403}, {"start": 270, "end": 283, "word": "grocery store", "entity_group": "VAR", "score": 0.999933303114751}, {"start": 292, "end": 295, "word": "300", "entity_group": "PARAM", "score": 0.9993800705013951}, {"start": 308, "end": 313, "word": "10000", "entity_group": "PARAM", "score": 0.9996795504784115}, {"start": 314, "end": 321, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9925463735473786}, {"start": 335, "end": 348, "word": "train station", "entity_group": "VAR", "score": 0.9999315807495276}, {"start": 357, "end": 360, "word": "500", "entity_group": "PARAM", "score": 0.9993800705013959}, {"start": 373, "end": 378, "word": "20000", "entity_group": "PARAM", "score": 0.9996795504784126}, {"start": 379, "end": 386, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9925463735473797}, {"start": 400, "end": 410, "word": "water park", "entity_group": "VAR", "score": 0.9999330486010417}, {"start": 419, "end": 423, "word": "1000", "entity_group": "PARAM", "score": 0.99938007022865}, {"start": 436, "end": 441, "word": "50000", "entity_group": "PARAM", "score": 0.9996729005336153}, {"start": 442, "end": 449, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.994855192351565}, {"start": 461, "end": 478, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9659821436083889}, {"start": 491, "end": 504, "word": "train station", "entity_group": "VAR", "score": 0.9999576108279827}, {"start": 530, "end": 532, "word": "15", "entity_group": "LIMIT", "score": 0.9994424002349028}, {"start": 566, "end": 573, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974313790459594}, {"start": 576, "end": 581, "word": "third", "entity_group": "LIMIT", "score": 0.989792998563681}, {"start": 622, "end": 633, "word": "water parks", "entity_group": "VAR", "score": 0.9999729781966492}, {"start": 640, "end": 647, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9981654612713239}, {"start": 651, "end": 655, "word": "10 %", "entity_group": "LIMIT", "score": 0.9782532261813641}, {"start": 676, "end": 690, "word": "grocery stores", "entity_group": "VAR", "score": 0.9999703600255004}, {"start": 759, "end": 767, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9984898086156115}, {"start": 768, "end": 778, "word": "viewership", "entity_group": "OBJ_NAME", "score": 0.998023650532931}]}
{"doc_id": "1113010512", "document": "Bob wants to mix his animal feeds, oats and sunflower seeds, in such a way that the mixture will contain a minimum of 250 units of protein and 400 units of fat. Oats cost $50 per kilogram and contain 5 units of protein and 16 units of fat. Sunflower seeds cost $70 per kilogram and contain 10 units of protein and 22 units of fat. Minimize the cost of the mixture.", "order_mapping": {"oats": 0, "sunflower seeds": 1, "Oats": 0, "Sunflower seeds": 1}, "obj_declaration": {"type": "objective", "direction": "Minimize", "name": "cost", "terms": {"Oats": "50", "Sunflower seeds": "70"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "250", "terms": {"Oats": "5", "Sunflower seeds": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "400", "terms": {"Oats": "16", "Sunflower seeds": "22"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: kilograms of oats\n- y: kilograms of sunflower seeds\n\nObjective:\n- Bob wants to minimize the cost of the mixture. Oats cost $50 per kilogram and sunflower seeds cost $70 per kilogram. Therefore, the objective function is: Minimize 50x + 70y\n\nConstraints:\n- The mixture should contain a minimum of 250 units of protein, which can be formulated as: 5x + 10y >= 250\n- The mixture should contain a minimum of 400 units of fat, which can be formulated as: 16x + 22y >= 400\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 50x + 70y\nConstraints:\n5x + 10y >= 250\n16x + 22y >= 400", "canonical": {"objective": [50.0, 70.0], "constraints": [[-5.0, -10.0, -250.0], [-16.0, -22.0, -400.0]]}, "solution": {"x": 0, "y": 25}, "pseudo_model": "\nDecision Variables:\n- Kilograms of oats: Oats\n- Kilograms of sunflower seeds: SunflowerSeeds\n\nConstraints:\n- The mixture must contain a minimum of 250 units of protein:\n  5 * Oats + 10 * SunflowerSeeds >= 250\n- The mixture must contain a minimum of 400 units of fat:\n  16 * Oats + 22 * SunflowerSeeds >= 400\n\nObjective:\n- Minimize the cost of the mixture (Oats cost $50 per kilogram, Sunflower seeds cost $70 per kilogram):\n  50 * Oats + 70 * SunflowerSeeds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOats = intvar(0, 999999999)  # kilograms of oats\nSunflowerSeeds = intvar(0, 999999999)  # kilograms of sunflower seeds\n\n# Constraints\nm = Model()\n\n# The mixture must contain a minimum of 250 units of protein:\nm += 5 * Oats + 10 * SunflowerSeeds >= 250\n# The mixture must contain a minimum of 400 units of fat:\nm += 16 * Oats + 22 * SunflowerSeeds >= 400\n\n# Objective\n# Minimize the cost of the mixture (Oats cost $50 per kilogram, Sunflower seeds cost $70 per kilogram):\nm.minimize(50 * Oats + 70 * SunflowerSeeds)\n", "entities": [{"start": 36, "end": 40, "word": "oats", "entity_group": "VAR", "score": 0.9988167617639085}, {"start": 45, "end": 60, "word": "sunflower seeds", "entity_group": "VAR", "score": 0.999985748694796}, {"start": 109, "end": 116, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9982063829738913}, {"start": 120, "end": 123, "word": "250", "entity_group": "LIMIT", "score": 0.9997684702894872}, {"start": 145, "end": 148, "word": "400", "entity_group": "LIMIT", "score": 0.9996675209437506}, {"start": 164, "end": 168, "word": "Oats", "entity_group": "VAR", "score": 0.9996969018010483}, {"start": 169, "end": 173, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.995015770968317}, {"start": 176, "end": 178, "word": "50", "entity_group": "PARAM", "score": 0.9996869043756962}, {"start": 204, "end": 205, "word": "5", "entity_group": "PARAM", "score": 0.9997227420926836}, {"start": 227, "end": 229, "word": "16", "entity_group": "PARAM", "score": 0.9997302201278311}, {"start": 245, "end": 260, "word": "Sunflower seeds", "entity_group": "VAR", "score": 0.9999671121926283}, {"start": 261, "end": 265, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9995636650164863}, {"start": 268, "end": 270, "word": "70", "entity_group": "PARAM", "score": 0.9997291830863344}, {"start": 296, "end": 298, "word": "10", "entity_group": "PARAM", "score": 0.9997227429200184}, {"start": 320, "end": 322, "word": "22", "entity_group": "PARAM", "score": 0.9996979372549589}, {"start": 338, "end": 346, "word": "Minimize", "entity_group": "OBJ_DIR", "score": 0.9943636929927951}, {"start": 351, "end": 355, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9911649675544021}]}
{"doc_id": "-563856464", "document": "Zeta Furniture stocks and sells bookcases and computer desks. The profit per bookcase is $500 and the profit per computer desk is $80. There are 1000 sq ft of space available and a bookcase requires 12 sq ft of floor space while a computer desk requires 5 sq ft. Because computer desks sell in larger quantities, at least 65% of all furniture in the store must be computer desks. In terms of capital, a bookcase ties up $1200 in capital and a computer desk ties up $200 in capital. The company wants a maximum of $22000 worth of capital tied up at any time. Formulate an LP to maximize profit.", "order_mapping": {"bookcases": 0, "computer desks": 1, "bookcase": 0, "computer desk": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bookcase": "500", "computer desk": "80"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"bookcase": "12", "computer desk": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "65%", "var": "computer desks", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "22000", "terms": {"computer desk": "200", "bookcase": "1200"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bookcases\n- y: Number of computer desks\n\nObjective:\n- The company aims to maximize its profit. The profit per bookcase is $500 and the profit per computer desk is $80. Therefore, the objective function is: Maximize 500x + 80y\n\nConstraints:\n- There are 1000 sq ft of space available, and a bookcase requires 12 sq ft of floor space while a computer desk requires 5 sq ft. This leads to the constraint: 12x + 5y <= 1000.\n- At least 65% of all furniture in the store must be computer desks, resulting in the constraint: y >= 0.65(x + y).\n- In terms of capital, the company wants a maximum of $22000 worth of capital tied up at any time, leading to the constraint: 1200x + 200y <= 22000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 500x + 80y\nConstraints:\n12x + 5y <= 1000\ny >= 0.65(x + y)\n1200x + 200y <= 22000", "canonical": {"objective": [-500.0, -80.0], "constraints": [[12.0, 5.0, 1000.0], [0.65, -0.35, 0.0], [1200.0, 200.0, 22000.0]]}, "solution": {"x": 14, "y": 26}, "pseudo_model": "\nDecision Variables:\n- Number of bookcases: Bookcases\n- Number of computer desks: ComputerDesks\n\nConstraints:\n- Total floor space used should not exceed 1000 sq ft:\n  12 * Bookcases + 5 * ComputerDesks <= 1000\n- At least 65% of all furniture must be computer desks:\n  ComputerDesks >= 0.65 * (Bookcases + ComputerDesks)\n- The total capital tied up should not exceed $22000:\n  1200 * Bookcases + 200 * ComputerDesks <= 22000\n\nObjective:\n- Maximize profit ($500 per bookcase, $80 per computer desk):\n  500 * Bookcases + 80 * ComputerDesks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBookcases = intvar(0, 999999999)  # Number of bookcases\nComputerDesks = intvar(0, 999999999)  # Number of computer desks\n\n# Constraints\nm = Model()\n\n# Total floor space used by bookcases and computer desks should not exceed 1000 sq ft:\nm += 12 * Bookcases + 5 * ComputerDesks <= 1000\n# At least 65% of all furniture in the store must be computer desks:\nm += ComputerDesks >= 0.65 * (Bookcases + ComputerDesks)\n# The total capital tied up by bookcases and computer desks should not exceed $22000:\nm += 1200 * Bookcases + 200 * ComputerDesks <= 22000\n\n# Objective\n# Maximize profit ($500 per bookcase, $80 per computer desk):\nm.maximize(500 * Bookcases + 80 * ComputerDesks)\n", "entities": [{"start": 32, "end": 41, "word": "bookcases", "entity_group": "VAR", "score": 0.9995368941371485}, {"start": 46, "end": 60, "word": "computer desks", "entity_group": "VAR", "score": 0.999979773097538}, {"start": 67, "end": 73, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998921539308163}, {"start": 78, "end": 86, "word": "bookcase", "entity_group": "VAR", "score": 0.998164556850348}, {"start": 92, "end": 95, "word": "500", "entity_group": "PARAM", "score": 0.9992723744656903}, {"start": 104, "end": 110, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999931958351535}, {"start": 115, "end": 128, "word": "computer desk", "entity_group": "VAR", "score": 0.9999395808892945}, {"start": 134, "end": 136, "word": "80", "entity_group": "PARAM", "score": 0.9997187501730714}, {"start": 149, "end": 153, "word": "1000", "entity_group": "LIMIT", "score": 0.9997196209873204}, {"start": 169, "end": 178, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995905872621377}, {"start": 185, "end": 193, "word": "bookcase", "entity_group": "VAR", "score": 0.9998346358851975}, {"start": 203, "end": 205, "word": "12", "entity_group": "PARAM", "score": 0.9996256207485468}, {"start": 235, "end": 248, "word": "computer desk", "entity_group": "VAR", "score": 0.999971750471396}, {"start": 258, "end": 259, "word": "5", "entity_group": "PARAM", "score": 0.9995811120332243}, {"start": 276, "end": 290, "word": "computer desks", "entity_group": "VAR", "score": 0.9999285194936747}, {"start": 319, "end": 327, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987834837955136}, {"start": 328, "end": 332, "word": "65 %", "entity_group": "LIMIT", "score": 0.9231516922345708}, {"start": 371, "end": 385, "word": "computer desks", "entity_group": "VAR", "score": 0.9999720693556402}, {"start": 412, "end": 420, "word": "bookcase", "entity_group": "VAR", "score": 0.9995595766540774}, {"start": 431, "end": 435, "word": "1200", "entity_group": "PARAM", "score": 0.9995722387682284}, {"start": 453, "end": 466, "word": "computer desk", "entity_group": "VAR", "score": 0.9999587085271052}, {"start": 477, "end": 480, "word": "200", "entity_group": "PARAM", "score": 0.9994205081224979}, {"start": 514, "end": 521, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9940049160874049}, {"start": 527, "end": 532, "word": "22000", "entity_group": "LIMIT", "score": 0.9977750449058345}, {"start": 591, "end": 599, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994447023781453}, {"start": 600, "end": 606, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995116779216836}]}
{"doc_id": "2064426927", "document": "A factory produces 1st and 2nd generation motherboards. A 1st generation motherboard requires 4 units of silicon while a 2nd generation motherboard requires 6 units of silicon. A 1st generation motherboard requires 20 minutes of assembly and 30 minutes of soldering while a 2nd generation motherboard requires 30 minutes of assembly and 40 minutes of soldering. The factory has available 450 units of silicon, 900 minutes of assembly time, and 500 minutes of soldering time. They also want to make a minimum of 6 1st generation motherboards and 7 2nd generation motherboards. If the profit per 1st generation motherboard is $100 and the profit per 2nd generation motherboard is $125, how many of each should the factory make to maximize profit?", "order_mapping": {"1st": 0, "2nd generation motherboards": 1, "1st generation motherboard": 0, "2nd generation motherboard": 1, "1st generation motherboards": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"2nd generation motherboard": "125", "1st generation motherboard": "100"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "450", "terms": {"1st generation motherboard": "4", "2nd generation motherboard": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "900", "terms": {"1st generation motherboard": "20", "2nd generation motherboard": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"1st generation motherboard": "30", "2nd generation motherboard": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "6", "var": "1st generation motherboards", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "7", "var": "2nd generation motherboards", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of 1st generation motherboards produced\n- y: Number of 2nd generation motherboards produced\n\nObjective:\n- The factory aims to maximize its profit. The profit per 1st generation motherboard is $100 and the profit per 2nd generation motherboard is $125. Therefore, the objective function is: Maximize 100x + 125y\n\nConstraints:\n- The factory has 450 units of silicon available, so the constraint is: 4x + 6y <= 450.\n- The factory has 900 minutes of assembly time available, leading to the constraint: 20x + 30y <= 900.\n- The factory has 500 minutes of soldering time available, resulting in the constraint: 30x + 40y <= 500.\n- The factory wants to make a minimum of 6 1st generation motherboards, leading to the constraint: x >= 6.\n- The factory wants to make a minimum of 7 2nd generation motherboards, resulting in the constraint: y >= 7.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 100x + 125y\nConstraints:\n4x + 6y <= 450\n20x + 30y <= 900\n30x + 40y <= 500\nx >= 6\ny >= 7", "canonical": {"objective": [-100.0, -125.0], "constraints": [[4.0, 6.0, 450.0], [20.0, 30.0, 900.0], [30.0, 40.0, 500.0], [-1.0, 0.0, -6.0], [0.0, -1.0, -7.0]]}, "solution": {"x": 6, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of 1st generation motherboards produced: FirstGen\n- Number of 2nd generation motherboards produced: SecondGen\n\nConstraints:\n- Silicon usage for both types should not exceed 450 units:\n  4 * FirstGen + 6 * SecondGen <= 450\n- Assembly time for both types should not exceed 900 minutes:\n  20 * FirstGen + 30 * SecondGen <= 900\n- Soldering time for both types should not exceed 500 minutes:\n  30 * FirstGen + 40 * SecondGen <= 500\n- Minimum of 6 1st generation motherboards must be produced:\n  FirstGen >= 6\n- Minimum of 7 2nd generation motherboards must be produced:\n  SecondGen >= 7\n\nObjective:\n- Maximize profit ($100 per 1st generation motherboard, $125 per 2nd generation motherboard):\n  100 * FirstGen + 125 * SecondGen\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstGen = intvar(0, 999999999)  # Number of 1st generation motherboards produced\nSecondGen = intvar(0, 999999999)  # Number of 2nd generation motherboards produced\n\n# Constraints\nm = Model()\n\n# Silicon constraint (1st gen requires 4 units, 2nd gen requires 6 units, total available is 450 units):\nm += 4 * FirstGen + 6 * SecondGen <= 450\n# Assembly time constraint (1st gen requires 20 minutes, 2nd gen requires 30 minutes, total available is 900 minutes):\nm += 20 * FirstGen + 30 * SecondGen <= 900\n# Soldering time constraint (1st gen requires 30 minutes, 2nd gen requires 40 minutes, total available is 500 minutes):\nm += 30 * FirstGen + 40 * SecondGen <= 500\n# Minimum production constraints:\nm += FirstGen >= 6  # At least 6 1st generation motherboards\nm += SecondGen >= 7  # At least 7 2nd generation motherboards\n\n# Objective\n# Maximize profit ($100 per 1st generation motherboard, $125 per 2nd generation motherboard):\nm.maximize(100 * FirstGen + 125 * SecondGen)\n", "entities": [{"start": 19, "end": 22, "word": "1st", "entity_group": "VAR", "score": 0.9997338700134142}, {"start": 27, "end": 54, "word": "2nd generation motherboards", "entity_group": "VAR", "score": 0.9997778748129282}, {"start": 59, "end": 85, "word": "1st generation motherboard", "entity_group": "VAR", "score": 0.9997568460275927}, {"start": 95, "end": 96, "word": "4", "entity_group": "PARAM", "score": 0.9996919293475044}, {"start": 122, "end": 148, "word": "2nd generation motherboard", "entity_group": "VAR", "score": 0.9996823124953877}, {"start": 158, "end": 159, "word": "6", "entity_group": "PARAM", "score": 0.9996762527505927}, {"start": 181, "end": 207, "word": "1st generation motherboard", "entity_group": "VAR", "score": 0.9996406994585911}, {"start": 217, "end": 219, "word": "20", "entity_group": "PARAM", "score": 0.9997015439894005}, {"start": 244, "end": 246, "word": "30", "entity_group": "PARAM", "score": 0.9997272672156745}, {"start": 276, "end": 302, "word": "2nd generation motherboard", "entity_group": "VAR", "score": 0.9996807219365192}, {"start": 312, "end": 314, "word": "30", "entity_group": "PARAM", "score": 0.9996859016857266}, {"start": 339, "end": 341, "word": "40", "entity_group": "PARAM", "score": 0.9996080099148784}, {"start": 381, "end": 390, "word": "available", "entity_group": "CONST_DIR", "score": 0.998735341583331}, {"start": 391, "end": 394, "word": "450", "entity_group": "LIMIT", "score": 0.9994017705201635}, {"start": 414, "end": 417, "word": "900", "entity_group": "LIMIT", "score": 0.9997592617247867}, {"start": 449, "end": 452, "word": "500", "entity_group": "LIMIT", "score": 0.9996104653653631}, {"start": 506, "end": 513, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9965544547129976}, {"start": 517, "end": 518, "word": "6", "entity_group": "LIMIT", "score": 0.999761394118755}, {"start": 519, "end": 546, "word": "1st generation motherboards", "entity_group": "VAR", "score": 0.9993930088169546}, {"start": 551, "end": 552, "word": "7", "entity_group": "LIMIT", "score": 0.9996055934431528}, {"start": 553, "end": 580, "word": "2nd generation motherboards", "entity_group": "VAR", "score": 0.999735617128569}, {"start": 590, "end": 596, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997356192865041}, {"start": 601, "end": 627, "word": "1st generation motherboard", "entity_group": "VAR", "score": 0.9994370514941038}, {"start": 633, "end": 636, "word": "100", "entity_group": "PARAM", "score": 0.9997140262234724}, {"start": 645, "end": 651, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999960535457923}, {"start": 656, "end": 682, "word": "2nd generation motherboard", "entity_group": "VAR", "score": 0.999423787632263}, {"start": 688, "end": 691, "word": "125", "entity_group": "PARAM", "score": 0.9997362197113117}, {"start": 738, "end": 746, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 747, "end": 753, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}]}
{"doc_id": "-273884671", "document": "A construction company installs hardwood flooring and carpet. It takes 1 hour of cutting and 3 hours of installation for hardwood flooring. It takes 0.5 hours of cutting and 4 hours of installation for carpet. The company has available 200 hours for cutting and 400 hours for installation. If the profit per hardwood flooring is $400 and the profit per carpet is $650, how many of each should be installed to maximize profit?", "order_mapping": {"hardwood flooring": 0, "carpet": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carpet": "650", "hardwood flooring": "400"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"hardwood flooring": "1", "carpet": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"carpet": "4", "hardwood flooring": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of hardwood flooring installations\n- y: Number of carpet installations\n\nObjective:\n- The construction company aims to maximize its profit. The profit per hardwood flooring is $400 and the profit per carpet is $650. Therefore, the objective function is: Maximize 400x + 650y\n\nConstraints:\n- The company has 200 hours available for cutting, and each hardwood flooring installation takes 1 hour of cutting and each carpet installation takes 0.5 hours of cutting. This leads to the constraint: x + 0.5y <= 200.\n- The company has 400 hours available for installation, and each hardwood flooring installation takes 3 hours of installation and each carpet installation takes 4 hours of installation. This results in the constraint: 3x + 4y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 400x + 650y\nConstraints:\nx + 0.5y <= 200\n3x + 4y <= 400", "canonical": {"objective": [-400.0, -650.0], "constraints": [[1.0, 0.5, 200.0], [3.0, 4.0, 400.0]]}, "solution": {"x": 0, "y": 100}, "pseudo_model": "\nDecision Variables:\n- Number of hardwood flooring installations: HardwoodFlooring\n- Number of carpet installations: Carpet\n\nConstraints:\n- Total cutting hours should not exceed 200 hours (1 hour for hardwood, 0.5 hours for carpet):\n  1 * HardwoodFlooring + 0.5 * Carpet <= 200\n- Total installation hours should not exceed 400 hours (3 hours for hardwood, 4 hours for carpet):\n  3 * HardwoodFlooring + 4 * Carpet <= 400\n\nObjective:\n- Maximize profit (400 dollars per hardwood flooring, 650 dollars per carpet):\n  400 * HardwoodFlooring + 650 * Carpet\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHardwoodFlooring = intvar(0, 999999999)  # Number of hardwood flooring installations\nCarpet = intvar(0, 999999999)  # Number of carpet installations\n\n# Constraints\nm = Model()\n\n# Total cutting hours should not exceed 200 hours:\n# 1 hour of cutting for hardwood and 0.5 hours for carpet\nm += 1 * HardwoodFlooring + 0.5 * Carpet <= 200\n\n# Total installation hours should not exceed 400 hours:\n# 3 hours of installation for hardwood and 4 hours for carpet\nm += 3 * HardwoodFlooring + 4 * Carpet <= 400\n\n# Objective\n# Maximize profit (400 dollars per hardwood flooring, 650 dollars per carpet):\nm.maximize(400 * HardwoodFlooring + 650 * Carpet)\n", "entities": [{"start": 32, "end": 49, "word": "hardwood flooring", "entity_group": "VAR", "score": 0.9999604401486514}, {"start": 54, "end": 60, "word": "carpet", "entity_group": "VAR", "score": 0.9983057692964292}, {"start": 72, "end": 73, "word": "1", "entity_group": "PARAM", "score": 0.9996728525139846}, {"start": 94, "end": 95, "word": "3", "entity_group": "PARAM", "score": 0.9997084191829805}, {"start": 122, "end": 139, "word": "hardwood flooring", "entity_group": "VAR", "score": 0.9999270799614449}, {"start": 151, "end": 154, "word": "0.5", "entity_group": "PARAM", "score": 0.9996671149601065}, {"start": 176, "end": 177, "word": "4", "entity_group": "PARAM", "score": 0.9997059144540125}, {"start": 204, "end": 210, "word": "carpet", "entity_group": "VAR", "score": 0.9997895063274259}, {"start": 229, "end": 238, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991672676298178}, {"start": 239, "end": 242, "word": "200", "entity_group": "LIMIT", "score": 0.999393082395344}, {"start": 265, "end": 268, "word": "400", "entity_group": "LIMIT", "score": 0.999651513236407}, {"start": 301, "end": 307, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999329805069436}, {"start": 312, "end": 329, "word": "hardwood flooring", "entity_group": "VAR", "score": 0.9999475314348897}, {"start": 335, "end": 338, "word": "400", "entity_group": "PARAM", "score": 0.9996423893738342}, {"start": 347, "end": 353, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999053283254778}, {"start": 358, "end": 364, "word": "carpet", "entity_group": "VAR", "score": 0.9990975872165023}, {"start": 370, "end": 373, "word": "650", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 416, "end": 424, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996793201601307}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274877081419}]}
{"doc_id": "265038062", "document": "The Curious electronics business wants to determine the level of production of its two hottest digital keyboards: A400 and P500. Making one A400 keyboard requires 5 hours of labour and yields a $35 profit. On the other hand, one P500 keyboard can be produced in 9 hours and offers a greater profit of $80. Given the demand forecast, the business decides to produce at least three times as many A400 keyboards as P500 ones. In addition, it can spend up to 45 hours a week to manufacture these keyboards. Can you help the business determine the number of each keyboard to be produced each week to obtain the maximum profit?", "order_mapping": {"A400": 0, "P500": 1, "A400 keyboard": 0, "P500 keyboard": 1, "A400 keyboards": 0, "P500 ones": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"P500 keyboard": "80", "A400 keyboard": "35"}}, "const_declarations": [{"type": "linear", "direction": "up to", "limit": "45", "terms": {"A400 keyboard": "5", "P500 keyboard": "9"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "A400 keyboards", "direction": "at least", "param": "three times", "y_var": "P500 ones", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of A400 keyboards produced per week\n- y: Number of P500 keyboards produced per week\n\nObjective:\n- The business aims to maximize its profit. Making one A400 keyboard yields a $35 profit, and one P500 keyboard yields a $80 profit. Therefore, the objective function is: Maximize 35x + 80y\n\nConstraints:\n- The business can spend up to 45 hours a week on production. Making one A400 keyboard requires 5 hours of labor, and making one P500 keyboard requires 9 hours. This leads to the constraint: 5x + 9y <= 45.\n- The business decides to produce at least three times as many A400 keyboards as P500 ones, resulting in the constraint: x >= 3y.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 35x + 80y\nConstraints:\n5x + 9y <= 45\nx >= 3y", "canonical": {"objective": [-35.0, -80.0], "constraints": [[5.0, 9.0, 45.0], [-1.0, 3.0, 0.0]]}, "solution": {"x": 7, "y": 1}, "pseudo_model": "\nDecision Variables:\n- Number of A400 keyboards produced: A400\n- Number of P500 keyboards produced: P500\n\nConstraints:\n- Total labour hours for producing A400 and P500 keyboards should not exceed 45 hours per week:\n  5 * A400 + 9 * P500 <= 45\n- Produce at least three times as many A400 keyboards as P500 ones:\n  A400 >= 3 * P500\n\nObjective:\n- Maximize profit (35 dollars per A400 keyboard, 80 dollars per P500 keyboard):\n  35 * A400 + 80 * P500\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nA400 = intvar(0, 999999999)  # Number of A400 keyboards produced\nP500 = intvar(0, 999999999)  # Number of P500 keyboards produced\n\n# Constraints\nm = Model()\n\n# Total labour hours should not exceed 45 hours per week:\nm += 5 * A400 + 9 * P500 <= 45\n# Produce at least three times as many A400 keyboards as P500 ones:\nm += A400 >= 3 * P500\n\n# Objective\n# Maximize profit (35 dollars per A400 keyboard, 80 dollars per P500 keyboard):\nm.maximize(35 * A400 + 80 * P500)\n", "entities": [{"start": 115, "end": 119, "word": "A400", "entity_group": "VAR", "score": 0.9997579196026845}, {"start": 124, "end": 128, "word": "P500", "entity_group": "VAR", "score": 0.9997621175392413}, {"start": 142, "end": 155, "word": "A400 keyboard", "entity_group": "VAR", "score": 0.9999252891877677}, {"start": 165, "end": 166, "word": "5", "entity_group": "PARAM", "score": 0.9989659221220536}, {"start": 198, "end": 200, "word": "35", "entity_group": "PARAM", "score": 0.9990179499840199}, {"start": 201, "end": 207, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999664475217718}, {"start": 234, "end": 247, "word": "P500 keyboard", "entity_group": "VAR", "score": 0.9999555818850223}, {"start": 267, "end": 268, "word": "9", "entity_group": "PARAM", "score": 0.9993161781878529}, {"start": 296, "end": 302, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9950603051277949}, {"start": 308, "end": 310, "word": "80", "entity_group": "PARAM", "score": 0.9996458321923329}, {"start": 373, "end": 381, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980707206445045}, {"start": 382, "end": 393, "word": "three times", "entity_group": "PARAM", "score": 0.9364042591177102}, {"start": 402, "end": 416, "word": "A400 keyboards", "entity_group": "VAR", "score": 0.9998677150328947}, {"start": 420, "end": 429, "word": "P500 ones", "entity_group": "VAR", "score": 0.9999730494981124}, {"start": 459, "end": 464, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9988658827636853}, {"start": 465, "end": 467, "word": "45", "entity_group": "LIMIT", "score": 0.9995316981955586}, {"start": 617, "end": 624, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9940357039427867}, {"start": 625, "end": 631, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999401116915897}]}
{"doc_id": "-2101760318", "document": "You have two instant coffees that contain caffeine and sugar. Vanilla flavor contains 2 units of caffeine and 2 units of sugar per package. Mocha flavor contains 3 units of caffeine and 5 units of sugar per package. You must consume at least 60 units of caffeine and 50 units of sugar. If a package of vanilla flavor costs $2 and a package of mocha flavor costs $3, how many of each should you buy to minimize costs?", "order_mapping": {"Vanilla flavor": 0, "Mocha flavor": 1, "vanilla flavor": 0, "mocha flavor": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"vanilla flavor": "2", "mocha flavor": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "60", "terms": {"Vanilla flavor": "2", "Mocha flavor": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"Vanilla flavor": "2", "Mocha flavor": "5"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of packages of vanilla flavor instant coffee\n- y: Number of packages of mocha flavor instant coffee\n\nObjective:\n- Minimize the cost of the instant coffee purchase. Given that a package of vanilla flavor costs $2 and a package of mocha flavor costs $3, the objective function is: Minimize 2x + 3y\n\nConstraints:\n- The consumption of at least 60 units of caffeine can be represented as: 2x + 3y >= 60\n- The consumption of at least 50 units of sugar can be represented as: 2x + 5y >= 50\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 2x + 3y\nConstraints:\n2x + 3y >= 60\n2x + 5y >= 50", "canonical": {"objective": [2.0, 3.0], "constraints": [[-2.0, -3.0, -60.0], [-2.0, -5.0, -50.0]]}, "solution": {"x": 0, "y": 20}, "pseudo_model": "\nDecision Variables:\n- Number of vanilla flavor packages bought: Vanilla\n- Number of mocha flavor packages bought: Mocha\n\nConstraints:\n- Must consume at least 60 units of caffeine:\n  2 * Vanilla + 3 * Mocha >= 60\n- Must consume at least 50 units of sugar:\n  2 * Vanilla + 5 * Mocha >= 50\n\nObjective:\n- Minimize costs (2 dollars per vanilla package, 3 dollars per mocha package):\n  2 * Vanilla + 3 * Mocha\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVanilla = intvar(0, 999999999)  # Number of vanilla flavor packages\nMocha = intvar(0, 999999999)  # Number of mocha flavor packages\n\n# Constraints\nm = Model()\n\n# Must consume at least 60 units of caffeine:\nm += 2 * Vanilla + 3 * Mocha >= 60\n# Must consume at least 50 units of sugar:\nm += 2 * Vanilla + 5 * Mocha >= 50\n\n# Objective\n# Minimize costs (2 dollars per vanilla package, 3 dollars per mocha package):\nm.minimize(2 * Vanilla + 3 * Mocha)\n", "entities": [{"start": 63, "end": 77, "word": "Vanilla flavor", "entity_group": "VAR", "score": 0.999924604083633}, {"start": 87, "end": 88, "word": "2", "entity_group": "PARAM", "score": 0.9996159868102772}, {"start": 111, "end": 112, "word": "2", "entity_group": "PARAM", "score": 0.9997176066272926}, {"start": 142, "end": 154, "word": "Mocha flavor", "entity_group": "VAR", "score": 0.9999142063412847}, {"start": 164, "end": 165, "word": "3", "entity_group": "PARAM", "score": 0.9996159958950085}, {"start": 188, "end": 189, "word": "5", "entity_group": "PARAM", "score": 0.9997176073897175}, {"start": 236, "end": 244, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989431187034981}, {"start": 245, "end": 247, "word": "60", "entity_group": "LIMIT", "score": 0.9997478966066508}, {"start": 270, "end": 272, "word": "50", "entity_group": "LIMIT", "score": 0.9996578281503026}, {"start": 306, "end": 320, "word": "vanilla flavor", "entity_group": "VAR", "score": 0.9998047041450442}, {"start": 321, "end": 326, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9998093807612853}, {"start": 329, "end": 330, "word": "2", "entity_group": "PARAM", "score": 0.9995801960738223}, {"start": 348, "end": 360, "word": "mocha flavor", "entity_group": "VAR", "score": 0.9997622171516845}, {"start": 361, "end": 366, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9998233509144168}, {"start": 369, "end": 370, "word": "3", "entity_group": "PARAM", "score": 0.999641500614277}, {"start": 408, "end": 416, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9997145074943936}, {"start": 417, "end": 422, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990204240580258}]}
{"doc_id": "883784731", "document": "A steel shop makes fences and doors using stainless steel and aluminum. Each fence requires 2 units of stainless steel and 10 units of aluminum. Each door requires 5 units of stainless steel and 1 unit of aluminum. The steel shop has available 400 units of stainless steel and 500 units of aluminum. If the profit per fence is $200 and the profit per door is $100, how many of each should be made to maximize profit?", "order_mapping": {"fences": 0, "doors": 1, "fence": 0, "door": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"fence": "200", "door": "100"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"fence": "2", "door": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"fence": "10", "door": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of fences to be made\n- y: Number of doors to be made\n\nObjective:\n- The steel shop aims to maximize its profit. The profit per fence is $200 and the profit per door is $100. Therefore, the objective function is: Maximize 200x + 100y\n\nConstraints:\n- The steel shop has available 400 units of stainless steel and 500 units of aluminum. Each fence requires 2 units of stainless steel and 10 units of aluminum, and each door requires 5 units of stainless steel and 1 unit of aluminum. These constraints can be formulated as:\n    - 2x + 5y <= 400 (stainless steel constraint)\n    - 10x + y <= 500 (aluminum constraint)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 100y\nConstraints:\n2x + 5y <= 400\n10x + y <= 500", "canonical": {"objective": [-200.0, -100.0], "constraints": [[2.0, 5.0, 400.0], [10.0, 1.0, 500.0]]}, "solution": {"x": 44, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Number of fences made: Fences\n- Number of doors made: Doors\n\nConstraints:\n- Stainless steel usage for fences and doors should not exceed 400 units:\n  2 * Fences + 5 * Doors <= 400\n- Aluminum usage for fences and doors should not exceed 500 units:\n  10 * Fences + 1 * Doors <= 500\n\nObjective:\n- Maximize profit ($200 per fence, $100 per door):\n  200 * Fences + 100 * Doors\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFences = intvar(0, 999999999)  # Number of fences made\nDoors = intvar(0, 999999999)  # Number of doors made\n\n# Constraints\nm = Model()\n\n# Stainless steel constraint (400 units available):\n# Each fence requires 2 units, each door requires 5 units\nm += 2 * Fences + 5 * Doors <= 400\n\n# Aluminum constraint (500 units available):\n# Each fence requires 10 units, each door requires 1 unit\nm += 10 * Fences + 1 * Doors <= 500\n\n# Objective\n# Maximize profit ($200 per fence, $100 per door):\nm.maximize(200 * Fences + 100 * Doors)\n", "entities": [{"start": 19, "end": 25, "word": "fences", "entity_group": "VAR", "score": 0.9992762510045411}, {"start": 30, "end": 35, "word": "doors", "entity_group": "VAR", "score": 0.9995914955387605}, {"start": 78, "end": 83, "word": "fence", "entity_group": "VAR", "score": 0.9994310975837178}, {"start": 93, "end": 94, "word": "2", "entity_group": "PARAM", "score": 0.9996819077691982}, {"start": 124, "end": 126, "word": "10", "entity_group": "PARAM", "score": 0.9996934950882321}, {"start": 152, "end": 156, "word": "door", "entity_group": "VAR", "score": 0.9996161263760761}, {"start": 166, "end": 167, "word": "5", "entity_group": "PARAM", "score": 0.9996951428672513}, {"start": 197, "end": 198, "word": "1", "entity_group": "PARAM", "score": 0.9992660620732684}, {"start": 237, "end": 246, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993209999124236}, {"start": 247, "end": 250, "word": "400", "entity_group": "LIMIT", "score": 0.9990075816744868}, {"start": 280, "end": 283, "word": "500", "entity_group": "LIMIT", "score": 0.9995152829501069}, {"start": 311, "end": 317, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998807603782216}, {"start": 322, "end": 327, "word": "fence", "entity_group": "VAR", "score": 0.9993914335690421}, {"start": 333, "end": 336, "word": "200", "entity_group": "PARAM", "score": 0.9993478814004677}, {"start": 345, "end": 351, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688859361158}, {"start": 356, "end": 360, "word": "door", "entity_group": "VAR", "score": 0.9990975872183069}, {"start": 366, "end": 369, "word": "100", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 407, "end": 415, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 416, "end": 422, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "501615489", "document": "An ice cream truck sells ice cream cones and ice cream cups. Each ice cream cone requires 3 scoops of ice cream and 5 grams of toppings. Each ice cream cup requires 4 scoops of ice cream and 6 grams of toppings. The truck has available 500 scoops of ice cream and 1000 grams of toppings. If the revenue per ice cream cone is $3 and the revenue per ice cream cup is $3.50, how many of each should it sell to maximize revenue?", "order_mapping": {"ice cream cones": 0, "ice cream cups": 1, "ice cream cone": 0, "ice cream cup": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"ice cream cone": "3", "ice cream cup": "3.50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"ice cream cone": "3", "ice cream cup": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1000", "terms": {"ice cream cone": "5", "ice cream cup": "6"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of ice cream cones to sell\n- y: Number of ice cream cups to sell\n\nObjective:\n- The ice cream truck aims to maximize its revenue. The revenue per ice cream cone is $3 and the revenue per ice cream cup is $3.50. Therefore, the objective function is: Maximize 3x + 3.50y\n\nConstraints:\n- The truck has 500 scoops of ice cream available, and each ice cream cone requires 3 scoops and each ice cream cup requires 4 scoops. This leads to the constraint: 3x + 4y <= 500.\n- The truck has 1000 grams of toppings available, and each ice cream cone requires 5 grams and each ice cream cup requires 6 grams. This results in the constraint: 5x + 6y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 3.50y\nConstraints:\n3x + 4y <= 500\n5x + 6y <= 1000", "canonical": {"objective": [-3.0, -3.5], "constraints": [[3.0, 4.0, 500.0], [5.0, 6.0, 1000.0]]}, "solution": {"x": 164, "y": 2}, "pseudo_model": "\nDecision Variables:\n- Number of ice cream cones sold: IceCreamCones\n- Number of ice cream cups sold: IceCreamCups\n\nConstraints:\n- The truck has available 500 scoops of ice cream (3 scoops per cone, 4 scoops per cup):\n  3 * IceCreamCones + 4 * IceCreamCups <= 500\n- The truck has available 1000 grams of toppings (5 grams per cone, 6 grams per cup):\n  5 * IceCreamCones + 6 * IceCreamCups <= 1000\n\nObjective:\n- Maximize revenue (3 dollars per ice cream cone, 3.50 dollars per ice cream cup):\n  3 * IceCreamCones + 3.50 * IceCreamCups\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nIceCreamCones = intvar(0, 999999999)  # Number of ice cream cones sold\nIceCreamCups = intvar(0, 999999999)  # Number of ice cream cups sold\n\n# Constraints\nm = Model()\n\n# The truck has available 500 scoops of ice cream:\nm += 3 * IceCreamCones + 4 * IceCreamCups <= 500\n# The truck has available 1000 grams of toppings:\nm += 5 * IceCreamCones + 6 * IceCreamCups <= 1000\n\n# Objective\n# Maximize revenue (3 dollars per ice cream cone, 3.50 dollars per ice cream cup):\nm.maximize(3 * IceCreamCones + 3.50 * IceCreamCups)\n", "entities": [{"start": 25, "end": 40, "word": "ice cream cones", "entity_group": "VAR", "score": 0.9953720438600605}, {"start": 45, "end": 59, "word": "ice cream cups", "entity_group": "VAR", "score": 0.9995983940275622}, {"start": 67, "end": 81, "word": "ice cream cone", "entity_group": "VAR", "score": 0.9997665111246449}, {"start": 91, "end": 92, "word": "3", "entity_group": "PARAM", "score": 0.9996891377019335}, {"start": 117, "end": 118, "word": "5", "entity_group": "PARAM", "score": 0.9996062446927092}, {"start": 144, "end": 157, "word": "ice cream cup", "entity_group": "VAR", "score": 0.9996469978500242}, {"start": 167, "end": 168, "word": "4", "entity_group": "PARAM", "score": 0.9997002282244968}, {"start": 193, "end": 194, "word": "6", "entity_group": "PARAM", "score": 0.999401606116397}, {"start": 229, "end": 238, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996013194556717}, {"start": 239, "end": 242, "word": "500", "entity_group": "LIMIT", "score": 0.9992963577846127}, {"start": 267, "end": 271, "word": "1000", "entity_group": "LIMIT", "score": 0.9991044842341763}, {"start": 299, "end": 306, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9987642848666962}, {"start": 311, "end": 325, "word": "ice cream cone", "entity_group": "VAR", "score": 0.9994034797747547}, {"start": 331, "end": 332, "word": "3", "entity_group": "PARAM", "score": 0.9993777005722557}, {"start": 341, "end": 348, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9989875325614852}, {"start": 353, "end": 366, "word": "ice cream cup", "entity_group": "VAR", "score": 0.9985821271590432}, {"start": 372, "end": 376, "word": "3.50", "entity_group": "PARAM", "score": 0.9994836011977114}, {"start": 414, "end": 422, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996816284070099}, {"start": 423, "end": 430, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9987771935496731}]}
{"doc_id": "1338474634", "document": "Julia goes to a supplement store that sells two powders, Gamma and Delta, for iron and biotin. The cost per scoop of Gamma is $1.5 while the cost per scoop of Delta is $2.5. A scoop of Gamma contains 7 grams of iron and 10 grams of biotin. A scoop of Delta contains 12 grams of iron and 9 grams of biotin. A doctor has recommended that Julia takes at least 60 grams of iron and 45 grams of biotin daily. How can Julia minimize cost?", "order_mapping": {"Gamma": 0, "Delta": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Gamma": "1.5", "Delta": "2.5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "60", "terms": {"Gamma": "7", "Delta": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "45", "terms": {"Gamma": "10", "Delta": "9"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of scoops of Gamma powder\n- y: Number of scoops of Delta powder\n\nObjective:\n- Julia wants to minimize the cost of the powders. The cost per scoop of Gamma is $1.5 and the cost per scoop of Delta is $2.5. Therefore, the objective function is: Minimize 1.5x + 2.5y\n\nConstraints:\n- Julia needs to consume at least 60 grams of iron daily, so the constraint is: 7x + 12y >= 60\n- Julia needs to consume at least 45 grams of biotin daily, leading to the constraint: 10x + 9y >= 45\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 1.5x + 2.5y\nConstraints:\n7x + 12y >= 60\n10x + 9y >= 45", "canonical": {"objective": [1.5, 2.5], "constraints": [[-7.0, -12.0, -60.0], [-10.0, -9.0, -45.0]]}, "solution": {"x": 0, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Number of scoops of Gamma: Gamma\n- Number of scoops of Delta: Delta\n\nConstraints:\n- Julia needs at least 60 grams of iron daily:\n  7 * Gamma + 12 * Delta >= 60\n- Julia needs at least 45 grams of biotin daily:\n  10 * Gamma + 9 * Delta >= 45\n\nObjective:\n- Minimize cost (Gamma costs $1.5 per scoop, Delta costs $2.5 per scoop):\n  1.5 * Gamma + 2.5 * Delta\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGamma = intvar(0, 999999999)  # Number of scoops of Gamma\nDelta = intvar(0, 999999999)  # Number of scoops of Delta\n\n# Constraints\nm = Model()\n\n# Julia needs at least 60 grams of iron daily:\nm += 7 * Gamma + 12 * Delta >= 60\n# Julia needs at least 45 grams of biotin daily:\nm += 10 * Gamma + 9 * Delta >= 45\n\n# Objective\n# Minimize cost (Gamma costs $1.5 per scoop, Delta costs $2.5 per scoop):\nm.minimize(1.5 * Gamma + 2.5 * Delta)\n", "entities": [{"start": 58, "end": 63, "word": "Gamma", "entity_group": "VAR", "score": 0.9995470241117365}, {"start": 68, "end": 73, "word": "Delta", "entity_group": "VAR", "score": 0.9998208762894201}, {"start": 102, "end": 106, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9983215270601551}, {"start": 120, "end": 125, "word": "Gamma", "entity_group": "VAR", "score": 0.9987743263078585}, {"start": 131, "end": 134, "word": "1.5", "entity_group": "PARAM", "score": 0.9993060253886603}, {"start": 145, "end": 149, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9982495483781262}, {"start": 163, "end": 168, "word": "Delta", "entity_group": "VAR", "score": 0.9994927373306751}, {"start": 174, "end": 177, "word": "2.5", "entity_group": "PARAM", "score": 0.9996611322428819}, {"start": 191, "end": 196, "word": "Gamma", "entity_group": "VAR", "score": 0.9995065269765164}, {"start": 206, "end": 207, "word": "7", "entity_group": "PARAM", "score": 0.999737891753744}, {"start": 226, "end": 228, "word": "10", "entity_group": "PARAM", "score": 0.9997388230699613}, {"start": 258, "end": 263, "word": "Delta", "entity_group": "VAR", "score": 0.9993459445380541}, {"start": 273, "end": 275, "word": "12", "entity_group": "PARAM", "score": 0.9997372643937863}, {"start": 294, "end": 295, "word": "9", "entity_group": "PARAM", "score": 0.9997278228595371}, {"start": 356, "end": 364, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992685391121952}, {"start": 365, "end": 367, "word": "60", "entity_group": "LIMIT", "score": 0.9997471538627368}, {"start": 386, "end": 388, "word": "45", "entity_group": "LIMIT", "score": 0.9997482607016264}, {"start": 427, "end": 435, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.984472031090334}, {"start": 436, "end": 440, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9995505385397165}]}
{"doc_id": "897983475", "document": "A hiker eats two types of berry mix and wants to make sure he eats at least 150 g of blueberries and 125 g of blackberries. Berry mix A contains 30 g of blueberries and 45 g of blackberries per bag. Berry mix B contains 20 g of blueberries and 15 g of blackberries per bag. If berry mix A costs $5 per bag and berry mix B costs $3 per bag, how many bags of each should the hiker purchase to minimize costs?", "order_mapping": {"Berry mix A": 0, "Berry mix B": 1, "berry mix A": 0, "berry mix B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"berry mix A": "5", "berry mix B": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"Berry mix A": "30", "Berry mix B": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "125", "terms": {"Berry mix A": "45", "Berry mix B": "15"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of bags of berry mix A\n- y: Number of bags of berry mix B\n\nObjective:\n- The hiker wants to minimize costs. Berry mix A costs $5 per bag and berry mix B costs $3 per bag. Therefore, the objective function is: Minimize 5x + 3y\n\nConstraints:\n- The hiker needs to eat at least 150 g of blueberries, which translates to the constraint: 30x + 20y >= 150.\n- The hiker needs to eat at least 125 g of blackberries, leading to the constraint: 45x + 15y >= 125.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 5x + 3y\nConstraints:\n30x + 20y >= 150\n45x + 15y >= 125", "canonical": {"objective": [5.0, 3.0], "constraints": [[-30.0, -20.0, -150.0], [-45.0, -15.0, -125.0]]}, "solution": {"x": 1, "y": 6}, "pseudo_model": "\nDecision Variables:\n- Number of bags of Berry mix A purchased: BerryMixA\n- Number of bags of Berry mix B purchased: BerryMixB\n\nConstraints:\n- To meet the blueberry requirement (at least 150 g):\n  30 * BerryMixA + 20 * BerryMixB >= 150\n- To meet the blackberry requirement (at least 125 g):\n  45 * BerryMixA + 15 * BerryMixB >= 125\n\nObjective:\n- Minimize costs (5 dollars per bag of Berry mix A, 3 dollars per bag of Berry mix B):\n  5 * BerryMixA + 3 * BerryMixB\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBerryMixA = intvar(0, 999999999)  # Number of bags of Berry mix A\nBerryMixB = intvar(0, 999999999)  # Number of bags of Berry mix B\n\n# Constraints\nm = Model()\n\n# At least 150 g of blueberries:\nm += 30 * BerryMixA + 20 * BerryMixB >= 150\n# At least 125 g of blackberries:\nm += 45 * BerryMixA + 15 * BerryMixB >= 125\n\n# Objective\n# Minimize costs (5 dollars per bag of Berry mix A, 3 dollars per bag of Berry mix B):\nm.minimize(5 * BerryMixA + 3 * BerryMixB)\n", "entities": [{"start": 67, "end": 75, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985362543458495}, {"start": 76, "end": 79, "word": "150", "entity_group": "LIMIT", "score": 0.999618412683067}, {"start": 101, "end": 104, "word": "125", "entity_group": "LIMIT", "score": 0.9993508091036543}, {"start": 125, "end": 136, "word": "Berry mix A", "entity_group": "VAR", "score": 0.9985728160089745}, {"start": 146, "end": 148, "word": "30", "entity_group": "PARAM", "score": 0.9990517666974669}, {"start": 170, "end": 172, "word": "45", "entity_group": "PARAM", "score": 0.9996052244758056}, {"start": 201, "end": 212, "word": "Berry mix B", "entity_group": "VAR", "score": 0.9983033655343372}, {"start": 222, "end": 224, "word": "20", "entity_group": "PARAM", "score": 0.998922955118437}, {"start": 246, "end": 248, "word": "15", "entity_group": "PARAM", "score": 0.999654002091622}, {"start": 280, "end": 291, "word": "berry mix A", "entity_group": "VAR", "score": 0.9977142067367366}, {"start": 292, "end": 297, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999381391643016}, {"start": 300, "end": 301, "word": "5", "entity_group": "PARAM", "score": 0.9994343231587296}, {"start": 314, "end": 325, "word": "berry mix B", "entity_group": "VAR", "score": 0.9980384711837916}, {"start": 326, "end": 331, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990106345982548}, {"start": 334, "end": 335, "word": "3", "entity_group": "PARAM", "score": 0.9992782087024434}, {"start": 397, "end": 405, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9996901810254735}, {"start": 406, "end": 411, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9990563196319533}]}
{"doc_id": "-446204523", "document": "A wood factory produces lumbers and plywood using workers and machines. The factory has a total of 2500 worker-hours and 4000 machine-hours available. Each lumber takes 3 worker-hours and 8 works of machine-hours. On the other hand, each plywood requires 2 worker-hours and 12 machine-hours. The factory must make at least 200 lumbers and at least 300 plywood. If the profit per lumber is $10 and the profit per plywood is $35, how many of each should be made to maximize profit?", "order_mapping": {"lumbers": 0, "plywood": 1, "lumber": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"lumber": "10", "plywood": "35"}}, "const_declarations": [{"type": "linear", "direction": "total", "limit": "2500", "terms": {"lumber": "3", "plywood": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"lumber": "8", "plywood": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "200", "var": "lumbers", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "300", "var": "plywood", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of lumbers produced\n- y: Number of plywood produced\n\nObjective:\n- The factory aims to maximize its profit. The profit per lumber is $10 and the profit per plywood is $35. Therefore, the objective function is: Maximize 10x + 35y\n\nConstraints:\n- The factory has a total of 2500 worker-hours available, and each lumber takes 3 worker-hours and each plywood takes 2 worker-hours. This leads to the constraint: 3x + 2y <= 2500.\n- The factory has a total of 4000 machine-hours available, and each lumber takes 8 machine-hours and each plywood takes 12 machine-hours. This leads to the constraint: 8x + 12y <= 4000.\n- The factory must make at least 200 lumbers, leading to the constraint: x >= 200.\n- The factory must make at least 300 plywood, leading to the constraint: y >= 300.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 35y\nConstraints:\n3x + 2y <= 2500\n8x + 12y <= 4000\nx >= 200\ny >= 300", "canonical": {"objective": [-10.0, -35.0], "constraints": [[3.0, 2.0, 2500.0], [8.0, 12.0, 4000.0], [-1.0, 0.0, -200.0], [0.0, -1.0, -300.0]]}, "solution": null, "pseudo_model": "\nDecision Variables:\n- Number of lumbers produced: Lumbers\n- Number of plywood produced: Plywood\n\nConstraints:\n- Worker-hours and machine-hours constraints:\n  3 * Lumbers + 2 * Plywood <= 2500 (worker-hours)\n  8 * Lumbers + 12 * Plywood <= 4000 (machine-hours)\n- Production minimums:\n  Lumbers >= 200\n  Plywood >= 300\n\nObjective:\n- Maximize profit (10 dollars per lumber, 35 dollars per plywood):\n  10 * Lumbers + 35 * Plywood\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLumbers = intvar(0, 999999999)  # Number of lumbers produced\nPlywood = intvar(0, 999999999)  # Number of plywood produced\n\n# Constraints\nm = Model()\n\n# Worker-hours and machine-hours constraints:\nm += 3 * Lumbers + 2 * Plywood <= 2500  # Total worker-hours available\nm += 8 * Lumbers + 12 * Plywood <= 4000  # Total machine-hours available\n\n# Production minimums:\nm += Lumbers >= 200  # At least 200 lumbers\nm += Plywood >= 300  # At least 300 plywood\n\n# Objective\n# Maximize profit (10 dollars per lumber, 35 dollars per plywood):\nm.maximize(10 * Lumbers + 35 * Plywood)\n", "entities": [{"start": 24, "end": 31, "word": "lumbers", "entity_group": "VAR", "score": 0.9996477480210002}, {"start": 36, "end": 43, "word": "plywood", "entity_group": "VAR", "score": 0.9987327409979017}, {"start": 91, "end": 96, "word": "total", "entity_group": "CONST_DIR", "score": 0.9978914425926767}, {"start": 100, "end": 104, "word": "2500", "entity_group": "LIMIT", "score": 0.9995393022117143}, {"start": 124, "end": 128, "word": "4000", "entity_group": "LIMIT", "score": 0.9993473141868775}, {"start": 145, "end": 154, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994425715270953}, {"start": 162, "end": 168, "word": "lumber", "entity_group": "VAR", "score": 0.9996512104311304}, {"start": 175, "end": 176, "word": "3", "entity_group": "PARAM", "score": 0.9995854339940438}, {"start": 196, "end": 197, "word": "8", "entity_group": "PARAM", "score": 0.9996601371936515}, {"start": 250, "end": 257, "word": "plywood", "entity_group": "VAR", "score": 0.999736136082979}, {"start": 267, "end": 268, "word": "2", "entity_group": "PARAM", "score": 0.9994274597302834}, {"start": 288, "end": 290, "word": "12", "entity_group": "PARAM", "score": 0.9993688328037736}, {"start": 331, "end": 339, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989557842626433}, {"start": 340, "end": 343, "word": "200", "entity_group": "LIMIT", "score": 0.9996662834196164}, {"start": 344, "end": 351, "word": "lumbers", "entity_group": "VAR", "score": 0.9994322518315539}, {"start": 356, "end": 364, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989507319203487}, {"start": 365, "end": 368, "word": "300", "entity_group": "LIMIT", "score": 0.9997222474711}, {"start": 369, "end": 376, "word": "plywood", "entity_group": "VAR", "score": 0.9993926343666008}, {"start": 386, "end": 392, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998978007397025}, {"start": 397, "end": 403, "word": "lumber", "entity_group": "VAR", "score": 0.9991086628469993}, {"start": 409, "end": 411, "word": "10", "entity_group": "PARAM", "score": 0.9993478814005199}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465452}, {"start": 431, "end": 438, "word": "plywood", "entity_group": "VAR", "score": 0.9990975872183067}, {"start": 444, "end": 446, "word": "35", "entity_group": "PARAM", "score": 0.999470760783935}, {"start": 484, "end": 492, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 493, "end": 499, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}]}
{"doc_id": "2052035230", "document": "A tasty burrito is to be made from units of beans and onions and is to contain a minimum of 110 units of spice and 80 units of flavor. Beans cost $6 per unit and onion cost $8 per unit. One unit of beans contains 10 units of spice and 3 units of flavor. One unit of onions contains 2 units of spice and 6 units of flavor. Formulate this as an LP and find the minimum cost burrito that can be made.", "order_mapping": {"beans": 0, "onions": 1, "Beans": 0, "onion": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Beans": "6", "onion": "8"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "110", "terms": {"beans": "10", "onions": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "80", "terms": {"beans": "3", "onions": "6"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Units of beans\n- y: Units of onions\n\nObjective:\n- The goal is to minimize the cost of the burrito. Beans cost $6 per unit and onions cost $8 per unit. Therefore, the objective function is: Minimize 6x + 8y\n\nConstraints:\n- The burrito must contain a minimum of 110 units of spice, which can be formulated as: 10x + 2y >= 110\n- The burrito must also contain a minimum of 80 units of flavor, which can be formulated as: 3x + 6y >= 80\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 6x + 8y\nConstraints:\n10x + 2y >= 110\n3x + 6y >= 80", "canonical": {"objective": [6.0, 8.0], "constraints": [[-10.0, -2.0, -110.0], [-3.0, -6.0, -80.0]]}, "solution": {"x": 11, "y": 8}, "pseudo_model": "\nDecision Variables:\n- Number of units of beans: Beans\n- Number of units of onions: Onions\n\nConstraints:\n- Minimum of 110 units of spice required:\n  10 * Beans + 2 * Onions >= 110\n- Minimum of 80 units of flavor required:\n  3 * Beans + 6 * Onions >= 80\n\nObjective:\n- Minimize cost (6 dollars per unit of beans, 8 dollars per unit of onions):\n  6 * Beans + 8 * Onions\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeans = intvar(0, 999999999)  # Number of units of beans\nOnions = intvar(0, 999999999)  # Number of units of onions\n\n# Constraints\nm = Model()\n\n# The burrito must contain a minimum of 110 units of spice:\nm += 10 * Beans + 2 * Onions >= 110\n# The burrito must contain a minimum of 80 units of flavor:\nm += 3 * Beans + 6 * Onions >= 80\n\n# Objective\n# Minimize the cost (6 dollars per unit of beans, 8 dollars per unit of onions):\nm.minimize(6 * Beans + 8 * Onions)\n", "entities": [{"start": 44, "end": 49, "word": "beans", "entity_group": "VAR", "score": 0.9996177263081563}, {"start": 54, "end": 60, "word": "onions", "entity_group": "VAR", "score": 0.9997354611305922}, {"start": 81, "end": 88, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9964234617814728}, {"start": 92, "end": 95, "word": "110", "entity_group": "LIMIT", "score": 0.9997754008590092}, {"start": 115, "end": 117, "word": "80", "entity_group": "LIMIT", "score": 0.9997519577442404}, {"start": 136, "end": 141, "word": "Beans", "entity_group": "VAR", "score": 0.9996575063005593}, {"start": 142, "end": 146, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.996077538587917}, {"start": 149, "end": 150, "word": "6", "entity_group": "PARAM", "score": 0.9996764056602864}, {"start": 164, "end": 169, "word": "onion", "entity_group": "VAR", "score": 0.9995714148584336}, {"start": 170, "end": 174, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9944130680509607}, {"start": 177, "end": 178, "word": "8", "entity_group": "PARAM", "score": 0.999281651886723}, {"start": 202, "end": 207, "word": "beans", "entity_group": "VAR", "score": 0.9993533411857429}, {"start": 217, "end": 219, "word": "10", "entity_group": "PARAM", "score": 0.9996784603513821}, {"start": 239, "end": 240, "word": "3", "entity_group": "PARAM", "score": 0.9997409753999483}, {"start": 271, "end": 277, "word": "onions", "entity_group": "VAR", "score": 0.9994413829053436}, {"start": 287, "end": 288, "word": "2", "entity_group": "PARAM", "score": 0.999679017110226}, {"start": 308, "end": 309, "word": "6", "entity_group": "PARAM", "score": 0.9997333471326}, {"start": 365, "end": 372, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9899837301274302}, {"start": 373, "end": 377, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9954839644491331}]}
{"doc_id": "1482174936", "document": "Alpha Nut has 35 kilograms of almonds and 20 kilograms of hazelnuts. They sell two combos of these nuts: Combo X and Combo Y. Combo X is 70% almonds and 30% hazelnuts. Combo Y is 35% almonds and 65% hazelnuts. A kilogram of Combo X yields a profit of $35 and a kilogram of Combo Y yields a profit of $55. How many kilograms of each combo should be made to maximize profit?", "order_mapping": {"Combo X": 0, "Combo Y.": 1, "Combo Y": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Combo X": "35", "Combo Y": "55"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "35", "terms": {"Combo Y": "35%", "Combo X": "70%"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "20", "terms": {"Combo X": "30%", "Combo Y": "65%"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: kilograms of Combo X\n- y: kilograms of Combo Y\n\nObjective:\n- The objective is to maximize the profit. A kilogram of Combo X yields a profit of $35 and a kilogram of Combo Y yields a profit of $55. Therefore, the objective function is: Maximize 35x + 55y\n\nConstraints:\n- Alpha Nut has 35 kilograms of almonds, and Combo X is 70% almonds and Combo Y is 35% almonds. This leads to the constraint: 0.70x + 0.35y <= 35\n- Alpha Nut has 20 kilograms of hazelnuts, and Combo X is 30% hazelnuts and Combo Y is 65% hazelnuts. This results in the constraint: 0.30x + 0.65y <= 20\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 35x + 55y\nConstraints:\n0.70x + 0.35y <= 35\n0.30x + 0.65y <= 20", "canonical": {"objective": [-35.0, -55.0], "constraints": [[0.7, 0.35, 35.0], [0.3, 0.65, 20.0]]}, "solution": {"x": 45, "y": 10}, "pseudo_model": "\nDecision Variables:\n- Kilograms of Combo X produced: ComboX\n- Kilograms of Combo Y produced: ComboY\n\nConstraints:\n- Almonds usage in combos should not exceed 35 kilograms:\n  0.7 * ComboX + 0.35 * ComboY <= 35\n- Hazelnuts usage in combos should not exceed 20 kilograms:\n  0.3 * ComboX + 0.65 * ComboY <= 20\n\nObjective:\n- Maximize profit (35 dollars per kilogram of Combo X, 55 dollars per kilogram of Combo Y):\n  35 * ComboX + 55 * ComboY\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nComboX = intvar(0, 999999999)  # Kilograms of Combo X produced\nComboY = intvar(0, 999999999)  # Kilograms of Combo Y produced\n\n# Constraints\nm = Model()\n\n# Almonds constraint: 70% of Combo X + 35% of Combo Y <= 35 kilograms\nm += 0.7 * ComboX + 0.35 * ComboY <= 35\n# Hazelnuts constraint: 30% of Combo X + 65% of Combo Y <= 20 kilograms\nm += 0.3 * ComboX + 0.65 * ComboY <= 20\n\n# Objective\n# Maximize profit: 35 dollars per kilogram of Combo X + 55 dollars per kilogram of Combo Y\nm.maximize(35 * ComboX + 55 * ComboY)\n", "entities": [{"start": 10, "end": 13, "word": "has", "entity_group": "CONST_DIR", "score": 0.9975220932258942}, {"start": 14, "end": 16, "word": "35", "entity_group": "LIMIT", "score": 0.9988444481269574}, {"start": 42, "end": 44, "word": "20", "entity_group": "LIMIT", "score": 0.9996390860124131}, {"start": 107, "end": 114, "word": "Combo X", "entity_group": "VAR", "score": 0.9999777453007577}, {"start": 119, "end": 127, "word": "Combo Y.", "entity_group": "VAR", "score": 0.9999915259334008}, {"start": 128, "end": 135, "word": "Combo X", "entity_group": "VAR", "score": 0.9999321628177275}, {"start": 139, "end": 143, "word": "70 %", "entity_group": "PARAM", "score": 0.9864933843061564}, {"start": 156, "end": 160, "word": "30 %", "entity_group": "PARAM", "score": 0.9947749671035733}, {"start": 173, "end": 180, "word": "Combo Y", "entity_group": "VAR", "score": 0.9999231327038731}, {"start": 184, "end": 188, "word": "35 %", "entity_group": "PARAM", "score": 0.9934457680062869}, {"start": 201, "end": 205, "word": "65 %", "entity_group": "PARAM", "score": 0.9960581635788684}, {"start": 232, "end": 239, "word": "Combo X", "entity_group": "VAR", "score": 0.9999697131520763}, {"start": 249, "end": 255, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999286470472031}, {"start": 261, "end": 263, "word": "35", "entity_group": "PARAM", "score": 0.9989079017832417}, {"start": 282, "end": 289, "word": "Combo Y", "entity_group": "VAR", "score": 0.9998558690013066}, {"start": 299, "end": 305, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997410987572384}, {"start": 311, "end": 313, "word": "55", "entity_group": "PARAM", "score": 0.9996014103427835}, {"start": 367, "end": 375, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991819898081473}, {"start": 376, "end": 382, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997064624792771}]}
{"doc_id": "-1282947574", "document": "A tea shop sells two products: oolong tea and green tea. The shop makes x1 bottles of oolong tea per day and x2 bottles of green tea per day (x1 and x2 are unknown values greater than or equal to 0). The profit per bottle of oolong tea is $30 and the profit per bottle of green tea is $20. Current demand for tea is at most 100 bottles of oolong tea per day and at most 80 bottles of green tea per day. The shop only has enough supply to make 150 bottles of either type each day. How many bottles of each tea, oolong tea and green tea, should the shop make to maximize profit?", "order_mapping": {"oolong tea": 0, "green tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"oolong tea": "30", "green tea": "20"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "oolong tea", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "green tea", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "only", "limit": "150", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x1: Number of bottles of oolong tea made per day\n- x2: Number of bottles of green tea made per day\n\nObjective:\n- The shop aims to maximize its profit. The profit per bottle of oolong tea is $30 and the profit per bottle of green tea is $20. Therefore, the objective function is: Maximize 30x1 + 20x2\n\nConstraints:\n- The demand for oolong tea is at most 100 bottles per day, leading to the constraint: x1 <= 100.\n- The demand for green tea is at most 80 bottles per day, leading to the constraint: x2 <= 80.\n- The shop can only produce up to 150 bottles of either type each day, resulting in the constraint: x1 + x2 <= 150.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 30x1 + 20x2\nConstraints:\nx1 <= 100\nx2 <= 80\nx1 + x2 <= 150", "canonical": {"objective": [-30.0, -20.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 80.0], [1.0, 1.0, 150.0]]}, "solution": {"x": 100, "y": 50}, "pseudo_model": "\nDecision Variables:\n- Number of bottles of oolong tea made per day: OolongTea\n- Number of bottles of green tea made per day: GreenTea\n\nConstraints:\n- Total number of bottles made should not exceed 150 per day:\n  OolongTea + GreenTea <= 150\n- At most 100 bottles of oolong tea per day:\n  OolongTea <= 100\n- At most 80 bottles of green tea per day:\n  GreenTea <= 80\n\nObjective:\n- Maximize profit (30 dollars per bottle of oolong tea, 20 dollars per bottle of green tea):\n  30 * OolongTea + 20 * GreenTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOolongTea = intvar(0, 999999999)  # Number of bottles of oolong tea made per day\nGreenTea = intvar(0, 999999999)  # Number of bottles of green tea made per day\n\n# Constraints\nm = Model()\n\n# Total number of bottles made should not exceed 150 per day:\nm += OolongTea + GreenTea <= 150\n# Number of bottles of oolong tea made should be at most 100 per day:\nm += OolongTea <= 100\n# Number of bottles of green tea made should be at most 80 per day:\nm += GreenTea <= 80\n\n# Objective\n# Maximize profit (30 dollars per bottle of oolong tea, 20 dollars per bottle of green tea):\nm.maximize(30 * OolongTea + 20 * GreenTea)\n", "entities": [{"start": 32, "end": 42, "word": "oolong tea", "entity_group": "VAR", "score": 0.9999304855417791}, {"start": 47, "end": 56, "word": "green tea", "entity_group": "VAR", "score": 0.9999758209896922}, {"start": 88, "end": 98, "word": "oolong tea", "entity_group": "VAR", "score": 0.9999141570709484}, {"start": 125, "end": 134, "word": "green tea", "entity_group": "VAR", "score": 0.9998708872627945}, {"start": 209, "end": 215, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999924535296327}, {"start": 230, "end": 240, "word": "oolong tea", "entity_group": "VAR", "score": 0.9998868132260726}, {"start": 246, "end": 248, "word": "30", "entity_group": "PARAM", "score": 0.9994548668562611}, {"start": 257, "end": 263, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998284716640606}, {"start": 278, "end": 287, "word": "green tea", "entity_group": "VAR", "score": 0.9997650932419017}, {"start": 293, "end": 295, "word": "20", "entity_group": "PARAM", "score": 0.9996454111207363}, {"start": 324, "end": 331, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989475626913549}, {"start": 332, "end": 335, "word": "100", "entity_group": "LIMIT", "score": 0.9997392444793542}, {"start": 347, "end": 357, "word": "oolong tea", "entity_group": "VAR", "score": 0.9999667698740586}, {"start": 370, "end": 377, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989312236577776}, {"start": 378, "end": 380, "word": "80", "entity_group": "LIMIT", "score": 0.999742528641843}, {"start": 392, "end": 401, "word": "green tea", "entity_group": "VAR", "score": 0.999946559099214}, {"start": 421, "end": 425, "word": "only", "entity_group": "CONST_DIR", "score": 0.9957845126075595}, {"start": 452, "end": 455, "word": "150", "entity_group": "LIMIT", "score": 0.9996102833682138}, {"start": 521, "end": 531, "word": "oolong tea", "entity_group": "VAR", "score": 0.9998844239808687}, {"start": 536, "end": 545, "word": "green tea", "entity_group": "VAR", "score": 0.9999829572758664}, {"start": 572, "end": 580, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988893122117606}, {"start": 581, "end": 587, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277217254594}]}
{"doc_id": "865048192", "document": "A car company manufactures two types of vehicles: minivans and SUVs. A minivan requires 9 hours of engineering time while an SUV requires 7 hours of engineering time. Both vehicles require 25 kg of steel. The company receives 1200 kg of steel each week and a total of 450 hours of engineering time is available. Each minivan nets $5500 in profit, while each SUV nets $4000 in profit. The company wishes to maximize profit. Ignoring the divisibility issues, construct a linear programming problem whose solution will determine the number of each type of vehicle the company should produce.", "order_mapping": {"minivans": 0, "SUVs": 1, "minivan": 0, "SUV": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"minivan": "5500", "SUV": "4000"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "450", "terms": {"minivan": "9", "SUV": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "receives", "limit": "1200", "terms": {"minivan": "25", "SUV": "25"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of minivans to produce\n- y: Number of SUVs to produce\n\nObjective:\n- The company aims to maximize its profit. Each minivan nets $5500 in profit, while each SUV nets $4000 in profit. Therefore, the objective function is: Maximize 5500x + 4000y\n\nConstraints:\n- The total engineering time available is 450 hours, so the constraint is: 9x + 7y <= 450.\n- The total steel received is 1200 kg, leading to the constraint: 25x + 25y <= 1200.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 5500x + 4000y\nConstraints:\n9x + 7y <= 450\n25x + 25y <= 1200", "canonical": {"objective": [-5500.0, -4000.0], "constraints": [[9.0, 7.0, 450.0], [25.0, 25.0, 1200.0]]}, "solution": {"x": 48, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of minivans produced: Minivans\n- Number of SUVs produced: SUVs\n\nConstraints:\n- Total engineering time for all vehicles should not exceed 450 hours (9 hours per minivan, 7 hours per SUV):\n  9 * Minivans + 7 * SUVs <= 450\n- Total steel usage for all vehicles should not exceed 1200 kg (25 kg per vehicle):\n  25 * Minivans + 25 * SUVs <= 1200\n\nObjective:\n- Maximize profit ($5500 per minivan, $4000 per SUV):\n  5500 * Minivans + 4000 * SUVs\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMinivans = intvar(0, 999999999)  # Number of minivans produced\nSUVs = intvar(0, 999999999)  # Number of SUVs produced\n\n# Constraints\nm = Model()\n\n# Total engineering time for all vehicles should not exceed 450 hours:\n# (9 hours per minivan, 7 hours per SUV)\nm += 9 * Minivans + 7 * SUVs <= 450\n\n# Total steel usage for all vehicles should not exceed 1200 kg:\n# (25 kg per vehicle)\nm += 25 * Minivans + 25 * SUVs <= 1200\n\n# Objective\n# Maximize profit ($5500 per minivan, $4000 per SUV):\nm.maximize(5500 * Minivans + 4000 * SUVs)\n", "entities": [{"start": 51, "end": 59, "word": "minivans", "entity_group": "VAR", "score": 0.9995826263385337}, {"start": 64, "end": 68, "word": "SUVs", "entity_group": "VAR", "score": 0.9998280005862761}, {"start": 73, "end": 80, "word": "minivan", "entity_group": "VAR", "score": 0.9997371084256691}, {"start": 90, "end": 91, "word": "9", "entity_group": "PARAM", "score": 0.9994961449744832}, {"start": 127, "end": 130, "word": "SUV", "entity_group": "VAR", "score": 0.999747470759556}, {"start": 140, "end": 141, "word": "7", "entity_group": "PARAM", "score": 0.9990128789365066}, {"start": 192, "end": 194, "word": "25", "entity_group": "PARAM", "score": 0.9987828983117}, {"start": 221, "end": 229, "word": "receives", "entity_group": "CONST_DIR", "score": 0.9952802238458569}, {"start": 230, "end": 234, "word": "1200", "entity_group": "LIMIT", "score": 0.9989307047057857}, {"start": 272, "end": 275, "word": "450", "entity_group": "LIMIT", "score": 0.9996823319323344}, {"start": 305, "end": 314, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989769110068631}, {"start": 322, "end": 329, "word": "minivan", "entity_group": "VAR", "score": 0.9996450487488056}, {"start": 337, "end": 341, "word": "5500", "entity_group": "PARAM", "score": 0.9996881426477437}, {"start": 345, "end": 351, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999309014989025}, {"start": 365, "end": 368, "word": "SUV", "entity_group": "VAR", "score": 0.999785049748135}, {"start": 376, "end": 380, "word": "4000", "entity_group": "PARAM", "score": 0.9995953333046833}, {"start": 384, "end": 390, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999513220948064}, {"start": 415, "end": 423, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9972711057893698}, {"start": 424, "end": 430, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998814894186063}]}
{"doc_id": "922724597", "document": "A battery store sells AA and D batteries. The store has a budget of $1000 and each AA battery costs $1 and each D battery costs $3. The monthly demand for both batteries will not exceed 1000. If the profit per AA battery is $0.50 and the profit per D battery is $1, how many of each should the store stock in order to maximize profit?", "order_mapping": {"AA": 0, "D batteries": 1, "AA battery": 0, "D battery": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"D battery": "1", "AA battery": "0.50"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "1000", "terms": {"AA battery": "1", "D battery": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "not exceed", "limit": "1000", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of AA batteries to stock\n- y: Number of D batteries to stock\n\nObjective:\n- The store aims to maximize its profit. The profit per AA battery is $0.50 and the profit per D battery is $1. Therefore, the objective function is: Maximize 0.50x + 1y\n\nConstraints:\n- The store has a budget of $1000, and each AA battery costs $1 and each D battery costs $3. This leads to the budget constraint: x + 3y <= 1000.\n- The monthly demand for both batteries will not exceed 1000, resulting in the constraint: x + y <= 1000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.50x + y\nConstraints:\nx + 3y <= 1000\nx + y <= 1000", "canonical": {"objective": [-0.5, -1.0], "constraints": [[1.0, 3.0, 1000.0], [1.0, 1.0, 1000.0]]}, "solution": {"x": 1000, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of AA batteries: AABatteries\n- Number of D batteries: DBatteries\n\nConstraints:\n- The store has a budget of $1000 (each AA battery costs $1 and each D battery costs $3):\n  1 * AABatteries + 3 * DBatteries <= 1000\n- The monthly demand for both batteries will not exceed 1000:\n  AABatteries + DBatteries <= 1000\n\nObjective:\n- Maximize profit (Profit per AA battery is $0.50 and per D battery is $1):\n  0.50 * AABatteries + 1 * DBatteries\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAABatteries = intvar(0, 999999999)  # Number of AA batteries\nDBatteries = intvar(0, 999999999)  # Number of D batteries\n\n# Constraints\nm = Model()\n\n# The store has a budget of $1000:\nm += 1 * AABatteries + 3 * DBatteries <= 1000\n# The monthly demand for both batteries will not exceed 1000:\nm += AABatteries + DBatteries <= 1000\n\n# Objective\n# Maximize profit (Profit per AA battery is $0.50 and per D battery is $1):\nm.maximize(0.50 * AABatteries + 1 * DBatteries)\n", "entities": [{"start": 22, "end": 24, "word": "AA", "entity_group": "VAR", "score": 0.999572765943379}, {"start": 29, "end": 40, "word": "D batteries", "entity_group": "VAR", "score": 0.9999855962729621}, {"start": 59, "end": 65, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9971674336347623}, {"start": 71, "end": 75, "word": "1000", "entity_group": "LIMIT", "score": 0.9988830576945987}, {"start": 85, "end": 95, "word": "AA battery", "entity_group": "VAR", "score": 0.9999859651899524}, {"start": 104, "end": 105, "word": "1", "entity_group": "PARAM", "score": 0.9997349236126729}, {"start": 115, "end": 124, "word": "D battery", "entity_group": "VAR", "score": 0.9999775531966179}, {"start": 133, "end": 134, "word": "3", "entity_group": "PARAM", "score": 0.9996764502007448}, {"start": 180, "end": 190, "word": "not exceed", "entity_group": "CONST_DIR", "score": 0.9940781861993271}, {"start": 191, "end": 195, "word": "1000", "entity_group": "LIMIT", "score": 0.9997283922893566}, {"start": 205, "end": 211, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999886316768322}, {"start": 216, "end": 226, "word": "AA battery", "entity_group": "VAR", "score": 0.9999491512210387}, {"start": 232, "end": 236, "word": "0.50", "entity_group": "PARAM", "score": 0.9994361787495961}, {"start": 245, "end": 251, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999386050551932}, {"start": 256, "end": 265, "word": "D battery", "entity_group": "VAR", "score": 0.9999469242727606}, {"start": 271, "end": 272, "word": "1", "entity_group": "PARAM", "score": 0.9996455066673438}, {"start": 327, "end": 335, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9932199704765714}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995222291850439}]}
{"doc_id": "-839049614", "document": "Andy has decided to put $10 million of his wealth in a trust fund for his children. His financial advisor has evaluated that the money should be invested in the energy sector or in the travel sector. Money placed in the energy sector is likely to give a 32% total return while money placed in the travel sector yields a 20% total return. Andy wants to place at least 25% of the investment in the energy sector and at most 50% of the investment in the travel sector. How much money should be placed in each sector to maximize return on investment?", "order_mapping": {"energy sector": 0, "travel sector": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"energy sector": "32%", "travel sector": "20%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "10", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "25%", "var": "energy sector", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50%", "var": "travel sector", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the energy sector\n- y: Dollars invested in the travel sector\n\nObjective:\n- Andy wants to maximize the return on investment. The financial advisor has evaluated that money placed in the energy sector is likely to give a 32% total return, while money placed in the travel sector yields a 20% total return. Therefore, the objective function is: Maximize 0.32x + 0.20y\n\nConstraints:\n- Andy has decided to put $10 million in the trust fund, so the constraint is: x + y <= 10\n- At least 25% of the investment should be in the energy sector, leading to the constraint: x >= 0.25(x + y)\n- At most 50% of the investment should be in the travel sector, leading to the constraint: y <= 0.50(x + y)\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.32x + 0.20y\nConstraints:\nx + y <= 10\nx >= 0.25(x + y)\ny <= 0.50(x + y)", "canonical": {"objective": [-0.32, -0.2], "constraints": [[1.0, 1.0, 10.0], [-0.75, 0.25, 0.0], [-0.5, 0.5, 0.0]]}, "solution": {"x": 10, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Amount placed in the energy sector: EnergySector\n- Amount placed in the travel sector: TravelSector\n\nConstraints:\n- Total investment should be exactly $10 million:\n  EnergySector + TravelSector == 10\n- At least 25% of the investment should be in the energy sector:\n  EnergySector >= 2.5\n- At most 50% of the investment should be in the travel sector:\n  TravelSector <= 5\n\nObjective:\n- Maximize return on investment (32% from energy sector, 20% from travel sector):\n  0.32 * EnergySector + 0.20 * TravelSector\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Total investment amount in millions\ntotal_investment = 10\n\n# Decision Variables\nEnergySector = intvar(0, total_investment)  # Investment in the energy sector in millions\nTravelSector = intvar(0, total_investment)  # Investment in the travel sector in millions\n\n# Constraints\nm = Model()\n\n# Total investment should be exactly $10 million:\nm += EnergySector + TravelSector == total_investment\n# At least 25% of the investment in the energy sector:\nm += EnergySector >= 0.25 * total_investment\n# At most 50% of the investment in the travel sector:\nm += TravelSector <= 0.50 * total_investment\n\n# Objective\n# Maximize return on investment (32% from energy sector, 20% from travel sector):\nm.maximize(0.32 * EnergySector + 0.20 * TravelSector)\n", "entities": [{"start": 5, "end": 8, "word": "has", "entity_group": "CONST_DIR", "score": 0.9892173090489359}, {"start": 26, "end": 28, "word": "10", "entity_group": "LIMIT", "score": 0.997701245426593}, {"start": 163, "end": 176, "word": "energy sector", "entity_group": "VAR", "score": 0.9999769251655389}, {"start": 187, "end": 200, "word": "travel sector", "entity_group": "VAR", "score": 0.9999599010871503}, {"start": 223, "end": 236, "word": "energy sector", "entity_group": "VAR", "score": 0.9999683700119283}, {"start": 257, "end": 261, "word": "32 %", "entity_group": "PARAM", "score": 0.8889936488139938}, {"start": 268, "end": 274, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9983629289893587}, {"start": 301, "end": 314, "word": "travel sector", "entity_group": "VAR", "score": 0.9999822304894135}, {"start": 324, "end": 328, "word": "20 %", "entity_group": "PARAM", "score": 0.9518863508583216}, {"start": 335, "end": 341, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9995226482618402}, {"start": 364, "end": 372, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991055675820321}, {"start": 373, "end": 377, "word": "25 %", "entity_group": "LIMIT", "score": 0.9905137428216274}, {"start": 403, "end": 416, "word": "energy sector", "entity_group": "VAR", "score": 0.999968785507434}, {"start": 421, "end": 428, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981135892272036}, {"start": 429, "end": 433, "word": "50 %", "entity_group": "LIMIT", "score": 0.9516236389284985}, {"start": 459, "end": 472, "word": "travel sector", "entity_group": "VAR", "score": 0.9999708927464699}, {"start": 525, "end": 533, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990629393200252}, {"start": 534, "end": 540, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9942982220300152}]}
{"doc_id": "-152009588", "document": "Charles has $100000 available and has decided to invest in the fishing, education, clothing, and pharmaceutical industries. The annual rate of return on investment in each of the industries is as follows: fishing, 5.5%; education, 3%; clothing, 7.6%; pharmaceutical, 11.3%. A financial advisor has given him the following advice. The amount invested in the pharmaceutical industry cannot exceed the amount invested in the fishing industry. Also, the amount invested in the education industry cannot exceed the amount invested in the clothing industry. Finally, at most 20% of the total amount of money can be invested in the pharmaceutical industry. Formulate an LP to maximize his return on investment.", "order_mapping": {"fishing": 0, "education": 1, "clothing": 2, "pharmaceutical industries": 3, "pharmaceutical": 3, "pharmaceutical industry": 3, "fishing industry": 0, "education industry": 1, "clothing industry": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "return", "terms": {"fishing": "5.5%", "education": "3%", "clothing": "7.6%", "pharmaceutical": "11.3%"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "pharmaceutical industry", "direction": "cannot exceed", "y_var": "fishing industry", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "education industry", "direction": "cannot exceed", "y_var": "clothing industry", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "20%", "var": "pharmaceutical industry", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the fishing industry\n- y: Dollars invested in the education industry\n- z: Dollars invested in the clothing industry\n- w: Dollars invested in the pharmaceutical industry\n\nObjective:\n- Charles aims to maximize his return on investment. The annual rate of return on investment in each of the industries is as follows: fishing, 5.5%; education, 3%; clothing, 7.6%; pharmaceutical, 11.3%. Therefore, the objective function is: Maximize 0.055x + 0.03y + 0.076z + 0.113w\n\nConstraints:\n- Charles has $100,000 available for investment, so the constraint is: x + y + z + w <= 100000.\n- The amount invested in the pharmaceutical industry cannot exceed the amount invested in the fishing industry, leading to the constraint: w <= x.\n- The amount invested in the education industry cannot exceed the amount invested in the clothing industry, resulting in the constraint: y <= z.\n- At most 20% of the total amount of money can be invested in the pharmaceutical industry, leading to the constraint: w <= 0.20(x + y + z + w).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.055x + 0.03y + 0.076z + 0.113w\nConstraints:\nx + y + z + w <= 100000\nw <= x\ny <= z\nw <= 0.20(x + y + z + w)", "canonical": {"objective": [-0.055, -0.03, -0.076, -0.113], "constraints": [[1.0, 1.0, 1.0, 1.0, 100000.0], [-1.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, -1.0, 0.0, 0.0], [-0.2, -0.2, -0.2, 0.8, 0.0]]}, "solution": {"x": 20000, "y": 0, "z": 60000, "w": 20000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the fishing industry: Fishing\n- Amount invested in the education industry: Education\n- Amount invested in the clothing industry: Clothing\n- Amount invested in the pharmaceutical industry: Pharmaceutical\n\nConstraints:\n- Total investment should not exceed $100000:\n  Fishing + Education + Clothing + Pharmaceutical <= 100000\n- The amount invested in the pharmaceutical industry cannot exceed the amount invested in the fishing industry:\n  Pharmaceutical <= Fishing\n- The amount invested in the education industry cannot exceed the amount invested in the clothing industry:\n  Education <= Clothing\n- At most 20% of the total amount of money can be invested in the pharmaceutical industry:\n  Pharmaceutical <= 0.20 * (Fishing + Education + Clothing + Pharmaceutical)\n\nObjective:\n- Maximize return on investment (5.5% from fishing, 3% from education, 7.6% from clothing, 11.3% from pharmaceutical):\n  0.055 * Fishing + 0.03 * Education + 0.076 * Clothing + 0.113 * Pharmaceutical\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishing = intvar(0, 100000)  # Amount invested in the fishing industry\nEducation = intvar(0, 100000)  # Amount invested in the education industry\nClothing = intvar(0, 100000)  # Amount invested in the clothing industry\nPharmaceutical = intvar(0, 100000)  # Amount invested in the pharmaceutical industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $100000:\nm += Fishing + Education + Clothing + Pharmaceutical <= 100000\n# The amount invested in the pharmaceutical industry cannot exceed the amount invested in the fishing industry:\nm += Pharmaceutical <= Fishing\n# The amount invested in the education industry cannot exceed the amount invested in the clothing industry:\nm += Education <= Clothing\n# At most 20% of the total amount of money can be invested in the pharmaceutical industry:\nm += Pharmaceutical <= 0.20 * (Fishing + Education + Clothing + Pharmaceutical)\n\n# Objective\n# Maximize return on investment:\nm.maximize(0.055 * Fishing + 0.03 * Education + 0.076 * Clothing + 0.113 * Pharmaceutical)\n", "entities": [{"start": 14, "end": 20, "word": "100000", "entity_group": "LIMIT", "score": 0.9985960348162617}, {"start": 21, "end": 30, "word": "available", "entity_group": "CONST_DIR", "score": 0.9924786114889657}, {"start": 64, "end": 71, "word": "fishing", "entity_group": "VAR", "score": 0.9969437473766727}, {"start": 74, "end": 83, "word": "education", "entity_group": "VAR", "score": 0.9996816096872664}, {"start": 86, "end": 94, "word": "clothing", "entity_group": "VAR", "score": 0.9995585399481484}, {"start": 101, "end": 126, "word": "pharmaceutical industries", "entity_group": "VAR", "score": 0.9999163160928717}, {"start": 148, "end": 154, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9791702201729818}, {"start": 211, "end": 218, "word": "fishing", "entity_group": "VAR", "score": 0.9994685936110966}, {"start": 221, "end": 226, "word": "5.5 %", "entity_group": "PARAM", "score": 0.9874232997465693}, {"start": 229, "end": 238, "word": "education", "entity_group": "VAR", "score": 0.9986066102222418}, {"start": 241, "end": 244, "word": "3 %", "entity_group": "PARAM", "score": 0.9871712919319681}, {"start": 247, "end": 255, "word": "clothing", "entity_group": "VAR", "score": 0.998603008126402}, {"start": 258, "end": 263, "word": "7.6 %", "entity_group": "PARAM", "score": 0.9928000656613638}, {"start": 266, "end": 280, "word": "pharmaceutical", "entity_group": "VAR", "score": 0.9979355091224824}, {"start": 283, "end": 289, "word": "11.3 %", "entity_group": "PARAM", "score": 0.9893861289495606}, {"start": 376, "end": 399, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.9998868601780422}, {"start": 400, "end": 414, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9856592845065565}, {"start": 442, "end": 458, "word": "fishing industry", "entity_group": "VAR", "score": 0.9999304183355072}, {"start": 495, "end": 513, "word": "education industry", "entity_group": "VAR", "score": 0.9999099258245747}, {"start": 514, "end": 528, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9863126180110704}, {"start": 556, "end": 573, "word": "clothing industry", "entity_group": "VAR", "score": 0.9999297582524819}, {"start": 586, "end": 593, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982845875483142}, {"start": 594, "end": 598, "word": "20 %", "entity_group": "LIMIT", "score": 0.844868306246115}, {"start": 651, "end": 674, "word": "pharmaceutical industry", "entity_group": "VAR", "score": 0.9998788183831057}, {"start": 696, "end": 704, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996302968238612}, {"start": 709, "end": 715, "word": "return", "entity_group": "OBJ_NAME", "score": 0.9967482417802187}]}
{"doc_id": "349299805", "document": "Thomas wants to invest in the renewable energy and education industries. He has $50000 to invest. He has decided that the amount invested in renewable energy be at least four times as much as the amount invested in education. But the money invested in renewable energy must be at most $40000. If investments in renewable energy earn 5.9% and investments in education earn 7.1%, how much should Thomas invest in each to maximize profit?", "order_mapping": {"renewable energy": 0, "education": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"renewable energy": "5.9%", "education": "7.1%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "50000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "renewable energy", "direction": "at least", "param": "four times", "y_var": "education", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40000", "var": "renewable energy", "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in renewable energy\n- y: Dollars invested in education\n\nObjective:\n- Thomas aims to maximize his profit. Investments in renewable energy earn 5.9% and investments in education earn 7.1%. Therefore, the objective function is: Maximize 0.059x + 0.071y\n\nConstraints:\n- Thomas has $50000 to invest, so the constraint is: x + y <= 50000.\n- The amount invested in renewable energy must be at least four times as much as the amount invested in education, leading to the constraint: x >= 4y.\n- The money invested in renewable energy must be at most $40000, resulting in the constraint: x <= 40000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 0.059x + 0.071y\nConstraints:\nx + y <= 50000\nx >= 4y\nx <= 40000", "canonical": {"objective": [-0.059, -0.071], "constraints": [[1.0, 1.0, 50000.0], [-1.0, 4.0, 0.0], [1.0, 0.0, 40000.0]]}, "solution": {"x": 40000, "y": 10000}, "pseudo_model": "\nDecision Variables:\n- Amount invested in renewable energy: RenewableEnergy\n- Amount invested in education: Education\n\nConstraints:\n- Total investment should not exceed $50000:\n  RenewableEnergy + Education <= 50000\n- The amount invested in renewable energy should be at least four times as much as the amount invested in education:\n  RenewableEnergy >= 4 * Education\n- The money invested in renewable energy must be at most $40000:\n  RenewableEnergy <= 40000\n\nObjective:\n- Maximize profit (5.9% from renewable energy, 7.1% from education):\n  0.059 * RenewableEnergy + 0.071 * Education\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRenewableEnergy = intvar(0, 999999999)  # Amount invested in renewable energy\nEducation = intvar(0, 999999999)  # Amount invested in education\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $50000:\nm += RenewableEnergy + Education <= 50000\n# The amount invested in renewable energy should be at least four times as much as the amount invested in education:\nm += RenewableEnergy >= 4 * Education\n# The money invested in renewable energy must be at most $40000:\nm += RenewableEnergy <= 40000\n\n# Objective\n# Maximize profit (5.9% from renewable energy, 7.1% from education):\nm.maximize(0.059 * RenewableEnergy + 0.071 * Education)\n", "entities": [{"start": 30, "end": 46, "word": "renewable energy", "entity_group": "VAR", "score": 0.9999726449845715}, {"start": 51, "end": 60, "word": "education", "entity_group": "VAR", "score": 0.9997810320688731}, {"start": 77, "end": 80, "word": "has", "entity_group": "CONST_DIR", "score": 0.9968682358551096}, {"start": 83, "end": 88, "word": "50000", "entity_group": "LIMIT", "score": 0.9995633021002053}, {"start": 144, "end": 160, "word": "renewable energy", "entity_group": "VAR", "score": 0.9999528037674655}, {"start": 164, "end": 172, "word": "at least", "entity_group": "CONST_DIR", "score": 0.995042832732872}, {"start": 173, "end": 183, "word": "four times", "entity_group": "PARAM", "score": 0.6282657796258073}, {"start": 218, "end": 227, "word": "education", "entity_group": "VAR", "score": 0.9995448216335385}, {"start": 256, "end": 272, "word": "renewable energy", "entity_group": "VAR", "score": 0.999947613247131}, {"start": 281, "end": 288, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9935286972734703}, {"start": 291, "end": 296, "word": "40000", "entity_group": "LIMIT", "score": 0.9995835823530493}, {"start": 317, "end": 333, "word": "renewable energy", "entity_group": "VAR", "score": 0.9999317751240949}, {"start": 334, "end": 338, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9832049871346429}, {"start": 339, "end": 344, "word": "5.9 %", "entity_group": "PARAM", "score": 0.9924205527020088}, {"start": 364, "end": 373, "word": "education", "entity_group": "VAR", "score": 0.9996761098561281}, {"start": 374, "end": 378, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9510759450170866}, {"start": 379, "end": 384, "word": "7.1 %", "entity_group": "PARAM", "score": 0.9767981084574724}, {"start": 428, "end": 436, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990567910074946}, {"start": 437, "end": 443, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9992642823915342}]}
{"doc_id": "2017864484", "document": "You have 40 acres of land on which you grow corn and peas. Each acre of corn requires $50 worth of fertilizer and 60 minutes of time to lay the fertilizer. Each acre of peas requires $60 worth of fertilizer and 90 minutes of time to lay the fertilizer. You have available $4350 to spend on fertilizer and 6000 minutes available to lay the fertilizer. If the profit per acre of corn is $200 and the profit per acre of peas is $250, how many acres of each should be grown to maximize profit?", "order_mapping": {"corn": 0, "peas": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"corn": "200", "peas": "250"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4350", "terms": {"corn": "50", "peas": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "6000", "terms": {"corn": "60", "peas": "90"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of corn\n- y: Acres of peas\n\nObjective:\n- The goal is to maximize the profit. The profit per acre of corn is $200 and the profit per acre of peas is $250. Therefore, the objective function is: Maximize 200x + 250y\n\nConstraints:\n- The total amount available to spend on fertilizer is $4350, so the constraint is: 50x + 60y <= 4350.\n- The total time available to lay the fertilizer is 6000 minutes, leading to the constraint: 60x + 90y <= 6000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 250y\nConstraints:\n50x + 60y <= 4350\n60x + 90y <= 6000", "canonical": {"objective": [-200.0, -250.0], "constraints": [[50.0, 60.0, 4350.0], [60.0, 90.0, 6000.0]]}, "solution": {"x": 39, "y": 40}, "pseudo_model": "\nDecision Variables:\n- Number of acres of corn grown: Corn\n- Number of acres of peas grown: Peas\n\nConstraints:\n- Total acres of land should not exceed 40:\n  Corn + Peas <= 40\n- Fertilizer budget should not exceed $4350:\n  50 * Corn + 60 * Peas <= 4350\n- Time available for laying fertilizer should not exceed 6000 minutes:\n  60 * Corn + 90 * Peas <= 6000\n\nObjective:\n- Maximize profit (200 dollars per acre of corn, 250 dollars per acre of peas):\n  200 * Corn + 250 * Peas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCorn = intvar(0, 40)  # Number of acres of corn grown\nPeas = intvar(0, 40)  # Number of acres of peas grown\n\n# Constraints\nm = Model()\n\n# Total acres of land constraint (corn + peas <= 40 acres):\nm += Corn + Peas <= 40\n# Fertilizer budget constraint (50*corn + 60*peas <= 4350 dollars):\nm += 50 * Corn + 60 * Peas <= 4350\n# Time constraint for laying fertilizer (60*corn + 90*peas <= 6000 minutes):\nm += 60 * Corn + 90 * Peas <= 6000\n\n# Objective\n# Maximize profit (200 dollars per acre of corn, 250 dollars per acre of peas):\nm.maximize(200 * Corn + 250 * Peas)\n\n", "entities": [{"start": 4, "end": 8, "word": "have", "entity_group": "CONST_DIR", "score": 0.9937515962783334}, {"start": 9, "end": 11, "word": "40", "entity_group": "LIMIT", "score": 0.9987153921659697}, {"start": 44, "end": 48, "word": "corn", "entity_group": "VAR", "score": 0.9982168559342975}, {"start": 53, "end": 57, "word": "peas", "entity_group": "VAR", "score": 0.9997602857327577}, {"start": 73, "end": 77, "word": "corn", "entity_group": "VAR", "score": 0.9996626487198939}, {"start": 89, "end": 91, "word": "50", "entity_group": "PARAM", "score": 0.9996234611408997}, {"start": 116, "end": 118, "word": "60", "entity_group": "PARAM", "score": 0.9994868549238911}, {"start": 172, "end": 176, "word": "peas", "entity_group": "VAR", "score": 0.9996545799284549}, {"start": 188, "end": 190, "word": "60", "entity_group": "PARAM", "score": 0.99964196174263}, {"start": 215, "end": 217, "word": "90", "entity_group": "PARAM", "score": 0.9994868549274232}, {"start": 267, "end": 276, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989371911895756}, {"start": 279, "end": 283, "word": "4350", "entity_group": "LIMIT", "score": 0.9991321949155993}, {"start": 311, "end": 315, "word": "6000", "entity_group": "LIMIT", "score": 0.9996450523230035}, {"start": 324, "end": 333, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993407762159816}, {"start": 365, "end": 371, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999102665042018}, {"start": 384, "end": 388, "word": "corn", "entity_group": "VAR", "score": 0.9993061162009697}, {"start": 394, "end": 397, "word": "200", "entity_group": "PARAM", "score": 0.9991381173693265}, {"start": 406, "end": 412, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999377851567839}, {"start": 425, "end": 429, "word": "peas", "entity_group": "VAR", "score": 0.9994301094745145}, {"start": 435, "end": 438, "word": "250", "entity_group": "PARAM", "score": 0.9995941446297246}, {"start": 483, "end": 491, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694930804703}, {"start": 492, "end": 498, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999927485688075}]}
{"doc_id": "-1169971025", "document": "A sauce factory mass produces pasta sauce and barbecue sauce on an assembly line. Each jar of pasta sauce takes 1 minute on the filling machine and 3 minutes on the jarring machine. Each jar of barbecue sauce takes 3 minutes on the filling machine and 4 minutes on the jarring machine. The filling machine is available for 12500 minutes while the jarring machine is available for 20000 minutes. If the profit per jar of pasta sauce is $3 and the profit per jar of barbecue sauce is $5, how many jars of each should be made to maximize profit?", "order_mapping": {"pasta sauce": 0, "barbecue sauce": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pasta sauce": "3", "barbecue sauce": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "12500", "terms": {"pasta sauce": "1", "barbecue sauce": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "20000", "terms": {"pasta sauce": "3", "barbecue sauce": "4"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of jars of pasta sauce\n- y: Number of jars of barbecue sauce\n\nObjective:\n- The factory aims to maximize its profit. The profit per jar of pasta sauce is $3 and the profit per jar of barbecue sauce is $5. Therefore, the objective function is: Maximize 3x + 5y\n\nConstraints:\n- The filling machine is available for 12500 minutes, and each jar of pasta sauce takes 1 minute while each jar of barbecue sauce takes 3 minutes on the filling machine. This leads to the constraint: x + 3y <= 12500.\n- The jarring machine is available for 20000 minutes, and each jar of pasta sauce takes 3 minutes while each jar of barbecue sauce takes 4 minutes on the jarring machine. This results in the constraint: 3x + 4y <= 20000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 5y\nConstraints:\nx + 3y <= 12500\n3x + 4y <= 20000", "canonical": {"objective": [-3.0, -5.0], "constraints": [[1.0, 3.0, 12500.0], [3.0, 4.0, 20000.0]]}, "solution": {"x": 2000, "y": 3500}, "pseudo_model": "\nDecision Variables:\n- Number of jars of pasta sauce produced: PastaSauce\n- Number of jars of barbecue sauce produced: BarbecueSauce\n\nConstraints:\n- Filling machine time constraint (1 minute per jar of pasta sauce, 3 minutes per jar of barbecue sauce, 12500 minutes available):\n  1 * PastaSauce + 3 * BarbecueSauce <= 12500\n- Jarring machine time constraint (3 minutes per jar of pasta sauce, 4 minutes per jar of barbecue sauce, 20000 minutes available):\n  3 * PastaSauce + 4 * BarbecueSauce <= 20000\n\nObjective:\n- Maximize profit (3 dollars per jar of pasta sauce, 5 dollars per jar of barbecue sauce):\n  3 * PastaSauce + 5 * BarbecueSauce\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPastaSauce = intvar(0, 999999999)  # Number of jars of pasta sauce produced\nBarbecueSauce = intvar(0, 999999999)  # Number of jars of barbecue sauce produced\n\n# Constraints\nm = Model()\n\n# Filling machine time constraint (12500 minutes available):\nm += 1 * PastaSauce + 3 * BarbecueSauce <= 12500\n# Jarring machine time constraint (20000 minutes available):\nm += 3 * PastaSauce + 4 * BarbecueSauce <= 20000\n\n# Objective\n# Maximize profit (3 dollars per jar of pasta sauce, 5 dollars per jar of barbecue sauce):\nm.maximize(3 * PastaSauce + 5 * BarbecueSauce)\n", "entities": [{"start": 30, "end": 41, "word": "pasta sauce", "entity_group": "VAR", "score": 0.9999553166329248}, {"start": 46, "end": 60, "word": "barbecue sauce", "entity_group": "VAR", "score": 0.9999857573570162}, {"start": 95, "end": 106, "word": "pasta sauce", "entity_group": "VAR", "score": 0.9999793347872767}, {"start": 113, "end": 114, "word": "1", "entity_group": "PARAM", "score": 0.9990699149327674}, {"start": 149, "end": 150, "word": "3", "entity_group": "PARAM", "score": 0.9997022575327473}, {"start": 196, "end": 210, "word": "barbecue sauce", "entity_group": "VAR", "score": 0.9999819195633552}, {"start": 217, "end": 218, "word": "3", "entity_group": "PARAM", "score": 0.9995208987694721}, {"start": 254, "end": 255, "word": "4", "entity_group": "PARAM", "score": 0.9996845432479902}, {"start": 312, "end": 321, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981085217636031}, {"start": 326, "end": 331, "word": "12500", "entity_group": "LIMIT", "score": 0.9997315678180202}, {"start": 369, "end": 378, "word": "available", "entity_group": "CONST_DIR", "score": 0.9881891878693646}, {"start": 383, "end": 388, "word": "20000", "entity_group": "LIMIT", "score": 0.9996934149005144}, {"start": 406, "end": 412, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999839487579858}, {"start": 424, "end": 435, "word": "pasta sauce", "entity_group": "VAR", "score": 0.999945947681812}, {"start": 441, "end": 442, "word": "3", "entity_group": "PARAM", "score": 0.9994286742569927}, {"start": 451, "end": 457, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999114380219334}, {"start": 469, "end": 483, "word": "barbecue sauce", "entity_group": "VAR", "score": 0.9999425132678289}, {"start": 489, "end": 490, "word": "5", "entity_group": "PARAM", "score": 0.9996320041723119}, {"start": 533, "end": 541, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 542, "end": 548, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}]}
{"doc_id": "1680605469", "document": "A taco restaurant sells burritos and tacos. Each burrito contains 4 units of beef and 4 units of toppings. Each taco contains 4.5 units of beef and 3 units of toppings. The restaurant has 500 units of beef available and 400 units of toppings available. If the profit per burrito is $3 and the profit per taco is $3.50, how many of each should the restaurant sell to maximize profit?", "order_mapping": {"burritos": 0, "tacos": 1, "burrito": 0, "taco": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"burrito": "3", "taco": "3.50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"burrito": "4", "taco": "4.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"burrito": "4", "taco": "3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of burritos sold\n- y: Number of tacos sold\n\nObjective:\n- The restaurant aims to maximize its profit. The profit per burrito is $3 and the profit per taco is $3.50. Therefore, the objective function is: Maximize 3x + 3.50y\n\nConstraints:\n- The restaurant has 500 units of beef available, and each burrito contains 4 units of beef and each taco contains 4.5 units of beef. This leads to the constraint: 4x + 4.5y <= 500.\n- The restaurant has 400 units of toppings available, and each burrito contains 4 units of toppings and each taco contains 3 units of toppings. This results in the constraint: 4x + 3y <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 3x + 3.50y\nConstraints:\n4x + 4.5y <= 500\n4x + 3y <= 400", "canonical": {"objective": [-3.0, -3.5], "constraints": [[4.0, 4.5, 500.0], [4.0, 3.0, 400.0]]}, "solution": {"x": 0, "y": 111}, "pseudo_model": "\nDecision Variables:\n- Number of burritos sold: Burritos\n- Number of tacos sold: Tacos\n\nConstraints:\n- Beef usage should not exceed 500 units (4 units per burrito, 4.5 units per taco):\n  4 * Burritos + 4.5 * Tacos <= 500\n- Toppings usage should not exceed 400 units (4 units per burrito, 3 units per taco):\n  4 * Burritos + 3 * Tacos <= 400\n\nObjective:\n- Maximize profit (3 dollars per burrito, 3.50 dollars per taco):\n  3 * Burritos + 3.5 * Tacos\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurritos = intvar(0, 999999999)  # Number of burritos sold\nTacos = intvar(0, 999999999)  # Number of tacos sold\n\n# Constraints\nm = Model()\n\n# Beef constraint: 4 units per burrito and 4.5 units per taco, with 500 units available\nm += 4 * Burritos + 4.5 * Tacos <= 500\n# Toppings constraint: 4 units per burrito and 3 units per taco, with 400 units available\nm += 4 * Burritos + 3 * Tacos <= 400\n\n# Objective\n# Maximize profit (3 dollars per burrito, 3.50 dollars per taco):\nm.maximize(3 * Burritos + 3.5 * Tacos)\n", "entities": [{"start": 24, "end": 32, "word": "burritos", "entity_group": "VAR", "score": 0.9997995522729329}, {"start": 37, "end": 42, "word": "tacos", "entity_group": "VAR", "score": 0.9997205041850179}, {"start": 50, "end": 57, "word": "burrito", "entity_group": "VAR", "score": 0.9996202651494082}, {"start": 67, "end": 68, "word": "4", "entity_group": "PARAM", "score": 0.9996991183617551}, {"start": 87, "end": 88, "word": "4", "entity_group": "PARAM", "score": 0.999714933701247}, {"start": 114, "end": 118, "word": "taco", "entity_group": "VAR", "score": 0.9996553414995983}, {"start": 128, "end": 131, "word": "4.5", "entity_group": "PARAM", "score": 0.9997037780062467}, {"start": 150, "end": 151, "word": "3", "entity_group": "PARAM", "score": 0.9996564768547063}, {"start": 191, "end": 194, "word": "500", "entity_group": "LIMIT", "score": 0.9997253338646108}, {"start": 209, "end": 218, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988737167496188}, {"start": 223, "end": 226, "word": "400", "entity_group": "LIMIT", "score": 0.9995924698699233}, {"start": 245, "end": 254, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981835923025494}, {"start": 264, "end": 270, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998035453902991}, {"start": 275, "end": 282, "word": "burrito", "entity_group": "VAR", "score": 0.9995073158963667}, {"start": 288, "end": 289, "word": "3", "entity_group": "PARAM", "score": 0.9991341037562173}, {"start": 298, "end": 304, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999868895835913}, {"start": 309, "end": 313, "word": "taco", "entity_group": "VAR", "score": 0.9994113888918063}, {"start": 319, "end": 323, "word": "3.50", "entity_group": "PARAM", "score": 0.999470741823838}, {"start": 373, "end": 381, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995866534726926}, {"start": 382, "end": 388, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277456728164}]}
{"doc_id": "299393763", "document": "Eric wants to sell his inventory of 25 wireless keyboards, 13 wired earbuds, and 19 USB hubs. He decides to offer two combos: Combo X and Combo Y. Combo X brings a profit of $12 and contains 2 wireless keyboards and 2 USB hubs. Combo Y yields a profit of $15 and contains 1 wireless keyboard, 3 wired earbuds, and 1 USB hub. Assuming he can sell all combos, how many of each should he prepare to maximize his profit?", "order_mapping": {"Combo X": 0, "Combo Y.": 1, "Combo Y": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Combo Y": "15", "Combo X": "12"}}, "const_declarations": [{"type": "linear", "direction": "inventory", "limit": "25", "terms": {"Combo X": "2", "Combo Y": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "inventory", "limit": "13", "terms": {"Combo Y": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "inventory", "limit": "19", "terms": {"Combo X": "2", "Combo Y": "1"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Combo X prepared\n- y: Number of Combo Y prepared\n\nObjective:\n- Eric wants to maximize his profit. Combo X brings a profit of $12 and Combo Y yields a profit of $15. Therefore, the objective function is: Maximize 12x + 15y\n\nConstraints:\n- Eric has 25 wireless keyboards, and Combo X contains 2 wireless keyboards, and Combo Y contains 1 wireless keyboard, leading to the constraint: 2x + y <= 25.\n- Eric has 13 wired earbuds, and Combo Y contains 3 wired earbuds, resulting in the constraint: 3y <= 13.\n- Eric has 19 USB hubs, and Combo X contains 2 USB hubs, and Combo Y contains 1 USB hub, leading to the constraint: 2x + y <= 19.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 12x + 15y\nConstraints:\n2x + y <= 25\n3y <= 13\n2x + y <= 19", "canonical": {"objective": [-12.0, -15.0], "constraints": [[2.0, 1.0, 25.0], [0.0, 3.0, 13.0], [2.0, 1.0, 19.0]]}, "solution": {"x": 7, "y": 4}, "pseudo_model": "\nDecision Variables:\n- Number of Combo X prepared: ComboX\n- Number of Combo Y prepared: ComboY\n\nConstraints:\n- Wireless keyboards inventory constraint (25 total):\n  2*ComboX + ComboY <= 25\n- Wired earbuds inventory constraint (13 total):\n  3*ComboY <= 13\n- USB hubs inventory constraint (19 total):\n  2*ComboX + ComboY <= 19\n\nObjective:\n- Maximize profit:\n  12*ComboX + 15*ComboY\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nComboX = intvar(0, 999999999)  # Number of Combo X prepared\nComboY = intvar(0, 999999999)  # Number of Combo Y prepared\n\n# Constraints\nm = Model()\n\n# Inventory constraints\n# Wireless keyboards: 2 per Combo X, 1 per Combo Y, total inventory 25\nm += 2*ComboX + ComboY <= 25\n# Wired earbuds: 3 per Combo Y, total inventory 13\nm += 3*ComboY <= 13\n# USB hubs: 2 per Combo X, 1 per Combo Y, total inventory 19\nm += 2*ComboX + ComboY <= 19\n\n# Objective\n# Maximize profit: $12 per Combo X, $15 per Combo Y\nm.maximize(12*ComboX + 15*ComboY)\n", "entities": [{"start": 23, "end": 32, "word": "inventory", "entity_group": "CONST_DIR", "score": 0.9964208999011475}, {"start": 36, "end": 38, "word": "25", "entity_group": "LIMIT", "score": 0.9995633159493611}, {"start": 60, "end": 62, "word": "13", "entity_group": "LIMIT", "score": 0.9995153879508586}, {"start": 83, "end": 85, "word": "19", "entity_group": "LIMIT", "score": 0.9994486178778081}, {"start": 130, "end": 137, "word": "Combo X", "entity_group": "VAR", "score": 0.9999700606873756}, {"start": 142, "end": 150, "word": "Combo Y.", "entity_group": "VAR", "score": 0.9999838412356381}, {"start": 151, "end": 158, "word": "Combo X", "entity_group": "VAR", "score": 0.9999253269784564}, {"start": 168, "end": 174, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996013443932181}, {"start": 180, "end": 182, "word": "12", "entity_group": "PARAM", "score": 0.999349730614836}, {"start": 196, "end": 197, "word": "2", "entity_group": "PARAM", "score": 0.9996382963837892}, {"start": 221, "end": 222, "word": "2", "entity_group": "PARAM", "score": 0.9996063073861532}, {"start": 234, "end": 241, "word": "Combo Y", "entity_group": "VAR", "score": 0.9999823443514417}, {"start": 251, "end": 257, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999055297813798}, {"start": 263, "end": 265, "word": "15", "entity_group": "PARAM", "score": 0.9995882015709779}, {"start": 279, "end": 280, "word": "1", "entity_group": "PARAM", "score": 0.9995852302827417}, {"start": 301, "end": 302, "word": "3", "entity_group": "PARAM", "score": 0.9995840034746976}, {"start": 323, "end": 324, "word": "1", "entity_group": "PARAM", "score": 0.999577938084503}, {"start": 407, "end": 415, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9984462847573675}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998481381548744}]}
{"doc_id": "1554876939", "document": "The city council has a budget of up to $5500 to invest in infrastructure. They can invest their money in clean water and electricity. Each dollar invested in clean water yields a $1.9 profit. Each dollar invested in electricity yields a $2.3 profit. No less than $1000 must be in clean water and no less than 30% of all money invested must be in electricity. Formulate an LP that can be used to maximize total profit.", "order_mapping": {"clean water": 0, "electricity": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"clean water": "1.9", "electricity": "2.3"}}, "const_declarations": [{"type": "sum", "direction": "budget", "limit": "5500", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "No less than", "limit": "1000", "var": "clean water", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "no less than", "limit": "30%", "var": "electricity", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in clean water\n- y: Dollars invested in electricity\n\nObjective:\n- The city council aims to maximize the total profit. Each dollar invested in clean water yields a $1.9 profit, and each dollar invested in electricity yields a $2.3 profit. Therefore, the objective function is: Maximize 1.9x + 2.3y\n\nConstraints:\n- The city council has a budget of up to $5500 to invest in infrastructure, leading to the constraint: x + y <= 5500.\n- No less than $1000 must be invested in clean water, leading to the constraint: x >= 1000.\n- At least 30% of all money invested must be in electricity, leading to the constraint: y >= 0.3(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.9x + 2.3y\nConstraints:\nx + y <= 5500\nx >= 1000\ny >= 0.3(x + y)", "canonical": {"objective": [-1.9, -2.3], "constraints": [[1.0, 1.0, 5500.0], [-1.0, 0.0, -1000.0], [0.3, -0.7, 0.0]]}, "solution": {"x": 1000, "y": 4500}, "pseudo_model": "\nDecision Variables:\n- Amount invested in clean water: CleanWater\n- Amount invested in electricity: Electricity\n\nConstraints:\n- Total investment should not exceed 5500 dollars:\n  CleanWater + Electricity <= 5500\n- At least 1000 dollars must be invested in clean water:\n  CleanWater >= 1000\n- At least 30% of all money invested must be in electricity:\n  Electricity >= 0.30 * (CleanWater + Electricity)\n\nObjective:\n- Maximize total profit (1.9 dollars profit per dollar invested in clean water, 2.3 dollars profit per dollar invested in electricity):\n  1.9 * CleanWater + 2.3 * Electricity\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCleanWater = intvar(0, 999999999)  # Amount invested in clean water\nElectricity = intvar(0, 999999999)  # Amount invested in electricity\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $5500:\nm += CleanWater + Electricity <= 5500\n# No less than $1000 must be in clean water:\nm += CleanWater >= 1000\n# No less than 30% of all money invested must be in electricity:\nm += Electricity >= 0.30 * (CleanWater + Electricity)\n\n# Objective\n# Maximize total profit (1.9 dollars profit per dollar invested in clean water, 2.3 dollars profit per dollar invested in electricity):\nm.maximize(1.9 * CleanWater + 2.3 * Electricity)\n", "entities": [{"start": 23, "end": 29, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9955607615164213}, {"start": 41, "end": 45, "word": "5500", "entity_group": "LIMIT", "score": 0.9973467708701896}, {"start": 107, "end": 118, "word": "clean water", "entity_group": "VAR", "score": 0.999956323213356}, {"start": 123, "end": 134, "word": "electricity", "entity_group": "VAR", "score": 0.9995558919220247}, {"start": 161, "end": 172, "word": "clean water", "entity_group": "VAR", "score": 0.9999661164654895}, {"start": 184, "end": 187, "word": "1.9", "entity_group": "PARAM", "score": 0.9988276520604917}, {"start": 188, "end": 194, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996450745519044}, {"start": 221, "end": 232, "word": "electricity", "entity_group": "VAR", "score": 0.9997427634966234}, {"start": 244, "end": 247, "word": "2.3", "entity_group": "PARAM", "score": 0.9983515427505333}, {"start": 248, "end": 254, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993114042611129}, {"start": 257, "end": 269, "word": "No less than", "entity_group": "CONST_DIR", "score": 0.9811414268843931}, {"start": 272, "end": 276, "word": "1000", "entity_group": "LIMIT", "score": 0.999518711317304}, {"start": 288, "end": 299, "word": "clean water", "entity_group": "VAR", "score": 0.9999519278850032}, {"start": 304, "end": 316, "word": "no less than", "entity_group": "CONST_DIR", "score": 0.9958530305391111}, {"start": 317, "end": 321, "word": "30 %", "entity_group": "LIMIT", "score": 0.9625440773513751}, {"start": 355, "end": 366, "word": "electricity", "entity_group": "VAR", "score": 0.9997828960874381}, {"start": 405, "end": 413, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9952541573212094}, {"start": 420, "end": 426, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999281575403428}]}
{"doc_id": "467579298", "document": "Autumn Auto wants to promote new types of minivans and supercars that are targeted at baby boomers and millennials. To market these products, Autumn Auto has launched a boisterous ads campaign and has decided to purchase TV commercial spots on two channels: (1) global news and (2) talent shows. Each talent show ad is seen by 5 million baby boomers and 20 million millennials and costs $80,000. Each global news commercial is watched by 13 million baby boomers and 7 million millennials, and costs $30,000. Autumn Auto would like to reach at least 50 million baby boomers and 30 million millennials. Determine how Autumn Auto can meet its advertising requirements at minimum cost.", "order_mapping": {"global news": 0, "talent shows": 1, "talent show": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"talent show": "80,000", "global news": "30,000"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "50", "terms": {"talent show": "5", "global news": "13"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"talent show": "20", "global news": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of TV commercial spots on global news\n- y: Number of TV commercial spots on talent shows\n\nObjective:\n- Autumn Auto wants to minimize its advertising costs. Each talent show ad costs $80,000 and each global news commercial costs $30,000. Therefore, the objective function is: Minimize 80000y + 30000x\n\nConstraints:\n- Autumn Auto wants to reach at least 50 million baby boomers, which can be represented as: 5y + 13x >= 50\n- Autumn Auto wants to reach at least 30 million millennials, which can be represented as: 20y + 7x >= 30\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 80000y + 30000x\nConstraints:\n5y + 13x >= 50\n20y + 7x >= 30", "canonical": {"objective": [30000.0, 80000.0], "constraints": [[-13.0, -5.0, -50.0], [-7.0, -20.0, -30.0]]}, "solution": {"x": 5, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of talent show commercial spots purchased: TalentShowAds\n- Number of global news commercial spots purchased: GlobalNewsAds\n\nConstraints:\n- To reach at least 50 million baby boomers:\n  5 * TalentShowAds + 13 * GlobalNewsAds >= 50\n- To reach at least 30 million millennials:\n  20 * TalentShowAds + 7 * GlobalNewsAds >= 30\n\nObjective:\n- Minimize cost (80,000 dollars per talent show ad, 30,000 dollars per global news ad):\n  80000 * TalentShowAds + 30000 * GlobalNewsAds\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTalentShowAds = intvar(0, 999999999)  # Number of talent show commercial spots purchased\nGlobalNewsAds = intvar(0, 999999999)  # Number of global news commercial spots purchased\n\n# Constraints\nm = Model()\n\n# To reach at least 50 million baby boomers:\nm += 5 * TalentShowAds + 13 * GlobalNewsAds >= 50\n# To reach at least 30 million millennials:\nm += 20 * TalentShowAds + 7 * GlobalNewsAds >= 30\n\n# Objective\n# Minimize cost ($80,000 per talent show ad, $30,000 per global news ad):\nm.minimize(80000 * TalentShowAds + 30000 * GlobalNewsAds)\n", "entities": [{"start": 267, "end": 278, "word": "global news", "entity_group": "VAR", "score": 0.999973299042293}, {"start": 289, "end": 301, "word": "talent shows", "entity_group": "VAR", "score": 0.9999831783738209}, {"start": 309, "end": 320, "word": "talent show", "entity_group": "VAR", "score": 0.9999412777533467}, {"start": 335, "end": 336, "word": "5", "entity_group": "PARAM", "score": 0.9992647366321566}, {"start": 362, "end": 364, "word": "20", "entity_group": "PARAM", "score": 0.999715557937159}, {"start": 389, "end": 394, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9997307916139194}, {"start": 397, "end": 403, "word": "80,000", "entity_group": "PARAM", "score": 0.9996578199966412}, {"start": 411, "end": 422, "word": "global news", "entity_group": "VAR", "score": 0.9999731827064157}, {"start": 448, "end": 450, "word": "13", "entity_group": "PARAM", "score": 0.9996126419606486}, {"start": 476, "end": 477, "word": "7", "entity_group": "PARAM", "score": 0.9996778733483315}, {"start": 504, "end": 509, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995242622460045}, {"start": 512, "end": 518, "word": "30,000", "entity_group": "PARAM", "score": 0.9997200851137645}, {"start": 553, "end": 561, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988987158175666}, {"start": 562, "end": 564, "word": "50", "entity_group": "LIMIT", "score": 0.9992943816840584}, {"start": 590, "end": 592, "word": "30", "entity_group": "LIMIT", "score": 0.9995735768070592}, {"start": 682, "end": 689, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9883507038240802}, {"start": 690, "end": 694, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986507064196253}]}
{"doc_id": "1434993476", "document": "A movie theatre can hold at most 250 people and has both zero gravity and standard seats. A profit of $55 is made on each zero gravity seat and a profit of $25 is made on each standard seat. The arena reserves a minimum of 40 seats to be zero gravity seats. However, since zero gravity seats are expensive, at least 4 times as many people prefer to sit in standard seats than zero gravity seats. How many of each type of seat must be sold in order to maximize profit?", "order_mapping": {"zero gravity": 0, "standard seats": 1, "zero gravity seat": 0, "standard seat": 1, "zero gravity seats": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"zero gravity seat": "55", "standard seat": "25"}}, "const_declarations": [{"type": "lowerbound", "direction": "minimum", "limit": "40", "var": "zero gravity seats", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "250", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "standard seats", "direction": "at least", "param": "4 times", "y_var": "zero gravity seats", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of zero gravity seats\n- y: Number of standard seats\n\nObjective:\n- The movie theatre aims to maximize its profit. A profit of $55 is made on each zero gravity seat and a profit of $25 is made on each standard seat. Therefore, the objective function is: Maximize 55x + 25y\n\nConstraints:\n- The theatre can hold at most 250 people, so the constraint is: x + y <= 250.\n- A minimum of 40 seats are reserved to be zero gravity seats, leading to the constraint: x >= 40.\n- At least 4 times as many people prefer to sit in standard seats than zero gravity seats, resulting in the constraint: y >= 4x.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 55x + 25y\nConstraints:\nx + y <= 250\nx >= 40\ny >= 4x", "canonical": {"objective": [-55.0, -25.0], "constraints": [[1.0, 1.0, 250.0], [-1.0, 0.0, -40.0], [4.0, -1.0, 0.0]]}, "solution": {"x": 50, "y": 200}, "pseudo_model": "\nDecision Variables:\n- Number of zero gravity seats sold: ZeroGravitySeats\n- Number of standard seats sold: StandardSeats\n\nConstraints:\n- The total number of seats sold (zero gravity + standard) should not exceed 250:\n  ZeroGravitySeats + StandardSeats <= 250\n- A minimum of 40 zero gravity seats must be sold:\n  ZeroGravitySeats >= 40\n- At least 4 times as many standard seats as zero gravity seats must be sold:\n  StandardSeats >= 4 * ZeroGravitySeats\n\nObjective:\n- Maximize profit ($55 profit per zero gravity seat, $25 profit per standard seat):\n  55 * ZeroGravitySeats + 25 * StandardSeats\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nZeroGravitySeats = intvar(0, 999999999)  # Number of zero gravity seats sold\nStandardSeats = intvar(0, 999999999)  # Number of standard seats sold\n\n# Constraints\nm = Model()\n\n# The theatre can hold at most 250 people:\nm += ZeroGravitySeats + StandardSeats <= 250\n# A minimum of 40 seats must be zero gravity seats:\nm += ZeroGravitySeats >= 40\n# At least 4 times as many people prefer to sit in standard seats than zero gravity seats:\nm += StandardSeats >= 4 * ZeroGravitySeats\n\n# Objective\n# Maximize profit ($55 profit per zero gravity seat, $25 profit per standard seat):\nm.maximize(55 * ZeroGravitySeats + 25 * StandardSeats)\n", "entities": [{"start": 25, "end": 32, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987503288672701}, {"start": 33, "end": 36, "word": "250", "entity_group": "LIMIT", "score": 0.9991592346332752}, {"start": 57, "end": 69, "word": "zero gravity", "entity_group": "VAR", "score": 0.9999200719358087}, {"start": 74, "end": 88, "word": "standard seats", "entity_group": "VAR", "score": 0.9999736626031137}, {"start": 93, "end": 99, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999732332429327}, {"start": 105, "end": 107, "word": "55", "entity_group": "PARAM", "score": 0.9995770205705051}, {"start": 124, "end": 141, "word": "zero gravity seat", "entity_group": "VAR", "score": 0.9957131523983773}, {"start": 148, "end": 154, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999960679254169}, {"start": 160, "end": 162, "word": "25", "entity_group": "PARAM", "score": 0.9994286991154772}, {"start": 179, "end": 192, "word": "standard seat", "entity_group": "VAR", "score": 0.9999642877940406}, {"start": 216, "end": 223, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9955842381122431}, {"start": 227, "end": 229, "word": "40", "entity_group": "LIMIT", "score": 0.999742468086173}, {"start": 242, "end": 260, "word": "zero gravity seats", "entity_group": "VAR", "score": 0.9982715008703988}, {"start": 279, "end": 297, "word": "zero gravity seats", "entity_group": "VAR", "score": 0.9984842926000348}, {"start": 314, "end": 322, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978559171871634}, {"start": 323, "end": 330, "word": "4 times", "entity_group": "PARAM", "score": 0.949723453654253}, {"start": 363, "end": 377, "word": "standard seats", "entity_group": "VAR", "score": 0.9998820302385506}, {"start": 383, "end": 401, "word": "zero gravity seats", "entity_group": "VAR", "score": 0.9980760417002252}, {"start": 459, "end": 467, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852252863357}, {"start": 468, "end": 474, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996414912468631}]}
{"doc_id": "603860984", "document": "Miles has up to $10000 to invest in the floral and healthcare industries. After talking to his friends, he has decided that at least 25% of all the money invested must be in the floral industry and that at least $2000 must be invested in the healthcare industry. Each dollar invested in the floral industry yields a $1.3 profit while each dollar invested in the healthcare industry yields a $1.5 profit. Formulate an LP to maximize Miles's investment.", "order_mapping": {"floral": 0, "healthcare industries": 1, "floral industry": 0, "healthcare industry": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "investment", "terms": {"floral industry": "1.3", "healthcare industry": "1.5"}}, "const_declarations": [{"type": "sum", "direction": "up to", "limit": "10000", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "25%", "var": "floral industry", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2000", "var": "healthcare industry", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Dollars invested in the floral industry\n- y: Dollars invested in the healthcare industry\n\nObjective:\n- Miles aims to maximize his investment. Each dollar invested in the floral industry yields a $1.3 profit, and each dollar invested in the healthcare industry yields a $1.5 profit. Therefore, the objective function is: Maximize 1.3x + 1.5y\n\nConstraints:\n- Miles can invest up to $10000 in total, so the constraint is: x + y <= 10000.\n- At least 25% of all money invested must be in the floral industry, leading to the constraint: x >= 0.25(x + y).\n- At least $2000 must be invested in the healthcare industry, leading to the constraint: y >= 2000.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 1.3x + 1.5y\nConstraints:\nx + y <= 10000\nx >= 0.25(x + y)\ny >= 2000", "canonical": {"objective": [-1.3, -1.5], "constraints": [[1.0, 1.0, 10000.0], [-0.75, 0.25, 0.0], [0.0, -1.0, -2000.0]]}, "solution": {"x": 2500, "y": 7500}, "pseudo_model": "\nDecision Variables:\n- Amount invested in the floral industry: Floral\n- Amount invested in the healthcare industry: Healthcare\n\nConstraints:\n- Total investment should not exceed 10000 dollars:\n  Floral + Healthcare <= 10000\n- At least 25% of all the money invested must be in the floral industry:\n  Floral >= 0.25 * (Floral + Healthcare)\n- At least 2000 dollars must be invested in the healthcare industry:\n  Healthcare >= 2000\n\nObjective:\n- Maximize investment profit (1.3 profit per dollar in the floral industry, 1.5 profit per dollar in the healthcare industry):\n  1.3 * Floral + 1.5 * Healthcare\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFloral = intvar(0, 999999999)  # Amount invested in the floral industry\nHealthcare = intvar(0, 999999999)  # Amount invested in the healthcare industry\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $10000:\nm += Floral + Healthcare <= 10000\n# At least 25% of all the money invested must be in the floral industry:\nm += Floral >= 0.25 * (Floral + Healthcare)\n# At least $2000 must be invested in the healthcare industry:\nm += Healthcare >= 2000\n\n# Objective\n# Maximize investment profit (1.3 profit per dollar in the floral industry, 1.5 profit per dollar in the healthcare industry):\nm.maximize(1.3 * Floral + 1.5 * Healthcare)\n", "entities": [{"start": 10, "end": 15, "word": "up to", "entity_group": "CONST_DIR", "score": 0.9818636149740726}, {"start": 18, "end": 23, "word": "10000", "entity_group": "LIMIT", "score": 0.9982316486898901}, {"start": 41, "end": 47, "word": "floral", "entity_group": "VAR", "score": 0.9994926665211328}, {"start": 52, "end": 73, "word": "healthcare industries", "entity_group": "VAR", "score": 0.999841565840092}, {"start": 127, "end": 135, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989653094376669}, {"start": 136, "end": 140, "word": "25 %", "entity_group": "LIMIT", "score": 0.7239111511367596}, {"start": 182, "end": 197, "word": "floral industry", "entity_group": "VAR", "score": 0.9998707721827852}, {"start": 207, "end": 215, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9968616638806248}, {"start": 218, "end": 222, "word": "2000", "entity_group": "LIMIT", "score": 0.9994082294015424}, {"start": 247, "end": 266, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9998603027959285}, {"start": 297, "end": 312, "word": "floral industry", "entity_group": "VAR", "score": 0.9999276567446755}, {"start": 324, "end": 327, "word": "1.3", "entity_group": "PARAM", "score": 0.9992224482219955}, {"start": 328, "end": 334, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.997654099611264}, {"start": 369, "end": 388, "word": "healthcare industry", "entity_group": "VAR", "score": 0.9999395049057214}, {"start": 400, "end": 403, "word": "1.5", "entity_group": "PARAM", "score": 0.9986433246399196}, {"start": 404, "end": 410, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9979393125929029}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994958845194107}, {"start": 450, "end": 460, "word": "investment", "entity_group": "OBJ_NAME", "score": 0.9982778233117288}]}
{"doc_id": "-316516118", "document": "Kevin needs vitamins to supplement his diet. He needs to get at least 25 units of vitamin A and 40 units of vitamin B everyday. In order to do so, he can buy capsules named Special Formula and One Daily. Each capsule of Special Formula contains 4 units of vitamin A and 5 units of vitamin B. Each capsule of One Daily contains 3 units of vitamin A and 7 units of vitamin B. If the cost per Special Formula capsule is $0.50 and the cost per One Daily capsule is $0.20, how many of each should he buy to minimize his cost?", "order_mapping": {"Special Formula": 0, "One Daily": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Special Formula": "0.50", "One Daily": "0.20"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "25", "terms": {"Special Formula": "4", "One Daily": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "40", "terms": {"Special Formula": "5", "One Daily": "7"}, "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of Special Formula capsules\n- y: Number of One Daily capsules\n\nObjective:\n- Kevin wants to minimize his cost. The cost per Special Formula capsule is $0.50 and the cost per One Daily capsule is $0.20. Therefore, the objective function is: Minimize 0.50x + 0.20y\n\nConstraints:\n- Kevin needs to get at least 25 units of vitamin A daily, which can be represented as: 4x + 3y >= 25.\n- Kevin needs to get at least 40 units of vitamin B daily, which can be represented as: 5x + 7y >= 40.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMinimize: 0.50x + 0.20y\nConstraints:\n4x + 3y >= 25\n5x + 7y >= 40", "canonical": {"objective": [0.5, 0.2], "constraints": [[-4.0, -3.0, -25.0], [-5.0, -7.0, -40.0]]}, "solution": {"x": 0, "y": 9}, "pseudo_model": "\nDecision Variables:\n- Number of Special Formula capsules bought: SpecialFormula\n- Number of One Daily capsules bought: OneDaily\n\nConstraints:\n- To meet the vitamin A requirement (at least 25 units):\n  4 * SpecialFormula + 3 * OneDaily >= 25\n- To meet the vitamin B requirement (at least 40 units):\n  5 * SpecialFormula + 7 * OneDaily >= 40\n\nObjective:\n- Minimize cost ($0.50 per Special Formula capsule, $0.20 per One Daily capsule):\n  0.50 * SpecialFormula + 0.20 * OneDaily\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSpecialFormula = intvar(0, 999999999)  # Number of Special Formula capsules\nOneDaily = intvar(0, 999999999)  # Number of One Daily capsules\n\n# Constraints\nm = Model()\n\n# Kevin needs at least 25 units of vitamin A:\nm += 4 * SpecialFormula + 3 * OneDaily >= 25\n# Kevin needs at least 40 units of vitamin B:\nm += 5 * SpecialFormula + 7 * OneDaily >= 40\n\n# Objective\n# Minimize cost ($0.50 per Special Formula capsule, $0.20 per One Daily capsule):\nm.minimize(0.50 * SpecialFormula + 0.20 * OneDaily)\n", "entities": [{"start": 62, "end": 70, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991745505562425}, {"start": 71, "end": 73, "word": "25", "entity_group": "LIMIT", "score": 0.999651587495543}, {"start": 97, "end": 99, "word": "40", "entity_group": "LIMIT", "score": 0.9996535420556607}, {"start": 176, "end": 191, "word": "Special Formula", "entity_group": "VAR", "score": 0.9999732368594378}, {"start": 196, "end": 205, "word": "One Daily", "entity_group": "VAR", "score": 0.9999822770167952}, {"start": 224, "end": 239, "word": "Special Formula", "entity_group": "VAR", "score": 0.999972297496189}, {"start": 249, "end": 250, "word": "4", "entity_group": "PARAM", "score": 0.9996866018534957}, {"start": 274, "end": 275, "word": "5", "entity_group": "PARAM", "score": 0.9996268430493035}, {"start": 312, "end": 321, "word": "One Daily", "entity_group": "VAR", "score": 0.9999718980710177}, {"start": 331, "end": 332, "word": "3", "entity_group": "PARAM", "score": 0.9996865401251461}, {"start": 356, "end": 357, "word": "7", "entity_group": "PARAM", "score": 0.9994639573209303}, {"start": 385, "end": 389, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9988429072146335}, {"start": 394, "end": 409, "word": "Special Formula", "entity_group": "VAR", "score": 0.9999730887192679}, {"start": 423, "end": 427, "word": "0.50", "entity_group": "PARAM", "score": 0.9992630577558206}, {"start": 436, "end": 440, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989744081308904}, {"start": 445, "end": 454, "word": "One Daily", "entity_group": "VAR", "score": 0.9999827468560252}, {"start": 468, "end": 472, "word": "0.20", "entity_group": "PARAM", "score": 0.9995702470291009}, {"start": 509, "end": 517, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9994779644836214}, {"start": 522, "end": 526, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987566476512164}]}
{"doc_id": "999284804", "document": "A tropical farmer has available 200 acres of land to grow pineapples and bananas. He likes bananas, but because they require so much more work, he can grow at most 4 times the amount of bananas as pineapples. In addition he must grow at least 40 acres of pineapples and at least 60 acres of bananas. If the profit per acre of pineapples is $200 and the profit per acres of bananas is $150, how many acre of each should he grow to maximize profit?", "order_mapping": {"pineapples": 0, "bananas": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"pineapples": "200", "bananas": "150"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "bananas", "direction": "at most", "param": "4 times", "y_var": "pineapples", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "pineapples", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "bananas", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land used to grow pineapples\n- y: Acres of land used to grow bananas\n\nObjective:\n- The farmer aims to maximize his profit. The profit per acre of pineapples is $200 and the profit per acre of bananas is $150. Therefore, the objective function is: Maximize 200x + 150y\n\nConstraints:\n- The farmer has 200 acres of land available, so the constraint is: x + y <= 200.\n- The farmer can grow at most 4 times the amount of bananas as pineapples, leading to the constraint: y <= 4x.\n- The farmer must grow at least 40 acres of pineapples, resulting in the constraint: x >= 40.\n- The farmer must grow at least 60 acres of bananas, leading to the constraint: y >= 60.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 200x + 150y\nConstraints:\nx + y <= 200\ny <= 4x\nx >= 40\ny >= 60", "canonical": {"objective": [-200.0, -150.0], "constraints": [[1.0, 1.0, 200.0], [-4.0, 1.0, 0.0], [-1.0, 0.0, -40.0], [0.0, -1.0, -60.0]]}, "solution": {"x": 140, "y": 60}, "pseudo_model": "\nDecision Variables:\n- Acres of pineapples grown: Pineapples\n- Acres of bananas grown: Bananas\n\nConstraints:\n- Total acres used should not exceed 200:\n  Pineapples + Bananas <= 200\n- At most 4 times the amount of bananas as pineapples:\n  Bananas <= 4 * Pineapples\n- At least 40 acres of pineapples:\n  Pineapples >= 40\n- At least 60 acres of bananas:\n  Bananas >= 60\n\nObjective:\n- Maximize profit (200 dollars per acre of pineapples, 150 dollars per acre of bananas):\n  200 * Pineapples + 150 * Bananas\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPineapples = intvar(0, 999999999)  # Acres of pineapples\nBananas = intvar(0, 999999999)  # Acres of bananas\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 200:\nm += Pineapples + Bananas <= 200\n# He can grow at most 4 times the amount of bananas as pineapples:\nm += Bananas <= 4 * Pineapples\n# He must grow at least 40 acres of pineapples:\nm += Pineapples >= 40\n# He must grow at least 60 acres of bananas:\nm += Bananas >= 60\n\n# Objective\n# Maximize profit (200 dollars per acre of pineapples, 150 dollars per acre of bananas):\nm.maximize(200 * Pineapples + 150 * Bananas)\n", "entities": [{"start": 22, "end": 31, "word": "available", "entity_group": "CONST_DIR", "score": 0.997596466269473}, {"start": 32, "end": 35, "word": "200", "entity_group": "LIMIT", "score": 0.9991396634560027}, {"start": 58, "end": 68, "word": "pineapples", "entity_group": "VAR", "score": 0.9981984125738721}, {"start": 73, "end": 80, "word": "bananas", "entity_group": "VAR", "score": 0.9995442632986984}, {"start": 92, "end": 99, "word": "bananas", "entity_group": "VAR", "score": 0.9996891027151465}, {"start": 159, "end": 166, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981344135873793}, {"start": 167, "end": 174, "word": "4 times", "entity_group": "PARAM", "score": 0.9358416155242328}, {"start": 189, "end": 196, "word": "bananas", "entity_group": "VAR", "score": 0.9996609825620124}, {"start": 200, "end": 210, "word": "pineapples", "entity_group": "VAR", "score": 0.9996634502137073}, {"start": 238, "end": 246, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989403416543096}, {"start": 247, "end": 249, "word": "40", "entity_group": "LIMIT", "score": 0.9997636072414622}, {"start": 259, "end": 269, "word": "pineapples", "entity_group": "VAR", "score": 0.9990143420853553}, {"start": 274, "end": 282, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992497908548512}, {"start": 283, "end": 285, "word": "60", "entity_group": "LIMIT", "score": 0.9997469951033067}, {"start": 295, "end": 302, "word": "bananas", "entity_group": "VAR", "score": 0.9997342274600816}, {"start": 312, "end": 318, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998598080882813}, {"start": 331, "end": 341, "word": "pineapples", "entity_group": "VAR", "score": 0.9994481868666367}, {"start": 347, "end": 350, "word": "200", "entity_group": "PARAM", "score": 0.9987477731490861}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999266010809023}, {"start": 379, "end": 386, "word": "bananas", "entity_group": "VAR", "score": 0.9994451028640496}, {"start": 392, "end": 395, "word": "150", "entity_group": "PARAM", "score": 0.9996884243465946}, {"start": 438, "end": 446, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999795134020166}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274917015077}]}
{"doc_id": "2120590914", "document": "Nolan has to allocate his farming equipment between his two farms, a pumpkin farm and a potato farm. The revenue per acre of pumpkins is $150 and the revenue per acre of potatoes is $200. He has one tractor, one plow, and one combine. Each equipment can be used for 12 hours a day divided in any way between his two farms. On his pumpkin farm, harvesting an acre of pumpkins requires 0.5 hours on the tractor, 0.6 hours on the plow, and 0.4 hours on the combine. On his potato farm, harvesting an acre of potatoes requires 0.9 hours on the tractor, 0.5 hours on the plow, and 0.3 hours on the combine. How should Nolan allocate his equipment between his farms to maximize his revenue?", "order_mapping": {"pumpkin farm": 0, "potato farm": 1, "pumpkins": 0, "potatoes": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"pumpkins": "150", "potatoes": "200"}}, "const_declarations": [{"type": "linear", "direction": "can be used for", "limit": "12", "terms": {"pumpkins": "0.5", "potatoes": "0.9"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "can be used for", "limit": "12", "terms": {"pumpkins": "0.6", "potatoes": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "can be used for", "limit": "12", "terms": {"pumpkins": "0.4", "potatoes": "0.3"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Acres of land for pumpkins\n- y: Acres of land for potatoes\n\nObjective:\n- Nolan wants to maximize his revenue. The revenue per acre of pumpkins is $150 and the revenue per acre of potatoes is $200. Therefore, the objective function is: Maximize 150x + 200y\n\nConstraints:\n- Nolan has one tractor that can be used for 12 hours a day. Harvesting an acre of pumpkins requires 0.5 hours on the tractor, and harvesting an acre of potatoes requires 0.9 hours on the tractor. This leads to the constraint: 0.5x + 0.9y <= 12\n- Nolan has one plow that can be used for 12 hours a day. Harvesting an acre of pumpkins requires 0.6 hours on the plow, and harvesting an acre of potatoes requires 0.5 hours on the plow. This leads to the constraint: 0.6x + 0.5y <= 12\n- Nolan has one combine that can be used for 12 hours a day. Harvesting an acre of pumpkins requires 0.4 hours on the combine, and harvesting an acre of potatoes requires 0.3 hours on the combine. This leads to the constraint: 0.4x + 0.3y <= 12\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 150x + 200y\nConstraints:\n0.5x + 0.9y <= 12\n0.6x + 0.5y <= 12\n0.4x + 0.3y <= 12", "canonical": {"objective": [-150.0, -200.0], "constraints": [[0.5, 0.9, 12.0], [0.6, 0.5, 12.0], [0.4, 0.3, 12.0]]}, "solution": {"x": 15, "y": 5}, "pseudo_model": "\nDecision Variables:\n- Acres of pumpkins harvested: Pumpkins\n- Acres of potatoes harvested: Potatoes\n\nConstraints:\n- Tractor usage for both farms should not exceed 12 hours a day:\n  0.5 * Pumpkins + 0.9 * Potatoes <= 12\n- Plow usage for both farms should not exceed 12 hours a day:\n  0.6 * Pumpkins + 0.5 * Potatoes <= 12\n- Combine usage for both farms should not exceed 12 hours a day:\n  0.4 * Pumpkins + 0.3 * Potatoes <= 12\n\nObjective:\n- Maximize revenue (150 dollars per acre of pumpkins, 200 dollars per acre of potatoes):\n  150 * Pumpkins + 200 * Potatoes\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPumpkins = intvar(0, 999999999)  # Acres of pumpkins harvested\nPotatoes = intvar(0, 999999999)  # Acres of potatoes harvested\n\n# Constraints\nm = Model()\n\n# Equipment usage constraints (each equipment can be used for 12 hours a day)\n# Tractor: 0.5 hours for pumpkins, 0.9 hours for potatoes\nm += 0.5 * Pumpkins + 0.9 * Potatoes <= 12\n# Plow: 0.6 hours for pumpkins, 0.5 hours for potatoes\nm += 0.6 * Pumpkins + 0.5 * Potatoes <= 12\n# Combine: 0.4 hours for pumpkins, 0.3 hours for potatoes\nm += 0.4 * Pumpkins + 0.3 * Potatoes <= 12\n\n# Objective\n# Maximize revenue ($150 per acre of pumpkins, $200 per acre of potatoes)\nm.maximize(150 * Pumpkins + 200 * Potatoes)\n", "entities": [{"start": 70, "end": 82, "word": "pumpkin farm", "entity_group": "VAR", "score": 0.9999603292384696}, {"start": 89, "end": 100, "word": "potato farm", "entity_group": "VAR", "score": 0.9999198999420784}, {"start": 107, "end": 114, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9996162729061367}, {"start": 127, "end": 135, "word": "pumpkins", "entity_group": "VAR", "score": 0.9991215747912839}, {"start": 141, "end": 144, "word": "150", "entity_group": "PARAM", "score": 0.9990144797888505}, {"start": 153, "end": 160, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9988359129444189}, {"start": 173, "end": 181, "word": "potatoes", "entity_group": "VAR", "score": 0.998615086170383}, {"start": 187, "end": 190, "word": "200", "entity_group": "PARAM", "score": 0.9995209448567621}, {"start": 258, "end": 273, "word": "can be used for", "entity_group": "CONST_DIR", "score": 0.975688186589421}, {"start": 274, "end": 276, "word": "12", "entity_group": "LIMIT", "score": 0.9997100881685375}, {"start": 339, "end": 351, "word": "pumpkin farm", "entity_group": "VAR", "score": 0.9999750643515443}, {"start": 376, "end": 384, "word": "pumpkins", "entity_group": "VAR", "score": 0.9996718294929663}, {"start": 394, "end": 397, "word": "0.5", "entity_group": "PARAM", "score": 0.9996711419820521}, {"start": 421, "end": 424, "word": "0.6", "entity_group": "PARAM", "score": 0.9996508809043761}, {"start": 449, "end": 452, "word": "0.4", "entity_group": "PARAM", "score": 0.9995674728400769}, {"start": 483, "end": 494, "word": "potato farm", "entity_group": "VAR", "score": 0.9999717425509447}, {"start": 519, "end": 527, "word": "potatoes", "entity_group": "VAR", "score": 0.9995932823396805}, {"start": 537, "end": 540, "word": "0.9", "entity_group": "PARAM", "score": 0.9996687406712905}, {"start": 564, "end": 567, "word": "0.5", "entity_group": "PARAM", "score": 0.999650880805377}, {"start": 592, "end": 595, "word": "0.3", "entity_group": "PARAM", "score": 0.999659665584989}, {"start": 680, "end": 688, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991111021338861}, {"start": 693, "end": 700, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9992202052923056}]}
{"doc_id": "72416232", "document": "A museum gift shop sells gifts in two packages. Package 1 contains 5 souvenirs and 10 snacks. Package 2 contains 4 souvenirs and 15 snacks. The museum has 1000 souvenirs and 1400 snacks. If the profit per package 1 is $10 and the profit per package 2 is $12, how many of each package should they sell to maximize profit?", "order_mapping": {"Package 1": 0, "Package 2": 1, "package 1": 0, "package 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"package 2": "12", "package 1": "10"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"Package 1": "5", "Package 2": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "1400", "terms": {"Package 1": "10", "Package 2": "15"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of package 1 sold\n- y: Number of package 2 sold\n\nObjective:\n- The museum aims to maximize its profit. The profit per package 1 is $10 and the profit per package 2 is $12. Therefore, the objective function is: Maximize 10x + 12y\n\nConstraints:\n- The museum has 1000 souvenirs, and each package 1 contains 5 souvenirs and each package 2 contains 4 souvenirs. This leads to the constraint: 5x + 4y <= 1000.\n- The museum has 1400 snacks, and each package 1 contains 10 snacks and each package 2 contains 15 snacks. This results in the constraint: 10x + 15y <= 1400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 10x + 12y\nConstraints:\n5x + 4y <= 1000\n10x + 15y <= 1400", "canonical": {"objective": [-10.0, -12.0], "constraints": [[5.0, 4.0, 1000.0], [10.0, 15.0, 1400.0]]}, "solution": {"x": 140, "y": 0}, "pseudo_model": "\nDecision Variables:\n- Number of Package 1 sold: Package1\n- Number of Package 2 sold: Package2\n\nConstraints:\n- Total souvenirs used in packages should not exceed 1000:\n  5 * Package1 + 4 * Package2 <= 1000\n- Total snacks used in packages should not exceed 1400:\n  10 * Package1 + 15 * Package2 <= 1400\n\nObjective:\n- Maximize profit ($10 per Package 1, $12 per Package 2):\n  10 * Package1 + 12 * Package2\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPackage1 = intvar(0, 999999999)  # Number of Package 1 sold\nPackage2 = intvar(0, 999999999)  # Number of Package 2 sold\n\n# Constraints\nm = Model()\n\n# The museum has 1000 souvenirs:\nm += 5 * Package1 + 4 * Package2 <= 1000\n# The museum has 1400 snacks:\nm += 10 * Package1 + 15 * Package2 <= 1400\n\n# Objective\n# Maximize profit ($10 per Package 1, $12 per Package 2):\nm.maximize(10 * Package1 + 12 * Package2)\n", "entities": [{"start": 49, "end": 58, "word": "Package 1", "entity_group": "VAR", "score": 0.9998570710246639}, {"start": 68, "end": 69, "word": "5", "entity_group": "PARAM", "score": 0.9995943071370055}, {"start": 84, "end": 86, "word": "10", "entity_group": "PARAM", "score": 0.9997118665779791}, {"start": 96, "end": 105, "word": "Package 2", "entity_group": "VAR", "score": 0.999852083196884}, {"start": 115, "end": 116, "word": "4", "entity_group": "PARAM", "score": 0.9993338561201147}, {"start": 131, "end": 133, "word": "15", "entity_group": "PARAM", "score": 0.999734353577635}, {"start": 154, "end": 157, "word": "has", "entity_group": "CONST_DIR", "score": 0.9977527423211903}, {"start": 158, "end": 162, "word": "1000", "entity_group": "LIMIT", "score": 0.9987641160948472}, {"start": 177, "end": 181, "word": "1400", "entity_group": "LIMIT", "score": 0.9995965293502816}, {"start": 198, "end": 204, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998996109912586}, {"start": 209, "end": 218, "word": "package 1", "entity_group": "VAR", "score": 0.9997673601908285}, {"start": 224, "end": 226, "word": "10", "entity_group": "PARAM", "score": 0.9996676608275432}, {"start": 235, "end": 241, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998979079291392}, {"start": 246, "end": 255, "word": "package 2", "entity_group": "VAR", "score": 0.9997599750093855}, {"start": 261, "end": 263, "word": "12", "entity_group": "PARAM", "score": 0.999635185220318}, {"start": 311, "end": 319, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995899089792601}, {"start": 320, "end": 326, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999269817457224}]}
{"doc_id": "473766545", "document": "A tea company makes low, medium, and high quality tea. A low quality tea contains 2 units of rare additives and 6 units of tea leaves. A medium quality tea contains 3 units of rare additives and 7 units of tea leaves. A high quality tea contains 4 units of rare additives and 8 units of tea leaves. The company has available 200 units of rare additives and 400 units of tea leaves. If the profit per low quality tea is $1, the profit per medium quality tea is $3, and the profit per high quality tea is $5, how many of each should be made to maximize profits?", "order_mapping": {"low": 0, "medium": 1, "high quality tea": 2, "low quality tea": 0, "medium quality tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"medium quality tea": "3", "high quality tea": "5", "low quality tea": "1"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"low quality tea": "2", "medium quality tea": "3", "high quality tea": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"low quality tea": "6", "medium quality tea": "7", "high quality tea": "8"}, "operator": "LESS_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of low quality tea produced\n- y: Number of medium quality tea produced\n- z: Number of high quality tea produced\n\nObjective:\n- The company aims to maximize its profits. The profit per low quality tea is $1, the profit per medium quality tea is $3, and the profit per high quality tea is $5. Therefore, the objective function is: Maximize x + 3y + 5z\n\nConstraints:\n- The company has available 200 units of rare additives, and each type of tea requires a certain amount of rare additives. This leads to the constraint: 2x + 3y + 4z <= 200.\n- The company has available 400 units of tea leaves, and each type of tea requires a certain amount of tea leaves. This leads to the constraint: 6x + 7y + 8z <= 400.\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: x + 3y + 5z\nConstraints:\n2x + 3y + 4z <= 200\n6x + 7y + 8z <= 400", "canonical": {"objective": [-1.0, -3.0, -5.0], "constraints": [[2.0, 3.0, 4.0, 200.0], [6.0, 7.0, 8.0, 400.0]]}, "solution": {"x": 0, "y": 0, "z": 50}, "pseudo_model": "\nDecision Variables:\n- Number of low quality tea produced: LowQualityTea\n- Number of medium quality tea produced: MediumQualityTea\n- Number of high quality tea produced: HighQualityTea\n\nConstraints:\n- Total rare additives used should not exceed 200 units:\n  2 * LowQualityTea + 3 * MediumQualityTea + 4 * HighQualityTea <= 200\n- Total tea leaves used should not exceed 400 units:\n  6 * LowQualityTea + 7 * MediumQualityTea + 8 * HighQualityTea <= 400\n\nObjective:\n- Maximize profits (1 dollar per low quality tea, 3 dollars per medium quality tea, 5 dollars per high quality tea):\n  1 * LowQualityTea + 3 * MediumQualityTea + 5 * HighQualityTea\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLowQualityTea = intvar(0, 999999999)  # Number of low quality tea produced\nMediumQualityTea = intvar(0, 999999999)  # Number of medium quality tea produced\nHighQualityTea = intvar(0, 999999999)  # Number of high quality tea produced\n\n# Constraints\nm = Model()\n\n# Constraint on rare additives (200 units available):\nm += 2 * LowQualityTea + 3 * MediumQualityTea + 4 * HighQualityTea <= 200\n# Constraint on tea leaves (400 units available):\nm += 6 * LowQualityTea + 7 * MediumQualityTea + 8 * HighQualityTea <= 400\n\n# Objective\n# Maximize profits (1 dollar per low quality tea, 3 dollars per medium quality tea, 5 dollars per high quality tea):\nm.maximize(1 * LowQualityTea + 3 * MediumQualityTea + 5 * HighQualityTea)\n", "entities": [{"start": 20, "end": 23, "word": "low", "entity_group": "VAR", "score": 0.9996683930653465}, {"start": 26, "end": 32, "word": "medium", "entity_group": "VAR", "score": 0.9997631329415302}, {"start": 39, "end": 55, "word": "high quality tea", "entity_group": "VAR", "score": 0.99949180201095}, {"start": 60, "end": 75, "word": "low quality tea", "entity_group": "VAR", "score": 0.9980395792053347}, {"start": 85, "end": 86, "word": "2", "entity_group": "PARAM", "score": 0.9997025945202945}, {"start": 115, "end": 116, "word": "6", "entity_group": "PARAM", "score": 0.9995857164151667}, {"start": 141, "end": 159, "word": "medium quality tea", "entity_group": "VAR", "score": 0.9989893327678083}, {"start": 169, "end": 170, "word": "3", "entity_group": "PARAM", "score": 0.9997128862333402}, {"start": 199, "end": 200, "word": "7", "entity_group": "PARAM", "score": 0.999585693701663}, {"start": 225, "end": 241, "word": "high quality tea", "entity_group": "VAR", "score": 0.9956591911084359}, {"start": 251, "end": 252, "word": "4", "entity_group": "PARAM", "score": 0.9996991787980588}, {"start": 281, "end": 282, "word": "8", "entity_group": "PARAM", "score": 0.9995856916937489}, {"start": 321, "end": 330, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995239743551516}, {"start": 331, "end": 334, "word": "200", "entity_group": "LIMIT", "score": 0.9993476567079962}, {"start": 363, "end": 366, "word": "400", "entity_group": "LIMIT", "score": 0.9995998021240458}, {"start": 396, "end": 402, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998009194703936}, {"start": 407, "end": 422, "word": "low quality tea", "entity_group": "VAR", "score": 0.9970389811744278}, {"start": 428, "end": 429, "word": "1", "entity_group": "PARAM", "score": 0.9997371694420636}, {"start": 436, "end": 442, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999332393053325}, {"start": 447, "end": 465, "word": "medium quality tea", "entity_group": "VAR", "score": 0.989982600108316}, {"start": 471, "end": 472, "word": "3", "entity_group": "PARAM", "score": 0.9997610887054581}, {"start": 483, "end": 489, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999030747280909}, {"start": 494, "end": 510, "word": "high quality tea", "entity_group": "VAR", "score": 0.9846899377306133}, {"start": 516, "end": 517, "word": "5", "entity_group": "PARAM", "score": 0.9996898539072341}, {"start": 555, "end": 563, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9998637086018425}, {"start": 564, "end": 571, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996057849593785}]}
{"doc_id": "-1757358180", "document": "A sports warehouse stocks rafts and kayaks. Each raft takes 10 sq ft of space while each kayak takes 12 sq ft of space. The warehouse has 400 sq ft of space available. The warehouse has a budget of $10000 with each raft costing $200 and each kayak costing $250. With rafting being much more popular in the area, at least 55% of all items in stock must be rafts. If the profit per raft is $45 and the profit per kayak is $55, how many of each should be bought and sold to maximize profit?", "order_mapping": {"rafts": 0, "kayaks": 1, "raft": 0, "kayak": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"raft": "45", "kayak": "55"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"raft": "10", "kayak": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "10000", "terms": {"raft": "200", "kayak": "250"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "55%", "var": "rafts", "operator": "GREATER_OR_EQUAL"}], "explanation": "Variables:\n- x: Number of rafts bought and sold\n- y: Number of kayaks bought and sold\n\nObjective:\n- The warehouse aims to maximize its profit. The profit per raft is $45 and the profit per kayak is $55. Therefore, the objective function is: Maximize 45x + 55y\n\nConstraints:\n- The warehouse has 400 sq ft of space available, and each raft takes 10 sq ft while each kayak takes 12 sq ft. This leads to the constraint: 10x + 12y <= 400.\n- The warehouse has a budget of $10000, with each raft costing $200 and each kayak costing $250, resulting in the constraint: 200x + 250y <= 10000.\n- At least 55% of all items in stock must be rafts, leading to the constraint: x >= 0.55(x + y).\n\nThe full LP formulation then becomes:\n\nFormulation:\nMaximize: 45x + 55y\nConstraints:\n10x + 12y <= 400\n200x + 250y <= 10000\nx >= 0.55(x + y)", "canonical": {"objective": [-45.0, -55.0], "constraints": [[10.0, 12.0, 400.0], [200.0, 250.0, 10000.0], [-0.44999999999999996, 0.55, 0.0]]}, "solution": {"x": 22, "y": 15}, "pseudo_model": "\nDecision Variables:\n- Number of rafts: Rafts\n- Number of kayaks: Kayaks\n\nConstraints:\n- Space constraint: 10 sq ft per raft and 12 sq ft per kayak, with a total of 400 sq ft available:\n  10 * Rafts + 12 * Kayaks <= 400\n- Budget constraint: $200 per raft and $250 per kayak, with a total budget of $10000:\n  200 * Rafts + 250 * Kayaks <= 10000\n- At least 55% of all items in stock must be rafts:\n  Rafts >= 0.55 * (Rafts + Kayaks)\n\nObjective:\n- Maximize profit: $45 per raft and $55 per kayak:\n  45 * Rafts + 55 * Kayaks\n", "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRafts = intvar(0, 999999999)  # Number of rafts\nKayaks = intvar(0, 999999999)  # Number of kayaks\n\n# Constraints\nm = Model()\n\n# Space constraint: Each raft takes 10 sq ft and each kayak takes 12 sq ft, with a total of 400 sq ft available\nm += 10 * Rafts + 12 * Kayaks <= 400\n# Budget constraint: Each raft costs $200 and each kayak costs $250, with a total budget of $10000\nm += 200 * Rafts + 250 * Kayaks <= 10000\n# At least 55% of all items in stock must be rafts\nm += Rafts >= 0.55 * (Rafts + Kayaks)\n\n# Objective\n# Maximize profit: $45 per raft and $55 per kayak\nm.maximize(45 * Rafts + 55 * Kayaks)\n", "entities": [{"start": 26, "end": 31, "word": "rafts", "entity_group": "VAR", "score": 0.9997165668108444}, {"start": 36, "end": 42, "word": "kayaks", "entity_group": "VAR", "score": 0.9998062037162428}, {"start": 50, "end": 54, "word": "raft", "entity_group": "VAR", "score": 0.9997667882549319}, {"start": 61, "end": 63, "word": "10", "entity_group": "PARAM", "score": 0.9995322121969399}, {"start": 90, "end": 95, "word": "kayak", "entity_group": "VAR", "score": 0.9992494799076543}, {"start": 102, "end": 104, "word": "12", "entity_group": "PARAM", "score": 0.9994031404960685}, {"start": 140, "end": 143, "word": "400", "entity_group": "LIMIT", "score": 0.9996815217802134}, {"start": 159, "end": 168, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993917127970982}, {"start": 191, "end": 197, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9973850965856471}, {"start": 203, "end": 208, "word": "10000", "entity_group": "LIMIT", "score": 0.9991566207095541}, {"start": 219, "end": 223, "word": "raft", "entity_group": "VAR", "score": 0.9997483993662141}, {"start": 234, "end": 237, "word": "200", "entity_group": "PARAM", "score": 0.9997237246091851}, {"start": 247, "end": 252, "word": "kayak", "entity_group": "VAR", "score": 0.9995363158080729}, {"start": 263, "end": 266, "word": "250", "entity_group": "PARAM", "score": 0.999695113051521}, {"start": 320, "end": 328, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989001250102979}, {"start": 329, "end": 333, "word": "55 %", "entity_group": "LIMIT", "score": 0.9165705975402954}, {"start": 364, "end": 369, "word": "rafts", "entity_group": "VAR", "score": 0.9997000291450621}, {"start": 379, "end": 385, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998800637374818}, {"start": 390, "end": 394, "word": "raft", "entity_group": "VAR", "score": 0.9990112802526943}, {"start": 400, "end": 402, "word": "45", "entity_group": "PARAM", "score": 0.9993478814005218}, {"start": 411, "end": 417, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465444}, {"start": 422, "end": 427, "word": "kayak", "entity_group": "VAR", "score": 0.9990975872183059}, {"start": 433, "end": 435, "word": "55", "entity_group": "PARAM", "score": 0.999470760783934}, {"start": 484, "end": 492, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994420961850083}, {"start": 493, "end": 499, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997976841836507}]}
