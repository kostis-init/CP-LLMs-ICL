{"1117636837": {"document": "A fishery wants to transport their catch. They can either use local sled dogs or trucks. Local sled dogs can take 100 fish per trip while trucks can take 300 fish per trip. The cost per trip for sled dogs is $50 while the cost per trip for a truck is $100. The budget is at most $1000 and the number of sled dog trips must be less than the number of truck trips. Formulate an LP to maximize the number of fish that can be transported.", "order_mapping": {"sled dogs": 0, "trucks": 1, "truck": 1, "sled dog": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of fish", "terms": {"sled dogs": "100", "trucks": "300"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "1000", "terms": {"sled dogs": "50", "truck": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "sled dog", "direction": "less than", "y_var": "truck", "operator": "LESS"}], "canonical": {"objective": [-100.0, -300.0], "constraints": [[50.0, 100.0, 1000.0], [1.0, -1.0, -1e-06]]}, "solution": {"x": 0, "y": 10}, "entities": [{"start": 69, "end": 78, "word": "sled dogs", "entity_group": "VAR", "score": 0.9999805854008422}, {"start": 82, "end": 88, "word": "trucks", "entity_group": "VAR", "score": 0.9995746101037285}, {"start": 97, "end": 106, "word": "sled dogs", "entity_group": "VAR", "score": 0.9999817755935568}, {"start": 116, "end": 119, "word": "100", "entity_group": "PARAM", "score": 0.9994645147745432}, {"start": 120, "end": 124, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.9831886898609137}, {"start": 140, "end": 146, "word": "trucks", "entity_group": "VAR", "score": 0.9997022533334808}, {"start": 156, "end": 159, "word": "300", "entity_group": "PARAM", "score": 0.9983268948530603}, {"start": 160, "end": 164, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.996200353501454}, {"start": 198, "end": 207, "word": "sled dogs", "entity_group": "VAR", "score": 0.9998011370625773}, {"start": 213, "end": 215, "word": "50", "entity_group": "PARAM", "score": 0.9995863135487661}, {"start": 246, "end": 251, "word": "truck", "entity_group": "VAR", "score": 0.9975999604192812}, {"start": 257, "end": 260, "word": "100", "entity_group": "PARAM", "score": 0.9997117635608578}, {"start": 277, "end": 284, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9924734116566224}, {"start": 287, "end": 291, "word": "1000", "entity_group": "LIMIT", "score": 0.9989210239011511}, {"start": 310, "end": 318, "word": "sled dog", "entity_group": "VAR", "score": 0.9999652640207741}, {"start": 333, "end": 342, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9870017454675045}, {"start": 357, "end": 362, "word": "truck", "entity_group": "VAR", "score": 0.9997392818962214}, {"start": 390, "end": 398, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994443886741774}, {"start": 403, "end": 417, "word": "number of fish", "entity_group": "OBJ_NAME", "score": 0.9874527739982569}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSledDogTrips = intvar(0, 999999999)  # Number of sled dog trips\nTruckTrips = intvar(0, 999999999)  # Number of truck trips\n\n# Constraints\nm = Model()\n\n# The budget for transportation is at most $1000:\nm += 50 * SledDogTrips + 100 * TruckTrips <= 1000\n# The number of sled dog trips must be less than the number of truck trips:\nm += SledDogTrips < TruckTrips\n\n# Objective\n# Maximize the number of fish that can be transported (100 fish per sled dog trip, 300 fish per truck trip):\nm.maximize(100 * SledDogTrips + 300 * TruckTrips)\n"}}
{"1884763091": {"document": "An office supply company makes two types of printers: color printers and black and white printers. Different sections of the factory with different teams produce each printer. The color printer team can produce at most 20 color printers per day while the black and white printer team can produce at most 30 black and white printers per day. Both teams require use of the same paper tray installing machine and this machine can make at most 35 printers of either type each day. Color printers generate a profit of $200 per printer while black and white printers generate a profit of $70 per printer. How many of each printer should be made to maximize the company's profit?", "order_mapping": {"color printers": 0, "black and white printers": 1, "Color printers": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Color printers": "200", "black and white printers": "70"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "20", "var": "color printers", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "30", "var": "black and white printers", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "35", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-200.0, -70.0], "constraints": [[1.0, 0.0, 20.0], [0.0, 1.0, 30.0], [1.0, 1.0, 35.0]]}, "solution": {"x": 20, "y": 15}, "entities": [{"start": 55, "end": 69, "word": "color printers", "entity_group": "VAR", "score": 0.9999810346349451}, {"start": 74, "end": 98, "word": "black and white printers", "entity_group": "VAR", "score": 0.998423373176827}, {"start": 183, "end": 196, "word": "color printer", "entity_group": "VAR", "score": 0.9999939963246556}, {"start": 214, "end": 221, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984312359489668}, {"start": 222, "end": 224, "word": "20", "entity_group": "LIMIT", "score": 0.9994145787278708}, {"start": 225, "end": 239, "word": "color printers", "entity_group": "VAR", "score": 0.999953999103252}, {"start": 258, "end": 281, "word": "black and white printer", "entity_group": "VAR", "score": 0.9987666804076779}, {"start": 299, "end": 306, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988390338998719}, {"start": 307, "end": 309, "word": "30", "entity_group": "LIMIT", "score": 0.999556956364778}, {"start": 310, "end": 334, "word": "black and white printers", "entity_group": "VAR", "score": 0.9985174448932717}, {"start": 436, "end": 443, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989323700567078}, {"start": 444, "end": 446, "word": "35", "entity_group": "LIMIT", "score": 0.9996903569734709}, {"start": 482, "end": 496, "word": "Color printers", "entity_group": "VAR", "score": 0.9999810930358236}, {"start": 508, "end": 514, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999968133944155}, {"start": 520, "end": 523, "word": "200", "entity_group": "PARAM", "score": 0.9991513762010432}, {"start": 542, "end": 566, "word": "black and white printers", "entity_group": "VAR", "score": 0.9988791384073281}, {"start": 578, "end": 584, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999545199149371}, {"start": 590, "end": 592, "word": "70", "entity_group": "PARAM", "score": 0.9982423190606968}, {"start": 650, "end": 658, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999697349096789}, {"start": 674, "end": 680, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999703056526286}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nColorPrinters = intvar(0, 999999999)  # Number of color printers made daily\nBlackAndWhitePrinters = intvar(0, 999999999)  # Number of black and white printers made daily\n\n# Constraints\nm = Model()\n\n# At most 20 color printers can be made daily:\nm += ColorPrinters <= 20\n# At most 30 black and white printers can be made daily:\nm += BlackAndWhitePrinters <= 30\n# The paper tray installing machine can make at most 35 printers of either type each day:\nm += ColorPrinters + BlackAndWhitePrinters <= 35\n\n# Objective\n# Maximize profit ($200 profit per color printer, $70 profit per black and white printer):\nm.maximize(200 * ColorPrinters + 70 * BlackAndWhitePrinters)\n\n"}}
{"-1394927728": {"document": "An accounting firm has senior accountants earning $3000 per week and junior accountants earning $1000 per week. The contracts with companies to provide accounting services require at least 100 accountants, of whom at least 5 must be senior accountants. To make sure there is enough experience on the accounting team, the number of senior accountants should be at least a third of the number to junior accountants. The firm wants to keep the weekly wage bill below $150000. Formulate an LP to minimize the wage bill.", "order_mapping": {"senior accountants": 0, "junior accountants": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "wage bill", "terms": {"senior accountants": "3000", "junior accountants": "1000"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "100", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "senior accountants", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "senior accountants", "direction": "at least", "param": "third", "y_var": "junior accountants", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "below", "limit": "150000", "terms": {"senior accountants": "3000", "junior accountants": "1000"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [3000.0, 1000.0], "constraints": [[-1.0, -1.0, -100.0], [-1.0, -0.0, -5.0], [-3.0, 1, -0.0], [3000.0, 1000.0, 150000.0]]}, "solution": {"x": 25, "y": 75}, "entities": [{"start": 23, "end": 41, "word": "senior accountants", "entity_group": "VAR", "score": 0.9999713489895534}, {"start": 42, "end": 49, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9927249304046711}, {"start": 52, "end": 56, "word": "3000", "entity_group": "PARAM", "score": 0.9996443455280251}, {"start": 70, "end": 88, "word": "junior accountants", "entity_group": "VAR", "score": 0.999979293663935}, {"start": 89, "end": 96, "word": "earning", "entity_group": "OBJ_NAME", "score": 0.9903291787463917}, {"start": 99, "end": 103, "word": "1000", "entity_group": "PARAM", "score": 0.9992877456243654}, {"start": 183, "end": 191, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987395118291099}, {"start": 192, "end": 195, "word": "100", "entity_group": "LIMIT", "score": 0.9996907336408917}, {"start": 218, "end": 226, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982360139884683}, {"start": 227, "end": 228, "word": "5", "entity_group": "LIMIT", "score": 0.9997248920231895}, {"start": 237, "end": 255, "word": "senior accountants", "entity_group": "VAR", "score": 0.9999804830703138}, {"start": 337, "end": 355, "word": "senior accountants", "entity_group": "VAR", "score": 0.9999794889085288}, {"start": 366, "end": 374, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9975836506013324}, {"start": 377, "end": 382, "word": "third", "entity_group": "PARAM", "score": 0.9944277001285936}, {"start": 400, "end": 418, "word": "junior accountants", "entity_group": "VAR", "score": 0.9999714577198591}, {"start": 448, "end": 464, "word": "weekly wage bill", "entity_group": "OBJ_NAME", "score": 0.25901995116478366}, {"start": 465, "end": 470, "word": "below", "entity_group": "CONST_DIR", "score": 0.9868698054019605}, {"start": 473, "end": 479, "word": "150000", "entity_group": "LIMIT", "score": 0.9997037703585917}, {"start": 501, "end": 509, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9988599860862836}, {"start": 510, "end": 523, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.7882524261650913}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSeniorAccountants = intvar(0, 999999999)  # Number of senior accountants\nJuniorAccountants = intvar(0, 999999999)  # Number of junior accountants\n\n# Constraints\nm = Model()\n\n# The contracts require at least 100 accountants in total:\nm += SeniorAccountants + JuniorAccountants >= 100\n# At least 5 must be senior accountants:\nm += SeniorAccountants >= 5\n# The number of senior accountants should be at least a third of the number of junior accountants:\nm += SeniorAccountants >= (1/3) * JuniorAccountants\n# The firm wants to keep the weekly wage bill below $150,000:\nm += 3000 * SeniorAccountants + 1000 * JuniorAccountants <= 150000\n\n# Objective\n# Minimize the total wage bill:\nm.minimize(3000 * SeniorAccountants + 1000 * JuniorAccountants)\n"}}
{"294897151": {"document": "Ben is growing apples and pears on his orchard. He has 50 acres available on which he must grow a minimum of 5 acres of apples and a minimum of 10 acres of pears to meet demands. The profit per apple is $2 and the profit per pear is $4. He prefers to grow more pears than apples but limitations in his workforce allow him to grow at most twice the amount of pears as apples. How many of each fruit should Ben grow in order to maximize his profit? What is that profit?", "order_mapping": {"apples": 0, "pears": 1, "apple": 0, "pear": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"apple": "2", "pear": "4"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "5", "var": "apples", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "10", "var": "pears", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "pears", "direction": "at most", "param": "twice", "y_var": "apples", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "pears", "direction": "more than", "y_var": "apples", "operator": "GREATER"}], "canonical": {"objective": [-2.0, -4.0], "constraints": [[1.0, 1.0, 50.0], [-1.0, -0.0, -5.0], [-0.0, -1.0, -10.0], [-2.0, 1.0, 0.0], [1.0, -1.0, -1e-06]]}, "solution": {"x": 17, "y": 33}, "entities": [{"start": 15, "end": 21, "word": "apples", "entity_group": "VAR", "score": 0.9995832723669457}, {"start": 26, "end": 31, "word": "pears", "entity_group": "VAR", "score": 0.9984492379681856}, {"start": 56, "end": 58, "word": "50", "entity_group": "LIMIT", "score": 0.9997668632122444}, {"start": 65, "end": 74, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987928789117728}, {"start": 99, "end": 106, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.997826864825314}, {"start": 110, "end": 111, "word": "5", "entity_group": "LIMIT", "score": 0.9997764014023964}, {"start": 121, "end": 127, "word": "apples", "entity_group": "VAR", "score": 0.9984811325938732}, {"start": 134, "end": 141, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9987535884063748}, {"start": 145, "end": 147, "word": "10", "entity_group": "LIMIT", "score": 0.9997244106032438}, {"start": 157, "end": 162, "word": "pears", "entity_group": "VAR", "score": 0.9972030112373048}, {"start": 185, "end": 191, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998463499070497}, {"start": 196, "end": 201, "word": "apple", "entity_group": "VAR", "score": 0.9995151896635018}, {"start": 207, "end": 208, "word": "2", "entity_group": "PARAM", "score": 0.9993469675874821}, {"start": 217, "end": 223, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998655577772175}, {"start": 228, "end": 232, "word": "pear", "entity_group": "VAR", "score": 0.9990300179845717}, {"start": 238, "end": 239, "word": "4", "entity_group": "PARAM", "score": 0.9994645212862702}, {"start": 266, "end": 271, "word": "pears", "entity_group": "VAR", "score": 0.9997966474484055}, {"start": 277, "end": 283, "word": "apples", "entity_group": "VAR", "score": 0.9991649981000132}, {"start": 335, "end": 342, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9955744105667588}, {"start": 343, "end": 348, "word": "twice", "entity_group": "PARAM", "score": 0.9943675558301256}, {"start": 363, "end": 368, "word": "pears", "entity_group": "VAR", "score": 0.9994628465611523}, {"start": 372, "end": 378, "word": "apples", "entity_group": "VAR", "score": 0.9996472987854021}, {"start": 432, "end": 440, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9932165860239978}, {"start": 445, "end": 451, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999786494630319}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nApples = intvar(0, 999999999)  # Acres of apples\nPears = intvar(0, 999999999)  # Acres of pears\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 50:\nm += Apples + Pears <= 50\n# Minimum of 5 acres of apples:\nm += Apples >= 5\n# Minimum of 10 acres of pears:\nm += Pears >= 10\n# Pears grown should be at most twice the amount of apples:\nm += Pears <= 2 * Apples\n# Prefer to grow more pears than apples:\nm += Pears > Apples\n\n# Objective\n# Maximize profit (2 dollars per apple acre, 4 dollars per pear acre):\nm.maximize(2 * Apples + 4 * Pears)\n"}}
{"741805703": {"document": "A lighting company makes desk-lamps and night-lamps. There is an expected demand of at least 30 desk-lamps and 50 night-lamps each day. However, due to the size of their factory, they can make at most 150 desk-lamps and 180 night-lamps per day. To satisfy a contract, a minimum of 100 lamps must be made each day. If the profit per desk-lamp sold is $5 and the profit per night-lamp sold is $8, how many lamps of each type should be made to maximize profit?", "order_mapping": {"desk-lamps": 0, "night-lamps": 1, "desk-lamp": 0, "night-lamp": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"night-lamp": "8", "desk-lamp": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "30", "var": "desk-lamps", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "night-lamps", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "150", "var": "desk-lamps", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "180", "var": "night-lamps", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "minimum", "limit": "100", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-5.0, -8.0], "constraints": [[-1.0, -0.0, -30.0], [-0.0, -1.0, -50.0], [1.0, 0.0, 150.0], [0.0, 1.0, 180.0], [-1.0, -1.0, -100.0]]}, "solution": {"x": 150, "y": 180}, "entities": [{"start": 25, "end": 37, "word": "desk - lamps", "entity_group": "VAR", "score": 0.9993366879599644}, {"start": 42, "end": 55, "word": "night - lamps", "entity_group": "VAR", "score": 0.9995382229745532}, {"start": 89, "end": 97, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989628800490623}, {"start": 98, "end": 100, "word": "30", "entity_group": "LIMIT", "score": 0.9994516881722773}, {"start": 101, "end": 113, "word": "desk - lamps", "entity_group": "VAR", "score": 0.9990608643221321}, {"start": 118, "end": 120, "word": "50", "entity_group": "LIMIT", "score": 0.9995684333671457}, {"start": 121, "end": 134, "word": "night - lamps", "entity_group": "VAR", "score": 0.9984482752035073}, {"start": 205, "end": 212, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987830328736081}, {"start": 213, "end": 216, "word": "150", "entity_group": "LIMIT", "score": 0.9995417322658969}, {"start": 217, "end": 229, "word": "desk - lamps", "entity_group": "VAR", "score": 0.9992521470891073}, {"start": 234, "end": 237, "word": "180", "entity_group": "LIMIT", "score": 0.999606559749185}, {"start": 238, "end": 251, "word": "night - lamps", "entity_group": "VAR", "score": 0.9978354825838728}, {"start": 288, "end": 295, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9966851605933683}, {"start": 299, "end": 302, "word": "100", "entity_group": "LIMIT", "score": 0.9995789399685718}, {"start": 340, "end": 346, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999252467023546}, {"start": 351, "end": 362, "word": "desk - lamp", "entity_group": "VAR", "score": 0.9984416861698753}, {"start": 373, "end": 374, "word": "5", "entity_group": "PARAM", "score": 0.9992998643093585}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999199206450108}, {"start": 394, "end": 406, "word": "night - lamp", "entity_group": "VAR", "score": 0.9985971672814596}, {"start": 417, "end": 418, "word": "8", "entity_group": "PARAM", "score": 0.9994003111615387}, {"start": 467, "end": 475, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995762040367392}, {"start": 476, "end": 482, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999147375245062}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDeskLamps = intvar(0, 999999999)  # Number of desk-lamps made daily\nNightLamps = intvar(0, 999999999)  # Number of night-lamps made daily\n\n# Constraints\nm = Model()\n\n# Expected demand constraints\nm += DeskLamps >= 30  # At least 30 desk-lamps\nm += NightLamps >= 50  # At least 50 night-lamps\n\n# Factory capacity constraints\nm += DeskLamps <= 150  # At most 150 desk-lamps\nm += NightLamps <= 180  # At most 180 night-lamps\n\n# Contract requirement\nm += DeskLamps + NightLamps >= 100  # A minimum of 100 lamps must be made each day\n\n# Objective\n# Maximize profit ($5 per desk-lamp and $8 per night-lamp)\nm.maximize(5 * DeskLamps + 8 * NightLamps)\n"}}
{"2005236115": {"document": "Mr. Roberts want to invest in the telecom and healthcare industries. He has $100000 to invest. He has decided that the amount invested in telecom be at least three times as much as the amount invested in healthcare. But the money invested in telecom must be at most $70000. If investments in telecom earn 3% and investments in healthcare earn 1%, how much should Mr. Roberts invest in each to maximize profit?", "order_mapping": {"telecom": 0, "healthcare": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"telecom": "3%", "healthcare": "1%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "telecom", "direction": "at least", "param": "three", "y_var": "healthcare", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70000", "var": "telecom", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-0.03, -0.01], "constraints": [[1.0, 1.0, 100000.0], [-1.0, 3.0, -0.0], [1.0, 0.0, 70000.0]]}, "solution": {"x": 70000, "y": 23333}, "entities": [{"start": 34, "end": 41, "word": "telecom", "entity_group": "VAR", "score": 0.9968883284096254}, {"start": 46, "end": 56, "word": "healthcare", "entity_group": "VAR", "score": 0.9997678722745545}, {"start": 73, "end": 76, "word": "has", "entity_group": "CONST_DIR", "score": 0.9925109653074573}, {"start": 79, "end": 85, "word": "100000", "entity_group": "LIMIT", "score": 0.9994460765635154}, {"start": 141, "end": 148, "word": "telecom", "entity_group": "VAR", "score": 0.9996284119294927}, {"start": 152, "end": 160, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9895045715263684}, {"start": 161, "end": 166, "word": "three", "entity_group": "PARAM", "score": 0.9940487943798889}, {"start": 207, "end": 217, "word": "healthcare", "entity_group": "VAR", "score": 0.9996399243465998}, {"start": 246, "end": 253, "word": "telecom", "entity_group": "VAR", "score": 0.9994817039526012}, {"start": 262, "end": 269, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9922848298776372}, {"start": 272, "end": 277, "word": "70000", "entity_group": "LIMIT", "score": 0.9991453589187215}, {"start": 298, "end": 305, "word": "telecom", "entity_group": "VAR", "score": 0.9995789034126358}, {"start": 306, "end": 310, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9584923038737903}, {"start": 311, "end": 314, "word": "3 %", "entity_group": "PARAM", "score": 0.9879711402874111}, {"start": 334, "end": 344, "word": "healthcare", "entity_group": "VAR", "score": 0.9997241499413209}, {"start": 345, "end": 349, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9536480279652843}, {"start": 350, "end": 353, "word": "1 %", "entity_group": "PARAM", "score": 0.9739856761235376}, {"start": 402, "end": 410, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9935645154441468}, {"start": 411, "end": 417, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996120760400022}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTelecom = intvar(0, 999999999)  # Amount invested in telecom\nHealthcare = intvar(0, 999999999)  # Amount invested in healthcare\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $100000:\nm += Telecom + Healthcare <= 100000\n# The amount invested in telecom should be at least three times as much as the amount invested in healthcare:\nm += Telecom >= 3 * Healthcare\n# The money invested in telecom must be at most $70000:\nm += Telecom <= 70000\n\n# Objective\n# Maximize profit (3% from telecom and 1% from healthcare):\nm.maximize(0.03 * Telecom + 0.01 * Healthcare)\n"}}
{"1344881875": {"document": "A farmer has 140 hectares available to grow tomatoes and potatoes. She prefers to plant more tomatoes than potatoes, but the soil and weather conditions allow her to grow at most twice the amount of tomatoes to that of potatoes. In addition, she must grow at least 20 hectares of tomatoes and at least 30 hectares of potatoes to meet community demands. If the profit per hectare of tomatoes is $350 and the profit per hectare of potatoes is $600, how many hectares of each crop should she plant to maximize profit? What is this profit?", "order_mapping": {"tomatoes": 0, "potatoes": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"tomatoes": "350", "potatoes": "600"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "140", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "tomatoes", "direction": "at most", "param": "twice", "y_var": "potatoes", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "tomatoes", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "potatoes", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "tomatoes", "direction": "more than", "y_var": "potatoes", "operator": "GREATER"}], "canonical": {"objective": [-350.0, -600.0], "constraints": [[1.0, 1.0, 140.0], [1.0, -2.0, 0.0], [-1.0, -0.0, -20.0], [-0.0, -1.0, -30.0], [-1.0, 1.0, -1]]}, "solution": {"x": 71, "y": 69}, "entities": [{"start": 13, "end": 16, "word": "140", "entity_group": "LIMIT", "score": 0.9995390581857148}, {"start": 26, "end": 35, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993986081790078}, {"start": 44, "end": 52, "word": "tomatoes", "entity_group": "VAR", "score": 0.9989946646671988}, {"start": 57, "end": 65, "word": "potatoes", "entity_group": "VAR", "score": 0.9979598612519901}, {"start": 89, "end": 93, "word": "more", "entity_group": "CONST_DIR", "score": 0.988123742092599}, {"start": 94, "end": 102, "word": "tomatoes", "entity_group": "VAR", "score": 0.9978665633655552}, {"start": 108, "end": 116, "word": "potatoes", "entity_group": "VAR", "score": 0.9995983220748482}, {"start": 173, "end": 180, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9955003375108469}, {"start": 181, "end": 186, "word": "twice", "entity_group": "PARAM", "score": 0.9940292493703807}, {"start": 201, "end": 209, "word": "tomatoes", "entity_group": "VAR", "score": 0.9994870232149374}, {"start": 221, "end": 229, "word": "potatoes", "entity_group": "VAR", "score": 0.9993422102683018}, {"start": 260, "end": 268, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991492116173906}, {"start": 269, "end": 271, "word": "20", "entity_group": "LIMIT", "score": 0.9997531113222047}, {"start": 284, "end": 292, "word": "tomatoes", "entity_group": "VAR", "score": 0.9990663328744561}, {"start": 297, "end": 305, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992932919774739}, {"start": 306, "end": 308, "word": "30", "entity_group": "LIMIT", "score": 0.9997799262508895}, {"start": 321, "end": 329, "word": "potatoes", "entity_group": "VAR", "score": 0.9992677794449485}, {"start": 365, "end": 371, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998670115294469}, {"start": 387, "end": 395, "word": "tomatoes", "entity_group": "VAR", "score": 0.9994481868646462}, {"start": 401, "end": 404, "word": "350", "entity_group": "PARAM", "score": 0.9992433629975732}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999081154747591}, {"start": 435, "end": 443, "word": "potatoes", "entity_group": "VAR", "score": 0.9990010680930508}, {"start": 449, "end": 452, "word": "600", "entity_group": "PARAM", "score": 0.9995308282182811}, {"start": 506, "end": 514, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997855962582362}, {"start": 515, "end": 521, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999437973478618}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTomatoes = intvar(0, 999999999)  # Hectares of tomatoes\nPotatoes = intvar(0, 999999999)  # Hectares of potatoes\n\n# Constraints\nm = Model()\n\n# Total hectares available for planting:\nm += Tomatoes + Potatoes <= 140\n# Tomatoes planted must be at most twice the amount of potatoes:\nm += Tomatoes <= 2 * Potatoes\n# At least 20 hectares of tomatoes:\nm += Tomatoes >= 20\n# At least 30 hectares of potatoes:\nm += Potatoes >= 30\n# Prefer to plant more tomatoes than potatoes:\nm += Tomatoes > Potatoes\n\n# Objective\n# Maximize profit (Profit per hectare: $350 for tomatoes, $600 for potatoes):\nm.maximize(350 * Tomatoes + 600 * Potatoes)\n\n"}}
{"85734555": {"document": "A audio company make two types of headphones: wired headphones and wireless headphones. Two different teams make each type of headphones. The wired team can make at most 100 wired headphones per day and the wireless team can make at most 170 wireless headphones per day. Both teams require use of a shared audio testing machine, and this machine can be used to make a maximum of 150 headphones per day. The profit per wired headphone is $50 and the profit per wireless headphone $20. How many of each headphone should be made to maximize profit?", "order_mapping": {"wired headphones": 0, "wireless headphones": 1, "wired headphone": 0, "wireless headphone": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"wired headphone": "50", "wireless headphone": "20"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "wired headphones", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "170", "var": "wireless headphones", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "150", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-50.0, -20.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 170.0], [1.0, 1.0, 150.0]]}, "solution": {"x": 100, "y": 50}, "entities": [{"start": 47, "end": 63, "word": "wired headphones", "entity_group": "VAR", "score": 0.9999639286394655}, {"start": 68, "end": 87, "word": "wireless headphones", "entity_group": "VAR", "score": 0.9999717007547891}, {"start": 165, "end": 172, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985669169033345}, {"start": 173, "end": 176, "word": "100", "entity_group": "LIMIT", "score": 0.999479897611197}, {"start": 177, "end": 193, "word": "wired headphones", "entity_group": "VAR", "score": 0.9999725701285739}, {"start": 233, "end": 240, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986654422175792}, {"start": 241, "end": 244, "word": "170", "entity_group": "LIMIT", "score": 0.9995434350583768}, {"start": 245, "end": 264, "word": "wireless headphones", "entity_group": "VAR", "score": 0.9999367421083234}, {"start": 373, "end": 380, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9973249343377939}, {"start": 384, "end": 387, "word": "150", "entity_group": "LIMIT", "score": 0.9997416453215064}, {"start": 413, "end": 419, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997590089687584}, {"start": 424, "end": 439, "word": "wired headphone", "entity_group": "VAR", "score": 0.9999787313616281}, {"start": 445, "end": 447, "word": "50", "entity_group": "PARAM", "score": 0.9995199915366462}, {"start": 456, "end": 462, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996384278432207}, {"start": 467, "end": 485, "word": "wireless headphone", "entity_group": "VAR", "score": 0.9999324155308243}, {"start": 488, "end": 490, "word": "20", "entity_group": "PARAM", "score": 0.9995261567177592}, {"start": 538, "end": 546, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993193030297597}, {"start": 547, "end": 553, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997781723828255}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWiredHeadphones = intvar(0, 999999999)  # Number of wired headphones made per day\nWirelessHeadphones = intvar(0, 999999999)  # Number of wireless headphones made per day\n\n# Constraints\nm = Model()\n\n# Wired team can make at most 100 wired headphones per day:\nm += WiredHeadphones <= 100\n# Wireless team can make at most 170 wireless headphones per day:\nm += WirelessHeadphones <= 170\n# The audio testing machine can be used to make a maximum of 150 headphones per day:\nm += WiredHeadphones + WirelessHeadphones <= 150\n\n# Objective\n# Maximize profit ($50 profit per wired headphone and $20 profit per wireless headphone):\nm.maximize(50 * WiredHeadphones + 20 * WirelessHeadphones)\n"}}
{"359376818": {"document": "Jacob has $3000 to invest. He has decided to invest in his favorite clothing company and his favorite tech company. He has decided that the money invested in his favorite clothing company must be at least four times as much as the amount invested in his favorite tech company. He has also limited himself to invest at most $500 in his favorite tech company. If the money invested in his favorite clothing company earns 7% and the money invested in his favorite tech company earns 10%, how much should he invest in each to maximize his profit?", "order_mapping": {"clothing company": 0, "tech company": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"clothing company": "7%", "tech company": "10%"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "3000", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "clothing company", "direction": "at least", "param": "four", "y_var": "tech company", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "500", "var": "tech company", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-0.07, -0.1], "constraints": [[1.0, 1.0, 3000.0], [-1.0, 4.0, -0.0], [0.0, 1.0, 500.0]]}, "solution": {"x": 2500, "y": 500}, "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9943644108112141}, {"start": 12, "end": 16, "word": "3000", "entity_group": "LIMIT", "score": 0.9991254072839357}, {"start": 61, "end": 86, "word": "favorite clothing company", "entity_group": "VAR", "score": 0.999509813483121}, {"start": 95, "end": 116, "word": "favorite tech company", "entity_group": "VAR", "score": 0.9978190840981941}, {"start": 165, "end": 190, "word": "favorite clothing company", "entity_group": "VAR", "score": 0.9991840436474476}, {"start": 199, "end": 207, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9933271135883388}, {"start": 208, "end": 218, "word": "four times", "entity_group": "PARAM", "score": 0.8532846002167536}, {"start": 257, "end": 278, "word": "favorite tech company", "entity_group": "VAR", "score": 0.999124946862072}, {"start": 319, "end": 326, "word": "at most", "entity_group": "CONST_DIR", "score": 0.995450791566262}, {"start": 329, "end": 332, "word": "500", "entity_group": "LIMIT", "score": 0.9996505518422283}, {"start": 340, "end": 361, "word": "favorite tech company", "entity_group": "VAR", "score": 0.9988620891508724}, {"start": 393, "end": 418, "word": "favorite clothing company", "entity_group": "VAR", "score": 0.9996573376560978}, {"start": 419, "end": 424, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9965057412408452}, {"start": 425, "end": 428, "word": "7 %", "entity_group": "PARAM", "score": 0.9933780713711917}, {"start": 459, "end": 480, "word": "favorite tech company", "entity_group": "VAR", "score": 0.9995530667650484}, {"start": 481, "end": 486, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9969571514767787}, {"start": 487, "end": 491, "word": "10 %", "entity_group": "PARAM", "score": 0.9863525488197874}, {"start": 531, "end": 539, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995203414052493}, {"start": 544, "end": 550, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999425846280563}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nClothingCompany = intvar(0, 999999999)  # Money invested in the clothing company\nTechCompany = intvar(0, 999999999)  # Money invested in the tech company\n\n# Constraints\nm = Model()\n\n# Total money invested should not exceed $3000:\nm += ClothingCompany + TechCompany <= 3000\n# Money invested in the clothing company must be at least four times as much as in the tech company:\nm += ClothingCompany >= 4 * TechCompany\n# At most $500 can be invested in the tech company:\nm += TechCompany <= 500\n\n# Objective\n# Maximize profit (7% from the clothing company and 10% from the tech company):\nm.maximize(0.07 * ClothingCompany + 0.10 * TechCompany)\n"}}
{"-450888040": {"document": "Each month a store owner can spend at most $500 on carrots and cucumbers. A carrot costs the store owner $0.30 and a cucumber costs the store owner $0.50. Each carrot is sold for a profit of $0.75 and each cucumber is sold for a profit of $0.80. The owner estimates that the number of cucumbers sold is at most a third of the number of carrots sold. He also estimates that at least 300 carrots but at most 500 carrots are sold each month. How many of each, carrots and cucumbers, should be sold in order to maximize the profit?", "order_mapping": {"carrots": 0, "cucumbers": 1, "carrot": 0, "cucumber": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"carrot": "0.75", "cucumber": "0.80"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"carrot": "0.30", "cucumber": "0.50"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "cucumbers", "direction": "at most", "param": "third", "y_var": "carrots", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "300", "var": "carrots", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "500", "var": "carrots", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-0.75, -0.8], "constraints": [[0.3, 0.5, 500.0], [-1, 3.0, 0.0], [-1.0, -0.0, -300.0], [1.0, 0.0, 500.0]]}, "solution": {"x": 500, "y": 166}, "entities": [{"start": 35, "end": 42, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9965858726835014}, {"start": 45, "end": 48, "word": "500", "entity_group": "LIMIT", "score": 0.999312231458691}, {"start": 52, "end": 59, "word": "carrots", "entity_group": "VAR", "score": 0.9996998924749673}, {"start": 64, "end": 73, "word": "cucumbers", "entity_group": "VAR", "score": 0.9998311624019014}, {"start": 78, "end": 84, "word": "carrot", "entity_group": "VAR", "score": 0.9998218367387461}, {"start": 109, "end": 113, "word": "0.30", "entity_group": "PARAM", "score": 0.999612688768579}, {"start": 120, "end": 128, "word": "cucumber", "entity_group": "VAR", "score": 0.9997746247764547}, {"start": 153, "end": 157, "word": "0.50", "entity_group": "PARAM", "score": 0.9995899070476942}, {"start": 165, "end": 171, "word": "carrot", "entity_group": "VAR", "score": 0.9990585213053534}, {"start": 186, "end": 192, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998354218154251}, {"start": 198, "end": 202, "word": "0.75", "entity_group": "PARAM", "score": 0.9996585756674787}, {"start": 212, "end": 220, "word": "cucumber", "entity_group": "VAR", "score": 0.9998227976118043}, {"start": 235, "end": 241, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995170342044981}, {"start": 247, "end": 251, "word": "0.80", "entity_group": "PARAM", "score": 0.9995836125247217}, {"start": 293, "end": 302, "word": "cucumbers", "entity_group": "VAR", "score": 0.9992542681032852}, {"start": 311, "end": 318, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9942390746216057}, {"start": 321, "end": 326, "word": "third", "entity_group": "PARAM", "score": 0.9941195500705767}, {"start": 344, "end": 351, "word": "carrots", "entity_group": "VAR", "score": 0.999530291249011}, {"start": 382, "end": 390, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990682925184584}, {"start": 391, "end": 394, "word": "300", "entity_group": "LIMIT", "score": 0.9997279872064812}, {"start": 395, "end": 402, "word": "carrots", "entity_group": "VAR", "score": 0.9992779274042493}, {"start": 407, "end": 414, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989160810502105}, {"start": 415, "end": 418, "word": "500", "entity_group": "LIMIT", "score": 0.9997518757784384}, {"start": 419, "end": 426, "word": "carrots", "entity_group": "VAR", "score": 0.9987968515873472}, {"start": 468, "end": 475, "word": "carrots", "entity_group": "VAR", "score": 0.9993364073248533}, {"start": 480, "end": 489, "word": "cucumbers", "entity_group": "VAR", "score": 0.9997366480544128}, {"start": 519, "end": 527, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970533990570982}, {"start": 532, "end": 538, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620238983442}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrots = intvar(0, 999999999)  # Number of carrots sold\nCucumbers = intvar(0, 999999999)  # Number of cucumbers sold\n\n# Constraints\nm = Model()\n\n# The store owner can spend at most $500 on carrots and cucumbers:\nm += 0.30 * Carrots + 0.50 * Cucumbers <= 500\n# The number of cucumbers sold is at most a third of the number of carrots sold:\nm += Cucumbers <= (1/3) * Carrots\n# At least 300 carrots but at most 500 carrots are sold each month:\nm += Carrots >= 300\nm += Carrots <= 500\n\n# Objective\n# Maximize profit (Profit per carrot is $0.75 and per cucumber is $0.80):\nm.maximize(0.75 * Carrots + 0.80 * Cucumbers)\n"}}
{"-1044932722": {"document": "A farmer wants to manufacture a special plant nutrition using fertilizers A and B. Each kg of fertilizer A contains 13 units of nitrogen, 5 units of phosphoric acid, 6 units of vitamin A and 5 units of vitamin D. Each kg of fertilizer B contains 8 units of nitrogen, 14 units of phosphoric acid, 6 units of vitamin A and 9 units of vitamin D. To be effective, the plant nutrition requires a minimum 220 units of nitrogen, a minimum of 160 units of phosphoric acid, and no more than 350 units of vitamin A. How many kg of each fertilizer should be used to minimize the amount of vitamin D in the nutrition? What is the minimum amount of vitamin D?", "order_mapping": {"A": 0, "B.": 1, "fertilizer A": 0, "fertilizer B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of vitamin D", "terms": {"fertilizer A": "5", "fertilizer B": "9"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "220", "terms": {"fertilizer A": "13", "fertilizer B": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "160", "terms": {"fertilizer A": "5", "fertilizer B": "14"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "no more than", "limit": "350", "terms": {"fertilizer A": "6", "fertilizer B": "6"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [5.0, 9.0], "constraints": [[-13.0, -8.0, -220.0], [-5.0, -14.0, -160.0], [6.0, 6.0, 350.0]]}, "solution": {"x": 13, "y": 7}, "entities": [{"start": 62, "end": 75, "word": "fertilizers A", "entity_group": "VAR", "score": 0.9999788064452899}, {"start": 80, "end": 82, "word": "B.", "entity_group": "VAR", "score": 0.9992860101134168}, {"start": 94, "end": 106, "word": "fertilizer A", "entity_group": "VAR", "score": 0.9999624816304088}, {"start": 116, "end": 118, "word": "13", "entity_group": "PARAM", "score": 0.9995393112724982}, {"start": 139, "end": 140, "word": "5", "entity_group": "PARAM", "score": 0.9997457552993919}, {"start": 168, "end": 169, "word": "6", "entity_group": "PARAM", "score": 0.9997048325642883}, {"start": 193, "end": 194, "word": "5", "entity_group": "PARAM", "score": 0.9996702930365527}, {"start": 204, "end": 214, "word": "vitamin D.", "entity_group": "OBJ_NAME", "score": 0.9965980793656583}, {"start": 226, "end": 238, "word": "fertilizer B", "entity_group": "VAR", "score": 0.9998955825115091}, {"start": 248, "end": 249, "word": "8", "entity_group": "PARAM", "score": 0.9995690724106727}, {"start": 270, "end": 272, "word": "14", "entity_group": "PARAM", "score": 0.9997457968115602}, {"start": 300, "end": 301, "word": "6", "entity_group": "PARAM", "score": 0.9997048325642883}, {"start": 325, "end": 326, "word": "9", "entity_group": "PARAM", "score": 0.9995195291183836}, {"start": 336, "end": 346, "word": "vitamin D.", "entity_group": "OBJ_NAME", "score": 0.9943986676868585}, {"start": 396, "end": 403, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9918110999964939}, {"start": 404, "end": 407, "word": "220", "entity_group": "LIMIT", "score": 0.9989960980297816}, {"start": 430, "end": 437, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9977300315156841}, {"start": 441, "end": 444, "word": "160", "entity_group": "LIMIT", "score": 0.9997202620482433}, {"start": 476, "end": 488, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.994658367790637}, {"start": 489, "end": 492, "word": "350", "entity_group": "LIMIT", "score": 0.9997203440990945}, {"start": 562, "end": 570, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9923231762771088}, {"start": 575, "end": 594, "word": "amount of vitamin D", "entity_group": "OBJ_NAME", "score": 0.9440921232544678}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFertilizerA = intvar(0, 999999999)  # kg of fertilizer A used\nFertilizerB = intvar(0, 999999999)  # kg of fertilizer B used\n\n# Constraints\nm = Model()\n\n# Minimum 220 units of nitrogen required:\nm += 13 * FertilizerA + 8 * FertilizerB >= 220\n# Minimum 160 units of phosphoric acid required:\nm += 5 * FertilizerA + 14 * FertilizerB >= 160\n# No more than 350 units of vitamin A allowed:\nm += 6 * FertilizerA + 6 * FertilizerB <= 350\n\n# Objective\n# Minimize the amount of vitamin D in the nutrition:\nm.minimize(5 * FertilizerA + 9 * FertilizerB)\n\n"}}
{"-836325049": {"document": "Mrs. Watson wants to invest in the real-estate market and has a total budget of at most $760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a $0.50 profit and each dollar invested in detached houses yields a $1 profit. A minimum of 20% of all money invested must be in condos, and at least $20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.", "order_mapping": {"condos": 0, "detached houses": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"condos": "0.50", "detached houses": "1"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "760000", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20000", "var": "detached houses", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "20%", "var": "condos", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-0.5, -1.0], "constraints": [[1.0, 1.0, 760000.0], [-0.0, -1.0, -20000.0], [-0.8, 0.2, -0.0]]}, "solution": {"x": 152000, "y": 608000}, "entities": [{"start": 82, "end": 89, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9950725574477124}, {"start": 92, "end": 98, "word": "760000", "entity_group": "LIMIT", "score": 0.9980863917747252}, {"start": 135, "end": 141, "word": "condos", "entity_group": "VAR", "score": 0.9961645912600418}, {"start": 146, "end": 161, "word": "detached houses", "entity_group": "VAR", "score": 0.9999828285660122}, {"start": 188, "end": 194, "word": "condos", "entity_group": "VAR", "score": 0.9997804513095739}, {"start": 206, "end": 210, "word": "0.50", "entity_group": "PARAM", "score": 0.9982964260876444}, {"start": 211, "end": 217, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.998533660293501}, {"start": 246, "end": 261, "word": "detached houses", "entity_group": "VAR", "score": 0.9999842026935937}, {"start": 273, "end": 274, "word": "1", "entity_group": "PARAM", "score": 0.9996079135807743}, {"start": 275, "end": 281, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995553252833891}, {"start": 286, "end": 293, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.998683868380255}, {"start": 297, "end": 301, "word": "20 %", "entity_group": "LIMIT", "score": 0.9372925832165605}, {"start": 335, "end": 341, "word": "condos", "entity_group": "VAR", "score": 0.9996897708430883}, {"start": 348, "end": 356, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9968650798750287}, {"start": 359, "end": 364, "word": "20000", "entity_group": "LIMIT", "score": 0.9988363932445624}, {"start": 376, "end": 391, "word": "detached houses", "entity_group": "VAR", "score": 0.9999730948410757}, {"start": 430, "end": 438, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9938104687767643}, {"start": 445, "end": 451, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999317326180893}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCondos = intvar(0, 999999999)  # Amount invested in condos\nDetachedHouses = intvar(0, 999999999)  # Amount invested in detached houses\n\n# Constraints\nm = Model()\n\n# Total budget constraint:\nm += Condos + DetachedHouses <= 760000\n# At least $20000 must be in detached houses:\nm += DetachedHouses >= 20000\n# A minimum of 20% of all money invested must be in condos:\nm += Condos >= 0.20 * (Condos + DetachedHouses)\n\n# Objective\n# Maximize total profit (0.50 profit per dollar for condos, 1 profit per dollar for detached houses):\nm.maximize(0.50 * Condos + 1 * DetachedHouses)\n"}}
{"1130600103": {"document": "A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of $3 per regular sandwich and a profit of $4 per special sandwich. How many of each sandwich should be made to maximize profit?", "order_mapping": {"regular": 0, "special": 1, "regular sandwich": 0, "special sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular sandwich": "3", "special sandwich": "4"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "40", "terms": {"regular sandwich": "2", "special sandwich": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "70", "terms": {"regular sandwich": "3", "special sandwich": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-3.0, -4.0], "constraints": [[2.0, 3.0, 40.0], [3.0, 5.0, 70.0]]}, "solution": {"x": 20, "y": 0}, "entities": [{"start": 53, "end": 60, "word": "regular", "entity_group": "VAR", "score": 0.9993515759464667}, {"start": 67, "end": 74, "word": "special", "entity_group": "VAR", "score": 0.9997807871635008}, {"start": 109, "end": 125, "word": "regular sandwich", "entity_group": "VAR", "score": 0.9999813417546344}, {"start": 135, "end": 136, "word": "2", "entity_group": "PARAM", "score": 0.999623480226535}, {"start": 146, "end": 147, "word": "3", "entity_group": "PARAM", "score": 0.9995513154455492}, {"start": 171, "end": 187, "word": "special sandwich", "entity_group": "VAR", "score": 0.9999337716623502}, {"start": 197, "end": 198, "word": "3", "entity_group": "PARAM", "score": 0.9996007516765061}, {"start": 208, "end": 209, "word": "5", "entity_group": "PARAM", "score": 0.9996072723478503}, {"start": 242, "end": 252, "word": "a total of", "entity_group": "CONST_DIR", "score": 0.9829833060247178}, {"start": 253, "end": 255, "word": "40", "entity_group": "LIMIT", "score": 0.9994503586442057}, {"start": 265, "end": 267, "word": "70", "entity_group": "LIMIT", "score": 0.9994717593390169}, {"start": 297, "end": 303, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99975412729277}, {"start": 309, "end": 310, "word": "3", "entity_group": "PARAM", "score": 0.9994979332738423}, {"start": 315, "end": 331, "word": "regular sandwich", "entity_group": "VAR", "score": 0.99996855789374}, {"start": 338, "end": 344, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999806080925345}, {"start": 350, "end": 351, "word": "4", "entity_group": "PARAM", "score": 0.9987728468327001}, {"start": 356, "end": 372, "word": "special sandwich", "entity_group": "VAR", "score": 0.9998349026248261}, {"start": 419, "end": 427, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993193030297597}, {"start": 428, "end": 434, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997781723828255}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularSandwich = intvar(0, 999999999)  # Number of regular sandwiches made\nSpecialSandwich = intvar(0, 999999999)  # Number of special sandwiches made\n\n# Constraints\nm = Model()\n\n# The joint has a total of 40 eggs:\nm += 2 * RegularSandwich + 3 * SpecialSandwich <= 40\n# The joint has a total of 70 slices of bacon:\nm += 3 * RegularSandwich + 5 * SpecialSandwich <= 70\n\n# Objective\n# Maximize profit ($3 per regular sandwich and $4 per special sandwich):\nm.maximize(3 * RegularSandwich + 4 * SpecialSandwich)\n"}}
{"-725478241": {"document": "A cleaning company located in Edmonton wants to get the best exposure possible for promoting their new dishwashing detergent without exceeding their $250,000 advertising budget. To do so, the company decides to spend their money on two forms of advertising: (1) radio ads and (2) social media ads. Each radio ad costs $5,000; each social media ad costs $9,150. The expected exposure, based on industry ratings, is 60,500 viewers for each radio ad. Additionally, the expected exposure for each social media ad is 50,000 viewers. The company decides that at least 15 but no more than 40 radio ads should be ordered, and that at least 35 social media ads should be contracted. How many ads of each type should be run to obtain maximum exposure while staying within the budget?", "order_mapping": {"radio ads": 0, "social media ads": 1, "radio ad": 0, "social media ad": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "exposure", "terms": {"radio ad": "60,500", "social media ad": "50,000"}}, "const_declarations": [{"type": "linear", "direction": "without exceeding", "limit": "250,000", "terms": {"radio ad": "5,000", "social media ad": "9,150"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "radio ads", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "40", "var": "radio ads", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "35", "var": "social media ads", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-60500.0, -50000.0], "constraints": [[5000.0, 9150.0, 250000.0], [-1.0, -0.0, -15.0], [1.0, 0.0, 40.0], [-0.0, -1.0, -35.0]]}, "solution": null, "entities": [{"start": 61, "end": 69, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.983624118136472}, {"start": 151, "end": 158, "word": "250,000", "entity_group": "LIMIT", "score": 0.9980459231996555}, {"start": 171, "end": 177, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9976737448762522}, {"start": 268, "end": 277, "word": "radio ads", "entity_group": "VAR", "score": 0.9999847703860649}, {"start": 288, "end": 304, "word": "social media ads", "entity_group": "VAR", "score": 0.9995766317754514}, {"start": 312, "end": 320, "word": "radio ad", "entity_group": "VAR", "score": 0.9999514540716657}, {"start": 329, "end": 334, "word": "5,000", "entity_group": "PARAM", "score": 0.9997163959041679}, {"start": 342, "end": 357, "word": "social media ad", "entity_group": "VAR", "score": 0.997407745736181}, {"start": 366, "end": 371, "word": "9,150", "entity_group": "PARAM", "score": 0.9997420676998383}, {"start": 387, "end": 395, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9991532666396441}, {"start": 429, "end": 435, "word": "60,500", "entity_group": "PARAM", "score": 0.999700507189208}, {"start": 453, "end": 461, "word": "radio ad", "entity_group": "VAR", "score": 0.999901684984155}, {"start": 492, "end": 500, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.996206134506386}, {"start": 510, "end": 525, "word": "social media ad", "entity_group": "VAR", "score": 0.981686983737398}, {"start": 529, "end": 535, "word": "50,000", "entity_group": "PARAM", "score": 0.9996760951187433}, {"start": 571, "end": 579, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988899754048718}, {"start": 580, "end": 582, "word": "15", "entity_group": "LIMIT", "score": 0.9995394513895133}, {"start": 587, "end": 599, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9961420743164151}, {"start": 600, "end": 602, "word": "40", "entity_group": "LIMIT", "score": 0.9994670464274961}, {"start": 603, "end": 612, "word": "radio ads", "entity_group": "VAR", "score": 0.9997754350943766}, {"start": 642, "end": 650, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998997966812224}, {"start": 651, "end": 653, "word": "35", "entity_group": "LIMIT", "score": 0.9995839027738466}, {"start": 654, "end": 670, "word": "social media ads", "entity_group": "VAR", "score": 0.9941715510670538}, {"start": 744, "end": 751, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9913326806218059}, {"start": 752, "end": 760, "word": "exposure", "entity_group": "OBJ_NAME", "score": 0.9994667388555861}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRadioAds = intvar(0, 999999999)  # Number of radio ads\nSocialMediaAds = intvar(0, 999999999)  # Number of social media ads\n\n# Constraints\nm = Model()\n\n# The advertising budget should not exceed $250,000:\nm += 5000 * RadioAds + 9150 * SocialMediaAds <= 250000\n# At least 15 but no more than 40 radio ads should be ordered:\nm += RadioAds >= 15\nm += RadioAds <= 40\n# At least 35 social media ads should be contracted:\nm += SocialMediaAds >= 35\n\n# Objective\n# Maximize exposure (60,500 viewers for each radio ad and 50,000 viewers for each social media ad):\nm.maximize(60500 * RadioAds + 50000 * SocialMediaAds)\n"}}
{"861462634": {"document": "There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a $12 profit and each short cable sold results in a $5 profit, how many of each type of cable should be made to maximize profit?", "order_mapping": {"long": 0, "short cables": 1, "Long cables": 0, "long cables": 0, "long cable": 0, "short cable": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"long cable": "12", "short cable": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"Long cables": "10", "short cables": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "short cables", "direction": "at least", "param": "5", "y_var": "long cables", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "long cables", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-12.0, -5.0], "constraints": [[10.0, 7.0, 1000.0], [5.0, -1.0, -0.0], [-1.0, -0.0, -10.0]]}, "solution": {"x": 22, "y": 111}, "entities": [{"start": 9, "end": 13, "word": "1000", "entity_group": "LIMIT", "score": 0.9995774866865306}, {"start": 25, "end": 34, "word": "available", "entity_group": "CONST_DIR", "score": 0.9957685044684713}, {"start": 58, "end": 62, "word": "long", "entity_group": "VAR", "score": 0.9994801431805334}, {"start": 67, "end": 79, "word": "short cables", "entity_group": "VAR", "score": 0.9999752695893978}, {"start": 82, "end": 93, "word": "Long cables", "entity_group": "VAR", "score": 0.9999720077725243}, {"start": 102, "end": 104, "word": "10", "entity_group": "PARAM", "score": 0.9995451055892054}, {"start": 122, "end": 134, "word": "short cables", "entity_group": "VAR", "score": 0.9999511655380601}, {"start": 143, "end": 144, "word": "7", "entity_group": "PARAM", "score": 0.9991204035792576}, {"start": 190, "end": 198, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998405242782726}, {"start": 199, "end": 206, "word": "5 times", "entity_group": "PARAM", "score": 0.5945810438439945}, {"start": 221, "end": 233, "word": "short cables", "entity_group": "VAR", "score": 0.999956672307418}, {"start": 254, "end": 265, "word": "long cables", "entity_group": "VAR", "score": 0.9999661009377613}, {"start": 300, "end": 308, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986366072292617}, {"start": 309, "end": 311, "word": "10", "entity_group": "LIMIT", "score": 0.99913188717471}, {"start": 312, "end": 323, "word": "long cables", "entity_group": "VAR", "score": 0.9999609092911795}, {"start": 339, "end": 349, "word": "long cable", "entity_group": "VAR", "score": 0.9999718032215651}, {"start": 370, "end": 372, "word": "12", "entity_group": "PARAM", "score": 0.9994903999114073}, {"start": 373, "end": 379, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995447000366674}, {"start": 389, "end": 400, "word": "short cable", "entity_group": "VAR", "score": 0.9999686226663024}, {"start": 421, "end": 422, "word": "5", "entity_group": "PARAM", "score": 0.9988464071612996}, {"start": 423, "end": 429, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998546501075984}, {"start": 481, "end": 489, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994168243696182}, {"start": 490, "end": 496, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999280375836495}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLongCables = intvar(0, 999999999)  # Number of long cables made\nShortCables = intvar(0, 999999999)  # Number of short cables made\n\n# Constraints\nm = Model()\n\n# Gold usage for long and short cables should not exceed 1000 mg:\nm += 10 * LongCables + 7 * ShortCables <= 1000\n# At least 5 times the number of short cables are needed than the long cables:\nm += ShortCables >= 5 * LongCables\n# There needs to be at least 10 long cables made:\nm += LongCables >= 10\n\n# Objective\n# Maximize profit ($12 profit per long cable and $5 profit per short cable):\nm.maximize(12 * LongCables + 5 * ShortCables)\n\n"}}
{"1040407495": {"document": "A store employs senior citizens who earn $500 per week and young adults who earn $750 per week. The store must keep the weekly wage bill below $30000. On any day, the store requires at least 50 workers, of whom at least 10 must be young adults. To ensure the store runs smoothly, the number of young adults should be at least a third the number of senior citizens. Formulate a LP to minimize the wage bill.", "order_mapping": {"senior citizens": 0, "young adults": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "the wage bill", "terms": {"senior citizens": "500", "young adults": "750"}}, "const_declarations": [{"type": "linear", "direction": "below", "limit": "30000", "terms": {"senior citizens": "500", "young adults": "750"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "50", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "young adults", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "young adults", "direction": "at least", "param": "third", "y_var": "senior citizens", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [500.0, 750.0], "constraints": [[500.0, 750.0, 30000.0], [-1.0, -1.0, -50.0], [-0.0, -1.0, -10.0], [1, -3.0, -0.0]]}, "solution": {"x": 37, "y": 13}, "entities": [{"start": 16, "end": 31, "word": "senior citizens", "entity_group": "VAR", "score": 0.9999766489665518}, {"start": 36, "end": 40, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9959113453776175}, {"start": 43, "end": 46, "word": "500", "entity_group": "PARAM", "score": 0.9997056279778193}, {"start": 60, "end": 72, "word": "young adults", "entity_group": "VAR", "score": 0.9999738325580643}, {"start": 77, "end": 81, "word": "earn", "entity_group": "OBJ_NAME", "score": 0.9907410412593387}, {"start": 84, "end": 87, "word": "750", "entity_group": "PARAM", "score": 0.9997357113379723}, {"start": 123, "end": 139, "word": "weekly wage bill", "entity_group": "OBJ_NAME", "score": 0.7362621345300767}, {"start": 140, "end": 145, "word": "below", "entity_group": "CONST_DIR", "score": 0.9831929306040845}, {"start": 148, "end": 153, "word": "30000", "entity_group": "LIMIT", "score": 0.9996782172589802}, {"start": 188, "end": 196, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990371569716612}, {"start": 197, "end": 199, "word": "50", "entity_group": "LIMIT", "score": 0.999705329385102}, {"start": 218, "end": 226, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982391670658076}, {"start": 227, "end": 229, "word": "10", "entity_group": "LIMIT", "score": 0.999713366265341}, {"start": 238, "end": 250, "word": "young adults", "entity_group": "VAR", "score": 0.9999818430428765}, {"start": 303, "end": 315, "word": "young adults", "entity_group": "VAR", "score": 0.9999701375280111}, {"start": 326, "end": 334, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979713150430538}, {"start": 337, "end": 342, "word": "third", "entity_group": "PARAM", "score": 0.996351848632448}, {"start": 357, "end": 372, "word": "senior citizens", "entity_group": "VAR", "score": 0.9999564441870525}, {"start": 393, "end": 401, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992338398440757}, {"start": 402, "end": 415, "word": "the wage bill", "entity_group": "OBJ_NAME", "score": 0.6143075480262791}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSeniorCitizens = intvar(0, 999999999)  # Number of senior citizens employed\nYoungAdults = intvar(0, 999999999)  # Number of young adults employed\n\n# Constraints\nm = Model()\n\n# The store must keep the weekly wage bill below $30000:\nm += 500 * SeniorCitizens + 750 * YoungAdults <= 30000\n# On any day, the store requires at least 50 workers:\nm += SeniorCitizens + YoungAdults >= 50\n# Of whom at least 10 must be young adults:\nm += YoungAdults >= 10\n# The number of young adults should be at least a third the number of senior citizens:\nm += YoungAdults >= (1/3) * SeniorCitizens\n\n# Objective\n# Minimize the wage bill:\nm.minimize(500 * SeniorCitizens + 750 * YoungAdults)\n"}}
{"1275707149": {"document": "A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs $1000 and attracts 400,000 viewers. On soorchle, each ad costs $200 and attracts 5,000 viewers. On wassa, each ad costs $100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is $10000. How many advertisements should be run in each of the three types of media to maximize the total audience?", "order_mapping": {"z-tube": 0, "soorchle": 1, "wassa": 2, "Soorchle": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "audience", "terms": {"z-tube": "400,000", "soorchle": "5,000", "wassa": "3,000"}}, "const_declarations": [{"type": "upperbound", "direction": "limits the number", "limit": "fifteen", "var": "Soorchle", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "wassa", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "5%", "var": "z-tube", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "10000", "terms": {"z-tube": "1000", "soorchle": "200", "wassa": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-400000.0, -5000.0, -3000.0], "constraints": [[0.0, 1.0, 0.0, 15.0], [-1, -1, 2, 0.0], [-0.95, 0.05, 0.05, -0.0], [1000.0, 200.0, 100.0, 10000.0]]}, "solution": {"x": 10, "y": 0, "z": 0}, "entities": [{"start": 76, "end": 84, "word": "z - tube", "entity_group": "VAR", "score": 0.9991400561366731}, {"start": 87, "end": 95, "word": "soorchle", "entity_group": "VAR", "score": 0.9978465295961014}, {"start": 109, "end": 114, "word": "wassa", "entity_group": "VAR", "score": 0.9997926886962739}, {"start": 175, "end": 182, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9914911921978994}, {"start": 215, "end": 223, "word": "z - tube", "entity_group": "VAR", "score": 0.9991517827578367}, {"start": 242, "end": 246, "word": "1000", "entity_group": "PARAM", "score": 0.9996065129070247}, {"start": 260, "end": 267, "word": "400,000", "entity_group": "PARAM", "score": 0.9996389352283507}, {"start": 268, "end": 275, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9930026631307166}, {"start": 281, "end": 289, "word": "soorchle", "entity_group": "VAR", "score": 0.9997159064645927}, {"start": 308, "end": 311, "word": "200", "entity_group": "PARAM", "score": 0.9992197308555728}, {"start": 325, "end": 330, "word": "5,000", "entity_group": "PARAM", "score": 0.999639328010804}, {"start": 331, "end": 338, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9932960769910136}, {"start": 344, "end": 349, "word": "wassa", "entity_group": "VAR", "score": 0.9996699394994369}, {"start": 368, "end": 371, "word": "100", "entity_group": "PARAM", "score": 0.9996417536498127}, {"start": 385, "end": 390, "word": "3,000", "entity_group": "PARAM", "score": 0.9997530348599165}, {"start": 391, "end": 398, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9878769402187793}, {"start": 401, "end": 409, "word": "Soorchle", "entity_group": "VAR", "score": 0.9993185672260209}, {"start": 410, "end": 427, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9769442008026131}, {"start": 471, "end": 478, "word": "fifteen", "entity_group": "LIMIT", "score": 0.9993355103108763}, {"start": 561, "end": 568, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9973567058430858}, {"start": 571, "end": 576, "word": "third", "entity_group": "LIMIT", "score": 0.9915223437320488}, {"start": 631, "end": 636, "word": "wassa", "entity_group": "VAR", "score": 0.9996776471171885}, {"start": 643, "end": 651, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989024535307307}, {"start": 652, "end": 655, "word": "5 %", "entity_group": "LIMIT", "score": 0.9165156589930825}, {"start": 672, "end": 680, "word": "z - tube", "entity_group": "VAR", "score": 0.9993655882227741}, {"start": 706, "end": 712, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9973629140204706}, {"start": 718, "end": 723, "word": "10000", "entity_group": "LIMIT", "score": 0.999650076806616}, {"start": 803, "end": 811, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991923340924509}, {"start": 822, "end": 830, "word": "audience", "entity_group": "OBJ_NAME", "score": 0.9987724190172591}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nZTubeAds = intvar(0, 999999999)  # Number of advertisements on Z-Tube\nSoorchleAds = intvar(0, 999999999)  # Number of advertisements on Soorchle\nWassaAds = intvar(0, 999999999)  # Number of advertisements on Wassa\n\n# Constraints\nm = Model()\n\n# Soorchle limits the number of advertisements from a single company to fifteen:\nm += SoorchleAds <= 15\n# At most a third of the total number of advertisements should occur on Wassa:\nm += WassaAds <= (1/3) * (ZTubeAds + SoorchleAds + WassaAds)\n# At least 5% should occur on Z-Tube:\nm += ZTubeAds >= 0.05 * (ZTubeAds + SoorchleAds + WassaAds)\n# The weekly advertising budget is $10000:\nm += 1000 * ZTubeAds + 200 * SoorchleAds + 100 * WassaAds <= 10000\n\n# Objective\n# Maximize the total audience (400,000 viewers per Z-Tube ad, 5,000 viewers per Soorchle ad, 3,000 viewers per Wassa ad):\nm.maximize(400000 * ZTubeAds + 5000 * SoorchleAds + 3000 * WassaAds)\n"}}
{"1588230199": {"document": "A chair produced by Elm Furniture yields a profit of $43, while every dresser yields a $52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.", "order_mapping": {"chair": 0, "dresser": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"chair": "43", "dresser": "52"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "17", "terms": {"chair": "1.4", "dresser": "1.1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "11", "terms": {"chair": "2", "dresser": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-43.0, -52.0], "constraints": [[1.4, 1.1, 17.0], [2.0, 3.0, 11.0]]}, "solution": {"x": 4, "y": 1}, "entities": [{"start": 2, "end": 7, "word": "chair", "entity_group": "VAR", "score": 0.9994593308332518}, {"start": 43, "end": 49, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998287198552029}, {"start": 55, "end": 57, "word": "43", "entity_group": "PARAM", "score": 0.9988079719517898}, {"start": 72, "end": 79, "word": "dresser", "entity_group": "VAR", "score": 0.9998165923742233}, {"start": 91, "end": 93, "word": "52", "entity_group": "PARAM", "score": 0.9994619617322452}, {"start": 94, "end": 100, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998480404436355}, {"start": 115, "end": 117, "word": "17", "entity_group": "LIMIT", "score": 0.9996302526036102}, {"start": 139, "end": 141, "word": "11", "entity_group": "LIMIT", "score": 0.9997440255301061}, {"start": 166, "end": 175, "word": "available", "entity_group": "CONST_DIR", "score": 0.999378555605921}, {"start": 183, "end": 188, "word": "chair", "entity_group": "VAR", "score": 0.9993443120596099}, {"start": 198, "end": 201, "word": "1.4", "entity_group": "PARAM", "score": 0.9997232664049455}, {"start": 223, "end": 224, "word": "2", "entity_group": "PARAM", "score": 0.9997256555996152}, {"start": 258, "end": 265, "word": "dresser", "entity_group": "VAR", "score": 0.9995646171511358}, {"start": 275, "end": 278, "word": "1.1", "entity_group": "PARAM", "score": 0.9997206035837831}, {"start": 300, "end": 301, "word": "3", "entity_group": "PARAM", "score": 0.9997260236407128}, {"start": 338, "end": 345, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.9865260634136407}, {"start": 346, "end": 352, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998762682051706}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChair = intvar(0, 999999999)  # Number of chairs produced\nDresser = intvar(0, 999999999)  # Number of dressers produced\n\n# Constraints\nm = Model()\n\n# 17 gallons of stain are available each week:\nm += 1.4 * Chair + 1.1 * Dresser <= 17\n# 11 lengths of oak wood are available each week:\nm += 2 * Chair + 3 * Dresser <= 11\n\n# Objective\n# Maximize profit ($43 per chair, $52 per dresser):\nm.maximize(43 * Chair + 52 * Dresser)\n\n"}}
{"703345038": {"document": "A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs $100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs $80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.", "order_mapping": {"Feed A": 0, "Feed B": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Feed A": "100", "Feed B": "80"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "30", "terms": {"Feed A": "10", "Feed B": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"Feed A": "8", "Feed B": "15"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [100.0, 80.0], "constraints": [[-10.0, -7.0, -30.0], [-8.0, -15.0, -50.0]]}, "solution": {"x": 1, "y": 3}, "entities": [{"start": 41, "end": 47, "word": "Feed A", "entity_group": "VAR", "score": 0.9999795093505751}, {"start": 52, "end": 58, "word": "Feed B", "entity_group": "VAR", "score": 0.9999862021307513}, {"start": 107, "end": 114, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9982063829738946}, {"start": 118, "end": 120, "word": "30", "entity_group": "LIMIT", "score": 0.9997684702894907}, {"start": 142, "end": 144, "word": "50", "entity_group": "LIMIT", "score": 0.9997037716176818}, {"start": 160, "end": 166, "word": "Feed A", "entity_group": "VAR", "score": 0.9999870215487392}, {"start": 167, "end": 172, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9994156418770785}, {"start": 175, "end": 178, "word": "100", "entity_group": "PARAM", "score": 0.9997438711581362}, {"start": 205, "end": 207, "word": "10", "entity_group": "PARAM", "score": 0.999722849086974}, {"start": 229, "end": 230, "word": "8", "entity_group": "PARAM", "score": 0.9997031809120271}, {"start": 246, "end": 252, "word": "Feed B", "entity_group": "VAR", "score": 0.9999887366605965}, {"start": 253, "end": 258, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9993958123298642}, {"start": 261, "end": 263, "word": "80", "entity_group": "PARAM", "score": 0.9997437862358232}, {"start": 290, "end": 291, "word": "7", "entity_group": "PARAM", "score": 0.9997228482273192}, {"start": 313, "end": 315, "word": "15", "entity_group": "PARAM", "score": 0.9996613366388484}, {"start": 345, "end": 352, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9944760069890679}, {"start": 353, "end": 357, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9971118254824927}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFeedA = intvar(0, 999999999)  # Kilograms of Feed A\nFeedB = intvar(0, 999999999)  # Kilograms of Feed B\n\n# Constraints\nm = Model()\n\n# The mixture must contain a minimum of 30 units of protein:\nm += 10*FeedA + 7*FeedB >= 30\n# The mixture must contain a minimum of 50 units of fat:\nm += 8*FeedA + 15*FeedB >= 50\n\n# Objective\n# Minimize the cost of the mixture:\nm.minimize(100*FeedA + 80*FeedB)\n"}}
{"1433467400": {"document": "An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is $5 and the profit per stubby jar is $9. How many jars of each type should the artisan make to maximize profit?", "order_mapping": {"thin jar": 0, "stubby jar": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"stubby jar": "9", "thin jar": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"thin jar": "50", "stubby jar": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"thin jar": "90", "stubby jar": "150"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -9.0], "constraints": [[50.0, 30.0, 3000.0], [90.0, 150.0, 4000.0]]}, "solution": {"x": 1, "y": 26}, "entities": [{"start": 50, "end": 58, "word": "thin jar", "entity_group": "VAR", "score": 0.999862634648634}, {"start": 65, "end": 75, "word": "stubby jar", "entity_group": "VAR", "score": 0.9999708968687844}, {"start": 83, "end": 91, "word": "thin jar", "entity_group": "VAR", "score": 0.999982719089646}, {"start": 101, "end": 103, "word": "50", "entity_group": "PARAM", "score": 0.9997208786967287}, {"start": 132, "end": 134, "word": "90", "entity_group": "PARAM", "score": 0.9994538959615548}, {"start": 165, "end": 175, "word": "stubby jar", "entity_group": "VAR", "score": 0.9999657142234513}, {"start": 185, "end": 187, "word": "30", "entity_group": "PARAM", "score": 0.9997252650749819}, {"start": 216, "end": 219, "word": "150", "entity_group": "PARAM", "score": 0.9994184190459459}, {"start": 266, "end": 270, "word": "3000", "entity_group": "LIMIT", "score": 0.999767458490961}, {"start": 279, "end": 288, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993801294856457}, {"start": 305, "end": 309, "word": "4000", "entity_group": "LIMIT", "score": 0.9997099391368443}, {"start": 318, "end": 327, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987261764880433}, {"start": 345, "end": 351, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999441404671257}, {"start": 356, "end": 364, "word": "thin jar", "entity_group": "VAR", "score": 0.9999565601486308}, {"start": 370, "end": 371, "word": "5", "entity_group": "PARAM", "score": 0.999562414175029}, {"start": 380, "end": 386, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999054537153145}, {"start": 391, "end": 401, "word": "stubby jar", "entity_group": "VAR", "score": 0.9997898852378152}, {"start": 407, "end": 408, "word": "9", "entity_group": "PARAM", "score": 0.9996727101630296}, {"start": 465, "end": 473, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994938024516946}, {"start": 474, "end": 480, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277472233759}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nThinJar = intvar(0, 999999999)  # Number of thin jars made per week\nStubbyJar = intvar(0, 999999999)  # Number of stubby jars made per week\n\n# Constraints\nm = Model()\n\n# Shaping time constraint: 50 minutes per thin jar and 30 minutes per stubby jar, with 3000 minutes available per week\nm += 50 * ThinJar + 30 * StubbyJar <= 3000\n# Baking time constraint: 90 minutes per thin jar and 150 minutes per stubby jar, with 4000 minutes available per week\nm += 90 * ThinJar + 150 * StubbyJar <= 4000\n\n# Objective\n# Maximize profit: $5 per thin jar and $9 per stubby jar\nm.maximize(5 * ThinJar + 9 * StubbyJar)\n"}}
{"-1036797903": {"document": "A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?", "order_mapping": {"banana-haters package": 0, "combo package": 1, "banana-haters packages": 0, "combo packages": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "net profit", "terms": {"banana-haters package": "six", "combo package": "seven"}}, "const_declarations": [{"type": "linear", "direction": "stock", "limit": "10", "terms": {"banana-haters package": "6", "combo package": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "stock", "limit": "20", "terms": {"combo package": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "stock", "limit": "80", "terms": {"banana-haters package": "30", "combo package": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-6.0, -7.0], "constraints": [[6.0, 5.0, 10.0], [0.0, 6.0, 20.0], [30.0, 20.0, 80.0]]}, "solution": {"x": 0, "y": 2}, "entities": [{"start": 39, "end": 44, "word": "stock", "entity_group": "CONST_DIR", "score": 0.9930669483615749}, {"start": 48, "end": 50, "word": "10", "entity_group": "LIMIT", "score": 0.9996785031382556}, {"start": 60, "end": 62, "word": "20", "entity_group": "LIMIT", "score": 0.9993782633525846}, {"start": 77, "end": 79, "word": "80", "entity_group": "LIMIT", "score": 0.9996541129115226}, {"start": 153, "end": 176, "word": "banana - haters package", "entity_group": "VAR", "score": 0.9987049893848806}, {"start": 182, "end": 183, "word": "6", "entity_group": "PARAM", "score": 0.9996227673295222}, {"start": 195, "end": 197, "word": "30", "entity_group": "PARAM", "score": 0.9994449528169569}, {"start": 240, "end": 246, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997736997827411}, {"start": 250, "end": 253, "word": "six", "entity_group": "PARAM", "score": 0.998088367788409}, {"start": 293, "end": 306, "word": "combo package", "entity_group": "VAR", "score": 0.9999008930075383}, {"start": 312, "end": 313, "word": "5", "entity_group": "PARAM", "score": 0.9995539758845273}, {"start": 323, "end": 324, "word": "6", "entity_group": "PARAM", "score": 0.9982384695136391}, {"start": 339, "end": 341, "word": "20", "entity_group": "PARAM", "score": 0.9995602061861694}, {"start": 362, "end": 368, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994929397672431}, {"start": 372, "end": 377, "word": "seven", "entity_group": "PARAM", "score": 0.9990839806101518}, {"start": 516, "end": 540, "word": "banana - haters packages", "entity_group": "VAR", "score": 0.9989759965072134}, {"start": 545, "end": 559, "word": "combo packages", "entity_group": "VAR", "score": 0.9999841439457183}, {"start": 590, "end": 598, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9975716996016244}, {"start": 599, "end": 609, "word": "net profit", "entity_group": "OBJ_NAME", "score": 0.9660610030906682}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBananaHatersPackages = intvar(0, 999999999)  # Number of banana-haters packages prepared\nComboPackages = intvar(0, 999999999)  # Number of combo packages prepared\n\n# Constraints\nm = Model()\n\n# Stock constraints for apples (10 available):\nm += 6 * BananaHatersPackages + 5 * ComboPackages <= 10\n# Stock constraints for bananas (20 available):\nm += 6 * ComboPackages <= 20\n# Stock constraints for grapes (80 available):\nm += 30 * BananaHatersPackages + 20 * ComboPackages <= 80\n\n# Objective\n# Maximize net profit (6 euros per banana-haters package and 7 euros per combo package):\nm.maximize(6 * BananaHatersPackages + 7 * ComboPackages)\n"}}
{"1771352861": {"document": "A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is $5 and the profit per batch of cookies is $3. How should the bakery operate to maximize total profit?", "order_mapping": {"bread": 0, "cookies": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"bread": "5", "cookies": "3"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "3000", "terms": {"bread": "1", "cookies": "0.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "3000", "terms": {"bread": "3", "cookies": "1"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -3.0], "constraints": [[1.0, 0.5, 3000.0], [3.0, 1.0, 3000.0]]}, "solution": {"x": 0, "y": 3000}, "entities": [{"start": 59, "end": 64, "word": "bread", "entity_group": "VAR", "score": 0.999488570917699}, {"start": 69, "end": 76, "word": "cookies", "entity_group": "VAR", "score": 0.9983614349133596}, {"start": 104, "end": 111, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999169503430032}, {"start": 112, "end": 116, "word": "3000", "entity_group": "LIMIT", "score": 0.9997667138083763}, {"start": 152, "end": 157, "word": "bread", "entity_group": "VAR", "score": 0.9994473042600093}, {"start": 164, "end": 165, "word": "1", "entity_group": "PARAM", "score": 0.9995029214481392}, {"start": 194, "end": 195, "word": "3", "entity_group": "PARAM", "score": 0.9996085357080978}, {"start": 227, "end": 234, "word": "cookies", "entity_group": "VAR", "score": 0.9994273377979968}, {"start": 244, "end": 247, "word": "0.5", "entity_group": "PARAM", "score": 0.9996351720281459}, {"start": 271, "end": 272, "word": "1", "entity_group": "PARAM", "score": 0.9990051034727663}, {"start": 296, "end": 302, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999478903720951}, {"start": 315, "end": 320, "word": "bread", "entity_group": "VAR", "score": 0.9989282916169769}, {"start": 326, "end": 327, "word": "5", "entity_group": "PARAM", "score": 0.9991383516999488}, {"start": 336, "end": 342, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999350484553466}, {"start": 356, "end": 363, "word": "cookies", "entity_group": "VAR", "score": 0.9986864463940066}, {"start": 369, "end": 370, "word": "3", "entity_group": "PARAM", "score": 0.9996750679376677}, {"start": 406, "end": 414, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994317627425855}, {"start": 421, "end": 427, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999252582264891}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBread = intvar(0, 999999999)  # Number of loaves of bread made per year\nCookies = intvar(0, 999999999)  # Number of batches of cookies made per year\n\n# Constraints\nm = Model()\n\n# Stand mixer usage for both bread and cookies should not exceed 3000 hours per year:\nm += 1 * Bread + 0.5 * Cookies <= 3000\n# Oven usage for both bread and cookies should not exceed 3000 hours per year:\nm += 3 * Bread + 1 * Cookies <= 3000\n\n# Objective\n# Maximize total profit ($5 per loaf of bread and $3 per batch of cookies):\nm.maximize(5 * Bread + 3 * Cookies)\n\n"}}
{"1751406188": {"document": "A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is $8 and the profit per pane of tempered glass is $10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?", "order_mapping": {"regular glass pane": 0, "tempered glass pane": 1, "regular glass": 0, "tempered glass": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular glass": "8", "tempered glass": "10"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "300", "terms": {"regular glass pane": "3", "tempered glass pane": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "300", "terms": {"regular glass pane": "5", "tempered glass pane": "8"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -10.0], "constraints": [[3.0, 5.0, 300.0], [5.0, 8.0, 300.0]]}, "solution": {"x": 60, "y": 0}, "entities": [{"start": 51, "end": 69, "word": "regular glass pane", "entity_group": "VAR", "score": 0.9997980829835945}, {"start": 76, "end": 95, "word": "tempered glass pane", "entity_group": "VAR", "score": 0.9987333859257748}, {"start": 185, "end": 192, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9987476882394721}, {"start": 196, "end": 199, "word": "300", "entity_group": "LIMIT", "score": 0.9996580384763847}, {"start": 227, "end": 228, "word": "3", "entity_group": "PARAM", "score": 0.9996403106845445}, {"start": 264, "end": 265, "word": "5", "entity_group": "PARAM", "score": 0.9996615433055445}, {"start": 309, "end": 327, "word": "regular glass pane", "entity_group": "VAR", "score": 0.9991669103471837}, {"start": 339, "end": 340, "word": "5", "entity_group": "PARAM", "score": 0.999385050759444}, {"start": 376, "end": 377, "word": "8", "entity_group": "PARAM", "score": 0.9996615433055458}, {"start": 421, "end": 440, "word": "tempered glass pane", "entity_group": "VAR", "score": 0.9995311025338454}, {"start": 447, "end": 453, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998818474169425}, {"start": 466, "end": 479, "word": "regular glass", "entity_group": "VAR", "score": 0.9996815911866497}, {"start": 485, "end": 486, "word": "8", "entity_group": "PARAM", "score": 0.9995773778140857}, {"start": 495, "end": 501, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999031120040542}, {"start": 514, "end": 528, "word": "tempered glass", "entity_group": "VAR", "score": 0.9994473934272242}, {"start": 534, "end": 536, "word": "10", "entity_group": "PARAM", "score": 0.99968372138546}, {"start": 600, "end": 608, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997168448030284}, {"start": 609, "end": 615, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999598259309685}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularGlass = intvar(0, 999999999)  # Number of regular glass panes made\nTemperedGlass = intvar(0, 999999999)  # Number of tempered glass panes made\n\n# Constraints\nm = Model()\n\n# Heating machine time constraint (3 minutes for regular, 5 minutes for tempered, max 300 minutes):\nm += 3 * RegularGlass + 5 * TemperedGlass <= 300\n# Cooling machine time constraint (5 minutes for regular, 8 minutes for tempered, max 300 minutes):\nm += 5 * RegularGlass + 8 * TemperedGlass <= 300\n\n# Objective\n# Maximize profit ($8 per regular glass pane, $10 per tempered glass pane):\nm.maximize(8 * RegularGlass + 10 * TemperedGlass)\n\n"}}
{"-241297255": {"document": "A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is $5 and the profit per tiger sold is $4. How many of each should be made in order to maximize profit?", "order_mapping": {"elephants": 0, "tigers": 1, "elephant": 0, "tiger": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"elephant": "5", "tiger": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"elephant": "50", "tiger": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"elephant": "20", "tiger": "30"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -4.0], "constraints": [[50.0, 40.0, 5000.0], [20.0, 30.0, 4000.0]]}, "solution": {"x": 100, "y": 0}, "entities": [{"start": 29, "end": 38, "word": "elephants", "entity_group": "VAR", "score": 0.9995557061399323}, {"start": 43, "end": 49, "word": "tigers", "entity_group": "VAR", "score": 0.9980161866610554}, {"start": 80, "end": 88, "word": "elephant", "entity_group": "VAR", "score": 0.9995318643338926}, {"start": 98, "end": 100, "word": "50", "entity_group": "PARAM", "score": 0.9996849022600199}, {"start": 119, "end": 121, "word": "20", "entity_group": "PARAM", "score": 0.999714755408016}, {"start": 146, "end": 151, "word": "tiger", "entity_group": "VAR", "score": 0.9995465231627556}, {"start": 161, "end": 163, "word": "40", "entity_group": "PARAM", "score": 0.9996958349458172}, {"start": 182, "end": 184, "word": "30", "entity_group": "PARAM", "score": 0.9996593763817274}, {"start": 216, "end": 220, "word": "5000", "entity_group": "LIMIT", "score": 0.9997545273073827}, {"start": 239, "end": 243, "word": "4000", "entity_group": "LIMIT", "score": 0.9997500623708995}, {"start": 265, "end": 274, "word": "available", "entity_group": "CONST_DIR", "score": 0.999657019864842}, {"start": 281, "end": 287, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999898103296755}, {"start": 292, "end": 300, "word": "elephant", "entity_group": "VAR", "score": 0.9993453426143276}, {"start": 311, "end": 312, "word": "5", "entity_group": "PARAM", "score": 0.9995965407735533}, {"start": 321, "end": 327, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999382310485128}, {"start": 332, "end": 337, "word": "tiger", "entity_group": "VAR", "score": 0.9989038832573744}, {"start": 348, "end": 349, "word": "4", "entity_group": "PARAM", "score": 0.9996502639097418}, {"start": 396, "end": 404, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961852675868956}, {"start": 405, "end": 411, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996508818145833}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nElephants = intvar(0, 999999999)  # Number of elephants made\nTigers = intvar(0, 999999999)  # Number of tigers made\n\n# Constraints\nm = Model()\n\n# Wood constraint: 50g per elephant and 40g per tiger, with 5000g available\nm += 50 * Elephants + 40 * Tigers <= 5000\n# Plastic constraint: 20g per elephant and 30g per tiger, with 4000g available\nm += 20 * Elephants + 30 * Tigers <= 4000\n\n# Objective\n# Maximize profit: $5 per elephant and $4 per tiger\nm.maximize(5 * Elephants + 4 * Tigers)\n"}}
{"-1864917274": {"document": "An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is $30 and the profit per small art piece is $15, how many of each should be made to maximize profit?", "order_mapping": {"large": 0, "small art pieces": 1, "large art piece": 0, "small art piece": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"large art piece": "30", "small art piece": "15"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"large art piece": "4", "small art piece": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"large art piece": "3", "small art piece": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"large art piece": "5", "small art piece": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "large", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "small art piece", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-30.0, -15.0], "constraints": [[4.0, 2.0, 100.0], [3.0, 1.0, 50.0], [5.0, 2.0, 70.0], [-1.0, -0.0, -5.0], [-0.0, -1.0, -5.0]]}, "solution": {"x": 6, "y": 20}, "entities": [{"start": 19, "end": 24, "word": "large", "entity_group": "VAR", "score": 0.9976234012242393}, {"start": 29, "end": 45, "word": "small art pieces", "entity_group": "VAR", "score": 0.9997658936781687}, {"start": 62, "end": 71, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985704122038659}, {"start": 72, "end": 75, "word": "100", "entity_group": "LIMIT", "score": 0.9994180518865401}, {"start": 93, "end": 95, "word": "50", "entity_group": "LIMIT", "score": 0.9997548426062294}, {"start": 119, "end": 121, "word": "70", "entity_group": "LIMIT", "score": 0.9994661641673416}, {"start": 148, "end": 163, "word": "large art piece", "entity_group": "VAR", "score": 0.9994029788230364}, {"start": 173, "end": 174, "word": "4", "entity_group": "PARAM", "score": 0.9996662714294193}, {"start": 192, "end": 193, "word": "3", "entity_group": "PARAM", "score": 0.9997351273257966}, {"start": 217, "end": 218, "word": "5", "entity_group": "PARAM", "score": 0.9995430120192434}, {"start": 245, "end": 260, "word": "small art piece", "entity_group": "VAR", "score": 0.9994029799911884}, {"start": 270, "end": 271, "word": "2", "entity_group": "PARAM", "score": 0.9996657964097058}, {"start": 289, "end": 290, "word": "1", "entity_group": "PARAM", "score": 0.9996834618261717}, {"start": 313, "end": 314, "word": "2", "entity_group": "PARAM", "score": 0.9991253086782643}, {"start": 351, "end": 359, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990250770904888}, {"start": 360, "end": 361, "word": "5", "entity_group": "LIMIT", "score": 0.9996644627970079}, {"start": 376, "end": 381, "word": "large", "entity_group": "VAR", "score": 0.9994372184270358}, {"start": 386, "end": 402, "word": "small art pieces", "entity_group": "VAR", "score": 0.9994946714372231}, {"start": 412, "end": 418, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999885611911278}, {"start": 423, "end": 438, "word": "large art piece", "entity_group": "VAR", "score": 0.9992846157511409}, {"start": 444, "end": 446, "word": "30", "entity_group": "PARAM", "score": 0.9996544601624844}, {"start": 455, "end": 461, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998589518726373}, {"start": 466, "end": 481, "word": "small art piece", "entity_group": "VAR", "score": 0.9990601137148553}, {"start": 487, "end": 489, "word": "15", "entity_group": "PARAM", "score": 0.9996959801756882}, {"start": 527, "end": 535, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761786640213}, {"start": 536, "end": 542, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907902012}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeArtPieces = intvar(0, 999999999)  # Number of large art pieces made\nSmallArtPieces = intvar(0, 999999999)  # Number of small art pieces made\n\n# Constraints\nm = Model()\n\n# Resource constraints based on available materials:\n# Paint constraint:\nm += 4 * LargeArtPieces + 2 * SmallArtPieces <= 100\n# Glitter constraint:\nm += 3 * LargeArtPieces + 1 * SmallArtPieces <= 50\n# Glue constraint:\nm += 5 * LargeArtPieces + 2 * SmallArtPieces <= 70\n\n# Production constraints:\n# At least 5 units of each large and small art pieces must be made:\nm += LargeArtPieces >= 5\nm += SmallArtPieces >= 5\n\n# Objective\n# Maximize profit (Profit per large art piece is $30, profit per small art piece is $15):\nm.maximize(30 * LargeArtPieces + 15 * SmallArtPieces)\n"}}
{"-38441702": {"document": "My family has decided to invest in real state for the first time. Currently, they have $600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than $200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses.  If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?", "order_mapping": {"apartments": 0, "townhouses": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"townhouses": "15%", "apartments": "10%"}}, "const_declarations": [{"type": "sum", "direction": "invest", "limit": "600,000", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "not be greater than", "limit": "200,000", "var": "apartments", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "apartments", "direction": "at least", "param": "half", "y_var": "townhouses", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-0.1, -0.15], "constraints": [[1.0, 1.0, 600000.0], [1.0, 0.0, 200000.0], [-1.0, 0.5, -0.0]]}, "solution": {"x": 200000, "y": 400000}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nApartments = intvar(0, 999999999)  # Money invested in apartments\nTownhouses = intvar(0, 999999999)  # Money invested in townhouses\n\n# Constraints\nm = Model()\n\n# Total investment should not exceed $600,000:\nm += Apartments + Townhouses <= 600000\n# Money invested in apartments must not be greater than $200,000:\nm += Apartments <= 200000\n# Money invested in apartments must be at least half as much as that in townhouses:\nm += Apartments >= 0.5 * Townhouses\n\n# Objective\n# Maximize profit (10% from apartments, 15% from townhouses):\nm.maximize(0.10 * Apartments + 0.15 * Townhouses)\n"}}
{"-1536845616": {"document": "My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is $1 and the cost per pill of Sunny is $3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.", "order_mapping": {"Zodiac": 0, "Sunny": 1}, "obj_declaration": {"type": "objective", "direction": "lowest", "name": "cost", "terms": {"Zodiac": "1", "Sunny": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "5", "terms": {"Zodiac": "1.3", "Sunny": "1.2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "10", "terms": {"Zodiac": "1.5", "Sunny": "5"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 3.0], "constraints": [[-1.3, -1.2, -5.0], [-1.5, -5.0, -10.0]]}, "solution": {"x": 7, "y": 0}, "entities": [{"start": 84, "end": 92, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992047783270686}, {"start": 93, "end": 94, "word": "5", "entity_group": "LIMIT", "score": 0.9997240344824744}, {"start": 111, "end": 113, "word": "10", "entity_group": "LIMIT", "score": 0.999742103725815}, {"start": 186, "end": 192, "word": "Zodiac", "entity_group": "VAR", "score": 0.9992068052258839}, {"start": 197, "end": 202, "word": "Sunny", "entity_group": "VAR", "score": 0.9997121153066367}, {"start": 217, "end": 223, "word": "Zodiac", "entity_group": "VAR", "score": 0.9991176322717867}, {"start": 233, "end": 236, "word": "1.3", "entity_group": "PARAM", "score": 0.9997402669873698}, {"start": 267, "end": 272, "word": "Sunny", "entity_group": "VAR", "score": 0.9995013393877762}, {"start": 282, "end": 285, "word": "1.2", "entity_group": "PARAM", "score": 0.99969165856342}, {"start": 332, "end": 338, "word": "Zodiac", "entity_group": "VAR", "score": 0.9984845285714125}, {"start": 348, "end": 351, "word": "1.5", "entity_group": "PARAM", "score": 0.9997451714790564}, {"start": 380, "end": 385, "word": "Sunny", "entity_group": "VAR", "score": 0.999493991467326}, {"start": 395, "end": 396, "word": "5", "entity_group": "PARAM", "score": 0.9996912684558651}, {"start": 415, "end": 419, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9576031221332816}, {"start": 432, "end": 438, "word": "Zodiac", "entity_group": "VAR", "score": 0.9989861343582807}, {"start": 444, "end": 445, "word": "1", "entity_group": "PARAM", "score": 0.9994005054062746}, {"start": 454, "end": 458, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9867861797042893}, {"start": 471, "end": 476, "word": "Sunny", "entity_group": "VAR", "score": 0.9976695416995389}, {"start": 482, "end": 483, "word": "3", "entity_group": "PARAM", "score": 0.9996642280752047}, {"start": 560, "end": 566, "word": "lowest", "entity_group": "OBJ_DIR", "score": 0.9982348931335567}, {"start": 567, "end": 571, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9875941454542315}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nZodiac = intvar(0, 999999999)  # Number of Zodiac pills\nSunny = intvar(0, 999999999)  # Number of Sunny pills\n\n# Constraints\nm = Model()\n\n# At least 5 grams of Z1 needed:\nm += 1.3 * Zodiac + 1.2 * Sunny >= 5\n# At least 10 grams of D3 needed:\nm += 1.5 * Zodiac + 5 * Sunny >= 10\n\n# Objective\n# Minimize cost (Zodiac costs $1 per pill, Sunny costs $3 per pill):\nm.minimize(1 * Zodiac + 3 * Sunny)\n"}}
{"-495039680": {"document": "A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is $8 and the profit per model plane is $10, how many of each should be made to maximize his profit?", "order_mapping": {"model trains": 0, "planes": 1, "model train": 0, "model plane": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"model train": "8", "model plane": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "120", "terms": {"model train": "3", "model plane": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "90", "terms": {"model train": "3", "model plane": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -10.0], "constraints": [[3.0, 4.0, 120.0], [3.0, 2.0, 90.0]]}, "solution": {"x": 20, "y": 15}, "entities": [{"start": 17, "end": 29, "word": "model trains", "entity_group": "VAR", "score": 0.9999798473341969}, {"start": 34, "end": 40, "word": "planes", "entity_group": "VAR", "score": 0.999503264638026}, {"start": 66, "end": 77, "word": "model train", "entity_group": "VAR", "score": 0.9999844278205059}, {"start": 87, "end": 88, "word": "3", "entity_group": "PARAM", "score": 0.9996728597115966}, {"start": 107, "end": 108, "word": "3", "entity_group": "PARAM", "score": 0.9997258763390987}, {"start": 128, "end": 139, "word": "model plane", "entity_group": "VAR", "score": 0.9999506903207457}, {"start": 149, "end": 150, "word": "4", "entity_group": "PARAM", "score": 0.9996586097337842}, {"start": 169, "end": 170, "word": "2", "entity_group": "PARAM", "score": 0.9997049586776343}, {"start": 205, "end": 214, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987411302907536}, {"start": 215, "end": 218, "word": "120", "entity_group": "LIMIT", "score": 0.9993703442385806}, {"start": 237, "end": 239, "word": "90", "entity_group": "LIMIT", "score": 0.9997127550161895}, {"start": 264, "end": 270, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999429828215788}, {"start": 275, "end": 286, "word": "model train", "entity_group": "VAR", "score": 0.9999468584437045}, {"start": 292, "end": 293, "word": "8", "entity_group": "PARAM", "score": 0.9996675055046893}, {"start": 302, "end": 308, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999400480535883}, {"start": 313, "end": 324, "word": "model plane", "entity_group": "VAR", "score": 0.9998547345702924}, {"start": 330, "end": 332, "word": "10", "entity_group": "PARAM", "score": 0.9996757890317564}, {"start": 370, "end": 378, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997120756680545}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999433779182845}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nModelTrains = intvar(0, 999999999)  # Number of model trains made\nModelPlanes = intvar(0, 999999999)  # Number of model planes made\n\n# Constraints\nm = Model()\n\n# Constraint for wood: 3 units per model train and 4 units per model plane, with 120 units available\nm += 3*ModelTrains + 4*ModelPlanes <= 120\n# Constraint for paint: 3 units per model train and 2 units per model plane, with 90 units available\nm += 3*ModelTrains + 2*ModelPlanes <= 90\n\n# Objective\n# Maximize profit: $8 per model train and $10 per model plane\nm.maximize(8*ModelTrains + 10*ModelPlanes)\n"}}
{"-1713743137": {"document": "An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store $120 in profits, and a laptop will earn $40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs $400 for the store, and a laptop, $100. The store wants to spend at most $6000. Formulate an LP that can be used to maximize the store's profit.", "order_mapping": {"phones": 0, "laptops": 1, "phone": 0, "laptop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"phone": "120", "laptop": "40"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"phone": "1", "laptop": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "80%", "var": "laptops", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "6000", "terms": {"phone": "400", "laptop": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-120.0, -40.0], "constraints": [[1.0, 4.0, 400.0], [0.8, -0.2, -0.0], [400.0, 100.0, 6000.0]]}, "solution": {"x": 0, "y": 60}, "entities": [{"start": 48, "end": 54, "word": "phones", "entity_group": "VAR", "score": 0.9988086254094454}, {"start": 59, "end": 66, "word": "laptops", "entity_group": "VAR", "score": 0.9989193317803248}, {"start": 103, "end": 108, "word": "phone", "entity_group": "VAR", "score": 0.9990950734627442}, {"start": 131, "end": 134, "word": "120", "entity_group": "PARAM", "score": 0.9995889743481721}, {"start": 138, "end": 145, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9998455054296042}, {"start": 154, "end": 160, "word": "laptop", "entity_group": "VAR", "score": 0.9995925082043743}, {"start": 173, "end": 175, "word": "40", "entity_group": "PARAM", "score": 0.999709821545653}, {"start": 180, "end": 185, "word": "phone", "entity_group": "VAR", "score": 0.999736873365529}, {"start": 195, "end": 196, "word": "1", "entity_group": "PARAM", "score": 0.9996321453564855}, {"start": 230, "end": 236, "word": "laptop", "entity_group": "VAR", "score": 0.9996763455669758}, {"start": 246, "end": 247, "word": "4", "entity_group": "PARAM", "score": 0.999651256783526}, {"start": 267, "end": 270, "word": "400", "entity_group": "LIMIT", "score": 0.9987932198005579}, {"start": 295, "end": 304, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989290977683117}, {"start": 329, "end": 335, "word": "phones", "entity_group": "VAR", "score": 0.999766309912281}, {"start": 340, "end": 347, "word": "laptops", "entity_group": "VAR", "score": 0.9990984601044862}, {"start": 378, "end": 386, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989241607133834}, {"start": 387, "end": 391, "word": "80 %", "entity_group": "LIMIT", "score": 0.838071852601608}, {"start": 422, "end": 429, "word": "laptops", "entity_group": "VAR", "score": 0.9997680726556906}, {"start": 444, "end": 449, "word": "phone", "entity_group": "VAR", "score": 0.9997744647708638}, {"start": 458, "end": 461, "word": "400", "entity_group": "PARAM", "score": 0.9995763794246417}, {"start": 484, "end": 490, "word": "laptop", "entity_group": "VAR", "score": 0.9998389029416495}, {"start": 495, "end": 498, "word": "100", "entity_group": "PARAM", "score": 0.9997310699681035}, {"start": 526, "end": 533, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9960312552935868}, {"start": 536, "end": 540, "word": "6000", "entity_group": "LIMIT", "score": 0.9996257024580851}, {"start": 579, "end": 587, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9961797465427689}, {"start": 601, "end": 607, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999043391077075}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPhones = intvar(0, 999999999)  # Number of phones in inventory\nLaptops = intvar(0, 999999999)  # Number of laptops in inventory\n\n# Constraints\nm = Model()\n\n# Total floor space constraint (1 sq ft per phone, 4 sq ft per laptop, 400 sq ft available):\nm += Phones + 4 * Laptops <= 400\n# At least 80% of all appliances in stock must be laptops:\nm += Laptops >= 0.8 * (Phones + Laptops)\n# Spending constraint ($400 per phone, $100 per laptop, $6000 budget):\nm += 400 * Phones + 100 * Laptops <= 6000\n\n# Objective\n# Maximize profit ($120 profit per phone, $40 profit per laptop):\nm.maximize(120 * Phones + 40 * Laptops)\n"}}
{"-382781648": {"document": "A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is $3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is $5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?", "order_mapping": {"regular mix": 0, "sour surprise mix": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"regular mix": "3", "sour surprise mix": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "80", "terms": {"regular mix": "0.8", "sour surprise mix": "0.1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60", "terms": {"regular mix": "0.2", "sour surprise mix": "0.9"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-3.0, -5.0], "constraints": [[0.8, 0.1, 80.0], [0.2, 0.9, 60.0]]}, "solution": {"x": 93, "y": 46}, "entities": [{"start": 75, "end": 86, "word": "regular mix", "entity_group": "VAR", "score": 0.9999092508283228}, {"start": 91, "end": 108, "word": "sour surprise mix", "entity_group": "VAR", "score": 0.9992069613095403}, {"start": 132, "end": 143, "word": "regular mix", "entity_group": "VAR", "score": 0.9999599790729986}, {"start": 153, "end": 156, "word": "0.8", "entity_group": "PARAM", "score": 0.999679129024613}, {"start": 181, "end": 184, "word": "0.2", "entity_group": "PARAM", "score": 0.9996728086498766}, {"start": 208, "end": 214, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999417878119428}, {"start": 235, "end": 246, "word": "regular mix", "entity_group": "VAR", "score": 0.9999794091305675}, {"start": 252, "end": 253, "word": "3", "entity_group": "PARAM", "score": 0.9997560731509162}, {"start": 277, "end": 294, "word": "sour surprise mix", "entity_group": "VAR", "score": 0.9987668551778728}, {"start": 304, "end": 307, "word": "0.1", "entity_group": "PARAM", "score": 0.9997203202993642}, {"start": 332, "end": 335, "word": "0.9", "entity_group": "PARAM", "score": 0.9996728086498783}, {"start": 359, "end": 365, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999457564637637}, {"start": 386, "end": 403, "word": "sour surprise mix", "entity_group": "VAR", "score": 0.9956210875587308}, {"start": 409, "end": 410, "word": "5", "entity_group": "PARAM", "score": 0.9997656676878887}, {"start": 433, "end": 435, "word": "80", "entity_group": "LIMIT", "score": 0.9997207631117903}, {"start": 460, "end": 462, "word": "60", "entity_group": "LIMIT", "score": 0.9997171259188546}, {"start": 480, "end": 489, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989142088823042}, {"start": 558, "end": 566, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996972641091016}, {"start": 567, "end": 574, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9992534865364766}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularMix = intvar(0, 999999999)  # Kilograms of regular mix to be created\nSourSurpriseMix = intvar(0, 999999999)  # Kilograms of sour surprise mix to be created\n\n# Constraints\nm = Model()\n\n# The candy store has 80 kg of regular candy available:\nm += 0.8 * RegularMix + 0.1 * SourSurpriseMix <= 80\n# The candy store has 60 kg of sour candy available:\nm += 0.2 * RegularMix + 0.9 * SourSurpriseMix <= 60\n\n# Objective\n# Maximize profits ($3 per kg of regular mix, $5 per kg of sour surprise mix):\nm.maximize(3 * RegularMix + 5 * SourSurpriseMix)\n"}}
{"1361923588": {"document": "A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost $12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost $15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of $50 per sq. foot while laptops produce a net revenue of $70 per sq. foot. The factory wants to spend at most $5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?", "order_mapping": {"phones": 0, "laptops": 1, "Phones": 0, "phone": 0, "Laptops": 1, "laptop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"Phones": "50", "laptops": "70"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "5000", "terms": {"Phones": "12", "Laptops": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "2000", "terms": {"Phones": "2", "Laptops": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "100", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-50.0, -70.0], "constraints": [[12.0, 15.0, 5000.0], [2.0, 3.0, 2000.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 0, "y": 100}, "entities": [{"start": 21, "end": 24, "word": "has", "entity_group": "CONST_DIR", "score": 0.9867394368375326}, {"start": 25, "end": 28, "word": "100", "entity_group": "LIMIT", "score": 0.9976280896232862}, {"start": 67, "end": 73, "word": "phones", "entity_group": "VAR", "score": 0.9997286654311004}, {"start": 78, "end": 85, "word": "laptops", "entity_group": "VAR", "score": 0.9991353359792485}, {"start": 88, "end": 94, "word": "Phones", "entity_group": "VAR", "score": 0.9994762368331104}, {"start": 103, "end": 104, "word": "2", "entity_group": "PARAM", "score": 0.9997166325069198}, {"start": 131, "end": 133, "word": "12", "entity_group": "PARAM", "score": 0.998625422374842}, {"start": 176, "end": 181, "word": "phone", "entity_group": "VAR", "score": 0.9965897327056342}, {"start": 233, "end": 240, "word": "Laptops", "entity_group": "VAR", "score": 0.999624134150136}, {"start": 249, "end": 250, "word": "3", "entity_group": "PARAM", "score": 0.9997098924369251}, {"start": 277, "end": 279, "word": "15", "entity_group": "PARAM", "score": 0.9986254223748406}, {"start": 322, "end": 328, "word": "laptop", "entity_group": "VAR", "score": 0.9988062839989722}, {"start": 342, "end": 348, "word": "Phones", "entity_group": "VAR", "score": 0.9997217642323969}, {"start": 359, "end": 370, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.931762827150505}, {"start": 376, "end": 378, "word": "50", "entity_group": "PARAM", "score": 0.9994829413402818}, {"start": 399, "end": 406, "word": "laptops", "entity_group": "VAR", "score": 0.9997457266893129}, {"start": 417, "end": 428, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9388359074221126}, {"start": 434, "end": 436, "word": "70", "entity_group": "PARAM", "score": 0.9989397308979773}, {"start": 480, "end": 487, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9947328941888882}, {"start": 490, "end": 494, "word": "5000", "entity_group": "LIMIT", "score": 0.999560832466859}, {"start": 499, "end": 503, "word": "2000", "entity_group": "LIMIT", "score": 0.9996380591525351}, {"start": 559, "end": 567, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9992837442651968}, {"start": 568, "end": 575, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9985232252533116}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPhones = intvar(0, 999999999)  # sq. feet allocated for phone production\nLaptops = intvar(0, 999999999)  # sq. feet allocated for laptop production\n\n# Constraints\nm = Model()\n\n# The factory has 100 sq. feet of space:\nm += Phones + Laptops <= 100\n# The factory wants to spend at most $5000 (Phones cost $12/sq. foot, Laptops cost $15/sq. foot):\nm += 12 * Phones + 15 * Laptops <= 5000\n# The factory has at most 2000 hours of labor (Phones require 2 hours/sq. foot, Laptops require 3 hours/sq. foot):\nm += 2 * Phones + 3 * Laptops <= 2000\n\n# Objective\n# Maximize revenue (Phones produce $50/sq. foot, Laptops produce $70/sq. foot):\nm.maximize(50 * Phones + 70 * Laptops)\n"}}
{"1248158471": {"document": "A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store $2000 to make and yields a profit of $500. Each regular desktop costs the store $1000 to make and yields a profit of $300. The store sells at most 200 desktops each month and wants to spend at most $300000 on making the desktops. How many of each should be made and sold to maximize profit?", "order_mapping": {"premium desktops": 0, "regular desktops": 1, "premium desktop": 0, "regular desktop": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium desktop": "500", "regular desktop": "300"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "300000", "terms": {"premium desktop": "2000", "regular desktop": "1000"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-500.0, -300.0], "constraints": [[1.0, 1.0, 200.0], [2000.0, 1000.0, 300000.0]]}, "solution": {"x": 100, "y": 100}, "entities": [{"start": 26, "end": 42, "word": "premium desktops", "entity_group": "VAR", "score": 0.999854292769213}, {"start": 70, "end": 86, "word": "regular desktops", "entity_group": "VAR", "score": 0.9999410295187571}, {"start": 111, "end": 126, "word": "premium desktop", "entity_group": "VAR", "score": 0.9999863323677912}, {"start": 145, "end": 149, "word": "2000", "entity_group": "PARAM", "score": 0.999634173652747}, {"start": 171, "end": 177, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996237124565953}, {"start": 183, "end": 186, "word": "500", "entity_group": "PARAM", "score": 0.9995789301023612}, {"start": 194, "end": 209, "word": "regular desktop", "entity_group": "VAR", "score": 0.9999831925936051}, {"start": 228, "end": 232, "word": "1000", "entity_group": "PARAM", "score": 0.9996341736527444}, {"start": 254, "end": 260, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994586888686573}, {"start": 266, "end": 269, "word": "300", "entity_group": "PARAM", "score": 0.9997353579211259}, {"start": 288, "end": 295, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983752126516121}, {"start": 296, "end": 299, "word": "200", "entity_group": "LIMIT", "score": 0.9997261471271407}, {"start": 339, "end": 346, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9948853190419948}, {"start": 349, "end": 355, "word": "300000", "entity_group": "LIMIT", "score": 0.999285919688617}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990993506569277}, {"start": 434, "end": 440, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994964043684295}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumDesktops = intvar(0, 999999999)  # Number of premium desktops made and sold\nRegularDesktops = intvar(0, 999999999)  # Number of regular desktops made and sold\n\n# Constraints\nm = Model()\n\n# The store sells at most 200 desktops each month:\nm += PremiumDesktops + RegularDesktops <= 200\n# The store wants to spend at most $300000 on making the desktops:\nm += 2000 * PremiumDesktops + 1000 * RegularDesktops <= 300000\n\n# Objective\n# Maximize profit ($500 profit per premium desktop, $300 profit per regular desktop):\nm.maximize(500 * PremiumDesktops + 300 * RegularDesktops)\n"}}
{"-889698619": {"document": "A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is $5000 and the profit per premium model is $8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?", "order_mapping": {"regular model": 0, "premium model": 1, "regular models": 0, "premium models": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"premium model": "8500", "regular model": "5000"}}, "const_declarations": [{"type": "upperbound", "direction": "most", "limit": "8", "var": "regular models", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "most", "limit": "6", "var": "premium models", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "12", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5000.0, -8500.0], "constraints": [[1.0, 0.0, 8.0], [0.0, 1.0, 6.0], [1.0, 1.0, 12.0]]}, "solution": {"x": 6, "y": 6}, "entities": [{"start": 58, "end": 71, "word": "regular model", "entity_group": "VAR", "score": 0.9999777999282334}, {"start": 78, "end": 91, "word": "premium model", "entity_group": "VAR", "score": 0.9999772760986662}, {"start": 107, "end": 121, "word": "regular models", "entity_group": "VAR", "score": 0.9999822612421131}, {"start": 137, "end": 151, "word": "premium models", "entity_group": "VAR", "score": 0.9999474926966672}, {"start": 166, "end": 172, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999076360183969}, {"start": 177, "end": 190, "word": "regular model", "entity_group": "VAR", "score": 0.9999538830964009}, {"start": 196, "end": 200, "word": "5000", "entity_group": "PARAM", "score": 0.9996156348383466}, {"start": 209, "end": 215, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999382042955723}, {"start": 220, "end": 233, "word": "premium model", "entity_group": "VAR", "score": 0.9999368050622311}, {"start": 239, "end": 243, "word": "8500", "entity_group": "PARAM", "score": 0.9996606555337352}, {"start": 357, "end": 365, "word": "and most", "entity_group": "CONST_DIR", "score": 0.9099497339346283}, {"start": 366, "end": 367, "word": "8", "entity_group": "LIMIT", "score": 0.9995213025718758}, {"start": 368, "end": 382, "word": "regular models", "entity_group": "VAR", "score": 0.9999605727081757}, {"start": 387, "end": 388, "word": "6", "entity_group": "LIMIT", "score": 0.9995000548957457}, {"start": 389, "end": 403, "word": "premium models", "entity_group": "VAR", "score": 0.999971116496752}, {"start": 448, "end": 455, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9961214818739357}, {"start": 459, "end": 461, "word": "12", "entity_group": "LIMIT", "score": 0.9997323853758313}, {"start": 561, "end": 569, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.993210574349281}, {"start": 570, "end": 576, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997678573147079}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularModels = intvar(0, 999999999)  # Number of regular models made per day\nPremiumModels = intvar(0, 999999999)  # Number of premium models made per day\n\n# Constraints\nm = Model()\n\n# Daily demand for regular models is limited to at most 8:\nm += RegularModels <= 8\n# Daily demand for premium models is limited to at most 6:\nm += PremiumModels <= 6\n# Manufacturer can make a maximum of 12 cars of either type per day:\nm += RegularModels + PremiumModels <= 12\n\n# Objective\n# Maximize profit (Profit per regular model is $5000, profit per premium model is $8500):\nm.maximize(5000 * RegularModels + 8500 * PremiumModels)\n"}}
{"1178527024": {"document": "You are designing an office space with two types of desks: long desks and short desks. You can spend at most $2000. Long desks cost $300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?", "order_mapping": {"long desks": 0, "short desks": 1, "Long desks": 0, "Short desks": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "seating availability", "terms": {"Long desks": "6", "Short desks": "2"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "2000", "terms": {"Long desks": "300", "Short desks": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "200", "terms": {"Long desks": "10", "Short desks": "4"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-6.0, -2.0], "constraints": [[300.0, 100.0, 2000.0], [10.0, 4.0, 200.0]]}, "solution": {"x": 0, "y": 20}, "entities": [{"start": 60, "end": 70, "word": "long desks", "entity_group": "VAR", "score": 0.9999472832204167}, {"start": 75, "end": 86, "word": "short desks", "entity_group": "VAR", "score": 0.9999763453594595}, {"start": 103, "end": 110, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9922274905829582}, {"start": 113, "end": 117, "word": "2000", "entity_group": "LIMIT", "score": 0.9996671330076706}, {"start": 120, "end": 130, "word": "Long desks", "entity_group": "VAR", "score": 0.9999567570410204}, {"start": 138, "end": 141, "word": "300", "entity_group": "PARAM", "score": 0.9997248429018382}, {"start": 152, "end": 154, "word": "10", "entity_group": "PARAM", "score": 0.999695080391406}, {"start": 182, "end": 186, "word": "seat", "entity_group": "OBJ_NAME", "score": 0.9876211978768465}, {"start": 187, "end": 188, "word": "6", "entity_group": "PARAM", "score": 0.9978405838157801}, {"start": 201, "end": 212, "word": "Short desks", "entity_group": "VAR", "score": 0.9999513816779275}, {"start": 220, "end": 223, "word": "100", "entity_group": "PARAM", "score": 0.9997078232460014}, {"start": 234, "end": 235, "word": "4", "entity_group": "PARAM", "score": 0.9996951756064324}, {"start": 263, "end": 267, "word": "seat", "entity_group": "OBJ_NAME", "score": 0.9917170188284313}, {"start": 268, "end": 269, "word": "2", "entity_group": "PARAM", "score": 0.9975970567223205}, {"start": 302, "end": 309, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982876109930413}, {"start": 310, "end": 313, "word": "200", "entity_group": "LIMIT", "score": 0.9994757716639853}, {"start": 386, "end": 394, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9943063241337615}, {"start": 399, "end": 419, "word": "seating availability", "entity_group": "OBJ_NAME", "score": 0.990838799389318}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLongDesks = intvar(0, 999999999)  # Number of long desks\nShortDesks = intvar(0, 999999999)  # Number of short desks\n\n# Constraints\nm = Model()\n\n# Cost constraint: at most $2000 can be spent\nm += 300 * LongDesks + 100 * ShortDesks <= 2000\n# Space constraint: at most 200 square feet of desks\nm += 10 * LongDesks + 4 * ShortDesks <= 200\n\n# Objective\n# Maximize seating availability (6 seats per long desk, 2 seats per short desk)\nm.maximize(6 * LongDesks + 2 * ShortDesks)\n"}}
{"-964250787": {"document": "Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost $2 and $3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.", "order_mapping": {"C": 0, "Y.": 1, "Fertilizer C": 0, "Y": 1, "Fertilizer Y": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"Fertilizer C": "2", "Y": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "5", "terms": {"Fertilizer C": "1.5", "Fertilizer Y": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "8", "terms": {"Fertilizer C": "3", "Fertilizer Y": "1"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 3.0], "constraints": [[-1.5, -5.0, -5.0], [-3.0, -1.0, -8.0]]}, "solution": {"x": 4, "y": 0}, "entities": [{"start": 74, "end": 75, "word": "C", "entity_group": "VAR", "score": 0.9995798067806013}, {"start": 80, "end": 82, "word": "Y.", "entity_group": "VAR", "score": 0.9996434643737945}, {"start": 117, "end": 125, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987215720142746}, {"start": 126, "end": 127, "word": "5", "entity_group": "LIMIT", "score": 0.9996786381575679}, {"start": 155, "end": 156, "word": "8", "entity_group": "LIMIT", "score": 0.9996731866566947}, {"start": 180, "end": 192, "word": "Fertilizer C", "entity_group": "VAR", "score": 0.9999517203115565}, {"start": 197, "end": 198, "word": "Y", "entity_group": "VAR", "score": 0.9973622768241079}, {"start": 199, "end": 203, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9925584318337917}, {"start": 206, "end": 207, "word": "2", "entity_group": "PARAM", "score": 0.9983818551634981}, {"start": 214, "end": 215, "word": "3", "entity_group": "PARAM", "score": 0.9993491421017805}, {"start": 238, "end": 250, "word": "Fertilizer C", "entity_group": "VAR", "score": 0.999971130167226}, {"start": 260, "end": 263, "word": "1.5", "entity_group": "PARAM", "score": 0.9996679595615515}, {"start": 298, "end": 299, "word": "3", "entity_group": "PARAM", "score": 0.999727348101365}, {"start": 330, "end": 342, "word": "Fertilizer Y", "entity_group": "VAR", "score": 0.9999308537755908}, {"start": 352, "end": 353, "word": "5", "entity_group": "PARAM", "score": 0.9997133271795954}, {"start": 388, "end": 389, "word": "1", "entity_group": "PARAM", "score": 0.9996899022509768}, {"start": 433, "end": 440, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9853436750898519}, {"start": 441, "end": 445, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.997394287592949}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFertilizerC = intvar(0, 999999999)  # Amount of Fertilizer C in kg\nFertilizerY = intvar(0, 999999999)  # Amount of Fertilizer Y in kg\n\n# Constraints\nm = Model()\n\n# The growth compound must contain at least 5 units of nitrous oxide:\nm += 1.5 * FertilizerC + 5 * FertilizerY >= 5\n# The growth compound must contain at least 8 units of vitamin mix:\nm += 3 * FertilizerC + 1 * FertilizerY >= 8\n\n# Objective\n# Minimize the cost of the compound (Fertilizer C costs $2 per kg and Fertilizer Y costs $3 per kg):\nm.minimize(2 * FertilizerC + 3 * FertilizerY)\n"}}
{"1703643437": {"document": "Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is $4 and the cost per pill for pill B is $5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.", "order_mapping": {"pill A": 0, "pill B.": 1, "pill B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"pill A": "4", "pill B": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "40", "terms": {"pill A": "3", "pill B": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"pill A": "5", "pill B": "1"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [4.0, 5.0], "constraints": [[-3.0, -6.0, -40.0], [-5.0, -1.0, -50.0]]}, "solution": {"x": 10, "y": 2}, "entities": [{"start": 81, "end": 87, "word": "pill A", "entity_group": "VAR", "score": 0.9998633455900742}, {"start": 92, "end": 99, "word": "pill B.", "entity_group": "VAR", "score": 0.9999824139200333}, {"start": 104, "end": 110, "word": "pill A", "entity_group": "VAR", "score": 0.999982868422606}, {"start": 120, "end": 121, "word": "3", "entity_group": "PARAM", "score": 0.9992322443120386}, {"start": 159, "end": 160, "word": "5", "entity_group": "PARAM", "score": 0.9996954939855597}, {"start": 205, "end": 211, "word": "pill B", "entity_group": "VAR", "score": 0.9999600662205093}, {"start": 221, "end": 222, "word": "6", "entity_group": "PARAM", "score": 0.9996035440050047}, {"start": 262, "end": 263, "word": "1", "entity_group": "PARAM", "score": 0.9995735412085291}, {"start": 307, "end": 311, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9957869959008647}, {"start": 325, "end": 331, "word": "pill A", "entity_group": "VAR", "score": 0.9999209815994823}, {"start": 337, "end": 338, "word": "4", "entity_group": "PARAM", "score": 0.9996382348822922}, {"start": 347, "end": 351, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9948657116716881}, {"start": 365, "end": 371, "word": "pill B", "entity_group": "VAR", "score": 0.9996900343976312}, {"start": 377, "end": 378, "word": "5", "entity_group": "PARAM", "score": 0.9996840459345679}, {"start": 427, "end": 435, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988708602472518}, {"start": 436, "end": 438, "word": "40", "entity_group": "LIMIT", "score": 0.9996831488568284}, {"start": 478, "end": 480, "word": "50", "entity_group": "LIMIT", "score": 0.999683592366693}, {"start": 539, "end": 547, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993714307615512}, {"start": 552, "end": 556, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987009321015312}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPillA = intvar(0, 999999999)  # Number of pill A\nPillB = intvar(0, 999999999)  # Number of pill B\n\n# Constraints\nm = Model()\n\n# A patient must consume these two pills to get at least 40 units of sleep-inducing medicine:\nm += 3 * PillA + 6 * PillB >= 40\n# A patient must consume these two pills to get at least 50 units of anti-inflammatory medicine:\nm += 5 * PillA + 1 * PillB >= 50\n\n# Objective\n# Minimize the cost for the patient ($4 per pill A and $5 per pill B):\nm.minimize(4 * PillA + 5 * PillB)\n"}}
{"2051029907": {"document": "A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is $10 and the profit per container of Oil Max Pro is $15. How many containers of each of oil should the car manufacturer make to maximize profit?", "order_mapping": {"Oil Max": 0, "Oil Max Pro": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"Oil Max": "10", "Oil Max Pro": "15"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1345", "terms": {"Oil Max": "46", "Oil Max Pro": "13"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "346", "terms": {"Oil Max": "43", "Oil Max Pro": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "1643", "terms": {"Oil Max": "56", "Oil Max Pro": "45"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-10.0, -15.0], "constraints": [[46.0, 13.0, 1345.0], [43.0, 4.0, 346.0], [56.0, 45.0, 1643.0]]}, "solution": {"x": 0, "y": 36}, "entities": [{"start": 49, "end": 56, "word": "Oil Max", "entity_group": "VAR", "score": 0.999971797038775}, {"start": 61, "end": 72, "word": "Oil Max Pro", "entity_group": "VAR", "score": 0.9970526187919584}, {"start": 90, "end": 97, "word": "Oil Max", "entity_group": "VAR", "score": 0.9999773692732542}, {"start": 107, "end": 109, "word": "46", "entity_group": "PARAM", "score": 0.9996729487206375}, {"start": 133, "end": 135, "word": "43", "entity_group": "PARAM", "score": 0.9997163778826258}, {"start": 161, "end": 163, "word": "56", "entity_group": "PARAM", "score": 0.9996651127029765}, {"start": 201, "end": 212, "word": "Oil Max Pro", "entity_group": "VAR", "score": 0.999553576888817}, {"start": 222, "end": 224, "word": "13", "entity_group": "PARAM", "score": 0.9996811079925577}, {"start": 248, "end": 249, "word": "4", "entity_group": "PARAM", "score": 0.9997165687921306}, {"start": 275, "end": 277, "word": "45", "entity_group": "PARAM", "score": 0.9995669343924654}, {"start": 321, "end": 324, "word": "has", "entity_group": "CONST_DIR", "score": 0.9988599842123325}, {"start": 325, "end": 329, "word": "1345", "entity_group": "LIMIT", "score": 0.998723537766247}, {"start": 353, "end": 356, "word": "346", "entity_group": "LIMIT", "score": 0.9997092963572654}, {"start": 380, "end": 384, "word": "1643", "entity_group": "LIMIT", "score": 0.9995424906951857}, {"start": 425, "end": 431, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993436490907607}, {"start": 449, "end": 456, "word": "Oil Max", "entity_group": "VAR", "score": 0.9999602176395705}, {"start": 462, "end": 464, "word": "10", "entity_group": "PARAM", "score": 0.9995122398440727}, {"start": 473, "end": 479, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998385448969634}, {"start": 497, "end": 508, "word": "Oil Max Pro", "entity_group": "VAR", "score": 0.9992932230184464}, {"start": 514, "end": 516, "word": "15", "entity_group": "PARAM", "score": 0.9995113269841912}, {"start": 590, "end": 598, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991497803669216}, {"start": 599, "end": 605, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997888300651158}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOilMax = intvar(0, 999999999)  # Number of containers of Oil Max\nOilMaxPro = intvar(0, 999999999)  # Number of containers of Oil Max Pro\n\n# Constraints\nm = Model()\n\n# Substance A constraint (1345 grams available):\nm += 46 * OilMax + 13 * OilMaxPro <= 1345\n# Substance B constraint (346 grams available):\nm += 43 * OilMax + 4 * OilMaxPro <= 346\n# Substance C constraint (1643 grams available):\nm += 56 * OilMax + 45 * OilMaxPro <= 1643\n\n# Objective\n# Maximize profit ($10 per container of Oil Max and $15 per container of Oil Max Pro):\nm.maximize(10 * OilMax + 15 * OilMaxPro)\n"}}
{"-22176003": {"document": "A food truck owner can spend at most $20000 on mangos and guavas. A mango costs the food truck owner $5 and a guava costs him $3. Spices are added and each mango is sold for a profit of $3 while each guava is sold for a profit of $4. The owner estimates that at least 100 mangos but at the most 150 are sold each month. He also estimates that the number of guavas sold is at most a third of the mangos sold. How many mangos and guavas should be sold in order to maximize the profit?", "order_mapping": {"mangos": 0, "guavas": 1, "mango": 0, "guava": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"mango": "3", "guava": "4"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "20000", "terms": {"mango": "5", "guava": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "mangos", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at the most", "limit": "150", "var": "mangos", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "guavas", "direction": "at most", "param": "third", "y_var": "mangos", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-3.0, -4.0], "constraints": [[5.0, 3.0, 20000.0], [-1.0, -0.0, -100.0], [1.0, 0.0, 150.0], [-1, 3.0, 0.0]]}, "solution": {"x": 150, "y": 50}, "entities": [{"start": 29, "end": 36, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9940364101999647}, {"start": 39, "end": 44, "word": "20000", "entity_group": "LIMIT", "score": 0.9992031322827685}, {"start": 48, "end": 54, "word": "mangos", "entity_group": "VAR", "score": 0.9996975431782431}, {"start": 59, "end": 65, "word": "guavas", "entity_group": "VAR", "score": 0.9998303011337452}, {"start": 70, "end": 75, "word": "mango", "entity_group": "VAR", "score": 0.999811903097805}, {"start": 105, "end": 106, "word": "5", "entity_group": "PARAM", "score": 0.9997408249571238}, {"start": 113, "end": 118, "word": "guava", "entity_group": "VAR", "score": 0.9997220521832144}, {"start": 131, "end": 132, "word": "3", "entity_group": "PARAM", "score": 0.9997141067807472}, {"start": 161, "end": 166, "word": "mango", "entity_group": "VAR", "score": 0.9997650025010237}, {"start": 181, "end": 187, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999873896368385}, {"start": 193, "end": 194, "word": "3", "entity_group": "PARAM", "score": 0.9996244060171889}, {"start": 206, "end": 211, "word": "guava", "entity_group": "VAR", "score": 0.9997876861677347}, {"start": 226, "end": 232, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995143408813427}, {"start": 238, "end": 239, "word": "4", "entity_group": "PARAM", "score": 0.9996245200862313}, {"start": 267, "end": 275, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989734525150108}, {"start": 276, "end": 279, "word": "100", "entity_group": "LIMIT", "score": 0.999715670358165}, {"start": 280, "end": 286, "word": "mangos", "entity_group": "VAR", "score": 0.9990935426895734}, {"start": 291, "end": 302, "word": "at the most", "entity_group": "CONST_DIR", "score": 0.9883690845395611}, {"start": 303, "end": 306, "word": "150", "entity_group": "LIMIT", "score": 0.9996379789122884}, {"start": 366, "end": 372, "word": "guavas", "entity_group": "VAR", "score": 0.999551588240771}, {"start": 381, "end": 388, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9971217954631566}, {"start": 389, "end": 396, "word": "a third", "entity_group": "PARAM", "score": 0.8536235714765822}, {"start": 404, "end": 410, "word": "mangos", "entity_group": "VAR", "score": 0.9996262718245287}, {"start": 427, "end": 433, "word": "mangos", "entity_group": "VAR", "score": 0.9997486557719706}, {"start": 438, "end": 444, "word": "guavas", "entity_group": "VAR", "score": 0.9996180370724923}, {"start": 472, "end": 480, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970534090490312}, {"start": 485, "end": 491, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999620238983442}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMangos = intvar(0, 999999999)  # Number of mangos sold\nGuavas = intvar(0, 999999999)  # Number of guavas sold\n\n# Constraints\nm = Model()\n\n# The total cost of mangos and guavas should not exceed $20000:\n# Cost of mango is $5 and guava is $3\nm += 5 * Mangos + 3 * Guavas <= 20000\n# At least 100 mangos but at the most 150 are sold each month:\nm += Mangos >= 100\nm += Mangos <= 150\n# The number of guavas sold is at most a third of the mangos sold:\nm += 3 * Guavas <= Mangos\n\n# Objective\n# Maximize profit (Profit per mango is $3 and per guava is $4):\nm.maximize(3 * Mangos + 4 * Guavas)\n"}}
{"-451843339": {"document": "A nutritionist is making a special vitamin mix using two drinks: A and B. The vitamin mix must contain at least 150 units of Vitamin A, at least 300 units of vitamin D, and at most 400 units of vitamin E. A cup of drink A contains 8 units of Vitamin A, 6 units of Vitamin D, 10 units of Vitamin E, and 4 units of Vitamin K. A cup of drink B contains 15 units of Vitamin A, 2 units of Vitamin D, 20 units of Vitamin E, and 12 units of Vitamin K. How many cups of each drink should be used to make the vitamin mix in order to minimize the amount of Vitamin K?", "order_mapping": {"A": 0, "B.": 1, "drink A": 0, "drink B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of Vitamin K", "terms": {"drink B": "12", "drink A": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"drink A": "8", "drink B": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"drink A": "6", "drink B": "2"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "400", "terms": {"drink A": "10", "drink B": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [4.0, 12.0], "constraints": [[-8.0, -15.0, -150.0], [-6.0, -2.0, -300.0], [10.0, 20.0, 400.0]]}, "solution": null, "entities": [{"start": 66, "end": 67, "word": "A", "entity_group": "VAR", "score": 0.9967790521460731}, {"start": 72, "end": 74, "word": "B.", "entity_group": "VAR", "score": 0.9995886798193012}, {"start": 104, "end": 112, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984644128181548}, {"start": 113, "end": 116, "word": "150", "entity_group": "LIMIT", "score": 0.9994166953601058}, {"start": 138, "end": 146, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986820623159223}, {"start": 147, "end": 150, "word": "300", "entity_group": "LIMIT", "score": 0.9996466076266786}, {"start": 176, "end": 183, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990109825760367}, {"start": 184, "end": 187, "word": "400", "entity_group": "LIMIT", "score": 0.9996065291016852}, {"start": 217, "end": 224, "word": "drink A", "entity_group": "VAR", "score": 0.9997509788744161}, {"start": 234, "end": 235, "word": "8", "entity_group": "PARAM", "score": 0.9991643119825919}, {"start": 257, "end": 258, "word": "6", "entity_group": "PARAM", "score": 0.9997132129963291}, {"start": 280, "end": 282, "word": "10", "entity_group": "PARAM", "score": 0.9997067912846567}, {"start": 308, "end": 309, "word": "4", "entity_group": "PARAM", "score": 0.9996466270246525}, {"start": 319, "end": 329, "word": "Vitamin K.", "entity_group": "OBJ_NAME", "score": 0.986108128263638}, {"start": 339, "end": 346, "word": "drink B", "entity_group": "VAR", "score": 0.9998330908771484}, {"start": 356, "end": 358, "word": "15", "entity_group": "PARAM", "score": 0.9994003570142747}, {"start": 380, "end": 381, "word": "2", "entity_group": "PARAM", "score": 0.9997132133081074}, {"start": 403, "end": 405, "word": "20", "entity_group": "PARAM", "score": 0.9997067912846564}, {"start": 431, "end": 433, "word": "12", "entity_group": "PARAM", "score": 0.9995801589094977}, {"start": 443, "end": 453, "word": "Vitamin K.", "entity_group": "OBJ_NAME", "score": 0.9873954877546955}, {"start": 533, "end": 541, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9835774791635886}, {"start": 546, "end": 565, "word": "amount of Vitamin K", "entity_group": "OBJ_NAME", "score": 0.9759274904914969}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDrinkA = intvar(0, 999999999)  # Number of cups of drink A\nDrinkB = intvar(0, 999999999)  # Number of cups of drink B\n\n# Constraints\nm = Model()\n\n# The vitamin mix must contain at least 150 units of Vitamin A:\nm += 8 * DrinkA + 15 * DrinkB >= 150\n# The vitamin mix must contain at least 300 units of Vitamin D:\nm += 6 * DrinkA + 2 * DrinkB >= 300\n# The vitamin mix must contain at most 400 units of Vitamin E:\nm += 10 * DrinkA + 20 * DrinkB <= 400\n\n# Objective\n# Minimize the amount of Vitamin K (4 units in drink A, 12 units in drink B):\nm.minimize(4 * DrinkA + 12 * DrinkB)\n"}}
{"118256182": {"document": "An ice cream store makes chocolate and vanilla ice cream by the gallon. In a week, they must make at least 5 gallons of each type but at most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream. It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available to make ice cream. In addition at least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time. If the profit per gallon of chocolate ice cream is $200 and the profit per gallon of vanilla ice cream is $300, how many gallons of each should be made to maximize profit?", "order_mapping": {"chocolate": 0, "vanilla ice cream": 1, "chocolate ice cream": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"vanilla ice cream": "300", "chocolate ice cream": "200"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5", "var": "chocolate ice cream", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "vanilla ice cream", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "chocolate ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "8", "var": "vanilla ice cream", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "30", "terms": {"chocolate ice cream": "1", "vanilla ice cream": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "6", "terms": {"chocolate ice cream": "1", "vanilla ice cream": "2"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-200.0, -300.0], "constraints": [[-1.0, -0.0, -5.0], [-0.0, -1.0, -5.0], [1.0, 0.0, 10.0], [0.0, 1.0, 8.0], [1.0, 2.0, 30.0], [-1.0, -2.0, -6.0]]}, "solution": {"x": 10, "y": 8}, "entities": [{"start": 25, "end": 34, "word": "chocolate", "entity_group": "VAR", "score": 0.998425744106124}, {"start": 39, "end": 56, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.9993300163226615}, {"start": 100, "end": 108, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990113314502347}, {"start": 109, "end": 110, "word": "5", "entity_group": "LIMIT", "score": 0.9996635448545054}, {"start": 136, "end": 143, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987812945486926}, {"start": 144, "end": 146, "word": "10", "entity_group": "LIMIT", "score": 0.9997062243938963}, {"start": 158, "end": 177, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.998996957010592}, {"start": 182, "end": 189, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987461523174571}, {"start": 190, "end": 191, "word": "8", "entity_group": "LIMIT", "score": 0.9996661509733165}, {"start": 203, "end": 220, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.999408515752455}, {"start": 232, "end": 233, "word": "1", "entity_group": "PARAM", "score": 0.9981860691977542}, {"start": 262, "end": 281, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.9987473552142592}, {"start": 286, "end": 287, "word": "2", "entity_group": "PARAM", "score": 0.9996757719284202}, {"start": 317, "end": 334, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.999251576147959}, {"start": 349, "end": 351, "word": "30", "entity_group": "LIMIT", "score": 0.9995170715857944}, {"start": 362, "end": 371, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978779646020393}, {"start": 404, "end": 412, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988568723805913}, {"start": 413, "end": 414, "word": "6", "entity_group": "LIMIT", "score": 0.999749256321305}, {"start": 439, "end": 440, "word": "1", "entity_group": "PARAM", "score": 0.9997223178282449}, {"start": 456, "end": 475, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.9994523615048959}, {"start": 480, "end": 481, "word": "2", "entity_group": "PARAM", "score": 0.9996851876135318}, {"start": 489, "end": 506, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.9987130761748292}, {"start": 528, "end": 534, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998861504767236}, {"start": 549, "end": 568, "word": "chocolate ice cream", "entity_group": "VAR", "score": 0.9994907160453318}, {"start": 574, "end": 577, "word": "200", "entity_group": "PARAM", "score": 0.9990988680644499}, {"start": 586, "end": 592, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999942126875044}, {"start": 607, "end": 624, "word": "vanilla ice cream", "entity_group": "VAR", "score": 0.9995256948888206}, {"start": 630, "end": 633, "word": "300", "entity_group": "PARAM", "score": 0.9995906722814218}, {"start": 679, "end": 687, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 688, "end": 694, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateIceCream = intvar(0, 999999999)  # Gallons of chocolate ice cream made weekly\nVanillaIceCream = intvar(0, 999999999)  # Gallons of vanilla ice cream made weekly\n\n# Constraints\nm = Model()\n\n# At least 5 gallons of each type must be made weekly:\nm += ChocolateIceCream >= 5\nm += VanillaIceCream >= 5\n\n# At most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream can be made weekly:\nm += ChocolateIceCream <= 10\nm += VanillaIceCream <= 8\n\n# It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available:\nm += 1 * ChocolateIceCream + 2 * VanillaIceCream <= 30\n\n# At least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time:\n# This constraint is interpreted as needing at least 6 worker-hours, given the production hours already modeled.\n# If this interpretation is incorrect, and it's strictly about the number of workers regardless of hours, it would not change the model as the hours constraint already captures the labor input.\n\n# Objective\n# Maximize profit ($200 per gallon of chocolate ice cream and $300 per gallon of vanilla ice cream):\nm.maximize(200 * ChocolateIceCream + 300 * VanillaIceCream)\n"}}
{"811663079": {"document": "Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is $500 and the profit per acre of cucumbers is $650, how many acres of each should he grow to maximize his profit? What is that profit?", "order_mapping": {"potatoes": 0, "cucumbers": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"potatoes": "500", "cucumbers": "650"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "50", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "potatoes", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "cucumbers", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "cucumbers", "direction": "at most", "param": "twice", "y_var": "potatoes", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "cucumbers", "direction": "more than", "y_var": "potatoes", "operator": "GREATER"}], "canonical": {"objective": [-500.0, -650.0], "constraints": [[1.0, 1.0, 50.0], [-1.0, -0.0, -12.0], [-0.0, -1.0, -15.0], [-2.0, 1.0, 0.0], [1.0, -1.0, -1e-06]]}, "solution": {"x": 17, "y": 33}, "entities": [{"start": 9, "end": 11, "word": "50", "entity_group": "LIMIT", "score": 0.9997337863100125}, {"start": 26, "end": 35, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985035630383018}, {"start": 44, "end": 52, "word": "potatoes", "entity_group": "VAR", "score": 0.9976850441934529}, {"start": 57, "end": 66, "word": "cucumbers", "entity_group": "VAR", "score": 0.9975738002342343}, {"start": 118, "end": 126, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999087838089727}, {"start": 127, "end": 129, "word": "12", "entity_group": "LIMIT", "score": 0.9997609703022919}, {"start": 139, "end": 147, "word": "potatoes", "entity_group": "VAR", "score": 0.9993022964599664}, {"start": 152, "end": 154, "word": "15", "entity_group": "LIMIT", "score": 0.9997074304643232}, {"start": 164, "end": 173, "word": "cucumbers", "entity_group": "VAR", "score": 0.9996395234955046}, {"start": 218, "end": 222, "word": "more", "entity_group": "CONST_DIR", "score": 0.9961821766165688}, {"start": 223, "end": 232, "word": "cucumbers", "entity_group": "VAR", "score": 0.9978454506996192}, {"start": 238, "end": 246, "word": "potatoes", "entity_group": "VAR", "score": 0.9996533642925276}, {"start": 290, "end": 297, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9963435459434564}, {"start": 298, "end": 303, "word": "twice", "entity_group": "PARAM", "score": 0.993649643402578}, {"start": 318, "end": 327, "word": "cucumbers", "entity_group": "VAR", "score": 0.9993871924872789}, {"start": 331, "end": 339, "word": "potatoes", "entity_group": "VAR", "score": 0.9996695120986885}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998679146680759}, {"start": 368, "end": 376, "word": "potatoes", "entity_group": "VAR", "score": 0.9991322598857045}, {"start": 382, "end": 385, "word": "500", "entity_group": "PARAM", "score": 0.9992431451996653}, {"start": 394, "end": 400, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999288749231129}, {"start": 413, "end": 422, "word": "cucumbers", "entity_group": "VAR", "score": 0.9994301095794504}, {"start": 428, "end": 431, "word": "650", "entity_group": "PARAM", "score": 0.9995941446292964}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997250054754346}, {"start": 488, "end": 494, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999965413685903}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPotatoes = intvar(0, 999999999)  # Number of acres for potatoes\nCucumbers = intvar(0, 999999999)  # Number of acres for cucumbers\n\n# Constraints\nm = Model()\n\n# Total acres used should not exceed 50:\nm += Potatoes + Cucumbers <= 50\n# At least 12 acres of potatoes:\nm += Potatoes >= 12\n# At least 15 acres of cucumbers:\nm += Cucumbers >= 15\n# Cucumbers should not be more than twice the amount of potatoes:\nm += Cucumbers <= 2 * Potatoes\n# Prefer to grow more cucumbers than potatoes:\nm += Cucumbers > Potatoes\n\n# Objective\n# Maximize profit ($500 per acre of potatoes and $650 per acre of cucumbers):\nm.maximize(500 * Potatoes + 650 * Cucumbers)\n"}}
{"-2081282851": {"document": "A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000  square feet of vinyl  can be produced weekly. If a square foot of hardwood flooring yields a profit of $2.5 and a square foot of vinyl planks produces a $3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?", "order_mapping": {"hardwood": 0, "vinyl planks": 1, "vinyl  ": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hardwood": "2.5", "vinyl planks": "3"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "20,000", "var": "hardwood", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10,000", "var": "vinyl planks", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "60,000", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "50,000", "var": "hardwood", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "30,000", "var": "vinyl  ", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.5, -3.0], "constraints": [[-1.0, -0.0, -20000.0], [-0.0, -1.0, -10000.0], [-1.0, -1.0, -60000.0], [1.0, 0.0, 50000.0], [0.0, 1.0, 30000.0]]}, "solution": {"x": 50000, "y": 30000}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHardwood = intvar(0, 999999999)  # Square feet of hardwood produced weekly\nVinylPlanks = intvar(0, 999999999)  # Square feet of vinyl planks produced weekly\n\n# Constraints\nm = Model()\n\n# Expected demand constraints\nm += Hardwood >= 20000  # At least 20,000 square feet of hardwood\nm += VinylPlanks >= 10000  # At least 10,000 square feet of vinyl planks\n\n# Shipping contract constraint\nm += Hardwood + VinylPlanks >= 60000  # At least 60,000 square feet of flooring shipped weekly\n\n# Production capacity constraints\nm += Hardwood <= 50000  # No more than 50,000 square feet of hardwood\nm += VinylPlanks <= 30000  # No more than 30,000 square feet of vinyl planks\n\n# Objective\n# Maximize profit ($2.5 profit per square foot of hardwood, $3 profit per square foot of vinyl planks):\nm.maximize(2.5 * Hardwood + 3 * VinylPlanks)\n"}}
{"2017354998": {"document": "A berry farmer has two farms, an old and new farm, where he grows raspberries, blueberries, and strawberries. He has a contract to provide a local store with 10 kg of raspberries, 9 kg of blueberries, and 15 kg of strawberries. At his old farm, it cost $300 to operate per day and he can harvest and deliver 2 kg of raspberries, 2 kg of blueberries, and 4 kg of strawberries in a day. At his new farm, it costs $200 to operate per day and he can harvest and deliver 4 kg of raspberries, 1 kg of blueberries, and 2 kg of strawberries in a day. Formulate a LP to meet his contract while minimizing his cost.", "order_mapping": {"old": 0, "new farm": 1, "old farm": 0}, "obj_declaration": {"type": "objective", "direction": "minimizing", "name": "cost", "terms": {"old farm": "300", "new farm": "200"}}, "const_declarations": [{"type": "linear", "direction": "provide", "limit": "10", "terms": {"old farm": "2", "new farm": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "9", "terms": {"old farm": "2", "new farm": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "provide", "limit": "15", "terms": {"old farm": "4", "new farm": "2"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [300.0, 200.0], "constraints": [[-2.0, -4.0, -10.0], [-2.0, -1.0, -9.0], [-4.0, -2.0, -15.0]]}, "solution": {"x": 4, "y": 1}, "entities": [{"start": 34, "end": 37, "word": "old", "entity_group": "VAR", "score": 0.9990905749773402}, {"start": 42, "end": 50, "word": "new farm", "entity_group": "VAR", "score": 0.9998950035442723}, {"start": 136, "end": 143, "word": "provide", "entity_group": "CONST_DIR", "score": 0.9932757192602256}, {"start": 163, "end": 165, "word": "10", "entity_group": "LIMIT", "score": 0.9995904435557937}, {"start": 186, "end": 187, "word": "9", "entity_group": "LIMIT", "score": 0.9996970219317772}, {"start": 212, "end": 214, "word": "15", "entity_group": "LIMIT", "score": 0.9993870588394898}, {"start": 243, "end": 251, "word": "old farm", "entity_group": "VAR", "score": 0.9998610156855418}, {"start": 257, "end": 261, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9983846726986749}, {"start": 264, "end": 267, "word": "300", "entity_group": "PARAM", "score": 0.9995831123409424}, {"start": 318, "end": 319, "word": "2", "entity_group": "PARAM", "score": 0.9997210536520825}, {"start": 340, "end": 341, "word": "2", "entity_group": "PARAM", "score": 0.9997064961565295}, {"start": 366, "end": 367, "word": "4", "entity_group": "PARAM", "score": 0.9996137703003658}, {"start": 405, "end": 413, "word": "new farm", "entity_group": "VAR", "score": 0.9996958670053244}, {"start": 419, "end": 424, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998981889142169}, {"start": 427, "end": 430, "word": "200", "entity_group": "PARAM", "score": 0.999590127583009}, {"start": 481, "end": 482, "word": "4", "entity_group": "PARAM", "score": 0.9997210780307216}, {"start": 503, "end": 504, "word": "1", "entity_group": "PARAM", "score": 0.9997064936736213}, {"start": 529, "end": 530, "word": "2", "entity_group": "PARAM", "score": 0.9996137345012254}, {"start": 603, "end": 613, "word": "minimizing", "entity_group": "OBJ_DIR", "score": 0.9989358426093664}, {"start": 618, "end": 622, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9991936197214282}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOldFarmDays = intvar(0, 999999999)  # Number of days the old farm operates\nNewFarmDays = intvar(0, 999999999)  # Number of days the new farm operates\n\n# Constraints\nm = Model()\n\n# To meet the contract for raspberries (10 kg):\nm += 2 * OldFarmDays + 4 * NewFarmDays >= 10\n# To meet the contract for blueberries (9 kg):\nm += 2 * OldFarmDays + 1 * NewFarmDays >= 9\n# To meet the contract for strawberries (15 kg):\nm += 4 * OldFarmDays + 2 * NewFarmDays >= 15\n\n# Objective\n# Minimize cost ($300 per day for the old farm, $200 per day for the new farm):\nm.minimize(300 * OldFarmDays + 200 * NewFarmDays)\n"}}
{"-816513289": {"document": "Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice.  Assume that each serving of Rice costs $3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs $2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.", "order_mapping": {"Kebabs": 0, "Rice": 1, "Kebab": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"Rice": "3", "Kebab": "2"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "2200", "terms": {"Rice": "300", "Kebab": "200"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"Rice": "4.5", "Kebab": "4"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 3.0], "constraints": [[-200.0, -300.0, -2200.0], [-4.0, -4.5, -30.0]]}, "solution": {"x": 2, "y": 6}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRice = intvar(0, 999999999)  # Number of servings of Rice\nKebab = intvar(0, 999999999)  # Number of servings of Kebab\n\n# Constraints\nm = Model()\n\n# Ensure meals have at least 2200 calories per day:\nm += 300 * Rice + 200 * Kebab >= 2200\n# Ensure meals have at least 30 grams of protein per day:\nm += 4.5 * Rice + 4 * Kebab >= 30\n\n# Objective\n# Minimize the cost of the diet:\nm.minimize(3 * Rice + 2 * Kebab)\n"}}
{"-1296070793": {"document": "A company sells custom scooters and bikes for customers. The profit per scooter is $200 and the profit per bike is $300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?", "order_mapping": {"scooters": 0, "bikes": 1, "scooter": 0, "bike": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"scooter": "200", "bike": "300"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"scooter": "2", "bike": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "6000", "terms": {"scooter": "3", "bike": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-200.0, -300.0], "constraints": [[2.0, 4.0, 5000.0], [3.0, 5.0, 6000.0]]}, "solution": {"x": 2000, "y": 0}, "entities": [{"start": 23, "end": 31, "word": "scooters", "entity_group": "VAR", "score": 0.9998083489255282}, {"start": 36, "end": 41, "word": "bikes", "entity_group": "VAR", "score": 0.9991036979184815}, {"start": 62, "end": 68, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998035290447516}, {"start": 73, "end": 80, "word": "scooter", "entity_group": "VAR", "score": 0.9993965735993536}, {"start": 86, "end": 89, "word": "200", "entity_group": "PARAM", "score": 0.9991616094174269}, {"start": 98, "end": 104, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999079833174496}, {"start": 109, "end": 113, "word": "bike", "entity_group": "VAR", "score": 0.9989912988542782}, {"start": 119, "end": 122, "word": "300", "entity_group": "PARAM", "score": 0.9995314226545844}, {"start": 201, "end": 208, "word": "scooter", "entity_group": "VAR", "score": 0.9996659929090803}, {"start": 215, "end": 216, "word": "2", "entity_group": "PARAM", "score": 0.9992201093799037}, {"start": 248, "end": 249, "word": "3", "entity_group": "PARAM", "score": 0.9996632174396077}, {"start": 289, "end": 293, "word": "bike", "entity_group": "VAR", "score": 0.9997262798019442}, {"start": 300, "end": 301, "word": "4", "entity_group": "PARAM", "score": 0.9990494152548641}, {"start": 333, "end": 334, "word": "5", "entity_group": "PARAM", "score": 0.9996631982377622}, {"start": 391, "end": 395, "word": "5000", "entity_group": "LIMIT", "score": 0.9995639357870595}, {"start": 402, "end": 411, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992342190511416}, {"start": 435, "end": 439, "word": "6000", "entity_group": "LIMIT", "score": 0.9996191054972258}, {"start": 446, "end": 455, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986606788149364}, {"start": 536, "end": 544, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990102089885006}, {"start": 545, "end": 551, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998030705952816}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nScooters = intvar(0, 999999999)  # Number of scooters made per month\nBikes = intvar(0, 999999999)  # Number of bikes made per month\n\n# Constraints\nm = Model()\n\n# Design team hours constraint (5000 hours available per month):\nm += 2 * Scooters + 4 * Bikes <= 5000\n# Engineering team hours constraint (6000 hours available per month):\nm += 3 * Scooters + 5 * Bikes <= 6000\n\n# Objective\n# Maximize profit ($200 profit per scooter and $300 profit per bike):\nm.maximize(200 * Scooters + 300 * Bikes)\n"}}
{"-1965714403": {"document": "John has a 300 acre berry farm on which to plant blueberries and raspberries. John has $10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and $22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and $25 in watering costs is required. The profit per acre of blueberries is $56 and the profit per acre of raspberries is $75. Formulate an LP problem in order to maximize profit.", "order_mapping": {"blueberries": 0, "raspberries.": 1, "raspberries,": 1, "raspberries": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"blueberries": "56", "raspberries": "75"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "10000", "terms": {"blueberries": "22", "raspberries,": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "575", "terms": {"blueberries": "6", "raspberries,": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-56.0, -75.0], "constraints": [[1.0, 1.0, 300.0], [22.0, 25.0, 10000.0], [6.0, 3.0, 575.0]]}, "solution": {"x": 0, "y": 191}, "entities": [{"start": 5, "end": 8, "word": "has", "entity_group": "CONST_DIR", "score": 0.9951089685728154}, {"start": 11, "end": 14, "word": "300", "entity_group": "LIMIT", "score": 0.9995792771629878}, {"start": 49, "end": 60, "word": "blueberries", "entity_group": "VAR", "score": 0.9969293991241586}, {"start": 65, "end": 76, "word": "raspberries", "entity_group": "VAR", "score": 0.9991890991103007}, {"start": 90, "end": 95, "word": "10000", "entity_group": "LIMIT", "score": 0.9997089596066178}, {"start": 121, "end": 124, "word": "575", "entity_group": "LIMIT", "score": 0.9996434056523928}, {"start": 145, "end": 154, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995039315492684}, {"start": 174, "end": 185, "word": "blueberries", "entity_group": "VAR", "score": 0.9993922654313372}, {"start": 188, "end": 189, "word": "6", "entity_group": "PARAM", "score": 0.9997194135397572}, {"start": 216, "end": 218, "word": "22", "entity_group": "PARAM", "score": 0.9994653367666616}, {"start": 268, "end": 279, "word": "raspberries", "entity_group": "VAR", "score": 0.9993414488873216}, {"start": 282, "end": 283, "word": "3", "entity_group": "PARAM", "score": 0.9997194135689936}, {"start": 310, "end": 312, "word": "25", "entity_group": "PARAM", "score": 0.9994653368904901}, {"start": 349, "end": 355, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999314063267414}, {"start": 368, "end": 379, "word": "blueberries", "entity_group": "VAR", "score": 0.9992492858480669}, {"start": 385, "end": 387, "word": "56", "entity_group": "PARAM", "score": 0.9992430239354045}, {"start": 396, "end": 402, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999351204611837}, {"start": 415, "end": 426, "word": "raspberries", "entity_group": "VAR", "score": 0.9987565535013134}, {"start": 432, "end": 434, "word": "75", "entity_group": "PARAM", "score": 0.999597835294383}, {"start": 473, "end": 481, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9875922319642492}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9971200941451337}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueberries = intvar(0, 999999999)  # Acres of blueberries\nRaspberries = intvar(0, 999999999)  # Acres of raspberries\n\n# Constraints\nm = Model()\n\n# Total acres planted should not exceed 300:\nm += Blueberries + Raspberries <= 300\n# Watering costs should not exceed $10000 (22 per acre for blueberries, 25 per acre for raspberries):\nm += 22 * Blueberries + 25 * Raspberries <= 10000\n# Labor availability should not exceed 575 days (6 days per acre for blueberries, 3 days per acre for raspberries):\nm += 6 * Blueberries + 3 * Raspberries <= 575\n\n# Objective\n# Maximize profit (56 per acre for blueberries, 75 per acre for raspberries):\nm.maximize(56 * Blueberries + 75 * Raspberries)\n"}}
{"1204240087": {"document": "A man  only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost $3 per serving and fruits cost $5 per serving, how many servings of each should he eat to minimize his cost?", "order_mapping": {"vegetable": 0, "fruits": 1, "vegetables": 0, "fruit": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"vegetables": "3", "fruits": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"vegetables": "2", "fruit": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30", "terms": {"vegetables": "3", "fruit": "1"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [3.0, 5.0], "constraints": [[-2.0, -4.0, -20.0], [-3.0, -1.0, -30.0]]}, "solution": {"x": 10, "y": 0}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVegetables = intvar(0, 999999999)  # Number of servings of vegetables\nFruits = intvar(0, 999999999)  # Number of servings of fruits\n\n# Constraints\nm = Model()\n\n# He wants to eat at least 20 units of vitamins:\nm += 2 * Vegetables + 4 * Fruits >= 20\n# He wants to eat at least 30 units of minerals:\nm += 3 * Vegetables + 1 * Fruits >= 30\n\n# Objective\n# Minimize cost ($3 per serving of vegetables and $5 per serving of fruits):\nm.minimize(3 * Vegetables + 5 * Fruits)\n\n"}}
{"-864701644": {"document": "A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $20 and $40 respectively for a batch of bagels and a batch of croissants.", "order_mapping": {"bagels": 0, "croissants": 1}, "obj_declaration": {"type": "objective", "direction": "maximum", "name": "profit", "terms": {"bagels": "20", "croissants": "40"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "70", "terms": {"bagels": "2", "croissants": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "32", "terms": {"bagels": "0.25", "croissants": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-20.0, -40.0], "constraints": [[2.0, 1.0, 70.0], [0.25, 2.0, 32.0]]}, "solution": {"x": 29, "y": 12}, "entities": [{"start": 15, "end": 21, "word": "bagels", "entity_group": "VAR", "score": 0.9993864304458301}, {"start": 26, "end": 36, "word": "croissants", "entity_group": "VAR", "score": 0.9995877399002397}, {"start": 50, "end": 56, "word": "bagels", "entity_group": "VAR", "score": 0.9996309705323607}, {"start": 75, "end": 76, "word": "2", "entity_group": "PARAM", "score": 0.9997418955927512}, {"start": 100, "end": 104, "word": "0.25", "entity_group": "PARAM", "score": 0.9996921281244606}, {"start": 144, "end": 154, "word": "croissants", "entity_group": "VAR", "score": 0.9967391161358492}, {"start": 196, "end": 197, "word": "1", "entity_group": "PARAM", "score": 0.9996214141233472}, {"start": 228, "end": 229, "word": "2", "entity_group": "PARAM", "score": 0.9996572361458602}, {"start": 284, "end": 291, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998643565102482}, {"start": 292, "end": 294, "word": "70", "entity_group": "LIMIT", "score": 0.9997529970561828}, {"start": 328, "end": 330, "word": "32", "entity_group": "LIMIT", "score": 0.9994268384199043}, {"start": 349, "end": 358, "word": "available", "entity_group": "CONST_DIR", "score": 0.9979162033132587}, {"start": 408, "end": 415, "word": "maximum", "entity_group": "OBJ_DIR", "score": 0.98919106457651}, {"start": 416, "end": 422, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999949327843759}, {"start": 460, "end": 466, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997345415514082}, {"start": 482, "end": 484, "word": "20", "entity_group": "PARAM", "score": 0.9986101411564833}, {"start": 491, "end": 493, "word": "40", "entity_group": "PARAM", "score": 0.9997285019291788}, {"start": 522, "end": 528, "word": "bagels", "entity_group": "VAR", "score": 0.998930468366678}, {"start": 544, "end": 554, "word": "croissants", "entity_group": "VAR", "score": 0.9995706201430855}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBagels = intvar(0, 999999999)  # Number of batches of bagels\nCroissants = intvar(0, 999999999)  # Number of batches of croissants\n\n# Constraints\nm = Model()\n\n# Oven time constraint: 2 hours for bagels and 1 hour for croissants, at most 70 hours available\nm += 2*Bagels + 1*Croissants <= 70\n# Pastry chef time constraint: 0.25 hours for bagels and 2 hours for croissants, at most 32 hours available\nm += 0.25*Bagels + 2*Croissants <= 32\n\n# Objective\n# Maximize profit: $20 per batch of bagels and $40 per batch of croissants\nm.maximize(20*Bagels + 40*Croissants)\n"}}
{"207812519": {"document": "A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs $300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs $600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.", "order_mapping": {"factory 1": 0, "factory 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"factory 1": "300", "factory 2": "600"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20", "terms": {"factory 1": "5", "factory 2": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "5", "terms": {"factory 1": "6", "factory 2": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "15", "terms": {"factory 1": "3"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [300.0, 600.0], "constraints": [[-5.0, -10.0, -20.0], [-6.0, -10.0, -5.0], [-3.0, -0.0, -15.0]]}, "solution": {"x": 5, "y": 0}, "entities": [{"start": 148, "end": 157, "word": "factory 1", "entity_group": "VAR", "score": 0.9999098067755001}, {"start": 169, "end": 174, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9991574291055161}, {"start": 177, "end": 180, "word": "300", "entity_group": "PARAM", "score": 0.9993731235209242}, {"start": 194, "end": 195, "word": "5", "entity_group": "PARAM", "score": 0.9997272391969366}, {"start": 216, "end": 217, "word": "6", "entity_group": "PARAM", "score": 0.9995702546143024}, {"start": 242, "end": 243, "word": "3", "entity_group": "PARAM", "score": 0.9997099092463605}, {"start": 265, "end": 274, "word": "factory 2", "entity_group": "VAR", "score": 0.9999059574593384}, {"start": 286, "end": 291, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.999148569168857}, {"start": 294, "end": 297, "word": "600", "entity_group": "PARAM", "score": 0.9993731224026806}, {"start": 311, "end": 313, "word": "10", "entity_group": "PARAM", "score": 0.9997401132529665}, {"start": 336, "end": 338, "word": "10", "entity_group": "PARAM", "score": 0.9994462333692801}, {"start": 412, "end": 420, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999080088439903}, {"start": 421, "end": 423, "word": "20", "entity_group": "LIMIT", "score": 0.9996431022437912}, {"start": 444, "end": 445, "word": "5", "entity_group": "LIMIT", "score": 0.9995479997465434}, {"start": 470, "end": 472, "word": "15", "entity_group": "LIMIT", "score": 0.9996856149925826}, {"start": 615, "end": 623, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9866573709022}, {"start": 628, "end": 632, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9746183951170299}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFactory1Hours = intvar(0, 999999999)  # Number of hours factory 1 runs\nFactory2Hours = intvar(0, 999999999)  # Number of hours factory 2 runs\n\n# Constraints\nm = Model()\n\n# To meet the demand for black teddy bears:\nm += 5 * Factory1Hours + 10 * Factory2Hours >= 20\n# To meet the demand for white teddy bears:\nm += 6 * Factory1Hours + 10 * Factory2Hours >= 5\n# To meet the demand for brown teddy bears (only produced in factory 1):\nm += 3 * Factory1Hours >= 15\n\n# Objective\n# Minimize the cost of production:\nm.minimize(300 * Factory1Hours + 600 * Factory2Hours)\n"}}
{"1606486655": {"document": "A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and $80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and $50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and $34000 available to spend on pesticide. If the revenue per acre of turnips is $300 and the revenue per acre of pumpkins is $450, how many acres of each should he grow to maximize his revenue.", "order_mapping": {"turnips": 0, "pumpkins": 1, "Turnips": 0, "Pumpkins": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "revenue", "terms": {"turnips": "300", "pumpkins": "450"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "40000", "terms": {"Turnips": "50", "Pumpkins": "90"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "34000", "terms": {"Turnips": "80", "Pumpkins": "50"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-300.0, -450.0], "constraints": [[1.0, 1.0, 500.0], [50.0, 90.0, 40000.0], [80.0, 50.0, 34000.0]]}, "solution": {"x": 125, "y": 375}, "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9940814692334033}, {"start": 13, "end": 16, "word": "500", "entity_group": "LIMIT", "score": 0.9987084543277907}, {"start": 39, "end": 46, "word": "turnips", "entity_group": "VAR", "score": 0.9992427040082075}, {"start": 51, "end": 59, "word": "pumpkins", "entity_group": "VAR", "score": 0.9988291993969296}, {"start": 62, "end": 69, "word": "Turnips", "entity_group": "VAR", "score": 0.9993879078168781}, {"start": 78, "end": 80, "word": "50", "entity_group": "PARAM", "score": 0.9996677428033848}, {"start": 107, "end": 109, "word": "80", "entity_group": "PARAM", "score": 0.9996443929617699}, {"start": 140, "end": 148, "word": "Pumpkins", "entity_group": "VAR", "score": 0.9996439653602112}, {"start": 157, "end": 159, "word": "90", "entity_group": "PARAM", "score": 0.9997233749804413}, {"start": 186, "end": 188, "word": "50", "entity_group": "PARAM", "score": 0.9996443972640131}, {"start": 248, "end": 257, "word": "available", "entity_group": "CONST_DIR", "score": 0.9977986933690369}, {"start": 277, "end": 282, "word": "34000", "entity_group": "LIMIT", "score": 0.999564558631606}, {"start": 283, "end": 292, "word": "available", "entity_group": "CONST_DIR", "score": 0.9925881618176798}, {"start": 324, "end": 331, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9990123766352574}, {"start": 344, "end": 351, "word": "turnips", "entity_group": "VAR", "score": 0.9994952128857387}, {"start": 357, "end": 360, "word": "300", "entity_group": "PARAM", "score": 0.999243269526608}, {"start": 369, "end": 376, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9987855469219676}, {"start": 389, "end": 397, "word": "pumpkins", "entity_group": "VAR", "score": 0.9993738724394325}, {"start": 403, "end": 406, "word": "450", "entity_group": "PARAM", "score": 0.9995941661890981}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997401364371707}, {"start": 463, "end": 470, "word": "revenue", "entity_group": "OBJ_NAME", "score": 0.9986764024136491}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTurnips = intvar(0, 999999999)  # Acres of turnips\nPumpkins = intvar(0, 999999999)  # Acres of pumpkins\n\n# Constraints\nm = Model()\n\n# Total acres cannot exceed 500:\nm += Turnips + Pumpkins <= 500\n# Watering time for all crops cannot exceed 40000 minutes:\nm += 50 * Turnips + 90 * Pumpkins <= 40000\n# Total spending on pesticide cannot exceed $34000:\nm += 80 * Turnips + 50 * Pumpkins <= 34000\n\n# Objective\n# Maximize revenue ($300 per acre of turnips and $450 per acre of pumpkins):\nm.maximize(300 * Turnips + 450 * Pumpkins)\n"}}
{"204200639": {"document": "A school employs staff and substitute teachers. Per shift, staff teachers work 6 hours and get paid $300. Per shift, substitute teachers work 3 hours and get paid $100. For the summer term, the school requires 1000 hours of teaching availability. If the school has a budget of $40000, how many of each teacher should be hired to minimize the total number of teachers?", "order_mapping": {"staff": 0, "substitute teachers": 1, "staff teachers": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of teachers", "vars": ["staff", "substitute teachers"]}, "const_declarations": [{"type": "linear", "direction": "requires", "limit": "1000", "terms": {"staff teachers": "6", "substitute teachers": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "40000", "terms": {"staff teachers": "300", "substitute teachers": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-6.0, -3.0, -1000.0], [300.0, 100.0, 40000.0]]}, "solution": {"x": 66, "y": 202}, "entities": [{"start": 17, "end": 22, "word": "staff", "entity_group": "VAR", "score": 0.9981341869704187}, {"start": 27, "end": 46, "word": "substitute teachers", "entity_group": "VAR", "score": 0.9999809920001359}, {"start": 61, "end": 75, "word": "staff teachers", "entity_group": "VAR", "score": 0.9999534997475891}, {"start": 81, "end": 82, "word": "6", "entity_group": "PARAM", "score": 0.9996162587735361}, {"start": 104, "end": 107, "word": "300", "entity_group": "PARAM", "score": 0.9996505333125522}, {"start": 122, "end": 141, "word": "substitute teachers", "entity_group": "VAR", "score": 0.9999534743247694}, {"start": 147, "end": 148, "word": "3", "entity_group": "PARAM", "score": 0.9996162587743334}, {"start": 170, "end": 173, "word": "100", "entity_group": "PARAM", "score": 0.9996976255141611}, {"start": 218, "end": 222, "word": "1000", "entity_group": "LIMIT", "score": 0.99871370658015}, {"start": 241, "end": 253, "word": "availability", "entity_group": "CONST_DIR", "score": 0.675436378652897}, {"start": 276, "end": 282, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9855150958692734}, {"start": 288, "end": 293, "word": "40000", "entity_group": "LIMIT", "score": 0.9989172781272446}, {"start": 340, "end": 348, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9968688455972412}, {"start": 353, "end": 377, "word": "total number of teachers", "entity_group": "OBJ_NAME", "score": 0.9626050569155081}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStaff = intvar(0, 999999999)  # Number of staff teachers hired\nSubstituteTeachers = intvar(0, 999999999)  # Number of substitute teachers hired\n\n# Constraints\nm = Model()\n\n# The school requires 1000 hours of teaching availability:\nm += 6 * Staff + 3 * SubstituteTeachers >= 1000\n# The school has a budget of $40000:\nm += 300 * Staff + 100 * SubstituteTeachers <= 40000\n\n# Objective\n# Minimize the total number of teachers:\nm.minimize(Staff + SubstituteTeachers)\n"}}
{"-710890866": {"document": "A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?", "order_mapping": {"high intensity": 0, "low intensity": 1, "high intensity drill": 0, "low intensity drill": 1, "low intensity drills": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of drills", "vars": ["high intensity", "low intensity"]}, "const_declarations": [{"type": "linear", "direction": "process", "limit": "800", "terms": {"high intensity drill": "50", "low intensity drill": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"high intensity drill": "50", "low intensity drill": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "high intensity", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "low intensity drills", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -30.0, -800.0], [50.0, 20.0, 700.0], [0.6, -0.4, 0.0], [-0.0, -1.0, -10.0]]}, "solution": {"x": 7, "y": 15}, "entities": [{"start": 33, "end": 47, "word": "high intensity", "entity_group": "VAR", "score": 0.999891737665268}, {"start": 58, "end": 71, "word": "low intensity", "entity_group": "VAR", "score": 0.9996901225029357}, {"start": 93, "end": 113, "word": "high intensity drill", "entity_group": "VAR", "score": 0.9991302314655935}, {"start": 126, "end": 128, "word": "50", "entity_group": "PARAM", "score": 0.9996357986942549}, {"start": 147, "end": 149, "word": "50", "entity_group": "PARAM", "score": 0.9996640452424276}, {"start": 200, "end": 219, "word": "low intensity drill", "entity_group": "VAR", "score": 0.9992360178835501}, {"start": 232, "end": 234, "word": "30", "entity_group": "PARAM", "score": 0.9996363914648921}, {"start": 253, "end": 255, "word": "20", "entity_group": "PARAM", "score": 0.9996640452424267}, {"start": 325, "end": 328, "word": "800", "entity_group": "LIMIT", "score": 0.999611413678439}, {"start": 348, "end": 357, "word": "available", "entity_group": "CONST_DIR", "score": 0.9988077086406242}, {"start": 358, "end": 361, "word": "700", "entity_group": "LIMIT", "score": 0.9990806078117541}, {"start": 389, "end": 409, "word": "high intensity drill", "entity_group": "VAR", "score": 0.9996301884196004}, {"start": 446, "end": 453, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985750103642852}, {"start": 454, "end": 458, "word": "40 %", "entity_group": "LIMIT", "score": 0.97223852310969}, {"start": 480, "end": 499, "word": "high intensity ones", "entity_group": "VAR", "score": 0.9962686701381485}, {"start": 512, "end": 520, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977736210476142}, {"start": 521, "end": 523, "word": "10", "entity_group": "LIMIT", "score": 0.9997229488894946}, {"start": 534, "end": 554, "word": "low intensity drills", "entity_group": "VAR", "score": 0.9988578322112708}, {"start": 598, "end": 606, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9823669661457937}, {"start": 617, "end": 633, "word": "number of drills", "entity_group": "OBJ_NAME", "score": 0.9832186617012493}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHighIntensityDrills = intvar(0, 999999999)  # Number of high intensity drills\nLowIntensityDrills = intvar(0, 999999999)  # Number of low intensity drills\n\n# Constraints\nm = Model()\n\n# Each day the factory must process 800 gems:\nm += 50 * HighIntensityDrills + 30 * LowIntensityDrills >= 800\n# They have available 700 units of water:\nm += 50 * HighIntensityDrills + 20 * LowIntensityDrills <= 700\n# At most 40% of the drills can be high intensity ones:\nm += HighIntensityDrills <= 0.4 * (HighIntensityDrills + LowIntensityDrills)\n# At least 10 should be low intensity drills:\nm += LowIntensityDrills >= 10\n\n# Objective\n# Minimize the total number of drills needed:\nm.minimize(HighIntensityDrills + LowIntensityDrills)\n"}}
{"103572338": {"document": "A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?", "order_mapping": {"dine-in place": 0, "food-truck": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of stores", "vars": ["dine-in place", "food-truck"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "500", "terms": {"dine-in place": "100", "food-truck": "50"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "35", "terms": {"dine-in place": "8", "food-truck": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-100.0, -50.0, -500.0], [8.0, 3.0, 35.0]]}, "solution": {"x": 2, "y": 6}, "entities": [{"start": 52, "end": 67, "word": "dine - in place", "entity_group": "VAR", "score": 0.9980799029079631}, {"start": 74, "end": 86, "word": "food - truck", "entity_group": "VAR", "score": 0.9991694482916147}, {"start": 91, "end": 106, "word": "dine - in place", "entity_group": "VAR", "score": 0.9985662145205376}, {"start": 116, "end": 119, "word": "100", "entity_group": "PARAM", "score": 0.9996632142820612}, {"start": 120, "end": 130, "word": "sandwiches", "entity_group": "OBJ_NAME", "score": 0.9845443522126914}, {"start": 152, "end": 153, "word": "8", "entity_group": "PARAM", "score": 0.9995734538753916}, {"start": 179, "end": 191, "word": "food - truck", "entity_group": "VAR", "score": 0.999276521283845}, {"start": 201, "end": 203, "word": "50", "entity_group": "PARAM", "score": 0.9996447365311963}, {"start": 204, "end": 214, "word": "sandwiches", "entity_group": "OBJ_NAME", "score": 0.9842500008826599}, {"start": 236, "end": 237, "word": "3", "entity_group": "PARAM", "score": 0.9994396191279302}, {"start": 283, "end": 291, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992478989877057}, {"start": 292, "end": 295, "word": "500", "entity_group": "LIMIT", "score": 0.9997362228051755}, {"start": 334, "end": 343, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978776156280331}, {"start": 344, "end": 346, "word": "35", "entity_group": "LIMIT", "score": 0.9992042496821215}, {"start": 417, "end": 425, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9979430574506594}, {"start": 436, "end": 452, "word": "number of stores", "entity_group": "OBJ_NAME", "score": 0.9814231345998775}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDineIn = intvar(0, 999999999)  # Number of dine-in places\nFoodTruck = intvar(0, 999999999)  # Number of food-trucks\n\n# Constraints\nm = Model()\n\n# The company must make at least 500 sandwiches per day:\nm += 100 * DineIn + 50 * FoodTruck >= 500\n# The company only has available 35 employees:\nm += 8 * DineIn + 3 * FoodTruck <= 35\n\n# Objective\n# Minimize the total number of stores:\nm.minimize(DineIn + FoodTruck)\n"}}
{"-1913311520": {"document": "There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?", "order_mapping": {"process A": 0, "process B": 1, "Process A": 0, "Process B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of coins", "terms": {"Process A": "5", "Process B": "7"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"Process A": "3", "Process B": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"Process A": "2", "Process B": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -7.0], "constraints": [[3.0, 5.0, 500.0], [2.0, 3.0, 300.0]]}, "solution": {"x": 150, "y": 0}, "entities": [{"start": 26, "end": 35, "word": "process A", "entity_group": "VAR", "score": 0.9999481227523705}, {"start": 40, "end": 49, "word": "process B", "entity_group": "VAR", "score": 0.9999771472251988}, {"start": 80, "end": 89, "word": "Process A", "entity_group": "VAR", "score": 0.9999794168629501}, {"start": 99, "end": 100, "word": "3", "entity_group": "PARAM", "score": 0.9996000557763917}, {"start": 117, "end": 118, "word": "2", "entity_group": "PARAM", "score": 0.9997357860087424}, {"start": 141, "end": 142, "word": "5", "entity_group": "PARAM", "score": 0.9996877600898652}, {"start": 143, "end": 148, "word": "coins", "entity_group": "OBJ_NAME", "score": 0.9993146843271435}, {"start": 151, "end": 160, "word": "Process B", "entity_group": "VAR", "score": 0.9999798533883352}, {"start": 170, "end": 171, "word": "5", "entity_group": "PARAM", "score": 0.9996835003412115}, {"start": 188, "end": 189, "word": "3", "entity_group": "PARAM", "score": 0.9997357815597919}, {"start": 212, "end": 213, "word": "7", "entity_group": "PARAM", "score": 0.9996132659597314}, {"start": 214, "end": 219, "word": "coins", "entity_group": "OBJ_NAME", "score": 0.9975867469276039}, {"start": 232, "end": 235, "word": "500", "entity_group": "LIMIT", "score": 0.999773496887583}, {"start": 254, "end": 257, "word": "300", "entity_group": "LIMIT", "score": 0.9997115522215942}, {"start": 264, "end": 273, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985982978555255}, {"start": 325, "end": 333, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985786351256681}, {"start": 344, "end": 359, "word": "number of coins", "entity_group": "OBJ_NAME", "score": 0.9855401741048794}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProcessA = intvar(0, 999999999)  # Number of times process A is run\nProcessB = intvar(0, 999999999)  # Number of times process B is run\n\n# Constraints\nm = Model()\n\n# Gold constraint: 3 units of gold for Process A and 5 units for Process B, with 500 units available in total\nm += 3 * ProcessA + 5 * ProcessB <= 500\n# Wire constraint: 2 wires for Process A and 3 wires for Process B, with 300 wires available in total\nm += 2 * ProcessA + 3 * ProcessB <= 300\n\n# Objective\n# Maximize the total number of coins plated: 5 coins per Process A and 7 coins per Process B\nm.maximize(5 * ProcessA + 7 * ProcessB)\n"}}
{"1124566219": {"document": "A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?", "order_mapping": {"miter saw": 0, "circular saw": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of saws", "vars": ["miter saw", "circular saw"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1500", "terms": {"miter saw": "50", "circular saw": "70"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "2000", "terms": {"miter saw": "60", "circular saw": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -70.0, -1500.0], [60.0, 100.0, 2000.0]]}, "solution": {"x": 15, "y": 11}, "entities": [{"start": 46, "end": 55, "word": "miter saw", "entity_group": "VAR", "score": 0.9999137165189201}, {"start": 62, "end": 74, "word": "circular saw", "entity_group": "VAR", "score": 0.9999194546672611}, {"start": 79, "end": 88, "word": "miter saw", "entity_group": "VAR", "score": 0.9999765590721345}, {"start": 97, "end": 99, "word": "50", "entity_group": "PARAM", "score": 0.9996686198074117}, {"start": 128, "end": 130, "word": "60", "entity_group": "PARAM", "score": 0.9997088517644268}, {"start": 160, "end": 172, "word": "circular saw", "entity_group": "VAR", "score": 0.9999489882162961}, {"start": 181, "end": 183, "word": "70", "entity_group": "PARAM", "score": 0.9996693115191646}, {"start": 212, "end": 215, "word": "100", "entity_group": "PARAM", "score": 0.9997106360906222}, {"start": 265, "end": 273, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991799899262409}, {"start": 274, "end": 278, "word": "1500", "entity_group": "LIMIT", "score": 0.9997168984801685}, {"start": 375, "end": 382, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991769781737784}, {"start": 383, "end": 387, "word": "2000", "entity_group": "LIMIT", "score": 0.9997581497619598}, {"start": 467, "end": 475, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9959613976423993}, {"start": 480, "end": 500, "word": "total number of saws", "entity_group": "OBJ_NAME", "score": 0.9746947121094067}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMiterSaw = intvar(0, 999999999)  # Number of miter saws purchased\nCircularSaw = intvar(0, 999999999)  # Number of circular saws purchased\n\n# Constraints\nm = Model()\n\n# The woodshop must cut at least 1500 planks of wood per day:\nm += 50 * MiterSaw + 70 * CircularSaw >= 1500\n# The woodshop can produce at most 2000 units of sawdust per day:\nm += 60 * MiterSaw + 100 * CircularSaw <= 2000\n\n# Objective\n# Minimize the total number of saws needed:\nm.minimize(MiterSaw + CircularSaw)\n"}}
{"-1969046840": {"document": "A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?", "order_mapping": {"windrower": 0, "hay harvester": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of hay", "terms": {"windrower": "10", "hay harvester": "8"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"windrower": "2", "hay harvester": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "800", "terms": {"windrower": "5", "hay harvester": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-10.0, -8.0], "constraints": [[1.0, 1.0, 200.0], [2.0, 1.0, 300.0], [5.0, 3.0, 800.0]]}, "solution": {"x": 100, "y": 100}, "entities": [{"start": 9, "end": 12, "word": "has", "entity_group": "CONST_DIR", "score": 0.9948556407497464}, {"start": 13, "end": 16, "word": "200", "entity_group": "LIMIT", "score": 0.9986553264081202}, {"start": 75, "end": 84, "word": "windrower", "entity_group": "VAR", "score": 0.9981463506810985}, {"start": 88, "end": 101, "word": "hay harvester", "entity_group": "VAR", "score": 0.9999537922511562}, {"start": 132, "end": 141, "word": "windrower", "entity_group": "VAR", "score": 0.9996076446416714}, {"start": 154, "end": 156, "word": "10", "entity_group": "PARAM", "score": 0.9997396888203288}, {"start": 177, "end": 190, "word": "hay harvester", "entity_group": "VAR", "score": 0.9999731707529802}, {"start": 203, "end": 204, "word": "8", "entity_group": "PARAM", "score": 0.9996027173963412}, {"start": 211, "end": 214, "word": "hay", "entity_group": "OBJ_NAME", "score": 0.5418725902038503}, {"start": 232, "end": 241, "word": "windrower", "entity_group": "VAR", "score": 0.9994589784245859}, {"start": 251, "end": 252, "word": "5", "entity_group": "PARAM", "score": 0.9997163230919718}, {"start": 284, "end": 285, "word": "2", "entity_group": "PARAM", "score": 0.9996454542972233}, {"start": 323, "end": 336, "word": "hay harvester", "entity_group": "VAR", "score": 0.9999875849170624}, {"start": 346, "end": 347, "word": "3", "entity_group": "PARAM", "score": 0.9997250154501752}, {"start": 388, "end": 389, "word": "1", "entity_group": "PARAM", "score": 0.9991935794417318}, {"start": 413, "end": 416, "word": "300", "entity_group": "LIMIT", "score": 0.9996917399865898}, {"start": 428, "end": 437, "word": "available", "entity_group": "CONST_DIR", "score": 0.997561748000528}, {"start": 465, "end": 472, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987262313795402}, {"start": 473, "end": 476, "word": "800", "entity_group": "LIMIT", "score": 0.9996805532948908}, {"start": 547, "end": 555, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9969727008875272}, {"start": 560, "end": 573, "word": "amount of hay", "entity_group": "OBJ_NAME", "score": 0.9831419611911535}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWindrower = intvar(0, 999999999)  # Number of acres processed by the windrower\nHayHarvester = intvar(0, 999999999)  # Number of acres processed by the hay harvester\n\n# Constraints\nm = Model()\n\n# Total acres processed by both machines should not exceed 200:\nm += Windrower + HayHarvester <= 200\n# Total fuel used by both machines should not exceed 300 kg (Windrower uses 2 kg/acre, Hay Harvester uses 1 kg/acre):\nm += 2 * Windrower + 1 * HayHarvester <= 300\n# Total methane gas produced by both machines should not exceed 800 kg (Windrower produces 5 kg/acre, Hay Harvester produces 3 kg/acre):\nm += 5 * Windrower + 3 * HayHarvester <= 800\n\n# Objective\n# Maximize the amount of hay processed (Windrower processes 10 kg/acre, Hay Harvester processes 8 kg/acre):\nm.maximize(10 * Windrower + 8 * HayHarvester)\n"}}
{"-1576429501": {"document": "A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?", "order_mapping": {"wraps": 0, "platters": 1, "wrap": 0, "platter": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total production time", "terms": {"wrap": "10", "platter": "8"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "3000", "terms": {"wrap": "5", "platter": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "2500", "terms": {"wrap": "3", "platter": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "wraps", "direction": "at least", "param": "3", "y_var": "platter", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [10.0, 8.0], "constraints": [[-5.0, -7.0, -3000.0], [-3.0, -5.0, -2500.0], [-1.0, 3.0, -0.0]]}, "solution": {"x": 537, "y": 178}, "entities": [{"start": 28, "end": 33, "word": "wraps", "entity_group": "VAR", "score": 0.999673485594631}, {"start": 38, "end": 46, "word": "platters", "entity_group": "VAR", "score": 0.9997207206827894}, {"start": 54, "end": 58, "word": "wrap", "entity_group": "VAR", "score": 0.9996473494325218}, {"start": 68, "end": 69, "word": "5", "entity_group": "PARAM", "score": 0.9996990905622302}, {"start": 88, "end": 89, "word": "3", "entity_group": "PARAM", "score": 0.9997147257592313}, {"start": 111, "end": 118, "word": "platter", "entity_group": "VAR", "score": 0.9995587128225434}, {"start": 128, "end": 129, "word": "7", "entity_group": "PARAM", "score": 0.9996707823122983}, {"start": 149, "end": 150, "word": "5", "entity_group": "PARAM", "score": 0.9996514932064122}, {"start": 178, "end": 182, "word": "wrap", "entity_group": "VAR", "score": 0.9997610702260672}, {"start": 189, "end": 191, "word": "10", "entity_group": "PARAM", "score": 0.9996889669171418}, {"start": 215, "end": 222, "word": "platter", "entity_group": "VAR", "score": 0.9989930578964702}, {"start": 229, "end": 230, "word": "8", "entity_group": "PARAM", "score": 0.9989173047096491}, {"start": 278, "end": 286, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991867790664146}, {"start": 287, "end": 291, "word": "3000", "entity_group": "LIMIT", "score": 0.9997220796369157}, {"start": 310, "end": 314, "word": "2500", "entity_group": "LIMIT", "score": 0.999709211808694}, {"start": 337, "end": 342, "word": "wraps", "entity_group": "VAR", "score": 0.9992288871806003}, {"start": 373, "end": 381, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982108615203218}, {"start": 382, "end": 389, "word": "3 times", "entity_group": "PARAM", "score": 0.817747866310759}, {"start": 398, "end": 403, "word": "wraps", "entity_group": "VAR", "score": 0.9997940979080546}, {"start": 423, "end": 430, "word": "platter", "entity_group": "VAR", "score": 0.9980317911073213}, {"start": 485, "end": 493, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9989298552135871}, {"start": 498, "end": 519, "word": "total production time", "entity_group": "OBJ_NAME", "score": 0.9640928987246704}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWraps = intvar(0, 999999999)  # Number of wraps made\nPlatters = intvar(0, 999999999)  # Number of platters made\n\n# Constraints\nm = Model()\n\n# The fast food place must use at least 3000 units of meat:\nm += 5 * Wraps + 7 * Platters >= 3000\n# The fast food place must use at least 2500 units of rice:\nm += 3 * Wraps + 5 * Platters >= 2500\n# At least 3 times as many wraps need to be made as platters:\nm += Wraps >= 3 * Platters\n\n# Objective\n# Minimize the total production time (10 minutes for each wrap, 8 minutes for each platter):\nm.minimize(10 * Wraps + 8 * Platters)\n"}}
{"-1066222271": {"document": "An amusement park is installing ticket machines, both cash-based and card-only machines. A cash-based machine can process 20 people per hour while a card-only machine can process 30 people per hour. The cash-based machine needs 4 rolls of paper per hour while the card-only machine requires 5 rolls of paper per hour. The amusement park needs to be able to process at least 500 people per hour but can use at most 90 rolls of paper per hour. Since most people prefer to pay by cash, the number of card-only machines must not exceed the number of cash-based machines. How many of each machine should be bought to minimize the total number of machines in the park?", "order_mapping": {"cash-based": 0, "card-only": 1, "cash-based machine": 0, "card-only machine": 1, "card-only machines": 1, "cash-based machines": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of machines", "vars": ["cash-based", "card-only"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "500", "terms": {"cash-based machine": "20", "card-only machine": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "90", "terms": {"cash-based machine": "4", "card-only machine": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "card-only machines", "direction": "must not exceed", "y_var": "cash-based machines", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-20.0, -30.0, -500.0], [4.0, 5.0, 90.0], [-1.0, 1.0, 0.0]]}, "solution": {"x": 10, "y": 10}, "entities": [{"start": 55, "end": 67, "word": "cash - based", "entity_group": "VAR", "score": 0.9993272445048408}, {"start": 72, "end": 92, "word": "card - only machines", "entity_group": "VAR", "score": 0.99808608751934}, {"start": 97, "end": 117, "word": "cash - based machine", "entity_group": "VAR", "score": 0.9983318335435684}, {"start": 130, "end": 132, "word": "20", "entity_group": "PARAM", "score": 0.9994828260231964}, {"start": 157, "end": 176, "word": "card - only machine", "entity_group": "VAR", "score": 0.998240138385643}, {"start": 189, "end": 191, "word": "30", "entity_group": "PARAM", "score": 0.9991534371417783}, {"start": 214, "end": 234, "word": "cash - based machine", "entity_group": "VAR", "score": 0.9981548925830127}, {"start": 241, "end": 242, "word": "4", "entity_group": "PARAM", "score": 0.9996470792097726}, {"start": 277, "end": 296, "word": "card - only machine", "entity_group": "VAR", "score": 0.9980776521832353}, {"start": 306, "end": 307, "word": "5", "entity_group": "PARAM", "score": 0.9996430658392889}, {"start": 381, "end": 389, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999130238246106}, {"start": 390, "end": 393, "word": "500", "entity_group": "LIMIT", "score": 0.999606965979147}, {"start": 422, "end": 429, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990414532341467}, {"start": 430, "end": 432, "word": "90", "entity_group": "LIMIT", "score": 0.9997560297961011}, {"start": 494, "end": 498, "word": "cash", "entity_group": "VAR", "score": 0.999602684283931}, {"start": 515, "end": 535, "word": "card - only machines", "entity_group": "VAR", "score": 0.997565844602543}, {"start": 536, "end": 551, "word": "must not exceed", "entity_group": "CONST_DIR", "score": 0.9886146442484927}, {"start": 566, "end": 587, "word": "cash - based machines", "entity_group": "VAR", "score": 0.9974618958104993}, {"start": 635, "end": 643, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9935267364952622}, {"start": 654, "end": 672, "word": "number of machines", "entity_group": "OBJ_NAME", "score": 0.9771151588273196}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCashBasedMachines = intvar(0, 999999999)  # Number of cash-based machines\nCardOnlyMachines = intvar(0, 999999999)  # Number of card-only machines\n\n# Constraints\nm = Model()\n\n# The park needs to process at least 500 people per hour:\nm += 20 * CashBasedMachines + 30 * CardOnlyMachines >= 500\n# The park can use at most 90 rolls of paper per hour:\nm += 4 * CashBasedMachines + 5 * CardOnlyMachines <= 90\n# The number of card-only machines must not exceed the number of cash-based machines:\nm += CardOnlyMachines <= CashBasedMachines\n\n# Objective\n# Minimize the total number of machines:\nm.minimize(CashBasedMachines + CardOnlyMachines)\n"}}
{"1838800424": {"document": "A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?", "order_mapping": {"glass": 0, "plastic jars": 1, "glass jar": 0, "plastic jar": 1, "glass jars": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of bottles", "vars": ["glass", "plastic jars"]}, "const_declarations": [{"type": "xby", "x_var": "plastic jars", "direction": "at least", "param": "twice", "y_var": "glass jars", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "glass jars", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "20000", "terms": {"glass jar": "250", "plastic jar": "300"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[2.0, -1.0, -0.0], [-1.0, -0.0, -20.0], [250.0, 300.0, 20000.0]]}, "solution": {"x": 23, "y": 47}, "entities": [{"start": 34, "end": 39, "word": "glass", "entity_group": "VAR", "score": 0.999384387287119}, {"start": 44, "end": 56, "word": "plastic jars", "entity_group": "VAR", "score": 0.9999724656223234}, {"start": 61, "end": 70, "word": "glass jar", "entity_group": "VAR", "score": 0.9999550371712341}, {"start": 80, "end": 83, "word": "250", "entity_group": "PARAM", "score": 0.9996578882380687}, {"start": 104, "end": 115, "word": "plastic jar", "entity_group": "VAR", "score": 0.9998940451539442}, {"start": 125, "end": 128, "word": "300", "entity_group": "PARAM", "score": 0.9996568192156289}, {"start": 149, "end": 159, "word": "glass jars", "entity_group": "VAR", "score": 0.9999706466771199}, {"start": 181, "end": 189, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9972101005539229}, {"start": 190, "end": 195, "word": "twice", "entity_group": "PARAM", "score": 0.9953917571381549}, {"start": 204, "end": 216, "word": "plastic jars", "entity_group": "VAR", "score": 0.9999809945178374}, {"start": 235, "end": 245, "word": "glass jars", "entity_group": "VAR", "score": 0.9999756160264992}, {"start": 258, "end": 266, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988863632779711}, {"start": 267, "end": 269, "word": "20", "entity_group": "LIMIT", "score": 0.9996129747521271}, {"start": 270, "end": 280, "word": "glass jars", "entity_group": "VAR", "score": 0.9999433339356023}, {"start": 314, "end": 317, "word": "has", "entity_group": "CONST_DIR", "score": 0.9935662346022048}, {"start": 318, "end": 323, "word": "20000", "entity_group": "LIMIT", "score": 0.9988320098411776}, {"start": 380, "end": 388, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.998816742313717}, {"start": 393, "end": 416, "word": "total number of bottles", "entity_group": "OBJ_NAME", "score": 0.967825210519748}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGlassJars = intvar(0, 999999999)  # Number of glass jars filled\nPlasticJars = intvar(0, 999999999)  # Number of plastic jars filled\n\n# Constraints\nm = Model()\n\n# At least twice as many plastic jars must be filled as glass jars:\nm += PlasticJars >= 2 * GlassJars\n# At least 20 glass jars should be filled:\nm += GlassJars >= 20\n# The farmer has 20000 ml of honey (250 ml per glass jar and 300 ml per plastic jar):\nm += 250 * GlassJars + 300 * PlasticJars <= 20000\n\n# Objective\n# Maximize the total number of bottles filled:\nm.maximize(GlassJars + PlasticJars)\n"}}
{"431521997": {"document": "A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?", "order_mapping": {"lychee bubble tea": 0, "mango bubble tea": 1, "lychee": 0, "mango bubble teas": 1, "lychee bubble teas": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of tea", "terms": {"mango bubble tea": "8", "lychee bubble tea": "6"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"mango bubble tea": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"lychee bubble tea": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "At least", "limit": "40%", "var": "lychee", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "mango bubble teas", "direction": "large than", "y_var": "lychee bubble teas", "operator": "GREATER"}], "canonical": {"objective": [6.0, 8.0], "constraints": [[0.0, 4.0, 2000.0], [6.0, 0.0, 3000.0], [-0.6, 0.4, -0.0], [1.0, -1.0, -1e-06]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 24, "end": 29, "word": "mango", "entity_group": "VAR", "score": 0.9994636334956877}, {"start": 34, "end": 51, "word": "lychee bubble tea", "entity_group": "VAR", "score": 0.9997041564065332}, {"start": 59, "end": 75, "word": "mango bubble tea", "entity_group": "VAR", "score": 0.9990477709127522}, {"start": 85, "end": 86, "word": "4", "entity_group": "PARAM", "score": 0.999707481319029}, {"start": 112, "end": 113, "word": "8", "entity_group": "PARAM", "score": 0.9995969086669421}, {"start": 134, "end": 151, "word": "lychee bubble tea", "entity_group": "VAR", "score": 0.9989850809972123}, {"start": 161, "end": 162, "word": "6", "entity_group": "PARAM", "score": 0.9997128750524918}, {"start": 189, "end": 190, "word": "6", "entity_group": "PARAM", "score": 0.9993666432388801}, {"start": 219, "end": 228, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995934549621893}, {"start": 229, "end": 233, "word": "2000", "entity_group": "LIMIT", "score": 0.9992910110043703}, {"start": 259, "end": 263, "word": "3000", "entity_group": "LIMIT", "score": 0.9996973360650293}, {"start": 288, "end": 296, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9973494505175404}, {"start": 297, "end": 301, "word": "40 %", "entity_group": "LIMIT", "score": 0.9559399759608973}, {"start": 334, "end": 340, "word": "lychee", "entity_group": "VAR", "score": 0.999384323378295}, {"start": 362, "end": 378, "word": "mango bubble tea", "entity_group": "VAR", "score": 0.9996030607725873}, {"start": 415, "end": 432, "word": "mango bubble teas", "entity_group": "VAR", "score": 0.9995404283482436}, {"start": 471, "end": 489, "word": "lychee bubble teas", "entity_group": "VAR", "score": 0.9988026542655112}, {"start": 550, "end": 558, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9935529702709459}, {"start": 569, "end": 582, "word": "amount of tea", "entity_group": "OBJ_NAME", "score": 0.9583260804080223}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMangoBubbleTea = intvar(0, 999999999)  # Number of mango bubble teas made\nLycheeBubbleTea = intvar(0, 999999999)  # Number of lychee bubble teas made\n\n# Constraints\nm = Model()\n\n# Mango juice constraint: 4 units of mango juice per mango bubble tea\nm += 4 * MangoBubbleTea <= 2000\n# Lychee juice constraint: 6 units of lychee juice per lychee bubble tea\nm += 6 * LycheeBubbleTea <= 3000\n# At least 40% of the bubble teas made must be lychee flavored\nm += LycheeBubbleTea >= 0.4 * (MangoBubbleTea + LycheeBubbleTea)\n# The number of mango bubble teas made must be larger than the number of lychee bubble teas made\nm += MangoBubbleTea > LycheeBubbleTea\n\n# Objective\n# Minimize the total amount of tea needed (8 units of tea per mango bubble tea, 6 units of tea per lychee bubble tea)\nm.minimize(8 * MangoBubbleTea + 6 * LycheeBubbleTea)\n"}}
{"-1744875694": {"document": "A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid $120. A permanent snow remover works 10 hours per shift and gets paid $250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of $6500, how many of each type of worker should be hired to minimize the total number of snow removers?", "order_mapping": {"seasonal": 0, "permanent": 1, "seasonal snow remover": 0, "permanent snow remover": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of snow removers", "vars": ["seasonal", "permanent"]}, "const_declarations": [{"type": "linear", "direction": "needs", "limit": "300", "terms": {"seasonal snow remover": "6", "permanent snow remover": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "6500", "terms": {"seasonal snow remover": "120", "permanent snow remover": "250"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-6.0, -10.0, -300.0], [120.0, 250.0, 6500.0]]}, "solution": {"x": 35, "y": 9}, "entities": [{"start": 15, "end": 23, "word": "seasonal", "entity_group": "VAR", "score": 0.9992691382216029}, {"start": 28, "end": 42, "word": "permanent snow", "entity_group": "VAR", "score": 0.9999936991681327}, {"start": 56, "end": 77, "word": "seasonal snow remover", "entity_group": "VAR", "score": 0.9993115229305132}, {"start": 84, "end": 85, "word": "6", "entity_group": "PARAM", "score": 0.9994772492653023}, {"start": 118, "end": 121, "word": "120", "entity_group": "PARAM", "score": 0.9997555201325039}, {"start": 126, "end": 148, "word": "permanent snow remover", "entity_group": "VAR", "score": 0.9990545633174926}, {"start": 155, "end": 157, "word": "10", "entity_group": "PARAM", "score": 0.999478495385689}, {"start": 190, "end": 193, "word": "250", "entity_group": "PARAM", "score": 0.9997239784381777}, {"start": 215, "end": 220, "word": "needs", "entity_group": "CONST_DIR", "score": 0.9235382690767683}, {"start": 221, "end": 224, "word": "300", "entity_group": "LIMIT", "score": 0.9990659034037658}, {"start": 296, "end": 302, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9855151799028076}, {"start": 308, "end": 312, "word": "6500", "entity_group": "LIMIT", "score": 0.9990712233490824}, {"start": 366, "end": 374, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9973524788714639}, {"start": 379, "end": 408, "word": "total number of snow removers", "entity_group": "OBJ_NAME", "score": 0.9575655580656656}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSeasonal = intvar(0, 999999999)  # Number of seasonal snow removers hired\nPermanent = intvar(0, 999999999)  # Number of permanent snow removers hired\n\n# Constraints\nm = Model()\n\n# The city needs 300 hours of snow remover labor:\nm += 6 * Seasonal + 10 * Permanent >= 300\n# The city has a budget of $6500:\nm += 120 * Seasonal + 250 * Permanent <= 6500\n\n# Objective\n# Minimize the total number of snow removers:\nm.minimize(Seasonal + Permanent)\n"}}
{"-847055511": {"document": "A high rise building is buying two types of furnaces, a new model and an old model. A new model furnace can heat 10 apartments and consumes 200 kWh per day. An old model can heat 15 apartments and consumes 250 kWh per day. Since the old model is harder to find, at most 35% of the furnaces can be the old model and at least 5 new model furnaces should be used. If the high rise needs to heat at least 200 apartments and has 3500 kWh of electricity available, how many of each furnace should be purchase to minimize the total number of furnaces?", "order_mapping": {"new model": 0, "old model": 1, "new model furnace": 0, "new model furnaces": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of furnaces", "vars": ["new model", "old model"]}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "35%", "var": "old model", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "new model furnaces", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "200", "terms": {"new model furnace": "10", "old model": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"new model furnace": "200", "old model": "250"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-0.35, 0.65, 0.0], [-1.0, -0.0, -5.0], [-10.0, -15.0, -200.0], [200.0, 250.0, 3500.0]]}, "solution": null, "entities": [{"start": 57, "end": 66, "word": "new model", "entity_group": "VAR", "score": 0.9999486051599454}, {"start": 74, "end": 83, "word": "old model", "entity_group": "VAR", "score": 0.9999768974127482}, {"start": 88, "end": 105, "word": "new model furnace", "entity_group": "VAR", "score": 0.9991795390604284}, {"start": 115, "end": 117, "word": "10", "entity_group": "PARAM", "score": 0.9996662744444882}, {"start": 142, "end": 145, "word": "200", "entity_group": "PARAM", "score": 0.9996705384076339}, {"start": 163, "end": 172, "word": "old model", "entity_group": "VAR", "score": 0.999979521473626}, {"start": 182, "end": 184, "word": "15", "entity_group": "PARAM", "score": 0.9993472001167187}, {"start": 209, "end": 212, "word": "250", "entity_group": "PARAM", "score": 0.999515297857431}, {"start": 237, "end": 246, "word": "old model", "entity_group": "VAR", "score": 0.9999761129501296}, {"start": 267, "end": 274, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99824437769456}, {"start": 275, "end": 279, "word": "35 %", "entity_group": "LIMIT", "score": 0.9578467479700346}, {"start": 307, "end": 316, "word": "old model", "entity_group": "VAR", "score": 0.9999820266553311}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998886600785577}, {"start": 330, "end": 331, "word": "5", "entity_group": "LIMIT", "score": 0.9995854243919683}, {"start": 332, "end": 350, "word": "new model furnaces", "entity_group": "VAR", "score": 0.9989499539987619}, {"start": 399, "end": 407, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987958891394535}, {"start": 408, "end": 411, "word": "200", "entity_group": "LIMIT", "score": 0.9984817755181468}, {"start": 431, "end": 435, "word": "3500", "entity_group": "LIMIT", "score": 0.9997474285598041}, {"start": 455, "end": 464, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987113139278925}, {"start": 514, "end": 522, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9968688303112334}, {"start": 533, "end": 551, "word": "number of furnaces", "entity_group": "OBJ_NAME", "score": 0.9835367501905872}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNewModel = intvar(0, 999999999)  # Number of new model furnaces\nOldModel = intvar(0, 999999999)  # Number of old model furnaces\n\n# Constraints\nm = Model()\n\n# At least 5 new model furnaces should be used:\nm += NewModel >= 5\n# At most 35% of the furnaces can be the old model:\n# This constraint is a bit tricky because it involves a ratio of old models to the total number of furnaces.\n# We can express it as OldModel <= 0.35 * (NewModel + OldModel)\nm += OldModel <= 0.35 * (NewModel + OldModel)\n# Need to heat at least 200 apartments:\nm += 10 * NewModel + 15 * OldModel >= 200\n# Have 3500 kWh of electricity available:\nm += 200 * NewModel + 250 * OldModel <= 3500\n\n# Objective\n# Minimize the total number of furnaces:\nm.minimize(NewModel + OldModel)\n"}}
{"-1681245352": {"document": "A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?", "order_mapping": {"rural": 0, "urban": 1, "rural factory": 0, "urban factory": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of factories", "vars": ["rural", "urban"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "260", "terms": {"rural factory": "8", "urban factory": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3000", "terms": {"rural factory": "100", "urban factory": "200"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[8.0, 20.0, 260.0], [-100.0, -200.0, -3000.0]]}, "solution": {"x": 20, "y": 5}, "entities": [{"start": 33, "end": 38, "word": "rural", "entity_group": "VAR", "score": 0.9993089596491441}, {"start": 43, "end": 58, "word": "urban factories", "entity_group": "VAR", "score": 0.9999753559283558}, {"start": 63, "end": 76, "word": "rural factory", "entity_group": "VAR", "score": 0.9999820317064889}, {"start": 86, "end": 89, "word": "100", "entity_group": "PARAM", "score": 0.9997298994000705}, {"start": 118, "end": 119, "word": "8", "entity_group": "PARAM", "score": 0.9996889739403938}, {"start": 134, "end": 147, "word": "urban factory", "entity_group": "VAR", "score": 0.9999749601509891}, {"start": 157, "end": 160, "word": "200", "entity_group": "PARAM", "score": 0.9997299341871762}, {"start": 189, "end": 191, "word": "20", "entity_group": "PARAM", "score": 0.9996412559178509}, {"start": 219, "end": 228, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978095433669087}, {"start": 229, "end": 232, "word": "260", "entity_group": "LIMIT", "score": 0.9993956086844737}, {"start": 256, "end": 264, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992065224543928}, {"start": 265, "end": 269, "word": "3000", "entity_group": "LIMIT", "score": 0.9997631330403769}, {"start": 336, "end": 344, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9906967865640415}, {"start": 355, "end": 374, "word": "number of factories", "entity_group": "OBJ_NAME", "score": 0.9813924782047915}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRuralFactories = intvar(0, 999999999)  # Number of rural factories\nUrbanFactories = intvar(0, 999999999)  # Number of urban factories\n\n# Constraints\nm = Model()\n\n# The company has available 260 managers:\nm += 8 * RuralFactories + 20 * UrbanFactories <= 260\n# The company must make at least 3000 phones per day:\nm += 100 * RuralFactories + 200 * UrbanFactories >= 3000\n\n# Objective\n# Minimize the total number of factories:\nm.minimize(RuralFactories + UrbanFactories)\n"}}
{"1051552533": {"document": "An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?", "order_mapping": {"counter-top sized": 0, "fridge sized one": 1, "fridge sizes one": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of machines", "vars": ["counter-top sized", "fridge sized one"]}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "500", "terms": {"counter-top sized": "50", "fridge sized one": "70"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"counter-top sized": "80", "fridge sizes one": "150"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[50.0, 70.0, 500.0], [-80.0, -150.0, -1000.0]]}, "solution": {"x": 0, "y": 7}, "entities": [{"start": 44, "end": 63, "word": "counter - top sized", "entity_group": "VAR", "score": 0.9980015365682442}, {"start": 74, "end": 86, "word": "fridge sized", "entity_group": "VAR", "score": 0.999963401173583}, {"start": 117, "end": 136, "word": "counter - top sized", "entity_group": "VAR", "score": 0.9986356411986617}, {"start": 153, "end": 155, "word": "80", "entity_group": "PARAM", "score": 0.9996185300981476}, {"start": 156, "end": 161, "word": "cones", "entity_group": "OBJ_NAME", "score": 0.963297657417261}, {"start": 171, "end": 180, "word": "ice cream", "entity_group": "OBJ_NAME", "score": 0.9817744247665314}, {"start": 201, "end": 213, "word": "fridge sizes", "entity_group": "VAR", "score": 0.9999522156770163}, {"start": 230, "end": 233, "word": "150", "entity_group": "PARAM", "score": 0.9996429471843679}, {"start": 234, "end": 239, "word": "cones", "entity_group": "OBJ_NAME", "score": 0.9553202592563736}, {"start": 249, "end": 258, "word": "ice cream", "entity_group": "OBJ_NAME", "score": 0.9764030706168595}, {"start": 275, "end": 302, "word": "counter - top sized machine", "entity_group": "VAR", "score": 0.9973432711907444}, {"start": 311, "end": 313, "word": "50", "entity_group": "PARAM", "score": 0.9993684617899385}, {"start": 338, "end": 350, "word": "fridge sized", "entity_group": "VAR", "score": 0.9999688025800506}, {"start": 363, "end": 365, "word": "70", "entity_group": "PARAM", "score": 0.9996745976122023}, {"start": 413, "end": 420, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9979647948367234}, {"start": 421, "end": 424, "word": "500", "entity_group": "LIMIT", "score": 0.9996403991150998}, {"start": 464, "end": 472, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984061340229963}, {"start": 473, "end": 477, "word": "1000", "entity_group": "LIMIT", "score": 0.9994062848780417}, {"start": 478, "end": 483, "word": "cones", "entity_group": "OBJ_NAME", "score": 0.42998153565774055}, {"start": 493, "end": 502, "word": "ice cream", "entity_group": "OBJ_NAME", "score": 0.9921442221771486}, {"start": 549, "end": 557, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9975656870125712}, {"start": 562, "end": 586, "word": "total number of machines", "entity_group": "OBJ_NAME", "score": 0.9767683994801635}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCounterTopSized = intvar(0, 999999999)  # Number of counter-top sized machines\nFridgeSizedOne = intvar(0, 999999999)  # Number of fridge sized machines\n\n# Constraints\nm = Model()\n\n# The ice cream store can output at most 500 units of heat per day:\nm += 50 * CounterTopSized + 70 * FridgeSizedOne <= 500\n# The store must produce at least 1000 cones worth of ice cream every day:\nm += 80 * CounterTopSized + 150 * FridgeSizedOne >= 1000\n\n# Objective\n# Minimize the total number of machines needed:\nm.minimize(CounterTopSized + FridgeSizedOne)\n"}}
{"454157274": {"document": "There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?", "order_mapping": {"small": 0, "large": 1, "small container": 0, "large container": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of paste", "terms": {"small container": "20", "large container": "30"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "500", "terms": {"small container": "10", "large container": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "700", "terms": {"small container": "15", "large container": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-20.0, -30.0], "constraints": [[10.0, 20.0, 500.0], [15.0, 20.0, 700.0]]}, "solution": {"x": 40, "y": 5}, "entities": [{"start": 41, "end": 46, "word": "small", "entity_group": "VAR", "score": 0.9995246847443399}, {"start": 51, "end": 56, "word": "large", "entity_group": "VAR", "score": 0.9995814010024814}, {"start": 114, "end": 129, "word": "small container", "entity_group": "VAR", "score": 0.9999434082115196}, {"start": 139, "end": 141, "word": "10", "entity_group": "PARAM", "score": 0.9996670545852724}, {"start": 161, "end": 163, "word": "15", "entity_group": "PARAM", "score": 0.9997052089951483}, {"start": 199, "end": 201, "word": "20", "entity_group": "PARAM", "score": 0.9995728947142666}, {"start": 215, "end": 220, "word": "paste", "entity_group": "OBJ_NAME", "score": 0.997650851762559}, {"start": 227, "end": 242, "word": "large container", "entity_group": "VAR", "score": 0.9999245226935861}, {"start": 252, "end": 254, "word": "20", "entity_group": "PARAM", "score": 0.9996785521591508}, {"start": 274, "end": 276, "word": "20", "entity_group": "PARAM", "score": 0.9997052089951495}, {"start": 312, "end": 314, "word": "30", "entity_group": "PARAM", "score": 0.9995728948148974}, {"start": 328, "end": 333, "word": "paste", "entity_group": "OBJ_NAME", "score": 0.998339312032581}, {"start": 353, "end": 362, "word": "available", "entity_group": "CONST_DIR", "score": 0.99874144160712}, {"start": 363, "end": 366, "word": "500", "entity_group": "LIMIT", "score": 0.9994370018437476}, {"start": 386, "end": 389, "word": "700", "entity_group": "LIMIT", "score": 0.9997160580036931}, {"start": 464, "end": 472, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9975837795493641}, {"start": 477, "end": 492, "word": "amount of paste", "entity_group": "OBJ_NAME", "score": 0.9883911378361738}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallContainer = intvar(0, 999999999)  # Number of small containers used\nLargeContainer = intvar(0, 999999999)  # Number of large containers used\n\n# Constraints\nm = Model()\n\n# The pharmacy has available 500 units of water:\nm += 10 * SmallContainer + 20 * LargeContainer <= 500\n# The pharmacy has available 700 units of the powdered pill:\nm += 15 * SmallContainer + 20 * LargeContainer <= 700\n\n# Objective\n# Maximize the amount of paste that can be made (20 units from small container, 30 units from large container):\nm.maximize(20 * SmallContainer + 30 * LargeContainer)\n"}}
{"-437895545": {"document": "An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?", "order_mapping": {"small": 0, "large": 1, "small oil well": 0, "large oil well": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total production of oil", "terms": {"small oil well": "2", "large oil well": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2500", "terms": {"small oil well": "5", "large oil well": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "4500", "terms": {"small oil well": "10", "large oil well": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "operates on", "limit": "300", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.0, -5.0], "constraints": [[5.0, 10.0, 2500.0], [10.0, 20.0, 4500.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 0, "y": 225}, "entities": [{"start": 32, "end": 34, "word": "on", "entity_group": "CONST_DIR", "score": 0.5748075200555592}, {"start": 35, "end": 38, "word": "300", "entity_group": "LIMIT", "score": 0.9992044623587667}, {"start": 81, "end": 86, "word": "small", "entity_group": "VAR", "score": 0.9994813271043683}, {"start": 91, "end": 96, "word": "large", "entity_group": "VAR", "score": 0.9995629007183366}, {"start": 125, "end": 139, "word": "small oil well", "entity_group": "VAR", "score": 0.9990160730434955}, {"start": 152, "end": 153, "word": "2", "entity_group": "PARAM", "score": 0.9996169419515073}, {"start": 165, "end": 168, "word": "oil", "entity_group": "OBJ_NAME", "score": 0.9981006906242402}, {"start": 192, "end": 206, "word": "large oil well", "entity_group": "VAR", "score": 0.9990160716741926}, {"start": 219, "end": 220, "word": "5", "entity_group": "PARAM", "score": 0.9996645743339544}, {"start": 232, "end": 235, "word": "oil", "entity_group": "OBJ_NAME", "score": 0.997382898656171}, {"start": 250, "end": 264, "word": "small oil well", "entity_group": "VAR", "score": 0.9991538142147307}, {"start": 274, "end": 276, "word": "10", "entity_group": "PARAM", "score": 0.9997056450789278}, {"start": 309, "end": 310, "word": "5", "entity_group": "PARAM", "score": 0.9987881697124066}, {"start": 337, "end": 351, "word": "large oil well", "entity_group": "VAR", "score": 0.9992435868539576}, {"start": 361, "end": 363, "word": "20", "entity_group": "PARAM", "score": 0.9997177422607528}, {"start": 396, "end": 398, "word": "10", "entity_group": "PARAM", "score": 0.9989010535366586}, {"start": 437, "end": 446, "word": "available", "entity_group": "CONST_DIR", "score": 0.9950370209325453}, {"start": 447, "end": 451, "word": "2500", "entity_group": "LIMIT", "score": 0.9987542814019487}, {"start": 512, "end": 519, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992921131963398}, {"start": 520, "end": 524, "word": "4500", "entity_group": "LIMIT", "score": 0.9997286015543733}, {"start": 597, "end": 605, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9897222620274836}, {"start": 610, "end": 633, "word": "total production of oil", "entity_group": "OBJ_NAME", "score": 0.936529294721541}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallOilWell = intvar(0, 999999999)  # Acres for small oil wells\nLargeOilWell = intvar(0, 999999999)  # Acres for large oil wells\n\n# Constraints\nm = Model()\n\n# The company operates on 300 acres of land:\nm += SmallOilWell + LargeOilWell <= 300\n# The company has available 2500 drill bits (5 per acre for small, 10 per acre for large):\nm += 5 * SmallOilWell + 10 * LargeOilWell <= 2500\n# Due to environmental laws, the company can produce at most 4500 units of pollution (10 per acre for small, 20 per acre for large):\nm += 10 * SmallOilWell + 20 * LargeOilWell <= 4500\n\n# Objective\n# Maximize the total production of oil (2 barrels per acre for small, 5 barrels per acre for large):\nm.maximize(2 * SmallOilWell + 5 * LargeOilWell)\n"}}
{"-1979635456": {"document": "A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?", "order_mapping": {"almond": 0, "pistachio": 1, "almond croissant": 0, "pistachio croissant": 1, "almond croissants": 0, "pistachio croissants": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total production time", "terms": {"almond croissant": "12", "pistachio croissant": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "600", "terms": {"almond croissant": "5", "pistachio croissant": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"almond croissant": "8", "pistachio croissant": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "almond croissants", "direction": "at least", "param": "3", "y_var": "pistachio croissants", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [12.0, 10.0], "constraints": [[5.0, 3.0, 600.0], [8.0, 6.0, 800.0], [-1.0, 3.0, -0.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 15, "end": 21, "word": "almond", "entity_group": "VAR", "score": 0.9976114977493936}, {"start": 26, "end": 46, "word": "pistachio croissants", "entity_group": "VAR", "score": 0.9999787955517804}, {"start": 52, "end": 68, "word": "almond croissant", "entity_group": "VAR", "score": 0.99998599318164}, {"start": 78, "end": 79, "word": "5", "entity_group": "PARAM", "score": 0.9996877361800556}, {"start": 100, "end": 101, "word": "8", "entity_group": "PARAM", "score": 0.999714726072826}, {"start": 121, "end": 140, "word": "pistachio croissant", "entity_group": "VAR", "score": 0.9999819865870264}, {"start": 150, "end": 151, "word": "3", "entity_group": "PARAM", "score": 0.9997203368495309}, {"start": 172, "end": 173, "word": "6", "entity_group": "PARAM", "score": 0.999656636947182}, {"start": 206, "end": 215, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987411249344605}, {"start": 216, "end": 219, "word": "600", "entity_group": "LIMIT", "score": 0.9994011420390534}, {"start": 240, "end": 243, "word": "800", "entity_group": "LIMIT", "score": 0.9996517367735982}, {"start": 271, "end": 287, "word": "almond croissant", "entity_group": "VAR", "score": 0.9999866049961907}, {"start": 306, "end": 314, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9970562194032142}, {"start": 315, "end": 322, "word": "3 times", "entity_group": "PARAM", "score": 0.9377088104925715}, {"start": 331, "end": 348, "word": "almond croissants", "entity_group": "VAR", "score": 0.999976030087778}, {"start": 367, "end": 387, "word": "pistachio croissants", "entity_group": "VAR", "score": 0.9999732493933419}, {"start": 403, "end": 419, "word": "almond croissant", "entity_group": "VAR", "score": 0.9999715349833053}, {"start": 426, "end": 428, "word": "12", "entity_group": "PARAM", "score": 0.9995274415482632}, {"start": 450, "end": 469, "word": "pistachio croissant", "entity_group": "VAR", "score": 0.9999744014634776}, {"start": 476, "end": 478, "word": "10", "entity_group": "PARAM", "score": 0.9994183535000415}, {"start": 524, "end": 532, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992594543995189}, {"start": 543, "end": 558, "word": "production time", "entity_group": "OBJ_NAME", "score": 0.9904387968637958}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlmondCroissants = intvar(0, 999999999)  # Number of almond croissants made\nPistachioCroissants = intvar(0, 999999999)  # Number of pistachio croissants made\n\n# Constraints\nm = Model()\n\n# Butter and flour constraints:\nm += 5 * AlmondCroissants + 3 * PistachioCroissants <= 600  # Butter limit\nm += 8 * AlmondCroissants + 6 * PistachioCroissants <= 800  # Flour limit\n\n# At least 3 times as many almond croissants should be made as pistachio croissants:\nm += AlmondCroissants >= 3 * PistachioCroissants\n\n# Objective\n# Minimize the total production time (12 minutes for almond, 10 minutes for pistachio):\nm.minimize(12 * AlmondCroissants + 10 * PistachioCroissants)\n"}}
{"1789644271": {"document": "A burger chain is buying both gas and electric grills to make burger patties. A gas grill can cook 20 patties per minute while an electric grill can cook 30 patties per minute. The gas grill requires 20 units of cooking oil per minute while the electric grill requires 25 units of cooking oil per minute. Since the gas grill patties taste better, the number of electric grills must be less than the number of gas grills. Further, the burger chain wants to be able to make at least 150 patties per minute and use at most 140 units of cooking oil per minute. How many of each grill should be bought to minimize the total number of grills in the store?", "order_mapping": {"gas": 0, "electric": 1, "gas grill": 0, "electric grill": 1, "electric grills": 1, "gas grills": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of grills", "vars": ["gas", "electric"]}, "const_declarations": [{"type": "xy", "x_var": "electric grills", "direction": "less than", "y_var": "gas grills", "operator": "LESS"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"gas grill": "20", "electric grill": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "140", "terms": {"gas grill": "20", "electric grill": "25"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 1.0, -1], [-20.0, -30.0, -150.0], [20.0, 25.0, 140.0]]}, "solution": null, "entities": [{"start": 30, "end": 33, "word": "gas", "entity_group": "VAR", "score": 0.9978836392353615}, {"start": 38, "end": 53, "word": "electric grills", "entity_group": "VAR", "score": 0.9998546644527512}, {"start": 81, "end": 90, "word": "gas grill", "entity_group": "VAR", "score": 0.999879853495447}, {"start": 100, "end": 102, "word": "20", "entity_group": "PARAM", "score": 0.9995031299083379}, {"start": 103, "end": 110, "word": "patties", "entity_group": "OBJ_NAME", "score": 0.9841193417683282}, {"start": 131, "end": 145, "word": "electric grill", "entity_group": "VAR", "score": 0.9998095054925237}, {"start": 155, "end": 157, "word": "30", "entity_group": "PARAM", "score": 0.9995609960594164}, {"start": 158, "end": 165, "word": "patties", "entity_group": "OBJ_NAME", "score": 0.9885034474510253}, {"start": 183, "end": 192, "word": "gas grill", "entity_group": "VAR", "score": 0.9998428796426811}, {"start": 202, "end": 204, "word": "20", "entity_group": "PARAM", "score": 0.9996331223096661}, {"start": 247, "end": 261, "word": "electric grill", "entity_group": "VAR", "score": 0.999898397543117}, {"start": 271, "end": 273, "word": "25", "entity_group": "PARAM", "score": 0.9996564528158602}, {"start": 318, "end": 327, "word": "gas grill", "entity_group": "VAR", "score": 0.9999832349860895}, {"start": 365, "end": 380, "word": "electric grills", "entity_group": "VAR", "score": 0.9997823224901363}, {"start": 389, "end": 398, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9972594534989628}, {"start": 413, "end": 423, "word": "gas grills", "entity_group": "VAR", "score": 0.999832270722343}, {"start": 478, "end": 486, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990224118182085}, {"start": 487, "end": 490, "word": "150", "entity_group": "LIMIT", "score": 0.9993176889092681}, {"start": 491, "end": 498, "word": "patties", "entity_group": "OBJ_NAME", "score": 0.7458364013450178}, {"start": 518, "end": 525, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989389564382853}, {"start": 526, "end": 529, "word": "140", "entity_group": "LIMIT", "score": 0.9996926758296998}, {"start": 607, "end": 615, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9935267364952636}, {"start": 626, "end": 642, "word": "number of grills", "entity_group": "OBJ_NAME", "score": 0.9771147970451076}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGasGrills = intvar(0, 999999999)  # Number of gas grills\nElectricGrills = intvar(0, 999999999)  # Number of electric grills\n\n# Constraints\nm = Model()\n\n# The number of electric grills must be less than the number of gas grills:\nm += ElectricGrills < GasGrills\n# The burger chain wants to be able to make at least 150 patties per minute:\nm += 20 * GasGrills + 30 * ElectricGrills >= 150\n# The burger chain wants to use at most 140 units of cooking oil per minute:\nm += 20 * GasGrills + 25 * ElectricGrills <= 140\n\n# Objective\n# Minimize the total number of grills in the store:\nm.minimize(GasGrills + ElectricGrills)\n"}}
{"-1766223663": {"document": "A cough syrup company sells cough syrup in kids and adult size bottles. A kids size bottle can hold 100 ml of cough syrup while an adult size bottle can hold 300 ml of cough syrup. Since there is no difference in concentration of medical ingredients between the two bottles, at least 3 times as many adult size bottle must be made as kids size bottles. However, at least 50 kids size bottles must be made. If the company has 25000 ml of cough syrup available, how many bottles of each should be made to maximize the total number of bottles?", "order_mapping": {"kids": 0, "adult size": 1, "kids size bottle": 0, "adult size bottle": 1, "kids size bottles": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of bottles", "vars": ["kids", "adult size"]}, "const_declarations": [{"type": "xby", "x_var": "adult size bottle", "direction": "at least", "param": "3", "y_var": "kids size bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "kids size bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "25000", "terms": {"kids size bottle": "100", "adult size bottle": "300"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[3.0, -1.0, -0.0], [-1.0, -0.0, -50.0], [100.0, 300.0, 25000.0]]}, "solution": null, "entities": [{"start": 43, "end": 47, "word": "kids", "entity_group": "VAR", "score": 0.9992515898605323}, {"start": 52, "end": 62, "word": "adult size", "entity_group": "VAR", "score": 0.999994186168897}, {"start": 75, "end": 91, "word": "kids size bottle", "entity_group": "VAR", "score": 0.9996300984759281}, {"start": 101, "end": 104, "word": "100", "entity_group": "PARAM", "score": 0.9996139294312809}, {"start": 132, "end": 149, "word": "adult size bottle", "entity_group": "VAR", "score": 0.999596051821154}, {"start": 159, "end": 162, "word": "300", "entity_group": "PARAM", "score": 0.9995693108112387}, {"start": 278, "end": 286, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981195180668059}, {"start": 287, "end": 288, "word": "3", "entity_group": "PARAM", "score": 0.9981708517527873}, {"start": 303, "end": 320, "word": "adult size bottle", "entity_group": "VAR", "score": 0.9985352994060701}, {"start": 337, "end": 354, "word": "kids size bottles", "entity_group": "VAR", "score": 0.9990160998393154}, {"start": 367, "end": 375, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984549234631157}, {"start": 376, "end": 378, "word": "50", "entity_group": "LIMIT", "score": 0.9996471383561966}, {"start": 379, "end": 396, "word": "kids size bottles", "entity_group": "VAR", "score": 0.9986074342734355}, {"start": 431, "end": 436, "word": "25000", "entity_group": "LIMIT", "score": 0.9997264984857772}, {"start": 455, "end": 464, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987546407195368}, {"start": 510, "end": 518, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989445778180286}, {"start": 529, "end": 546, "word": "number of bottles", "entity_group": "OBJ_NAME", "score": 0.9813984708914347}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKidsSizeBottles = intvar(0, 999999999)  # Number of kids size bottles made\nAdultSizeBottles = intvar(0, 999999999)  # Number of adult size bottles made\n\n# Constraints\nm = Model()\n\n# At least 3 times as many adult size bottles must be made as kids size bottles:\nm += AdultSizeBottles >= 3 * KidsSizeBottles\n# At least 50 kids size bottles must be made:\nm += KidsSizeBottles >= 50\n# The company has 25000 ml of cough syrup available:\nm += 100 * KidsSizeBottles + 300 * AdultSizeBottles <= 25000\n\n# Objective\n# Maximize the total number of bottles:\nm.maximize(KidsSizeBottles + AdultSizeBottles)\n"}}
{"1151835649": {"document": "A bakery makes fiber supplemented brownies and lemon squares. Each brownie requires 5 units of chocolate mix and 4 units of fiber. Each lemon square requires 7 units of lemon mix and 6 units of fiber. Lemon squares sell much faster and thus the number of lemon squares made must be larger than the number of brownies made. However, to please all customers, at least 40% of the items made must be brownies. If the bakery has 2500 units of chocolate mix and 3300 units of lemon mix, how many of each should be made to minimize the total amount of fiber needed?", "order_mapping": {"brownies": 0, "lemon squares": 1, "brownie": 0, "lemon square": 1, "Lemon squares": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of fiber", "terms": {"brownie": "4", "lemon square": "6"}}, "const_declarations": [{"type": "xy", "x_var": "lemon squares", "direction": "larger than", "y_var": "brownies", "operator": "GREATER"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "brownies", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "2500", "terms": {"brownie": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "3300", "terms": {"lemon square": "7"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [4.0, 6.0], "constraints": [[1.0, -1.0, -1e-06], [-0.6, 0.4, -0.0], [5.0, 0.0, 2500.0], [0.0, 7.0, 3300.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 34, "end": 42, "word": "brownies", "entity_group": "VAR", "score": 0.9995143088770191}, {"start": 47, "end": 60, "word": "lemon squares", "entity_group": "VAR", "score": 0.999982546561873}, {"start": 68, "end": 75, "word": "brownie", "entity_group": "VAR", "score": 0.9996435853274158}, {"start": 85, "end": 86, "word": "5", "entity_group": "PARAM", "score": 0.999621853194446}, {"start": 114, "end": 115, "word": "4", "entity_group": "PARAM", "score": 0.999604539598175}, {"start": 125, "end": 130, "word": "fiber", "entity_group": "OBJ_NAME", "score": 0.9971486239695411}, {"start": 138, "end": 150, "word": "lemon square", "entity_group": "VAR", "score": 0.9999820763180884}, {"start": 160, "end": 161, "word": "7", "entity_group": "PARAM", "score": 0.9997294955673978}, {"start": 185, "end": 186, "word": "6", "entity_group": "PARAM", "score": 0.9995925161747242}, {"start": 196, "end": 201, "word": "fiber", "entity_group": "OBJ_NAME", "score": 0.9951841937212276}, {"start": 204, "end": 217, "word": "Lemon squares", "entity_group": "VAR", "score": 0.9999497096868076}, {"start": 218, "end": 222, "word": "sell", "entity_group": "OBJ_NAME", "score": 0.9912398338868265}, {"start": 258, "end": 271, "word": "lemon squares", "entity_group": "VAR", "score": 0.9999816910304302}, {"start": 311, "end": 319, "word": "brownies", "entity_group": "VAR", "score": 0.9996002103526082}, {"start": 363, "end": 371, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987466689149301}, {"start": 372, "end": 376, "word": "40 %", "entity_group": "LIMIT", "score": 0.9764524342727512}, {"start": 403, "end": 411, "word": "brownies", "entity_group": "VAR", "score": 0.9997931779352234}, {"start": 428, "end": 431, "word": "has", "entity_group": "CONST_DIR", "score": 0.999144867295517}, {"start": 432, "end": 436, "word": "2500", "entity_group": "LIMIT", "score": 0.99870583103043}, {"start": 464, "end": 468, "word": "3300", "entity_group": "LIMIT", "score": 0.9997134858366891}, {"start": 525, "end": 533, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986615134897165}, {"start": 544, "end": 559, "word": "amount of fiber", "entity_group": "OBJ_NAME", "score": 0.9795862870826295}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBrownies = intvar(0, 999999999)  # Number of brownies made\nLemonSquares = intvar(0, 999999999)  # Number of lemon squares made\n\n# Constraints\nm = Model()\n\n# The number of lemon squares made must be larger than the number of brownies made:\nm += LemonSquares > Brownies\n# At least 40% of the items made must be brownies:\nm += Brownies >= 0.4 * (Brownies + LemonSquares)\n# The bakery has 2500 units of chocolate mix (each brownie requires 5 units):\nm += 5 * Brownies <= 2500\n# The bakery has 3300 units of lemon mix (each lemon square requires 7 units):\nm += 7 * LemonSquares <= 3300\n\n# Objective\n# Minimize the total amount of fiber needed (each brownie requires 4 units of fiber, each lemon square requires 6 units):\nm.minimize(4 * Brownies + 6 * LemonSquares)\n"}}
{"1636951466": {"document": "A clinic employs nurses and pharmacists to deliver shots to patients. A nurse works 5 hours per shift while a pharmacist works 7 hours per shift. Nurses are paid $250 per shift while pharmacists are paid $300 per shift. Currently, the clinic needs 200 hours of healthcare labor to meet needs. If the firm has a budget of $9000, how many of each healthcare worker should be scheduled to minimize the total number of workers?", "order_mapping": {"nurses": 0, "pharmacists": 1, "nurse": 0, "pharmacist": 1, "Nurses": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of workers", "vars": ["nurses", "pharmacists"]}, "const_declarations": [{"type": "linear", "direction": "needs", "limit": "200", "terms": {"nurse": "5", "pharmacist": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "9000", "terms": {"Nurses": "250", "pharmacists": "300"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-5.0, -7.0, -200.0], [250.0, 300.0, 9000.0]]}, "solution": {"x": 0, "y": 29}, "entities": [{"start": 17, "end": 23, "word": "nurses", "entity_group": "VAR", "score": 0.9988557764782627}, {"start": 28, "end": 39, "word": "pharmacists", "entity_group": "VAR", "score": 0.998895595655933}, {"start": 73, "end": 78, "word": "nurse", "entity_group": "VAR", "score": 0.999627531428496}, {"start": 85, "end": 86, "word": "5", "entity_group": "PARAM", "score": 0.9996453481437595}, {"start": 111, "end": 121, "word": "pharmacist", "entity_group": "VAR", "score": 0.9994694993624162}, {"start": 128, "end": 129, "word": "7", "entity_group": "PARAM", "score": 0.9993723894989087}, {"start": 148, "end": 154, "word": "Nurses", "entity_group": "VAR", "score": 0.9995690044412567}, {"start": 166, "end": 169, "word": "250", "entity_group": "PARAM", "score": 0.9997052715567625}, {"start": 186, "end": 197, "word": "pharmacists", "entity_group": "VAR", "score": 0.9993607832742699}, {"start": 209, "end": 212, "word": "300", "entity_group": "PARAM", "score": 0.9995291585952606}, {"start": 248, "end": 253, "word": "needs", "entity_group": "CONST_DIR", "score": 0.9666708710927941}, {"start": 254, "end": 257, "word": "200", "entity_group": "LIMIT", "score": 0.9991888392797714}, {"start": 318, "end": 324, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9855149778151664}, {"start": 330, "end": 334, "word": "9000", "entity_group": "LIMIT", "score": 0.9990430880533624}, {"start": 395, "end": 403, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9862626359401663}, {"start": 408, "end": 431, "word": "total number of workers", "entity_group": "OBJ_NAME", "score": 0.9621827525307698}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNurses = intvar(0, 999999999)  # Number of nurses scheduled\nPharmacists = intvar(0, 999999999)  # Number of pharmacists scheduled\n\n# Constraints\nm = Model()\n\n# The clinic needs 200 hours of healthcare labor to meet needs:\nm += 5 * Nurses + 7 * Pharmacists >= 200\n# The clinic has a budget of $9000:\nm += 250 * Nurses + 300 * Pharmacists <= 9000\n\n# Objective\n# Minimize the total number of workers (nurses and pharmacists):\nm.minimize(Nurses + Pharmacists)\n"}}
{"267694031": {"document": "A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash 50 items per day while the front-loading model can wash 75 items per day. The top-loading model consumes 85 kWh per day while the front-loading model consumes 100 kWh per day. The laundromat must be able to wash at least 5000 items per day and has available 7000 kWh per day. Since the top-loading machine are harder to use, at most 40% of the machines can be top-loading. Further, at least 10 machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?", "order_mapping": {"top-loading model": 0, "front-loading model": 1, "top-loading": 0, "front-loading": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of washing machines", "vars": ["top-loading model", "front-loading model"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "5000", "terms": {"top-loading model": "50", "front-loading model": "75"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "7000", "terms": {"top-loading model": "85", "front-loading model": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "top-loading", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "front-loading", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -75.0, -5000.0], [85.0, 100.0, 7000.0], [0.6, -0.4, 0.0], [-0.0, -1.0, -10.0]]}, "solution": {"x": 0, "y": 67}, "entities": [{"start": 55, "end": 74, "word": "top - loading model", "entity_group": "VAR", "score": 0.99878244066577}, {"start": 81, "end": 102, "word": "front - loading model", "entity_group": "VAR", "score": 0.9985416353535967}, {"start": 109, "end": 128, "word": "top - loading model", "entity_group": "VAR", "score": 0.9985967424608466}, {"start": 138, "end": 140, "word": "50", "entity_group": "PARAM", "score": 0.9997246262829075}, {"start": 141, "end": 146, "word": "items", "entity_group": "OBJ_NAME", "score": 0.9860264877046592}, {"start": 165, "end": 186, "word": "front - loading model", "entity_group": "VAR", "score": 0.9981481449073135}, {"start": 196, "end": 198, "word": "75", "entity_group": "PARAM", "score": 0.9996850803325724}, {"start": 199, "end": 204, "word": "items", "entity_group": "OBJ_NAME", "score": 0.9809471888603998}, {"start": 219, "end": 238, "word": "top - loading model", "entity_group": "VAR", "score": 0.9981073441621336}, {"start": 248, "end": 250, "word": "85", "entity_group": "PARAM", "score": 0.9997290283976225}, {"start": 273, "end": 294, "word": "front - loading model", "entity_group": "VAR", "score": 0.9981939815547581}, {"start": 304, "end": 307, "word": "100", "entity_group": "PARAM", "score": 0.9995471861307494}, {"start": 358, "end": 366, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989974825991395}, {"start": 367, "end": 371, "word": "5000", "entity_group": "LIMIT", "score": 0.99973668721667}, {"start": 394, "end": 403, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991056350523607}, {"start": 404, "end": 408, "word": "7000", "entity_group": "LIMIT", "score": 0.9992498232560035}, {"start": 433, "end": 454, "word": "top - loading machine", "entity_group": "VAR", "score": 0.9981056564683451}, {"start": 475, "end": 482, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985585809190206}, {"start": 483, "end": 487, "word": "40 %", "entity_group": "LIMIT", "score": 0.975629390176429}, {"start": 511, "end": 524, "word": "top - loading", "entity_group": "VAR", "score": 0.9993345225659207}, {"start": 537, "end": 545, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989903753812776}, {"start": 546, "end": 548, "word": "10", "entity_group": "LIMIT", "score": 0.9997257578763219}, {"start": 568, "end": 583, "word": "front - loading", "entity_group": "VAR", "score": 0.9979420285915483}, {"start": 640, "end": 648, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998042029761022}, {"start": 659, "end": 685, "word": "number of washing machines", "entity_group": "OBJ_NAME", "score": 0.9671888193728077}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTopLoading = intvar(0, 999999999)  # Number of top-loading machines\nFrontLoading = intvar(0, 999999999)  # Number of front-loading machines\n\n# Constraints\nm = Model()\n\n# The laundromat must be able to wash at least 5000 items per day:\nm += 50 * TopLoading + 75 * FrontLoading >= 5000\n# The laundromat has available 7000 kWh per day:\nm += 85 * TopLoading + 100 * FrontLoading <= 7000\n# At most 40% of the machines can be top-loading:\nm += TopLoading <= 0.4 * (TopLoading + FrontLoading)\n# At least 10 machines should be front-loading:\nm += FrontLoading >= 10\n\n# Objective\n# Minimize the total number of washing machines:\nm.minimize(TopLoading + FrontLoading)\n"}}
{"902707159": {"document": "A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?", "order_mapping": {"small": 0, "large branches": 1, "small branch": 0, "large branch": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of branches", "vars": ["small", "large branches"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"small branch": "10", "large branch": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1200", "terms": {"small branch": "50", "large branch": "100"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[10.0, 15.0, 200.0], [-50.0, -100.0, -1200.0]]}, "solution": {"x": 0, "y": 12}, "entities": [{"start": 17, "end": 22, "word": "small", "entity_group": "VAR", "score": 0.9996954082757824}, {"start": 27, "end": 32, "word": "large", "entity_group": "VAR", "score": 0.9993048834254318}, {"start": 71, "end": 83, "word": "small branch", "entity_group": "VAR", "score": 0.9999768808898574}, {"start": 94, "end": 96, "word": "50", "entity_group": "PARAM", "score": 0.9996876811944962}, {"start": 128, "end": 130, "word": "10", "entity_group": "PARAM", "score": 0.9993300552635569}, {"start": 148, "end": 160, "word": "large branch", "entity_group": "VAR", "score": 0.9999565911000717}, {"start": 171, "end": 174, "word": "100", "entity_group": "PARAM", "score": 0.999687681198286}, {"start": 206, "end": 208, "word": "15", "entity_group": "PARAM", "score": 0.9994306194135949}, {"start": 237, "end": 246, "word": "available", "entity_group": "CONST_DIR", "score": 0.9971161351568613}, {"start": 247, "end": 250, "word": "200", "entity_group": "LIMIT", "score": 0.9990509894206073}, {"start": 294, "end": 302, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991217837476467}, {"start": 303, "end": 307, "word": "1200", "entity_group": "LIMIT", "score": 0.9996271590790743}, {"start": 378, "end": 386, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9916379701868833}, {"start": 391, "end": 415, "word": "total number of branches", "entity_group": "OBJ_NAME", "score": 0.9746644475513566}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBranches = intvar(0, 999999999)  # Number of small branches\nLargeBranches = intvar(0, 999999999)  # Number of large branches\n\n# Constraints\nm = Model()\n\n# The bank has available 200 bank tellers:\nm += 10 * SmallBranches + 15 * LargeBranches <= 200\n# The bank needs to be able to serve at least 1200 customers per day:\nm += 50 * SmallBranches + 100 * LargeBranches >= 1200\n\n# Objective\n# Minimize the total number of branches needed:\nm.minimize(SmallBranches + LargeBranches)\n"}}
{"-691402093": {"document": "A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?", "order_mapping": {"regular": 0, "hybrid": 1, "regular van": 0, "hybrid van": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of vans", "vars": ["regular", "hybrid"]}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "7000", "terms": {"regular van": "200", "hybrid van": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20000", "terms": {"regular van": "500", "hybrid van": "300"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[200.0, 100.0, 7000.0], [-500.0, -300.0, -20000.0]]}, "solution": {"x": 10, "y": 50}, "entities": [{"start": 32, "end": 39, "word": "regular", "entity_group": "VAR", "score": 0.9994495558658644}, {"start": 44, "end": 55, "word": "hybrid vans", "entity_group": "VAR", "score": 0.9999834772199855}, {"start": 79, "end": 90, "word": "regular van", "entity_group": "VAR", "score": 0.9999470433167873}, {"start": 103, "end": 106, "word": "500", "entity_group": "PARAM", "score": 0.9996875156248878}, {"start": 137, "end": 140, "word": "200", "entity_group": "PARAM", "score": 0.9997185384305793}, {"start": 165, "end": 175, "word": "hybrid van", "entity_group": "VAR", "score": 0.9999454499574287}, {"start": 188, "end": 191, "word": "300", "entity_group": "PARAM", "score": 0.9996868886243416}, {"start": 222, "end": 225, "word": "100", "entity_group": "PARAM", "score": 0.9995974856605161}, {"start": 298, "end": 305, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990918319139972}, {"start": 306, "end": 310, "word": "7000", "entity_group": "LIMIT", "score": 0.9997363052150867}, {"start": 391, "end": 399, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991227443258021}, {"start": 400, "end": 405, "word": "20000", "entity_group": "LIMIT", "score": 0.999627159100828}, {"start": 473, "end": 481, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9967097788098593}, {"start": 486, "end": 506, "word": "total number of vans", "entity_group": "OBJ_NAME", "score": 0.9767684017543038}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularVans = intvar(0, 999999999)  # Number of regular vans\nHybridVans = intvar(0, 999999999)  # Number of hybrid vans\n\n# Constraints\nm = Model()\n\n# Due to environmental law, at most 7000 units of pollutants per day:\nm += 200 * RegularVans + 100 * HybridVans <= 7000\n# Company needs to be able to deliver at least 20000 packages per day:\nm += 500 * RegularVans + 300 * HybridVans >= 20000\n\n# Objective\n# Minimize the total number of vans needed:\nm.minimize(RegularVans + HybridVans)\n"}}
{"-2012603375": {"document": "In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?", "order_mapping": {"with a catalyst": 0, "without a catalyst": 1, "process with a catalyst": 0, "process without a catalyst": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of carbon dioxide", "terms": {"process with a catalyst": "15", "process without a catalyst": "18"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "300", "terms": {"process with a catalyst": "10", "process without a catalyst": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"process with a catalyst": "20", "process without a catalyst": "12"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-15.0, -18.0], "constraints": [[10.0, 15.0, 300.0], [20.0, 12.0, 300.0]]}, "solution": {"x": 3, "y": 18}, "entities": [{"start": 71, "end": 86, "word": "with a catalyst", "entity_group": "VAR", "score": 0.9968330052572121}, {"start": 91, "end": 109, "word": "without a catalyst", "entity_group": "VAR", "score": 0.9978734571334574}, {"start": 116, "end": 139, "word": "process with a catalyst", "entity_group": "VAR", "score": 0.9949509341188396}, {"start": 149, "end": 151, "word": "10", "entity_group": "PARAM", "score": 0.9996517644547362}, {"start": 170, "end": 172, "word": "20", "entity_group": "PARAM", "score": 0.9997224944728184}, {"start": 197, "end": 199, "word": "15", "entity_group": "PARAM", "score": 0.9990149711542016}, {"start": 209, "end": 223, "word": "carbon dioxide", "entity_group": "OBJ_NAME", "score": 0.9956590359667904}, {"start": 246, "end": 256, "word": "a catalyst", "entity_group": "VAR", "score": 0.8791678043078364}, {"start": 266, "end": 268, "word": "15", "entity_group": "PARAM", "score": 0.999651764407523}, {"start": 287, "end": 289, "word": "12", "entity_group": "PARAM", "score": 0.9997224944728176}, {"start": 314, "end": 316, "word": "18", "entity_group": "PARAM", "score": 0.9993322065106872}, {"start": 326, "end": 340, "word": "carbon dioxide", "entity_group": "OBJ_NAME", "score": 0.9859014650171211}, {"start": 353, "end": 356, "word": "300", "entity_group": "LIMIT", "score": 0.9997214902518979}, {"start": 375, "end": 378, "word": "300", "entity_group": "LIMIT", "score": 0.9997309528308042}, {"start": 395, "end": 404, "word": "available", "entity_group": "CONST_DIR", "score": 0.9979839309268363}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9978735981510993}, {"start": 463, "end": 487, "word": "amount of carbon dioxide", "entity_group": "OBJ_NAME", "score": 0.9614465687755411}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProcessWithCatalyst = intvar(0, 999999999)  # Number of times the process with a catalyst is used\nProcessWithoutCatalyst = intvar(0, 999999999)  # Number of times the process without a catalyst is used\n\n# Constraints\nm = Model()\n\n# Wood and oxygen constraints\nm += 10 * ProcessWithCatalyst + 15 * ProcessWithoutCatalyst <= 300  # Wood usage should not exceed 300 units\nm += 20 * ProcessWithCatalyst + 12 * ProcessWithoutCatalyst <= 300  # Oxygen usage should not exceed 300 units\n\n# Objective\n# Maximize the amount of carbon dioxide produced (15 units per process with a catalyst, 18 units per process without a catalyst):\nm.maximize(15 * ProcessWithCatalyst + 18 * ProcessWithoutCatalyst)\n\n"}}
{"-2001553884": {"document": "A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?", "order_mapping": {"traditional machine": 0, "modern machine": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of tea leaves", "terms": {"traditional machine": "30", "modern machine": "40"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "500", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "9000", "terms": {"traditional machine": "20", "modern machine": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "6000", "terms": {"traditional machine": "10", "modern machine": "15"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-30.0, -40.0], "constraints": [[1.0, 1.0, 500.0], [20.0, 15.0, 9000.0], [10.0, 15.0, 6000.0]]}, "solution": {"x": 300, "y": 200}, "entities": [{"start": 17, "end": 26, "word": "available", "entity_group": "CONST_DIR", "score": 0.9974939809824779}, {"start": 27, "end": 30, "word": "500", "entity_group": "LIMIT", "score": 0.999151444408496}, {"start": 71, "end": 81, "word": "tea leaves", "entity_group": "OBJ_NAME", "score": 0.9735074270803157}, {"start": 97, "end": 116, "word": "traditional machine", "entity_group": "VAR", "score": 0.9995674113125418}, {"start": 120, "end": 134, "word": "modern machine", "entity_group": "VAR", "score": 0.9999537360437166}, {"start": 165, "end": 184, "word": "traditional machine", "entity_group": "VAR", "score": 0.9999864423382866}, {"start": 194, "end": 196, "word": "30", "entity_group": "PARAM", "score": 0.9996455769150018}, {"start": 203, "end": 213, "word": "tea leaves", "entity_group": "OBJ_NAME", "score": 0.9918666477038831}, {"start": 224, "end": 226, "word": "10", "entity_group": "PARAM", "score": 0.9995447077708413}, {"start": 254, "end": 256, "word": "20", "entity_group": "PARAM", "score": 0.9995357422839278}, {"start": 302, "end": 316, "word": "modern machine", "entity_group": "VAR", "score": 0.9999864423382869}, {"start": 326, "end": 328, "word": "40", "entity_group": "PARAM", "score": 0.999645576915002}, {"start": 335, "end": 345, "word": "tea leaves", "entity_group": "OBJ_NAME", "score": 0.9918666477038837}, {"start": 356, "end": 358, "word": "15", "entity_group": "PARAM", "score": 0.9995447077708418}, {"start": 386, "end": 388, "word": "15", "entity_group": "PARAM", "score": 0.9996367106522868}, {"start": 421, "end": 430, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990398560111262}, {"start": 431, "end": 435, "word": "9000", "entity_group": "LIMIT", "score": 0.9993734077177976}, {"start": 462, "end": 469, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989117010298443}, {"start": 470, "end": 474, "word": "6000", "entity_group": "LIMIT", "score": 0.9996941531181358}, {"start": 539, "end": 547, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9971954001119575}, {"start": 552, "end": 572, "word": "amount of tea leaves", "entity_group": "OBJ_NAME", "score": 0.9747773850927793}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTraditionalMachine = intvar(0, 999999999)  # Acres for traditional machine\nModernMachine = intvar(0, 999999999)  # Acres for modern machine\n\n# Constraints\nm = Model()\n\n# Total acres used by both machines should not exceed 500:\nm += TraditionalMachine + ModernMachine <= 500\n# Fuel usage by both machines should not exceed 9000 liters (20 liters per acre for traditional, 15 liters per acre for modern):\nm += 20 * TraditionalMachine + 15 * ModernMachine <= 9000\n# Waste produced by both machines should not exceed 6000 kg (10 kg per acre for traditional, 15 kg per acre for modern):\nm += 10 * TraditionalMachine + 15 * ModernMachine <= 6000\n\n# Objective\n# Maximize the amount of tea leaves picked (30 kg per acre for traditional, 40 kg per acre for modern):\nm.maximize(30 * TraditionalMachine + 40 * ModernMachine)\n"}}
{"-1584110645": {"document": "A grilled cheese shop sells a light and heavy grilled cheese sandwich. A light grilled cheese sandwich requires 2 slices of bread and 3 slices of cheese. A heavy grilled cheese sandwich requires 3 slices of bread and 5 slices of cheese. Since most people who come to the store love grilled cheese, the store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches. The store has available 300 slices of bread and 500 slices of cheese. If a light grilled cheese sandwich takes 10 minutes to make and a heavy grilled cheese sandwich takes 15 minutes to make, how many of each should they make to minimize the total production time?", "order_mapping": {"light": 0, "heavy": 1, "light grilled cheese sandwich": 0, "heavy grilled cheese sandwich": 1, "heavy grilled cheese sandwiches": 1, "light grilled cheese sandwiches": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total production time", "terms": {"light grilled cheese sandwich": "10", "heavy grilled cheese sandwich": "15"}}, "const_declarations": [{"type": "xby", "x_var": "heavy grilled cheese sandwiches", "direction": "at least", "param": "3", "y_var": "light grilled cheese sandwiches", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"light grilled cheese sandwich": "2", "heavy grilled cheese sandwich": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"light grilled cheese sandwich": "3", "heavy grilled cheese sandwich": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [10.0, 15.0], "constraints": [[3.0, -1.0, -0.0], [2.0, 3.0, 300.0], [3.0, 5.0, 500.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 30, "end": 35, "word": "light", "entity_group": "VAR", "score": 0.9996939672383391}, {"start": 40, "end": 60, "word": "heavy grilled cheese", "entity_group": "VAR", "score": 0.9986491494066795}, {"start": 74, "end": 103, "word": "light grilled cheese sandwich", "entity_group": "VAR", "score": 0.9996188893012234}, {"start": 113, "end": 114, "word": "2", "entity_group": "PARAM", "score": 0.9997222578043691}, {"start": 135, "end": 136, "word": "3", "entity_group": "PARAM", "score": 0.9996976054623764}, {"start": 158, "end": 187, "word": "heavy grilled cheese sandwich", "entity_group": "VAR", "score": 0.998197423024943}, {"start": 197, "end": 198, "word": "3", "entity_group": "PARAM", "score": 0.9997129267687671}, {"start": 219, "end": 220, "word": "5", "entity_group": "PARAM", "score": 0.9996935545448811}, {"start": 322, "end": 330, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983985368570175}, {"start": 331, "end": 338, "word": "3 times", "entity_group": "PARAM", "score": 0.8600534430913562}, {"start": 347, "end": 378, "word": "heavy grilled cheese sandwiches", "entity_group": "VAR", "score": 0.9970016508766307}, {"start": 382, "end": 413, "word": "light grilled cheese sandwiches", "entity_group": "VAR", "score": 0.9994734975399113}, {"start": 430, "end": 439, "word": "available", "entity_group": "CONST_DIR", "score": 0.9984953027157585}, {"start": 440, "end": 443, "word": "300", "entity_group": "LIMIT", "score": 0.9994334859724691}, {"start": 464, "end": 467, "word": "500", "entity_group": "LIMIT", "score": 0.9995964591538936}, {"start": 492, "end": 521, "word": "light grilled cheese sandwich", "entity_group": "VAR", "score": 0.9992701151217811}, {"start": 528, "end": 530, "word": "10", "entity_group": "PARAM", "score": 0.9996986552185301}, {"start": 553, "end": 582, "word": "heavy grilled cheese sandwich", "entity_group": "VAR", "score": 0.9973527209644296}, {"start": 589, "end": 591, "word": "15", "entity_group": "PARAM", "score": 0.9996550633777389}, {"start": 647, "end": 655, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992744019114567}, {"start": 666, "end": 681, "word": "production time", "entity_group": "OBJ_NAME", "score": 0.9905151023485836}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLightGrilledCheese = intvar(0, 999999999)  # Number of light grilled cheese sandwiches\nHeavyGrilledCheese = intvar(0, 999999999)  # Number of heavy grilled cheese sandwiches\n\n# Constraints\nm = Model()\n\n# The store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches:\nm += HeavyGrilledCheese >= 3 * LightGrilledCheese\n# The store has available 300 slices of bread:\nm += 2 * LightGrilledCheese + 3 * HeavyGrilledCheese <= 300\n# The store has available 500 slices of cheese:\nm += 3 * LightGrilledCheese + 5 * HeavyGrilledCheese <= 500\n\n# Objective\n# Minimize the total production time (10 minutes for light and 15 minutes for heavy grilled cheese sandwiches):\nm.minimize(10 * LightGrilledCheese + 15 * HeavyGrilledCheese)\n"}}
{"-642253022": {"document": "A post office is buying stamping machines and they can buy a dual or single model stamping machine. A dual model stamping machine can stamp 50 letters per minute while a single model stamping machine can stamp 30 letters per minute. The dual model stamping machine requires 20 units of glue per minute while the single model stamping machine requires 15 units of glue per minute. Since the single model stamping machine is quieter, the number of single model stamping machines must be more than the number of dual model stamping machines. Further, the post office wants to make sure they can stamp at least 300 letters per minute and use at most 135 units of glue per minute. How many of each stamping machine should they purchase to minimize the total number of stamping machines?", "order_mapping": {"dual": 0, "single": 1, "dual model stamping": 0, "single model stamping": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of stamping machines", "vars": ["dual", "single"]}, "const_declarations": [{"type": "xy", "x_var": "single model stamping", "direction": "more than", "y_var": "dual model stamping", "operator": "GREATER"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"dual model stamping": "50", "single model stamping": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "135", "terms": {"dual model stamping": "20", "single model stamping": "15"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[1.0, -1.0, -1e-06], [-50.0, -30.0, -300.0], [20.0, 15.0, 135.0]]}, "solution": {"x": 3, "y": 5}, "entities": [{"start": 61, "end": 65, "word": "dual", "entity_group": "VAR", "score": 0.9998093104398973}, {"start": 69, "end": 98, "word": "single model stamping machine", "entity_group": "VAR", "score": 0.9992891764058479}, {"start": 103, "end": 130, "word": "dual model stamping machine", "entity_group": "VAR", "score": 0.9994869189491539}, {"start": 135, "end": 140, "word": "stamp", "entity_group": "OBJ_NAME", "score": 0.9924311811982689}, {"start": 141, "end": 143, "word": "50", "entity_group": "PARAM", "score": 0.9968715072256205}, {"start": 144, "end": 151, "word": "letters", "entity_group": "OBJ_NAME", "score": 0.9828301318951588}, {"start": 171, "end": 200, "word": "single model stamping machine", "entity_group": "VAR", "score": 0.99913056757154}, {"start": 211, "end": 213, "word": "30", "entity_group": "PARAM", "score": 0.9994038520762039}, {"start": 214, "end": 221, "word": "letters", "entity_group": "OBJ_NAME", "score": 0.9804514845948861}, {"start": 239, "end": 266, "word": "dual model stamping machine", "entity_group": "VAR", "score": 0.9992300371396038}, {"start": 276, "end": 278, "word": "20", "entity_group": "PARAM", "score": 0.9996878678319739}, {"start": 314, "end": 343, "word": "single model stamping machine", "entity_group": "VAR", "score": 0.9990584491391782}, {"start": 353, "end": 355, "word": "15", "entity_group": "PARAM", "score": 0.9996924930557328}, {"start": 393, "end": 422, "word": "single model stamping machine", "entity_group": "VAR", "score": 0.9982603795183658}, {"start": 450, "end": 480, "word": "single model stamping machines", "entity_group": "VAR", "score": 0.9971633159926288}, {"start": 489, "end": 498, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9890477734406186}, {"start": 513, "end": 541, "word": "dual model stamping machines", "entity_group": "VAR", "score": 0.9989964760569339}, {"start": 604, "end": 612, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990546386820248}, {"start": 613, "end": 616, "word": "300", "entity_group": "LIMIT", "score": 0.9997221491852006}, {"start": 644, "end": 651, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999097995348554}, {"start": 652, "end": 655, "word": "135", "entity_group": "LIMIT", "score": 0.9997274311189963}, {"start": 741, "end": 749, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9920163137266803}, {"start": 760, "end": 787, "word": "number of stamping machines", "entity_group": "OBJ_NAME", "score": 0.9811766056050892}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDualModel = intvar(0, 999999999)  # Number of dual model stamping machines\nSingleModel = intvar(0, 999999999)  # Number of single model stamping machines\n\n# Constraints\nm = Model()\n\n# The number of single model stamping machines must be more than the number of dual model stamping machines:\nm += SingleModel > DualModel\n# The post office wants to make sure they can stamp at least 300 letters per minute:\nm += 50 * DualModel + 30 * SingleModel >= 300\n# Use at most 135 units of glue per minute:\nm += 20 * DualModel + 15 * SingleModel <= 135\n\n# Objective\n# Minimize the total number of stamping machines:\nm.minimize(DualModel + SingleModel)\n"}}
{"-468779640": {"document": "A banana company sells their bananas in small and large crates. A small crate can hold 20 bananas while a large crate can hole 50 bananas. Since large crates are more manageable, the number of large crates must be at least twice the number of small crates. However, at least 5 small crates should be used. If the company has available 500 bananas, how many of each crate should the company use to maximize the total number of crates produced?", "order_mapping": {"small": 0, "large": 1, "small crate": 0, "large crate": 1, "large crates": 1, "small crates": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of crates", "vars": ["small", "large"]}, "const_declarations": [{"type": "xby", "x_var": "large crates", "direction": "at least", "param": "twice", "y_var": "small crates", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "small crates", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"small crate": "20", "large crate": "50"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[2.0, -1.0, -0.0], [-1.0, -0.0, -5.0], [20.0, 50.0, 500.0]]}, "solution": null, "entities": [{"start": 40, "end": 45, "word": "small", "entity_group": "VAR", "score": 0.9995539341819664}, {"start": 50, "end": 62, "word": "large crates", "entity_group": "VAR", "score": 0.9999684856631736}, {"start": 67, "end": 78, "word": "small crate", "entity_group": "VAR", "score": 0.9999754326395888}, {"start": 88, "end": 90, "word": "20", "entity_group": "PARAM", "score": 0.9997095028242445}, {"start": 91, "end": 98, "word": "bananas", "entity_group": "OBJ_NAME", "score": 0.9876681344361169}, {"start": 107, "end": 118, "word": "large crate", "entity_group": "VAR", "score": 0.9999709157384981}, {"start": 128, "end": 130, "word": "50", "entity_group": "PARAM", "score": 0.9996931289092074}, {"start": 131, "end": 138, "word": "bananas", "entity_group": "OBJ_NAME", "score": 0.9894951060626825}, {"start": 147, "end": 159, "word": "large crates", "entity_group": "VAR", "score": 0.9999763803648091}, {"start": 196, "end": 208, "word": "large crates", "entity_group": "VAR", "score": 0.9999470455268075}, {"start": 217, "end": 225, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973347089002725}, {"start": 226, "end": 231, "word": "twice", "entity_group": "PARAM", "score": 0.993760487400559}, {"start": 246, "end": 258, "word": "small crates", "entity_group": "VAR", "score": 0.9999559900284615}, {"start": 271, "end": 279, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985843901255308}, {"start": 280, "end": 281, "word": "5", "entity_group": "LIMIT", "score": 0.9995901134896057}, {"start": 282, "end": 294, "word": "small crates", "entity_group": "VAR", "score": 0.9999384410130394}, {"start": 331, "end": 340, "word": "available", "entity_group": "CONST_DIR", "score": 0.9975024391577203}, {"start": 341, "end": 344, "word": "500", "entity_group": "LIMIT", "score": 0.9989356354837066}, {"start": 345, "end": 352, "word": "bananas", "entity_group": "OBJ_NAME", "score": 0.9926946882286334}, {"start": 404, "end": 412, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9908550290683027}, {"start": 423, "end": 439, "word": "number of crates", "entity_group": "OBJ_NAME", "score": 0.9764293597279547}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallCrates = intvar(0, 999999999)  # Number of small crates\nLargeCrates = intvar(0, 999999999)  # Number of large crates\n\n# Constraints\nm = Model()\n\n# The number of large crates must be at least twice the number of small crates:\nm += LargeCrates >= 2 * SmallCrates\n# At least 5 small crates should be used:\nm += SmallCrates >= 5\n# The company has available 500 bananas:\nm += 20 * SmallCrates + 50 * LargeCrates <= 500\n\n# Objective\n# Maximize the total number of crates produced:\nm.maximize(SmallCrates + LargeCrates)\n"}}
{"1605420061": {"document": "A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?", "order_mapping": {"peanut butter crepes": 0, "chocolate crepe": 1, "peanut butter crepe": 0, "chocolate crepes": 1, "chocolate": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of crepe mix", "terms": {"chocolate crepe": "6", "peanut butter crepe": "7"}}, "const_declarations": [{"type": "xy", "x_var": "peanut butter crepes", "direction": "must exceed", "y_var": "chocolate crepes", "operator": "GREATER"}, {"type": "ratio", "direction": "at least", "limit": "25%", "var": "chocolate", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "400", "terms": {"chocolate crepe": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "450", "terms": {"peanut butter crepe": "4"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [7.0, 6.0], "constraints": [[-1.0, 1.0, -1e-06], [0.25, -0.75, -0.0], [0.0, 3.0, 400.0], [4.0, 0.0, 450.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 20, "end": 29, "word": "chocolate", "entity_group": "VAR", "score": 0.9995683370032996}, {"start": 34, "end": 54, "word": "peanut butter crepes", "entity_group": "VAR", "score": 0.9993891488573614}, {"start": 59, "end": 74, "word": "chocolate crepe", "entity_group": "VAR", "score": 0.9999805902003096}, {"start": 84, "end": 85, "word": "3", "entity_group": "PARAM", "score": 0.9997008299627818}, {"start": 116, "end": 117, "word": "6", "entity_group": "PARAM", "score": 0.9995438705313704}, {"start": 127, "end": 136, "word": "crepe mix", "entity_group": "OBJ_NAME", "score": 0.9967109022027815}, {"start": 141, "end": 160, "word": "peanut butter crepe", "entity_group": "VAR", "score": 0.9968885945460619}, {"start": 170, "end": 171, "word": "4", "entity_group": "PARAM", "score": 0.9996753944891114}, {"start": 206, "end": 207, "word": "7", "entity_group": "PARAM", "score": 0.9996735911295364}, {"start": 217, "end": 226, "word": "crepe mix", "entity_group": "OBJ_NAME", "score": 0.9962360315719533}, {"start": 244, "end": 263, "word": "peanut butter crepe", "entity_group": "VAR", "score": 0.9976626228596066}, {"start": 314, "end": 334, "word": "peanut butter crepes", "entity_group": "VAR", "score": 0.9955427778951371}, {"start": 340, "end": 351, "word": "must exceed", "entity_group": "CONST_DIR", "score": 0.5352692693124275}, {"start": 366, "end": 382, "word": "chocolate crepes", "entity_group": "VAR", "score": 0.9999705403414905}, {"start": 398, "end": 406, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990258769296775}, {"start": 407, "end": 411, "word": "25 %", "entity_group": "LIMIT", "score": 0.9790925678033868}, {"start": 441, "end": 450, "word": "chocolate", "entity_group": "VAR", "score": 0.9998007663824728}, {"start": 467, "end": 476, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993661774701098}, {"start": 477, "end": 480, "word": "400", "entity_group": "LIMIT", "score": 0.9992501238191558}, {"start": 511, "end": 514, "word": "450", "entity_group": "LIMIT", "score": 0.9996637420597663}, {"start": 589, "end": 597, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9979519923319384}, {"start": 608, "end": 627, "word": "amount of crepe mix", "entity_group": "OBJ_NAME", "score": 0.977154823246407}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChocolateCrepes = intvar(0, 999999999)  # Number of chocolate crepes made\nPeanutButterCrepes = intvar(0, 999999999)  # Number of peanut butter crepes made\n\n# Constraints\nm = Model()\n\n# The number of peanut butter crepes made must exceed the number of chocolate crepes made:\nm += PeanutButterCrepes > ChocolateCrepes\n# At least 25% of the crepes made should be chocolate:\nm += ChocolateCrepes >= 0.25 * (ChocolateCrepes + PeanutButterCrepes)\n# The store has available 400 units of chocolate spread (3 units needed per chocolate crepe):\nm += 3 * ChocolateCrepes <= 400\n# The store has available 450 units of peanut butter spread (4 units needed per peanut butter crepe):\nm += 4 * PeanutButterCrepes <= 450\n\n# Objective\n# Minimize the total amount of crepe mix needed (6 units per chocolate crepe, 7 units per peanut butter crepe):\nm.minimize(6 * ChocolateCrepes + 7 * PeanutButterCrepes)\n"}}
{"-1409151968": {"document": "A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns $300. An emergency fire fighter works 6 hours per shift and earns $100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of $7000, how many of each should the fire department hire to minimize the total number of fire fighters?", "order_mapping": {"regular": 0, "emergency fire": 1, "regular fire fighter": 0, "emergency fire fighter": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of fire fighters", "vars": ["regular", "emergency fire"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "300", "terms": {"regular fire fighter": "10", "emergency fire fighter": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "7000", "terms": {"regular fire fighter": "300", "emergency fire fighter": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-10.0, -6.0, -300.0], [300.0, 100.0, 7000.0]]}, "solution": {"x": 15, "y": 25}, "entities": [{"start": 26, "end": 33, "word": "regular", "entity_group": "VAR", "score": 0.9992418407984432}, {"start": 38, "end": 52, "word": "emergency fire", "entity_group": "VAR", "score": 0.9999937907357084}, {"start": 66, "end": 86, "word": "regular fire fighter", "entity_group": "VAR", "score": 0.9993217658329654}, {"start": 93, "end": 95, "word": "10", "entity_group": "PARAM", "score": 0.9996216692437171}, {"start": 116, "end": 121, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9990563195826172}, {"start": 124, "end": 127, "word": "300", "entity_group": "PARAM", "score": 0.9997569213401536}, {"start": 133, "end": 155, "word": "emergency fire fighter", "entity_group": "VAR", "score": 0.9991562521717524}, {"start": 162, "end": 163, "word": "6", "entity_group": "PARAM", "score": 0.9996175015941323}, {"start": 184, "end": 189, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.998462239591153}, {"start": 192, "end": 195, "word": "100", "entity_group": "PARAM", "score": 0.9996511754118818}, {"start": 257, "end": 265, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991287454911282}, {"start": 266, "end": 269, "word": "300", "entity_group": "LIMIT", "score": 0.9996663049859477}, {"start": 328, "end": 334, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9959524494177707}, {"start": 340, "end": 344, "word": "7000", "entity_group": "LIMIT", "score": 0.9990000046996813}, {"start": 399, "end": 407, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9969875838258472}, {"start": 412, "end": 441, "word": "total number of fire fighters", "entity_group": "OBJ_NAME", "score": 0.9567772710893521}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularFireFighters = intvar(0, 999999999)  # Number of regular fire fighters\nEmergencyFireFighters = intvar(0, 999999999)  # Number of emergency fire fighters\n\n# Constraints\nm = Model()\n\n# At least 300 hours of fire fighter time is needed:\nm += 10 * RegularFireFighters + 6 * EmergencyFireFighters >= 300\n# The fire department has a budget of $7000:\nm += 300 * RegularFireFighters + 100 * EmergencyFireFighters <= 7000\n\n# Objective\n# Minimize the total number of fire fighters:\nm.minimize(RegularFireFighters + EmergencyFireFighters)\n"}}
{"-2027758451": {"document": "A mall buys two types of hand sanitizer machines, a motion activated one and a manual one. The motion activated one can deliver 50 drops per minute and consumes 30 kWh. The manual one can deliver 75 drops per minute and consumes 20 kWh. Since the motion activated one is more hygienic, at most 40% of the machines can be manual. In addition, at least 3 should be motion activated. If the mall must be able to deliver at least 1000 drops per minute and can use at most 500 kWh per minute, how many of each machine should they buy to minimize the total number of machines?", "order_mapping": {"motion activated": 0, "manual": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of machines", "vars": ["motion activated", "manual"]}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "40%", "var": "manual", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "motion activated", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"motion activated": "50", "manual": "75"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "500", "terms": {"motion activated": "30", "manual": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-0.4, 0.6, 0.0], [-1.0, -0.0, -3.0], [-50.0, -75.0, -1000.0], [30.0, 20.0, 500.0]]}, "solution": {"x": 11, "y": 6}, "entities": [{"start": 53, "end": 73, "word": "motion activated one", "entity_group": "VAR", "score": 0.9975331473374414}, {"start": 80, "end": 90, "word": "manual one", "entity_group": "VAR", "score": 0.9999265534778992}, {"start": 97, "end": 117, "word": "motion activated one", "entity_group": "VAR", "score": 0.9979084923340716}, {"start": 130, "end": 132, "word": "50", "entity_group": "PARAM", "score": 0.9997196997712353}, {"start": 163, "end": 165, "word": "30", "entity_group": "PARAM", "score": 0.9996919336098677}, {"start": 176, "end": 186, "word": "manual one", "entity_group": "VAR", "score": 0.9999763600165256}, {"start": 199, "end": 201, "word": "75", "entity_group": "PARAM", "score": 0.9997193176472406}, {"start": 232, "end": 234, "word": "20", "entity_group": "PARAM", "score": 0.999702539077093}, {"start": 251, "end": 271, "word": "motion activated one", "entity_group": "VAR", "score": 0.9979044309927952}, {"start": 291, "end": 298, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982239614574433}, {"start": 299, "end": 303, "word": "40 %", "entity_group": "LIMIT", "score": 0.9816028722935749}, {"start": 327, "end": 333, "word": "manual", "entity_group": "VAR", "score": 0.9994494367613971}, {"start": 350, "end": 358, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980960352040242}, {"start": 359, "end": 360, "word": "3", "entity_group": "LIMIT", "score": 0.9994814033454806}, {"start": 371, "end": 387, "word": "motion activated", "entity_group": "VAR", "score": 0.9999027490516743}, {"start": 426, "end": 434, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998983958112422}, {"start": 435, "end": 439, "word": "1000", "entity_group": "LIMIT", "score": 0.9997227261822944}, {"start": 469, "end": 476, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99899059797919}, {"start": 477, "end": 480, "word": "500", "entity_group": "LIMIT", "score": 0.9997434140902618}, {"start": 542, "end": 550, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9974951882338995}, {"start": 561, "end": 579, "word": "number of machines", "entity_group": "OBJ_NAME", "score": 0.9825901544219737}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMotionActivated = intvar(0, 999999999)  # Number of motion activated machines\nManual = intvar(0, 999999999)  # Number of manual machines\n\n# Constraints\nm = Model()\n\n# At most 40% of the machines can be manual:\nm += Manual <= 0.4 * (MotionActivated + Manual)\n# At least 3 should be motion activated:\nm += MotionActivated >= 3\n# The mall must be able to deliver at least 1000 drops per minute:\nm += 50 * MotionActivated + 75 * Manual >= 1000\n# The mall can use at most 500 kWh per minute:\nm += 30 * MotionActivated + 20 * Manual <= 500\n\n# Objective\n# Minimize the total number of machines:\nm.minimize(MotionActivated + Manual)\n"}}
{"844555197": {"document": "A hot dog company can build two types of butcher shops, a small shop and a large shop. A small shop can make 30 hot dogs per day and requires 2 workers. A large shop can make 70 hot dogs per day and requires 4 workers. The company must make at least 500 hot dogs per day but they only have available 30 workers. How many of each butcher shop should the company build to minimize the total number of butcher shops?", "order_mapping": {"small shop": 0, "large shop": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of butcher shops", "vars": ["small shop", "large shop"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "500", "terms": {"small shop": "30", "large shop": "70"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "30", "terms": {"small shop": "2", "large shop": "4"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-30.0, -70.0, -500.0], [2.0, 4.0, 30.0]]}, "solution": {"x": 1, "y": 7}, "entities": [{"start": 59, "end": 69, "word": "small shop", "entity_group": "VAR", "score": 0.999924245497306}, {"start": 76, "end": 86, "word": "large shop", "entity_group": "VAR", "score": 0.9999738825059145}, {"start": 91, "end": 101, "word": "small shop", "entity_group": "VAR", "score": 0.9999802161809178}, {"start": 111, "end": 113, "word": "30", "entity_group": "PARAM", "score": 0.9997016229102801}, {"start": 144, "end": 145, "word": "2", "entity_group": "PARAM", "score": 0.9996759977878737}, {"start": 158, "end": 168, "word": "large shop", "entity_group": "VAR", "score": 0.9999708241813244}, {"start": 178, "end": 180, "word": "70", "entity_group": "PARAM", "score": 0.9997016973667687}, {"start": 211, "end": 212, "word": "4", "entity_group": "PARAM", "score": 0.9996587242090385}, {"start": 245, "end": 253, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987912099252088}, {"start": 254, "end": 257, "word": "500", "entity_group": "LIMIT", "score": 0.9996074933912771}, {"start": 294, "end": 303, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978718596187867}, {"start": 304, "end": 306, "word": "30", "entity_group": "LIMIT", "score": 0.9991995410698281}, {"start": 375, "end": 383, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998579335203726}, {"start": 388, "end": 417, "word": "total number of butcher shops", "entity_group": "OBJ_NAME", "score": 0.9708767131982592}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallShop = intvar(0, 999999999)  # Number of small shops\nLargeShop = intvar(0, 999999999)  # Number of large shops\n\n# Constraints\nm = Model()\n\n# The company must make at least 500 hot dogs per day:\nm += 30 * SmallShop + 70 * LargeShop >= 500\n# The company only has 30 workers available:\nm += 2 * SmallShop + 4 * LargeShop <= 30\n\n# Objective\n# Minimize the total number of butcher shops:\nm.minimize(SmallShop + LargeShop)\n"}}
{"-397147458": {"document": "An airport buys two types of vehicles, a 4-wheeler and 3-wheeler, to help move luggage. A 4-wheeler vehicle can move 60 luggage per day and produces 30 units of pollutant per day. A 3-wheeler vehicle can move 40 luggage per day and produces 15 units of pollutant per day. The airport needs to be able to move at least 1000 luggage per day. To avoid over-polluting the airport, they can produce at most 430 units of pollutant per day. How many of each vehicle should the airport buy to minimize the total number of vehicles needed.", "order_mapping": {"4-wheeler": 0, "3-wheeler,": 1, "4-wheeler vehicle": 0, "3-wheeler vehicle": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of vehicles", "vars": ["4-wheeler", "3-wheeler,"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1000", "terms": {"4-wheeler vehicle": "60", "3-wheeler vehicle": "40"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "430", "terms": {"4-wheeler vehicle": "30", "3-wheeler vehicle": "15"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-60.0, -40.0, -1000.0], [30.0, 15.0, 430.0]]}, "solution": {"x": 6, "y": 16}, "entities": [{"start": 42, "end": 53, "word": "4 - wheeler", "entity_group": "VAR", "score": 0.9995002086953693}, {"start": 58, "end": 69, "word": "3 - wheeler", "entity_group": "VAR", "score": 0.9988257090339474}, {"start": 97, "end": 116, "word": "4 - wheeler vehicle", "entity_group": "VAR", "score": 0.9994293128339654}, {"start": 126, "end": 128, "word": "60", "entity_group": "PARAM", "score": 0.9992971022645325}, {"start": 129, "end": 136, "word": "luggage", "entity_group": "OBJ_NAME", "score": 0.9704532336136991}, {"start": 158, "end": 160, "word": "30", "entity_group": "PARAM", "score": 0.9996870162888051}, {"start": 192, "end": 211, "word": "3 - wheeler vehicle", "entity_group": "VAR", "score": 0.9994147336983187}, {"start": 221, "end": 223, "word": "40", "entity_group": "PARAM", "score": 0.9992562090580057}, {"start": 253, "end": 255, "word": "15", "entity_group": "PARAM", "score": 0.9996870162888867}, {"start": 322, "end": 330, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991340545567738}, {"start": 331, "end": 335, "word": "1000", "entity_group": "LIMIT", "score": 0.9994480672860472}, {"start": 411, "end": 418, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991068193018873}, {"start": 419, "end": 422, "word": "430", "entity_group": "LIMIT", "score": 0.9997279717016321}, {"start": 503, "end": 511, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9970486550300496}, {"start": 516, "end": 540, "word": "total number of vehicles", "entity_group": "OBJ_NAME", "score": 0.9762111433981776}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFourWheeler = intvar(0, 999999999)  # Number of 4-wheeler vehicles\nThreeWheeler = intvar(0, 999999999)  # Number of 3-wheeler vehicles\n\n# Constraints\nm = Model()\n\n# The airport needs to be able to move at least 1000 luggage per day:\nm += 60 * FourWheeler + 40 * ThreeWheeler >= 1000\n# The airport can produce at most 430 units of pollutant per day:\nm += 30 * FourWheeler + 15 * ThreeWheeler <= 430\n\n# Objective\n# Minimize the total number of vehicles needed:\nm.minimize(FourWheeler + ThreeWheeler)\n"}}
{"-1807877749": {"document": "A scientist is conducting two experiments to produce electricity, experiment alpha and experiment beta. In experiment alpha, 3 units of metal and 5 units of acid are required to produce 8 units of electricity. In experiment beta, 5 units of metal and 4 units of acid are required to produced 10 units of electricity. The lab has 800 units of metal and 750 units of acid available. How many of each experiment should the scientist conduct to maximize the total amount of electricity produced?", "order_mapping": {"experiment alpha": 0, "experiment beta": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of electricity", "terms": {"experiment alpha": "8", "experiment beta": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "800", "terms": {"experiment alpha": "3", "experiment beta": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "750", "terms": {"experiment alpha": "5", "experiment beta": "4"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -10.0], "constraints": [[3.0, 5.0, 800.0], [5.0, 4.0, 750.0]]}, "solution": {"x": 40, "y": 136}, "entities": [{"start": 67, "end": 83, "word": "experiment alpha", "entity_group": "VAR", "score": 0.9999594115961234}, {"start": 88, "end": 103, "word": "experiment beta", "entity_group": "VAR", "score": 0.999985594173566}, {"start": 109, "end": 125, "word": "experiment alpha", "entity_group": "VAR", "score": 0.9999638997339744}, {"start": 128, "end": 129, "word": "3", "entity_group": "PARAM", "score": 0.9997177625426256}, {"start": 149, "end": 150, "word": "5", "entity_group": "PARAM", "score": 0.9997202088490053}, {"start": 189, "end": 190, "word": "8", "entity_group": "PARAM", "score": 0.9993689495095576}, {"start": 200, "end": 211, "word": "electricity", "entity_group": "OBJ_NAME", "score": 0.9991259769756752}, {"start": 217, "end": 232, "word": "experiment beta", "entity_group": "VAR", "score": 0.9999640733450864}, {"start": 235, "end": 236, "word": "5", "entity_group": "PARAM", "score": 0.9997319511039909}, {"start": 256, "end": 257, "word": "4", "entity_group": "PARAM", "score": 0.9997203635180506}, {"start": 297, "end": 299, "word": "10", "entity_group": "PARAM", "score": 0.9988392033581417}, {"start": 309, "end": 320, "word": "electricity", "entity_group": "OBJ_NAME", "score": 0.9993694036881979}, {"start": 335, "end": 338, "word": "800", "entity_group": "LIMIT", "score": 0.9997371857408595}, {"start": 358, "end": 361, "word": "750", "entity_group": "LIMIT", "score": 0.9996825074109477}, {"start": 376, "end": 385, "word": "available", "entity_group": "CONST_DIR", "score": 0.9979954410428753}, {"start": 448, "end": 456, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9989461333313969}, {"start": 467, "end": 488, "word": "amount of electricity", "entity_group": "OBJ_NAME", "score": 0.9682242010445744}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nExperimentAlpha = intvar(0, 999999999)  # Number of times experiment alpha is conducted\nExperimentBeta = intvar(0, 999999999)  # Number of times experiment beta is conducted\n\n# Constraints\nm = Model()\n\n# Metal constraint: 3 units per alpha experiment and 5 units per beta experiment, with 800 units available\nm += 3*ExperimentAlpha + 5*ExperimentBeta <= 800\n# Acid constraint: 5 units per alpha experiment and 4 units per beta experiment, with 750 units available\nm += 5*ExperimentAlpha + 4*ExperimentBeta <= 750\n\n# Objective\n# Maximize the total amount of electricity produced: 8 units per alpha and 10 units per beta\nm.maximize(8*ExperimentAlpha + 10*ExperimentBeta)\n\n"}}
{"-1809449648": {"document": "A man fishes in a 250 acre lake and can catch fish either using a net or fishing line. For each acre of the lake, using a net will catch 8 fish and requires 4 units of bait but also causes 2 units of pain for the fisherman. For each acre of the lake, using a fishing line will catch 5 fish and requires 3 units of bait but also causes 1 unit of pain for the fisherman. The fisherman has available 800 units of bait and can tolerate at most 350 units of pain. For how many acres each should he use each fishing method to maximize the amount of fish he can catch?", "order_mapping": {"net": 0, "fishing line": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of fish", "terms": {"net": "8", "fishing line": "5"}}, "const_declarations": [{"type": "sum", "direction": "in a", "limit": "250", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"net": "4", "fishing line": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "350", "terms": {"net": "2", "fishing line": "1"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -5.0], "constraints": [[1.0, 1.0, 250.0], [4.0, 3.0, 800.0], [2.0, 1.0, 350.0]]}, "solution": {"x": 125, "y": 100}, "entities": [{"start": 13, "end": 15, "word": "in", "entity_group": "CONST_DIR", "score": 0.9899186188473542}, {"start": 18, "end": 21, "word": "250", "entity_group": "LIMIT", "score": 0.9997382370744086}, {"start": 66, "end": 69, "word": "net", "entity_group": "VAR", "score": 0.995460129727409}, {"start": 73, "end": 85, "word": "fishing line", "entity_group": "VAR", "score": 0.99995400357274}, {"start": 124, "end": 127, "word": "net", "entity_group": "VAR", "score": 0.99881048082441}, {"start": 139, "end": 140, "word": "8", "entity_group": "PARAM", "score": 0.9928572605545146}, {"start": 141, "end": 145, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.9967260357822326}, {"start": 159, "end": 160, "word": "4", "entity_group": "PARAM", "score": 0.999708989210528}, {"start": 191, "end": 192, "word": "2", "entity_group": "PARAM", "score": 0.9996474911364207}, {"start": 263, "end": 275, "word": "fishing line", "entity_group": "VAR", "score": 0.9999140546402402}, {"start": 287, "end": 288, "word": "5", "entity_group": "PARAM", "score": 0.9936954001313587}, {"start": 289, "end": 293, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.9840784747090419}, {"start": 307, "end": 308, "word": "3", "entity_group": "PARAM", "score": 0.9996877818699255}, {"start": 339, "end": 340, "word": "1", "entity_group": "PARAM", "score": 0.9993438077770864}, {"start": 392, "end": 401, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987639846720899}, {"start": 402, "end": 405, "word": "800", "entity_group": "LIMIT", "score": 0.9993781531164664}, {"start": 437, "end": 444, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988878207883006}, {"start": 445, "end": 448, "word": "350", "entity_group": "LIMIT", "score": 0.9996727367284564}, {"start": 526, "end": 534, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9968056186552856}, {"start": 539, "end": 553, "word": "amount of fish", "entity_group": "OBJ_NAME", "score": 0.9692621682277062}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNetAcreage = intvar(0, 250)  # Number of acres fished using a net\nLineAcreage = intvar(0, 250)  # Number of acres fished using a fishing line\n\n# Constraints\nm = Model()\n\n# Total acreage fished by both methods should not exceed 250 acres:\nm += NetAcreage + LineAcreage <= 250\n# The fisherman has available 800 units of bait:\nm += 4 * NetAcreage + 3 * LineAcreage <= 800\n# The fisherman can tolerate at most 350 units of pain:\nm += 2 * NetAcreage + 1 * LineAcreage <= 350\n\n# Objective\n# Maximize the amount of fish caught (8 fish per acre with a net, 5 fish per acre with a fishing line):\nm.maximize(8 * NetAcreage + 5 * LineAcreage)\n\n"}}
{"498603121": {"document": "A coffee shop sells mochas and regular coffees. Each mocha requires 3 units of coffee powder and 6 units of milk. Each regular coffee requires 6 units of coffee powder and 2 units of milk. The shop has available 400 units of coffee powder and 500 units of milk. Making a mocha takes 5 minutes and making a regular coffee takes 3 minutes. Since mochas are more popular among people, the shop must make at least 3 times as many mochas as regular coffees. How many of each should they make to minimize the total production time?", "order_mapping": {"mochas": 0, "regular coffees": 1, "mocha": 0, "regular coffee": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total production time", "terms": {"mocha": "5", "regular coffee": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"mocha": "3", "regular coffee": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"mocha": "6", "regular coffee": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "mochas", "direction": "at least", "param": "3", "y_var": "regular coffees", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 3.0], "constraints": [[3.0, 6.0, 400.0], [6.0, 2.0, 500.0], [-1.0, 3.0, -0.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 20, "end": 26, "word": "mochas", "entity_group": "VAR", "score": 0.9996480684638834}, {"start": 31, "end": 46, "word": "regular coffees", "entity_group": "VAR", "score": 0.9999865243013114}, {"start": 54, "end": 59, "word": "mocha", "entity_group": "VAR", "score": 0.9996707911496807}, {"start": 69, "end": 70, "word": "3", "entity_group": "PARAM", "score": 0.9996696316151443}, {"start": 98, "end": 99, "word": "6", "entity_group": "PARAM", "score": 0.9996064311688628}, {"start": 121, "end": 135, "word": "regular coffee", "entity_group": "VAR", "score": 0.9999786406267983}, {"start": 145, "end": 146, "word": "6", "entity_group": "PARAM", "score": 0.9997323470093025}, {"start": 174, "end": 175, "word": "2", "entity_group": "PARAM", "score": 0.999401819465875}, {"start": 205, "end": 214, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995922271701199}, {"start": 215, "end": 218, "word": "400", "entity_group": "LIMIT", "score": 0.9992857003294758}, {"start": 246, "end": 249, "word": "500", "entity_group": "LIMIT", "score": 0.998822217890586}, {"start": 275, "end": 280, "word": "mocha", "entity_group": "VAR", "score": 0.9994912131748698}, {"start": 287, "end": 288, "word": "5", "entity_group": "PARAM", "score": 0.9996491364369785}, {"start": 310, "end": 324, "word": "regular coffee", "entity_group": "VAR", "score": 0.9999439186810203}, {"start": 331, "end": 332, "word": "3", "entity_group": "PARAM", "score": 0.9996364038698274}, {"start": 349, "end": 355, "word": "mochas", "entity_group": "VAR", "score": 0.9993130858505989}, {"start": 407, "end": 415, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982484803781495}, {"start": 416, "end": 423, "word": "3 times", "entity_group": "PARAM", "score": 0.6971055709802989}, {"start": 432, "end": 438, "word": "mochas", "entity_group": "VAR", "score": 0.9992741483481242}, {"start": 442, "end": 457, "word": "regular coffees", "entity_group": "VAR", "score": 0.9999610379952908}, {"start": 497, "end": 505, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9991604780664127}, {"start": 510, "end": 531, "word": "total production time", "entity_group": "OBJ_NAME", "score": 0.9647232028299018}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMochas = intvar(0, 999999999)  # Number of mochas made\nRegularCoffees = intvar(0, 999999999)  # Number of regular coffees made\n\n# Constraints\nm = Model()\n\n# Coffee powder constraint: 3 units per mocha and 6 units per regular coffee, 400 units available\nm += 3*Mochas + 6*RegularCoffees <= 400\n# Milk constraint: 6 units per mocha and 2 units per regular coffee, 500 units available\nm += 6*Mochas + 2*RegularCoffees <= 500\n# Mochas must be at least 3 times as many as regular coffees\nm += Mochas >= 3*RegularCoffees\n\n# Objective\n# Minimize total production time: 5 minutes per mocha and 3 minutes per regular coffee\nm.minimize(5*Mochas + 3*RegularCoffees)\n\n"}}
{"1165597365": {"document": "A butcher shop is buying meat slicers for their shop, a manual and automatic slicer. The manual slicer can cut 5 slices per minute while the automatic slicer can cut 8 slices per minute. In addition, to make sure all the parts operate smoothly, the manual slicer requires 3 units of grease per minute while the automatic slicer requires 6 units of grease per minute. Since the automatic slicer does not need someone to operate it, the number of manual slicers must be less than the number of automatic slicers. In addition, the butcher shop needs to be able to cut at least 50 slices per minute but can use at most 35 units of grease per minute. How many of each slicer should the butcher shop buy to minimize the total number of slicers in the shop?", "order_mapping": {"manual": 0, "automatic": 1, "manual slicer": 0, "automatic slicer": 1, "manual slicers": 0, "automatic slicers": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "the total number of slicers", "vars": ["manual", "automatic"]}, "const_declarations": [{"type": "xy", "x_var": "manual slicers", "direction": "less than", "y_var": "automatic slicers", "operator": "LESS"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"manual slicer": "5", "automatic slicer": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "35", "terms": {"manual slicer": "3", "automatic slicer": "6"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[1.0, -1.0, -1e-06], [-5.0, -8.0, -50.0], [3.0, 6.0, 35.0]]}, "solution": null, "entities": [{"start": 57, "end": 63, "word": "manual", "entity_group": "VAR", "score": 0.9991409863376906}, {"start": 68, "end": 84, "word": "automatic slicer", "entity_group": "VAR", "score": 0.9998957307896318}, {"start": 91, "end": 104, "word": "manual slicer", "entity_group": "VAR", "score": 0.9999277568380136}, {"start": 113, "end": 114, "word": "5", "entity_group": "PARAM", "score": 0.9995829976517628}, {"start": 115, "end": 121, "word": "slices", "entity_group": "OBJ_NAME", "score": 0.9897968886479488}, {"start": 143, "end": 159, "word": "automatic slicer", "entity_group": "VAR", "score": 0.9998613300073039}, {"start": 168, "end": 169, "word": "8", "entity_group": "PARAM", "score": 0.999618106328989}, {"start": 170, "end": 176, "word": "slices", "entity_group": "OBJ_NAME", "score": 0.9913666998188767}, {"start": 254, "end": 267, "word": "manual slicer", "entity_group": "VAR", "score": 0.9998514869236371}, {"start": 277, "end": 278, "word": "3", "entity_group": "PARAM", "score": 0.9996919988630343}, {"start": 316, "end": 332, "word": "automatic slicer", "entity_group": "VAR", "score": 0.9998613564441028}, {"start": 342, "end": 343, "word": "6", "entity_group": "PARAM", "score": 0.9996763161762188}, {"start": 383, "end": 399, "word": "automatic slicer", "entity_group": "VAR", "score": 0.9999187789773011}, {"start": 452, "end": 466, "word": "manual slicers", "entity_group": "VAR", "score": 0.9997775739883489}, {"start": 475, "end": 484, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9970088876195587}, {"start": 499, "end": 516, "word": "automatic slicers", "entity_group": "VAR", "score": 0.9997473418106282}, {"start": 574, "end": 582, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999047021587603}, {"start": 583, "end": 585, "word": "50", "entity_group": "LIMIT", "score": 0.9993589615042343}, {"start": 586, "end": 592, "word": "slices", "entity_group": "OBJ_NAME", "score": 0.722386848847125}, {"start": 616, "end": 623, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990111807177658}, {"start": 624, "end": 626, "word": "35", "entity_group": "LIMIT", "score": 0.9997560353158601}, {"start": 711, "end": 719, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9916116328346379}, {"start": 730, "end": 747, "word": "number of slicers", "entity_group": "OBJ_NAME", "score": 0.9777803688920863}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nManualSlicers = intvar(0, 999999999)  # Number of manual slicers\nAutomaticSlicers = intvar(0, 999999999)  # Number of automatic slicers\n\n# Constraints\nm = Model()\n\n# The number of manual slicers must be less than the number of automatic slicers:\nm += ManualSlicers < AutomaticSlicers\n# The shop needs to be able to cut at least 50 slices per minute:\nm += 5 * ManualSlicers + 8 * AutomaticSlicers >= 50\n# The shop can use at most 35 units of grease per minute:\nm += 3 * ManualSlicers + 6 * AutomaticSlicers <= 35\n\n# Objective\n# Minimize the total number of slicers in the shop:\nm.minimize(ManualSlicers + AutomaticSlicers)\n"}}
{"-24265158": {"document": "A water company sells water in glass and plastic bottles. A glass bottle can hole 500 ml of water while a plastic bottle can hold 750 ml of water. Because most customer prefer plastic bottles, the number of plastic bottles must be at least 3 times the number of glass bottles. However, there must be at least 20 glass bottles. If the company has available 250000 ml of water, how many of each bottle should be made to maximize the total number of bottles?", "order_mapping": {"glass": 0, "plastic": 1, "glass bottle": 0, "plastic bottle": 1, "plastic bottles": 1, "glass bottles": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of bottles", "vars": ["glass", "plastic"]}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "20", "var": "glass bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "plastic bottles", "direction": "at least", "param": "3", "y_var": "glass bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "250000", "terms": {"glass bottle": "500", "plastic bottle": "750"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[-1.0, -0.0, -20.0], [3.0, -1.0, -0.0], [500.0, 750.0, 250000.0]]}, "solution": {"x": 90, "y": 273}, "entities": [{"start": 31, "end": 36, "word": "glass", "entity_group": "VAR", "score": 0.9994052674255458}, {"start": 41, "end": 56, "word": "plastic bottles", "entity_group": "VAR", "score": 0.9999635285658972}, {"start": 61, "end": 73, "word": "glass bottle", "entity_group": "VAR", "score": 0.999973924501952}, {"start": 83, "end": 86, "word": "500", "entity_group": "PARAM", "score": 0.9996579017754728}, {"start": 93, "end": 98, "word": "water", "entity_group": "OBJ_NAME", "score": 0.7614293791023257}, {"start": 107, "end": 121, "word": "plastic bottle", "entity_group": "VAR", "score": 0.9999471947352462}, {"start": 131, "end": 134, "word": "750", "entity_group": "PARAM", "score": 0.9996324316254732}, {"start": 141, "end": 146, "word": "water", "entity_group": "OBJ_NAME", "score": 0.7047456264067129}, {"start": 178, "end": 193, "word": "plastic bottles", "entity_group": "VAR", "score": 0.9999566584784109}, {"start": 210, "end": 225, "word": "plastic bottles", "entity_group": "VAR", "score": 0.9999511590282755}, {"start": 234, "end": 242, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998049368077917}, {"start": 243, "end": 250, "word": "3 times", "entity_group": "PARAM", "score": 0.6609586261243076}, {"start": 265, "end": 278, "word": "glass bottles", "entity_group": "VAR", "score": 0.9999526769225411}, {"start": 305, "end": 313, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976598707022}, {"start": 314, "end": 316, "word": "20", "entity_group": "LIMIT", "score": 0.9994766488475989}, {"start": 317, "end": 330, "word": "glass bottles", "entity_group": "VAR", "score": 0.9999443552492223}, {"start": 352, "end": 361, "word": "available", "entity_group": "CONST_DIR", "score": 0.9974694394615297}, {"start": 362, "end": 368, "word": "250000", "entity_group": "LIMIT", "score": 0.9990280517640454}, {"start": 425, "end": 433, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985884152985995}, {"start": 444, "end": 461, "word": "number of bottles", "entity_group": "OBJ_NAME", "score": 0.981398470892036}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGlassBottles = intvar(0, 999999999)  # Number of glass bottles\nPlasticBottles = intvar(0, 999999999)  # Number of plastic bottles\n\n# Constraints\nm = Model()\n\n# There must be at least 20 glass bottles:\nm += GlassBottles >= 20\n# The number of plastic bottles must be at least 3 times the number of glass bottles:\nm += PlasticBottles >= 3 * GlassBottles\n# The total volume of water in bottles cannot exceed 250000 ml:\nm += 500 * GlassBottles + 750 * PlasticBottles <= 250000\n\n# Objective\n# Maximize the total number of bottles:\nm.maximize(GlassBottles + PlasticBottles)\n"}}
{"-1540907330": {"document": "An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?", "order_mapping": {"goat": 0, "chicken": 1, "goat curry": 0, "chicken curry": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of curry base", "terms": {"goat curry": "6", "chicken curry": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1500", "terms": {"goat curry": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2000", "terms": {"chicken curry": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "At least", "limit": "25%", "var": "chicken curry", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "goat curry", "direction": "must be larger than", "y_var": "chicken curry", "operator": "GREATER"}], "canonical": {"objective": [6.0, 5.0], "constraints": [[3.0, 0.0, 1500.0], [0.0, 5.0, 2000.0], [0.25, -0.75, -0.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 27, "end": 31, "word": "goat", "entity_group": "VAR", "score": 0.9994680539960034}, {"start": 36, "end": 49, "word": "chicken curry", "entity_group": "VAR", "score": 0.9999663474585387}, {"start": 65, "end": 75, "word": "goat curry", "entity_group": "VAR", "score": 0.9999755961849062}, {"start": 85, "end": 86, "word": "3", "entity_group": "PARAM", "score": 0.9996506141860928}, {"start": 110, "end": 111, "word": "6", "entity_group": "PARAM", "score": 0.9996585533026154}, {"start": 125, "end": 135, "word": "curry base", "entity_group": "OBJ_NAME", "score": 0.9976655442698872}, {"start": 151, "end": 164, "word": "chicken curry", "entity_group": "VAR", "score": 0.9999743549076642}, {"start": 174, "end": 175, "word": "5", "entity_group": "PARAM", "score": 0.99965344398594}, {"start": 202, "end": 203, "word": "5", "entity_group": "PARAM", "score": 0.9996601644607399}, {"start": 217, "end": 222, "word": "curry", "entity_group": "OBJ_NAME", "score": 0.9971451007791958}, {"start": 249, "end": 258, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994981214306422}, {"start": 259, "end": 263, "word": "1500", "entity_group": "LIMIT", "score": 0.999335418943464}, {"start": 273, "end": 277, "word": "goat", "entity_group": "VAR", "score": 0.9990230824794871}, {"start": 287, "end": 291, "word": "2000", "entity_group": "LIMIT", "score": 0.9996959892850917}, {"start": 316, "end": 324, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9973637364578958}, {"start": 325, "end": 329, "word": "25 %", "entity_group": "LIMIT", "score": 0.954259137624221}, {"start": 356, "end": 369, "word": "chicken curry", "entity_group": "VAR", "score": 0.9999820050085592}, {"start": 378, "end": 388, "word": "goat curry", "entity_group": "VAR", "score": 0.999965658610113}, {"start": 421, "end": 437, "word": "goat curry bowls", "entity_group": "VAR", "score": 0.7793625039739032}, {"start": 472, "end": 491, "word": "chicken curry bowls", "entity_group": "VAR", "score": 0.9990153730884923}, {"start": 548, "end": 556, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9952904500958866}, {"start": 567, "end": 587, "word": "amount of curry base", "entity_group": "OBJ_NAME", "score": 0.9782722260003742}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGoatCurry = intvar(0, 999999999)  # Number of goat curry bowls made\nChickenCurry = intvar(0, 999999999)  # Number of chicken curry bowls made\n\n# Constraints\nm = Model()\n\n# Goat meat constraint: 3 units of goat meat per goat curry bowl\nm += 3 * GoatCurry <= 1500\n# Chicken meat constraint: 5 units of chicken meat per chicken curry bowl\nm += 5 * ChickenCurry <= 2000\n# At least 25% of the bowls made must be chicken curry\nm += ChickenCurry >= 0.25 * (GoatCurry + ChickenCurry)\n# Goat curry bowls must be larger than chicken curry bowls\nm += GoatCurry > ChickenCurry\n\n# Objective\n# Minimize the total amount of curry base used (6 units per goat curry bowl, 5 units per chicken curry bowl)\nm.minimize(6 * GoatCurry + 5 * ChickenCurry)\n"}}
{"-1363773320": {"document": "An accounting firm employs part time workers and full time workers. Full time workers work 8 hours per shift while part time workers work 4 hours per shift. In addition, full time workers are paid $300 per shift while part time workers are paid $100 per shift. Currently, the accounting firm has a project requiring 500 hours of labor. If the firm has a budget of $15000, how many of each type of worker should be scheduled to minimize the total number of workers.", "order_mapping": {"part time workers": 0, "full time workers": 1, "Full time workers": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of workers", "vars": ["part time workers", "full time workers"]}, "const_declarations": [{"type": "linear", "direction": "requiring", "limit": "500", "terms": {"Full time workers": "8", "part time workers": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "15000", "terms": {"full time workers": "300", "part time workers": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-4.0, -8.0, -500.0], [100.0, 300.0, 15000.0]]}, "solution": {"x": 75, "y": 25}, "entities": [{"start": 27, "end": 44, "word": "part time workers", "entity_group": "VAR", "score": 0.9964810420287553}, {"start": 49, "end": 66, "word": "full time workers", "entity_group": "VAR", "score": 0.9948988472442264}, {"start": 69, "end": 86, "word": "Full time workers", "entity_group": "VAR", "score": 0.9994135989335995}, {"start": 92, "end": 93, "word": "8", "entity_group": "PARAM", "score": 0.9996558078120089}, {"start": 116, "end": 133, "word": "part time workers", "entity_group": "VAR", "score": 0.9993564103451649}, {"start": 139, "end": 140, "word": "4", "entity_group": "PARAM", "score": 0.9995816887857903}, {"start": 173, "end": 190, "word": "full time workers", "entity_group": "VAR", "score": 0.9986682395155354}, {"start": 202, "end": 205, "word": "300", "entity_group": "PARAM", "score": 0.9993198929890761}, {"start": 222, "end": 239, "word": "part time workers", "entity_group": "VAR", "score": 0.9989395673767157}, {"start": 251, "end": 254, "word": "100", "entity_group": "PARAM", "score": 0.9968542556596854}, {"start": 313, "end": 322, "word": "requiring", "entity_group": "CONST_DIR", "score": 0.7118516305253171}, {"start": 323, "end": 326, "word": "500", "entity_group": "LIMIT", "score": 0.9975493599980567}, {"start": 362, "end": 368, "word": "budget", "entity_group": "CONST_DIR", "score": 0.985514813761358}, {"start": 374, "end": 379, "word": "15000", "entity_group": "LIMIT", "score": 0.9990712233490782}, {"start": 437, "end": 445, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9958257768544233}, {"start": 450, "end": 473, "word": "total number of workers", "entity_group": "OBJ_NAME", "score": 0.9630865716630637}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPartTimeWorkers = intvar(0, 999999999)  # Number of part time workers\nFullTimeWorkers = intvar(0, 999999999)  # Number of full time workers\n\n# Constraints\nm = Model()\n\n# The project requires at least 500 hours of labor:\nm += 4 * PartTimeWorkers + 8 * FullTimeWorkers >= 500\n# The firm has a budget of $15000:\nm += 100 * PartTimeWorkers + 300 * FullTimeWorkers <= 15000\n\n# Objective\n# Minimize the total number of workers:\nm.minimize(PartTimeWorkers + FullTimeWorkers)\n"}}
{"410247479": {"document": "A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?", "order_mapping": {"A": 0, "B.": 1, "machine A": 0, "Machine B": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of machines", "vars": ["A", "B."]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1000", "terms": {"machine A": "30", "Machine B": "50"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3000", "terms": {"machine A": "100", "Machine B": "120"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "B.", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "A", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-30.0, -50.0, -1000.0], [100.0, 120.0, 3000.0], [-0.3, 0.7, 0.0], [-1.0, -0.0, -5.0]]}, "solution": {"x": 20, "y": 8}, "entities": [{"start": 29, "end": 30, "word": "A", "entity_group": "VAR", "score": 0.9979152154642826}, {"start": 35, "end": 37, "word": "B.", "entity_group": "VAR", "score": 0.9994957436300366}, {"start": 49, "end": 58, "word": "machine A", "entity_group": "VAR", "score": 0.9999551245445333}, {"start": 68, "end": 70, "word": "30", "entity_group": "PARAM", "score": 0.9996065890401292}, {"start": 90, "end": 93, "word": "100", "entity_group": "PARAM", "score": 0.9997163757647605}, {"start": 100, "end": 109, "word": "Machine B", "entity_group": "VAR", "score": 0.9999722531817032}, {"start": 119, "end": 121, "word": "50", "entity_group": "PARAM", "score": 0.9993802004375105}, {"start": 141, "end": 144, "word": "120", "entity_group": "PARAM", "score": 0.9996652679315092}, {"start": 184, "end": 192, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990521303149635}, {"start": 193, "end": 197, "word": "1000", "entity_group": "LIMIT", "score": 0.9997037484940532}, {"start": 220, "end": 224, "word": "3000", "entity_group": "LIMIT", "score": 0.9997029493756416}, {"start": 244, "end": 253, "word": "available", "entity_group": "CONST_DIR", "score": 0.996266085563651}, {"start": 330, "end": 337, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987288927855913}, {"start": 338, "end": 342, "word": "30 %", "entity_group": "LIMIT", "score": 0.9636081612093739}, {"start": 370, "end": 377, "word": "type B.", "entity_group": "VAR", "score": 0.999983726026254}, {"start": 388, "end": 396, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989240858740708}, {"start": 397, "end": 398, "word": "5", "entity_group": "LIMIT", "score": 0.9996179173454632}, {"start": 411, "end": 417, "word": "type A", "entity_group": "VAR", "score": 0.9997757883261037}, {"start": 478, "end": 486, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9818055203029836}, {"start": 497, "end": 515, "word": "number of machines", "entity_group": "OBJ_NAME", "score": 0.9811824207619148}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMachineA = intvar(0, 999999999)  # Number of Machine A used\nMachineB = intvar(0, 999999999)  # Number of Machine B used\n\n# Constraints\nm = Model()\n\n# The factory must produce at least 1000 items per day:\nm += 30 * MachineA + 50 * MachineB >= 1000\n# The factory has 3000 kWh of electricity available per day:\nm += 100 * MachineA + 120 * MachineB <= 3000\n# At most 30% of the machines must be of type B:\nm += MachineB <= 0.3 * (MachineA + MachineB)\n# At least 5 machines of type A should be used:\nm += MachineA >= 5\n\n# Objective\n# Minimize the total number of machines:\nm.minimize(MachineA + MachineB)\n"}}
{"-742925976": {"document": "A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?", "order_mapping": {"medium sized factory": 0, "small factory": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of factories", "vars": ["medium sized factory", "small factory"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "250", "terms": {"medium sized factory": "50", "small factory": "35"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "16", "terms": {"medium sized factory": "3", "small factory": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -35.0, -250.0], [3.0, 2.0, 16.0]]}, "solution": {"x": 5, "y": 0}, "entities": [{"start": 46, "end": 66, "word": "medium sized factory", "entity_group": "VAR", "score": 0.9986207385446766}, {"start": 73, "end": 86, "word": "small factory", "entity_group": "VAR", "score": 0.9999660267830653}, {"start": 91, "end": 111, "word": "medium sized factory", "entity_group": "VAR", "score": 0.9988991694936663}, {"start": 121, "end": 123, "word": "50", "entity_group": "PARAM", "score": 0.9997431424108136}, {"start": 150, "end": 151, "word": "3", "entity_group": "PARAM", "score": 0.9996685933198508}, {"start": 166, "end": 179, "word": "small factory", "entity_group": "VAR", "score": 0.9999709529374887}, {"start": 189, "end": 191, "word": "35", "entity_group": "PARAM", "score": 0.9996971645240388}, {"start": 218, "end": 219, "word": "2", "entity_group": "PARAM", "score": 0.9996467258789814}, {"start": 254, "end": 262, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991612620195962}, {"start": 263, "end": 266, "word": "250", "entity_group": "LIMIT", "score": 0.9997232168974917}, {"start": 299, "end": 308, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978739537303195}, {"start": 309, "end": 311, "word": "16", "entity_group": "LIMIT", "score": 0.9991996100911781}, {"start": 377, "end": 385, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9978010266704512}, {"start": 390, "end": 415, "word": "total number of factories", "entity_group": "OBJ_NAME", "score": 0.9630562554470653}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMediumFactory = intvar(0, 999999999)  # Number of medium sized factories\nSmallFactory = intvar(0, 999999999)  # Number of small factories\n\n# Constraints\nm = Model()\n\n# The company must make at least 250 toys per day:\nm += 50 * MediumFactory + 35 * SmallFactory >= 250\n# The company only has available 16 operators:\nm += 3 * MediumFactory + 2 * SmallFactory <= 16\n\n# Objective\n# Minimize the total number of factories:\nm.minimize(MediumFactory + SmallFactory)\n\n"}}
{"-1603650758": {"document": "A chemical plant can buy two types of generators, generator A and generator B, which use two different processes to generate hydrogen. Generator A uses an electrolysis process and produces 40 cubic meters of hydrogen as well as 300 units of pollutants every day. Generator B uses a fermentation process to produce 30 cubic meters of hydrogen per day while outputting 200 units of pollutants. The chemical plant must make a minimum of 1000 cubic meters of hydrogen per day but due to environmental restrictions they can produce at most 3000 units of pollutant. How many of each type of generator should they buy to minimize the number of generators needed?", "order_mapping": {"generator A": 0, "generator B": 1, "Generator A": 0, "Generator B": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of generators", "vars": ["generator A", "generator B"]}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "1000", "terms": {"Generator A": "40", "Generator B": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "3000", "terms": {"Generator A": "300", "Generator B": "200"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-40.0, -30.0, -1000.0], [300.0, 200.0, 3000.0]]}, "solution": null, "entities": [{"start": 51, "end": 62, "word": "generator A", "entity_group": "VAR", "score": 0.9999409070613817}, {"start": 67, "end": 78, "word": "generator B", "entity_group": "VAR", "score": 0.9999789188400835}, {"start": 138, "end": 149, "word": "Generator A", "entity_group": "VAR", "score": 0.9999780177499835}, {"start": 192, "end": 194, "word": "40", "entity_group": "PARAM", "score": 0.9997142104745228}, {"start": 231, "end": 234, "word": "300", "entity_group": "PARAM", "score": 0.9997157023568112}, {"start": 267, "end": 278, "word": "Generator B", "entity_group": "VAR", "score": 0.9999843209442552}, {"start": 318, "end": 320, "word": "30", "entity_group": "PARAM", "score": 0.9994920089939713}, {"start": 371, "end": 374, "word": "200", "entity_group": "PARAM", "score": 0.9993467208348686}, {"start": 428, "end": 435, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9954432024369032}, {"start": 439, "end": 443, "word": "1000", "entity_group": "LIMIT", "score": 0.9996485106402194}, {"start": 532, "end": 539, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9993413504525033}, {"start": 540, "end": 544, "word": "3000", "entity_group": "LIMIT", "score": 0.9997211370917753}, {"start": 620, "end": 628, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9988777807149994}, {"start": 633, "end": 653, "word": "number of generators", "entity_group": "OBJ_NAME", "score": 0.9908375793735228}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGeneratorA = intvar(0, 999999999)  # Number of Generator A\nGeneratorB = intvar(0, 999999999)  # Number of Generator B\n\n# Constraints\nm = Model()\n\n# The chemical plant must make a minimum of 1000 cubic meters of hydrogen per day:\nm += 40 * GeneratorA + 30 * GeneratorB >= 1000\n# Due to environmental restrictions, they can produce at most 3000 units of pollutant:\nm += 300 * GeneratorA + 200 * GeneratorB <= 3000\n\n# Objective\n# Minimize the number of generators needed:\nm.minimize(GeneratorA + GeneratorB)\n"}}
{"2024321843": {"document": "There are two chemical reactions, chemical reaction A and chemical reaction B. Chemical reaction A requires 5 units of rare inert gas and 6 units of treated water to produce 10 units of a rare compound. Chemical reaction B requires 7 units of rare inert gas and 3 units of treater water to produce 8 units of a rare compound. There are 1000 units of the rare inert gas and 800 units of treated water available in the lab. How many reactions of each type should be done to maximize the amount of rare compound produced?", "order_mapping": {"chemical reaction A": 0, "chemical reaction B.": 1, "Chemical reaction A": 0, "Chemical reaction B": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of rare compound", "terms": {"Chemical reaction A": "10", "Chemical reaction B": "8"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"Chemical reaction A": "5", "Chemical reaction B": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "800", "terms": {"Chemical reaction A": "6", "Chemical reaction B": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-10.0, -8.0], "constraints": [[5.0, 7.0, 1000.0], [6.0, 3.0, 800.0]]}, "solution": {"x": 96, "y": 74}, "entities": [{"start": 35, "end": 54, "word": "chemical reaction A", "entity_group": "VAR", "score": 0.9989945506569072}, {"start": 59, "end": 79, "word": "chemical reaction B.", "entity_group": "VAR", "score": 0.9990004324303822}, {"start": 80, "end": 99, "word": "Chemical reaction A", "entity_group": "VAR", "score": 0.9994974761012899}, {"start": 109, "end": 110, "word": "5", "entity_group": "PARAM", "score": 0.9996248507626543}, {"start": 120, "end": 124, "word": "rare", "entity_group": "OBJ_NAME", "score": 0.8955558923130758}, {"start": 139, "end": 140, "word": "6", "entity_group": "PARAM", "score": 0.9997121513967191}, {"start": 175, "end": 177, "word": "10", "entity_group": "PARAM", "score": 0.9996512188162636}, {"start": 189, "end": 202, "word": "rare compound", "entity_group": "OBJ_NAME", "score": 0.996625894254699}, {"start": 205, "end": 224, "word": "Chemical reaction B", "entity_group": "VAR", "score": 0.9990742238109708}, {"start": 234, "end": 235, "word": "7", "entity_group": "PARAM", "score": 0.9997038293877043}, {"start": 264, "end": 265, "word": "3", "entity_group": "PARAM", "score": 0.9997127068963553}, {"start": 300, "end": 301, "word": "8", "entity_group": "PARAM", "score": 0.9996347907530407}, {"start": 313, "end": 326, "word": "rare compound", "entity_group": "OBJ_NAME", "score": 0.9948732796964245}, {"start": 339, "end": 343, "word": "1000", "entity_group": "LIMIT", "score": 0.9997192371710452}, {"start": 376, "end": 379, "word": "800", "entity_group": "LIMIT", "score": 0.9997050386148526}, {"start": 403, "end": 412, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991716480601429}, {"start": 476, "end": 484, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996217640112884}, {"start": 489, "end": 512, "word": "amount of rare compound", "entity_group": "OBJ_NAME", "score": 0.969763286358897}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChemicalReactionA = intvar(0, 999999999)  # Number of chemical reaction A to be done\nChemicalReactionB = intvar(0, 999999999)  # Number of chemical reaction B to be done\n\n# Constraints\nm = Model()\n\n# Rare inert gas constraint (1000 units available):\nm += 5 * ChemicalReactionA + 7 * ChemicalReactionB <= 1000\n# Treated water constraint (800 units available):\nm += 6 * ChemicalReactionA + 3 * ChemicalReactionB <= 800\n\n# Objective\n# Maximize the amount of rare compound produced (10 units per reaction A, 8 units per reaction B):\nm.maximize(10 * ChemicalReactionA + 8 * ChemicalReactionB)\n"}}
{"1168196894": {"document": "A mining company has available a total of 100 square miles of mining sites and considering the use of two mining techniques: heap leaching and vat leaching. For each square mile of land, heap leaching technique can have a daily production of 3 tons of rare earth oxide per square miles but it also creates 8 tons of polluted wastewater and requires 10 extraction machines. On the other hand, vat leaching technique produces 5 tons of rare earth oxide per square miles per day while creating 17 tons of polluted wastewater and requiring 20 extraction machines. There are 100 machines available and due to environmental regulations, the amount of polluted wastewater must be at most 90 tons daily. Find the proportion of lands that use each mining technique in order to maximize the daily production of rare earth oxide.", "order_mapping": {"heap leaching": 0, "vat leaching": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "rare earth oxide", "terms": {"heap leaching": "3", "vat leaching": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"heap leaching": "10", "vat leaching": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "90", "terms": {"heap leaching": "8", "vat leaching": "17"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "available", "limit": "100", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-3.0, -5.0], "constraints": [[10.0, 20.0, 100.0], [8.0, 17.0, 90.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 10, "y": 0}, "entities": [{"start": 33, "end": 38, "word": "total", "entity_group": "CONST_DIR", "score": 0.996976980404557}, {"start": 42, "end": 45, "word": "100", "entity_group": "LIMIT", "score": 0.9995941418182962}, {"start": 126, "end": 139, "word": "heap leaching", "entity_group": "VAR", "score": 0.9999559051243999}, {"start": 144, "end": 156, "word": "vat leaching", "entity_group": "VAR", "score": 0.9999791030602185}, {"start": 190, "end": 213, "word": "heap leaching technique", "entity_group": "VAR", "score": 0.9996824581558268}, {"start": 231, "end": 241, "word": "production", "entity_group": "OBJ_NAME", "score": 0.9275920536030675}, {"start": 245, "end": 246, "word": "3", "entity_group": "PARAM", "score": 0.9996764950190288}, {"start": 255, "end": 271, "word": "rare earth oxide", "entity_group": "OBJ_NAME", "score": 0.9756769903757557}, {"start": 309, "end": 310, "word": "8", "entity_group": "PARAM", "score": 0.9997268977348246}, {"start": 352, "end": 354, "word": "10", "entity_group": "PARAM", "score": 0.999653951594154}, {"start": 397, "end": 419, "word": "vat leaching technique", "entity_group": "VAR", "score": 0.9997354460276082}, {"start": 429, "end": 430, "word": "5", "entity_group": "PARAM", "score": 0.9996883326210817}, {"start": 439, "end": 455, "word": "rare earth oxide", "entity_group": "OBJ_NAME", "score": 0.969136298500427}, {"start": 496, "end": 498, "word": "17", "entity_group": "PARAM", "score": 0.9996937264215378}, {"start": 541, "end": 543, "word": "20", "entity_group": "PARAM", "score": 0.9996558067093416}, {"start": 576, "end": 579, "word": "100", "entity_group": "LIMIT", "score": 0.9993758806783185}, {"start": 589, "end": 598, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996974060841676}, {"start": 680, "end": 687, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982950210425673}, {"start": 688, "end": 690, "word": "90", "entity_group": "LIMIT", "score": 0.9997485396023597}, {"start": 776, "end": 784, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9890126663267286}, {"start": 795, "end": 808, "word": "production of", "entity_group": "OBJ_NAME", "score": 0.9742194396557259}, {"start": 809, "end": 825, "word": "rare earth oxide", "entity_group": "OBJ_NAME", "score": 0.984713061293435}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeapLeaching = intvar(0, 100)  # Proportion of lands using heap leaching technique\nVatLeaching = intvar(0, 100)  # Proportion of lands using vat leaching technique\n\n# Constraints\nm = Model()\n\n# Total land available is 100 square miles:\nm += HeapLeaching + VatLeaching <= 100\n# There are 100 machines available:\nm += 10 * HeapLeaching + 20 * VatLeaching <= 100\n# The amount of polluted wastewater must be at most 90 tons daily:\nm += 8 * HeapLeaching + 17 * VatLeaching <= 90\n\n# Objective\n# Maximize the daily production of rare earth oxide:\nm.maximize(3 * HeapLeaching + 5 * VatLeaching)\n\n"}}
{"492091808": {"document": "A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars.  If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?", "order_mapping": {"milk chocolate": 0, "dark chocolate bars": 1, "Milk chocolate bars": 0, "Dark chocolate bars": 1, "milk chocolate bars": 0, "milk chocolate bar": 0, "dark chocolate bar": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total production time", "terms": {"milk chocolate bar": "15", "dark chocolate bar": "12"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"Milk chocolate bars": "4", "Dark chocolate bars": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1750", "terms": {"Milk chocolate bars": "7", "Dark chocolate bars": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "milk chocolate bars", "direction": "at least", "param": "2", "y_var": "dark chocolate bars", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [15.0, 12.0], "constraints": [[4.0, 6.0, 2000.0], [7.0, 3.0, 1750.0], [-1.0, 2.0, -0.0]]}, "solution": {"x": 0, "y": 0}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMilkChocolateBars = intvar(0, 999999999)  # Number of milk chocolate bars made\nDarkChocolateBars = intvar(0, 999999999)  # Number of dark chocolate bars made\n\n# Constraints\nm = Model()\n\n# Cocoa and milk constraints\nm += 4 * MilkChocolateBars + 6 * DarkChocolateBars <= 2000  # Cocoa constraint\nm += 7 * MilkChocolateBars + 3 * DarkChocolateBars <= 1750  # Milk constraint\n\n# At least 2 times as many milk chocolate bars need to be made as dark chocolate bars\nm += MilkChocolateBars >= 2 * DarkChocolateBars\n\n# Objective\n# Minimize total production time (15 minutes for milk chocolate bar, 12 minutes for dark chocolate bar)\nm.minimize(15 * MilkChocolateBars + 12 * DarkChocolateBars)\n\n"}}
{"1333247991": {"document": "An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute.  Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?", "order_mapping": {"premium model": 0, "regular model": 1, "regular printers": 1, "premium printers": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of printers", "vars": ["premium model", "regular model"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "200", "terms": {"premium model": "30", "regular model": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "35", "terms": {"premium model": "4", "regular model": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "regular printers", "direction": "less than", "y_var": "premium printers", "operator": "LESS"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-30.0, -20.0, -200.0], [4.0, 3.0, 35.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 6, "y": 1}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPremiumPrinters = intvar(0, 999999999)  # Number of premium printers\nRegularPrinters = intvar(0, 999999999)  # Number of regular printers\n\n# Constraints\nm = Model()\n\n# At least 200 pages can be printed per minute:\nm += 30 * PremiumPrinters + 20 * RegularPrinters >= 200\n# At most 35 units of ink are used per minute:\nm += 4 * PremiumPrinters + 3 * RegularPrinters <= 35\n# The number of regular printers must be less than the number of premium printers:\nm += RegularPrinters < PremiumPrinters\n\n# Objective\n# Minimize the total number of printers:\nm.minimize(PremiumPrinters + RegularPrinters)\n"}}
{"2084816058": {"document": "A vine company sells vine in vintage and regular bottles. A vintage bottle can hold 500 ml of vine while a regular bottle can hold 750 ml of vine. The company has available 100000 ml of vine. Because vintage bottles are mostly bought by collectors, the number of regular bottles must be at least 4 times as much as the number of vintage bottles. However, at least 10 vintage bottles must be made. How many of each should be made to maximize the total number of bottles produced?", "order_mapping": {"vintage": 0, "regular bottles": 1, "vintage bottle": 0, "regular bottle": 1, "vintage bottles": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of bottles", "vars": ["vintage", "regular bottles"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100000", "terms": {"vintage bottle": "500", "regular bottle": "750"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "regular bottles", "direction": "at least", "param": "4", "y_var": "vintage bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "vintage bottles", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[500.0, 750.0, 100000.0], [4.0, -1.0, -0.0], [-1.0, -0.0, -10.0]]}, "solution": {"x": 28, "y": 114}, "entities": [{"start": 29, "end": 36, "word": "vintage", "entity_group": "VAR", "score": 0.9995992994216584}, {"start": 41, "end": 56, "word": "regular bottles", "entity_group": "VAR", "score": 0.9999642570437219}, {"start": 61, "end": 75, "word": "vintage bottle", "entity_group": "VAR", "score": 0.9999805461838636}, {"start": 85, "end": 88, "word": "500", "entity_group": "PARAM", "score": 0.9996579700709741}, {"start": 108, "end": 122, "word": "regular bottle", "entity_group": "VAR", "score": 0.9999366049817245}, {"start": 132, "end": 135, "word": "750", "entity_group": "PARAM", "score": 0.9995861662734387}, {"start": 165, "end": 174, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982444275084558}, {"start": 175, "end": 181, "word": "100000", "entity_group": "LIMIT", "score": 0.9993512797428175}, {"start": 203, "end": 218, "word": "vintage bottles", "entity_group": "VAR", "score": 0.999954204864698}, {"start": 267, "end": 282, "word": "regular bottles", "entity_group": "VAR", "score": 0.9999483416726297}, {"start": 291, "end": 299, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9958113627792984}, {"start": 300, "end": 307, "word": "4 times", "entity_group": "PARAM", "score": 0.6843363182841323}, {"start": 333, "end": 348, "word": "vintage bottles", "entity_group": "VAR", "score": 0.9999494560437843}, {"start": 361, "end": 369, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989973330948956}, {"start": 370, "end": 372, "word": "10", "entity_group": "LIMIT", "score": 0.9996173435775666}, {"start": 373, "end": 388, "word": "vintage bottles", "entity_group": "VAR", "score": 0.9999425049899222}, {"start": 439, "end": 447, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988344944616149}, {"start": 452, "end": 457, "word": "total", "entity_group": "OBJ_NAME", "score": 0.974052610162456}, {"start": 458, "end": 475, "word": "number of bottles", "entity_group": "OBJ_NAME", "score": 0.9523897350738354}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVintageBottles = intvar(0, 999999999)  # Number of vintage bottles made\nRegularBottles = intvar(0, 999999999)  # Number of regular bottles made\n\n# Constraints\nm = Model()\n\n# The company has available 100000 ml of vine:\nm += 500 * VintageBottles + 750 * RegularBottles <= 100000\n# The number of regular bottles must be at least 4 times as much as the number of vintage bottles:\nm += RegularBottles >= 4 * VintageBottles\n# At least 10 vintage bottles must be made:\nm += VintageBottles >= 10\n\n# Objective\n# Maximize the total number of bottles produced:\nm.maximize(VintageBottles + RegularBottles)\n"}}
{"1268238141": {"document": "A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?", "order_mapping": {"peach flavored candy": 0, "cherry flavored candy": 1, "Peach candy": 0, "peach candy": 0, "cherry candy": 1, "cherry flavored": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of special syrup", "terms": {"peach flavored candy": "5", "cherry flavored candy": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"peach flavored candy": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "4000", "terms": {"cherry flavored candy": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "peach candy", "direction": "larger than", "y_var": "cherry candy", "operator": "GREATER"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "cherry flavored", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 4.0], "constraints": [[3.0, 0.0, 3000.0], [0.0, 5.0, 4000.0], [-1.0, 1.0, -1e-06], [0.3, -0.7, -0.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 26, "end": 46, "word": "peach flavored candy", "entity_group": "VAR", "score": 0.998558326452761}, {"start": 51, "end": 72, "word": "cherry flavored candy", "entity_group": "VAR", "score": 0.9994721874908948}, {"start": 88, "end": 108, "word": "peach flavored candy", "entity_group": "VAR", "score": 0.9992316269264835}, {"start": 118, "end": 119, "word": "3", "entity_group": "PARAM", "score": 0.9997181544055177}, {"start": 149, "end": 150, "word": "5", "entity_group": "PARAM", "score": 0.99954012032022}, {"start": 189, "end": 210, "word": "cherry flavored candy", "entity_group": "VAR", "score": 0.9992323825798272}, {"start": 220, "end": 221, "word": "5", "entity_group": "PARAM", "score": 0.9997181544055168}, {"start": 252, "end": 253, "word": "4", "entity_group": "PARAM", "score": 0.9995401383807783}, {"start": 295, "end": 304, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994890974095734}, {"start": 305, "end": 309, "word": "3000", "entity_group": "LIMIT", "score": 0.9993354476913636}, {"start": 339, "end": 343, "word": "4000", "entity_group": "LIMIT", "score": 0.9996585017493996}, {"start": 372, "end": 383, "word": "Peach candy", "entity_group": "VAR", "score": 0.9998939195087364}, {"start": 428, "end": 439, "word": "peach candy", "entity_group": "VAR", "score": 0.9999877379167699}, {"start": 480, "end": 492, "word": "cherry candy", "entity_group": "VAR", "score": 0.9999505018322253}, {"start": 515, "end": 523, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987250361222255}, {"start": 524, "end": 528, "word": "30 %", "entity_group": "LIMIT", "score": 0.9635659780468799}, {"start": 549, "end": 564, "word": "cherry flavored", "entity_group": "VAR", "score": 0.9997497785814597}, {"start": 602, "end": 610, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9979654266790056}, {"start": 621, "end": 644, "word": "amount of special syrup", "entity_group": "OBJ_NAME", "score": 0.9820267533430804}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPeachCandy = intvar(0, 999999999)  # Number of peach flavored candy packs made\nCherryCandy = intvar(0, 999999999)  # Number of cherry flavored candy packs made\n\n# Constraints\nm = Model()\n\n# Peach flavoring constraint (3 units per peach candy pack):\nm += 3 * PeachCandy <= 3000\n# Cherry flavoring constraint (5 units per cherry candy pack):\nm += 5 * CherryCandy <= 4000\n# Peach candy packs must be larger than cherry candy packs:\nm += PeachCandy > CherryCandy\n# At least 30% of the packs must be cherry flavored:\nm += CherryCandy >= 0.3 * (PeachCandy + CherryCandy)\n\n# Objective\n# Minimize the total amount of special syrup used (5 units per peach candy pack, 4 units per cherry candy pack):\nm.minimize(5 * PeachCandy + 4 * CherryCandy)\n\n"}}
{"-272035411": {"document": "A patient in the hospital can take two pills, Pill 1 and Pill 2. Per pill, pill 1 provides 0.2 units of pain medication and 0.3 units of anxiety medication. Per pill, pill 2 provides 0.6 units of pain medication and 0.2 units of anxiety medication. In addition, pill 1 causes 0.3 units of discharge while pill 2 causes 0.1 units of discharge. At most 6 units of pain medication can be provided and at least 3 units of anxiety medication must be provided. How many pills of each should the patient be given to minimize the total amount of discharge?", "order_mapping": {"Pill 1": 0, "Pill 2": 1, "pill 1": 0, "pill 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of discharge", "terms": {"pill 1": "0.3", "pill 2": "0.1"}}, "const_declarations": [{"type": "linear", "direction": "At most", "limit": "6", "terms": {"pill 1": "0.2", "pill 2": "0.6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3", "terms": {"pill 1": "0.3", "pill 2": "0.2"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [0.3, 0.1], "constraints": [[0.2, 0.6, 6.0], [-0.3, -0.2, -3.0]]}, "solution": {"x": 5, "y": 8}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPill1 = intvar(0, 999999999)  # Number of Pill 1\nPill2 = intvar(0, 999999999)  # Number of Pill 2\n\n# Constraints\nm = Model()\n\n# At most 6 units of pain medication can be provided:\nm += 0.2 * Pill1 + 0.6 * Pill2 <= 6\n# At least 3 units of anxiety medication must be provided:\nm += 0.3 * Pill1 + 0.2 * Pill2 >= 3\n\n# Objective\n# Minimize the total amount of discharge (0.3 units per Pill 1 and 0.1 units per Pill 2):\nm.minimize(0.3 * Pill1 + 0.1 * Pill2)\n"}}
{"766541281": {"document": "A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?", "order_mapping": {"alpha": 0, "omega": 1, "alpha brand drink": 0, "omega brand drink": 1, "omega brand": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sugar intake", "terms": {"alpha brand drink": "20", "omega brand drink": "15"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "100", "terms": {"alpha brand drink": "30", "omega brand drink": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "2000", "terms": {"alpha brand drink": "350", "omega brand drink": "300"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "35%", "var": "omega brand", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [20.0, 15.0], "constraints": [[-30.0, -20.0, -100.0], [-350.0, -300.0, -2000.0], [-0.35, 0.65, 0.0]]}, "solution": {"x": 4, "y": 2}, "entities": [{"start": 77, "end": 82, "word": "alpha", "entity_group": "VAR", "score": 0.998399250582294}, {"start": 87, "end": 92, "word": "omega", "entity_group": "VAR", "score": 0.999815270041228}, {"start": 99, "end": 116, "word": "alpha brand drink", "entity_group": "VAR", "score": 0.999690999235281}, {"start": 126, "end": 128, "word": "30", "entity_group": "PARAM", "score": 0.9996477495228991}, {"start": 148, "end": 150, "word": "20", "entity_group": "PARAM", "score": 0.999730200661174}, {"start": 160, "end": 165, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9919061159019069}, {"start": 172, "end": 175, "word": "350", "entity_group": "PARAM", "score": 0.9995243170043017}, {"start": 202, "end": 219, "word": "omega brand drink", "entity_group": "VAR", "score": 0.9996350805024362}, {"start": 229, "end": 231, "word": "20", "entity_group": "PARAM", "score": 0.9996472741580139}, {"start": 251, "end": 253, "word": "15", "entity_group": "PARAM", "score": 0.9997302004313295}, {"start": 263, "end": 268, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.991906115901852}, {"start": 275, "end": 278, "word": "300", "entity_group": "PARAM", "score": 0.9994207346016766}, {"start": 322, "end": 330, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999205534445315}, {"start": 331, "end": 334, "word": "100", "entity_group": "LIMIT", "score": 0.9996715470684034}, {"start": 356, "end": 360, "word": "2000", "entity_group": "LIMIT", "score": 0.9996880597806712}, {"start": 398, "end": 415, "word": "omega brand drink", "entity_group": "VAR", "score": 0.9997827315139912}, {"start": 452, "end": 459, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989882926485835}, {"start": 460, "end": 464, "word": "35 %", "entity_group": "LIMIT", "score": 0.9790390561153957}, {"start": 488, "end": 499, "word": "omega brand", "entity_group": "VAR", "score": 0.9999673236326895}, {"start": 546, "end": 554, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992805495427542}, {"start": 559, "end": 571, "word": "sugar intake", "entity_group": "OBJ_NAME", "score": 0.9907273873455742}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAlpha = intvar(0, 999999999)  # Number of alpha brand drinks\nOmega = intvar(0, 999999999)  # Number of omega brand drinks\n\n# Constraints\nm = Model()\n\n# The man wants to get at least 100 grams of protein:\nm += 30*Alpha + 20*Omega >= 100\n# The man wants to get at least 2000 calories:\nm += 350*Alpha + 300*Omega >= 2000\n# At most 35% of the drink should be omega brand:\nm += Omega <= 0.35 * (Alpha + Omega)\n\n# Objective\n# Minimize sugar intake (20 grams of sugar per alpha brand drink, 15 grams of sugar per omega brand drink):\nm.minimize(20*Alpha + 15*Omega)\n"}}
{"-361200173": {"document": "A summer camps does science experiments in two pre filled beakers, beaker 1 and beaker 2. Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime. Beaker 2 uses 6 units of flour and 3 units of special liquid to make 3 units of slime.  However, beaker 1 creates 4 units of waste while beaker 2 creates 2 units of waste. The summer camp has available 150 units of flour and 100 units of special liquid. If at most 30 units of waste can be produced, how many of each beaker should be used to maximize the amount of slime produced?", "order_mapping": {"beaker 1": 0, "beaker 2": 1, "Beaker 1": 0, "Beaker 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of slime", "terms": {"Beaker 1": "5", "Beaker 2": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"Beaker 1": "4", "Beaker 2": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "100", "terms": {"Beaker 1": "6", "Beaker 2": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "30", "terms": {"beaker 1": "4", "beaker 2": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -3.0], "constraints": [[4.0, 6.0, 150.0], [6.0, 3.0, 100.0], [4.0, 2.0, 30.0]]}, "solution": {"x": 0, "y": 15}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeaker1 = intvar(0, 999999999)  # Number of times beaker 1 is used\nBeaker2 = intvar(0, 999999999)  # Number of times beaker 2 is used\n\n# Constraints\nm = Model()\n\n# Flour constraint (150 units available):\nm += 4 * Beaker1 + 6 * Beaker2 <= 150\n# Special liquid constraint (100 units available):\nm += 6 * Beaker1 + 3 * Beaker2 <= 100\n# Waste constraint (at most 30 units of waste can be produced):\nm += 4 * Beaker1 + 2 * Beaker2 <= 30\n\n# Objective\n# Maximize the amount of slime produced (5 units from beaker 1, 3 units from beaker 2):\nm.maximize(5 * Beaker1 + 3 * Beaker2)\n"}}
{"-271434326": {"document": "An dog hospital has 2000 units of tooth medication to make both small and large bones. A small bone requires 10 units of tooth medication and 12 units of meat. A large bone requires 15 units of tooth medication and 15 units of meat. Since most dogs prefer the small bones, at least 50% of the bones made must be small. In addition, the hospital must make at least 30 large bones. How many of each bone should be made to minimize the amount of meat needed?", "order_mapping": {"small": 0, "large bones": 1, "small bone": 0, "large bone": 1, "small bones": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of meat", "terms": {"small bone": "12", "large bone": "15"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "2000", "terms": {"small bone": "10", "large bone": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "50%", "var": "small", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "large bones", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [12.0, 15.0], "constraints": [[10.0, 15.0, 2000.0], [-0.5, 0.5, -0.0], [-0.0, -1.0, -30.0]]}, "solution": {"x": 30, "y": 30}, "entities": [{"start": 16, "end": 19, "word": "has", "entity_group": "CONST_DIR", "score": 0.9989695610821752}, {"start": 20, "end": 24, "word": "2000", "entity_group": "LIMIT", "score": 0.9985603557988416}, {"start": 64, "end": 69, "word": "small", "entity_group": "VAR", "score": 0.99939890909093}, {"start": 74, "end": 85, "word": "large bones", "entity_group": "VAR", "score": 0.9999123509758437}, {"start": 90, "end": 100, "word": "small bone", "entity_group": "VAR", "score": 0.9999447848467486}, {"start": 110, "end": 112, "word": "10", "entity_group": "PARAM", "score": 0.9997006160248241}, {"start": 143, "end": 145, "word": "12", "entity_group": "PARAM", "score": 0.999489920246754}, {"start": 155, "end": 159, "word": "meat", "entity_group": "OBJ_NAME", "score": 0.9948791179032949}, {"start": 164, "end": 174, "word": "large bone", "entity_group": "VAR", "score": 0.9998996816069058}, {"start": 184, "end": 186, "word": "15", "entity_group": "PARAM", "score": 0.9997270647806056}, {"start": 217, "end": 219, "word": "15", "entity_group": "PARAM", "score": 0.9994746657350886}, {"start": 229, "end": 233, "word": "meat", "entity_group": "OBJ_NAME", "score": 0.9919696189196788}, {"start": 263, "end": 274, "word": "small bones", "entity_group": "VAR", "score": 0.9999164050153639}, {"start": 277, "end": 285, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988848120689636}, {"start": 286, "end": 290, "word": "50 %", "entity_group": "LIMIT", "score": 0.9784478034869347}, {"start": 317, "end": 322, "word": "small", "entity_group": "VAR", "score": 0.9996902868791867}, {"start": 362, "end": 370, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998828030136082}, {"start": 371, "end": 373, "word": "30", "entity_group": "LIMIT", "score": 0.9995147740953662}, {"start": 374, "end": 385, "word": "large bones", "entity_group": "VAR", "score": 0.9998200925671491}, {"start": 428, "end": 436, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998999839897333}, {"start": 441, "end": 455, "word": "amount of meat", "entity_group": "OBJ_NAME", "score": 0.9906206651589573}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBones = intvar(0, 999999999)  # Number of small bones made\nLargeBones = intvar(0, 999999999)  # Number of large bones made\n\n# Constraints\nm = Model()\n\n# The total units of tooth medication used for both small and large bones should not exceed 2000:\nm += 10 * SmallBones + 15 * LargeBones <= 2000\n# At least 50% of the bones made must be small:\nm += SmallBones >= 0.5 * (SmallBones + LargeBones)\n# At least 30 large bones must be made:\nm += LargeBones >= 30\n\n# Objective\n# Minimize the amount of meat needed (12 units for a small bone, 15 units for a large bone):\nm.minimize(12 * SmallBones + 15 * LargeBones)\n"}}
{"-854940425": {"document": "A scientist in the arctic needs to get enough vitamin D and vitamin C in his diet by drinking orange and apple juice. Each box of orange juice contains 10 units of vitamin D and 8 units of vitamin C. Each box of apple juice contains 12 units of vitamin D and 6 units of vitamin C. Since the scientist prefers apple juice, he must drink at least 3 times as many apple juice boxes and orange juice boxes. However, he must also drink at least 3 orange juice boxes. To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C. How many of each juice box should he drink to maximize his total vitamin D intake?", "order_mapping": {"orange": 0, "apple juice": 1, "orange juice": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total vitamin D", "terms": {"orange juice": "10", "apple juice": "12"}}, "const_declarations": [{"type": "xby", "x_var": "apple juice", "direction": "at least", "param": "3", "y_var": "orange juice", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "orange juice", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "300", "terms": {"orange juice": "8", "apple juice": "6"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-10.0, -12.0], "constraints": [[3.0, -1.0, -0.0], [-1.0, -0.0, -3.0], [8.0, 6.0, 300.0]]}, "solution": {"x": 3, "y": 46}, "entities": [{"start": 94, "end": 100, "word": "orange", "entity_group": "VAR", "score": 0.9988429597632554}, {"start": 105, "end": 116, "word": "apple juice", "entity_group": "VAR", "score": 0.9999822984573639}, {"start": 131, "end": 143, "word": "orange juice", "entity_group": "VAR", "score": 0.9999820226330123}, {"start": 153, "end": 155, "word": "10", "entity_group": "PARAM", "score": 0.9996295672825131}, {"start": 179, "end": 180, "word": "8", "entity_group": "PARAM", "score": 0.9996989701866765}, {"start": 190, "end": 197, "word": "vitamin", "entity_group": "OBJ_NAME", "score": 0.9610873677100231}, {"start": 213, "end": 224, "word": "apple juice", "entity_group": "VAR", "score": 0.9999481350883901}, {"start": 234, "end": 236, "word": "12", "entity_group": "PARAM", "score": 0.9996295282262401}, {"start": 260, "end": 261, "word": "6", "entity_group": "PARAM", "score": 0.999622311808481}, {"start": 310, "end": 321, "word": "apple juice", "entity_group": "VAR", "score": 0.9999719372201761}, {"start": 338, "end": 346, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977108904849933}, {"start": 347, "end": 354, "word": "3 times", "entity_group": "PARAM", "score": 0.8251030163405939}, {"start": 363, "end": 380, "word": "apple juice boxes", "entity_group": "VAR", "score": 0.9978636428673553}, {"start": 385, "end": 403, "word": "orange juice boxes", "entity_group": "VAR", "score": 0.9987027256179649}, {"start": 435, "end": 443, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990445547307496}, {"start": 444, "end": 445, "word": "3", "entity_group": "LIMIT", "score": 0.9995214066691779}, {"start": 446, "end": 464, "word": "orange juice boxes", "entity_group": "VAR", "score": 0.9995134246171128}, {"start": 525, "end": 532, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991083444856546}, {"start": 533, "end": 536, "word": "300", "entity_group": "LIMIT", "score": 0.9996394072189834}, {"start": 603, "end": 611, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999442979038379}, {"start": 622, "end": 638, "word": "vitamin D intake", "entity_group": "OBJ_NAME", "score": 0.9587146476269026}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOrangeJuice = intvar(0, 999999999)  # Number of orange juice boxes\nAppleJuice = intvar(0, 999999999)  # Number of apple juice boxes\n\n# Constraints\nm = Model()\n\n# He must drink at least 3 times as many apple juice boxes as orange juice boxes:\nm += AppleJuice >= 3 * OrangeJuice\n# He must also drink at least 3 orange juice boxes:\nm += OrangeJuice >= 3\n# To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C:\nm += 8 * OrangeJuice + 6 * AppleJuice <= 300\n\n# Objective\n# Maximize his total vitamin D intake:\nm.maximize(10 * OrangeJuice + 12 * AppleJuice)\n"}}
{"1283305022": {"document": "A cleaning company uses a cleansing chemical and odor-removing chemical to clean a house. Each unit of the cleansing chemical takes 4 units to be effective while each unit of the odor-removing chemical takes 6 minutes to be effective. The company must use at least 100 units of the cleansing chemical. In total, at least 300 units of chemicals can be used per house. Further, because the cleansing chemical is strong, there can be at most twice the amount of cleansing chemical as odor-removing chemical. How many units of each should be used to minimize the total time it takes for a house to be cleaned?", "order_mapping": {"cleansing chemical": 0, "odor-removing chemical": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"cleansing chemical": "4", "odor-removing chemical": "6"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "100", "var": "cleansing chemical", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "300", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "cleansing chemical", "direction": "at most", "param": "twice", "y_var": "odor-removing chemical", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [4.0, 6.0], "constraints": [[-1.0, -0.0, -100.0], [-1.0, -1.0, -300.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 200, "y": 100}, "entities": [{"start": 26, "end": 44, "word": "cleansing chemical", "entity_group": "VAR", "score": 0.9999815972974823}, {"start": 49, "end": 73, "word": "odor - removing chemical", "entity_group": "VAR", "score": 0.9945255684013552}, {"start": 110, "end": 128, "word": "cleansing chemical", "entity_group": "VAR", "score": 0.9999748277086095}, {"start": 135, "end": 136, "word": "4", "entity_group": "PARAM", "score": 0.9995211477875846}, {"start": 182, "end": 206, "word": "odor - removing chemical", "entity_group": "VAR", "score": 0.9983813409155996}, {"start": 213, "end": 214, "word": "6", "entity_group": "PARAM", "score": 0.9994417420093344}, {"start": 262, "end": 270, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999004395072419}, {"start": 271, "end": 274, "word": "100", "entity_group": "LIMIT", "score": 0.9996586334671962}, {"start": 320, "end": 328, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988299735279815}, {"start": 329, "end": 332, "word": "300", "entity_group": "LIMIT", "score": 0.9997518546860309}, {"start": 442, "end": 449, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981280973111789}, {"start": 450, "end": 455, "word": "twice", "entity_group": "PARAM", "score": 0.9934631653316194}, {"start": 480, "end": 488, "word": "chemical", "entity_group": "VAR", "score": 0.97141003412732}, {"start": 492, "end": 516, "word": "odor - removing chemical", "entity_group": "VAR", "score": 0.9969618795853539}, {"start": 560, "end": 568, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9874973210765268}, {"start": 573, "end": 583, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.993774697645445}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCleansingChemical = intvar(0, 999999999)  # Units of cleansing chemical used\nOdorRemovingChemical = intvar(0, 999999999)  # Units of odor-removing chemical used\n\n# Constraints\nm = Model()\n\n# At least 100 units of the cleansing chemical must be used:\nm += CleansingChemical >= 100\n# In total, at least 300 units of chemicals can be used per house:\nm += CleansingChemical + OdorRemovingChemical >= 300\n# There can be at most twice the amount of cleansing chemical as odor-removing chemical:\nm += CleansingChemical <= 2 * OdorRemovingChemical\n\n# Objective\n# Minimize the total time it takes for a house to be cleaned (4 minutes per unit of cleansing chemical, 6 minutes per unit of odor-removing chemical):\nm.minimize(4 * CleansingChemical + 6 * OdorRemovingChemical)\n"}}
{"-38093970": {"document": "A drug company is making allergy pills and fever reducing pills in two factories, factory 1 and factory 2. Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour. Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour.  Factory 1 is much more efficient and only requires 20 units of a rare compound while factory 2 requires 30 units of a rare compound. The company only has available 1000 units of the rare compound. If the company must make at least 700 allergy pills and 600 fever reducing pills, how many hours should each factory be run to minimize the total time needed?", "order_mapping": {"factory 1": 0, "factory 2": 1, "Factory 1": 0, "Factory 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total time", "vars": ["factory 1", "factory 2"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1000", "terms": {"Factory 1": "20", "factory 2": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "700", "terms": {"Factory 1": "20", "Factory 2": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "600", "terms": {"Factory 1": "15", "Factory 2": "30"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[20.0, 30.0, 1000.0], [-20.0, -10.0, -700.0], [-15.0, -30.0, -600.0]]}, "solution": {"x": 33, "y": 4}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFactory1Hours = intvar(0, 999999999)  # Number of hours factory 1 runs\nFactory2Hours = intvar(0, 999999999)  # Number of hours factory 2 runs\n\n# Constraints\nm = Model()\n\n# The company only has available 1000 units of the rare compound:\nm += 20 * Factory1Hours + 30 * Factory2Hours <= 1000\n# The company must make at least 700 allergy pills:\nm += 20 * Factory1Hours + 10 * Factory2Hours >= 700\n# The company must make at least 600 fever reducing pills:\nm += 15 * Factory1Hours + 30 * Factory2Hours >= 600\n\n# Objective\n# Minimize the total time needed (sum of hours for both factories):\nm.minimize(Factory1Hours + Factory2Hours)\n"}}
{"1625239928": {"document": "A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?", "order_mapping": {"fish": 0, "chicken": 1, "fish meal": 0, "chicken meal": 1, "chicken meals": 1, "fish meals": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "fat intake", "terms": {"fish meal": "7", "chicken meal": "10"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "130", "terms": {"fish meal": "10", "chicken meal": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "120", "terms": {"fish meal": "12", "chicken meal": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "chicken meals", "direction": "at least", "param": "twice", "y_var": "fish meals", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [7.0, 10.0], "constraints": [[-10.0, -15.0, -130.0], [-12.0, -8.0, -120.0], [2.0, -1.0, -0.0]]}, "solution": {"x": 4, "y": 9}, "entities": [{"start": 41, "end": 45, "word": "fish", "entity_group": "VAR", "score": 0.9997290464554037}, {"start": 50, "end": 57, "word": "chicken", "entity_group": "VAR", "score": 0.99898859658647}, {"start": 105, "end": 114, "word": "fish meal", "entity_group": "VAR", "score": 0.9999829231593043}, {"start": 124, "end": 126, "word": "10", "entity_group": "PARAM", "score": 0.9997077062147561}, {"start": 148, "end": 150, "word": "12", "entity_group": "PARAM", "score": 0.9997147410310229}, {"start": 172, "end": 184, "word": "chicken meal", "entity_group": "VAR", "score": 0.9999815983573032}, {"start": 194, "end": 196, "word": "15", "entity_group": "PARAM", "score": 0.9997213838860296}, {"start": 218, "end": 219, "word": "8", "entity_group": "PARAM", "score": 0.999656633030688}, {"start": 265, "end": 273, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992550856316345}, {"start": 274, "end": 277, "word": "130", "entity_group": "LIMIT", "score": 0.9997084979315668}, {"start": 299, "end": 302, "word": "120", "entity_group": "LIMIT", "score": 0.9996189527391495}, {"start": 329, "end": 341, "word": "chicken meal", "entity_group": "VAR", "score": 0.9999847094678163}, {"start": 393, "end": 401, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9975805614235709}, {"start": 402, "end": 407, "word": "twice", "entity_group": "PARAM", "score": 0.9947029785186244}, {"start": 416, "end": 429, "word": "chicken meals", "entity_group": "VAR", "score": 0.9999715478088232}, {"start": 433, "end": 443, "word": "fish meals", "entity_group": "VAR", "score": 0.999979685183412}, {"start": 454, "end": 463, "word": "fish meal", "entity_group": "VAR", "score": 0.9999828888389898}, {"start": 473, "end": 474, "word": "7", "entity_group": "PARAM", "score": 0.9996459355332237}, {"start": 484, "end": 487, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9420326235344089}, {"start": 497, "end": 509, "word": "chicken meal", "entity_group": "VAR", "score": 0.9999790385950481}, {"start": 519, "end": 521, "word": "10", "entity_group": "PARAM", "score": 0.9996150503545851}, {"start": 531, "end": 534, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9033294566942843}, {"start": 578, "end": 586, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993508995367639}, {"start": 591, "end": 601, "word": "fat intake", "entity_group": "OBJ_NAME", "score": 0.9891170148229312}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFishMeals = intvar(0, 999999999)  # Number of fish meals\nChickenMeals = intvar(0, 999999999)  # Number of chicken meals\n\n# Constraints\nm = Model()\n\n# The patient needs to consume at least 130 units of protein:\nm += 10 * FishMeals + 15 * ChickenMeals >= 130\n# The patient needs to consume at least 120 units of iron:\nm += 12 * FishMeals + 8 * ChickenMeals >= 120\n# The patient prefers to consume at least twice as many chicken meals as fish meals:\nm += ChickenMeals >= 2 * FishMeals\n\n# Objective\n# Minimize fat intake (7 units of fat per fish meal and 10 units of fat per chicken meal):\nm.minimize(7 * FishMeals + 10 * ChickenMeals)\n"}}
{"-950198491": {"document": "A pharmaceutical company makes skin cream in batches, a regular batch and premium batch, to sell to hospitals. The regular batch requires 50 units of medicinal ingredients and 40 units of rehydration product. A premium batch requires 40 units of medicinal ingredients and 60 units of rehydration product. The company has available 3000 units of medicinal ingredients and 3500 units of rehydration product. Since the premium batch sells better, the number of regular batches must be less than the number of premium batches. In addition, the company must make at least 10 regular batches. If a regular batch can treat 50 people and a premium batch can treat 30 people, how many of each batch should be made to maximize the number of people that can be treated?", "order_mapping": {"regular batch": 0, "premium batch": 1, "regular batches": 0, "premium batches": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of people", "terms": {"regular batch": "50", "premium batch": "30"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3000", "terms": {"regular batch": "50", "premium batch": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"regular batch": "40", "premium batch": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "regular batches", "direction": "less than", "y_var": "premium batches", "operator": "LESS"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "regular batches", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-50.0, -30.0], "constraints": [[50.0, 40.0, 3000.0], [40.0, 60.0, 3500.0], [1.0, -1.0, -1e-06], [-1.0, -0.0, -10.0]]}, "solution": {"x": 32, "y": 35}, "entities": [{"start": 57, "end": 70, "word": "regular batch", "entity_group": "VAR", "score": 0.9999635443885098}, {"start": 75, "end": 88, "word": "premium batch", "entity_group": "VAR", "score": 0.9999704972146077}, {"start": 118, "end": 131, "word": "regular batch", "entity_group": "VAR", "score": 0.9999809359891031}, {"start": 141, "end": 143, "word": "50", "entity_group": "PARAM", "score": 0.9996987759489588}, {"start": 179, "end": 181, "word": "40", "entity_group": "PARAM", "score": 0.9996006174865544}, {"start": 215, "end": 228, "word": "premium batch", "entity_group": "VAR", "score": 0.9999766388191981}, {"start": 238, "end": 240, "word": "40", "entity_group": "PARAM", "score": 0.9997176676149068}, {"start": 276, "end": 278, "word": "60", "entity_group": "PARAM", "score": 0.9996005439810581}, {"start": 326, "end": 335, "word": "available", "entity_group": "CONST_DIR", "score": 0.9994744133965695}, {"start": 336, "end": 340, "word": "3000", "entity_group": "LIMIT", "score": 0.9993299201377517}, {"start": 376, "end": 380, "word": "3500", "entity_group": "LIMIT", "score": 0.9996153225834123}, {"start": 422, "end": 435, "word": "premium batch", "entity_group": "VAR", "score": 0.9999900574630204}, {"start": 465, "end": 480, "word": "regular batches", "entity_group": "VAR", "score": 0.999953997841185}, {"start": 489, "end": 498, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9969302519879719}, {"start": 513, "end": 528, "word": "premium batches", "entity_group": "VAR", "score": 0.999947532101602}, {"start": 567, "end": 575, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986927824159723}, {"start": 576, "end": 578, "word": "10", "entity_group": "LIMIT", "score": 0.9995517349579004}, {"start": 579, "end": 594, "word": "regular batches", "entity_group": "VAR", "score": 0.9999688568708018}, {"start": 602, "end": 615, "word": "regular batch", "entity_group": "VAR", "score": 0.9998970971970337}, {"start": 626, "end": 628, "word": "50", "entity_group": "PARAM", "score": 0.9996511055131752}, {"start": 629, "end": 635, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9979449277959775}, {"start": 642, "end": 655, "word": "premium batch", "entity_group": "VAR", "score": 0.9999745247834962}, {"start": 666, "end": 668, "word": "30", "entity_group": "PARAM", "score": 0.9993670844704817}, {"start": 669, "end": 675, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9985667419573103}, {"start": 719, "end": 727, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995955291036646}, {"start": 732, "end": 748, "word": "number of people", "entity_group": "OBJ_NAME", "score": 0.9901126308439294}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularBatch = intvar(0, 999999999)  # Number of regular batches made\nPremiumBatch = intvar(0, 999999999)  # Number of premium batches made\n\n# Constraints\nm = Model()\n\n# The company has available 3000 units of medicinal ingredients:\nm += 50 * RegularBatch + 40 * PremiumBatch <= 3000\n# The company has available 3500 units of rehydration product:\nm += 40 * RegularBatch + 60 * PremiumBatch <= 3500\n# The number of regular batches must be less than the number of premium batches:\nm += RegularBatch < PremiumBatch\n# The company must make at least 10 regular batches:\nm += RegularBatch >= 10\n\n# Objective\n# Maximize the number of people that can be treated (50 people per regular batch, 30 people per premium batch):\nm.maximize(50 * RegularBatch + 30 * PremiumBatch)\n"}}
{"-1173119684": {"document": "A clinic takes patient blood pressure either using an automatic machine or a manual machine. The automatic machine takes 10 minutes per patient while the manual machine takes 15 minutes per patient. Since the automatic machine frequently breaks, at least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine. However, at least 20 patient can be processed by the automatic machine. If the clinic is open for 20000 minutes, maximize the number of patients whose blood pressure can be taken.", "order_mapping": {"automatic machine": 0, "manual machine": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of patients", "vars": ["automatic machine", "manual machine"]}, "const_declarations": [{"type": "xby", "x_var": "manual machine", "direction": "at least", "param": "twice", "y_var": "automatic machine", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "automatic machine", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "open", "limit": "20000", "terms": {"automatic machine": "10", "manual machine": "15"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[2.0, -1.0, -0.0], [-1.0, -0.0, -20.0], [10.0, 15.0, 20000.0]]}, "solution": {"x": 500, "y": 1000}, "entities": [{"start": 23, "end": 37, "word": "blood pressure", "entity_group": "OBJ_NAME", "score": 0.9845226284789858}, {"start": 54, "end": 71, "word": "automatic machine", "entity_group": "VAR", "score": 0.9999467250272773}, {"start": 77, "end": 91, "word": "manual machine", "entity_group": "VAR", "score": 0.9999778605100715}, {"start": 98, "end": 115, "word": "automatic machine", "entity_group": "VAR", "score": 0.9999855620611519}, {"start": 122, "end": 124, "word": "10", "entity_group": "PARAM", "score": 0.9996289654160894}, {"start": 155, "end": 169, "word": "manual machine", "entity_group": "VAR", "score": 0.9999804278702495}, {"start": 176, "end": 178, "word": "15", "entity_group": "PARAM", "score": 0.999350316670921}, {"start": 249, "end": 257, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9974866362906719}, {"start": 258, "end": 263, "word": "twice", "entity_group": "PARAM", "score": 0.9956769776722951}, {"start": 297, "end": 311, "word": "blood pressure", "entity_group": "OBJ_NAME", "score": 0.9891535390074142}, {"start": 325, "end": 339, "word": "manual machine", "entity_group": "VAR", "score": 0.9999771494186009}, {"start": 349, "end": 366, "word": "automatic machine", "entity_group": "VAR", "score": 0.9999762077602101}, {"start": 379, "end": 387, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986396686392536}, {"start": 388, "end": 390, "word": "20", "entity_group": "LIMIT", "score": 0.9996711589862545}, {"start": 423, "end": 440, "word": "automatic machine", "entity_group": "VAR", "score": 0.9999685721155194}, {"start": 460, "end": 464, "word": "open", "entity_group": "CONST_DIR", "score": 0.8912329952515075}, {"start": 469, "end": 474, "word": "20000", "entity_group": "LIMIT", "score": 0.9996527484134499}, {"start": 485, "end": 493, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9967708514011094}, {"start": 498, "end": 516, "word": "number of patients", "entity_group": "OBJ_NAME", "score": 0.9915058798594611}, {"start": 523, "end": 537, "word": "blood pressure", "entity_group": "OBJ_NAME", "score": 0.9711145762159504}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAutomaticMachine = intvar(0, 999999999)  # Number of patients processed by the automatic machine\nManualMachine = intvar(0, 999999999)  # Number of patients processed by the manual machine\n\n# Constraints\nm = Model()\n\n# At least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine:\nm += ManualMachine >= 2 * AutomaticMachine\n# At least 20 patients can be processed by the automatic machine:\nm += AutomaticMachine >= 20\n# The clinic is open for 20000 minutes (10 minutes per patient for the automatic machine and 15 minutes per patient for the manual machine):\nm += 10 * AutomaticMachine + 15 * ManualMachine <= 20000\n\n# Objective\n# Maximize the number of patients whose blood pressure can be taken:\nm.maximize(AutomaticMachine + ManualMachine)\n\n"}}
{"1637604355": {"document": "A patient with a sore throat can drink two syrups, syrup 1 and syrup 2 for treatment. Per serving, syrup 1 delivers 0.5 units of medicine to the throat and 0.4 units of medicine to the lungs. Per serving, syrup 2 delivers 0.2 units of medicine to the throat and 0.5 units of medicine to the lungs. Furthermore, syrup 1 contains 0.5 units of sugar while syrup 2 contains 0.3 units of sugar per serving. The patient can get at most 5 units of medicine for the throat and at least 4 units of medicine to the lungs. How many servings of each should the patient take to minimize his sugar intake?", "order_mapping": {"syrup 1": 0, "syrup 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sugar intake", "terms": {"syrup 1": "0.5", "syrup 2": "0.3"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "5", "terms": {"syrup 1": "0.5", "syrup 2": "0.2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "4", "terms": {"syrup 1": "0.4", "syrup 2": "0.5"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [0.5, 0.3], "constraints": [[0.5, 0.2, 5.0], [-0.4, -0.5, -4.0]]}, "solution": {"x": 0, "y": 8}, "entities": [{"start": 52, "end": 59, "word": "syrup 1", "entity_group": "VAR", "score": 0.9998572699912406}, {"start": 64, "end": 71, "word": "syrup 2", "entity_group": "VAR", "score": 0.9998558112660656}, {"start": 102, "end": 109, "word": "syrup 1", "entity_group": "VAR", "score": 0.9998655245447905}, {"start": 119, "end": 122, "word": "0.5", "entity_group": "PARAM", "score": 0.9996278416769762}, {"start": 159, "end": 162, "word": "0.4", "entity_group": "PARAM", "score": 0.9996667676288997}, {"start": 210, "end": 217, "word": "syrup 2", "entity_group": "VAR", "score": 0.9997023408544587}, {"start": 227, "end": 230, "word": "0.2", "entity_group": "PARAM", "score": 0.9996278514588232}, {"start": 267, "end": 270, "word": "0.5", "entity_group": "PARAM", "score": 0.9996667676286725}, {"start": 318, "end": 325, "word": "syrup 1", "entity_group": "VAR", "score": 0.9998926303943787}, {"start": 335, "end": 338, "word": "0.5", "entity_group": "PARAM", "score": 0.9996004344457775}, {"start": 348, "end": 353, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9988997714962897}, {"start": 360, "end": 367, "word": "syrup 2", "entity_group": "VAR", "score": 0.9998217171219469}, {"start": 377, "end": 380, "word": "0.3", "entity_group": "PARAM", "score": 0.9995743801459439}, {"start": 390, "end": 395, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9985121938377013}, {"start": 430, "end": 437, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992190194252126}, {"start": 438, "end": 439, "word": "5", "entity_group": "LIMIT", "score": 0.9997263227915669}, {"start": 477, "end": 485, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991649883827144}, {"start": 486, "end": 487, "word": "4", "entity_group": "LIMIT", "score": 0.9997553010837809}, {"start": 574, "end": 582, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9989819083725424}, {"start": 587, "end": 599, "word": "sugar intake", "entity_group": "OBJ_NAME", "score": 0.9894745246823484}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSyrup1 = intvar(0, 999999999)  # Number of servings of syrup 1\nSyrup2 = intvar(0, 999999999)  # Number of servings of syrup 2\n\n# Constraints\nm = Model()\n\n# The patient can get at most 5 units of medicine for the throat:\nm += 0.5 * Syrup1 + 0.2 * Syrup2 <= 5\n# The patient needs at least 4 units of medicine to the lungs:\nm += 0.4 * Syrup1 + 0.5 * Syrup2 >= 4\n\n# Objective\n# Minimize sugar intake (0.5 units of sugar in syrup 1 and 0.3 units of sugar in syrup 2):\nm.minimize(0.5 * Syrup1 + 0.3 * Syrup2)\n"}}
{"-1023375267": {"document": "A sailor can eat either a crab cakes or a lobster roll for his meals. He needs to ensure he gets at least 80 units of vitamin A and 100 units of vitamin C. Each crab cake contains 5 units of vitamin A and 7 units of vitamin C. Each lobster roll contains 8 units of vitamin A and 4 units of vitamin C. In addition, since lobster is more expensive, at most 40% of his meals should be lobster rolls. If each crab cake contains 4 units of unsaturated fat and each lobster roll contains 6 units of unsaturated fat, how many of each should he eat to minimize his unsaturated fat intake?", "order_mapping": {"crab cakes": 0, "lobster roll": 1, "crab cake": 0, "lobster rolls": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "unsaturated fat", "terms": {"crab cake": "4", "lobster roll": "6"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "80", "terms": {"crab cake": "5", "lobster roll": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "100", "terms": {"crab cake": "7", "lobster roll": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "lobster rolls", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [4.0, 6.0], "constraints": [[-5.0, -8.0, -80.0], [-7.0, -4.0, -100.0], [-0.4, 0.6, 0.0]]}, "solution": {"x": 16, "y": 0}, "entities": [{"start": 26, "end": 36, "word": "crab cakes", "entity_group": "VAR", "score": 0.9999828531922335}, {"start": 42, "end": 54, "word": "lobster roll", "entity_group": "VAR", "score": 0.999871953970335}, {"start": 98, "end": 106, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987073705505405}, {"start": 107, "end": 109, "word": "80", "entity_group": "LIMIT", "score": 0.9996951892734822}, {"start": 133, "end": 136, "word": "100", "entity_group": "LIMIT", "score": 0.9995714506893862}, {"start": 162, "end": 171, "word": "crab cake", "entity_group": "VAR", "score": 0.9999800294663886}, {"start": 181, "end": 182, "word": "5", "entity_group": "PARAM", "score": 0.9996204546659518}, {"start": 206, "end": 207, "word": "7", "entity_group": "PARAM", "score": 0.9996229909765992}, {"start": 233, "end": 245, "word": "lobster roll", "entity_group": "VAR", "score": 0.9999794022204331}, {"start": 255, "end": 256, "word": "8", "entity_group": "PARAM", "score": 0.9996204912324202}, {"start": 280, "end": 281, "word": "4", "entity_group": "PARAM", "score": 0.9995491476219015}, {"start": 322, "end": 329, "word": "lobster", "entity_group": "VAR", "score": 0.9975550139011979}, {"start": 350, "end": 357, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987886866224476}, {"start": 358, "end": 362, "word": "40 %", "entity_group": "LIMIT", "score": 0.9808808892940647}, {"start": 386, "end": 399, "word": "lobster rolls", "entity_group": "VAR", "score": 0.9999797609650095}, {"start": 410, "end": 419, "word": "crab cake", "entity_group": "VAR", "score": 0.9999797007101753}, {"start": 429, "end": 430, "word": "4", "entity_group": "PARAM", "score": 0.9996016094890892}, {"start": 440, "end": 455, "word": "unsaturated fat", "entity_group": "OBJ_NAME", "score": 0.9893799852030548}, {"start": 465, "end": 477, "word": "lobster roll", "entity_group": "VAR", "score": 0.9999858194114167}, {"start": 487, "end": 488, "word": "6", "entity_group": "PARAM", "score": 0.9997038569430566}, {"start": 498, "end": 513, "word": "unsaturated fat", "entity_group": "OBJ_NAME", "score": 0.9883763427066645}, {"start": 550, "end": 558, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9995365216650521}, {"start": 563, "end": 585, "word": "unsaturated fat intake", "entity_group": "OBJ_NAME", "score": 0.9668908568869635}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCrabCakes = intvar(0, 999999999)  # Number of crab cakes\nLobsterRolls = intvar(0, 999999999)  # Number of lobster rolls\n\n# Constraints\nm = Model()\n\n# Ensure at least 80 units of vitamin A:\nm += 5 * CrabCakes + 8 * LobsterRolls >= 80\n# Ensure at least 100 units of vitamin C:\nm += 7 * CrabCakes + 4 * LobsterRolls >= 100\n# At most 40% of his meals should be lobster rolls:\n# Let's introduce a total meals variable to enforce the ratio constraint\nTotalMeals = CrabCakes + LobsterRolls\nm += LobsterRolls <= 0.4 * TotalMeals\n\n# Objective\n# Minimize unsaturated fat intake (4 units per crab cake, 6 units per lobster roll):\nm.minimize(4 * CrabCakes + 6 * LobsterRolls)\n\n"}}
{"1602930125": {"document": "A science show preforms two different demonstrations, demonstration 1 and demonstration 2. In demonstration 1, 10 units of mint and 20 units of the active ingredient is used to make 25 units of minty foam. In demonstration 2, 12 units of mint and 15 units of the active ingredient is used to make 18 units of minty foam. In addition, demonstration 1 creates 5 units of black tar while demonstration 2 creates 3 units of black tar. The show has available 120 units of mint and 100 units of active ingredients. If at most 50 units of black tar can be produced, how many of each demonstration should be done to maximize the amount of minty foam produced?", "order_mapping": {"demonstration 1": 0, "demonstration 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of minty foam", "terms": {"demonstration 1": "25", "demonstration 2": "18"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "120", "terms": {"demonstration 1": "10", "demonstration 2": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "100", "terms": {"demonstration 1": "20", "demonstration 2": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50", "terms": {"demonstration 1": "5", "demonstration 2": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-25.0, -18.0], "constraints": [[10.0, 12.0, 120.0], [20.0, 15.0, 100.0], [5.0, 3.0, 50.0]]}, "solution": {"x": 5, "y": 0}, "entities": [{"start": 55, "end": 70, "word": "demonstration 1", "entity_group": "VAR", "score": 0.9998180710014897}, {"start": 75, "end": 90, "word": "demonstration 2", "entity_group": "VAR", "score": 0.9998322976707131}, {"start": 96, "end": 111, "word": "demonstration 1", "entity_group": "VAR", "score": 0.9998344762730608}, {"start": 114, "end": 116, "word": "10", "entity_group": "PARAM", "score": 0.9997111953908859}, {"start": 135, "end": 137, "word": "20", "entity_group": "PARAM", "score": 0.999716428543799}, {"start": 185, "end": 187, "word": "25", "entity_group": "PARAM", "score": 0.9994780443786938}, {"start": 197, "end": 207, "word": "minty foam", "entity_group": "OBJ_NAME", "score": 0.9954254445306886}, {"start": 213, "end": 228, "word": "demonstration 2", "entity_group": "VAR", "score": 0.9998242105905721}, {"start": 231, "end": 233, "word": "12", "entity_group": "PARAM", "score": 0.9997152269006337}, {"start": 252, "end": 254, "word": "15", "entity_group": "PARAM", "score": 0.9997164285437996}, {"start": 302, "end": 304, "word": "18", "entity_group": "PARAM", "score": 0.999478001005746}, {"start": 314, "end": 324, "word": "minty foam", "entity_group": "OBJ_NAME", "score": 0.995203837145414}, {"start": 341, "end": 356, "word": "demonstration 1", "entity_group": "VAR", "score": 0.999905118193604}, {"start": 365, "end": 366, "word": "5", "entity_group": "PARAM", "score": 0.9996132901507041}, {"start": 392, "end": 407, "word": "demonstration 2", "entity_group": "VAR", "score": 0.9998447696442293}, {"start": 416, "end": 417, "word": "3", "entity_group": "PARAM", "score": 0.9995482463020344}, {"start": 452, "end": 461, "word": "available", "entity_group": "CONST_DIR", "score": 0.99850324062482}, {"start": 462, "end": 465, "word": "120", "entity_group": "LIMIT", "score": 0.9994394676509036}, {"start": 484, "end": 487, "word": "100", "entity_group": "LIMIT", "score": 0.9997350486494434}, {"start": 521, "end": 528, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990206050010514}, {"start": 529, "end": 531, "word": "50", "entity_group": "LIMIT", "score": 0.9996788217612316}, {"start": 618, "end": 626, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995514919960559}, {"start": 631, "end": 651, "word": "amount of minty foam", "entity_group": "OBJ_NAME", "score": 0.9754518060205752}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDemo1 = intvar(0, 999999999)  # Number of demonstration 1 performed\nDemo2 = intvar(0, 999999999)  # Number of demonstration 2 performed\n\n# Constraints\nm = Model()\n\n# The show has available 120 units of mint:\nm += 10 * Demo1 + 12 * Demo2 <= 120\n# The show has available 100 units of active ingredients:\nm += 20 * Demo1 + 15 * Demo2 <= 100\n# At most 50 units of black tar can be produced:\nm += 5 * Demo1 + 3 * Demo2 <= 50\n\n# Objective\n# Maximize the amount of minty foam produced (25 units from Demo1, 18 units from Demo2):\nm.maximize(25 * Demo1 + 18 * Demo2)\n"}}
{"1402521519": {"document": "A lab has 20000 mg of mRNA anti-viral available to make children's and adult vaccines. Each children's vaccine contains 50 mg of mRNA and 50 mg of fever suppressant. Each adult vaccine contains 75 mg of mRNA and 75 mg of fever suppressant. Since adult vaccines are more essential, at least 70% of vaccines should be adult vaccines. However, at least 50 children's vaccines should be made. How many of each vaccine should be made to minimize the amount of fever suppressant used?", "order_mapping": {"children's": 0, "adult vaccines": 1, "children's vaccine": 0, "adult vaccine": 1, "children's vaccines": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of fever suppressant", "terms": {"children's vaccine": "50", "adult vaccine": "75"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "20000", "terms": {"children's vaccine": "50", "adult vaccine": "75"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "70%", "var": "adult vaccines", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "children's vaccines", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [50.0, 75.0], "constraints": [[50.0, 75.0, 20000.0], [0.7, -0.3, -0.0], [-1.0, -0.0, -50.0]]}, "solution": {"x": 50, "y": 118}, "entities": [{"start": 10, "end": 15, "word": "20000", "entity_group": "LIMIT", "score": 0.999655450171905}, {"start": 40, "end": 49, "word": "available", "entity_group": "CONST_DIR", "score": 0.9969338461474592}, {"start": 58, "end": 69, "word": "children 's", "entity_group": "VAR", "score": 0.9999807593901827}, {"start": 74, "end": 88, "word": "adult vaccines", "entity_group": "VAR", "score": 0.9999792154696997}, {"start": 96, "end": 115, "word": "children 's vaccine", "entity_group": "VAR", "score": 0.9997094780212192}, {"start": 125, "end": 127, "word": "50", "entity_group": "PARAM", "score": 0.9997096884935495}, {"start": 143, "end": 145, "word": "50", "entity_group": "PARAM", "score": 0.9996855066057423}, {"start": 152, "end": 157, "word": "fever", "entity_group": "OBJ_NAME", "score": 0.995756504763146}, {"start": 177, "end": 190, "word": "adult vaccine", "entity_group": "VAR", "score": 0.9999854411482809}, {"start": 200, "end": 202, "word": "75", "entity_group": "PARAM", "score": 0.9996629433419942}, {"start": 218, "end": 220, "word": "75", "entity_group": "PARAM", "score": 0.999649968440511}, {"start": 227, "end": 232, "word": "fever", "entity_group": "OBJ_NAME", "score": 0.9965272052294794}, {"start": 253, "end": 267, "word": "adult vaccines", "entity_group": "VAR", "score": 0.9999769784353131}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985557522681953}, {"start": 298, "end": 302, "word": "70 %", "entity_group": "LIMIT", "score": 0.9855689123078373}, {"start": 325, "end": 339, "word": "adult vaccines", "entity_group": "VAR", "score": 0.9999848152378191}, {"start": 352, "end": 360, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989579610956626}, {"start": 361, "end": 363, "word": "50", "entity_group": "LIMIT", "score": 0.9996433374429015}, {"start": 364, "end": 384, "word": "children 's vaccines", "entity_group": "VAR", "score": 0.9985874120769825}, {"start": 445, "end": 453, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9990012206125707}, {"start": 458, "end": 485, "word": "amount of fever suppressant", "entity_group": "OBJ_NAME", "score": 0.9760036995651761}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChildrensVaccines = intvar(0, 999999999)  # Number of children's vaccines made\nAdultVaccines = intvar(0, 999999999)  # Number of adult vaccines made\n\n# Constraints\nm = Model()\n\n# Total mRNA used for both vaccines should not exceed 20000 mg:\nm += 50 * ChildrensVaccines + 75 * AdultVaccines <= 20000\n# At least 70% of the total number of vaccines should be adult vaccines:\nm += AdultVaccines >= 0.7 * (ChildrensVaccines + AdultVaccines)\n# At least 50 children's vaccines should be made:\nm += ChildrensVaccines >= 50\n\n# Objective\n# Minimize the amount of fever suppressant used (50 mg per children's vaccine, 75 mg per adult vaccine):\nm.minimize(50 * ChildrensVaccines + 75 * AdultVaccines)\n\n"}}
{"-1765797791": {"document": "A parent feeds their baby two flavors of baby food, apple and carrot, in order to meet the babies fat and folate requirements. Each serving of apple flavored baby food contains 2 units of fat and 5 units of folate. Each serving of carrot flavored baby food contains 4 units of fat and 3 units of folate. The baby does not like the carrot flavor, and therefore he must eat three times as many apple flavored baby food as carrot flavored baby food. However, he must eat at least 2 servings of carrot flavored baby food. If the baby can consume at most 100 units of folate, how many servings of each should he eat to maximize his fat intake?", "order_mapping": {"apple": 0, "carrot": 1, "apple flavored baby": 0, "carrot flavored baby": 1, "carrot flavor": 1, "apple flavored baby food": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "fat intake", "terms": {"apple flavored baby": "2", "carrot flavored baby": "4"}}, "const_declarations": [{"type": "xby", "x_var": "apple flavored baby food", "direction": "must eat", "param": "three", "y_var": "carrot flavored baby", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "carrot flavored baby", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "100", "terms": {"apple flavored baby": "5", "carrot flavored baby": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.0, -4.0], "constraints": [[-1.0, 3.0, -0.0], [-0.0, -1.0, -2.0], [5.0, 3.0, 100.0]]}, "solution": {"x": 17, "y": 5}, "entities": [{"start": 53, "end": 58, "word": "apple", "entity_group": "VAR", "score": 0.9992364000024258}, {"start": 63, "end": 69, "word": "carrot", "entity_group": "VAR", "score": 0.9980136118450148}, {"start": 146, "end": 170, "word": "apple flavored baby food", "entity_group": "VAR", "score": 0.9990841099839105}, {"start": 180, "end": 181, "word": "2", "entity_group": "PARAM", "score": 0.9996589122260112}, {"start": 191, "end": 194, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9587391718243155}, {"start": 199, "end": 200, "word": "5", "entity_group": "PARAM", "score": 0.9997219337411096}, {"start": 235, "end": 260, "word": "carrot flavored baby food", "entity_group": "VAR", "score": 0.9991059914061361}, {"start": 270, "end": 271, "word": "4", "entity_group": "PARAM", "score": 0.9996589389242434}, {"start": 281, "end": 284, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.958739171839041}, {"start": 289, "end": 290, "word": "3", "entity_group": "PARAM", "score": 0.9997048434728932}, {"start": 336, "end": 349, "word": "carrot flavor", "entity_group": "VAR", "score": 0.9999837294394712}, {"start": 378, "end": 389, "word": "three times", "entity_group": "PARAM", "score": 0.8392363138877066}, {"start": 398, "end": 422, "word": "apple flavored baby food", "entity_group": "VAR", "score": 0.9994183188963739}, {"start": 426, "end": 451, "word": "carrot flavored baby food", "entity_group": "VAR", "score": 0.9989166208948783}, {"start": 476, "end": 484, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984957871475735}, {"start": 485, "end": 486, "word": "2", "entity_group": "LIMIT", "score": 0.9997068736492563}, {"start": 499, "end": 524, "word": "carrot flavored baby food", "entity_group": "VAR", "score": 0.9990699397054401}, {"start": 551, "end": 558, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989563391991476}, {"start": 559, "end": 562, "word": "100", "entity_group": "LIMIT", "score": 0.999671326056114}, {"start": 624, "end": 632, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997093702253789}, {"start": 637, "end": 647, "word": "fat intake", "entity_group": "OBJ_NAME", "score": 0.9890751918152229}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAppleFlavored = intvar(0, 999999999)  # Number of servings of apple flavored baby food\nCarrotFlavored = intvar(0, 999999999)  # Number of servings of carrot flavored baby food\n\n# Constraints\nm = Model()\n\n# The baby must eat three times as many apple flavored baby food as carrot flavored baby food:\nm += AppleFlavored >= 3 * CarrotFlavored\n# The baby must eat at least 2 servings of carrot flavored baby food:\nm += CarrotFlavored >= 2\n# The baby can consume at most 100 units of folate:\nm += 5 * AppleFlavored + 3 * CarrotFlavored <= 100\n\n# Objective\n# Maximize fat intake (2 units of fat from apple flavored and 4 units from carrot flavored):\nm.maximize(2 * AppleFlavored + 4 * CarrotFlavored)\n"}}
{"406925003": {"document": "Both fertilizer and seeds need to be added to a lawn. One unit of fertilizer takes 0.5 minutes to be effective while one unit of seeds takes 1.5 minutes to be effective. There can be at most 300 units of fertilizer and seeds combined added to the lawn. In addition at least 50 units of fertilizer need to be added. Since the lawn is really patchy, there can be at most twice the amount of fertilizer as seeds. How many units of each should be added to minimize the total time it takes for the lawn to be ready?", "order_mapping": {"fertilizer": 0, "seeds": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"fertilizer": "0.5", "seeds": "1.5"}}, "const_declarations": [{"type": "sum", "direction": "at most", "limit": "300", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "fertilizer", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "fertilizer", "direction": "at most", "param": "twice", "y_var": "seeds", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [0.5, 1.5], "constraints": [[1.0, 1.0, 300.0], [-1.0, -0.0, -50.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 50, "y": 25}, "entities": [{"start": 5, "end": 15, "word": "fertilizer", "entity_group": "VAR", "score": 0.9996776357601387}, {"start": 20, "end": 25, "word": "seeds", "entity_group": "VAR", "score": 0.9996032160673857}, {"start": 67, "end": 77, "word": "fertilizer", "entity_group": "VAR", "score": 0.9988805356200349}, {"start": 84, "end": 87, "word": "0.5", "entity_group": "PARAM", "score": 0.9995564342575632}, {"start": 130, "end": 135, "word": "seeds", "entity_group": "VAR", "score": 0.9996698348996517}, {"start": 142, "end": 145, "word": "1.5", "entity_group": "PARAM", "score": 0.9996520080822551}, {"start": 185, "end": 192, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992272594330905}, {"start": 193, "end": 196, "word": "300", "entity_group": "LIMIT", "score": 0.9997023900731496}, {"start": 206, "end": 216, "word": "fertilizer", "entity_group": "VAR", "score": 0.9990152697616217}, {"start": 221, "end": 226, "word": "seeds", "entity_group": "VAR", "score": 0.9997117651476561}, {"start": 268, "end": 276, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992955861776471}, {"start": 277, "end": 279, "word": "50", "entity_group": "LIMIT", "score": 0.9997326333972661}, {"start": 289, "end": 299, "word": "fertilizer", "entity_group": "VAR", "score": 0.9994764986195296}, {"start": 366, "end": 373, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9980247544151148}, {"start": 374, "end": 379, "word": "twice", "entity_group": "PARAM", "score": 0.9940688713476328}, {"start": 394, "end": 404, "word": "fertilizer", "entity_group": "VAR", "score": 0.9995698175128431}, {"start": 408, "end": 413, "word": "seeds", "entity_group": "VAR", "score": 0.9997028447692076}, {"start": 458, "end": 466, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9978459073040262}, {"start": 471, "end": 481, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9942891539501596}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFertilizer = intvar(0, 999999999)  # Number of units of fertilizer\nSeeds = intvar(0, 999999999)  # Number of units of seeds\n\n# Constraints\nm = Model()\n\n# At most 300 units of fertilizer and seeds combined:\nm += Fertilizer + Seeds <= 300\n# At least 50 units of fertilizer need to be added:\nm += Fertilizer >= 50\n# There can be at most twice the amount of fertilizer as seeds:\nm += Fertilizer <= 2 * Seeds\n\n# Objective\n# Minimize the total time it takes for the lawn to be ready (0.5 minutes per unit of fertilizer, 1.5 minutes per unit of seeds):\nm.minimize(0.5 * Fertilizer + 1.5 * Seeds)\n"}}
{"279930346": {"document": "A pharmacy has two factories, factory 1 and factory 2, where they make acne cream and anti-bacterial cream. Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour. Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour. Factory 1 requires 30 units of base gel per hour while factory 2 requires 45 units of base gel per hour. The pharmacy has available 5000 units of base gel. Further, they must make at least 800 units of acne cream and 1000 units of anti-bacterial cream. How many hours should each factory be run to minimize the total time needed?", "order_mapping": {"factory 1": 0, "factory 2": 1, "Factory 1": 0, "Factory 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total time", "vars": ["factory 1", "factory 2"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"Factory 1": "30", "factory 2": "45"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "800", "terms": {"Factory 1": "12", "Factory 2": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"Factory 1": "15", "Factory 2": "10"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[30.0, 45.0, 5000.0], [-12.0, -20.0, -800.0], [-15.0, -10.0, -1000.0]]}, "solution": {"x": 67, "y": 0}, "entities": [{"start": 31, "end": 40, "word": "factory 1", "entity_group": "VAR", "score": 0.9998584086850489}, {"start": 45, "end": 54, "word": "factory 2", "entity_group": "VAR", "score": 0.9998228328868096}, {"start": 113, "end": 122, "word": "Factory 1", "entity_group": "VAR", "score": 0.9998810588062529}, {"start": 132, "end": 134, "word": "12", "entity_group": "PARAM", "score": 0.9997144967520898}, {"start": 159, "end": 161, "word": "15", "entity_group": "PARAM", "score": 0.9996605105887654}, {"start": 205, "end": 214, "word": "Factory 2", "entity_group": "VAR", "score": 0.9998715838465013}, {"start": 224, "end": 226, "word": "20", "entity_group": "PARAM", "score": 0.9997283201664545}, {"start": 251, "end": 253, "word": "10", "entity_group": "PARAM", "score": 0.9996605105887658}, {"start": 297, "end": 306, "word": "Factory 1", "entity_group": "VAR", "score": 0.9998669502755858}, {"start": 316, "end": 318, "word": "30", "entity_group": "PARAM", "score": 0.9996056056633195}, {"start": 352, "end": 361, "word": "factory 2", "entity_group": "VAR", "score": 0.9998307622608401}, {"start": 371, "end": 373, "word": "45", "entity_group": "PARAM", "score": 0.9996206460899119}, {"start": 420, "end": 429, "word": "available", "entity_group": "CONST_DIR", "score": 0.9992845001368036}, {"start": 430, "end": 434, "word": "5000", "entity_group": "LIMIT", "score": 0.9992614937759637}, {"start": 480, "end": 488, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986360672001577}, {"start": 489, "end": 492, "word": "800", "entity_group": "LIMIT", "score": 0.9997059427349473}, {"start": 517, "end": 521, "word": "1000", "entity_group": "LIMIT", "score": 0.9996131472086588}, {"start": 601, "end": 609, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.998539144991261}, {"start": 614, "end": 624, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9939768325994933}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFactory1Hours = intvar(0, 999999999)  # Hours factory 1 runs\nFactory2Hours = intvar(0, 999999999)  # Hours factory 2 runs\n\n# Constraints\nm = Model()\n\n# The pharmacy has available 5000 units of base gel:\nm += 30 * Factory1Hours + 45 * Factory2Hours <= 5000\n# They must make at least 800 units of acne cream:\nm += 12 * Factory1Hours + 20 * Factory2Hours >= 800\n# They must make at least 1000 units of anti-bacterial cream:\nm += 15 * Factory1Hours + 10 * Factory2Hours >= 1000\n\n# Objective\n# Minimize the total time needed (sum of hours both factories run):\nm.minimize(Factory1Hours + Factory2Hours)\n"}}
{"1187069645": {"document": "A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?", "order_mapping": {"burgers": 0, "pizza": 1, "burger": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cholesterol intake", "terms": {"burger": "12", "pizza": "10"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "130", "terms": {"burger": "10", "pizza": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3000", "terms": {"burger": "300", "pizza": "250"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "pizza", "direction": "at least", "param": "twice", "y_var": "burgers", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [12.0, 10.0], "constraints": [[-10.0, -8.0, -130.0], [-300.0, -250.0, -3000.0], [2.0, -1.0, -0.0]]}, "solution": {"x": 5, "y": 10}, "entities": [{"start": 35, "end": 42, "word": "burgers", "entity_group": "VAR", "score": 0.9992782688021341}, {"start": 47, "end": 52, "word": "pizza", "entity_group": "VAR", "score": 0.999140497434865}, {"start": 86, "end": 92, "word": "burger", "entity_group": "VAR", "score": 0.9996418855105963}, {"start": 102, "end": 104, "word": "10", "entity_group": "PARAM", "score": 0.9996423698904068}, {"start": 122, "end": 125, "word": "300", "entity_group": "PARAM", "score": 0.999735852765785}, {"start": 151, "end": 156, "word": "pizza", "entity_group": "VAR", "score": 0.9992924093565257}, {"start": 166, "end": 167, "word": "8", "entity_group": "PARAM", "score": 0.9996656820961217}, {"start": 185, "end": 188, "word": "250", "entity_group": "PARAM", "score": 0.99972916660648}, {"start": 217, "end": 225, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991810420271136}, {"start": 226, "end": 229, "word": "130", "entity_group": "LIMIT", "score": 0.9997402910432078}, {"start": 247, "end": 251, "word": "3000", "entity_group": "LIMIT", "score": 0.9997255980994277}, {"start": 278, "end": 284, "word": "burger", "entity_group": "VAR", "score": 0.99968252499283}, {"start": 294, "end": 296, "word": "12", "entity_group": "PARAM", "score": 0.9994652017221882}, {"start": 306, "end": 317, "word": "cholesterol", "entity_group": "OBJ_NAME", "score": 0.994999542059846}, {"start": 338, "end": 343, "word": "pizza", "entity_group": "VAR", "score": 0.9993639382725662}, {"start": 353, "end": 355, "word": "10", "entity_group": "PARAM", "score": 0.9995926624894852}, {"start": 365, "end": 376, "word": "cholesterol", "entity_group": "OBJ_NAME", "score": 0.9990805492696768}, {"start": 385, "end": 392, "word": "burgers", "entity_group": "VAR", "score": 0.9978544708400857}, {"start": 446, "end": 454, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979049284651265}, {"start": 455, "end": 460, "word": "twice", "entity_group": "PARAM", "score": 0.9679386573803536}, {"start": 479, "end": 484, "word": "pizza", "entity_group": "VAR", "score": 0.9978181021268824}, {"start": 488, "end": 495, "word": "burgers", "entity_group": "VAR", "score": 0.9997519778595882}, {"start": 532, "end": 540, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999356130973255}, {"start": 545, "end": 563, "word": "cholesterol intake", "entity_group": "OBJ_NAME", "score": 0.9905180691197539}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBurgers = intvar(0, 999999999)  # Number of burgers\nPizza = intvar(0, 999999999)  # Number of pizza slices\n\n# Constraints\nm = Model()\n\n# The man must get at least 130 units of fat:\nm += 10 * Burgers + 8 * Pizza >= 130\n# The man must get at least 3000 calories:\nm += 300 * Burgers + 250 * Pizza >= 3000\n# The man decides to eat at least twice as many slices of pizza as burgers:\nm += Pizza >= 2 * Burgers\n\n# Objective\n# Minimize cholesterol intake (12 units per burger, 10 units per pizza slice):\nm.minimize(12 * Burgers + 10 * Pizza)\n"}}
{"-443483964": {"document": "A clinic makes batches of vitamin shots and pills. Each batch of vitamin shots requires 30 units of vitamin C and 40 units of vitamin D. Each batch of vitamin pills requires 50 units of vitamin C and 30 units of vitamin D. Since pills are more popular, the number of batches of vitamin pills must be larger than the number of batches of vitamin shots. Further, the clinic can make at most 10 batches of vitamin shots. The clinic has available 1200 units of vitamin C and 1500 units of vitamin D. If each batch of vitamin shots can supply 10 people and each batch of vitamin pills can supply 7 people, how many batches of each should be made to maximize the number of people that can be supplied?", "order_mapping": {"vitamin shots": 0, "pills": 1, "vitamin pills": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of people", "terms": {"vitamin shots": "10", "vitamin pills": "7"}}, "const_declarations": [{"type": "xy", "x_var": "vitamin pills", "direction": "larger than", "y_var": "vitamin shots", "operator": "GREATER"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "vitamin shots", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1200", "terms": {"vitamin shots": "30", "vitamin pills": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1500", "terms": {"vitamin shots": "40", "vitamin pills": "30"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-10.0, -7.0], "constraints": [[1.0, -1.0, -1e-06], [1.0, 0.0, 10.0], [30.0, 50.0, 1200.0], [40.0, 30.0, 1500.0]]}, "solution": {"x": 10, "y": 18}, "entities": [{"start": 26, "end": 39, "word": "vitamin shots", "entity_group": "VAR", "score": 0.9999645654806799}, {"start": 44, "end": 49, "word": "pills", "entity_group": "VAR", "score": 0.9994882499222498}, {"start": 66, "end": 79, "word": "vitamin shots", "entity_group": "VAR", "score": 0.9999653610649477}, {"start": 89, "end": 91, "word": "30", "entity_group": "PARAM", "score": 0.9996559925263039}, {"start": 115, "end": 117, "word": "40", "entity_group": "PARAM", "score": 0.9996636965332688}, {"start": 152, "end": 165, "word": "vitamin pills", "entity_group": "VAR", "score": 0.9999348635121731}, {"start": 175, "end": 177, "word": "50", "entity_group": "PARAM", "score": 0.9996164631607305}, {"start": 201, "end": 203, "word": "30", "entity_group": "PARAM", "score": 0.9996630303184729}, {"start": 230, "end": 235, "word": "pills", "entity_group": "VAR", "score": 0.9992408703153282}, {"start": 280, "end": 293, "word": "vitamin pills", "entity_group": "VAR", "score": 0.9998883837203799}, {"start": 339, "end": 352, "word": "vitamin shots", "entity_group": "VAR", "score": 0.999970796852437}, {"start": 385, "end": 392, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991003819076746}, {"start": 393, "end": 395, "word": "10", "entity_group": "LIMIT", "score": 0.9996757607874412}, {"start": 407, "end": 420, "word": "vitamin shots", "entity_group": "VAR", "score": 0.9999785642539861}, {"start": 438, "end": 447, "word": "available", "entity_group": "CONST_DIR", "score": 0.999440146036153}, {"start": 448, "end": 452, "word": "1200", "entity_group": "LIMIT", "score": 0.9993337857494035}, {"start": 476, "end": 480, "word": "1500", "entity_group": "LIMIT", "score": 0.9994130307489815}, {"start": 518, "end": 531, "word": "vitamin shots", "entity_group": "VAR", "score": 0.9999528075646055}, {"start": 536, "end": 542, "word": "supply", "entity_group": "OBJ_NAME", "score": 0.9736670362424094}, {"start": 543, "end": 545, "word": "10", "entity_group": "PARAM", "score": 0.9979783634732866}, {"start": 546, "end": 552, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9973128543437414}, {"start": 571, "end": 584, "word": "vitamin pills", "entity_group": "VAR", "score": 0.9999285576903877}, {"start": 589, "end": 595, "word": "supply", "entity_group": "OBJ_NAME", "score": 0.9810056635542957}, {"start": 596, "end": 597, "word": "7", "entity_group": "PARAM", "score": 0.9974668120209418}, {"start": 598, "end": 604, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9961794566238911}, {"start": 650, "end": 658, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996743343160847}, {"start": 663, "end": 679, "word": "number of people", "entity_group": "OBJ_NAME", "score": 0.990072200923752}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVitaminShots = intvar(0, 999999999)  # Number of batches of vitamin shots\nVitaminPills = intvar(0, 999999999)  # Number of batches of vitamin pills\n\n# Constraints\nm = Model()\n\n# The number of batches of vitamin pills must be larger than the number of batches of vitamin shots:\nm += VitaminPills > VitaminShots\n# The clinic can make at most 10 batches of vitamin shots:\nm += VitaminShots <= 10\n# The clinic has available 1200 units of vitamin C:\nm += 30 * VitaminShots + 50 * VitaminPills <= 1200\n# The clinic has available 1500 units of vitamin D:\nm += 40 * VitaminShots + 30 * VitaminPills <= 1500\n\n# Objective\n# Maximize the number of people that can be supplied (10 people per batch of vitamin shots, 7 people per batch of vitamin pills):\nm.maximize(10 * VitaminShots + 7 * VitaminPills)\n"}}
{"2041857060": {"document": "A doctor's office takes the  temperature of patients one by one either by using an electronic or regular thermometer. The electronic thermometer takes 3 minutes to make a reading while the regular thermometer takes 2 minutes to make a reading. Since the electronic thermometer is more accurate, at least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer. Since the electronic thermometer has a cooldown time, at least 50 patients should have their temperature checked by a regular thermometer. If the office is open for 15000 minutes, maximize the number of patients whose temperature can be taken?", "order_mapping": {"electronic": 0, "regular thermometer": 1, "electronic thermometer": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of patients", "vars": ["electronic", "regular thermometer"]}, "const_declarations": [{"type": "xby", "x_var": "electronic thermometer", "direction": "at least", "param": "twice", "y_var": "regular thermometer", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "regular thermometer", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "open for", "limit": "15000", "terms": {"electronic thermometer": "3", "regular thermometer": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[-1.0, 2.0, -0.0], [-0.0, -1.0, -50.0], [3.0, 2.0, 15000.0]]}, "solution": {"x": 3750, "y": 1875}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nElectronic = intvar(0, 999999999)  # Number of patients checked by the electronic thermometer\nRegular = intvar(0, 999999999)  # Number of patients checked by the regular thermometer\n\n# Constraints\nm = Model()\n\n# At least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer:\nm += Electronic >= 2 * Regular\n# At least 50 patients should have their temperature checked by a regular thermometer:\nm += Regular >= 50\n# The office is open for 15000 minutes (3 minutes per electronic reading, 2 minutes per regular reading):\nm += 3 * Electronic + 2 * Regular <= 15000\n\n# Objective\n# Maximize the number of patients whose temperature can be taken:\nm.maximize(Electronic + Regular)\n\n"}}
{"-1927179020": {"document": "A patient can be hooked up to two machines to have medicine delivered, machine 1 and machine 2. Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain. Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain. In addition however, machine 1 creates 0.3 units of waste per minute while machine 2 creates 0.5 units of waste per minute. If at most 8 units of medicine can be received by the heart and at least 4 units of medicine should be received by the brain, how many minutes should each machine be used to minimize the total amount of waste produced?", "order_mapping": {"machine 1": 0, "machine 2": 1, "Machine 1": 0, "Machine 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of waste", "terms": {"machine 1": "0.3", "machine 2": "0.5"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "8", "terms": {"Machine 1": "0.5", "Machine 2": "0.3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "4", "terms": {"Machine 1": "0.8", "Machine 2": "1"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [0.3, 0.5], "constraints": [[0.5, 0.3, 8.0], [-0.8, -1.0, -4.0]]}, "solution": {"x": 5, "y": 0}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMachine1 = intvar(0, 999999999)  # Minutes machine 1 is used\nMachine2 = intvar(0, 999999999)  # Minutes machine 2 is used\n\n# Constraints\nm = Model()\n\n# At most 8 units of medicine can be received by the heart:\nm += 0.5 * Machine1 + 0.3 * Machine2 <= 8\n# At least 4 units of medicine should be received by the brain:\nm += 0.8 * Machine1 + 1 * Machine2 >= 4\n\n# Objective\n# Minimize the total amount of waste produced (0.3 units per minute for machine 1 and 0.5 units per minute for machine 2):\nm.minimize(0.3 * Machine1 + 0.5 * Machine2)\n"}}
{"-76205225": {"document": "A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?", "order_mapping": {"ramen": 0, "fries": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sodium", "terms": {"ramen": "100", "fries": "75"}}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "30%", "var": "ramen", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3000", "terms": {"ramen": "400", "fries": "300"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"ramen": "20", "fries": "10"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [100.0, 75.0], "constraints": [[0.7, -0.3, 0.0], [-400.0, -300.0, -3000.0], [-20.0, -10.0, -80.0]]}, "solution": {"x": 0, "y": 10}, "entities": [{"start": 32, "end": 37, "word": "ramen", "entity_group": "VAR", "score": 0.9991501713529378}, {"start": 42, "end": 47, "word": "fries", "entity_group": "VAR", "score": 0.9993397598662894}, {"start": 63, "end": 68, "word": "ramen", "entity_group": "VAR", "score": 0.9996993365726634}, {"start": 78, "end": 81, "word": "400", "entity_group": "PARAM", "score": 0.9995844617455988}, {"start": 93, "end": 95, "word": "20", "entity_group": "PARAM", "score": 0.9997013689067141}, {"start": 119, "end": 122, "word": "100", "entity_group": "PARAM", "score": 0.9993638016168884}, {"start": 129, "end": 135, "word": "sodium", "entity_group": "OBJ_NAME", "score": 0.9961472304646112}, {"start": 151, "end": 156, "word": "fries", "entity_group": "VAR", "score": 0.999611217898532}, {"start": 166, "end": 169, "word": "300", "entity_group": "PARAM", "score": 0.9995839822286321}, {"start": 181, "end": 183, "word": "10", "entity_group": "PARAM", "score": 0.9997182861435279}, {"start": 207, "end": 209, "word": "75", "entity_group": "PARAM", "score": 0.9995665423297806}, {"start": 216, "end": 222, "word": "sodium", "entity_group": "OBJ_NAME", "score": 0.999441383864798}, {"start": 231, "end": 236, "word": "fries", "entity_group": "VAR", "score": 0.999502909256671}, {"start": 271, "end": 278, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987076137502673}, {"start": 279, "end": 283, "word": "30 %", "entity_group": "LIMIT", "score": 0.9789994091365113}, {"start": 304, "end": 309, "word": "ramen", "entity_group": "VAR", "score": 0.9996684097740471}, {"start": 349, "end": 357, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998938797842346}, {"start": 358, "end": 362, "word": "3000", "entity_group": "LIMIT", "score": 0.9996997917980078}, {"start": 376, "end": 378, "word": "80", "entity_group": "LIMIT", "score": 0.9996559810308725}, {"start": 432, "end": 440, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.999356130973255}, {"start": 445, "end": 458, "word": "sodium intake", "entity_group": "OBJ_NAME", "score": 0.9905180691197539}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRamen = intvar(0, 999999999)  # Number of ramen packs\nFries = intvar(0, 999999999)  # Number of fries packs\n\n# Constraints\nm = Model()\n\n# At most 30% of his meals can be ramen:\nm += Ramen <= 0.3 * (Ramen + Fries)\n# Ensure he eats at least 3000 calories:\nm += 400 * Ramen + 300 * Fries >= 3000\n# Ensure he eats at least 80 grams of protein:\nm += 20 * Ramen + 10 * Fries >= 80\n\n# Objective\n# Minimize sodium intake (100 mg of sodium per pack of ramen, 75 mg of sodium per pack of fries):\nm.minimize(100 * Ramen + 75 * Fries)\n"}}
{"-1727241372": {"document": "A science store makes two boxes, a cheap and expensive box. The cheap box contains 3 units of metal and 5 units of acid which can be mixed to create 8 units of foam. The expensive box contains 5 units of metal and 8 units of acid which can be mixed to create 10 units of foam. The cheap box however gives off 2 units of heat while the expensive box gives off 3 units of heat. The science store has available 200 units of metal and 300 units of acid. If at most 50 units of heat can be given off, how many of each box should the store make to maximize the amount of foam produced?", "order_mapping": {"cheap": 0, "expensive box": 1, "cheap box": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of foam", "terms": {"cheap box": "8", "expensive box": "10"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "200", "terms": {"cheap box": "3", "expensive box": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "300", "terms": {"cheap box": "5", "expensive box": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50", "terms": {"cheap box": "2", "expensive box": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -10.0], "constraints": [[3.0, 5.0, 200.0], [5.0, 8.0, 300.0], [2.0, 3.0, 50.0]]}, "solution": {"x": 25, "y": 0}, "entities": [{"start": 36, "end": 41, "word": "cheap", "entity_group": "VAR", "score": 0.9993073766056335}, {"start": 46, "end": 59, "word": "expensive box", "entity_group": "VAR", "score": 0.9998762657621445}, {"start": 66, "end": 75, "word": "cheap box", "entity_group": "VAR", "score": 0.999942239689631}, {"start": 85, "end": 86, "word": "3", "entity_group": "PARAM", "score": 0.9996730240436225}, {"start": 106, "end": 107, "word": "5", "entity_group": "PARAM", "score": 0.9997185857992368}, {"start": 151, "end": 152, "word": "8", "entity_group": "PARAM", "score": 0.9992756925925088}, {"start": 162, "end": 166, "word": "foam", "entity_group": "OBJ_NAME", "score": 0.5854091478386055}, {"start": 173, "end": 186, "word": "expensive box", "entity_group": "VAR", "score": 0.9999168193211876}, {"start": 196, "end": 197, "word": "5", "entity_group": "PARAM", "score": 0.9997061048550225}, {"start": 217, "end": 218, "word": "8", "entity_group": "PARAM", "score": 0.9997185857992367}, {"start": 262, "end": 264, "word": "10", "entity_group": "PARAM", "score": 0.999275725487086}, {"start": 274, "end": 278, "word": "foam", "entity_group": "OBJ_NAME", "score": 0.998779221864813}, {"start": 285, "end": 294, "word": "cheap box", "entity_group": "VAR", "score": 0.9998233107801856}, {"start": 313, "end": 314, "word": "2", "entity_group": "PARAM", "score": 0.9996000273458272}, {"start": 339, "end": 352, "word": "expensive box", "entity_group": "VAR", "score": 0.9999218119850161}, {"start": 363, "end": 364, "word": "3", "entity_group": "PARAM", "score": 0.9993544775589245}, {"start": 403, "end": 412, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982842300167262}, {"start": 413, "end": 416, "word": "200", "entity_group": "LIMIT", "score": 0.9991902029309276}, {"start": 436, "end": 439, "word": "300", "entity_group": "LIMIT", "score": 0.9996347957640961}, {"start": 459, "end": 466, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989556551773565}, {"start": 467, "end": 469, "word": "50", "entity_group": "LIMIT", "score": 0.9997060843687723}, {"start": 549, "end": 557, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995158699006345}, {"start": 562, "end": 576, "word": "amount of foam", "entity_group": "OBJ_NAME", "score": 0.9880566569786469}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCheapBox = intvar(0, 999999999)  # Number of cheap boxes made\nExpensiveBox = intvar(0, 999999999)  # Number of expensive boxes made\n\n# Constraints\nm = Model()\n\n# Metal and acid constraints:\nm += 3 * CheapBox + 5 * ExpensiveBox <= 200  # Metal constraint\nm += 5 * CheapBox + 8 * ExpensiveBox <= 300  # Acid constraint\n\n# Heat constraint:\nm += 2 * CheapBox + 3 * ExpensiveBox <= 50  # Heat given off by the boxes\n\n# Objective\n# Maximize the amount of foam produced (8 units from a cheap box, 10 units from an expensive box):\nm.maximize(8 * CheapBox + 10 * ExpensiveBox)\n"}}
{"1475265046": {"document": "A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?", "order_mapping": {"painkillers": 0, "sleeping pills": 1, "painkiller pill": 0, "sleeping pill": 1, "painkiller pills": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of digestive medicine", "terms": {"painkiller pill": "3", "sleeping pill": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "50", "var": "painkiller pills", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "70%", "var": "sleeping pills", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "3000", "terms": {"painkiller pill": "10", "sleeping pill": "6"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [3.0, 5.0], "constraints": [[-1.0, -0.0, -50.0], [0.7, -0.3, -0.0], [10.0, 6.0, 3000.0]]}, "solution": {"x": 50, "y": 118}, "entities": [{"start": 11, "end": 14, "word": "has", "entity_group": "CONST_DIR", "score": 0.9975542883237831}, {"start": 15, "end": 19, "word": "3000", "entity_group": "LIMIT", "score": 0.9989453103845275}, {"start": 43, "end": 54, "word": "painkillers", "entity_group": "VAR", "score": 0.9992054972827982}, {"start": 59, "end": 73, "word": "sleeping pills", "entity_group": "VAR", "score": 0.999984491190319}, {"start": 81, "end": 96, "word": "painkiller pill", "entity_group": "VAR", "score": 0.9999420804522682}, {"start": 106, "end": 108, "word": "10", "entity_group": "PARAM", "score": 0.9996887619826993}, {"start": 128, "end": 129, "word": "3", "entity_group": "PARAM", "score": 0.999676262450301}, {"start": 165, "end": 178, "word": "sleeping pill", "entity_group": "VAR", "score": 0.999985828560385}, {"start": 188, "end": 189, "word": "6", "entity_group": "PARAM", "score": 0.9996810283307311}, {"start": 209, "end": 210, "word": "5", "entity_group": "PARAM", "score": 0.9996727508104464}, {"start": 268, "end": 276, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998852111971759}, {"start": 277, "end": 279, "word": "50", "entity_group": "LIMIT", "score": 0.9992382570743241}, {"start": 280, "end": 296, "word": "painkiller pills", "entity_group": "VAR", "score": 0.9999054323647961}, {"start": 305, "end": 319, "word": "sleeping pills", "entity_group": "VAR", "score": 0.9999751220486329}, {"start": 339, "end": 347, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983165703450428}, {"start": 348, "end": 352, "word": "70 %", "entity_group": "LIMIT", "score": 0.9870126515905836}, {"start": 376, "end": 390, "word": "sleeping pills", "entity_group": "VAR", "score": 0.9999753932124935}, {"start": 438, "end": 446, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.997456699890749}, {"start": 457, "end": 485, "word": "amount of digestive medicine", "entity_group": "OBJ_NAME", "score": 0.9844527760819008}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPainkillerPills = intvar(0, 999999999)  # Number of painkiller pills\nSleepingPills = intvar(0, 999999999)  # Number of sleeping pills\n\n# Constraints\nm = Model()\n\n# The pharmacy has 3000 mg of morphine:\nm += 10 * PainkillerPills + 6 * SleepingPills <= 3000\n# The pharmacy needs to make at least 50 painkiller pills:\nm += PainkillerPills >= 50\n# At least 70% of the pills should be sleeping pills:\n# Let TotalPills = PainkillerPills + SleepingPills\n# Then, SleepingPills >= 0.7 * TotalPills\n# Rearranging, SleepingPills >= 0.7 * (PainkillerPills + SleepingPills)\n# Simplifying, 0.3 * SleepingPills >= 0.7 * PainkillerPills\n# Multiplying both sides by 10/3 for simplicity, SleepingPills >= (7/3) * PainkillerPills\nm += SleepingPills >= (7/3) * PainkillerPills\n\n# Objective\n# Minimize the total amount of digestive medicine needed (3 units for each painkiller pill, 5 units for each sleeping pill):\nm.minimize(3 * PainkillerPills + 5 * SleepingPills)\n\n"}}
{"-596972682": {"document": "A boy needs to get enough magnesium and zinc in his diet by eating chewable gummies and taking pills. Each gummy contains 3 units of magnesium and 4 units of zinc. Each pill contains 2 units of magnesium and 5 units of zinc. The boy must take at least 10 pills. Since he prefers gummies more, he must eat at least 3 times the amount of gummies as pills. If the boy can consume at most 200 units of magnesium, how many of each should he eat to maximize his zinc intake?", "order_mapping": {"gummies": 0, "pills": 1, "gummy": 0, "pill": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "zinc", "terms": {"gummy": "4", "pill": "5"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "10", "var": "pills", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "gummies", "direction": "at least", "param": "3", "y_var": "pills", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "200", "terms": {"gummy": "3", "pill": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-4.0, -5.0], "constraints": [[-0.0, -1.0, -10.0], [-1.0, 3.0, -0.0], [3.0, 2.0, 200.0]]}, "solution": {"x": 54, "y": 18}, "entities": [{"start": 76, "end": 83, "word": "gummies", "entity_group": "VAR", "score": 0.9997213582371002}, {"start": 95, "end": 100, "word": "pills", "entity_group": "VAR", "score": 0.999845824559231}, {"start": 108, "end": 113, "word": "gummy", "entity_group": "VAR", "score": 0.9997165938136052}, {"start": 123, "end": 124, "word": "3", "entity_group": "PARAM", "score": 0.9997030511510425}, {"start": 148, "end": 149, "word": "4", "entity_group": "PARAM", "score": 0.9997284381430973}, {"start": 159, "end": 163, "word": "zinc", "entity_group": "OBJ_NAME", "score": 0.9971847598826188}, {"start": 171, "end": 175, "word": "pill", "entity_group": "VAR", "score": 0.9996137416637927}, {"start": 185, "end": 186, "word": "2", "entity_group": "PARAM", "score": 0.999670766726758}, {"start": 210, "end": 211, "word": "5", "entity_group": "PARAM", "score": 0.9996917151657235}, {"start": 221, "end": 225, "word": "zinc", "entity_group": "OBJ_NAME", "score": 0.9946646809495358}, {"start": 246, "end": 254, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987705342342459}, {"start": 255, "end": 257, "word": "10", "entity_group": "LIMIT", "score": 0.999707933077818}, {"start": 258, "end": 263, "word": "pills", "entity_group": "VAR", "score": 0.9995710001485559}, {"start": 283, "end": 290, "word": "gummies", "entity_group": "VAR", "score": 0.999449830314727}, {"start": 310, "end": 318, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980387997135794}, {"start": 319, "end": 326, "word": "3 times", "entity_group": "PARAM", "score": 0.8589432802577669}, {"start": 341, "end": 348, "word": "gummies", "entity_group": "VAR", "score": 0.9995439419094261}, {"start": 352, "end": 357, "word": "pills", "entity_group": "VAR", "score": 0.9997851487585969}, {"start": 383, "end": 390, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989806848148328}, {"start": 391, "end": 394, "word": "200", "entity_group": "LIMIT", "score": 0.9997224793711265}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997058594713373}, {"start": 463, "end": 474, "word": "zinc intake", "entity_group": "OBJ_NAME", "score": 0.9907652824704815}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGummies = intvar(0, 999999999)  # Number of gummies eaten\nPills = intvar(0, 999999999)  # Number of pills taken\n\n# Constraints\nm = Model()\n\n# The boy must take at least 10 pills:\nm += Pills >= 10\n# He must eat at least 3 times the amount of gummies as pills:\nm += Gummies >= 3 * Pills\n# The boy can consume at most 200 units of magnesium:\nm += 3 * Gummies + 2 * Pills <= 200\n\n# Objective\n# Maximize zinc intake (4 units of zinc per gummy, 5 units of zinc per pill):\nm.maximize(4 * Gummies + 5 * Pills)\n"}}
{"-530211023": {"document": "A patient takes anxiety medication and anti-depressants one after the other. Each unit of anxiety medication takes 3 minutes to be effective while each unit of anti-depressant takes 5 minutes to be effective. The patient must take at least 100 units of medication and at least 30 should be anxiety medication. Since the anxiety medication is strong, the patient can take at most twice the amount of anxiety medication as anti-depressants. How many units of each should the patient take to minimize the total time it take for the medication to be effective?", "order_mapping": {"anxiety medication": 0, "anti-depressants one": 1, "anti-depressant": 1, "anti-depressants": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"anxiety medication": "3", "anti-depressant": "5"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "100", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "anxiety medication", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "anxiety medication", "direction": "at most", "param": "twice", "y_var": "anti-depressants", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [3.0, 5.0], "constraints": [[-1.0, -1.0, -100.0], [-1.0, -0.0, -30.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 66, "y": 34}, "entities": [{"start": 16, "end": 34, "word": "anxiety medication", "entity_group": "VAR", "score": 0.9999780427392937}, {"start": 39, "end": 57, "word": "anti - depressants", "entity_group": "VAR", "score": 0.9979181962639776}, {"start": 93, "end": 111, "word": "anxiety medication", "entity_group": "VAR", "score": 0.9999717336733017}, {"start": 118, "end": 119, "word": "3", "entity_group": "PARAM", "score": 0.9991982547167865}, {"start": 134, "end": 143, "word": "effective", "entity_group": "OBJ_NAME", "score": 0.9875268479533161}, {"start": 163, "end": 180, "word": "anti - depressant", "entity_group": "VAR", "score": 0.9993596717453034}, {"start": 187, "end": 188, "word": "5", "entity_group": "PARAM", "score": 0.9995344014672608}, {"start": 203, "end": 212, "word": "effective", "entity_group": "OBJ_NAME", "score": 0.9937470299099245}, {"start": 237, "end": 245, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992620196288259}, {"start": 246, "end": 249, "word": "100", "entity_group": "LIMIT", "score": 0.999721478993429}, {"start": 274, "end": 282, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981565058841175}, {"start": 283, "end": 285, "word": "30", "entity_group": "LIMIT", "score": 0.9997186892526758}, {"start": 296, "end": 314, "word": "anxiety medication", "entity_group": "VAR", "score": 0.9999847884539855}, {"start": 379, "end": 386, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997604956958893}, {"start": 387, "end": 392, "word": "twice", "entity_group": "PARAM", "score": 0.9928038582236125}, {"start": 407, "end": 425, "word": "anxiety medication", "entity_group": "VAR", "score": 0.9999604538729671}, {"start": 429, "end": 447, "word": "anti - depressants", "entity_group": "VAR", "score": 0.998356368079572}, {"start": 500, "end": 508, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9985927134034056}, {"start": 513, "end": 523, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9924658657728326}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAnxietyMedication = intvar(0, 999999999)  # Number of units of anxiety medication\nAntiDepressants = intvar(0, 999999999)  # Number of units of anti-depressants\n\n# Constraints\nm = Model()\n\n# The patient must take at least 100 units of medication in total:\nm += AnxietyMedication + AntiDepressants >= 100\n# At least 30 units should be anxiety medication:\nm += AnxietyMedication >= 30\n# The patient can take at most twice the amount of anxiety medication as anti-depressants:\nm += AnxietyMedication <= 2 * AntiDepressants\n\n# Objective\n# Minimize the total time it takes for the medication to be effective (3 minutes per unit of anxiety medication, 5 minutes per unit of anti-depressants):\nm.minimize(3 * AnxietyMedication + 5 * AntiDepressants)\n"}}
{"-355557676": {"document": "A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can  make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?", "order_mapping": {"machine 1": 0, "machine 2": 1, "Machine 1": 0, "Machine 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total time", "vars": ["machine 1", "machine 2"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1200", "terms": {"machine 1": "20", "machine 2": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1300", "terms": {"Machine 1": "30", "Machine 2": "45"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1500", "terms": {"Machine 1": "60", "Machine 2": "30"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[20.0, 15.0, 1200.0], [-30.0, -45.0, -1300.0], [-60.0, -30.0, -1500.0]]}, "solution": {"x": 15, "y": 20}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMachine1 = intvar(0, 999999999)  # Hours machine 1 is used\nMachine2 = intvar(0, 999999999)  # Hours machine 2 is used\n\n# Constraints\nm = Model()\n\n# The pharmacy has available 1200 ml of distilled water:\nm += 20 * Machine1 + 15 * Machine2 <= 1200\n# The pharmacy needs to make at least 1300 ml of eye cream:\nm += 30 * Machine1 + 45 * Machine2 >= 1300\n# The pharmacy needs to make at least 1500 ml of foot cream:\nm += 60 * Machine1 + 30 * Machine2 >= 1500\n\n# Objective\n# Minimize the total time needed (sum of hours for both machines):\nm.minimize(Machine1 + Machine2)\n"}}
{"-534201937": {"document": "A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?", "order_mapping": {"cashews": 0, "almonds": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "fat intake", "terms": {"almonds": "15", "cashews": "12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10000", "terms": {"almonds": "200", "cashews": "300"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "800", "terms": {"almonds": "20", "cashews": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "almonds", "direction": "at least", "param": "twice", "y_var": "cashews", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [12.0, 15.0], "constraints": [[-300.0, -200.0, -10000.0], [-25.0, -20.0, -800.0], [2.0, -1.0, -0.0]]}, "solution": {"x": 14, "y": 29}, "entities": [{"start": 13, "end": 20, "word": "cashews", "entity_group": "VAR", "score": 0.9971555230550448}, {"start": 25, "end": 32, "word": "almonds", "entity_group": "VAR", "score": 0.999652841332332}, {"start": 86, "end": 93, "word": "almonds", "entity_group": "VAR", "score": 0.9996313913436459}, {"start": 103, "end": 106, "word": "200", "entity_group": "PARAM", "score": 0.9995198306879685}, {"start": 120, "end": 122, "word": "20", "entity_group": "PARAM", "score": 0.9996931951617737}, {"start": 155, "end": 162, "word": "cashews", "entity_group": "VAR", "score": 0.9996781435280375}, {"start": 172, "end": 175, "word": "300", "entity_group": "PARAM", "score": 0.9995195691339391}, {"start": 189, "end": 191, "word": "25", "entity_group": "PARAM", "score": 0.999634177006625}, {"start": 236, "end": 244, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979221697069479}, {"start": 245, "end": 250, "word": "twice", "entity_group": "PARAM", "score": 0.9545170226135797}, {"start": 271, "end": 278, "word": "almonds", "entity_group": "VAR", "score": 0.9978766795044821}, {"start": 282, "end": 289, "word": "cashews", "entity_group": "VAR", "score": 0.9997227038515483}, {"start": 319, "end": 326, "word": "almonds", "entity_group": "VAR", "score": 0.9993307577690345}, {"start": 336, "end": 338, "word": "15", "entity_group": "PARAM", "score": 0.9995078381651438}, {"start": 348, "end": 351, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9610451273892402}, {"start": 371, "end": 378, "word": "cashews", "entity_group": "VAR", "score": 0.9994769018191789}, {"start": 388, "end": 390, "word": "12", "entity_group": "PARAM", "score": 0.9993788280510245}, {"start": 400, "end": 403, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.997153464818386}, {"start": 436, "end": 444, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989247897591859}, {"start": 445, "end": 450, "word": "10000", "entity_group": "LIMIT", "score": 0.9995115457509706}, {"start": 464, "end": 467, "word": "800", "entity_group": "LIMIT", "score": 0.999698878876262}, {"start": 541, "end": 549, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993509951744627}, {"start": 554, "end": 564, "word": "fat intake", "entity_group": "OBJ_NAME", "score": 0.9899883314952505}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCashews = intvar(0, 999999999)  # Number of servings of cashews\nAlmonds = intvar(0, 999999999)  # Number of servings of almonds\n\n# Constraints\nm = Model()\n\n# The woman needs to consume at least 10000 calories this week:\nm += 200 * Almonds + 300 * Cashews >= 10000\n# The woman needs to consume at least 800 grams of protein this week:\nm += 20 * Almonds + 25 * Cashews >= 800\n# The woman decides to eat at least twice as many servings of almonds as cashews:\nm += Almonds >= 2 * Cashews\n\n# Objective\n# Minimize fat intake (15 grams of fat per serving of almonds, 12 grams of fat per serving of cashews):\nm.minimize(15 * Almonds + 12 * Cashews)\n"}}
{"1862321313": {"document": "A company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?", "order_mapping": {"liquid": 0, "foam hand sanitizer": 1, "Liquid hand sanitizer": 0, "Foam hand sanitizer": 1, "foam hand sanitizers": 1, "liquid hand sanitizers": 0, "liquid hand sanitizer": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of hands", "terms": {"liquid hand sanitizer": "30", "foam hand sanitizer": "20"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"Liquid hand sanitizer": "40", "Foam hand sanitizer": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "2100", "terms": {"Liquid hand sanitizer": "50", "Foam hand sanitizer": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "foam hand sanitizers", "direction": "must exceed", "y_var": "liquid hand sanitizers", "operator": "GREATER"}, {"type": "upperbound", "direction": "at most", "limit": "30", "var": "liquid hand sanitizers", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-30.0, -20.0], "constraints": [[40.0, 60.0, 2000.0], [50.0, 40.0, 2100.0], [1.0, -1.0, -1e-06], [1.0, 0.0, 30.0]]}, "solution": {"x": 20, "y": 20}, "entities": [{"start": 20, "end": 26, "word": "liquid", "entity_group": "VAR", "score": 0.9996278652666452}, {"start": 31, "end": 50, "word": "foam hand sanitizer", "entity_group": "VAR", "score": 0.9977113954493353}, {"start": 53, "end": 74, "word": "Liquid hand sanitizer", "entity_group": "VAR", "score": 0.9997378913194932}, {"start": 84, "end": 86, "word": "40", "entity_group": "PARAM", "score": 0.9996861955362409}, {"start": 106, "end": 108, "word": "50", "entity_group": "PARAM", "score": 0.9996996653039159}, {"start": 128, "end": 147, "word": "Foam hand sanitizer", "entity_group": "VAR", "score": 0.9980140329626216}, {"start": 157, "end": 159, "word": "60", "entity_group": "PARAM", "score": 0.9997104039866059}, {"start": 179, "end": 181, "word": "40", "entity_group": "PARAM", "score": 0.9996566724750003}, {"start": 217, "end": 226, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987411249344633}, {"start": 227, "end": 231, "word": "2000", "entity_group": "LIMIT", "score": 0.9994011420390561}, {"start": 251, "end": 255, "word": "2100", "entity_group": "LIMIT", "score": 0.9996880466802818}, {"start": 289, "end": 309, "word": "foam hand sanitizers", "entity_group": "VAR", "score": 0.9949892664017821}, {"start": 315, "end": 326, "word": "must exceed", "entity_group": "CONST_DIR", "score": 0.6968879489073735}, {"start": 341, "end": 363, "word": "liquid hand sanitizers", "entity_group": "VAR", "score": 0.999065321103559}, {"start": 380, "end": 387, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987687719262826}, {"start": 388, "end": 390, "word": "30", "entity_group": "LIMIT", "score": 0.9995569983642808}, {"start": 391, "end": 413, "word": "liquid hand sanitizers", "entity_group": "VAR", "score": 0.9982772955422766}, {"start": 436, "end": 457, "word": "liquid hand sanitizer", "entity_group": "VAR", "score": 0.9996047773674833}, {"start": 468, "end": 470, "word": "30", "entity_group": "PARAM", "score": 0.9996164066337322}, {"start": 471, "end": 476, "word": "hands", "entity_group": "OBJ_NAME", "score": 0.9962028062864345}, {"start": 486, "end": 505, "word": "foam hand sanitizer", "entity_group": "VAR", "score": 0.9985023204481941}, {"start": 516, "end": 518, "word": "20", "entity_group": "PARAM", "score": 0.9987072400813445}, {"start": 519, "end": 524, "word": "hands", "entity_group": "OBJ_NAME", "score": 0.9989797845865742}, {"start": 571, "end": 579, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996595861939437}, {"start": 584, "end": 599, "word": "number of hands", "entity_group": "OBJ_NAME", "score": 0.9907877125642303}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLiquidHandSanitizer = intvar(0, 999999999)  # Number of liquid hand sanitizers made\nFoamHandSanitizer = intvar(0, 999999999)  # Number of foam hand sanitizers made\n\n# Constraints\nm = Model()\n\n# Water and alcohol constraints:\nm += 40 * LiquidHandSanitizer + 60 * FoamHandSanitizer <= 2000  # Water constraint\nm += 50 * LiquidHandSanitizer + 40 * FoamHandSanitizer <= 2100  # Alcohol constraint\n\n# The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers:\nm += FoamHandSanitizer > LiquidHandSanitizer\n\n# At most 30 liquid hand sanitizers can be made:\nm += LiquidHandSanitizer <= 30\n\n# Objective\n# Maximize the number of hands that can be cleaned (30 hands per liquid hand sanitizer, 20 hands per foam hand sanitizer):\nm.maximize(30 * LiquidHandSanitizer + 20 * FoamHandSanitizer)\n\n"}}
{"-1911316210": {"document": "A clinic is conducting a throat or nasal swabs on each patient. A throat swab takes 5 minutes while a nasal swab takes 3 minutes. The clinic must administer at least 30 nasal swabs. Since the nasal swab is more uncomfortable, at least 4 times as many throat swabs must be done as nasal swabs. If the clinic is only operational for 20000 minutes, how many of each swab should be done to maximize the number of patients seen?", "order_mapping": {"throat": 0, "nasal swabs": 1, "throat swab": 0, "nasal swab": 1, "throat swabs": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of patients", "vars": ["throat", "nasal swabs"]}, "const_declarations": [{"type": "xby", "x_var": "throat swabs", "direction": "at least", "param": "4", "y_var": "nasal swabs", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "nasal swabs", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "only", "limit": "20000", "terms": {"throat swab": "5", "nasal swab": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[-1.0, 4.0, -0.0], [-0.0, -1.0, -30.0], [5.0, 3.0, 20000.0]]}, "solution": {"x": 3478, "y": 869}, "entities": [{"start": 25, "end": 31, "word": "throat", "entity_group": "VAR", "score": 0.9994485053040069}, {"start": 35, "end": 46, "word": "nasal swabs", "entity_group": "VAR", "score": 0.9995297107480791}, {"start": 67, "end": 78, "word": "throat swab", "entity_group": "VAR", "score": 0.9999404550866132}, {"start": 85, "end": 86, "word": "5", "entity_group": "PARAM", "score": 0.9996917498826148}, {"start": 103, "end": 113, "word": "nasal swab", "entity_group": "VAR", "score": 0.9998465492685212}, {"start": 120, "end": 121, "word": "3", "entity_group": "PARAM", "score": 0.999505165130052}, {"start": 159, "end": 167, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986653167090083}, {"start": 168, "end": 170, "word": "30", "entity_group": "LIMIT", "score": 0.9995418228138323}, {"start": 171, "end": 182, "word": "nasal swabs", "entity_group": "VAR", "score": 0.9998964308369459}, {"start": 195, "end": 205, "word": "nasal swab", "entity_group": "VAR", "score": 0.9999413152325739}, {"start": 230, "end": 238, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976228582300533}, {"start": 239, "end": 246, "word": "4 times", "entity_group": "PARAM", "score": 0.9649242034334545}, {"start": 255, "end": 267, "word": "throat swabs", "entity_group": "VAR", "score": 0.999899217340989}, {"start": 284, "end": 295, "word": "nasal swabs", "entity_group": "VAR", "score": 0.9998843494371397}, {"start": 315, "end": 319, "word": "only", "entity_group": "CONST_DIR", "score": 0.9890296235624769}, {"start": 336, "end": 341, "word": "20000", "entity_group": "LIMIT", "score": 0.9991546867404596}, {"start": 392, "end": 400, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.99964340026081}, {"start": 405, "end": 423, "word": "number of patients", "entity_group": "OBJ_NAME", "score": 0.9883688956060691}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nThroatSwabs = intvar(0, 999999999)  # Number of throat swabs\nNasalSwabs = intvar(0, 999999999)  # Number of nasal swabs\n\n# Constraints\nm = Model()\n\n# The clinic must administer at least 30 nasal swabs:\nm += NasalSwabs >= 30\n# At least 4 times as many throat swabs must be done as nasal swabs:\nm += ThroatSwabs >= 4 * NasalSwabs\n# The clinic is only operational for 20000 minutes (5 minutes per throat swab and 3 minutes per nasal swab):\nm += 5 * ThroatSwabs + 3 * NasalSwabs <= 20000\n\n# Objective\n# Maximize the number of patients seen (sum of throat and nasal swabs):\nm.maximize(ThroatSwabs + NasalSwabs)\n"}}
{"-1819716628": {"document": "A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?", "order_mapping": {"pain killer 1": 0, "pain killer 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of medicine delivered to the back", "terms": {"pain killer 1": "0.8", "pain killer 2": "0.4"}}, "const_declarations": [{"type": "linear", "direction": "At most", "limit": "8", "terms": {"pain killer 1": "0.3", "pain killer 2": "0.6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "4", "terms": {"pain killer 1": "0.5", "pain killer 2": "0.7"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-0.8, -0.4], "constraints": [[0.3, 0.6, 8.0], [-0.5, -0.7, -4.0]]}, "solution": {"x": 26, "y": 0}, "entities": [{"start": 64, "end": 77, "word": "pain killer 1", "entity_group": "VAR", "score": 0.9913337096672037}, {"start": 82, "end": 95, "word": "pain killer 2", "entity_group": "VAR", "score": 0.9921745375741959}, {"start": 109, "end": 122, "word": "pain killer 1", "entity_group": "VAR", "score": 0.9942309173368997}, {"start": 132, "end": 135, "word": "0.5", "entity_group": "PARAM", "score": 0.9997021842342281}, {"start": 170, "end": 173, "word": "0.8", "entity_group": "PARAM", "score": 0.9995559900662446}, {"start": 199, "end": 203, "word": "back", "entity_group": "OBJ_NAME", "score": 0.9586887523745271}, {"start": 217, "end": 230, "word": "pain killer 2", "entity_group": "VAR", "score": 0.994251802645201}, {"start": 240, "end": 243, "word": "0.7", "entity_group": "PARAM", "score": 0.9997021966941723}, {"start": 278, "end": 281, "word": "0.4", "entity_group": "PARAM", "score": 0.9995559900662447}, {"start": 307, "end": 311, "word": "back", "entity_group": "OBJ_NAME", "score": 0.9740457930164291}, {"start": 328, "end": 341, "word": "pain killer 1", "entity_group": "VAR", "score": 0.9941710613375566}, {"start": 350, "end": 353, "word": "0.3", "entity_group": "PARAM", "score": 0.9996278110118307}, {"start": 385, "end": 398, "word": "pain killer 2", "entity_group": "VAR", "score": 0.9968257795804234}, {"start": 408, "end": 411, "word": "0.6", "entity_group": "PARAM", "score": 0.9996725839224881}, {"start": 441, "end": 448, "word": "At most", "entity_group": "CONST_DIR", "score": 0.9978021080805349}, {"start": 449, "end": 450, "word": "8", "entity_group": "LIMIT", "score": 0.9997038788181206}, {"start": 499, "end": 507, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990481097324282}, {"start": 508, "end": 509, "word": "4", "entity_group": "LIMIT", "score": 0.9997511387141206}, {"start": 604, "end": 612, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999323763707691}, {"start": 617, "end": 635, "word": "amount of medicine", "entity_group": "OBJ_NAME", "score": 0.9929624588567594}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPainKiller1 = intvar(0, 999999999)  # Number of doses of pain killer 1\nPainKiller2 = intvar(0, 999999999)  # Number of doses of pain killer 2\n\n# Constraints\nm = Model()\n\n# At most 8 units of sleep medicine should be delivered:\nm += 0.3 * PainKiller1 + 0.6 * PainKiller2 <= 8\n# At least 4 units of medicine should be delivered to the legs:\nm += 0.5 * PainKiller1 + 0.7 * PainKiller2 >= 4\n\n# Objective\n# Maximize the amount of medicine delivered to the back:\nm.maximize(0.8 * PainKiller1 + 0.4 * PainKiller2)\n"}}
{"-1832353699": {"document": "A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar.  The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?", "order_mapping": {"bananas": 0, "mangoes": 1, "banana": 0, "mango": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sugar", "terms": {"banana": "10", "mango": "8"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "4000", "terms": {"banana": "80", "mango": "100"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "150", "terms": {"banana": "20", "mango": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "33%", "var": "mangoes", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [10.0, 8.0], "constraints": [[-80.0, -100.0, -4000.0], [-20.0, -15.0, -150.0], [-0.33, 0.67, 0.0]]}, "solution": {"x": 32, "y": 15}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBananas = intvar(0, 999999999)  # Number of bananas\nMangoes = intvar(0, 999999999)  # Number of mangoes\n\n# Constraints\nm = Model()\n\n# The gorilla must consume at least 4000 calories:\nm += 80 * Bananas + 100 * Mangoes >= 4000\n# The gorilla must consume at least 150 grams of potassium:\nm += 20 * Bananas + 15 * Mangoes >= 150\n# At most 33% of the fruits he eats can be mangoes:\nm += Mangoes <= 0.33 * (Bananas + Mangoes)\n\n# Objective\n# Minimize sugar intake (10 grams of sugar per banana, 8 grams of sugar per mango):\nm.minimize(10 * Bananas + 8 * Mangoes)\n"}}
{"-724293739": {"document": "In a science club, there are two tables that can be set up to make slime. At table 1, 3 units of powder and 5 units of glue are used to make 4 units of slime. At table 2, 8 units of powder and 6 units of glue are used to make 5 units of slime. However, table 1 produces 2 units of mess while table 2 produces 4 units of mess. The science club has available 100 units of powder and 90 units of glue.  If at most 30 units of mess can be made, how many of each table should be set up to maximize the amount of slime produced?", "order_mapping": {"table 1": 0, "table 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of slime", "terms": {"table 1": "4", "table 2": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"table 1": "3", "table 2": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "90", "terms": {"table 1": "5", "table 2": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "30", "terms": {"table 1": "2", "table 2": "4"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-4.0, -5.0], "constraints": [[3.0, 8.0, 100.0], [5.0, 6.0, 90.0], [2.0, 4.0, 30.0]]}, "solution": {"x": 15, "y": 0}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTable1 = intvar(0, 999999999)  # Number of setups at table 1\nTable2 = intvar(0, 999999999)  # Number of setups at table 2\n\n# Constraints\nm = Model()\n\n# Powder constraint: 3 units per setup at table 1 and 8 units per setup at table 2 should not exceed 100 units:\nm += 3 * Table1 + 8 * Table2 <= 100\n# Glue constraint: 5 units per setup at table 1 and 6 units per setup at table 2 should not exceed 90 units:\nm += 5 * Table1 + 6 * Table2 <= 90\n# Mess constraint: 2 units of mess per setup at table 1 and 4 units of mess per setup at table 2 should not exceed 30 units:\nm += 2 * Table1 + 4 * Table2 <= 30\n\n# Objective\n# Maximize the amount of slime produced: 4 units per setup at table 1 and 5 units per setup at table 2:\nm.maximize(4 * Table1 + 5 * Table2)\n"}}
{"-2028768463": {"document": "A pharmaceutical company has 800 units of painkiller medicine and makes daytime and nighttime painkiller. A daytime pill has 6 units of painkiller medicine and 2 units of sleep medicine. A nighttime pill has 5 units of painkiller medicine and 5 units of sleep medicine. Since some people don\u2019t want the sleeping effect, at least 40% of the pills must be daytime pills. However at least 200 nighttime pills must be made. How many of each pill should be made to minimize the total amount of sleep medicine required?", "order_mapping": {"daytime": 0, "nighttime painkiller": 1, "daytime pill": 0, "nighttime pill": 1, "daytime pills": 0, "nighttime pills": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of sleep medicine", "terms": {"daytime pill": "2", "nighttime pill": "5"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "800", "terms": {"daytime pill": "6", "nighttime pill": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "daytime pills", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "200", "var": "nighttime pills", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 5.0], "constraints": [[6.0, 5.0, 800.0], [-0.6, 0.4, -0.0], [-0.0, -1.0, -200.0]]}, "solution": null, "entities": [{"start": 25, "end": 28, "word": "has", "entity_group": "CONST_DIR", "score": 0.998624323858294}, {"start": 29, "end": 32, "word": "800", "entity_group": "LIMIT", "score": 0.9985885750758074}, {"start": 72, "end": 79, "word": "daytime", "entity_group": "VAR", "score": 0.9997677158565311}, {"start": 84, "end": 93, "word": "nighttime", "entity_group": "VAR", "score": 0.998987455539886}, {"start": 109, "end": 121, "word": "daytime pill", "entity_group": "VAR", "score": 0.9999869809235158}, {"start": 126, "end": 127, "word": "6", "entity_group": "PARAM", "score": 0.9997220720964355}, {"start": 161, "end": 162, "word": "2", "entity_group": "PARAM", "score": 0.9994864741380254}, {"start": 172, "end": 186, "word": "sleep medicine", "entity_group": "OBJ_NAME", "score": 0.997935425615215}, {"start": 191, "end": 205, "word": "nighttime pill", "entity_group": "VAR", "score": 0.9999792313295031}, {"start": 210, "end": 211, "word": "5", "entity_group": "PARAM", "score": 0.9997334698537002}, {"start": 245, "end": 246, "word": "5", "entity_group": "PARAM", "score": 0.9995986624971066}, {"start": 256, "end": 270, "word": "sleep medicine", "entity_group": "OBJ_NAME", "score": 0.9972430889895956}, {"start": 325, "end": 333, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987291123501456}, {"start": 334, "end": 338, "word": "40 %", "entity_group": "LIMIT", "score": 0.9633944733439278}, {"start": 360, "end": 373, "word": "daytime pills", "entity_group": "VAR", "score": 0.9999701792990155}, {"start": 384, "end": 392, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989218506877855}, {"start": 393, "end": 396, "word": "200", "entity_group": "LIMIT", "score": 0.9995448173889588}, {"start": 397, "end": 412, "word": "nighttime pills", "entity_group": "VAR", "score": 0.9998925282518107}, {"start": 468, "end": 476, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9978234034336636}, {"start": 487, "end": 511, "word": "amount of sleep medicine", "entity_group": "OBJ_NAME", "score": 0.9810021792290354}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDaytimePills = intvar(0, 999999999)  # Number of daytime pills made\nNighttimePills = intvar(0, 999999999)  # Number of nighttime pills made\n\n# Constraints\nm = Model()\n\n# The total units of painkiller medicine used should not exceed 800 units:\nm += 6 * DaytimePills + 5 * NighttimePills <= 800\n# At least 40% of the pills must be daytime pills:\n# This constraint is equivalent to saying DaytimePills / (DaytimePills + NighttimePills) >= 0.4\n# Multiplying both sides by the denominator and simplifying gives:\nm += DaytimePills >= 0.4 * (DaytimePills + NighttimePills)\n# At least 200 nighttime pills must be made:\nm += NighttimePills >= 200\n\n# Objective\n# Minimize the total amount of sleep medicine required (2 units for a daytime pill, 5 units for a nighttime pill):\nm.minimize(2 * DaytimePills + 5 * NighttimePills)\n\n"}}
{"415701": {"document": "A competitive eater challenges himself to eat slices of cheesecake and caramel cake. Each slice of cheesecake contains 200 calories and 40 grams of sugar. Each slice of caramel cake contains 250 calories and 50 grams of sugar. He prefers cheesecake and decides to eat at least 3 times as many slices of cheesecake as caramel cake. However, he must also eat at least 3 slices of caramel cake. If he can consume at most 10000 calories in one day, how many slices of each cake should he eat to maximize the total amount of sugar he consumes?", "order_mapping": {"cheesecake": 0, "caramel cake": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total amount of sugar", "terms": {"cheesecake": "40", "caramel cake": "50"}}, "const_declarations": [{"type": "xby", "x_var": "cheesecake", "direction": "at least", "param": "3", "y_var": "caramel cake", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "caramel cake", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "10000", "terms": {"cheesecake": "200", "caramel cake": "250"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-40.0, -50.0], "constraints": [[-1.0, 3.0, -0.0], [-0.0, -1.0, -3.0], [200.0, 250.0, 10000.0]]}, "solution": {"x": 45, "y": 4}, "entities": [{"start": 56, "end": 66, "word": "cheesecake", "entity_group": "VAR", "score": 0.9964284895031983}, {"start": 71, "end": 83, "word": "caramel cake", "entity_group": "VAR", "score": 0.9999794647688299}, {"start": 100, "end": 110, "word": "cheesecake", "entity_group": "VAR", "score": 0.9994930482049352}, {"start": 120, "end": 123, "word": "200", "entity_group": "PARAM", "score": 0.9995194552132333}, {"start": 137, "end": 139, "word": "40", "entity_group": "PARAM", "score": 0.9996243034480373}, {"start": 149, "end": 154, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9970443357029436}, {"start": 171, "end": 183, "word": "caramel cake", "entity_group": "VAR", "score": 0.9999863005162332}, {"start": 193, "end": 196, "word": "250", "entity_group": "PARAM", "score": 0.9993613914153845}, {"start": 210, "end": 212, "word": "50", "entity_group": "PARAM", "score": 0.9991447305715806}, {"start": 222, "end": 227, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9946427233847898}, {"start": 241, "end": 251, "word": "cheesecake", "entity_group": "VAR", "score": 0.9997604251225829}, {"start": 271, "end": 279, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981160615898342}, {"start": 280, "end": 281, "word": "3", "entity_group": "PARAM", "score": 0.9982456116615437}, {"start": 306, "end": 316, "word": "cheesecake", "entity_group": "VAR", "score": 0.9979162815325439}, {"start": 320, "end": 332, "word": "caramel cake", "entity_group": "VAR", "score": 0.9999708849030013}, {"start": 362, "end": 370, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990361055611581}, {"start": 371, "end": 372, "word": "3", "entity_group": "LIMIT", "score": 0.9996757842171388}, {"start": 383, "end": 395, "word": "caramel cake", "entity_group": "VAR", "score": 0.9999768614413647}, {"start": 416, "end": 423, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988225471438811}, {"start": 424, "end": 429, "word": "10000", "entity_group": "LIMIT", "score": 0.9997514525951281}, {"start": 498, "end": 506, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995412423069189}, {"start": 517, "end": 532, "word": "amount of sugar", "entity_group": "OBJ_NAME", "score": 0.9725162977075462}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCheesecake = intvar(0, 999999999)  # Number of slices of cheesecake\nCaramelCake = intvar(0, 999999999)  # Number of slices of caramel cake\n\n# Constraints\nm = Model()\n\n# He decides to eat at least 3 times as many slices of cheesecake as caramel cake:\nm += Cheesecake >= 3 * CaramelCake\n# He must also eat at least 3 slices of caramel cake:\nm += CaramelCake >= 3\n# He can consume at most 10000 calories in one day:\nm += 200 * Cheesecake + 250 * CaramelCake <= 10000\n\n# Objective\n# Maximize the total amount of sugar he consumes (40g per slice of cheesecake, 50g per slice of caramel cake):\nm.maximize(40 * Cheesecake + 50 * CaramelCake)\n"}}
{"1694815390": {"document": "Both sulfate and ginger need to be added to a shampoo. One unit of sulfate takes 0.5 minutes to be effective while one unit of ginger takes 0.75 minutes to be effective. The shampoo must contain at least 100 units of sulfates and a total of 400 units of both ingredient. Since too much sulfate can damage the hair, there can be at most twice the amount of sulfate as ginger in the shampoo. How many units of each should be added to the shampoo to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)", "order_mapping": {"sulfate": 0, "ginger": 1, "sulfates": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of time", "terms": {"sulfate": "0.5", "ginger": "0.75"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "100", "var": "sulfates", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "total", "limit": "400", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "sulfate", "direction": "at most", "param": "twice", "y_var": "ginger", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [0.5, 0.75], "constraints": [[-1.0, -0.0, -100.0], [1.0, 1.0, 400.0], [1.0, -2.0, 0.0]]}, "solution": {"x": 100, "y": 50}, "entities": [{"start": 5, "end": 12, "word": "sulfate", "entity_group": "VAR", "score": 0.9997818988734971}, {"start": 17, "end": 23, "word": "ginger", "entity_group": "VAR", "score": 0.9994877091857591}, {"start": 68, "end": 75, "word": "sulfate", "entity_group": "VAR", "score": 0.9992957954024567}, {"start": 82, "end": 85, "word": "0.5", "entity_group": "PARAM", "score": 0.9995643704142667}, {"start": 100, "end": 109, "word": "effective", "entity_group": "OBJ_NAME", "score": 0.9428432286956693}, {"start": 128, "end": 134, "word": "ginger", "entity_group": "VAR", "score": 0.9995751361115419}, {"start": 141, "end": 145, "word": "0.75", "entity_group": "PARAM", "score": 0.9995607371190548}, {"start": 160, "end": 169, "word": "effective", "entity_group": "OBJ_NAME", "score": 0.9871335705494884}, {"start": 197, "end": 205, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999115304882357}, {"start": 206, "end": 209, "word": "100", "entity_group": "LIMIT", "score": 0.9997372551808563}, {"start": 219, "end": 227, "word": "sulfates", "entity_group": "VAR", "score": 0.9991115426027224}, {"start": 243, "end": 246, "word": "400", "entity_group": "LIMIT", "score": 0.9997304789774143}, {"start": 289, "end": 296, "word": "sulfate", "entity_group": "VAR", "score": 0.999800360833816}, {"start": 332, "end": 339, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9974337377703382}, {"start": 340, "end": 345, "word": "twice", "entity_group": "PARAM", "score": 0.9940632519706635}, {"start": 360, "end": 367, "word": "sulfate", "entity_group": "VAR", "score": 0.9996451518523244}, {"start": 371, "end": 377, "word": "ginger", "entity_group": "VAR", "score": 0.9987796181335729}, {"start": 452, "end": 460, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9952200539347938}, {"start": 471, "end": 485, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9898771145201554}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSulfate = intvar(0, 999999999)  # Number of units of sulfate\nGinger = intvar(0, 999999999)  # Number of units of ginger\n\n# Constraints\nm = Model()\n\n# The shampoo must contain at least 100 units of sulfates:\nm += Sulfate >= 100\n# A total of 400 units of both ingredients:\nm += Sulfate + Ginger == 400\n# There can be at most twice the amount of sulfate as ginger:\nm += Sulfate <= 2 * Ginger\n\n# Objective\n# Minimize the total amount of time it takes for the mixture to be effective:\nm.minimize(0.5 * Sulfate + 0.75 * Ginger)\n"}}
{"-945818446": {"document": "A pharmaceutical company has two labs, lab 1 and lab 2, where they make heart and lung medication in pill form. At lab 1, they can produce 20 heart medication pills and 30 lung medication pills per hour. At lab 2, they can produce 30 heart medication pills and 40 lung medication pills per hour. Each session at lab 1 requires 3 hours of worker labor while each session at lab 2 requires 5 hours of worker labor. The company has 1500 worker hours available and must make at least 20000 heart medication pills and at least 30000 lung medication pills. How many hours at each lab should be run to minimize the total time needed?", "order_mapping": {"lab 1": 0, "lab 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total time", "vars": ["lab 1", "lab 2"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1500", "terms": {"lab 1": "3", "lab 2": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "20000", "terms": {"lab 1": "20", "lab 2": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "30000", "terms": {"lab 1": "30", "lab 2": "40"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[3.0, 5.0, 1500.0], [-20.0, -30.0, -20000.0], [-30.0, -40.0, -30000.0]]}, "solution": null, "entities": [{"start": 40, "end": 45, "word": "lab 1", "entity_group": "VAR", "score": 0.9997830012954211}, {"start": 50, "end": 55, "word": "lab 2", "entity_group": "VAR", "score": 0.9998143849765074}, {"start": 118, "end": 123, "word": "lab 1", "entity_group": "VAR", "score": 0.9998406951224154}, {"start": 143, "end": 145, "word": "20", "entity_group": "PARAM", "score": 0.9995076625919568}, {"start": 173, "end": 175, "word": "30", "entity_group": "PARAM", "score": 0.9995780599331748}, {"start": 212, "end": 217, "word": "lab 2", "entity_group": "VAR", "score": 0.9998330906972318}, {"start": 237, "end": 239, "word": "30", "entity_group": "PARAM", "score": 0.9995076625919551}, {"start": 267, "end": 269, "word": "40", "entity_group": "PARAM", "score": 0.9995780615507202}, {"start": 319, "end": 324, "word": "lab 1", "entity_group": "VAR", "score": 0.9999141138852301}, {"start": 334, "end": 335, "word": "3", "entity_group": "PARAM", "score": 0.9992992191327958}, {"start": 380, "end": 385, "word": "lab 2", "entity_group": "VAR", "score": 0.9999248779276507}, {"start": 395, "end": 396, "word": "5", "entity_group": "PARAM", "score": 0.9993064044603178}, {"start": 437, "end": 441, "word": "1500", "entity_group": "LIMIT", "score": 0.999231130879565}, {"start": 455, "end": 464, "word": "available", "entity_group": "CONST_DIR", "score": 0.999211088137119}, {"start": 479, "end": 487, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988888670186274}, {"start": 488, "end": 493, "word": "20000", "entity_group": "LIMIT", "score": 0.9996005795366244}, {"start": 521, "end": 529, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990930858030121}, {"start": 530, "end": 535, "word": "30000", "entity_group": "LIMIT", "score": 0.9975080855796375}, {"start": 604, "end": 612, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9983664629024189}, {"start": 617, "end": 627, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9939481426227794}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLab1Hours = intvar(0, 999999999)  # Number of hours lab 1 is run\nLab2Hours = intvar(0, 999999999)  # Number of hours lab 2 is run\n\n# Constraints\nm = Model()\n\n# Worker hours available (3 hours per session for lab 1 and 5 hours per session for lab 2):\nm += 3 * Lab1Hours + 5 * Lab2Hours <= 1500\n# At least 20000 heart medication pills needed (20 pills per hour from lab 1 and 30 pills per hour from lab 2):\nm += 20 * Lab1Hours + 30 * Lab2Hours >= 20000\n# At least 30000 lung medication pills needed (30 pills per hour from lab 1 and 40 pills per hour from lab 2):\nm += 30 * Lab1Hours + 40 * Lab2Hours >= 30000\n\n# Objective\n# Minimize the total time (hours) needed:\nm.minimize(Lab1Hours + Lab2Hours)\n"}}
{"102495722": {"document": "A doctor suggests that his patient eat oranges and grapefruit to meet his vitamin C and vitamin A requirements. One orange contains 5 units of vitamin C, 3 units of vitamin A, and 5 grams of sugar. One grapefruit contains 7 units of vitamin C, 5 units of vitamin A, and 6 grams of sugar. The patient must get at least 80 units of vitamin C and 70 units of vitamin A. Since the patent prefers oranges, he must eat at least 2 times as many oranges as grapefruit. How many of each should he eat to minimize his sugar intake?", "order_mapping": {"oranges": 0, "grapefruit": 1, "orange": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sugar", "terms": {"orange": "5", "grapefruit": "6"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "80", "terms": {"orange": "5", "grapefruit": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "70", "terms": {"orange": "3", "grapefruit": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "oranges", "direction": "at least", "param": "2", "y_var": "grapefruit", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 6.0], "constraints": [[-5.0, -7.0, -80.0], [-3.0, -5.0, -70.0], [-1.0, 2.0, -0.0]]}, "solution": {"x": 15, "y": 5}, "entities": [{"start": 39, "end": 46, "word": "oranges", "entity_group": "VAR", "score": 0.9994914722112221}, {"start": 51, "end": 61, "word": "grapefruit", "entity_group": "VAR", "score": 0.999635940184116}, {"start": 117, "end": 123, "word": "orange", "entity_group": "VAR", "score": 0.9993974652866001}, {"start": 133, "end": 134, "word": "5", "entity_group": "PARAM", "score": 0.9996901555476078}, {"start": 156, "end": 157, "word": "3", "entity_group": "PARAM", "score": 0.9996892585620505}, {"start": 183, "end": 184, "word": "5", "entity_group": "PARAM", "score": 0.9996149221785618}, {"start": 194, "end": 199, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9992898640429502}, {"start": 206, "end": 216, "word": "grapefruit", "entity_group": "VAR", "score": 0.9995535934331987}, {"start": 226, "end": 227, "word": "7", "entity_group": "PARAM", "score": 0.9996789630122395}, {"start": 249, "end": 250, "word": "5", "entity_group": "PARAM", "score": 0.9996892585620509}, {"start": 276, "end": 277, "word": "6", "entity_group": "PARAM", "score": 0.999503194542096}, {"start": 287, "end": 292, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9985570674307814}, {"start": 316, "end": 324, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991389955700267}, {"start": 325, "end": 327, "word": "80", "entity_group": "LIMIT", "score": 0.999706854788378}, {"start": 351, "end": 353, "word": "70", "entity_group": "LIMIT", "score": 0.999587231952949}, {"start": 399, "end": 406, "word": "oranges", "entity_group": "VAR", "score": 0.9993762913814139}, {"start": 421, "end": 429, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978840460532775}, {"start": 430, "end": 437, "word": "2 times", "entity_group": "PARAM", "score": 0.7696021228750528}, {"start": 446, "end": 453, "word": "oranges", "entity_group": "VAR", "score": 0.9995257918261641}, {"start": 457, "end": 467, "word": "grapefruit", "entity_group": "VAR", "score": 0.9989608142972151}, {"start": 504, "end": 512, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9993561309732553}, {"start": 517, "end": 529, "word": "sugar intake", "entity_group": "OBJ_NAME", "score": 0.9905180691197539}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOranges = intvar(0, 999999999)  # Number of oranges eaten\nGrapefruit = intvar(0, 999999999)  # Number of grapefruits eaten\n\n# Constraints\nm = Model()\n\n# Vitamin C requirement (at least 80 units):\nm += 5 * Oranges + 7 * Grapefruit >= 80\n# Vitamin A requirement (at least 70 units):\nm += 3 * Oranges + 5 * Grapefruit >= 70\n# Patient prefers oranges, must eat at least 2 times as many oranges as grapefruit:\nm += Oranges >= 2 * Grapefruit\n\n# Objective\n# Minimize sugar intake (5 grams per orange, 6 grams per grapefruit):\nm.minimize(5 * Oranges + 6 * Grapefruit)\n"}}
{"615752596": {"document": "A university research lab can make two types of diabetes medicine, medicine A and medicine B. Per dose, medicine A takes 30 units of imported material and 50 units of mRNA to make. Per dose, medicine B takes 40 units of imported material and 30 units of mRNA to take. The lab has available at most 300 units of imported material and 400 units of mRNA. The lab can make at most 5 doses of medicine A and the number of doses of medicine B must be larger than the number of dosed of medicine A. If one dose of medicine A can treat 12 people and one dose of medicine B can treat 8 people, how many doses of each should be made to maximize the number of people that can be treated?", "order_mapping": {"medicine A": 0, "medicine B.": 1, "medicine B": 1, "medicine A.": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of people", "terms": {"medicine A": "12", "medicine B": "8"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "300", "terms": {"medicine A": "30", "medicine B": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "400", "terms": {"medicine A": "50", "medicine B": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "medicine A", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "medicine B", "direction": "larger than", "y_var": "medicine A.", "operator": "GREATER"}], "canonical": {"objective": [-12.0, -8.0], "constraints": [[30.0, 40.0, 300.0], [50.0, 30.0, 400.0], [1.0, 0.0, 5.0], [1.0, -1.0, -1e-06]]}, "solution": {"x": 4, "y": 4}, "entities": [{"start": 68, "end": 78, "word": "medicine A", "entity_group": "VAR", "score": 0.999963670180223}, {"start": 83, "end": 94, "word": "medicine B.", "entity_group": "VAR", "score": 0.9999871805980505}, {"start": 106, "end": 116, "word": "medicine A", "entity_group": "VAR", "score": 0.9998332840303678}, {"start": 123, "end": 125, "word": "30", "entity_group": "PARAM", "score": 0.9996739553472328}, {"start": 157, "end": 159, "word": "50", "entity_group": "PARAM", "score": 0.9996574707659841}, {"start": 195, "end": 205, "word": "medicine B", "entity_group": "VAR", "score": 0.9998599863033701}, {"start": 212, "end": 214, "word": "40", "entity_group": "PARAM", "score": 0.9996812634418993}, {"start": 246, "end": 248, "word": "30", "entity_group": "PARAM", "score": 0.9996574754882861}, {"start": 295, "end": 302, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991462806685798}, {"start": 303, "end": 306, "word": "300", "entity_group": "LIMIT", "score": 0.9996722372431376}, {"start": 338, "end": 341, "word": "400", "entity_group": "LIMIT", "score": 0.9995547349353759}, {"start": 375, "end": 382, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990757905932305}, {"start": 383, "end": 384, "word": "5", "entity_group": "LIMIT", "score": 0.9996466677472825}, {"start": 394, "end": 404, "word": "medicine A", "entity_group": "VAR", "score": 0.9998734421128368}, {"start": 432, "end": 442, "word": "medicine B", "entity_group": "VAR", "score": 0.9997101262066457}, {"start": 486, "end": 497, "word": "medicine A.", "entity_group": "VAR", "score": 0.9999552392750092}, {"start": 513, "end": 523, "word": "medicine A", "entity_group": "VAR", "score": 0.999853358385364}, {"start": 534, "end": 536, "word": "12", "entity_group": "PARAM", "score": 0.9995252919720581}, {"start": 537, "end": 543, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9976413114618511}, {"start": 560, "end": 570, "word": "medicine B", "entity_group": "VAR", "score": 0.9997317696444011}, {"start": 581, "end": 582, "word": "8", "entity_group": "PARAM", "score": 0.9991096298826094}, {"start": 583, "end": 589, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9970730453346466}, {"start": 633, "end": 641, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996743343035326}, {"start": 646, "end": 662, "word": "number of people", "entity_group": "OBJ_NAME", "score": 0.9901126276681504}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMedicineA = intvar(0, 999999999)  # Number of doses of medicine A made\nMedicineB = intvar(0, 999999999)  # Number of doses of medicine B made\n\n# Constraints\nm = Model()\n\n# The lab has available at most 300 units of imported material:\nm += 30 * MedicineA + 40 * MedicineB <= 300\n# The lab has available at most 400 units of mRNA:\nm += 50 * MedicineA + 30 * MedicineB <= 400\n# The lab can make at most 5 doses of medicine A:\nm += MedicineA <= 5\n# The number of doses of medicine B must be larger than the number of doses of medicine A:\nm += MedicineB > MedicineA\n\n# Objective\n# Maximize the number of people that can be treated (12 people per dose of medicine A, 8 people per dose of medicine B):\nm.maximize(12 * MedicineA + 8 * MedicineB)\n"}}
{"1066287493": {"document": "A popup clinic is doing virus testing with either spit tests or swabs. A spit test takes 10 minutes to administer while a  swab takes 15 minutes to administer. Since the spit test is more accurate, at least twice as many spit tests should be given as  swabs. However, at least 20  swabs must be administers. If the popup clinic operates for 8000 minutes, maximize the number of tests that can be administered.", "order_mapping": {"spit tests": 0, "swabs": 1, "spit test": 0, "swab": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of tests", "vars": ["spit tests", "swabs"]}, "const_declarations": [{"type": "xby", "x_var": "spit tests", "direction": "at least", "param": "twice", "y_var": "swabs", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "swabs", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "operates for", "limit": "8000", "terms": {"spit test": "10", "swab": "15"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[-1.0, 2.0, -0.0], [-0.0, -1.0, -20.0], [10.0, 15.0, 8000.0]]}, "solution": {"x": 770, "y": 20}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSpitTests = intvar(0, 999999999)  # Number of spit tests administered\nSwabs = intvar(0, 999999999)  # Number of swabs administered\n\n# Constraints\nm = Model()\n\n# At least twice as many spit tests should be given as swabs:\nm += SpitTests >= 2 * Swabs\n# At least 20 swabs must be administered:\nm += Swabs >= 20\n# The popup clinic operates for 8000 minutes (10 minutes for a spit test and 15 minutes for a swab):\nm += 10 * SpitTests + 15 * Swabs <= 8000\n\n# Objective\n# Maximize the number of tests that can be administered:\nm.maximize(SpitTests + Swabs)\n"}}
{"-1008324134": {"document": "A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin.  In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor.  How many minutes of each beam should be used to minimize the total radiation received by the pancreas?", "order_mapping": {"Beam 1": 0, "Beam 2": 1, "beam 1": 0, "beam 2": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total radiation received by the pancreas", "terms": {"Beam 1": "0.3", "Beam 2": "0.2"}}, "const_declarations": [{"type": "linear", "direction": "At most", "limit": "4", "terms": {"Beam 1": "0.2", "Beam 2": "0.1"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3", "terms": {"beam 1": "0.6", "beam 2": "0.4"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [0.3, 0.2], "constraints": [[0.2, 0.1, 4.0], [-0.6, -0.4, -3.0]]}, "solution": {"x": 1, "y": 6}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeam1 = intvar(0, 999999999)  # Minutes of Beam 1 used\nBeam2 = intvar(0, 999999999)  # Minutes of Beam 2 used\n\n# Constraints\nm = Model()\n\n# At most 4 units of medicine should be received by the skin:\nm += 0.2 * Beam1 + 0.1 * Beam2 <= 4\n# At least 3 units of medicine should be delivered to the tumor:\nm += 0.6 * Beam1 + 0.4 * Beam2 >= 3\n\n# Objective\n# Minimize the total radiation received by the pancreas:\nm.minimize(0.3 * Beam1 + 0.2 * Beam2)\n"}}
{"-2066769788": {"document": "A body builder buys pre prepared meals, a turkey dinner and a tuna salad sandwich. The turkey dinner contains 20 grams of protein, 30 grams of carbs, and 12 grams of fat. The tuna salad sandwich contains 18 grams of protein, 25 grams of carbs, and 8 grams of fat. The bodybuilder wants to get at least 150 grams of protein and 200 grams of carbs. In addition because the turkey dinner is expensive, at most 40% of the meals should be turkey dinner. How many of each meal should he eat if he wants to minimize his fat intake?", "order_mapping": {"turkey dinner": 0, "tuna salad sandwich": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "fat intake", "terms": {"turkey dinner": "12", "tuna salad sandwich": "8"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"turkey dinner": "20", "tuna salad sandwich": "18"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "200", "terms": {"turkey dinner": "30", "tuna salad sandwich": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "turkey dinner", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [12.0, 8.0], "constraints": [[-20.0, -18.0, -150.0], [-30.0, -25.0, -200.0], [0.6, -0.4, 0.0]]}, "solution": {"x": 0, "y": 9}, "entities": [{"start": 43, "end": 56, "word": "turkey dinner", "entity_group": "VAR", "score": 0.9999724460723269}, {"start": 63, "end": 82, "word": "tuna salad sandwich", "entity_group": "VAR", "score": 0.9991634802655541}, {"start": 89, "end": 102, "word": "turkey dinner", "entity_group": "VAR", "score": 0.9999802856507924}, {"start": 112, "end": 114, "word": "20", "entity_group": "PARAM", "score": 0.9996804104130717}, {"start": 134, "end": 136, "word": "30", "entity_group": "PARAM", "score": 0.9997346623801806}, {"start": 158, "end": 160, "word": "12", "entity_group": "PARAM", "score": 0.9995337675444284}, {"start": 170, "end": 173, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.995889588655708}, {"start": 180, "end": 199, "word": "tuna salad sandwich", "entity_group": "VAR", "score": 0.9995544226527994}, {"start": 209, "end": 211, "word": "18", "entity_group": "PARAM", "score": 0.9996837600269063}, {"start": 231, "end": 233, "word": "25", "entity_group": "PARAM", "score": 0.9997346623783454}, {"start": 255, "end": 256, "word": "8", "entity_group": "PARAM", "score": 0.9994402852971649}, {"start": 266, "end": 269, "word": "fat", "entity_group": "OBJ_NAME", "score": 0.9941181988055267}, {"start": 301, "end": 309, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992187103291705}, {"start": 310, "end": 313, "word": "150", "entity_group": "LIMIT", "score": 0.99973540452273}, {"start": 335, "end": 338, "word": "200", "entity_group": "LIMIT", "score": 0.9997194794029505}, {"start": 380, "end": 393, "word": "turkey dinner", "entity_group": "VAR", "score": 0.9999841438194608}, {"start": 409, "end": 416, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9966545999598411}, {"start": 417, "end": 421, "word": "40 %", "entity_group": "LIMIT", "score": 0.9746305611098378}, {"start": 445, "end": 458, "word": "turkey dinner", "entity_group": "VAR", "score": 0.9999717030411756}, {"start": 512, "end": 520, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9906575556870678}, {"start": 525, "end": 535, "word": "fat intake", "entity_group": "OBJ_NAME", "score": 0.9754859344992265}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTurkeyDinner = intvar(0, 999999999)  # Number of turkey dinners\nTunaSaladSandwich = intvar(0, 999999999)  # Number of tuna salad sandwiches\n\n# Constraints\nm = Model()\n\n# The bodybuilder wants to get at least 150 grams of protein:\nm += 20 * TurkeyDinner + 18 * TunaSaladSandwich >= 150\n# The bodybuilder wants to get at least 200 grams of carbs:\nm += 30 * TurkeyDinner + 25 * TunaSaladSandwich >= 200\n# At most 40% of the meals should be turkey dinner:\nm += TurkeyDinner <= 0.4 * (TurkeyDinner + TunaSaladSandwich)\n\n# Objective\n# Minimize fat intake (12 grams of fat per turkey dinner, 8 grams of fat per tuna salad sandwich):\nm.minimize(12 * TurkeyDinner + 8 * TunaSaladSandwich)\n"}}
{"-879679183": {"document": "A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas.  The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?", "order_mapping": {"experiment 1": 0, "experiment 2": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of green gas", "terms": {"experiment 1": "5", "experiment 2": "6"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "80", "terms": {"experiment 1": "3", "experiment 2": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "70", "terms": {"experiment 1": "4", "experiment 2": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "10", "terms": {"experiment 1": "1", "experiment 2": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -6.0], "constraints": [[3.0, 5.0, 80.0], [4.0, 3.0, 70.0], [1.0, 2.0, 10.0]]}, "solution": {"x": 10, "y": 0}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nExperiment1 = intvar(0, 999999999)  # Number of times experiment 1 is done\nExperiment2 = intvar(0, 999999999)  # Number of times experiment 2 is done\n\n# Constraints\nm = Model()\n\n# The lab has available 80 units of red liquid:\nm += 3 * Experiment1 + 5 * Experiment2 <= 80\n# The lab has available 70 units of blue liquid:\nm += 4 * Experiment1 + 3 * Experiment2 <= 70\n# At most 10 units of smelly gas can be produced:\nm += 1 * Experiment1 + 2 * Experiment2 <= 10\n\n# Objective\n# Maximize the total amount of green gas produced (5 units from experiment 1, 6 units from experiment 2):\nm.maximize(5 * Experiment1 + 6 * Experiment2)\n"}}
{"762614338": {"document": "A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?", "order_mapping": {"large pill": 0, "small pill": 1, "large pills": 0, "small pills": 1, "small": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "number of filler", "terms": {"large pill": "2", "small pill": "1"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "1000", "terms": {"large pill": "3", "small pill": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "large pills", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "small", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 1.0], "constraints": [[3.0, 2.0, 1000.0], [-1.0, -0.0, -100.0], [0.6, -0.4, -0.0]]}, "solution": {"x": 100, "y": 150}, "entities": [{"start": 6, "end": 9, "word": "has", "entity_group": "CONST_DIR", "score": 0.9980378048156334}, {"start": 10, "end": 14, "word": "1000", "entity_group": "LIMIT", "score": 0.9987691495083169}, {"start": 68, "end": 78, "word": "large pill", "entity_group": "VAR", "score": 0.9999597737443697}, {"start": 85, "end": 95, "word": "small pill", "entity_group": "VAR", "score": 0.9999777794215493}, {"start": 100, "end": 110, "word": "large pill", "entity_group": "VAR", "score": 0.9999839700315595}, {"start": 120, "end": 121, "word": "3", "entity_group": "PARAM", "score": 0.9997128421647201}, {"start": 157, "end": 158, "word": "2", "entity_group": "PARAM", "score": 0.999620390803935}, {"start": 179, "end": 189, "word": "small pill", "entity_group": "VAR", "score": 0.9999725296980007}, {"start": 199, "end": 200, "word": "2", "entity_group": "PARAM", "score": 0.9997280269979368}, {"start": 236, "end": 237, "word": "1", "entity_group": "PARAM", "score": 0.9986111787159047}, {"start": 275, "end": 283, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982480408112884}, {"start": 284, "end": 287, "word": "100", "entity_group": "LIMIT", "score": 0.9989721953122055}, {"start": 288, "end": 299, "word": "large pills", "entity_group": "VAR", "score": 0.9999553764731861}, {"start": 318, "end": 329, "word": "small pills", "entity_group": "VAR", "score": 0.9999782928139115}, {"start": 347, "end": 355, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989555751921932}, {"start": 356, "end": 360, "word": "60 %", "entity_group": "LIMIT", "score": 0.9400560952083542}, {"start": 398, "end": 403, "word": "small", "entity_group": "VAR", "score": 0.9992366516828914}, {"start": 441, "end": 449, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9983457487439313}, {"start": 460, "end": 476, "word": "number of filler", "entity_group": "OBJ_NAME", "score": 0.8338589458246434}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargePills = intvar(0, 999999999)  # Number of large pills made\nSmallPills = intvar(0, 999999999)  # Number of small pills made\n\n# Constraints\nm = Model()\n\n# Medicinal ingredients constraint: 3 units for a large pill and 2 units for a small pill, total not exceeding 1000 units\nm += 3 * LargePills + 2 * SmallPills <= 1000\n# At least 100 large pills must be made\nm += LargePills >= 100\n# At least 60% of the total number of pills must be small\nm += SmallPills >= 0.6 * (LargePills + SmallPills)\n\n# Objective\n# Minimize the total number of filler material needed: 2 units for a large pill and 1 unit for a small pill\nm.minimize(2 * LargePills + 1 * SmallPills)\n\n"}}
{"-1921036549": {"document": "Both chorine and water softener need to be added to a pool. One unit of chlorine takes 1 minute to be effective while one unit of water softener takes 2 minutes to be effective. Because too much chlorine can burn your eyes, there has to at most half as much chlorine as water softener in the pool. If there has to be at least 200 units of chlorine in the water and a total of 500 units of chemicals in the water, how many units of each should be added to minimize the total time it takes for the pool to be ready? (Note: chlorine must be added before water softener or vice versa).", "order_mapping": {"chorine": 0, "water softener": 1, "chlorine": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"chlorine": "1", "water softener": "2"}}, "const_declarations": [{"type": "xby", "x_var": "chlorine", "direction": "at most", "param": "half", "y_var": "water softener", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "200", "var": "chlorine", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "total amount", "limit": "500", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 2.0], "constraints": [[1.0, -0.5, 0.0], [-1.0, -0.0, -200.0], [-1.0, -1.0, -500.0]]}, "solution": {"x": 200, "y": 400}, "entities": [{"start": 5, "end": 12, "word": "chorine", "entity_group": "VAR", "score": 0.9997895486204718}, {"start": 17, "end": 31, "word": "water softener", "entity_group": "VAR", "score": 0.9999869602871492}, {"start": 73, "end": 81, "word": "chlorine", "entity_group": "VAR", "score": 0.9990190841878172}, {"start": 88, "end": 89, "word": "1", "entity_group": "PARAM", "score": 0.9985805276782499}, {"start": 131, "end": 145, "word": "water softener", "entity_group": "VAR", "score": 0.9999716225422985}, {"start": 152, "end": 153, "word": "2", "entity_group": "PARAM", "score": 0.9991501906677892}, {"start": 197, "end": 205, "word": "chlorine", "entity_group": "VAR", "score": 0.9998079944665679}, {"start": 240, "end": 247, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982047552863218}, {"start": 248, "end": 252, "word": "half", "entity_group": "PARAM", "score": 0.9951741911958553}, {"start": 261, "end": 269, "word": "chlorine", "entity_group": "VAR", "score": 0.9995597693296102}, {"start": 273, "end": 287, "word": "water softener", "entity_group": "VAR", "score": 0.9999534624972959}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988455922226955}, {"start": 330, "end": 333, "word": "200", "entity_group": "LIMIT", "score": 0.9997082097942764}, {"start": 343, "end": 351, "word": "chlorine", "entity_group": "VAR", "score": 0.9995994498962295}, {"start": 380, "end": 383, "word": "500", "entity_group": "LIMIT", "score": 0.9996446604435968}, {"start": 460, "end": 468, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9978459073040236}, {"start": 473, "end": 483, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9942891539501539}, {"start": 529, "end": 537, "word": "chlorine", "entity_group": "VAR", "score": 0.9996264003148052}, {"start": 559, "end": 573, "word": "water softener", "entity_group": "VAR", "score": 0.9999737148273586}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChlorine = intvar(0, 999999999)  # Number of units of chlorine\nWaterSoftener = intvar(0, 999999999)  # Number of units of water softener\n\n# Constraints\nm = Model()\n\n# There has to be at most half as much chlorine as water softener:\nm += Chlorine <= 0.5 * WaterSoftener\n# There has to be at least 200 units of chlorine:\nm += Chlorine >= 200\n# A total of 500 units of chemicals in the water:\nm += Chlorine + WaterSoftener == 500\n\n# Objective\n# Minimize the total time it takes for the pool to be ready (1 minute per unit of chlorine, 2 minutes per unit of water softener):\nm.minimize(1 * Chlorine + 2 * WaterSoftener)\n\n"}}
{"1238353423": {"document": "A drug company is making pain killers and sleeping pills using two processes, process 1 and process 2. Process 1 produces 35 units of pain killers and 12 units of sleeping pills per hour. Process 2 produces 50 units of pain killers and 30 units of sleeping pills per hour. Process 1 requires 50 units of preliminary material while process 2 requires 60 units of preliminary material. The drug company has available 2000 units of preliminary material and must make at least 1200 units of pain killers and 1200 units of sleeping pills. How many of each process should be run to minimize the total time needed?", "order_mapping": {"process 1": 0, "process 2": 1, "Process 1": 0, "Process 2": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total time", "vars": ["process 1", "process 2"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "2000", "terms": {"Process 1": "50", "process 2": "60"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1200", "terms": {"Process 1": "35", "Process 2": "50"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1200", "terms": {"Process 1": "12", "Process 2": "30"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[50.0, 60.0, 2000.0], [-35.0, -50.0, -1200.0], [-12.0, -30.0, -1200.0]]}, "solution": null, "entities": [{"start": 79, "end": 88, "word": "process 1", "entity_group": "VAR", "score": 0.9998763310050475}, {"start": 93, "end": 102, "word": "process 2", "entity_group": "VAR", "score": 0.9998432038799183}, {"start": 105, "end": 114, "word": "Process 1", "entity_group": "VAR", "score": 0.9998579338301554}, {"start": 124, "end": 126, "word": "35", "entity_group": "PARAM", "score": 0.9997150581682048}, {"start": 153, "end": 155, "word": "12", "entity_group": "PARAM", "score": 0.9996627203073672}, {"start": 191, "end": 200, "word": "Process 2", "entity_group": "VAR", "score": 0.9998634610721571}, {"start": 210, "end": 212, "word": "50", "entity_group": "PARAM", "score": 0.999720344897327}, {"start": 239, "end": 241, "word": "30", "entity_group": "PARAM", "score": 0.9996627203073671}, {"start": 277, "end": 286, "word": "Process 1", "entity_group": "VAR", "score": 0.9998314511031013}, {"start": 296, "end": 298, "word": "50", "entity_group": "PARAM", "score": 0.9996330909943378}, {"start": 335, "end": 344, "word": "process 2", "entity_group": "VAR", "score": 0.9998419066121892}, {"start": 354, "end": 356, "word": "60", "entity_group": "PARAM", "score": 0.9995768288048925}, {"start": 410, "end": 419, "word": "available", "entity_group": "CONST_DIR", "score": 0.9989788837202919}, {"start": 420, "end": 424, "word": "2000", "entity_group": "LIMIT", "score": 0.9989914084664767}, {"start": 469, "end": 477, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990029853557882}, {"start": 478, "end": 482, "word": "1200", "entity_group": "LIMIT", "score": 0.9997411131341428}, {"start": 509, "end": 513, "word": "1200", "entity_group": "LIMIT", "score": 0.9996110225432384}, {"start": 582, "end": 590, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9990267518102893}, {"start": 595, "end": 605, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9939481381809429}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProcess1 = intvar(0, 999999999)  # Number of hours process 1 is run\nProcess2 = intvar(0, 999999999)  # Number of hours process 2 is run\n\n# Constraints\nm = Model()\n\n# The drug company has available 2000 units of preliminary material:\nm += 50 * Process1 + 60 * Process2 <= 2000\n# Must make at least 1200 units of pain killers:\nm += 35 * Process1 + 50 * Process2 >= 1200\n# Must make at least 1200 units of sleeping pills:\nm += 12 * Process1 + 30 * Process2 >= 1200\n\n# Objective\n# Minimize the total time needed (sum of hours for both processes):\nm.minimize(Process1 + Process2)\n"}}
{"-1051990960": {"document": "A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?", "order_mapping": {"blueberries": 0, "strawberries": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sugar", "terms": {"blueberries": "5", "strawberries": "7"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "90", "terms": {"blueberries": "3", "strawberries": "1"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "100", "terms": {"blueberries": "5", "strawberries": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "strawberries", "direction": "at least", "param": "3", "y_var": "blueberries", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 7.0], "constraints": [[-3.0, -1.0, -90.0], [-5.0, -7.0, -100.0], [3.0, -1.0, -0.0]]}, "solution": {"x": 15, "y": 45}, "entities": [{"start": 38, "end": 49, "word": "blueberries", "entity_group": "VAR", "score": 0.9994742358149824}, {"start": 54, "end": 66, "word": "strawberries", "entity_group": "VAR", "score": 0.9995701690612}, {"start": 130, "end": 141, "word": "blueberries", "entity_group": "VAR", "score": 0.9993718182576912}, {"start": 151, "end": 152, "word": "3", "entity_group": "PARAM", "score": 0.9995625840589027}, {"start": 182, "end": 183, "word": "5", "entity_group": "PARAM", "score": 0.9996688981781939}, {"start": 214, "end": 226, "word": "strawberries", "entity_group": "VAR", "score": 0.9996253357708754}, {"start": 236, "end": 237, "word": "1", "entity_group": "PARAM", "score": 0.9987342568516446}, {"start": 266, "end": 267, "word": "7", "entity_group": "PARAM", "score": 0.9996396537531345}, {"start": 308, "end": 316, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991792331291905}, {"start": 317, "end": 319, "word": "90", "entity_group": "LIMIT", "score": 0.999645951599545}, {"start": 349, "end": 352, "word": "100", "entity_group": "LIMIT", "score": 0.9995906403507637}, {"start": 395, "end": 406, "word": "blueberries", "entity_group": "VAR", "score": 0.9991339935588763}, {"start": 460, "end": 468, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984546668496923}, {"start": 469, "end": 470, "word": "3", "entity_group": "PARAM", "score": 0.9987411120033443}, {"start": 494, "end": 506, "word": "strawberries", "entity_group": "VAR", "score": 0.9988476407643266}, {"start": 510, "end": 521, "word": "blueberries", "entity_group": "VAR", "score": 0.9998248700377604}, {"start": 537, "end": 548, "word": "blueberries", "entity_group": "VAR", "score": 0.9993037384256552}, {"start": 558, "end": 559, "word": "5", "entity_group": "PARAM", "score": 0.9996676494138188}, {"start": 569, "end": 574, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9826417173659978}, {"start": 589, "end": 601, "word": "strawberries", "entity_group": "VAR", "score": 0.9993699258117142}, {"start": 611, "end": 612, "word": "7", "entity_group": "PARAM", "score": 0.999595414615278}, {"start": 622, "end": 627, "word": "sugar", "entity_group": "OBJ_NAME", "score": 0.9934905049045675}, {"start": 678, "end": 686, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992691157490037}, {"start": 691, "end": 703, "word": "sugar intake", "entity_group": "OBJ_NAME", "score": 0.9907638494931756}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlueberries = intvar(0, 999999999)  # Number of packs of blueberries\nStrawberries = intvar(0, 999999999)  # Number of packs of strawberries\n\n# Constraints\nm = Model()\n\n# The client must get at least 90 units of anti-oxidants:\nm += 3 * Blueberries + 1 * Strawberries >= 90\n# The client must get at least 100 units of minerals:\nm += 5 * Blueberries + 7 * Strawberries >= 100\n# The client should eat at least 3 times as many packs of strawberries as blueberries:\nm += Strawberries >= 3 * Blueberries\n\n# Objective\n# Minimize sugar intake (5 grams of sugar per pack of blueberries and 7 grams of sugar per pack of strawberries):\nm.minimize(5 * Blueberries + 7 * Strawberries)\n\n"}}
{"201060410": {"document": "An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?", "order_mapping": {"beam bridges": 0, "truss bridges": 1, "beam bridge": 0, "truss bridge": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total mass", "terms": {"beam bridge": "40", "truss bridge": "60"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "600", "terms": {"beam bridge": "30", "truss bridge": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "100", "terms": {"beam bridge": "5", "truss bridge": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "5", "var": "truss bridges", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "beam bridges", "direction": "must be larger", "y_var": "truss bridges", "operator": "GREATER"}], "canonical": {"objective": [-40.0, -60.0], "constraints": [[30.0, 50.0, 600.0], [5.0, 8.0, 100.0], [0.0, 1.0, 5.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 20, "y": 0}, "entities": [{"start": 90, "end": 102, "word": "beam bridges", "entity_group": "VAR", "score": 0.9999825356745047}, {"start": 107, "end": 120, "word": "truss bridges", "entity_group": "VAR", "score": 0.9999855916162659}, {"start": 168, "end": 179, "word": "beam bridge", "entity_group": "VAR", "score": 0.9999825766036096}, {"start": 189, "end": 191, "word": "30", "entity_group": "PARAM", "score": 0.99941581793875}, {"start": 212, "end": 213, "word": "5", "entity_group": "PARAM", "score": 0.9997096155276075}, {"start": 236, "end": 248, "word": "truss bridge", "entity_group": "VAR", "score": 0.9999826558025084}, {"start": 258, "end": 260, "word": "50", "entity_group": "PARAM", "score": 0.9991755325480871}, {"start": 281, "end": 282, "word": "8", "entity_group": "PARAM", "score": 0.9997021113064753}, {"start": 313, "end": 320, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985440777334778}, {"start": 321, "end": 324, "word": "600", "entity_group": "LIMIT", "score": 0.999570900369318}, {"start": 345, "end": 348, "word": "100", "entity_group": "LIMIT", "score": 0.9997161121761252}, {"start": 399, "end": 406, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987902817599259}, {"start": 407, "end": 408, "word": "5", "entity_group": "LIMIT", "score": 0.9994924283247462}, {"start": 409, "end": 422, "word": "truss bridges", "entity_group": "VAR", "score": 0.9999629475462114}, {"start": 441, "end": 453, "word": "beam bridges", "entity_group": "VAR", "score": 0.9999664849219888}, {"start": 488, "end": 501, "word": "truss bridges", "entity_group": "VAR", "score": 0.9999742741952655}, {"start": 509, "end": 520, "word": "beam bridge", "entity_group": "VAR", "score": 0.9999689818653442}, {"start": 530, "end": 532, "word": "40", "entity_group": "PARAM", "score": 0.9996988068622323}, {"start": 545, "end": 557, "word": "truss bridge", "entity_group": "VAR", "score": 0.999979937100274}, {"start": 567, "end": 569, "word": "60", "entity_group": "PARAM", "score": 0.9995795456754097}, {"start": 625, "end": 633, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9993523892840874}, {"start": 638, "end": 648, "word": "total mass", "entity_group": "OBJ_NAME", "score": 0.9908644900320384}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBeamBridges = intvar(0, 999999999)  # Number of beam bridges built\nTrussBridges = intvar(0, 999999999)  # Number of truss bridges built\n\n# Constraints\nm = Model()\n\n# Popsicle sticks and glue constraints:\nm += 30 * BeamBridges + 50 * TrussBridges <= 600  # At most 600 Popsicle sticks\nm += 5 * BeamBridges + 8 * TrussBridges <= 100  # At most 100 units of glue\n\n# Truss bridges constraint:\nm += TrussBridges <= 5  # At most 5 truss bridges\n\n# Beam bridges must be larger than truss bridges:\nm += BeamBridges > TrussBridges\n\n# Objective\n# Maximize the total mass that can be supported (40 grams per beam bridge, 60 grams per truss bridge):\nm.maximize(40 * BeamBridges + 60 * TrussBridges)\n"}}
{"-369455986": {"document": "A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.", "order_mapping": {"pill": 0, "shot": 1, "pill vaccine": 0, "shots": 1, "pill vaccines": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of patients", "vars": ["pill", "shot"]}, "const_declarations": [{"type": "xby", "x_var": "shots", "direction": "at least", "param": "3", "y_var": "pill", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "pill vaccines", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "only", "limit": "10000", "terms": {"pill vaccine": "10", "shot": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[3.0, -1.0, -0.0], [-1.0, -0.0, -30.0], [10.0, 20.0, 10000.0]]}, "solution": {"x": 142, "y": 429}, "entities": [{"start": 109, "end": 113, "word": "pill", "entity_group": "VAR", "score": 0.9986583192743048}, {"start": 140, "end": 144, "word": "shot", "entity_group": "VAR", "score": 0.9997145944650241}, {"start": 151, "end": 163, "word": "pill vaccine", "entity_group": "VAR", "score": 0.9999177812461518}, {"start": 170, "end": 172, "word": "10", "entity_group": "PARAM", "score": 0.9993829400119075}, {"start": 205, "end": 209, "word": "shot", "entity_group": "VAR", "score": 0.9990221183604301}, {"start": 216, "end": 218, "word": "20", "entity_group": "PARAM", "score": 0.9991890852958787}, {"start": 253, "end": 257, "word": "shot", "entity_group": "VAR", "score": 0.9996426317146063}, {"start": 317, "end": 325, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981419714525738}, {"start": 326, "end": 333, "word": "3 times", "entity_group": "PARAM", "score": 0.7123796257669021}, {"start": 342, "end": 347, "word": "shots", "entity_group": "VAR", "score": 0.9984744459652758}, {"start": 351, "end": 355, "word": "pill", "entity_group": "VAR", "score": 0.9985877252780354}, {"start": 399, "end": 407, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982752343188731}, {"start": 408, "end": 410, "word": "30", "entity_group": "LIMIT", "score": 0.9993863462285155}, {"start": 411, "end": 424, "word": "pill vaccines", "entity_group": "VAR", "score": 0.9999021017266533}, {"start": 441, "end": 445, "word": "only", "entity_group": "CONST_DIR", "score": 0.9951832159791453}, {"start": 459, "end": 464, "word": "10000", "entity_group": "LIMIT", "score": 0.9996488150954669}, {"start": 475, "end": 483, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9935540242123189}, {"start": 488, "end": 506, "word": "number of patients", "entity_group": "OBJ_NAME", "score": 0.9906567224564129}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPill = intvar(0, 999999999)  # Number of pill vaccines administered\nShot = intvar(0, 999999999)  # Number of shot vaccines administered\n\n# Constraints\nm = Model()\n\n# The clinic must deliver at least 3 times as many shots as pill vaccines:\nm += Shot >= 3 * Pill\n# The clinic must administer at least 30 pill vaccines:\nm += Pill >= 30\n# The clinic only operates for 10000 minutes (10 minutes per pill vaccine, 20 minutes per shot vaccine):\nm += 10 * Pill + 20 * Shot <= 10000\n\n# Objective\n# Maximize the number of patients vaccinated:\nm.maximize(Pill + Shot)\n"}}
{"935147725": {"document": "A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is $30 while the cost per truck trip is $50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of $1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?", "order_mapping": {"vans": 0, "trucks": 1, "truck": 1, "van": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of trips", "vars": ["vans", "trucks"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1500", "terms": {"vans": "50", "truck": "80"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "1000", "terms": {"van": "30", "truck": "50"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "van", "direction": "must be larger than", "y_var": "trucks", "operator": "GREATER"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -80.0, -1500.0], [30.0, 50.0, 1000.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 12, "y": 12}, "entities": [{"start": 82, "end": 86, "word": "vans", "entity_group": "VAR", "score": 0.9995635876551983}, {"start": 101, "end": 107, "word": "trucks", "entity_group": "VAR", "score": 0.999793969079577}, {"start": 116, "end": 120, "word": "vans", "entity_group": "VAR", "score": 0.9997878141979164}, {"start": 135, "end": 137, "word": "50", "entity_group": "PARAM", "score": 0.9997218002108992}, {"start": 138, "end": 143, "word": "boxes", "entity_group": "OBJ_NAME", "score": 0.9814280741581417}, {"start": 161, "end": 166, "word": "truck", "entity_group": "VAR", "score": 0.9994350211076154}, {"start": 181, "end": 183, "word": "80", "entity_group": "PARAM", "score": 0.9994897390171473}, {"start": 184, "end": 189, "word": "boxes", "entity_group": "OBJ_NAME", "score": 0.9972897152566593}, {"start": 222, "end": 226, "word": "vans", "entity_group": "VAR", "score": 0.9998428771531246}, {"start": 242, "end": 250, "word": "van trip", "entity_group": "VAR", "score": 0.9997279878206525}, {"start": 256, "end": 258, "word": "30", "entity_group": "PARAM", "score": 0.9995301892418051}, {"start": 278, "end": 288, "word": "truck trip", "entity_group": "VAR", "score": 0.9996256335735015}, {"start": 294, "end": 296, "word": "50", "entity_group": "PARAM", "score": 0.9997050285413405}, {"start": 330, "end": 338, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992747010995943}, {"start": 339, "end": 343, "word": "1500", "entity_group": "LIMIT", "score": 0.9996792031673193}, {"start": 379, "end": 385, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9909594895880238}, {"start": 391, "end": 395, "word": "1000", "entity_group": "LIMIT", "score": 0.9994023597581182}, {"start": 408, "end": 412, "word": "vans", "entity_group": "VAR", "score": 0.9998015600575892}, {"start": 463, "end": 466, "word": "van", "entity_group": "VAR", "score": 0.997379632880962}, {"start": 510, "end": 516, "word": "trucks", "entity_group": "VAR", "score": 0.9992029644429432}, {"start": 562, "end": 570, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9976913481620957}, {"start": 575, "end": 596, "word": "total number of trips", "entity_group": "OBJ_NAME", "score": 0.962609582615297}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVans = intvar(0, 999999999)  # Number of trips by van\nTrucks = intvar(0, 999999999)  # Number of trips by truck\n\n# Constraints\nm = Model()\n\n# At least 1500 boxes of chocolate need to be transported:\nm += 50 * Vans + 80 * Trucks >= 1500\n# The budget for transportation is $1000:\nm += 30 * Vans + 50 * Trucks <= 1000\n# The number of trips by van must be larger than the number of trips by trucks:\nm += Vans > Trucks\n\n# Objective\n# Minimize the total number of trips:\nm.minimize(Vans + Trucks)\n"}}
{"721056636": {"document": "A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?", "order_mapping": {"small": 0, "large": 1, "small bottle": 0, "large bottle": 1, "small bottles": 0, "large bottles": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of honey", "terms": {"small bottle": "5", "large bottle": "20"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "300", "var": "small bottles", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "large bottles", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "small bottles", "direction": "at least", "param": "twice", "y_var": "large bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "200", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "large bottles", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-5.0, -20.0], "constraints": [[1.0, 0.0, 300.0], [0.0, 1.0, 100.0], [-1.0, 2.0, -0.0], [1.0, 1.0, 200.0], [-0.0, -1.0, -50.0]]}, "solution": {"x": 134, "y": 66}, "entities": [{"start": 37, "end": 42, "word": "small", "entity_group": "VAR", "score": 0.999547262113058}, {"start": 47, "end": 52, "word": "large", "entity_group": "VAR", "score": 0.9997561821208932}, {"start": 65, "end": 77, "word": "small bottle", "entity_group": "VAR", "score": 0.9999835195243573}, {"start": 87, "end": 88, "word": "5", "entity_group": "PARAM", "score": 0.9996460551675312}, {"start": 98, "end": 103, "word": "honey", "entity_group": "OBJ_NAME", "score": 0.9989094388410701}, {"start": 112, "end": 124, "word": "large bottle", "entity_group": "VAR", "score": 0.9999527011282854}, {"start": 134, "end": 136, "word": "20", "entity_group": "PARAM", "score": 0.9995686991642659}, {"start": 146, "end": 151, "word": "honey", "entity_group": "OBJ_NAME", "score": 0.9990105485620792}, {"start": 179, "end": 186, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982691502209751}, {"start": 187, "end": 190, "word": "300", "entity_group": "LIMIT", "score": 0.9994836754989436}, {"start": 191, "end": 204, "word": "small bottles", "entity_group": "VAR", "score": 0.9999591975756674}, {"start": 209, "end": 216, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988351347416109}, {"start": 217, "end": 220, "word": "100", "entity_group": "LIMIT", "score": 0.9995951713637969}, {"start": 221, "end": 234, "word": "large bottles", "entity_group": "VAR", "score": 0.9999481433674932}, {"start": 257, "end": 270, "word": "small bottles", "entity_group": "VAR", "score": 0.9999508615566617}, {"start": 292, "end": 300, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9973037918336132}, {"start": 301, "end": 306, "word": "twice", "entity_group": "PARAM", "score": 0.9954678458309227}, {"start": 315, "end": 328, "word": "small bottles", "entity_group": "VAR", "score": 0.9999786279138348}, {"start": 347, "end": 360, "word": "large bottles", "entity_group": "VAR", "score": 0.9999655516138902}, {"start": 390, "end": 397, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988470132641148}, {"start": 398, "end": 401, "word": "200", "entity_group": "LIMIT", "score": 0.9997079337983075}, {"start": 420, "end": 428, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982469899084935}, {"start": 429, "end": 431, "word": "50", "entity_group": "LIMIT", "score": 0.999692629026673}, {"start": 440, "end": 453, "word": "large bottles", "entity_group": "VAR", "score": 0.9999810751407454}, {"start": 497, "end": 505, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9964821743987197}, {"start": 516, "end": 531, "word": "amount of honey", "entity_group": "OBJ_NAME", "score": 0.9688329811672939}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBottles = intvar(0, 999999999)  # Number of small bottles used\nLargeBottles = intvar(0, 999999999)  # Number of large bottles used\n\n# Constraints\nm = Model()\n\n# At most 300 small bottles can be used:\nm += SmallBottles <= 300\n# At most 100 large bottles can be used:\nm += LargeBottles <= 100\n# At least twice as many small bottles must be used than large bottles:\nm += SmallBottles >= 2 * LargeBottles\n# At most 200 bottles total can be transported:\nm += SmallBottles + LargeBottles <= 200\n# At least 50 must be large bottles:\nm += LargeBottles >= 50\n\n# Objective\n# Maximize the total amount of honey transported (5 units per small bottle, 20 units per large bottle):\nm.maximize(5 * SmallBottles + 20 * LargeBottles)\n"}}
{"651026322": {"document": "An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?", "order_mapping": {"ships": 0, "planes": 1, "ship": 0, "plane": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of fuel", "terms": {"ship": "500", "plane": "300"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "500", "terms": {"ship": "40", "plane": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "plane", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "50%", "var": "ship", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [500.0, 300.0], "constraints": [[-40.0, -20.0, -500.0], [0.0, 1.0, 10.0], [-0.5, 0.5, -0.0]]}, "solution": {"x": 12, "y": 1}, "entities": [{"start": 37, "end": 42, "word": "ships", "entity_group": "VAR", "score": 0.999126009253975}, {"start": 47, "end": 53, "word": "planes", "entity_group": "VAR", "score": 0.9993227727767937}, {"start": 77, "end": 81, "word": "ship", "entity_group": "VAR", "score": 0.999437361722307}, {"start": 91, "end": 93, "word": "40", "entity_group": "PARAM", "score": 0.9997404417896703}, {"start": 129, "end": 132, "word": "500", "entity_group": "PARAM", "score": 0.9994886047386748}, {"start": 143, "end": 147, "word": "fuel", "entity_group": "OBJ_NAME", "score": 0.9974735886243691}, {"start": 161, "end": 166, "word": "plane", "entity_group": "VAR", "score": 0.9993821858208446}, {"start": 176, "end": 178, "word": "20", "entity_group": "PARAM", "score": 0.9997405402264093}, {"start": 214, "end": 217, "word": "300", "entity_group": "PARAM", "score": 0.9994886047387562}, {"start": 228, "end": 232, "word": "fuel", "entity_group": "OBJ_NAME", "score": 0.9948767282025943}, {"start": 275, "end": 283, "word": "at least", "entity_group": "CONST_DIR", "score": 0.99783921553096}, {"start": 284, "end": 287, "word": "500", "entity_group": "LIMIT", "score": 0.9991213483951507}, {"start": 343, "end": 350, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987470600592563}, {"start": 351, "end": 353, "word": "10", "entity_group": "LIMIT", "score": 0.9995275807787153}, {"start": 354, "end": 359, "word": "plane", "entity_group": "VAR", "score": 0.999329006263517}, {"start": 377, "end": 384, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9972013642375681}, {"start": 388, "end": 392, "word": "50 %", "entity_group": "LIMIT", "score": 0.9648165998715418}, {"start": 422, "end": 426, "word": "ship", "entity_group": "VAR", "score": 0.9996017003941692}, {"start": 469, "end": 477, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9982439288513801}, {"start": 482, "end": 487, "word": "total", "entity_group": "OBJ_NAME", "score": 0.9772511939913954}, {"start": 488, "end": 502, "word": "amount of fuel", "entity_group": "OBJ_NAME", "score": 0.956159976827188}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nShips = intvar(0, 999999999)  # Number of ship trips\nPlanes = intvar(0, 999999999)  # Number of plane trips\n\n# Constraints\nm = Model()\n\n# The company needs to transport at least 500 containers worth of goods:\nm += 40 * Ships + 20 * Planes >= 500\n# There can be at most 10 plane trips made:\nm += Planes <= 10\n# A minimum of 50% of the trips made must be by ship:\n# This implies the number of ship trips must be at least equal to the number of plane trips\n# Since there's no direct way to express percentages in linear constraints, we use the fact that\n# the total number of trips is the sum of ship and plane trips, and at least half of these should be ship trips.\n# This can be expressed by ensuring the number of ship trips is greater than or equal to the number of plane trips.\nm += Ships >= Planes\n\n# Objective\n# Minimize the total amount of fuel consumed (500 liters per ship trip, 300 liters per plane trip):\nm.minimize(500 * Ships + 300 * Planes)\n"}}
{"349208478": {"document": "There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?", "order_mapping": {"boat": 0, "canoe": 1, "boats": 0, "canoes": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of time", "terms": {"boats": "20", "canoes": "40"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "12", "var": "boat", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "canoe", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"boat": "10", "canoe": "8"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [20.0, 40.0], "constraints": [[1.0, 0.0, 12.0], [0.6, -0.4, -0.0], [-10.0, -8.0, -300.0]]}, "solution": {"x": 12, "y": 23}, "entities": [{"start": 101, "end": 105, "word": "boat", "entity_group": "VAR", "score": 0.9993026014982359}, {"start": 112, "end": 117, "word": "canoe", "entity_group": "VAR", "score": 0.9997417369607998}, {"start": 122, "end": 126, "word": "boat", "entity_group": "VAR", "score": 0.9995302740834004}, {"start": 136, "end": 138, "word": "10", "entity_group": "PARAM", "score": 0.9996814410962779}, {"start": 139, "end": 144, "word": "ducks", "entity_group": "OBJ_NAME", "score": 0.9497244309549968}, {"start": 162, "end": 167, "word": "canoe", "entity_group": "VAR", "score": 0.9994112791747093}, {"start": 177, "end": 178, "word": "8", "entity_group": "PARAM", "score": 0.9994808803051747}, {"start": 179, "end": 184, "word": "ducks", "entity_group": "OBJ_NAME", "score": 0.9850480826874105}, {"start": 206, "end": 211, "word": "boats", "entity_group": "VAR", "score": 0.9995596630944747}, {"start": 242, "end": 244, "word": "20", "entity_group": "PARAM", "score": 0.99959968941189}, {"start": 272, "end": 278, "word": "canoes", "entity_group": "VAR", "score": 0.9995902106933384}, {"start": 284, "end": 286, "word": "40", "entity_group": "PARAM", "score": 0.9994634232441667}, {"start": 368, "end": 375, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986398311827774}, {"start": 376, "end": 378, "word": "12", "entity_group": "LIMIT", "score": 0.9995258560040277}, {"start": 379, "end": 383, "word": "boat", "entity_group": "VAR", "score": 0.9992908541831851}, {"start": 394, "end": 402, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989698472173049}, {"start": 403, "end": 407, "word": "60 %", "entity_group": "LIMIT", "score": 0.955574854512417}, {"start": 434, "end": 439, "word": "canoe", "entity_group": "VAR", "score": 0.9996797345308666}, {"start": 445, "end": 453, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998979760240358}, {"start": 454, "end": 457, "word": "300", "entity_group": "LIMIT", "score": 0.9997219607875893}, {"start": 549, "end": 557, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9718555648728625}, {"start": 568, "end": 582, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9772681624389449}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBoatTrips = intvar(0, 999999999)  # Number of boat trips\nCanoeTrips = intvar(0, 999999999)  # Number of canoe trips\n\n# Constraints\nm = Model()\n\n# At most 12 boat trips:\nm += BoatTrips <= 12\n# At least 60% of the trips should be by canoe:\nm += CanoeTrips >= 0.6 * (BoatTrips + CanoeTrips)\n# At least 300 ducks need to be taken to shore:\nm += 10 * BoatTrips + 8 * CanoeTrips >= 300\n\n# Objective\n# Minimize the total amount of time needed to transport the ducks (20 minutes per boat trip, 40 minutes per canoe trip):\nm.minimize(20 * BoatTrips + 40 * CanoeTrips)\n"}}
{"1529148342": {"document": "A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?", "order_mapping": {"old": 0, "new vans": 1, "old van": 0, "new van": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of pollution", "terms": {"old van": "50", "new van": "30"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "5000", "terms": {"old van": "100", "new van": "80"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "30", "var": "new vans", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [50.0, 30.0], "constraints": [[-100.0, -80.0, -5000.0], [0.0, 1.0, 30.0]]}, "solution": {"x": 26, "y": 30}, "entities": [{"start": 72, "end": 75, "word": "old", "entity_group": "VAR", "score": 0.9996828739124879}, {"start": 80, "end": 88, "word": "new vans", "entity_group": "VAR", "score": 0.9999732874221202}, {"start": 94, "end": 101, "word": "old van", "entity_group": "VAR", "score": 0.9999773394704226}, {"start": 111, "end": 114, "word": "100", "entity_group": "PARAM", "score": 0.9994541922764901}, {"start": 115, "end": 127, "word": "soda bottles", "entity_group": "OBJ_NAME", "score": 0.9877905121285496}, {"start": 136, "end": 143, "word": "new van", "entity_group": "VAR", "score": 0.9998457966553516}, {"start": 153, "end": 155, "word": "80", "entity_group": "PARAM", "score": 0.9996209537102216}, {"start": 156, "end": 168, "word": "soda bottles", "entity_group": "OBJ_NAME", "score": 0.9897651842939665}, {"start": 174, "end": 181, "word": "old van", "entity_group": "VAR", "score": 0.9999674892452036}, {"start": 191, "end": 193, "word": "50", "entity_group": "PARAM", "score": 0.9997113480639654}, {"start": 203, "end": 212, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9916774497498841}, {"start": 221, "end": 228, "word": "new van", "entity_group": "VAR", "score": 0.9998689245038989}, {"start": 243, "end": 245, "word": "30", "entity_group": "PARAM", "score": 0.9996082886574283}, {"start": 255, "end": 264, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9983110188639664}, {"start": 293, "end": 301, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983771024726215}, {"start": 302, "end": 306, "word": "5000", "entity_group": "LIMIT", "score": 0.9992832264380804}, {"start": 331, "end": 338, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988131295148187}, {"start": 339, "end": 341, "word": "30", "entity_group": "LIMIT", "score": 0.9995580187742737}, {"start": 342, "end": 350, "word": "new vans", "entity_group": "VAR", "score": 0.9999695828302577}, {"start": 404, "end": 412, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9881891089450926}, {"start": 417, "end": 422, "word": "total", "entity_group": "OBJ_NAME", "score": 0.9740645095150571}, {"start": 423, "end": 442, "word": "amount of pollution", "entity_group": "OBJ_NAME", "score": 0.9436997965706595}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOldVans = intvar(0, 999999999)  # Number of old vans used\nNewVans = intvar(0, 999999999)  # Number of new vans used\n\n# Constraints\nm = Model()\n\n# At least 5000 bottles need to be sent:\nm += 100 * OldVans + 80 * NewVans >= 5000\n# At most 30 new vans can be used:\nm += NewVans <= 30\n\n# Objective\n# Minimize the total amount of pollution produced (50 units of pollution per old van, 30 units per new van):\nm.minimize(50 * OldVans + 30 * NewVans)\n"}}
{"-661636428": {"document": "A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?", "order_mapping": {"small teams": 0, "large teams": 1, "small team": 0, "large team": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of lawn", "terms": {"small team": "50", "large team": "80"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"small team": "3", "large team": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "small teams", "direction": "at least", "param": "3", "y_var": "large teams", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "6", "var": "large teams", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "small teams", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-50.0, -80.0], "constraints": [[3.0, 5.0, 150.0], [-1.0, 3.0, -0.0], [-0.0, -1.0, -6.0], [-1.0, -0.0, -10.0]]}, "solution": {"x": 40, "y": 6}, "entities": [{"start": 59, "end": 70, "word": "small teams", "entity_group": "VAR", "score": 0.9999820033849214}, {"start": 75, "end": 86, "word": "large teams", "entity_group": "VAR", "score": 0.9999794512752915}, {"start": 91, "end": 101, "word": "small team", "entity_group": "VAR", "score": 0.9999852447631574}, {"start": 111, "end": 112, "word": "3", "entity_group": "PARAM", "score": 0.999721901696696}, {"start": 135, "end": 137, "word": "50", "entity_group": "PARAM", "score": 0.9996846708603855}, {"start": 147, "end": 151, "word": "lawn", "entity_group": "OBJ_NAME", "score": 0.6557956916180419}, {"start": 156, "end": 166, "word": "large team", "entity_group": "VAR", "score": 0.9999748240020037}, {"start": 176, "end": 177, "word": "5", "entity_group": "PARAM", "score": 0.9997164537596783}, {"start": 200, "end": 202, "word": "80", "entity_group": "PARAM", "score": 0.9996851580588219}, {"start": 212, "end": 216, "word": "lawn", "entity_group": "OBJ_NAME", "score": 0.559439180137867}, {"start": 235, "end": 238, "word": "150", "entity_group": "LIMIT", "score": 0.9997159455642337}, {"start": 249, "end": 258, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990255627352623}, {"start": 328, "end": 339, "word": "small teams", "entity_group": "VAR", "score": 0.9999704893467956}, {"start": 348, "end": 356, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9958116424811853}, {"start": 357, "end": 358, "word": "3", "entity_group": "PARAM", "score": 0.9990995004441268}, {"start": 390, "end": 401, "word": "large teams", "entity_group": "VAR", "score": 0.9999486164894371}, {"start": 482, "end": 490, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987544240969767}, {"start": 491, "end": 492, "word": "6", "entity_group": "LIMIT", "score": 0.9995179361307891}, {"start": 493, "end": 504, "word": "large teams", "entity_group": "VAR", "score": 0.9999386693922896}, {"start": 509, "end": 517, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986838313670758}, {"start": 518, "end": 520, "word": "10", "entity_group": "LIMIT", "score": 0.9995165636696183}, {"start": 521, "end": 532, "word": "small teams", "entity_group": "VAR", "score": 0.999953655374679}, {"start": 580, "end": 588, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9958002521360468}, {"start": 593, "end": 607, "word": "amount of lawn", "entity_group": "OBJ_NAME", "score": 0.9881784923241173}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallTeams = intvar(0, 999999999)  # Number of small teams\nLargeTeams = intvar(0, 999999999)  # Number of large teams\n\n# Constraints\nm = Model()\n\n# The company has 150 employees available (3 employees per small team and 5 per large team):\nm += 3 * SmallTeams + 5 * LargeTeams <= 150\n# The number of small teams must be at least 3 times as much as the number of large teams:\nm += SmallTeams >= 3 * LargeTeams\n# There has to be at least 6 large teams:\nm += LargeTeams >= 6\n# There has to be at least 10 small teams:\nm += SmallTeams >= 10\n\n# Objective\n# Maximize the amount of lawn that can be mowed (50 sq ft per small team and 80 sq ft per large team):\nm.maximize(50 * SmallTeams + 80 * LargeTeams)\n"}}
{"1688548725": {"document": "An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.", "order_mapping": {"otters": 0, "dolphins": 1, "otter": 0, "dolphin": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of tricks", "terms": {"otter": "3", "dolphin": "1"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "10", "var": "dolphins", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "otters", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"otter": "3", "dolphin": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-3.0, -1.0], "constraints": [[-0.0, -1.0, -10.0], [0.7, -0.3, 0.0], [3.0, 5.0, 200.0]]}, "solution": {"x": 13, "y": 32}, "entities": [{"start": 29, "end": 35, "word": "otters", "entity_group": "VAR", "score": 0.9997144908015163}, {"start": 40, "end": 48, "word": "dolphins", "entity_group": "VAR", "score": 0.9997530669357645}, {"start": 54, "end": 59, "word": "otter", "entity_group": "VAR", "score": 0.9988367881536973}, {"start": 68, "end": 69, "word": "3", "entity_group": "PARAM", "score": 0.9995575220682722}, {"start": 70, "end": 76, "word": "tricks", "entity_group": "OBJ_NAME", "score": 0.9899112786846351}, {"start": 100, "end": 101, "word": "3", "entity_group": "PARAM", "score": 0.9994148634097699}, {"start": 122, "end": 129, "word": "dolphin", "entity_group": "VAR", "score": 0.9986523224994869}, {"start": 138, "end": 139, "word": "1", "entity_group": "PARAM", "score": 0.9995074798496079}, {"start": 140, "end": 145, "word": "trick", "entity_group": "OBJ_NAME", "score": 0.9857065568377648}, {"start": 169, "end": 170, "word": "5", "entity_group": "PARAM", "score": 0.999639764386491}, {"start": 195, "end": 203, "word": "dolphins", "entity_group": "VAR", "score": 0.9992784367418951}, {"start": 223, "end": 231, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989197755597738}, {"start": 232, "end": 234, "word": "10", "entity_group": "LIMIT", "score": 0.9996941745981562}, {"start": 235, "end": 243, "word": "dolphins", "entity_group": "VAR", "score": 0.999536834757148}, {"start": 261, "end": 268, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99828473913119}, {"start": 269, "end": 273, "word": "30 %", "entity_group": "LIMIT", "score": 0.9708109728118426}, {"start": 299, "end": 305, "word": "otters", "entity_group": "VAR", "score": 0.9996755966390545}, {"start": 333, "end": 336, "word": "200", "entity_group": "LIMIT", "score": 0.9996740803953522}, {"start": 344, "end": 353, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996401860665491}, {"start": 356, "end": 364, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9766988813358531}, {"start": 375, "end": 391, "word": "number of tricks", "entity_group": "OBJ_NAME", "score": 0.9841123691752222}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOtters = intvar(0, 999999999)  # Number of otters performing\nDolphins = intvar(0, 999999999)  # Number of dolphins performing\n\n# Constraints\nm = Model()\n\n# At least 10 dolphins must be used:\nm += Dolphins >= 10\n# At most 30% of the performers can be otters:\n# This means Otters <= 0.3 * (Otters + Dolphins)\n# Rearranging the above gives Otters <= 0.3 * Otters + 0.3 * Dolphins\n# Which simplifies to 0.7 * Otters <= 0.3 * Dolphins\n# Or Otters <= (3/7) * Dolphins\nm += Otters <= (3/7) * Dolphins\n# Only 200 treats are available (3 treats per otter, 5 treats per dolphin):\nm += 3 * Otters + 5 * Dolphins <= 200\n\n# Objective\n# Maximize the total number of tricks performed (3 tricks per otter, 1 trick per dolphin):\nm.maximize(3 * Otters + 1 * Dolphins)\n"}}
{"-1609306796": {"document": "A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used.  Find the minimum number of vans that can be used?", "order_mapping": {"vans": 0, "trucks": 1, "van": 0, "truck": 1}, "obj_declaration": {"type": "objvar", "direction": "minimum", "name": "number of vans", "vars": ["vans"]}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "2000", "terms": {"van": "50", "truck": "100"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "trucks", "direction": "cannot exceed", "y_var": "vans", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 0.0], "constraints": [[-50.0, -100.0, -2000.0], [-1.0, 1.0, 0.0]]}, "solution": {"x": 14, "y": 13}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVans = intvar(0, 999999999)  # Number of vans used\nTrucks = intvar(0, 999999999)  # Number of trucks used\n\n# Constraints\nm = Model()\n\n# The company must supply a minimum of 2000 pairs of shoes:\nm += 50 * Vans + 100 * Trucks >= 2000\n# The number of trucks used cannot exceed the number of vans used:\nm += Trucks <= Vans\n\n# Objective\n# Find the minimum number of vans that can be used:\nm.minimize(Vans)\n\n"}}
{"-1815549876": {"document": "An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.", "order_mapping": {"containers": 0, "trucks": 1, "container": 0, "truck": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of containers and trucks", "vars": ["containers", "trucks"]}, "const_declarations": [{"type": "xby", "x_var": "trucks", "direction": "at most", "param": "half", "y_var": "containers", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "2000", "terms": {"container": "30", "truck": "40"}, "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "containers", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-0.5, 1.0, 0.0], [-30.0, -40.0, -2000.0], [-1.0, -0.0, -15.0]]}, "solution": {"x": 40, "y": 20}, "entities": [{"start": 62, "end": 72, "word": "containers", "entity_group": "VAR", "score": 0.9995597386311089}, {"start": 77, "end": 83, "word": "trucks", "entity_group": "VAR", "score": 0.9997819181919695}, {"start": 88, "end": 97, "word": "container", "entity_group": "VAR", "score": 0.9995092741772283}, {"start": 107, "end": 109, "word": "30", "entity_group": "PARAM", "score": 0.999671471271011}, {"start": 131, "end": 136, "word": "truck", "entity_group": "VAR", "score": 0.9994818303969462}, {"start": 146, "end": 148, "word": "40", "entity_group": "PARAM", "score": 0.9992440821080152}, {"start": 211, "end": 217, "word": "trucks", "entity_group": "VAR", "score": 0.998034739373675}, {"start": 230, "end": 237, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9958088729967152}, {"start": 238, "end": 242, "word": "half", "entity_group": "PARAM", "score": 0.9933141340031808}, {"start": 257, "end": 267, "word": "containers", "entity_group": "VAR", "score": 0.9995077493032036}, {"start": 278, "end": 286, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993610119972506}, {"start": 287, "end": 291, "word": "2000", "entity_group": "LIMIT", "score": 0.9996954072254431}, {"start": 337, "end": 345, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989601746883786}, {"start": 346, "end": 348, "word": "15", "entity_group": "LIMIT", "score": 0.999729478099607}, {"start": 349, "end": 359, "word": "containers", "entity_group": "VAR", "score": 0.9991641670264962}, {"start": 378, "end": 386, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.8726222718928336}, {"start": 397, "end": 403, "word": "number", "entity_group": "OBJ_NAME", "score": 0.4268201126808615}, {"start": 407, "end": 417, "word": "containers", "entity_group": "VAR", "score": 0.9970194232079369}, {"start": 422, "end": 428, "word": "trucks", "entity_group": "VAR", "score": 0.9994879856092338}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nContainers = intvar(0, 999999999)  # Number of containers used\nTrucks = intvar(0, 999999999)  # Number of trucks used\n\n# Constraints\nm = Model()\n\n# The number of trucks used has to at most half the number of containers used:\nm += Trucks <= 0.5 * Containers\n# At least 2000 units of oil need to be sent to the port:\nm += 30 * Containers + 40 * Trucks >= 2000\n# At least 15 containers need to be used:\nm += Containers >= 15\n\n# Objective\n# Minimize the total number of containers and trucks needed:\nm.minimize(Containers + Trucks)\n"}}
{"-578452959": {"document": "A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students.  The school needs to provide transportation for at least 500 students.  In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?", "order_mapping": {"small buses": 0, "large buses": 1, "small bus": 0, "large bus": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of buses", "vars": ["small buses", "large buses"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "500", "terms": {"small bus": "20", "large bus": "50"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "maximum", "limit": "20%", "var": "large buses", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-20.0, -50.0, -500.0], [-0.2, 0.8, 0.0]]}, "solution": {"x": 16, "y": 4}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBuses = intvar(0, 999999999)  # Number of small buses hired\nLargeBuses = intvar(0, 999999999)  # Number of large buses hired\n\n# Constraints\nm = Model()\n\n# Transportation for at least 500 students:\nm += 20 * SmallBuses + 50 * LargeBuses >= 500\n# Maximum of 20% of the buses can be large buses:\n# This constraint implies that for every large bus, there must be at least 4 small buses (since 1 is 20% of 5, and the 5 represents 4 small buses + 1 large bus)\nm += LargeBuses <= 0.2 * (SmallBuses + LargeBuses)\n\n# Objective\n# Minimize the total number of buses:\nm.minimize(SmallBuses + LargeBuses)\n"}}
{"-806818884": {"document": "A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of $300 per trip. Each van can take 500 patties at a cost of $100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of $12500. How should they plan their shipment to minimize the total number of trips?", "order_mapping": {"trucks": 0, "vans": 1, "truck": 0, "van": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of trips", "vars": ["trucks", "vans"]}, "const_declarations": [{"type": "xy", "x_var": "trucks", "direction": "must not exceed", "y_var": "vans", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50000", "terms": {"truck": "1000", "van": "500"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "12500", "terms": {"truck": "300", "van": "100"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[1.0, -1.0, 0.0], [-1000.0, -500.0, -50000.0], [300.0, 100.0, 12500.0]]}, "solution": {"x": 25, "y": 50}, "entities": [{"start": 58, "end": 64, "word": "trucks", "entity_group": "VAR", "score": 0.999644078746993}, {"start": 69, "end": 73, "word": "vans", "entity_group": "VAR", "score": 0.9997234267876112}, {"start": 81, "end": 86, "word": "truck", "entity_group": "VAR", "score": 0.9991090662201898}, {"start": 96, "end": 100, "word": "1000", "entity_group": "PARAM", "score": 0.9996277953244191}, {"start": 101, "end": 108, "word": "patties", "entity_group": "OBJ_NAME", "score": 0.9394979185447558}, {"start": 114, "end": 118, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9743986596859867}, {"start": 124, "end": 127, "word": "300", "entity_group": "PARAM", "score": 0.999264407016268}, {"start": 144, "end": 147, "word": "van", "entity_group": "VAR", "score": 0.9986559346048111}, {"start": 157, "end": 160, "word": "500", "entity_group": "PARAM", "score": 0.9997413633104102}, {"start": 161, "end": 168, "word": "patties", "entity_group": "OBJ_NAME", "score": 0.9312002894957944}, {"start": 174, "end": 178, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9744011822372828}, {"start": 184, "end": 187, "word": "100", "entity_group": "PARAM", "score": 0.9988553936729537}, {"start": 211, "end": 217, "word": "trucks", "entity_group": "VAR", "score": 0.9994731262798545}, {"start": 276, "end": 282, "word": "trucks", "entity_group": "VAR", "score": 0.9964489810101292}, {"start": 283, "end": 298, "word": "must not exceed", "entity_group": "CONST_DIR", "score": 0.9807875402163819}, {"start": 313, "end": 317, "word": "vans", "entity_group": "VAR", "score": 0.9996037774028891}, {"start": 346, "end": 354, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986393285336091}, {"start": 355, "end": 360, "word": "50000", "entity_group": "LIMIT", "score": 0.9997222196820429}, {"start": 385, "end": 391, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9902765057256352}, {"start": 397, "end": 402, "word": "12500", "entity_group": "LIMIT", "score": 0.9986149553767878}, {"start": 444, "end": 452, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9956349205755601}, {"start": 457, "end": 478, "word": "total number of trips", "entity_group": "OBJ_NAME", "score": 0.9621457923463603}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrucks = intvar(0, 999999999)  # Number of trucks used for shipment\nVans = intvar(0, 999999999)  # Number of vans used for shipment\n\n# Constraints\nm = Model()\n\n# The number of trucks must not exceed the number of vans:\nm += Trucks <= Vans\n# The meat shop has to ship at least 50000 patties:\nm += 1000 * Trucks + 500 * Vans >= 50000\n# The meat shop has a budget of $12500:\nm += 300 * Trucks + 100 * Vans <= 12500\n\n# Objective\n# Minimize the total number of trips:\nm.minimize(Trucks + Vans)\n"}}
{"-682137487": {"document": "A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?", "order_mapping": {"small bouquets": 0, "large bouquets": 1, "small bouquet": 0, "large bouquet": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of flowers", "terms": {"small bouquet": "5", "large bouquet": "10"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "80", "var": "small bouquets", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "large bouquets", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "70", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "large bouquets", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "small bouquets", "direction": "at least", "param": "twice", "y_var": "large bouquets", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-5.0, -10.0], "constraints": [[1.0, 0.0, 80.0], [0.0, 1.0, 50.0], [1.0, 1.0, 70.0], [-0.0, -1.0, -20.0], [-1.0, 2.0, -0.0]]}, "solution": {"x": 47, "y": 23}, "entities": [{"start": 46, "end": 60, "word": "small bouquets", "entity_group": "VAR", "score": 0.9999604898402129}, {"start": 65, "end": 79, "word": "large bouquets", "entity_group": "VAR", "score": 0.9999741611305644}, {"start": 84, "end": 97, "word": "small bouquet", "entity_group": "VAR", "score": 0.9999854357733468}, {"start": 102, "end": 103, "word": "5", "entity_group": "PARAM", "score": 0.9997127537408458}, {"start": 104, "end": 111, "word": "flowers", "entity_group": "OBJ_NAME", "score": 0.9899885075833351}, {"start": 120, "end": 133, "word": "large bouquet", "entity_group": "VAR", "score": 0.999940327524473}, {"start": 138, "end": 140, "word": "10", "entity_group": "PARAM", "score": 0.9996897405017184}, {"start": 141, "end": 148, "word": "flowers", "entity_group": "OBJ_NAME", "score": 0.9987898587431986}, {"start": 177, "end": 184, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981151944344806}, {"start": 185, "end": 187, "word": "80", "entity_group": "LIMIT", "score": 0.9994587578633259}, {"start": 188, "end": 202, "word": "small bouquets", "entity_group": "VAR", "score": 0.9999531843548578}, {"start": 207, "end": 209, "word": "50", "entity_group": "LIMIT", "score": 0.9996067497963431}, {"start": 210, "end": 224, "word": "large bouquets", "entity_group": "VAR", "score": 0.999960468116618}, {"start": 255, "end": 262, "word": "at most", "entity_group": "CONST_DIR", "score": 0.99894009327406}, {"start": 263, "end": 265, "word": "70", "entity_group": "LIMIT", "score": 0.99975912286084}, {"start": 297, "end": 305, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984552314618197}, {"start": 306, "end": 308, "word": "20", "entity_group": "LIMIT", "score": 0.9995646491530352}, {"start": 309, "end": 323, "word": "large bouquets", "entity_group": "VAR", "score": 0.999970791881681}, {"start": 332, "end": 346, "word": "small bouquets", "entity_group": "VAR", "score": 0.9999819689704948}, {"start": 384, "end": 392, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980385396114113}, {"start": 393, "end": 398, "word": "twice", "entity_group": "PARAM", "score": 0.9953530894091361}, {"start": 407, "end": 421, "word": "small bouquets", "entity_group": "VAR", "score": 0.9999573054477595}, {"start": 425, "end": 439, "word": "large bouquets", "entity_group": "VAR", "score": 0.9999758674946152}, {"start": 490, "end": 498, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9990315681277461}, {"start": 509, "end": 526, "word": "number of flowers", "entity_group": "OBJ_NAME", "score": 0.9859542910213285}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBouquets = intvar(0, 999999999)  # Number of small bouquets transported\nLargeBouquets = intvar(0, 999999999)  # Number of large bouquets transported\n\n# Constraints\nm = Model()\n\n# At most 80 small bouquets can be transported:\nm += SmallBouquets <= 80\n# At most 50 large bouquets can be transported:\nm += LargeBouquets <= 50\n# In total, at most 70 bouquets can be transported:\nm += SmallBouquets + LargeBouquets <= 70\n# At least 20 large bouquets must be transported:\nm += LargeBouquets >= 20\n# At least twice as many small bouquets as large bouquets must be transported:\nm += SmallBouquets >= 2 * LargeBouquets\n\n# Objective\n# Maximize the total number of flowers that reach the stores (5 flowers in a small bouquet, 10 flowers in a large bouquet):\nm.maximize(5 * SmallBouquets + 10 * LargeBouquets)\n"}}
{"1725654106": {"document": "A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?", "order_mapping": {"new one": 0, "old one": 1, "new company": 0, "old company": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of diesel", "terms": {"new company": "30", "old company": "40"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1000", "terms": {"new company": "50", "old company": "70"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "15", "var": "new company", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "old company", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [30.0, 40.0], "constraints": [[-50.0, -70.0, -1000.0], [1.0, 0.0, 15.0], [0.4, -0.6, -0.0]]}, "solution": {"x": 2, "y": 13}, "entities": [{"start": 70, "end": 73, "word": "new", "entity_group": "VAR", "score": 0.9993299560417499}, {"start": 85, "end": 88, "word": "old", "entity_group": "VAR", "score": 0.9996568600569629}, {"start": 99, "end": 110, "word": "new company", "entity_group": "VAR", "score": 0.9999373231152383}, {"start": 123, "end": 125, "word": "50", "entity_group": "PARAM", "score": 0.9994803641501568}, {"start": 151, "end": 162, "word": "old company", "entity_group": "VAR", "score": 0.9999142616266048}, {"start": 175, "end": 177, "word": "70", "entity_group": "PARAM", "score": 0.9994714700972961}, {"start": 199, "end": 210, "word": "new company", "entity_group": "VAR", "score": 0.9999063466106973}, {"start": 216, "end": 218, "word": "30", "entity_group": "PARAM", "score": 0.999580182814461}, {"start": 229, "end": 235, "word": "diesel", "entity_group": "OBJ_NAME", "score": 0.9930169317788146}, {"start": 255, "end": 266, "word": "old company", "entity_group": "VAR", "score": 0.999944308568755}, {"start": 272, "end": 274, "word": "40", "entity_group": "PARAM", "score": 0.9995863233905026}, {"start": 285, "end": 291, "word": "diesel", "entity_group": "OBJ_NAME", "score": 0.9934309775025572}, {"start": 334, "end": 342, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981638038643731}, {"start": 343, "end": 347, "word": "1000", "entity_group": "LIMIT", "score": 0.9995776179658963}, {"start": 369, "end": 376, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984309104451798}, {"start": 377, "end": 379, "word": "15", "entity_group": "LIMIT", "score": 0.9997561869789744}, {"start": 398, "end": 409, "word": "new company", "entity_group": "VAR", "score": 0.9998768374931059}, {"start": 443, "end": 454, "word": "old company", "entity_group": "VAR", "score": 0.9999354101176223}, {"start": 485, "end": 493, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986271396126575}, {"start": 494, "end": 498, "word": "40 %", "entity_group": "LIMIT", "score": 0.8550692780428324}, {"start": 532, "end": 543, "word": "old company", "entity_group": "VAR", "score": 0.9998427021044838}, {"start": 589, "end": 597, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9963810483640952}, {"start": 608, "end": 624, "word": "amount of diesel", "entity_group": "OBJ_NAME", "score": 0.9682255541437325}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTripsNewCompany = intvar(0, 999999999)  # Number of trips made by the new company\nTripsOldCompany = intvar(0, 999999999)  # Number of trips made by the old company\n\n# Constraints\nm = Model()\n\n# The toy store needs to deliver at least 1000 gifts:\nm += 50 * TripsNewCompany + 70 * TripsOldCompany >= 1000\n# There can be at most 15 trips made by the new company:\nm += TripsNewCompany <= 15\n# At least 40% of all trips must be made by the old company:\nm += TripsOldCompany >= 0.4 * (TripsNewCompany + TripsOldCompany)\n\n# Objective\n# Minimize the total amount of diesel used (30 liters per trip by the new company, 40 liters per trip by the old company):\nm.minimize(30 * TripsNewCompany + 40 * TripsOldCompany)\n\n"}}
{"-1489352929": {"document": "A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?", "order_mapping": {"bus": 0, "car": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"bus": "30", "car": "15"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "10", "var": "bus", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "car", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "needs", "limit": "300", "terms": {"bus": "20", "car": "6"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [30.0, 15.0], "constraints": [[1.0, 0.0, 10.0], [0.6, -0.4, -0.0], [-20.0, -6.0, -300.0]]}, "solution": {"x": 10, "y": 17}, "entities": [{"start": 60, "end": 63, "word": "bus", "entity_group": "VAR", "score": 0.9986049561729711}, {"start": 70, "end": 73, "word": "car", "entity_group": "VAR", "score": 0.9993523421462552}, {"start": 78, "end": 81, "word": "bus", "entity_group": "VAR", "score": 0.9988134312059492}, {"start": 96, "end": 98, "word": "20", "entity_group": "PARAM", "score": 0.9996687155669517}, {"start": 126, "end": 128, "word": "30", "entity_group": "PARAM", "score": 0.9996722633452582}, {"start": 141, "end": 144, "word": "car", "entity_group": "VAR", "score": 0.9992732936537481}, {"start": 159, "end": 160, "word": "6", "entity_group": "PARAM", "score": 0.9996889637972988}, {"start": 188, "end": 190, "word": "15", "entity_group": "PARAM", "score": 0.9996202301599125}, {"start": 214, "end": 221, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984614761966528}, {"start": 222, "end": 224, "word": "10", "entity_group": "LIMIT", "score": 0.9994798590303972}, {"start": 225, "end": 228, "word": "bus", "entity_group": "VAR", "score": 0.9984810474461262}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989549149532096}, {"start": 330, "end": 334, "word": "60 %", "entity_group": "LIMIT", "score": 0.9754754569237735}, {"start": 361, "end": 364, "word": "car", "entity_group": "VAR", "score": 0.9996354580693655}, {"start": 378, "end": 386, "word": "needs to", "entity_group": "CONST_DIR", "score": 0.397196494360134}, {"start": 397, "end": 400, "word": "300", "entity_group": "LIMIT", "score": 0.9991257556096654}, {"start": 452, "end": 460, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986309631078256}, {"start": 471, "end": 475, "word": "time", "entity_group": "OBJ_NAME", "score": 0.9986052174015877}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBusTrips = intvar(0, 10)  # Number of bus trips (at most 10)\nCarTrips = intvar(0, 999999999)  # Number of car trips (unbounded)\n\n# Constraints\nm = Model()\n\n# At least 60% of the trips should be by car:\n# Let's first express the total number of trips as a variable for clarity\nTotalTrips = BusTrips + CarTrips\nm += CarTrips >= 0.6 * TotalTrips\n\n# The zoo needs to transport 300 monkeys:\nm += 20 * BusTrips + 6 * CarTrips >= 300\n\n# Objective\n# Minimize the total time required to transport the monkeys (30 minutes per bus trip, 15 minutes per car trip):\nm.minimize(30 * BusTrips + 15 * CarTrips)\n\n"}}
{"-1742967011": {"document": "A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?", "order_mapping": {"helicopters": 0, "trucks": 1, "helicopter": 0, "truck": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of pollution", "terms": {"helicopter": "5", "truck": "10"}}, "const_declarations": [{"type": "linear", "direction": "needs to transport", "limit": "80", "terms": {"helicopter": "3", "truck": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "8", "var": "truck", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [5.0, 10.0], "constraints": [[-3.0, -7.0, -80.0], [0.0, 1.0, 8.0]]}, "solution": {"x": 8, "y": 8}, "entities": [{"start": 57, "end": 68, "word": "helicopters", "entity_group": "VAR", "score": 0.9996769047445734}, {"start": 73, "end": 79, "word": "trucks", "entity_group": "VAR", "score": 0.9998256807068572}, {"start": 84, "end": 94, "word": "helicopter", "entity_group": "VAR", "score": 0.9996164150191897}, {"start": 104, "end": 105, "word": "3", "entity_group": "PARAM", "score": 0.9996911956315325}, {"start": 132, "end": 133, "word": "5", "entity_group": "PARAM", "score": 0.9996365248081307}, {"start": 143, "end": 152, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9988782541606337}, {"start": 157, "end": 162, "word": "truck", "entity_group": "VAR", "score": 0.999592451489874}, {"start": 172, "end": 173, "word": "7", "entity_group": "PARAM", "score": 0.9997020320714719}, {"start": 200, "end": 202, "word": "10", "entity_group": "PARAM", "score": 0.9994664563108938}, {"start": 212, "end": 221, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9979235785207978}, {"start": 235, "end": 240, "word": "needs", "entity_group": "CONST_DIR", "score": 0.8008095965508812}, {"start": 254, "end": 256, "word": "80", "entity_group": "LIMIT", "score": 0.999519266946289}, {"start": 295, "end": 302, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988057257039497}, {"start": 303, "end": 304, "word": "8", "entity_group": "LIMIT", "score": 0.999484907264442}, {"start": 305, "end": 310, "word": "truck", "entity_group": "VAR", "score": 0.9953783860228448}, {"start": 368, "end": 376, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9972845814773411}, {"start": 381, "end": 406, "word": "total amount of pollution", "entity_group": "OBJ_NAME", "score": 0.9580642611903506}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHelicopters = intvar(0, 999999999)  # Number of helicopter trips\nTrucks = intvar(0, 999999999)  # Number of truck trips\n\n# Constraints\nm = Model()\n\n# The farmer needs to transport 80 cows:\nm += 3 * Helicopters + 7 * Trucks >= 80\n# The farmer only has enough money for at most 8 truck trips:\nm += Trucks <= 8\n\n# Objective\n# Minimize the total amount of pollution produced (5 units per helicopter trip, 10 units per truck trip):\nm.minimize(5 * Helicopters + 10 * Trucks)\n"}}
{"-2015083686": {"document": "A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.", "order_mapping": {"small": 0, "large": 1, "small container": 0, "large container": 1, "small containers": 0, "large containers": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of sand", "terms": {"small container": "20", "large container": "50"}}, "const_declarations": [{"type": "xby", "x_var": "small containers", "direction": "must be", "param": "thrice", "y_var": "large containers", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "small containers", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "large containers", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "100", "terms": {"small container": "1", "large container": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-20.0, -50.0], "constraints": [[-1.0, 3.0, -0.0], [-1.0, -0.0, -5.0], [-0.0, -1.0, -3.0], [1.0, 3.0, 100.0]]}, "solution": {"x": 91, "y": 3}, "entities": [{"start": 48, "end": 53, "word": "small", "entity_group": "VAR", "score": 0.9997480172131752}, {"start": 58, "end": 74, "word": "large containers", "entity_group": "VAR", "score": 0.9999719499666911}, {"start": 79, "end": 94, "word": "small container", "entity_group": "VAR", "score": 0.9999849063510743}, {"start": 104, "end": 105, "word": "1", "entity_group": "PARAM", "score": 0.9994073417801979}, {"start": 136, "end": 138, "word": "20", "entity_group": "PARAM", "score": 0.9996896993401071}, {"start": 148, "end": 152, "word": "sand", "entity_group": "OBJ_NAME", "score": 0.7345047673425482}, {"start": 157, "end": 172, "word": "large container", "entity_group": "VAR", "score": 0.999974265104919}, {"start": 182, "end": 183, "word": "3", "entity_group": "PARAM", "score": 0.9995456130340884}, {"start": 214, "end": 216, "word": "50", "entity_group": "PARAM", "score": 0.9996480437905702}, {"start": 226, "end": 230, "word": "sand", "entity_group": "OBJ_NAME", "score": 0.749410468810576}, {"start": 282, "end": 298, "word": "small containers", "entity_group": "VAR", "score": 0.9999814481518511}, {"start": 312, "end": 318, "word": "thrice", "entity_group": "PARAM", "score": 0.9990104502310323}, {"start": 333, "end": 349, "word": "large containers", "entity_group": "VAR", "score": 0.9999540328640539}, {"start": 385, "end": 393, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986095910283384}, {"start": 394, "end": 395, "word": "5", "entity_group": "LIMIT", "score": 0.999519099411235}, {"start": 396, "end": 412, "word": "small containers", "entity_group": "VAR", "score": 0.9999682933210471}, {"start": 417, "end": 418, "word": "3", "entity_group": "LIMIT", "score": 0.9994580012693773}, {"start": 419, "end": 435, "word": "large containers", "entity_group": "VAR", "score": 0.9999821691670813}, {"start": 462, "end": 465, "word": "100", "entity_group": "LIMIT", "score": 0.9997442172318863}, {"start": 473, "end": 482, "word": "available", "entity_group": "CONST_DIR", "score": 0.9995491283254598}, {"start": 485, "end": 493, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9955894448422329}, {"start": 498, "end": 512, "word": "amount of sand", "entity_group": "OBJ_NAME", "score": 0.9908985922575064}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallContainers = intvar(0, 999999999)  # Number of small containers used\nLargeContainers = intvar(0, 999999999)  # Number of large containers used\n\n# Constraints\nm = Model()\n\n# The number of small containers used must be thrice the number of large containers used:\nm += SmallContainers == 3 * LargeContainers\n# There must be at least 5 small containers used:\nm += SmallContainers >= 5\n# There must be at least 3 large containers used:\nm += LargeContainers >= 3\n# The company has 100 people available (1 person to unload a small container, 3 people to unload a large container):\nm += 1 * SmallContainers + 3 * LargeContainers <= 100\n\n# Objective\n# Maximize the amount of sand that they can deliver (20 units of sand per small container, 50 units of sand per large container):\nm.maximize(20 * SmallContainers + 50 * LargeContainers)\n"}}
{"1678710144": {"document": "A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?", "order_mapping": {"electric bikes": 0, "scooters": 1, "bike": 0, "scooter": 1, "bikes": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of meals", "terms": {"bike": "8", "scooter": "5"}}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "30%", "var": "bikes", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "scooters", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "200", "terms": {"bike": "3", "scooter": "2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -5.0], "constraints": [[0.7, -0.3, 0.0], [-0.0, -1.0, -20.0], [3.0, 2.0, 200.0]]}, "solution": {"x": 26, "y": 61}, "entities": [{"start": 61, "end": 75, "word": "electric bikes", "entity_group": "VAR", "score": 0.9999695198327039}, {"start": 79, "end": 87, "word": "scooters", "entity_group": "VAR", "score": 0.9998104470205399}, {"start": 92, "end": 96, "word": "bike", "entity_group": "VAR", "score": 0.9996715744989526}, {"start": 106, "end": 107, "word": "8", "entity_group": "PARAM", "score": 0.9989930542868848}, {"start": 108, "end": 113, "word": "meals", "entity_group": "OBJ_NAME", "score": 0.9964635428120124}, {"start": 127, "end": 128, "word": "3", "entity_group": "PARAM", "score": 0.999680264225644}, {"start": 149, "end": 156, "word": "scooter", "entity_group": "VAR", "score": 0.9996525288192882}, {"start": 166, "end": 167, "word": "5", "entity_group": "PARAM", "score": 0.9993451955936341}, {"start": 168, "end": 173, "word": "meals", "entity_group": "OBJ_NAME", "score": 0.9964629707637145}, {"start": 187, "end": 188, "word": "2", "entity_group": "PARAM", "score": 0.9995570588674083}, {"start": 247, "end": 255, "word": "scooters", "entity_group": "VAR", "score": 0.9982282008788144}, {"start": 258, "end": 265, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989106045259631}, {"start": 266, "end": 270, "word": "30 %", "entity_group": "LIMIT", "score": 0.9741912946712055}, {"start": 303, "end": 308, "word": "bikes", "entity_group": "VAR", "score": 0.9995615885633246}, {"start": 313, "end": 321, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985608425132404}, {"start": 322, "end": 324, "word": "20", "entity_group": "LIMIT", "score": 0.9997098009634808}, {"start": 325, "end": 333, "word": "scooters", "entity_group": "VAR", "score": 0.9986491959134887}, {"start": 373, "end": 376, "word": "200", "entity_group": "LIMIT", "score": 0.9997206596260437}, {"start": 393, "end": 402, "word": "available", "entity_group": "CONST_DIR", "score": 0.9986372049528591}, {"start": 448, "end": 456, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9975791169840676}, {"start": 461, "end": 476, "word": "number of meals", "entity_group": "OBJ_NAME", "score": 0.9901413747816642}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBikes = intvar(0, 999999999)  # Number of electric bikes used\nScooters = intvar(0, 999999999)  # Number of scooters used\n\n# Constraints\nm = Model()\n\n# At most 30% of the electric vehicles can be bikes:\n# Let's first express the total number of vehicles as a variable for clarity\nTotalVehicles = Bikes + Scooters\nm += Bikes <= 0.3 * TotalVehicles\n\n# At least 20 scooters must be used:\nm += Scooters >= 20\n\n# Only 200 units of charge available (3 units per bike, 2 units per scooter):\nm += 3 * Bikes + 2 * Scooters <= 200\n\n# Objective\n# Maximize the number of meals delivered (8 meals per bike, 5 meals per scooter):\nm.maximize(8 * Bikes + 5 * Scooters)\n\n"}}
{"-1598952138": {"document": "A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.", "order_mapping": {"large": 0, "small": 1, "large plane": 0, "small plane": 1, "large planes": 0, "small planes": 1}, "obj_declaration": {"type": "objvar", "direction": "minimum", "name": "number of planes", "vars": ["large", "small"]}, "const_declarations": [{"type": "xy", "x_var": "large planes", "direction": "less than", "y_var": "small planes", "operator": "LESS"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"large plane": "30", "small plane": "10"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[1.0, -1.0, -1e-06], [-30.0, -10.0, -300.0]]}, "solution": {"x": 7, "y": 9}, "entities": [{"start": 39, "end": 44, "word": "large", "entity_group": "VAR", "score": 0.9925525474639507}, {"start": 49, "end": 61, "word": "small planes", "entity_group": "VAR", "score": 0.9999733291448188}, {"start": 66, "end": 77, "word": "large plane", "entity_group": "VAR", "score": 0.999978892807006}, {"start": 88, "end": 90, "word": "30", "entity_group": "PARAM", "score": 0.9997095096141435}, {"start": 91, "end": 95, "word": "cars", "entity_group": "OBJ_NAME", "score": 0.9876676275836582}, {"start": 104, "end": 115, "word": "small plane", "entity_group": "VAR", "score": 0.9999759478744343}, {"start": 126, "end": 128, "word": "10", "entity_group": "PARAM", "score": 0.9996938968614494}, {"start": 129, "end": 133, "word": "cars", "entity_group": "OBJ_NAME", "score": 0.9920104185793087}, {"start": 142, "end": 154, "word": "large planes", "entity_group": "VAR", "score": 0.9999800836932117}, {"start": 192, "end": 204, "word": "large planes", "entity_group": "VAR", "score": 0.9999755911333406}, {"start": 213, "end": 222, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9971802385816325}, {"start": 237, "end": 249, "word": "small planes", "entity_group": "VAR", "score": 0.9999648679035368}, {"start": 289, "end": 297, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988588578798487}, {"start": 298, "end": 301, "word": "300", "entity_group": "LIMIT", "score": 0.9996626563238383}, {"start": 318, "end": 325, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9820252216007375}, {"start": 326, "end": 342, "word": "number of planes", "entity_group": "OBJ_NAME", "score": 0.9826514174546364}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargePlanes = intvar(0, 999999999)  # Number of large planes\nSmallPlanes = intvar(0, 999999999)  # Number of small planes\n\n# Constraints\nm = Model()\n\n# The number of large planes must be less than the number of small planes:\nm += LargePlanes < SmallPlanes\n# The manufacturer wants to deliver at least 300 cars:\nm += 30 * LargePlanes + 10 * SmallPlanes >= 300\n\n# Objective\n# Minimize the total number of planes used:\nm.minimize(LargePlanes + SmallPlanes)\n"}}
{"-1533701072": {"document": "A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.", "order_mapping": {"small": 0, "large": 1, "small wagon": 0, "large wagon": 1, "small wagons": 0, "large wagons": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of wagons", "vars": ["small", "large"]}, "const_declarations": [{"type": "xby", "x_var": "small wagons", "direction": "at least", "param": "twice", "y_var": "large wagons", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "large wagons", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "need to taken", "limit": "2000", "terms": {"small wagon": "20", "large wagon": "50"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 2.0, -0.0], [-0.0, -1.0, -10.0], [-20.0, -50.0, -2000.0]]}, "solution": {"x": 45, "y": 22}, "entities": [{"start": 35, "end": 40, "word": "small", "entity_group": "VAR", "score": 0.99962984826215}, {"start": 45, "end": 57, "word": "large wagons", "entity_group": "VAR", "score": 0.9999680994936561}, {"start": 62, "end": 73, "word": "small wagon", "entity_group": "VAR", "score": 0.9999776532402351}, {"start": 79, "end": 81, "word": "20", "entity_group": "PARAM", "score": 0.9996689489302294}, {"start": 103, "end": 114, "word": "large wagon", "entity_group": "VAR", "score": 0.9999539881829667}, {"start": 121, "end": 123, "word": "50", "entity_group": "PARAM", "score": 0.9995675869860452}, {"start": 202, "end": 214, "word": "small wagons", "entity_group": "VAR", "score": 0.9999396152555899}, {"start": 223, "end": 231, "word": "at least", "entity_group": "CONST_DIR", "score": 0.995089544919849}, {"start": 232, "end": 237, "word": "twice", "entity_group": "PARAM", "score": 0.9968796422636655}, {"start": 263, "end": 275, "word": "large wagons", "entity_group": "VAR", "score": 0.9999547222885613}, {"start": 292, "end": 300, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987310358420688}, {"start": 301, "end": 303, "word": "10", "entity_group": "LIMIT", "score": 0.9995529985488999}, {"start": 304, "end": 316, "word": "large wagons", "entity_group": "VAR", "score": 0.9999720868247713}, {"start": 335, "end": 339, "word": "2000", "entity_group": "LIMIT", "score": 0.999648974962167}, {"start": 384, "end": 392, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9657717709594654}, {"start": 403, "end": 419, "word": "number of wagons", "entity_group": "OBJ_NAME", "score": 0.9822694980783722}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallWagons = intvar(0, 999999999)  # Number of small wagons\nLargeWagons = intvar(0, 999999999)  # Number of large wagons\n\n# Constraints\nm = Model()\n\n# The number of small wagons must be at least twice as much as the number of large wagons:\nm += SmallWagons >= 2 * LargeWagons\n# At least 10 large wagons must be used:\nm += LargeWagons >= 10\n# 2000 units of ore need to be taken to the surface:\nm += 20 * SmallWagons + 50 * LargeWagons >= 2000\n\n# Objective\n# Minimize the total number of wagons needed:\nm.minimize(SmallWagons + LargeWagons)\n"}}
{"1645157200": {"document": "A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.", "order_mapping": {"scooter": 0, "rickshaw": 1, "rickshaws": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of scooters", "vars": ["scooter"]}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "40%", "var": "rickshaws", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"scooter": "2", "rickshaw": "3"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 0.0], "constraints": [[-0.4, 0.6, 0.0], [-2.0, -3.0, -300.0]]}, "solution": {"x": 75, "y": 50}, "entities": [{"start": 63, "end": 70, "word": "scooter", "entity_group": "VAR", "score": 0.998854005908622}, {"start": 74, "end": 82, "word": "rickshaw", "entity_group": "VAR", "score": 0.9997583885785911}, {"start": 87, "end": 94, "word": "scooter", "entity_group": "VAR", "score": 0.9991659564964566}, {"start": 105, "end": 106, "word": "2", "entity_group": "PARAM", "score": 0.999635704067663}, {"start": 107, "end": 113, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9866513821742924}, {"start": 122, "end": 130, "word": "rickshaw", "entity_group": "VAR", "score": 0.9995095006287711}, {"start": 141, "end": 142, "word": "3", "entity_group": "PARAM", "score": 0.9995544863644856}, {"start": 143, "end": 149, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9981172315359225}, {"start": 183, "end": 190, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983690704189787}, {"start": 191, "end": 195, "word": "40 %", "entity_group": "LIMIT", "score": 0.9418799899386172}, {"start": 224, "end": 233, "word": "rickshaws", "entity_group": "VAR", "score": 0.9998165857815381}, {"start": 267, "end": 275, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988086801722111}, {"start": 276, "end": 279, "word": "300", "entity_group": "LIMIT", "score": 0.9996611205532964}, {"start": 291, "end": 299, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.980530300463015}, {"start": 310, "end": 319, "word": "number of", "entity_group": "OBJ_NAME", "score": 0.9774465739731907}, {"start": 320, "end": 328, "word": "scooters", "entity_group": "VAR", "score": 0.9959904870809755}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nScooter = intvar(0, 999999999)  # Number of scooters used\nRickshaw = intvar(0, 999999999)  # Number of rickshaws used\n\n# Constraints\nm = Model()\n\n# To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws:\nm += Rickshaw <= 0.4 * (Scooter + Rickshaw)\n# The park needs to transport at least 300 visitors:\nm += 2 * Scooter + 3 * Rickshaw >= 300\n\n# Objective\n# Minimize the total number of scooters used:\nm.minimize(Scooter)\n"}}
{"1798416293": {"document": "A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?", "order_mapping": {"camels": 0, "horses": 1, "camel": 0, "horse": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of animals", "vars": ["camels", "horses"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1000", "terms": {"camel": "50", "horse": "60"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "450", "terms": {"camel": "20", "horse": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "horses", "direction": "cannot exceed", "y_var": "camels", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -60.0, -1000.0], [20.0, 30.0, 450.0], [-1.0, 1.0, 0.0]]}, "solution": {"x": 12, "y": 7}, "entities": [{"start": 69, "end": 75, "word": "camels", "entity_group": "VAR", "score": 0.9996371417131508}, {"start": 80, "end": 86, "word": "horses", "entity_group": "VAR", "score": 0.9998195490402111}, {"start": 91, "end": 96, "word": "camel", "entity_group": "VAR", "score": 0.9995698782253398}, {"start": 107, "end": 109, "word": "50", "entity_group": "PARAM", "score": 0.9996569910195255}, {"start": 110, "end": 118, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.9902661029667422}, {"start": 127, "end": 132, "word": "horse", "entity_group": "VAR", "score": 0.9992355385387575}, {"start": 143, "end": 145, "word": "60", "entity_group": "PARAM", "score": 0.999634121136252}, {"start": 146, "end": 154, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.9989086461291985}, {"start": 159, "end": 164, "word": "camel", "entity_group": "VAR", "score": 0.9995856453502294}, {"start": 174, "end": 176, "word": "20", "entity_group": "PARAM", "score": 0.9996602309502179}, {"start": 199, "end": 204, "word": "horse", "entity_group": "VAR", "score": 0.9996729113791774}, {"start": 214, "end": 216, "word": "30", "entity_group": "PARAM", "score": 0.9994959307501352}, {"start": 262, "end": 270, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987763859250386}, {"start": 271, "end": 275, "word": "1000", "entity_group": "LIMIT", "score": 0.9995559341723947}, {"start": 299, "end": 302, "word": "450", "entity_group": "LIMIT", "score": 0.9997420955886328}, {"start": 317, "end": 326, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987147035070174}, {"start": 335, "end": 341, "word": "horses", "entity_group": "VAR", "score": 0.9994776316243554}, {"start": 396, "end": 402, "word": "horses", "entity_group": "VAR", "score": 0.9975563719236805}, {"start": 403, "end": 417, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.983556367139126}, {"start": 432, "end": 438, "word": "camels", "entity_group": "VAR", "score": 0.999482308127352}, {"start": 483, "end": 491, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9818055292998171}, {"start": 496, "end": 519, "word": "total number of animals", "entity_group": "OBJ_NAME", "score": 0.9621357780434959}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCamels = intvar(0, 999999999)  # Number of camels used\nHorses = intvar(0, 999999999)  # Number of horses used\n\n# Constraints\nm = Model()\n\n# At least 1000 packages need to be delivered:\nm += 50 * Camels + 60 * Horses >= 1000\n# Only 450 units of food are available:\nm += 20 * Camels + 30 * Horses <= 450\n# The number of horses cannot exceed the number of camels:\nm += Horses <= Camels\n\n# Objective\n# Minimize the total number of animals used:\nm.minimize(Camels + Horses)\n"}}
{"1133974368": {"document": "A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?", "order_mapping": {"small": 0, "large": 1, "small suitcase": 0, "large suitcase": 1, "small suitcases": 0, "large suitcases": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of snacks", "terms": {"small suitcase": "50", "large suitcase": "80"}}, "const_declarations": [{"type": "xby", "x_var": "small suitcases", "direction": "at least", "param": "twice", "y_var": "large suitcases", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "70", "var": "small suitcases", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "large suitcases", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "15", "var": "large suitcases", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "70", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-50.0, -80.0], "constraints": [[-1.0, 2.0, -0.0], [1.0, 0.0, 70.0], [0.0, 1.0, 50.0], [-0.0, -1.0, -15.0], [1.0, 1.0, 70.0]]}, "solution": {"x": 47, "y": 23}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallSuitcases = intvar(0, 999999999)  # Number of small suitcases used\nLargeSuitcases = intvar(0, 999999999)  # Number of large suitcases used\n\n# Constraints\nm = Model()\n\n# At least twice as many small suitcases must be used as large suitcases:\nm += SmallSuitcases >= 2 * LargeSuitcases\n# At most 70 small suitcases available:\nm += SmallSuitcases <= 70\n# At most 50 large suitcases available:\nm += LargeSuitcases <= 50\n# At least 15 large suitcases must be sent:\nm += LargeSuitcases >= 15\n# Can send at most 70 suitcases in total:\nm += SmallSuitcases + LargeSuitcases <= 70\n\n# Objective\n# Maximize the total number of snacks that can be delivered (50 snacks per small suitcase, 80 snacks per large suitcase):\nm.maximize(50 * SmallSuitcases + 80 * LargeSuitcases)\n"}}
{"686025796": {"document": "A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?", "order_mapping": {"regular": 0, "speed boats": 1, "regular boat": 0, "speed boat": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of gas", "terms": {"regular boat": "10", "speed boat": "20"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "20", "var": "regular boat", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "50%", "var": "speed boats", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "needs to deliver", "limit": "1000", "terms": {"regular boat": "20", "speed boat": "30"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [10.0, 20.0], "constraints": [[1.0, 0.0, 20.0], [0.5, -0.5, -0.0], [-20.0, -30.0, -1000.0]]}, "solution": {"x": 20, "y": 20}, "entities": [{"start": 62, "end": 69, "word": "regular", "entity_group": "VAR", "score": 0.9993362825934847}, {"start": 74, "end": 85, "word": "speed boats", "entity_group": "VAR", "score": 0.999983381832944}, {"start": 90, "end": 102, "word": "regular boat", "entity_group": "VAR", "score": 0.9999722066731477}, {"start": 113, "end": 115, "word": "20", "entity_group": "PARAM", "score": 0.9996540910393996}, {"start": 149, "end": 151, "word": "10", "entity_group": "PARAM", "score": 0.9996485361266685}, {"start": 162, "end": 165, "word": "gas", "entity_group": "OBJ_NAME", "score": 0.9954552404029225}, {"start": 170, "end": 180, "word": "speed boat", "entity_group": "VAR", "score": 0.999984853530904}, {"start": 191, "end": 193, "word": "30", "entity_group": "PARAM", "score": 0.999653153996132}, {"start": 227, "end": 229, "word": "20", "entity_group": "PARAM", "score": 0.9996053114607014}, {"start": 240, "end": 243, "word": "gas", "entity_group": "OBJ_NAME", "score": 0.9922193494167838}, {"start": 259, "end": 266, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988327528725551}, {"start": 267, "end": 269, "word": "20", "entity_group": "LIMIT", "score": 0.9995147042246221}, {"start": 270, "end": 282, "word": "regular boat", "entity_group": "VAR", "score": 0.9999894289353167}, {"start": 345, "end": 353, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986111081288672}, {"start": 354, "end": 358, "word": "50 %", "entity_group": "LIMIT", "score": 0.9838795481943954}, {"start": 388, "end": 399, "word": "speed boats", "entity_group": "VAR", "score": 0.9999871438172239}, {"start": 434, "end": 438, "word": "1000", "entity_group": "LIMIT", "score": 0.9995741303687272}, {"start": 497, "end": 505, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986688170518269}, {"start": 510, "end": 529, "word": "total amount of gas", "entity_group": "OBJ_NAME", "score": 0.9468326831035423}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularBoatTrips = intvar(0, 20)  # Number of regular boat trips (at most 20 trips)\nSpeedBoatTrips = intvar(0, 999999999)  # Number of speed boat trips\n\n# Constraints\nm = Model()\n\n# At least 50% of the trips must be made by speed boats:\n# This implies the number of speed boat trips must be at least equal to the number of regular boat trips\nm += SpeedBoatTrips >= RegularBoatTrips\n\n# Need to deliver 1000 pieces of mail:\nm += 20 * RegularBoatTrips + 30 * SpeedBoatTrips >= 1000\n\n# Objective\n# Minimize the total amount of gas consumed (10 liters per regular boat trip, 20 liters per speed boat trip):\nm.minimize(10 * RegularBoatTrips + 20 * SpeedBoatTrips)\n\n"}}
{"2137478401": {"document": "A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?", "order_mapping": {"bus": 0, "car": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"bus": "2", "car": "1.5"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "10", "var": "bus", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "car", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "needs to transport", "limit": "1200", "terms": {"bus": "100", "car": "40"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 1.5], "constraints": [[1.0, 0.0, 10.0], [0.6, -0.4, -0.0], [-100.0, -40.0, -1200.0]]}, "solution": {"x": 7, "y": 13}, "entities": [{"start": 80, "end": 83, "word": "bus", "entity_group": "VAR", "score": 0.9969991528715185}, {"start": 90, "end": 93, "word": "car", "entity_group": "VAR", "score": 0.9997084463493737}, {"start": 98, "end": 101, "word": "bus", "entity_group": "VAR", "score": 0.9990404878315611}, {"start": 111, "end": 114, "word": "100", "entity_group": "PARAM", "score": 0.9982023492773451}, {"start": 115, "end": 122, "word": "chicken", "entity_group": "OBJ_NAME", "score": 0.8875549167242327}, {"start": 133, "end": 134, "word": "2", "entity_group": "PARAM", "score": 0.9997124032936058}, {"start": 154, "end": 157, "word": "car", "entity_group": "VAR", "score": 0.9992336108838041}, {"start": 167, "end": 169, "word": "40", "entity_group": "PARAM", "score": 0.9983485445474988}, {"start": 188, "end": 191, "word": "1.5", "entity_group": "PARAM", "score": 0.9996800531160966}, {"start": 222, "end": 229, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991035854921501}, {"start": 230, "end": 232, "word": "10", "entity_group": "LIMIT", "score": 0.999546971311919}, {"start": 233, "end": 242, "word": "bus trips", "entity_group": "VAR", "score": 0.9997935401707749}, {"start": 247, "end": 255, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989817793886455}, {"start": 256, "end": 260, "word": "60 %", "entity_group": "LIMIT", "score": 0.963436884986676}, {"start": 285, "end": 288, "word": "car", "entity_group": "VAR", "score": 0.9995689044466948}, {"start": 324, "end": 328, "word": "1200", "entity_group": "LIMIT", "score": 0.9974183523391383}, {"start": 380, "end": 388, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986309682885316}, {"start": 393, "end": 403, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9947005932315008}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBusTrips = intvar(0, 10)  # Number of bus trips (at most 10)\nCarTrips = intvar(0, 999999999)  # Number of car trips (no upper limit specified)\n\n# Constraints\nm = Model()\n\n# Total chicken to be transported is 1200:\nm += 100 * BusTrips + 40 * CarTrips >= 1200\n# At least 60% of the trips must be by car:\n# Let's calculate the total number of trips first\nTotalTrips = BusTrips + CarTrips\n# Now, ensure that at least 60% of these are car trips\nm += CarTrips >= 0.6 * TotalTrips\n\n# Objective\n# Minimize the total time needed to transport the chicken (2 hours per bus trip, 1.5 hours per car trip):\nm.minimize(2 * BusTrips + 1.5 * CarTrips)\n\n"}}
{"1815576357": {"document": "Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?", "order_mapping": {"van": 0, "minibus": 1, "minibuses": 1, "vans": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of pollution", "terms": {"van": "7", "minibus": "10"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150", "terms": {"van": "6", "minibus": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "minibuses", "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "vans", "direction": "must exceed", "y_var": "minibuses", "operator": "GREATER"}], "canonical": {"objective": [7.0, 10.0], "constraints": [[-6.0, -10.0, -150.0], [0.0, 1.0, 10.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 10, "y": 9}, "entities": [{"start": 36, "end": 39, "word": "van", "entity_group": "VAR", "score": 0.9975521155870302}, {"start": 46, "end": 53, "word": "minibus", "entity_group": "VAR", "score": 0.9997272748041653}, {"start": 58, "end": 61, "word": "van", "entity_group": "VAR", "score": 0.9990462111120108}, {"start": 71, "end": 72, "word": "6", "entity_group": "PARAM", "score": 0.9991574255223397}, {"start": 91, "end": 92, "word": "7", "entity_group": "PARAM", "score": 0.9997293387039388}, {"start": 102, "end": 111, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9984432236138332}, {"start": 116, "end": 123, "word": "minibus", "entity_group": "VAR", "score": 0.9996406768452726}, {"start": 133, "end": 135, "word": "10", "entity_group": "PARAM", "score": 0.9994955803447109}, {"start": 154, "end": 156, "word": "10", "entity_group": "PARAM", "score": 0.9996188904828688}, {"start": 166, "end": 175, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9977636297884901}, {"start": 188, "end": 196, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987116062780158}, {"start": 197, "end": 200, "word": "150", "entity_group": "LIMIT", "score": 0.9997401231266457}, {"start": 236, "end": 243, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998552000175471}, {"start": 244, "end": 246, "word": "10", "entity_group": "LIMIT", "score": 0.9996907045529863}, {"start": 247, "end": 256, "word": "minibuses", "entity_group": "VAR", "score": 0.9982786675275481}, {"start": 299, "end": 303, "word": "vans", "entity_group": "VAR", "score": 0.9988760039991404}, {"start": 309, "end": 320, "word": "must exceed", "entity_group": "CONST_DIR", "score": 0.5792339982365551}, {"start": 335, "end": 344, "word": "minibuses", "entity_group": "VAR", "score": 0.9997005160215927}, {"start": 382, "end": 390, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9909820984694439}, {"start": 401, "end": 420, "word": "amount of pollution", "entity_group": "OBJ_NAME", "score": 0.9682452713234133}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVans = intvar(0, 999999999)  # Number of vans used\nMinibuses = intvar(0, 999999999)  # Number of minibuses used\n\n# Constraints\nm = Model()\n\n# At least 150 kids need to go to school:\nm += 6 * Vans + 10 * Minibuses >= 150\n# At most 10 minibuses can be used:\nm += Minibuses <= 10\n# The number of vans used must exceed the number of minibuses:\nm += Vans > Minibuses\n\n# Objective\n# Minimize the total amount of pollution produced (7 units per van, 10 units per minibus):\nm.minimize(7 * Vans + 10 * Minibuses)\n"}}
{"-1715698555": {"document": "A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?", "order_mapping": {"small": 0, "large bins": 1, "small bin": 0, "large bin": 1, "small bins": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of recycling material", "terms": {"small bin": "25", "large bin": "60"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "100", "terms": {"small bin": "2", "large bin": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "small bins", "direction": "must be", "param": "three", "y_var": "large bins", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "small bins", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "4", "var": "large bins", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-25.0, -60.0], "constraints": [[2.0, 5.0, 100.0], [-1.0, 3.0, -0.0], [-1.0, -0.0, -10.0], [-0.0, -1.0, -4.0]]}, "solution": {"x": 40, "y": 4}, "entities": [{"start": 64, "end": 69, "word": "small", "entity_group": "VAR", "score": 0.9997411381905387}, {"start": 74, "end": 84, "word": "large bins", "entity_group": "VAR", "score": 0.9999787602763949}, {"start": 89, "end": 98, "word": "small bin", "entity_group": "VAR", "score": 0.9999839613680962}, {"start": 108, "end": 109, "word": "2", "entity_group": "PARAM", "score": 0.9997066018243855}, {"start": 126, "end": 135, "word": "large bin", "entity_group": "VAR", "score": 0.9999623647962037}, {"start": 145, "end": 146, "word": "5", "entity_group": "PARAM", "score": 0.9996438055420731}, {"start": 159, "end": 168, "word": "small bin", "entity_group": "VAR", "score": 0.9999731501584369}, {"start": 178, "end": 180, "word": "25", "entity_group": "PARAM", "score": 0.9995395098049191}, {"start": 190, "end": 208, "word": "recycling material", "entity_group": "OBJ_NAME", "score": 0.9960457523455448}, {"start": 215, "end": 224, "word": "large bin", "entity_group": "VAR", "score": 0.9999225810079949}, {"start": 234, "end": 236, "word": "60", "entity_group": "PARAM", "score": 0.9996349410186247}, {"start": 246, "end": 264, "word": "recycling material", "entity_group": "OBJ_NAME", "score": 0.5418941911459171}, {"start": 283, "end": 292, "word": "available", "entity_group": "CONST_DIR", "score": 0.9974988055110187}, {"start": 293, "end": 296, "word": "100", "entity_group": "LIMIT", "score": 0.9994110881596235}, {"start": 358, "end": 368, "word": "small bins", "entity_group": "VAR", "score": 0.9999699020775544}, {"start": 377, "end": 388, "word": "three times", "entity_group": "PARAM", "score": 0.6704449391583442}, {"start": 403, "end": 413, "word": "large bins", "entity_group": "VAR", "score": 0.999958824628791}, {"start": 444, "end": 452, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984194844461893}, {"start": 453, "end": 455, "word": "10", "entity_group": "LIMIT", "score": 0.9994832647705917}, {"start": 456, "end": 466, "word": "small bins", "entity_group": "VAR", "score": 0.9999665178355872}, {"start": 471, "end": 472, "word": "4", "entity_group": "LIMIT", "score": 0.9995817697941056}, {"start": 473, "end": 483, "word": "large bins", "entity_group": "VAR", "score": 0.999973366667483}, {"start": 530, "end": 538, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9570277888165896}, {"start": 549, "end": 577, "word": "amount of recycling material", "entity_group": "OBJ_NAME", "score": 0.9831971543020583}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBins = intvar(0, 999999999)  # Number of small bins used\nLargeBins = intvar(0, 999999999)  # Number of large bins used\n\n# Constraints\nm = Model()\n\n# Workers required for small and large bins should not exceed 100:\nm += 2 * SmallBins + 5 * LargeBins <= 100\n# The number of small bins must be at least three times the number of large bins:\nm += SmallBins >= 3 * LargeBins\n# There must be at least 10 small bins:\nm += SmallBins >= 10\n# There must be at least 4 large bins:\nm += LargeBins >= 4\n\n# Objective\n# Maximize the total amount of recycling material that can be collected (25 units per small bin, 60 units per large bin):\nm.maximize(25 * SmallBins + 60 * LargeBins)\n"}}
{"-125243875": {"document": "A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?", "order_mapping": {"seasonal": 0, "full-time": 1, "seasonal volunteer": 0, "full-time volunteer": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of gifts", "terms": {"seasonal volunteer": "5", "full-time volunteer": "8"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "200", "terms": {"seasonal volunteer": "2", "full-time volunteer": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "maximum", "limit": "30%", "var": "seasonal", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "full-time", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-5.0, -8.0], "constraints": [[2.0, 5.0, 200.0], [0.7, -0.3, 0.0], [-0.0, -1.0, -10.0]]}, "solution": {"x": 14, "y": 34}, "entities": [{"start": 18, "end": 26, "word": "seasonal", "entity_group": "VAR", "score": 0.9962380302733201}, {"start": 31, "end": 53, "word": "full - time volunteers", "entity_group": "VAR", "score": 0.9989894835777485}, {"start": 86, "end": 92, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9621043884646592}, {"start": 109, "end": 127, "word": "seasonal volunteer", "entity_group": "VAR", "score": 0.9999611246025399}, {"start": 140, "end": 141, "word": "5", "entity_group": "PARAM", "score": 0.9994789342905213}, {"start": 142, "end": 147, "word": "gifts", "entity_group": "OBJ_NAME", "score": 0.9970430399096384}, {"start": 157, "end": 158, "word": "2", "entity_group": "PARAM", "score": 0.9996511429267636}, {"start": 159, "end": 165, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9763883789447235}, {"start": 170, "end": 191, "word": "full - time volunteer", "entity_group": "VAR", "score": 0.9992393682709148}, {"start": 204, "end": 205, "word": "8", "entity_group": "PARAM", "score": 0.9994991310649389}, {"start": 206, "end": 211, "word": "gifts", "entity_group": "OBJ_NAME", "score": 0.9875323722428647}, {"start": 221, "end": 222, "word": "5", "entity_group": "PARAM", "score": 0.9996929831179896}, {"start": 223, "end": 229, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9809510405752956}, {"start": 246, "end": 250, "word": "only", "entity_group": "CONST_DIR", "score": 0.9918474693054347}, {"start": 260, "end": 263, "word": "200", "entity_group": "LIMIT", "score": 0.9979603756958538}, {"start": 264, "end": 270, "word": "points", "entity_group": "OBJ_NAME", "score": 0.9500129288940382}, {"start": 289, "end": 296, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9964231541516742}, {"start": 300, "end": 304, "word": "30 %", "entity_group": "LIMIT", "score": 0.9734900543572577}, {"start": 330, "end": 338, "word": "seasonal", "entity_group": "VAR", "score": 0.9990346238369011}, {"start": 343, "end": 351, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976637104193652}, {"start": 352, "end": 354, "word": "10", "entity_group": "LIMIT", "score": 0.9996827205113082}, {"start": 363, "end": 374, "word": "full - time", "entity_group": "VAR", "score": 0.998827860166513}, {"start": 417, "end": 425, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.99849330110346}, {"start": 436, "end": 451, "word": "number of gifts", "entity_group": "OBJ_NAME", "score": 0.9842527602515916}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSeasonalVolunteers = intvar(0, 999999999)  # Number of seasonal volunteers\nFullTimeVolunteers = intvar(0, 999999999)  # Number of full-time volunteers\n\n# Constraints\nm = Model()\n\n# The store can only give out 200 points:\nm += 2 * SeasonalVolunteers + 5 * FullTimeVolunteers <= 200\n# A maximum of 30% of the volunteers can be seasonal:\nm += SeasonalVolunteers <= 0.3 * (SeasonalVolunteers + FullTimeVolunteers)\n# At least 10 must be full-time:\nm += FullTimeVolunteers >= 10\n\n# Objective\n# Maximize the total number of gifts delivered (5 gifts per seasonal volunteer, 8 gifts per full-time volunteer):\nm.maximize(5 * SeasonalVolunteers + 8 * FullTimeVolunteers)\n"}}
{"532983159": {"document": "A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.", "order_mapping": {"small": 0, "large": 1, "small jar": 0, "large jar": 1, "large jars": 1, "small jars": 0}, "obj_declaration": {"type": "objvar", "direction": "minimum", "name": "number of jars", "vars": ["small", "large"]}, "const_declarations": [{"type": "xy", "x_var": "large jars", "direction": "cannot exceed", "y_var": "small jars", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "100000", "terms": {"small jar": "50", "large jar": "200"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 1.0, 0.0], [-50.0, -200.0, -100000.0]]}, "solution": {"x": 400, "y": 400}, "entities": [{"start": 39, "end": 44, "word": "small", "entity_group": "VAR", "score": 0.9997121912868202}, {"start": 49, "end": 59, "word": "large jars", "entity_group": "VAR", "score": 0.9999768222586551}, {"start": 64, "end": 73, "word": "small jar", "entity_group": "VAR", "score": 0.9999761806921152}, {"start": 83, "end": 85, "word": "50", "entity_group": "PARAM", "score": 0.9996712715888756}, {"start": 104, "end": 113, "word": "large jar", "entity_group": "VAR", "score": 0.9998304261038302}, {"start": 123, "end": 126, "word": "200", "entity_group": "PARAM", "score": 0.999662171681954}, {"start": 195, "end": 205, "word": "large jars", "entity_group": "VAR", "score": 0.9999075541974797}, {"start": 206, "end": 220, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9912861933399824}, {"start": 235, "end": 245, "word": "small jars", "entity_group": "VAR", "score": 0.9999588658125501}, {"start": 277, "end": 285, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993209730425342}, {"start": 286, "end": 292, "word": "100000", "entity_group": "LIMIT", "score": 0.9993840592446913}, {"start": 314, "end": 321, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.99080828180925}, {"start": 322, "end": 336, "word": "number of jars", "entity_group": "OBJ_NAME", "score": 0.9829263038451906}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallJars = intvar(0, 999999999)  # Number of small jars\nLargeJars = intvar(0, 999999999)  # Number of large jars\n\n# Constraints\nm = Model()\n\n# The number of large jars cannot exceed the number of small jars:\nm += LargeJars <= SmallJars\n# The company wants to ship at least 100000 ml of jam:\nm += 50 * SmallJars + 200 * LargeJars >= 100000\n\n# Objective\n# Minimize the total number of jars used:\nm.minimize(SmallJars + LargeJars)\n"}}
{"-180744128": {"document": "A corn farmer sends his corn to the city by either tractor or car.  A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.", "order_mapping": {"tractor": 0, "car": 1, "cars": 1, "tractors": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of tractors and cars", "vars": ["tractor", "car"]}, "const_declarations": [{"type": "xby", "x_var": "cars", "direction": "at least", "param": "twice", "y_var": "tractors", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"tractor": "40", "car": "20"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[2.0, -1.0, -0.0], [-40.0, -20.0, -500.0]]}, "solution": {"x": 6, "y": 13}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTractors = intvar(0, 999999999)  # Number of tractors used\nCars = intvar(0, 999999999)  # Number of cars used\n\n# Constraints\nm = Model()\n\n# The number of cars used has to be at least twice the number of tractors used:\nm += Cars >= 2 * Tractors\n# At least 500 kg of corn need to be sent to the city:\nm += 40 * Tractors + 20 * Cars >= 500\n\n# Objective\n# Minimize the total number of tractors and cars needed:\nm.minimize(Tractors + Cars)\n"}}
{"-920049049": {"document": "A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?", "order_mapping": {"bike": 0, "car": 1, "cars": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of bikes", "vars": ["bike"]}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "40%", "var": "cars", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"bike": "3", "car": "5"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 0.0], "constraints": [[-0.4, 0.6, 0.0], [-3.0, -5.0, -500.0]]}, "solution": {"x": 80, "y": 52}, "entities": [{"start": 39, "end": 43, "word": "bike", "entity_group": "VAR", "score": 0.9993470860004023}, {"start": 48, "end": 51, "word": "car", "entity_group": "VAR", "score": 0.9963039408284351}, {"start": 84, "end": 88, "word": "bike", "entity_group": "VAR", "score": 0.9988278710898542}, {"start": 98, "end": 99, "word": "3", "entity_group": "PARAM", "score": 0.9997147318972307}, {"start": 115, "end": 118, "word": "car", "entity_group": "VAR", "score": 0.9989352698584942}, {"start": 128, "end": 129, "word": "5", "entity_group": "PARAM", "score": 0.9996241277781716}, {"start": 130, "end": 136, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9960367870010546}, {"start": 145, "end": 149, "word": "cars", "entity_group": "VAR", "score": 0.9990249691496362}, {"start": 171, "end": 178, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987792988805299}, {"start": 179, "end": 183, "word": "40 %", "entity_group": "LIMIT", "score": 0.9802021149959729}, {"start": 207, "end": 211, "word": "cars", "entity_group": "VAR", "score": 0.9996642789579733}, {"start": 248, "end": 256, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986183209951031}, {"start": 257, "end": 260, "word": "500", "entity_group": "LIMIT", "score": 0.9978812475902257}, {"start": 313, "end": 321, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9823669231554921}, {"start": 326, "end": 347, "word": "total number of bikes", "entity_group": "OBJ_NAME", "score": 0.9766949612640582}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBike = intvar(0, 999999999)  # Number of bikes used\nCar = intvar(0, 999999999)  # Number of cars used\n\n# Constraints\nm = Model()\n\n# At least 500 people need to be transported:\nm += 3 * Bike + 5 * Car >= 500\n# At most 40% of the vehicles can be cars:\n# Let's first express the total number of vehicles as Bike + Car\n# Then, we ensure that the number of cars is at most 40% of this total\nm += Car <= 0.4 * (Bike + Car)\n\n# Objective\n# Minimize the total number of bikes needed:\nm.minimize(Bike)\n"}}
{"-591967366": {"document": "An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs $1000. Each ultrawide truck can transport 6 tires per trip and costs $700. The company needs to transport at least 200 tires and has available $22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?", "order_mapping": {"cargo planes": 0, "ultrawide trucks": 1, "cargo plane": 0, "ultrawide truck": 1, "plane": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of trips", "vars": ["cargo planes", "ultrawide trucks"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "200", "terms": {"cargo plane": "10", "ultrawide truck": "6"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "22000", "terms": {"cargo plane": "1000", "ultrawide truck": "700"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "plane", "direction": "cannot exceed", "y_var": "ultrawide truck", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-10.0, -6.0, -200.0], [1000.0, 700.0, 22000.0], [1.0, -1.0, 0.0]]}, "solution": {"x": 11, "y": 15}, "entities": [{"start": 100, "end": 112, "word": "cargo planes", "entity_group": "VAR", "score": 0.9999679766413989}, {"start": 116, "end": 132, "word": "ultrawide trucks", "entity_group": "VAR", "score": 0.9999686586419989}, {"start": 140, "end": 151, "word": "cargo plane", "entity_group": "VAR", "score": 0.9999872957335353}, {"start": 166, "end": 168, "word": "10", "entity_group": "PARAM", "score": 0.9996252052432912}, {"start": 196, "end": 200, "word": "1000", "entity_group": "PARAM", "score": 0.9997211970518078}, {"start": 208, "end": 223, "word": "ultrawide truck", "entity_group": "VAR", "score": 0.9999771067964658}, {"start": 238, "end": 239, "word": "6", "entity_group": "PARAM", "score": 0.9996479517332791}, {"start": 267, "end": 270, "word": "700", "entity_group": "PARAM", "score": 0.99967538179791}, {"start": 304, "end": 312, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986916028657535}, {"start": 313, "end": 316, "word": "200", "entity_group": "LIMIT", "score": 0.9995983705019971}, {"start": 331, "end": 340, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993703533101691}, {"start": 343, "end": 348, "word": "22000", "entity_group": "LIMIT", "score": 0.9992446017190779}, {"start": 421, "end": 426, "word": "plane", "entity_group": "VAR", "score": 0.9994362055609775}, {"start": 433, "end": 447, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9917206633462643}, {"start": 462, "end": 477, "word": "ultrawide truck", "entity_group": "VAR", "score": 0.999982513572922}, {"start": 527, "end": 535, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.997691360165409}, {"start": 546, "end": 561, "word": "number of trips", "entity_group": "OBJ_NAME", "score": 0.9813984708914377}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCargoPlanes = intvar(0, 999999999)  # Number of cargo plane trips\nUltrawideTrucks = intvar(0, 999999999)  # Number of ultrawide truck trips\n\n# Constraints\nm = Model()\n\n# At least 200 tires need to be transported:\nm += 10 * CargoPlanes + 6 * UltrawideTrucks >= 200\n# The company has available $22000 for transportation:\nm += 1000 * CargoPlanes + 700 * UltrawideTrucks <= 22000\n# The number of plane trips cannot exceed the number of ultrawide truck trips:\nm += CargoPlanes <= UltrawideTrucks\n\n# Objective\n# Minimize the total number of trips:\nm.minimize(CargoPlanes + UltrawideTrucks)\n"}}
{"-1464324143": {"document": "A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?", "order_mapping": {"small": 0, "large": 1, "small keg": 0, "large keg": 1, "small kegs": 0, "large kegs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of glacial water", "terms": {"small keg": "40", "large keg": "100"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "30", "var": "small kegs", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "large kegs", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "small kegs", "direction": "at least", "param": "twice", "y_var": "large kegs", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "25", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "large", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-40.0, -100.0], "constraints": [[1.0, 0.0, 30.0], [0.0, 1.0, 10.0], [-1.0, 2.0, -0.0], [1.0, 1.0, 25.0], [-0.0, -1.0, -5.0]]}, "solution": {"x": 17, "y": 8}, "entities": [{"start": 75, "end": 80, "word": "small", "entity_group": "VAR", "score": 0.9997916793336287}, {"start": 84, "end": 94, "word": "large kegs", "entity_group": "VAR", "score": 0.9999581661398471}, {"start": 99, "end": 108, "word": "small keg", "entity_group": "VAR", "score": 0.9999291951531823}, {"start": 118, "end": 120, "word": "40", "entity_group": "PARAM", "score": 0.9996211026437178}, {"start": 131, "end": 136, "word": "water", "entity_group": "OBJ_NAME", "score": 0.9925156919716634}, {"start": 145, "end": 154, "word": "large keg", "entity_group": "VAR", "score": 0.9997105912095823}, {"start": 164, "end": 167, "word": "100", "entity_group": "PARAM", "score": 0.9995967961141966}, {"start": 178, "end": 183, "word": "water", "entity_group": "OBJ_NAME", "score": 0.9950055892749369}, {"start": 213, "end": 220, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9980527761850263}, {"start": 221, "end": 223, "word": "30", "entity_group": "LIMIT", "score": 0.9994800689129204}, {"start": 224, "end": 234, "word": "small kegs", "entity_group": "VAR", "score": 0.9998818445071506}, {"start": 239, "end": 241, "word": "10", "entity_group": "LIMIT", "score": 0.9995912216540975}, {"start": 242, "end": 252, "word": "large kegs", "entity_group": "VAR", "score": 0.9999182154809958}, {"start": 261, "end": 271, "word": "small kegs", "entity_group": "VAR", "score": 0.999943496465888}, {"start": 294, "end": 302, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9942185150812226}, {"start": 303, "end": 308, "word": "twice", "entity_group": "PARAM", "score": 0.9964056029735177}, {"start": 316, "end": 326, "word": "small kegs", "entity_group": "VAR", "score": 0.9999326547905836}, {"start": 345, "end": 355, "word": "large kegs", "entity_group": "VAR", "score": 0.9998845294652043}, {"start": 378, "end": 385, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986439791829255}, {"start": 386, "end": 388, "word": "25", "entity_group": "LIMIT", "score": 0.9997426415645221}, {"start": 404, "end": 412, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988860230592161}, {"start": 413, "end": 414, "word": "5", "entity_group": "LIMIT", "score": 0.999737161163404}, {"start": 428, "end": 433, "word": "large", "entity_group": "VAR", "score": 0.99971029126579}, {"start": 470, "end": 478, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.997659233113002}, {"start": 489, "end": 512, "word": "amount of glacial water", "entity_group": "OBJ_NAME", "score": 0.9814111357766904}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallKegs = intvar(0, 999999999)  # Number of small kegs used\nLargeKegs = intvar(0, 999999999)  # Number of large kegs used\n\n# Constraints\nm = Model()\n\n# At most 30 small kegs available:\nm += SmallKegs <= 30\n# At most 10 large kegs available:\nm += LargeKegs <= 10\n# At least twice as many small kegs must be used than large kegs:\nm += SmallKegs >= 2 * LargeKegs\n# At most 25 kegs total can be transported:\nm += SmallKegs + LargeKegs <= 25\n# At least 5 kegs must be large:\nm += LargeKegs >= 5\n\n# Objective\n# Maximize the total amount of glacial water transported (40 liters per small keg, 100 liters per large keg):\nm.maximize(40 * SmallKegs + 100 * LargeKegs)\n"}}
{"1476803282": {"document": "A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?", "order_mapping": {"submarine": 0, "boat": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of gas", "terms": {"submarine": "30", "boat": "25"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "6", "var": "submarine", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "50%", "var": "boat", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"submarine": "100", "boat": "80"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [30.0, 25.0], "constraints": [[1.0, 0.0, 6.0], [0.5, -0.5, -0.0], [-100.0, -80.0, -1000.0]]}, "solution": {"x": 2, "y": 10}, "entities": [{"start": 53, "end": 62, "word": "submarine", "entity_group": "VAR", "score": 0.9997101871799889}, {"start": 69, "end": 73, "word": "boat", "entity_group": "VAR", "score": 0.9997924627375896}, {"start": 78, "end": 87, "word": "submarine", "entity_group": "VAR", "score": 0.9996192166301187}, {"start": 98, "end": 101, "word": "100", "entity_group": "PARAM", "score": 0.9996940457351668}, {"start": 135, "end": 137, "word": "30", "entity_group": "PARAM", "score": 0.9996485435093787}, {"start": 148, "end": 151, "word": "gas", "entity_group": "OBJ_NAME", "score": 0.9975174009470001}, {"start": 156, "end": 160, "word": "boat", "entity_group": "VAR", "score": 0.9996655235559994}, {"start": 171, "end": 173, "word": "80", "entity_group": "PARAM", "score": 0.9996947308593572}, {"start": 207, "end": 209, "word": "25", "entity_group": "PARAM", "score": 0.9996053112438023}, {"start": 220, "end": 223, "word": "gas", "entity_group": "OBJ_NAME", "score": 0.9922193493915856}, {"start": 239, "end": 246, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987636288196431}, {"start": 247, "end": 248, "word": "6", "entity_group": "LIMIT", "score": 0.9994758704662504}, {"start": 249, "end": 258, "word": "submarine", "entity_group": "VAR", "score": 0.9993080080582524}, {"start": 271, "end": 278, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9980472627149118}, {"start": 282, "end": 286, "word": "50 %", "entity_group": "LIMIT", "score": 0.9544236508066095}, {"start": 311, "end": 315, "word": "boat", "entity_group": "VAR", "score": 0.9997505182902285}, {"start": 349, "end": 357, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992410716059953}, {"start": 358, "end": 362, "word": "1000", "entity_group": "LIMIT", "score": 0.9995750571521197}, {"start": 431, "end": 439, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.989922606302555}, {"start": 450, "end": 463, "word": "amount of gas", "entity_group": "OBJ_NAME", "score": 0.9270691303836471}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSubmarineTrips = intvar(0, 6)  # Number of submarine trips (at most 6)\nBoatTrips = intvar(0, 999999999)  # Number of boat trips (no upper limit specified)\n\n# Constraints\nm = Model()\n\n# At least 1000 pieces of mail need to be transported:\nm += 100 * SubmarineTrips + 80 * BoatTrips >= 1000\n# A minimum of 50% of the trips must be by boat:\n# This implies the number of boat trips must be at least equal to the number of submarine trips\n# Since the total number of trips is SubmarineTrips + BoatTrips, and at least 50% should be BoatTrips,\n# we can say BoatTrips >= (SubmarineTrips + BoatTrips) / 2\n# Simplifying, we get: 2*BoatTrips >= SubmarineTrips + BoatTrips => BoatTrips >= SubmarineTrips\nm += BoatTrips >= SubmarineTrips\n\n# Objective\n# Minimize the total amount of gas used (30 liters per submarine trip, 25 liters per boat trip):\nm.minimize(30 * SubmarineTrips + 25 * BoatTrips)\n\n"}}
{"1532977517": {"document": "The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?", "order_mapping": {"helicopter": 0, "car": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "time", "terms": {"helicopter": "40", "car": "30"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "5", "var": "helicopter", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "car", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"helicopter": "30", "car": "20"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [40.0, 30.0], "constraints": [[1.0, 0.0, 5.0], [0.6, -0.4, -0.0], [-30.0, -20.0, -300.0]]}, "solution": {"x": 4, "y": 9}, "entities": [{"start": 82, "end": 92, "word": "helicopter", "entity_group": "VAR", "score": 0.9984372526888344}, {"start": 96, "end": 99, "word": "car", "entity_group": "VAR", "score": 0.9996896078402638}, {"start": 104, "end": 114, "word": "helicopter", "entity_group": "VAR", "score": 0.99955515158278}, {"start": 124, "end": 126, "word": "30", "entity_group": "PARAM", "score": 0.9994519539229374}, {"start": 127, "end": 131, "word": "fish", "entity_group": "OBJ_NAME", "score": 0.982951933926389}, {"start": 151, "end": 153, "word": "40", "entity_group": "PARAM", "score": 0.9996036825037214}, {"start": 166, "end": 169, "word": "car", "entity_group": "VAR", "score": 0.999280193826727}, {"start": 179, "end": 181, "word": "20", "entity_group": "PARAM", "score": 0.9995128137852637}, {"start": 206, "end": 208, "word": "30", "entity_group": "PARAM", "score": 0.9994964046842096}, {"start": 225, "end": 241, "word": "helicopter trips", "entity_group": "VAR", "score": 0.999984408213429}, {"start": 271, "end": 278, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984578280655302}, {"start": 279, "end": 280, "word": "5", "entity_group": "LIMIT", "score": 0.999484378192371}, {"start": 281, "end": 297, "word": "helicopter trips", "entity_group": "VAR", "score": 0.9999507526744379}, {"start": 314, "end": 322, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982641332879545}, {"start": 323, "end": 327, "word": "60 %", "entity_group": "LIMIT", "score": 0.9482624709224381}, {"start": 354, "end": 357, "word": "car", "entity_group": "VAR", "score": 0.9991591301000714}, {"start": 363, "end": 371, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988387977075173}, {"start": 372, "end": 375, "word": "300", "entity_group": "LIMIT", "score": 0.9996754423687431}, {"start": 444, "end": 452, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986632964445424}, {"start": 457, "end": 467, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9937924433054659}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHelicopterTrips = intvar(0, 999999999)  # Number of helicopter trips\nCarTrips = intvar(0, 999999999)  # Number of car trips\n\n# Constraints\nm = Model()\n\n# There can be at most 5 helicopter trips:\nm += HelicopterTrips <= 5\n# At least 60% of the trips should be by car:\nm += CarTrips >= 0.6 * (CarTrips + HelicopterTrips)\n# At least 300 fish need to be transported:\nm += 30 * HelicopterTrips + 20 * CarTrips >= 300\n\n# Objective\n# Minimize the total time needed (40 minutes per helicopter trip, 30 minutes per car trip):\nm.minimize(40 * HelicopterTrips + 30 * CarTrips)\n"}}
{"1074978508": {"document": "A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?", "order_mapping": {"hot-air balloon": 0, "gondola lift": 1, "hot air balloon": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "pollution", "terms": {"hot air balloon": "10", "gondola lift": "15"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "10", "var": "hot-air balloon", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "70", "terms": {"hot air balloon": "4", "gondola lift": "6"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [10.0, 15.0], "constraints": [[1.0, 0.0, 10.0], [-4.0, -6.0, -70.0]]}, "solution": {"x": 1, "y": 11}, "entities": [{"start": 79, "end": 96, "word": "hot - air balloon", "entity_group": "VAR", "score": 0.9992879782583425}, {"start": 100, "end": 112, "word": "gondola lift", "entity_group": "VAR", "score": 0.9999748921234399}, {"start": 117, "end": 132, "word": "hot air balloon", "entity_group": "VAR", "score": 0.9937908445994195}, {"start": 143, "end": 144, "word": "4", "entity_group": "PARAM", "score": 0.9997100641442247}, {"start": 162, "end": 174, "word": "gondola lift", "entity_group": "VAR", "score": 0.9999724502267898}, {"start": 185, "end": 186, "word": "6", "entity_group": "PARAM", "score": 0.9996911088767332}, {"start": 203, "end": 218, "word": "hot air balloon", "entity_group": "VAR", "score": 0.9987147690395464}, {"start": 228, "end": 230, "word": "10", "entity_group": "PARAM", "score": 0.9996785294254248}, {"start": 240, "end": 249, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9829748536611569}, {"start": 261, "end": 273, "word": "gondola lift", "entity_group": "VAR", "score": 0.9999808504133734}, {"start": 283, "end": 285, "word": "15", "entity_group": "PARAM", "score": 0.9996482640747012}, {"start": 295, "end": 304, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9727474858486198}, {"start": 320, "end": 327, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987884835674146}, {"start": 328, "end": 330, "word": "10", "entity_group": "LIMIT", "score": 0.999556180981857}, {"start": 331, "end": 348, "word": "hot - air balloon", "entity_group": "VAR", "score": 0.999634105794226}, {"start": 359, "end": 367, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989365634961475}, {"start": 368, "end": 370, "word": "70", "entity_group": "LIMIT", "score": 0.9997344331212094}, {"start": 466, "end": 474, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9984220820604911}, {"start": 479, "end": 494, "word": "total pollution", "entity_group": "OBJ_NAME", "score": 0.9937250253405615}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHotAirBalloon = intvar(0, 999999999)  # Number of hot-air balloon rides\nGondolaLift = intvar(0, 999999999)  # Number of gondola lift rides\n\n# Constraints\nm = Model()\n\n# At most 10 hot-air balloon rides:\nm += HotAirBalloon <= 10\n# At least 70 visitors need to be transported:\nm += 4 * HotAirBalloon + 6 * GondolaLift >= 70\n\n# Objective\n# Minimize total pollution (10 units of pollution per hot-air balloon and 15 units per gondola lift):\nm.minimize(10 * HotAirBalloon + 15 * GondolaLift)\n"}}
{"-1587539848": {"document": "A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice.  The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?", "order_mapping": {"medium": 0, "large": 1, "medium sized cart": 0, "large sized cart": 1, "medium sized carts": 0, "large sized carts": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of rice", "terms": {"medium sized cart": "30", "large sized cart": "70"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "60", "terms": {"medium sized cart": "2", "large sized cart": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "medium sized carts", "direction": "must be", "param": "three", "y_var": "large sized carts", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "medium sized carts", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "large sized carts", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-30.0, -70.0], "constraints": [[2.0, 4.0, 60.0], [-1.0, 3.0, -0.0], [-1.0, -0.0, -5.0], [-0.0, -1.0, -5.0]]}, "solution": {"x": 18, "y": 6}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMediumCarts = intvar(0, 999999999)  # Number of medium sized carts\nLargeCarts = intvar(0, 999999999)  # Number of large sized carts\n\n# Constraints\nm = Model()\n\n# The factory has 60 horses available (2 horses for medium cart, 4 horses for large cart):\nm += 2 * MediumCarts + 4 * LargeCarts <= 60\n# The number of medium sized carts must be three times the number of large sized carts:\nm += MediumCarts == 3 * LargeCarts\n# There must be at least 5 medium sized carts:\nm += MediumCarts >= 5\n# There must be at least 5 large sized carts:\nm += LargeCarts >= 5\n\n# Objective\n# Maximize the amount of rice that can be transported (30 kg per medium cart, 70 kg per large cart):\nm.maximize(30 * MediumCarts + 70 * LargeCarts)\n"}}
{"119901001": {"document": "A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?", "order_mapping": {"labradors": 0, "golden retrievers": 1, "labrador": 0, "golden retriever": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of newspapers", "terms": {"labrador": "7", "golden retriever": "10"}}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "1500", "terms": {"labrador": "5", "golden retriever": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "golden retrievers", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "60%", "var": "labradors", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-7.0, -10.0], "constraints": [[5.0, 6.0, 1500.0], [-0.0, -1.0, -50.0], [0.4, -0.6, 0.0]]}, "solution": {"x": 0, "y": 250}, "entities": [{"start": 20, "end": 29, "word": "labradors", "entity_group": "VAR", "score": 0.9992453232720928}, {"start": 34, "end": 51, "word": "golden retrievers", "entity_group": "VAR", "score": 0.9999639021494232}, {"start": 63, "end": 72, "word": "newspaper", "entity_group": "OBJ_NAME", "score": 0.9990831736727759}, {"start": 77, "end": 85, "word": "labrador", "entity_group": "VAR", "score": 0.9996078406119904}, {"start": 98, "end": 99, "word": "7", "entity_group": "PARAM", "score": 0.9997082018489826}, {"start": 100, "end": 110, "word": "newspapers", "entity_group": "OBJ_NAME", "score": 0.9953556394843125}, {"start": 134, "end": 135, "word": "5", "entity_group": "PARAM", "score": 0.9994602038477279}, {"start": 170, "end": 186, "word": "golden retriever", "entity_group": "VAR", "score": 0.9999432726835575}, {"start": 199, "end": 201, "word": "10", "entity_group": "PARAM", "score": 0.9996167157648578}, {"start": 202, "end": 212, "word": "newspapers", "entity_group": "OBJ_NAME", "score": 0.997159006077867}, {"start": 236, "end": 237, "word": "6", "entity_group": "PARAM", "score": 0.9994601669547752}, {"start": 290, "end": 294, "word": "1500", "entity_group": "LIMIT", "score": 0.9991130551325947}, {"start": 313, "end": 322, "word": "available", "entity_group": "CONST_DIR", "score": 0.99891318756851}, {"start": 339, "end": 347, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989559846124568}, {"start": 348, "end": 350, "word": "50", "entity_group": "LIMIT", "score": 0.9995511065686433}, {"start": 351, "end": 368, "word": "golden retrievers", "entity_group": "VAR", "score": 0.9999806730210158}, {"start": 386, "end": 393, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986756290159554}, {"start": 394, "end": 398, "word": "60 %", "entity_group": "LIMIT", "score": 0.9731262312973713}, {"start": 418, "end": 427, "word": "labradors", "entity_group": "VAR", "score": 0.9997151302695274}, {"start": 469, "end": 477, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9978132457461834}, {"start": 482, "end": 502, "word": "number of newspapers", "entity_group": "OBJ_NAME", "score": 0.9901413756330629}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLabradors = intvar(0, 999999999)  # Number of labradors used\nGoldenRetrievers = intvar(0, 999999999)  # Number of golden retrievers used\n\n# Constraints\nm = Model()\n\n# The school only has 1500 small bone treats available:\nm += 5 * Labradors + 6 * GoldenRetrievers <= 1500\n# At least 50 golden retrievers must be used:\nm += GoldenRetrievers >= 50\n# At most 60% of the dogs can be labradors:\n# Let's calculate the total number of dogs as Labradors + GoldenRetrievers\n# And ensure that Labradors <= 0.6 * (Labradors + GoldenRetrievers)\nm += Labradors <= 0.6 * (Labradors + GoldenRetrievers)\n\n# Objective\n# Maximize the number of newspapers that can be delivered:\nm.maximize(7 * Labradors + 10 * GoldenRetrievers)\n\n"}}
{"2097908663": {"document": "A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used..", "order_mapping": {"cows": 0, "elephants": 1, "cow": 0, "elephant": 1}, "obj_declaration": {"type": "objvar", "direction": "minimum", "name": "number of animals", "vars": ["cows", "elephants"]}, "const_declarations": [{"type": "xy", "x_var": "elephant", "direction": "cannot exceed", "y_var": "cows", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "cows", "direction": "at most", "param": "twice", "y_var": "elephants", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"cow": "20", "elephant": "50"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 1.0, 0.0], [1.0, -2.0, 0.0], [-20.0, -50.0, -1000.0]]}, "solution": {"x": 15, "y": 14}, "entities": [{"start": 43, "end": 47, "word": "cows", "entity_group": "VAR", "score": 0.9968289833015875}, {"start": 52, "end": 61, "word": "elephants", "entity_group": "VAR", "score": 0.9994039864084552}, {"start": 82, "end": 85, "word": "cow", "entity_group": "VAR", "score": 0.9990220100426198}, {"start": 96, "end": 98, "word": "20", "entity_group": "PARAM", "score": 0.9996585882952816}, {"start": 99, "end": 105, "word": "bricks", "entity_group": "OBJ_NAME", "score": 0.9851899697605935}, {"start": 127, "end": 135, "word": "elephant", "entity_group": "VAR", "score": 0.9995500384540235}, {"start": 146, "end": 148, "word": "50", "entity_group": "PARAM", "score": 0.9996277315749239}, {"start": 149, "end": 155, "word": "bricks", "entity_group": "OBJ_NAME", "score": 0.9871919120182837}, {"start": 186, "end": 195, "word": "elephants", "entity_group": "VAR", "score": 0.999111418742755}, {"start": 236, "end": 244, "word": "elephant", "entity_group": "VAR", "score": 0.9967252880743861}, {"start": 245, "end": 259, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.9812513286595875}, {"start": 274, "end": 278, "word": "cows", "entity_group": "VAR", "score": 0.9993962482307029}, {"start": 308, "end": 315, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982180247053523}, {"start": 316, "end": 321, "word": "twice", "entity_group": "PARAM", "score": 0.9942574758020833}, {"start": 336, "end": 340, "word": "cows", "entity_group": "VAR", "score": 0.9996255774929494}, {"start": 344, "end": 353, "word": "elephants", "entity_group": "VAR", "score": 0.9997836022432164}, {"start": 390, "end": 398, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987997122464095}, {"start": 399, "end": 403, "word": "1000", "entity_group": "LIMIT", "score": 0.9996611037210104}, {"start": 422, "end": 429, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.921788247412925}, {"start": 450, "end": 454, "word": "cows", "entity_group": "VAR", "score": 0.9996743974150417}, {"start": 459, "end": 468, "word": "elephants", "entity_group": "VAR", "score": 0.9997547399336983}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCows = intvar(0, 999999999)  # Number of cows\nElephants = intvar(0, 999999999)  # Number of elephants\n\n# Constraints\nm = Model()\n\n# The number of elephants cannot exceed the number of cows:\nm += Elephants <= Cows\n# There can be at most twice the number of cows as elephants:\nm += Cows <= 2 * Elephants\n# The company needs to transport at least 1000 bricks:\nm += 20 * Cows + 50 * Elephants >= 1000\n\n# Objective\n# Minimize the total number of animals (cows and elephants):\nm.minimize(Cows + Elephants)\n\n"}}
{"-352305044": {"document": "A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.", "order_mapping": {"ferry": 0, "light rail": 1, "ferry trip": 0, "ferry trips": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of trips", "vars": ["ferry", "light rail"]}, "const_declarations": [{"type": "xby", "x_var": "light rail", "direction": "at least", "param": "4", "y_var": "ferry trips", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"ferry trip": "20", "light rail": "15"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[4.0, -1.0, -0.0], [-20.0, -15.0, -500.0]]}, "solution": {"x": 4, "y": 28}, "entities": [{"start": 60, "end": 65, "word": "ferry", "entity_group": "VAR", "score": 0.9990053795197106}, {"start": 69, "end": 79, "word": "light rail", "entity_group": "VAR", "score": 0.9999837413208733}, {"start": 87, "end": 97, "word": "ferry trip", "entity_group": "VAR", "score": 0.9999830122269024}, {"start": 107, "end": 109, "word": "20", "entity_group": "PARAM", "score": 0.9996740951551736}, {"start": 110, "end": 115, "word": "boxes", "entity_group": "OBJ_NAME", "score": 0.9649163920896037}, {"start": 135, "end": 150, "word": "light rail trip", "entity_group": "VAR", "score": 0.9994574896875622}, {"start": 160, "end": 162, "word": "15", "entity_group": "PARAM", "score": 0.999710427979965}, {"start": 185, "end": 196, "word": "ferry trips", "entity_group": "VAR", "score": 0.9999756932426761}, {"start": 222, "end": 237, "word": "light rail trip", "entity_group": "VAR", "score": 0.9997103613611432}, {"start": 248, "end": 256, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978095220730031}, {"start": 257, "end": 264, "word": "4 times", "entity_group": "PARAM", "score": 0.7865004495997565}, {"start": 279, "end": 290, "word": "ferry trips", "entity_group": "VAR", "score": 0.999958302048242}, {"start": 321, "end": 329, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992848658798101}, {"start": 330, "end": 333, "word": "500", "entity_group": "LIMIT", "score": 0.9991380756845654}, {"start": 350, "end": 358, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9716685300986772}, {"start": 369, "end": 375, "word": "number", "entity_group": "OBJ_NAME", "score": 0.42003488306674774}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFerryTrips = intvar(0, 999999999)  # Number of ferry trips\nLightRailTrips = intvar(0, 999999999)  # Number of light rail trips\n\n# Constraints\nm = Model()\n\n# The number of light rail trips has to be at least 4 times the number of ferry trips:\nm += LightRailTrips >= 4 * FerryTrips\n# The farmer wants to send at least 500 boxes of corn (20 boxes per ferry trip and 15 boxes per light rail trip):\nm += 20 * FerryTrips + 15 * LightRailTrips >= 500\n\n# Objective\n# Minimize the total number of trips of either type needed:\nm.minimize(FerryTrips + LightRailTrips)\n"}}
{"-355727939": {"document": "A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.", "order_mapping": {"taxis": 0, "company cars": 1, "taxi ride": 0, "company car ride": 1, "company car rides": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of taxi rides", "vars": ["taxis"]}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "60%", "var": "company car rides", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "company car rides", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"taxi ride": "2", "company car ride": "3"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 0.0], "constraints": [[-0.6, 0.4, 0.0], [-0.0, -1.0, -30.0], [-2.0, -3.0, -500.0]]}, "solution": {"x": 78, "y": 115}, "entities": [{"start": 53, "end": 58, "word": "taxis", "entity_group": "VAR", "score": 0.9992582587171688}, {"start": 62, "end": 74, "word": "company cars", "entity_group": "VAR", "score": 0.9999731592616172}, {"start": 82, "end": 91, "word": "taxi ride", "entity_group": "VAR", "score": 0.9998378178603927}, {"start": 101, "end": 102, "word": "2", "entity_group": "PARAM", "score": 0.999679034980359}, {"start": 124, "end": 140, "word": "company car ride", "entity_group": "VAR", "score": 0.998045633964301}, {"start": 150, "end": 151, "word": "3", "entity_group": "PARAM", "score": 0.9995658862560208}, {"start": 213, "end": 220, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998868585153153}, {"start": 221, "end": 225, "word": "60 %", "entity_group": "LIMIT", "score": 0.9799376330965739}, {"start": 246, "end": 263, "word": "company car rides", "entity_group": "VAR", "score": 0.996749022292935}, {"start": 292, "end": 300, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989494791298046}, {"start": 301, "end": 303, "word": "30", "entity_group": "LIMIT", "score": 0.9985248282281234}, {"start": 304, "end": 321, "word": "company car rides", "entity_group": "VAR", "score": 0.9963439074169932}, {"start": 358, "end": 366, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990262228546783}, {"start": 367, "end": 370, "word": "500", "entity_group": "LIMIT", "score": 0.9993685523860191}, {"start": 424, "end": 432, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9985449503561236}, {"start": 443, "end": 452, "word": "number of", "entity_group": "OBJ_NAME", "score": 0.9599022575611902}, {"start": 453, "end": 463, "word": "taxi rides", "entity_group": "VAR", "score": 0.9997871954919115}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTaxis = intvar(0, 999999999)  # Number of taxi rides\nCompanyCars = intvar(0, 999999999)  # Number of company car rides\n\n# Constraints\nm = Model()\n\n# At least 500 employees need to be transported:\nm += 2 * Taxis + 3 * CompanyCars >= 500\n# At least 30 company car rides:\nm += CompanyCars >= 30\n# At most 60% of the rides can be company car rides:\n# This constraint is equivalent to saying that the number of company car rides\n# should not exceed 60% of the total number of rides (Taxis + CompanyCars)\n# Therefore, CompanyCars <= 0.6 * (Taxis + CompanyCars)\n# Rearranging the terms gives: CompanyCars - 0.6 * CompanyCars <= 0.6 * Taxis\n# Simplifying gives: 0.4 * CompanyCars <= 0.6 * Taxis\n# Or equivalently: CompanyCars <= 1.5 * Taxis\nm += CompanyCars <= 1.5 * Taxis\n\n# Objective\n# Minimize the number of taxi rides:\nm.minimize(Taxis)\n\n"}}
{"-634192638": {"document": "A chemical company is transporting their hydrogen using two different methods, high pressure tube trailers and liquefied hydrogen tankers. The first method is a high-pressure tube trailer which can transport 50 cubic meters each per trip at a cost of $500. The second method is using liquefied hydrogen tankers which can transport 30 cubic meters each per trip at a cost of $200. The company needs to transport at least 1000 cubic meters of hydrogen and they have budget of $3750 available. In addition, the number of transports done by the high pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method. How many of each transportation method should they use to minimize the total number of trips?", "order_mapping": {"high pressure tube": 0, "liquefied hydrogen tankers": 1, "high-pressure tube": 0, "high pressure tube trailer": 0, "liquefied hydrogen tanker": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of trips", "vars": ["high pressure tube", "liquefied hydrogen tankers"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1000", "terms": {"high-pressure tube": "50", "liquefied hydrogen tankers": "30"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "3750", "terms": {"high-pressure tube": "500", "liquefied hydrogen tankers": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "high pressure tube trailer", "direction": "less than", "y_var": "liquefied hydrogen tanker", "operator": "LESS"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-50.0, -30.0, -1000.0], [500.0, 200.0, 3750.0], [1.0, -1.0, -1e-06]]}, "solution": null, "entities": [{"start": 80, "end": 107, "word": "high pressure tube trailers", "entity_group": "VAR", "score": 0.9992174022179885}, {"start": 112, "end": 138, "word": "liquefied hydrogen tankers", "entity_group": "VAR", "score": 0.9989508790017987}, {"start": 163, "end": 191, "word": "high - pressure tube trailer", "entity_group": "VAR", "score": 0.9987815731586881}, {"start": 212, "end": 214, "word": "50", "entity_group": "PARAM", "score": 0.99894178057559}, {"start": 247, "end": 251, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9314712248725575}, {"start": 257, "end": 260, "word": "500", "entity_group": "PARAM", "score": 0.9996562178891807}, {"start": 290, "end": 316, "word": "liquefied hydrogen tankers", "entity_group": "VAR", "score": 0.9986765462133538}, {"start": 337, "end": 339, "word": "30", "entity_group": "PARAM", "score": 0.998828610590511}, {"start": 372, "end": 376, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9019080119084956}, {"start": 382, "end": 385, "word": "200", "entity_group": "PARAM", "score": 0.9996786868617384}, {"start": 419, "end": 427, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985206752122303}, {"start": 428, "end": 432, "word": "1000", "entity_group": "LIMIT", "score": 0.9993540216725256}, {"start": 472, "end": 478, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9878757908388446}, {"start": 484, "end": 488, "word": "3750", "entity_group": "LIMIT", "score": 0.9971474866857203}, {"start": 489, "end": 498, "word": "available", "entity_group": "CONST_DIR", "score": 0.9948931497704145}, {"start": 519, "end": 528, "word": "number of", "entity_group": "OBJ_NAME", "score": 0.9777282092480128}, {"start": 552, "end": 585, "word": "high pressure tube trailer method", "entity_group": "VAR", "score": 0.9981066133370295}, {"start": 596, "end": 605, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9729661412849493}, {"start": 643, "end": 675, "word": "liquefied hydrogen tanker method", "entity_group": "VAR", "score": 0.9942165528731651}, {"start": 736, "end": 744, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9588737081420493}, {"start": 755, "end": 770, "word": "number of trips", "entity_group": "OBJ_NAME", "score": 0.982503185150065}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHighPressureTube = intvar(0, 999999999)  # Number of high-pressure tube trailer transports\nLiquefiedHydrogenTankers = intvar(0, 999999999)  # Number of liquefied hydrogen tanker transports\n\n# Constraints\nm = Model()\n\n# The company needs to transport at least 1000 cubic meters of hydrogen:\nm += 50 * HighPressureTube + 30 * LiquefiedHydrogenTankers >= 1000\n# They have a budget of $3750 available:\nm += 500 * HighPressureTube + 200 * LiquefiedHydrogenTankers <= 3750\n# The number of transports done by the high-pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method:\nm += HighPressureTube < LiquefiedHydrogenTankers\n\n# Objective\n# Minimize the total number of trips:\nm.minimize(HighPressureTube + LiquefiedHydrogenTankers)\n"}}
{"-1473799322": {"document": "A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500.  Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?", "order_mapping": {"small crates": 0, "large crates": 1, "small crate": 0, "large crate": 1, "smaller crates": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of grapes", "terms": {"small crate": "200", "large crate": "500"}}, "const_declarations": [{"type": "xby", "x_var": "small crates", "direction": "at least", "param": "3", "y_var": "large crates", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "100", "var": "small crates", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "50", "var": "large crates", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "60", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "large crates", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-200.0, -500.0], "constraints": [[-1.0, 3.0, -0.0], [1.0, 0.0, 100.0], [0.0, 1.0, 50.0], [1.0, 1.0, 60.0], [-0.0, -1.0, -10.0]]}, "solution": {"x": 45, "y": 15}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallCrates = intvar(0, 999999999)  # Number of small crates used\nLargeCrates = intvar(0, 999999999)  # Number of large crates used\n\n# Constraints\nm = Model()\n\n# At least 3 times as many small crates must be used than large crates:\nm += SmallCrates >= 3 * LargeCrates\n# At most 100 small crates available:\nm += SmallCrates <= 100\n# At most 50 large crates available:\nm += LargeCrates <= 50\n# Truck can take at most 60 crates total:\nm += SmallCrates + LargeCrates <= 60\n# At least 10 large crates must be used:\nm += LargeCrates >= 10\n\n# Objective\n# Maximize the total number of grapes transported (200 grapes per small crate, 500 grapes per large crate):\nm.maximize(200 * SmallCrates + 500 * LargeCrates)\n"}}
{"-1981528237": {"document": "A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?", "order_mapping": {"truck": 0, "car": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of gas", "terms": {"truck": "20", "car": "15"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "5", "var": "truck", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "car", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"truck": "50", "car": "30"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [20.0, 15.0], "constraints": [[1.0, 0.0, 5.0], [0.3, -0.7, -0.0], [-50.0, -30.0, -500.0]]}, "solution": {"x": 4, "y": 10}, "entities": [{"start": 56, "end": 61, "word": "truck", "entity_group": "VAR", "score": 0.9997089897354157}, {"start": 65, "end": 68, "word": "car", "entity_group": "VAR", "score": 0.9996401069122968}, {"start": 73, "end": 78, "word": "truck", "entity_group": "VAR", "score": 0.9994616305427033}, {"start": 93, "end": 95, "word": "50", "entity_group": "PARAM", "score": 0.999694106733247}, {"start": 96, "end": 104, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.986058818325055}, {"start": 122, "end": 125, "word": "car", "entity_group": "VAR", "score": 0.9992943880166184}, {"start": 140, "end": 142, "word": "30", "entity_group": "PARAM", "score": 0.9995483833849813}, {"start": 143, "end": 151, "word": "packages", "entity_group": "OBJ_NAME", "score": 0.9980853805465083}, {"start": 179, "end": 184, "word": "truck", "entity_group": "VAR", "score": 0.999405418966695}, {"start": 190, "end": 192, "word": "20", "entity_group": "PARAM", "score": 0.9994110313547054}, {"start": 203, "end": 206, "word": "gas", "entity_group": "OBJ_NAME", "score": 0.9508996161234777}, {"start": 224, "end": 227, "word": "car", "entity_group": "VAR", "score": 0.9989081433487454}, {"start": 233, "end": 235, "word": "15", "entity_group": "PARAM", "score": 0.9995754940859853}, {"start": 246, "end": 249, "word": "gas", "entity_group": "OBJ_NAME", "score": 0.9620381815605886}, {"start": 274, "end": 281, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989342133686847}, {"start": 282, "end": 283, "word": "5", "entity_group": "LIMIT", "score": 0.9995387140511778}, {"start": 284, "end": 289, "word": "truck", "entity_group": "VAR", "score": 0.9992178728647068}, {"start": 305, "end": 313, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990610456161215}, {"start": 314, "end": 318, "word": "30 %", "entity_group": "LIMIT", "score": 0.7165131464313657}, {"start": 352, "end": 355, "word": "car", "entity_group": "VAR", "score": 0.9994424309046908}, {"start": 389, "end": 397, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984445318761883}, {"start": 398, "end": 401, "word": "500", "entity_group": "LIMIT", "score": 0.9994965566874395}, {"start": 464, "end": 472, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9911124682757927}, {"start": 483, "end": 496, "word": "amount of gas", "entity_group": "OBJ_NAME", "score": 0.9579007475419857}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTruckTrips = intvar(0, 999999999)  # Number of truck trips\nCarTrips = intvar(0, 999999999)  # Number of car trips\n\n# Constraints\nm = Model()\n\n# At most 5 truck trips can be made:\nm += TruckTrips <= 5\n# At least 30% of all the trips must be made by car:\nm += CarTrips >= 0.3 * (TruckTrips + CarTrips)\n# The company needs to transport at least 500 packages:\nm += 50 * TruckTrips + 30 * CarTrips >= 500\n\n# Objective\n# Minimize the total amount of gas consumed (20 liters per truck trip, 15 liters per car trip):\nm.minimize(20 * TruckTrips + 15 * CarTrips)\n"}}
{"777636520": {"document": "There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?", "order_mapping": {"helicopter": 0, "bus": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"helicopter": "1", "bus": "3"}}, "const_declarations": [{"type": "linear", "direction": "At least", "limit": "120", "terms": {"helicopter": "5", "bus": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "30%", "var": "helicopter", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "10", "var": "bus", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 3.0], "constraints": [[-5.0, -8.0, -120.0], [-0.7, 0.3, -0.0], [0.0, 1.0, 10.0]]}, "solution": {"x": 24, "y": 0}, "entities": [{"start": 93, "end": 103, "word": "helicopter", "entity_group": "VAR", "score": 0.9996941941604425}, {"start": 107, "end": 110, "word": "bus", "entity_group": "VAR", "score": 0.9997756216026734}, {"start": 115, "end": 125, "word": "helicopter", "entity_group": "VAR", "score": 0.99950996798225}, {"start": 140, "end": 141, "word": "5", "entity_group": "PARAM", "score": 0.9996449528407815}, {"start": 142, "end": 150, "word": "patients", "entity_group": "OBJ_NAME", "score": 0.9759045072998388}, {"start": 170, "end": 171, "word": "1", "entity_group": "PARAM", "score": 0.9993357240177764}, {"start": 201, "end": 204, "word": "bus", "entity_group": "VAR", "score": 0.9995225926348491}, {"start": 219, "end": 220, "word": "8", "entity_group": "PARAM", "score": 0.9997230570350032}, {"start": 221, "end": 229, "word": "patients", "entity_group": "OBJ_NAME", "score": 0.9910209207937268}, {"start": 249, "end": 250, "word": "3", "entity_group": "PARAM", "score": 0.9996170689951048}, {"start": 259, "end": 267, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9980836393791356}, {"start": 268, "end": 271, "word": "120", "entity_group": "LIMIT", "score": 0.9997322772863091}, {"start": 308, "end": 316, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987534340514908}, {"start": 317, "end": 321, "word": "30 %", "entity_group": "LIMIT", "score": 0.9755225526404945}, {"start": 348, "end": 358, "word": "helicopter", "entity_group": "VAR", "score": 0.9995544788866976}, {"start": 388, "end": 395, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986607945496854}, {"start": 396, "end": 398, "word": "10", "entity_group": "LIMIT", "score": 0.9993136856209536}, {"start": 399, "end": 402, "word": "bus", "entity_group": "VAR", "score": 0.9994169972621858}, {"start": 447, "end": 455, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9959516169748657}, {"start": 466, "end": 470, "word": "time", "entity_group": "OBJ_NAME", "score": 0.5379202661902812}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHelicopterTrips = intvar(0, 10)  # Number of trips made by helicopter\nBusTrips = intvar(0, 10)  # Number of trips made by bus\n\n# Constraints\nm = Model()\n\n# Total number of patients transported should be at least 120:\nm += 5 * HelicopterTrips + 8 * BusTrips >= 120\n# At least 30% of the trips should be by helicopter:\nm += HelicopterTrips >= 0.3 * (HelicopterTrips + BusTrips)\n# There can be at most 10 bus trips:\nm += BusTrips <= 10\n\n# Objective\n# Minimize total time to transport the patients (1 hour per helicopter trip, 3 hours per bus trip):\nm.minimize(HelicopterTrips + 3 * BusTrips)\n"}}
{"-1499435338": {"document": "Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.", "order_mapping": {"car": 0, "bus": 1, "buses": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "pollution", "terms": {"car": "10", "bus": "30"}}, "const_declarations": [{"type": "linear", "direction": "At least", "limit": "300", "terms": {"car": "4", "bus": "20"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "4", "var": "buses", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [10.0, 30.0], "constraints": [[-4.0, -20.0, -300.0], [0.0, 1.0, 4.0]]}, "solution": {"x": 55, "y": 4}, "entities": [{"start": 29, "end": 32, "word": "car", "entity_group": "VAR", "score": 0.9991178855756823}, {"start": 73, "end": 76, "word": "bus", "entity_group": "VAR", "score": 0.9998096909246131}, {"start": 81, "end": 84, "word": "car", "entity_group": "VAR", "score": 0.9997087354829574}, {"start": 94, "end": 95, "word": "4", "entity_group": "PARAM", "score": 0.9994212914317212}, {"start": 119, "end": 121, "word": "10", "entity_group": "PARAM", "score": 0.9996577021280919}, {"start": 131, "end": 140, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9970871886531412}, {"start": 151, "end": 154, "word": "bus", "entity_group": "VAR", "score": 0.99948319676833}, {"start": 164, "end": 166, "word": "20", "entity_group": "PARAM", "score": 0.998532029244378}, {"start": 190, "end": 192, "word": "30", "entity_group": "PARAM", "score": 0.9997348485040932}, {"start": 202, "end": 211, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9921771933690833}, {"start": 214, "end": 222, "word": "At least", "entity_group": "CONST_DIR", "score": 0.9981904684982695}, {"start": 223, "end": 226, "word": "300", "entity_group": "LIMIT", "score": 0.9997872835649131}, {"start": 264, "end": 271, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986908670569097}, {"start": 272, "end": 273, "word": "4", "entity_group": "LIMIT", "score": 0.9997066519590465}, {"start": 274, "end": 279, "word": "buses", "entity_group": "VAR", "score": 0.9960671292604081}, {"start": 348, "end": 356, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9989267718298396}, {"start": 361, "end": 376, "word": "total pollution", "entity_group": "OBJ_NAME", "score": 0.9937250226187244}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCars = intvar(0, 999999999)  # Number of cars used\nBuses = intvar(0, 999999999)  # Number of buses used\n\n# Constraints\nm = Model()\n\n# At least 300 employees need to be transported:\nm += 4 * Cars + 20 * Buses >= 300\n# At most 4 buses can be used:\nm += Buses <= 4\n\n# Objective\n# Minimize the total pollution produced (10 units of pollution per car, 30 units of pollution per bus):\nm.minimize(10 * Cars + 30 * Buses)\n"}}
{"941255519": {"document": "A snow removal company removes snow from neighborhoods using small trucks and large trucks. A small truck requires 2 people to shovel the snow and can carry 30 units of snow. A large truck require 4 people to shovel the snow and car carry 50 units of snow. The company has available 30 people. In addition, because some neighbourhood don\u2019t allow big trucks, at least 10 trucks must be small. There must be at least 3 large trucks as well and the number of small trucks must be twice as much as the number of large trucks. How many of each truck should be used to maximize the total amount of snow that can be transported?", "order_mapping": {"small trucks": 0, "large trucks": 1, "small truck": 0, "large truck": 1, "small": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of snow", "terms": {"small truck": "30", "large truck": "50"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "30", "terms": {"small truck": "2", "large truck": "4"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "small", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "large trucks", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "small trucks", "direction": "must be", "param": "twice", "y_var": "large trucks", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-30.0, -50.0], "constraints": [[2.0, 4.0, 30.0], [-1.0, -0.0, -10.0], [-0.0, -1.0, -3.0], [-1.0, 2.0, -0.0]]}, "solution": null, "entities": [{"start": 61, "end": 73, "word": "small trucks", "entity_group": "VAR", "score": 0.9999255246962679}, {"start": 78, "end": 90, "word": "large trucks", "entity_group": "VAR", "score": 0.9999788290238592}, {"start": 95, "end": 106, "word": "small truck", "entity_group": "VAR", "score": 0.9999812679732731}, {"start": 116, "end": 117, "word": "2", "entity_group": "PARAM", "score": 0.9996745263198658}, {"start": 158, "end": 160, "word": "30", "entity_group": "PARAM", "score": 0.9997066729116652}, {"start": 170, "end": 174, "word": "snow", "entity_group": "OBJ_NAME", "score": 0.9980563447610125}, {"start": 179, "end": 190, "word": "large truck", "entity_group": "VAR", "score": 0.9999495848579331}, {"start": 199, "end": 200, "word": "4", "entity_group": "PARAM", "score": 0.9996245249227703}, {"start": 241, "end": 243, "word": "50", "entity_group": "PARAM", "score": 0.999611010900059}, {"start": 253, "end": 257, "word": "snow", "entity_group": "OBJ_NAME", "score": 0.9961163186168831}, {"start": 276, "end": 285, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993299025714439}, {"start": 286, "end": 288, "word": "30", "entity_group": "LIMIT", "score": 0.999183738556486}, {"start": 352, "end": 362, "word": "big trucks", "entity_group": "VAR", "score": 0.9998042028876081}, {"start": 365, "end": 373, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987917636454301}, {"start": 374, "end": 376, "word": "10", "entity_group": "LIMIT", "score": 0.999744409350655}, {"start": 392, "end": 397, "word": "small", "entity_group": "VAR", "score": 0.9997968538390407}, {"start": 414, "end": 422, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998699422286314}, {"start": 423, "end": 424, "word": "3", "entity_group": "LIMIT", "score": 0.9995178607999874}, {"start": 425, "end": 437, "word": "large trucks", "entity_group": "VAR", "score": 0.9996198074365448}, {"start": 464, "end": 476, "word": "small trucks", "entity_group": "VAR", "score": 0.9999320590422401}, {"start": 485, "end": 490, "word": "twice", "entity_group": "PARAM", "score": 0.997762878741239}, {"start": 516, "end": 528, "word": "large trucks", "entity_group": "VAR", "score": 0.9999410364333272}, {"start": 572, "end": 580, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.995614907635677}, {"start": 591, "end": 605, "word": "amount of snow", "entity_group": "OBJ_NAME", "score": 0.9780436754515286}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallTrucks = intvar(0, 999999999)  # Number of small trucks used\nLargeTrucks = intvar(0, 999999999)  # Number of large trucks used\n\n# Constraints\nm = Model()\n\n# The company has available 30 people (2 people required per small truck, 4 per large truck):\nm += 2 * SmallTrucks + 4 * LargeTrucks <= 30\n# At least 10 trucks must be small:\nm += SmallTrucks >= 10\n# There must be at least 3 large trucks:\nm += LargeTrucks >= 3\n# The number of small trucks must be twice as much as the number of large trucks:\nm += SmallTrucks >= 2 * LargeTrucks\n\n# Objective\n# Maximize the total amount of snow that can be transported (30 units per small truck, 50 units per large truck):\nm.maximize(30 * SmallTrucks + 50 * LargeTrucks)\n"}}
{"892143253": {"document": "A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service.  At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.", "order_mapping": {"carrier pigeons": 0, "owls": 1, "carrier pigeon": 0, "owl": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of letters", "terms": {"carrier pigeon": "two", "owl": "5"}}, "const_declarations": [{"type": "ratio", "direction": "At most", "limit": "40%", "var": "owls", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "only", "limit": "1000", "terms": {"carrier pigeon": "3", "owl": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "carrier pigeons", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-2.0, -5.0], "constraints": [[-0.4, 0.6, 0.0], [3.0, 5.0, 1000.0], [-1.0, -0.0, -20.0]]}, "solution": {"x": 158, "y": 105}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarrierPigeons = intvar(0, 999999999)  # Number of carrier pigeons used\nOwls = intvar(0, 999999999)  # Number of owls used\n\n# Constraints\nm = Model()\n\n# The school only has 1000 treats available:\nm += 3 * CarrierPigeons + 5 * Owls <= 1000\n# At least 20 carrier pigeons must be used:\nm += CarrierPigeons >= 20\n# At most 40% of the birds can be owls:\nm += Owls <= 0.4 * (CarrierPigeons + Owls)\n\n# Objective\n# Maximize the total number of letters that can be sent (2 letters per carrier pigeon, 5 letters per owl):\nm.maximize(2 * CarrierPigeons + 5 * Owls)\n\n"}}
{"-1807102910": {"document": "An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.", "order_mapping": {"large": 0, "small ships": 1, "large ship": 0, "small ship": 1, "large ships": 0}, "obj_declaration": {"type": "objvar", "direction": "minimum", "name": "number of ships", "vars": ["large", "small ships"]}, "const_declarations": [{"type": "xy", "x_var": "large ships", "direction": "cannot exceed", "y_var": "small ships", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "3000", "terms": {"large ship": "500", "small ship": "200"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[1.0, -1.0, 0.0], [-500.0, -200.0, -3000.0]]}, "solution": {"x": 4, "y": 5}, "entities": [{"start": 39, "end": 44, "word": "large", "entity_group": "VAR", "score": 0.9948424370387209}, {"start": 49, "end": 60, "word": "small ships", "entity_group": "VAR", "score": 0.9999823876592814}, {"start": 106, "end": 116, "word": "large ship", "entity_group": "VAR", "score": 0.9999632196218471}, {"start": 127, "end": 130, "word": "500", "entity_group": "PARAM", "score": 0.9997094723401843}, {"start": 131, "end": 141, "word": "containers", "entity_group": "OBJ_NAME", "score": 0.9876676275769605}, {"start": 150, "end": 160, "word": "small ship", "entity_group": "VAR", "score": 0.9999759479544713}, {"start": 171, "end": 174, "word": "200", "entity_group": "PARAM", "score": 0.9996844260451956}, {"start": 175, "end": 185, "word": "containers", "entity_group": "OBJ_NAME", "score": 0.9868664477771498}, {"start": 233, "end": 244, "word": "large ships", "entity_group": "VAR", "score": 0.9999182654120472}, {"start": 245, "end": 259, "word": "can not exceed", "entity_group": "CONST_DIR", "score": 0.990353976423246}, {"start": 274, "end": 285, "word": "small ships", "entity_group": "VAR", "score": 0.9999527217646975}, {"start": 340, "end": 348, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985864734450609}, {"start": 349, "end": 353, "word": "3000", "entity_group": "LIMIT", "score": 0.9996804315282122}, {"start": 376, "end": 383, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9820252216007375}, {"start": 384, "end": 399, "word": "number of ships", "entity_group": "OBJ_NAME", "score": 0.9826514174546364}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeShips = intvar(0, 999999999)  # Number of large ships\nSmallShips = intvar(0, 999999999)  # Number of small ships\n\n# Constraints\nm = Model()\n\n# The number of large ships cannot exceed the number of small ships:\nm += LargeShips <= SmallShips\n# The company needs to transport at least 3000 containers:\nm += 500 * LargeShips + 200 * SmallShips >= 3000\n\n# Objective\n# Minimize the total number of ships used:\nm.minimize(LargeShips + SmallShips)\n"}}
{"1137689014": {"document": "A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If  at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.", "order_mapping": {"small canoes": 0, "smaller diesel boats": 1, "canoe": 0, "small diesel boat": 1, "diesel boats": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of canoes and diesel boats", "vars": ["small canoes", "smaller diesel boats"]}, "const_declarations": [{"type": "xby", "x_var": "small canoes", "direction": "at least", "param": "3", "y_var": "diesel boats", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"canoe": "10", "small diesel boat": "15"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 3.0, -0.0], [-10.0, -15.0, -1000.0]]}, "solution": {"x": 67, "y": 22}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallCanoes = intvar(0, 999999999)  # Number of small canoes used\nDieselBoats = intvar(0, 999999999)  # Number of smaller diesel boats used\n\n# Constraints\nm = Model()\n\n# The number of small canoes used has to be at least 3 times as many as the number of diesel boats used:\nm += SmallCanoes >= 3 * DieselBoats\n# At least 1000 fish need to be transported to shore:\nm += 10 * SmallCanoes + 15 * DieselBoats >= 1000\n\n# Objective\n# Minimize the total number of canoes and diesel boats needed:\nm.minimize(SmallCanoes + DieselBoats)\n"}}
{"-717448510": {"document": "A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people.  They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?", "order_mapping": {"vans": 0, "cars": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of cars", "vars": ["cars"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "200", "terms": {"vans": "6", "cars": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "vans", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [0.0, 1.0], "constraints": [[-6.0, -3.0, -200.0], [0.7, -0.3, 0.0]]}, "solution": {"x": 15, "y": 37}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nVans = intvar(0, 999999999)  # Number of vans\nCars = intvar(0, 999999999)  # Number of cars\n\n# Constraints\nm = Model()\n\n# At least 200 voters need to be transported (6 people per van and 3 per car):\nm += 6 * Vans + 3 * Cars >= 200\n# At most 30% of the vehicles can be vans:\nm += Vans <= 0.30 * (Vans + Cars)\n\n# Objective\n# Minimize the total number of cars used:\nm.minimize(Cars)\n"}}
{"981967779": {"document": "A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs $6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?", "order_mapping": {"hamburgers": 0, "chicken wraps": 1, "hamburger": 0, "chicken wrap": 1}, "obj_declaration": {"type": "objective", "direction": "minimum", "name": "cost", "terms": {"hamburger": "6.5", "chicken wrap": "4"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "2200", "terms": {"hamburger": "800", "chicken wrap": "450"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"chicken wrap": "12", "hamburger": "19"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "70", "terms": {"chicken wrap": "10", "hamburger": "20"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [6.5, 4.0], "constraints": [[-800.0, -450.0, -2200.0], [-19.0, -12.0, -50.0], [-20.0, -10.0, -70.0]]}, "solution": {"x": 3, "y": 1}, "entities": [{"start": 34, "end": 44, "word": "hamburgers", "entity_group": "VAR", "score": 0.9988877477260614}, {"start": 49, "end": 62, "word": "chicken wraps", "entity_group": "VAR", "score": 0.9999818367175557}, {"start": 109, "end": 117, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988497185242183}, {"start": 118, "end": 122, "word": "2200", "entity_group": "LIMIT", "score": 0.9996990935392968}, {"start": 134, "end": 136, "word": "50", "entity_group": "LIMIT", "score": 0.9997203949114088}, {"start": 160, "end": 162, "word": "70", "entity_group": "LIMIT", "score": 0.999497687174321}, {"start": 184, "end": 193, "word": "hamburger", "entity_group": "VAR", "score": 0.9996595361277221}, {"start": 194, "end": 199, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9969729238953811}, {"start": 202, "end": 205, "word": "6.5", "entity_group": "PARAM", "score": 0.9996499027870254}, {"start": 219, "end": 222, "word": "800", "entity_group": "PARAM", "score": 0.9996271206749152}, {"start": 234, "end": 236, "word": "19", "entity_group": "PARAM", "score": 0.9997042578396653}, {"start": 260, "end": 262, "word": "20", "entity_group": "PARAM", "score": 0.9995643720980829}, {"start": 284, "end": 296, "word": "chicken wrap", "entity_group": "VAR", "score": 0.9999817046741736}, {"start": 297, "end": 302, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9995718339836883}, {"start": 305, "end": 306, "word": "4", "entity_group": "PARAM", "score": 0.999654511509439}, {"start": 320, "end": 323, "word": "450", "entity_group": "PARAM", "score": 0.9997150290456072}, {"start": 335, "end": 337, "word": "12", "entity_group": "PARAM", "score": 0.9997042476608861}, {"start": 361, "end": 363, "word": "10", "entity_group": "PARAM", "score": 0.9995544267258285}, {"start": 393, "end": 400, "word": "minimum", "entity_group": "OBJ_DIR", "score": 0.9812209937179348}, {"start": 401, "end": 405, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9978062316964227}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHamburgers = intvar(0, 999999999)  # Number of hamburgers\nChickenWraps = intvar(0, 999999999)  # Number of chicken wraps\n\n# Constraints\nm = Model()\n\n# Ensure workers get at least 2200 calories:\nm += 800 * Hamburgers + 450 * ChickenWraps >= 2200\n# Ensure workers get at least 50 grams of protein:\nm += 19 * Hamburgers + 12 * ChickenWraps >= 50\n# Ensure workers get at least 70 grams of carbs:\nm += 20 * Hamburgers + 10 * ChickenWraps >= 70\n\n# Objective\n# Minimize cost ($6.5 per hamburger, $4 per chicken wrap):\nm.minimize(6.5 * Hamburgers + 4 * ChickenWraps)\n"}}
{"1797952873": {"document": "A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is $150 and the profit per batch of pork ribs is $300, how many batches of each should be made to maximize profit?", "order_mapping": {"hams": 0, "pork ribs": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"hams": "150", "pork ribs": "300"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "4000", "terms": {"hams": "4", "pork ribs": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "4000", "terms": {"hams": "2.5", "pork ribs": "3.5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-150.0, -300.0], "constraints": [[4.0, 2.0, 4000.0], [2.5, 3.5, 4000.0]]}, "solution": {"x": 1, "y": 1142}, "entities": [{"start": 92, "end": 96, "word": "hams", "entity_group": "VAR", "score": 0.9975834902769967}, {"start": 101, "end": 110, "word": "pork ribs", "entity_group": "VAR", "score": 0.9999823123645507}, {"start": 137, "end": 141, "word": "hams", "entity_group": "VAR", "score": 0.9994498291107694}, {"start": 151, "end": 152, "word": "4", "entity_group": "PARAM", "score": 0.9996764551981161}, {"start": 182, "end": 185, "word": "2.5", "entity_group": "PARAM", "score": 0.9996626000836225}, {"start": 237, "end": 246, "word": "pork ribs", "entity_group": "VAR", "score": 0.9999667379665199}, {"start": 256, "end": 257, "word": "2", "entity_group": "PARAM", "score": 0.9995192310321537}, {"start": 287, "end": 290, "word": "3.5", "entity_group": "PARAM", "score": 0.9996623310706572}, {"start": 340, "end": 347, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9992240706952996}, {"start": 348, "end": 352, "word": "4000", "entity_group": "LIMIT", "score": 0.9997162336279886}, {"start": 377, "end": 383, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999926987101661}, {"start": 397, "end": 401, "word": "hams", "entity_group": "VAR", "score": 0.9994035598659999}, {"start": 407, "end": 410, "word": "150", "entity_group": "PARAM", "score": 0.9990145256819918}, {"start": 419, "end": 425, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998712678406783}, {"start": 439, "end": 448, "word": "pork ribs", "entity_group": "VAR", "score": 0.9999434018568207}, {"start": 454, "end": 457, "word": "300", "entity_group": "PARAM", "score": 0.9997391582712405}, {"start": 503, "end": 511, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996761844464789}, {"start": 512, "end": 518, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274907906502}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHams = intvar(0, 999999999)  # Number of batches of hams\nPorkRibs = intvar(0, 999999999)  # Number of batches of pork ribs\n\n# Constraints\nm = Model()\n\n# Meat slicer usage for hams and pork ribs should not exceed 4000 hours per year:\nm += 4 * Hams + 2 * PorkRibs <= 4000\n# Meat packer usage for hams and pork ribs should not exceed 4000 hours per year:\nm += 2.5 * Hams + 3.5 * PorkRibs <= 4000\n\n# Objective\n# Maximize profit ($150 per batch of hams and $300 per batch of pork ribs):\nm.maximize(150 * Hams + 300 * PorkRibs)\n"}}
{"465775172": {"document": "An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is $400 and the profit per stove is $260, how many of each should they sell in order to maximize profit?", "order_mapping": {"refrigerators": 0, "stoves": 1, "refrigerator": 0, "stove": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"stove": "260", "refrigerator": "400"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "20000", "terms": {"refrigerator": "60", "stove": "45"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "13000", "terms": {"refrigerator": "20", "stove": "25"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-400.0, -260.0], "constraints": [[60.0, 45.0, 20000.0], [20.0, 25.0, 13000.0]]}, "solution": {"x": 333, "y": 0}, "entities": [{"start": 40, "end": 53, "word": "refrigerators", "entity_group": "VAR", "score": 0.9995638446841065}, {"start": 58, "end": 64, "word": "stoves", "entity_group": "VAR", "score": 0.9998220854534042}, {"start": 72, "end": 84, "word": "refrigerator", "entity_group": "VAR", "score": 0.9996913196907928}, {"start": 91, "end": 93, "word": "60", "entity_group": "PARAM", "score": 0.9997155834030389}, {"start": 120, "end": 122, "word": "20", "entity_group": "PARAM", "score": 0.9995435920833113}, {"start": 152, "end": 157, "word": "stove", "entity_group": "VAR", "score": 0.9996672172102675}, {"start": 164, "end": 166, "word": "45", "entity_group": "PARAM", "score": 0.9996514858861771}, {"start": 193, "end": 195, "word": "25", "entity_group": "PARAM", "score": 0.999543500701315}, {"start": 236, "end": 245, "word": "available", "entity_group": "CONST_DIR", "score": 0.9996095434712611}, {"start": 246, "end": 251, "word": "20000", "entity_group": "LIMIT", "score": 0.9993353139669828}, {"start": 278, "end": 283, "word": "13000", "entity_group": "LIMIT", "score": 0.999556339951174}, {"start": 315, "end": 321, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997021274366723}, {"start": 326, "end": 338, "word": "refrigerator", "entity_group": "VAR", "score": 0.9995668019579116}, {"start": 344, "end": 347, "word": "400", "entity_group": "PARAM", "score": 0.9993478814005118}, {"start": 356, "end": 362, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465487}, {"start": 367, "end": 372, "word": "stove", "entity_group": "VAR", "score": 0.9990888329773535}, {"start": 378, "end": 381, "word": "260", "entity_group": "PARAM", "score": 0.9994707590399287}, {"start": 430, "end": 438, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9958649050866341}, {"start": 439, "end": 445, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999807261302688}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRefrigerators = intvar(0, 999999999)  # Number of refrigerators sold\nStoves = intvar(0, 999999999)  # Number of stoves sold\n\n# Constraints\nm = Model()\n\n# Mover time constraint (20000 minutes available):\nm += 60 * Refrigerators + 45 * Stoves <= 20000\n# Setup time constraint (13000 minutes available):\nm += 20 * Refrigerators + 25 * Stoves <= 13000\n\n# Objective\n# Maximize profit ($400 per refrigerator, $260 per stove):\nm.maximize(400 * Refrigerators + 260 * Stoves)\n"}}
{"587452310": {"document": "An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is $100 and the profit per drawer is $90, how many of each should the company make to maximize profit?", "order_mapping": {"desks": 0, "drawers": 1, "desk": 0, "drawer": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"desk": "100", "drawer": "90"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "4000", "terms": {"desk": "40", "drawer": "30"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"desk": "20", "drawer": "10"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-100.0, -90.0], "constraints": [[40.0, 30.0, 4000.0], [20.0, 10.0, 3500.0]]}, "solution": {"x": 1, "y": 132}, "entities": [{"start": 24, "end": 29, "word": "desks", "entity_group": "VAR", "score": 0.9996251114072836}, {"start": 34, "end": 41, "word": "drawers", "entity_group": "VAR", "score": 0.9997178194044022}, {"start": 49, "end": 53, "word": "desk", "entity_group": "VAR", "score": 0.9996491388936074}, {"start": 63, "end": 65, "word": "40", "entity_group": "PARAM", "score": 0.99971412293995}, {"start": 90, "end": 92, "word": "20", "entity_group": "PARAM", "score": 0.9996969933625288}, {"start": 119, "end": 125, "word": "drawer", "entity_group": "VAR", "score": 0.999546523162749}, {"start": 135, "end": 137, "word": "30", "entity_group": "PARAM", "score": 0.9996958349458106}, {"start": 162, "end": 164, "word": "10", "entity_group": "PARAM", "score": 0.9996128768274194}, {"start": 202, "end": 211, "word": "available", "entity_group": "CONST_DIR", "score": 0.9991584149233969}, {"start": 212, "end": 216, "word": "4000", "entity_group": "LIMIT", "score": 0.999422598494807}, {"start": 242, "end": 246, "word": "3500", "entity_group": "LIMIT", "score": 0.999588494703054}, {"start": 276, "end": 282, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998609784232697}, {"start": 287, "end": 291, "word": "desk", "entity_group": "VAR", "score": 0.9996157051097316}, {"start": 297, "end": 300, "word": "100", "entity_group": "PARAM", "score": 0.9993478814005067}, {"start": 309, "end": 315, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998688937465451}, {"start": 320, "end": 326, "word": "drawer", "entity_group": "VAR", "score": 0.99908883297735}, {"start": 332, "end": 334, "word": "90", "entity_group": "PARAM", "score": 0.9994707412182511}, {"start": 381, "end": 389, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 390, "end": 396, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDesks = intvar(0, 999999999)  # Number of desks made\nDrawers = intvar(0, 999999999)  # Number of drawers made\n\n# Constraints\nm = Model()\n\n# Assembly time constraint (4000 minutes available):\nm += 40 * Desks + 30 * Drawers <= 4000\n# Sanding time constraint (3500 minutes available):\nm += 20 * Desks + 10 * Drawers <= 3500\n\n# Objective\n# Maximize profit ($100 per desk and $90 per drawer):\nm.maximize(100 * Desks + 90 * Drawers)\n"}}
{"1146360292": {"document": "A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is $7.5 and the profit from each bottle of matcha milk tea sold is $5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?", "order_mapping": {"black milk tea": 0, "matcha milk tea": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"matcha milk tea": "5", "black milk tea": "7.5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "30000", "terms": {"black milk tea": "600", "matcha milk tea": "525"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "500", "terms": {"black milk tea": "10", "matcha milk tea": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-7.5, -5.0], "constraints": [[600.0, 525.0, 30000.0], [10.0, 5.0, 500.0]]}, "solution": {"x": 50, "y": 0}, "entities": [{"start": 67, "end": 81, "word": "black milk tea", "entity_group": "VAR", "score": 0.9985949771694915}, {"start": 86, "end": 101, "word": "matcha milk tea", "entity_group": "VAR", "score": 0.9977381530294771}, {"start": 152, "end": 166, "word": "black milk tea", "entity_group": "VAR", "score": 0.9984074442463843}, {"start": 176, "end": 179, "word": "600", "entity_group": "PARAM", "score": 0.9997250130409916}, {"start": 198, "end": 200, "word": "10", "entity_group": "PARAM", "score": 0.9996910673219799}, {"start": 238, "end": 253, "word": "matcha milk tea", "entity_group": "VAR", "score": 0.9991057460431632}, {"start": 263, "end": 266, "word": "525", "entity_group": "PARAM", "score": 0.9997253562444008}, {"start": 285, "end": 286, "word": "5", "entity_group": "PARAM", "score": 0.9997096236345638}, {"start": 308, "end": 314, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998662237223553}, {"start": 335, "end": 349, "word": "black milk tea", "entity_group": "VAR", "score": 0.9976276919661586}, {"start": 360, "end": 363, "word": "7.5", "entity_group": "PARAM", "score": 0.9983867182161493}, {"start": 372, "end": 378, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999406045355034}, {"start": 399, "end": 414, "word": "matcha milk tea", "entity_group": "VAR", "score": 0.9986805474356095}, {"start": 425, "end": 426, "word": "5", "entity_group": "PARAM", "score": 0.9990921581919272}, {"start": 473, "end": 488, "word": "available stock", "entity_group": "CONST_DIR", "score": 0.9680672153810811}, {"start": 492, "end": 497, "word": "30000", "entity_group": "LIMIT", "score": 0.9997474977171826}, {"start": 516, "end": 519, "word": "500", "entity_group": "LIMIT", "score": 0.999753131891332}, {"start": 597, "end": 605, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999745143642794}, {"start": 606, "end": 613, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9993340846480181}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBlackMilkTea = intvar(0, 999999999)  # Number of bottles of black milk tea\nMatchaMilkTea = intvar(0, 999999999)  # Number of bottles of matcha milk tea\n\n# Constraints\nm = Model()\n\n# Total milk used should not exceed 30000 grams:\nm += 600 * BlackMilkTea + 525 * MatchaMilkTea <= 30000\n# Total honey used should not exceed 500 grams:\nm += 10 * BlackMilkTea + 5 * MatchaMilkTea <= 500\n\n# Objective\n# Maximize profits ($7.5 profit per bottle of black milk tea and $5 profit per bottle of matcha milk tea):\nm.maximize(7.5 * BlackMilkTea + 5 * MatchaMilkTea)\n"}}
{"37344130": {"document": "A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs $1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs $2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?", "order_mapping": {"milk": 0, "vegetables": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"milk": "1", "vegetables": "2"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "100", "terms": {"milk": "40", "vegetables": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"milk": "25", "vegetables": "30"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 2.0], "constraints": [[-40.0, -15.0, -100.0], [-25.0, -30.0, -50.0]]}, "solution": {"x": 3, "y": 0}, "entities": [{"start": 49, "end": 53, "word": "milk", "entity_group": "VAR", "score": 0.9994559553899621}, {"start": 65, "end": 75, "word": "vegetables", "entity_group": "VAR", "score": 0.9996800825656467}, {"start": 96, "end": 103, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9977629488472874}, {"start": 107, "end": 110, "word": "100", "entity_group": "LIMIT", "score": 0.999750938984091}, {"start": 132, "end": 134, "word": "50", "entity_group": "LIMIT", "score": 0.9997146695637662}, {"start": 170, "end": 174, "word": "milk", "entity_group": "VAR", "score": 0.9993247289188135}, {"start": 175, "end": 180, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9936449977046805}, {"start": 183, "end": 184, "word": "1", "entity_group": "PARAM", "score": 0.9995121701802372}, {"start": 198, "end": 200, "word": "40", "entity_group": "PARAM", "score": 0.999715288696657}, {"start": 222, "end": 224, "word": "25", "entity_group": "PARAM", "score": 0.9997088962616669}, {"start": 252, "end": 262, "word": "vegetables", "entity_group": "VAR", "score": 0.9995076653632676}, {"start": 263, "end": 268, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9959863736766675}, {"start": 271, "end": 272, "word": "2", "entity_group": "PARAM", "score": 0.999555743614344}, {"start": 286, "end": 288, "word": "15", "entity_group": "PARAM", "score": 0.999696167645652}, {"start": 310, "end": 312, "word": "30", "entity_group": "PARAM", "score": 0.9996459981358894}, {"start": 367, "end": 375, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9995056341067453}, {"start": 380, "end": 384, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9989830964077375}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMilk = intvar(0, 999999999)  # Number of glasses of milk\nVegetables = intvar(0, 999999999)  # Number of plates of vegetables\n\n# Constraints\nm = Model()\n\n# Minimum of 100 units of calcium per day:\nm += 40 * Milk + 15 * Vegetables >= 100\n# Minimum of 50 units of iron per day:\nm += 25 * Milk + 30 * Vegetables >= 50\n\n# Objective\n# Minimize cost (1 dollar per glass of milk and 2 dollars per plate of vegetables):\nm.minimize(1 * Milk + 2 * Vegetables)\n"}}
{"1054847148": {"document": "Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs $5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs $2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.", "order_mapping": {"protein bars": 0, "noodles": 1, "protein bar": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"noodles": "5", "protein bar": "2.5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "2000", "terms": {"noodles": "600", "protein bar": "250"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "16", "terms": {"noodles": "1.5", "protein bar": "5"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.5, 5.0], "constraints": [[-250.0, -600.0, -2000.0], [-5.0, -1.5, -16.0]]}, "solution": {"x": 8, "y": 0}, "entities": [{"start": 41, "end": 53, "word": "protein bars", "entity_group": "VAR", "score": 0.9999577043134762}, {"start": 58, "end": 65, "word": "noodles", "entity_group": "VAR", "score": 0.9992929915044291}, {"start": 96, "end": 103, "word": "noodles", "entity_group": "VAR", "score": 0.9993569187675526}, {"start": 104, "end": 109, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9948289244364855}, {"start": 112, "end": 113, "word": "5", "entity_group": "PARAM", "score": 0.9996415759757382}, {"start": 127, "end": 130, "word": "600", "entity_group": "PARAM", "score": 0.9996133073851409}, {"start": 144, "end": 147, "word": "1.5", "entity_group": "PARAM", "score": 0.9996218189450211}, {"start": 195, "end": 206, "word": "protein bar", "entity_group": "VAR", "score": 0.9999504040121348}, {"start": 207, "end": 212, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9997800328645174}, {"start": 215, "end": 218, "word": "2.5", "entity_group": "PARAM", "score": 0.9997070400161774}, {"start": 232, "end": 235, "word": "250", "entity_group": "PARAM", "score": 0.9997160577767937}, {"start": 249, "end": 250, "word": "5", "entity_group": "PARAM", "score": 0.9996428041573862}, {"start": 370, "end": 378, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987770562083144}, {"start": 379, "end": 383, "word": "2000", "entity_group": "LIMIT", "score": 0.9997029383955928}, {"start": 397, "end": 405, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999276280280773}, {"start": 406, "end": 408, "word": "16", "entity_group": "LIMIT", "score": 0.9997566978395617}, {"start": 490, "end": 498, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9867370273834053}, {"start": 503, "end": 507, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9904529000881299}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProteinBars = intvar(0, 999999999)  # Number of protein bars\nNoodles = intvar(0, 999999999)  # Number of servings of noodles\n\n# Constraints\nm = Model()\n\n# Ensure that his meals have at least 2000 calories per day:\nm += 250 * ProteinBars + 600 * Noodles >= 2000\n# Ensure that his meals have at least 16 grams of protein per day:\nm += 5 * ProteinBars + 1.5 * Noodles >= 16\n\n# Objective\n# Minimize the cost of the diet (Protein bars cost $2.5 each, Noodles cost $5 per serving):\nm.minimize(2.5 * ProteinBars + 5 * Noodles)\n"}}
{"-1385190693": {"document": "A toy store sells plush toys and dolls. Each plush toy costs the store $3 and each doll costs the store $2. The store owner can spend at most $700 on inventory. Each plush toy is then sold for a profit of $4 while each doll is sold for a profit of $2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?", "order_mapping": {"plush toys": 0, "dolls": 1, "plush toy": 0, "doll": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"plush toy": "4", "doll": "2"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "700", "terms": {"plush toy": "3", "doll": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "90", "var": "plush toys", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "190", "var": "plush toys", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "dolls", "direction": "at most", "param": "twice", "y_var": "plush toys", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-4.0, -2.0], "constraints": [[3.0, 2.0, 700.0], [-1.0, -0.0, -90.0], [1.0, 0.0, 190.0], [-2.0, 1.0, 0.0]]}, "solution": {"x": 190, "y": 65}, "entities": [{"start": 18, "end": 28, "word": "plush toys", "entity_group": "VAR", "score": 0.9999752589132326}, {"start": 33, "end": 38, "word": "dolls", "entity_group": "VAR", "score": 0.9992471997799298}, {"start": 46, "end": 55, "word": "plush toy", "entity_group": "VAR", "score": 0.9999807333382376}, {"start": 74, "end": 75, "word": "3", "entity_group": "PARAM", "score": 0.9995202744496712}, {"start": 85, "end": 89, "word": "doll", "entity_group": "VAR", "score": 0.9998225562526045}, {"start": 108, "end": 109, "word": "2", "entity_group": "PARAM", "score": 0.9997448069911234}, {"start": 138, "end": 145, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9967018161972843}, {"start": 148, "end": 151, "word": "700", "entity_group": "LIMIT", "score": 0.9994263702833525}, {"start": 172, "end": 181, "word": "plush toy", "entity_group": "VAR", "score": 0.9999500585405745}, {"start": 201, "end": 207, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999096035711189}, {"start": 213, "end": 214, "word": "4", "entity_group": "PARAM", "score": 0.9996291251838382}, {"start": 226, "end": 230, "word": "doll", "entity_group": "VAR", "score": 0.9997876907379619}, {"start": 245, "end": 251, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995143408813479}, {"start": 257, "end": 258, "word": "2", "entity_group": "PARAM", "score": 0.999624507131661}, {"start": 286, "end": 294, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988513928755594}, {"start": 295, "end": 297, "word": "90", "entity_group": "LIMIT", "score": 0.999563806987784}, {"start": 298, "end": 308, "word": "plush toys", "entity_group": "VAR", "score": 0.9999590329379404}, {"start": 313, "end": 320, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988194592377972}, {"start": 321, "end": 324, "word": "190", "entity_group": "LIMIT", "score": 0.9995855127795391}, {"start": 325, "end": 335, "word": "plush toys", "entity_group": "VAR", "score": 0.9999481916003928}, {"start": 395, "end": 400, "word": "dolls", "entity_group": "VAR", "score": 0.9992448168539647}, {"start": 409, "end": 416, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9968280079099806}, {"start": 417, "end": 422, "word": "twice", "entity_group": "PARAM", "score": 0.9940711469662228}, {"start": 437, "end": 447, "word": "plush toys", "entity_group": "VAR", "score": 0.999950426513701}, {"start": 501, "end": 509, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994420961850083}, {"start": 510, "end": 516, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997976841836507}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPlushToys = intvar(0, 999999999)  # Number of plush toys bought and sold\nDolls = intvar(0, 999999999)  # Number of dolls bought and sold\n\n# Constraints\nm = Model()\n\n# The store owner can spend at most $700 on inventory:\nm += 3 * PlushToys + 2 * Dolls <= 700\n# At least 90 plush toys but at most 190 plush toys are sold each month:\nm += PlushToys >= 90\nm += PlushToys <= 190\n# The number of dolls sold is at most twice the amount of plush toys sold:\nm += Dolls <= 2 * PlushToys\n\n# Objective\n# Maximize profit (Each plush toy is sold for a profit of $4, each doll is sold for a profit of $2):\nm.maximize(4 * PlushToys + 2 * Dolls)\n\n"}}
{"256126407": {"document": "Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of $4 and a package of music paper at a profit of $2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?", "order_mapping": {"graph paper": 0, "music paper": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"graph paper": "4", "music paper": "2.5"}}, "const_declarations": [{"type": "linear", "direction": "maximum", "limit": "350", "terms": {"graph paper": "3", "music paper": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "maximum", "limit": "350", "terms": {"graph paper": "5.5", "music paper": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-4.0, -2.5], "constraints": [[3.0, 1.5, 350.0], [5.5, 3.0, 350.0]]}, "solution": {"x": 2, "y": 113}, "entities": [{"start": 43, "end": 54, "word": "graph paper", "entity_group": "VAR", "score": 0.9999792370758781}, {"start": 59, "end": 70, "word": "music paper", "entity_group": "VAR", "score": 0.9999793322185825}, {"start": 180, "end": 181, "word": "3", "entity_group": "PARAM", "score": 0.9996455825880016}, {"start": 218, "end": 221, "word": "5.5", "entity_group": "PARAM", "score": 0.9996718060132725}, {"start": 272, "end": 283, "word": "graph paper", "entity_group": "VAR", "score": 0.9999645829437286}, {"start": 315, "end": 318, "word": "1.5", "entity_group": "PARAM", "score": 0.9996848145810345}, {"start": 355, "end": 356, "word": "3", "entity_group": "PARAM", "score": 0.9996715004829269}, {"start": 407, "end": 418, "word": "music paper", "entity_group": "VAR", "score": 0.9999539685074732}, {"start": 453, "end": 460, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9986296141994917}, {"start": 464, "end": 467, "word": "350", "entity_group": "LIMIT", "score": 0.9996259664376321}, {"start": 517, "end": 528, "word": "graph paper", "entity_group": "VAR", "score": 0.9999727740033519}, {"start": 534, "end": 540, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997688235526364}, {"start": 546, "end": 547, "word": "4", "entity_group": "PARAM", "score": 0.9996771274639208}, {"start": 565, "end": 576, "word": "music paper", "entity_group": "VAR", "score": 0.9999518972258055}, {"start": 582, "end": 588, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9990028046468447}, {"start": 594, "end": 597, "word": "2.5", "entity_group": "PARAM", "score": 0.9997025589457522}, {"start": 722, "end": 730, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9947466016180401}, {"start": 731, "end": 737, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993711977684752}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGraphPaper = intvar(0, 999999999)  # Number of reams of graph paper produced daily\nMusicPaper = intvar(0, 999999999)  # Number of reams of music paper produced daily\n\n# Constraints\nm = Model()\n\n# Printing machine time constraint (350 minutes per day):\nm += 3 * GraphPaper + 1.5 * MusicPaper <= 350\n# Scanning machine time constraint (350 minutes per day):\nm += 5.5 * GraphPaper + 3 * MusicPaper <= 350\n\n# Objective\n# Maximize profit ($4 per ream of graph paper, $2.5 per ream of music paper):\nm.maximize(4 * GraphPaper + 2.5 * MusicPaper)\n"}}
{"1973401520": {"document": "Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is $14 and the cost per health supplement for health supplement B is $25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.", "order_mapping": {"health supplement A": 0, "health supplement B.": 1, "health supplement B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"health supplement A": "14", "health supplement B": "25"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "400", "terms": {"health supplement A": "30", "health supplement B": "60"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "50", "terms": {"health supplement A": "50", "health supplement B": "10"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [14.0, 25.0], "constraints": [[-30.0, -60.0, -400.0], [-50.0, -10.0, -50.0]]}, "solution": {"x": 0, "y": 7}, "entities": [{"start": 60, "end": 79, "word": "health supplement A", "entity_group": "VAR", "score": 0.9956343800983938}, {"start": 84, "end": 104, "word": "health supplement B.", "entity_group": "VAR", "score": 0.9984563039636674}, {"start": 120, "end": 139, "word": "health supplement A", "entity_group": "VAR", "score": 0.9992853925382856}, {"start": 149, "end": 151, "word": "30", "entity_group": "PARAM", "score": 0.9997345916811223}, {"start": 173, "end": 175, "word": "50", "entity_group": "PARAM", "score": 0.9997411373325128}, {"start": 212, "end": 231, "word": "health supplement B", "entity_group": "VAR", "score": 0.9990892616438933}, {"start": 241, "end": 243, "word": "60", "entity_group": "PARAM", "score": 0.9997303543783785}, {"start": 265, "end": 267, "word": "10", "entity_group": "PARAM", "score": 0.9997328183636482}, {"start": 293, "end": 297, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9986494924788635}, {"start": 324, "end": 343, "word": "health supplement A", "entity_group": "VAR", "score": 0.9980915614376643}, {"start": 349, "end": 351, "word": "14", "entity_group": "PARAM", "score": 0.9994294535150048}, {"start": 360, "end": 364, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9987638514490823}, {"start": 391, "end": 410, "word": "health supplement B", "entity_group": "VAR", "score": 0.9976424015142064}, {"start": 416, "end": 418, "word": "25", "entity_group": "PARAM", "score": 0.9995859343365766}, {"start": 490, "end": 498, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988356037977775}, {"start": 499, "end": 502, "word": "400", "entity_group": "LIMIT", "score": 0.9997197045291624}, {"start": 524, "end": 526, "word": "50", "entity_group": "LIMIT", "score": 0.9997417637649255}, {"start": 616, "end": 624, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9976713658804285}, {"start": 635, "end": 639, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9981725298457715}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSupplementA = intvar(0, 999999999)  # Number of servings of health supplement A\nSupplementB = intvar(0, 999999999)  # Number of servings of health supplement B\n\n# Constraints\nm = Model()\n\n# The patient must consume at least 400 grams of Calcium daily:\nm += 30 * SupplementA + 60 * SupplementB >= 400\n# The patient must consume at least 50 grams of Magnesium daily:\nm += 50 * SupplementA + 10 * SupplementB >= 50\n\n# Objective\n# Minimize the daily cost of consuming the health supplements:\nm.minimize(14 * SupplementA + 25 * SupplementB)\n"}}
{"2078904807": {"document": "Lucy has a dog and she wants his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs $20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.", "order_mapping": {"regular brand": 0, "premium brand": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost", "terms": {"premium brand": "35", "regular brand": "20"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "15", "terms": {"regular brand": "4", "premium brand": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "20", "terms": {"regular brand": "7", "premium brand": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "20", "terms": {"regular brand": "10", "premium brand": "16"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [20.0, 35.0], "constraints": [[-4.0, -12.0, -15.0], [-7.0, -10.0, -20.0], [-10.0, -16.0, -20.0]]}, "solution": {"x": 0, "y": 2}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularBrand = intvar(0, 999999999)  # Number of regular brand bags\nPremiumBrand = intvar(0, 999999999)  # Number of premium brand bags\n\n# Constraints\nm = Model()\n\n# Minimum of 15 units of calcium:\nm += 4 * RegularBrand + 12 * PremiumBrand >= 15\n# Minimum of 20 units of vitamin mix:\nm += 7 * RegularBrand + 10 * PremiumBrand >= 20\n# Minimum of 20 units of protein:\nm += 10 * RegularBrand + 16 * PremiumBrand >= 20\n\n# Objective\n# Minimize cost ($20 per regular brand bag, $35 per premium brand bag):\nm.minimize(20 * RegularBrand + 35 * PremiumBrand)\n"}}
{"-443833341": {"document": "Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of $550, each tank of non-sticky oil produces a net revenue of $750, and each tank of heavy oil produces a net revenue of $950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?", "order_mapping": {"light oil": 0, "non-sticky oil": 1, "heavy oil": 2}, "obj_declaration": {"type": "objective", "direction": "maximized", "name": "net revenue", "terms": {"light oil": "550", "non-sticky oil": "750", "heavy oil": "950"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "250", "terms": {"light oil": "3", "non-sticky oil": "6", "heavy oil": "9"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "150", "terms": {"heavy oil": "3", "non-sticky oil": "2", "light oil": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-550.0, -750.0, -950.0], "constraints": [[3.0, 6.0, 9.0, 250.0], [3.0, 2.0, 3.0, 150.0]]}, "solution": {"x": 33, "y": 25, "z": 0}, "entities": [{"start": 47, "end": 56, "word": "light oil", "entity_group": "VAR", "score": 0.9999548411312883}, {"start": 59, "end": 75, "word": "non - sticky oil", "entity_group": "VAR", "score": 0.9963394968874184}, {"start": 80, "end": 89, "word": "heavy oil", "entity_group": "VAR", "score": 0.9999673217802598}, {"start": 105, "end": 114, "word": "light oil", "entity_group": "VAR", "score": 0.9999864622822198}, {"start": 126, "end": 137, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9468466575689775}, {"start": 143, "end": 146, "word": "550", "entity_group": "PARAM", "score": 0.999642031265893}, {"start": 162, "end": 178, "word": "non - sticky oil", "entity_group": "VAR", "score": 0.998665858784345}, {"start": 190, "end": 201, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9244887468272648}, {"start": 207, "end": 210, "word": "750", "entity_group": "PARAM", "score": 0.9996011591230437}, {"start": 230, "end": 239, "word": "heavy oil", "entity_group": "VAR", "score": 0.9999783348486497}, {"start": 251, "end": 262, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9492818147491355}, {"start": 268, "end": 271, "word": "950", "entity_group": "PARAM", "score": 0.9994814110713177}, {"start": 295, "end": 304, "word": "light oil", "entity_group": "VAR", "score": 0.9998722546971478}, {"start": 307, "end": 308, "word": "3", "entity_group": "PARAM", "score": 0.9997118575020726}, {"start": 333, "end": 334, "word": "3", "entity_group": "PARAM", "score": 0.9996661990141831}, {"start": 391, "end": 407, "word": "non - sticky oil", "entity_group": "VAR", "score": 0.9966855041345114}, {"start": 410, "end": 411, "word": "6", "entity_group": "PARAM", "score": 0.9997295349043461}, {"start": 436, "end": 437, "word": "2", "entity_group": "PARAM", "score": 0.9996527262035784}, {"start": 494, "end": 503, "word": "heavy oil", "entity_group": "VAR", "score": 0.9998737308210215}, {"start": 506, "end": 507, "word": "9", "entity_group": "PARAM", "score": 0.9997117024605832}, {"start": 532, "end": 533, "word": "3", "entity_group": "PARAM", "score": 0.9996527507411793}, {"start": 591, "end": 594, "word": "has", "entity_group": "CONST_DIR", "score": 0.9992024781477206}, {"start": 595, "end": 598, "word": "250", "entity_group": "LIMIT", "score": 0.9985775479174873}, {"start": 623, "end": 626, "word": "150", "entity_group": "LIMIT", "score": 0.9996257345215666}, {"start": 738, "end": 749, "word": "net revenue", "entity_group": "OBJ_NAME", "score": 0.9690101345747766}, {"start": 753, "end": 762, "word": "maximized", "entity_group": "OBJ_DIR", "score": 0.9995867938031097}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLightOil = intvar(0, 999999999)  # Number of tanks of light oil processed\nNonStickyOil = intvar(0, 999999999)  # Number of tanks of non-sticky oil processed\nHeavyOil = intvar(0, 999999999)  # Number of tanks of heavy oil processed\n\n# Constraints\nm = Model()\n\n# Compound A usage constraint (250 units available):\nm += 3*LightOil + 6*NonStickyOil + 9*HeavyOil <= 250\n# Compound B usage constraint (150 units available):\nm += 3*LightOil + 2*NonStickyOil + 3*HeavyOil <= 150\n\n# Objective\n# Maximize net revenue:\nm.maximize(550*LightOil + 750*NonStickyOil + 950*HeavyOil)\n\n"}}
{"-1289899123": {"document": "A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a $2.1 profit and a square foot of carpets yields a $3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?", "order_mapping": {"laminate planks": 0, "carpets": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"laminate planks": "2.1", "carpets": "3.3"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "15,000", "var": "laminate planks", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5,000", "var": "carpets", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "total of at least", "limit": "50,000", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "40,000", "var": "laminate planks", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "no more than", "limit": "20,000", "var": "carpets", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.1, -3.3], "constraints": [[-1.0, -0.0, -15000.0], [-0.0, -1.0, -5000.0], [-1.0, -1.0, -50000.0], [1.0, 0.0, 40000.0], [0.0, 1.0, 20000.0]]}, "solution": {"x": 40000, "y": 20000}, "entities": [{"start": 39, "end": 54, "word": "laminate planks", "entity_group": "VAR", "score": 0.999970661498852}, {"start": 59, "end": 66, "word": "carpets", "entity_group": "VAR", "score": 0.999471434503265}, {"start": 118, "end": 126, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983862872949366}, {"start": 127, "end": 133, "word": "15,000", "entity_group": "LIMIT", "score": 0.9994779686631526}, {"start": 149, "end": 164, "word": "laminate planks", "entity_group": "VAR", "score": 0.9999741868655788}, {"start": 169, "end": 174, "word": "5,000", "entity_group": "LIMIT", "score": 0.9995399033889736}, {"start": 190, "end": 197, "word": "carpets", "entity_group": "VAR", "score": 0.9995742723682665}, {"start": 252, "end": 260, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997850720555605}, {"start": 261, "end": 267, "word": "50,000", "entity_group": "LIMIT", "score": 0.9995103106129741}, {"start": 351, "end": 363, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9969620662142374}, {"start": 364, "end": 370, "word": "40,000", "entity_group": "LIMIT", "score": 0.9994855668170176}, {"start": 395, "end": 401, "word": "planks", "entity_group": "VAR", "score": 0.9746834664126965}, {"start": 406, "end": 412, "word": "20,000", "entity_group": "LIMIT", "score": 0.9995709767436005}, {"start": 428, "end": 435, "word": "carpets", "entity_group": "VAR", "score": 0.9993396776540989}, {"start": 481, "end": 496, "word": "laminate planks", "entity_group": "VAR", "score": 0.9999774877978858}, {"start": 510, "end": 513, "word": "2.1", "entity_group": "PARAM", "score": 0.9982898222310284}, {"start": 514, "end": 520, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9989858901801776}, {"start": 542, "end": 549, "word": "carpets", "entity_group": "VAR", "score": 0.9997457695554767}, {"start": 561, "end": 564, "word": "3.3", "entity_group": "PARAM", "score": 0.9989069890921694}, {"start": 565, "end": 571, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996563060454203}, {"start": 632, "end": 640, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997211163968045}, {"start": 656, "end": 662, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999712607514578}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLaminatePlanks = intvar(0, 999999999)  # Square feet of laminate planks produced weekly\nCarpets = intvar(0, 999999999)  # Square feet of carpets produced weekly\n\n# Constraints\nm = Model()\n\n# Expected demand constraints\nm += LaminatePlanks >= 15000  # At least 15,000 square feet of laminate planks\nm += Carpets >= 5000  # At least 5,000 square feet of carpets\n\n# Shipping contract requires a total of at least 50,000 square feet of products\nm += LaminatePlanks + Carpets >= 50000\n\n# Due to a shortage of raw materials\nm += LaminatePlanks <= 40000  # No more than 40,000 square feet of laminate planks\nm += Carpets <= 20000  # No more than 20,000 square feet of carpets\n\n# Objective\n# Maximize profit ($2.1 profit per square foot of laminate planks and $3.3 profit per square foot of carpets)\nm.maximize(2.1 * LaminatePlanks + 3.3 * Carpets)\n"}}
{"25391666": {"document": "A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium.  The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is $2 and the cost per pill of supplement B is  $3, how many of each should he buy to minimize costs?", "order_mapping": {"supplement A": 0, "supplement B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "costs", "terms": {"supplement B": "3", "supplement A": "2"}}, "const_declarations": [{"type": "linear", "direction": "minimum", "limit": "40", "terms": {"supplement A": "5", "supplement B": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "minimum", "limit": "50", "terms": {"supplement A": "10", "supplement B": "15"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 3.0], "constraints": [[-5.0, -4.0, -40.0], [-10.0, -15.0, -50.0]]}, "solution": {"x": 8, "y": 0}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSupplementA = intvar(0, 999999999)  # Number of supplement A pills\nSupplementB = intvar(0, 999999999)  # Number of supplement B pills\n\n# Constraints\nm = Model()\n\n# The man needs a minimum of 40 units of iron per day:\nm += 5 * SupplementA + 4 * SupplementB >= 40\n# The man needs a minimum of 50 units of calcium per day:\nm += 10 * SupplementA + 15 * SupplementB >= 50\n\n# Objective\n# Minimize costs ($2 per pill of supplement A and $3 per pill of supplement B):\nm.minimize(2 * SupplementA + 3 * SupplementB)\n"}}
{"-708051064": {"document": "A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of $30 each and premium handbags at a profit of $180 each. The total monthly cost of manufacturing is $200 per regular handbag and $447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?", "order_mapping": {"regular handbags": 0, "premium handbags": 1, "regular handbag": 0, "premium handbag": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"regular handbags": "30", "premium handbags": "180"}}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "250000", "terms": {"premium handbag": "447", "regular handbag": "200"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "475", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-30.0, -180.0], "constraints": [[200.0, 447.0, 250000.0], [1.0, 1.0, 475.0]]}, "solution": {"x": 0, "y": 475}, "entities": [{"start": 24, "end": 40, "word": "regular handbags", "entity_group": "VAR", "score": 0.9999588638955018}, {"start": 45, "end": 61, "word": "premium handbags", "entity_group": "VAR", "score": 0.9999872614042415}, {"start": 110, "end": 126, "word": "regular handbags", "entity_group": "VAR", "score": 0.9999841635620376}, {"start": 132, "end": 138, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9993552053334409}, {"start": 144, "end": 146, "word": "30", "entity_group": "PARAM", "score": 0.9994573768164019}, {"start": 156, "end": 172, "word": "premium handbags", "entity_group": "VAR", "score": 0.999980589737908}, {"start": 178, "end": 184, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995848407240479}, {"start": 190, "end": 193, "word": "180", "entity_group": "PARAM", "score": 0.9996043641870387}, {"start": 246, "end": 249, "word": "200", "entity_group": "PARAM", "score": 0.9991585961166055}, {"start": 254, "end": 269, "word": "regular handbag", "entity_group": "VAR", "score": 0.9999748941916073}, {"start": 276, "end": 279, "word": "447", "entity_group": "PARAM", "score": 0.9996385075246309}, {"start": 284, "end": 299, "word": "premium handbag", "entity_group": "VAR", "score": 0.9999799702185597}, {"start": 326, "end": 332, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9924489801250224}, {"start": 338, "end": 344, "word": "250000", "entity_group": "LIMIT", "score": 0.9991512024827764}, {"start": 358, "end": 365, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991501666101956}, {"start": 366, "end": 369, "word": "475", "entity_group": "LIMIT", "score": 0.9996878130437911}, {"start": 451, "end": 459, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996458468495012}, {"start": 472, "end": 478, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9996309095355131}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularHandbags = intvar(0, 999999999)  # Number of regular handbags sold per month\nPremiumHandbags = intvar(0, 999999999)  # Number of premium handbags sold per month\n\n# Constraints\nm = Model()\n\n# The total monthly cost of manufacturing should not exceed the budget of $250000:\nm += 200 * RegularHandbags + 447 * PremiumHandbags <= 250000\n# The company can sell at most 475 handbags of either type per month:\nm += RegularHandbags + PremiumHandbags <= 475\n\n# Objective\n# Maximize monthly profit (Profit of $30 per regular handbag and $180 per premium handbag):\nm.maximize(30 * RegularHandbags + 180 * PremiumHandbags)\n"}}
{"-1062928915": {"document": "A woman has $100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be $1.2 for basketball tournament, $0.5 for horse race, and $0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?", "order_mapping": {"basketball tournament": 0, "horse race": 1, "soccer game": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "payout", "terms": {"basketball tournament": "1.2", "horse race": "0.5", "soccer game": "0.1"}}, "const_declarations": [{"type": "sum", "direction": "has", "limit": "100000", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "30%", "terms": {"basketball tournament": "50%", "horse race": "25%", "soccer game": "10%"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.2, -0.5, -0.1], "constraints": [[1.0, 1.0, 1.0, 100000.0], [0.5, 0.25, 0.1, 0.3]]}, "solution": {"x": 0, "y": 1, "z": 0}, "entities": [{"start": 8, "end": 11, "word": "has", "entity_group": "CONST_DIR", "score": 0.9985304354624589}, {"start": 14, "end": 20, "word": "100000", "entity_group": "LIMIT", "score": 0.9995578239804652}, {"start": 54, "end": 75, "word": "basketball tournament", "entity_group": "VAR", "score": 0.9999744588549251}, {"start": 80, "end": 90, "word": "horse race", "entity_group": "VAR", "score": 0.9999697222639236}, {"start": 99, "end": 110, "word": "soccer game", "entity_group": "VAR", "score": 0.9999223327855442}, {"start": 201, "end": 205, "word": "50 %", "entity_group": "PARAM", "score": 0.9247923214603742}, {"start": 210, "end": 231, "word": "basketball tournament", "entity_group": "VAR", "score": 0.9999602307000958}, {"start": 234, "end": 238, "word": "25 %", "entity_group": "PARAM", "score": 0.9923929458771119}, {"start": 243, "end": 253, "word": "horse race", "entity_group": "VAR", "score": 0.9999645217889735}, {"start": 260, "end": 264, "word": "10 %", "entity_group": "PARAM", "score": 0.9833133230673666}, {"start": 273, "end": 284, "word": "soccer game", "entity_group": "VAR", "score": 0.9999727048643625}, {"start": 291, "end": 297, "word": "payout", "entity_group": "OBJ_NAME", "score": 0.9988445637854274}, {"start": 340, "end": 343, "word": "1.2", "entity_group": "PARAM", "score": 0.9976705711708331}, {"start": 348, "end": 369, "word": "basketball tournament", "entity_group": "VAR", "score": 0.9999655336159752}, {"start": 374, "end": 377, "word": "0.5", "entity_group": "PARAM", "score": 0.9995409724144885}, {"start": 382, "end": 392, "word": "horse race", "entity_group": "VAR", "score": 0.9999626647639637}, {"start": 401, "end": 404, "word": "0.1", "entity_group": "PARAM", "score": 0.999677204358868}, {"start": 413, "end": 424, "word": "soccer game", "entity_group": "VAR", "score": 0.9999722268708392}, {"start": 505, "end": 512, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9982490792663491}, {"start": 513, "end": 517, "word": "30 %", "entity_group": "LIMIT", "score": 0.9642959447701845}, {"start": 595, "end": 603, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.999109662712337}, {"start": 616, "end": 622, "word": "payout", "entity_group": "OBJ_NAME", "score": 0.9970101164367299}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBasketball = intvar(0, 999999999)  # Money put on basketball tournament\nHorseRace = intvar(0, 999999999)  # Money put on horse race\nSoccerGame = intvar(0, 999999999)  # Money put on soccer game\n\n# Constraints\nm = Model()\n\n# Total money put on bets should not exceed $100000:\nm += Basketball + HorseRace + SoccerGame <= 100000\n# Average chance of losing her money should be at most 30%:\nm += 0.5 * Basketball + 0.25 * HorseRace + 0.1 * SoccerGame <= 0.3\n\n# Objective\n# Maximize average payout:\n# This is calculated as the sum of the payout for each dollar put on each bet\nm.maximize(1.2 * Basketball + 0.5 * HorseRace + 0.1 * SoccerGame)\n\n"}}
{"1383248270": {"document": "A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him $250 and each freezer repaired earns his $375, how many of each appliance should he fix to maximize his earnings?", "order_mapping": {"freezers": 0, "washing machine": 1, "freezer": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "earnings", "terms": {"washing machine": "250", "freezer": "375"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "5000", "terms": {"washing machine": "30", "freezer": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "20000", "terms": {"washing machine": "90", "freezer": "125"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-375.0, -250.0], "constraints": [[20.0, 30.0, 5000.0], [125.0, 90.0, 20000.0]]}, "solution": {"x": 160, "y": 0}, "entities": [{"start": 18, "end": 34, "word": "washing machines", "entity_group": "VAR", "score": 0.9999804743091033}, {"start": 39, "end": 47, "word": "freezers", "entity_group": "VAR", "score": 0.9997414356146614}, {"start": 55, "end": 70, "word": "washing machine", "entity_group": "VAR", "score": 0.9999818246978628}, {"start": 77, "end": 79, "word": "30", "entity_group": "PARAM", "score": 0.9996725303731346}, {"start": 106, "end": 108, "word": "90", "entity_group": "PARAM", "score": 0.9996695366934256}, {"start": 139, "end": 146, "word": "freezer", "entity_group": "VAR", "score": 0.9996543891670807}, {"start": 153, "end": 155, "word": "20", "entity_group": "PARAM", "score": 0.9996564765870436}, {"start": 182, "end": 185, "word": "125", "entity_group": "PARAM", "score": 0.9996695388325986}, {"start": 229, "end": 233, "word": "5000", "entity_group": "LIMIT", "score": 0.9997323700056512}, {"start": 242, "end": 251, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985957978066301}, {"start": 271, "end": 276, "word": "20000", "entity_group": "LIMIT", "score": 0.99947039674634}, {"start": 285, "end": 294, "word": "available", "entity_group": "CONST_DIR", "score": 0.9970161894082387}, {"start": 321, "end": 336, "word": "washing machine", "entity_group": "VAR", "score": 0.9999858058149228}, {"start": 346, "end": 351, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9901141629527801}, {"start": 358, "end": 361, "word": "250", "entity_group": "PARAM", "score": 0.9991287054836245}, {"start": 371, "end": 378, "word": "freezer", "entity_group": "VAR", "score": 0.9998201806178402}, {"start": 388, "end": 393, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9911247566436447}, {"start": 400, "end": 403, "word": "375", "entity_group": "PARAM", "score": 0.9996676122688153}, {"start": 450, "end": 458, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9997138466708756}, {"start": 463, "end": 471, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9986155659571735}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWashingMachines = intvar(0, 999999999)  # Number of washing machines fixed\nFreezers = intvar(0, 999999999)  # Number of freezers fixed\n\n# Constraints\nm = Model()\n\n# Total inspection time for all appliances should not exceed 5000 minutes:\n# (30 minutes for each washing machine and 20 minutes for each freezer)\nm += 30 * WashingMachines + 20 * Freezers <= 5000\n\n# Total fixing time for all appliances should not exceed 20000 minutes:\n# (90 minutes for each washing machine and 125 minutes for each freezer)\nm += 90 * WashingMachines + 125 * Freezers <= 20000\n\n# Objective\n# Maximize earnings ($250 for each washing machine and $375 for each freezer):\nm.maximize(250 * WashingMachines + 375 * Freezers)\n"}}
{"-114149479": {"document": "A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is $12, the profit per sponge cake is $10, and the profit per birthday cake is $15, how many of each should the bakery make to maximize their profit?", "order_mapping": {"crepe cakes": 0, "sponge cakes": 1, "birthday cakes": 2, "crepe cake": 0, "sponge cake": 1, "birthday cake": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"crepe cake": "12", "sponge cake": "10", "birthday cake": "15"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "20000", "terms": {"crepe cake": "400", "sponge cake": "500", "birthday cake": "450"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "14000", "terms": {"crepe cake": "200", "sponge cake": "300", "birthday cake": "350"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-12.0, -10.0, -15.0], "constraints": [[400.0, 500.0, 450.0, 20000.0], [200.0, 300.0, 350.0, 14000.0]]}, "solution": {"x": 14, "y": 0, "z": 32}, "entities": [{"start": 15, "end": 18, "word": "has", "entity_group": "CONST_DIR", "score": 0.9972339060704545}, {"start": 19, "end": 24, "word": "20000", "entity_group": "LIMIT", "score": 0.9990259871615315}, {"start": 45, "end": 50, "word": "14000", "entity_group": "LIMIT", "score": 0.9996996123360694}, {"start": 79, "end": 90, "word": "crepe cakes", "entity_group": "VAR", "score": 0.9999747993827272}, {"start": 93, "end": 105, "word": "sponge cakes", "entity_group": "VAR", "score": 0.9999797126234795}, {"start": 112, "end": 126, "word": "birthday cakes", "entity_group": "VAR", "score": 0.9999805072596605}, {"start": 131, "end": 141, "word": "crepe cake", "entity_group": "VAR", "score": 0.9998941826565398}, {"start": 148, "end": 151, "word": "400", "entity_group": "PARAM", "score": 0.999691995982571}, {"start": 172, "end": 175, "word": "200", "entity_group": "PARAM", "score": 0.9997295404253068}, {"start": 194, "end": 205, "word": "sponge cake", "entity_group": "VAR", "score": 0.999978456133839}, {"start": 215, "end": 218, "word": "500", "entity_group": "PARAM", "score": 0.9997296587958403}, {"start": 239, "end": 242, "word": "300", "entity_group": "PARAM", "score": 0.9997147602027032}, {"start": 261, "end": 274, "word": "birthday cake", "entity_group": "VAR", "score": 0.9999784560777495}, {"start": 284, "end": 287, "word": "450", "entity_group": "PARAM", "score": 0.9997296587958401}, {"start": 308, "end": 311, "word": "350", "entity_group": "PARAM", "score": 0.9996514587740657}, {"start": 335, "end": 341, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999381564260561}, {"start": 346, "end": 356, "word": "crepe cake", "entity_group": "VAR", "score": 0.9997341212541208}, {"start": 362, "end": 364, "word": "12", "entity_group": "PARAM", "score": 0.9996516765240524}, {"start": 371, "end": 377, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999610855407274}, {"start": 382, "end": 393, "word": "sponge cake", "entity_group": "VAR", "score": 0.9999348094969086}, {"start": 399, "end": 401, "word": "10", "entity_group": "PARAM", "score": 0.9997436714413371}, {"start": 412, "end": 418, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.99991156846614}, {"start": 423, "end": 436, "word": "birthday cake", "entity_group": "VAR", "score": 0.9999447003662416}, {"start": 442, "end": 444, "word": "15", "entity_group": "PARAM", "score": 0.999675778682789}, {"start": 490, "end": 498, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996596147415538}, {"start": 505, "end": 511, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999855339928181}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCrepeCakes = intvar(0, 999999999)  # Number of crepe cakes made\nSpongeCakes = intvar(0, 999999999)  # Number of sponge cakes made\nBirthdayCakes = intvar(0, 999999999)  # Number of birthday cakes made\n\n# Constraints\nm = Model()\n\n# Total batter used should not exceed 20000 grams:\nm += 400 * CrepeCakes + 500 * SpongeCakes + 450 * BirthdayCakes <= 20000\n# Total milk used should not exceed 14000 grams:\nm += 200 * CrepeCakes + 300 * SpongeCakes + 350 * BirthdayCakes <= 14000\n\n# Objective\n# Maximize profit (Profit per crepe cake is $12, per sponge cake is $10, and per birthday cake is $15):\nm.maximize(12 * CrepeCakes + 10 * SpongeCakes + 15 * BirthdayCakes)\n"}}
{"-1587622119": {"document": "Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?", "order_mapping": {"first mix": 0, "second mix": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"first mix": "12", "second mix": "15"}}, "const_declarations": [{"type": "linear", "direction": "has on hand", "limit": "20", "terms": {"first mix": "20%", "second mix": "35%"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has on hand", "limit": "50", "terms": {"first mix": "80%", "second mix": "65%"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-12.0, -15.0], "constraints": [[0.2, 0.35, 20.0], [0.8, 0.65, 50.0]]}, "solution": {"x": 30, "y": 40}, "entities": [{"start": 120, "end": 129, "word": "first mix", "entity_group": "VAR", "score": 0.9999304172721518}, {"start": 139, "end": 143, "word": "20 %", "entity_group": "PARAM", "score": 0.9783612310383114}, {"start": 163, "end": 167, "word": "80 %", "entity_group": "PARAM", "score": 0.8918596354702865}, {"start": 192, "end": 202, "word": "second mix", "entity_group": "VAR", "score": 0.9999196165036578}, {"start": 212, "end": 216, "word": "35 %", "entity_group": "PARAM", "score": 0.9783622377212801}, {"start": 236, "end": 240, "word": "65 %", "entity_group": "PARAM", "score": 0.8465176449755836}, {"start": 271, "end": 282, "word": "has on hand", "entity_group": "CONST_DIR", "score": 0.9958542948774107}, {"start": 283, "end": 285, "word": "20", "entity_group": "LIMIT", "score": 0.9997271787657966}, {"start": 311, "end": 313, "word": "50", "entity_group": "LIMIT", "score": 0.9996555192467547}, {"start": 347, "end": 353, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997346992734982}, {"start": 368, "end": 377, "word": "first mix", "entity_group": "VAR", "score": 0.9998789755920755}, {"start": 383, "end": 385, "word": "12", "entity_group": "PARAM", "score": 0.9992688658730879}, {"start": 394, "end": 400, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999249793834224}, {"start": 415, "end": 425, "word": "second mix", "entity_group": "VAR", "score": 0.9997895817349426}, {"start": 431, "end": 433, "word": "15", "entity_group": "PARAM", "score": 0.9996753983414995}, {"start": 478, "end": 486, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996694937233038}, {"start": 487, "end": 493, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999274856881307}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstMix = intvar(0, 999999999)  # kg of the first mix prepared\nSecondMix = intvar(0, 999999999)  # kg of the second mix prepared\n\n# Constraints\nm = Model()\n\n# The store has on hand 20 kg of cat paw snacks:\nm += 0.20 * FirstMix + 0.35 * SecondMix <= 20\n# The store has on hand 50 kg of gold shark snacks:\nm += 0.80 * FirstMix + 0.65 * SecondMix <= 50\n\n# Objective\n# Maximize profit ($12 per kg of the first mix and $15 per kg of the second mix):\nm.maximize(12 * FirstMix + 15 * SecondMix)\n"}}
{"-1412758703": {"document": "A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of $2.50 each and x2 deluxe tacos at a profit of $3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?", "order_mapping": {"regular tacos": 0, "deluxe tacos": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"deluxe tacos": "3.55", "regular tacos": "2.50"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "50", "var": "regular tacos", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "40", "var": "deluxe tacos", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "70", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.5, -3.55], "constraints": [[1.0, 0.0, 50.0], [0.0, 1.0, 40.0], [1.0, 1.0, 70.0]]}, "solution": {"x": 30, "y": 40}, "entities": [{"start": 19, "end": 32, "word": "regular tacos", "entity_group": "VAR", "score": 0.9999544117884753}, {"start": 37, "end": 49, "word": "deluxe tacos", "entity_group": "VAR", "score": 0.9999775144676506}, {"start": 87, "end": 100, "word": "regular tacos", "entity_group": "VAR", "score": 0.9999638671183272}, {"start": 106, "end": 112, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9997716216877282}, {"start": 118, "end": 122, "word": "2.50", "entity_group": "PARAM", "score": 0.9992178758276938}, {"start": 135, "end": 147, "word": "deluxe tacos", "entity_group": "VAR", "score": 0.9999740911939812}, {"start": 153, "end": 159, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9995783125163138}, {"start": 165, "end": 169, "word": "3.55", "entity_group": "PARAM", "score": 0.9994784491129516}, {"start": 267, "end": 274, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9984491356242169}, {"start": 275, "end": 277, "word": "50", "entity_group": "LIMIT", "score": 0.9995651256952348}, {"start": 278, "end": 291, "word": "regular tacos", "entity_group": "VAR", "score": 0.9999666189457518}, {"start": 296, "end": 303, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988216995472498}, {"start": 304, "end": 306, "word": "40", "entity_group": "LIMIT", "score": 0.9996026184460666}, {"start": 307, "end": 319, "word": "deluxe tacos", "entity_group": "VAR", "score": 0.9999409542376783}, {"start": 365, "end": 372, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988778217376698}, {"start": 373, "end": 375, "word": "70", "entity_group": "LIMIT", "score": 0.9996951858584668}, {"start": 446, "end": 454, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987661263748933}, {"start": 455, "end": 461, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998151170836423}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRegularTacos = intvar(0, 999999999)  # Number of regular tacos made\nDeluxeTacos = intvar(0, 999999999)  # Number of deluxe tacos made\n\n# Constraints\nm = Model()\n\n# At most 50 regular tacos due to demand:\nm += RegularTacos <= 50\n# At most 40 deluxe tacos due to demand:\nm += DeluxeTacos <= 40\n# Only enough supplies to sell at most 70 tacos of either type:\nm += RegularTacos + DeluxeTacos <= 70\n\n# Objective\n# Maximize profit ($2.50 profit per regular taco, $3.55 profit per deluxe taco):\nm.maximize(2.50 * RegularTacos + 3.55 * DeluxeTacos)\n"}}
{"25709243": {"document": "A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is $15 and the profit per English workbook is $17, how many of each should the company make to maximize profit?", "order_mapping": {"math workbooks": 0, "English workbooks": 1, "math workbook": 0, "English workbook": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"English workbook": "17", "math workbook": "15"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "40", "var": "math workbooks", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "60", "var": "English workbooks", "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "140", "var": "math workbooks", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "170", "var": "English workbooks", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "200", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-15.0, -17.0], "constraints": [[-1.0, -0.0, -40.0], [-0.0, -1.0, -60.0], [1.0, 0.0, 140.0], [0.0, 1.0, 170.0], [-1.0, -1.0, -200.0]]}, "solution": {"x": 140, "y": 170}, "entities": [{"start": 25, "end": 39, "word": "math workbooks", "entity_group": "VAR", "score": 0.9999649617619053}, {"start": 44, "end": 61, "word": "English workbooks", "entity_group": "VAR", "score": 0.9999877014211512}, {"start": 96, "end": 104, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998829340346537}, {"start": 105, "end": 107, "word": "40", "entity_group": "LIMIT", "score": 0.9995487322159848}, {"start": 108, "end": 122, "word": "math workbooks", "entity_group": "VAR", "score": 0.999930842655473}, {"start": 127, "end": 135, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987514002181438}, {"start": 136, "end": 138, "word": "60", "entity_group": "LIMIT", "score": 0.9995163836152189}, {"start": 139, "end": 156, "word": "English workbooks", "entity_group": "VAR", "score": 0.9999506464249325}, {"start": 183, "end": 190, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985060406820443}, {"start": 191, "end": 194, "word": "140", "entity_group": "LIMIT", "score": 0.9995380828667301}, {"start": 195, "end": 209, "word": "math workbooks", "entity_group": "VAR", "score": 0.9999201123322783}, {"start": 214, "end": 221, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987863131668008}, {"start": 222, "end": 225, "word": "170", "entity_group": "LIMIT", "score": 0.9995782199171144}, {"start": 226, "end": 243, "word": "English workbooks", "entity_group": "VAR", "score": 0.9999544890355532}, {"start": 295, "end": 303, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986897347089937}, {"start": 304, "end": 307, "word": "200", "entity_group": "LIMIT", "score": 0.9996666401321304}, {"start": 342, "end": 348, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999174728238854}, {"start": 353, "end": 366, "word": "math workbook", "entity_group": "VAR", "score": 0.999947401171327}, {"start": 372, "end": 374, "word": "15", "entity_group": "PARAM", "score": 0.9993849981731641}, {"start": 383, "end": 389, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999365203217542}, {"start": 394, "end": 410, "word": "English workbook", "entity_group": "VAR", "score": 0.9999422212493068}, {"start": 416, "end": 418, "word": "17", "entity_group": "PARAM", "score": 0.9996640417693073}, {"start": 465, "end": 473, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9995945418591179}, {"start": 474, "end": 480, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9999277511526317}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMathWorkbooks = intvar(0, 999999999)  # Number of math workbooks made\nEnglishWorkbooks = intvar(0, 999999999)  # Number of English workbooks made\n\n# Constraints\nm = Model()\n\n# Must make at least 40 math workbooks:\nm += MathWorkbooks >= 40\n# Must make at least 60 English workbooks:\nm += EnglishWorkbooks >= 60\n# Can make at most 140 math workbooks:\nm += MathWorkbooks <= 140\n# Can make at most 170 English workbooks:\nm += EnglishWorkbooks <= 170\n# Must send at least 200 workbooks of either type:\nm += MathWorkbooks + EnglishWorkbooks >= 200\n\n# Objective\n# Maximize profit ($15 per math workbook and $17 per English workbook):\nm.maximize(15 * MathWorkbooks + 17 * EnglishWorkbooks)\n"}}
{"-926961422": {"document": "A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for $2800 and $2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?", "order_mapping": {"full-weighted": 0, "semi-weighted": 1, "full-weighted version": 0, "semi-weighted version": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total revenue", "terms": {"full-weighted": "2800", "semi-weighted": "2400"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "3500", "terms": {"full-weighted version": "20", "semi-weighted version": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "a total of", "limit": "6", "terms": {"full-weighted version": "1.2", "semi-weighted version": "1.2"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2800.0, -2400.0], "constraints": [[20.0, 15.0, 3500.0], [1.2, 1.2, 6.0]]}, "solution": {"x": 5, "y": 0}, "entities": [{"start": 65, "end": 80, "word": "full - weighted", "entity_group": "VAR", "score": 0.9996019354660781}, {"start": 96, "end": 111, "word": "semi - weighted", "entity_group": "VAR", "score": 0.999200549374597}, {"start": 133, "end": 137, "word": "sold", "entity_group": "OBJ_NAME", "score": 0.9931647853903742}, {"start": 144, "end": 148, "word": "2800", "entity_group": "PARAM", "score": 0.9995760916424219}, {"start": 155, "end": 159, "word": "2400", "entity_group": "PARAM", "score": 0.9997607929403178}, {"start": 191, "end": 195, "word": "3500", "entity_group": "LIMIT", "score": 0.9987795302705833}, {"start": 213, "end": 222, "word": "available", "entity_group": "CONST_DIR", "score": 0.998909383954421}, {"start": 248, "end": 271, "word": "full - weighted version", "entity_group": "VAR", "score": 0.999022724863141}, {"start": 281, "end": 283, "word": "20", "entity_group": "PARAM", "score": 0.999615245192963}, {"start": 300, "end": 323, "word": "semi - weighted version", "entity_group": "VAR", "score": 0.9985720302883857}, {"start": 333, "end": 335, "word": "15", "entity_group": "PARAM", "score": 0.9993255626939206}, {"start": 362, "end": 367, "word": "total", "entity_group": "CONST_DIR", "score": 0.997278998833389}, {"start": 371, "end": 372, "word": "6", "entity_group": "LIMIT", "score": 0.9993157698582535}, {"start": 448, "end": 451, "word": "1.2", "entity_group": "PARAM", "score": 0.9995181849678321}, {"start": 531, "end": 539, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988632957531043}, {"start": 544, "end": 557, "word": "total revenue", "entity_group": "OBJ_NAME", "score": 0.9933008228157453}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFullWeighted = intvar(0, 999999999)  # Number of full-weighted keyboards manufactured\nSemiWeighted = intvar(0, 999999999)  # Number of semi-weighted keyboards manufactured\n\n# Constraints\nm = Model()\n\n# Oscillator chips constraint (3500 chips available, 20 needed for full-weighted, 15 for semi-weighted):\nm += 20 * FullWeighted + 15 * SemiWeighted <= 3500\n# Working hours constraint (6 hours available, 1.2 hours needed for each type of keyboard):\nm += 1.2 * FullWeighted + 1.2 * SemiWeighted <= 6\n\n# Objective\n# Maximize total revenue (Full-weighted sold for $2800, Semi-weighted for $2400):\nm.maximize(2800 * FullWeighted + 2400 * SemiWeighted)\n"}}
{"1294399767": {"document": "Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost $550 and $2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is $450 and the profit per commercial version is $1200. If the company does not want to spend more than $400000, how many of each software package should they produce to maximize the profits.", "order_mapping": {"personal license": 0, "commercial license": 1, "commercial version": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profits", "terms": {"personal license": "450", "commercial version": "1200"}}, "const_declarations": [{"type": "linear", "direction": "more than", "limit": "400000", "terms": {"personal license": "550", "commercial license": "2000"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "300", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-450.0, -1200.0], "constraints": [[550.0, 2000.0, 400000.0], [1.0, 1.0, 300.0]]}, "solution": {"x": 138, "y": 162}, "entities": [{"start": 72, "end": 88, "word": "personal license", "entity_group": "VAR", "score": 0.9999631836674046}, {"start": 95, "end": 113, "word": "commercial license", "entity_group": "VAR", "score": 0.9997091274702041}, {"start": 132, "end": 135, "word": "550", "entity_group": "PARAM", "score": 0.998984683742746}, {"start": 142, "end": 146, "word": "2000", "entity_group": "PARAM", "score": 0.9995839617430441}, {"start": 228, "end": 235, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989375710422183}, {"start": 236, "end": 239, "word": "300", "entity_group": "LIMIT", "score": 0.9997298145158492}, {"start": 290, "end": 296, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998631523721091}, {"start": 301, "end": 317, "word": "personal license", "entity_group": "VAR", "score": 0.9999729470670633}, {"start": 323, "end": 326, "word": "450", "entity_group": "PARAM", "score": 0.9995682911419345}, {"start": 335, "end": 341, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999919897719139}, {"start": 346, "end": 364, "word": "commercial version", "entity_group": "VAR", "score": 0.9995131018254289}, {"start": 370, "end": 374, "word": "1200", "entity_group": "PARAM", "score": 0.9997109658192698}, {"start": 415, "end": 424, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9916277563143553}, {"start": 427, "end": 433, "word": "400000", "entity_group": "LIMIT", "score": 0.9995928185966434}, {"start": 493, "end": 501, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9987886284539936}, {"start": 506, "end": 513, "word": "profits", "entity_group": "OBJ_NAME", "score": 0.9996017981380562}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPersonalLicense = intvar(0, 999999999)  # Number of personal licenses produced\nCommercialLicense = intvar(0, 999999999)  # Number of commercial licenses produced\n\n# Constraints\nm = Model()\n\n# The company does not want to spend more than $400000 on producing the software packages:\nm += 550 * PersonalLicense + 2000 * CommercialLicense <= 400000\n# They can sell at most 300 licenses for both versions combined a month:\nm += PersonalLicense + CommercialLicense <= 300\n\n# Objective\n# Maximize profits (Profit per personal license is $450 and per commercial version is $1200):\nm.maximize(450 * PersonalLicense + 1200 * CommercialLicense)\n"}}
{"2014574459": {"document": "Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of $5.5 each, and x2 sugar cookies, at a profit of $12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?", "order_mapping": {"strawberry cookie": 0, "sugar cookie": 1, "strawberry cookies": 0, "sugar cookies": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "profit", "terms": {"strawberry cookies": "5.5", "sugar cookies": "12"}}, "const_declarations": [{"type": "upperbound", "direction": "at most", "limit": "100", "var": "strawberry cookies", "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "80", "var": "sugar cookies", "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "maximum", "limit": "100", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.5, -12.0], "constraints": [[1.0, 0.0, 100.0], [0.0, 1.0, 80.0], [1.0, 1.0, 100.0]]}, "solution": {"x": 20, "y": 80}, "entities": [{"start": 53, "end": 70, "word": "strawberry cookie", "entity_group": "VAR", "score": 0.9999805770763837}, {"start": 77, "end": 89, "word": "sugar cookie", "entity_group": "VAR", "score": 0.9999641764861538}, {"start": 116, "end": 134, "word": "strawberry cookies", "entity_group": "VAR", "score": 0.9999813201298413}, {"start": 142, "end": 148, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9978410874829101}, {"start": 154, "end": 157, "word": "5.5", "entity_group": "PARAM", "score": 0.9994923756206411}, {"start": 172, "end": 185, "word": "sugar cookies", "entity_group": "VAR", "score": 0.9999863631236907}, {"start": 193, "end": 199, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9977454350155744}, {"start": 205, "end": 207, "word": "12", "entity_group": "PARAM", "score": 0.9994165042508714}, {"start": 312, "end": 319, "word": "at most", "entity_group": "CONST_DIR", "score": 0.998451144656989}, {"start": 320, "end": 323, "word": "100", "entity_group": "LIMIT", "score": 0.9995662140991374}, {"start": 324, "end": 342, "word": "strawberry cookies", "entity_group": "VAR", "score": 0.9999542154963426}, {"start": 347, "end": 354, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987529955272307}, {"start": 355, "end": 357, "word": "80", "entity_group": "LIMIT", "score": 0.999460779696004}, {"start": 358, "end": 371, "word": "sugar cookies", "entity_group": "VAR", "score": 0.9999573588860139}, {"start": 417, "end": 424, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9966546728739961}, {"start": 428, "end": 431, "word": "100", "entity_group": "LIMIT", "score": 0.9997260527897445}, {"start": 524, "end": 532, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9889198288275782}, {"start": 533, "end": 539, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9994047701541345}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nStrawberryCookies = intvar(0, 999999999)  # Number of strawberry cookies made daily\nSugarCookies = intvar(0, 999999999)  # Number of sugar cookies made daily\n\n# Constraints\nm = Model()\n\n# Daily demand for strawberry cookies is at most 100:\nm += StrawberryCookies <= 100\n# Daily demand for sugar cookies is at most 80:\nm += SugarCookies <= 80\n# The bakery can make a maximum of 100 cookies of either type per day:\nm += StrawberryCookies + SugarCookies <= 100\n\n# Objective\n# Maximize profit ($5.5 profit per strawberry cookie, $12 profit per sugar cookie):\nm.maximize(5.5 * StrawberryCookies + 12 * SugarCookies)\n"}}
{"-38479566": {"document": "A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs $1200 and attracts 2000 viewers. On Beta Video, a commercial costs $2000 and attracts 5000 viewers. On Gamma Live, a commercial costs $4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is $20000, how many commercials should be run in each of the three possible choices in order to maximize audience?", "order_mapping": {"Pi TV": 0, "Beta Video": 1, "Gamma Live": 2}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "audience", "terms": {"Pi TV": "2000", "Beta Video": "5000", "Gamma Live": "9000"}}, "const_declarations": [{"type": "upperbound", "direction": "limits the number", "limit": "8", "var": "Beta Video", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "third", "var": "Gamma Live", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "minimum", "limit": "20%", "var": "Pi TV", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "20000", "terms": {"Pi TV": "1200", "Beta Video": "2000", "Gamma Live": "4000"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2000.0, -5000.0, -9000.0], "constraints": [[0.0, 1.0, 0.0, 8.0], [-1, -1, 2, 0.0], [-0.8, 0.2, 0.2, -0.0], [1200.0, 2000.0, 4000.0, 20000.0]]}, "solution": {"x": 3, "y": 8, "z": 0}, "entities": [{"start": 80, "end": 85, "word": "Pi TV", "entity_group": "VAR", "score": 0.9999825152710801}, {"start": 88, "end": 98, "word": "Beta Video", "entity_group": "VAR", "score": 0.9999734672031954}, {"start": 103, "end": 113, "word": "Gamma Live", "entity_group": "VAR", "score": 0.9999813823074711}, {"start": 195, "end": 200, "word": "Pi TV", "entity_group": "VAR", "score": 0.9999814021339788}, {"start": 224, "end": 228, "word": "1200", "entity_group": "PARAM", "score": 0.9994720044623997}, {"start": 242, "end": 246, "word": "2000", "entity_group": "PARAM", "score": 0.9996433059297629}, {"start": 247, "end": 254, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9886486491992942}, {"start": 260, "end": 270, "word": "Beta Video", "entity_group": "VAR", "score": 0.9999723394467583}, {"start": 294, "end": 298, "word": "2000", "entity_group": "PARAM", "score": 0.999584045545939}, {"start": 312, "end": 316, "word": "5000", "entity_group": "PARAM", "score": 0.999643305947859}, {"start": 317, "end": 324, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9886484698031812}, {"start": 330, "end": 340, "word": "Gamma Live", "entity_group": "VAR", "score": 0.9999723389188241}, {"start": 364, "end": 368, "word": "4000", "entity_group": "PARAM", "score": 0.9997274890487582}, {"start": 382, "end": 386, "word": "9000", "entity_group": "PARAM", "score": 0.9996025218663177}, {"start": 387, "end": 394, "word": "viewers", "entity_group": "OBJ_NAME", "score": 0.9940489226770745}, {"start": 397, "end": 407, "word": "Beta Video", "entity_group": "VAR", "score": 0.9999624017611048}, {"start": 408, "end": 425, "word": "limits the number", "entity_group": "CONST_DIR", "score": 0.9784711417519975}, {"start": 466, "end": 467, "word": "8", "entity_group": "LIMIT", "score": 0.9991286818588683}, {"start": 515, "end": 522, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9962847705772562}, {"start": 525, "end": 530, "word": "third", "entity_group": "LIMIT", "score": 0.9188518811771808}, {"start": 566, "end": 576, "word": "Gamma Live", "entity_group": "VAR", "score": 0.9999770421384148}, {"start": 583, "end": 590, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9928622224712754}, {"start": 594, "end": 598, "word": "20 %", "entity_group": "LIMIT", "score": 0.9508465341238829}, {"start": 615, "end": 620, "word": "Pi TV", "entity_group": "VAR", "score": 0.9999734986336141}, {"start": 637, "end": 643, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9972870734495944}, {"start": 649, "end": 654, "word": "20000", "entity_group": "LIMIT", "score": 0.9995758719204115}, {"start": 742, "end": 750, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9983655229568817}, {"start": 751, "end": 759, "word": "audience", "entity_group": "OBJ_NAME", "score": 0.9971698320602905}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPiTV = intvar(0, 999999999)  # Number of commercials on Pi TV\nBetaVideo = intvar(0, 999999999)  # Number of commercials on Beta Video\nGammaLive = intvar(0, 999999999)  # Number of commercials on Gamma Live\n\n# Constraints\nm = Model()\n\n# Weekly budget constraint ($20000):\nm += 1200 * PiTV + 2000 * BetaVideo + 4000 * GammaLive <= 20000\n# Beta Video limits the number of commercials to 8:\nm += BetaVideo <= 8\n# At most a third of all commercials should occur on Gamma Live:\nm += GammaLive <= (1/3) * (PiTV + BetaVideo + GammaLive)\n# A minimum of 20% of all commercials should occur on Pi TV:\nm += PiTV >= 0.20 * (PiTV + BetaVideo + GammaLive)\n\n# Objective\n# Maximize audience (2000 viewers per Pi TV commercial, 5000 viewers per Beta Video commercial, 9000 viewers per Gamma Live commercial):\nm.maximize(2000 * PiTV + 5000 * BetaVideo + 9000 * GammaLive)\n"}}
{"237749763": {"document": "A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?", "order_mapping": {"temperature check": 0, "blood test": 1, "blood tests": 1, "test": 1, "check": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of patients", "vars": ["temperature check", "blood test"]}, "const_declarations": [{"type": "linear", "direction": "only", "limit": "22000", "terms": {"temperature check": "2", "blood test": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "45", "var": "blood tests", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "temperature check", "direction": "at least", "param": "5 times", "y_var": "blood test", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[2.0, 10.0, 22000.0], [-0.0, -1.0, -45.0], [-1.0, 5.0, -0.0]]}, "solution": {"x": 10775, "y": 45}, "entities": [{"start": 42, "end": 59, "word": "temperature check", "entity_group": "VAR", "score": 0.999873061322142}, {"start": 69, "end": 79, "word": "blood test", "entity_group": "VAR", "score": 0.9998783449776881}, {"start": 100, "end": 117, "word": "temperature check", "entity_group": "VAR", "score": 0.9999851258751241}, {"start": 124, "end": 125, "word": "2", "entity_group": "PARAM", "score": 0.9996977285564123}, {"start": 142, "end": 152, "word": "blood test", "entity_group": "VAR", "score": 0.9999673066988177}, {"start": 159, "end": 161, "word": "10", "entity_group": "PARAM", "score": 0.9995818145791546}, {"start": 213, "end": 221, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984041883451756}, {"start": 222, "end": 224, "word": "45", "entity_group": "LIMIT", "score": 0.9991908807101813}, {"start": 225, "end": 236, "word": "blood tests", "entity_group": "VAR", "score": 0.9999614259753618}, {"start": 249, "end": 266, "word": "temperature check", "entity_group": "VAR", "score": 0.9999548468270297}, {"start": 353, "end": 370, "word": "temperature check", "entity_group": "VAR", "score": 0.9999254789826147}, {"start": 384, "end": 392, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9954239201188112}, {"start": 393, "end": 400, "word": "5 times", "entity_group": "PARAM", "score": 0.7906412761334809}, {"start": 416, "end": 426, "word": "blood test", "entity_group": "VAR", "score": 0.9999769249551149}, {"start": 471, "end": 476, "word": "total", "entity_group": "CONST_DIR", "score": 0.9947785552984656}, {"start": 480, "end": 485, "word": "22000", "entity_group": "LIMIT", "score": 0.9994342380727369}, {"start": 551, "end": 559, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996047040058145}, {"start": 564, "end": 582, "word": "number of patients", "entity_group": "OBJ_NAME", "score": 0.9883688918824024}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTemperatureCheck = intvar(0, 999999999)  # Number of temperature checks done\nBloodTest = intvar(0, 999999999)  # Number of blood tests done\n\n# Constraints\nm = Model()\n\n# The total time for all tests should not exceed 22000 staff minutes:\nm += 2 * TemperatureCheck + 10 * BloodTest <= 22000\n# At least 45 blood tests must be conducted:\nm += BloodTest >= 45\n# The temperature check is performed at least 5 times as many as the blood test:\nm += TemperatureCheck >= 5 * BloodTest\n\n# Objective\n# Maximize the number of patients seen (sum of temperature checks and blood tests):\nm.maximize(TemperatureCheck + BloodTest)\n"}}
{"-568965344": {"document": "The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.", "order_mapping": {"wide pipes": 0, "narrow pipes": 1, "Wide pipes": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of pipes", "vars": ["wide pipes", "narrow pipes"]}, "const_declarations": [{"type": "xby", "x_var": "wide pipes", "direction": "at most", "param": "a third", "y_var": "narrow pipes", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "wide pipes", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "900", "terms": {"narrow pipes": "15", "Wide pipes": "25"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[3.0, -1, 0.0], [-1.0, -0.0, -5.0], [-25.0, -15.0, -900.0]]}, "solution": {"x": 12, "y": 40}, "entities": [{"start": 118, "end": 128, "word": "wide pipes", "entity_group": "VAR", "score": 0.9999344201066023}, {"start": 132, "end": 144, "word": "narrow pipes", "entity_group": "VAR", "score": 0.9999686092913075}, {"start": 147, "end": 157, "word": "Wide pipes", "entity_group": "VAR", "score": 0.9999669575350135}, {"start": 172, "end": 174, "word": "25", "entity_group": "PARAM", "score": 0.9997062383436067}, {"start": 184, "end": 189, "word": "water", "entity_group": "OBJ_NAME", "score": 0.9634829152199035}, {"start": 205, "end": 217, "word": "narrow pipes", "entity_group": "VAR", "score": 0.9999787344596763}, {"start": 232, "end": 234, "word": "15", "entity_group": "PARAM", "score": 0.9997327072564725}, {"start": 244, "end": 249, "word": "water", "entity_group": "OBJ_NAME", "score": 0.9295562591056599}, {"start": 296, "end": 306, "word": "wide pipes", "entity_group": "VAR", "score": 0.9999701503446438}, {"start": 314, "end": 321, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976960723859809}, {"start": 324, "end": 329, "word": "third", "entity_group": "PARAM", "score": 0.9974407918334127}, {"start": 344, "end": 356, "word": "narrow pipes", "entity_group": "VAR", "score": 0.9999539367668725}, {"start": 380, "end": 388, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998969992631357}, {"start": 389, "end": 392, "word": "900", "entity_group": "LIMIT", "score": 0.9996809652898958}, {"start": 439, "end": 447, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988799646075531}, {"start": 448, "end": 449, "word": "5", "entity_group": "LIMIT", "score": 0.9995595161317565}, {"start": 450, "end": 460, "word": "wide pipes", "entity_group": "VAR", "score": 0.999896486833068}, {"start": 476, "end": 484, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9455880227076365}, {"start": 495, "end": 510, "word": "number of pipes", "entity_group": "OBJ_NAME", "score": 0.9827607436729623}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWidePipes = intvar(0, 999999999)  # Number of wide pipes\nNarrowPipes = intvar(0, 999999999)  # Number of narrow pipes\n\n# Constraints\nm = Model()\n\n# The number of wide pipes can be at most a third the number of narrow pipes:\nm += WidePipes <= (1/3) * NarrowPipes\n# At least 5 wide pipes must be used:\nm += WidePipes >= 5\n# At least 900 units of water transported every minute (25 units per wide pipe, 15 units per narrow pipe):\nm += 25 * WidePipes + 15 * NarrowPipes >= 900\n\n# Objective\n# Minimize the total number of pipes required:\nm.minimize(WidePipes + NarrowPipes)\n"}}
{"181608358": {"document": "A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?", "order_mapping": {"carts": 0, "trolleys": 1, "Carts": 0, "Trolleys": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total number of workers", "terms": {"Carts": "2", "Trolleys": "4"}}, "const_declarations": [{"type": "linear", "direction": "has to deliver", "limit": "100", "terms": {"Carts": "5", "Trolleys": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "trolleys", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "maximum", "limit": "40%", "var": "trolleys", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [2.0, 4.0], "constraints": [[-5.0, -7.0, -100.0], [-0.0, -1.0, -12.0], [-0.4, 0.6, 0.0]]}, "solution": {"x": 18, "y": 12}, "entities": [{"start": 53, "end": 58, "word": "carts", "entity_group": "VAR", "score": 0.9991409527604186}, {"start": 62, "end": 70, "word": "trolleys", "entity_group": "VAR", "score": 0.9996149035770477}, {"start": 73, "end": 78, "word": "Carts", "entity_group": "VAR", "score": 0.9997353816484934}, {"start": 93, "end": 94, "word": "5", "entity_group": "PARAM", "score": 0.9996928074339557}, {"start": 130, "end": 131, "word": "2", "entity_group": "PARAM", "score": 0.9996864451281605}, {"start": 142, "end": 150, "word": "Trolleys", "entity_group": "VAR", "score": 0.9997963869621771}, {"start": 165, "end": 166, "word": "7", "entity_group": "PARAM", "score": 0.9995890939398525}, {"start": 202, "end": 203, "word": "4", "entity_group": "PARAM", "score": 0.9992621298120323}, {"start": 204, "end": 211, "word": "workers", "entity_group": "OBJ_NAME", "score": 0.9973949793964719}, {"start": 228, "end": 236, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984625262772867}, {"start": 237, "end": 239, "word": "12", "entity_group": "LIMIT", "score": 0.9996955428235741}, {"start": 240, "end": 248, "word": "trolleys", "entity_group": "VAR", "score": 0.9991080902508553}, {"start": 284, "end": 291, "word": "maximum", "entity_group": "CONST_DIR", "score": 0.9974688888919422}, {"start": 295, "end": 299, "word": "40 %", "entity_group": "LIMIT", "score": 0.9772723224774585}, {"start": 335, "end": 343, "word": "trolleys", "entity_group": "VAR", "score": 0.9998244293811651}, {"start": 388, "end": 391, "word": "100", "entity_group": "LIMIT", "score": 0.9990244402338306}, {"start": 473, "end": 481, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9470234126247009}, {"start": 492, "end": 509, "word": "number of workers", "entity_group": "OBJ_NAME", "score": 0.9811824207619224}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCarts = intvar(0, 999999999)  # Number of carts used\nTrolleys = intvar(0, 999999999)  # Number of trolleys used\n\n# Constraints\nm = Model()\n\n# There must be at least 12 trolleys to be used:\nm += Trolleys >= 12\n# Only a maximum of 40% of the transportation can be using trolleys:\nm += Trolleys <= 0.4 * (Carts + Trolleys)\n# The organizer has to deliver at a rate of 100 kg/min of equipment:\nm += 5 * Carts + 7 * Trolleys >= 100\n\n# Objective\n# Minimize the total number of workers (2 workers per cart, 4 workers per trolley):\nm.minimize(2 * Carts + 4 * Trolleys)\n"}}
{"412957315": {"document": "Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?", "order_mapping": {"subsoil": 0, "topsoil": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of water", "terms": {"subsoil": "10", "topsoil": "6"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "150", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "10", "var": "topsoil", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "topsoil", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [10.0, 6.0], "constraints": [[1.0, 1.0, 150.0], [-0.0, -1.0, -10.0], [-0.3, 0.7, 0.0]]}, "solution": {"x": 24, "y": 10}, "entities": [{"start": 5, "end": 12, "word": "subsoil", "entity_group": "VAR", "score": 0.9997027778383997}, {"start": 17, "end": 24, "word": "topsoil", "entity_group": "VAR", "score": 0.9963202265982493}, {"start": 71, "end": 78, "word": "subsoil", "entity_group": "VAR", "score": 0.9984541971231158}, {"start": 88, "end": 90, "word": "10", "entity_group": "PARAM", "score": 0.9992574910654604}, {"start": 134, "end": 141, "word": "topsoil", "entity_group": "VAR", "score": 0.9992674033207095}, {"start": 151, "end": 152, "word": "6", "entity_group": "PARAM", "score": 0.9993661841305158}, {"start": 280, "end": 289, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978807780194328}, {"start": 290, "end": 293, "word": "150", "entity_group": "LIMIT", "score": 0.9990008470364525}, {"start": 302, "end": 309, "word": "topsoil", "entity_group": "VAR", "score": 0.9981916738238615}, {"start": 314, "end": 321, "word": "subsoil", "entity_group": "VAR", "score": 0.998937930531275}, {"start": 347, "end": 355, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9992219027033631}, {"start": 356, "end": 358, "word": "10", "entity_group": "LIMIT", "score": 0.9997483673537694}, {"start": 367, "end": 374, "word": "topsoil", "entity_group": "VAR", "score": 0.9975222369147345}, {"start": 400, "end": 407, "word": "topsoil", "entity_group": "VAR", "score": 0.9996898314375557}, {"start": 428, "end": 435, "word": "at most", "entity_group": "CONST_DIR", "score": 0.997683321752942}, {"start": 436, "end": 440, "word": "30 %", "entity_group": "LIMIT", "score": 0.7411317381874674}, {"start": 468, "end": 475, "word": "topsoil", "entity_group": "VAR", "score": 0.9994565601032169}, {"start": 520, "end": 528, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986262747580643}, {"start": 539, "end": 554, "word": "amount of water", "entity_group": "OBJ_NAME", "score": 0.9812847879880642}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSubsoil = intvar(0, 999999999)  # Number of bags of subsoil\nTopsoil = intvar(0, 999999999)  # Number of bags of topsoil\n\n# Constraints\nm = Model()\n\n# The total number of bags (subsoil + topsoil) cannot exceed 150:\nm += Subsoil + Topsoil <= 150\n# At least 10 bags of topsoil must be used:\nm += Topsoil >= 10\n# At most 30% of all bags can be topsoil:\nm += Topsoil <= 0.30 * (Subsoil + Topsoil)\n\n# Objective\n# Minimize the total amount of water required (10 units for subsoil, 6 units for topsoil):\nm.minimize(10 * Subsoil + 6 * Topsoil)\n"}}
{"1714978926": {"document": "An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute.  The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?", "order_mapping": {"densely-seated one": 0, "loosely-seated one": 1, "densely-seated ski lift": 0, "loosely-seated ski": 1, "densely-seated ski": 0, "loosely-seated lift": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "the total number of ski lifts", "vars": ["densely-seated one", "loosely-seated one"]}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "five", "var": "loosely-seated ski", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"loosely-seated ski": "20", "densely-seated ski lift": "45"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "940", "terms": {"densely-seated ski": "30", "loosely-seated lift": "22"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-0.0, -1.0, -5.0], [-45.0, -20.0, -1000.0], [30.0, 22.0, 940.0]]}, "solution": {"x": 20, "y": 5}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nDenselySeated = intvar(0, 999999999)  # Number of densely-seated ski lifts\nLooselySeated = intvar(0, 999999999)  # Number of loosely-seated ski lifts\n\n# Constraints\nm = Model()\n\n# There must be at least five loosely-seated ski lifts:\nm += LooselySeated >= 5\n# The ski resort needs at least 1000 guests every minute:\nm += 45 * DenselySeated + 20 * LooselySeated >= 1000\n# The ski resort has available 940 units of electricity:\nm += 30 * DenselySeated + 22 * LooselySeated <= 940\n\n# Objective\n# Minimize the total number of ski lifts needed:\nm.minimize(DenselySeated + LooselySeated)\n"}}
{"-1448607152": {"document": "A strata-management company is looking into purchasing two types of air conditioners, a low-power and a high-power model. A low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity every day. A high-power model can cool down 17 housing units and uses 250 units of electricity every day. Since the low-powered model is not good for the aesthetics, the strata decided to limit the number of low-powered models to only 30% and at least 7 high-powered models must be used. If the apartment needs to condition at least 250 housing units and has 3400 units of electricity available, how many of each air conditioner should the strata company buy to minimize the total number of air conditioners?", "order_mapping": {"low-power": 0, "high-power model": 1, "low-powered air": 0, "low-powered model": 0, "low-powered models": 0, "high-powered models": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "the total number of air conditioners", "vars": ["low-power", "high-power model"]}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "7", "var": "high-powered models", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "250", "terms": {"low-powered air": "12", "high-power model": "17"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3400", "terms": {"high-power model": "250", "low-powered air": "150"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "limit", "limit": "30%", "var": "low-powered models", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-0.0, -1.0, -7.0], [-12.0, -17.0, -250.0], [150.0, 250.0, 3400.0], [0.7, -0.3, 0.0]]}, "solution": null, "entities": [{"start": 91, "end": 102, "word": "low - power", "entity_group": "VAR", "score": 0.9995934561795693}, {"start": 109, "end": 127, "word": "high - power model", "entity_group": "VAR", "score": 0.9994430030145437}, {"start": 132, "end": 161, "word": "low - powered air conditioner", "entity_group": "VAR", "score": 0.9983109413290623}, {"start": 176, "end": 178, "word": "12", "entity_group": "PARAM", "score": 0.9995351843622844}, {"start": 202, "end": 205, "word": "150", "entity_group": "PARAM", "score": 0.9997408462250175}, {"start": 241, "end": 259, "word": "high - power model", "entity_group": "VAR", "score": 0.9994930266297168}, {"start": 274, "end": 276, "word": "17", "entity_group": "PARAM", "score": 0.9993392784582182}, {"start": 300, "end": 303, "word": "250", "entity_group": "PARAM", "score": 0.999738107273205}, {"start": 347, "end": 366, "word": "low - powered model", "entity_group": "VAR", "score": 0.9984989274095117}, {"start": 422, "end": 427, "word": "limit", "entity_group": "CONST_DIR", "score": 0.996258428902199}, {"start": 442, "end": 462, "word": "low - powered models", "entity_group": "VAR", "score": 0.9965140522721384}, {"start": 466, "end": 470, "word": "only", "entity_group": "CONST_DIR", "score": 0.9972353072325556}, {"start": 471, "end": 473, "word": "30", "entity_group": "LIMIT", "score": 0.9981018961332226}, {"start": 480, "end": 488, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988510967676956}, {"start": 489, "end": 490, "word": "7", "entity_group": "LIMIT", "score": 0.9995640732175263}, {"start": 491, "end": 512, "word": "high - powered models", "entity_group": "VAR", "score": 0.9977609778087858}, {"start": 564, "end": 572, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988840536374062}, {"start": 573, "end": 576, "word": "250", "entity_group": "LIMIT", "score": 0.9995217531912551}, {"start": 599, "end": 603, "word": "3400", "entity_group": "LIMIT", "score": 0.9997364654056582}, {"start": 625, "end": 634, "word": "available", "entity_group": "CONST_DIR", "score": 0.9987769775962745}, {"start": 703, "end": 711, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9976638404786757}, {"start": 722, "end": 748, "word": "number of air conditioners", "entity_group": "OBJ_NAME", "score": 0.975551811418864}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLowPower = intvar(0, 999999999)  # Number of low-powered air conditioners\nHighPower = intvar(0, 999999999)  # Number of high-powered air conditioners\n\n# Constraints\nm = Model()\n\n# At least 7 high-powered models must be used:\nm += HighPower >= 7\n# The apartment needs to condition at least 250 housing units:\nm += 12 * LowPower + 17 * HighPower >= 250\n# The apartment has 3400 units of electricity available:\nm += 150 * LowPower + 250 * HighPower <= 3400\n# Limit the number of low-powered models to only 30% of the total number of air conditioners:\nm += LowPower <= 0.3 * (LowPower + HighPower)\n\n# Objective\n# Minimize the total number of air conditioners:\nm.minimize(LowPower + HighPower)\n"}}
{"1461222631": {"document": "A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?", "order_mapping": {"calcium pills": 0, "vitamin D pills": 1, "calcium pill": 0, "vitamin D pill": 1, "vitamin D": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"calcium pill": "5", "vitamin D pill": "6"}}, "const_declarations": [{"type": "sum", "direction": "at least", "limit": "130", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "vitamin D pills", "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "calcium pills", "direction": "more", "y_var": "vitamin D pills", "operator": "GREATER"}], "canonical": {"objective": [5.0, 6.0], "constraints": [[-1.0, -1.0, -130.0], [-0.0, -1.0, -40.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 90, "y": 40}, "entities": [{"start": 16, "end": 29, "word": "calcium pills", "entity_group": "VAR", "score": 0.9999809866619744}, {"start": 34, "end": 49, "word": "vitamin D pills", "entity_group": "VAR", "score": 0.9987090652520423}, {"start": 77, "end": 89, "word": "calcium pill", "entity_group": "VAR", "score": 0.999982809013235}, {"start": 96, "end": 97, "word": "5", "entity_group": "PARAM", "score": 0.9996349989195262}, {"start": 133, "end": 147, "word": "vitamin D pill", "entity_group": "VAR", "score": 0.9997214911801002}, {"start": 154, "end": 155, "word": "6", "entity_group": "PARAM", "score": 0.9995583983854917}, {"start": 219, "end": 227, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9993372953151995}, {"start": 228, "end": 231, "word": "130", "entity_group": "LIMIT", "score": 0.9997348382459881}, {"start": 256, "end": 264, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981744497447648}, {"start": 265, "end": 267, "word": "40", "entity_group": "LIMIT", "score": 0.999712412248514}, {"start": 278, "end": 293, "word": "vitamin D pills", "entity_group": "VAR", "score": 0.9995771648466963}, {"start": 361, "end": 370, "word": "vitamin D", "entity_group": "VAR", "score": 0.9999050264450936}, {"start": 423, "end": 427, "word": "more", "entity_group": "CONST_DIR", "score": 0.9983390743332835}, {"start": 428, "end": 441, "word": "calcium pills", "entity_group": "VAR", "score": 0.9999591336961929}, {"start": 447, "end": 462, "word": "vitamin D pills", "entity_group": "VAR", "score": 0.9992633816707733}, {"start": 515, "end": 523, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9980103256535641}, {"start": 528, "end": 538, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9924587266280722}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCalciumPills = intvar(0, 999999999)  # Number of calcium pills taken\nVitaminDPills = intvar(0, 999999999)  # Number of vitamin D pills taken\n\n# Constraints\nm = Model()\n\n# Over a month, the student must take at least 130 pills of medication:\nm += CalciumPills + VitaminDPills >= 130\n# At least 40 should be vitamin D pills:\nm += VitaminDPills >= 40\n# The student must take more calcium pills than vitamin D pills:\nm += CalciumPills > VitaminDPills\n\n# Objective\n# Minimize the total time it takes for the medication to be effective:\nm.minimize(5 * CalciumPills + 6 * VitaminDPills)\n"}}
{"1687568297": {"document": "An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park $2 in prizes per hour whereas climbing games cost $3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.", "order_mapping": {"throwing": 0, "climbing games": 1, "Throwing games": 0, "throwing games": 0, "climbing": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total number of customers attracted every hour", "terms": {"climbing games": "8", "Throwing games": "15"}}, "const_declarations": [{"type": "xby", "x_var": "throwing games", "direction": "at least", "param": "twice", "y_var": "climbing games", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "climbing", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "100", "terms": {"Throwing games": "2", "climbing games": "3"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-15.0, -8.0], "constraints": [[-1.0, 2.0, -0.0], [-0.0, -1.0, -5.0], [2.0, 3.0, 100.0]]}, "solution": {"x": 42, "y": 5}, "entities": [{"start": 43, "end": 51, "word": "throwing", "entity_group": "VAR", "score": 0.9992319750477244}, {"start": 56, "end": 70, "word": "climbing games", "entity_group": "VAR", "score": 0.9999805718050159}, {"start": 73, "end": 87, "word": "Throwing games", "entity_group": "VAR", "score": 0.9999831404568785}, {"start": 96, "end": 98, "word": "15", "entity_group": "PARAM", "score": 0.9995991762687341}, {"start": 124, "end": 138, "word": "climbing games", "entity_group": "VAR", "score": 0.9999861845889677}, {"start": 147, "end": 148, "word": "8", "entity_group": "PARAM", "score": 0.9991623889283675}, {"start": 172, "end": 186, "word": "Throwing games", "entity_group": "VAR", "score": 0.9999870928974554}, {"start": 214, "end": 215, "word": "2", "entity_group": "PARAM", "score": 0.9994609274486719}, {"start": 243, "end": 257, "word": "climbing games", "entity_group": "VAR", "score": 0.9999111021660202}, {"start": 265, "end": 266, "word": "3", "entity_group": "PARAM", "score": 0.9996835254510699}, {"start": 294, "end": 308, "word": "throwing games", "entity_group": "VAR", "score": 0.9999832009081021}, {"start": 324, "end": 330, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9998373601938635}, {"start": 347, "end": 355, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976841426716109}, {"start": 356, "end": 361, "word": "twice", "entity_group": "PARAM", "score": 0.9952486325288906}, {"start": 370, "end": 384, "word": "throwing games", "entity_group": "VAR", "score": 0.9999804188828062}, {"start": 388, "end": 402, "word": "climbing games", "entity_group": "VAR", "score": 0.9999787878790415}, {"start": 415, "end": 423, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987901286721591}, {"start": 424, "end": 425, "word": "5", "entity_group": "LIMIT", "score": 0.9997608181656029}, {"start": 440, "end": 448, "word": "climbing", "entity_group": "VAR", "score": 0.9997949996063671}, {"start": 482, "end": 489, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9962353632718955}, {"start": 492, "end": 495, "word": "100", "entity_group": "LIMIT", "score": 0.9992250065720278}, {"start": 519, "end": 527, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9847186599150316}, {"start": 538, "end": 557, "word": "number of customers", "entity_group": "OBJ_NAME", "score": 0.9805545889231434}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nThrowingGames = intvar(0, 999999999)  # Number of throwing games\nClimbingGames = intvar(0, 999999999)  # Number of climbing games\n\n# Constraints\nm = Model()\n\n# There must be at least twice as many throwing games as climbing games:\nm += ThrowingGames >= 2 * ClimbingGames\n# At least 5 games must be climbing:\nm += ClimbingGames >= 5\n# The amusement park can have at most $100 in prizes every hour (Throwing games cost $2/hour, Climbing games cost $3/hour):\nm += 2 * ThrowingGames + 3 * ClimbingGames <= 100\n\n# Objective\n# Maximize the total number of customers attracted every hour (Throwing games attract 15 customers/hour, Climbing games attract 8 customers/hour):\nm.maximize(15 * ThrowingGames + 8 * ClimbingGames)\n"}}
{"450578779": {"document": "In a science fair, there are two types of tables that can be used to display the children\u2019s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?", "order_mapping": {"circular tables": 0, "rectangular tables": 1, "circular table": 0, "rectangular table": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of catered guests", "terms": {"circular tables": "8", "rectangular tables": "12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "300", "terms": {"circular tables": "4", "rectangular tables": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "500", "terms": {"circular tables": "5", "rectangular tables": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1900", "terms": {"circular table": "15", "rectangular table": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-8.0, -12.0], "constraints": [[-4.0, -4.0, -300.0], [-5.0, -4.0, -500.0], [15.0, 20.0, 1900.0]]}, "solution": {"x": 60, "y": 50}, "entities": [{"start": 123, "end": 138, "word": "circular tables", "entity_group": "VAR", "score": 0.9999078429581273}, {"start": 141, "end": 142, "word": "4", "entity_group": "PARAM", "score": 0.9991079363587136}, {"start": 161, "end": 162, "word": "5", "entity_group": "PARAM", "score": 0.999683193305442}, {"start": 213, "end": 214, "word": "8", "entity_group": "PARAM", "score": 0.999598326269506}, {"start": 231, "end": 249, "word": "rectangular tables", "entity_group": "VAR", "score": 0.9998806006712839}, {"start": 252, "end": 253, "word": "4", "entity_group": "PARAM", "score": 0.9991079294532328}, {"start": 272, "end": 273, "word": "4", "entity_group": "PARAM", "score": 0.9996839685040081}, {"start": 324, "end": 326, "word": "12", "entity_group": "PARAM", "score": 0.999631112138101}, {"start": 351, "end": 365, "word": "circular table", "entity_group": "VAR", "score": 0.9999208001705314}, {"start": 375, "end": 377, "word": "15", "entity_group": "PARAM", "score": 0.9995633640061451}, {"start": 404, "end": 421, "word": "rectangular table", "entity_group": "VAR", "score": 0.9999151455887874}, {"start": 431, "end": 433, "word": "20", "entity_group": "PARAM", "score": 0.9995388429569246}, {"start": 492, "end": 500, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985503011341393}, {"start": 501, "end": 504, "word": "500", "entity_group": "LIMIT", "score": 0.9997160656939942}, {"start": 522, "end": 525, "word": "300", "entity_group": "LIMIT", "score": 0.9993940496353355}, {"start": 566, "end": 575, "word": "available", "entity_group": "CONST_DIR", "score": 0.994659075232536}, {"start": 576, "end": 580, "word": "1900", "entity_group": "LIMIT", "score": 0.9991412027437923}, {"start": 649, "end": 657, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996663207026407}, {"start": 662, "end": 686, "word": "number of catered guests", "entity_group": "OBJ_NAME", "score": 0.9576174712698042}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCircularTables = intvar(0, 999999999)  # Number of circular tables\nRectangularTables = intvar(0, 999999999)  # Number of rectangular tables\n\n# Constraints\nm = Model()\n\n# The science fair must be able to fit at least 300 poster boards:\nm += 4 * CircularTables + 4 * RectangularTables >= 300\n# The science fair must be able to fit at least 500 participants:\nm += 5 * CircularTables + 4 * RectangularTables >= 500\n# The science fair has available 1900 units of space:\nm += 15 * CircularTables + 20 * RectangularTables <= 1900\n\n# Objective\n# Maximize the number of catered guests (8 guests per circular table, 12 guests per rectangular table):\nm.maximize(8 * CircularTables + 12 * RectangularTables)\n"}}
{"-145322229": {"document": "An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?", "order_mapping": {"high-volume and": 0, "low-volume one": 1, "high-volume pipe": 0, "low-volume pipe": 1, "high-volume ones": 0, "low-volume pipes": 1}, "obj_declaration": {"type": "objvar", "direction": "reduce", "name": "number of pipes", "vars": ["high-volume and", "low-volume one"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "150000", "terms": {"high-volume pipe": "10000", "low-volume pipe": "5000"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "have", "limit": "160", "terms": {"low-volume pipe": "5", "high-volume pipe": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "35 percent", "var": "high-volume ones", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "minimum", "limit": "8", "var": "low-volume pipes", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-10000.0, -5000.0, -150000.0], [12.0, 5.0, 160.0], [0.65, -0.35, 0.0], [-0.0, -1.0, -8.0]]}, "solution": {"x": 5, "y": 20}, "entities": [{"start": 50, "end": 63, "word": "high - volume", "entity_group": "VAR", "score": 0.9995010723706516}, {"start": 70, "end": 82, "word": "low - volume", "entity_group": "VAR", "score": 0.9991969575638102}, {"start": 105, "end": 123, "word": "high - volume pipe", "entity_group": "VAR", "score": 0.999453195370795}, {"start": 131, "end": 136, "word": "10000", "entity_group": "PARAM", "score": 0.9996779707392045}, {"start": 175, "end": 177, "word": "12", "entity_group": "PARAM", "score": 0.999698046039561}, {"start": 275, "end": 292, "word": "low - volume pipe", "entity_group": "VAR", "score": 0.9994700053862136}, {"start": 300, "end": 304, "word": "5000", "entity_group": "PARAM", "score": 0.9996275810528814}, {"start": 320, "end": 321, "word": "5", "entity_group": "PARAM", "score": 0.9996619352828743}, {"start": 443, "end": 451, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979924548564512}, {"start": 452, "end": 458, "word": "150000", "entity_group": "LIMIT", "score": 0.9995362959663088}, {"start": 486, "end": 490, "word": "have", "entity_group": "CONST_DIR", "score": 0.9957965023432386}, {"start": 491, "end": 494, "word": "160", "entity_group": "LIMIT", "score": 0.9981883778300555}, {"start": 543, "end": 561, "word": "high - volume pipe", "entity_group": "VAR", "score": 0.9993583004923975}, {"start": 606, "end": 613, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985728941270732}, {"start": 614, "end": 624, "word": "35 percent", "entity_group": "LIMIT", "score": 0.9803505850345576}, {"start": 645, "end": 663, "word": "high - volume ones", "entity_group": "VAR", "score": 0.9991590210057855}, {"start": 697, "end": 704, "word": "minimum", "entity_group": "CONST_DIR", "score": 0.9959712751815268}, {"start": 708, "end": 709, "word": "8", "entity_group": "LIMIT", "score": 0.9996027234421028}, {"start": 710, "end": 728, "word": "low - volume pipes", "entity_group": "VAR", "score": 0.9992955054631877}, {"start": 777, "end": 783, "word": "reduce", "entity_group": "OBJ_DIR", "score": 0.6511361626180799}, {"start": 794, "end": 809, "word": "number of pipes", "entity_group": "OBJ_NAME", "score": 0.9882435853325625}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHighVolumePipes = intvar(0, 999999999)  # Number of high-volume pipes used\nLowVolumePipes = intvar(0, 999999999)  # Number of low-volume pipes used\n\n# Constraints\nm = Model()\n\n# Every day, the company needs to meet the demands of at least 150000 US gallons of gas:\nm += 10000 * HighVolumePipes + 5000 * LowVolumePipes >= 150000\n# The company has 160 technicians that are on their staff:\nm += 12 * HighVolumePipes + 5 * LowVolumePipes <= 160\n# At most 35 percent of the pipes can be high-volume ones:\nm += HighVolumePipes <= 0.35 * (HighVolumePipes + LowVolumePipes)\n# There must be a minimum of 8 low-volume pipes:\nm += LowVolumePipes >= 8\n\n# Objective\n# Reduce the total number of pipes required:\nm.minimize(HighVolumePipes + LowVolumePipes)\n"}}
{"-1770860412": {"document": "A hospital hires ultrasound technicians and graduate researchers to image patients. An ultrasound technician works 8 hours per shift while a graduate researcher works 5 hours per shift. Ultrasound technicians are paid $300 per shift while graduate researchers are paid $100 per shift. However, due to regulations, there must be twice as many ultrasound technician shifts than graduate researcher shifts. Currently, the hospital needs 500 hours of ultrasound services to meet needs. If the hospital has a budget of $14000, how many of each worker certified to use the ultrasound should be scheduled to reduce the total number of workers?", "order_mapping": {"ultrasound technicians": 0, "graduate researchers": 1, "ultrasound technician": 0, "graduate researcher": 1, "Ultrasound technicians": 0}, "obj_declaration": {"type": "objvar", "direction": "reduce", "name": "number of workers", "vars": ["ultrasound technicians", "graduate researchers"]}, "const_declarations": [{"type": "xby", "x_var": "ultrasound technician", "direction": "must be", "param": "twice", "y_var": "graduate researcher", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "14000", "terms": {"Ultrasound technicians": "300", "graduate researchers": "100"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "needs", "limit": "500", "terms": {"ultrasound technician": "8", "graduate researcher": "5"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 2.0, -0.0], [300.0, 100.0, 14000.0], [-8.0, -5.0, -500.0]]}, "solution": null, "entities": [{"start": 17, "end": 39, "word": "ultrasound technicians", "entity_group": "VAR", "score": 0.9999702490300678}, {"start": 44, "end": 64, "word": "graduate researchers", "entity_group": "VAR", "score": 0.9999896369062883}, {"start": 88, "end": 109, "word": "ultrasound technician", "entity_group": "VAR", "score": 0.9999823922371675}, {"start": 116, "end": 117, "word": "8", "entity_group": "PARAM", "score": 0.9996809445419115}, {"start": 142, "end": 161, "word": "graduate researcher", "entity_group": "VAR", "score": 0.9999587789213739}, {"start": 168, "end": 169, "word": "5", "entity_group": "PARAM", "score": 0.9996082014838678}, {"start": 188, "end": 210, "word": "Ultrasound technicians", "entity_group": "VAR", "score": 0.9999435523835041}, {"start": 222, "end": 225, "word": "300", "entity_group": "PARAM", "score": 0.9991293387460786}, {"start": 242, "end": 262, "word": "graduate researchers", "entity_group": "VAR", "score": 0.9999346984017042}, {"start": 274, "end": 277, "word": "100", "entity_group": "PARAM", "score": 0.9996085016595913}, {"start": 335, "end": 340, "word": "twice", "entity_group": "PARAM", "score": 0.9973375925492249}, {"start": 349, "end": 370, "word": "ultrasound technician", "entity_group": "VAR", "score": 0.9999939234537575}, {"start": 383, "end": 402, "word": "graduate researcher", "entity_group": "VAR", "score": 0.9999930175380222}, {"start": 443, "end": 446, "word": "500", "entity_group": "LIMIT", "score": 0.9995487806070864}, {"start": 514, "end": 520, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9855149778151496}, {"start": 526, "end": 531, "word": "14000", "entity_group": "LIMIT", "score": 0.9988851489310587}, {"start": 613, "end": 619, "word": "reduce", "entity_group": "OBJ_DIR", "score": 0.9374106724335034}, {"start": 624, "end": 647, "word": "total number of workers", "entity_group": "OBJ_NAME", "score": 0.9803670005069783}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nUltrasoundTechnicians = intvar(0, 999999999)  # Number of ultrasound technician shifts\nGraduateResearchers = intvar(0, 999999999)  # Number of graduate researcher shifts\n\n# Constraints\nm = Model()\n\n# There must be twice as many ultrasound technician shifts than graduate researcher shifts:\nm += UltrasoundTechnicians == 2 * GraduateResearchers\n# The hospital has a budget of $14000:\nm += 300 * UltrasoundTechnicians + 100 * GraduateResearchers <= 14000\n# The hospital needs 500 hours of ultrasound services:\nm += 8 * UltrasoundTechnicians + 5 * GraduateResearchers >= 500\n\n# Objective\n# Reduce the total number of workers (Ultrasound Technicians + Graduate Researchers):\nm.minimize(UltrasoundTechnicians + GraduateResearchers)\n\n"}}
{"698081777": {"document": "A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?", "order_mapping": {"molars": 0, "canines": 1, "Molars": 0, "Canines": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of pain killer", "terms": {"Canines": "2.3", "Molars": "3"}}, "const_declarations": [{"type": "linear", "direction": "has", "limit": "3000", "terms": {"Molars": "20", "Canines": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "60%", "var": "canines", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "45", "var": "molars", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [3.0, 2.3], "constraints": [[20.0, 15.0, 3000.0], [0.6, -0.4, -0.0], [-1.0, -0.0, -45.0]]}, "solution": {"x": 45, "y": 68}, "entities": [{"start": 10, "end": 13, "word": "has", "entity_group": "CONST_DIR", "score": 0.9944873283824374}, {"start": 14, "end": 18, "word": "3000", "entity_group": "LIMIT", "score": 0.9989367837148052}, {"start": 59, "end": 65, "word": "molars", "entity_group": "VAR", "score": 0.9997193380833701}, {"start": 70, "end": 77, "word": "canines", "entity_group": "VAR", "score": 0.999375213818713}, {"start": 80, "end": 86, "word": "Molars", "entity_group": "VAR", "score": 0.9995153665732943}, {"start": 95, "end": 97, "word": "20", "entity_group": "PARAM", "score": 0.999715411159449}, {"start": 117, "end": 118, "word": "3", "entity_group": "PARAM", "score": 0.9997336291762944}, {"start": 128, "end": 139, "word": "pain killer", "entity_group": "OBJ_NAME", "score": 0.9888287691779566}, {"start": 142, "end": 149, "word": "Canines", "entity_group": "VAR", "score": 0.9991605367223244}, {"start": 158, "end": 160, "word": "15", "entity_group": "PARAM", "score": 0.9996698536033252}, {"start": 180, "end": 183, "word": "2.3", "entity_group": "PARAM", "score": 0.9997282618986323}, {"start": 193, "end": 204, "word": "pain killer", "entity_group": "OBJ_NAME", "score": 0.9947111979237121}, {"start": 248, "end": 255, "word": "canines", "entity_group": "VAR", "score": 0.9995687285778448}, {"start": 258, "end": 266, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991137190343725}, {"start": 267, "end": 271, "word": "60 %", "entity_group": "LIMIT", "score": 0.9737615608603137}, {"start": 302, "end": 309, "word": "canines", "entity_group": "VAR", "score": 0.9997820263132294}, {"start": 369, "end": 377, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983744702174435}, {"start": 378, "end": 380, "word": "45", "entity_group": "LIMIT", "score": 0.9997086720594293}, {"start": 381, "end": 387, "word": "molars", "entity_group": "VAR", "score": 0.9995345412932441}, {"start": 460, "end": 468, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986836282147434}, {"start": 473, "end": 494, "word": "amount of pain killer", "entity_group": "OBJ_NAME", "score": 0.97533043849682}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMolars = intvar(0, 999999999)  # Number of molars to be filled\nCanines = intvar(0, 999999999)  # Number of canines to be filled\n\n# Constraints\nm = Model()\n\n# Total resin used should not exceed 3000 units:\nm += 20 * Molars + 15 * Canines <= 3000\n# At least 60% of cavities filled must be in canines:\nm += Canines >= 0.6 * (Molars + Canines)\n# Dentist must reserve materials to fill at least 45 molars:\nm += Molars >= 45\n\n# Objective\n# Minimize the amount of pain killer needed (3 units for molars, 2.3 units for canines):\nm.minimize(3 * Molars + 2.3 * Canines)\n"}}
{"1378302908": {"document": "A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in $50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in $43 on tips.  The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?", "order_mapping": {"bikes": 0, "scooters": 1, "bike": 0, "scooter": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "tips received", "terms": {"bike": "50", "scooter": "43"}}, "const_declarations": [{"type": "sum", "direction": "available", "limit": "40", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "230", "terms": {"bike": "5", "scooter": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "320", "terms": {"scooter": "7", "bike": "10"}, "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "scooter", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-50.0, -43.0], "constraints": [[1.0, 1.0, 40.0], [5.0, 6.0, 230.0], [-10.0, -7.0, -320.0], [-0.0, -1.0, -5.0]]}, "solution": {"x": 35, "y": 5}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBikeShifts = intvar(0, 999999999)  # Number of shifts on bikes\nScooterShifts = intvar(0, 999999999)  # Number of shifts on scooters\n\n# Constraints\nm = Model()\n\n# Total number of shifts cannot exceed 40 per month:\nm += BikeShifts + ScooterShifts <= 40\n# Total energy used cannot exceed 230 units:\nm += 5 * BikeShifts + 6 * ScooterShifts <= 230\n# Must bring in at least 320 orders:\nm += 10 * BikeShifts + 7 * ScooterShifts >= 320\n# Must have at least 5 shifts on a scooter:\nm += ScooterShifts >= 5\n\n# Objective\n# Maximize tips received ($50 per bike shift, $43 per scooter shift):\nm.maximize(50 * BikeShifts + 43 * ScooterShifts)\n"}}
{"653949473": {"document": "A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?", "order_mapping": {"pop": 0, "R&B.": 1, "pop concert": 0, "R&B concert": 1, "R&B": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of concerts", "vars": ["pop", "R&B."]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10000", "terms": {"pop concert": "100", "R&B concert": "240"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "180", "terms": {"R&B concert": "4", "pop concert": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "R&B", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-100.0, -240.0, -10000.0], [2.0, 4.0, 180.0], [-0.4, 0.6, 0.0]]}, "solution": {"x": 40, "y": 25}, "entities": [{"start": 49, "end": 52, "word": "pop", "entity_group": "VAR", "score": 0.9994355225184813}, {"start": 57, "end": 61, "word": "R&B.", "entity_group": "VAR", "score": 0.9997102025655685}, {"start": 67, "end": 78, "word": "pop concert", "entity_group": "VAR", "score": 0.9999244269130324}, {"start": 93, "end": 96, "word": "100", "entity_group": "PARAM", "score": 0.9996272969777917}, {"start": 123, "end": 124, "word": "2", "entity_group": "PARAM", "score": 0.999695697579134}, {"start": 150, "end": 161, "word": "R&B concert", "entity_group": "VAR", "score": 0.9998837179122572}, {"start": 172, "end": 175, "word": "240", "entity_group": "PARAM", "score": 0.9996906310363667}, {"start": 203, "end": 204, "word": "4", "entity_group": "PARAM", "score": 0.9996391403420816}, {"start": 249, "end": 257, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9978643777682881}, {"start": 258, "end": 263, "word": "10000", "entity_group": "LIMIT", "score": 0.9996118808814588}, {"start": 294, "end": 303, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990619522074305}, {"start": 304, "end": 307, "word": "180", "entity_group": "LIMIT", "score": 0.9991259622440757}, {"start": 338, "end": 345, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976319250179881}, {"start": 354, "end": 358, "word": "40 %", "entity_group": "LIMIT", "score": 0.9653436373802843}, {"start": 378, "end": 381, "word": "R&B", "entity_group": "VAR", "score": 0.9991452038150356}, {"start": 399, "end": 408, "word": "pop songs", "entity_group": "VAR", "score": 0.9999705455254201}, {"start": 470, "end": 478, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9958257731906115}, {"start": 489, "end": 507, "word": "number of concerts", "entity_group": "OBJ_NAME", "score": 0.6721384531847278}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPopConcerts = intvar(0, 999999999)  # Number of pop concerts\nRBConcerts = intvar(0, 999999999)  # Number of R&B concerts\n\n# Constraints\nm = Model()\n\n# The singer must bring in at least 10000 audience members:\nm += 100 * PopConcerts + 240 * RBConcerts >= 10000\n# The singer only has 180 days available for practice:\nm += 2 * PopConcerts + 4 * RBConcerts <= 180\n# At most 40% of his concerts as R&B:\nm += RBConcerts <= 0.4 * (PopConcerts + RBConcerts)\n\n# Objective\n# Minimize the total number of concerts:\nm.minimize(PopConcerts + RBConcerts)\n"}}
{"358299194": {"document": "A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?", "order_mapping": {"large pizza": 0, "medium pizza": 1, "Large pizzas": 0, "Medium pizzas": 1, "large pizzas": 0, "medium pizzas": 1}, "obj_declaration": {"type": "objective", "direction": "reduce", "name": "time spent baking", "terms": {"medium pizzas": "8", "large pizzas": "12"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10000", "terms": {"Large pizzas": "12", "Medium pizzas": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "4400", "terms": {"Large pizzas": "5", "Medium pizzas": "4"}, "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "200", "var": "medium pizzas", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "large pizzas", "direction": "at least", "param": "two", "y_var": "medium pizzas", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [12.0, 8.0], "constraints": [[-12.0, -8.0, -10000.0], [-5.0, -4.0, -4400.0], [-0.0, -1.0, -200.0], [-1.0, 2.0, -0.0]]}, "solution": {"x": 629, "y": 314}, "entities": [{"start": 76, "end": 87, "word": "large pizza", "entity_group": "VAR", "score": 0.9998747507847972}, {"start": 92, "end": 104, "word": "medium pizza", "entity_group": "VAR", "score": 0.9999776184154832}, {"start": 107, "end": 119, "word": "Large pizzas", "entity_group": "VAR", "score": 0.9999830977670371}, {"start": 128, "end": 130, "word": "12", "entity_group": "PARAM", "score": 0.9995845540247994}, {"start": 152, "end": 153, "word": "5", "entity_group": "PARAM", "score": 0.9995493018842768}, {"start": 174, "end": 187, "word": "Medium pizzas", "entity_group": "VAR", "score": 0.9999743261625027}, {"start": 196, "end": 197, "word": "8", "entity_group": "PARAM", "score": 0.9997035625440109}, {"start": 219, "end": 220, "word": "4", "entity_group": "PARAM", "score": 0.9995936919016493}, {"start": 247, "end": 259, "word": "large pizzas", "entity_group": "VAR", "score": 0.9999767070305425}, {"start": 265, "end": 267, "word": "12", "entity_group": "PARAM", "score": 0.9996629262824039}, {"start": 286, "end": 299, "word": "medium pizzas", "entity_group": "VAR", "score": 0.9999314800908036}, {"start": 308, "end": 309, "word": "8", "entity_group": "PARAM", "score": 0.9991578782148803}, {"start": 372, "end": 380, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990485400380087}, {"start": 381, "end": 386, "word": "10000", "entity_group": "LIMIT", "score": 0.9996872443317815}, {"start": 406, "end": 410, "word": "4400", "entity_group": "LIMIT", "score": 0.9996872504577544}, {"start": 431, "end": 444, "word": "Medium pizzas", "entity_group": "VAR", "score": 0.9999750502270668}, {"start": 490, "end": 498, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998823924422115}, {"start": 499, "end": 502, "word": "200", "entity_group": "LIMIT", "score": 0.9996363695467881}, {"start": 503, "end": 516, "word": "medium pizzas", "entity_group": "VAR", "score": 0.9999643734647603}, {"start": 563, "end": 575, "word": "large pizzas", "entity_group": "VAR", "score": 0.9999698924087808}, {"start": 580, "end": 588, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981980483869917}, {"start": 589, "end": 598, "word": "two times", "entity_group": "PARAM", "score": 0.9345770540363182}, {"start": 607, "end": 619, "word": "large pizzas", "entity_group": "VAR", "score": 0.9999580489632064}, {"start": 640, "end": 653, "word": "medium pizzas", "entity_group": "VAR", "score": 0.9999728291997446}, {"start": 738, "end": 744, "word": "reduce", "entity_group": "OBJ_DIR", "score": 0.7938512817565033}, {"start": 745, "end": 749, "word": "time", "entity_group": "OBJ_NAME", "score": 0.7171222711568753}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargePizzas = intvar(0, 999999999)  # Number of large pizzas made\nMediumPizzas = intvar(0, 999999999)  # Number of medium pizzas made\n\n# Constraints\nm = Model()\n\n# The restaurant must use at least 10000 units of dough:\nm += 12 * LargePizzas + 8 * MediumPizzas >= 10000\n# The restaurant must use at least 4400 units of toppings:\nm += 5 * LargePizzas + 4 * MediumPizzas >= 4400\n# At least 200 medium pizzas must be made:\nm += MediumPizzas >= 200\n# At least two times as many large pizzas should be made than medium pizzas:\nm += LargePizzas >= 2 * MediumPizzas\n\n# Objective\n# Reduce time spent baking (12 minutes for large pizzas, 8 minutes for medium pizzas):\nm.minimize(12 * LargePizzas + 8 * MediumPizzas)\n\n"}}
{"395600048": {"document": "A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?", "order_mapping": {"limousine": 0, "bus": 1, "Limousines": 0, "buses": 1, "limousines": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of limousines and buses used", "vars": ["limousine", "bus"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "400", "terms": {"Limousines": "12", "buses": "18"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "70%", "var": "limousines", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-12.0, -18.0, -400.0], [-0.3, 0.7, -0.0]]}, "solution": {"x": 22, "y": 8}, "entities": [{"start": 59, "end": 68, "word": "limousine", "entity_group": "VAR", "score": 0.9989724725252545}, {"start": 72, "end": 75, "word": "bus", "entity_group": "VAR", "score": 0.998586007366257}, {"start": 78, "end": 88, "word": "Limousines", "entity_group": "VAR", "score": 0.9997046306659406}, {"start": 99, "end": 101, "word": "12", "entity_group": "PARAM", "score": 0.9997270380162185}, {"start": 113, "end": 118, "word": "buses", "entity_group": "VAR", "score": 0.9994337195648234}, {"start": 129, "end": 131, "word": "18", "entity_group": "PARAM", "score": 0.999672961715489}, {"start": 164, "end": 172, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987220910509761}, {"start": 173, "end": 176, "word": "400", "entity_group": "LIMIT", "score": 0.9991453409747727}, {"start": 194, "end": 204, "word": "limousines", "entity_group": "VAR", "score": 0.9996225767006676}, {"start": 227, "end": 235, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988969268652652}, {"start": 236, "end": 240, "word": "70 %", "entity_group": "LIMIT", "score": 0.9871115373346654}, {"start": 265, "end": 275, "word": "limousines", "entity_group": "VAR", "score": 0.9993436045412897}, {"start": 329, "end": 337, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9723825628272679}, {"start": 348, "end": 357, "word": "number of", "entity_group": "OBJ_NAME", "score": 0.9864502743101226}, {"start": 358, "end": 368, "word": "limousines", "entity_group": "VAR", "score": 0.9953450627263161}, {"start": 373, "end": 378, "word": "buses", "entity_group": "VAR", "score": 0.9994772423314696}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLimousines = intvar(0, 999999999)  # Number of limousines used\nBuses = intvar(0, 999999999)  # Number of buses used\n\n# Constraints\nm = Model()\n\n# Need to transport at least 400 people:\nm += 12 * Limousines + 18 * Buses >= 400\n# At least 70% of the vehicles must be limousines:\n# This constraint can be translated to: Limousines / (Limousines + Buses) >= 0.7\n# Multiplying both sides by (Limousines + Buses) to avoid division in the model:\nm += 0.7 * (Limousines + Buses) <= Limousines\n\n# Objective\n# Minimize the total number of limousines and buses used:\nm.minimize(Limousines + Buses)\n"}}
{"-737389251": {"document": "A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.", "order_mapping": {"prevention": 0, "treatment": 1, "prevention pill": 0, "treatment pill": 1, "prevention pills": 0, "treatment pills": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of patients", "vars": ["prevention", "treatment"]}, "const_declarations": [{"type": "linear", "direction": "budget", "limit": "10000", "terms": {"prevention pill": "15", "treatment pill": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "prevention pills", "direction": "at least", "param": "two times", "y_var": "treatment pills", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "treatment pills", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[15.0, 25.0, 10000.0], [-1.0, 2.0, -0.0], [-0.0, -1.0, -50.0]]}, "solution": {"x": 583, "y": 50}, "entities": [{"start": 105, "end": 115, "word": "prevention", "entity_group": "VAR", "score": 0.9992565023187289}, {"start": 141, "end": 150, "word": "treatment", "entity_group": "VAR", "score": 0.9996324933139923}, {"start": 157, "end": 172, "word": "prevention pill", "entity_group": "VAR", "score": 0.9999354804291746}, {"start": 179, "end": 181, "word": "15", "entity_group": "PARAM", "score": 0.9994880506307948}, {"start": 208, "end": 222, "word": "treatment pill", "entity_group": "VAR", "score": 0.9999323818948769}, {"start": 229, "end": 231, "word": "25", "entity_group": "PARAM", "score": 0.9990065936922089}, {"start": 260, "end": 275, "word": "prevention pill", "entity_group": "VAR", "score": 0.9999207254740117}, {"start": 325, "end": 333, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981706390835641}, {"start": 334, "end": 343, "word": "two times", "entity_group": "PARAM", "score": 0.9290171623572608}, {"start": 352, "end": 368, "word": "prevention pills", "entity_group": "VAR", "score": 0.9997727327560297}, {"start": 372, "end": 387, "word": "treatment pills", "entity_group": "VAR", "score": 0.9999129575417584}, {"start": 431, "end": 439, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988582965956905}, {"start": 440, "end": 442, "word": "50", "entity_group": "LIMIT", "score": 0.9995022322712824}, {"start": 443, "end": 458, "word": "treatment pills", "entity_group": "VAR", "score": 0.9999013394984048}, {"start": 486, "end": 492, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9941616619499974}, {"start": 496, "end": 501, "word": "10000", "entity_group": "LIMIT", "score": 0.9996716606247986}, {"start": 512, "end": 520, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9945215470134452}, {"start": 525, "end": 543, "word": "number of patients", "entity_group": "OBJ_NAME", "score": 0.9911135652397245}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPreventionPills = intvar(0, 999999999)  # Number of prevention pills purchased\nTreatmentPills = intvar(0, 999999999)  # Number of treatment pills purchased\n\n# Constraints\nm = Model()\n\n# The hospital must purchase at least two times as many prevention pills as treatment pills:\nm += PreventionPills >= 2 * TreatmentPills\n# The hospital must purchase at least 50 treatment pills:\nm += TreatmentPills >= 50\n# The hospital only has a budget of 10000 dollars:\nm += 15 * PreventionPills + 25 * TreatmentPills <= 10000\n\n# Objective\n# Maximize the number of patients that can be treated (sum of prevention and treatment pills):\nm.maximize(PreventionPills + TreatmentPills)\n\n"}}
{"-2138755435": {"document": "A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?", "order_mapping": {"cart": 0, "hand": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total number of refills per hour", "terms": {"cart": "five", "hand": "twenty"}}, "const_declarations": [{"type": "ratio", "direction": "at least", "limit": "70%", "var": "cart", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "3", "var": "hand", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "have", "limit": "4000", "terms": {"cart": "70", "hand": "85"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 20.0], "constraints": [[-0.3, 0.7, -0.0], [-0.0, -1.0, -3.0], [-70.0, -85.0, -4000.0]]}, "solution": {"x": 54, "y": 3}, "entities": [{"start": 47, "end": 51, "word": "cart", "entity_group": "VAR", "score": 0.9994500506048516}, {"start": 58, "end": 62, "word": "hand", "entity_group": "VAR", "score": 0.9986215520064172}, {"start": 88, "end": 92, "word": "cart", "entity_group": "VAR", "score": 0.9991278661421926}, {"start": 102, "end": 104, "word": "70", "entity_group": "PARAM", "score": 0.9997044452721912}, {"start": 144, "end": 150, "word": "refill", "entity_group": "OBJ_NAME", "score": 0.9797637106818398}, {"start": 156, "end": 160, "word": "five", "entity_group": "PARAM", "score": 0.9976639716347154}, {"start": 212, "end": 216, "word": "hand", "entity_group": "VAR", "score": 0.9993772670671557}, {"start": 260, "end": 262, "word": "85", "entity_group": "PARAM", "score": 0.9997207450985256}, {"start": 291, "end": 300, "word": "refilling", "entity_group": "OBJ_NAME", "score": 0.9528350087645657}, {"start": 306, "end": 312, "word": "twenty", "entity_group": "PARAM", "score": 0.9955087610009608}, {"start": 389, "end": 393, "word": "cart", "entity_group": "VAR", "score": 0.9996947275426548}, {"start": 406, "end": 414, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991106783437669}, {"start": 415, "end": 419, "word": "70 %", "entity_group": "LIMIT", "score": 0.9827257018947533}, {"start": 450, "end": 454, "word": "cart", "entity_group": "VAR", "score": 0.999499834701824}, {"start": 471, "end": 479, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987751356684805}, {"start": 480, "end": 481, "word": "3", "entity_group": "LIMIT", "score": 0.9997572361047906}, {"start": 504, "end": 508, "word": "hand", "entity_group": "VAR", "score": 0.9996272959916546}, {"start": 572, "end": 576, "word": "have", "entity_group": "CONST_DIR", "score": 0.9895934065876064}, {"start": 577, "end": 581, "word": "4000", "entity_group": "LIMIT", "score": 0.9979217792233911}, {"start": 691, "end": 699, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9610548965718114}, {"start": 704, "end": 709, "word": "total", "entity_group": "OBJ_NAME", "score": 0.8548527258010288}, {"start": 710, "end": 727, "word": "number of refills", "entity_group": "OBJ_NAME", "score": 0.9603067663802892}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCart = intvar(0, 999999999)  # Number of servers delivering by cart\nHand = intvar(0, 999999999)  # Number of servers delivering by hand\n\n# Constraints\nm = Model()\n\n# At least 70% of delivery shifts must be by cart:\nm += Cart >= 0.7 * (Cart + Hand)\n# There must be at least 3 servers delivering by hand:\nm += Hand >= 3\n# The restaurant wants to have 4000 customer interactions per hour:\nm += 70 * Cart + 85 * Hand >= 4000\n\n# Objective\n# Minimize the total number of refills per hour (5 refills per hour for cart, 20 refills per hour for hand):\nm.minimize(5 * Cart + 20 * Hand)\n"}}
{"1832323222": {"document": "A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?", "order_mapping": {"salmon": 0, "eggs": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "sodium intake", "terms": {"salmon": "80", "eggs": "20"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "2000", "terms": {"salmon": "300", "eggs": "200"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "90", "terms": {"salmon": "15", "eggs": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "40%", "var": "eggs", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [80.0, 20.0], "constraints": [[-300.0, -200.0, -2000.0], [-15.0, -8.0, -90.0], [-0.4, 0.6, 0.0]]}, "solution": {"x": 5, "y": 3}, "entities": [{"start": 42, "end": 48, "word": "salmon", "entity_group": "VAR", "score": 0.9985034755118942}, {"start": 53, "end": 57, "word": "eggs", "entity_group": "VAR", "score": 0.9994231830388519}, {"start": 73, "end": 79, "word": "salmon", "entity_group": "VAR", "score": 0.9995980046759882}, {"start": 89, "end": 92, "word": "300", "entity_group": "PARAM", "score": 0.9995776542193464}, {"start": 104, "end": 106, "word": "15", "entity_group": "PARAM", "score": 0.9996984479175511}, {"start": 130, "end": 132, "word": "80", "entity_group": "PARAM", "score": 0.9993638016168905}, {"start": 139, "end": 145, "word": "sodium", "entity_group": "OBJ_NAME", "score": 0.9961472304646133}, {"start": 161, "end": 165, "word": "eggs", "entity_group": "VAR", "score": 0.9996112178985341}, {"start": 175, "end": 178, "word": "200", "entity_group": "PARAM", "score": 0.9995839822286342}, {"start": 190, "end": 191, "word": "8", "entity_group": "PARAM", "score": 0.999718302281011}, {"start": 215, "end": 217, "word": "20", "entity_group": "PARAM", "score": 0.9988944247844675}, {"start": 224, "end": 230, "word": "sodium", "entity_group": "OBJ_NAME", "score": 0.9987227758859087}, {"start": 280, "end": 284, "word": "eggs", "entity_group": "VAR", "score": 0.9995735439461887}, {"start": 308, "end": 315, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981814891712301}, {"start": 316, "end": 320, "word": "40 %", "entity_group": "LIMIT", "score": 0.976925608062708}, {"start": 341, "end": 345, "word": "eggs", "entity_group": "VAR", "score": 0.9996203549399223}, {"start": 378, "end": 386, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985451748585938}, {"start": 387, "end": 391, "word": "2000", "entity_group": "LIMIT", "score": 0.9995730156436148}, {"start": 405, "end": 407, "word": "90", "entity_group": "LIMIT", "score": 0.9996418380774007}, {"start": 474, "end": 482, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9989994201471044}, {"start": 487, "end": 500, "word": "sodium intake", "entity_group": "OBJ_NAME", "score": 0.9905180686492707}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSalmon = intvar(0, 999999999)  # Number of salmon bowls\nEggs = intvar(0, 999999999)  # Number of egg bowls\n\n# Constraints\nm = Model()\n\n# The fitness guru needs to eat at least 2000 calories:\nm += 300 * Salmon + 200 * Eggs >= 2000\n# The fitness guru needs at least 90 grams of protein:\nm += 15 * Salmon + 8 * Eggs >= 90\n# At most 40% of his meals can be eggs:\nm += Eggs <= 0.4 * (Salmon + Eggs)\n\n# Objective\n# Minimize sodium intake (80 mg of sodium per bowl of salmon, 20 mg of sodium per bowl of eggs):\nm.minimize(80 * Salmon + 20 * Eggs)\n\n"}}
{"905906224": {"document": "A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?", "order_mapping": {"original": 0, "experimental meal": 1, "original meal": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cooking time", "terms": {"experimental meal": "15", "original meal": "10"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "900", "terms": {"experimental meal": "35", "original meal": "45"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "800", "terms": {"original meal": "20", "experimental meal": "25"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [10.0, 15.0], "constraints": [[45.0, 35.0, 900.0], [20.0, 25.0, 800.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 62, "end": 70, "word": "original", "entity_group": "VAR", "score": 0.9996616071088775}, {"start": 78, "end": 95, "word": "experimental meal", "entity_group": "VAR", "score": 0.9999632901525516}, {"start": 102, "end": 115, "word": "original meal", "entity_group": "VAR", "score": 0.9999536624189642}, {"start": 136, "end": 138, "word": "20", "entity_group": "PARAM", "score": 0.9996964901436758}, {"start": 163, "end": 165, "word": "45", "entity_group": "PARAM", "score": 0.999622077267183}, {"start": 200, "end": 202, "word": "10", "entity_group": "PARAM", "score": 0.9996375450178897}, {"start": 241, "end": 258, "word": "experimental meal", "entity_group": "VAR", "score": 0.999979040537788}, {"start": 269, "end": 271, "word": "25", "entity_group": "PARAM", "score": 0.9997028790280112}, {"start": 296, "end": 298, "word": "35", "entity_group": "PARAM", "score": 0.9996220772684056}, {"start": 333, "end": 335, "word": "15", "entity_group": "PARAM", "score": 0.999604524285901}, {"start": 378, "end": 385, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9987842353984292}, {"start": 386, "end": 389, "word": "900", "entity_group": "LIMIT", "score": 0.9996221028494968}, {"start": 427, "end": 434, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985594464726328}, {"start": 435, "end": 438, "word": "800", "entity_group": "LIMIT", "score": 0.9997344323922392}, {"start": 560, "end": 568, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9984022155625202}, {"start": 573, "end": 585, "word": "cooking time", "entity_group": "OBJ_NAME", "score": 0.9914311005670214}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nOriginalMeal = intvar(0, 999999999)  # Number of original meals\nExperimentalMeal = intvar(0, 999999999)  # Number of experimental meals\n\n# Constraints\nm = Model()\n\n# Wrapping waste constraint: 45 units for original meal and 35 units for experimental meal, at most 900 units in total\nm += 45*OriginalMeal + 35*ExperimentalMeal <= 900\n# Food waste constraint: 20 units for original meal and 25 units for experimental meal, at most 800 units in total\nm += 20*OriginalMeal + 25*ExperimentalMeal <= 800\n\n# Objective\n# Minimize cooking time: 10 minutes for original meal and 15 minutes for experimental meal\nm.minimize(10*OriginalMeal + 15*ExperimentalMeal)\n"}}
{"1148198628": {"document": "A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day.  The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?", "order_mapping": {"chop saw": 0, "steel cutter": 1}, "obj_declaration": {"type": "objvar", "direction": "decrease", "name": "number of metal-working equipment", "vars": ["chop saw", "steel cutter"]}, "const_declarations": [{"type": "linear", "direction": "must cut", "limit": "520", "terms": {"chop saw": "25", "steel cutter": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "400", "terms": {"steel cutter": "3", "chop saw": "25"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-25.0, -5.0, -520.0], [25.0, 3.0, 400.0]]}, "solution": {"x": 8, "y": 64}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChopSaw = intvar(0, 999999999)  # Number of chop saws\nSteelCutter = intvar(0, 999999999)  # Number of steel cutters\n\n# Constraints\nm = Model()\n\n# Must cut 520 pounds of metal every day:\nm += 25 * ChopSaw + 5 * SteelCutter >= 520\n# May at most produce 400 units of waste every day:\nm += 25 * ChopSaw + 3 * SteelCutter <= 400\n\n# Objective\n# Decrease the total number of metal-working equipment needed:\nm.minimize(ChopSaw + SteelCutter)\n"}}
{"960620706": {"document": "A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?", "order_mapping": {"large cruise ship": 0, "small cruise ship": 1, "small cruise ships": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of pollution", "terms": {"large cruise ship": "20", "small cruise ship": "15"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "20000", "terms": {"large cruise ship": "2000", "small cruise ship": "800"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "7", "var": "large cruise ship", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "40%", "var": "small cruise ships", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [20.0, 15.0], "constraints": [[-2000.0, -800.0, -20000.0], [1.0, 0.0, 7.0], [0.4, -0.6, -0.0]]}, "solution": {"x": 7, "y": 8}, "entities": [{"start": 56, "end": 73, "word": "large cruise ship", "entity_group": "VAR", "score": 0.9997246094025151}, {"start": 79, "end": 96, "word": "small cruise ship", "entity_group": "VAR", "score": 0.9996215437812924}, {"start": 101, "end": 118, "word": "large cruise ship", "entity_group": "VAR", "score": 0.9995365080023284}, {"start": 134, "end": 138, "word": "2000", "entity_group": "PARAM", "score": 0.9966504143159736}, {"start": 162, "end": 164, "word": "20", "entity_group": "PARAM", "score": 0.9997210224499868}, {"start": 174, "end": 183, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9983812322806558}, {"start": 188, "end": 205, "word": "small cruise ship", "entity_group": "VAR", "score": 0.9996727092243516}, {"start": 221, "end": 224, "word": "800", "entity_group": "PARAM", "score": 0.9966504143160059}, {"start": 248, "end": 250, "word": "15", "entity_group": "PARAM", "score": 0.9997037770026512}, {"start": 260, "end": 269, "word": "pollution", "entity_group": "OBJ_NAME", "score": 0.9954782228821449}, {"start": 285, "end": 292, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988113114600311}, {"start": 293, "end": 294, "word": "7", "entity_group": "LIMIT", "score": 0.9995734550714687}, {"start": 295, "end": 312, "word": "large cruise ship", "entity_group": "VAR", "score": 0.9998877515509413}, {"start": 323, "end": 331, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989596580397939}, {"start": 332, "end": 336, "word": "40 %", "entity_group": "LIMIT", "score": 0.9576654264903391}, {"start": 372, "end": 390, "word": "small cruise ships", "entity_group": "VAR", "score": 0.9993963926357174}, {"start": 433, "end": 441, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985289391148089}, {"start": 442, "end": 447, "word": "20000", "entity_group": "LIMIT", "score": 0.9994787873733484}, {"start": 524, "end": 532, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9834518736257347}, {"start": 543, "end": 562, "word": "amount of pollution", "entity_group": "OBJ_NAME", "score": 0.9681002401220031}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeCruiseShips = intvar(0, 999999999)  # Number of large cruise ship trips\nSmallCruiseShips = intvar(0, 999999999)  # Number of small cruise ship trips\n\n# Constraints\nm = Model()\n\n# At most 7 large cruise ship trips:\nm += LargeCruiseShips <= 7\n# At least 40% of the total trips must be made by small cruise ships:\n# This constraint implies that the number of small cruise ship trips must be at least 40% of the total number of trips\n# Let's first express the total number of trips\nTotalTrips = LargeCruiseShips + SmallCruiseShips\n# Now, we can express the constraint\nm += SmallCruiseShips >= 0.4 * TotalTrips\n# The cruise company aims to transport at least 20000 customers:\nm += 2000 * LargeCruiseShips + 800 * SmallCruiseShips >= 20000\n\n# Objective\n# Minimize the total amount of pollution produced (20 units for a large cruise ship, 15 units for a small cruise ship):\nm.minimize(20 * LargeCruiseShips + 15 * SmallCruiseShips)\n\n"}}
{"1436660235": {"document": "A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?", "order_mapping": {"LED fixture": 0, "fluorescence lamp": 1, "LED light": 0, "fluorescence lamps": 1}, "obj_declaration": {"type": "objective", "direction": "reduce", "name": "total number of light changes", "terms": {"LED light": "3", "fluorescence lamp": "4"}}, "const_declarations": [{"type": "ratio", "direction": "at least", "limit": "30%", "var": "fluorescence lamps", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "300", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "2000", "terms": {"LED light": "5", "fluorescence lamp": "8"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [3.0, 4.0], "constraints": [[0.3, -0.7, -0.0], [-1.0, -1.0, -300.0], [5.0, 8.0, 2000.0]]}, "solution": {"x": 210, "y": 90}, "entities": [{"start": 85, "end": 96, "word": "LED fixture", "entity_group": "VAR", "score": 0.9999864748300213}, {"start": 105, "end": 122, "word": "fluorescence lamp", "entity_group": "VAR", "score": 0.999921776559975}, {"start": 129, "end": 138, "word": "LED light", "entity_group": "VAR", "score": 0.9999866535965134}, {"start": 144, "end": 145, "word": "5", "entity_group": "PARAM", "score": 0.9996477323316955}, {"start": 200, "end": 201, "word": "3", "entity_group": "PARAM", "score": 0.9995780891816256}, {"start": 236, "end": 253, "word": "fluorescence lamp", "entity_group": "VAR", "score": 0.9999875950287983}, {"start": 259, "end": 260, "word": "8", "entity_group": "PARAM", "score": 0.9996942460745389}, {"start": 315, "end": 322, "word": "4 times", "entity_group": "PARAM", "score": 0.6598919869495918}, {"start": 366, "end": 374, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985986271355376}, {"start": 375, "end": 379, "word": "30 %", "entity_group": "LIMIT", "score": 0.9684063349470374}, {"start": 407, "end": 425, "word": "fluorescence lamps", "entity_group": "VAR", "score": 0.9999799767258165}, {"start": 453, "end": 461, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989277230274943}, {"start": 462, "end": 465, "word": "300", "entity_group": "LIMIT", "score": 0.9996019352393931}, {"start": 493, "end": 500, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989852175065093}, {"start": 501, "end": 505, "word": "2000", "entity_group": "LIMIT", "score": 0.9997383938982646}, {"start": 575, "end": 581, "word": "reduce", "entity_group": "OBJ_DIR", "score": 0.9734004312242752}, {"start": 592, "end": 615, "word": "number of light changes", "entity_group": "OBJ_NAME", "score": 0.9872977500672075}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLED = intvar(0, 999999999)  # Number of LED fixtures installed\nFluorescence = intvar(0, 999999999)  # Number of fluorescence lamps installed\n\n# Constraints\nm = Model()\n\n# At least 30% of the implemented lights must be fluorescence lamps:\nm += Fluorescence >= 0.3 * (LED + Fluorescence)\n# The customer requires at least 300 light fixtures in total:\nm += LED + Fluorescence >= 300\n# Can use at most 2000 units of electricity (LED uses 5 units/hour, Fluorescence uses 8 units/hour):\nm += 5 * LED + 8 * Fluorescence <= 2000\n\n# Objective\n# Reduce the total number of light changes (LED needs to be changed 3 times a decade, Fluorescence 4 times a decade):\nm.minimize(3 * LED + 4 * Fluorescence)\n"}}
{"-1704758994": {"document": "A market owner wants to start a jam business. He can either sell one unit of jam to customers in a set of small packets or jugs. A set of small packets can hold 1000 ml of jam while a jug can hold 1250 ml of jam. Since a set of small packets are more expensive to make, at least three times as many jugs must be used than sets of small packets. On the other hand, at least 35 sets of small packets should be filled. If the market owner has 65000 ml of jam, how many sets of small packets or jugs should be selected to maximize the total number of units that he can sell to his customers?", "order_mapping": {"small packets": 0, "jugs": 1, "jug": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "total number of units", "vars": []}, "const_declarations": [{"type": "xby", "x_var": "jugs", "direction": "at least", "param": "three times", "y_var": "small packets", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "35", "var": "small packets", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "65000", "terms": {"small packets": "1000", "jug": "1250"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-0.0, -0.0], "constraints": [[3.0, -1.0, -0.0], [-1.0, -0.0, -35.0], [1000.0, 1250.0, 65000.0]]}, "solution": null, "entities": [{"start": 107, "end": 120, "word": "small packets", "entity_group": "VAR", "score": 0.9999486052195989}, {"start": 124, "end": 128, "word": "jugs", "entity_group": "VAR", "score": 0.9996523831625408}, {"start": 140, "end": 153, "word": "small packets", "entity_group": "VAR", "score": 0.9999697706323897}, {"start": 163, "end": 167, "word": "1000", "entity_group": "PARAM", "score": 0.9996557583559439}, {"start": 186, "end": 189, "word": "jug", "entity_group": "VAR", "score": 0.9988320498038762}, {"start": 199, "end": 203, "word": "1250", "entity_group": "PARAM", "score": 0.9993692752366943}, {"start": 231, "end": 244, "word": "small packets", "entity_group": "VAR", "score": 0.9998987049398989}, {"start": 274, "end": 282, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976450723182856}, {"start": 283, "end": 294, "word": "three times", "entity_group": "PARAM", "score": 0.6942574535258825}, {"start": 303, "end": 307, "word": "jugs", "entity_group": "VAR", "score": 0.9994689930477011}, {"start": 334, "end": 347, "word": "small packets", "entity_group": "VAR", "score": 0.9999700697358279}, {"start": 370, "end": 378, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988169029844298}, {"start": 379, "end": 381, "word": "35", "entity_group": "LIMIT", "score": 0.9997136376519337}, {"start": 390, "end": 403, "word": "small packets", "entity_group": "VAR", "score": 0.9999689375947388}, {"start": 443, "end": 446, "word": "has", "entity_group": "CONST_DIR", "score": 0.993565828104672}, {"start": 447, "end": 452, "word": "65000", "entity_group": "LIMIT", "score": 0.9985401319414491}, {"start": 482, "end": 495, "word": "small packets", "entity_group": "VAR", "score": 0.9999618472338803}, {"start": 499, "end": 503, "word": "jugs", "entity_group": "VAR", "score": 0.9993441901696619}, {"start": 526, "end": 534, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9985969128600528}, {"start": 545, "end": 560, "word": "number of units", "entity_group": "OBJ_NAME", "score": 0.9732435563819465}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallPackets = intvar(0, 999999999)  # Number of sets of small packets\nJugs = intvar(0, 999999999)  # Number of jugs\n\n# Constraints\nm = Model()\n\n# At least three times as many jugs must be used than sets of small packets:\nm += Jugs >= 3 * SmallPackets\n# At least 35 sets of small packets should be filled:\nm += SmallPackets >= 35\n# The market owner has 65000 ml of jam:\nm += 1000 * SmallPackets + 1250 * Jugs <= 65000\n\n# Objective\n# Maximize the total number of units (sets of small packets + jugs) that he can sell:\nm.maximize(SmallPackets + Jugs)\n\n"}}
{"1278831553": {"document": "A navy ship is stocking food onto their submarine and their staff can eat either a salad or fruit bowl for their fibre and vitamin intake. The nutritionist in charge of this voyage needs to ensure that their staff gets at least 90 units of vitamin and 110 units of fibre each. Each salad contains 7 units of vitamins and 12 units of fibre. Each fruit bowl contains 15 units of vitamin and 3 units of fibre. In addition, since fruit bowls take longer to prepare, at most 30% of their meals should be fruit bowls. If each salad contains 2 units of potassium and each fruit bowl contains 8 units of potassium, how many of each should they prepare for each staff to maximize their potassium intake?", "order_mapping": {"salad": 0, "fruit bowl": 1, "fruit bowls": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "potassium intake", "terms": {"salad": "2", "fruit bowl": "8"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "90", "terms": {"fruit bowl": "15", "salad": "7"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "110", "terms": {"salad": "12", "fruit bowl": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "30%", "var": "fruit bowls", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.0, -8.0], "constraints": [[-7.0, -15.0, -90.0], [-12.0, -3.0, -110.0], [-0.3, 0.7, 0.0]]}, "solution": {"x": 100000000, "y": 42857142}, "entities": [{"start": 83, "end": 88, "word": "salad", "entity_group": "VAR", "score": 0.9995654082870192}, {"start": 92, "end": 102, "word": "fruit bowl", "entity_group": "VAR", "score": 0.9999799808609651}, {"start": 220, "end": 228, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991739183162998}, {"start": 229, "end": 231, "word": "90", "entity_group": "LIMIT", "score": 0.999752679353465}, {"start": 253, "end": 256, "word": "110", "entity_group": "LIMIT", "score": 0.9996241155632954}, {"start": 284, "end": 289, "word": "salad", "entity_group": "VAR", "score": 0.9996235054290836}, {"start": 299, "end": 300, "word": "7", "entity_group": "PARAM", "score": 0.9996977202754188}, {"start": 323, "end": 325, "word": "12", "entity_group": "PARAM", "score": 0.999714177196295}, {"start": 348, "end": 358, "word": "fruit bowl", "entity_group": "VAR", "score": 0.9999821029919083}, {"start": 368, "end": 370, "word": "15", "entity_group": "PARAM", "score": 0.999708027953338}, {"start": 392, "end": 393, "word": "3", "entity_group": "PARAM", "score": 0.9996825530081968}, {"start": 431, "end": 442, "word": "fruit bowls", "entity_group": "VAR", "score": 0.9999391323898722}, {"start": 468, "end": 475, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9983848336948546}, {"start": 476, "end": 480, "word": "30 %", "entity_group": "LIMIT", "score": 0.9758877131637259}, {"start": 506, "end": 517, "word": "fruit bowls", "entity_group": "VAR", "score": 0.9999798172628681}, {"start": 528, "end": 533, "word": "salad", "entity_group": "VAR", "score": 0.9996709206879527}, {"start": 543, "end": 544, "word": "2", "entity_group": "PARAM", "score": 0.9996930896504276}, {"start": 573, "end": 583, "word": "fruit bowl", "entity_group": "VAR", "score": 0.9999804773080799}, {"start": 593, "end": 594, "word": "8", "entity_group": "PARAM", "score": 0.9995714751650147}, {"start": 671, "end": 679, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991597336121442}, {"start": 686, "end": 702, "word": "potassium intake", "entity_group": "OBJ_NAME", "score": 0.98949826486367}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSalad = intvar(0, 999999999)  # Number of salads prepared\nFruitBowl = intvar(0, 999999999)  # Number of fruit bowls prepared\n\n# Constraints\nm = Model()\n\n# Ensure staff gets at least 90 units of vitamin:\nm += 7 * Salad + 15 * FruitBowl >= 90\n# Ensure staff gets at least 110 units of fibre:\nm += 12 * Salad + 3 * FruitBowl >= 110\n# At most 30% of their meals should be fruit bowls:\nm += FruitBowl <= 0.30 * (Salad + FruitBowl)\n\n# Objective\n# Maximize potassium intake (2 units per salad, 8 units per fruit bowl):\nm.maximize(2 * Salad + 8 * FruitBowl)\n"}}
{"713346505": {"document": "A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?", "order_mapping": {"retail store": 0, "factory outlet": 1}, "obj_declaration": {"type": "objvar", "direction": "reduce", "name": "number of stores", "vars": ["retail store", "factory outlet"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1200", "terms": {"factory outlet": "80", "retail store": "200"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "50", "terms": {"factory outlet": "4", "retail store": "6"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-200.0, -80.0, -1200.0], [6.0, 4.0, 50.0]]}, "solution": {"x": 6, "y": 0}, "entities": [{"start": 69, "end": 81, "word": "retail store", "entity_group": "VAR", "score": 0.9999429354525261}, {"start": 88, "end": 102, "word": "factory outlet", "entity_group": "VAR", "score": 0.9999812053804774}, {"start": 107, "end": 119, "word": "retail store", "entity_group": "VAR", "score": 0.9999770482556157}, {"start": 130, "end": 133, "word": "200", "entity_group": "PARAM", "score": 0.9997218944858595}, {"start": 167, "end": 168, "word": "6", "entity_group": "PARAM", "score": 0.999653958568347}, {"start": 194, "end": 208, "word": "factory outlet", "entity_group": "VAR", "score": 0.9999706528235117}, {"start": 219, "end": 221, "word": "80", "entity_group": "PARAM", "score": 0.9996824008537273}, {"start": 313, "end": 314, "word": "4", "entity_group": "PARAM", "score": 0.9995473945401597}, {"start": 380, "end": 388, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986430868983905}, {"start": 389, "end": 393, "word": "1200", "entity_group": "LIMIT", "score": 0.9997541914488159}, {"start": 429, "end": 438, "word": "available", "entity_group": "CONST_DIR", "score": 0.995813276636698}, {"start": 439, "end": 441, "word": "50", "entity_group": "LIMIT", "score": 0.9991384746211878}, {"start": 531, "end": 537, "word": "reduce", "entity_group": "OBJ_DIR", "score": 0.9890396795826982}, {"start": 542, "end": 558, "word": "number of stores", "entity_group": "OBJ_NAME", "score": 0.9941123812383404}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRetailStore = intvar(0, 999999999)  # Number of retail stores\nFactoryOutlet = intvar(0, 999999999)  # Number of factory outlets\n\n# Constraints\nm = Model()\n\n# At least 1200 customers every day:\nm += 200 * RetailStore + 80 * FactoryOutlet >= 1200\n# No more than 50 employees can be made available:\nm += 6 * RetailStore + 4 * FactoryOutlet <= 50\n\n# Objective\n# Reduce the number of stores that must be open:\nm.minimize(RetailStore + FactoryOutlet)\n\n"}}
{"1677678357": {"document": "A soda company sells soda in two types of containers: cans and glass bottles. A can holds 250 ml of soda whereas a bottle holds 1000 ml of soda. The soda company needs to bottle at least 1000000 ml of soda every day and due to the ability to sell soda cans as packs, there must be at least three times more cans than glass bottles. However, because of previous contracts with gas stations, there must be at least 100 glass bottles made. How many of each should be made to maximize the total number of units produced?", "order_mapping": {"cans": 0, "glass bottles": 1, "can": 0, "bottle": 1, "soda cans": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of units", "vars": ["cans", "glass bottles"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1000000", "terms": {"can": "250", "bottle": "1000"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "cans", "direction": "at least", "param": "three times", "y_var": "glass bottles", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "100", "var": "glass bottles", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[-250.0, -1000.0, -1000000.0], [-1.0, 3.0, -0.0], [-0.0, -1.0, -100.0]]}, "solution": {"x": 100000000, "y": 33333333}, "entities": [{"start": 55, "end": 59, "word": "cans", "entity_group": "VAR", "score": 0.9995327029190896}, {"start": 64, "end": 77, "word": "glass bottles", "entity_group": "VAR", "score": 0.9999845193314839}, {"start": 82, "end": 85, "word": "can", "entity_group": "VAR", "score": 0.9993242037076298}, {"start": 92, "end": 95, "word": "250", "entity_group": "PARAM", "score": 0.9991881312849626}, {"start": 102, "end": 106, "word": "soda", "entity_group": "OBJ_NAME", "score": 0.9881071651394421}, {"start": 117, "end": 123, "word": "bottle", "entity_group": "VAR", "score": 0.9996046962333694}, {"start": 130, "end": 134, "word": "1000", "entity_group": "PARAM", "score": 0.9992609020820726}, {"start": 141, "end": 145, "word": "soda", "entity_group": "OBJ_NAME", "score": 0.9879389706819043}, {"start": 181, "end": 189, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989677101908736}, {"start": 190, "end": 197, "word": "1000000", "entity_group": "LIMIT", "score": 0.9995929453414246}, {"start": 250, "end": 259, "word": "soda cans", "entity_group": "VAR", "score": 0.9999204353630303}, {"start": 263, "end": 268, "word": "packs", "entity_group": "VAR", "score": 0.9995794432692456}, {"start": 285, "end": 293, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979429855753694}, {"start": 294, "end": 305, "word": "three times", "entity_group": "PARAM", "score": 0.5757664176447824}, {"start": 311, "end": 315, "word": "cans", "entity_group": "VAR", "score": 0.9997636911866926}, {"start": 321, "end": 334, "word": "glass bottles", "entity_group": "VAR", "score": 0.9999736737919366}, {"start": 411, "end": 419, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985571322975489}, {"start": 420, "end": 423, "word": "100", "entity_group": "LIMIT", "score": 0.9993980121386447}, {"start": 424, "end": 437, "word": "glass bottles", "entity_group": "VAR", "score": 0.9999499080581596}, {"start": 480, "end": 488, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988344941861755}, {"start": 499, "end": 514, "word": "number of units", "entity_group": "OBJ_NAME", "score": 0.9761799544419855}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCans = intvar(0, 999999999)  # Number of cans produced\nGlassBottles = intvar(0, 999999999)  # Number of glass bottles produced\n\n# Constraints\nm = Model()\n\n# The soda company needs to bottle at least 1000000 ml of soda every day:\nm += 250 * Cans + 1000 * GlassBottles >= 1000000\n# There must be at least three times more cans than glass bottles:\nm += Cans >= 3 * GlassBottles\n# There must be at least 100 glass bottles made:\nm += GlassBottles >= 100\n\n# Objective\n# Maximize the total number of units produced (cans + glass bottles):\nm.maximize(Cans + GlassBottles)\n"}}
{"358766780": {"document": "A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is $300 while the cost over air for each trip is $550. The company needs to transport at least 200 tons of candles and they have a budget of $20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?", "order_mapping": {"freight": 0, "air": 1, "Freight": 0, "freight trip": 0}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of trips", "vars": ["freight", "air"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "200", "terms": {"Freight": "5", "air": "3"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "20000", "terms": {"freight trip": "300", "air": "550"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "freight", "direction": "custom", "param": "1.4", "y_var": "air", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "freight", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-5.0, -3.0, -200.0], [300.0, 550.0, 20000.0], [1.0, -1.4, 0.0], [-1.0, -0.0, -5.0]]}, "solution": {"x": 28, "y": 20}, "entities": [{"start": 68, "end": 75, "word": "freight", "entity_group": "VAR", "score": 0.9997423875319325}, {"start": 80, "end": 83, "word": "air", "entity_group": "VAR", "score": 0.9993410692590794}, {"start": 86, "end": 93, "word": "Freight", "entity_group": "VAR", "score": 0.9996486024558525}, {"start": 108, "end": 109, "word": "5", "entity_group": "PARAM", "score": 0.9996320853174454}, {"start": 110, "end": 114, "word": "tons", "entity_group": "OBJ_NAME", "score": 0.9758758848951834}, {"start": 136, "end": 139, "word": "air", "entity_group": "VAR", "score": 0.9990575140195003}, {"start": 154, "end": 155, "word": "3", "entity_group": "PARAM", "score": 0.9996220552183246}, {"start": 156, "end": 160, "word": "tons", "entity_group": "OBJ_NAME", "score": 0.9892692582032288}, {"start": 178, "end": 185, "word": "freight", "entity_group": "VAR", "score": 0.9992481295223763}, {"start": 218, "end": 230, "word": "freight trip", "entity_group": "VAR", "score": 0.9999499250130746}, {"start": 236, "end": 239, "word": "300", "entity_group": "PARAM", "score": 0.9994834378011432}, {"start": 260, "end": 263, "word": "air", "entity_group": "VAR", "score": 0.9995025581357274}, {"start": 283, "end": 286, "word": "550", "entity_group": "PARAM", "score": 0.99967722370976}, {"start": 320, "end": 328, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991046157169823}, {"start": 329, "end": 332, "word": "200", "entity_group": "LIMIT", "score": 0.999593198658868}, {"start": 365, "end": 371, "word": "budget", "entity_group": "CONST_DIR", "score": 0.9959710697934981}, {"start": 377, "end": 382, "word": "20000", "entity_group": "LIMIT", "score": 0.9989768381351098}, {"start": 428, "end": 436, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989891653499308}, {"start": 437, "end": 441, "word": "30 %", "entity_group": "LIMIT", "score": 0.933615542933543}, {"start": 489, "end": 492, "word": "air", "entity_group": "VAR", "score": 0.997991002708634}, {"start": 514, "end": 522, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990970117902098}, {"start": 523, "end": 524, "word": "5", "entity_group": "LIMIT", "score": 0.9997353345156911}, {"start": 539, "end": 546, "word": "freight", "entity_group": "VAR", "score": 0.9995834025160439}, {"start": 597, "end": 605, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9966794055614668}, {"start": 610, "end": 631, "word": "total number of trips", "entity_group": "OBJ_NAME", "score": 0.9641401757481309}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFreight = intvar(0, 999999999)  # Number of freight trips\nAir = intvar(0, 999999999)  # Number of air trips\n\n# Constraints\nm = Model()\n\n# The company needs to transport at least 200 tons of candles:\nm += 5 * Freight + 3 * Air >= 200\n# The company has a budget of $20000:\nm += 300 * Freight + 550 * Air <= 20000\n# At least 30% of tons of candles must be transported through air:\n# This constraint is equivalent to saying that the weight transported by air must be at least 30% of the total weight,\n# which can be rearranged to say that the weight by freight must be less than or equal to 70% of the total weight,\n# or equivalently, the weight by freight must be less than or equal to 1.4 times the weight by air.\nm += Freight <= 1.4 * Air\n# There must also be at least 5 trips through freight:\nm += Freight >= 5\n\n# Objective\n# Minimize the total number of trips:\nm.minimize(Freight + Air)\n"}}
{"-756853497": {"document": "A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.", "order_mapping": {"large mobile production units": 0, "small mobile production units": 1, "Large mobile production units": 0, "small mobile production unit": 1, "small mobile units": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total number of parking spots", "terms": {"Large mobile production units": "2", "small mobile production units": "1"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "5", "var": "small mobile units", "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "75%", "var": "large mobile production units", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "needs to transport", "limit": "80", "terms": {"Large mobile production units": "6", "small mobile production units": "2"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [2.0, 1.0], "constraints": [[-0.0, -1.0, -5.0], [-0.25, 0.75, -0.0], [-6.0, -2.0, -80.0]]}, "solution": {"x": 15, "y": 5}, "entities": [{"start": 102, "end": 131, "word": "large mobile production units", "entity_group": "VAR", "score": 0.9954820878529012}, {"start": 135, "end": 164, "word": "small mobile production units", "entity_group": "VAR", "score": 0.9991652707101722}, {"start": 167, "end": 196, "word": "Large mobile production units", "entity_group": "VAR", "score": 0.9994904414618213}, {"start": 206, "end": 207, "word": "6", "entity_group": "PARAM", "score": 0.9996503986116813}, {"start": 228, "end": 229, "word": "2", "entity_group": "PARAM", "score": 0.9995807298589229}, {"start": 252, "end": 281, "word": "small mobile production units", "entity_group": "VAR", "score": 0.9991129381208556}, {"start": 296, "end": 297, "word": "2", "entity_group": "PARAM", "score": 0.999688372578585}, {"start": 318, "end": 319, "word": "1", "entity_group": "PARAM", "score": 0.9995334432191456}, {"start": 368, "end": 396, "word": "small mobile production unit", "entity_group": "VAR", "score": 0.9986803715555386}, {"start": 437, "end": 445, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989449982489836}, {"start": 446, "end": 447, "word": "5", "entity_group": "LIMIT", "score": 0.9997313271012852}, {"start": 462, "end": 480, "word": "small mobile units", "entity_group": "VAR", "score": 0.9969679453761681}, {"start": 523, "end": 552, "word": "large mobile production units", "entity_group": "VAR", "score": 0.9988744545648789}, {"start": 607, "end": 615, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998915443634369}, {"start": 616, "end": 620, "word": "75 %", "entity_group": "LIMIT", "score": 0.5005374569362132}, {"start": 671, "end": 673, "word": "80", "entity_group": "LIMIT", "score": 0.9995105269466233}, {"start": 683, "end": 691, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9883917988222913}, {"start": 702, "end": 725, "word": "number of parking spots", "entity_group": "OBJ_NAME", "score": 0.9769371537336798}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeUnits = intvar(0, 999999999)  # Number of large mobile production units\nSmallUnits = intvar(0, 999999999)  # Number of small mobile production units\n\n# Constraints\nm = Model()\n\n# At least 5 units must be small mobile units:\nm += SmallUnits >= 5\n# Large mobile production units must make up at least 75% of all vehicles:\n# This means for every 4 units, 3 must be large units, hence LargeUnits >= 3/4 * (LargeUnits + SmallUnits)\nm += LargeUnits >= 0.75 * (LargeUnits + SmallUnits)\n# The movie needs to transport 80 people:\nm += 6 * LargeUnits + 2 * SmallUnits >= 80\n\n# Objective\n# Minimize the total number of parking spots required (2 spots for large units, 1 spot for small units):\nm.minimize(2 * LargeUnits + 1 * SmallUnits)\n\n"}}
{"-1833947525": {"document": "A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?", "order_mapping": {"small boxes": 0, "large boxes": 1, "small box": 0, "large box": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of boxes", "vars": ["large boxes", "small boxes"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "750", "terms": {"small box": "25", "large box": "45"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "small boxes", "direction": "at least", "param": "three times", "y_var": "large boxes", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "large boxes", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-25.0, -45.0, -750.0], [-1.0, 3.0, -0.0], [-0.0, -1.0, -5.0]]}, "solution": {"x": 20, "y": 6}, "entities": [{"start": 63, "end": 74, "word": "small boxes", "entity_group": "VAR", "score": 0.99996895660585}, {"start": 79, "end": 90, "word": "large boxes", "entity_group": "VAR", "score": 0.9999709819274019}, {"start": 95, "end": 104, "word": "small box", "entity_group": "VAR", "score": 0.9999811647546178}, {"start": 111, "end": 113, "word": "25", "entity_group": "PARAM", "score": 0.9997221362612355}, {"start": 114, "end": 119, "word": "masks", "entity_group": "OBJ_NAME", "score": 0.9757650083710211}, {"start": 130, "end": 139, "word": "large box", "entity_group": "VAR", "score": 0.9999537493814235}, {"start": 146, "end": 148, "word": "45", "entity_group": "PARAM", "score": 0.9995937653593735}, {"start": 149, "end": 154, "word": "masks", "entity_group": "OBJ_NAME", "score": 0.993443192389291}, {"start": 163, "end": 174, "word": "small boxes", "entity_group": "VAR", "score": 0.9999771770680626}, {"start": 250, "end": 258, "word": "at least", "entity_group": "CONST_DIR", "score": 0.997937299133158}, {"start": 259, "end": 270, "word": "three times", "entity_group": "PARAM", "score": 0.90870825679192}, {"start": 279, "end": 290, "word": "small boxes", "entity_group": "VAR", "score": 0.9999406108255396}, {"start": 294, "end": 305, "word": "large boxes", "entity_group": "VAR", "score": 0.9999702358423389}, {"start": 323, "end": 331, "word": "at least", "entity_group": "CONST_DIR", "score": 0.999047251817842}, {"start": 332, "end": 333, "word": "5", "entity_group": "LIMIT", "score": 0.9996345671965313}, {"start": 334, "end": 345, "word": "large boxes", "entity_group": "VAR", "score": 0.9999468428919647}, {"start": 364, "end": 372, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988630016230506}, {"start": 373, "end": 376, "word": "750", "entity_group": "LIMIT", "score": 0.9997345424776494}, {"start": 463, "end": 471, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9757563430126862}, {"start": 482, "end": 497, "word": "number of boxes", "entity_group": "OBJ_NAME", "score": 0.983218661701764}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmallBoxes = intvar(0, 999999999)  # Number of small boxes used\nLargeBoxes = intvar(0, 999999999)  # Number of large boxes used\n\n# Constraints\nm = Model()\n\n# At least 750 masks are required to be distributed:\nm += 25 * SmallBoxes + 45 * LargeBoxes >= 750\n# There must be at least three times as many small boxes as large boxes:\nm += SmallBoxes >= 3 * LargeBoxes\n# At least 5 large boxes must be used:\nm += LargeBoxes >= 5\n\n# Objective\n# Minimize the total number of boxes needed:\nm.minimize(SmallBoxes + LargeBoxes)\n"}}
{"912269019": {"document": "Grain is transported from a farm to local grocery stores in either large bags or tiny bags. Large bags can hold 25 kg of grain and requires 4 units of energy to transport. Tiny bags can hold 6 kg of grain and requires 1.5 units of energy to transport. The distribution process has access to 110 units of energy. Because of popularity of buying in bulk, there must be twice as many large bags as tiny bags of rice. Additionally, there must be at least 20 tiny bags of rice. How many of each size of rice bags should be used to maximize the total amount of grain in weight?", "order_mapping": {"large bags": 0, "tiny bags": 1, "Large bags": 0, "Tiny bags": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of grain", "terms": {"Large bags": "25", "Tiny bags": "6"}}, "const_declarations": [{"type": "linear", "direction": "access to", "limit": "110", "terms": {"Large bags": "4", "Tiny bags": "1.5"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "large bags", "direction": "must be", "param": "twice", "y_var": "tiny bags", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "20", "var": "tiny bags", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-25.0, -6.0], "constraints": [[4.0, 1.5, 110.0], [-1.0, 2.0, -0.0], [-0.0, -1.0, -20.0]]}, "solution": null, "entities": [{"start": 67, "end": 77, "word": "large bags", "entity_group": "VAR", "score": 0.999946953458414}, {"start": 81, "end": 90, "word": "tiny bags", "entity_group": "VAR", "score": 0.9999766504243311}, {"start": 93, "end": 103, "word": "Large bags", "entity_group": "VAR", "score": 0.9999769599329971}, {"start": 113, "end": 115, "word": "25", "entity_group": "PARAM", "score": 0.999679903903977}, {"start": 122, "end": 127, "word": "grain", "entity_group": "OBJ_NAME", "score": 0.9977505789736448}, {"start": 141, "end": 142, "word": "4", "entity_group": "PARAM", "score": 0.9996660040762849}, {"start": 174, "end": 183, "word": "Tiny bags", "entity_group": "VAR", "score": 0.9999454808221193}, {"start": 193, "end": 194, "word": "6", "entity_group": "PARAM", "score": 0.9997140568925145}, {"start": 201, "end": 206, "word": "grain", "entity_group": "OBJ_NAME", "score": 0.9977505789754246}, {"start": 220, "end": 223, "word": "1.5", "entity_group": "PARAM", "score": 0.9996659677972306}, {"start": 284, "end": 293, "word": "access to", "entity_group": "CONST_DIR", "score": 0.8621465746352137}, {"start": 294, "end": 297, "word": "110", "entity_group": "LIMIT", "score": 0.999383324582031}, {"start": 372, "end": 377, "word": "twice", "entity_group": "PARAM", "score": 0.9983968712913175}, {"start": 386, "end": 396, "word": "large bags", "entity_group": "VAR", "score": 0.9999573231482669}, {"start": 400, "end": 409, "word": "tiny bags", "entity_group": "VAR", "score": 0.9999744773352824}, {"start": 449, "end": 457, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984733337040557}, {"start": 458, "end": 460, "word": "20", "entity_group": "LIMIT", "score": 0.9994536519452939}, {"start": 461, "end": 470, "word": "tiny bags", "entity_group": "VAR", "score": 0.9999113039135398}, {"start": 534, "end": 542, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9852902983190407}, {"start": 553, "end": 571, "word": "amount of grain in", "entity_group": "OBJ_NAME", "score": 0.9446869601558857}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nLargeBags = intvar(0, 999999999)  # Number of large bags\nTinyBags = intvar(0, 999999999)  # Number of tiny bags\n\n# Constraints\nm = Model()\n\n# The distribution process has access to 110 units of energy:\nm += 4 * LargeBags + 1.5 * TinyBags <= 110\n# There must be twice as many large bags as tiny bags:\nm += LargeBags >= 2 * TinyBags\n# There must be at least 20 tiny bags:\nm += TinyBags >= 20\n\n# Objective\n# Maximize the total amount of grain in weight (25 kg for large bags, 6 kg for tiny bags):\nm.maximize(25 * LargeBags + 6 * TinyBags)\n\n"}}
{"915960254": {"document": "An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?", "order_mapping": {"automatic electric one": 0, "gas-powered one": 1, "automatic electric ones": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of cars processed every hour", "terms": {"gas-powered one": "4", "automatic electric one": "5"}}, "const_declarations": [{"type": "upperbound", "direction": "less than", "limit": "15", "var": "automatic electric ones", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "50", "terms": {"automatic electric one": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "80", "terms": {"gas-powered one": "7"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -4.0], "constraints": [[1.0, 0.0, 15.0], [6.0, 0.0, 50.0], [0.0, 7.0, 80.0]]}, "solution": {"x": 8, "y": 11}, "entities": [{"start": 63, "end": 81, "word": "automatic electric", "entity_group": "VAR", "score": 0.9999722671508308}, {"start": 93, "end": 106, "word": "gas - powered", "entity_group": "VAR", "score": 0.9994457472317505}, {"start": 117, "end": 139, "word": "automatic electric one", "entity_group": "VAR", "score": 0.9987249335283146}, {"start": 152, "end": 153, "word": "5", "entity_group": "PARAM", "score": 0.9997133232197064}, {"start": 154, "end": 158, "word": "cars", "entity_group": "OBJ_NAME", "score": 0.9989749869069979}, {"start": 179, "end": 180, "word": "6", "entity_group": "PARAM", "score": 0.9997179192799052}, {"start": 214, "end": 231, "word": "gas - powered one", "entity_group": "VAR", "score": 0.9981469624695897}, {"start": 244, "end": 245, "word": "4", "entity_group": "PARAM", "score": 0.9995861340343315}, {"start": 246, "end": 250, "word": "cars", "entity_group": "OBJ_NAME", "score": 0.9690307163575739}, {"start": 267, "end": 268, "word": "7", "entity_group": "PARAM", "score": 0.9997231888869141}, {"start": 319, "end": 342, "word": "automatic electric ones", "entity_group": "VAR", "score": 0.9995373901779173}, {"start": 419, "end": 428, "word": "less than", "entity_group": "CONST_DIR", "score": 0.998482075891277}, {"start": 429, "end": 431, "word": "15", "entity_group": "LIMIT", "score": 0.9994185494916316}, {"start": 432, "end": 455, "word": "automatic electric ones", "entity_group": "VAR", "score": 0.9993956940648888}, {"start": 475, "end": 482, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991793895187138}, {"start": 483, "end": 485, "word": "50", "entity_group": "LIMIT", "score": 0.9997312652003914}, {"start": 511, "end": 513, "word": "80", "entity_group": "LIMIT", "score": 0.999633261498599}, {"start": 587, "end": 595, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9994755195417072}, {"start": 600, "end": 614, "word": "amount of cars", "entity_group": "OBJ_NAME", "score": 0.9927544965010985}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAutomaticElectric = intvar(0, 999999999)  # Number of automatic electric jacks\nGasPowered = intvar(0, 999999999)  # Number of gas-powered jacks\n\n# Constraints\nm = Model()\n\n# The shop must use less than 15 automatic electric ones:\nm += AutomaticElectric < 15\n# The shop can use at most 50 units of electricity:\nm += 6 * AutomaticElectric <= 50\n# The shop can use at most 80 units of gas:\nm += 7 * GasPowered <= 80\n\n# Objective\n# Maximize the amount of cars processed every hour (5 cars/hour for automatic electric, 4 cars/hour for gas-powered):\nm.maximize(5 * AutomaticElectric + 4 * GasPowered)\n\n"}}
{"1695786577": {"document": "A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.", "order_mapping": {"trains": 0, "trams": 1, "train": 0, "tram": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of transportation units", "vars": ["trains", "trams"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "600", "terms": {"tram": "30", "train": "120"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "trams", "direction": "at least", "param": "twice", "y_var": "trains", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-120.0, -30.0, -600.0], [2.0, -1.0, -0.0]]}, "solution": {"x": 3, "y": 8}, "entities": [{"start": 111, "end": 117, "word": "trains", "entity_group": "VAR", "score": 0.9997288064250269}, {"start": 122, "end": 127, "word": "trams", "entity_group": "VAR", "score": 0.9998127994537398}, {"start": 135, "end": 140, "word": "train", "entity_group": "VAR", "score": 0.9997010497045564}, {"start": 155, "end": 158, "word": "120", "entity_group": "PARAM", "score": 0.9995243858803828}, {"start": 159, "end": 165, "word": "people", "entity_group": "OBJ_NAME", "score": 0.987899664717465}, {"start": 196, "end": 200, "word": "tram", "entity_group": "VAR", "score": 0.99983462928035}, {"start": 215, "end": 217, "word": "30", "entity_group": "PARAM", "score": 0.9997146156347573}, {"start": 218, "end": 224, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9766567989936857}, {"start": 254, "end": 260, "word": "trains", "entity_group": "VAR", "score": 0.9994553084211153}, {"start": 298, "end": 303, "word": "trams", "entity_group": "VAR", "score": 0.998552995380944}, {"start": 312, "end": 320, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9965459923736688}, {"start": 321, "end": 326, "word": "twice", "entity_group": "PARAM", "score": 0.9943496289620037}, {"start": 341, "end": 347, "word": "trains", "entity_group": "VAR", "score": 0.999799182276204}, {"start": 392, "end": 400, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988530236832615}, {"start": 401, "end": 404, "word": "600", "entity_group": "LIMIT", "score": 0.9995192243714209}, {"start": 405, "end": 411, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9631983201897129}, {"start": 423, "end": 431, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.981579062877041}, {"start": 442, "end": 466, "word": "number of transportation", "entity_group": "OBJ_NAME", "score": 0.9231066395936551}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTrains = intvar(0, 999999999)  # Number of trains\nTrams = intvar(0, 999999999)  # Number of trams\n\n# Constraints\nm = Model()\n\n# Each train can transport 120 people per hour and each tram can transport 30 people per hour:\n# The railway company wants to transport at least 600 people per hour:\nm += 120 * Trains + 30 * Trams >= 600\n# The number of trams must be at least twice the number of trains:\nm += Trams >= 2 * Trains\n\n# Objective\n# Minimize the total number of transportation units (trains + trams):\nm.minimize(Trains + Trams)\n"}}
{"-258335120": {"document": "Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?", "order_mapping": {"palladium-heavy catalyst": 0, "platinum-heavy catalyst": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount converted into carbon dioxide", "terms": {"palladium-heavy catalyst": "5", "platinum-heavy catalyst": "4"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "390", "terms": {"platinum-heavy catalyst": "14", "palladium-heavy catalyst": "25"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "450", "terms": {"palladium-heavy catalyst": "15", "platinum-heavy catalyst": "20"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -4.0], "constraints": [[25.0, 14.0, 390.0], [15.0, 20.0, 450.0]]}, "solution": {"x": 6, "y": 17}, "entities": [{"start": 210, "end": 236, "word": "palladium - heavy catalyst", "entity_group": "VAR", "score": 0.9984594344339137}, {"start": 243, "end": 268, "word": "platinum - heavy catalyst", "entity_group": "VAR", "score": 0.998526267331791}, {"start": 290, "end": 316, "word": "palladium - heavy catalyst", "entity_group": "VAR", "score": 0.9985938722082489}, {"start": 326, "end": 328, "word": "15", "entity_group": "PARAM", "score": 0.9996804060782409}, {"start": 351, "end": 353, "word": "25", "entity_group": "PARAM", "score": 0.9997211732592307}, {"start": 407, "end": 421, "word": "carbon dioxide", "entity_group": "OBJ_NAME", "score": 0.9866896333292148}, {"start": 427, "end": 431, "word": "rate", "entity_group": "OBJ_NAME", "score": 0.9881040363413601}, {"start": 435, "end": 436, "word": "5", "entity_group": "PARAM", "score": 0.9987592953292019}, {"start": 458, "end": 483, "word": "platinum - heavy catalyst", "entity_group": "VAR", "score": 0.9986237698599619}, {"start": 493, "end": 495, "word": "20", "entity_group": "PARAM", "score": 0.9996813663601648}, {"start": 518, "end": 520, "word": "14", "entity_group": "PARAM", "score": 0.9996677777503612}, {"start": 556, "end": 570, "word": "carbon dioxide", "entity_group": "OBJ_NAME", "score": 0.9913019601343195}, {"start": 576, "end": 580, "word": "rate", "entity_group": "OBJ_NAME", "score": 0.9923440552765149}, {"start": 584, "end": 585, "word": "4", "entity_group": "PARAM", "score": 0.9983009275946264}, {"start": 615, "end": 618, "word": "450", "entity_group": "LIMIT", "score": 0.9997588761625571}, {"start": 641, "end": 644, "word": "390", "entity_group": "LIMIT", "score": 0.9997309614182834}, {"start": 664, "end": 673, "word": "available", "entity_group": "CONST_DIR", "score": 0.9979954410276365}, {"start": 720, "end": 728, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9970767221525993}, {"start": 733, "end": 739, "word": "amount", "entity_group": "OBJ_NAME", "score": 0.9988542802254187}, {"start": 755, "end": 769, "word": "carbon dioxide", "entity_group": "OBJ_NAME", "score": 0.9953141990260636}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nPalladiumHeavy = intvar(0, 999999999)  # Number of palladium-heavy catalysts used\nPlatinumHeavy = intvar(0, 999999999)  # Number of platinum-heavy catalysts used\n\n# Constraints\nm = Model()\n\n# Platinum and palladium availability constraints\nm += 15*PalladiumHeavy + 20*PlatinumHeavy <= 450  # Platinum availability\nm += 25*PalladiumHeavy + 14*PlatinumHeavy <= 390  # Palladium availability\n\n# Objective\n# Maximize the amount converted into carbon dioxide\nm.maximize(5*PalladiumHeavy + 4*PlatinumHeavy)\n\n"}}
{"1270045886": {"document": "There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?", "order_mapping": {"process J": 0, "process P.": 1, "Process J": 0, "Process P": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of metal", "terms": {"Process J": "5", "Process P": "9"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "1500", "terms": {"Process J": "8", "Process P": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "1350", "terms": {"Process J": "3", "Process P": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-5.0, -9.0], "constraints": [[8.0, 6.0, 1500.0], [3.0, 5.0, 1350.0]]}, "solution": {"x": 0, "y": 250}, "entities": [{"start": 80, "end": 89, "word": "process J", "entity_group": "VAR", "score": 0.9999712569489815}, {"start": 108, "end": 118, "word": "process P.", "entity_group": "VAR", "score": 0.9999789909637253}, {"start": 119, "end": 128, "word": "Process J", "entity_group": "VAR", "score": 0.9999555486679659}, {"start": 141, "end": 142, "word": "5", "entity_group": "PARAM", "score": 0.9995176811241652}, {"start": 152, "end": 157, "word": "metal", "entity_group": "OBJ_NAME", "score": 0.9982982217883146}, {"start": 164, "end": 165, "word": "8", "entity_group": "PARAM", "score": 0.9997249902164336}, {"start": 194, "end": 195, "word": "3", "entity_group": "PARAM", "score": 0.9996923315591976}, {"start": 217, "end": 226, "word": "Process P", "entity_group": "VAR", "score": 0.9999734207038447}, {"start": 239, "end": 240, "word": "9", "entity_group": "PARAM", "score": 0.9996597131751562}, {"start": 250, "end": 255, "word": "metal", "entity_group": "OBJ_NAME", "score": 0.9982982217852714}, {"start": 262, "end": 263, "word": "6", "entity_group": "PARAM", "score": 0.9997317950063894}, {"start": 292, "end": 293, "word": "5", "entity_group": "PARAM", "score": 0.9997096082761809}, {"start": 328, "end": 335, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991728065744695}, {"start": 336, "end": 340, "word": "1500", "entity_group": "LIMIT", "score": 0.9996862733197548}, {"start": 356, "end": 360, "word": "1350", "entity_group": "LIMIT", "score": 0.999660852585317}, {"start": 440, "end": 448, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996042390437294}, {"start": 453, "end": 468, "word": "amount of metal", "entity_group": "OBJ_NAME", "score": 0.9860644294186265}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nProcessJ = intvar(0, 999999999)  # Number of times process J is performed\nProcessP = intvar(0, 999999999)  # Number of times process P is performed\n\n# Constraints\nm = Model()\n\n# Water usage constraint: 8 units of water for Process J and 6 units for Process P, with a maximum of 1500 units:\nm += 8 * ProcessJ + 6 * ProcessP <= 1500\n# Pollution constraint: 3 units of pollution for Process J and 5 units for Process P, with a maximum of 1350 units:\nm += 3 * ProcessJ + 5 * ProcessP <= 1350\n\n# Objective\n# Maximize the amount of metal extracted: 5 units of metal from Process J and 9 units from Process P:\nm.maximize(5 * ProcessJ + 9 * ProcessP)\n"}}
{"-318455198": {"document": "An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?", "order_mapping": {"escalators": 0, "elevators": 1, "Escalators": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total units of space taken", "terms": {"elevators": "2", "Escalators": "5"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "400", "terms": {"Escalators": "20", "elevators": "8"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "escalators", "direction": "at least", "param": "three", "y_var": "elevators", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "2", "var": "elevators", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 2.0], "constraints": [[-20.0, -8.0, -400.0], [-1.0, 3.0, -0.0], [-0.0, -1.0, -2.0]]}, "solution": {"x": 18, "y": 5}, "entities": [{"start": 30, "end": 40, "word": "escalators", "entity_group": "VAR", "score": 0.999457725279515}, {"start": 44, "end": 53, "word": "elevators", "entity_group": "VAR", "score": 0.9996970346615117}, {"start": 56, "end": 66, "word": "Escalators", "entity_group": "VAR", "score": 0.9997028021371672}, {"start": 81, "end": 83, "word": "20", "entity_group": "PARAM", "score": 0.9995067232555789}, {"start": 112, "end": 121, "word": "elevators", "entity_group": "VAR", "score": 0.9998264882291187}, {"start": 136, "end": 137, "word": "8", "entity_group": "PARAM", "score": 0.9992316249951366}, {"start": 160, "end": 170, "word": "Escalators", "entity_group": "VAR", "score": 0.9998082093597374}, {"start": 179, "end": 180, "word": "5", "entity_group": "PARAM", "score": 0.9995590450549232}, {"start": 190, "end": 195, "word": "space", "entity_group": "OBJ_NAME", "score": 0.8845213786889102}, {"start": 202, "end": 211, "word": "elevators", "entity_group": "VAR", "score": 0.9997258248361284}, {"start": 217, "end": 218, "word": "2", "entity_group": "PARAM", "score": 0.9991032898768424}, {"start": 228, "end": 233, "word": "space", "entity_group": "OBJ_NAME", "score": 0.9976061730178737}, {"start": 291, "end": 299, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983884088985407}, {"start": 300, "end": 303, "word": "400", "entity_group": "LIMIT", "score": 0.9996343343458804}, {"start": 355, "end": 363, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9980802767353176}, {"start": 364, "end": 375, "word": "three times", "entity_group": "PARAM", "score": 0.6172608629843568}, {"start": 381, "end": 391, "word": "escalators", "entity_group": "VAR", "score": 0.9998016553242648}, {"start": 397, "end": 406, "word": "elevators", "entity_group": "VAR", "score": 0.9987010132696293}, {"start": 411, "end": 419, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989322246507581}, {"start": 420, "end": 421, "word": "2", "entity_group": "LIMIT", "score": 0.9996806693465757}, {"start": 422, "end": 431, "word": "elevators", "entity_group": "VAR", "score": 0.9969200915752076}, {"start": 499, "end": 507, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9976942693604246}, {"start": 512, "end": 517, "word": "total", "entity_group": "OBJ_NAME", "score": 0.9436898548844059}, {"start": 518, "end": 532, "word": "units of space", "entity_group": "OBJ_NAME", "score": 0.9526581129503079}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEscalators = intvar(0, 999999999)  # Number of escalators\nElevators = intvar(0, 999999999)  # Number of elevators\n\n# Constraints\nm = Model()\n\n# Capacity to transport at least 400 people every minute:\nm += 20 * Escalators + 8 * Elevators >= 400\n# At least three times more escalators than elevators:\nm += Escalators >= 3 * Elevators\n# At least 2 elevators must be used:\nm += Elevators >= 2\n\n# Objective\n# Minimize the total units of space taken (5 units per escalator, 2 units per elevator):\nm.minimize(5 * Escalators + 2 * Elevators)\n"}}
{"-15543151": {"document": "A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?", "order_mapping": {"method A": 0, "method B.": 1, "Method A": 0, "Method B": 1, "method B": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "hour", "vars": ["method A", "method B."]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "1400", "terms": {"Method A": "25", "Method B": "45"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1000", "terms": {"Method A": "14", "Method B": "25"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "3500", "terms": {"Method A": "60", "method B": "65"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-25.0, -45.0, -1400.0], [-14.0, -25.0, -1000.0], [60.0, 65.0, 3500.0]]}, "solution": {"x": 0, "y": 40}, "entities": [{"start": 66, "end": 74, "word": "method A", "entity_group": "VAR", "score": 0.9999798761053642}, {"start": 79, "end": 88, "word": "method B.", "entity_group": "VAR", "score": 0.9999458752142837}, {"start": 89, "end": 97, "word": "Method A", "entity_group": "VAR", "score": 0.9999253445857569}, {"start": 107, "end": 109, "word": "25", "entity_group": "PARAM", "score": 0.9996975542312478}, {"start": 130, "end": 132, "word": "14", "entity_group": "PARAM", "score": 0.9997129149514261}, {"start": 161, "end": 169, "word": "Method B", "entity_group": "VAR", "score": 0.9999178631927962}, {"start": 179, "end": 181, "word": "45", "entity_group": "PARAM", "score": 0.9997154140170474}, {"start": 202, "end": 204, "word": "25", "entity_group": "PARAM", "score": 0.9997129801720052}, {"start": 233, "end": 241, "word": "Method A", "entity_group": "VAR", "score": 0.9999691182096654}, {"start": 251, "end": 253, "word": "60", "entity_group": "PARAM", "score": 0.9995907801654472}, {"start": 287, "end": 295, "word": "method B", "entity_group": "VAR", "score": 0.9999230175912868}, {"start": 305, "end": 307, "word": "65", "entity_group": "PARAM", "score": 0.9995724234240095}, {"start": 367, "end": 376, "word": "available", "entity_group": "CONST_DIR", "score": 0.9978834507315648}, {"start": 377, "end": 381, "word": "3500", "entity_group": "LIMIT", "score": 0.9989895495896669}, {"start": 425, "end": 433, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991212620361805}, {"start": 434, "end": 438, "word": "1400", "entity_group": "LIMIT", "score": 0.9997753879554505}, {"start": 459, "end": 463, "word": "1000", "entity_group": "LIMIT", "score": 0.9996963419628572}, {"start": 529, "end": 537, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986632964305281}, {"start": 542, "end": 552, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9937924433054659}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMethodA = intvar(0, 999999999)  # Number of hours method A is executed\nMethodB = intvar(0, 999999999)  # Number of hours method B is executed\n\n# Constraints\nm = Model()\n\n# The research group must make at least 1400 units of fabric:\nm += 25*MethodA + 45*MethodB >= 1400\n# The research group must make at least 1000 units of plastic:\nm += 14*MethodA + 25*MethodB >= 1000\n# The research group has available 3500 units of the special element:\nm += 60*MethodA + 65*MethodB <= 3500\n\n# Objective\n# Minimize the total time needed (sum of hours for both methods):\nm.minimize(MethodA + MethodB)\n"}}
{"-440570570": {"document": "A taxi company will purchase vehicles to rent to their drivers. They are interested in purchasing either motorcycles or sedans. A motorcycle can transport 30 people, produces 4 units of pollution, and earns the taxi company $100 per shift. A sedan can transport 70 people, produces 15 units of pollution and earns the company $225 per shift. Because not every customer is comfortable with a motorcycle, at most 25% of vehicles can be motorcycles. Additionally, the company has committed to producing less than 200 units of pollution. The company needs to transport at least 1200 people every shift. How many of each type of vehicle should be used to maximize the total earnings for the taxi company per shift?", "order_mapping": {"motorcycles": 0, "sedans": 1, "motorcycle": 0, "sedan": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "total earnings", "terms": {"motorcycle": "100", "sedan": "225"}}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "25%", "var": "motorcycles", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "less than", "limit": "200", "terms": {"motorcycle": "4", "sedan": "15"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "1200", "terms": {"motorcycle": "30", "sedan": "70"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-100.0, -225.0], "constraints": [[0.75, -0.25, 0.0], [4.0, 15.0, 200.0], [-30.0, -70.0, -1200.0]]}, "solution": null, "entities": [{"start": 106, "end": 117, "word": "motorcycles", "entity_group": "VAR", "score": 0.9997568475205857}, {"start": 121, "end": 127, "word": "sedans", "entity_group": "VAR", "score": 0.9998294697293104}, {"start": 132, "end": 142, "word": "motorcycle", "entity_group": "VAR", "score": 0.9996303119974128}, {"start": 157, "end": 159, "word": "30", "entity_group": "PARAM", "score": 0.9976450186598024}, {"start": 178, "end": 179, "word": "4", "entity_group": "PARAM", "score": 0.9996661870472406}, {"start": 205, "end": 210, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9559269179248031}, {"start": 230, "end": 233, "word": "100", "entity_group": "PARAM", "score": 0.999545620721871}, {"start": 248, "end": 253, "word": "sedan", "entity_group": "VAR", "score": 0.9996717205220891}, {"start": 268, "end": 270, "word": "70", "entity_group": "PARAM", "score": 0.9984747964271816}, {"start": 289, "end": 291, "word": "15", "entity_group": "PARAM", "score": 0.9996238990401004}, {"start": 315, "end": 320, "word": "earns", "entity_group": "OBJ_NAME", "score": 0.9922898288007147}, {"start": 335, "end": 338, "word": "225", "entity_group": "PARAM", "score": 0.9994339319591906}, {"start": 400, "end": 410, "word": "motorcycle", "entity_group": "VAR", "score": 0.9990488058871183}, {"start": 413, "end": 420, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991908607322586}, {"start": 421, "end": 425, "word": "25 %", "entity_group": "LIMIT", "score": 0.9758011567316556}, {"start": 445, "end": 456, "word": "motorcycles", "entity_group": "VAR", "score": 0.9996244090567853}, {"start": 513, "end": 522, "word": "less than", "entity_group": "CONST_DIR", "score": 0.9975904694803017}, {"start": 523, "end": 526, "word": "200", "entity_group": "LIMIT", "score": 0.9994639151847223}, {"start": 579, "end": 587, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987637519338868}, {"start": 588, "end": 592, "word": "1200", "entity_group": "LIMIT", "score": 0.9987533097722102}, {"start": 665, "end": 673, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9948248077380933}, {"start": 684, "end": 692, "word": "earnings", "entity_group": "OBJ_NAME", "score": 0.9972309425927899}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMotorcycles = intvar(0, 999999999)  # Number of motorcycles\nSedans = intvar(0, 999999999)  # Number of sedans\n\n# Constraints\nm = Model()\n\n# At most 25% of vehicles can be motorcycles:\n# Let's first express the total number of vehicles as a decision variable for clarity\nTotalVehicles = Motorcycles + Sedans\nm += Motorcycles <= 0.25 * TotalVehicles\n\n# Producing less than 200 units of pollution:\nm += 4 * Motorcycles + 15 * Sedans < 200\n\n# Need to transport at least 1200 people every shift:\nm += 30 * Motorcycles + 70 * Sedans >= 1200\n\n# Objective\n# Maximize total earnings ($100 per motorcycle shift, $225 per sedan shift):\nm.maximize(100 * Motorcycles + 225 * Sedans)\n\n"}}
{"-876754599": {"document": "Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?", "order_mapping": {"kayak": 0, "motorboat": 1, "Kayaks": 0, "motorboats": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of time", "terms": {"Kayaks": "5", "motorboats": "3"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "550", "terms": {"Kayaks": "4", "motorboats": "5"}, "operator": "GREATER_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "25", "var": "motorboat", "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "75%", "var": "kayak", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [5.0, 3.0], "constraints": [[-4.0, -5.0, -550.0], [0.0, 1.0, 25.0], [-0.25, 0.75, -0.0]]}, "solution": {"x": 107, "y": 25}, "entities": [{"start": 21, "end": 29, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983591731095968}, {"start": 30, "end": 33, "word": "550", "entity_group": "LIMIT", "score": 0.9997211748656964}, {"start": 121, "end": 126, "word": "kayak", "entity_group": "VAR", "score": 0.9994427487490071}, {"start": 132, "end": 141, "word": "motorboat", "entity_group": "VAR", "score": 0.999715777639428}, {"start": 144, "end": 150, "word": "Kayaks", "entity_group": "VAR", "score": 0.9994453969383916}, {"start": 155, "end": 164, "word": "transport", "entity_group": "OBJ_NAME", "score": 0.9980235906377509}, {"start": 165, "end": 166, "word": "4", "entity_group": "PARAM", "score": 0.9972948545498285}, {"start": 167, "end": 173, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9647671232651043}, {"start": 189, "end": 199, "word": "motorboats", "entity_group": "VAR", "score": 0.9998061813615974}, {"start": 204, "end": 213, "word": "transport", "entity_group": "OBJ_NAME", "score": 0.9940428443763812}, {"start": 214, "end": 215, "word": "5", "entity_group": "PARAM", "score": 0.997115229509976}, {"start": 216, "end": 222, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9901010830144613}, {"start": 236, "end": 242, "word": "Kayaks", "entity_group": "VAR", "score": 0.9997345899260341}, {"start": 248, "end": 249, "word": "5", "entity_group": "PARAM", "score": 0.9996262079041955}, {"start": 275, "end": 285, "word": "motorboats", "entity_group": "VAR", "score": 0.9997316405180462}, {"start": 291, "end": 292, "word": "3", "entity_group": "PARAM", "score": 0.9986745342401351}, {"start": 341, "end": 351, "word": "motorboats", "entity_group": "VAR", "score": 0.9994443307700119}, {"start": 391, "end": 398, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988412775627011}, {"start": 399, "end": 401, "word": "25", "entity_group": "LIMIT", "score": 0.9995455259882562}, {"start": 402, "end": 411, "word": "motorboat", "entity_group": "VAR", "score": 0.9992856235949205}, {"start": 422, "end": 430, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989699570352272}, {"start": 431, "end": 435, "word": "75 %", "entity_group": "LIMIT", "score": 0.9555748545136715}, {"start": 462, "end": 467, "word": "kayak", "entity_group": "VAR", "score": 0.9996423212550223}, {"start": 527, "end": 535, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9718555648728648}, {"start": 546, "end": 560, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9846014548378543}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nKayakTrips = intvar(0, 999999999)  # Number of kayak trips\nMotorboatTrips = intvar(0, 999999999)  # Number of motorboat trips\n\n# Constraints\nm = Model()\n\n# At least 550 locals must be moved across the lake:\nm += 4 * KayakTrips + 5 * MotorboatTrips >= 550\n# There can be at most 25 motorboat trips:\nm += MotorboatTrips <= 25\n# At least 75% of the trips should be by kayak:\n# This constraint implies that the number of kayak trips should be at least three times the number of motorboat trips\nm += KayakTrips >= 3 * MotorboatTrips\n\n# Objective\n# Minimize the total amount of time needed (5 minutes per kayak trip, 3 minutes per motorboat trip):\nm.minimize(5 * KayakTrips + 3 * MotorboatTrips)\n\n"}}
{"1197838065": {"document": "A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.", "order_mapping": {"ear": 0, "blood": 1, "blood test": 1, "ear test": 0, "blood tests": 1, "ear tests": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "test", "vars": ["ear", "blood"]}, "const_declarations": [{"type": "xby", "x_var": "blood tests", "direction": "at least", "param": "three times", "y_var": "ear tests", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "12", "var": "ear tests", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "total", "limit": "7525", "terms": {"blood tests": "30", "ear tests": "5"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[3.0, -1.0, -0.0], [-1.0, -0.0, -12.0], [5.0, 30.0, 7525.0]]}, "solution": {"x": 79, "y": 237}, "entities": [{"start": 59, "end": 62, "word": "ear", "entity_group": "VAR", "score": 0.9993639228110174}, {"start": 66, "end": 71, "word": "blood", "entity_group": "VAR", "score": 0.9997711222501331}, {"start": 76, "end": 86, "word": "blood test", "entity_group": "VAR", "score": 0.9999742684201105}, {"start": 93, "end": 95, "word": "30", "entity_group": "PARAM", "score": 0.9995987049205923}, {"start": 124, "end": 132, "word": "ear test", "entity_group": "VAR", "score": 0.9999626727782831}, {"start": 139, "end": 140, "word": "5", "entity_group": "PARAM", "score": 0.9992354549221657}, {"start": 172, "end": 182, "word": "blood test", "entity_group": "VAR", "score": 0.9999788212284114}, {"start": 202, "end": 210, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9971069747625239}, {"start": 211, "end": 216, "word": "three", "entity_group": "PARAM", "score": 0.9938584170455363}, {"start": 231, "end": 242, "word": "blood tests", "entity_group": "VAR", "score": 0.999974507862564}, {"start": 266, "end": 275, "word": "ear tests", "entity_group": "VAR", "score": 0.9999643549958201}, {"start": 288, "end": 296, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9987702878325849}, {"start": 297, "end": 299, "word": "12", "entity_group": "LIMIT", "score": 0.9995621462461313}, {"start": 300, "end": 309, "word": "ear tests", "entity_group": "VAR", "score": 0.9999397194571309}, {"start": 370, "end": 374, "word": "7525", "entity_group": "LIMIT", "score": 0.9995651324773939}, {"start": 385, "end": 393, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9941000672518667}, {"start": 398, "end": 413, "word": "number of tests", "entity_group": "OBJ_NAME", "score": 0.9911165562766041}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nEarTests = intvar(0, 999999999)  # Number of ear tests performed\nBloodTests = intvar(0, 999999999)  # Number of blood tests performed\n\n# Constraints\nm = Model()\n\n# At least three times as many blood tests should be performed as ear tests:\nm += BloodTests >= 3 * EarTests\n# At least 12 ear tests must be administered:\nm += EarTests >= 12\n# The clinic operates for 7525 minutes (Blood test takes 30 minutes, Ear test takes 5 minutes):\nm += 30 * BloodTests + 5 * EarTests <= 7525\n\n# Objective\n# Maximize the number of tests that can be performed:\nm.maximize(EarTests + BloodTests)\n"}}
{"346332840": {"document": "A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges $100 per hour and the common company charges $72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?", "order_mapping": {"specialized third-party": 0, "common third-party annotation company": 1, "specialized company": 0, "common company": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "cost of annotating the whole dataset", "terms": {"specialized company": "100", "common company": "72"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "10,000", "terms": {"specialized company": "60", "common company": "40"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at least", "limit": "third", "var": "specialized company", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [100.0, 72.0], "constraints": [[-60.0, -40.0, -10000.0], [-2, 1, -0.0]]}, "solution": {"x": 166, "y": 1}, "entities": [{"start": 64, "end": 89, "word": "specialized third - party", "entity_group": "VAR", "score": 0.9985021115560915}, {"start": 95, "end": 109, "word": "common third -", "entity_group": "VAR", "score": 0.992623756569225}, {"start": 141, "end": 160, "word": "specialized company", "entity_group": "VAR", "score": 0.9999144541831392}, {"start": 187, "end": 189, "word": "60", "entity_group": "PARAM", "score": 0.999451908948359}, {"start": 218, "end": 232, "word": "common company", "entity_group": "VAR", "score": 0.9998923855867142}, {"start": 259, "end": 261, "word": "40", "entity_group": "PARAM", "score": 0.9993792023896912}, {"start": 294, "end": 313, "word": "specialized company", "entity_group": "VAR", "score": 0.9999711530311772}, {"start": 314, "end": 321, "word": "charges", "entity_group": "OBJ_NAME", "score": 0.9937579501340384}, {"start": 324, "end": 327, "word": "100", "entity_group": "PARAM", "score": 0.9995736773056351}, {"start": 345, "end": 359, "word": "common company", "entity_group": "VAR", "score": 0.9999371489135968}, {"start": 360, "end": 367, "word": "charges", "entity_group": "OBJ_NAME", "score": 0.9903097432129809}, {"start": 370, "end": 372, "word": "72", "entity_group": "PARAM", "score": 0.9996513420009566}, {"start": 452, "end": 460, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998721814645163}, {"start": 461, "end": 467, "word": "10,000", "entity_group": "LIMIT", "score": 0.9997129163494898}, {"start": 526, "end": 545, "word": "specialized company", "entity_group": "VAR", "score": 0.9999447063329744}, {"start": 573, "end": 581, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9985308494057656}, {"start": 584, "end": 589, "word": "third", "entity_group": "LIMIT", "score": 0.9577104834415922}, {"start": 623, "end": 642, "word": "specialized company", "entity_group": "VAR", "score": 0.9999087518946893}, {"start": 722, "end": 730, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9963825005900947}, {"start": 735, "end": 739, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9917584173596264}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\n# Hours allocated to specialized and common companies\nHoursSpecialized = intvar(0, 999999999)\nHoursCommon = intvar(0, 999999999)\n\n# Constraints\nm = Model()\n\n# At least 10,000 images must be annotated\nm += 60 * HoursSpecialized + 40 * HoursCommon >= 10000\n# At least a third of the work must be allocated to the specialized company\nm += 3 * HoursSpecialized >= HoursSpecialized + HoursCommon\n\n# Objective\n# Minimize the cost of annotating the whole dataset\nm.minimize(100 * HoursSpecialized + 72 * HoursCommon)\n\n"}}
{"-1396068089": {"document": "A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?", "order_mapping": {"golf carts": 0, "pull carts": 1, "golf cart": 0, "pull cart": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "number of carts", "vars": ["golf carts", "pull carts"]}, "const_declarations": [{"type": "ratio", "direction": "at most", "limit": "60%", "var": "golf carts", "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "80", "terms": {"golf cart": "4", "pull cart": "1"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[0.4, -0.6, 0.0], [-4.0, -1.0, -80.0]]}, "solution": {"x": 17, "y": 12}, "entities": [{"start": 72, "end": 82, "word": "golf carts", "entity_group": "VAR", "score": 0.9996667473176752}, {"start": 86, "end": 96, "word": "pull carts", "entity_group": "VAR", "score": 0.999967634993863}, {"start": 101, "end": 110, "word": "golf cart", "entity_group": "VAR", "score": 0.9999161578252853}, {"start": 120, "end": 121, "word": "4", "entity_group": "PARAM", "score": 0.9996685753849003}, {"start": 137, "end": 146, "word": "pull cart", "entity_group": "VAR", "score": 0.9999762363640761}, {"start": 156, "end": 157, "word": "1", "entity_group": "PARAM", "score": 0.9994972951880996}, {"start": 172, "end": 182, "word": "golf carts", "entity_group": "VAR", "score": 0.9999041903692828}, {"start": 208, "end": 215, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9988202332535736}, {"start": 216, "end": 220, "word": "60 %", "entity_group": "LIMIT", "score": 0.9717045313848991}, {"start": 237, "end": 247, "word": "golf carts", "entity_group": "VAR", "score": 0.9999305560549676}, {"start": 288, "end": 296, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984127171933738}, {"start": 297, "end": 299, "word": "80", "entity_group": "LIMIT", "score": 0.9994756301646741}, {"start": 349, "end": 357, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9823669680929782}, {"start": 362, "end": 383, "word": "total number of carts", "entity_group": "OBJ_NAME", "score": 0.9747328947900258}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nGolfCarts = intvar(0, 999999999)  # Number of golf carts\nPullCarts = intvar(0, 999999999)  # Number of pull carts\n\n# Constraints\nm = Model()\n\n# At least 80 guests need to be transported:\nm += 4 * GolfCarts + PullCarts >= 80\n# At most 60% of carts can be golf carts:\nm += GolfCarts <= 0.6 * (GolfCarts + PullCarts)\n\n# Objective\n# Minimize the total number of carts needed:\nm.minimize(GolfCarts + PullCarts)\n\n"}}
{"-1210596886": {"document": "A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?", "order_mapping": {"acai berry smoothie": 0, "banana chocolate smoothie": 1, "Banana chocolate smoothies": 1, "banana chocolate": 1, "acai berry smoothies": 0}, "obj_declaration": {"type": "objective", "direction": "reduce", "name": "amount of water", "terms": {"acai berry smoothie": "3", "banana chocolate smoothie": "4"}}, "const_declarations": [{"type": "xy", "x_var": "banana chocolate", "direction": "more than", "y_var": "acai berry smoothies", "operator": "GREATER"}, {"type": "ratio", "direction": "at least", "limit": "35%", "var": "acai berry smoothies", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "3500", "terms": {"acai berry smoothie": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "has", "limit": "3200", "terms": {"banana chocolate smoothie": "6"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [3.0, 4.0], "constraints": [[1.0, -1.0, -1e-06], [-0.65, 0.35, -0.0], [7.0, 0.0, 3500.0], [0.0, 6.0, 3200.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 61, "end": 80, "word": "acai berry smoothie", "entity_group": "VAR", "score": 0.9997434026677436}, {"start": 87, "end": 112, "word": "banana chocolate smoothie", "entity_group": "VAR", "score": 0.9988970608276642}, {"start": 124, "end": 125, "word": "7", "entity_group": "PARAM", "score": 0.9994764463333371}, {"start": 152, "end": 153, "word": "3", "entity_group": "PARAM", "score": 0.9994815011981628}, {"start": 181, "end": 200, "word": "acai berry smoothie", "entity_group": "VAR", "score": 0.9996159950751774}, {"start": 212, "end": 213, "word": "6", "entity_group": "PARAM", "score": 0.9993250783965052}, {"start": 244, "end": 245, "word": "4", "entity_group": "PARAM", "score": 0.9994721314976738}, {"start": 273, "end": 298, "word": "banana chocolate smoothie", "entity_group": "VAR", "score": 0.9997073408037624}, {"start": 301, "end": 327, "word": "Banana chocolate smoothies", "entity_group": "VAR", "score": 0.9982138296048488}, {"start": 368, "end": 394, "word": "banana chocolate smoothies", "entity_group": "VAR", "score": 0.9996469569886234}, {"start": 408, "end": 417, "word": "more than", "entity_group": "CONST_DIR", "score": 0.9942346636509082}, {"start": 432, "end": 452, "word": "acai berry smoothies", "entity_group": "VAR", "score": 0.9994159922436404}, {"start": 474, "end": 494, "word": "acai berry smoothies", "entity_group": "VAR", "score": 0.9996798486898607}, {"start": 528, "end": 536, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991146806371146}, {"start": 537, "end": 541, "word": "35 %", "entity_group": "LIMIT", "score": 0.9851577008302701}, {"start": 572, "end": 592, "word": "acai berry smoothies", "entity_group": "VAR", "score": 0.9996544241839288}, {"start": 616, "end": 619, "word": "has", "entity_group": "CONST_DIR", "score": 0.9982553230454159}, {"start": 620, "end": 624, "word": "3500", "entity_group": "LIMIT", "score": 0.9985347293872509}, {"start": 651, "end": 655, "word": "3200", "entity_group": "LIMIT", "score": 0.9996830503352184}, {"start": 704, "end": 719, "word": "amount of water", "entity_group": "OBJ_NAME", "score": 0.9728183543486442}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nAcaiBerrySmoothie = intvar(0, 999999999)  # Number of acai berry smoothies made\nBananaChocolateSmoothie = intvar(0, 999999999)  # Number of banana chocolate smoothies made\n\n# Constraints\nm = Model()\n\n# The number of banana chocolate smoothies made must be more than the number of acai berry smoothies made:\nm += BananaChocolateSmoothie > AcaiBerrySmoothie\n# At least 35% of the smoothies made must be acai berry smoothies:\nm += AcaiBerrySmoothie >= 0.35 * (AcaiBerrySmoothie + BananaChocolateSmoothie)\n# The smoothie shop has 3500 units of acai berries:\nm += 7 * AcaiBerrySmoothie <= 3500\n# The smoothie shop has 3200 units of banana chocolate:\nm += 6 * BananaChocolateSmoothie <= 3200\n\n# Objective\n# To reduce the total amount of water used (3 units of water for each acai berry smoothie and 4 units for each banana chocolate smoothie):\nm.minimize(3 * AcaiBerrySmoothie + 4 * BananaChocolateSmoothie)\n"}}
{"249931530": {"document": "A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?", "order_mapping": {"basketballs": 0, "footballs": 1, "Basketballs": 0}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "total number of sports equipment produced", "vars": ["basketballs", "footballs"]}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "1500", "terms": {"Basketballs": "5", "footballs": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "750", "terms": {"footballs": "2", "Basketballs": "1"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "basketballs", "direction": "at least", "param": "three times", "y_var": "footballs", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "50", "var": "footballs", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[5.0, 3.0, 1500.0], [1.0, 2.0, 750.0], [-1.0, 3.0, -0.0], [-0.0, -1.0, -50.0]]}, "solution": {"x": 250, "y": 83}, "entities": [{"start": 56, "end": 67, "word": "basketballs", "entity_group": "VAR", "score": 0.9996247415658208}, {"start": 72, "end": 81, "word": "footballs", "entity_group": "VAR", "score": 0.9991161965308248}, {"start": 84, "end": 95, "word": "Basketballs", "entity_group": "VAR", "score": 0.9994127322039777}, {"start": 104, "end": 105, "word": "5", "entity_group": "PARAM", "score": 0.9996916806592108}, {"start": 129, "end": 130, "word": "1", "entity_group": "PARAM", "score": 0.9996000780259181}, {"start": 152, "end": 161, "word": "footballs", "entity_group": "VAR", "score": 0.9996060531278365}, {"start": 170, "end": 171, "word": "3", "entity_group": "PARAM", "score": 0.9997150525413772}, {"start": 195, "end": 196, "word": "2", "entity_group": "PARAM", "score": 0.9997211854914229}, {"start": 243, "end": 252, "word": "available", "entity_group": "CONST_DIR", "score": 0.9985086575908165}, {"start": 253, "end": 257, "word": "1500", "entity_group": "LIMIT", "score": 0.999193098066585}, {"start": 332, "end": 339, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9989609859945288}, {"start": 340, "end": 343, "word": "750", "entity_group": "LIMIT", "score": 0.9997705813643968}, {"start": 358, "end": 369, "word": "basketballs", "entity_group": "VAR", "score": 0.9994961564783953}, {"start": 398, "end": 406, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9982350697789262}, {"start": 407, "end": 412, "word": "three", "entity_group": "PARAM", "score": 0.9964341884776643}, {"start": 427, "end": 438, "word": "basketballs", "entity_group": "VAR", "score": 0.9996998971311418}, {"start": 442, "end": 451, "word": "footballs", "entity_group": "VAR", "score": 0.9995951109243912}, {"start": 493, "end": 501, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988128707018258}, {"start": 502, "end": 504, "word": "50", "entity_group": "LIMIT", "score": 0.9995512573726758}, {"start": 505, "end": 514, "word": "footballs", "entity_group": "VAR", "score": 0.9996209597283896}, {"start": 575, "end": 583, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9988528971887917}, {"start": 594, "end": 620, "word": "number of sports equipment", "entity_group": "OBJ_NAME", "score": 0.9744916059867812}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBasketballs = intvar(0, 999999999)  # Number of basketballs made\nFootballs = intvar(0, 999999999)  # Number of footballs made\n\n# Constraints\nm = Model()\n\n# Material constraints: 5 units per basketball and 3 units per football, with 1500 units available\nm += 5 * Basketballs + 3 * Footballs <= 1500\n# Time constraints: 1 hour per basketball and 2 hours per football, with 750 hours available\nm += 1 * Basketballs + 2 * Footballs <= 750\n# There must be at least three times as many basketballs as footballs\nm += Basketballs >= 3 * Footballs\n# The manufacturing company would like at least 50 footballs\nm += Footballs >= 50\n\n# Objective\n# Maximize the total number of sports equipment produced\nm.maximize(Basketballs + Footballs)\n\n"}}
{"1384123609": {"document": "A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?", "order_mapping": {"in-vivo": 0, "ex-vivo": 1, "In-vivo experiments": 0, "Ex-vivo experiments": 1, "in-vivo experiments": 0, "ex-vivo experiments": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total radiation", "terms": {"in-vivo experiments": "2", "ex-vivo experiments": "3"}}, "const_declarations": [{"type": "linear", "direction": "At most", "limit": "400", "terms": {"In-vivo experiments": "30", "Ex-vivo experiments": "45"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "At most", "limit": "500", "terms": {"In-vivo experiments": "60", "Ex-vivo experiments": "30"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [2.0, 3.0], "constraints": [[30.0, 45.0, 400.0], [60.0, 30.0, 500.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 53, "end": 62, "word": "in - vivo", "entity_group": "VAR", "score": 0.9992642651497071}, {"start": 67, "end": 76, "word": "ex - vivo", "entity_group": "VAR", "score": 0.9991427314520024}, {"start": 79, "end": 100, "word": "In - vivo experiments", "entity_group": "VAR", "score": 0.9983451177341108}, {"start": 110, "end": 112, "word": "30", "entity_group": "PARAM", "score": 0.9996902492641019}, {"start": 136, "end": 138, "word": "60", "entity_group": "PARAM", "score": 0.9997021787376495}, {"start": 160, "end": 181, "word": "Ex - vivo experiments", "entity_group": "VAR", "score": 0.9981900968170041}, {"start": 190, "end": 192, "word": "45", "entity_group": "PARAM", "score": 0.9997190118572696}, {"start": 216, "end": 218, "word": "30", "entity_group": "PARAM", "score": 0.9997144474150311}, {"start": 254, "end": 275, "word": "in - vivo experiments", "entity_group": "VAR", "score": 0.997920957991199}, {"start": 297, "end": 298, "word": "2", "entity_group": "PARAM", "score": 0.999685773640346}, {"start": 308, "end": 317, "word": "radiation", "entity_group": "OBJ_NAME", "score": 0.9982228883116996}, {"start": 324, "end": 345, "word": "ex - vivo experiments", "entity_group": "VAR", "score": 0.9981037941141865}, {"start": 366, "end": 367, "word": "3", "entity_group": "PARAM", "score": 0.9996646053802815}, {"start": 378, "end": 387, "word": "radiation", "entity_group": "OBJ_NAME", "score": 0.9988184659561485}, {"start": 390, "end": 397, "word": "At most", "entity_group": "CONST_DIR", "score": 0.9970232875036128}, {"start": 398, "end": 401, "word": "400", "entity_group": "LIMIT", "score": 0.9997654812281952}, {"start": 442, "end": 445, "word": "500", "entity_group": "LIMIT", "score": 0.9995410490265664}, {"start": 557, "end": 565, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9917652718950438}, {"start": 576, "end": 585, "word": "radiation", "entity_group": "OBJ_NAME", "score": 0.9977768957961662}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nInVivo = intvar(0, 999999999)  # Number of in-vivo experiments scheduled\nExVivo = intvar(0, 999999999)  # Number of ex-vivo experiments scheduled\n\n# Constraints\nm = Model()\n\n# At most 400 minutes can be used for preparation:\nm += 30 * InVivo + 45 * ExVivo <= 400\n# At most 500 minutes for execution:\nm += 60 * InVivo + 30 * ExVivo <= 500\n\n# Objective\n# Minimize the total radiation received by the researcher (2 units from in-vivo and 3 units from ex-vivo):\nm.minimize(2 * InVivo + 3 * ExVivo)\n"}}
{"1738773919": {"document": "A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?", "order_mapping": {"runners": 0, "canoers": 1, "Runners": 0, "Canoers": 1, "canoe": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "amount of mail", "terms": {"Canoers": "ten", "Runners": "three"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "200", "terms": {"Runners": "4", "Canoers": "2"}, "operator": "LESS_OR_EQUAL"}, {"type": "ratio", "direction": "At most", "limit": "33%", "var": "canoe", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "4", "var": "runners", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-3.0, -10.0], "constraints": [[4.0, 2.0, 200.0], [-0.33, 0.67, 0.0], [-1.0, -0.0, -4.0]]}, "solution": {"x": 40, "y": 19}, "entities": [{"start": 53, "end": 60, "word": "runners", "entity_group": "VAR", "score": 0.9997062569675972}, {"start": 64, "end": 71, "word": "canoers", "entity_group": "VAR", "score": 0.9997707209847674}, {"start": 74, "end": 81, "word": "Runners", "entity_group": "VAR", "score": 0.9997002921754354}, {"start": 92, "end": 97, "word": "three", "entity_group": "PARAM", "score": 0.99884137086419}, {"start": 106, "end": 110, "word": "mail", "entity_group": "OBJ_NAME", "score": 0.9969887397198853}, {"start": 131, "end": 132, "word": "4", "entity_group": "PARAM", "score": 0.9997487277485139}, {"start": 141, "end": 148, "word": "Canoers", "entity_group": "VAR", "score": 0.9997392882481403}, {"start": 159, "end": 162, "word": "ten", "entity_group": "PARAM", "score": 0.9974206917245885}, {"start": 171, "end": 175, "word": "mail", "entity_group": "OBJ_NAME", "score": 0.9969887416141927}, {"start": 196, "end": 197, "word": "2", "entity_group": "PARAM", "score": 0.99966271639347}, {"start": 206, "end": 213, "word": "At most", "entity_group": "CONST_DIR", "score": 0.9985295695326833}, {"start": 214, "end": 218, "word": "33 %", "entity_group": "LIMIT", "score": 0.9700065241961173}, {"start": 243, "end": 248, "word": "canoe", "entity_group": "VAR", "score": 0.9996451481062778}, {"start": 288, "end": 295, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985963975534964}, {"start": 296, "end": 299, "word": "200", "entity_group": "LIMIT", "score": 0.9995896940262684}, {"start": 316, "end": 324, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9989310020077127}, {"start": 325, "end": 326, "word": "4", "entity_group": "LIMIT", "score": 0.9997244142174067}, {"start": 327, "end": 334, "word": "runners", "entity_group": "VAR", "score": 0.9962066807929671}, {"start": 398, "end": 406, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9917461001775497}, {"start": 411, "end": 431, "word": "total amount of mail", "entity_group": "OBJ_NAME", "score": 0.9640673075385601}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nRunners = intvar(0, 999999999)  # Number of runners used\nCanoers = intvar(0, 999999999)  # Number of canoers used\n\n# Constraints\nm = Model()\n\n# The village can spare at most 200 total hours (Runners take 4 hours, Canoers take 2 hours):\nm += 4 * Runners + 2 * Canoers <= 200\n# At most 33% of deliveries can be by canoe:\nm += Canoers <= 0.33 * (Runners + Canoers)\n# At least 4 runners must be used:\nm += Runners >= 4\n\n# Objective\n# Maximize the total amount of mail that can be delivered (Runners carry three bags, Canoers carry ten bags):\nm.maximize(3 * Runners + 10 * Canoers)\n\n"}}
{"-169306566": {"document": "A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?", "order_mapping": {"smoothie": 0, "protein bar": 1, "protein bars": 1, "smoothies": 0}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "protein intake", "terms": {"smoothie": "2", "protein bar": "7"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "2000", "terms": {"smoothie": "300", "protein bar": "250"}, "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "protein bars", "direction": "more", "param": "2 times", "y_var": "smoothies", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-2.0, -7.0], "constraints": [[300.0, 250.0, 2000.0], [2.0, -1.0, -0.0]]}, "solution": {"x": 0, "y": 8}, "entities": [{"start": 59, "end": 67, "word": "smoothie", "entity_group": "VAR", "score": 0.9996980109987016}, {"start": 74, "end": 85, "word": "protein bar", "entity_group": "VAR", "score": 0.9999396134874451}, {"start": 93, "end": 101, "word": "smoothie", "entity_group": "VAR", "score": 0.9996525138208117}, {"start": 111, "end": 112, "word": "2", "entity_group": "PARAM", "score": 0.9989504572384208}, {"start": 134, "end": 137, "word": "300", "entity_group": "PARAM", "score": 0.999732546720281}, {"start": 154, "end": 165, "word": "protein bar", "entity_group": "VAR", "score": 0.999977084415954}, {"start": 175, "end": 176, "word": "7", "entity_group": "PARAM", "score": 0.9996681626084788}, {"start": 198, "end": 201, "word": "250", "entity_group": "PARAM", "score": 0.9997244806177094}, {"start": 232, "end": 233, "word": "2", "entity_group": "PARAM", "score": 0.9992709863391774}, {"start": 245, "end": 257, "word": "protein bars", "entity_group": "VAR", "score": 0.9999090229910719}, {"start": 263, "end": 272, "word": "smoothies", "entity_group": "VAR", "score": 0.9996922937794049}, {"start": 300, "end": 307, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9976112079004232}, {"start": 308, "end": 312, "word": "2000", "entity_group": "LIMIT", "score": 0.9996998393331179}, {"start": 368, "end": 376, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9991511213124646}, {"start": 381, "end": 395, "word": "protein intake", "entity_group": "OBJ_NAME", "score": 0.9908848324998466}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSmoothies = intvar(0, 999999999)  # Number of smoothies\nProteinBars = intvar(0, 999999999)  # Number of protein bars\n\n# Constraints\nm = Model()\n\n# The woman can consume at most 2000 calories:\nm += 300 * Smoothies + 250 * ProteinBars <= 2000\n# The woman must eat 2 times more protein bars than smoothies:\nm += ProteinBars >= 2 * Smoothies\n\n# Objective\n# Maximize protein intake (2 units of protein per smoothie, 7 units of protein per protein bar):\nm.maximize(2 * Smoothies + 7 * ProteinBars)\n"}}
{"1958482161": {"document": "A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?", "order_mapping": {"northern factory": 0, "western factory": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total time", "vars": ["northern factory", "western factory"]}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "800,000", "terms": {"northern factory": "800", "western factory": "650"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "700,000", "terms": {"northern factory": "700", "western factory": "750"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "60,000", "terms": {"northern factory": "40", "western factory": "35"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-800.0, -650.0, -800000.0], [-700.0, -750.0, -700000.0], [40.0, 35.0, 60000.0]]}, "solution": {"x": 1000, "y": 0}, "entities": [{"start": 38, "end": 54, "word": "northern factory", "entity_group": "VAR", "score": 0.9999519104044358}, {"start": 61, "end": 76, "word": "western factory", "entity_group": "VAR", "score": 0.9999656357366619}, {"start": 165, "end": 181, "word": "northern factory", "entity_group": "VAR", "score": 0.9999825082065289}, {"start": 188, "end": 191, "word": "800", "entity_group": "PARAM", "score": 0.9996742918536796}, {"start": 224, "end": 227, "word": "700", "entity_group": "PARAM", "score": 0.9996839463319328}, {"start": 266, "end": 281, "word": "western factory", "entity_group": "VAR", "score": 0.9999824959604784}, {"start": 288, "end": 291, "word": "650", "entity_group": "PARAM", "score": 0.999674291853682}, {"start": 324, "end": 327, "word": "750", "entity_group": "PARAM", "score": 0.9996618479386874}, {"start": 353, "end": 369, "word": "northern factory", "entity_group": "VAR", "score": 0.9999833841143158}, {"start": 379, "end": 381, "word": "40", "entity_group": "PARAM", "score": 0.999635127597751}, {"start": 418, "end": 433, "word": "western factory", "entity_group": "VAR", "score": 0.9999865216070144}, {"start": 443, "end": 445, "word": "35", "entity_group": "PARAM", "score": 0.9994945107654417}, {"start": 516, "end": 525, "word": "available", "entity_group": "CONST_DIR", "score": 0.9967654067749403}, {"start": 526, "end": 532, "word": "60,000", "entity_group": "LIMIT", "score": 0.9990948752868709}, {"start": 577, "end": 585, "word": "at least", "entity_group": "CONST_DIR", "score": 0.998457756068668}, {"start": 586, "end": 593, "word": "800,000", "entity_group": "LIMIT", "score": 0.9996680172312553}, {"start": 626, "end": 633, "word": "700,000", "entity_group": "LIMIT", "score": 0.9996163448672426}, {"start": 700, "end": 708, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9985391474277225}, {"start": 713, "end": 723, "word": "total time", "entity_group": "OBJ_NAME", "score": 0.9940050242179294}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nNorthernFactoryHours = intvar(0, 999999999)  # Hours the northern factory runs\nWesternFactoryHours = intvar(0, 999999999)  # Hours the western factory runs\n\n# Constraints\nm = Model()\n\n# The clinical firm must make at least 800,000 g of anti-itch injections:\nm += 800 * NorthernFactoryHours + 650 * WesternFactoryHours >= 800000\n# The clinical firm must make at least 700,000 g of topical cream:\nm += 700 * NorthernFactoryHours + 750 * WesternFactoryHours >= 700000\n# The clinical firm has available 60,000 units of plastic:\nm += 40 * NorthernFactoryHours + 35 * WesternFactoryHours <= 60000\n\n# Objective\n# Minimize the total time needed (sum of hours for both factories):\nm.minimize(NorthernFactoryHours + WesternFactoryHours)\n"}}
{"1240783644": {"document": "A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?", "order_mapping": {"medication patches": 0, "anti-biotic creams": 1, "medication patch": 0, "anti-biotic cream": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of people", "terms": {"medication patches": "3", "anti-biotic cream": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "400", "terms": {"medication patch": "3", "anti-biotic cream": "5"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "530", "terms": {"medication patch": "5", "anti-biotic cream": "6"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "100", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "anti-biotic creams", "direction": "at least", "param": "twice", "y_var": "medication patches", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [-3.0, -2.0], "constraints": [[3.0, 5.0, 400.0], [5.0, 6.0, 530.0], [1.0, 1.0, 100.0], [2.0, -1.0, -0.0]]}, "solution": {"x": 30, "y": 62}, "entities": [{"start": 31, "end": 49, "word": "medication patches", "entity_group": "VAR", "score": 0.9999719859553252}, {"start": 54, "end": 74, "word": "anti - biotic creams", "entity_group": "VAR", "score": 0.9985400156940094}, {"start": 82, "end": 98, "word": "medication patch", "entity_group": "VAR", "score": 0.9999879673988978}, {"start": 108, "end": 109, "word": "3", "entity_group": "PARAM", "score": 0.9996886298187645}, {"start": 133, "end": 134, "word": "5", "entity_group": "PARAM", "score": 0.9997113073199398}, {"start": 161, "end": 180, "word": "anti - biotic cream", "entity_group": "VAR", "score": 0.998521312361739}, {"start": 190, "end": 191, "word": "5", "entity_group": "PARAM", "score": 0.9997305095291616}, {"start": 215, "end": 216, "word": "6", "entity_group": "PARAM", "score": 0.9997059249080047}, {"start": 244, "end": 264, "word": "anti - biotic creams", "entity_group": "VAR", "score": 0.9981043469572687}, {"start": 301, "end": 309, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979432400354814}, {"start": 310, "end": 315, "word": "twice", "entity_group": "PARAM", "score": 0.9950924108256746}, {"start": 324, "end": 344, "word": "anti - biotic creams", "entity_group": "VAR", "score": 0.9975445301393596}, {"start": 348, "end": 366, "word": "medication patches", "entity_group": "VAR", "score": 0.999970521563079}, {"start": 416, "end": 423, "word": "at most", "entity_group": "CONST_DIR", "score": 0.999057320660761}, {"start": 424, "end": 427, "word": "100", "entity_group": "LIMIT", "score": 0.9997005070276422}, {"start": 439, "end": 457, "word": "medication patches", "entity_group": "VAR", "score": 0.9999734223421041}, {"start": 462, "end": 482, "word": "anti - biotic creams", "entity_group": "VAR", "score": 0.9981429234232363}, {"start": 511, "end": 520, "word": "available", "entity_group": "CONST_DIR", "score": 0.9990239705950286}, {"start": 521, "end": 524, "word": "400", "entity_group": "LIMIT", "score": 0.9993612454169306}, {"start": 555, "end": 558, "word": "530", "entity_group": "LIMIT", "score": 0.9993863021299408}, {"start": 597, "end": 615, "word": "medication patches", "entity_group": "VAR", "score": 0.9999325536427989}, {"start": 626, "end": 627, "word": "3", "entity_group": "PARAM", "score": 0.9996591293936802}, {"start": 628, "end": 634, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9926529233176494}, {"start": 653, "end": 672, "word": "anti - biotic cream", "entity_group": "VAR", "score": 0.9981664353131273}, {"start": 683, "end": 684, "word": "2", "entity_group": "PARAM", "score": 0.9996050357764462}, {"start": 685, "end": 691, "word": "people", "entity_group": "OBJ_NAME", "score": 0.9977058250972912}, {"start": 737, "end": 745, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996743343035326}, {"start": 750, "end": 766, "word": "number of people", "entity_group": "OBJ_NAME", "score": 0.9901126276681504}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMedicationPatches = intvar(0, 999999999)  # Number of medication patches made\nAntiBioticCreams = intvar(0, 999999999)  # Number of anti-biotic creams made\n\n# Constraints\nm = Model()\n\n# Time constraint: 3 minutes per medication patch and 5 minutes per anti-biotic cream should not exceed 400 minutes\nm += 3 * MedicationPatches + 5 * AntiBioticCreams <= 400\n# Material constraint: 5 units per medication patch and 6 units per anti-biotic cream should not exceed 530 units\nm += 5 * MedicationPatches + 6 * AntiBioticCreams <= 530\n# Total batches constraint: At most 100 batches in total\nm += MedicationPatches + AntiBioticCreams <= 100\n# Anti-biotic creams must be at least twice as many as medication patches\nm += AntiBioticCreams >= 2 * MedicationPatches\n\n# Objective\n# Maximize the number of people treated: 3 people per medication patch and 2 people per anti-biotic cream\nm.maximize(3 * MedicationPatches + 2 * AntiBioticCreams)\n"}}
{"-550351289": {"document": "A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks.  If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?", "order_mapping": {"camel caravans": 0, "desert trucks": 1, "camel caravan": 0, "desert truck": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total number of hours", "terms": {"camel caravan": "12", "desert truck": "5"}}, "const_declarations": [{"type": "linear", "direction": "needs to deliver", "limit": "1500", "terms": {"camel caravan": "50", "desert truck": "150"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "camel caravans", "direction": "more", "y_var": "desert trucks", "operator": "GREATER"}], "canonical": {"objective": [12.0, 5.0], "constraints": [[-50.0, -150.0, -1500.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 8, "y": 8}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCamelCaravans = intvar(0, 999999999)  # Number of camel caravans\nDesertTrucks = intvar(0, 999999999)  # Number of desert trucks\n\n# Constraints\nm = Model()\n\n# The company needs to deliver 1500 units of goods:\nm += 50 * CamelCaravans + 150 * DesertTrucks >= 1500\n# The company prefers to have more camel caravans than desert trucks:\nm += CamelCaravans > DesertTrucks\n\n# Objective\n# Minimize the total number of hours required (12 hours per camel caravan, 5 hours per desert truck):\nm.minimize(12 * CamelCaravans + 5 * DesertTrucks)\n"}}
{"-1243268146": {"document": "A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?", "order_mapping": {"first-dose": 0, "second-dose": 1, "first-dose vaccine": 0, "second-dose vaccine": 1, "second-dose vaccines": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "amount of gelatine", "terms": {"first-dose vaccine": "20", "second-dose vaccine": "60"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "35,000", "terms": {"first-dose vaccine": "30", "second-dose vaccine": "65"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "first-dose", "direction": "more", "y_var": "second-dose vaccines", "operator": "GREATER"}, {"type": "lowerbound", "direction": "at least", "limit": "40", "var": "second-dose vaccines", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [20.0, 60.0], "constraints": [[30.0, 65.0, 35000.0], [-1.0, 1.0, -1e-06], [-0.0, -1.0, -40.0]]}, "solution": {"x": 40, "y": 40}, "entities": [{"start": 28, "end": 34, "word": "35,000", "entity_group": "LIMIT", "score": 0.9997228648388597}, {"start": 56, "end": 65, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981946331605074}, {"start": 112, "end": 124, "word": "first - dose", "entity_group": "VAR", "score": 0.9994258613349553}, {"start": 129, "end": 142, "word": "second - dose", "entity_group": "VAR", "score": 0.999109268790408}, {"start": 161, "end": 181, "word": "first - dose vaccine", "entity_group": "VAR", "score": 0.9992612781901734}, {"start": 191, "end": 193, "word": "30", "entity_group": "PARAM", "score": 0.9997351130804385}, {"start": 219, "end": 221, "word": "20", "entity_group": "PARAM", "score": 0.9997055559187288}, {"start": 228, "end": 236, "word": "gelatine", "entity_group": "OBJ_NAME", "score": 0.9985929195318404}, {"start": 249, "end": 270, "word": "second - dose vaccine", "entity_group": "VAR", "score": 0.999501391484254}, {"start": 280, "end": 282, "word": "65", "entity_group": "PARAM", "score": 0.9997282356490294}, {"start": 308, "end": 310, "word": "60", "entity_group": "PARAM", "score": 0.9994979298497995}, {"start": 317, "end": 325, "word": "gelatine", "entity_group": "OBJ_NAME", "score": 0.9984455799678659}, {"start": 338, "end": 358, "word": "first - dose vaccine", "entity_group": "VAR", "score": 0.9991110373422649}, {"start": 382, "end": 403, "word": "second - dose vaccine", "entity_group": "VAR", "score": 0.9992800377904173}, {"start": 425, "end": 437, "word": "first - dose", "entity_group": "VAR", "score": 0.9990232261862845}, {"start": 443, "end": 465, "word": "second - dose vaccines", "entity_group": "VAR", "score": 0.9991972287330485}, {"start": 491, "end": 499, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9988259991486622}, {"start": 500, "end": 502, "word": "40", "entity_group": "LIMIT", "score": 0.9995693926209046}, {"start": 503, "end": 525, "word": "second - dose vaccines", "entity_group": "VAR", "score": 0.9994140211434709}, {"start": 584, "end": 592, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9992193159359236}, {"start": 597, "end": 615, "word": "amount of gelatine", "entity_group": "OBJ_NAME", "score": 0.9910308124126169}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFirstDose = intvar(0, 999999999)  # Number of first-dose vaccines made\nSecondDose = intvar(0, 999999999)  # Number of second-dose vaccines made\n\n# Constraints\nm = Model()\n\n# The total units of antibiotics used should not exceed 35,000:\nm += 30 * FirstDose + 65 * SecondDose <= 35000\n# There must be more first-dose vaccines than second-dose vaccines manufactured:\nm += FirstDose > SecondDose\n# At least 40 second-dose vaccines must be made:\nm += SecondDose >= 40\n\n# Objective\n# Minimize the amount of gelatine used (20 mg for first-dose, 60 mg for second-dose):\nm.minimize(20 * FirstDose + 60 * SecondDose)\n"}}
{"-2004165813": {"document": "Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?", "order_mapping": {"chemical A": 0, "chemical B": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total time", "terms": {"chemical A": "30", "chemical B": "45"}}, "const_declarations": [{"type": "xby", "x_var": "chemical A", "direction": "at most", "param": "third", "y_var": "chemical B", "operator": "LESS_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "300", "var": "chemical A", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "1500", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [30.0, 45.0], "constraints": [[3.0, -1, 0.0], [-1.0, -0.0, -300.0], [-1.0, -1.0, -1500.0]]}, "solution": {"x": 375, "y": 1125}, "entities": [{"start": 5, "end": 15, "word": "chemical A", "entity_group": "VAR", "score": 0.9999698410452101}, {"start": 20, "end": 30, "word": "chemical B", "entity_group": "VAR", "score": 0.9999811154041361}, {"start": 90, "end": 100, "word": "chemical A", "entity_group": "VAR", "score": 0.9999459760229087}, {"start": 107, "end": 109, "word": "30", "entity_group": "PARAM", "score": 0.9993966124843935}, {"start": 152, "end": 162, "word": "chemical B", "entity_group": "VAR", "score": 0.9999485664331121}, {"start": 169, "end": 171, "word": "45", "entity_group": "PARAM", "score": 0.9995013706485533}, {"start": 206, "end": 216, "word": "chemical A", "entity_group": "VAR", "score": 0.9999543882093498}, {"start": 252, "end": 259, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9981221320340012}, {"start": 262, "end": 267, "word": "third", "entity_group": "PARAM", "score": 0.9956707560041531}, {"start": 276, "end": 286, "word": "chemical A", "entity_group": "VAR", "score": 0.9999474773193964}, {"start": 290, "end": 300, "word": "chemical B", "entity_group": "VAR", "score": 0.9999693026557721}, {"start": 335, "end": 343, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983406719831864}, {"start": 344, "end": 347, "word": "300", "entity_group": "LIMIT", "score": 0.9995957967874409}, {"start": 357, "end": 367, "word": "chemical A", "entity_group": "VAR", "score": 0.9999734972967412}, {"start": 385, "end": 393, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9976920519583178}, {"start": 394, "end": 398, "word": "1500", "entity_group": "LIMIT", "score": 0.9996359605456809}, {"start": 481, "end": 489, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9978459071077248}, {"start": 500, "end": 504, "word": "time", "entity_group": "OBJ_NAME", "score": 0.4774232798714548}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nChemicalA = intvar(0, 999999999)  # Units of chemical A\nChemicalB = intvar(0, 999999999)  # Units of chemical B\n\n# Constraints\nm = Model()\n\n# There has to be at most a third as much chemical A as chemical B:\nm += ChemicalA <= (1/3) * ChemicalB\n# There has to be at least 300 units of chemical A in the mixer:\nm += ChemicalA >= 300\n# There has to be at least 1500 units of total chemicals in the mixer:\nm += ChemicalA + ChemicalB >= 1500\n\n# Objective\n# Minimize the total time it takes for the mixed bread to be ready (30 seconds per unit of A, 45 seconds per unit of B):\nm.minimize(30 * ChemicalA + 45 * ChemicalB)\n"}}
{"249236183": {"document": "A senior home has snacks of spinach and soybeans to increase their intake of iron. A cup of spinach contains 100 units of fibre and 5 mg of iron. A cup of soybeans contains 80 units of fibre and 12 mg of iron. Due to other nutritional requirements, the nurses decided that the number of cups of spinach must exceed the number of cups of soybeans. Furthermore, a cup of spinach contains 30 calories while a cup of soybeans contains 100 calories. If they schedule that the elderly need in total at least 12000 units of fibre and 300 mg of iron, how many cups of each should the nurses schedule to maximize the seniors\u2019 total caloric intake?", "order_mapping": {"spinach": 0, "soybeans": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "caloric intake", "terms": {"spinach": "30", "soybeans": "100"}}, "const_declarations": [{"type": "linear", "direction": "at least", "limit": "12000", "terms": {"spinach": "100", "soybeans": "80"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "300", "terms": {"spinach": "5", "soybeans": "12"}, "operator": "GREATER_OR_EQUAL"}, {"type": "xy", "x_var": "spinach", "direction": "must exceed", "y_var": "soybeans", "operator": "GREATER"}], "canonical": {"objective": [-30.0, -100.0], "constraints": [[-100.0, -80.0, -12000.0], [-5.0, -12.0, -300.0], [-1.0, 1.0, -1e-06]]}, "solution": {"x": 100000000, "y": 100000000}, "entities": [{"start": 28, "end": 35, "word": "spinach", "entity_group": "VAR", "score": 0.9995647330643754}, {"start": 40, "end": 48, "word": "soybeans", "entity_group": "VAR", "score": 0.9994205020123615}, {"start": 93, "end": 100, "word": "spinach", "entity_group": "VAR", "score": 0.9991897676816157}, {"start": 110, "end": 113, "word": "100", "entity_group": "PARAM", "score": 0.9996859927549383}, {"start": 133, "end": 134, "word": "5", "entity_group": "PARAM", "score": 0.99969893568381}, {"start": 157, "end": 165, "word": "soybeans", "entity_group": "VAR", "score": 0.9994407886687106}, {"start": 175, "end": 177, "word": "80", "entity_group": "PARAM", "score": 0.9997086572051554}, {"start": 197, "end": 199, "word": "12", "entity_group": "PARAM", "score": 0.9994248026152359}, {"start": 299, "end": 306, "word": "spinach", "entity_group": "VAR", "score": 0.9993638384137982}, {"start": 307, "end": 318, "word": "must exceed", "entity_group": "CONST_DIR", "score": 0.446666881251234}, {"start": 341, "end": 349, "word": "soybeans", "entity_group": "VAR", "score": 0.9996810470219853}, {"start": 375, "end": 382, "word": "spinach", "entity_group": "VAR", "score": 0.9994827673694487}, {"start": 392, "end": 394, "word": "30", "entity_group": "PARAM", "score": 0.99955526161026}, {"start": 419, "end": 427, "word": "soybeans", "entity_group": "VAR", "score": 0.9994578133371734}, {"start": 437, "end": 440, "word": "100", "entity_group": "PARAM", "score": 0.9995457294740882}, {"start": 500, "end": 508, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9991311991204312}, {"start": 509, "end": 514, "word": "12000", "entity_group": "LIMIT", "score": 0.9997464079860424}, {"start": 534, "end": 537, "word": "300", "entity_group": "LIMIT", "score": 0.9996567758195899}, {"start": 603, "end": 611, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9996823466142984}, {"start": 626, "end": 646, "word": "total caloric intake", "entity_group": "OBJ_NAME", "score": 0.9807529677263231}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSpinach = intvar(0, 999999999)  # Number of cups of spinach\nSoybeans = intvar(0, 999999999)  # Number of cups of soybeans\n\n# Constraints\nm = Model()\n\n# The number of cups of spinach must exceed the number of cups of soybeans:\nm += Spinach > Soybeans\n# The elderly need in total at least 12000 units of fibre:\nm += 100 * Spinach + 80 * Soybeans >= 12000\n# The elderly need in total at least 300 mg of iron:\nm += 5 * Spinach + 12 * Soybeans >= 300\n\n# Objective\n# Maximize the seniors\u2019 total caloric intake (30 calories per cup of spinach and 100 calories per cup of soybeans):\nm.maximize(30 * Spinach + 100 * Soybeans)\n\n"}}
{"602019445": {"document": "A keyboard manufacturer makes mechanical and standard keyboards. Mechanical keyboards are becoming more popular and thus the manufacturer aims to have five times as many mechanical than standard keyboards. A mechanical keyboard costs five units of plastic and two units of solder whereas a standard keyboard costs two units of plastic and one unit of solder. There are still customers that prefer a less noisy alternative. Therefore, there must be at least 30 standard keyboards. If the company has available 1000 units of plastic and 250 units of solder, how many of each type should be manufactured to maximize the total number of keyboards?", "order_mapping": {"mechanical": 0, "standard keyboards": 1, "Mechanical keyboards": 0, "mechanical keyboard": 0, "standard keyboard": 1}, "obj_declaration": {"type": "objvar", "direction": "maximize", "name": "number of keyboards", "vars": ["mechanical", "standard keyboards"]}, "const_declarations": [{"type": "xby", "x_var": "mechanical", "direction": "aims to have", "param": "five times", "y_var": "standard keyboards", "operator": "GREATER_OR_EQUAL"}, {"type": "lowerbound", "direction": "at least", "limit": "30", "var": "standard keyboards", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "1000", "terms": {"mechanical keyboard": "five", "standard keyboard": "two"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "250", "terms": {"mechanical keyboard": "two", "standard keyboard": "one"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-1.0, -1.0], "constraints": [[-1.0, 5.0, -0.0], [-0.0, -1.0, -30.0], [5.0, 2.0, 1000.0], [2.0, 1.0, 250.0]]}, "solution": null, "entities": [{"start": 30, "end": 40, "word": "mechanical", "entity_group": "VAR", "score": 0.9994348521525889}, {"start": 45, "end": 63, "word": "standard keyboards", "entity_group": "VAR", "score": 0.9999788039113972}, {"start": 66, "end": 86, "word": "Mechanical keyboards", "entity_group": "VAR", "score": 0.9999614740213616}, {"start": 152, "end": 156, "word": "five", "entity_group": "PARAM", "score": 0.9991428709797022}, {"start": 171, "end": 181, "word": "mechanical", "entity_group": "VAR", "score": 0.998674730176861}, {"start": 187, "end": 205, "word": "standard keyboards", "entity_group": "VAR", "score": 0.9999516615177358}, {"start": 210, "end": 229, "word": "mechanical keyboard", "entity_group": "VAR", "score": 0.9999788441949058}, {"start": 236, "end": 240, "word": "five", "entity_group": "PARAM", "score": 0.9991019562738531}, {"start": 262, "end": 265, "word": "two", "entity_group": "PARAM", "score": 0.9986495244908976}, {"start": 292, "end": 309, "word": "standard keyboard", "entity_group": "VAR", "score": 0.9999612690947904}, {"start": 316, "end": 319, "word": "two", "entity_group": "PARAM", "score": 0.9988744595615668}, {"start": 341, "end": 344, "word": "one", "entity_group": "PARAM", "score": 0.9941965769029444}, {"start": 453, "end": 461, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981190149613111}, {"start": 462, "end": 464, "word": "30", "entity_group": "LIMIT", "score": 0.9995551197435346}, {"start": 465, "end": 483, "word": "standard keyboards", "entity_group": "VAR", "score": 0.999940070167976}, {"start": 505, "end": 514, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981837673833853}, {"start": 515, "end": 519, "word": "1000", "entity_group": "LIMIT", "score": 0.9991727533435256}, {"start": 541, "end": 544, "word": "250", "entity_group": "LIMIT", "score": 0.9997167403509037}, {"start": 611, "end": 619, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9986087017465561}, {"start": 630, "end": 649, "word": "number of keyboards", "entity_group": "OBJ_NAME", "score": 0.9811697443254023}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMechanical = intvar(0, 999999999)  # Number of mechanical keyboards\nStandard = intvar(0, 999999999)  # Number of standard keyboards\n\n# Constraints\nm = Model()\n\n# Mechanical keyboards should be five times as many as standard keyboards:\nm += Mechanical >= 5 * Standard\n# There must be at least 30 standard keyboards:\nm += Standard >= 30\n# Plastic constraint: 5 units for a mechanical keyboard and 2 units for a standard keyboard, with 1000 units available:\nm += 5 * Mechanical + 2 * Standard <= 1000\n# Solder constraint: 2 units for a mechanical keyboard and 1 unit for a standard keyboard, with 250 units available:\nm += 2 * Mechanical + 1 * Standard <= 250\n\n# Objective\n# Maximize the total number of keyboards:\nm.maximize(Mechanical + Standard)\n\n"}}
{"1108621669": {"document": "A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?", "order_mapping": {"sedans": 0, "buses": 1, "sedan": 0, "bus": 1}, "obj_declaration": {"type": "objvar", "direction": "decrease", "name": "total number of vehicles", "vars": ["sedans", "buses"]}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "800", "terms": {"sedan": "10", "bus": "40"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "4600", "terms": {"bus": "250", "sedan": "50"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[10.0, 40.0, 800.0], [-50.0, -250.0, -4600.0]]}, "solution": {"x": 0, "y": 19}, "entities": [{"start": 26, "end": 32, "word": "sedans", "entity_group": "VAR", "score": 0.9995852156045971}, {"start": 36, "end": 41, "word": "buses", "entity_group": "VAR", "score": 0.9975704442967931}, {"start": 125, "end": 130, "word": "sedan", "entity_group": "VAR", "score": 0.9997093566360413}, {"start": 140, "end": 142, "word": "50", "entity_group": "PARAM", "score": 0.9995891029345659}, {"start": 143, "end": 151, "word": "tourists", "entity_group": "OBJ_NAME", "score": 0.9856189033282876}, {"start": 175, "end": 177, "word": "10", "entity_group": "PARAM", "score": 0.999692577479494}, {"start": 201, "end": 204, "word": "bus", "entity_group": "VAR", "score": 0.998860517925949}, {"start": 214, "end": 217, "word": "250", "entity_group": "PARAM", "score": 0.99969269246725}, {"start": 218, "end": 226, "word": "tourists", "entity_group": "OBJ_NAME", "score": 0.9847329457689368}, {"start": 250, "end": 252, "word": "40", "entity_group": "PARAM", "score": 0.9996175132782202}, {"start": 329, "end": 336, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991077824723337}, {"start": 337, "end": 340, "word": "800", "entity_group": "LIMIT", "score": 0.9996445832874875}, {"start": 381, "end": 387, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.9991671276395071}, {"start": 429, "end": 437, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9990236503055203}, {"start": 438, "end": 442, "word": "4600", "entity_group": "LIMIT", "score": 0.9997079069776481}, {"start": 482, "end": 488, "word": "profit", "entity_group": "OBJ_NAME", "score": 0.999542643612124}, {"start": 500, "end": 506, "word": "sedans", "entity_group": "VAR", "score": 0.999750879125316}, {"start": 520, "end": 525, "word": "buses", "entity_group": "VAR", "score": 0.9997817848346826}, {"start": 566, "end": 574, "word": "decrease", "entity_group": "OBJ_DIR", "score": 0.9359166463630969}, {"start": 585, "end": 603, "word": "number of vehicles", "entity_group": "OBJ_NAME", "score": 0.988722101280866}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSedans = intvar(0, 999999999)  # Number of sedans\nBuses = intvar(0, 999999999)  # Number of buses\n\n# Constraints\nm = Model()\n\n# Pollution constraint: 10 units of pollution per sedan and 40 units per bus, with a maximum of 800 units allowed per day:\nm += 10 * Sedans + 40 * Buses <= 800\n# Capacity constraint: Each sedan can seat 50 tourists and each bus can seat 250 tourists, with a minimum requirement of 4600 tourists per day:\nm += 50 * Sedans + 250 * Buses >= 4600\n\n# Objective\n# Decrease the total number of vehicles (sedans and buses):\nm.minimize(Sedans + Buses)\n\n"}}
{"-685300642": {"document": "A dessert shop is popular for their only two desserts - matcha ice cream and orange sorbet. Two units of flavouring and four units of ice cream is required to make one order of matcha ice cream. Four units of flavouring and three units of water is required to make an order of orange sorbet. The dessert shop has recently been getting more orders online for orange sorbet and therefore, there should be more orange sorbet made than matcha ice cream. However, at least fifteen percent of desserts made must be matcha ice cream. The dessert shop has available 600 units of ice cream and 550 units of water. How many of each dessert should the shop make to minimize the total amount of flavouring needed?", "order_mapping": {"matcha ice cream": 0, "orange sorbet": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of flavouring needed", "terms": {"matcha ice cream": "Two", "orange sorbet": "Four"}}, "const_declarations": [{"type": "xy", "x_var": "orange sorbet", "direction": "more", "y_var": "matcha ice cream", "operator": "GREATER"}, {"type": "ratio", "direction": "at least", "limit": "fifteen percent", "var": "matcha ice cream", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "600", "terms": {"matcha ice cream": "four"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "550", "terms": {"orange sorbet": "three"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [2.0, 4.0], "constraints": [[1.0, -1.0, -1e-06], [-0.85, 0.15, -0.0], [4.0, 0.0, 600.0], [0.0, 3.0, 550.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 56, "end": 72, "word": "matcha ice cream", "entity_group": "VAR", "score": 0.9994632148729042}, {"start": 77, "end": 90, "word": "orange sorbet", "entity_group": "VAR", "score": 0.9999728558745035}, {"start": 93, "end": 96, "word": "Two", "entity_group": "PARAM", "score": 0.99794939015073}, {"start": 121, "end": 125, "word": "four", "entity_group": "PARAM", "score": 0.9991991725095908}, {"start": 178, "end": 194, "word": "matcha ice cream", "entity_group": "VAR", "score": 0.9991551270376515}, {"start": 197, "end": 201, "word": "Four", "entity_group": "PARAM", "score": 0.999135609677666}, {"start": 226, "end": 231, "word": "three", "entity_group": "PARAM", "score": 0.9989960973974452}, {"start": 279, "end": 292, "word": "orange sorbet", "entity_group": "VAR", "score": 0.9999703780092323}, {"start": 361, "end": 374, "word": "orange sorbet", "entity_group": "VAR", "score": 0.9999836840343413}, {"start": 412, "end": 425, "word": "orange sorbet", "entity_group": "VAR", "score": 0.9999881626683522}, {"start": 436, "end": 452, "word": "matcha ice cream", "entity_group": "VAR", "score": 0.999181840968424}, {"start": 465, "end": 473, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9983511565905486}, {"start": 474, "end": 489, "word": "fifteen percent", "entity_group": "LIMIT", "score": 0.9800225588102592}, {"start": 515, "end": 531, "word": "matcha ice cream", "entity_group": "VAR", "score": 0.9996196359982924}, {"start": 555, "end": 564, "word": "available", "entity_group": "CONST_DIR", "score": 0.9993876523100697}, {"start": 565, "end": 568, "word": "600", "entity_group": "LIMIT", "score": 0.9990080561485899}, {"start": 592, "end": 595, "word": "550", "entity_group": "LIMIT", "score": 0.9992451387033289}, {"start": 662, "end": 670, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9972026777385365}, {"start": 681, "end": 701, "word": "amount of flavouring", "entity_group": "OBJ_NAME", "score": 0.986958057404371}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nMatchaIceCream = intvar(0, 999999999)  # Number of matcha ice cream orders\nOrangeSorbet = intvar(0, 999999999)  # Number of orange sorbet orders\n\n# Constraints\nm = Model()\n\n# More orange sorbet made than matcha ice cream:\nm += OrangeSorbet > MatchaIceCream\n# At least fifteen percent of desserts made must be matcha ice cream:\nm += MatchaIceCream >= 0.15 * (MatchaIceCream + OrangeSorbet)\n# The dessert shop has available 600 units of ice cream (4 units of ice cream per matcha ice cream order):\nm += 4 * MatchaIceCream <= 600\n# The dessert shop has available 550 units of water (3 units of water per orange sorbet order):\nm += 3 * OrangeSorbet <= 550\n\n# Objective\n# Minimize the total amount of flavouring needed (2 units per matcha ice cream order, 4 units per orange sorbet order):\nm.minimize(2 * MatchaIceCream + 4 * OrangeSorbet)\n\n"}}
{"-735986381": {"document": "A daycare center has children they must pick up and can use two types of vehicles: bus or a personal car. A bus can carry 9 children while a personal car can carry 4 children. The daycare has to pick up at least 100 children. Additionally, due to limitations of pollution, there must be more buses than personal cars. But some children require extra attention. Therefore, there must be at least 5 personal cars. How many of each form of transportation should the daycare center schedule for to minimize the total number of vehicles?", "order_mapping": {"bus": 0, "personal car": 1, "buses": 0, "personal cars": 1}, "obj_declaration": {"type": "objvar", "direction": "minimize", "name": "total number of vehicles", "vars": ["bus", "personal car"]}, "const_declarations": [{"type": "xy", "x_var": "buses", "direction": "must be more", "y_var": "personal cars", "operator": "GREATER"}, {"type": "lowerbound", "direction": "at least", "limit": "5", "var": "personal cars", "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "at least", "limit": "100", "terms": {"personal car": "4", "bus": "9"}, "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-1.0, 1.0, -1e-06], [-0.0, -1.0, -5.0], [-9.0, -4.0, -100.0]]}, "solution": {"x": 9, "y": 5}, "entities": [{"start": 84, "end": 87, "word": "bus", "entity_group": "VAR", "score": 0.9991611533281775}, {"start": 93, "end": 105, "word": "personal car", "entity_group": "VAR", "score": 0.9999539727653552}, {"start": 110, "end": 113, "word": "bus", "entity_group": "VAR", "score": 0.9991806363028491}, {"start": 124, "end": 125, "word": "9", "entity_group": "PARAM", "score": 0.9997295408521519}, {"start": 126, "end": 134, "word": "children", "entity_group": "OBJ_NAME", "score": 0.9579467893207548}, {"start": 143, "end": 155, "word": "personal car", "entity_group": "VAR", "score": 0.999937580086441}, {"start": 166, "end": 167, "word": "4", "entity_group": "PARAM", "score": 0.999698731772058}, {"start": 168, "end": 176, "word": "children", "entity_group": "OBJ_NAME", "score": 0.9276703437139494}, {"start": 206, "end": 214, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9979927647829782}, {"start": 215, "end": 218, "word": "100", "entity_group": "LIMIT", "score": 0.9996581687398273}, {"start": 298, "end": 303, "word": "buses", "entity_group": "VAR", "score": 0.9997306314642731}, {"start": 309, "end": 322, "word": "personal cars", "entity_group": "VAR", "score": 0.9999585335313607}, {"start": 395, "end": 403, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9981202877361683}, {"start": 404, "end": 405, "word": "5", "entity_group": "LIMIT", "score": 0.9995245901444798}, {"start": 406, "end": 419, "word": "personal cars", "entity_group": "VAR", "score": 0.999954154712262}, {"start": 504, "end": 512, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9893313326336287}, {"start": 517, "end": 541, "word": "total number of vehicles", "entity_group": "OBJ_NAME", "score": 0.9701632515141905}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nBuses = intvar(0, 999999999)  # Number of buses\nPersonalCars = intvar(0, 999999999)  # Number of personal cars\n\n# Constraints\nm = Model()\n\n# There must be more buses than personal cars:\nm += Buses > PersonalCars\n# There must be at least 5 personal cars:\nm += PersonalCars >= 5\n# The daycare has to pick up at least 100 children (9 children per bus and 4 children per personal car):\nm += 9 * Buses + 4 * PersonalCars >= 100\n\n# Objective\n# Minimize the total number of vehicles (buses + personal cars):\nm.minimize(Buses + PersonalCars)\n"}}
{"-913518185": {"document": "Both coconut oil and lavender need to be added to a body wash. One unit of coconut oil takes 0.7 minutes to be effective while one unit of lavender takes 0.9 minutes to be effective. The body wash must contain at least 300 units of coconut oil and at most 550 units of both ingredients. Since too much coconut oil can make the body wash too oily, there can be at most thrice the amount of coconut oil as lavenders in the body wash. How many units of each should be added to the body wash to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)", "order_mapping": {"coconut oil": 0, "lavender": 1, "lavenders": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of time", "terms": {"coconut oil": "0.7", "lavender": "0.9"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "300", "var": "coconut oil", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at most", "limit": "550", "operator": "LESS_OR_EQUAL"}, {"type": "xby", "x_var": "coconut oil", "direction": "at most", "param": "thrice", "y_var": "lavenders", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [0.7, 0.9], "constraints": [[-1.0, -0.0, -300.0], [1.0, 1.0, 550.0], [1.0, -3.0, 0.0]]}, "solution": {"x": 300, "y": 100}, "entities": [{"start": 5, "end": 16, "word": "coconut oil", "entity_group": "VAR", "score": 0.9999724283683656}, {"start": 21, "end": 29, "word": "lavender", "entity_group": "VAR", "score": 0.9993716220252784}, {"start": 76, "end": 87, "word": "coconut oil", "entity_group": "VAR", "score": 0.999943468310358}, {"start": 94, "end": 97, "word": "0.7", "entity_group": "PARAM", "score": 0.9994871492827492}, {"start": 112, "end": 121, "word": "effective", "entity_group": "OBJ_NAME", "score": 0.9555018499247798}, {"start": 140, "end": 148, "word": "lavender", "entity_group": "VAR", "score": 0.9995751361115481}, {"start": 155, "end": 158, "word": "0.9", "entity_group": "PARAM", "score": 0.9995607371191322}, {"start": 173, "end": 182, "word": "effective", "entity_group": "OBJ_NAME", "score": 0.9903419531974953}, {"start": 212, "end": 220, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986893749279996}, {"start": 221, "end": 224, "word": "300", "entity_group": "LIMIT", "score": 0.9996497889008967}, {"start": 234, "end": 245, "word": "coconut oil", "entity_group": "VAR", "score": 0.9999285412436527}, {"start": 250, "end": 257, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986895429950103}, {"start": 258, "end": 261, "word": "550", "entity_group": "LIMIT", "score": 0.9996485089454578}, {"start": 305, "end": 316, "word": "coconut oil", "entity_group": "VAR", "score": 0.9999756101358097}, {"start": 364, "end": 371, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9979193234004149}, {"start": 372, "end": 378, "word": "thrice", "entity_group": "PARAM", "score": 0.9934478395671824}, {"start": 393, "end": 404, "word": "coconut oil", "entity_group": "VAR", "score": 0.9998825811045724}, {"start": 408, "end": 417, "word": "lavenders", "entity_group": "VAR", "score": 0.9988873407252742}, {"start": 496, "end": 504, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9969381124510797}, {"start": 515, "end": 529, "word": "amount of time", "entity_group": "OBJ_NAME", "score": 0.9898592695828965}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nCoconutOil = intvar(0, 999999999)  # Number of units of coconut oil\nLavender = intvar(0, 999999999)  # Number of units of lavender\n\n# Constraints\nm = Model()\n\n# The body wash must contain at least 300 units of coconut oil:\nm += CoconutOil >= 300\n# The body wash can contain at most 550 units of both ingredients:\nm += CoconutOil + Lavender <= 550\n# There can be at most thrice the amount of coconut oil as lavenders in the body wash:\nm += CoconutOil <= 3 * Lavender\n\n# Objective\n# Minimize the total amount of time it takes for the mixture to be effective:\nm.minimize(0.7 * CoconutOil + 0.9 * Lavender)\n"}}
{"772460666": {"document": "A chemical company uses two tests, a salinity test and a pH test. Each unit of the salinity test requires three probes. Whereas each unit of the pH test requires two probes. The chemical company must perform at least 250 pH tests. In total, at least 400 tests must be performed. Further, because of the importance of the salinity test, there must be at most 1.5 times more pH tests than salinity tests. How many times should each test be performed to minimize the total number of probes used?", "order_mapping": {"salinity test": 0, "pH test": 1, "pH tests": 1, "salinity tests": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "number of probes", "terms": {"salinity test": "three", "pH test": "two"}}, "const_declarations": [{"type": "lowerbound", "direction": "at least", "limit": "250", "var": "pH tests", "operator": "GREATER_OR_EQUAL"}, {"type": "sum", "direction": "at least", "limit": "400", "operator": "GREATER_OR_EQUAL"}, {"type": "xby", "x_var": "pH tests", "direction": "at most", "param": "1.5 times", "y_var": "salinity tests", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [3.0, 2.0], "constraints": [[-0.0, -1.0, -250.0], [-1.0, -1.0, -400.0], [-1.5, 1.0, 0.0]]}, "solution": {"x": 167, "y": 250}, "entities": [{"start": 38, "end": 51, "word": "salinity test", "entity_group": "VAR", "score": 0.9999611839634499}, {"start": 58, "end": 65, "word": "pH test", "entity_group": "VAR", "score": 0.9999457652666027}, {"start": 85, "end": 98, "word": "salinity test", "entity_group": "VAR", "score": 0.9999578452836312}, {"start": 108, "end": 113, "word": "three", "entity_group": "PARAM", "score": 0.9979098375015314}, {"start": 114, "end": 120, "word": "probes", "entity_group": "OBJ_NAME", "score": 0.9960956055906339}, {"start": 148, "end": 155, "word": "pH test", "entity_group": "VAR", "score": 0.9999764458126329}, {"start": 165, "end": 168, "word": "two", "entity_group": "PARAM", "score": 0.9979807104579506}, {"start": 169, "end": 175, "word": "probes", "entity_group": "OBJ_NAME", "score": 0.9979993072327217}, {"start": 212, "end": 220, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9984653316238505}, {"start": 221, "end": 224, "word": "250", "entity_group": "LIMIT", "score": 0.9995332077376121}, {"start": 225, "end": 233, "word": "pH tests", "entity_group": "VAR", "score": 0.9999176190292887}, {"start": 247, "end": 255, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9977421999011092}, {"start": 256, "end": 259, "word": "400", "entity_group": "LIMIT", "score": 0.9997207800698946}, {"start": 329, "end": 342, "word": "salinity test", "entity_group": "VAR", "score": 0.9999721765707651}, {"start": 359, "end": 366, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9967593990063626}, {"start": 367, "end": 376, "word": "1.5 times", "entity_group": "PARAM", "score": 0.8171861990843607}, {"start": 382, "end": 390, "word": "pH tests", "entity_group": "VAR", "score": 0.999930869556214}, {"start": 396, "end": 410, "word": "salinity tests", "entity_group": "VAR", "score": 0.9999710942119766}, {"start": 461, "end": 469, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.99575362272775}, {"start": 474, "end": 496, "word": "total number of probes", "entity_group": "OBJ_NAME", "score": 0.9672412597343506}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nSalinityTests = intvar(0, 999999999)  # Number of salinity tests performed\npHTests = intvar(0, 999999999)  # Number of pH tests performed\n\n# Constraints\nm = Model()\n\n# The chemical company must perform at least 250 pH tests:\nm += pHTests >= 250\n# In total, at least 400 tests must be performed:\nm += SalinityTests + pHTests >= 400\n# There must be at most 1.5 times more pH tests than salinity tests:\nm += pHTests <= 1.5 * SalinityTests\n\n# Objective\n# Minimize the total number of probes used (3 probes for each salinity test, 2 probes for each pH test):\nm.minimize(3 * SalinityTests + 2 * pHTests)\n"}}
{"-1677324863": {"document": "A municipality hires full-time and part-time staff to deliver mail. Part-time staff works 15 hours per week and gets paid 450 dollars whereas a full-time staff works 40 hours every week and gets paid 1280 dollars  for that week.  Since it is the week leading up to a holiday, planning ahead, the municipality needs 1000 hours of mail staff labor. The municipality has a budget of 31500 dollars for mail delivery for this season. How many of each type of staff should the municipality hire to decrease the total number of staff?", "order_mapping": {"full-time and": 0, "part-time staff": 1, "Part-time staff": 1, "full-time staff": 0}, "obj_declaration": {"type": "objvar", "direction": "decrease", "name": "number of staff", "vars": ["full-time and", "part-time staff"]}, "const_declarations": [{"type": "linear", "direction": "needs", "limit": "1000", "terms": {"full-time staff": "40", "Part-time staff": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "linear", "direction": "budget", "limit": "31500", "terms": {"Part-time staff": "450", "full-time staff": "1280"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [1.0, 1.0], "constraints": [[-40.0, -15.0, -1000.0], [1280.0, 450.0, 31500.0]]}, "solution": {"x": 16, "y": 24}, "entities": [], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nFullTimeStaff = intvar(0, 999999999)  # Number of full-time staff\nPartTimeStaff = intvar(0, 999999999)  # Number of part-time staff\n\n# Constraints\nm = Model()\n\n# The municipality needs 1000 hours of mail staff labor:\nm += 40 * FullTimeStaff + 15 * PartTimeStaff >= 1000\n# The municipality has a budget of 31500 dollars for mail delivery:\nm += 1280 * FullTimeStaff + 450 * PartTimeStaff <= 31500\n\n# Objective\n# Decrease the total number of staff:\nm.minimize(FullTimeStaff + PartTimeStaff)\n\n"}}
{"1878130600": {"document": "A landscaper has 2500 square feet of grass land in a customer\u2019s backyard where they need to cut grass using either a heavy-duty yard machine or a gas lawn mower. For each square foot of land, the heavy-duty yard machine requires 2 seconds while the gas lawn mower takes 5 seconds. Per square foot, the heavy-duty yard machine produces 12 units of pollution and requires 3 units of fuel. Conversely, the gas lawn mower generates 10 units of pollution for each square foot and requires 2 units of fuel. There are 450 units of fuel available and the landscaper can produce no more than 2000 units of pollution. For how many square feet should each machine be used to minimize the time required to cut this customer\u2019s backyard?", "order_mapping": {"heavy-duty yard machine": 0, "gas lawn mower": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "time required", "terms": {"gas lawn mower": "5", "heavy-duty yard machine": "2"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "450", "terms": {"gas lawn mower": "2", "heavy-duty yard machine": "3"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "no more than", "limit": "2000", "terms": {"heavy-duty yard machine": "12", "gas lawn mower": "10"}, "operator": "LESS_OR_EQUAL"}, {"type": "sum", "direction": "has", "limit": "2500", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [2.0, 5.0], "constraints": [[3.0, 2.0, 450.0], [12.0, 10.0, 2000.0], [1.0, 1.0, 2500.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 13, "end": 16, "word": "has", "entity_group": "CONST_DIR", "score": 0.9821275911532757}, {"start": 17, "end": 21, "word": "2500", "entity_group": "LIMIT", "score": 0.99743882055873}, {"start": 118, "end": 143, "word": "heavy - duty yard machine", "entity_group": "VAR", "score": 0.9988270502642033}, {"start": 149, "end": 163, "word": "gas lawn mower", "entity_group": "VAR", "score": 0.99932129118613}, {"start": 201, "end": 226, "word": "heavy - duty yard machine", "entity_group": "VAR", "score": 0.9985506376492287}, {"start": 236, "end": 237, "word": "2", "entity_group": "PARAM", "score": 0.9996536032089947}, {"start": 256, "end": 270, "word": "gas lawn mower", "entity_group": "VAR", "score": 0.9995612403662674}, {"start": 277, "end": 278, "word": "5", "entity_group": "PARAM", "score": 0.999651714111492}, {"start": 311, "end": 336, "word": "heavy - duty yard machine", "entity_group": "VAR", "score": 0.9992575908709201}, {"start": 346, "end": 348, "word": "12", "entity_group": "PARAM", "score": 0.9996923847353204}, {"start": 381, "end": 382, "word": "3", "entity_group": "PARAM", "score": 0.9996703179393757}, {"start": 416, "end": 430, "word": "gas lawn mower", "entity_group": "VAR", "score": 0.999467663287643}, {"start": 441, "end": 443, "word": "10", "entity_group": "PARAM", "score": 0.9996273484615085}, {"start": 497, "end": 498, "word": "2", "entity_group": "PARAM", "score": 0.9996988119716003}, {"start": 525, "end": 528, "word": "450", "entity_group": "LIMIT", "score": 0.9997022993949353}, {"start": 543, "end": 552, "word": "available", "entity_group": "CONST_DIR", "score": 0.9981549372887759}, {"start": 584, "end": 596, "word": "no more than", "entity_group": "CONST_DIR", "score": 0.9930641481444206}, {"start": 597, "end": 601, "word": "2000", "entity_group": "LIMIT", "score": 0.9996699793995376}, {"start": 679, "end": 687, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9873253667562297}, {"start": 692, "end": 696, "word": "time", "entity_group": "OBJ_NAME", "score": 0.9993235915776215}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nHeavyDutyYardMachine = intvar(0, 999999999)  # Square feet cut by the heavy-duty yard machine\nGasLawnMower = intvar(0, 999999999)  # Square feet cut by the gas lawn mower\n\n# Constraints\nm = Model()\n\n# Total square feet to be cut is exactly 2500:\nm += HeavyDutyYardMachine + GasLawnMower == 2500\n# Fuel constraint: 3 units for heavy-duty yard machine and 2 units for gas lawn mower, with 450 units available:\nm += 3 * HeavyDutyYardMachine + 2 * GasLawnMower <= 450\n# Pollution constraint: 12 units for heavy-duty yard machine and 10 units for gas lawn mower, with 2000 units as the limit:\nm += 12 * HeavyDutyYardMachine + 10 * GasLawnMower <= 2000\n\n# Objective\n# Minimize the time required to cut the grass (2 seconds per square foot for heavy-duty yard machine and 5 seconds per square foot for gas lawn mower):\nm.minimize(2 * HeavyDutyYardMachine + 5 * GasLawnMower)\n"}}
{"2018818116": {"document": "A park is designing their trails and can either create a wide trail or a narrow trail. A wide trail can take 50 visitors every day while the narrow trail expects 20 visitors every day. The wide trail will introduce 6 units of garbage and the narrow trail will introduce 3 units of garbage. There can be at most 3 wide trails and the park hopes to have at most 225 visitors every day. How many of each type of trail should the park construct to minimize the total amount of garbage produced.", "order_mapping": {"wide trail": 0, "narrow trail": 1, "wide trails": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total amount of garbage", "terms": {"wide trail": "6", "narrow trail": "3"}}, "const_declarations": [{"type": "linear", "direction": "at most", "limit": "225", "terms": {"wide trail": "50", "narrow trail": "20"}, "operator": "LESS_OR_EQUAL"}, {"type": "upperbound", "direction": "at most", "limit": "3", "var": "wide trails", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [6.0, 3.0], "constraints": [[50.0, 20.0, 225.0], [1.0, 0.0, 3.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 57, "end": 67, "word": "wide trail", "entity_group": "VAR", "score": 0.9999481693853526}, {"start": 73, "end": 85, "word": "narrow trail", "entity_group": "VAR", "score": 0.9999788339970438}, {"start": 90, "end": 100, "word": "wide trail", "entity_group": "VAR", "score": 0.999986684209771}, {"start": 110, "end": 112, "word": "50", "entity_group": "PARAM", "score": 0.9996695323731145}, {"start": 142, "end": 154, "word": "narrow trail", "entity_group": "VAR", "score": 0.9999848778080661}, {"start": 163, "end": 165, "word": "20", "entity_group": "PARAM", "score": 0.9994290320113935}, {"start": 191, "end": 201, "word": "wide trail", "entity_group": "VAR", "score": 0.9999729027545377}, {"start": 217, "end": 218, "word": "6", "entity_group": "PARAM", "score": 0.9996957226706836}, {"start": 228, "end": 235, "word": "garbage", "entity_group": "OBJ_NAME", "score": 0.9977344555644695}, {"start": 244, "end": 256, "word": "narrow trail", "entity_group": "VAR", "score": 0.9999726938442729}, {"start": 272, "end": 273, "word": "3", "entity_group": "PARAM", "score": 0.9996621668198354}, {"start": 283, "end": 290, "word": "garbage", "entity_group": "OBJ_NAME", "score": 0.9972651570853442}, {"start": 306, "end": 313, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9985859915583521}, {"start": 314, "end": 315, "word": "3", "entity_group": "LIMIT", "score": 0.999572157050136}, {"start": 316, "end": 327, "word": "wide trails", "entity_group": "VAR", "score": 0.9999697320540946}, {"start": 355, "end": 362, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9986003299255263}, {"start": 363, "end": 366, "word": "225", "entity_group": "LIMIT", "score": 0.9987708039567904}, {"start": 448, "end": 456, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9986118530386471}, {"start": 461, "end": 484, "word": "total amount of garbage", "entity_group": "OBJ_NAME", "score": 0.9565164767853952}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWideTrails = intvar(0, 3)  # Number of wide trails (at most 3)\nNarrowTrails = intvar(0, 999999999)  # Number of narrow trails (no explicit upper limit given)\n\n# Constraints\nm = Model()\n\n# The park hopes to have at most 225 visitors every day:\nm += 50 * WideTrails + 20 * NarrowTrails <= 225\n# There can be at most 3 wide trails:\nm += WideTrails <= 3\n\n# Objective\n# Minimize the total amount of garbage produced (6 units for wide trail, 3 units for narrow trail):\nm.minimize(6 * WideTrails + 3 * NarrowTrails)\n"}}
{"2078392466": {"document": "A brewery can ferment their product into either wine or kombucha. Each unit of wine requires 3 units of fruit and 8 units of water. Each unit of kombucha requires 5 units of fruit and 7 units of tea. The company has available 7000 units of water and 9000 units of tea. Wine sells for more, therefore the number of wine must be larger than the number of kombucha. Additionally, at least 20% of their products made must be kombucha. How many of each should the brewery make to minimize the total units of fruit required?", "order_mapping": {"wine": 0, "kombucha": 1, "Wine": 0}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total units of fruit required", "terms": {"wine": "3", "kombucha": "5"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "7000", "terms": {"wine": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "9000", "terms": {"kombucha": "7"}, "operator": "LESS_OR_EQUAL"}, {"type": "xy", "x_var": "wine", "direction": "larger than", "y_var": "kombucha", "operator": "GREATER"}, {"type": "ratio", "direction": "at least", "limit": "20%", "var": "kombucha", "operator": "GREATER_OR_EQUAL"}], "canonical": {"objective": [3.0, 5.0], "constraints": [[8.0, 0.0, 7000.0], [0.0, 7.0, 9000.0], [-1.0, 1.0, -1e-06], [0.2, -0.8, -0.0]]}, "solution": {"x": 0, "y": 0}, "entities": [{"start": 48, "end": 52, "word": "wine", "entity_group": "VAR", "score": 0.9989966500090163}, {"start": 56, "end": 64, "word": "kombucha", "entity_group": "VAR", "score": 0.9996040515522978}, {"start": 80, "end": 84, "word": "wine", "entity_group": "VAR", "score": 0.9989621766631545}, {"start": 94, "end": 95, "word": "3", "entity_group": "PARAM", "score": 0.9995967982913553}, {"start": 115, "end": 116, "word": "8", "entity_group": "PARAM", "score": 0.999705960871028}, {"start": 147, "end": 155, "word": "kombucha", "entity_group": "VAR", "score": 0.9994356143998638}, {"start": 165, "end": 166, "word": "5", "entity_group": "PARAM", "score": 0.9996001452595221}, {"start": 176, "end": 181, "word": "fruit", "entity_group": "OBJ_NAME", "score": 0.9914944730956002}, {"start": 186, "end": 187, "word": "7", "entity_group": "PARAM", "score": 0.9996216403604009}, {"start": 219, "end": 228, "word": "available", "entity_group": "CONST_DIR", "score": 0.998793539863344}, {"start": 229, "end": 233, "word": "7000", "entity_group": "LIMIT", "score": 0.9993836954622759}, {"start": 253, "end": 257, "word": "9000", "entity_group": "LIMIT", "score": 0.9996900105483405}, {"start": 273, "end": 277, "word": "Wine", "entity_group": "VAR", "score": 0.9996074559289357}, {"start": 278, "end": 283, "word": "sells", "entity_group": "OBJ_NAME", "score": 0.8928612712562959}, {"start": 319, "end": 323, "word": "wine", "entity_group": "VAR", "score": 0.9995897384679961}, {"start": 358, "end": 366, "word": "kombucha", "entity_group": "VAR", "score": 0.9997863014883984}, {"start": 384, "end": 392, "word": "at least", "entity_group": "CONST_DIR", "score": 0.9986540925475704}, {"start": 393, "end": 397, "word": "20 %", "entity_group": "LIMIT", "score": 0.966114228114412}, {"start": 429, "end": 437, "word": "kombucha", "entity_group": "VAR", "score": 0.9997224949635374}, {"start": 484, "end": 492, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9983717063079385}, {"start": 497, "end": 517, "word": "total units of fruit", "entity_group": "OBJ_NAME", "score": 0.968991812719541}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nWine = intvar(0, 999999999)  # Number of units of wine produced\nKombucha = intvar(0, 999999999)  # Number of units of kombucha produced\n\n# Constraints\nm = Model()\n\n# Water constraint for wine production (8 units of water per unit of wine):\nm += 8 * Wine <= 7000\n# Tea constraint for kombucha production (7 units of tea per unit of kombucha):\nm += 7 * Kombucha <= 9000\n# The number of wine must be larger than the number of kombucha:\nm += Wine > Kombucha\n# At least 20% of their products made must be kombucha:\nm += Kombucha >= 0.20 * (Wine + Kombucha)\n\n# Objective\n# Minimize the total units of fruit required (3 units of fruit per unit of wine, 5 units of fruit per unit of kombucha):\nm.minimize(3 * Wine + 5 * Kombucha)\n"}}
{"-527722703": {"document": "A hospital can transport their patients either using a type II ambulance or hospital van. The hospital needs to transport 320 patients every day. A type II ambulance is mounted on a truck-style chassis and can move 20 patients every shift and costs the hospital (including gas and salary) $820. A hospital van can move 15 patients and costs the hospital $550 every shift. The hospital can have at most 60% of shifts be hospital vans due to union limitations of the type II ambulance drivers. How many of shift using each type of vehicle should be scheduled to minimize the total cost to the hospital?", "order_mapping": {"type II ambulance": 0, "hospital van": 1, "hospital vans": 1}, "obj_declaration": {"type": "objective", "direction": "minimize", "name": "total cost", "terms": {"type II ambulance": "820", "hospital van": "550"}}, "const_declarations": [{"type": "linear", "direction": "needs to transport", "limit": "320", "terms": {"type II ambulance": "20", "hospital van": "15"}, "operator": "GREATER_OR_EQUAL"}, {"type": "ratio", "direction": "at most", "limit": "60%", "var": "hospital vans", "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [820.0, 550.0], "constraints": [[-20.0, -15.0, -320.0], [-0.6, 0.4, 0.0]]}, "solution": {"x": 10, "y": 8}, "entities": [{"start": 55, "end": 72, "word": "type II ambulance", "entity_group": "VAR", "score": 0.9991771641571547}, {"start": 76, "end": 88, "word": "hospital van", "entity_group": "VAR", "score": 0.9999705667746885}, {"start": 104, "end": 109, "word": "needs", "entity_group": "CONST_DIR", "score": 0.8658970456063535}, {"start": 123, "end": 126, "word": "320", "entity_group": "LIMIT", "score": 0.9993894529259633}, {"start": 150, "end": 167, "word": "type II ambulance", "entity_group": "VAR", "score": 0.9991592686998112}, {"start": 219, "end": 221, "word": "20", "entity_group": "PARAM", "score": 0.998733249442594}, {"start": 247, "end": 252, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.9992792943522484}, {"start": 297, "end": 300, "word": "820", "entity_group": "PARAM", "score": 0.9996962437156774}, {"start": 305, "end": 317, "word": "hospital van", "entity_group": "VAR", "score": 0.9999683309564701}, {"start": 327, "end": 329, "word": "15", "entity_group": "PARAM", "score": 0.9996996073708376}, {"start": 343, "end": 348, "word": "costs", "entity_group": "OBJ_NAME", "score": 0.998348945010119}, {"start": 364, "end": 367, "word": "550", "entity_group": "PARAM", "score": 0.9996693206941983}, {"start": 404, "end": 411, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9991906346565465}, {"start": 412, "end": 416, "word": "60 %", "entity_group": "LIMIT", "score": 0.9730667465544482}, {"start": 430, "end": 443, "word": "hospital vans", "entity_group": "VAR", "score": 0.9999431431671351}, {"start": 476, "end": 483, "word": "type II", "entity_group": "VAR", "score": 0.9999497023630658}, {"start": 572, "end": 580, "word": "minimize", "entity_group": "OBJ_DIR", "score": 0.9973383628284893}, {"start": 591, "end": 595, "word": "cost", "entity_group": "OBJ_NAME", "score": 0.9976538348244753}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nTypeIIAmbulanceShifts = intvar(0, 999999999)  # Number of shifts using Type II Ambulance\nHospitalVanShifts = intvar(0, 999999999)  # Number of shifts using Hospital Van\n\n# Constraints\nm = Model()\n\n# The hospital needs to transport 320 patients every day:\nm += 20 * TypeIIAmbulanceShifts + 15 * HospitalVanShifts >= 320\n# At most 60% of shifts can be hospital vans:\ntotal_shifts = TypeIIAmbulanceShifts + HospitalVanShifts\nm += HospitalVanShifts <= 0.6 * total_shifts\n\n# Objective\n# Minimize the total cost to the hospital:\nm.minimize(820 * TypeIIAmbulanceShifts + 550 * HospitalVanShifts)\n"}}
{"-636643683": {"document": "An incandescent bulb manufacturing company uses either an argon gas approach or halogen gas approach to fill their light bulbs. The argon gas approach uses 10 units of gas and 12 units of glass to make 2 light bulbs. The halogen gas approach uses 12 units of gas and 8 units of glass to make 3 light bulbs. Additionally, the argon gas approach generates 3 units of heat while the halogen gas approach creates 4 units of heat. The manufacturing company has available 150 units of gas and 120 units of glass. If at most 28 units of heat can be generated during the manufacturing process, how many of each method should be used to maximize the number of light bulbs produced?", "order_mapping": {"argon gas approach": 0, "halogen gas approach": 1}, "obj_declaration": {"type": "objective", "direction": "maximize", "name": "number of light bulbs", "terms": {"argon gas approach": "2", "halogen gas approach": "3"}}, "const_declarations": [{"type": "linear", "direction": "available", "limit": "150", "terms": {"argon gas approach": "10", "halogen gas approach": "12"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "available", "limit": "120", "terms": {"argon gas approach": "12", "halogen gas approach": "8"}, "operator": "LESS_OR_EQUAL"}, {"type": "linear", "direction": "at most", "limit": "28", "terms": {"argon gas approach": "3", "halogen gas approach": "4"}, "operator": "LESS_OR_EQUAL"}], "canonical": {"objective": [-2.0, -3.0], "constraints": [[10.0, 12.0, 150.0], [12.0, 8.0, 120.0], [3.0, 4.0, 28.0]]}, "solution": {"x": 0, "y": 7}, "entities": [{"start": 58, "end": 76, "word": "argon gas approach", "entity_group": "VAR", "score": 0.9998021220277035}, {"start": 80, "end": 100, "word": "halogen gas approach", "entity_group": "VAR", "score": 0.9904721893966308}, {"start": 133, "end": 151, "word": "argon gas approach", "entity_group": "VAR", "score": 0.9988047713320877}, {"start": 157, "end": 159, "word": "10", "entity_group": "PARAM", "score": 0.9996885528448631}, {"start": 177, "end": 179, "word": "12", "entity_group": "PARAM", "score": 0.9997151636970623}, {"start": 203, "end": 204, "word": "2", "entity_group": "PARAM", "score": 0.9991377062596671}, {"start": 205, "end": 216, "word": "light bulbs", "entity_group": "OBJ_NAME", "score": 0.9886743494580307}, {"start": 223, "end": 243, "word": "halogen gas approach", "entity_group": "VAR", "score": 0.9997170061236725}, {"start": 249, "end": 251, "word": "12", "entity_group": "PARAM", "score": 0.9996555986300089}, {"start": 269, "end": 270, "word": "8", "entity_group": "PARAM", "score": 0.9997145789333844}, {"start": 294, "end": 295, "word": "3", "entity_group": "PARAM", "score": 0.9980006742953433}, {"start": 296, "end": 307, "word": "light bulbs", "entity_group": "OBJ_NAME", "score": 0.9783034268913278}, {"start": 329, "end": 347, "word": "argon gas approach", "entity_group": "VAR", "score": 0.9982340964942809}, {"start": 358, "end": 359, "word": "3", "entity_group": "PARAM", "score": 0.9994505282102891}, {"start": 384, "end": 404, "word": "halogen gas approach", "entity_group": "VAR", "score": 0.9996870602148163}, {"start": 413, "end": 414, "word": "4", "entity_group": "PARAM", "score": 0.9992767950331898}, {"start": 461, "end": 470, "word": "available", "entity_group": "CONST_DIR", "score": 0.9982964828401293}, {"start": 471, "end": 474, "word": "150", "entity_group": "LIMIT", "score": 0.9991968863953314}, {"start": 492, "end": 495, "word": "120", "entity_group": "LIMIT", "score": 0.9996624447554296}, {"start": 516, "end": 523, "word": "at most", "entity_group": "CONST_DIR", "score": 0.9990527055680467}, {"start": 524, "end": 526, "word": "28", "entity_group": "LIMIT", "score": 0.9997064979895723}, {"start": 635, "end": 643, "word": "maximize", "entity_group": "OBJ_DIR", "score": 0.9968903142957818}, {"start": 648, "end": 669, "word": "number of light bulbs", "entity_group": "OBJ_NAME", "score": 0.9596828697653674}], "cpmpy_code": "\nfrom cpmpy import Model, intvar\n\n# Decision Variables\nArgonGasApproach = intvar(0, 999999999)  # Number of times the argon gas approach is used\nHalogenGasApproach = intvar(0, 999999999)  # Number of times the halogen gas approach is used\n\n# Constraints\nm = Model()\n\n# Gas and glass constraints based on the approaches used\nm += 10*ArgonGasApproach + 12*HalogenGasApproach <= 150  # Gas constraint\nm += 12*ArgonGasApproach + 8*HalogenGasApproach <= 120  # Glass constraint\n\n# Heat generation constraint\nm += 3*ArgonGasApproach + 4*HalogenGasApproach <= 28  # Heat constraint\n\n# Objective\n# Maximize the number of light bulbs produced\nm.maximize(2*ArgonGasApproach + 3*HalogenGasApproach)\n\n"}}
