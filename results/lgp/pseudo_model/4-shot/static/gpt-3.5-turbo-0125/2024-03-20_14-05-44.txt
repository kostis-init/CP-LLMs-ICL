Solution accuracy: 58.0%
Inverse Solution accuracy: 63.0%
Constraint accuracy: 69.48480845442536%
Model accuracy: 56.0%

Wrong solutions: 26, total: 100
Wrong inverse solutions: 37, total: 100
Wrong constraints: 101, total: 757
Wrong models: 43, total: 100
Errors: solution-level: 16, inverse solution-level: 0, constraint-level: 130, model-level: 1
---------------------------------------------------------------------------------------------

Clues:
The person who had the port paid 1 dollar more than Kurt.
Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the shiraz.
Of the person who paid $27 and Priscilla, one had the chianti and the other had the port.
Isabel paid $25.

Entities:
wines: chianti, port, riesling, shiraz
prices: $24, $25, $26, $27
names: Isabel, Kurt, Priscilla, Robin
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Isabel == 1, and Price25 == 1, and Chianti == 1, then Isabel paid $25 for the Chianti.

### Decision variables:
-   Names of the persons: Isabel, Kurt, Priscilla, Robin (all different, 1 to 4)
-   Wines bought: Chianti, Port, Riesling, Shiraz (all different, 1 to 4)
-   Prices paid: Price24, Price25, Price26, Price27 (all different, 1 to 4)

### Constraints:
-   The person who had the port paid 1 dollar more than Kurt:
    For this, we will need to add a constraint for each possible assignment of prices for the person who had the port and Kurt, such that the price paid for the port is 1 more than Kurt's price. So, the constraints will be of the form:
    p1 == Port and p2 == Kurt => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.

-   Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the Shiraz:
    This is a constraint that states that one person paid $25 and the other paid $24, and one of them is Priscilla and the other had the Shiraz. So, we will have:
    (Price25 == Priscilla and Price24 == Shiraz) or (Price24 == Priscilla and Price25 == Shiraz).

-   Of the person who paid $27 and Priscilla, one had the Chianti and the other had the Port:
    This is a constraint that states that one person paid $27 and the other is Priscilla, and one of them had the Chianti and the other had the Port. So, we will have:
    (Price27 == Chianti and Priscilla == Port) or (Priscilla == Chianti and Price27 == Port).

-   Isabel paid $25:
    This is a direct assignment constraint:
    Isabel == Price25.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Isabel == 1, and Price25 == 1, and Chianti == 1, then Isabel paid $25 for the Chianti.

### Decision variables:
-   Names of the persons: Isabel, Kurt, Priscilla, Robin (all different, 1 to 4)
-   Wines bought: Chianti, Port, Riesling, Shiraz (all different, 1 to 4)
-   Prices paid: Price24, Price25, Price26, Price27 (all different, 1 to 4)

### Constraints:
-   The person who had the port paid 1 dollar more than Kurt:
    For this, we will need to add a constraint for each possible assignment of prices for the person who had the port and Kurt, such that the price paid for the port is 1 more than Kurt's price. So, the constraints will be of the form:
    p1 == Port and p2 == Kurt => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.

-   Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the Shiraz:
    This is a constraint that states that one person paid $25 and the other paid $24, and one of them is Priscilla and the other had the Shiraz. So, we will have:
    (Price25 == Priscilla and Price24 == Shiraz) or (Price24 == Priscilla and Price25 == Shiraz).

-   Of the person who paid $27 and Priscilla, one had the Chianti and the other had the Port:
    This is a constraint that states that one person paid $27 and the other is Priscilla, and one of them had the Chianti and the other had the Port. So, we will have:
    (Price27 == Chianti and Priscilla == Port) or (Priscilla == Chianti and Price27 == Port).

-   Isabel paid $25:
    This is a direct assignment constraint:
    Isabel == Price25.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of person, wine, and price)
# e.g. if isabel == 1 and price25 == 1 and chianti == 1, then Isabel paid $25 for the Chianti
isabel, kurt, priscilla, robin = names = intvar(1, 4, shape=4)
chianti, port, riesling, shiraz = wines = intvar(1, 4, shape=4)
price24, price25, price26, price27 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
person_to_int = None  # N/A
wine_to_int = None  # N/A
price_to_int = {price24: 24, price25: 25, price26: 26, price27: 27}  # in dollars


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid 1 dollar more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + 1)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(wines)
m += AllDifferent(prices)

# Clue 1: The person who had the port paid 1 dollar more than Kurt:
m += paid_more_than(port, kurt)

# Clue 2: Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the Shiraz:
m += ((price25 == priscilla) & (price24 == shiraz)) | ((price24 == priscilla) & (price25 == shiraz))

# Clue 3: Of the person who paid $27 and Priscilla, one had the Chianti and the other had the Port:
m += ((price27 == chianti) & (priscilla == port)) | ((priscilla == chianti) & (price27 == port))

# Clue 4: Isabel paid $25:
m += isabel == price25

```
True
True
True
Wrong: 2, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Celia used the gluten-free diet.
The friend who lost 3 pounds used the low-fat diet.
Mandy lost 2 fewer pounds than Raymond.
Mandy lost 4 more pounds than Tom.
The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds.

Entities:
pounds lost: 3, 5, 7, 9
diets: dairy-free, gluten-free, low-fat, vegan
names: Celia, Mandy, Raymond, Tom
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Celia == 1, and 3 == 1, and DairyFree == 1, then Celia used the dairy-free diet and lost 3 pounds.

### Decision variables:
-   Names of the individuals: Celia, Mandy, Raymond, Tom (all different, 1 to 4)
-   Pounds lost: 3, 5, 7, 9 (all different, 1 to 4)
-   Types of diets: DairyFree, GlutenFree, LowFat, Vegan (all different, 1 to 4)

### Constraints:
-   Celia used the gluten-free diet:
    This is a direct assignment constraint:
    Celia == GlutenFree.

-   The friend who lost 3 pounds used the low-fat diet:
    This is a direct assignment constraint:
    Friend3Pounds == LowFat.

-   Mandy lost 2 fewer pounds than Raymond:
    For this, we will need to add a constraint for each possible assignment of pounds lost for Mandy and Raymond, such that Mandy's pounds lost is 2 less than Raymond's pounds lost. So, the constraints will be of the form:
    p1 == Mandy and p2 == Raymond => p1_to_int == p2_to_int - 2, for all p1, p2 in pounds lost.

-   Mandy lost 4 more pounds than Tom:
    For this, we will need to add a constraint for each possible assignment of pounds lost for Mandy and Tom, such that Mandy's pounds lost is 4 more than Tom's pounds lost. So, the constraints will be of the form:
    p1 == Mandy and p2 == Tom => p1_to_int == p2_to_int + 4, for all p1, p2 in pounds lost.

-   The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds:
    This is a constraint that states that the dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds, but not both. So:
    Xor([Vegan == Mandy, Vegan == Friend3Pounds]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Celia == 1, and 3 == 1, and DairyFree == 1, then Celia used the dairy-free diet and lost 3 pounds.

### Decision variables:
-   Names of the individuals: Celia, Mandy, Raymond, Tom (all different, 1 to 4)
-   Pounds lost: 3, 5, 7, 9 (all different, 1 to 4)
-   Types of diets: DairyFree, GlutenFree, LowFat, Vegan (all different, 1 to 4)

### Constraints:
-   Celia used the gluten-free diet:
    This is a direct assignment constraint:
    Celia == GlutenFree.

-   The friend who lost 3 pounds used the low-fat diet:
    This is a direct assignment constraint:
    Friend3Pounds == LowFat.

-   Mandy lost 2 fewer pounds than Raymond:
    For this, we will need to add a constraint for each possible assignment of pounds lost for Mandy and Raymond, such that Mandy's pounds lost is 2 less than Raymond's pounds lost. So, the constraints will be of the form:
    p1 == Mandy and p2 == Raymond => p1_to_int == p2_to_int - 2, for all p1, p2 in pounds lost.

-   Mandy lost 4 more pounds than Tom:
    For this, we will need to add a constraint for each possible assignment of pounds lost for Mandy and Tom, such that Mandy's pounds lost is 4 more than Tom's pounds lost. So, the constraints will be of the form:
    p1 == Mandy and p2 == Tom => p1_to_int == p2_to_int + 4, for all p1, p2 in pounds lost.

-   The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds:
    This is a constraint that states that the dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds, but not both. So:
    Xor([Vegan == Mandy, Vegan == Friend3Pounds]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of individual, pounds lost, and diet)
# e.g. if celia == 1 and pounds3 == 1 and gluten_free == 1, then Celia lost 3 pounds using the gluten-free diet
celia, mandy, raymond, tom = individuals = intvar(1, 4, shape=4)
pounds3, pounds5, pounds7, pounds9 = pounds_lost = intvar(1, 4, shape=4)
dairy_free, gluten_free, low_fat, vegan = diets = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
individual_to_int = None  # N/A
pounds_to_int = {pounds3: 3, pounds5: 5, pounds7: 7, pounds9: 9}  # in pounds
diet_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def lost_fewer_pounds(var1, var2, diff):
    """
    Formulate the constraint that var1 lost fewer pounds than var2 by diff.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pounds_to_int[p1] == pounds_to_int[p2] - diff)
            for p1 in pounds_lost for p2 in pounds_lost]


def lost_more_pounds(var1, var2, diff):
    """
    Formulate the constraint that var1 lost more pounds than var2 by diff.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pounds_to_int[p1] == pounds_to_int[p2] + diff)
            for p1 in pounds_lost for p2 in pounds_lost]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(individuals)
m += AllDifferent(pounds_lost)
m += AllDifferent(diets)

# Clue 1: Celia used the gluten-free diet:
m += celia == gluten_free

# Clue 2: The friend who lost 3 pounds used the low-fat diet:
m += pounds3 == low_fat

# Clue 3: Mandy lost 2 fewer pounds than Raymond:
m += lost_fewer_pounds(mandy, raymond, 2)

# Clue 4: Mandy lost 4 more pounds than Tom:
m += lost_more_pounds(mandy, tom, 4)

# Clue 5: The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds:
m += Xor([vegan == mandy, vegan == pounds3])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The four people were Shari, the performer who went fourth, the person who used batons and the performer who went third.
Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda.
The juggler who used bowling pins was either Yolanda or the juggler who went second.
Trevor performed 2 spots before the performer who used chainsaws.

Entities:
orders: first, second, third, fourth
names: Melissa, Shari, Trevor, Yolanda
items: batons, bowling pins, chainsaws, rings
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Melissa == 1, and first == 1, and bowlingpins == 1, then Melissa used bowling pins and performed first.

### Decision variables:
-   Orders of performance: first, second, third, fourth (all different, 1 to 4)
-   Names of the performers: Melissa, Shari, Trevor, Yolanda (all different, 1 to 4)
-   Items used by the performers: batons, bowling pins, chainsaws, rings (all different, 1 to 4)

### Constraints:
-   The four people were Shari, the performer who went fourth, the person who used batons, and the performer who went third:
    This is a constraint that states that each of these entities is different and corresponds to a different order of performance and item used. Thus:
    AllDifferent([Shari, fourth, batons, third]).

-   Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda:
    This is a constraint that states that one used bowling pins and went fourth, and the other is Melissa. So:
    (bowlingpins == fourth and Melissa != fourth) or (bowlingpins == Melissa and fourth != Melissa).

-   The juggler who used bowling pins was either Yolanda or the juggler who went second:
    This is a constraint that states that the juggler who used bowling pins is either Yolanda or the one who went second. So:
    (bowlingpins == Yolanda or bowlingpins == second).

-   Trevor performed 2 spots before the performer who used chainsaws:
    For this, we will need to add a constraint for each possible assignment of the orders of performance for Trevor and the performer who used chainsaws, such that Trevor's order is 2 less than the performer who used chainsaws. So, the constraints will be of the form:
    o1 == Trevor and o2 == chainsaws => o1_to_int == o2_to_int - 2, for all o1, o2 in orders.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Melissa == 1, and first == 1, and bowlingpins == 1, then Melissa used bowling pins and performed first.

### Decision variables:
-   Orders of performance: first, second, third, fourth (all different, 1 to 4)
-   Names of the performers: Melissa, Shari, Trevor, Yolanda (all different, 1 to 4)
-   Items used by the performers: batons, bowling pins, chainsaws, rings (all different, 1 to 4)

### Constraints:
-   The four people were Shari, the performer who went fourth, the person who used batons, and the performer who went third:
    This is a constraint that states that each of these entities is different and corresponds to a different order of performance and item used. Thus:
    AllDifferent([Shari, fourth, batons, third]).

-   Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda:
    This is a constraint that states that one used bowling pins and went fourth, and the other is Melissa. So:
    (bowlingpins == fourth and Melissa != fourth) or (bowlingpins == Melissa and fourth != Melissa).

-   The juggler who used bowling pins was either Yolanda or the juggler who went second:
    This is a constraint that states that the juggler who used bowling pins is either Yolanda or the one who went second. So:
    (bowlingpins == Yolanda or bowlingpins == second).

-   Trevor performed 2 spots before the performer who used chainsaws:
    For this, we will need to add a constraint for each possible assignment of the orders of performance for Trevor and the performer who used chainsaws, such that Trevor's order is 2 less than the performer who used chainsaws. So, the constraints will be of the form:
    o1 == Trevor and o2 == chainsaws => o1_to_int == o2_to_int - 2, for all o1, o2 in orders.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of performer, order, and item)
# e.g. if melissa == 1 and first == 1 and bowlingpins == 1, then Melissa used bowling pins and performed first
melissa, shari, trevor, yolanda = performers = intvar(1, 4, shape=4)
first, second, third, fourth = orders = intvar(1, 4, shape=4)
batons, bowlingpins, chainsaws, rings = items = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
performer_to_int = None  # N/A
order_to_int = {first: 1, second: 2, third: 3, fourth: 4}  # in order
item_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def different_entities(var1, var2, var3, var4):
    """
    Formulate the constraint that var1, var2, var3, and var4 are all different entities.
    """
    return AllDifferent([var1, var2, var3, var4])


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(performers)
m += AllDifferent(orders)
m += AllDifferent(items)

# Clue 1: The four people were Shari, the performer who went fourth, the person who used batons, and the performer who went third:
m += different_entities(shari, fourth, batons, third)

# Clue 2: Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda:
m += ((bowlingpins == fourth) & (melissa != fourth)) | ((bowlingpins == melissa) & (fourth != melissa))

# Clue 3: The juggler who used bowling pins was either Yolanda or the juggler who went second:
m += (bowlingpins == yolanda) | (bowlingpins == second)

# Clue 4: Trevor performed 2 spots before the performer who used chainsaws:
m += ((trevor == first) & (chainsaws == third)) | ((trevor == second) & (chainsaws == fourth))

```
False
False
False
Wrong: 3, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The woman with 2 losses has 3 more wins than the boxer with 8 losses.
Edna Easton has 6 more wins than Irma.
Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses.
The boxer with 12 losses is either the fighter with 33 wins or Jane.

Entities:
wins: 24, 27, 30, 33
boxers: Edna Easton, Irma, Jane, Sonia
losses: 2, 4, 8, 12
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EdnaEaston == 1, and 24Wins == 1, and 2Losses == 1, then Edna Easton has 24 wins and 2 losses.

### Decision variables:
-   Names of the boxers: EdnaEaston, Irma, Jane, Sonia (all different, 1 to 4)
-   Number of wins: 24, 27, 30, 33 (all different, 1 to 4)
-   Number of losses: 2, 4, 8, 12 (all different, 1 to 4)

### Constraints:
-   The woman with 2 losses has 3 more wins than the boxer with 8 losses:
    For this, we will need to add a constraint for each possible assignment of wins to the woman with 2 losses and the boxer with 8 losses, such that the woman's wins are 3 more than the boxer's wins. So, the constraints will be of the form:
    w1 == 2Losses and w2 == 8Losses => w1_to_int == w2_to_int + 3, for all w1, w2 in wins.

-   Edna Easton has 6 more wins than Irma:
    For this, we will need to add a constraint for each possible assignment of wins to Edna Easton and Irma, such that Edna Easton's wins are 6 more than Irma's wins. So, the constraints will be of the form:
    w1 == EdnaEaston and w2 == Irma => w1_to_int == w2_to_int + 6, for all w1, w2 in wins.

-   Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses:
    This is a constraint that states that one of the boxers has 33 wins and the other has 27 wins, and one of them is Sonia and the other has 12 losses. So, the constraints will be of the form:
    (w1 == 33Wins and w2 == 27Wins and Sonia == 1 and 12Losses == 2) or (w1 == 27Wins and w2 == 33Wins and Sonia == 2 and 12Losses == 1), for all w1, w2 in wins.

-   The boxer with 12 losses is either the fighter with 33 wins or Jane:
    This is a constraint that states that the boxer with 12 losses is either the fighter with 33 wins or Jane, but not both. So:
    Xor([12Losses == 33Wins, 12Losses == Jane]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EdnaEaston == 1, and 24Wins == 1, and 2Losses == 1, then Edna Easton has 24 wins and 2 losses.

### Decision variables:
-   Names of the boxers: EdnaEaston, Irma, Jane, Sonia (all different, 1 to 4)
-   Number of wins: 24, 27, 30, 33 (all different, 1 to 4)
-   Number of losses: 2, 4, 8, 12 (all different, 1 to 4)

### Constraints:
-   The woman with 2 losses has 3 more wins than the boxer with 8 losses:
    For this, we will need to add a constraint for each possible assignment of wins to the woman with 2 losses and the boxer with 8 losses, such that the woman's wins are 3 more than the boxer's wins. So, the constraints will be of the form:
    w1 == 2Losses and w2 == 8Losses => w1_to_int == w2_to_int + 3, for all w1, w2 in wins.

-   Edna Easton has 6 more wins than Irma:
    For this, we will need to add a constraint for each possible assignment of wins to Edna Easton and Irma, such that Edna Easton's wins are 6 more than Irma's wins. So, the constraints will be of the form:
    w1 == EdnaEaston and w2 == Irma => w1_to_int == w2_to_int + 6, for all w1, w2 in wins.

-   Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses:
    This is a constraint that states that one of the boxers has 33 wins and the other has 27 wins, and one of them is Sonia and the other has 12 losses. So, the constraints will be of the form:
    (w1 == 33Wins and w2 == 27Wins and Sonia == 1 and 12Losses == 2) or (w1 == 27Wins and w2 == 33Wins and Sonia == 2 and 12Losses == 1), for all w1, w2 in wins.

-   The boxer with 12 losses is either the fighter with 33 wins or Jane:
    This is a constraint that states that the boxer with 12 losses is either the fighter with 33 wins or Jane, but not both. So:
    Xor([12Losses == 33Wins, 12Losses == Jane]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of boxer, wins, and losses)
# e.g. if edna == 1 and wins24 == 1 and losses2 == 1, then Edna Easton has 24 wins and 2 losses
edna, irma, jane, sonia = boxers = intvar(1, 4, shape=4)
wins24, wins27, wins30, wins33 = wins = intvar(1, 4, shape=4)
losses2, losses4, losses8, losses12 = losses = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
boxer_to_int = None  # N/A
wins_to_int = {wins24: 24, wins27: 27, wins30: 30, wins33: 33}  # in wins
losses_to_int = {losses2: 2, losses4: 4, losses8: 8, losses12: 12}  # in losses


# Helper functions (for formulating comparison constraints)
def wins_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has diff more wins than var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(wins_to_int[w1] == wins_to_int[w2] + diff)
            for w1 in wins for w2 in wins]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(boxers)
m += AllDifferent(wins)
m += AllDifferent(losses)

# Clue 1: The woman with 2 losses has 3 more wins than the boxer with 8 losses:
m += wins_more_than(losses2, losses8, 3)

# Clue 2: Edna Easton has 6 more wins than Irma:
m += wins_more_than(edna, irma, 6)

# Clue 3: Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses:
m += ((wins33 == sonia) & (wins27 != sonia) & (losses12 != sonia)) | ((wins27 == sonia) & (wins33 != sonia) & (losses12 == sonia))

# Clue 4: The boxer with 12 losses is either the fighter with 33 wins or Jane:
m += Xor([losses12 == wins33, losses12 == jane])

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The person who will publish in January is either the person who has been studying the Cheer culture or Ira.
The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture.
Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette.
Vera will publish 1 month before Luther.

Entities:
months: January, February, March, April
names: Ira, Luther, Vera, Yvette
cultures: Cheer, Garyk, Haleyito, Xozix
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ira == 1, and January == 1, and Cheer == 1, then Ira will publish in January and has been studying the Cheer culture.

### Decision variables:
-   Names of the individuals: Ira, Luther, Vera, Yvette (all different, 1 to 4)
-   Months of publication: January, February, March, April (all different, 1 to 4)
-   Cultures studied: Cheer, Garyk, Haleyito, Xozix (all different, 1 to 4)

### Constraints:
-   The person who will publish in January is either the person who has been studying the Cheer culture or Ira:
    This is a constraint that states that the person publishing in January is either studying the Cheer culture or is Ira, but not both. So:
    Xor([January == Cheer, January == Ira]).

-   The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture:
    For this, we will need to add a constraint for each possible assignment of the individuals studying Xozix and Haleyito cultures, such that the individual studying Xozix culture will publish 1 month before the individual studying Haleyito culture. So, the constraints will be of the form:
    c1 == Xozix and c2 == Haleyito => c1_to_int == c2_to_int - 1, for all c1, c2 in cultures.

-   Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette:
    This is a constraint that states that one of Luther or Yvette will publish in March and the other will be studying the Xozix culture. So:
    (March == Luther and Xozix == Yvette) or (March == Yvette and Xozix == Luther).

-   Vera will publish 1 month before Luther:
    For this, we will need to add a constraint for each possible assignment of the months of publication for Vera and Luther, such that Vera will publish 1 month before Luther. So, the constraints will be of the form:
    m1 == Vera and m2 == Luther => m1_to_int == m2_to_int - 1, for all m1, m2 in months of publication.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ira == 1, and January == 1, and Cheer == 1, then Ira will publish in January and has been studying the Cheer culture.

### Decision variables:
-   Names of the individuals: Ira, Luther, Vera, Yvette (all different, 1 to 4)
-   Months of publication: January, February, March, April (all different, 1 to 4)
-   Cultures studied: Cheer, Garyk, Haleyito, Xozix (all different, 1 to 4)

### Constraints:
-   The person who will publish in January is either the person who has been studying the Cheer culture or Ira:
    This is a constraint that states that the person publishing in January is either studying the Cheer culture or is Ira, but not both. So:
    Xor([January == Cheer, January == Ira]).

-   The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture:
    For this, we will need to add a constraint for each possible assignment of the individuals studying Xozix and Haleyito cultures, such that the individual studying Xozix culture will publish 1 month before the individual studying Haleyito culture. So, the constraints will be of the form:
    c1 == Xozix and c2 == Haleyito => c1_to_int == c2_to_int - 1, for all c1, c2 in cultures.

-   Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette:
    This is a constraint that states that one of Luther or Yvette will publish in March and the other will be studying the Xozix culture. So:
    (March == Luther and Xozix == Yvette) or (March == Yvette and Xozix == Luther).

-   Vera will publish 1 month before Luther:
    For this, we will need to add a constraint for each possible assignment of the months of publication for Vera and Luther, such that Vera will publish 1 month before Luther. So, the constraints will be of the form:
    m1 == Vera and m2 == Luther => m1_to_int == m2_to_int - 1, for all m1, m2 in months of publication.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, month, and culture)
# e.g. if ira == 1 and january == 1 and cheer == 1, then Ira will publish in January and has been studying the Cheer culture
ira, luther, vera, yvette = names = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
cheer, garyk, haleyito, xozix = cultures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
culture_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def published_before_than(var1, var2):
    """
    Formulate the constraint that var1 published before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] < month_to_int[m2])
            for m1 in months for m2 in months]


def published_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 published exactly diff months before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] - diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(months)
m += AllDifferent(cultures)

# Clue 1: The person who will publish in January is either the person who has been studying the Cheer culture or Ira:
m += Xor([january == cheer, january == ira])

# Clue 2: The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture:
m += published_exactly_before_than(xozix, haleyito, 1)

# Clue 3: Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette:
m += ((march == luther) & (xozix == yvette)) | ((march == yvette) & (xozix == luther))

# Clue 4: Vera will publish 1 month before Luther:
m += published_exactly_before_than(vera, luther, 1)

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Francis will depart from Manson.
The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg.
Ira will leave 1 day before the conductor departing from Manson.
The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio.

Entities:
days: June 10, June 11, June 12, June 13
names: Francis, Greg, Ira, Oscar
departures: Buttonwillow, Coulterville, Indio, Manson
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Francis == 1, and June10 == 1, and Buttonwillow == 1, then Francis will depart from Buttonwillow on June 10.

### Decision variables:
-   Names of the individuals: Francis, Greg, Ira, Oscar (all different, 1 to 4)
-   Dates of departure: June10, June11, June12, June13 (all different, 1 to 4)
-   Departure locations: Buttonwillow, Coulterville, Indio, Manson (all different, 1 to 4)

### Constraints:
-   Francis will depart from Manson:
    This is a direct assignment constraint:
    Francis == Manson.

-   The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg:
    This is a constraint that states that the conductor working on June 12 is either from Buttonwillow or is Greg, but not both. So:
    Xor([June12 == Buttonwillow, June12 == Greg]).

-   Ira will leave 1 day before the conductor departing from Manson:
    For this, we will need to add a constraint for each possible assignment of the dates for Ira and the conductor departing from Manson, such that Ira's departure date is 1 less than the conductor's departure date from Manson. So, the constraints will be of the form:
    d1 == Ira and d2 == Manson => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.

-   The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio:
    For this, we will need to add a constraint for each possible assignment of the dates for the person departing from Buttonwillow and the conductor departing from Indio, such that the person departing from Buttonwillow's departure date is 1 less than the conductor's departure date from Indio. So, the constraints will be of the form:
    d1 == Buttonwillow and d2 == Indio => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Francis == 1, and June10 == 1, and Buttonwillow == 1, then Francis will depart from Buttonwillow on June 10.

### Decision variables:
-   Names of the individuals: Francis, Greg, Ira, Oscar (all different, 1 to 4)
-   Dates of departure: June10, June11, June12, June13 (all different, 1 to 4)
-   Departure locations: Buttonwillow, Coulterville, Indio, Manson (all different, 1 to 4)

### Constraints:
-   Francis will depart from Manson:
    This is a direct assignment constraint:
    Francis == Manson.

-   The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg:
    This is a constraint that states that the conductor working on June 12 is either from Buttonwillow or is Greg, but not both. So:
    Xor([June12 == Buttonwillow, June12 == Greg]).

-   Ira will leave 1 day before the conductor departing from Manson:
    For this, we will need to add a constraint for each possible assignment of the dates for Ira and the conductor departing from Manson, such that Ira's departure date is 1 less than the conductor's departure date from Manson. So, the constraints will be of the form:
    d1 == Ira and d2 == Manson => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.

-   The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio:
    For this, we will need to add a constraint for each possible assignment of the dates for the person departing from Buttonwillow and the conductor departing from Indio, such that the person departing from Buttonwillow's departure date is 1 less than the conductor's departure date from Indio. So, the constraints will be of the form:
    d1 == Buttonwillow and d2 == Indio => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of individual, date, and location)
# e.g. if francis == 1 and june10 == 1 and buttonwillow == 1, then Francis will depart from Buttonwillow on June 10
francis, greg, ira, oscar = individuals = intvar(1, 4, shape=4)
june10, june11, june12, june13 = dates = intvar(1, 4, shape=4)
buttonwillow, coulterville, indio, manson = locations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
individual_to_int = None  # N/A
date_to_int = {june10: 10, june11: 11, june12: 12, june13: 13}  # in days
location_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def leaves_before_than(var1, var2):
    """
    Formulate the constraint that var1 leaves before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(date_to_int[d1] < date_to_int[d2])
            for d1 in dates for d2 in dates]


def leaves_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff days before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(date_to_int[d1] == date_to_int[d2] - diff)
            for d1 in dates for d2 in dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(individuals)
m += AllDifferent(dates)
m += AllDifferent(locations)

# Clue 1: Francis will depart from Manson:
m += francis == manson

# Clue 2: The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg:
m += Xor([june12 == buttonwillow, june12 == greg])

# Clue 3: Ira will leave 1 day before the conductor departing from Manson:
m += leaves_exactly_before_than(ira, manson, 1)

# Clue 4: The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio:
m += leaves_exactly_before_than(buttonwillow, indio, 1)

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Vicky Estes used the catamaran.
Debra Decker took 4 fewer days to finish than the sailor in the trimaran.
Wendell Orr finished in 278 days.
The competitor in the schooner took 4 more days to finish than Vicky Estes.

Entities:
days: 270, 274, 278, 282
boat types: catamaran, ketch, schooner, trimaran
sailors: Debra Decker, Gil Baxter, Vicky Estes, Wendell Orr
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if DebraDecker == 1, and 270 == 1, and Catamaran == 1, then Debra Decker took 270 days to finish using the catamaran.

### Decision variables:
-   Names of the sailors: DebraDecker, GilBaxter, VickyEstes, WendellOrr (all different, 1 to 4)
-   Number of days taken to finish: 270, 274, 278, 282 (all different, 1 to 4)
-   Types of boats used: Catamaran, Ketch, Schooner, Trimaran (all different, 1 to 4)

### Constraints:
-   Vicky Estes used the catamaran:
    This is a direct assignment constraint:
    VickyEstes == Catamaran.

-   Debra Decker took 4 fewer days to finish than the sailor in the trimaran:
    For this, we will need to add a constraint for each possible assignment of the number of days taken by Debra Decker and the sailor in the trimaran, such that Debra Decker took 4 fewer days than the sailor in the trimaran. So, the constraints will be of the form:
    d1 == DebraDecker and d2 == Trimaran => d1_to_int == d2_to_int - 4, for all d1, d2 in days.

-   Wendell Orr finished in 278 days:
    This is a direct assignment constraint:
    WendellOrr == 278.

-   The competitor in the schooner took 4 more days to finish than Vicky Estes:
    For this, we will need to add a constraint for each possible assignment of the number of days taken by the competitor in the schooner and Vicky Estes, such that the competitor in the schooner took 4 more days than Vicky Estes. So, the constraints will be of the form:
    d1 == Schooner and d2 == VickyEstes => d1_to_int == d2_to_int + 4, for all d1, d2 in days.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if DebraDecker == 1, and 270 == 1, and Catamaran == 1, then Debra Decker took 270 days to finish using the catamaran.

### Decision variables:
-   Names of the sailors: DebraDecker, GilBaxter, VickyEstes, WendellOrr (all different, 1 to 4)
-   Number of days taken to finish: 270, 274, 278, 282 (all different, 1 to 4)
-   Types of boats used: Catamaran, Ketch, Schooner, Trimaran (all different, 1 to 4)

### Constraints:
-   Vicky Estes used the catamaran:
    This is a direct assignment constraint:
    VickyEstes == Catamaran.

-   Debra Decker took 4 fewer days to finish than the sailor in the trimaran:
    For this, we will need to add a constraint for each possible assignment of the number of days taken by Debra Decker and the sailor in the trimaran, such that Debra Decker took 4 fewer days than the sailor in the trimaran. So, the constraints will be of the form:
    d1 == DebraDecker and d2 == Trimaran => d1_to_int == d2_to_int - 4, for all d1, d2 in days.

-   Wendell Orr finished in 278 days:
    This is a direct assignment constraint:
    WendellOrr == 278.

-   The competitor in the schooner took 4 more days to finish than Vicky Estes:
    For this, we will need to add a constraint for each possible assignment of the number of days taken by the competitor in the schooner and Vicky Estes, such that the competitor in the schooner took 4 more days than Vicky Estes. So, the constraints will be of the form:
    d1 == Schooner and d2 == VickyEstes => d1_to_int == d2_to_int + 4, for all d1, d2 in days.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of sailor, days, and boat type)
# e.g. if debra == 1 and days270 == 1 and catamaran == 1, then Debra Decker took 270 days to finish using the catamaran
debra, gil, vicky, wendell = sailors = intvar(1, 4, shape=4)
days270, days274, days278, days282 = days = intvar(1, 4, shape=4)
catamaran, ketch, schooner, trimaran = boats = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
sailor_to_int = None  # N/A
days_to_int = {days270: 270, days274: 274, days278: 278, days282: 282}  # in days
boat_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def finished_in_days_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 finished in diff fewer days than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(days_to_int[d1] == days_to_int[d2] - diff)
            for d1 in days for d2 in days]


def finished_in_days_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 finished in diff more days than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(days_to_int[d1] == days_to_int[d2] + diff)
            for d1 in days for d2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(sailors)
m += AllDifferent(days)
m += AllDifferent(boats)

# Clue 1: Vicky Estes used the catamaran:
m += vicky == catamaran

# Clue 2: Debra Decker took 4 fewer days to finish than the sailor in the trimaran:
m += finished_in_days_less_than(debra, trimaran, 4)

# Clue 3: Wendell Orr finished in 278 days:
m += wendell == days278

# Clue 4: The competitor in the schooner took 4 more days to finish than Vicky Estes:
m += finished_in_days_more_than(schooner, vicky, 4

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Jorge is either the skydiver who wears the red suit or the jumper who started in 1982.
The skydiver who wears the pink suit started skydiving 1 year before Otis.
The jumper who wears the yellow suit started skydiving sometime after Philip.
The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit.
The jumper who wears the pink suit started skydiving 2 years before Shaun.

Entities:
names: Jorge, Otis, Philip, Shaun
years: 1982, 1983, 1984, 1985
suit colors: lime green, pink, red, yellow
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Jorge == 1, and LimeGreen == 1, and 1982 == 1, then Jorge is the skydiver who wears the lime green suit and started skydiving in 1982.

### Decision variables:
-   Names of the skydivers: Jorge, Otis, Philip, Shaun (all different, 1 to 4)
-   Starting years of skydiving: 1982, 1983, 1984, 1985 (all different, 1 to 4)
-   Suit colors: LimeGreen, Pink, Red, Yellow (all different, 1 to 4)

### Constraints:
-   Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
    This is a constraint that states that Jorge's suit color is either red or Jorge started skydiving in 1982, but not both. So:
    Xor([Jorge == Red, Jorge == 1982]).

-   The skydiver who wears the pink suit started skydiving 1 year before Otis:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Otis, such that the skydiver who wears the pink suit's starting year is 1 less than Otis's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Otis => y1_to_int == y2_to_int - 1, for all y1, y2 in starting years.

-   The jumper who wears the yellow suit started skydiving sometime after Philip:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the yellow suit and Philip, such that the skydiver who wears the yellow suit's starting year is greater than Philip's starting year. So, the constraints will be of the form:
    y1 == Yellow and y2 == Philip => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the lime green suit and the yellow suit, such that the skydiver who wears the lime green suit's starting year is greater than the skydiver who wears the yellow suit's starting year. So, the constraints will be of the form:
    y1 == LimeGreen and y2 == Yellow => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the pink suit started skydiving 2 years before Shaun:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Shaun, such that the skydiver who wears the pink suit's starting year is 2 less than Shaun's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Shaun => y1_to_int == y2_to_int - 2, for all y1, y2 in starting years.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Jorge == 1, and LimeGreen == 1, and 1982 == 1, then Jorge is the skydiver who wears the lime green suit and started skydiving in 1982.

### Decision variables:
-   Names of the skydivers: Jorge, Otis, Philip, Shaun (all different, 1 to 4)
-   Starting years of skydiving: 1982, 1983, 1984, 1985 (all different, 1 to 4)
-   Suit colors: LimeGreen, Pink, Red, Yellow (all different, 1 to 4)

### Constraints:
-   Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
    This is a constraint that states that Jorge's suit color is either red or Jorge started skydiving in 1982, but not both. So:
    Xor([Jorge == Red, Jorge == 1982]).

-   The skydiver who wears the pink suit started skydiving 1 year before Otis:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Otis, such that the skydiver who wears the pink suit's starting year is 1 less than Otis's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Otis => y1_to_int == y2_to_int - 1, for all y1, y2 in starting years.

-   The jumper who wears the yellow suit started skydiving sometime after Philip:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the yellow suit and Philip, such that the skydiver who wears the yellow suit's starting year is greater than Philip's starting year. So, the constraints will be of the form:
    y1 == Yellow and y2 == Philip => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the lime green suit and the yellow suit, such that the skydiver who wears the lime green suit's starting year is greater than the skydiver who wears the yellow suit's starting year. So, the constraints will be of the form:
    y1 == LimeGreen and y2 == Yellow => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the pink suit started skydiving 2 years before Shaun:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Shaun, such that the skydiver who wears the pink suit's starting year is 2 less than Shaun's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Shaun => y1_to_int == y2_to_int - 2, for all y1, y2 in starting years.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of skydiver, starting year, and suit color)
# e.g. if jorge == 1 and lime_green == 1 and 1982 == 1, then Jorge is the skydiver who wears the lime green suit and started in 1982
jorge, otis, philip, shaun = skydivers = intvar(1, 4, shape=4)
year_1982, year_1983, year_1984, year_1985 = starting_years = intvar(1, 4, shape=4)
lime_green, pink, red, yellow = suit_colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
skydiver_to_int = None  # N/A
year_to_int = {year_1982: 1982, year_1983: 1983, year_1984: 1984, year_1985: 1985}  # in years
suit_color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2):
    """
    Formulate the constraint that var1 started after var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(year_to_int[s1] > year_to_int[s2])
            for s1 in starting_years for s2 in starting_years]


def started_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started exactly diff years after var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(year_to_int[s1] == year_to_int[s2] + diff)
            for s1 in starting_years for s2 in starting_years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(skydivers)
m += AllDifferent(starting_years)
m += AllDifferent(suit_colors)

# Clue 1: Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
m += Xor([jorge == red, jorge == year_1982])

# Clue 2: The skydiver who wears the pink suit started skydiving 1 year before Otis:
m += started_exactly_after_than(pink, otis, -1)

# Clue 3: The jumper who wears the yellow suit started skydiving sometime after Philip:
m += started_after_than(yellow, philip)

# Clue 4: The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
m += started_after_than(lime_green, yellow)

# Clue 5: The jumper who wears the pink suit started skydiving 2 years before Shaun:
m += started_exactly_after_than(pink, shaun, -2)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The ambassador with the 9 day visit will leave sometime after Fitzgerald.
Quinn will leave 2 months after Bender.
The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald.
Quinn will leave 1 month before the ambassador with the 7 day visit.

Entities:
diplomats: Bender, Fitzgerald, Owens, Quinn
months: January, February, March, April
durations: 2 day, 3 day, 7 day, 9 day
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bender == 1, and January == 1, and Day2 == 1, then Bender is the diplomat leaving in January with a 2-day visit.

### Decision variables:
-   Names of the diplomats: Bender, Fitzgerald, Owens, Quinn (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Visit durations: Day2, Day3, Day7, Day9 (all different, 1 to 4)

### Constraints:
-   The ambassador with the 9-day visit will leave sometime after Fitzgerald:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the ambassador with the 9-day visit and Fitzgerald, such that the ambassador with the 9-day visit's month of departure is greater than Fitzgerald's month of departure. So, the constraints will be of the form:
    m1 == Day9 and m2 == Fitzgerald => m1_to_int > m2_to_int, for all m1, m2 in months of departure.

-   Quinn will leave 2 months after Bender:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and Bender, such that Quinn's month of departure is 2 more than Bender's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Bender => m1_to_int == m2_to_int + 2, for all m1, m2 in months of departure.

-   The person leaving in January is either the ambassador with the 3-day visit or Fitzgerald:
    This is a constraint that states that the person leaving in January is either the ambassador with the 3-day visit or Fitzgerald, but not both. So:
    Xor([January == Day3, January == Fitzgerald]).

-   Quinn will leave 1 month before the ambassador with the 7-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and the ambassador with the 7-day visit, such that Quinn's month of departure is 1 less than the ambassador with the 7-day visit's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Day7 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bender == 1, and January == 1, and Day2 == 1, then Bender is the diplomat leaving in January with a 2-day visit.

### Decision variables:
-   Names of the diplomats: Bender, Fitzgerald, Owens, Quinn (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Visit durations: Day2, Day3, Day7, Day9 (all different, 1 to 4)

### Constraints:
-   The ambassador with the 9-day visit will leave sometime after Fitzgerald:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the ambassador with the 9-day visit and Fitzgerald, such that the ambassador with the 9-day visit's month of departure is greater than Fitzgerald's month of departure. So, the constraints will be of the form:
    m1 == Day9 and m2 == Fitzgerald => m1_to_int > m2_to_int, for all m1, m2 in months of departure.

-   Quinn will leave 2 months after Bender:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and Bender, such that Quinn's month of departure is 2 more than Bender's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Bender => m1_to_int == m2_to_int + 2, for all m1, m2 in months of departure.

-   The person leaving in January is either the ambassador with the 3-day visit or Fitzgerald:
    This is a constraint that states that the person leaving in January is either the ambassador with the 3-day visit or Fitzgerald, but not both. So:
    Xor([January == Day3, January == Fitzgerald]).

-   Quinn will leave 1 month before the ambassador with the 7-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and the ambassador with the 7-day visit, such that Quinn's month of departure is 1 less than the ambassador with the 7-day visit's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Day7 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diplomat, month, and duration)
# e.g. if bender == 1 and january == 1 and day2 == 1, then Bender will leave in January with a 2-day visit
bender, fitzgerald, owens, quinn = diplomats = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
day2, day3, day7, day9 = durations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diplomat_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
duration_to_int = {day2: 2, day3: 3, day7: 7, day9: 9}  # in days


# Helper functions (for formulating comparison constraints)
def leave_after_than(var1, var2):
    """
    Formulate the constraint that var1 leaves after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def leave_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diplomats)
m += AllDifferent(months)
m += AllDifferent(durations)

# Clue 1: The ambassador with the 9-day visit will leave sometime after Fitzgerald:
m += leave_after_than(day9, fitzgerald)

# Clue 2: Quinn will leave 2 months after Bender:
m += leave_exactly_after_than(quinn, bender, 2)

# Clue 3: The person leaving in January is either the ambassador with the 3-day visit or Fitzgerald:
m += Xor([january == day3, january == fitzgerald])

# Clue 4: Quinn will leave 1 month before the ambassador with the 7-day visit:
m += leave_exactly_after_than(quinn, day7, -1)

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Ultra Hex is Gabe Grant.
Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009.
Peter Powers began sometime before Matt Minkle.
Gabe Grant began 1 year after Wonderman.
The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009 and Matt Minkle.

Entities:
years: 2007, 2008, 2009, 2010
superheroes: Criminal Bane, Deep Shadow, Ultra Hex, Wonderman
names: Gabe Grant, Ivor Ingram, Matt Minkle, Peter Powers
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if GabeGrant == 1, and 2007 == 1, and DeepShadow == 1, then Gabe Grant is Ultra Hex who started in 2007 and is Deep Shadow.

### Decision variables:
-   Years of starting: 2007, 2008, 2009, 2010 (all different, 1 to 4)
-   Superheroes: CriminalBane, DeepShadow, UltraHex, Wonderman (all different, 1 to 4)
-   Names of the heroes: GabeGrant, IvorIngram, MattMinkle, PeterPowers (all different, 1 to 4)

### Constraints:
-   Ultra Hex is Gabe Grant:
    This is a direct assignment constraint:
    UltraHex == GabeGrant.

-   Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009:
    This is a constraint that states that Criminal Bane's starting year is either 2007 or 2009, but not both. So:
    Xor([CriminalBane == 2007, CriminalBane == 2009]).

-   Peter Powers began sometime before Matt Minkle:
    For this, we will need to add a constraint for each possible assignment of the years for Peter Powers and Matt Minkle, such that Peter Powers' starting year is less than Matt Minkle's starting year. So, the constraints will be of the form:
    y1 == PeterPowers and y2 == MattMinkle => y1_to_int < y2_to_int, for all y1, y2 in years.

-   Gabe Grant began 1 year after Wonderman:
    For this, we will need to add a constraint for each possible assignment of the years for Gabe Grant and Wonderman, such that Gabe Grant's starting year is 1 more than Wonderman's starting year. So, the constraints will be of the form:
    y1 == GabeGrant and y2 == Wonderman => y1_to_int == y2_to_int + 1, for all y1, y2 in years.

-   The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009, and Matt Minkle:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([DeepShadow, 2007, 2009, MattMinkle]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if GabeGrant == 1, and 2007 == 1, and DeepShadow == 1, then Gabe Grant is Ultra Hex who started in 2007 and is Deep Shadow.

### Decision variables:
-   Years of starting: 2007, 2008, 2009, 2010 (all different, 1 to 4)
-   Superheroes: CriminalBane, DeepShadow, UltraHex, Wonderman (all different, 1 to 4)
-   Names of the heroes: GabeGrant, IvorIngram, MattMinkle, PeterPowers (all different, 1 to 4)

### Constraints:
-   Ultra Hex is Gabe Grant:
    This is a direct assignment constraint:
    UltraHex == GabeGrant.

-   Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009:
    This is a constraint that states that Criminal Bane's starting year is either 2007 or 2009, but not both. So:
    Xor([CriminalBane == 2007, CriminalBane == 2009]).

-   Peter Powers began sometime before Matt Minkle:
    For this, we will need to add a constraint for each possible assignment of the years for Peter Powers and Matt Minkle, such that Peter Powers' starting year is less than Matt Minkle's starting year. So, the constraints will be of the form:
    y1 == PeterPowers and y2 == MattMinkle => y1_to_int < y2_to_int, for all y1, y2 in years.

-   Gabe Grant began 1 year after Wonderman:
    For this, we will need to add a constraint for each possible assignment of the years for Gabe Grant and Wonderman, such that Gabe Grant's starting year is 1 more than Wonderman's starting year. So, the constraints will be of the form:
    y1 == GabeGrant and y2 == Wonderman => y1_to_int == y2_to_int + 1, for all y1, y2 in years.

-   The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009, and Matt Minkle:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([DeepShadow, 2007, 2009, MattMinkle]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of year, superhero, and name)
# e.g. if 2007 == 1 and deep_shadow == 1 and gabe_grant == 1, then the superhero who started in 2007 is Deep Shadow and is Gabe Grant
year_2007, year_2008, year_2009, year_2010 = years = intvar(1, 4, shape=4)
criminal_bane, deep_shadow, ultra_hex, wonderman = superheroes = intvar(1, 4, shape=4)
gabe_grant, ivor_ingram, matt_minkle, peter_powers = names = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
year_to_int = None  # N/A
superhero_to_int = None  # N/A
name_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_before_than(var1, var2):
    """
    Formulate the constraint that var1 started before var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] < year_to_int[y2])
            for y1 in years for y2 in years]


def started_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started exactly diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(years)
m += AllDifferent(superheroes)
m += AllDifferent(names)

# Clue 1: Ultra Hex is Gabe Grant:
m += ultra_hex == gabe_grant

# Clue 2: Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009:
m += Xor([criminal_bane == year_2007, criminal_bane == year_2009])

# Clue 3: Peter Powers began sometime before Matt Minkle:
m += started_before_than(peter_powers, matt_minkle)

# Clue 4: Gabe Grant began 1 year after Wonderman:
m += started_exactly_after_than(gabe_grant, wonderman, 1)

# Clue 5: The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009, and Matt Minkle:
m += AllDifferent([deep_shadow, year_2007, year_2009, matt_minkle])

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Sancode interview is 1 day after the meeting for the copywriter position.
The Laneplex interview is on August 20th.
The meeting for the copywriter position is 2 days before the meeting for the web developer position.
The Haytouch interview is for the sales rep job.

Entities:
days: August 20th, August 21st, August 22nd, August 23rd
companies: Canway, Haytouch, Laneplex, Sancode
positions: copywriter, janitor, sales rep, web developer
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if August20th == 1, and Laneplex == 1, and copywriter == 1, then the meeting for the copywriter position is on August 20th at Laneplex.

### Decision variables:
-   Days: August20th, August21st, August22nd, August23rd (all different, 1 to 4)
-   Companies: Canway, Haytouch, Laneplex, Sancode (all different, 1 to 4)
-   Positions: copywriter, janitor, sales rep, web developer (all different, 1 to 4)

### Constraints:
-   The Sancode interview is 1 day after the meeting for the copywriter position:
    For this, we will need to add a constraint for each possible assignment of the days for the Sancode interview and the meeting for the copywriter position, such that the Sancode interview day is 1 more than the copywriter meeting day. So, the constraints will be of the form:
    d1 == Sancode and d2 == copywriter => d1_to_int == d2_to_int + 1, for all d1, d2 in days.

-   The Laneplex interview is on August 20th:
    This is a direct assignment constraint:
    Laneplex == August20th.

-   The meeting for the copywriter position is 2 days before the meeting for the web developer position:
    For this, we will need to add a constraint for each possible assignment of the days for the copywriter meeting and the web developer meeting, such that the copywriter meeting day is 2 less than the web developer meeting day. So, the constraints will be of the form:
    d1 == copywriter and d2 == web developer => d1_to_int == d2_to_int - 2, for all d1, d2 in days.

-   The Haytouch interview is for the sales rep job:
    This is a direct assignment constraint:
    Haytouch == sales rep.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if August20th == 1, and Laneplex == 1, and copywriter == 1, then the meeting for the copywriter position is on August 20th at Laneplex.

### Decision variables:
-   Days: August20th, August21st, August22nd, August23rd (all different, 1 to 4)
-   Companies: Canway, Haytouch, Laneplex, Sancode (all different, 1 to 4)
-   Positions: copywriter, janitor, sales rep, web developer (all different, 1 to 4)

### Constraints:
-   The Sancode interview is 1 day after the meeting for the copywriter position:
    For this, we will need to add a constraint for each possible assignment of the days for the Sancode interview and the meeting for the copywriter position, such that the Sancode interview day is 1 more than the copywriter meeting day. So, the constraints will be of the form:
    d1 == Sancode and d2 == copywriter => d1_to_int == d2_to_int + 1, for all d1, d2 in days.

-   The Laneplex interview is on August 20th:
    This is a direct assignment constraint:
    Laneplex == August20th.

-   The meeting for the copywriter position is 2 days before the meeting for the web developer position:
    For this, we will need to add a constraint for each possible assignment of the days for the copywriter meeting and the web developer meeting, such that the copywriter meeting day is 2 less than the web developer meeting day. So, the constraints will be of the form:
    d1 == copywriter and d2 == web developer => d1_to_int == d2_to_int - 2, for all d1, d2 in days.

-   The Haytouch interview is for the sales rep job:
    This is a direct assignment constraint:
    Haytouch == sales rep.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of day, company, and position)
# e.g. if aug20 == 1 and laneplex == 1 and copywriter == 1, then the meeting for the copywriter position is on August 20th at Laneplex
aug20, aug21, aug22, aug23 = days = intvar(1, 4, shape=4)
canway, haytouch, laneplex, sancode = companies = intvar(1, 4, shape=4)
copywriter, janitor, sales_rep, web_developer = positions = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
day_to_int = {aug20: 20, aug21: 21, aug22: 22, aug23: 23}  # in days
company_to_int = None  # N/A
position_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def day_after_than(var1, var2):
    """
    Formulate the constraint that var1 is 1 day after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] == day_to_int[d2] + 1)
            for d1 in days for d2 in days]


def day_before_than(var1, var2):
    """
    Formulate the constraint that var1 is 1 day before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] == day_to_int[d2] - 1)
            for d1 in days for d2 in days]


def day_2_before_than(var1, var2):
    """
    Formulate the constraint that var1 is 2 days before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] == day_to_int[d2] - 2)
            for d1 in days for d2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(days)
m += AllDifferent(companies)
m += AllDifferent(positions)

# Clue 1: The Sancode interview is 1 day after the meeting for the copywriter position:
m += day_after_than(sancode, copywriter)

# Clue 2: The Laneplex interview is on August 20th:
m += laneplex == aug20

# Clue 3: The meeting for the copywriter position is 2 days before the meeting for the web developer position:
m += day_2_before_than(copywriter, web_developer)

# Clue 4: The Haytouch interview is for the sales rep job:
m += haytouch == sales_rep

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The Quince Street project will be headed by Freda Fisher.
Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram.
Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher.
The Aspen Court project starts in May.
The Aspen Court project begins sometime after Dawn Daniels's project.

Entities:
months: April, May, June, July
streets: Aspen Court, Norway Court, Oak Road, Quince Street
managers: Bill Bonner, Dawn Daniels, Freda Fisher, Irma Ingram
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if AspenCourt == 1, and May == 1, and FredaFisher == 1, then the Aspen Court project starts in May and is headed by Freda Fisher.

### Decision variables:
-   Months of project start: April, May, June, July (all different, 1 to 4)
-   Streets of the projects: AspenCourt, NorwayCourt, OakRoad, QuinceStreet (all different, 1 to 4)
-   Project managers: BillBonner, DawnDaniels, FredaFisher, IrmaIngram (all different, 1 to 4)

### Constraints:
-   The Quince Street project will be headed by Freda Fisher:
    This is a direct assignment constraint:
    QuinceStreet == FredaFisher.

-   Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram:
    This is a constraint that states that one of the projects starting in May and the Oak Road project will be headed by Dawn Daniels, and the other by Irma Ingram. So:
    Xor([May == DawnDaniels and OakRoad == IrmaIngram, May == IrmaIngram and OakRoad == DawnDaniels]).

-   Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher:
    This is a constraint that states that one of the projects starting in July and the project starting in April will focus on Oak Road, and the other will be headed by Freda Fisher. So:
    Xor([July == OakRoad and April == FredaFisher, July == FredaFisher and April == OakRoad]).

-   The Aspen Court project starts in May:
    This is a direct assignment constraint:
    AspenCourt == May.

-   The Aspen Court project begins sometime after Dawn Daniels's project:
    For this, we will need to add a constraint for each possible assignment of the months for the Aspen Court project and Dawn Daniels's project, such that the Aspen Court project's start month is greater than Dawn Daniels's project's start month. So, the constraints will be of the form:
    m1 == AspenCourt and m2 == DawnDaniels => m1_to_int > m2_to_int, for all m1, m2 in months.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if AspenCourt == 1, and May == 1, and FredaFisher == 1, then the Aspen Court project starts in May and is headed by Freda Fisher.

### Decision variables:
-   Months of project start: April, May, June, July (all different, 1 to 4)
-   Streets of the projects: AspenCourt, NorwayCourt, OakRoad, QuinceStreet (all different, 1 to 4)
-   Project managers: BillBonner, DawnDaniels, FredaFisher, IrmaIngram (all different, 1 to 4)

### Constraints:
-   The Quince Street project will be headed by Freda Fisher:
    This is a direct assignment constraint:
    QuinceStreet == FredaFisher.

-   Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram:
    This is a constraint that states that one of the projects starting in May and the Oak Road project will be headed by Dawn Daniels, and the other by Irma Ingram. So:
    Xor([May == DawnDaniels and OakRoad == IrmaIngram, May == IrmaIngram and OakRoad == DawnDaniels]).

-   Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher:
    This is a constraint that states that one of the projects starting in July and the project starting in April will focus on Oak Road, and the other will be headed by Freda Fisher. So:
    Xor([July == OakRoad and April == FredaFisher, July == FredaFisher and April == OakRoad]).

-   The Aspen Court project starts in May:
    This is a direct assignment constraint:
    AspenCourt == May.

-   The Aspen Court project begins sometime after Dawn Daniels's project:
    For this, we will need to add a constraint for each possible assignment of the months for the Aspen Court project and Dawn Daniels's project, such that the Aspen Court project's start month is greater than Dawn Daniels's project's start month. So, the constraints will be of the form:
    m1 == AspenCourt and m2 == DawnDaniels => m1_to_int > m2_to_int, for all m1, m2 in months.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, street, and manager)
# e.g. if april == 1 and quince_street == 1 and freda_fisher == 1, then the Quince Street project starts in April and is headed by Freda Fisher
april, may, june, july = months = intvar(1, 4, shape=4)
aspen_court, norway_court, oak_road, quince_street = streets = intvar(1, 4, shape=4)
bill_bonner, dawn_daniels, freda_fisher, irma_ingram = managers = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
month_to_int = {april: 4, may: 5, june: 6, july: 7}  # in months
street_to_int = None  # N/A
manager_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2):
    """
    Formulate the constraint that var1 starts after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(months)
m += AllDifferent(streets)
m += AllDifferent(managers)

# Clue 1: The Quince Street project will be headed by Freda Fisher:
m += quince_street == freda_fisher

# Clue 2: Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram:
m += Xor([may == dawn_daniels and oak_road == irma_ingram, may == irma_ingram and oak_road == dawn_daniels])

# Clue 3: Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher:
m += Xor([july == oak_road and april == freda_fisher, july == freda_fisher and april == oak_road])

# Clue 4: The Aspen Court project starts in May:
m += aspen_court == may

# Clue 5: The Aspen Court project begins sometime after Dawn Daniels's project:
m += starts_after_than(aspen_court, dawn_daniels)

```
True
True
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January.
Sophie will leave sometime before Gwen.
The passenger with the lucky hat, Gwen and Sophie are all different fliers.
Florence will leave 2 months after the passenger with the lucky hat.
The passenger leaving in April is either Gwen or the passenger with the talisman.

Entities:
months: January, February, March, April
fliers: Florence, Gwen, Olive, Sophie
lucky charms: coin, lucky hat, rabbit's foot, talisman
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Florence == 1, and January == 1, and Coin == 1, then Florence will leave in January with a coin as a lucky charm.

### Decision variables:
-   Names of the fliers: Florence, Gwen, Olive, Sophie (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Lucky charms: Coin, LuckyHat, RabbitFoot, Talisman (all different, 1 to 4)

### Constraints:
-   Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January:
    This is a constraint that states that Sophie and Gwen are different fliers, and one will bring a rabbit's foot and the other will leave in January. So:
    AllDifferent([Sophie, Gwen, RabbitFoot, January]).

-   Sophie will leave sometime before Gwen:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Sophie and Gwen, such that Sophie's month of departure is less than Gwen's month of departure. So, the constraints will be of the form:
    m1 == Sophie and m2 == Gwen => m1_to_int < m2_to_int, for all m1, m2 in months of departure.

-   The passenger with the lucky hat, Gwen, and Sophie are all different fliers:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([LuckyHat, Gwen, Sophie]).

-   Florence will leave 2 months after the passenger with the lucky hat:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Florence and the passenger with the lucky hat, such that Florence's month of departure is 2 more than the lucky hat passenger's month of departure. So, the constraints will be of the form:
    m1 == Florence and m2 == LuckyHat => m1_to_int == m2_to_int + 2, for all m1, m2 in months of departure.

-   The passenger leaving in April is either Gwen or the passenger with the talisman:
    This is a constraint that states that the passenger leaving in April is either Gwen or the passenger with the talisman, but not both. So:
    Xor([Gwen == April, Talisman == April]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Florence == 1, and January == 1, and Coin == 1, then Florence will leave in January with a coin as a lucky charm.

### Decision variables:
-   Names of the fliers: Florence, Gwen, Olive, Sophie (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Lucky charms: Coin, LuckyHat, RabbitFoot, Talisman (all different, 1 to 4)

### Constraints:
-   Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January:
    This is a constraint that states that Sophie and Gwen are different fliers, and one will bring a rabbit's foot and the other will leave in January. So:
    AllDifferent([Sophie, Gwen, RabbitFoot, January]).

-   Sophie will leave sometime before Gwen:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Sophie and Gwen, such that Sophie's month of departure is less than Gwen's month of departure. So, the constraints will be of the form:
    m1 == Sophie and m2 == Gwen => m1_to_int < m2_to_int, for all m1, m2 in months of departure.

-   The passenger with the lucky hat, Gwen, and Sophie are all different fliers:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([LuckyHat, Gwen, Sophie]).

-   Florence will leave 2 months after the passenger with the lucky hat:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Florence and the passenger with the lucky hat, such that Florence's month of departure is 2 more than the lucky hat passenger's month of departure. So, the constraints will be of the form:
    m1 == Florence and m2 == LuckyHat => m1_to_int == m2_to_int + 2, for all m1, m2 in months of departure.

-   The passenger leaving in April is either Gwen or the passenger with the talisman:
    This is a constraint that states that the passenger leaving in April is either Gwen or the passenger with the talisman, but not both. So:
    Xor([Gwen == April, Talisman == April]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of flier, month, and lucky charm)
# e.g. if florence == 1 and january == 1 and coin == 1, then Florence will leave in January with a coin as a lucky charm
florence, gwen, olive, sophie = fliers = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
coin, lucky_hat, rabbit_foot, talisman = lucky_charms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
flier_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
lucky_charm_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def left_before_than(var1, var2):
    """
    Formulate the constraint that var1 left before var2.
    """
    return [((f1 == var1) & (f2 == var2)).implies(month_to_int[f1] < month_to_int[f2])
            for f1 in months for f2 in months]


def left_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 left exactly diff months before var2.
    """
    return [((f1 == var1) & (f2 == var2)).implies(month_to_int[f1] == month_to_int[f2] - diff)
            for f1 in months for f2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(fliers)
m += AllDifferent(months)
m += AllDifferent(lucky_charms)

# Clue 1: Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January:
m += AllDifferent([sophie, gwen, rabbit_foot, january])

# Clue 2: Sophie will leave sometime before Gwen:
m += left_before_than(sophie, gwen)

# Clue 3: The passenger with the lucky hat, Gwen, and Sophie are all different fliers:
m += AllDifferent([lucky_hat, gwen, sophie])

# Clue 4: Florence will leave 2 months after the passenger with the lucky hat:
m += left_exactly_before_than(florence, lucky_hat, 2)

# Clue 5: The passenger leaving in April is either Gwen or the passenger with the talisman:
m += Xor([gwen == april, talisman == april])

```
False
False
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Iunsel launched in February.
The Munei is going to Mars.
The Munei launched 1 month after the mission going to Pluto.
Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano.

Entities:
months: January, February, March, April
probes: Ateyin, Chano, Iunsel, Munei
destinations: Ganymede, Mars, Pluto, Uranus
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Iunsel == 1, and February == 1, and Mars == 1, then the Iunsel probe was launched in February to Mars.

### Decision variables:
-   Names of the probes: Ateyin, Chano, Iunsel, Munei (all different, 1 to 4)
-   Months of launch: January, February, March, April (all different, 1 to 4)
-   Destinations of the probes: Ganymede, Mars, Pluto, Uranus (all different, 1 to 4)

### Constraints:
-   The Iunsel launched in February:
    This is a direct assignment constraint:
    Iunsel == February.

-   The Munei is going to Mars:
    This is a direct assignment constraint:
    Munei == Mars.

-   The Munei launched 1 month after the mission going to Pluto:
    For this, we will need to add a constraint for each possible assignment of the months of launch for Munei and the mission going to Pluto, such that Munei's launch month is 1 more than the Pluto mission's launch month. So, the constraints will be of the form:
    m1 == Munei and m2 == Pluto => m1_to_int == m2_to_int + 1, for all m1, m2 in months of launch.

-   Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano:
    This is a constraint that states that one of the missions went to Ganymede and the other to Pluto, one launched in March, and the other is the Chano probe. So:
    (Ganymede == March and Pluto == Chano) or (Ganymede == Chano and Pluto == March).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Iunsel == 1, and February == 1, and Mars == 1, then the Iunsel probe was launched in February to Mars.

### Decision variables:
-   Names of the probes: Ateyin, Chano, Iunsel, Munei (all different, 1 to 4)
-   Months of launch: January, February, March, April (all different, 1 to 4)
-   Destinations of the probes: Ganymede, Mars, Pluto, Uranus (all different, 1 to 4)

### Constraints:
-   The Iunsel launched in February:
    This is a direct assignment constraint:
    Iunsel == February.

-   The Munei is going to Mars:
    This is a direct assignment constraint:
    Munei == Mars.

-   The Munei launched 1 month after the mission going to Pluto:
    For this, we will need to add a constraint for each possible assignment of the months of launch for Munei and the mission going to Pluto, such that Munei's launch month is 1 more than the Pluto mission's launch month. So, the constraints will be of the form:
    m1 == Munei and m2 == Pluto => m1_to_int == m2_to_int + 1, for all m1, m2 in months of launch.

-   Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano:
    This is a constraint that states that one of the missions went to Ganymede and the other to Pluto, one launched in March, and the other is the Chano probe. So:
    (Ganymede == March and Pluto == Chano) or (Ganymede == Chano and Pluto == March).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of probe, month, and destination)
# e.g. if iunsel == 1 and february == 1 and mars == 1, then the Iunsel probe was launched in February to Mars
ateyin, chano, iunsel, munei = probes = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
ganymede, mars, pluto, uranus = destinations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
probe_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
destination_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def launched_after_than(var1, var2):
    """
    Formulate the constraint that var1 launched after var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(month_to_int[p1] > month_to_int[p2])
            for p1 in months for p2 in months]


def launched_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 launched exactly diff months after var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(month_to_int[p1] == month_to_int[p2] + diff)
            for p1 in months for p2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(probes)
m += AllDifferent(months)
m += AllDifferent(destinations)

# Clue 1: The Iunsel launched in February:
m += iunsel == february

# Clue 2: The Munei is going to Mars:
m += munei == mars

# Clue 3: The Munei launched 1 month after the mission going to Pluto:
m += launched_exactly_after_than(munei, pluto, 1)

# Clue 4: Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano:
m += ((ganymede == march) & (pluto == chano)) | ((ganymede == chano) & (pluto == march)

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The blue topaz sold for 10 dollars more than the gem found in the Osborne claim.
The rhodolite went for $820.
The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim.
Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800.

Entities:
prices: $790, $800, $810, $820
gems: aquamarine, blue topaz, rhodolite, tourmaline
claims: Collins, Knox, Osborne, Underwood
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Aquamarine == 1, and Collins == 1, and Price790 == 1, then the aquamarine found in the Collins claim went for $790.

### Decision variables:
-   Prices of the gems: Price790, Price800, Price810, Price820 (all different, 1 to 4)
-   Names of the gems: Aquamarine, BlueTopaz, Rhodolite, Tourmaline (all different, 1 to 4)
-   Claims where the gems were found: Collins, Knox, Osborne, Underwood (all different, 1 to 4)

### Constraints:
-   The blue topaz sold for 10 dollars more than the gem found in the Osborne claim:
    For this, we will need to add a constraint for each possible assignment of prices for the blue topaz and the gem found in the Osborne claim, such that the blue topaz's price is 10 more than the Osborne claim gem's price. So, the constraints will be of the form:
    p1 == BlueTopaz and p2 == Osborne => p1_to_int == p2_to_int + 10, for all p1, p2 in prices.

-   The rhodolite went for $820:
    This is a direct assignment constraint:
    Rhodolite == Price820.

-   The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim:
    This is a constraint that states that the tourmaline's price is either $810 or the gem found in the Underwood claim, but not both. So:
    Xor([Tourmaline == Price810, Tourmaline == Underwood]).

-   Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800:
    This is a constraint that states that one of the gems found in the Collins claim and the aquamarine went for $790, and the other went for $800. So, the constraints will be of the form:
    (Collins == Price790 and Aquamarine == Price800) or (Collins == Price800 and Aquamarine == Price790).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Aquamarine == 1, and Collins == 1, and Price790 == 1, then the aquamarine found in the Collins claim went for $790.

### Decision variables:
-   Prices of the gems: Price790, Price800, Price810, Price820 (all different, 1 to 4)
-   Names of the gems: Aquamarine, BlueTopaz, Rhodolite, Tourmaline (all different, 1 to 4)
-   Claims where the gems were found: Collins, Knox, Osborne, Underwood (all different, 1 to 4)

### Constraints:
-   The blue topaz sold for 10 dollars more than the gem found in the Osborne claim:
    For this, we will need to add a constraint for each possible assignment of prices for the blue topaz and the gem found in the Osborne claim, such that the blue topaz's price is 10 more than the Osborne claim gem's price. So, the constraints will be of the form:
    p1 == BlueTopaz and p2 == Osborne => p1_to_int == p2_to_int + 10, for all p1, p2 in prices.

-   The rhodolite went for $820:
    This is a direct assignment constraint:
    Rhodolite == Price820.

-   The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim:
    This is a constraint that states that the tourmaline's price is either $810 or the gem found in the Underwood claim, but not both. So:
    Xor([Tourmaline == Price810, Tourmaline == Underwood]).

-   Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800:
    This is a constraint that states that one of the gems found in the Collins claim and the aquamarine went for $790, and the other went for $800. So, the constraints will be of the form:
    (Collins == Price790 and Aquamarine == Price800) or (Collins == Price800 and Aquamarine == Price790).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of price, gem, and claim)
# e.g. if price790 == 1 and aquamarine == 1 and collins == 1, then the aquamarine found in the Collins claim went for $790
price790, price800, price810, price820 = prices = intvar(1, 4, shape=4)
aquamarine, blue_topaz, rhodolite, tourmaline = gems = intvar(1, 4, shape=4)
collins, knox, osborne, underwood = claims = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
price_to_int = {price790: 790, price800: 800, price810: 810, price820: 820}  # in dollars
gem_to_int = None  # N/A
claim_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def sold_for_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 sold for diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(prices)
m += AllDifferent(gems)
m += AllDifferent(claims)

# Clue 1: The blue topaz sold for 10 dollars more than the gem found in the Osborne claim:
m += sold_for_more_than(blue_topaz, osborne, 10)

# Clue 2: The rhodolite went for $820:
m += rhodolite == price820

# Clue 3: The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim:
m += Xor([tourmaline == price810, tourmaline == underwood])

# Clue 4: Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800:
m += ((collins == price790) & (aquamarine == price800)) | ((collins == price800) & (aquamarine == price790))

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The facility launching in March is the tokamak reactor.
The reactor launching in April is either the direct drive facility or the z-pinch facility.
Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10.
The Essita CBT will launch in February.
The Haramarui LV will launch 1 month before the fusor reactor.

Entities:
months: January, February, March, April
names: Essita CBT, Haramarui LV, Kuchiwa W10, Rodim-Rexit
types: direct drive, fusor, tokamak, z-pinch
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EssitaCBT == 1, and February == 1, and Tokamak == 1, then Essita CBT is the tokamak reactor launching in February.

### Decision variables:
-   Months of launch: January, February, March, April (all different, 1 to 4)
-   Names of the facilities: EssitaCBT, HaramaruiLV, KuchiwaW10, RodimRexit (all different, 1 to 4)
-   Types of reactors: DirectDrive, Fusor, Tokamak, ZPinch (all different, 1 to 4)

### Constraints:
-   The facility launching in March is the tokamak reactor:
    This is a direct assignment constraint:
    March == Tokamak.

-   The reactor launching in April is either the direct drive facility or the z-pinch facility:
    This is a constraint that states that the reactor launching in April is either the direct drive facility or the z-pinch facility, but not both. So:
    Xor([April == DirectDrive, April == ZPinch]).

-   Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10:
    This is a constraint that states that one of the fusor reactor and the z-pinch facility will launch in February and the other is the Kuchiwa W10. So:
    (Fusor == February and ZPinch == KuchiwaW10) or (Fusor == KuchiwaW10 and ZPinch == February).

-   The Essita CBT will launch in February:
    This is a direct assignment constraint:
    EssitaCBT == February.

-   The Haramarui LV will launch 1 month before the fusor reactor:
    For this, we will need to add a constraint for each possible assignment of the months of launch for Haramarui LV and the fusor reactor, such that Haramarui LV's launch month is 1 less than the fusor reactor's launch month. So, the constraints will be of the form:
    m1 == HaramaruiLV and m2 == Fusor => m1_to_int == m2_to_int - 1, for all m1, m2 in months of launch.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EssitaCBT == 1, and February == 1, and Tokamak == 1, then Essita CBT is the tokamak reactor launching in February.

### Decision variables:
-   Months of launch: January, February, March, April (all different, 1 to 4)
-   Names of the facilities: EssitaCBT, HaramaruiLV, KuchiwaW10, RodimRexit (all different, 1 to 4)
-   Types of reactors: DirectDrive, Fusor, Tokamak, ZPinch (all different, 1 to 4)

### Constraints:
-   The facility launching in March is the tokamak reactor:
    This is a direct assignment constraint:
    March == Tokamak.

-   The reactor launching in April is either the direct drive facility or the z-pinch facility:
    This is a constraint that states that the reactor launching in April is either the direct drive facility or the z-pinch facility, but not both. So:
    Xor([April == DirectDrive, April == ZPinch]).

-   Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10:
    This is a constraint that states that one of the fusor reactor and the z-pinch facility will launch in February and the other is the Kuchiwa W10. So:
    (Fusor == February and ZPinch == KuchiwaW10) or (Fusor == KuchiwaW10 and ZPinch == February).

-   The Essita CBT will launch in February:
    This is a direct assignment constraint:
    EssitaCBT == February.

-   The Haramarui LV will launch 1 month before the fusor reactor:
    For this, we will need to add a constraint for each possible assignment of the months of launch for Haramarui LV and the fusor reactor, such that Haramarui LV's launch month is 1 less than the fusor reactor's launch month. So, the constraints will be of the form:
    m1 == HaramaruiLV and m2 == Fusor => m1_to_int == m2_to_int - 1, for all m1, m2 in months of launch.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, facility, and reactor type)
# e.g. if essita == 1 and february == 1 and tokamak == 1, then Essita CBT is the tokamak reactor launching in February
essita, haramarui, kuchiwa, rodim = names = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
direct_drive, fusor, tokamak, z_pinch = types = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
type_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def launched_after_than(var1, var2):
    """
    Formulate the constraint that var1 launched after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def launched_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 launched exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(months)
m += AllDifferent(types)

# Clue 1: The facility launching in March is the tokamak reactor:
m += march == tokamak

# Clue 2: The reactor launching in April is either the direct drive facility or the z-pinch facility:
m += Xor([april == direct_drive, april == z_pinch])

# Clue 3: Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10:
m += ((fusor == february) & (z_pinch == kuchiwa)) | ((fusor == kuchiwa) & (z_pinch == february))

# Clue 4: The Essita CBT will launch in February:
m += essita == february

# Clue 5: The Haramarui LV will launch 1 month before the fusor reactor:
m += launched_exactly_after_than(haramarui, fusor, -1)

```
False
True
True
Wrong: 7, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan.
Herbert's assignment will involve 25 fewer people than Susan's assignment.
Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday.
Herbert's event is either the event with 50 attendees or the graduation job.

Entities:
people: 50, 75, 100, 125
planners: Herbert, Joel, Susan, Teresa
events: anniversary, birthday, graduation, wedding
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if 50 == 1, and Herbert == 1, and anniversary == 1, then the event with 50 attendees is the anniversary event handled by Herbert.

### Decision variables:
-   Number of people attending: 50, 75, 100, 125 (all different, 1 to 4)
-   Names of the planners: Herbert, Joel, Susan, Teresa (all different, 1 to 4)
-   Types of events: anniversary, birthday, graduation, wedding (all different, 1 to 4)

### Constraints:
-   Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan:
    This is a constraint that states that the anniversary event or the event with 100 attendees is handled by Joel, and the other is handled by Susan. So:
    Xor([anniversary == Joel, anniversary == Susan], [100 == Joel, 100 == Susan]).

-   Herbert's assignment will involve 25 fewer people than Susan's assignment:
    For this, we will need to add a constraint for each possible assignment of the number of people attending for Herbert and Susan, such that Herbert's number of people attending is 25 less than Susan's number of people attending. So, the constraints will be of the form:
    p1 == Herbert and p2 == Susan => p1_to_int == p2_to_int - 25, for all p1, p2 in number of people attending.

-   Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday:
    This is a constraint that states that the assignment with 75 attendees or the assignment with 100 attendees is handled by Susan, and the other is the birthday event. So:
    Xor([75 == Susan, 75 == birthday], [100 == Susan, 100 == birthday]).

-   Herbert's event is either the event with 50 attendees or the graduation job:
    This is a constraint that states that Herbert's event is either the event with 50 attendees or the graduation event, but not both. So:
    Xor([50 == Herbert, 50 == graduation]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if 50 == 1, and Herbert == 1, and anniversary == 1, then the event with 50 attendees is the anniversary event handled by Herbert.

### Decision variables:
-   Number of people attending: 50, 75, 100, 125 (all different, 1 to 4)
-   Names of the planners: Herbert, Joel, Susan, Teresa (all different, 1 to 4)
-   Types of events: anniversary, birthday, graduation, wedding (all different, 1 to 4)

### Constraints:
-   Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan:
    This is a constraint that states that the anniversary event or the event with 100 attendees is handled by Joel, and the other is handled by Susan. So:
    Xor([anniversary == Joel, anniversary == Susan], [100 == Joel, 100 == Susan]).

-   Herbert's assignment will involve 25 fewer people than Susan's assignment:
    For this, we will need to add a constraint for each possible assignment of the number of people attending for Herbert and Susan, such that Herbert's number of people attending is 25 less than Susan's number of people attending. So, the constraints will be of the form:
    p1 == Herbert and p2 == Susan => p1_to_int == p2_to_int - 25, for all p1, p2 in number of people attending.

-   Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday:
    This is a constraint that states that the assignment with 75 attendees or the assignment with 100 attendees is handled by Susan, and the other is the birthday event. So:
    Xor([75 == Susan, 75 == birthday], [100 == Susan, 100 == birthday]).

-   Herbert's event is either the event with 50 attendees or the graduation job:
    This is a constraint that states that Herbert's event is either the event with 50 attendees or the graduation event, but not both. So:
    Xor([50 == Herbert, 50 == graduation]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of people, planner, and event)
# e.g. if 50 == 1 and herbert == 1 and anniversary == 1, then the event with 50 attendees is the anniversary event handled by Herbert
people50, people75, people100, people125 = people = intvar(1, 4, shape=4)
herbert, joel, susan, teresa = planners = intvar(1, 4, shape=4)
anniversary, birthday, graduation, wedding = events = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
people_to_int = {people50: 50, people75: 75, people100: 100, people125: 125}  # number of people
planner_to_int = None  # N/A
event_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def fewer_people_than(var1, var2, diff):
    """
    Formulate the constraint that var1 involves diff fewer people than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(people_to_int[p1] == people_to_int[p2] - diff)
            for p1 in people for p2 in people]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(people)
m += AllDifferent(planners)
m += AllDifferent(events)

# Clue 1: Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan:
m += Xor([anniversary == joel, anniversary == susan], [people100 == joel, people100 == susan])

# Clue 2: Herbert's assignment will involve 25 fewer people than Susan's assignment:
m += fewer_people_than(herbert, susan, 25)

# Clue 3: Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday:
m += Xor([people75 == susan, people75 == birthday], [people100 == susan, people100 == birthday])

# Clue 4: Herbert's event is either the event with 50 attendees or the graduation job:
m += Xor([people50 == herbert, people50 == graduation])

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
D. forcilitis has 500 genes.
B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes.
The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen.
Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus.

Entities:
genes: 250, 500, 750, 1000
bacteria: B. mangeris, D. forcilitis, E. carolinus, P. wellington
doctors: Jordan, Nielsen, Ortiz, Trujillo
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bmangeris == 1, and Ortiz == 1, and Genes750 == 1, then B. mangeris was sequenced by Dr. Ortiz and has 750 genes.

### Decision variables:
-   Names of the bacteria: Bmangeris, Dforcilitis, Ecarolinus, Pwellington (all different, 1 to 4)
-   Number of genes: Genes250, Genes500, Genes750, Genes1000 (all different, 1 to 4)
-   Names of the doctors: Jordan, Nielsen, Ortiz, Trujillo (all different, 1 to 4)

### Constraints:
-   D. forcilitis has 500 genes:
    This is a direct assignment constraint:
    Dforcilitis == Genes500.

-   B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes:
    This is a constraint that states that B. mangeris was either sequenced by Dr. Ortiz or has 750 genes, but not both. So:
    Xor([Bmangeris == Ortiz, Bmangeris == Genes750]).

-   The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen:
    For this, we will need to add a constraint for each possible assignment of the number of genes for the organism sequenced by Dr. Trujillo and the bacteria sequenced by Dr. Nielsen, such that the organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen. So, the constraints will be of the form:
    g1 == Trujillo and g2 == Nielsen => g1_to_int == g2_to_int + 500, for all g1, g2 in number of genes.

-   Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus:
    This is a constraint that states that one of the bacteria sequenced by Dr. Jordan and Dr. Trujillo has 1000 genes and the other is E. carolinus. So:
    (Jordan == Genes1000 and Trujillo == Ecarolinus) or (Jordan == Ecarolinus and Trujillo == Genes1000).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bmangeris == 1, and Ortiz == 1, and Genes750 == 1, then B. mangeris was sequenced by Dr. Ortiz and has 750 genes.

### Decision variables:
-   Names of the bacteria: Bmangeris, Dforcilitis, Ecarolinus, Pwellington (all different, 1 to 4)
-   Number of genes: Genes250, Genes500, Genes750, Genes1000 (all different, 1 to 4)
-   Names of the doctors: Jordan, Nielsen, Ortiz, Trujillo (all different, 1 to 4)

### Constraints:
-   D. forcilitis has 500 genes:
    This is a direct assignment constraint:
    Dforcilitis == Genes500.

-   B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes:
    This is a constraint that states that B. mangeris was either sequenced by Dr. Ortiz or has 750 genes, but not both. So:
    Xor([Bmangeris == Ortiz, Bmangeris == Genes750]).

-   The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen:
    For this, we will need to add a constraint for each possible assignment of the number of genes for the organism sequenced by Dr. Trujillo and the bacteria sequenced by Dr. Nielsen, such that the organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen. So, the constraints will be of the form:
    g1 == Trujillo and g2 == Nielsen => g1_to_int == g2_to_int + 500, for all g1, g2 in number of genes.

-   Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus:
    This is a constraint that states that one of the bacteria sequenced by Dr. Jordan and Dr. Trujillo has 1000 genes and the other is E. carolinus. So:
    (Jordan == Genes1000 and Trujillo == Ecarolinus) or (Jordan == Ecarolinus and Trujillo == Genes1000).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of bacteria, genes, and doctor)
# e.g. if bmangeris == 1 and ortiz == 1 and genes750 == 1, then B. mangeris was sequenced by Dr. Ortiz and has 750 genes
bmangeris, dforcilitis, ecarolinus, pwellington = bacteria = intvar(1, 4, shape=4)
genes250, genes500, genes750, genes1000 = genes = intvar(1, 4, shape=4)
jordan, nielsen, ortiz, trujillo = doctors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
bacteria_to_int = None  # N/A
genes_to_int = {genes250: 250, genes500: 500, genes750: 750, genes1000: 1000}  # in number of genes
doctor_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def has_more_genes(var1, var2, diff):
    """
    Formulate the constraint that var1 has diff more genes than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(genes_to_int[g1] == genes_to_int[g2] + diff)
            for g1 in genes for g2 in genes]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(bacteria)
m += AllDifferent(genes)
m += AllDifferent(doctors)

# Clue 1: D. forcilitis has 500 genes:
m += dforcilitis == genes500

# Clue 2: B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes:
m += Xor([bmangeris == ortiz, bmangeris == genes750])

# Clue 3: The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen:
m += has_more_genes(trujillo, nielsen, 500)

# Clue 4: Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus:
m += ((jordan == genes1000) & (trujillo == ecarolinus)) | ((jordan == ecarolinus) & (trujillo == genes1000))

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The mountain that is 210 feet tall was climbed by Leonard Lara.
Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall.
Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall.
Mt. York was climbed by Kermit Kramer.

Entities:
heights: 210, 340, 470, 600
mountains: Mt. Brewer, Mt. Gillespie, Mt. Quinn, Mt. York
climbers: Ben Beasley, Eddie English, Kermit Kramer, Leonard Lara
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if LeonardLara == 1, and MtBrewer == 1, and Height210 == 1, then Leonard Lara climbed Mt. Brewer, which is 210 feet tall.

### Decision variables:
-   Names of the climbers: BenBeasley, EddieEnglish, KermitKramer, LeonardLara (all different, 1 to 4)
-   Heights of the mountains: 210, 340, 470, 600 (all different, 1 to 4)
-   Names of the mountains: MtBrewer, MtGillespie, MtQuinn, MtYork (all different, 1 to 4)

### Constraints:
-   The mountain that is 210 feet tall was climbed by Leonard Lara:
    This is a direct assignment constraint:
    LeonardLara == Height210.

-   Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall:
    This is a constraint that states that Mt. Brewer and Mt. Quinn are different mountains, one of them was climbed by Ben Beasley, and the other is 470 feet tall. So:
    AllDifferent([MtBrewer, MtQuinn]),
    (BenBeasley == MtBrewer and MtQuinn == Height470) or (BenBeasley == MtQuinn and MtBrewer == Height470).

-   Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall:
    This is a constraint that states that Mt. Brewer is either climbed by Leonard Lara or is 600 feet tall, but not both. So:
    Xor([MtBrewer == LeonardLara, MtBrewer == Height600]).

-   Mt. York was climbed by Kermit Kramer:
    This is a direct assignment constraint:
    KermitKramer == MtYork.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if LeonardLara == 1, and MtBrewer == 1, and Height210 == 1, then Leonard Lara climbed Mt. Brewer, which is 210 feet tall.

### Decision variables:
-   Names of the climbers: BenBeasley, EddieEnglish, KermitKramer, LeonardLara (all different, 1 to 4)
-   Heights of the mountains: 210, 340, 470, 600 (all different, 1 to 4)
-   Names of the mountains: MtBrewer, MtGillespie, MtQuinn, MtYork (all different, 1 to 4)

### Constraints:
-   The mountain that is 210 feet tall was climbed by Leonard Lara:
    This is a direct assignment constraint:
    LeonardLara == Height210.

-   Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall:
    This is a constraint that states that Mt. Brewer and Mt. Quinn are different mountains, one of them was climbed by Ben Beasley, and the other is 470 feet tall. So:
    AllDifferent([MtBrewer, MtQuinn]),
    (BenBeasley == MtBrewer and MtQuinn == Height470) or (BenBeasley == MtQuinn and MtBrewer == Height470).

-   Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall:
    This is a constraint that states that Mt. Brewer is either climbed by Leonard Lara or is 600 feet tall, but not both. So:
    Xor([MtBrewer == LeonardLara, MtBrewer == Height600]).

-   Mt. York was climbed by Kermit Kramer:
    This is a direct assignment constraint:
    KermitKramer == MtYork.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of climber, mountain, and height)
# e.g. if ben == 1 and mt_brewer == 1 and height_210 == 1, then Ben Beasley climbed Mt. Brewer, which is 210 feet tall
ben, eddie, kermit, leonard = climbers = intvar(1, 4, shape=4)
height_210, height_340, height_470, height_600 = heights = intvar(1, 4, shape=4)
mt_brewer, mt_gillespie, mt_quinn, mt_york = mountains = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
climber_to_int = None  # N/A
height_to_int = {height_210: 210, height_340: 340, height_470: 470, height_600: 600}  # in feet
mountain_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def climbed_by(var1, var2):
    """
    Formulate the constraint that var1 climbed by var2.
    """
    return [((c1 == var1) & (c2 == var2))
            for c1 in climbers for c2 in climbers]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(climbers)
m += AllDifferent(heights)
m += AllDifferent(mountains)

# Clue 1: The mountain that is 210 feet tall was climbed by Leonard Lara:
m += leonard == height_210

# Clue 2: Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall:
m += AllDifferent([mt_brewer, mt_quinn])
m += ((ben == mt_brewer) & (mt_quinn == height_470)) | ((ben == mt_quinn) & (mt_brewer == height_470))

# Clue 3: Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall:
m += Xor([mt_brewer == leonard, mt_brewer == height_600])

# Clue 4: Mt. York was climbed by Kermit Kramer:
m += kermit == mt_york

```
True
True
True
Wrong: 2, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Opie Oliver's card came out in 2012.
The piece that sold for $175 came out in 1999.
Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275.
Neddy Norris's item sold for 50 dollars more than the 1987 card.

Entities:
prices: $125, $175, $225, $275
players: Finn Freeman, Mike Morales, Neddy Norris, Opie Oliver
years: 1974, 1987, 1999, 2012
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if OpieOliver == 1, and Year2012 == 1, and Price125 == 1, then Opie Oliver's card came out in 2012 and sold for $125.

### Decision variables:
-   Names of the players: FinnFreeman, MikeMorales, NeddyNorris, OpieOliver (all different, 1 to 4)
-   Years of the items: Year1974, Year1987, Year1999, Year2012 (all different, 1 to 4)
-   Prices of the items: Price125, Price175, Price225, Price275 (all different, 1 to 4)

### Constraints:
-   Opie Oliver's card came out in 2012:
    This is a direct assignment constraint:
    OpieOliver == Year2012.

-   The piece that sold for $175 came out in 1999:
    This is a direct assignment constraint:
    Price175 == Year1999.

-   Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275:
    This is a constraint that states that one of the items from 2012 and 1987 is associated with Mike Morales and the other sold for $275. So, we can represent this as:
    (Year2012 == MikeMorales and Price275 == Year1987) or (Year1987 == MikeMorales and Price275 == Year2012).

-   Neddy Norris's item sold for 50 dollars more than the 1987 card:
    For this, we will need to add a constraint for each possible assignment of the prices for Neddy Norris's item and the 1987 card, such that Neddy Norris's item price is $50 more than the 1987 card's price. So, the constraints will be of the form:
    p1 == NeddyNorris and p2 == Year1987 => p1_to_int == p2_to_int + 50, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if OpieOliver == 1, and Year2012 == 1, and Price125 == 1, then Opie Oliver's card came out in 2012 and sold for $125.

### Decision variables:
-   Names of the players: FinnFreeman, MikeMorales, NeddyNorris, OpieOliver (all different, 1 to 4)
-   Years of the items: Year1974, Year1987, Year1999, Year2012 (all different, 1 to 4)
-   Prices of the items: Price125, Price175, Price225, Price275 (all different, 1 to 4)

### Constraints:
-   Opie Oliver's card came out in 2012:
    This is a direct assignment constraint:
    OpieOliver == Year2012.

-   The piece that sold for $175 came out in 1999:
    This is a direct assignment constraint:
    Price175 == Year1999.

-   Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275:
    This is a constraint that states that one of the items from 2012 and 1987 is associated with Mike Morales and the other sold for $275. So, we can represent this as:
    (Year2012 == MikeMorales and Price275 == Year1987) or (Year1987 == MikeMorales and Price275 == Year2012).

-   Neddy Norris's item sold for 50 dollars more than the 1987 card:
    For this, we will need to add a constraint for each possible assignment of the prices for Neddy Norris's item and the 1987 card, such that Neddy Norris's item price is $50 more than the 1987 card's price. So, the constraints will be of the form:
    p1 == NeddyNorris and p2 == Year1987 => p1_to_int == p2_to_int + 50, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, year, and price)
# e.g. if finn == 1 and year1974 == 1 and price125 == 1, then Finn Freeman's item came out in 1974 and sold for $125
finn, mike, neddy, opie = players = intvar(1, 4, shape=4)
year1974, year1987, year1999, year2012 = years = intvar(1, 4, shape=4)
price125, price175, price225, price275 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
year_to_int = {year1974: 1974, year1987: 1987, year1999: 1999, year2012: 2012}  # in years
price_to_int = {price125: 125, price175: 175, price225: 225, price275: 275}  # in dollars


# Helper functions (for formulating comparison constraints)
def sold_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 sold for diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(years)
m += AllDifferent(prices)

# Clue 1: Opie Oliver's card came out in 2012:
m += opie == year2012

# Clue 2: The piece that sold for $175 came out in 1999:
m += price175 == year1999

# Clue 3: Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275:
m += ((year2012 == mike) & (price275 == year1987)) | ((year1987 == mike) & (price275 == year2012))

# Clue 4: Neddy Norris's item sold for 50 dollars more than the 1987 card:
m += sold_more_than(neddy, year1987, 50)

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili.
Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie.
Karl scored 7 more points than the person who made the lemon snapper.

Entities:
scores: 42, 49, 56, 63
chefs: Karl, Nelson, Peggy, Rosalie
dishes: cajun chili, cashew tofu, lemon snapper, smoked pork
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Karl == 1, and 42 == 1, and CajunChili == 1, then Karl scored 42 points and made the cajun chili.

### Decision variables:
-   Scores: 42, 49, 56, 63 (all different, 1 to 4)
-   Chefs: Karl, Nelson, Peggy, Rosalie (all different, 1 to 4)
-   Dishes: CajunChili, CashewTofu, LemonSnapper, SmokedPork (all different, 1 to 4)

### Constraints:
-   Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili:
    This is a constraint that states that Nelson and the cook who scored 63 points made different dishes (lemon snapper and cajun chili). So, we need to add constraints to ensure this:
    (Nelson == LemonSnapper and Cook63 == CajunChili) or (Nelson == CajunChili and Cook63 == LemonSnapper).

-   Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie:
    This is a constraint that states that the chef who scored 42 points made cashew tofu and the cook who scored 63 points was Rosalie, or vice versa. So, we need to add constraints to ensure this:
    (Chef42 == CashewTofu and Cook63 == Rosalie) or (Chef42 == Rosalie and Cook63 == CashewTofu).

-   Karl scored 7 more points than the person who made the lemon snapper:
    For this, we will need to add a constraint for each possible assignment of scores for Karl and the person who made the lemon snapper, such that Karl's score is 7 more than the lemon snapper maker's score. So, the constraints will be of the form:
    s1 == Karl and s2 == LemonSnapper => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Karl == 1, and 42 == 1, and CajunChili == 1, then Karl scored 42 points and made the cajun chili.

### Decision variables:
-   Scores: 42, 49, 56, 63 (all different, 1 to 4)
-   Chefs: Karl, Nelson, Peggy, Rosalie (all different, 1 to 4)
-   Dishes: CajunChili, CashewTofu, LemonSnapper, SmokedPork (all different, 1 to 4)

### Constraints:
-   Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili:
    This is a constraint that states that Nelson and the cook who scored 63 points made different dishes (lemon snapper and cajun chili). So, we need to add constraints to ensure this:
    (Nelson == LemonSnapper and Cook63 == CajunChili) or (Nelson == CajunChili and Cook63 == LemonSnapper).

-   Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie:
    This is a constraint that states that the chef who scored 42 points made cashew tofu and the cook who scored 63 points was Rosalie, or vice versa. So, we need to add constraints to ensure this:
    (Chef42 == CashewTofu and Cook63 == Rosalie) or (Chef42 == Rosalie and Cook63 == CashewTofu).

-   Karl scored 7 more points than the person who made the lemon snapper:
    For this, we will need to add a constraint for each possible assignment of scores for Karl and the person who made the lemon snapper, such that Karl's score is 7 more than the lemon snapper maker's score. So, the constraints will be of the form:
    s1 == Karl and s2 == LemonSnapper => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of score, chef, and dish)
# e.g. if karl == 1 and forty_two == 1 and cajun_chili == 1, then Karl scored 42 points and made the cajun chili
karl, nelson, peggy, rosalie = chefs = intvar(1, 4, shape=4)
forty_two, forty_nine, fifty_six, sixty_three = scores = intvar(1, 4, shape=4)
cajun_chili, cashew_tofu, lemon_snapper, smoked_pork = dishes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
chef_to_int = None  # N/A
score_to_int = {forty_two: 42, forty_nine: 49, fifty_six: 56, sixty_three: 63}  # in points
dish_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def made_different_dishes(var1, var2, dish1, dish2):
    """
    Formulate the constraint that var1 and var2 made different dishes.
    """
    return [(var1 == dish1 and var2 == dish2) | (var1 == dish2 and var2 == dish1)
            for dish1 in dishes for dish2 in dishes]


def made_different_people(var1, var2, person1, person2):
    """
    Formulate the constraint that var1 and var2 were made by different people.
    """
    return [(var1 == person1 and var2 == person2) | (var1 == person2 and var2 == person1)
            for person1 in chefs for person2 in chefs]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(chefs)
m += AllDifferent(scores)
m += AllDifferent(dishes)

# Clue 1: Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili:
m += made_different_dishes(nelson, sixty_three, lemon_snapper, cajun_chili)

# Clue 2: Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie:
m += made_different_people(forty_two, sixty_three, cashew_tofu, rosalie)

# Clue 3: Karl scored 7 more points than the person who made the lemon snapper:
m += [(s1 == karl and s2 == lemon_snapper).implies(score_to_int[s1] == score_to_int[s2] + 7)
      for s1 in scores for s2 in scores]

```
False
False
False
Wrong: 3, Total: 6
---------------------------------------------------------------------------------------------

Clues:
Alejandro's purchase cost less than Irma's purchase.
The insect that sold for $90 was either the atlas butterfly or the emperor butterfly.
The peacock butterfly cost more than Irma's purchase.
Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45.
The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45 and the butterfly that sold for $90.

Entities:
prices: $45, $60, $75, $90
winners: Alejandro, Faye, Irma, Phillip
butterflies: atlas, emperor, grayling, peacock
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Alejandro == 1, and Price45 == 1, and Atlas == 1, then Alejandro's purchase was the atlas butterfly that sold for $45.

### Decision variables:
-   Names of the winners: Alejandro, Faye, Irma, Phillip (all different, 1 to 4)
-   Prices of the purchases: Price45, Price60, Price75, Price90 (all different, 1 to 4)
-   Types of butterflies: Atlas, Emperor, Grayling, Peacock (all different, 1 to 4)

### Constraints:
-   Alejandro's purchase cost less than Irma's purchase:
    For this, we will need to add a constraint for each possible assignment of prices for Alejandro and Irma's purchases, such that Alejandro's purchase price is less than Irma's purchase price. So, the constraints will be of the form:
    p1 == Alejandro and p2 == Irma => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The insect that sold for $90 was either the atlas butterfly or the emperor butterfly:
    This is a constraint that states that the butterfly that sold for $90 is either the atlas butterfly or the emperor butterfly, but not both. So:
    Xor([Atlas == Price90, Emperor == Price90]).

-   The peacock butterfly cost more than Irma's purchase:
    For this, we will need to add a constraint for each possible assignment of prices for the peacock butterfly and Irma's purchase, such that the peacock butterfly's price is greater than Irma's purchase price. So, the constraints will be of the form:
    p1 == Peacock and p2 == Irma => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45:
    This is a constraint that states that one of Alejandro's purchase and Irma's purchase was the emperor butterfly and the other sold for $45. So:
    (Alejandro == Emperor and Irma == Price45) or (Alejandro == Price45 and Irma == Emperor).

-   The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45, and the butterfly that sold for $90:
    This is a constraint that states that each butterfly corresponds to one of the given prices. So, we will have direct assignment constraints for each butterfly and price combination.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Alejandro == 1, and Price45 == 1, and Atlas == 1, then Alejandro's purchase was the atlas butterfly that sold for $45.

### Decision variables:
-   Names of the winners: Alejandro, Faye, Irma, Phillip (all different, 1 to 4)
-   Prices of the purchases: Price45, Price60, Price75, Price90 (all different, 1 to 4)
-   Types of butterflies: Atlas, Emperor, Grayling, Peacock (all different, 1 to 4)

### Constraints:
-   Alejandro's purchase cost less than Irma's purchase:
    For this, we will need to add a constraint for each possible assignment of prices for Alejandro and Irma's purchases, such that Alejandro's purchase price is less than Irma's purchase price. So, the constraints will be of the form:
    p1 == Alejandro and p2 == Irma => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The insect that sold for $90 was either the atlas butterfly or the emperor butterfly:
    This is a constraint that states that the butterfly that sold for $90 is either the atlas butterfly or the emperor butterfly, but not both. So:
    Xor([Atlas == Price90, Emperor == Price90]).

-   The peacock butterfly cost more than Irma's purchase:
    For this, we will need to add a constraint for each possible assignment of prices for the peacock butterfly and Irma's purchase, such that the peacock butterfly's price is greater than Irma's purchase price. So, the constraints will be of the form:
    p1 == Peacock and p2 == Irma => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45:
    This is a constraint that states that one of Alejandro's purchase and Irma's purchase was the emperor butterfly and the other sold for $45. So:
    (Alejandro == Emperor and Irma == Price45) or (Alejandro == Price45 and Irma == Emperor).

-   The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45, and the butterfly that sold for $90:
    This is a constraint that states that each butterfly corresponds to one of the given prices. So, we will have direct assignment constraints for each butterfly and price combination.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of winner, price, and butterfly)
# e.g. if alejandro == 1 and price45 == 1 and atlas == 1, then Alejandro's purchase was the atlas butterfly that sold for $45
alejandro, faye, irma, phillip = winners = intvar(1, 4, shape=4)
price45, price60, price75, price90 = prices = intvar(1, 4, shape=4)
atlas, emperor, grayling, peacock = butterflies = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
winner_to_int = None  # N/A
price_to_int = {price45: 45, price60: 60, price75: 75, price90: 90}  # in dollars
butterfly_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def cost_less_than(var1, var2):
    """
    Formulate the constraint that var1 cost less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(winners)
m += AllDifferent(prices)
m += AllDifferent(butterflies)

# Clue 1: Alejandro's purchase cost less than Irma's purchase:
m += cost_less_than(alejandro, irma)

# Clue 2: The insect that sold for $90 was either the atlas butterfly or the emperor butterfly:
m += Xor([atlas == price90, emperor == price90])

# Clue 3: The peacock butterfly cost more than Irma's purchase:
m += cost_less_than(irma, peacock)

# Clue 4: Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45:
m += ((alejandro == emperor) & (irma == price45)) | ((alejandro == price45) & (irma == emperor))

# Clue 5: The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45, and the butterfly that sold for $90:
m += phillip == price60
m += grayling == price60
m += grayling == price45
m += grayling == price90

```
False
False
False
Wrong: 5, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The athlete who traveled for 195 days started from Pescadero.
Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay .
Hilda finished in 217 days .
Walter finished 11 days before the athlete who started from Cayucos.

Entities:
durations: 184 days, 195 days, 206 days, 217 days
rowers: Antonio, Dana, Hilda, Walter
start points: Bodega Bay, Cayucos, Pescadero, Pismo Beach
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Antonio == 1, and 184Days == 1, and BodegaBay == 1, then Antonio traveled for 184 days starting from Bodega Bay.

### Decision variables:
-   Durations of travel: 184 days, 195 days, 206 days, 217 days (all different, 1 to 4)
-   Names of the rowers: Antonio, Dana, Hilda, Walter (all different, 1 to 4)
-   Starting points: Bodega Bay, Cayucos, Pescadero, Pismo Beach (all different, 1 to 4)

### Constraints:
-   The athlete who traveled for 195 days started from Pescadero:
    This is a direct assignment constraint:
    195Days == Pescadero.

-   Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay:
    This is a constraint that states that Dana and the athlete who traveled for 184 days started from different places, Cayucos and Bodega Bay. So:
    Xor([Dana == Cayucos, 184Days == BodegaBay]).

-   Hilda finished in 217 days:
    This is a direct assignment constraint:
    Hilda == 217Days.

-   Walter finished 11 days before the athlete who started from Cayucos:
    For this, we will need to add a constraint for each possible assignment of durations for Walter and the athlete who started from Cayucos, such that Walter's duration is 11 less than the Cayucos athlete's duration. So, the constraints will be of the form:
    d1 == Walter and d2 == Cayucos => d1_to_int == d2_to_int - 11, for all d1, d2 in durations.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Antonio == 1, and 184Days == 1, and BodegaBay == 1, then Antonio traveled for 184 days starting from Bodega Bay.

### Decision variables:
-   Durations of travel: 184 days, 195 days, 206 days, 217 days (all different, 1 to 4)
-   Names of the rowers: Antonio, Dana, Hilda, Walter (all different, 1 to 4)
-   Starting points: Bodega Bay, Cayucos, Pescadero, Pismo Beach (all different, 1 to 4)

### Constraints:
-   The athlete who traveled for 195 days started from Pescadero:
    This is a direct assignment constraint:
    195Days == Pescadero.

-   Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay:
    This is a constraint that states that Dana and the athlete who traveled for 184 days started from different places, Cayucos and Bodega Bay. So:
    Xor([Dana == Cayucos, 184Days == BodegaBay]).

-   Hilda finished in 217 days:
    This is a direct assignment constraint:
    Hilda == 217Days.

-   Walter finished 11 days before the athlete who started from Cayucos:
    For this, we will need to add a constraint for each possible assignment of durations for Walter and the athlete who started from Cayucos, such that Walter's duration is 11 less than the Cayucos athlete's duration. So, the constraints will be of the form:
    d1 == Walter and d2 == Cayucos => d1_to_int == d2_to_int - 11, for all d1, d2 in durations.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of duration, rower, and start point)
# e.g. if antonio == 1 and days184 == 1 and bodega_bay == 1, then Antonio traveled for 184 days starting from Bodega Bay
antonio, dana, hilda, walter = rowers = intvar(1, 4, shape=4)
days184, days195, days206, days217 = durations = intvar(1, 4, shape=4)
bodega_bay, cayucos, pescadero, pismo_beach = start_points = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
rower_to_int = None  # N/A
duration_to_int = {days184: 184, days195: 195, days206: 206, days217: 217}  # in days
start_point_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2):
    """
    Formulate the constraint that var1 started after var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(duration_to_int[s1] > duration_to_int[s2])
            for s1 in durations for s2 in durations]


def started_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started exactly diff days after var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(duration_to_int[s1] == duration_to_int[s2] + diff)
            for s1 in durations for s2 in durations]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(rowers)
m += AllDifferent(durations)
m += AllDifferent(start_points)

# Clue 1: The athlete who traveled for 195 days started from Pescadero:
m += days195 == pescadero

# Clue 2: Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay:
m += Xor([dana == cayucos, days184 == bodega_bay])

# Clue 3: Hilda finished in 217 days:
m += hilda == days217

# Clue 4: Walter finished 11 days before the athlete who started from Cayucos:
m += started_exactly_after_than(walter, cayucos, -11)

```
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The movie that grossed 5 million was directed by Kenneth Key.
Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson.
The film directed by Kenneth Key made 3 million less than Amerigo.
Fast and Dead was directed by Kenneth Key.
Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million.

Entities:
earnings: 2 million, 5 million, 8 million, 11 million
movies: Amerigo, Fast and Dead, Let Me Out, What a World
directors: Jim Johnson, Kenneth Key, Linda Lynch, Micah Moreno
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Amerigo == 1, and 2Million == 1, and JimJohnson == 1, then Amerigo made 2 million and was directed by Jim Johnson.

### Decision variables:
-   Earnings of the movies: 2Million, 5Million, 8Million, 11Million (all different, 1 to 4)
-   Names of the movies: Amerigo, FastAndDead, LetMeOut, WhatAWorld (all different, 1 to 4)
-   Directors of the movies: JimJohnson, KennethKey, LindaLynch, MicahMoreno (all different, 1 to 4)

### Constraints:
-   The movie that grossed 5 million was directed by Kenneth Key:
    This is a direct assignment constraint:
    5Million == KennethKey.

-   Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson:
    This is a constraint that states that one of the movies made 2 million and was directed by Jim Johnson, and the other movie was not directed by Jim Johnson. So:
    Xor([WhatAWorld == 2Million and Amerigo == JimJohnson, WhatAWorld == JimJohnson and Amerigo == 2Million]).

-   The film directed by Kenneth Key made 3 million less than Amerigo:
    For this, we will need to add a constraint for each possible assignment of earnings for the movie directed by Kenneth Key and Amerigo, such that the earnings of Kenneth Key's movie is 3 less than Amerigo's earnings. So, the constraints will be of the form:
    e1 == KennethKey and e2 == Amerigo => e1_to_int == e2_to_int - 3, for all e1, e2 in earnings.

-   Fast and Dead was directed by Kenneth Key:
    This is a direct assignment constraint:
    FastAndDead == KennethKey.

-   Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million:
    This is a constraint that states that Let Me Out is either directed by Linda Lynch or made 5 million, but not both. So:
    Xor([LetMeOut == LindaLynch, LetMeOut == 5Million]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Amerigo == 1, and 2Million == 1, and JimJohnson == 1, then Amerigo made 2 million and was directed by Jim Johnson.

### Decision variables:
-   Earnings of the movies: 2Million, 5Million, 8Million, 11Million (all different, 1 to 4)
-   Names of the movies: Amerigo, FastAndDead, LetMeOut, WhatAWorld (all different, 1 to 4)
-   Directors of the movies: JimJohnson, KennethKey, LindaLynch, MicahMoreno (all different, 1 to 4)

### Constraints:
-   The movie that grossed 5 million was directed by Kenneth Key:
    This is a direct assignment constraint:
    5Million == KennethKey.

-   Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson:
    This is a constraint that states that one of the movies made 2 million and was directed by Jim Johnson, and the other movie was not directed by Jim Johnson. So:
    Xor([WhatAWorld == 2Million and Amerigo == JimJohnson, WhatAWorld == JimJohnson and Amerigo == 2Million]).

-   The film directed by Kenneth Key made 3 million less than Amerigo:
    For this, we will need to add a constraint for each possible assignment of earnings for the movie directed by Kenneth Key and Amerigo, such that the earnings of Kenneth Key's movie is 3 less than Amerigo's earnings. So, the constraints will be of the form:
    e1 == KennethKey and e2 == Amerigo => e1_to_int == e2_to_int - 3, for all e1, e2 in earnings.

-   Fast and Dead was directed by Kenneth Key:
    This is a direct assignment constraint:
    FastAndDead == KennethKey.

-   Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million:
    This is a constraint that states that Let Me Out is either directed by Linda Lynch or made 5 million, but not both. So:
    Xor([LetMeOut == LindaLynch, LetMeOut == 5Million]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of earnings, movie, and director)
# e.g. if two_million == 1 and amerigo == 1 and jim_johnson == 1, then Amerigo made 2 million and was directed by Jim Johnson
two_million, five_million, eight_million, eleven_million = earnings = intvar(1, 4, shape=4)
amerigo, fast_and_dead, let_me_out, what_a_world = movies = intvar(1, 4, shape=4)
jim_johnson, kenneth_key, linda_lynch, micah_moreno = directors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
earning_to_int = {two_million: 2, five_million: 5, eight_million: 8, eleven_million: 11}  # in million dollars
movie_to_int = None  # N/A
director_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def made_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 made less than diff million than var2.
    """
    return [((e1 == var1) & (e2 == var2)).implies(earning_to_int[e1] == earning_to_int[e2] - diff)
            for e1 in earnings for e2 in earnings]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(earnings)
m += AllDifferent(movies)
m += AllDifferent(directors)

# Clue 1: The movie that grossed 5 million was directed by Kenneth Key:
m += five_million == kenneth_key

# Clue 2: Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson:
m += Xor([what_a_world == two_million and amerigo == jim_johnson, what_a_world == jim_johnson and amerigo == two_million])

# Clue 3: The film directed by Kenneth Key made 3 million less than Amerigo:
m += made_less_than(kenneth_key, amerigo, 3)

# Clue 4: Fast and Dead was directed by Kenneth Key:
m += fast_and_dead == kenneth_key

# Clue 5: Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million:
m += Xor([let_me_out == linda_lynch, let_me_out == five_million])

```
False
True
False
Wrong: 7, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The person who is 110 years old is a native of Connecticut.
Of Arlene and the Texas native, one is 110 years old and the other is 109 years old.
Herbert is 1 year younger than Doris.
The person who is 112 years old is either Herbert or the New Mexico native.

Entities:
ages: 109 years, 110 years, 111 years, 112 years
names: Arlene, Doris, Floyd, Herbert
states: Connecticut, Missouri, New Mexico, Texas
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Arlene == 1, and 109years == 1, and Connecticut == 1, then Arlene is 109 years old and is a native of Connecticut.

### Decision variables:
-   Names of the individuals: Arlene, Doris, Floyd, Herbert (all different, 1 to 4)
-   Ages of the individuals: 109 years, 110 years, 111 years, 112 years (all different, 1 to 4)
-   States of origin: Connecticut, Missouri, New Mexico, Texas (all different, 1 to 4)

### Constraints:
-   The person who is 110 years old is a native of Connecticut:
    This is a direct assignment constraint:
    110years == Connecticut.

-   Of Arlene and the Texas native, one is 110 years old and the other is 109 years old:
    This is a constraint that states that one of Arlene and the Texas native is 110 years old and the other is 109 years old. So, we can represent this as:
    (Arlene == 109years and Texas == 110years) or (Arlene == 110years and Texas == 109years).

-   Herbert is 1 year younger than Doris:
    For this, we will need to add a constraint for each possible assignment of ages for Herbert and Doris, such that Herbert's age is 1 less than Doris's age. So, the constraints will be of the form:
    a1 == Herbert and a2 == Doris => a1_to_int == a2_to_int - 1, for all a1, a2 in ages.

-   The person who is 112 years old is either Herbert or the New Mexico native:
    This is a constraint that states that the person who is 112 years old is either Herbert or the New Mexico native, but not both. So:
    Xor([112years == Herbert, 112years == NewMexico]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Arlene == 1, and 109years == 1, and Connecticut == 1, then Arlene is 109 years old and is a native of Connecticut.

### Decision variables:
-   Names of the individuals: Arlene, Doris, Floyd, Herbert (all different, 1 to 4)
-   Ages of the individuals: 109 years, 110 years, 111 years, 112 years (all different, 1 to 4)
-   States of origin: Connecticut, Missouri, New Mexico, Texas (all different, 1 to 4)

### Constraints:
-   The person who is 110 years old is a native of Connecticut:
    This is a direct assignment constraint:
    110years == Connecticut.

-   Of Arlene and the Texas native, one is 110 years old and the other is 109 years old:
    This is a constraint that states that one of Arlene and the Texas native is 110 years old and the other is 109 years old. So, we can represent this as:
    (Arlene == 109years and Texas == 110years) or (Arlene == 110years and Texas == 109years).

-   Herbert is 1 year younger than Doris:
    For this, we will need to add a constraint for each possible assignment of ages for Herbert and Doris, such that Herbert's age is 1 less than Doris's age. So, the constraints will be of the form:
    a1 == Herbert and a2 == Doris => a1_to_int == a2_to_int - 1, for all a1, a2 in ages.

-   The person who is 112 years old is either Herbert or the New Mexico native:
    This is a constraint that states that the person who is 112 years old is either Herbert or the New Mexico native, but not both. So:
    Xor([112years == Herbert, 112years == NewMexico]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, age, and state)
# e.g. if arlene == 1 and age109 == 1 and connecticut == 1, then Arlene is 109 years old and from Connecticut
arlene, doris, floyd, herbert = names = intvar(1, 4, shape=4)
age109, age110, age111, age112 = ages = intvar(1, 4, shape=4)
connecticut, missouri, new_mexico, texas = states = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
age_to_int = {age109: 109, age110: 110, age111: 111, age112: 112}  # in years
state_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def one_is_110_and_other_is_109(var1, var2):
    """
    Formulate the constraint that one variable is 110 years old and the other is 109 years old.
    """
    return [(var1 == age109) & (var2 == age110) | (var1 == age110) & (var2 == age109)]


def younger_by_one(var1, var2):
    """
    Formulate the constraint that var1 is 1 year younger than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] == age_to_int[a2] - 1)
            for a1 in ages for a2 in ages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(ages)
m += AllDifferent(states)

# Clue 1: The person who is 110 years old is a native of Connecticut:
m += age110 == connecticut

# Clue 2: Of Arlene and the Texas native, one is 110 years old and the other is 109 years old:
m += one_is_110_and_other_is_109(arlene, texas)

# Clue 3: Herbert is 1 year younger than Doris:
m += younger_by_one(herbert, doris)

# Clue 4: The person who is 112 years old is either Herbert or the New Mexico native:
m += Xor([age112 == herbert, age112 == new_mexico])

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Of Frances and Olga, one paid $25 and the other had the shiraz.
The one who had the port paid 2 dollars more than Kurt.
Olga had the merlot.

Entities:
prices: $24, $25, $26, $27
names: Frances, Hannah, Kurt, Olga
wines: merlot, port, riesling, shiraz
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Frances == 1, and Price24 == 1, and Merlot == 1, then Frances paid $24 for the merlot.

### Decision variables:
-   Names of the individuals: Frances, Hannah, Kurt, Olga (all different, 1 to 4)
-   Prices paid: Price24, Price25, Price26, Price27 (all different, 1 to 4)
-   Types of wines: Merlot, Port, Riesling, Shiraz (all different, 1 to 4)

### Constraints:
-   Of Frances and Olga, one paid $25 and the other had the shiraz:
    This is a constraint that states that one of Frances or Olga paid $25 and the other had the shiraz. So, we can represent this as:
    (Frances == Price25 and Olga == Shiraz) or (Frances == Shiraz and Olga == Price25).

-   The one who had the port paid 2 dollars more than Kurt:
    For this, we will need to add a constraint for each possible assignment of prices for the port and Kurt, such that the price for the port is 2 more than Kurt's price. So, the constraints will be of the form:
    p1 == Port and p2 == Kurt => p1_to_int == p2_to_int + 2, for all p1, p2 in prices.

-   Olga had the merlot:
    This is a direct assignment constraint:
    Olga == Merlot.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Frances == 1, and Price24 == 1, and Merlot == 1, then Frances paid $24 for the merlot.

### Decision variables:
-   Names of the individuals: Frances, Hannah, Kurt, Olga (all different, 1 to 4)
-   Prices paid: Price24, Price25, Price26, Price27 (all different, 1 to 4)
-   Types of wines: Merlot, Port, Riesling, Shiraz (all different, 1 to 4)

### Constraints:
-   Of Frances and Olga, one paid $25 and the other had the shiraz:
    This is a constraint that states that one of Frances or Olga paid $25 and the other had the shiraz. So, we can represent this as:
    (Frances == Price25 and Olga == Shiraz) or (Frances == Shiraz and Olga == Price25).

-   The one who had the port paid 2 dollars more than Kurt:
    For this, we will need to add a constraint for each possible assignment of prices for the port and Kurt, such that the price for the port is 2 more than Kurt's price. So, the constraints will be of the form:
    p1 == Port and p2 == Kurt => p1_to_int == p2_to_int + 2, for all p1, p2 in prices.

-   Olga had the merlot:
    This is a direct assignment constraint:
    Olga == Merlot.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, price, and wine)
# e.g. if frances == 1 and price24 == 1 and merlot == 1, then Frances paid $24 for the merlot
frances, hannah, kurt, olga = names = intvar(1, 4, shape=4)
price24, price25, price26, price27 = prices = intvar(1, 4, shape=4)
merlot, port, riesling, shiraz = wines = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
price_to_int = {price24: 24, price25: 25, price26: 26, price27: 27}  # in dollars
wine_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_and_had(var1, var2):
    """
    Formulate the constraint that var1 paid $25 and var2 had the shiraz, or vice versa.
    """
    return [(var1 == price25 and var2 == shiraz) | (var1 == shiraz and var2 == price25)]


def paid_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(prices)
m += AllDifferent(wines)

# Clue 1: Of Frances and Olga, one paid $25 and the other had the shiraz:
m += paid_and_had(frances, olga)

# Clue 2: The one who had the port paid 2 dollars more than Kurt:
m += paid_more_than(port, kurt, 2)

# Clue 3: Olga had the merlot:
m += olga == merlot

```
False
True
False
Wrong: 1, Total: 6
---------------------------------------------------------------------------------------------

Clues:
Regal Park is on Barbados.
Grand Echo costs 40 dollars more per night than the resort on Barbados.
Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night.
The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View.
Grand Echo costs 20 dollars less per night than Emerald View.

Entities:
prices: $175, $195, $215, $235
resorts: El Pacifico, Emerald View, Grand Echo, Regal Park
islands: Anguilla, Barbados, Martinique, St. Barts
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if $175 == 1, and ElPacifico == 1, and Martinique == 1, then the hotel on Martinique costs $175 and is El Pacifico.

### Decision variables:
-   Prices per night: $175, $195, $215, $235 (all different, 1 to 4)
-   Resorts: ElPacifico, EmeraldView, GrandEcho, RegalPark (all different, 1 to 4)
-   Islands: Anguilla, Barbados, Martinique, StBarts (all different, 1 to 4)

### Constraints:
-   Regal Park is on Barbados:
    This is a direct assignment constraint:
    RegalPark == Barbados.

-   Grand Echo costs 40 dollars more per night than the resort on Barbados:
    For this, we will need to add a constraint for each possible assignment of prices and resorts, such that Grand Echo's price is 40 dollars more than the resort on Barbados. So, the constraints will be of the form:
    p1 == GrandEcho and p2 == Barbados => p1_to_int == p2_to_int + 40, for all p1, p2 in prices.

-   Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night:
    This is a constraint that states that one of El Pacifico and Regal Park is on Martinique and the other costs $175 per night. So:
    (ElPacifico == Martinique and RegalPark == $175) or (RegalPark == Martinique and ElPacifico == $175).

-   The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View:
    This is a constraint that states that the hotel that costs $215 per night is either on St. Barts or is Emerald View. So:
    ($215 == StBarts or $215 == EmeraldView).

-   Grand Echo costs 20 dollars less per night than Emerald View:
    For this, we will need to add a constraint for each possible assignment of prices for Grand Echo and Emerald View, such that Grand Echo's price is 20 dollars less than Emerald View's price. So, the constraints will be of the form:
    p1 == GrandEcho and p2 == EmeraldView => p1_to_int == p2_to_int - 20, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if $175 == 1, and ElPacifico == 1, and Martinique == 1, then the hotel on Martinique costs $175 and is El Pacifico.

### Decision variables:
-   Prices per night: $175, $195, $215, $235 (all different, 1 to 4)
-   Resorts: ElPacifico, EmeraldView, GrandEcho, RegalPark (all different, 1 to 4)
-   Islands: Anguilla, Barbados, Martinique, StBarts (all different, 1 to 4)

### Constraints:
-   Regal Park is on Barbados:
    This is a direct assignment constraint:
    RegalPark == Barbados.

-   Grand Echo costs 40 dollars more per night than the resort on Barbados:
    For this, we will need to add a constraint for each possible assignment of prices and resorts, such that Grand Echo's price is 40 dollars more than the resort on Barbados. So, the constraints will be of the form:
    p1 == GrandEcho and p2 == Barbados => p1_to_int == p2_to_int + 40, for all p1, p2 in prices.

-   Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night:
    This is a constraint that states that one of El Pacifico and Regal Park is on Martinique and the other costs $175 per night. So:
    (ElPacifico == Martinique and RegalPark == $175) or (RegalPark == Martinique and ElPacifico == $175).

-   The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View:
    This is a constraint that states that the hotel that costs $215 per night is either on St. Barts or is Emerald View. So:
    ($215 == StBarts or $215 == EmeraldView).

-   Grand Echo costs 20 dollars less per night than Emerald View:
    For this, we will need to add a constraint for each possible assignment of prices for Grand Echo and Emerald View, such that Grand Echo's price is 20 dollars less than Emerald View's price. So, the constraints will be of the form:
    p1 == GrandEcho and p2 == EmeraldView => p1_to_int == p2_to_int - 20, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of price, resort, and island)
# e.g. if price175 == 1 and el_pacifico == 1 and martinique == 1, then the hotel on Martinique costs $175 and is El Pacifico
price175, price195, price215, price235 = prices = intvar(1, 4, shape=4)
el_pacifico, emerald_view, grand_echo, regal_park = resorts = intvar(1, 4, shape=4)
anguilla, barbados, martinique, st_barts = islands = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
price_to_int = {price175: 175, price195: 195, price215: 215, price235: 235}  # in dollars
resort_to_int = None  # N/A
island_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def costs_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs more than var2 by diff dollars.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(prices)
m += AllDifferent(resorts)
m += AllDifferent(islands)

# Clue 1: Regal Park is on Barbados:
m += regal_park == barbados

# Clue 2: Grand Echo costs 40 dollars more per night than the resort on Barbados:
m += costs_more_than(grand_echo, barbados, 40)

# Clue 3: Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night:
m += ((el_pacifico == martinique) & (regal_park == price175)) | ((regal_park == martinique) & (el_pacifico == price175))

# Clue 4: The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View:
m += (price215 == st_barts) | (price215 == emerald_view)

# Clue 5: Grand Echo costs 20 dollars less per night than Emerald View:
m += costs_more_than(emerald_view, grand_echo, 20)

```
True
True
True
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Snappy is 18 years younger than the swoopbacked tortoise.
The 68 year old animal is the horned tortoise.
Chewie is 32 years old.
Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise.
The pitch belly tortoise is younger than Chewie.

Entities:
ages: 14, 32, 50, 68
tortoises: Chewie, Snappy, Speedy, Toredo
species: black neck, horned, pitch belly, swoopbacked
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Chewie == 1, and Age32 == 1, and Horned == 1, then Chewie is the horned tortoise who is 32 years old.

### Decision variables:
-   Ages of the tortoises: Age14, Age32, Age50, Age68 (all different, 1 to 4)
-   Names of the tortoises: Chewie, Snappy, Speedy, Toredo (all different, 1 to 4)
-   Species of the tortoises: BlackNeck, Horned, PitchBelly, Swoopbacked (all different, 1 to 4)

### Constraints:
-   Snappy is 18 years younger than the swoopbacked tortoise:
    For this, we will need to add a constraint for each possible assignment of ages for Snappy and the swoopbacked tortoise, such that Snappy's age is 18 less than the swoopbacked tortoise's age. So, the constraints will be of the form:
    a1 == Snappy and a2 == Swoopbacked => a1_to_int == a2_to_int - 18, for all a1, a2 in ages.

-   The 68-year-old animal is the horned tortoise:
    This is a direct assignment constraint:
    Age68 == Horned.

-   Chewie is 32 years old:
    This is a direct assignment constraint:
    Chewie == Age32.

-   Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise:
    This is a constraint that states that one of Snappy or Toredo is 14 years old and the other is the horned tortoise. So, we can represent this as:
    (Snappy == Age14 and Toredo == Horned) or (Snappy == Horned and Toredo == Age14).

-   The pitch belly tortoise is younger than Chewie:
    For this, we will need to add a constraint for each possible assignment of ages for the pitch belly tortoise and Chewie, such that the pitch belly tortoise's age is less than Chewie's age. So, the constraints will be of the form:
    a1 == PitchBelly and a2 == Chewie => a1_to_int < a2_to_int, for all a1, a2 in ages.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Chewie == 1, and Age32 == 1, and Horned == 1, then Chewie is the horned tortoise who is 32 years old.

### Decision variables:
-   Ages of the tortoises: Age14, Age32, Age50, Age68 (all different, 1 to 4)
-   Names of the tortoises: Chewie, Snappy, Speedy, Toredo (all different, 1 to 4)
-   Species of the tortoises: BlackNeck, Horned, PitchBelly, Swoopbacked (all different, 1 to 4)

### Constraints:
-   Snappy is 18 years younger than the swoopbacked tortoise:
    For this, we will need to add a constraint for each possible assignment of ages for Snappy and the swoopbacked tortoise, such that Snappy's age is 18 less than the swoopbacked tortoise's age. So, the constraints will be of the form:
    a1 == Snappy and a2 == Swoopbacked => a1_to_int == a2_to_int - 18, for all a1, a2 in ages.

-   The 68-year-old animal is the horned tortoise:
    This is a direct assignment constraint:
    Age68 == Horned.

-   Chewie is 32 years old:
    This is a direct assignment constraint:
    Chewie == Age32.

-   Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise:
    This is a constraint that states that one of Snappy or Toredo is 14 years old and the other is the horned tortoise. So, we can represent this as:
    (Snappy == Age14 and Toredo == Horned) or (Snappy == Horned and Toredo == Age14).

-   The pitch belly tortoise is younger than Chewie:
    For this, we will need to add a constraint for each possible assignment of ages for the pitch belly tortoise and Chewie, such that the pitch belly tortoise's age is less than Chewie's age. So, the constraints will be of the form:
    a1 == PitchBelly and a2 == Chewie => a1_to_int < a2_to_int, for all a1, a2 in ages.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of age, tortoise, and species)
# e.g. if age14 == 1 and chewie == 1 and horned == 1, then Chewie is the horned tortoise who is 14 years old
age14, age32, age50, age68 = ages = intvar(1, 4, shape=4)
chewie, snappy, speedy, toredo = tortoises = intvar(1, 4, shape=4)
black_neck, horned, pitch_belly, swoopbacked = species = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
age_to_int = {age14: 14, age32: 32, age50: 50, age68: 68}  # in years
tortoise_to_int = None  # N/A
species_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def younger_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff years younger than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] == age_to_int[a2] - diff)
            for a1 in ages for a2 in ages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(ages)
m += AllDifferent(tortoises)
m += AllDifferent(species)

# Clue 1: Snappy is 18 years younger than the swoopbacked tortoise:
m += younger_than(snappy, swoopbacked, 18)

# Clue 2: The 68-year-old animal is the horned tortoise:
m += age68 == horned

# Clue 3: Chewie is 32 years old:
m += chewie == age32

# Clue 4: Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise:
m += ((snappy == age14) & (toredo == horned)) | ((snappy == horned) & (toredo == age14))

# Clue 5: The pitch belly tortoise is younger than Chewie:
m += [((species == pitch_belly) & (age == chewie)).implies(age_to_int[species] < age_to_int[age])
      for species in species for age in ages]

```
Error: name 'IV2060' is not defined
False
False
Error: name 'IV2084' is not defined
---------------------------------------------------------------------------------------------

Clues:
Of the parrot and the lorikeet, one was bought in April and the other is Roberta's.
Natalie's pet was bought sometime before Roberta's pet.
Laura's pet is the lovebird.
The bird bought in February is either the lorikeet or the lovebird.
Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's.

Entities:
months: January, February, March, April
names: Celia, Laura, Natalie, Roberta
birds: lorikeet, lovebird, macaw, parrot
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Celia == 1, and January == 1, and Lorikeet == 1, then Celia bought a lorikeet in January.

### Decision variables:
-   Names of the owners: Celia, Laura, Natalie, Roberta (all different, 1 to 4)
-   Months of purchase: January, February, March, April (all different, 1 to 4)
-   Types of birds: Lorikeet, Lovebird, Macaw, Parrot (all different, 1 to 4)

### Constraints:
-   Of the parrot and the lorikeet, one was bought in April and the other is Roberta's:
    This is a constraint that states that one of the parrot or the lorikeet was bought in April and the other is Roberta's. So:
    (Parrot == April and Lorikeet == Roberta) or (Lorikeet == April and Parrot == Roberta).

-   Natalie's pet was bought sometime before Roberta's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for Natalie's pet and Roberta's pet, such that Natalie's pet's month of purchase is less than Roberta's pet's month of purchase. So, the constraints will be of the form:
    m1 == Natalie and m2 == Roberta => m1_to_int < m2_to_int, for all m1, m2 in months of purchase.

-   Laura's pet is the lovebird:
    This is a direct assignment constraint:
    Laura == Lovebird.

-   The bird bought in February is either the lorikeet or the lovebird:
    This is a constraint that states that the bird bought in February is either the lorikeet or the lovebird, but not both. So:
    Xor([February == Lorikeet, February == Lovebird]).

-   Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's:
    This is a constraint that states that the bird bought in February and the macaw are owned by Natalie and Roberta, but not in the same combination. So:
    (February == Natalie and Macaw == Roberta) or (February == Roberta and Macaw == Natalie).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Celia == 1, and January == 1, and Lorikeet == 1, then Celia bought a lorikeet in January.

### Decision variables:
-   Names of the owners: Celia, Laura, Natalie, Roberta (all different, 1 to 4)
-   Months of purchase: January, February, March, April (all different, 1 to 4)
-   Types of birds: Lorikeet, Lovebird, Macaw, Parrot (all different, 1 to 4)

### Constraints:
-   Of the parrot and the lorikeet, one was bought in April and the other is Roberta's:
    This is a constraint that states that one of the parrot or the lorikeet was bought in April and the other is Roberta's. So:
    (Parrot == April and Lorikeet == Roberta) or (Lorikeet == April and Parrot == Roberta).

-   Natalie's pet was bought sometime before Roberta's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for Natalie's pet and Roberta's pet, such that Natalie's pet's month of purchase is less than Roberta's pet's month of purchase. So, the constraints will be of the form:
    m1 == Natalie and m2 == Roberta => m1_to_int < m2_to_int, for all m1, m2 in months of purchase.

-   Laura's pet is the lovebird:
    This is a direct assignment constraint:
    Laura == Lovebird.

-   The bird bought in February is either the lorikeet or the lovebird:
    This is a constraint that states that the bird bought in February is either the lorikeet or the lovebird, but not both. So:
    Xor([February == Lorikeet, February == Lovebird]).

-   Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's:
    This is a constraint that states that the bird bought in February and the macaw are owned by Natalie and Roberta, but not in the same combination. So:
    (February == Natalie and Macaw == Roberta) or (February == Roberta and Macaw == Natalie).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of owner, month, and bird)
# e.g. if celia == 1 and january == 1 and lorikeet == 1, then Celia bought a lorikeet in January
celia, laura, natalie, roberta = owners = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
lorikeet, lovebird, macaw, parrot = birds = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
owner_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
bird_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bought_before_than(var1, var2):
    """
    Formulate the constraint that var1 bought before var2.
    """
    return [((o1 == var1) & (o2 == var2)).implies(month_to_int[o1] < month_to_int[o2])
            for o1 in months for o2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(owners)
m += AllDifferent(months)
m += AllDifferent(birds)

# Clue 1: Of the parrot and the lorikeet, one was bought in April and the other is Roberta's:
m += ((parrot == april) & (lorikeet == roberta)) | ((lorikeet == april) & (parrot == roberta))

# Clue 2: Natalie's pet was bought sometime before Roberta's pet:
m += bought_before_than(natalie, roberta)

# Clue 3: Laura's pet is the lovebird:
m += laura == lovebird

# Clue 4: The bird bought in February is either the lorikeet or the lovebird:
m += Xor([february == lorikeet, february == lovebird])

# Clue 5: Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's:
m += ((february == natalie) & (macaw == roberta)) | ((february == roberta) & (macaw == natalie))

```
True
True
True
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Suzanne paid less than Margie.
Margie paid $7.
The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni.
Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma.

Entities:
prices: $6, $7, $8, $9
runners: Florence, Margie, Suzanne, Velma
pastas: fettuccine, fusilli, spaghetti, taglioni
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Florence == 1, and $6 == 1, and fettuccine == 1, then Florence paid $6 for fettuccine.

### Decision variables:
-   Names of the runners: Florence, Margie, Suzanne, Velma (all different, 1 to 4)
-   Prices paid: $6, $7, $8, $9 (all different, 1 to 4)
-   Types of pastas ordered: fettuccine, fusilli, spaghetti, taglioni (all different, 1 to 4)

### Constraints:
-   Suzanne paid less than Margie:
    For this, we will need to add a constraint for each possible assignment of prices to Suzanne and Margie, such that Suzanne's price is less than Margie's price. So, the constraints will be of the form:
    p1 == Suzanne and p2 == Margie => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Margie paid $7:
    This is a direct assignment constraint:
    Margie == $7.

-   The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni:
    For this, we will need to add a constraint for each possible assignment of pastas to the competitors who ordered spaghetti and taglioni, such that the spaghetti price is 2 more than the taglioni price. So, the constraints will be of the form:
    p1 == spaghetti and p2 == taglioni => p1_to_int == p2_to_int + 2, for all p1, p2 in prices.

-   Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma:
    This is a constraint that states that one of the runners who paid $9 and the contestant who ordered fettuccine is Margie, and the other is Velma. So:
    (Margie == $9 and Velma == fettuccine) or (Margie == fettuccine and Velma == $9).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Florence == 1, and $6 == 1, and fettuccine == 1, then Florence paid $6 for fettuccine.

### Decision variables:
-   Names of the runners: Florence, Margie, Suzanne, Velma (all different, 1 to 4)
-   Prices paid: $6, $7, $8, $9 (all different, 1 to 4)
-   Types of pastas ordered: fettuccine, fusilli, spaghetti, taglioni (all different, 1 to 4)

### Constraints:
-   Suzanne paid less than Margie:
    For this, we will need to add a constraint for each possible assignment of prices to Suzanne and Margie, such that Suzanne's price is less than Margie's price. So, the constraints will be of the form:
    p1 == Suzanne and p2 == Margie => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Margie paid $7:
    This is a direct assignment constraint:
    Margie == $7.

-   The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni:
    For this, we will need to add a constraint for each possible assignment of pastas to the competitors who ordered spaghetti and taglioni, such that the spaghetti price is 2 more than the taglioni price. So, the constraints will be of the form:
    p1 == spaghetti and p2 == taglioni => p1_to_int == p2_to_int + 2, for all p1, p2 in prices.

-   Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma:
    This is a constraint that states that one of the runners who paid $9 and the contestant who ordered fettuccine is Margie, and the other is Velma. So:
    (Margie == $9 and Velma == fettuccine) or (Margie == fettuccine and Velma == $9).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of runner, price, and pasta)
# e.g. if florence == 1 and price6 == 1 and fettuccine == 1, then Florence paid $6 for fettuccine
florence, margie, suzanne, velma = runners = intvar(1, 4, shape=4)
price6, price7, price8, price9 = prices = intvar(1, 4, shape=4)
fettuccine, fusilli, spaghetti, taglioni = pastas = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
runner_to_int = None  # N/A
price_to_int = {price6: 6, price7: 7, price8: 8, price9: 9}  # in dollars
pasta_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_less_than(var1, var2):
    """
    Formulate the constraint that var1 paid less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly(var, amount):
    """
    Formulate the constraint that var paid exactly the specified amount.
    """
    return [var == amount]


def paid_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid more than var2 by the specified difference.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(runners)
m += AllDifferent(prices)
m += AllDifferent(pastas)

# Clue 1: Suzanne paid less than Margie:
m += paid_less_than(suzanne, margie)

# Clue 2: Margie paid $7:
m += paid_exactly(margie, price7)

# Clue 3: The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni:
m += paid_more_than(spaghetti, taglioni, 2)

# Clue 4: Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma:
m += ((margie == price9) & (velma == fettuccine)) | ((margie == fettuccine) & (velma == price9))

```
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The Luzagueil is a chardonnay.
The Annata Branco is either the 1992 wine or the syrah.
The Friambliss is a syrah.
Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein.
The pinot gris was bottled 4 years after the merlot.

Entities:
vintages: 1984, 1988, 1992, 1996
wines: Annata Branco, Friambliss, Luzagueil, Zifennwein
types: chardonnay, merlot, pinot gris, syrah
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if 1984 == 1, and AnnataBranco == 1, and Chardonnay == 1, then the 1984 vintage of Annata Branco is a chardonnay.

### Decision variables:
-   Vintages of the wines: 1984, 1988, 1992, 1996 (all different, 1 to 4)
-   Names of the wines: AnnataBranco, Friambliss, Luzagueil, Zifennwein (all different, 1 to 4)
-   Types of wines: Chardonnay, Merlot, PinotGris, Syrah (all different, 1 to 4)

### Constraints:
-   The Luzagueil is a chardonnay:
    This is a direct assignment constraint:
    Luzagueil == Chardonnay.

-   The Annata Branco is either the 1992 wine or the syrah:
    This is a constraint that states that the Annata Branco wine is either the 1992 vintage or a syrah, but not both. So:
    Xor([AnnataBranco == 1992, AnnataBranco == Syrah]).

-   The Friambliss is a syrah:
    This is a direct assignment constraint:
    Friambliss == Syrah.

-   Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein:
    This is a constraint that states that one of the pinot gris and the 1984 bottle is the Luzagueil and the other is the Zifennwein. So:
    (PinotGris == Luzagueil and 1984 == Zifennwein) or (PinotGris == Zifennwein and 1984 == Luzagueil).

-   The pinot gris was bottled 4 years after the merlot:
    For this, we will need to add a constraint for each possible assignment of vintages for the pinot gris and the merlot, such that the pinot gris's vintage is 4 more than the merlot's vintage. So, the constraints will be of the form:
    v1 == PinotGris and v2 == Merlot => v1_to_int == v2_to_int + 4, for all v1, v2 in vintages.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if 1984 == 1, and AnnataBranco == 1, and Chardonnay == 1, then the 1984 vintage of Annata Branco is a chardonnay.

### Decision variables:
-   Vintages of the wines: 1984, 1988, 1992, 1996 (all different, 1 to 4)
-   Names of the wines: AnnataBranco, Friambliss, Luzagueil, Zifennwein (all different, 1 to 4)
-   Types of wines: Chardonnay, Merlot, PinotGris, Syrah (all different, 1 to 4)

### Constraints:
-   The Luzagueil is a chardonnay:
    This is a direct assignment constraint:
    Luzagueil == Chardonnay.

-   The Annata Branco is either the 1992 wine or the syrah:
    This is a constraint that states that the Annata Branco wine is either the 1992 vintage or a syrah, but not both. So:
    Xor([AnnataBranco == 1992, AnnataBranco == Syrah]).

-   The Friambliss is a syrah:
    This is a direct assignment constraint:
    Friambliss == Syrah.

-   Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein:
    This is a constraint that states that one of the pinot gris and the 1984 bottle is the Luzagueil and the other is the Zifennwein. So:
    (PinotGris == Luzagueil and 1984 == Zifennwein) or (PinotGris == Zifennwein and 1984 == Luzagueil).

-   The pinot gris was bottled 4 years after the merlot:
    For this, we will need to add a constraint for each possible assignment of vintages for the pinot gris and the merlot, such that the pinot gris's vintage is 4 more than the merlot's vintage. So, the constraints will be of the form:
    v1 == PinotGris and v2 == Merlot => v1_to_int == v2_to_int + 4, for all v1, v2 in vintages.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of vintage, wine, and type)
# e.g. if vintage1984 == 1 and annata_branco == 1 and chardonnay == 1, then the 1984 vintage of Annata Branco is a chardonnay
vintage1984, vintage1988, vintage1992, vintage1996 = vintages = intvar(1, 4, shape=4)
annata_branco, friambliss, luzagueil, zifennwein = wines = intvar(1, 4, shape=4)
chardonnay, merlot, pinot_gris, syrah = types = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
vintage_to_int = {vintage1984: 1984, vintage1988: 1988, vintage1992: 1992, vintage1996: 1996}  # in years
wine_to_int = None  # N/A
type_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def is_either(var1, var2, var3):
    """
    Formulate the constraint that var1 is either var2 or var3, but not both.
    """
    return [((v1 == var1) & (v2 == var2) & (v3 == var3)).implies((v1 == v2) != (v1 == v3))
            for v1 in wines for v2 in wines for v3 in wines]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(vintages)
m += AllDifferent(wines)
m += AllDifferent(types)

# Clue 1: The Luzagueil is a chardonnay:
m += luzagueil == chardonnay

# Clue 2: The Annata Branco is either the 1992 wine or the syrah:
m += is_either(annata_branco, vintage1992, syrah)

# Clue 3: The Friambliss is a syrah:
m += friambliss == syrah

# Clue 4: Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein:
m += ((pinot_gris == luzagueil) & (vintage1984 == zifennwein)) | ((pinot_gris == zifennwein) & (vintage1984 == luzagueil))

# Clue 5: The pinot gris was bottled 4 years after the merlot:
m += (pinot_gris == merlot + 4)

```
False
False
False
Wrong: 3, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hannah paid more than Teri's client.
Freda paid 20 dollars more than Lynda's client.
Hannah paid 10 dollars less than Nancy's client.
Nancy's client, Hannah and Ginger were all different clients.
Hannah was either the person who paid $180 or Lynda's client.

Entities:
Clients: Aimee, Ginger, Freda, Hannah
Prices: $150, $160, $170, $180
Masseuses: Lynda, Nancy, Teri, Whitney
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Aimee == 1, and Price150 == 1, and Lynda == 1, then Aimee paid $150 to Lynda.

### Decision variables:
-   Names of the clients: Aimee, Ginger, Freda, Hannah (all different, 1 to 4)
-   Prices paid by the clients: Price150, Price160, Price170, Price180 (all different, 1 to 4)
-   Names of the masseuses: Lynda, Nancy, Teri, Whitney (all different, 1 to 4)

### Constraints:
-   Hannah paid more than Teri's client:
    For this, we will need to add a constraint for each possible assignment of prices to Hannah and Teri's client, such that Hannah's price is greater than Teri's client's price. So, the constraints will be of the form:
    p1 == Hannah and p2 == Teri => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   Freda paid 20 dollars more than Lynda's client:
    For this, we will need to add a constraint for each possible assignment of prices to Freda and Lynda's client, such that Freda's price is 20 dollars greater than Lynda's client's price. So, the constraints will be of the form:
    p1 == Freda and p2 == Lynda => p1_to_int == p2_to_int + 20, for all p1, p2 in prices.

-   Hannah paid 10 dollars less than Nancy's client:
    For this, we will need to add a constraint for each possible assignment of prices to Hannah and Nancy's client, such that Hannah's price is 10 dollars less than Nancy's client's price. So, the constraints will be of the form:
    p1 == Hannah and p2 == Nancy => p1_to_int == p2_to_int - 10, for all p1, p2 in prices.

-   Nancy's client, Hannah, and Ginger were all different clients:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Nancy, Hannah, Ginger]).

-   Hannah was either the person who paid $180 or Lynda's client:
    This is a constraint that states that Hannah is either the person who paid $180 or Lynda's client, but not both. Thus:
    Xor([Hannah == Price180, Hannah == Lynda]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Aimee == 1, and Price150 == 1, and Lynda == 1, then Aimee paid $150 to Lynda.

### Decision variables:
-   Names of the clients: Aimee, Ginger, Freda, Hannah (all different, 1 to 4)
-   Prices paid by the clients: Price150, Price160, Price170, Price180 (all different, 1 to 4)
-   Names of the masseuses: Lynda, Nancy, Teri, Whitney (all different, 1 to 4)

### Constraints:
-   Hannah paid more than Teri's client:
    For this, we will need to add a constraint for each possible assignment of prices to Hannah and Teri's client, such that Hannah's price is greater than Teri's client's price. So, the constraints will be of the form:
    p1 == Hannah and p2 == Teri => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   Freda paid 20 dollars more than Lynda's client:
    For this, we will need to add a constraint for each possible assignment of prices to Freda and Lynda's client, such that Freda's price is 20 dollars greater than Lynda's client's price. So, the constraints will be of the form:
    p1 == Freda and p2 == Lynda => p1_to_int == p2_to_int + 20, for all p1, p2 in prices.

-   Hannah paid 10 dollars less than Nancy's client:
    For this, we will need to add a constraint for each possible assignment of prices to Hannah and Nancy's client, such that Hannah's price is 10 dollars less than Nancy's client's price. So, the constraints will be of the form:
    p1 == Hannah and p2 == Nancy => p1_to_int == p2_to_int - 10, for all p1, p2 in prices.

-   Nancy's client, Hannah, and Ginger were all different clients:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Nancy, Hannah, Ginger]).

-   Hannah was either the person who paid $180 or Lynda's client:
    This is a constraint that states that Hannah is either the person who paid $180 or Lynda's client, but not both. Thus:
    Xor([Hannah == Price180, Hannah == Lynda]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of client, masseuse, and price)
# e.g. if aimee == 1 and ginger == 1 and price150 == 1, then Aimee paid $150 to Ginger
aimee, ginger, freda, hannah = clients = intvar(1, 4, shape=4)
price150, price160, price170, price180 = prices = intvar(1, 4, shape=4)
lynda, nancy, teri, whitney = masseuses = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
client_to_int = None  # N/A
masseuse_to_int = None  # N/A
price_to_int = {price150: 150, price160: 160, price170: 170, price180: 180}  # in dollars


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(clients)
m += AllDifferent(prices)
m += AllDifferent(masseuses)

# Clue 1: Hannah paid more than Teri's client:
m += paid_more_than(hannah, teri)

# Clue 2: Freda paid 20 dollars more than Lynda's client:
m += paid_exactly_more_than(freda, lynda, 20)

# Clue 3: Hannah paid 10 dollars less than Nancy's client:
m += paid_exactly_more_than(hannah, nancy, -10)

# Clue 4: Nancy's client, Hannah, and Ginger were all different clients:
m += AllDifferent([nancy, hannah, ginger])

# Clue 5: Hannah was either the person who paid $180 or Lynda's client:
m += Xor([hannah == price180, hannah == lynda])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet.
Inawatai is 100 ft tall.
Nyalt is 10 ft taller than Rhoqua.
The waterfall in Brazil is somewhat shorter than Rhoqua.
The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria.

Entities:
waterfalls: Sihat, Rhoqua, Nyalt, Inawatai
heights: 100 ft, 105 ft, 110 ft, 115 ft
countries: Brazil, Nigeria, Tibet, Switzerland
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Sihat == 1, and 100ft == 1, and Brazil == 1, then Sihat is the 100 ft tall waterfall located in Brazil.

### Decision variables:
-   Names of the waterfalls: Sihat, Rhoqua, Nyalt, Inawatai (all different, 1 to 4)
-   Heights of the waterfalls: 100 ft, 105 ft, 110 ft, 115 ft (all different, 1 to 4)
-   Countries where the waterfalls are located: Brazil, Nigeria, Tibet, Switzerland (all different, 1 to 4)

### Constraints:
-   The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet:
    This is a constraint that states that the 115 ft tall waterfall is either in Nigeria or Tibet, but not both. So:
    Xor([115ft == Nigeria, 115ft == Tibet]).

-   Inawatai is 100 ft tall:
    This is a direct assignment constraint:
    Inawatai == 100ft.

-   Nyalt is 10 ft taller than Rhoqua:
    For this, we will need to add a constraint for each possible assignment of heights for Nyalt and Rhoqua, such that Nyalt's height is 10 ft more than Rhoqua's height. So, the constraints will be of the form:
    h1 == Nyalt and h2 == Rhoqua => h1_to_int == h2_to_int + 10, for all h1, h2 in heights.

-   The waterfall in Brazil is somewhat shorter than Rhoqua:
    This is a constraint that states that the waterfall in Brazil is shorter than Rhoqua, but not necessarily by a specific amount. So:
    Brazil != Rhoqua.

-   The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria:
    For this, we will need to add a constraint for each possible assignment of heights for the waterfalls in Brazil and Nigeria, such that the waterfall in Brazil is 10 ft shorter than the waterfall in Nigeria. So, the constraints will be of the form:
    h1 == Brazil and h2 == Nigeria => h1_to_int == h2_to_int - 10, for all h1, h2 in heights.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Sihat == 1, and 100ft == 1, and Brazil == 1, then Sihat is the 100 ft tall waterfall located in Brazil.

### Decision variables:
-   Names of the waterfalls: Sihat, Rhoqua, Nyalt, Inawatai (all different, 1 to 4)
-   Heights of the waterfalls: 100 ft, 105 ft, 110 ft, 115 ft (all different, 1 to 4)
-   Countries where the waterfalls are located: Brazil, Nigeria, Tibet, Switzerland (all different, 1 to 4)

### Constraints:
-   The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet:
    This is a constraint that states that the 115 ft tall waterfall is either in Nigeria or Tibet, but not both. So:
    Xor([115ft == Nigeria, 115ft == Tibet]).

-   Inawatai is 100 ft tall:
    This is a direct assignment constraint:
    Inawatai == 100ft.

-   Nyalt is 10 ft taller than Rhoqua:
    For this, we will need to add a constraint for each possible assignment of heights for Nyalt and Rhoqua, such that Nyalt's height is 10 ft more than Rhoqua's height. So, the constraints will be of the form:
    h1 == Nyalt and h2 == Rhoqua => h1_to_int == h2_to_int + 10, for all h1, h2 in heights.

-   The waterfall in Brazil is somewhat shorter than Rhoqua:
    This is a constraint that states that the waterfall in Brazil is shorter than Rhoqua, but not necessarily by a specific amount. So:
    Brazil != Rhoqua.

-   The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria:
    For this, we will need to add a constraint for each possible assignment of heights for the waterfalls in Brazil and Nigeria, such that the waterfall in Brazil is 10 ft shorter than the waterfall in Nigeria. So, the constraints will be of the form:
    h1 == Brazil and h2 == Nigeria => h1_to_int == h2_to_int - 10, for all h1, h2 in heights.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of waterfall, height, and country)
# e.g. if sihat == 1 and 100ft == 1 and brazil == 1, then Sihat is the 100 ft tall waterfall located in Brazil
sihat, rhoqua, nyalt, inawatai = waterfalls = intvar(1, 4, shape=4)
ft100, ft105, ft110, ft115 = heights = intvar(1, 4, shape=4)
brazil, nigeria, tibet, switzerland = countries = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
waterfall_to_int = None  # N/A
height_to_int = {ft100: 100, ft105: 105, ft110: 110, ft115: 115}  # in feet
country_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def taller_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff feet taller than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] == height_to_int[h2] + diff)
            for h1 in heights for h2 in heights]


def shorter_than(var1, var2):
    """
    Formulate the constraint that var1 is shorter than var2.
    """
    return [var1 != var2]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(waterfalls)
m += AllDifferent(heights)
m += AllDifferent(countries)

# Clue 1: The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet:
m += Xor([ft115 == nigeria, ft115 == tibet])

# Clue 2: Inawatai is 100 ft tall:
m += inawatai == ft100

# Clue 3: Nyalt is 10 ft taller than Rhoqua:
m += taller_than(nyalt, rhoqua, 10)

# Clue 4: The waterfall in Brazil is somewhat shorter than Rhoqua:
m += shorter_than(brazil, rhoqua)

# Clue 5: The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria:
m += taller_than(nigeria, brazil, 10)

```
True
True
True
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Evan played 9 games.
Vincent played first base.
The player who played third base played 2 more games than the person who played center field.
Charles played 2 more games than the player who played center field.
Charles was either the boy who played 9 games or the person who played 10 games.

Entities:
players: Charles, Evan, Karl, Vincent
games: 8, 9, 10, 11
positions: center field, first base, shortstop, third base
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Charles == 1, and 9games == 1, and centerfield == 1, then Charles played 9 games in center field.

### Decision variables:
-   Names of the players: Charles, Evan, Karl, Vincent (all different, 1 to 4)
-   Number of games played: 8games, 9games, 10games, 11games (all different, 1 to 4)
-   Positions played: centerfield, firstbase, shortstop, thirdbase (all different, 1 to 4)

### Constraints:
-   Evan played 9 games:
    This is a direct assignment constraint:
    Evan == 9games.

-   Vincent played first base:
    This is a direct assignment constraint:
    Vincent == firstbase.

-   The player who played third base played 2 more games than the person who played center field:
    For this, we will need to add a constraint for each possible assignment of games played by the player in third base and center field, such that the player in third base played 2 more games than the player in center field. So, the constraints will be of the form:
    g1 == thirdbase and g2 == centerfield => g1_to_int == g2_to_int + 2, for all g1, g2 in games played.

-   Charles played 2 more games than the player who played center field:
    For this, we will need to add a constraint for each possible assignment of games played by Charles and the player in center field, such that Charles played 2 more games than the player in center field. So, the constraints will be of the form:
    g1 == Charles and g2 == centerfield => g1_to_int == g2_to_int + 2, for all g1, g2 in games played.

-   Charles was either the boy who played 9 games or the person who played 10 games:
    This is a constraint that states that Charles played either 9 or 10 games, but not both. So:
    Xor([Charles == 9games, Charles == 10games]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Charles == 1, and 9games == 1, and centerfield == 1, then Charles played 9 games in center field.

### Decision variables:
-   Names of the players: Charles, Evan, Karl, Vincent (all different, 1 to 4)
-   Number of games played: 8games, 9games, 10games, 11games (all different, 1 to 4)
-   Positions played: centerfield, firstbase, shortstop, thirdbase (all different, 1 to 4)

### Constraints:
-   Evan played 9 games:
    This is a direct assignment constraint:
    Evan == 9games.

-   Vincent played first base:
    This is a direct assignment constraint:
    Vincent == firstbase.

-   The player who played third base played 2 more games than the person who played center field:
    For this, we will need to add a constraint for each possible assignment of games played by the player in third base and center field, such that the player in third base played 2 more games than the player in center field. So, the constraints will be of the form:
    g1 == thirdbase and g2 == centerfield => g1_to_int == g2_to_int + 2, for all g1, g2 in games played.

-   Charles played 2 more games than the player who played center field:
    For this, we will need to add a constraint for each possible assignment of games played by Charles and the player in center field, such that Charles played 2 more games than the player in center field. So, the constraints will be of the form:
    g1 == Charles and g2 == centerfield => g1_to_int == g2_to_int + 2, for all g1, g2 in games played.

-   Charles was either the boy who played 9 games or the person who played 10 games:
    This is a constraint that states that Charles played either 9 or 10 games, but not both. So:
    Xor([Charles == 9games, Charles == 10games]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, games played, and position)
# e.g. if charles == 1 and games9 == 1 and centerfield == 1, then Charles played 9 games in center field
charles, evan, karl, vincent = players = intvar(1, 4, shape=4)
games8, games9, games10, games11 = games = intvar(1, 4, shape=4)
centerfield, firstbase, shortstop, thirdbase = positions = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
games_to_int = {games8: 8, games9: 9, games10: 10, games11: 11}  # number of games
position_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def played_more_games(var1, var2, diff):
    """
    Formulate the constraint that var1 played diff more games than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(games_to_int[g1] == games_to_int[g2] + diff)
            for g1 in games for g2 in games]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(games)
m += AllDifferent(positions)

# Clue 1: Evan played 9 games:
m += evan == games9

# Clue 2: Vincent played first base:
m += vincent == firstbase

# Clue 3: The player who played third base played 2 more games than the person who played center field:
m += played_more_games(thirdbase, centerfield, 2)

# Clue 4: Charles played 2 more games than the player who played center field:
m += played_more_games(charles, centerfield, 2)

# Clue 5: Charles was either the boy who played 9 games or the person who played 10 games:
m += Xor([charles == games9, charles == games10])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Edmund paid 1 dollar less than the one who got the water.
The diner who paid $4 had the iced tea.
Angela paid more than the one who got the cream soda.
The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea.
The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer and Irene.

Entities:
names: Angela, Edmund, Homer, Irene
prices: $4, $5, $6, $7
drinks: cream soda, iced tea, root beer, water
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Angela == 1, and Price4 == 1, and CreamSoda == 1, then Angela paid $4 for the cream soda.

### Decision variables:
-   Names of the diners: Angela, Edmund, Homer, Irene (all different, 1 to 4)
-   Prices paid by the diners: Price4, Price5, Price6, Price7 (all different, 1 to 4)
-   Drinks ordered by the diners: CreamSoda, IcedTea, RootBeer, Water (all different, 1 to 4)

### Constraints:
-   Edmund paid 1 dollar less than the one who got the water:
    For this, we will need to add a constraint for each possible assignment of prices for Edmund and the water, such that Edmund's price is 1 less than the water's price. So, the constraints will be of the form:
    p1 == Edmund and p2 == Water => p1_to_int == p2_to_int - 1, for all p1, p2 in prices.

-   The diner who paid $4 had the iced tea:
    This is a direct assignment constraint:
    Price4 == IcedTea.

-   Angela paid more than the one who got the cream soda:
    For this, we will need to add a constraint for each possible assignment of prices for Angela and the cream soda, such that Angela's price is greater than the cream soda's price. So, the constraints will be of the form:
    p1 == Angela and p2 == CreamSoda => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea:
    This is a constraint that states that the diner who paid $5 is either the one who got the cream soda or the one who got the iced tea, but not both. So:
    Xor([Price5 == CreamSoda, Price5 == IcedTea]).

-   The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer, and Irene:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Price5, IcedTea, RootBeer, Irene]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Angela == 1, and Price4 == 1, and CreamSoda == 1, then Angela paid $4 for the cream soda.

### Decision variables:
-   Names of the diners: Angela, Edmund, Homer, Irene (all different, 1 to 4)
-   Prices paid by the diners: Price4, Price5, Price6, Price7 (all different, 1 to 4)
-   Drinks ordered by the diners: CreamSoda, IcedTea, RootBeer, Water (all different, 1 to 4)

### Constraints:
-   Edmund paid 1 dollar less than the one who got the water:
    For this, we will need to add a constraint for each possible assignment of prices for Edmund and the water, such that Edmund's price is 1 less than the water's price. So, the constraints will be of the form:
    p1 == Edmund and p2 == Water => p1_to_int == p2_to_int - 1, for all p1, p2 in prices.

-   The diner who paid $4 had the iced tea:
    This is a direct assignment constraint:
    Price4 == IcedTea.

-   Angela paid more than the one who got the cream soda:
    For this, we will need to add a constraint for each possible assignment of prices for Angela and the cream soda, such that Angela's price is greater than the cream soda's price. So, the constraints will be of the form:
    p1 == Angela and p2 == CreamSoda => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea:
    This is a constraint that states that the diner who paid $5 is either the one who got the cream soda or the one who got the iced tea, but not both. So:
    Xor([Price5 == CreamSoda, Price5 == IcedTea]).

-   The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer, and Irene:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Price5, IcedTea, RootBeer, Irene]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diner, price, and drink)
# e.g. if angela == 1 and price4 == 1 and cream_soda == 1, then Angela paid $4 for the cream soda
angela, edmund, homer, irene = diners = intvar(1, 4, shape=4)
price4, price5, price6, price7 = prices = intvar(1, 4, shape=4)
cream_soda, iced_tea, root_beer, water = drinks = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diner_to_int = None  # N/A
price_to_int = {price4: 4, price5: 5, price6: 6, price7: 7}  # in dollars
drink_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_less_than(var1, var2):
    """
    Formulate the constraint that var1 paid 1 dollar less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - 1)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diners)
m += AllDifferent(prices)
m += AllDifferent(drinks)

# Clue 1: Edmund paid 1 dollar less than the one who got the water:
m += paid_less_than(edmund, water)

# Clue 2: The diner who paid $4 had the iced tea:
m += price4 == iced_tea

# Clue 3: Angela paid more than the one who got the cream soda:
m += [((p1 == angela) & (p2 == cream_soda)).implies(price_to_int[p1] > price_to_int[p2)
      for p1 in prices for p2 in prices]

# Clue 4: The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea:
m += Xor([price5 == cream_soda, price5 == iced_tea])

# Clue 5: The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer, and Irene:
m += AllDifferent([price5, iced_tea, root_beer, irene])

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Ingram had 7 goals this season.
The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers.
Parrish scored 1 goal more than Quinn.
The player with 9 goals is from the Ice Hogs.
Ingram is either the player from the Checkers or the player with 6 goals.

Entities:
players: Ingram, Parrish, Quinn, Underwood
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Monsters
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ingram == 1, and 7Goals == 1, and Checkers == 1, then Ingram, the player from the Checkers, had 7 goals this season.

### Decision variables:
-   Names of the players: Ingram, Parrish, Quinn, Underwood (all different, 1 to 4)
-   Number of goals: 6, 7, 8, 9 (all different, 1 to 4)
-   Teams: Checkers, Comets, Ice Hogs, Monsters (all different, 1 to 4)

### Constraints:
-   Ingram had 7 goals this season:
    This is a direct assignment constraint:
    Ingram == 7Goals.

-   The four players are Underwood, the player from the Ice Hogs, the player from the Monsters, and the player from the Checkers:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Underwood, IceHogs, Monsters, Checkers]).

-   Parrish scored 1 goal more than Quinn:
    For this, we will need to add a constraint for each possible assignment of goals for Parrish and Quinn, such that Parrish's goals are 1 more than Quinn's goals. So, the constraints will be of the form:
    g1 == Parrish and g2 == Quinn => g1_to_int == g2_to_int + 1, for all g1, g2 in goals.

-   The player with 9 goals is from the Ice Hogs:
    This is a direct assignment constraint:
    IceHogs == 9Goals.

-   Ingram is either the player from the Checkers or the player with 6 goals:
    This is a constraint that states that Ingram is either the player from the Checkers or the player with 6 goals, but not both. So:
    Xor([Ingram == Checkers, Ingram == 6Goals]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ingram == 1, and 7Goals == 1, and Checkers == 1, then Ingram, the player from the Checkers, had 7 goals this season.

### Decision variables:
-   Names of the players: Ingram, Parrish, Quinn, Underwood (all different, 1 to 4)
-   Number of goals: 6, 7, 8, 9 (all different, 1 to 4)
-   Teams: Checkers, Comets, Ice Hogs, Monsters (all different, 1 to 4)

### Constraints:
-   Ingram had 7 goals this season:
    This is a direct assignment constraint:
    Ingram == 7Goals.

-   The four players are Underwood, the player from the Ice Hogs, the player from the Monsters, and the player from the Checkers:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Underwood, IceHogs, Monsters, Checkers]).

-   Parrish scored 1 goal more than Quinn:
    For this, we will need to add a constraint for each possible assignment of goals for Parrish and Quinn, such that Parrish's goals are 1 more than Quinn's goals. So, the constraints will be of the form:
    g1 == Parrish and g2 == Quinn => g1_to_int == g2_to_int + 1, for all g1, g2 in goals.

-   The player with 9 goals is from the Ice Hogs:
    This is a direct assignment constraint:
    IceHogs == 9Goals.

-   Ingram is either the player from the Checkers or the player with 6 goals:
    This is a constraint that states that Ingram is either the player from the Checkers or the player with 6 goals, but not both. So:
    Xor([Ingram == Checkers, Ingram == 6Goals]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, goals, and team)
# e.g. if ingram == 1 and goals7 == 1 and checkers == 1, then Ingram, the player from the Checkers, had 7 goals this season
ingram, parrish, quinn, underwood = players = intvar(1, 4, shape=4)
goals6, goals7, goals8, goals9 = goals = intvar(1, 4, shape=4)
checkers, comets, ice_hogs, monsters = teams = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
goals_to_int = {goals6: 6, goals7: 7, goals8: 8, goals9: 9}  # number of goals
team_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored more goals than var2 by diff.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goals_to_int[g1] == goals_to_int[g2] + diff)
            for g1 in goals for g2 in goals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(goals)
m += AllDifferent(teams)

# Clue 1: Ingram had 7 goals this season:
m += ingram == goals7

# Clue 2: The four players are Underwood, the player from the Ice Hogs, the player from the Monsters, and the player from the Checkers:
m += AllDifferent([underwood, ice_hogs, monsters, checkers])

# Clue 3: Parrish scored 1 goal more than Quinn:
m += scored_more_than(parrish, quinn, 1)

# Clue 4: The player with 9 goals is from the Ice Hogs:
m += ice_hogs == goals9

# Clue 5: Ingram is either the player from the Checkers or the player with 6 goals:
m += Xor([ingram == checkers, ingram == goals6])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Jorge is either the skydiver who wears the red suit or the jumper who started in 1982.
The skydiver who wears the pink suit started skydiving 1 year before Otis.
The jumper who wears the yellow suit started skydiving sometime after Philip.
The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit.
The jumper who wears the pink suit started skydiving 2 years before Shaun.

Entities:
names: Jorge, Otis, Philip, Shaun
years: 1982, 1983, 1984, 1985
suit colors: lime green, pink, red, yellow
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Jorge == 1, and LimeGreen == 1, and 1982 == 1, then Jorge is the skydiver who wears the lime green suit and started skydiving in 1982.

### Decision variables:
-   Names of the skydivers: Jorge, Otis, Philip, Shaun (all different, 1 to 4)
-   Starting years of skydiving: 1982, 1983, 1984, 1985 (all different, 1 to 4)
-   Suit colors: LimeGreen, Pink, Red, Yellow (all different, 1 to 4)

### Constraints:
-   Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
    This is a constraint that states that Jorge's suit color is either red or Jorge started skydiving in 1982, but not both. So:
    Xor([Jorge == Red, Jorge == 1982]).

-   The skydiver who wears the pink suit started skydiving 1 year before Otis:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Otis, such that the skydiver who wears the pink suit's starting year is 1 less than Otis's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Otis => y1_to_int == y2_to_int - 1, for all y1, y2 in starting years.

-   The jumper who wears the yellow suit started skydiving sometime after Philip:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the yellow suit and Philip, such that the skydiver who wears the yellow suit's starting year is greater than Philip's starting year. So, the constraints will be of the form:
    y1 == Yellow and y2 == Philip => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the lime green suit and the yellow suit, such that the skydiver who wears the lime green suit's starting year is greater than the skydiver who wears the yellow suit's starting year. So, the constraints will be of the form:
    y1 == LimeGreen and y2 == Yellow => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the pink suit started skydiving 2 years before Shaun:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Shaun, such that the skydiver who wears the pink suit's starting year is 2 less than Shaun's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Shaun => y1_to_int == y2_to_int - 2, for all y1, y2 in starting years.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Jorge == 1, and LimeGreen == 1, and 1982 == 1, then Jorge is the skydiver who wears the lime green suit and started skydiving in 1982.

### Decision variables:
-   Names of the skydivers: Jorge, Otis, Philip, Shaun (all different, 1 to 4)
-   Starting years of skydiving: 1982, 1983, 1984, 1985 (all different, 1 to 4)
-   Suit colors: LimeGreen, Pink, Red, Yellow (all different, 1 to 4)

### Constraints:
-   Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
    This is a constraint that states that Jorge's suit color is either red or Jorge started skydiving in 1982, but not both. So:
    Xor([Jorge == Red, Jorge == 1982]).

-   The skydiver who wears the pink suit started skydiving 1 year before Otis:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Otis, such that the skydiver who wears the pink suit's starting year is 1 less than Otis's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Otis => y1_to_int == y2_to_int - 1, for all y1, y2 in starting years.

-   The jumper who wears the yellow suit started skydiving sometime after Philip:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the yellow suit and Philip, such that the skydiver who wears the yellow suit's starting year is greater than Philip's starting year. So, the constraints will be of the form:
    y1 == Yellow and y2 == Philip => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the lime green suit and the yellow suit, such that the skydiver who wears the lime green suit's starting year is greater than the skydiver who wears the yellow suit's starting year. So, the constraints will be of the form:
    y1 == LimeGreen and y2 == Yellow => y1_to_int > y2_to_int, for all y1, y2 in starting years.

-   The jumper who wears the pink suit started skydiving 2 years before Shaun:
    For this, we will need to add a constraint for each possible assignment of the starting years for the skydivers who wear the pink suit and Shaun, such that the skydiver who wears the pink suit's starting year is 2 less than Shaun's starting year. So, the constraints will be of the form:
    y1 == Pink and y2 == Shaun => y1_to_int == y2_to_int - 2, for all y1, y2 in starting years.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of skydiver, starting year, and suit color)
# e.g. if jorge == 1 and lime_green == 1 and 1982 == 1, then Jorge is the skydiver who wears the lime green suit and started in 1982
jorge, otis, philip, shaun = skydivers = intvar(1, 4, shape=4)
year_1982, year_1983, year_1984, year_1985 = starting_years = intvar(1, 4, shape=4)
lime_green, pink, red, yellow = suit_colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
skydiver_to_int = None  # N/A
year_to_int = {year_1982: 1982, year_1983: 1983, year_1984: 1984, year_1985: 1985}  # in years
suit_color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2):
    """
    Formulate the constraint that var1 started after var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(year_to_int[s1] > year_to_int[s2])
            for s1 in starting_years for s2 in starting_years]


def started_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started exactly diff years after var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(year_to_int[s1] == year_to_int[s2] + diff)
            for s1 in starting_years for s2 in starting_years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(skydivers)
m += AllDifferent(starting_years)
m += AllDifferent(suit_colors)

# Clue 1: Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
m += Xor([jorge == red, jorge == year_1982])

# Clue 2: The skydiver who wears the pink suit started skydiving 1 year before Otis:
m += started_exactly_after_than(pink, otis, -1)

# Clue 3: The jumper who wears the yellow suit started skydiving sometime after Philip:
m += started_after_than(yellow, philip)

# Clue 4: The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
m += started_after_than(lime_green, yellow)

# Clue 5: The jumper who wears the pink suit started skydiving 2 years before Shaun:
m += started_exactly_after_than(pink, shaun, -2)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The variety that requires 190 degree water costs 1 dollar less than the variety that requires 195 degree water.
The Pouchong costs 1 dollar less than the Red Robe.
The Pouchong needs 195 degree water.
The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200 degree water and the tea that requires 190 degree water.

Entities:
teas: Ali Shan, Jin Xuan, Pouchong, Red Robe
prices: $4, $5, $6, $7
temperatures: 190 degree, 195 degree, 200 degree, 215 degree
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if AliShan == 1, and Price4 == 1, and Temp190 == 1, then Ali Shan costs $4 and requires 190-degree water.

### Decision variables:
-   Names of the teas: AliShan, JinXuan, Pouchong, RedRobe (all different, 1 to 4)
-   Prices of the teas: Price4, Price5, Price6, Price7 (all different, 1 to 4)
-   Water temperatures required: Temp190, Temp195, Temp200, Temp215 (all different, 1 to 4)

### Constraints:
-   The variety that requires 190-degree water costs 1 dollar less than the variety that requires 195-degree water:
    For this, we will need to add a constraint for each possible assignment of teas requiring 190-degree and 195-degree water, such that the tea requiring 190-degree water costs $1 less than the tea requiring 195-degree water. So, the constraints will be of the form:
    t1 == Temp190 and t2 == Temp195 => t1_to_int == t2_to_int - 1, for all t1, t2 in prices.

-   The Pouchong costs 1 dollar less than the Red Robe:
    For this, we will need to add a constraint for each possible assignment of prices for Pouchong and Red Robe, such that Pouchong costs $1 less than Red Robe. So, the constraints will be of the form:
    p1 == Pouchong and p2 == RedRobe => p1_to_int == p2_to_int - 1, for all p1, p2 in prices.

-   The Pouchong needs 195-degree water:
    This is a direct assignment constraint:
    Pouchong == Temp195.

-   The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200-degree water, and the tea that requires 190-degree water:
    This is a constraint that states the four teas are Ali Shan, the tea costing $6, the tea requiring 200-degree water, and the tea requiring 190-degree water. So, we will have:
    AliShan == 1, Price6 == 1, Temp200 == 1, Temp190 == 1.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if AliShan == 1, and Price4 == 1, and Temp190 == 1, then Ali Shan costs $4 and requires 190-degree water.

### Decision variables:
-   Names of the teas: AliShan, JinXuan, Pouchong, RedRobe (all different, 1 to 4)
-   Prices of the teas: Price4, Price5, Price6, Price7 (all different, 1 to 4)
-   Water temperatures required: Temp190, Temp195, Temp200, Temp215 (all different, 1 to 4)

### Constraints:
-   The variety that requires 190-degree water costs 1 dollar less than the variety that requires 195-degree water:
    For this, we will need to add a constraint for each possible assignment of teas requiring 190-degree and 195-degree water, such that the tea requiring 190-degree water costs $1 less than the tea requiring 195-degree water. So, the constraints will be of the form:
    t1 == Temp190 and t2 == Temp195 => t1_to_int == t2_to_int - 1, for all t1, t2 in prices.

-   The Pouchong costs 1 dollar less than the Red Robe:
    For this, we will need to add a constraint for each possible assignment of prices for Pouchong and Red Robe, such that Pouchong costs $1 less than Red Robe. So, the constraints will be of the form:
    p1 == Pouchong and p2 == RedRobe => p1_to_int == p2_to_int - 1, for all p1, p2 in prices.

-   The Pouchong needs 195-degree water:
    This is a direct assignment constraint:
    Pouchong == Temp195.

-   The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200-degree water, and the tea that requires 190-degree water:
    This is a constraint that states the four teas are Ali Shan, the tea costing $6, the tea requiring 200-degree water, and the tea requiring 190-degree water. So, we will have:
    AliShan == 1, Price6 == 1, Temp200 == 1, Temp190 == 1.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of tea, price, and temperature)
# e.g. if alishan == 1 and price4 == 1 and temp190 == 1, then Ali Shan costs $4 and requires 190-degree water
alishan, jinxuan, pouchong, redrobe = teas = intvar(1, 4, shape=4)
price4, price5, price6, price7 = prices = intvar(1, 4, shape=4)
temp190, temp195, temp200, temp215 = temperatures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
tea_to_int = None  # N/A
price_to_int = {price4: 4, price5: 5, price6: 6, price7: 7}  # in dollars
temp_to_int = {temp190: 190, temp195: 195, temp200: 200, temp215: 215}  # in degrees


# Helper functions (for formulating comparison constraints)
def costs_less_than(var1, var2):
    """
    Formulate the constraint that var1 costs 1 dollar less than var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(price_to_int[t1] == price_to_int[t2] - 1)
            for t1 in prices for t2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(teas)
m += AllDifferent(prices)
m += AllDifferent(temperatures)

# Clue 1: The variety that requires 190-degree water costs 1 dollar less than the variety that requires 195-degree water:
m += costs_less_than(temp190, temp195)

# Clue 2: The Pouchong costs 1 dollar less than the Red Robe:
m += costs_less_than(pouchong, redrobe)

# Clue 3: The Pouchong needs 195-degree water:
m += pouchong == temp195

# Clue 4: The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200-degree water, and the tea that requires 190-degree water:
m += alishan == 1
m += price6 == 1
m += temp200 == 1
m += temp190 == 1

```
False
False
False
Wrong: 4, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The flier leaving in April will bring shamrock.
The passenger with the rabbit's foot will leave 1 month after Troy.
The flier with the horseshoe will leave 1 month after Doug.
The flier with the horseshoe is either Peggy or the passenger leaving in January.

Entities:
fliers: Doug, Eloise, Peggy, Troy
months: January, February, March, April
lucky charms: coin, horseshoe, rabbit's foot, shamrock
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Doug == 1, and January == 1, and Coin == 1, then Doug is the flier leaving in January with a coin.

### Decision variables:
-   Names of the fliers: Doug, Eloise, Peggy, Troy (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Lucky charms: Coin, Horseshoe, RabbitFoot, Shamrock (all different, 1 to 4)

### Constraints:
-   The flier leaving in April will bring shamrock:
    This is a direct assignment constraint:
    April == Shamrock.

-   The passenger with the rabbit's foot will leave 1 month after Troy:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the passenger with the rabbit's foot and Troy, such that the passenger with the rabbit's foot's month of departure is 1 more than Troy's month of departure. So, the constraints will be of the form:
    m1 == RabbitFoot and m2 == Troy => m1_to_int == m2_to_int + 1, for all m1, m2 in months of departure.

-   The flier with the horseshoe will leave 1 month after Doug:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the flier with the horseshoe and Doug, such that the flier with the horseshoe's month of departure is 1 more than Doug's month of departure. So, the constraints will be of the form:
    m1 == Horseshoe and m2 == Doug => m1_to_int == m2_to_int + 1, for all m1, m2 in months of departure.

-   The flier with the horseshoe is either Peggy or the passenger leaving in January:
    This is a constraint that states that the flier with the horseshoe is either Peggy or the passenger leaving in January, but not both. So:
    Xor([Horseshoe == Peggy, Horseshoe == January]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Doug == 1, and January == 1, and Coin == 1, then Doug is the flier leaving in January with a coin.

### Decision variables:
-   Names of the fliers: Doug, Eloise, Peggy, Troy (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Lucky charms: Coin, Horseshoe, RabbitFoot, Shamrock (all different, 1 to 4)

### Constraints:
-   The flier leaving in April will bring shamrock:
    This is a direct assignment constraint:
    April == Shamrock.

-   The passenger with the rabbit's foot will leave 1 month after Troy:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the passenger with the rabbit's foot and Troy, such that the passenger with the rabbit's foot's month of departure is 1 more than Troy's month of departure. So, the constraints will be of the form:
    m1 == RabbitFoot and m2 == Troy => m1_to_int == m2_to_int + 1, for all m1, m2 in months of departure.

-   The flier with the horseshoe will leave 1 month after Doug:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the flier with the horseshoe and Doug, such that the flier with the horseshoe's month of departure is 1 more than Doug's month of departure. So, the constraints will be of the form:
    m1 == Horseshoe and m2 == Doug => m1_to_int == m2_to_int + 1, for all m1, m2 in months of departure.

-   The flier with the horseshoe is either Peggy or the passenger leaving in January:
    This is a constraint that states that the flier with the horseshoe is either Peggy or the passenger leaving in January, but not both. So:
    Xor([Horseshoe == Peggy, Horseshoe == January]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of flier, month, and lucky charm)
# e.g. if doug == 1 and january == 1 and coin == 1, then Doug is the flier leaving in January with a coin
doug, eloise, peggy, troy = fliers = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
coin, horseshoe, rabbit_foot, shamrock = lucky_charms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
flier_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
lucky_charm_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def leave_after_than(var1, var2):
    """
    Formulate the constraint that var1 leaves after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def leave_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(fliers)
m += AllDifferent(months)
m += AllDifferent(lucky_charms)

# Clue 1: The flier leaving in April will bring shamrock:
m += april == shamrock

# Clue 2: The passenger with the rabbit's foot will leave 1 month after Troy:
m += leave_exactly_after_than(rabbit_foot, troy, 1)

# Clue 3: The flier with the horseshoe will leave 1 month after Doug:
m += leave_exactly_after_than(horseshoe, doug, 1)

# Clue 4: The flier with the horseshoe is either Peggy or the passenger leaving in January:
m += Xor([horseshoe == peggy, horseshoe == january])

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Ronda's sandwich and the sandwich with havarti cheese are different sandwiches.
Ronda's order costs $5.
Lula's order is either the 3 dollars sandwich or the order that costs 5 dollars.
The sandwich with cheddar cheese costs less than the order with havarti cheese.
Yolanda's sandwich costs 2 dollars less than the order with swiss cheese.

Entities:
customers: Lula, Ronda, Sue, Yolanda
prices: $2, $3, $4, $5
cheeses: cheddar, havarti, muenster, swiss
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Lula == 1, and Price3 == 1, and Swiss == 1, then Lula's order is the $3 sandwich with Swiss cheese.

### Decision variables:
-   Names of the customers: Lula, Ronda, Sue, Yolanda (all different, 1 to 4)
-   Prices of the orders: Price2, Price3, Price4, Price5 (all different, 1 to 4)
-   Types of cheeses: Cheddar, Havarti, Muenster, Swiss (all different, 1 to 4)

### Constraints:
-   Ronda's sandwich and the sandwich with havarti cheese are different sandwiches:
    This is a constraint that states that Ronda's sandwich is not the one with havarti cheese, thus:
    Ronda != Havarti.

-   Ronda's order costs $5:
    This is a direct assignment constraint:
    Ronda == Price5.

-   Lula's order is either the $3 sandwich or the order that costs $5:
    This is a constraint that states that Lula's order is either the $3 sandwich or the $5 sandwich, but not both. So:
    Xor([Lula == Price3, Lula == Price5]).

-   The sandwich with cheddar cheese costs less than the order with havarti cheese:
    For this, we will need to add a constraint for each possible assignment of prices for cheddar and havarti cheese sandwiches, such that the cheddar cheese sandwich costs less than the havarti cheese sandwich. So, the constraints will be of the form:
    p1 == Cheddar and p2 == Havarti => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Yolanda's sandwich costs $2 less than the order with swiss cheese:
    For this, we will need to add a constraint for each possible assignment of prices for Yolanda's sandwich and the swiss cheese sandwich, such that Yolanda's sandwich costs $2 less than the swiss cheese sandwich. So, the constraints will be of the form:
    p1 == Yolanda and p2 == Swiss => p1_to_int == p2_to_int - 2, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Lula == 1, and Price3 == 1, and Swiss == 1, then Lula's order is the $3 sandwich with Swiss cheese.

### Decision variables:
-   Names of the customers: Lula, Ronda, Sue, Yolanda (all different, 1 to 4)
-   Prices of the orders: Price2, Price3, Price4, Price5 (all different, 1 to 4)
-   Types of cheeses: Cheddar, Havarti, Muenster, Swiss (all different, 1 to 4)

### Constraints:
-   Ronda's sandwich and the sandwich with havarti cheese are different sandwiches:
    This is a constraint that states that Ronda's sandwich is not the one with havarti cheese, thus:
    Ronda != Havarti.

-   Ronda's order costs $5:
    This is a direct assignment constraint:
    Ronda == Price5.

-   Lula's order is either the $3 sandwich or the order that costs $5:
    This is a constraint that states that Lula's order is either the $3 sandwich or the $5 sandwich, but not both. So:
    Xor([Lula == Price3, Lula == Price5]).

-   The sandwich with cheddar cheese costs less than the order with havarti cheese:
    For this, we will need to add a constraint for each possible assignment of prices for cheddar and havarti cheese sandwiches, such that the cheddar cheese sandwich costs less than the havarti cheese sandwich. So, the constraints will be of the form:
    p1 == Cheddar and p2 == Havarti => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Yolanda's sandwich costs $2 less than the order with swiss cheese:
    For this, we will need to add a constraint for each possible assignment of prices for Yolanda's sandwich and the swiss cheese sandwich, such that Yolanda's sandwich costs $2 less than the swiss cheese sandwich. So, the constraints will be of the form:
    p1 == Yolanda and p2 == Swiss => p1_to_int == p2_to_int - 2, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, price, and cheese)
# e.g. if lula == 1 and price3 == 1 and swiss == 1, then Lula's order is the $3 sandwich with Swiss cheese
lula, ronda, sue, yolanda = customers = intvar(1, 4, shape=4)
price2, price3, price4, price5 = prices = intvar(1, 4, shape=4)
cheddar, havarti, muenster, swiss = cheeses = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
price_to_int = {price2: 2, price3: 3, price4: 4, price5: 5}  # in dollars
cheese_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def cost_less_than(var1, var2):
    """
    Formulate the constraint that var1 costs less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


def cost_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(prices)
m += AllDifferent(cheeses)

# Clue 1: Ronda's sandwich and the sandwich with havarti cheese are different sandwiches:
m += ronda != havarti

# Clue 2: Ronda's order costs $5:
m += ronda == price5

# Clue 3: Lula's order is either the $3 sandwich or the order that costs $5:
m += Xor([lula == price3, lula == price5])

# Clue 4: The sandwich with cheddar cheese costs less than the order with havarti cheese:
m += cost_less_than(cheddar, havarti)

# Clue 5: Yolanda's sandwich costs $2 less than the order with swiss cheese:
m += cost_exactly_less_than(yolanda, swiss, 2)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The rocket developed by Vexatech will launch 1 month after the Exatris.
The rocket developed by SpaceZen will launch sometime after the Beritron.
The Worul is made by Techtrin.
The Exatris will launch in January.
The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp.

Entities:
rockets: Beritron, Cornick, Exatris, Worul
months: January, February, March, April
companies: Rubicorp, SpaceZen, Techtrin, Vexatech
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Beritron == 1, and January == 1, and Rubicorp == 1, then Beritron is the rocket that will launch in January and is developed by Rubicorp.

### Decision variables:
-   Names of the rockets: Beritron, Cornick, Exatris, Worul (all different, 1 to 4)
-   Months of launch: January, February, March, April (all different, 1 to 4)
-   Companies that developed the rockets: Rubicorp, SpaceZen, Techtrin, Vexatech (all different, 1 to 4)

### Constraints:
-   The rocket developed by Vexatech will launch 1 month after the Exatris:
    For this, we will need to add a constraint for each possible assignment of the months of launch for Vexatech's rocket and the Exatris, such that Vexatech's rocket's month of launch is 1 more than the Exatris's month of launch. So, the constraints will be of the form:
    m1 == Vexatech and m2 == Exatris => m1_to_int == m2_to_int + 1, for all m1, m2 in months of launch.

-   The rocket developed by SpaceZen will launch sometime after the Beritron:
    For this, we will need to add a constraint for each possible assignment of the months of launch for SpaceZen's rocket and the Beritron, such that SpaceZen's rocket's month of launch is greater than the Beritron's month of launch. So, the constraints will be of the form:
    m1 == SpaceZen and m2 == Beritron => m1_to_int > m2_to_int, for all m1, m2 in months of launch.

-   The Worul is made by Techtrin:
    This is a direct assignment constraint:
    Worul == Techtrin.

-   The Exatris will launch in January:
    This is a direct assignment constraint:
    Exatris == January.

-   The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp:
    This is a constraint that states that Cornick's month of launch is either April or the month of launch of the rocket developed by Rubicorp, but not both. So:
    Xor([Cornick == April, Cornick == Rubicorp]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Beritron == 1, and January == 1, and Rubicorp == 1, then Beritron is the rocket that will launch in January and is developed by Rubicorp.

### Decision variables:
-   Names of the rockets: Beritron, Cornick, Exatris, Worul (all different, 1 to 4)
-   Months of launch: January, February, March, April (all different, 1 to 4)
-   Companies that developed the rockets: Rubicorp, SpaceZen, Techtrin, Vexatech (all different, 1 to 4)

### Constraints:
-   The rocket developed by Vexatech will launch 1 month after the Exatris:
    For this, we will need to add a constraint for each possible assignment of the months of launch for Vexatech's rocket and the Exatris, such that Vexatech's rocket's month of launch is 1 more than the Exatris's month of launch. So, the constraints will be of the form:
    m1 == Vexatech and m2 == Exatris => m1_to_int == m2_to_int + 1, for all m1, m2 in months of launch.

-   The rocket developed by SpaceZen will launch sometime after the Beritron:
    For this, we will need to add a constraint for each possible assignment of the months of launch for SpaceZen's rocket and the Beritron, such that SpaceZen's rocket's month of launch is greater than the Beritron's month of launch. So, the constraints will be of the form:
    m1 == SpaceZen and m2 == Beritron => m1_to_int > m2_to_int, for all m1, m2 in months of launch.

-   The Worul is made by Techtrin:
    This is a direct assignment constraint:
    Worul == Techtrin.

-   The Exatris will launch in January:
    This is a direct assignment constraint:
    Exatris == January.

-   The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp:
    This is a constraint that states that Cornick's month of launch is either April or the month of launch of the rocket developed by Rubicorp, but not both. So:
    Xor([Cornick == April, Cornick == Rubicorp]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of rocket, month, and company)
# e.g. if beritron == 1 and january == 1 and rubicorp == 1, then Beritron will launch in January and developed by Rubicorp
beritron, cornick, exatris, worul = rockets = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
rubicorp, spacezen, techtrin, vexatech = companies = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
rocket_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
company_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def launched_after_than(var1, var2):
    """
    Formulate the constraint that var1 launched after var2.
    """
    return [((r1 == var1) & (r2 == var2)).implies(month_to_int[r1] > month_to_int[r2])
            for r1 in months for r2 in months]


def launched_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 launched exactly diff months after var2.
    """
    return [((r1 == var1) & (r2 == var2)).implies(month_to_int[r1] == month_to_int[r2] + diff)
            for r1 in months for r2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(rockets)
m += AllDifferent(months)
m += AllDifferent(companies)

# Clue 1: The rocket developed by Vexatech will launch 1 month after the Exatris:
m += launched_exactly_after_than(vexatech, exatris, 1)

# Clue 2: The rocket developed by SpaceZen will launch sometime after the Beritron:
m += launched_after_than(spacezen, beritron)

# Clue 3: The Worul is made by Techtrin:
m += worul == techtrin

# Clue 4: The Exatris will launch in January:
m += exatris == january

# Clue 5: The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp:
m += Xor([cornick == april, cornick == rubicorp])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The student who will major in Physics was awarded $5000 less than the student who will major in Biology.
Wilma will major in Mathematics.
Delores was awarded $5000 more than Anna.
Anna was awarded some amount less than the person who will major in Mathematics.
Wilma is either the person who received the 35000 dollars scholarship or the person who received the 25000 dollars scholarship.

Entities:
names: Anna, Delores, Wilma, Yvonne
scholarships: $25000, $30000, $35000, $40000
majors: Biology, Mathematics, Physics, Theology
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Anna == 1, and $25000 == 1, and Biology == 1, then Anna received a $25000 scholarship for majoring in Biology.

### Decision variables:
-   Names of the students: Anna, Delores, Wilma, Yvonne (all different, 1 to 4)
-   Scholarship amounts: $25000, $30000, $35000, $40000 (all different, 1 to 4)
-   Majors: Biology, Mathematics, Physics, Theology (all different, 1 to 4)

### Constraints:
-   The student who will major in Physics was awarded $5000 less than the student who will major in Biology:
    For this, we will need to add a constraint for each possible assignment of majors for Physics and Biology, such that the scholarship amount for Physics is $5000 less than the scholarship amount for Biology. So, the constraints will be of the form:
    m1 == Physics and m2 == Biology => m1_to_int == m2_to_int - 5000, for all m1, m2 in scholarship amounts.

-   Wilma will major in Mathematics:
    This is a direct assignment constraint:
    Wilma == Mathematics.

-   Delores was awarded $5000 more than Anna:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts for Delores and Anna, such that Delores's scholarship amount is $5000 more than Anna's scholarship amount. So, the constraints will be of the form:
    s1 == Delores and s2 == Anna => s1_to_int == s2_to_int + 5000, for all s1, s2 in scholarship amounts.

-   Anna was awarded some amount less than the person who will major in Mathematics:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts for Anna and the person majoring in Mathematics, such that Anna's scholarship amount is less than the scholarship amount of the person majoring in Mathematics. So, the constraints will be of the form:
    s1 == Anna and s2 == Mathematics => s1_to_int < s2_to_int, for all s1, s2 in scholarship amounts.

-   Wilma is either the person who received the $35000 scholarship or the person who received the $25000 scholarship:
    This is a constraint that states that Wilma received either $35000 or $25000, but not both. So:
    Xor([Wilma == $35000, Wilma == $25000]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Anna == 1, and $25000 == 1, and Biology == 1, then Anna received a $25000 scholarship for majoring in Biology.

### Decision variables:
-   Names of the students: Anna, Delores, Wilma, Yvonne (all different, 1 to 4)
-   Scholarship amounts: $25000, $30000, $35000, $40000 (all different, 1 to 4)
-   Majors: Biology, Mathematics, Physics, Theology (all different, 1 to 4)

### Constraints:
-   The student who will major in Physics was awarded $5000 less than the student who will major in Biology:
    For this, we will need to add a constraint for each possible assignment of majors for Physics and Biology, such that the scholarship amount for Physics is $5000 less than the scholarship amount for Biology. So, the constraints will be of the form:
    m1 == Physics and m2 == Biology => m1_to_int == m2_to_int - 5000, for all m1, m2 in scholarship amounts.

-   Wilma will major in Mathematics:
    This is a direct assignment constraint:
    Wilma == Mathematics.

-   Delores was awarded $5000 more than Anna:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts for Delores and Anna, such that Delores's scholarship amount is $5000 more than Anna's scholarship amount. So, the constraints will be of the form:
    s1 == Delores and s2 == Anna => s1_to_int == s2_to_int + 5000, for all s1, s2 in scholarship amounts.

-   Anna was awarded some amount less than the person who will major in Mathematics:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts for Anna and the person majoring in Mathematics, such that Anna's scholarship amount is less than the scholarship amount of the person majoring in Mathematics. So, the constraints will be of the form:
    s1 == Anna and s2 == Mathematics => s1_to_int < s2_to_int, for all s1, s2 in scholarship amounts.

-   Wilma is either the person who received the $35000 scholarship or the person who received the $25000 scholarship:
    This is a constraint that states that Wilma received either $35000 or $25000, but not both. So:
    Xor([Wilma == $35000, Wilma == $25000]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, scholarship, and major)
# e.g. if anna == 1 and $25000 == 1 and biology == 1, then Anna received a $25000 scholarship for majoring in Biology
anna, delores, wilma, yvonne = students = intvar(1, 4, shape=4)
$25000, $30000, $35000, $40000 = scholarships = intvar(1, 4, shape=4)
biology, mathematics, physics, theology = majors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
scholarship_to_int = {25000: 25000, 30000: 30000, 35000: 35000, 40000: 40000}  # in dollars
major_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def awarded_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was awarded diff dollars less than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] == scholarship_to_int[s2] - diff)
            for s1 in scholarships for s2 in scholarships]


def awarded_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was awarded diff dollars more than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] == scholarship_to_int[s2] + diff)
            for s1 in scholarships for s2 in scholarships]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(scholarships)
m += AllDifferent(majors)

# Clue 1: The student who will major in Physics was awarded $5000 less than the student who will major in Biology:
m += awarded_less_than(physics, biology, 5000)

# Clue 2: Wilma will major in Mathematics:
m += wilma == mathematics

# Clue 3: Delores was awarded $5000 more than Anna:
m += awarded_more_than(delores, anna, 5000)

# Clue 4: Anna was awarded some amount less than the person who will major in Mathematics:
m += awarded_less_than(anna, mathematics, 0)

# Clue 5: Wilma is either the person who received the $35000 scholarship or the person who received the $25000 scholarship:
m += Xor([wilma == 35000, wilma == 25000])

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase.
Otis's purchase was either the peacock butterfly or the swallowtail butterfly.
Brandon's purchase cost 30 dollars less than Otis's purchase.
Rena's purchase cost 15 dollars less than the swallowtail butterfly.
The insect that sold for $75 was the torturix butterfly.

Entities:
winners: Brandon, Otis, Phillip, Rena
prices: $45, $60, $75, $90
butterflies: peacock, peppered, swallowtail, torturix
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Brandon == 1, and Price45 == 1, and Peacock == 1, then Brandon's purchase was the peacock butterfly that cost $45.

### Decision variables:
-   Names of the winners: Brandon, Otis, Phillip, Rena (all different, 1 to 4)
-   Prices of the purchases: Price45, Price60, Price75, Price90 (all different, 1 to 4)
-   Types of butterflies: Peacock, Peppered, Swallowtail, Torturix (all different, 1 to 4)

### Constraints:
-   The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase:
    This is a constraint that states that each of these entities corresponds to a different butterfly, thus:
    AllDifferent([Swallowtail, Rena, Price90, Phillip]).

-   Otis's purchase was either the peacock butterfly or the swallowtail butterfly:
    This is a constraint that states that Otis's purchase is either the peacock butterfly or the swallowtail butterfly, but not both. So:
    Xor([Otis == Peacock, Otis == Swallowtail]).

-   Brandon's purchase cost 30 dollars less than Otis's purchase:
    For this, we will need to add a constraint for each possible assignment of prices for Brandon and Otis, such that Brandon's purchase price is 30 less than Otis's purchase price. So, the constraints will be of the form:
    p1 == Brandon and p2 == Otis => p1_to_int == p2_to_int - 30, for all p1, p2 in prices.

-   Rena's purchase cost 15 dollars less than the swallowtail butterfly:
    For this, we will need to add a constraint for each possible assignment of prices for Rena and the swallowtail butterfly, such that Rena's purchase price is 15 less than the swallowtail butterfly's price. So, the constraints will be of the form:
    p1 == Rena and p2 == Swallowtail => p1_to_int == p2_to_int - 15, for all p1, p2 in prices.

-   The insect that sold for $75 was the torturix butterfly:
    This is a direct assignment constraint:
    Price75 == Torturix.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Brandon == 1, and Price45 == 1, and Peacock == 1, then Brandon's purchase was the peacock butterfly that cost $45.

### Decision variables:
-   Names of the winners: Brandon, Otis, Phillip, Rena (all different, 1 to 4)
-   Prices of the purchases: Price45, Price60, Price75, Price90 (all different, 1 to 4)
-   Types of butterflies: Peacock, Peppered, Swallowtail, Torturix (all different, 1 to 4)

### Constraints:
-   The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase:
    This is a constraint that states that each of these entities corresponds to a different butterfly, thus:
    AllDifferent([Swallowtail, Rena, Price90, Phillip]).

-   Otis's purchase was either the peacock butterfly or the swallowtail butterfly:
    This is a constraint that states that Otis's purchase is either the peacock butterfly or the swallowtail butterfly, but not both. So:
    Xor([Otis == Peacock, Otis == Swallowtail]).

-   Brandon's purchase cost 30 dollars less than Otis's purchase:
    For this, we will need to add a constraint for each possible assignment of prices for Brandon and Otis, such that Brandon's purchase price is 30 less than Otis's purchase price. So, the constraints will be of the form:
    p1 == Brandon and p2 == Otis => p1_to_int == p2_to_int - 30, for all p1, p2 in prices.

-   Rena's purchase cost 15 dollars less than the swallowtail butterfly:
    For this, we will need to add a constraint for each possible assignment of prices for Rena and the swallowtail butterfly, such that Rena's purchase price is 15 less than the swallowtail butterfly's price. So, the constraints will be of the form:
    p1 == Rena and p2 == Swallowtail => p1_to_int == p2_to_int - 15, for all p1, p2 in prices.

-   The insect that sold for $75 was the torturix butterfly:
    This is a direct assignment constraint:
    Price75 == Torturix.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of winner, price, and butterfly)
# e.g. if brandon == 1 and price45 == 1 and peacock == 1, then Brandon's purchase was the peacock butterfly that cost $45
brandon, otis, phillip, rena = winners = intvar(1, 4, shape=4)
price45, price60, price75, price90 = prices = intvar(1, 4, shape=4)
peacock, peppered, swallowtail, torturix = butterflies = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
winner_to_int = None  # N/A
price_to_int = {price45: 45, price60: 60, price75: 75, price90: 90}  # in dollars
butterfly_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def cost_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 cost diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(winners)
m += AllDifferent(prices)
m += AllDifferent(butterflies)

# Clue 1: The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase:
m += AllDifferent([swallowtail, rena, price90, phillip])

# Clue 2: Otis's purchase was either the peacock butterfly or the swallowtail butterfly:
m += Xor([otis == peacock, otis == swallowtail])

# Clue 3: Brandon's purchase cost 30 dollars less than Otis's purchase:
m += cost_less_than(brandon, otis, 30)

# Clue 4: Rena's purchase cost 15 dollars less than the swallowtail butterfly:
m += cost_less_than(rena, swallowtail, 15)

# Clue 5: The insect that sold for $75 was the torturix butterfly:
m += price75 == torturix

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The ambassador with the 9 day visit will leave sometime after Fitzgerald.
Quinn will leave 2 months after Bender.
The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald.
Quinn will leave 1 month before the ambassador with the 7 day visit.

Entities:
diplomats: Bender, Fitzgerald, Owens, Quinn
months: January, February, March, April
durations: 2 day, 3 day, 7 day, 9 day
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bender == 1, and January == 1, and Day2 == 1, then Bender is the diplomat leaving in January with a 2-day visit.

### Decision variables:
-   Names of the diplomats: Bender, Fitzgerald, Owens, Quinn (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Visit durations: Day2, Day3, Day7, Day9 (all different, 1 to 4)

### Constraints:
-   The ambassador with the 9-day visit will leave sometime after Fitzgerald:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the ambassador with the 9-day visit and Fitzgerald, such that the ambassador with the 9-day visit's month of departure is greater than Fitzgerald's month of departure. So, the constraints will be of the form:
    m1 == Day9 and m2 == Fitzgerald => m1_to_int > m2_to_int, for all m1, m2 in months of departure.

-   Quinn will leave 2 months after Bender:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and Bender, such that Quinn's month of departure is 2 more than Bender's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Bender => m1_to_int == m2_to_int + 2, for all m1, m2 in months of departure.

-   The person leaving in January is either the ambassador with the 3-day visit or Fitzgerald:
    This is a constraint that states that the person leaving in January is either the ambassador with the 3-day visit or Fitzgerald, but not both. So:
    Xor([January == Day3, January == Fitzgerald]).

-   Quinn will leave 1 month before the ambassador with the 7-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and the ambassador with the 7-day visit, such that Quinn's month of departure is 1 less than the ambassador with the 7-day visit's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Day7 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bender == 1, and January == 1, and Day2 == 1, then Bender is the diplomat leaving in January with a 2-day visit.

### Decision variables:
-   Names of the diplomats: Bender, Fitzgerald, Owens, Quinn (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Visit durations: Day2, Day3, Day7, Day9 (all different, 1 to 4)

### Constraints:
-   The ambassador with the 9-day visit will leave sometime after Fitzgerald:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the ambassador with the 9-day visit and Fitzgerald, such that the ambassador with the 9-day visit's month of departure is greater than Fitzgerald's month of departure. So, the constraints will be of the form:
    m1 == Day9 and m2 == Fitzgerald => m1_to_int > m2_to_int, for all m1, m2 in months of departure.

-   Quinn will leave 2 months after Bender:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and Bender, such that Quinn's month of departure is 2 more than Bender's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Bender => m1_to_int == m2_to_int + 2, for all m1, m2 in months of departure.

-   The person leaving in January is either the ambassador with the 3-day visit or Fitzgerald:
    This is a constraint that states that the person leaving in January is either the ambassador with the 3-day visit or Fitzgerald, but not both. So:
    Xor([January == Day3, January == Fitzgerald]).

-   Quinn will leave 1 month before the ambassador with the 7-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Quinn and the ambassador with the 7-day visit, such that Quinn's month of departure is 1 less than the ambassador with the 7-day visit's month of departure. So, the constraints will be of the form:
    m1 == Quinn and m2 == Day7 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diplomat, month, and duration)
# e.g. if bender == 1 and january == 1 and day2 == 1, then Bender will leave in January with a 2-day visit
bender, fitzgerald, owens, quinn = diplomats = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
day2, day3, day7, day9 = durations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diplomat_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
duration_to_int = {day2: 2, day3: 3, day7: 7, day9: 9}  # in days


# Helper functions (for formulating comparison constraints)
def leave_after_than(var1, var2):
    """
    Formulate the constraint that var1 leaves after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def leave_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diplomats)
m += AllDifferent(months)
m += AllDifferent(durations)

# Clue 1: The ambassador with the 9-day visit will leave sometime after Fitzgerald:
m += leave_after_than(day9, fitzgerald)

# Clue 2: Quinn will leave 2 months after Bender:
m += leave_exactly_after_than(quinn, bender, 2)

# Clue 3: The person leaving in January is either the ambassador with the 3-day visit or Fitzgerald:
m += Xor([january == day3, january == fitzgerald])

# Clue 4: Quinn will leave 1 month before the ambassador with the 7-day visit:
m += leave_exactly_after_than(quinn, day7, -1)

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The person who came in at 8:00am asked for wheat bread.
Tricia came in a half-hour after Ora.
Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am.
Of the customer who ordered wheat bread; and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia.

Entities:
breads: flatbread, pumpernickel, rye bread, wheat bread
times: 7:00am, 7:30am, 8:00am, 8:30am
customers: Felicia, Isabel, Ora, Tricia
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Felicia == 1, and 7:00am == 1, and flatbread == 1, then Felicia came in at 7:00am and ordered flatbread.

### Decision variables:
-   Names of the customers: Felicia, Isabel, Ora, Tricia (all different, 1 to 4)
-   Times of arrival: 7:00am, 7:30am, 8:00am, 8:30am (all different, 1 to 4)
-   Types of bread ordered: flatbread, pumpernickel, rye bread, wheat bread (all different, 1 to 4)

### Constraints:
-   The person who came in at 8:00am asked for wheat bread:
    This is a direct assignment constraint:
    8:00am == wheat bread.

-   Tricia came in a half-hour after Ora:
    For this, we will need to add a constraint for each possible assignment of the times of arrival for Tricia and Ora, such that Tricia's arrival time is half an hour after Ora's arrival time. So, the constraints will be of the form:
    t1 == Tricia and t2 == Ora => t1_to_int == t2_to_int + 1, for all t1, t2 in times of arrival.

-   Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am:
    This is a constraint that states that Felicia and the customer who ordered flatbread have different arrival times, one at 7:30am and the other at 7:00am. So:
    (Felicia == 7:30am and flatbread == 7:00am) or (Felicia == 7:00am and flatbread == 7:30am).

-   Of the customer who ordered wheat bread and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia:
    This is a constraint that states that the customer who ordered wheat bread and the person who ordered pumpernickel have different arrival times, one at 8:30am and the other being Tricia. So:
    (8:30am == wheat bread and Tricia == pumpernickel) or (8:30am == pumpernickel and Tricia == wheat bread).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Felicia == 1, and 7:00am == 1, and flatbread == 1, then Felicia came in at 7:00am and ordered flatbread.

### Decision variables:
-   Names of the customers: Felicia, Isabel, Ora, Tricia (all different, 1 to 4)
-   Times of arrival: 7:00am, 7:30am, 8:00am, 8:30am (all different, 1 to 4)
-   Types of bread ordered: flatbread, pumpernickel, rye bread, wheat bread (all different, 1 to 4)

### Constraints:
-   The person who came in at 8:00am asked for wheat bread:
    This is a direct assignment constraint:
    8:00am == wheat bread.

-   Tricia came in a half-hour after Ora:
    For this, we will need to add a constraint for each possible assignment of the times of arrival for Tricia and Ora, such that Tricia's arrival time is half an hour after Ora's arrival time. So, the constraints will be of the form:
    t1 == Tricia and t2 == Ora => t1_to_int == t2_to_int + 1, for all t1, t2 in times of arrival.

-   Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am:
    This is a constraint that states that Felicia and the customer who ordered flatbread have different arrival times, one at 7:30am and the other at 7:00am. So:
    (Felicia == 7:30am and flatbread == 7:00am) or (Felicia == 7:00am and flatbread == 7:30am).

-   Of the customer who ordered wheat bread and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia:
    This is a constraint that states that the customer who ordered wheat bread and the person who ordered pumpernickel have different arrival times, one at 8:30am and the other being Tricia. So:
    (8:30am == wheat bread and Tricia == pumpernickel) or (8:30am == pumpernickel and Tricia == wheat bread).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, time, and bread)
# e.g. if felicia == 1 and 7am == 1 and flatbread == 1, then Felicia came in at 7:00am and ordered flatbread
felicia, isabel, ora, tricia = customers = intvar(1, 4, shape=4)
_7am, _730am, _8am, _830am = times = intvar(1, 4, shape=4)
flatbread, pumpernickel, rye_bread, wheat_bread = breads = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
time_to_int = {_7am: 7, _730am: 7.5, _8am: 8, _830am: 8.5}  # in hours
bread_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def half_hour_after(var1, var2):
    """
    Formulate the constraint that var1 is half an hour after var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] == time_to_int[t2] + 0.5)
            for t1 in times for t2 in times]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(times)
m += AllDifferent(breads)

# Clue 1: The person who came in at 8:00am asked for wheat bread:
m += _8am == wheat_bread

# Clue 2: Tricia came in a half-hour after Ora:
m += half_hour_after(tricia, ora)

# Clue 3: Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am:
m += ((felicia == _730am) & (flatbread == _7am)) | ((felicia == _7am) & (flatbread == _730am))

# Clue 4: Of the customer who ordered wheat bread and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia:
m += ((_830am == wheat_bread) & (tricia == pumpernickel)) | ((_830am == pumpernickel) & (tricia == wheat_bread))

```
True
True
True
Wrong: 2, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The 75 million year old fossil costs 500 dollars less than the pilodontus.
The senosaurus is 85 million years old.
The 75 million year old fossil costs 500 dollars less than the 78 million year old fossil.
The 75 million year old fossil costs less than the archadon.
The 69 million year old fossil costs 250 dollars more than the 78 million year old fossil.

Entities:
dinosaurs: archadon, mirasaurus, pilodontus, senosaurus
price: $500, $750, $1000, $1250
ages: 69 million, 75 million, 78 million, 85 million
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Archadon == 1, and Price500 == 1, and Age69 == 1, then Archadon is the dinosaur that costs $500 and is 69 million years old.

### Decision variables:
-   Names of the dinosaurs: Archadon, Mirasaurus, Pilodontus, Senosaurus (all different, 1 to 4)
-   Prices of the fossils: Price500, Price750, Price1000, Price1250 (all different, 1 to 4)
-   Ages of the fossils: Age69, Age75, Age78, Age85 (all different, 1 to 4)

### Constraints:
-   The 75 million year old fossil costs $500 less than the Pilodontus:
    For this, we will need to add a constraint for each possible assignment of the prices for the 75 million year old fossil and the Pilodontus, such that the price of the 75 million year old fossil is $500 less than the Pilodontus. So, the constraints will be of the form:
    p1 == Age75 and p2 == Pilodontus => p1_to_int == p2_to_int - 500, for all p1, p2 in prices.

-   The Senosaurus is 85 million years old:
    This is a direct assignment constraint:
    Senosaurus == Age85.

-   The 75 million year old fossil costs $500 less than the 78 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of the prices for the 75 million year old fossil and the 78 million year old fossil, such that the price of the 75 million year old fossil is $500 less than the 78 million year old fossil. So, the constraints will be of the form:
    p1 == Age75 and p2 == Age78 => p1_to_int == p2_to_int - 500, for all p1, p2 in prices.

-   The 75 million year old fossil costs less than the Archadon:
    For this, we will need to add a constraint for each possible assignment of the prices for the 75 million year old fossil and the Archadon, such that the price of the 75 million year old fossil is less than the Archadon. So, the constraints will be of the form:
    p1 == Age75 and p2 == Archadon => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The 69 million year old fossil costs $250 more than the 78 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of the prices for the 69 million year old fossil and the 78 million year old fossil, such that the price of the 69 million year old fossil is $250 more than the 78 million year old fossil. So, the constraints will be of the form:
    p1 == Age69 and p2 == Age78 => p1_to_int == p2_to_int + 250, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Archadon == 1, and Price500 == 1, and Age69 == 1, then Archadon is the dinosaur that costs $500 and is 69 million years old.

### Decision variables:
-   Names of the dinosaurs: Archadon, Mirasaurus, Pilodontus, Senosaurus (all different, 1 to 4)
-   Prices of the fossils: Price500, Price750, Price1000, Price1250 (all different, 1 to 4)
-   Ages of the fossils: Age69, Age75, Age78, Age85 (all different, 1 to 4)

### Constraints:
-   The 75 million year old fossil costs $500 less than the Pilodontus:
    For this, we will need to add a constraint for each possible assignment of the prices for the 75 million year old fossil and the Pilodontus, such that the price of the 75 million year old fossil is $500 less than the Pilodontus. So, the constraints will be of the form:
    p1 == Age75 and p2 == Pilodontus => p1_to_int == p2_to_int - 500, for all p1, p2 in prices.

-   The Senosaurus is 85 million years old:
    This is a direct assignment constraint:
    Senosaurus == Age85.

-   The 75 million year old fossil costs $500 less than the 78 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of the prices for the 75 million year old fossil and the 78 million year old fossil, such that the price of the 75 million year old fossil is $500 less than the 78 million year old fossil. So, the constraints will be of the form:
    p1 == Age75 and p2 == Age78 => p1_to_int == p2_to_int - 500, for all p1, p2 in prices.

-   The 75 million year old fossil costs less than the Archadon:
    For this, we will need to add a constraint for each possible assignment of the prices for the 75 million year old fossil and the Archadon, such that the price of the 75 million year old fossil is less than the Archadon. So, the constraints will be of the form:
    p1 == Age75 and p2 == Archadon => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The 69 million year old fossil costs $250 more than the 78 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of the prices for the 69 million year old fossil and the 78 million year old fossil, such that the price of the 69 million year old fossil is $250 more than the 78 million year old fossil. So, the constraints will be of the form:
    p1 == Age69 and p2 == Age78 => p1_to_int == p2_to_int + 250, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of dinosaur, price, and age)
# e.g. if archadon == 1 and price500 == 1 and age69 == 1, then Archadon costs $500 and is 69 million years old
archadon, mirasaurus, pilodontus, senosaurus = dinosaurs = intvar(1, 4, shape=4)
price500, price750, price1000, price1250 = prices = intvar(1, 4, shape=4)
age69, age75, age78, age85 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
dinosaur_to_int = None  # N/A
price_to_int = {price500: 500, price750: 750, price1000: 1000, price1250: 1250}  # in dollars
age_to_int = {age69: 69, age75: 75, age78: 78, age85: 85}  # in million years


# Helper functions (for formulating comparison constraints)
def costs_less_than(var1, var2):
    """
    Formulate the constraint that var1 costs less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


def costs_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(dinosaurs)
m += AllDifferent(prices)
m += AllDifferent(ages)

# Clue 1: The 75 million year old fossil costs $500 less than the Pilodontus:
m += costs_exactly_less_than(age75, pilodontus, 500)

# Clue 2: The Senosaurus is 85 million years old:
m += senosaurus == age85

# Clue 3: The 75 million year old fossil costs $500 less than the 78 million year old fossil:
m += costs_exactly_less_than(age75, age78, 500)

# Clue 4: The 75 million year old fossil costs less than the Archadon:
m += costs_less_than(age75, archadon)

# Clue 5: The 69 million year old fossil costs $250 more than the 78 million year old fossil:
m += costs_exactly_less_than(age69, age78, 250)

```
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Henrietta's task starts 2 hours after Glenn's job.
Glenn's task is the dining room.
Glenn's chore starts 1 hour after the mud room assignment.
Henrietta's task is the living room.
The mud room assignment starts sometime before Willie's assignment.

Entities:
children: Glenn, Henrietta, Olivia, Willie
times: 8:00am, 9:00am, 10:00am, 11:00am
rooms: dining room, laundry room, living room, mud room
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Glenn == 1, and 8:00am == 1, and dining room == 1, then Glenn's task is in the dining room starting at 8:00 am.

### Decision variables:
-   Names of the children: Glenn, Henrietta, Olivia, Willie (all different, 1 to 4)
-   Times of the tasks: 8:00am, 9:00am, 10:00am, 11:00am (all different, 1 to 4)
-   Rooms for the tasks: dining room, laundry room, living room, mud room (all different, 1 to 4)

### Constraints:
-   Henrietta's task starts 2 hours after Glenn's job:
    For this, we will need to add a constraint for each possible assignment of times for Henrietta and Glenn, such that Henrietta's task time is 2 hours after Glenn's task time. So, the constraints will be of the form:
    t1 == Henrietta and t2 == Glenn => t1_to_int == t2_to_int + 2, for all t1, t2 in times.

-   Glenn's task is the dining room:
    This is a direct assignment constraint:
    Glenn == dining room.

-   Glenn's chore starts 1 hour after the mud room assignment:
    For this, we will need to add a constraint for each possible assignment of times for Glenn and the mud room assignment, such that Glenn's task time is 1 hour after the mud room assignment time. So, the constraints will be of the form:
    t1 == Glenn and t2 == mud room => t1_to_int == t2_to_int + 1, for all t1, t2 in times.

-   Henrietta's task is the living room:
    This is a direct assignment constraint:
    Henrietta == living room.

-   The mud room assignment starts sometime before Willie's assignment:
    For this, we will need to add a constraint for each possible assignment of times for the mud room assignment and Willie's assignment, such that the mud room assignment time is less than Willie's assignment time. So, the constraints will be of the form:
    t1 == mud room and t2 == Willie => t1_to_int < t2_to_int, for all t1, t2 in times.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Glenn == 1, and 8:00am == 1, and dining room == 1, then Glenn's task is in the dining room starting at 8:00 am.

### Decision variables:
-   Names of the children: Glenn, Henrietta, Olivia, Willie (all different, 1 to 4)
-   Times of the tasks: 8:00am, 9:00am, 10:00am, 11:00am (all different, 1 to 4)
-   Rooms for the tasks: dining room, laundry room, living room, mud room (all different, 1 to 4)

### Constraints:
-   Henrietta's task starts 2 hours after Glenn's job:
    For this, we will need to add a constraint for each possible assignment of times for Henrietta and Glenn, such that Henrietta's task time is 2 hours after Glenn's task time. So, the constraints will be of the form:
    t1 == Henrietta and t2 == Glenn => t1_to_int == t2_to_int + 2, for all t1, t2 in times.

-   Glenn's task is the dining room:
    This is a direct assignment constraint:
    Glenn == dining room.

-   Glenn's chore starts 1 hour after the mud room assignment:
    For this, we will need to add a constraint for each possible assignment of times for Glenn and the mud room assignment, such that Glenn's task time is 1 hour after the mud room assignment time. So, the constraints will be of the form:
    t1 == Glenn and t2 == mud room => t1_to_int == t2_to_int + 1, for all t1, t2 in times.

-   Henrietta's task is the living room:
    This is a direct assignment constraint:
    Henrietta == living room.

-   The mud room assignment starts sometime before Willie's assignment:
    For this, we will need to add a constraint for each possible assignment of times for the mud room assignment and Willie's assignment, such that the mud room assignment time is less than Willie's assignment time. So, the constraints will be of the form:
    t1 == mud room and t2 == Willie => t1_to_int < t2_to_int, for all t1, t2 in times.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of child, time, and room)
# e.g. if glenn == 1 and time8 == 1 and dining_room == 1, then Glenn's task is in the dining room starting at 8:00 am
glenn, henrietta, olivia, willie = children = intvar(1, 4, shape=4)
time8, time9, time10, time11 = times = intvar(1, 4, shape=4)
dining_room, laundry_room, living_room, mud_room = rooms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
child_to_int = None  # N/A
time_to_int = {time8: 8, time9: 9, time10: 10, time11: 11}  # in hours
room_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts diff hours after var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] == time_to_int[t2] + diff)
            for t1 in times for t2 in times]


def starts_before_than(var1, var2):
    """
    Formulate the constraint that var1 starts before var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] < time_to_int[t2])
            for t1 in times for t2 in times]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(children)
m += AllDifferent(times)
m += AllDifferent(rooms)

# Clue 1: Henrietta's task starts 2 hours after Glenn's job:
m += starts_after_than(henrietta, glenn, 2)

# Clue 2: Glenn's task is the dining room:
m += glenn == dining_room

# Clue 3: Glenn's chore starts 1 hour after the mud room assignment:
m += starts_after_than(glenn, mud_room, 1)

# Clue 4: Henrietta's task is the living room:
m += henrietta == living_room

# Clue 5: The mud room assignment starts sometime before Willie's assignment:
m += starts_before_than(mud_room, willie)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Mr. Ayers will dive on July 14.
Mr. Drake will dive 1 day after the diver going out with Hilda.
The customer going out on July 14 will go out with Hilda.
The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14.
The customer going out with Nadine will dive 1 day before Mr. Ayers.

Entities:
customers: Mr. Ayers, Mr. Drake, Mr. Erickson, Mr. Gallegos
dates: July 13, July 14, July 15, July 16
guides: Hilda, Jorge, Nadine, Vicki
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if MrAyers == 1, and July14 == 1, and Hilda == 1, then Mr. Ayers will dive on July 14 with Hilda.

### Decision variables:
-   Names of the customers: MrAyers, MrDrake, MrErickson, MrGallegos (all different, 1 to 4)
-   Dates of the dives: July13, July14, July15, July16 (all different, 1 to 4)
-   Names of the guides: Hilda, Jorge, Nadine, Vicki (all different, 1 to 4)

### Constraints:
-   Mr. Ayers will dive on July 14:
    This is a direct assignment constraint:
    MrAyers == July14.

-   Mr. Drake will dive 1 day after the diver going out with Hilda:
    For this, we will need to add a constraint for each possible assignment of the dates for Mr. Drake and the diver going out with Hilda, such that Mr. Drake's dive date is 1 more than Hilda's dive date. So, the constraints will be of the form:
    d1 == MrDrake and d2 == Hilda => d1_to_int == d2_to_int + 1, for all d1, d2 in dates.

-   The customer going out on July 14 will go out with Hilda:
    This is a direct assignment constraint:
    July14 == Hilda.

-   The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14:
    This is a constraint that states that the customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14, but not both. So:
    Xor([Vicki == MrGallegos, Vicki == July14]).

-   The customer going out with Nadine will dive 1 day before Mr. Ayers:
    For this, we will need to add a constraint for each possible assignment of the dates for the customer going out with Nadine and Mr. Ayers, such that the customer going out with Nadine's dive date is 1 less than Mr. Ayers's dive date. So, the constraints will be of the form:
    d1 == Nadine and d2 == MrAyers => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if MrAyers == 1, and July14 == 1, and Hilda == 1, then Mr. Ayers will dive on July 14 with Hilda.

### Decision variables:
-   Names of the customers: MrAyers, MrDrake, MrErickson, MrGallegos (all different, 1 to 4)
-   Dates of the dives: July13, July14, July15, July16 (all different, 1 to 4)
-   Names of the guides: Hilda, Jorge, Nadine, Vicki (all different, 1 to 4)

### Constraints:
-   Mr. Ayers will dive on July 14:
    This is a direct assignment constraint:
    MrAyers == July14.

-   Mr. Drake will dive 1 day after the diver going out with Hilda:
    For this, we will need to add a constraint for each possible assignment of the dates for Mr. Drake and the diver going out with Hilda, such that Mr. Drake's dive date is 1 more than Hilda's dive date. So, the constraints will be of the form:
    d1 == MrDrake and d2 == Hilda => d1_to_int == d2_to_int + 1, for all d1, d2 in dates.

-   The customer going out on July 14 will go out with Hilda:
    This is a direct assignment constraint:
    July14 == Hilda.

-   The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14:
    This is a constraint that states that the customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14, but not both. So:
    Xor([Vicki == MrGallegos, Vicki == July14]).

-   The customer going out with Nadine will dive 1 day before Mr. Ayers:
    For this, we will need to add a constraint for each possible assignment of the dates for the customer going out with Nadine and Mr. Ayers, such that the customer going out with Nadine's dive date is 1 less than Mr. Ayers's dive date. So, the constraints will be of the form:
    d1 == Nadine and d2 == MrAyers => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, date, and guide)
# e.g. if ayers == 1 and july14 == 1 and hilda == 1, then Mr. Ayers will dive on July 14 with Hilda
ayers, drake, erickson, gallegos = customers = intvar(1, 4, shape=4)
july13, july14, july15, july16 = dates = intvar(1, 4, shape=4)
hilda, jorge, nadine, vicki = guides = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
date_to_int = {july13: 13, july14: 14, july15: 15, july16: 16}  # in days
guide_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def dive_after_than(var1, var2):
    """
    Formulate the constraint that var1 dives after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(date_to_int[d1] > date_to_int[d2])
            for d1 in dates for d2 in dates]


def dive_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 dives exactly diff days after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(date_to_int[d1] == date_to_int[d2] + diff)
            for d1 in dates for d2 in dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(dates)
m += AllDifferent(guides)

# Clue 1: Mr. Ayers will dive on July 14:
m += ayers == july14

# Clue 2: Mr. Drake will dive 1 day after the diver going out with Hilda:
m += dive_exactly_after_than(drake, hilda, 1)

# Clue 3: The customer going out on July 14 will go out with Hilda:
m += july14 == hilda

# Clue 4: The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14:
m += Xor([vicki == gallegos, vicki == july14])

# Clue 5: The customer going out with Nadine will dive 1 day before Mr. Ayers:
m += dive_exactly_after_than(nadine, ayers, -1)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Ethel Street project begins 1 month after Cal Craft's project.
The job starting in May will be headed by Ed Erickson.
The Juniper Lane project starts in April.
Al Anderson's project begins 2 months before the Fred Lane project.

Entities:
Streets: Ethel Street, Fred Lane, Juniper Lane, Quince Street
managers: Al Anderson, Cal Craft, Ed Erickson, Hal Hamilton
months: April, May, June, July
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EthelStreet == 1, and April == 1, and AlAnderson == 1, then the Ethel Street project starts in April and is headed by Al Anderson.

### Decision variables:
-   Names of the streets: EthelStreet, FredLane, JuniperLane, QuinceStreet (all different, 1 to 4)
-   Names of the managers: AlAnderson, CalCraft, EdErickson, HalHamilton (all different, 1 to 4)
-   Months of project start: April, May, June, July (all different, 1 to 4)

### Constraints:
-   The Ethel Street project begins 1 month after Cal Craft's project:
    For this, we will need to add a constraint for each possible assignment of the months for Cal Craft's project and the Ethel Street project, such that the Ethel Street project starts 1 month after Cal Craft's project. So, the constraints will be of the form:
    m1 == CalCraft and m2 == EthelStreet => m1_to_int + 1 == m2_to_int, for all m1, m2 in months.

-   The job starting in May will be headed by Ed Erickson:
    This is a direct assignment constraint:
    May == EdErickson.

-   The Juniper Lane project starts in April:
    This is a direct assignment constraint:
    JuniperLane == April.

-   Al Anderson's project begins 2 months before the Fred Lane project:
    For this, we will need to add a constraint for each possible assignment of the months for Al Anderson's project and the Fred Lane project, such that Al Anderson's project starts 2 months before the Fred Lane project. So, the constraints will be of the form:
    m1 == AlAnderson and m2 == FredLane => m1_to_int + 2 == m2_to_int, for all m1, m2 in months.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EthelStreet == 1, and April == 1, and AlAnderson == 1, then the Ethel Street project starts in April and is headed by Al Anderson.

### Decision variables:
-   Names of the streets: EthelStreet, FredLane, JuniperLane, QuinceStreet (all different, 1 to 4)
-   Names of the managers: AlAnderson, CalCraft, EdErickson, HalHamilton (all different, 1 to 4)
-   Months of project start: April, May, June, July (all different, 1 to 4)

### Constraints:
-   The Ethel Street project begins 1 month after Cal Craft's project:
    For this, we will need to add a constraint for each possible assignment of the months for Cal Craft's project and the Ethel Street project, such that the Ethel Street project starts 1 month after Cal Craft's project. So, the constraints will be of the form:
    m1 == CalCraft and m2 == EthelStreet => m1_to_int + 1 == m2_to_int, for all m1, m2 in months.

-   The job starting in May will be headed by Ed Erickson:
    This is a direct assignment constraint:
    May == EdErickson.

-   The Juniper Lane project starts in April:
    This is a direct assignment constraint:
    JuniperLane == April.

-   Al Anderson's project begins 2 months before the Fred Lane project:
    For this, we will need to add a constraint for each possible assignment of the months for Al Anderson's project and the Fred Lane project, such that Al Anderson's project starts 2 months before the Fred Lane project. So, the constraints will be of the form:
    m1 == AlAnderson and m2 == FredLane => m1_to_int + 2 == m2_to_int, for all m1, m2 in months.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of street, manager, and month)
# e.g. if ethel == 1 and april == 1 and al == 1, then the Ethel Street project starts in April and is headed by Al Anderson
ethel, fred, juniper, quince = streets = intvar(1, 4, shape=4)
al, cal, ed, hal = managers = intvar(1, 4, shape=4)
april, may, june, july = months = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
street_to_int = None  # N/A
manager_to_int = None  # N/A
month_to_int = {april: 4, may: 5, june: 6, july: 7}  # in months


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2):
    """
    Formulate the constraint that var1 starts after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + 1)
            for m1 in months for m2 in months]


def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(streets)
m += AllDifferent(managers)
m += AllDifferent(months)

# Clue 1: The Ethel Street project begins 1 month after Cal Craft's project:
m += starts_after_than(cal, ethel)

# Clue 2: The job starting in May will be headed by Ed Erickson:
m += may == ed

# Clue 3: The Juniper Lane project starts in April:
m += juniper == april

# Clue 4: Al Anderson's project begins 2 months before the Fred Lane project:
m += starts_exactly_after_than(al, fred, -2)

```
False
False
False
Wrong: 6, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Ingram had 7 goals this season.
The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers.
Parrish scored 1 goal more than Quinn.
The player with 9 goals is from the Ice Hogs.
Ingram is either the player from the Checkers or the player with 6 goals.

Entities:
players: Ingram, Parrish, Quinn, Underwood
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Monsters
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ingram == 1, and Checkers == 1, and Goals6 == 1, then Ingram is the player from the Checkers with 6 goals.

### Decision variables:
-   Names of the players: Ingram, Parrish, Quinn, Underwood (all different, 1 to 4)
-   Number of goals: 6, 7, 8, 9 (all different, 1 to 4)
-   Teams: Checkers, Comets, Ice Hogs, Monsters (all different, 1 to 4)

### Constraints:
-   Ingram had 7 goals this season:
    This is a direct assignment constraint:
    Ingram == Goals7.

-   The four players are Underwood, the player from the Ice Hogs, the player from the Monsters, and the player from the Checkers:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Underwood, IceHogs, Monsters, Checkers]).

-   Parrish scored 1 goal more than Quinn:
    For this, we will need to add a constraint for each possible assignment of goals for Parrish and Quinn, such that Parrish's goals are 1 more than Quinn's goals. So, the constraints will be of the form:
    g1 == Parrish and g2 == Quinn => g1_to_int == g2_to_int + 1, for all g1, g2 in goals.

-   The player with 9 goals is from the Ice Hogs:
    This is a direct assignment constraint:
    IceHogs == Goals9.

-   Ingram is either the player from the Checkers or the player with 6 goals:
    This is a constraint that states that Ingram is either the player from the Checkers or the player with 6 goals, but not both. So:
    Xor([Ingram == Checkers, Ingram == Goals6]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ingram == 1, and Checkers == 1, and Goals6 == 1, then Ingram is the player from the Checkers with 6 goals.

### Decision variables:
-   Names of the players: Ingram, Parrish, Quinn, Underwood (all different, 1 to 4)
-   Number of goals: 6, 7, 8, 9 (all different, 1 to 4)
-   Teams: Checkers, Comets, Ice Hogs, Monsters (all different, 1 to 4)

### Constraints:
-   Ingram had 7 goals this season:
    This is a direct assignment constraint:
    Ingram == Goals7.

-   The four players are Underwood, the player from the Ice Hogs, the player from the Monsters, and the player from the Checkers:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Underwood, IceHogs, Monsters, Checkers]).

-   Parrish scored 1 goal more than Quinn:
    For this, we will need to add a constraint for each possible assignment of goals for Parrish and Quinn, such that Parrish's goals are 1 more than Quinn's goals. So, the constraints will be of the form:
    g1 == Parrish and g2 == Quinn => g1_to_int == g2_to_int + 1, for all g1, g2 in goals.

-   The player with 9 goals is from the Ice Hogs:
    This is a direct assignment constraint:
    IceHogs == Goals9.

-   Ingram is either the player from the Checkers or the player with 6 goals:
    This is a constraint that states that Ingram is either the player from the Checkers or the player with 6 goals, but not both. So:
    Xor([Ingram == Checkers, Ingram == Goals6]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, goals, and team)
# e.g. if ingram == 1 and goals7 == 1 and checkers == 1, then Ingram had 7 goals and is from the Checkers
ingram, parrish, quinn, underwood = players = intvar(1, 4, shape=4)
goals6, goals7, goals8, goals9 = goals = intvar(1, 4, shape=4)
checkers, comets, ice_hogs, monsters = teams = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
goals_to_int = {goals6: 6, goals7: 7, goals8: 8, goals9: 9}  # number of goals
team_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored more goals than var2 by diff.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goals_to_int[g1] == goals_to_int[g2] + diff)
            for g1 in goals for g2 in goals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(goals)
m += AllDifferent(teams)

# Clue 1: Ingram had 7 goals this season:
m += ingram == goals7

# Clue 2: The four players are Underwood, the player from the Ice Hogs, the player from the Monsters, and the player from the Checkers:
m += AllDifferent([underwood, ice_hogs, monsters, checkers])

# Clue 3: Parrish scored 1 goal more than Quinn:
m += scored_more_than(parrish, quinn, 1)

# Clue 4: The player with 9 goals is from the Ice Hogs:
m += ice_hogs == goals9

# Clue 5: Ingram is either the player from the Checkers or the player with 6 goals:
m += Xor([ingram == checkers, ingram == goals6])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Natasha's study starts 2 months after the project on the Odyssey.
Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March.
The study on the Liberty starts 2 months after Eunice's project.

Entities:
students: Eunice, Felix, Natasha, Stacy
months: March, April, May, June
ships: Escape, Liberty, Odyssey, Osprey
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Eunice == 1, and March == 1, and Escape == 1, then Eunice's project on the Escape starts in March.

### Decision variables:
-   Names of the students: Eunice, Felix, Natasha, Stacy (all different, 1 to 4)
-   Months of the projects: March, April, May, June (all different, 1 to 4)
-   Names of the ships: Escape, Liberty, Odyssey, Osprey (all different, 1 to 4)

### Constraints:
-   Natasha's study starts 2 months after the project on the Odyssey:
    For this, we will need to add a constraint for each possible assignment of the months for Natasha's study and the project on the Odyssey, such that Natasha's study starts 2 months after the Odyssey project. So, the constraints will be of the form:
    m1 == Natasha and m2 == Odyssey => m1_to_int == m2_to_int + 2, for all m1, m2 in months.

-   Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March:
    This is a constraint that states that one of the assignments is Felix's and starts in March, while the other is on the other ship. So:
    Xor([Liberty == Felix and March == Felix, Escape == Felix and March == Felix]).

-   The study on the Liberty starts 2 months after Eunice's project:
    For this, we will need to add a constraint for each possible assignment of the months for the study on the Liberty and Eunice's project, such that the Liberty study starts 2 months after Eunice's project. So, the constraints will be of the form:
    m1 == Liberty and m2 == Eunice => m1_to_int == m2_to_int + 2, for all m1, m2 in months.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Eunice == 1, and March == 1, and Escape == 1, then Eunice's project on the Escape starts in March.

### Decision variables:
-   Names of the students: Eunice, Felix, Natasha, Stacy (all different, 1 to 4)
-   Months of the projects: March, April, May, June (all different, 1 to 4)
-   Names of the ships: Escape, Liberty, Odyssey, Osprey (all different, 1 to 4)

### Constraints:
-   Natasha's study starts 2 months after the project on the Odyssey:
    For this, we will need to add a constraint for each possible assignment of the months for Natasha's study and the project on the Odyssey, such that Natasha's study starts 2 months after the Odyssey project. So, the constraints will be of the form:
    m1 == Natasha and m2 == Odyssey => m1_to_int == m2_to_int + 2, for all m1, m2 in months.

-   Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March:
    This is a constraint that states that one of the assignments is Felix's and starts in March, while the other is on the other ship. So:
    Xor([Liberty == Felix and March == Felix, Escape == Felix and March == Felix]).

-   The study on the Liberty starts 2 months after Eunice's project:
    For this, we will need to add a constraint for each possible assignment of the months for the study on the Liberty and Eunice's project, such that the Liberty study starts 2 months after Eunice's project. So, the constraints will be of the form:
    m1 == Liberty and m2 == Eunice => m1_to_int == m2_to_int + 2, for all m1, m2 in months.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, month, and ship)
# e.g. if eunice == 1 and march == 1 and escape == 1, then Eunice's project on the Escape starts in March
eunice, felix, natasha, stacy = students = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
escape, liberty, odyssey, osprey = ships = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
month_to_int = {march: 3, april: 4, may: 5, june: 6}  # in months
ship_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(months)
m += AllDifferent(ships)

# Clue 1: Natasha's study starts 2 months after the project on the Odyssey:
m += starts_after_than(natasha, odyssey, 2)

# Clue 2: Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March:
m += Xor([(liberty == felix) & (march == felix), (escape == felix) & (march == felix)])

# Clue 3: The study on the Liberty starts 2 months after Eunice's project:
m += starts_after_than(liberty, eunice, 2)

```
False
False
False
Wrong: 1, Total: 6
---------------------------------------------------------------------------------------------

Clues:
The project headed by Dr. Golden will go online sometime before the Zynga Complex.
The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC.
The Egert Facility will go online 1 year after the ISON-X42.
The project headed by Dr. Owens will go online 1 year after the ISON-X42.

Entities:
years: 2016, 2017, 2018, 2019
names: Bale-Hahn SSC, Egert Facility, ISON-X42, Zynga Complex
scientists: Dr. Farley, Dr. Golden, Dr. Owens, Dr. Weber
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if BaleHahnSSC == 1, and 2016 == 1, and DrGolden == 1, then the Bale-Hahn SSC project headed by Dr. Golden will go online in 2016.

### Decision variables:
-   Names of the projects: BaleHahnSSC, EgertFacility, ISONX42, ZyngaComplex (all different, 1 to 4)
-   Years of going online: 2016, 2017, 2018, 2019 (all different, 1 to 4)
-   Names of the scientists: DrFarley, DrGolden, DrOwens, DrWeber (all different, 1 to 4)

### Constraints:
-   The project headed by Dr. Golden will go online sometime before the Zynga Complex:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Golden's project and the Zynga Complex, such that Dr. Golden's project's year is less than the Zynga Complex's year. So, the constraints will be of the form:
    y1 == DrGolden and y2 == ZyngaComplex => y1_to_int < y2_to_int, for all y1, y2 in years.

-   The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Weber's project and the Bale-Hahn SSC, such that Dr. Weber's project's year is 1 less than the Bale-Hahn SSC's year. So, the constraints will be of the form:
    y1 == DrWeber and y2 == BaleHahnSSC => y1_to_int == y2_to_int - 1, for all y1, y2 in years.

-   The Egert Facility will go online 1 year after the ISON-X42:
    For this, we will need to add a constraint for each possible assignment of the years for the Egert Facility and the ISON-X42, such that the Egert Facility's year is 1 more than the ISON-X42's year. So, the constraints will be of the form:
    y1 == EgertFacility and y2 == ISONX42 => y1_to_int == y2_to_int + 1, for all y1, y2 in years.

-   The project headed by Dr. Owens will go online 1 year after the ISON-X42:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Owens's project and the ISON-X42, such that Dr. Owens's project's year is 1 more than the ISON-X42's year. So, the constraints will be of the form:
    y1 == DrOwens and y2 == ISONX42 => y1_to_int == y2_to_int + 1, for all y1, y2 in years.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if BaleHahnSSC == 1, and 2016 == 1, and DrGolden == 1, then the Bale-Hahn SSC project headed by Dr. Golden will go online in 2016.

### Decision variables:
-   Names of the projects: BaleHahnSSC, EgertFacility, ISONX42, ZyngaComplex (all different, 1 to 4)
-   Years of going online: 2016, 2017, 2018, 2019 (all different, 1 to 4)
-   Names of the scientists: DrFarley, DrGolden, DrOwens, DrWeber (all different, 1 to 4)

### Constraints:
-   The project headed by Dr. Golden will go online sometime before the Zynga Complex:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Golden's project and the Zynga Complex, such that Dr. Golden's project's year is less than the Zynga Complex's year. So, the constraints will be of the form:
    y1 == DrGolden and y2 == ZyngaComplex => y1_to_int < y2_to_int, for all y1, y2 in years.

-   The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Weber's project and the Bale-Hahn SSC, such that Dr. Weber's project's year is 1 less than the Bale-Hahn SSC's year. So, the constraints will be of the form:
    y1 == DrWeber and y2 == BaleHahnSSC => y1_to_int == y2_to_int - 1, for all y1, y2 in years.

-   The Egert Facility will go online 1 year after the ISON-X42:
    For this, we will need to add a constraint for each possible assignment of the years for the Egert Facility and the ISON-X42, such that the Egert Facility's year is 1 more than the ISON-X42's year. So, the constraints will be of the form:
    y1 == EgertFacility and y2 == ISONX42 => y1_to_int == y2_to_int + 1, for all y1, y2 in years.

-   The project headed by Dr. Owens will go online 1 year after the ISON-X42:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Owens's project and the ISON-X42, such that Dr. Owens's project's year is 1 more than the ISON-X42's year. So, the constraints will be of the form:
    y1 == DrOwens and y2 == ISONX42 => y1_to_int == y2_to_int + 1, for all y1, y2 in years.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of project, year, and scientist)
# e.g. if bale_hahn == 1 and year_2016 == 1 and dr_golden == 1, then the Bale-Hahn SSC project headed by Dr. Golden will go online in 2016
bale_hahn, egert, ison, zynga = projects = intvar(1, 4, shape=4)
year_2016, year_2017, year_2018, year_2019 = years = intvar(1, 4, shape=4)
dr_farley, dr_golden, dr_owens, dr_weber = scientists = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
project_to_int = None  # N/A
year_to_int = {year_2016: 2016, year_2017: 2017, year_2018: 2018, year_2019: 2019}  # in years
scientist_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def online_before_than(var1, var2):
    """
    Formulate the constraint that var1 goes online before var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(year_to_int[p1] < year_to_int[p2])
            for p1 in years for p2 in years]


def online_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 goes online exactly diff years before var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(year_to_int[p1] == year_to_int[p2] - diff)
            for p1 in years for p2 in years]


def online_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 goes online exactly diff years after var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(year_to_int[p1] == year_to_int[p2] + diff)
            for p1 in years for p2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(projects)
m += AllDifferent(years)
m += AllDifferent(scientists)

# Clue 1: The project headed by Dr. Golden will go online sometime before the Zynga Complex:
m += online_before_than(dr_golden, zynga)

# Clue 2: The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC:
m += online_exactly_before_than(dr_weber, bale_hahn, 1)

# Clue 3: The Egert Facility will go online 1 year after the ISON-X42:
m += online_exactly_after_than(egert, ison, 1)

# Clue 4: The project headed by Dr. Owens will go online 1 year after the ISON-X42:
m += online_exactly_after_than(dr_owens, ison, 1)

```
True
True
True
Wrong: 6, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The model made by Torvia costs 25 dollars more than the model made by Honwa.
The camera made by Honwa is either the Zenix 2C or the MX-827.
Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero.
The Zenix 2C costs less than the FC-520.

Entities:
companies: Banion, Dayero, Honwa, Torvia
prices: $550, $575, $600, $625
cameras: DM-5000, FC-520, MX-827, Zenix 2C
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Banion == 1, and Price550 == 1, and DM5000 == 1, then Banion's camera DM-5000 costs $550.

### Decision variables:
-   Companies: Banion, Dayero, Honwa, Torvia (all different, 1 to 4)
-   Prices: Price550, Price575, Price600, Price625 (all different, 1 to 4)
-   Cameras: DM-5000, FC-520, MX-827, Zenix 2C (all different, 1 to 4)

### Constraints:
-   The model made by Torvia costs 25 dollars more than the model made by Honwa:
    For this, we will need to add a constraint for each possible assignment of prices for Torvia and Honwa's models, such that Torvia's price is 25 dollars more than Honwa's price. So, the constraints will be of the form:
    p1 == Torvia and p2 == Honwa => p1_to_int == p2_to_int + 25, for all p1, p2 in prices.

-   The camera made by Honwa is either the Zenix 2C or the MX-827:
    This is a constraint that states that the camera made by Honwa is either the Zenix 2C or the MX-827, but not both. So:
    Xor([Honwa == Zenix2C, Honwa == MX827]).

-   Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero:
    This is a constraint that states that one of the $600 model and the FC-520 is made by Honwa and the other is made by Dayero. So:
    (Price600 == Honwa and FC520 == Dayero) or (Price600 == Dayero and FC520 == Honwa).

-   The Zenix 2C costs less than the FC-520:
    This is a constraint that states that the Zenix 2C's price is less than the FC-520's price. So:
    Zenix2C_to_int < FC520_to_int.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Banion == 1, and Price550 == 1, and DM5000 == 1, then Banion's camera DM-5000 costs $550.

### Decision variables:
-   Companies: Banion, Dayero, Honwa, Torvia (all different, 1 to 4)
-   Prices: Price550, Price575, Price600, Price625 (all different, 1 to 4)
-   Cameras: DM-5000, FC-520, MX-827, Zenix 2C (all different, 1 to 4)

### Constraints:
-   The model made by Torvia costs 25 dollars more than the model made by Honwa:
    For this, we will need to add a constraint for each possible assignment of prices for Torvia and Honwa's models, such that Torvia's price is 25 dollars more than Honwa's price. So, the constraints will be of the form:
    p1 == Torvia and p2 == Honwa => p1_to_int == p2_to_int + 25, for all p1, p2 in prices.

-   The camera made by Honwa is either the Zenix 2C or the MX-827:
    This is a constraint that states that the camera made by Honwa is either the Zenix 2C or the MX-827, but not both. So:
    Xor([Honwa == Zenix2C, Honwa == MX827]).

-   Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero:
    This is a constraint that states that one of the $600 model and the FC-520 is made by Honwa and the other is made by Dayero. So:
    (Price600 == Honwa and FC520 == Dayero) or (Price600 == Dayero and FC520 == Honwa).

-   The Zenix 2C costs less than the FC-520:
    This is a constraint that states that the Zenix 2C's price is less than the FC-520's price. So:
    Zenix2C_to_int < FC520_to_int.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of company, price, and camera)
# e.g. if banion == 1 and price550 == 1 and dm5000 == 1, then Banion's camera DM-5000 costs $550
banion, dayero, honwa, torvia = companies = intvar(1, 4, shape=4)
price550, price575, price600, price625 = prices = intvar(1, 4, shape=4)
dm5000, fc520, mx827, zenix2c = cameras = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
company_to_int = None  # N/A
price_to_int = {price550: 550, price575: 575, price600: 600, price625: 625}  # in dollars
camera_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def costs_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs more than var2 by diff dollars.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(companies)
m += AllDifferent(prices)
m += AllDifferent(cameras)

# Clue 1: The model made by Torvia costs 25 dollars more than the model made by Honwa:
m += costs_more_than(torvia, honwa, 25)

# Clue 2: The camera made by Honwa is either the Zenix 2C or the MX-827:
m += Xor([honwa == zenix2c, honwa == mx827])

# Clue 3: Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero:
m += ((price600 == honwa) & (fc520 == dayero)) | ((price600 == dayero) & (fc520 == honwa))

# Clue 4: The Zenix 2C costs less than the FC-520:
m += zenix2c < fc520

```
False
True
False
Wrong: 2, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The football facility holds more people than Underwood Arena.
The basketball facility holds 80 more people than Vazquez Arena.
Young Arena holds 230 people.
Underwood Arena holds 40 fewer people than Vazquez Arena.
The facility with seating for 190 people is either the lacrosse facility or Underwood Arena.

Entities:
arenas: Gentry, Underwood, Vazquez, Young
capacities: 110, 150, 190, 230
sports: basketball, football, lacrosse, soccer
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Gentry == 1, and 110 == 1, and basketball == 1, then Gentry is the basketball facility with a capacity of 110 people.

### Decision variables:
-   Names of the arenas: Gentry, Underwood, Vazquez, Young (all different, 1 to 4)
-   Capacities of the arenas: 110, 150, 190, 230 (all different, 1 to 4)
-   Sports played in the arenas: basketball, football, lacrosse, soccer (all different, 1 to 4)

### Constraints:
-   The football facility holds more people than Underwood Arena:
    For this, we will need to add a constraint for each possible assignment of capacities to the football facility and Underwood Arena, such that the football facility's capacity is greater than Underwood Arena's capacity. So, the constraints will be of the form:
    c1 == football and c2 == Underwood => c1_to_int > c2_to_int, for all c1, c2 in capacities.

-   The basketball facility holds 80 more people than Vazquez Arena:
    For this, we will need to add a constraint for each possible assignment of capacities to the basketball facility and Vazquez Arena, such that the basketball facility's capacity is 80 more than Vazquez Arena's capacity. So, the constraints will be of the form:
    c1 == basketball and c2 == Vazquez => c1_to_int == c2_to_int + 80, for all c1, c2 in capacities.

-   Young Arena holds 230 people:
    This is a direct assignment constraint:
    Young == 230.

-   Underwood Arena holds 40 fewer people than Vazquez Arena:
    For this, we will need to add a constraint for each possible assignment of capacities to Underwood Arena and Vazquez Arena, such that Underwood Arena's capacity is 40 less than Vazquez Arena's capacity. So, the constraints will be of the form:
    c1 == Underwood and c2 == Vazquez => c1_to_int == c2_to_int - 40, for all c1, c2 in capacities.

-   The facility with seating for 190 people is either the lacrosse facility or Underwood Arena:
    This is a constraint that states that the facility with a capacity of 190 people is either the lacrosse facility or Underwood Arena, but not both. So:
    Xor([190 == lacrosse, 190 == Underwood]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Gentry == 1, and 110 == 1, and basketball == 1, then Gentry is the basketball facility with a capacity of 110 people.

### Decision variables:
-   Names of the arenas: Gentry, Underwood, Vazquez, Young (all different, 1 to 4)
-   Capacities of the arenas: 110, 150, 190, 230 (all different, 1 to 4)
-   Sports played in the arenas: basketball, football, lacrosse, soccer (all different, 1 to 4)

### Constraints:
-   The football facility holds more people than Underwood Arena:
    For this, we will need to add a constraint for each possible assignment of capacities to the football facility and Underwood Arena, such that the football facility's capacity is greater than Underwood Arena's capacity. So, the constraints will be of the form:
    c1 == football and c2 == Underwood => c1_to_int > c2_to_int, for all c1, c2 in capacities.

-   The basketball facility holds 80 more people than Vazquez Arena:
    For this, we will need to add a constraint for each possible assignment of capacities to the basketball facility and Vazquez Arena, such that the basketball facility's capacity is 80 more than Vazquez Arena's capacity. So, the constraints will be of the form:
    c1 == basketball and c2 == Vazquez => c1_to_int == c2_to_int + 80, for all c1, c2 in capacities.

-   Young Arena holds 230 people:
    This is a direct assignment constraint:
    Young == 230.

-   Underwood Arena holds 40 fewer people than Vazquez Arena:
    For this, we will need to add a constraint for each possible assignment of capacities to Underwood Arena and Vazquez Arena, such that Underwood Arena's capacity is 40 less than Vazquez Arena's capacity. So, the constraints will be of the form:
    c1 == Underwood and c2 == Vazquez => c1_to_int == c2_to_int - 40, for all c1, c2 in capacities.

-   The facility with seating for 190 people is either the lacrosse facility or Underwood Arena:
    This is a constraint that states that the facility with a capacity of 190 people is either the lacrosse facility or Underwood Arena, but not both. So:
    Xor([190 == lacrosse, 190 == Underwood]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of arena, capacity, and sport)
# e.g. if gentry == 1 and 110 == 1 and basketball == 1, then Gentry is the basketball facility with a capacity of 110 people
gentry, underwood, vazquez, young = arenas = intvar(1, 4, shape=4)
cap110, cap150, cap190, cap230 = capacities = intvar(1, 4, shape=4)
basketball, football, lacrosse, soccer = sports = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
arena_to_int = None  # N/A
capacity_to_int = {cap110: 110, cap150: 150, cap190: 190, cap230: 230}  # in people
sport_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def holds_more_than(var1, var2):
    """
    Formulate the constraint that var1 holds more people than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(capacity_to_int[c1] > capacity_to_int[c2])
            for c1 in capacities for c2 in capacities]


def holds_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 holds exactly diff more people than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(capacity_to_int[c1] == capacity_to_int[c2] + diff)
            for c1 in capacities for c2 in capacities]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(arenas)
m += AllDifferent(capacities)
m += AllDifferent(sports)

# Clue 1: The football facility holds more people than Underwood Arena:
m += holds_more_than(football, underwood)

# Clue 2: The basketball facility holds 80 more people than Vazquez Arena:
m += holds_exactly_more_than(basketball, vazquez, 80)

# Clue 3: Young Arena holds 230 people:
m += young == cap230

# Clue 4: Underwood Arena holds 40 fewer people than Vazquez Arena:
m += holds_exactly_more_than(underwood, vazquez, -40)

# Clue 5: The facility with seating for 190 people is either the lacrosse facility or Underwood Arena:
m += Xor([cap190 == lacrosse, cap190 == underwood])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hope paid less than Delia.
Patricia had the cappuccino.
The one who had the cafe americano paid 1 dollar more than Patricia.
Hope paid more than the one who had the cafe americano.
The one who had the chai tea paid 1 dollar more than the one who had the cafe americano.

Entities:
names: Delia, Hope, Patricia, Wayne
prices: $5, $6, $7, $8
drinks: cafe americano, cafe latte, cappuccino, chai tea
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Delia == 1, and Price5 == 1, and CafeAmericano == 1, then Delia paid $5 for a cafe americano.

### Decision variables:
-   Names of the persons: Delia, Hope, Patricia, Wayne (all different, 1 to 4)
-   Prices paid: Price5, Price6, Price7, Price8 (all different, 1 to 4)
-   Drinks ordered: CafeAmericano, CafeLatte, Cappuccino, ChaiTea (all different, 1 to 4)

### Constraints:
-   Hope paid less than Delia:
    For this, we will need to add a constraint for each possible assignment of prices to Hope and Delia, such that Hope's price is less than Delia's price. So, the constraints will be of the form:
    p1 == Hope and p2 == Delia => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Patricia had the cappuccino:
    This is a direct assignment constraint:
    Patricia == Cappuccino.

-   The one who had the cafe americano paid 1 dollar more than Patricia:
    For this, we will need to add a constraint for each possible assignment of prices to the person who had the cafe americano and Patricia, such that the cafe americano person's price is 1 dollar more than Patricia's price. So, the constraints will be of the form:
    p1 == CafeAmericano and p2 == Patricia => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.

-   Hope paid more than the one who had the cafe americano:
    For this, we will need to add a constraint for each possible assignment of prices to Hope and the person who had the cafe americano, such that Hope's price is greater than the cafe americano person's price. So, the constraints will be of the form:
    p1 == Hope and p2 == CafeAmericano => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   The one who had the chai tea paid 1 dollar more than the one who had the cafe americano:
    For this, we will need to add a constraint for each possible assignment of prices to the person who had the chai tea and the person who had the cafe americano, such that the chai tea person's price is 1 dollar more than the cafe americano person's price. So, the constraints will be of the form:
    p1 == ChaiTea and p2 == CafeAmericano => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Delia == 1, and Price5 == 1, and CafeAmericano == 1, then Delia paid $5 for a cafe americano.

### Decision variables:
-   Names of the persons: Delia, Hope, Patricia, Wayne (all different, 1 to 4)
-   Prices paid: Price5, Price6, Price7, Price8 (all different, 1 to 4)
-   Drinks ordered: CafeAmericano, CafeLatte, Cappuccino, ChaiTea (all different, 1 to 4)

### Constraints:
-   Hope paid less than Delia:
    For this, we will need to add a constraint for each possible assignment of prices to Hope and Delia, such that Hope's price is less than Delia's price. So, the constraints will be of the form:
    p1 == Hope and p2 == Delia => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Patricia had the cappuccino:
    This is a direct assignment constraint:
    Patricia == Cappuccino.

-   The one who had the cafe americano paid 1 dollar more than Patricia:
    For this, we will need to add a constraint for each possible assignment of prices to the person who had the cafe americano and Patricia, such that the cafe americano person's price is 1 dollar more than Patricia's price. So, the constraints will be of the form:
    p1 == CafeAmericano and p2 == Patricia => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.

-   Hope paid more than the one who had the cafe americano:
    For this, we will need to add a constraint for each possible assignment of prices to Hope and the person who had the cafe americano, such that Hope's price is greater than the cafe americano person's price. So, the constraints will be of the form:
    p1 == Hope and p2 == CafeAmericano => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   The one who had the chai tea paid 1 dollar more than the one who had the cafe americano:
    For this, we will need to add a constraint for each possible assignment of prices to the person who had the chai tea and the person who had the cafe americano, such that the chai tea person's price is 1 dollar more than the cafe americano person's price. So, the constraints will be of the form:
    p1 == ChaiTea and p2 == CafeAmericano => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of person, price, and drink)
# e.g. if delia == 1 and price5 == 1 and cafe_americano == 1, then Delia paid $5 for a cafe americano
delia, hope, patricia, wayne = names = intvar(1, 4, shape=4)
price5, price6, price7, price8 = prices = intvar(1, 4, shape=4)
cafe_americano, cafe_latte, cappuccino, chai_tea = drinks = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
person_to_int = None  # N/A
price_to_int = {price5: 5, price6: 6, price7: 7, price8: 8}  # in dollars
drink_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_less_than(var1, var2):
    """
    Formulate the constraint that var1 paid less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(prices)
m += AllDifferent(drinks)

# Clue 1: Hope paid less than Delia:
m += paid_less_than(hope, delia)

# Clue 2: Patricia had the cappuccino:
m += patricia == cappuccino

# Clue 3: The one who had the cafe americano paid 1 dollar more than Patricia:
m += paid_exactly_more_than(cafe_americano, patricia, 1)

# Clue 4: Hope paid more than the one who had the cafe americano:
m += paid_less_than(cafe_americano, hope)

# Clue 5: The one who had the chai tea paid 1 dollar more than the one who had the cafe americano:
m += paid_exactly_more_than(chai_tea, cafe_americano, 1)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH.
The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH.
The Awick drove somewhat less than the automobile with a high speed of 81 MPH.
The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH.

Entities:
cars: Awick, Leden, Poltris, Versem
distances: 525 miles, 550 miles, 575 miles, 600 miles
speeds: 62 MPH, 69 MPH, 75 MPH, 81 MPH
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Awick == 1, and Speed62 == 1, and Distance525 == 1, then Awick drove 525 miles with a speed of 62 MPH.

### Decision variables:
-   Names of the cars: Awick, Leden, Poltris, Versem (all different, 1 to 4)
-   Distances driven: 525 miles, 550 miles, 575 miles, 600 miles (all different, 1 to 4)
-   Speeds of the cars: 62 MPH, 69 MPH, 75 MPH, 81 MPH (all different, 1 to 4)

### Constraints:
-   The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for Leden and the car with a speed of 75 MPH, such that Leden's distance is 25 miles more than the 75 MPH car's distance. So, the constraints will be of the form:
    d1 == Leden and d2 == Speed75 => d1_to_int == d2_to_int + 25, for all d1, d2 in distances.

-   The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for Poltris and the car with a speed of 69 MPH, such that Poltris's distance is 25 miles more than the 69 MPH car's distance. So, the constraints will be of the form:
    d1 == Poltris and d2 == Speed69 => d1_to_int == d2_to_int + 25, for all d1, d2 in distances.

-   The Awick drove somewhat less than the automobile with a high speed of 81 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for Awick and the car with a speed of 81 MPH, such that Awick's distance is less than the 81 MPH car's distance. So, the constraints will be of the form:
    d1 == Awick and d2 == Speed81 => d1_to_int < d2_to_int, for all d1, d2 in distances.

-   The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for the 69 MPH car and the 81 MPH car, such that the 69 MPH car's distance is greater than the 81 MPH car's distance. So, the constraints will be of the form:
    d1 == Speed69 and d2 == Speed81 => d1_to_int > d2_to_int, for all d1, d2 in distances.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Awick == 1, and Speed62 == 1, and Distance525 == 1, then Awick drove 525 miles with a speed of 62 MPH.

### Decision variables:
-   Names of the cars: Awick, Leden, Poltris, Versem (all different, 1 to 4)
-   Distances driven: 525 miles, 550 miles, 575 miles, 600 miles (all different, 1 to 4)
-   Speeds of the cars: 62 MPH, 69 MPH, 75 MPH, 81 MPH (all different, 1 to 4)

### Constraints:
-   The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for Leden and the car with a speed of 75 MPH, such that Leden's distance is 25 miles more than the 75 MPH car's distance. So, the constraints will be of the form:
    d1 == Leden and d2 == Speed75 => d1_to_int == d2_to_int + 25, for all d1, d2 in distances.

-   The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for Poltris and the car with a speed of 69 MPH, such that Poltris's distance is 25 miles more than the 69 MPH car's distance. So, the constraints will be of the form:
    d1 == Poltris and d2 == Speed69 => d1_to_int == d2_to_int + 25, for all d1, d2 in distances.

-   The Awick drove somewhat less than the automobile with a high speed of 81 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for Awick and the car with a speed of 81 MPH, such that Awick's distance is less than the 81 MPH car's distance. So, the constraints will be of the form:
    d1 == Awick and d2 == Speed81 => d1_to_int < d2_to_int, for all d1, d2 in distances.

-   The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH:
    For this, we will need to add a constraint for each possible assignment of distances for the 69 MPH car and the 81 MPH car, such that the 69 MPH car's distance is greater than the 81 MPH car's distance. So, the constraints will be of the form:
    d1 == Speed69 and d2 == Speed81 => d1_to_int > d2_to_int, for all d1, d2 in distances.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of car, distance, and speed)
# e.g. if awick == 1 and distance525 == 1 and speed62 == 1, then Awick drove 525 miles with a speed of 62 MPH
awick, leden, poltris, versem = cars = intvar(1, 4, shape=4)
distance525, distance550, distance575, distance600 = distances = intvar(1, 4, shape=4)
speed62, speed69, speed75, speed81 = speeds = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
car_to_int = None  # N/A
distance_to_int = {distance525: 525, distance550: 550, distance575: 575, distance600: 600}  # in miles
speed_to_int = {speed62: 62, speed69: 69, speed75: 75, speed81: 81}  # in MPH


# Helper functions (for formulating comparison constraints)
def drove_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 drove diff miles more than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(distance_to_int[d1] == distance_to_int[d2] + diff)
            for d1 in distances for d2 in distances]


def drove_less_than(var1, var2):
    """
    Formulate the constraint that var1 drove less miles than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(distance_to_int[d1] < distance_to_int[d2])
            for d1 in distances for d2 in distances]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(cars)
m += AllDifferent(distances)
m += AllDifferent(speeds)

# Clue 1: The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH:
m += drove_more_than(leden, speed75, 25)

# Clue 2: The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH:
m += drove_more_than(poltris, speed69, 25)

# Clue 3: The Awick drove somewhat less than the automobile with a high speed of 81 MPH:
m += drove_less_than(awick, speed81)

# Clue 4: The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH:
m += drove_more_than(speed69, speed81, 1)

```
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The report from Zearing was either the August 4 report or Edith Estes's report.
Hal Harrison's report was submitted sometime after Iva Ingram's sighting.
The August 5 sighting was from Islesboro.
The report from Tarzana was submitted 1 day before the sighting from Islesboro.
Benny Baron's report was received on August 7.

Entities:
witnesses: Benny Baron, Edith Estes, Hal Harrison, Iva Ingram
dates: August 4, August 5, August 6, August 7
towns: Islesboro, Long Barn, Tarzana, Zearing
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if BennyBaron == 1, and August7 == 1, and Islesboro == 1, then Benny Baron's report was received on August 7 from Islesboro.

### Decision variables:
-   Names of the witnesses: BennyBaron, EdithEstes, HalHarrison, IvaIngram (all different, 1 to 4)
-   Dates of the reports: August4, August5, August6, August7 (all different, 1 to 4)
-   Names of the towns: Islesboro, LongBarn, Tarzana, Zearing (all different, 1 to 4)

### Constraints:
-   The report from Zearing was either the August 4 report or Edith Estes's report:
    This is a constraint that states that the report from Zearing's date is either August 4 or the date of Edith Estes's report, but not both. So:
    Xor([Zearing == August4, Zearing == EdithEstes]).

-   Hal Harrison's report was submitted sometime after Iva Ingram's sighting:
    For this, we will need to add a constraint for each possible assignment of the dates for Hal Harrison and Iva Ingram, such that Hal Harrison's report date is greater than Iva Ingram's report date. So, the constraints will be of the form:
    d1 == HalHarrison and d2 == IvaIngram => d1_to_int > d2_to_int, for all d1, d2 in dates.

-   The August 5 sighting was from Islesboro:
    This is a direct assignment constraint:
    August5 == Islesboro.

-   The report from Tarzana was submitted 1 day before the sighting from Islesboro:
    For this, we will need to add a constraint for each possible assignment of the dates for Tarzana and Islesboro, such that Tarzana's report date is 1 less than Islesboro's report date. So, the constraints will be of the form:
    d1 == Tarzana and d2 == Islesboro => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.

-   Benny Baron's report was received on August 7:
    This is a direct assignment constraint:
    BennyBaron == August7.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if BennyBaron == 1, and August7 == 1, and Islesboro == 1, then Benny Baron's report was received on August 7 from Islesboro.

### Decision variables:
-   Names of the witnesses: BennyBaron, EdithEstes, HalHarrison, IvaIngram (all different, 1 to 4)
-   Dates of the reports: August4, August5, August6, August7 (all different, 1 to 4)
-   Names of the towns: Islesboro, LongBarn, Tarzana, Zearing (all different, 1 to 4)

### Constraints:
-   The report from Zearing was either the August 4 report or Edith Estes's report:
    This is a constraint that states that the report from Zearing's date is either August 4 or the date of Edith Estes's report, but not both. So:
    Xor([Zearing == August4, Zearing == EdithEstes]).

-   Hal Harrison's report was submitted sometime after Iva Ingram's sighting:
    For this, we will need to add a constraint for each possible assignment of the dates for Hal Harrison and Iva Ingram, such that Hal Harrison's report date is greater than Iva Ingram's report date. So, the constraints will be of the form:
    d1 == HalHarrison and d2 == IvaIngram => d1_to_int > d2_to_int, for all d1, d2 in dates.

-   The August 5 sighting was from Islesboro:
    This is a direct assignment constraint:
    August5 == Islesboro.

-   The report from Tarzana was submitted 1 day before the sighting from Islesboro:
    For this, we will need to add a constraint for each possible assignment of the dates for Tarzana and Islesboro, such that Tarzana's report date is 1 less than Islesboro's report date. So, the constraints will be of the form:
    d1 == Tarzana and d2 == Islesboro => d1_to_int == d2_to_int - 1, for all d1, d2 in dates.

-   Benny Baron's report was received on August 7:
    This is a direct assignment constraint:
    BennyBaron == August7.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of witness, date, and town)
# e.g. if benny == 1 and aug4 == 1 and islesboro == 1, then Benny Baron's report was received on August 4 from Islesboro
benny, edith, hal, iva = witnesses = intvar(1, 4, shape=4)
aug4, aug5, aug6, aug7 = dates = intvar(1, 4, shape=4)
islesboro, long_barn, tarzana, zearing = towns = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
witness_to_int = None  # N/A
date_to_int = {aug4: 4, aug5: 5, aug6: 6, aug7: 7}  # in days
town_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def submitted_after_than(var1, var2):
    """
    Formulate the constraint that var1 submitted after var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(date_to_int[w1] > date_to_int[w2])
            for w1 in dates for w2 in dates]


def submitted_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 submitted exactly diff days after var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(date_to_int[w1] == date_to_int[w2] + diff)
            for w1 in dates for w2 in dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(witnesses)
m += AllDifferent(dates)
m += AllDifferent(towns)

# Clue 1: The report from Zearing was either the August 4 report or Edith Estes's report:
m += Xor([zearing == aug4, zearing == edith])

# Clue 2: Hal Harrison's report was submitted sometime after Iva Ingram's sighting:
m += submitted_after_than(hal, iva)

# Clue 3: The August 5 sighting was from Islesboro:
m += aug5 == islesboro

# Clue 4: The report from Tarzana was submitted 1 day before the sighting from Islesboro:
m += submitted_exactly_after_than(tarzana, islesboro, -1)

# Clue 5: Benny Baron's report was received on August 7:
m += benny == aug7

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird.
The condor with a wingspan of 114 inches is 5 years old.
Pepper has a wingspan of 114 inches.
The four condors are the 9-year-old bird, Pepper, Merlin and the condor with a wingspan of 106 inches.
The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird.

Entities:
wingspans: 102 inches, 106 inches, 110 inches, 114 inches
names: Merlin, Pepper, Spike, Sunshine
ages: 4, 5, 8, 9
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Merlin == 1, and Wingspan106 == 1, and Age8 == 1, then Merlin is the 8-year-old condor with a wingspan of 106 inches.

### Decision variables:
-   Names of the condors: Merlin, Pepper, Spike, Sunshine (all different, 1 to 4)
-   Wingspans of the condors: 102 inches, 106 inches, 110 inches, 114 inches (all different, 1 to 4)
-   Ages of the condors: 4, 5, 8, 9 (all different, 1 to 4)

### Constraints:
-   Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird:
    This is a constraint that states that Sunshine's wingspan is either 102 inches or Sunshine's age is 5, but not both. So:
    Xor([Sunshine == Wingspan102, Sunshine == Age5]).

-   The condor with a wingspan of 114 inches is 5 years old:
    This is a direct assignment constraint:
    Wingspan114 == Age5.

-   Pepper has a wingspan of 114 inches:
    This is a direct assignment constraint:
    Pepper == Wingspan114.

-   The four condors are the 9-year-old bird, Pepper, Merlin, and the condor with a wingspan of 106 inches:
    This is a constraint that states the four entities mentioned are different, thus:
    AllDifferent([Age9, Pepper, Merlin, Wingspan106]).

-   The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird:
    For this, we will need to add a constraint for each possible assignment of the wingspans for the 9-year-old bird and the 4-year-old bird, such that the 9-year-old bird's wingspan is 4 less than the 4-year-old bird's wingspan. So, the constraints will be of the form:
    w1 == Age9 and w2 == Age4 => w1_to_int == w2_to_int - 4, for all w1, w2 in wingspans.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Merlin == 1, and Wingspan106 == 1, and Age8 == 1, then Merlin is the 8-year-old condor with a wingspan of 106 inches.

### Decision variables:
-   Names of the condors: Merlin, Pepper, Spike, Sunshine (all different, 1 to 4)
-   Wingspans of the condors: 102 inches, 106 inches, 110 inches, 114 inches (all different, 1 to 4)
-   Ages of the condors: 4, 5, 8, 9 (all different, 1 to 4)

### Constraints:
-   Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird:
    This is a constraint that states that Sunshine's wingspan is either 102 inches or Sunshine's age is 5, but not both. So:
    Xor([Sunshine == Wingspan102, Sunshine == Age5]).

-   The condor with a wingspan of 114 inches is 5 years old:
    This is a direct assignment constraint:
    Wingspan114 == Age5.

-   Pepper has a wingspan of 114 inches:
    This is a direct assignment constraint:
    Pepper == Wingspan114.

-   The four condors are the 9-year-old bird, Pepper, Merlin, and the condor with a wingspan of 106 inches:
    This is a constraint that states the four entities mentioned are different, thus:
    AllDifferent([Age9, Pepper, Merlin, Wingspan106]).

-   The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird:
    For this, we will need to add a constraint for each possible assignment of the wingspans for the 9-year-old bird and the 4-year-old bird, such that the 9-year-old bird's wingspan is 4 less than the 4-year-old bird's wingspan. So, the constraints will be of the form:
    w1 == Age9 and w2 == Age4 => w1_to_int == w2_to_int - 4, for all w1, w2 in wingspans.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, wingspan, and age)
# e.g. if merlin == 1 and wingspan106 == 1 and age8 == 1, then Merlin is the 8-year-old condor with a wingspan of 106 inches
merlin, pepper, spike, sunshine = names = intvar(1, 4, shape=4)
wingspan102, wingspan106, wingspan110, wingspan114 = wingspans = intvar(1, 4, shape=4)
age4, age5, age8, age9 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
wingspan_to_int = {wingspan102: 102, wingspan106: 106, wingspan110: 110, wingspan114: 114}  # in inches
age_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def wingspan_shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1's wingspan is diff inches shorter than var2's wingspan.
    """
    return [((w1 == var1) & (w2 == var2)).implies(wingspan_to_int[w1] == wingspan_to_int[w2] - diff)
            for w1 in wingspans for w2 in wingspans]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(wingspans)
m += AllDifferent(ages)

# Clue 1: Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird:
m += Xor([sunshine == wingspan102, sunshine == age5])

# Clue 2: The condor with a wingspan of 114 inches is 5 years old:
m += wingspan114 == age5

# Clue 3: Pepper has a wingspan of 114 inches:
m += pepper == wingspan114

# Clue 4: The four condors are the 9-year-old bird, Pepper, Merlin, and the condor with a wingspan of 106 inches:
m += AllDifferent([age9, pepper, merlin, wingspan106])

# Clue 5: The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird:
m += wingspan_shorter_than(age9, age4, 4)

```
True
True
True
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The puzzle with the autumn leaves theme has somewhat more than the jigsaw puzzle with the rustic village theme.
The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme and the puzzle with 1000 pieces.
The jigsaw puzzle made by Buralde has the outer space theme.
The jigsaw puzzle made by Denlend has somewhat fewer than the jigsaw puzzle with the outer space theme.
The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend.

Entities:
companies: Buralde, Denlend, Irycia, Kimsight
pieces: 250, 500, 750, 1000
themes: autumn leaves, coral reef, outer space, rustic village
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Buralde == 1, and 1000Pieces == 1, and OuterSpace == 1, then Buralde made a 1000-piece jigsaw puzzle with the outer space theme.

### Decision variables:
-   Companies that made the puzzles: Buralde, Denlend, Irycia, Kimsight (all different, 1 to 4)
-   Number of pieces in the puzzles: 250, 500, 750, 1000 (all different, 1 to 4)
-   Themes of the puzzles: AutumnLeaves, CoralReef, OuterSpace, RusticVillage (all different, 1 to 4)

### Constraints:
-   The puzzle with the autumn leaves theme has somewhat more pieces than the jigsaw puzzle with the rustic village theme:
    This constraint implies that the puzzle with the autumn leaves theme has more pieces than the puzzle with the rustic village theme. So, for all possible assignments of pieces to autumn leaves and rustic village themes, we have:
    p1 == AutumnLeaves and p2 == RusticVillage => p1_to_int > p2_to_int.

-   The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme, and the puzzle with 1000 pieces:
    This constraint states that each of the four entities corresponds to one of the four categories mentioned. Thus, each entity will be assigned a different category.

-   The jigsaw puzzle made by Buralde has the outer space theme:
    This is a direct assignment constraint:
    Buralde == OuterSpace.

-   The jigsaw puzzle made by Denlend has somewhat fewer pieces than the jigsaw puzzle with the outer space theme:
    This constraint implies that the puzzle made by Denlend has fewer pieces than the puzzle with the outer space theme. So, for all possible assignments of pieces to Denlend and outer space themes, we have:
    p1 == Denlend and p2 == OuterSpace => p1_to_int < p2_to_int.

-   The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend:
    This constraint implies that the puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend. So, for all possible assignments of pieces to Kimsight and Denlend, we have:
    p1 == Kimsight and p2 == Denlend => p1_to_int == p2_to_int + 250.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Buralde == 1, and 1000Pieces == 1, and OuterSpace == 1, then Buralde made a 1000-piece jigsaw puzzle with the outer space theme.

### Decision variables:
-   Companies that made the puzzles: Buralde, Denlend, Irycia, Kimsight (all different, 1 to 4)
-   Number of pieces in the puzzles: 250, 500, 750, 1000 (all different, 1 to 4)
-   Themes of the puzzles: AutumnLeaves, CoralReef, OuterSpace, RusticVillage (all different, 1 to 4)

### Constraints:
-   The puzzle with the autumn leaves theme has somewhat more pieces than the jigsaw puzzle with the rustic village theme:
    This constraint implies that the puzzle with the autumn leaves theme has more pieces than the puzzle with the rustic village theme. So, for all possible assignments of pieces to autumn leaves and rustic village themes, we have:
    p1 == AutumnLeaves and p2 == RusticVillage => p1_to_int > p2_to_int.

-   The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme, and the puzzle with 1000 pieces:
    This constraint states that each of the four entities corresponds to one of the four categories mentioned. Thus, each entity will be assigned a different category.

-   The jigsaw puzzle made by Buralde has the outer space theme:
    This is a direct assignment constraint:
    Buralde == OuterSpace.

-   The jigsaw puzzle made by Denlend has somewhat fewer pieces than the jigsaw puzzle with the outer space theme:
    This constraint implies that the puzzle made by Denlend has fewer pieces than the puzzle with the outer space theme. So, for all possible assignments of pieces to Denlend and outer space themes, we have:
    p1 == Denlend and p2 == OuterSpace => p1_to_int < p2_to_int.

-   The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend:
    This constraint implies that the puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend. So, for all possible assignments of pieces to Kimsight and Denlend, we have:
    p1 == Kimsight and p2 == Denlend => p1_to_int == p2_to_int + 250.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of company, pieces, and theme)
# e.g. if buralde == 1 and pieces1000 == 1 and outer_space == 1, then Buralde made a 1000-piece puzzle with the outer space theme
buralde, denlend, irycia, kimsight = companies = intvar(1, 4, shape=4)
pieces250, pieces500, pieces750, pieces1000 = pieces = intvar(1, 4, shape=4)
autumn_leaves, coral_reef, outer_space, rustic_village = themes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
company_to_int = None  # N/A
pieces_to_int = {pieces250: 250, pieces500: 500, pieces750: 750, pieces1000: 1000}  # in pieces
theme_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def somewhat_more_than(var1, var2):
    """
    Formulate the constraint that var1 has somewhat more pieces than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pieces_to_int[p1] > pieces_to_int[p2])
            for p1 in pieces for p2 in pieces]


def somewhat_fewer_than(var1, var2):
    """
    Formulate the constraint that var1 has somewhat fewer pieces than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pieces_to_int[p1] < pieces_to_int[p2])
            for p1 in pieces for p2 in pieces]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(companies)
m += AllDifferent(pieces)
m += AllDifferent(themes)

# Clue 1: The puzzle with the autumn leaves theme has somewhat more pieces than the jigsaw puzzle with the rustic village theme:
m += somewhat_more_than(autumn_leaves, rustic_village)

# Clue 2: The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme, and the puzzle with 1000 pieces:
m += AllDifferent([buralde, rustic_village, autumn_leaves, pieces1000])

# Clue 3: The jigsaw puzzle made by Buralde has the outer space theme:
m += buralde == outer_space

# Clue 4: The jigsaw puzzle made by Denlend has somewhat fewer pieces than the jigsaw puzzle with the outer space theme:
m += somewhat_fewer_than(denlend, outer_space)

# Clue 5: The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend:
m += ((kimsight == pieces250) & (denlend == pieces250)).implies(pieces_to_int[kimsight] == pieces_to_int[denlend] + 250)

```
Error: name 'IV4467' is not defined
False
False
Error: name 'IV4491' is not defined
---------------------------------------------------------------------------------------------

Clues:
The worker who works in the green section served more riders than Brett.
Peter served 25 fewer riders than Willis.
Brett served more riders than Peter.
The person who works in the yellow section served 25 more riders than the worker who works in the orange section.
Peter is either the person who served 125 riders or the person who works in the blue section.

Entities:
employees: Brett, Peter, Victor, Willis
rides: 50 riders, 75 riders, 100 riders, 125 riders
section: blue, green, orange, yellow
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Brett == 1, and Blue == 1, and Riders125 == 1, then Brett works in the blue section and served 125 riders.

### Decision variables:
-   Names of the employees: Brett, Peter, Victor, Willis (all different, 1 to 4)
-   Number of riders served: Riders50, Riders75, Riders100, Riders125 (all different, 1 to 4)
-   Sections: Blue, Green, Orange, Yellow (all different, 1 to 4)

### Constraints:
-   The worker who works in the green section served more riders than Brett:
    For this, we will need to add a constraint for each possible assignment of employees to the green section and Brett, such that the green section worker served more riders than Brett. So, the constraints will be of the form:
    e1 == Green and e2 == Brett => e1_to_int > e2_to_int, for all e1, e2 in employees.

-   Peter served 25 fewer riders than Willis:
    For this, we will need to add a constraint for each possible assignment of riders served by Peter and Willis, such that Peter served 25 fewer riders than Willis. So, the constraints will be of the form:
    r1 == Peter and r2 == Willis => r1_to_int == r2_to_int - 25, for all r1, r2 in riders served.

-   Brett served more riders than Peter:
    For this, we will need to add a constraint for each possible assignment of riders served by Brett and Peter, such that Brett served more riders than Peter. So, the constraints will be of the form:
    r1 == Brett and r2 == Peter => r1_to_int > r2_to_int, for all r1, r2 in riders served.

-   The person who works in the yellow section served 25 more riders than the worker who works in the orange section:
    For this, we will need to add a constraint for each possible assignment of employees to the yellow and orange sections, such that the yellow section worker served 25 more riders than the orange section worker. So, the constraints will be of the form:
    e1 == Yellow and e2 == Orange => e1_to_int == e2_to_int + 25, for all e1, e2 in employees.

-   Peter is either the person who served 125 riders or the person who works in the blue section:
    This is a constraint that states that Peter is either the person who served 125 riders or the person who works in the blue section, but not both. So:
    Xor([Peter == Riders125, Peter == Blue]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Brett == 1, and Blue == 1, and Riders125 == 1, then Brett works in the blue section and served 125 riders.

### Decision variables:
-   Names of the employees: Brett, Peter, Victor, Willis (all different, 1 to 4)
-   Number of riders served: Riders50, Riders75, Riders100, Riders125 (all different, 1 to 4)
-   Sections: Blue, Green, Orange, Yellow (all different, 1 to 4)

### Constraints:
-   The worker who works in the green section served more riders than Brett:
    For this, we will need to add a constraint for each possible assignment of employees to the green section and Brett, such that the green section worker served more riders than Brett. So, the constraints will be of the form:
    e1 == Green and e2 == Brett => e1_to_int > e2_to_int, for all e1, e2 in employees.

-   Peter served 25 fewer riders than Willis:
    For this, we will need to add a constraint for each possible assignment of riders served by Peter and Willis, such that Peter served 25 fewer riders than Willis. So, the constraints will be of the form:
    r1 == Peter and r2 == Willis => r1_to_int == r2_to_int - 25, for all r1, r2 in riders served.

-   Brett served more riders than Peter:
    For this, we will need to add a constraint for each possible assignment of riders served by Brett and Peter, such that Brett served more riders than Peter. So, the constraints will be of the form:
    r1 == Brett and r2 == Peter => r1_to_int > r2_to_int, for all r1, r2 in riders served.

-   The person who works in the yellow section served 25 more riders than the worker who works in the orange section:
    For this, we will need to add a constraint for each possible assignment of employees to the yellow and orange sections, such that the yellow section worker served 25 more riders than the orange section worker. So, the constraints will be of the form:
    e1 == Yellow and e2 == Orange => e1_to_int == e2_to_int + 25, for all e1, e2 in employees.

-   Peter is either the person who served 125 riders or the person who works in the blue section:
    This is a constraint that states that Peter is either the person who served 125 riders or the person who works in the blue section, but not both. So:
    Xor([Peter == Riders125, Peter == Blue]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of employee, riders served, and section)
# e.g. if brett == 1 and riders125 == 1 and blue == 1, then Brett served 125 riders and works in the blue section
brett, peter, victor, willis = employees = intvar(1, 4, shape=4)
riders50, riders75, riders100, riders125 = rides = intvar(1, 4, shape=4)
blue, green, orange, yellow = sections = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
employee_to_int = None  # N/A
riders_to_int = {riders50: 50, riders75: 75, riders100: 100, riders125: 125}  # number of riders served
section_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def served_more_than(var1, var2):
    """
    Formulate the constraint that var1 served more riders than var2.
    """
    return [((e1 == var1) & (e2 == var2)).implies(riders_to_int[e1] > riders_to_int[e2])
            for e1 in rides for e2 in rides]


def served_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 served exactly diff fewer riders than var2.
    """
    return [((r1 == var1) & (r2 == var2)).implies(riders_to_int[r1] == riders_to_int[r2] - diff)
            for r1 in rides for r2 in rides]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(employees)
m += AllDifferent(rides)
m += AllDifferent(sections)

# Clue 1: The worker who works in the green section served more riders than Brett:
m += served_more_than(green, brett)

# Clue 2: Peter served 25 fewer riders than Willis:
m += served_exactly_less_than(peter, willis, 25)

# Clue 3: Brett served more riders than Peter:
m += served_more_than(brett, peter)

# Clue 4: The person who works in the yellow section served 25 more riders than the worker who works in the orange section:
m += served_exactly_less_than(yellow, orange, 25)

# Clue 5: Peter is either the person who served 125 riders or the person who works in the blue section:
m += Xor([peter == riders125, peter == blue])

```
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The team from Venezuela finished with 4 gold medals.
The squad that won 2 gold medals ended with 6 silver medals.
The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals and the squad that won 8 silver medals.
The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals.

Entities:
countries: Dominica, Jordan, Venezuela, Zimbabwe
gold medals: 1, 2, 3, 4
silver medals: 2, 5, 6, 8
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Dominica == 1, and GoldMedal1 == 1, and SilverMedal2 == 1, then Dominica won 1 gold medal and 2 silver medals.

### Decision variables:
-   Countries: Dominica, Jordan, Venezuela, Zimbabwe (all different, 1 to 4)
-   Gold medals won: 1, 2, 3, 4 (all different, 1 to 4)
-   Silver medals won: 2, 5, 6, 8 (all different, 1 to 4)

### Constraints:
-   The team from Venezuela finished with 4 gold medals:
    This is a direct assignment constraint:
    Venezuela == GoldMedal4.

-   The squad that won 2 gold medals ended with 6 silver medals:
    This is a direct assignment constraint:
    GoldMedal2 == SilverMedal6.

-   The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals, and the squad that won 8 silver medals:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Zimbabwe, GoldMedal3, SilverMedal6, SilverMedal8]).

-   The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals:
    For this, we will need to add a constraint for each possible assignment of gold medals for Dominica and the squad that won 5 silver medals, such that Dominica's gold medals are 1 less than the squad that won 5 silver medals. So, the constraints will be of the form:
    g1 == Dominica and s1 == SilverMedal5 => g1_to_int == s1_to_int - 1, for all g1, s1 in gold medals and silver medals.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Dominica == 1, and GoldMedal1 == 1, and SilverMedal2 == 1, then Dominica won 1 gold medal and 2 silver medals.

### Decision variables:
-   Countries: Dominica, Jordan, Venezuela, Zimbabwe (all different, 1 to 4)
-   Gold medals won: 1, 2, 3, 4 (all different, 1 to 4)
-   Silver medals won: 2, 5, 6, 8 (all different, 1 to 4)

### Constraints:
-   The team from Venezuela finished with 4 gold medals:
    This is a direct assignment constraint:
    Venezuela == GoldMedal4.

-   The squad that won 2 gold medals ended with 6 silver medals:
    This is a direct assignment constraint:
    GoldMedal2 == SilverMedal6.

-   The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals, and the squad that won 8 silver medals:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Zimbabwe, GoldMedal3, SilverMedal6, SilverMedal8]).

-   The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals:
    For this, we will need to add a constraint for each possible assignment of gold medals for Dominica and the squad that won 5 silver medals, such that Dominica's gold medals are 1 less than the squad that won 5 silver medals. So, the constraints will be of the form:
    g1 == Dominica and s1 == SilverMedal5 => g1_to_int == s1_to_int - 1, for all g1, s1 in gold medals and silver medals.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of country, gold medals, and silver medals)
# e.g. if dominica == 1 and gold1 == 1 and silver2 == 1, then Dominica won 1 gold medal and 2 silver medals
dominica, jordan, venezuela, zimbabwe = countries = intvar(1, 4, shape=4)
gold1, gold2, gold3, gold4 = gold_medals = intvar(1, 4, shape=4)
silver2, silver5, silver6, silver8 = silver_medals = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
country_to_int = None  # N/A
gold_to_int = {gold1: 1, gold2: 2, gold3: 3, gold4: 4}  # in medals
silver_to_int = {silver2: 2, silver5: 5, silver6: 6, silver8: 8}  # in medals


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(countries)
m += AllDifferent(gold_medals)
m += AllDifferent(silver_medals)

# Clue 1: The team from Venezuela finished with 4 gold medals:
m += venezuela == gold4

# Clue 2: The squad that won 2 gold medals ended with 6 silver medals:
m += gold2 == silver6

# Clue 3: The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals, and the squad that won 8 silver medals:
m += AllDifferent([zimbabwe, gold3, silver6, silver8])

# Clue 4: The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals:
m += [(g1 == dominica) & (s1 == silver5) => g1 == s1 - 1 for g1 in gold_medals for s1 in silver_medals]

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Vorckin impact crater is 125 meters wide.
The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater.
The Ordovician impact crater is 25 meters wider than the Jurassic impact crater.
The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one.
The Cersay impact crater was formed during the Jurassic period.

Entities:
craters: Cersay, Moriwa, Ormagh, Vorckin
diameters: 100 meters, 125 meters, 150 meters, 175 meters
periods: Jurassic, Ordovician, Permian, Triassic
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Cersay == 1, and 100m == 1, and Jurassic == 1, then the Cersay impact crater has a diameter of 100 meters and was formed during the Jurassic period.

### Decision variables:
-   Names of the craters: Cersay, Moriwa, Ormagh, Vorckin (all different, 1 to 4)
-   Diameters of the craters: 100m, 125m, 150m, 175m (all different, 1 to 4)
-   Periods of formation: Jurassic, Ordovician, Permian, Triassic (all different, 1 to 4)

### Constraints:
-   The Vorckin impact crater is 125 meters wide:
    This is a direct assignment constraint:
    Vorckin == 125m.

-   The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater:
    This is a constraint that states that the 150 meters wide crater is either the Ordovician impact crater or the Permian impact crater, but not both. So:
    Xor([150m == Ordovician, 150m == Permian]).

-   The Ordovician impact crater is 25 meters wider than the Jurassic impact crater:
    For this, we will need to add a constraint for each possible assignment of the diameters for the Ordovician and Jurassic impact craters, such that the Ordovician impact crater's diameter is 25 more than the Jurassic impact crater's diameter. So, the constraints will be of the form:
    d1 == Ordovician and d2 == Jurassic => d1_to_int == d2_to_int + 25, for all d1, d2 in diameters.

-   The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one:
    This is a constraint that states that the Triassic impact crater is either the Ormagh impact crater or the 150 meters wide crater, but not both. So:
    Xor([Triassic == Ormagh, Triassic == 150m]).

-   The Cersay impact crater was formed during the Jurassic period:
    This is a direct assignment constraint:
    Cersay == Jurassic.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Cersay == 1, and 100m == 1, and Jurassic == 1, then the Cersay impact crater has a diameter of 100 meters and was formed during the Jurassic period.

### Decision variables:
-   Names of the craters: Cersay, Moriwa, Ormagh, Vorckin (all different, 1 to 4)
-   Diameters of the craters: 100m, 125m, 150m, 175m (all different, 1 to 4)
-   Periods of formation: Jurassic, Ordovician, Permian, Triassic (all different, 1 to 4)

### Constraints:
-   The Vorckin impact crater is 125 meters wide:
    This is a direct assignment constraint:
    Vorckin == 125m.

-   The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater:
    This is a constraint that states that the 150 meters wide crater is either the Ordovician impact crater or the Permian impact crater, but not both. So:
    Xor([150m == Ordovician, 150m == Permian]).

-   The Ordovician impact crater is 25 meters wider than the Jurassic impact crater:
    For this, we will need to add a constraint for each possible assignment of the diameters for the Ordovician and Jurassic impact craters, such that the Ordovician impact crater's diameter is 25 more than the Jurassic impact crater's diameter. So, the constraints will be of the form:
    d1 == Ordovician and d2 == Jurassic => d1_to_int == d2_to_int + 25, for all d1, d2 in diameters.

-   The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one:
    This is a constraint that states that the Triassic impact crater is either the Ormagh impact crater or the 150 meters wide crater, but not both. So:
    Xor([Triassic == Ormagh, Triassic == 150m]).

-   The Cersay impact crater was formed during the Jurassic period:
    This is a direct assignment constraint:
    Cersay == Jurassic.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of crater, diameter, and period)
# e.g. if cersay == 1 and 100m == 1 and jurassic == 1, then the Cersay impact crater has a diameter of 100 meters and was formed during the Jurassic period
cersay, moriwa, ormagh, vorckin = craters = intvar(1, 4, shape=4)
diameter_100m, diameter_125m, diameter_150m, diameter_175m = diameters = intvar(1, 4, shape=4)
jurassic, ordovician, permian, triassic = periods = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
crater_to_int = None  # N/A
diameter_to_int = {diameter_100m: 100, diameter_125m: 125, diameter_150m: 150, diameter_175m: 175}  # in meters
period_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def wider_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff meters wider than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(diameter_to_int[c1] == diameter_to_int[c2] + diff)
            for c1 in diameters for c2 in diameters]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(craters)
m += AllDifferent(diameters)
m += AllDifferent(periods)

# Clue 1: The Vorckin impact crater is 125 meters wide:
m += vorckin == diameter_125m

# Clue 2: The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater:
m += Xor([diameter_150m == ordovician, diameter_150m == permian])

# Clue 3: The Ordovician impact crater is 25 meters wider than the Jurassic impact crater:
m += wider_than(ordovician, jurassic, 25)

# Clue 4: The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one:
m += Xor([triassic == ormagh, triassic == diameter_150m])

# Clue 5: The Cersay impact crater was formed during the Jurassic period:
m += cersay == jurassic

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The butterfly that was auctioned 7th sold for 20 dollars less than the insect won by Daniel.
The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th and the butterfly won by Roland.
The butterfly won by Gabriel was the 8th lot.

Entities:
winners: Daniel, Gabriel, Roland, Vincent
prices: $250, $260, $270, $280
orders: 3rd, 4th, 7th, 8th
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Daniel == 1, and $250 == 1, and 3rd == 1, then Daniel won the butterfly that was auctioned 3rd and sold for $250.

### Decision variables:
-   Names of the winners: Daniel, Gabriel, Roland, Vincent (all different, 1 to 4)
-   Prices of the butterflies: $250, $260, $270, $280 (all different, 1 to 4)
-   Orders of the auctions: 3rd, 4th, 7th, 8th (all different, 1 to 4)

### Constraints:
-   The butterfly that was auctioned 7th sold for $20 less than the insect won by Daniel:
    For this, we will need to add a constraint for each possible assignment of the prices for the butterfly auctioned 7th and the butterfly won by Daniel, such that the price of the 7th auctioned butterfly is $20 less than Daniel's butterfly. So, the constraints will be of the form:
    p1 == 7th and p2 == Daniel => p1_to_int == p2_to_int - 20, for all p1, p2 in prices.

-   The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th, and the butterfly won by Roland:
    This is a constraint that states that these entities are the four butterflies, thus:
    AllDifferent([$260, 4th, 7th, Roland]).

-   The butterfly won by Gabriel was the 8th lot:
    This is a direct assignment constraint:
    Gabriel == 8th.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Daniel == 1, and $250 == 1, and 3rd == 1, then Daniel won the butterfly that was auctioned 3rd and sold for $250.

### Decision variables:
-   Names of the winners: Daniel, Gabriel, Roland, Vincent (all different, 1 to 4)
-   Prices of the butterflies: $250, $260, $270, $280 (all different, 1 to 4)
-   Orders of the auctions: 3rd, 4th, 7th, 8th (all different, 1 to 4)

### Constraints:
-   The butterfly that was auctioned 7th sold for $20 less than the insect won by Daniel:
    For this, we will need to add a constraint for each possible assignment of the prices for the butterfly auctioned 7th and the butterfly won by Daniel, such that the price of the 7th auctioned butterfly is $20 less than Daniel's butterfly. So, the constraints will be of the form:
    p1 == 7th and p2 == Daniel => p1_to_int == p2_to_int - 20, for all p1, p2 in prices.

-   The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th, and the butterfly won by Roland:
    This is a constraint that states that these entities are the four butterflies, thus:
    AllDifferent([$260, 4th, 7th, Roland]).

-   The butterfly won by Gabriel was the 8th lot:
    This is a direct assignment constraint:
    Gabriel == 8th.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of winner, price, and order)
# e.g. if daniel == 1 and price250 == 1 and order3rd == 1, then Daniel won the butterfly auctioned 3rd and sold for $250
daniel, gabriel, roland, vincent = winners = intvar(1, 4, shape=4)
price250, price260, price270, price280 = prices = intvar(1, 4, shape=4)
order3rd, order4th, order7th, order8th = orders = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
winner_to_int = None  # N/A
price_to_int = {price250: 250, price260: 260, price270: 270, price280: 280}  # in dollars
order_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def sold_for_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 sold for $diff less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(winners)
m += AllDifferent(prices)
m += AllDifferent(orders)

# Clue 1: The butterfly that was auctioned 7th sold for $20 less than the insect won by Daniel:
m += sold_for_less_than(order7th, daniel, 20)

# Clue 2: The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th, and the butterfly won by Roland:
m += AllDifferent([price260, order4th, order7th, roland])

# Clue 3: The butterfly won by Gabriel was the 8th lot:
m += gabriel == order8th

```
True
True
True
Wrong: 0, Total: 6
---------------------------------------------------------------------------------------------

Clues:
Greg threw the red darts.
Alton scored 7 points higher than Evan.
The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts.
The player who scored 48 points threw the yellow darts.
Greg scored 7 points higher than Jeffrey.

Entities:
players: Alton, Evan, Greg, Jeffrey
scores: 41, 48, 55, 62
colors: green, red, white, yellow
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Alton == 1, and 41 == 1, and Green == 1, then Alton scored 41 points with green darts.

### Decision variables:
-   Names of the players: Alton, Evan, Greg, Jeffrey (all different, 1 to 4)
-   Scores of the players: 41, 48, 55, 62 (all different, 1 to 4)
-   Colors of the darts: Green, Red, White, Yellow (all different, 1 to 4)

### Constraints:
-   Greg threw the red darts:
    This is a direct assignment constraint:
    Greg == Red.

-   Alton scored 7 points higher than Evan:
    For this, we will need to add a constraint for each possible assignment of scores to Alton and Evan, such that Alton's score is 7 more than Evan's score. So, the constraints will be of the form:
    s1 == Alton and s2 == Evan => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.

-   The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts:
    For this, we will need to add a constraint for each possible assignment of scores to the players who threw yellow and white darts, such that the score of the player who threw yellow darts is greater than the score of the player who threw white darts. So, the constraints will be of the form:
    s1 == Yellow and s2 == White => s1_to_int > s2_to_int, for all s1, s2 in scores.

-   The player who scored 48 points threw the yellow darts:
    This is a direct assignment constraint:
    48 == Yellow.

-   Greg scored 7 points higher than Jeffrey:
    For this, we will need to add a constraint for each possible assignment of scores to Greg and Jeffrey, such that Greg's score is 7 more than Jeffrey's score. So, the constraints will be of the form:
    s1 == Greg and s2 == Jeffrey => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Alton == 1, and 41 == 1, and Green == 1, then Alton scored 41 points with green darts.

### Decision variables:
-   Names of the players: Alton, Evan, Greg, Jeffrey (all different, 1 to 4)
-   Scores of the players: 41, 48, 55, 62 (all different, 1 to 4)
-   Colors of the darts: Green, Red, White, Yellow (all different, 1 to 4)

### Constraints:
-   Greg threw the red darts:
    This is a direct assignment constraint:
    Greg == Red.

-   Alton scored 7 points higher than Evan:
    For this, we will need to add a constraint for each possible assignment of scores to Alton and Evan, such that Alton's score is 7 more than Evan's score. So, the constraints will be of the form:
    s1 == Alton and s2 == Evan => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.

-   The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts:
    For this, we will need to add a constraint for each possible assignment of scores to the players who threw yellow and white darts, such that the score of the player who threw yellow darts is greater than the score of the player who threw white darts. So, the constraints will be of the form:
    s1 == Yellow and s2 == White => s1_to_int > s2_to_int, for all s1, s2 in scores.

-   The player who scored 48 points threw the yellow darts:
    This is a direct assignment constraint:
    48 == Yellow.

-   Greg scored 7 points higher than Jeffrey:
    For this, we will need to add a constraint for each possible assignment of scores to Greg and Jeffrey, such that Greg's score is 7 more than Jeffrey's score. So, the constraints will be of the form:
    s1 == Greg and s2 == Jeffrey => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, score, and color)
# e.g. if alton == 1 and fortyone == 1 and green == 1, then Alton scored 41 points with green darts
alton, evan, greg, jeffrey = players = intvar(1, 4, shape=4)
fortyone, fortyeight, fiftyfive, sixtytwo = scores = intvar(1, 4, shape=4)
green, red, white, yellow = colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
score_to_int = {fortyone: 41, fortyeight: 48, fiftyfive: 55, sixtytwo: 62}  # in points
color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_higher_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored diff points higher than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] == score_to_int[s2] + diff)
            for s1 in scores for s2 in scores]


def scored_more_than(var1, var2):
    """
    Formulate the constraint that var1 scored more points than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] > score_to_int[s2])
            for s1 in scores for s2 in scores]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(scores)
m += AllDifferent(colors)

# Clue 1: Greg threw the red darts:
m += greg == red

# Clue 2: Alton scored 7 points higher than Evan:
m += scored_higher_than(alton, evan, 7)

# Clue 3: The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts:
m += scored_more_than(yellow, white)

# Clue 4: The player who scored 48 points threw the yellow darts:
m += fortyeight == yellow

# Clue 5: Greg scored 7 points higher than Jeffrey:
m += scored_higher_than(greg, jeffrey, 7)

```
False
False
Error: list.remove(x): x not in list
Error: list.remove(x): x not in list
---------------------------------------------------------------------------------------------

Clues:
Vasquez will leave sometime after Macdonald.
Vasquez will leave 1 month before the ambassador with the 5 day visit.
Gilbert is either the person leaving in January or the ambassador with the 4 day visit.
Macdonald will leave 1 month before the ambassador with the 4 day visit.
The ambassador with the 4 day visit will leave sometime before the ambassador with the 9 day visit.

Entities:
diplomats: Gilbert, Macdonald, Pickett, Vasquez
months: January, February, March, April
durations: 4 day, 5 day, 9 day, 10 day
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Gilbert == 1, and January == 1, and Day4 == 1, then Gilbert is the diplomat leaving in January with a 4-day visit.

### Decision variables:
-   Names of the diplomats: Gilbert, Macdonald, Pickett, Vasquez (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Visit durations: Day4, Day5, Day9, Day10 (all different, 1 to 4)

### Constraints:
-   Vasquez will leave sometime after Macdonald:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Vasquez and Macdonald, such that Vasquez's month of departure is greater than Macdonald's month of departure. So, the constraints will be of the form:
    m1 == Vasquez and m2 == Macdonald => m1_to_int > m2_to_int, for all m1, m2 in months of departure.

-   Vasquez will leave 1 month before the ambassador with the 5-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Vasquez and the ambassador with the 5-day visit, such that Vasquez's month of departure is 1 less than the ambassador's month of departure. So, the constraints will be of the form:
    m1 == Vasquez and m2 == Day5 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.

-   Gilbert is either the person leaving in January or the ambassador with the 4-day visit:
    This is a constraint that states that Gilbert's month of departure is either January or the month of departure of the ambassador with the 4-day visit, but not both. So:
    Xor([Gilbert == January, Gilbert == Day4]).

-   Macdonald will leave 1 month before the ambassador with the 4-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Macdonald and the ambassador with the 4-day visit, such that Macdonald's month of departure is 1 less than the 4-day visit's month of departure. So, the constraints will be of the form:
    m1 == Macdonald and m2 == Day4 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.

-   The ambassador with the 4-day visit will leave sometime before the ambassador with the 9-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the ambassador with the 4-day visit and the ambassador with the 9-day visit, such that the 4-day visit's month of departure is less than the 9-day visit's month of departure. So, the constraints will be of the form:
    m1 == Day4 and m2 == Day9 => m1_to_int < m2_to_int, for all m1, m2 in months of departure.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Gilbert == 1, and January == 1, and Day4 == 1, then Gilbert is the diplomat leaving in January with a 4-day visit.

### Decision variables:
-   Names of the diplomats: Gilbert, Macdonald, Pickett, Vasquez (all different, 1 to 4)
-   Months of departure: January, February, March, April (all different, 1 to 4)
-   Visit durations: Day4, Day5, Day9, Day10 (all different, 1 to 4)

### Constraints:
-   Vasquez will leave sometime after Macdonald:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Vasquez and Macdonald, such that Vasquez's month of departure is greater than Macdonald's month of departure. So, the constraints will be of the form:
    m1 == Vasquez and m2 == Macdonald => m1_to_int > m2_to_int, for all m1, m2 in months of departure.

-   Vasquez will leave 1 month before the ambassador with the 5-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Vasquez and the ambassador with the 5-day visit, such that Vasquez's month of departure is 1 less than the ambassador's month of departure. So, the constraints will be of the form:
    m1 == Vasquez and m2 == Day5 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.

-   Gilbert is either the person leaving in January or the ambassador with the 4-day visit:
    This is a constraint that states that Gilbert's month of departure is either January or the month of departure of the ambassador with the 4-day visit, but not both. So:
    Xor([Gilbert == January, Gilbert == Day4]).

-   Macdonald will leave 1 month before the ambassador with the 4-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for Macdonald and the ambassador with the 4-day visit, such that Macdonald's month of departure is 1 less than the 4-day visit's month of departure. So, the constraints will be of the form:
    m1 == Macdonald and m2 == Day4 => m1_to_int == m2_to_int - 1, for all m1, m2 in months of departure.

-   The ambassador with the 4-day visit will leave sometime before the ambassador with the 9-day visit:
    For this, we will need to add a constraint for each possible assignment of the months of departure for the ambassador with the 4-day visit and the ambassador with the 9-day visit, such that the 4-day visit's month of departure is less than the 9-day visit's month of departure. So, the constraints will be of the form:
    m1 == Day4 and m2 == Day9 => m1_to_int < m2_to_int, for all m1, m2 in months of departure.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diplomat, month, and duration)
# e.g. if gilbert == 1 and january == 1 and days4 == 1, then Gilbert will leave in January and for 4 days
gilbert, macdonald, pickett, vasquez = diplomats = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
days4, days5, days9, days10 = durations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diplomat_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
duration_to_int = {days4: 4, days5: 5, days9: 9, days10: 10}  # in days


# Helper functions (for formulating comparison constraints)
def left_after_than(var1, var2):
    """
    Formulate the constraint that var1 left after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def left_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 left exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diplomats)
m += AllDifferent(months)
m += AllDifferent(durations)

# Clue 1: Vasquez will leave sometime after Macdonald:
m += left_after_than(vasquez, macdonald)

# Clue 2: Vasquez will leave 1 month before the ambassador with the 5-day visit:
m += left_exactly_after_than(vasquez, days5, -1)

# Clue 3: Gilbert is either the person leaving in January or the ambassador with the 4-day visit:
m += Xor([gilbert == january, gilbert == days4])

# Clue 4: Macdonald will leave 1 month before the ambassador with the 4-day visit:
m += left_exactly_after_than(macdonald, days4, -1)

# Clue 5: The ambassador with the 4-day visit will leave sometime before the ambassador with the 9-day visit:
m += left_after_than(days4, days9)

```
True
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hattie and the student who will major in Theology are different students.
The student who will major in English is either Tracy or the student who received the $25,000 scholarship.
Hattie was awarded $10,000 more than the person who will major in Physics.
The student who received the $40,000 scholarship will major in Theology.
Ora was awarded some amount less than the student who will major in Archaeology.

Entities:
names: Erma, Hattie, Ora, Tracy
scholarships: $25,000, $30,000, $35,000, $40,000
majors: Archaeology, English, Physics, Theology
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Erma == 1, and $25,000 == 1, and Archaeology == 1, then Erma received the $25,000 scholarship to major in Archaeology.

### Decision variables:
-   Names of the students: Erma, Hattie, Ora, Tracy (all different, 1 to 4)
-   Scholarship amounts: $25,000, $30,000, $35,000, $40,000 (all different, 1 to 4)
-   Majors: Archaeology, English, Physics, Theology (all different, 1 to 4)

### Constraints:
-   Hattie and the student who will major in Theology are different students:
    This is a constraint that states that Hattie and the student majoring in Theology are different, thus:
    AllDifferent([Hattie, Theology]).

-   The student who will major in English is either Tracy or the student who received the $25,000 scholarship:
    This is a constraint that states that the student majoring in English is either Tracy or the student who received the $25,000 scholarship, but not both. So:
    Xor([English == Tracy, English == $25,000]).

-   Hattie was awarded $10,000 more than the person majoring in Physics:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts to Hattie and the student majoring in Physics, such that Hattie's scholarship amount is $10,000 more than the student majoring in Physics. So, the constraints will be of the form:
    s1 == Hattie and s2 == Physics => s1_to_int == s2_to_int + 10, for all s1, s2 in scholarship amounts.

-   The student who received the $40,000 scholarship will major in Theology:
    This is a direct assignment constraint:
    $40,000 == Theology.

-   Ora was awarded some amount less than the student majoring in Archaeology:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts to Ora and the student majoring in Archaeology, such that Ora's scholarship amount is less than the student majoring in Archaeology. So, the constraints will be of the form:
    s1 == Ora and s2 == Archaeology => s1_to_int < s2_to_int, for all s1, s2 in scholarship amounts.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Erma == 1, and $25,000 == 1, and Archaeology == 1, then Erma received the $25,000 scholarship to major in Archaeology.

### Decision variables:
-   Names of the students: Erma, Hattie, Ora, Tracy (all different, 1 to 4)
-   Scholarship amounts: $25,000, $30,000, $35,000, $40,000 (all different, 1 to 4)
-   Majors: Archaeology, English, Physics, Theology (all different, 1 to 4)

### Constraints:
-   Hattie and the student who will major in Theology are different students:
    This is a constraint that states that Hattie and the student majoring in Theology are different, thus:
    AllDifferent([Hattie, Theology]).

-   The student who will major in English is either Tracy or the student who received the $25,000 scholarship:
    This is a constraint that states that the student majoring in English is either Tracy or the student who received the $25,000 scholarship, but not both. So:
    Xor([English == Tracy, English == $25,000]).

-   Hattie was awarded $10,000 more than the person majoring in Physics:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts to Hattie and the student majoring in Physics, such that Hattie's scholarship amount is $10,000 more than the student majoring in Physics. So, the constraints will be of the form:
    s1 == Hattie and s2 == Physics => s1_to_int == s2_to_int + 10, for all s1, s2 in scholarship amounts.

-   The student who received the $40,000 scholarship will major in Theology:
    This is a direct assignment constraint:
    $40,000 == Theology.

-   Ora was awarded some amount less than the student majoring in Archaeology:
    For this, we will need to add a constraint for each possible assignment of scholarship amounts to Ora and the student majoring in Archaeology, such that Ora's scholarship amount is less than the student majoring in Archaeology. So, the constraints will be of the form:
    s1 == Ora and s2 == Archaeology => s1_to_int < s2_to_int, for all s1, s2 in scholarship amounts.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, scholarship, and major)
# e.g. if erma == 1 and $25,000 == 1 and archaeology == 1, then Erma received the $25,000 scholarship to major in Archaeology
erma, hattie, ora, tracy = students = intvar(1, 4, shape=4)
$25,000, $30,000, $35,000, $40,000 = scholarships = intvar(1, 4, shape=4)
archaeology, english, physics, theology = majors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
scholarship_to_int = {25000: 1, 30000: 2, 35000: 3, 40000: 4}  # in dollars
major_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def awarded_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was awarded diff more than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] == scholarship_to_int[s2] + diff)
            for s1 in scholarships for s2 in scholarships]


def awarded_less_than(var1, var2):
    """
    Formulate the constraint that var1 was awarded less than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] < scholarship_to_int[s2])
            for s1 in scholarships for s2 in scholarships]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(scholarships)
m += AllDifferent(majors)

# Clue 1: Hattie and the student who will major in Theology are different students:
m += AllDifferent([hattie, theology])

# Clue 2: The student who will major in English is either Tracy or the student who received the $25,000 scholarship:
m += Xor([english == tracy, english == $25,000])

# Clue 3: Hattie was awarded $10,000 more than the person who will major in Physics:
m += awarded_more_than(hattie, physics, 10)

# Clue 4: The student who received the $40,000 scholarship will major in Theology:
m += $40,000 == theology

# Clue 5: Ora was awarded some amount less than the student majoring in Archaeology:
m += awarded_less_than(ora, archaeology)

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Hatcha started 6 years after the wing back.
Kawa began playing in 1982.
Banben was the center back.
The person who started in 1985 was either Kawa or the center forward.

Entities:
players: Banben, Hatcha, Kawa, Rothvum
years: 1976, 1979, 1982, 1985
positions: center back, center forward, goalie, wing back
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Banben == 1, and 1976 == 1, and CenterBack == 1, then Banben started playing in 1976 as the center back.

### Decision variables:
-   Names of the players: Banben, Hatcha, Kawa, Rothvum (all different, 1 to 4)
-   Starting years: 1976, 1979, 1982, 1985 (all different, 1 to 4)
-   Positions played: CenterBack, CenterForward, Goalie, WingBack (all different, 1 to 4)

### Constraints:
-   Hatcha started 6 years after the wing back:
    For this, we will need to add a constraint for each possible assignment of starting years for Hatcha and the wing back, such that Hatcha's starting year is 6 more than the wing back's starting year. So, the constraints will be of the form:
    y1 == Hatcha and y2 == WingBack => y1_to_int == y2_to_int + 6, for all y1, y2 in starting years.

-   Kawa began playing in 1982:
    This is a direct assignment constraint:
    Kawa == 1982.

-   Banben was the center back:
    This is a direct assignment constraint:
    Banben == CenterBack.

-   The person who started in 1985 was either Kawa or the center forward:
    This is a constraint that states that the player who started in 1985 is either Kawa or the center forward, but not both. So:
    Xor([1985 == Kawa, 1985 == CenterForward]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Banben == 1, and 1976 == 1, and CenterBack == 1, then Banben started playing in 1976 as the center back.

### Decision variables:
-   Names of the players: Banben, Hatcha, Kawa, Rothvum (all different, 1 to 4)
-   Starting years: 1976, 1979, 1982, 1985 (all different, 1 to 4)
-   Positions played: CenterBack, CenterForward, Goalie, WingBack (all different, 1 to 4)

### Constraints:
-   Hatcha started 6 years after the wing back:
    For this, we will need to add a constraint for each possible assignment of starting years for Hatcha and the wing back, such that Hatcha's starting year is 6 more than the wing back's starting year. So, the constraints will be of the form:
    y1 == Hatcha and y2 == WingBack => y1_to_int == y2_to_int + 6, for all y1, y2 in starting years.

-   Kawa began playing in 1982:
    This is a direct assignment constraint:
    Kawa == 1982.

-   Banben was the center back:
    This is a direct assignment constraint:
    Banben == CenterBack.

-   The person who started in 1985 was either Kawa or the center forward:
    This is a constraint that states that the player who started in 1985 is either Kawa or the center forward, but not both. So:
    Xor([1985 == Kawa, 1985 == CenterForward]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, year, and position)
# e.g. if banben == 1 and year1976 == 1 and center_back == 1, then Banben started playing in 1976 as the center back
banben, hatcha, kawa, rothvum = players = intvar(1, 4, shape=4)
year1976, year1979, year1982, year1985 = years = intvar(1, 4, shape=4)
center_back, center_forward, goalie, wing_back = positions = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
year_to_int = {year1976: 1976, year1979: 1979, year1982: 1982, year1985: 1985}  # in years
position_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(years)
m += AllDifferent(positions)

# Clue 1: Hatcha started 6 years after the wing back:
m += started_after_than(hatcha, wing_back, 6)

# Clue 2: Kawa began playing in 1982:
m += kawa == year1982

# Clue 3: Banben was the center back:
m += banben == center_back

# Clue 4: The person who started in 1985 was either Kawa or the center forward:
m += Xor([year1985 == kawa, year1985 == center_forward])

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The puzzle with the postage stamp theme has somewhat fewer than the puzzle made by Astury.
The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda.
The jigsaw puzzle made by Garroda has somewhat fewer than the puzzle made by Vesem.
The jigsaw puzzle with the postage stamp theme has somewhat more than the puzzle with the city skyline theme.
The jigsaw puzzle made by Vesem has 500 pieces.

Entities:
companies: Astury, Denlend, Garroda, Vesem
pieces: 250, 500, 750, 1000
themes: autumn leaves, city skyline, outer space, postage stamp
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Astury == 1, and 250 == 1, and AutumnLeaves == 1, then Astury made a 250-piece puzzle with the autumn leaves theme.

### Decision variables:
-   Companies: Astury, Denlend, Garroda, Vesem (all different, 1 to 4)
-   Number of pieces: 250, 500, 750, 1000 (all different, 1 to 4)
-   Themes: AutumnLeaves, CitySkyline, OuterSpace, PostageStamp (all different, 1 to 4)

### Constraints:
-   The puzzle with the postage stamp theme has somewhat fewer pieces than the puzzle made by Astury:
    For this, we will need to add a constraint for each possible assignment of themes and pieces for the postage stamp theme and Astury's puzzle, such that the postage stamp theme puzzle has somewhat fewer pieces than Astury's puzzle. So, the constraints will be of the form:
    t1 == PostageStamp and t2 == Astury => p1_to_int < p2_to_int, for all t1, t2 in pieces.

-   The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda:
    For this, we will need to add a constraint for each possible assignment of themes and pieces for the outer space theme puzzle and Garroda's puzzle, such that the outer space theme puzzle has 250 more pieces than Garroda's puzzle. So, the constraints will be of the form:
    t1 == OuterSpace and t2 == Garroda => p1_to_int == p2_to_int + 250, for all t1, t2 in pieces.

-   The jigsaw puzzle made by Garroda has somewhat fewer pieces than the puzzle made by Vesem:
    For this, we will need to add a constraint for each possible assignment of companies and pieces for Garroda's puzzle and Vesem's puzzle, such that Garroda's puzzle has somewhat fewer pieces than Vesem's puzzle. So, the constraints will be of the form:
    c1 == Garroda and c2 == Vesem => p1_to_int < p2_to_int, for all c1, c2 in pieces.

-   The jigsaw puzzle with the postage stamp theme has somewhat more pieces than the puzzle with the city skyline theme:
    For this, we will need to add a constraint for each possible assignment of themes and pieces for the postage stamp theme puzzle and the city skyline theme puzzle, such that the postage stamp theme puzzle has somewhat more pieces than the city skyline theme puzzle. So, the constraints will be of the form:
    t1 == PostageStamp and t2 == CitySkyline => p1_to_int > p2_to_int, for all t1, t2 in pieces.

-   The jigsaw puzzle made by Vesem has 500 pieces:
    This is a direct assignment constraint:
    Vesem == 500.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Astury == 1, and 250 == 1, and AutumnLeaves == 1, then Astury made a 250-piece puzzle with the autumn leaves theme.

### Decision variables:
-   Companies: Astury, Denlend, Garroda, Vesem (all different, 1 to 4)
-   Number of pieces: 250, 500, 750, 1000 (all different, 1 to 4)
-   Themes: AutumnLeaves, CitySkyline, OuterSpace, PostageStamp (all different, 1 to 4)

### Constraints:
-   The puzzle with the postage stamp theme has somewhat fewer pieces than the puzzle made by Astury:
    For this, we will need to add a constraint for each possible assignment of themes and pieces for the postage stamp theme and Astury's puzzle, such that the postage stamp theme puzzle has somewhat fewer pieces than Astury's puzzle. So, the constraints will be of the form:
    t1 == PostageStamp and t2 == Astury => p1_to_int < p2_to_int, for all t1, t2 in pieces.

-   The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda:
    For this, we will need to add a constraint for each possible assignment of themes and pieces for the outer space theme puzzle and Garroda's puzzle, such that the outer space theme puzzle has 250 more pieces than Garroda's puzzle. So, the constraints will be of the form:
    t1 == OuterSpace and t2 == Garroda => p1_to_int == p2_to_int + 250, for all t1, t2 in pieces.

-   The jigsaw puzzle made by Garroda has somewhat fewer pieces than the puzzle made by Vesem:
    For this, we will need to add a constraint for each possible assignment of companies and pieces for Garroda's puzzle and Vesem's puzzle, such that Garroda's puzzle has somewhat fewer pieces than Vesem's puzzle. So, the constraints will be of the form:
    c1 == Garroda and c2 == Vesem => p1_to_int < p2_to_int, for all c1, c2 in pieces.

-   The jigsaw puzzle with the postage stamp theme has somewhat more pieces than the puzzle with the city skyline theme:
    For this, we will need to add a constraint for each possible assignment of themes and pieces for the postage stamp theme puzzle and the city skyline theme puzzle, such that the postage stamp theme puzzle has somewhat more pieces than the city skyline theme puzzle. So, the constraints will be of the form:
    t1 == PostageStamp and t2 == CitySkyline => p1_to_int > p2_to_int, for all t1, t2 in pieces.

-   The jigsaw puzzle made by Vesem has 500 pieces:
    This is a direct assignment constraint:
    Vesem == 500.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of company, pieces, and theme)
# e.g. if astury == 1 and pieces250 == 1 and autumn_leaves == 1, then Astury made a 250-piece puzzle with the autumn leaves theme
astury, denlend, garroda, vesem = companies = intvar(1, 4, shape=4)
pieces250, pieces500, pieces750, pieces1000 = pieces = intvar(1, 4, shape=4)
autumn_leaves, city_skyline, outer_space, postage_stamp = themes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
company_to_int = None  # N/A
pieces_to_int = {pieces250: 250, pieces500: 500, pieces750: 750, pieces1000: 1000}  # in pieces
theme_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def somewhat_fewer_than(var1, var2):
    """
    Formulate the constraint that var1 has somewhat fewer pieces than var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(pieces_to_int[v1] < pieces_to_int[v2])
            for v1 in pieces for v2 in pieces]


def somewhat_more_than(var1, var2):
    """
    Formulate the constraint that var1 has somewhat more pieces than var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(pieces_to_int[v1] > pieces_to_int[v2])
            for v1 in pieces for v2 in pieces]


def exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff more pieces than var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(pieces_to_int[v1] == pieces_to_int[v2] + diff)
            for v1 in pieces for v2 in pieces]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(companies)
m += AllDifferent(pieces)
m += AllDifferent(themes)

# Clue 1: The puzzle with the postage stamp theme has somewhat fewer pieces than the puzzle made by Astury:
m += somewhat_fewer_than(postage_stamp, astury)

# Clue 2: The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda:
m += exactly_more_than(outer_space, garroda, 250)

# Clue 3: The jigsaw puzzle made by Garroda has somewhat fewer pieces than the puzzle made by Vesem:
m += somewhat_fewer_than(garroda, vesem)

# Clue 4: The jigsaw puzzle with the postage stamp theme has somewhat more pieces than the puzzle with the city skyline theme:
m += somewhat_more_than(postage_stamp, city_skyline)

# Clue 5: The jigsaw puzzle made by Vesem has 500 pieces:
m += vesem == pieces500

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware.
The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science.
The photo of the polar bear was taken sometime before the shot of the white rhino.
The photo taken in April was published by Animal Science.
The photo of the giant tortoise was taken in June.

Entities:
animals: giant tortoise, orangutan, polar bear, white rhino
months: March, April, May, June
magazines: Animal Science, Earth Aware, Nature Monthly, Wildzone
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if GiantTortoise == 1, and June == 1, and AnimalScience == 1, then the photo of the giant tortoise was taken in June and published by Animal Science.

### Decision variables:
-   Animals in the photos: GiantTortoise, Orangutan, PolarBear, WhiteRhino (all different, 1 to 4)
-   Months when the photos were taken: March, April, May, June (all different, 1 to 4)
-   Magazines that published the photos: AnimalScience, EarthAware, NatureMonthly, Wildzone (all different, 1 to 4)

### Constraints:
-   The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware:
    For this, we will need to add a constraint for each possible assignment of the months for the photos published by Nature Monthly and Earth Aware, such that the month of the photo published by Nature Monthly is 2 more than the month of the photo published by Earth Aware. So, the constraints will be of the form:
    m1 == NatureMonthly and m2 == EarthAware => m1_to_int == m2_to_int + 2, for all m1, m2 in months.

-   The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science:
    This is a constraint that states that the shot of the white rhino is either published by Earth Aware or Animal Science, but not both. So:
    Xor([WhiteRhino == EarthAware, WhiteRhino == AnimalScience]).

-   The photo of the polar bear was taken sometime before the shot of the white rhino:
    For this, we will need to add a constraint for each possible assignment of the months for the photos of the polar bear and the white rhino, such that the month of the photo of the polar bear is less than the month of the photo of the white rhino. So, the constraints will be of the form:
    m1 == PolarBear and m2 == WhiteRhino => m1_to_int < m2_to_int, for all m1, m2 in months.

-   The photo taken in April was published by Animal Science:
    This is a direct assignment constraint:
    April == AnimalScience.

-   The photo of the giant tortoise was taken in June:
    This is a direct assignment constraint:
    GiantTortoise == June.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if GiantTortoise == 1, and June == 1, and AnimalScience == 1, then the photo of the giant tortoise was taken in June and published by Animal Science.

### Decision variables:
-   Animals in the photos: GiantTortoise, Orangutan, PolarBear, WhiteRhino (all different, 1 to 4)
-   Months when the photos were taken: March, April, May, June (all different, 1 to 4)
-   Magazines that published the photos: AnimalScience, EarthAware, NatureMonthly, Wildzone (all different, 1 to 4)

### Constraints:
-   The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware:
    For this, we will need to add a constraint for each possible assignment of the months for the photos published by Nature Monthly and Earth Aware, such that the month of the photo published by Nature Monthly is 2 more than the month of the photo published by Earth Aware. So, the constraints will be of the form:
    m1 == NatureMonthly and m2 == EarthAware => m1_to_int == m2_to_int + 2, for all m1, m2 in months.

-   The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science:
    This is a constraint that states that the shot of the white rhino is either published by Earth Aware or Animal Science, but not both. So:
    Xor([WhiteRhino == EarthAware, WhiteRhino == AnimalScience]).

-   The photo of the polar bear was taken sometime before the shot of the white rhino:
    For this, we will need to add a constraint for each possible assignment of the months for the photos of the polar bear and the white rhino, such that the month of the photo of the polar bear is less than the month of the photo of the white rhino. So, the constraints will be of the form:
    m1 == PolarBear and m2 == WhiteRhino => m1_to_int < m2_to_int, for all m1, m2 in months.

-   The photo taken in April was published by Animal Science:
    This is a direct assignment constraint:
    April == AnimalScience.

-   The photo of the giant tortoise was taken in June:
    This is a direct assignment constraint:
    GiantTortoise == June.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of animal, month, and magazine)
# e.g. if giant_tortoise == 1 and june == 1 and animal_science == 1, then the photo of the giant tortoise was taken in June and published by Animal Science
giant_tortoise, orangutan, polar_bear, white_rhino = animals = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
animal_science, earth_aware, nature_monthly, wildzone = magazines = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
animal_to_int = None  # N/A
month_to_int = {march: 3, april: 4, may: 5, june: 6}  # in months
magazine_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def taken_after_than(var1, var2):
    """
    Formulate the constraint that var1 taken after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def taken_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 taken exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(animals)
m += AllDifferent(months)
m += AllDifferent(magazines)

# Clue 1: The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware:
m += taken_exactly_after_than(nature_monthly, earth_aware, 2)

# Clue 2: The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science:
m += Xor([white_rhino == earth_aware, white_rhino == animal_science])

# Clue 3: The photo of the polar bear was taken sometime before the shot of the white rhino:
m += taken_after_than(polar_bear, white_rhino)

# Clue 4: The photo taken in April was published by Animal Science:
m += april == animal_science

# Clue 5: The photo of the giant tortoise was taken in June:
m += giant_tortoise == june

```
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Oginao is either the 105 ft tall fall or the 115 ft tall waterfall.
Oginao is 5 ft shorter than Irskela.
The fall in Brazil is either Cerbel or Inawatai.
Inawatai is in New Zealand.
Cerbel is 10 ft shorter than the fall in Canada.

Entities:
names: Cerbel, Irskela, Inawatai, Oginao
heights: 100 ft, 105 ft, 110 ft, 115 ft
countries: Canada, Brazil, New Zealand, Switzerland
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Cerbel == 1, and 100ft == 1, and Canada == 1, then Cerbel is the 100 ft tall fall in Canada.

### Decision variables:
-   Names of the falls: Cerbel, Irskela, Inawatai, Oginao (all different, 1 to 4)
-   Heights of the falls: 100 ft, 105 ft, 110 ft, 115 ft (all different, 1 to 4)
-   Countries where the falls are located: Canada, Brazil, New Zealand, Switzerland (all different, 1 to 4)

### Constraints:
-   Oginao is either the 105 ft tall fall or the 115 ft tall waterfall:
    This is a constraint that states that Oginao's height is either 105 ft or 115 ft, but not both. So:
    Xor([Oginao == 105ft, Oginao == 115ft]).

-   Oginao is 5 ft shorter than Irskela:
    For this, we will need to add a constraint for each possible assignment of heights for Oginao and Irskela, such that Oginao's height is 5 less than Irskela's height. So, the constraints will be of the form:
    h1 == Oginao and h2 == Irskela => h1_to_int == h2_to_int - 5, for all h1, h2 in heights.

-   The fall in Brazil is either Cerbel or Inawatai:
    This is a constraint that states that the fall in Brazil is either Cerbel or Inawatai, but not both. So:
    Xor([Brazil == Cerbel, Brazil == Inawatai]).

-   Inawatai is in New Zealand:
    This is a direct assignment constraint:
    Inawatai == NewZealand.

-   Cerbel is 10 ft shorter than the fall in Canada:
    For this, we will need to add a constraint for each possible assignment of heights for Cerbel and the fall in Canada, such that Cerbel's height is 10 less than the fall in Canada's height. So, the constraints will be of the form:
    h1 == Cerbel and h2 == Canada => h1_to_int == h2_to_int - 10, for all h1, h2 in heights.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Cerbel == 1, and 100ft == 1, and Canada == 1, then Cerbel is the 100 ft tall fall in Canada.

### Decision variables:
-   Names of the falls: Cerbel, Irskela, Inawatai, Oginao (all different, 1 to 4)
-   Heights of the falls: 100 ft, 105 ft, 110 ft, 115 ft (all different, 1 to 4)
-   Countries where the falls are located: Canada, Brazil, New Zealand, Switzerland (all different, 1 to 4)

### Constraints:
-   Oginao is either the 105 ft tall fall or the 115 ft tall waterfall:
    This is a constraint that states that Oginao's height is either 105 ft or 115 ft, but not both. So:
    Xor([Oginao == 105ft, Oginao == 115ft]).

-   Oginao is 5 ft shorter than Irskela:
    For this, we will need to add a constraint for each possible assignment of heights for Oginao and Irskela, such that Oginao's height is 5 less than Irskela's height. So, the constraints will be of the form:
    h1 == Oginao and h2 == Irskela => h1_to_int == h2_to_int - 5, for all h1, h2 in heights.

-   The fall in Brazil is either Cerbel or Inawatai:
    This is a constraint that states that the fall in Brazil is either Cerbel or Inawatai, but not both. So:
    Xor([Brazil == Cerbel, Brazil == Inawatai]).

-   Inawatai is in New Zealand:
    This is a direct assignment constraint:
    Inawatai == NewZealand.

-   Cerbel is 10 ft shorter than the fall in Canada:
    For this, we will need to add a constraint for each possible assignment of heights for Cerbel and the fall in Canada, such that Cerbel's height is 10 less than the fall in Canada's height. So, the constraints will be of the form:
    h1 == Cerbel and h2 == Canada => h1_to_int == h2_to_int - 10, for all h1, h2 in heights.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of fall, height, and country)
# e.g. if cerbel == 1 and ft100 == 1 and canada == 1, then Cerbel is the 100 ft tall fall in Canada
cerbel, irskela, inawatai, oginao = falls = intvar(1, 4, shape=4)
ft100, ft105, ft110, ft115 = heights = intvar(1, 4, shape=4)
canada, brazil, new_zealand, switzerland = countries = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
fall_to_int = None  # N/A
height_to_int = {ft100: 100, ft105: 105, ft110: 110, ft115: 115}  # in feet
country_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff feet shorter than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] == height_to_int[h2] - diff)
            for h1 in heights for h2 in heights]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(falls)
m += AllDifferent(heights)
m += AllDifferent(countries)

# Clue 1: Oginao is either the 105 ft tall fall or the 115 ft tall waterfall:
m += Xor([oginao == ft105, oginao == ft115])

# Clue 2: Oginao is 5 ft shorter than Irskela:
m += shorter_than(oginao, irskela, 5)

# Clue 3: The fall in Brazil is either Cerbel or Inawatai:
m += Xor([brazil == cerbel, brazil == inawatai])

# Clue 4: Inawatai is in New Zealand:
m += inawatai == new_zealand

# Clue 5: Cerbel is 10 ft shorter than the fall in Canada:
m += shorter_than(cerbel, canada, 10)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The 90 million year old fossil costs 250 dollars more than the pilodontus.
The gigasaurus costs 500 dollars more than the 78 million year old fossil.
The gigasaurus costs 250 dollars less than the 75 million year old fossil.
The mirasaurus is 90 million years old.

Entities:
dinosaurs: gigasaurus, mirasaurus, pilodontus, rotosaurus
prices: $500, $750, $1000, $1250
ages: 72 million, 75 million, 78 million, 90 million
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if gigasaurus == 1, and Price500 == 1, and Age72 == 1, then gigasaurus costs $500 and is 72 million years old.

### Decision variables:
-   Names of the dinosaurs: gigasaurus, mirasaurus, pilodontus, rotosaurus (all different, 1 to 4)
-   Prices of the fossils: Price500, Price750, Price1000, Price1250 (all different, 1 to 4)
-   Ages of the fossils: Age72, Age75, Age78, Age90 (all different, 1 to 4)

### Constraints:
-   The 90 million year old fossil costs 250 dollars more than the pilodontus:
    For this, we will need to add a constraint for each possible assignment of prices for the 90 million year old fossil and the pilodontus, such that the 90 million year old fossil's price is 250 dollars more than the pilodontus's price. So, the constraints will be of the form:
    p1 == Age90 and p2 == pilodontus => p1_to_int == p2_to_int + 250, for all p1, p2 in prices.

-   The gigasaurus costs 500 dollars more than the 78 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of prices for the gigasaurus and the 78 million year old fossil, such that the gigasaurus's price is 500 dollars more than the 78 million year old fossil's price. So, the constraints will be of the form:
    p1 == gigasaurus and p2 == Age78 => p1_to_int == p2_to_int + 500, for all p1, p2 in prices.

-   The gigasaurus costs 250 dollars less than the 75 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of prices for the gigasaurus and the 75 million year old fossil, such that the gigasaurus's price is 250 dollars less than the 75 million year old fossil's price. So, the constraints will be of the form:
    p1 == gigasaurus and p2 == Age75 => p1_to_int == p2_to_int - 250, for all p1, p2 in prices.

-   The mirasaurus is 90 million years old:
    This is a direct assignment constraint:
    mirasaurus == Age90.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if gigasaurus == 1, and Price500 == 1, and Age72 == 1, then gigasaurus costs $500 and is 72 million years old.

### Decision variables:
-   Names of the dinosaurs: gigasaurus, mirasaurus, pilodontus, rotosaurus (all different, 1 to 4)
-   Prices of the fossils: Price500, Price750, Price1000, Price1250 (all different, 1 to 4)
-   Ages of the fossils: Age72, Age75, Age78, Age90 (all different, 1 to 4)

### Constraints:
-   The 90 million year old fossil costs 250 dollars more than the pilodontus:
    For this, we will need to add a constraint for each possible assignment of prices for the 90 million year old fossil and the pilodontus, such that the 90 million year old fossil's price is 250 dollars more than the pilodontus's price. So, the constraints will be of the form:
    p1 == Age90 and p2 == pilodontus => p1_to_int == p2_to_int + 250, for all p1, p2 in prices.

-   The gigasaurus costs 500 dollars more than the 78 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of prices for the gigasaurus and the 78 million year old fossil, such that the gigasaurus's price is 500 dollars more than the 78 million year old fossil's price. So, the constraints will be of the form:
    p1 == gigasaurus and p2 == Age78 => p1_to_int == p2_to_int + 500, for all p1, p2 in prices.

-   The gigasaurus costs 250 dollars less than the 75 million year old fossil:
    For this, we will need to add a constraint for each possible assignment of prices for the gigasaurus and the 75 million year old fossil, such that the gigasaurus's price is 250 dollars less than the 75 million year old fossil's price. So, the constraints will be of the form:
    p1 == gigasaurus and p2 == Age75 => p1_to_int == p2_to_int - 250, for all p1, p2 in prices.

-   The mirasaurus is 90 million years old:
    This is a direct assignment constraint:
    mirasaurus == Age90.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of dinosaur, price, and age)
# e.g. if gigasaurus == 1 and price500 == 1 and age72 == 1, then gigasaurus costs $500 and is 72 million years old
gigasaurus, mirasaurus, pilodontus, rotosaurus = dinosaurs = intvar(1, 4, shape=4)
price500, price750, price1000, price1250 = prices = intvar(1, 4, shape=4)
age72, age75, age78, age90 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
dinosaur_to_int = None  # N/A
price_to_int = {price500: 500, price750: 750, price1000: 1000, price1250: 1250}  # in dollars
age_to_int = {age72: 72, age75: 75, age78: 78, age90: 90}  # in million years


# Helper functions (for formulating comparison constraints)
def costs_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


def costs_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(dinosaurs)
m += AllDifferent(prices)
m += AllDifferent(ages)

# Clue 1: The 90 million year old fossil costs 250 dollars more than the pilodontus:
m += costs_more_than(age90, pilodontus, 250)

# Clue 2: The gigasaurus costs 500 dollars more than the 78 million year old fossil:
m += costs_more_than(gigasaurus, age78, 500)

# Clue 3: The gigasaurus costs 250 dollars less than the 75 million year old fossil:
m += costs_less_than(gigasaurus, age75, 250)

# Clue 4: The mirasaurus is 90 million years old:
m += mirasaurus == age90

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The four conductors are Roderick, the conductor working on June 10, the person departing from Leland and the person departing from Indio.
The person working on June 13 will depart from Hardwick.
The conductor working on June 12 is either the conductor departing from Indio or Roderick.
Vernon is either the person working on June 11 or the conductor working on June 13.
Francis will leave sometime before the conductor departing from Leland.

Entities:
names: Francis, Luke, Roderick, Vernon
days: June 10, June 11, June 12, June 13
departures: Hardwick, Indio, Kent, Leland
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Francis == 1, and June10 == 1, and Hardwick == 1, then Francis is the conductor working on June 10 departing from Hardwick.

### Decision variables:
-   Names of the conductors: Francis, Luke, Roderick, Vernon (all different, 1 to 4)
-   Days of work: June10, June11, June12, June13 (all different, 1 to 4)
-   Departure locations: Hardwick, Indio, Kent, Leland (all different, 1 to 4)

### Constraints:
-   The four conductors are Roderick, the conductor working on June 10, the person departing from Leland, and the person departing from Indio:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Roderick, June10, Leland, Indio]).

-   The person working on June 13 will depart from Hardwick:
    This is a direct assignment constraint:
    June13 == Hardwick.

-   The conductor working on June 12 is either the conductor departing from Indio or Roderick:
    This is a constraint that states that the conductor working on June 12 is either the conductor departing from Indio or Roderick, but not both. So:
    Xor([June12 == Indio, June12 == Roderick]).

-   Vernon is either the person working on June 11 or the conductor working on June 13:
    This is a constraint that states that Vernon is either the person working on June 11 or the conductor working on June 13, but not both. So:
    Xor([Vernon == June11, Vernon == June13]).

-   Francis will leave sometime before the conductor departing from Leland:
    For this, we will need to add a constraint for each possible assignment of the days of work for Francis and the conductor departing from Leland, such that Francis's day of work is less than the conductor departing from Leland's day of work. So, the constraints will be of the form:
    d1 == Francis and d2 == Leland => d1_to_int < d2_to_int, for all d1, d2 in days of work.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Francis == 1, and June10 == 1, and Hardwick == 1, then Francis is the conductor working on June 10 departing from Hardwick.

### Decision variables:
-   Names of the conductors: Francis, Luke, Roderick, Vernon (all different, 1 to 4)
-   Days of work: June10, June11, June12, June13 (all different, 1 to 4)
-   Departure locations: Hardwick, Indio, Kent, Leland (all different, 1 to 4)

### Constraints:
-   The four conductors are Roderick, the conductor working on June 10, the person departing from Leland, and the person departing from Indio:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Roderick, June10, Leland, Indio]).

-   The person working on June 13 will depart from Hardwick:
    This is a direct assignment constraint:
    June13 == Hardwick.

-   The conductor working on June 12 is either the conductor departing from Indio or Roderick:
    This is a constraint that states that the conductor working on June 12 is either the conductor departing from Indio or Roderick, but not both. So:
    Xor([June12 == Indio, June12 == Roderick]).

-   Vernon is either the person working on June 11 or the conductor working on June 13:
    This is a constraint that states that Vernon is either the person working on June 11 or the conductor working on June 13, but not both. So:
    Xor([Vernon == June11, Vernon == June13]).

-   Francis will leave sometime before the conductor departing from Leland:
    For this, we will need to add a constraint for each possible assignment of the days of work for Francis and the conductor departing from Leland, such that Francis's day of work is less than the conductor departing from Leland's day of work. So, the constraints will be of the form:
    d1 == Francis and d2 == Leland => d1_to_int < d2_to_int, for all d1, d2 in days of work.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, day, and departure)
# e.g. if francis == 1 and june10 == 1 and hardwick == 1, then Francis is the conductor working on June 10 departing from Hardwick
francis, luke, roderick, vernon = conductors = intvar(1, 4, shape=4)
june10, june11, june12, june13 = days = intvar(1, 4, shape=4)
hardwick, indio, kent, leland = departures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
conductor_to_int = None  # N/A
day_to_int = {june10: 10, june11: 11, june12: 12, june13: 13}  # in days
departure_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def leave_before_than(var1, var2):
    """
    Formulate the constraint that var1 leaves before var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(day_to_int[c1] < day_to_int[c2])
            for c1 in days for c2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(conductors)
m += AllDifferent(days)
m += AllDifferent(departures)

# Clue 1: The four conductors are Roderick, the conductor working on June 10, the person departing from Leland, and the person departing from Indio:
m += AllDifferent([roderick, june10, leland, indio])

# Clue 2: The person working on June 13 will depart from Hardwick:
m += june13 == hardwick

# Clue 3: The conductor working on June 12 is either the conductor departing from Indio or Roderick:
m += Xor([june12 == indio, june12 == roderick])

# Clue 4: Vernon is either the person working on June 11 or the conductor working on June 13:
m += Xor([vernon == june11, vernon == june13])

# Clue 5: Francis will leave sometime before the conductor departing from Leland:
m += leave_before_than(francis, leland)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Kia rental is for a period 1 day shorter than the Toyota rental.
The 4 day rental is for the Fiat.
Kathy Koch's reservation is either the 5 day reservation or the Fiat rental.
The 3 day rental, Irene Ingram's reservation and Kathy Koch's reservation are all different rentals.
Ann Alexander's rental is for 4 days.

Entities:
customers: Ann Alexander, Edna Erickson, Irene Ingram, Kathy Koch
contract length: 2 days, 3 days, 4 days, 5 days
cars: Fiat, Kia, Nissan, Toyota
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if AnnAlexander == 1, and Day4 == 1, and Fiat == 1, then Ann Alexander's rental is a Fiat for 4 days.

### Decision variables:
-   Names of the customers: AnnAlexander, EdnaErickson, IreneIngram, KathyKoch (all different, 1 to 4)
-   Length of the rental contracts: Day2, Day3, Day4, Day5 (all different, 1 to 4)
-   Car models: Fiat, Kia, Nissan, Toyota (all different, 1 to 4)

### Constraints:
-   The Kia rental is for a period 1 day shorter than the Toyota rental:
    For this, we will need to add a constraint for each possible assignment of the rental lengths for the Kia and Toyota rentals, such that the Kia rental period is 1 less than the Toyota rental period. So, the constraints will be of the form:
    r1 == Kia and r2 == Toyota => r1_to_int == r2_to_int - 1, for all r1, r2 in rental lengths.

-   The 4 day rental is for the Fiat:
    This is a direct assignment constraint:
    Day4 == Fiat.

-   Kathy Koch's reservation is either the 5 day reservation or the Fiat rental:
    This is a constraint that states that Kathy Koch's reservation is either 5 days or a Fiat rental, but not both. So:
    Xor([KathyKoch == Day5, KathyKoch == Fiat]).

-   The 3 day rental, Irene Ingram's reservation, and Kathy Koch's reservation are all different rentals:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Day3, IreneIngram, KathyKoch]).

-   Ann Alexander's rental is for 4 days:
    This is a direct assignment constraint:
    AnnAlexander == Day4.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if AnnAlexander == 1, and Day4 == 1, and Fiat == 1, then Ann Alexander's rental is a Fiat for 4 days.

### Decision variables:
-   Names of the customers: AnnAlexander, EdnaErickson, IreneIngram, KathyKoch (all different, 1 to 4)
-   Length of the rental contracts: Day2, Day3, Day4, Day5 (all different, 1 to 4)
-   Car models: Fiat, Kia, Nissan, Toyota (all different, 1 to 4)

### Constraints:
-   The Kia rental is for a period 1 day shorter than the Toyota rental:
    For this, we will need to add a constraint for each possible assignment of the rental lengths for the Kia and Toyota rentals, such that the Kia rental period is 1 less than the Toyota rental period. So, the constraints will be of the form:
    r1 == Kia and r2 == Toyota => r1_to_int == r2_to_int - 1, for all r1, r2 in rental lengths.

-   The 4 day rental is for the Fiat:
    This is a direct assignment constraint:
    Day4 == Fiat.

-   Kathy Koch's reservation is either the 5 day reservation or the Fiat rental:
    This is a constraint that states that Kathy Koch's reservation is either 5 days or a Fiat rental, but not both. So:
    Xor([KathyKoch == Day5, KathyKoch == Fiat]).

-   The 3 day rental, Irene Ingram's reservation, and Kathy Koch's reservation are all different rentals:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([Day3, IreneIngram, KathyKoch]).

-   Ann Alexander's rental is for 4 days:
    This is a direct assignment constraint:
    AnnAlexander == Day4.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, rental length, and car)
# e.g. if ann == 1 and day4 == 1 and fiat == 1, then Ann Alexander's rental is a Fiat for 4 days
ann, edna, irene, kathy = customers = intvar(1, 4, shape=4)
day2, day3, day4, day5 = rental_lengths = intvar(1, 4, shape=4)
fiat, kia, nissan, toyota = cars = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
rental_length_to_int = {day2: 2, day3: 3, day4: 4, day5: 5}  # in days
car_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def period_shorter_than(var1, var2):
    """
    Formulate the constraint that var1's period is 1 day shorter than var2's period.
    """
    return [((r1 == var1) & (r2 == var2)).implies(rental_length_to_int[r1] == rental_length_to_int[r2] - 1)
            for r1 in rental_lengths for r2 in rental_lengths]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(rental_lengths)
m += AllDifferent(cars)

# Clue 1: The Kia rental is for a period 1 day shorter than the Toyota rental:
m += period_shorter_than(kia, toyota)

# Clue 2: The 4 day rental is for the Fiat:
m += day4 == fiat

# Clue 3: Kathy Koch's reservation is either the 5 day reservation or the Fiat rental:
m += Xor([kathy == day5, kathy == fiat])

# Clue 4: The 3 day rental, Irene Ingram's reservation, and Kathy Koch's reservation are all different rentals:
m += AllDifferent([day3, irene, kathy])

# Clue 5: Ann Alexander's rental is for 4 days:
m += ann == day4

```
False
True
True
Wrong: 3, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections.
Yvonne has 20 fewer Facebook friends than Margie.
The four people are the one with 68 LinkedIn connections, Jonathan, Rosie and the person with 120 Facebook friends.
Rosie has 150 Facebook friends.

Entities:
Facebook: 120, 130, 140, 150
LinkedIn: 57, 68, 72, 84
names: Jonathan, Margie, Rosie, Yvonne
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Facebook == 1, and 120 == 1, and Jonathan == 1, then Jonathan has 120 Facebook friends.

### Decision variables:
-   Number of Facebook friends: Facebook120, Facebook130, Facebook140, Facebook150 (all different, 1 to 4)
-   Number of LinkedIn connections: LinkedIn57, LinkedIn68, LinkedIn72, LinkedIn84 (all different, 1 to 4)
-   Names of the individuals: Jonathan, Margie, Rosie, Yvonne (all different, 1 to 4)

### Constraints:
-   The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections:
    For this, we will need to add a constraint for each possible assignment of LinkedIn connections to the person with 72 connections and the person with 84 connections, such that the person with 72 connections has 10 fewer Facebook friends than the person with 84 connections. So, the constraints will be of the form:
    l1 == LinkedIn72 and l2 == LinkedIn84 => f1_to_int == f2_to_int - 10, for all l1, l2 in LinkedIn connections.

-   Yvonne has 20 fewer Facebook friends than Margie:
    For this, we will need to add a constraint for each possible assignment of Facebook friends to Yvonne and Margie, such that Yvonne has 20 fewer Facebook friends than Margie. So, the constraints will be of the form:
    f1 == Yvonne and f2 == Margie => f1_to_int == f2_to_int - 20, for all f1, f2 in Facebook friends.

-   The four people are the one with 68 LinkedIn connections, Jonathan, Rosie, and the person with 120 Facebook friends:
    This is a constraint that states that the four individuals are the one with 68 LinkedIn connections, Jonathan, Rosie, and the person with 120 Facebook friends. So:
    AllDifferent([LinkedIn68, Jonathan, Rosie, Facebook120]).

-   Rosie has 150 Facebook friends:
    This is a direct assignment constraint:
    Rosie == Facebook150.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Facebook == 1, and 120 == 1, and Jonathan == 1, then Jonathan has 120 Facebook friends.

### Decision variables:
-   Number of Facebook friends: Facebook120, Facebook130, Facebook140, Facebook150 (all different, 1 to 4)
-   Number of LinkedIn connections: LinkedIn57, LinkedIn68, LinkedIn72, LinkedIn84 (all different, 1 to 4)
-   Names of the individuals: Jonathan, Margie, Rosie, Yvonne (all different, 1 to 4)

### Constraints:
-   The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections:
    For this, we will need to add a constraint for each possible assignment of LinkedIn connections to the person with 72 connections and the person with 84 connections, such that the person with 72 connections has 10 fewer Facebook friends than the person with 84 connections. So, the constraints will be of the form:
    l1 == LinkedIn72 and l2 == LinkedIn84 => f1_to_int == f2_to_int - 10, for all l1, l2 in LinkedIn connections.

-   Yvonne has 20 fewer Facebook friends than Margie:
    For this, we will need to add a constraint for each possible assignment of Facebook friends to Yvonne and Margie, such that Yvonne has 20 fewer Facebook friends than Margie. So, the constraints will be of the form:
    f1 == Yvonne and f2 == Margie => f1_to_int == f2_to_int - 20, for all f1, f2 in Facebook friends.

-   The four people are the one with 68 LinkedIn connections, Jonathan, Rosie, and the person with 120 Facebook friends:
    This is a constraint that states that the four individuals are the one with 68 LinkedIn connections, Jonathan, Rosie, and the person with 120 Facebook friends. So:
    AllDifferent([LinkedIn68, Jonathan, Rosie, Facebook120]).

-   Rosie has 150 Facebook friends:
    This is a direct assignment constraint:
    Rosie == Facebook150.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of Facebook friends, LinkedIn connections, and name)
# e.g. if facebook120 == 1 and linkedin68 == 1 and jonathan == 1, then Jonathan has 120 Facebook friends and 68 LinkedIn connections
facebook120, facebook130, facebook140, facebook150 = facebook = intvar(1, 4, shape=4)
linkedin57, linkedin68, linkedin72, linkedin84 = linkedin = intvar(1, 4, shape=4)
jonathan, margie, rosie, yvonne = names = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
facebook_to_int = {facebook120: 120, facebook130: 130, facebook140: 140, facebook150: 150}  # in numbers
linkedin_to_int = {linkedin57: 57, linkedin68: 68, linkedin72: 72, linkedin84: 84}  # in numbers
name_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def fewer_friends_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has diff fewer friends than var2.
    """
    return [((f1 == var1) & (f2 == var2)).implies(facebook_to_int[f1] == facebook_to_int[f2] - diff)
            for f1 in facebook for f2 in facebook]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(facebook)
m += AllDifferent(linkedin)
m += AllDifferent(names)

# Clue 1: The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections:
m += fewer_friends_than(linkedin72, linkedin84, 10)

# Clue 2: Yvonne has 20 fewer Facebook friends than Margie:
m += fewer_friends_than(yvonne, margie, 20)

# Clue 3: The four people are the one with 68 LinkedIn connections, Jonathan, Rosie, and the person with 120 Facebook friends:
m += AllDifferent([linkedin68, jonathan, rosie, facebook120])

# Clue 4: Rosie has 150 Facebook friends:
m += rosie == facebook150

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The photo taken in April was published by Wildzone.
The shot of the giant tortoise was taken 1 month before the photo published by Science World.
The photo of the orangutan was published by The Geographer.
The photo of the snow leopard was taken 2 months after the photo published by The Geographer.

Entities:
animals: giant tortoise, orangutan, snow leopard, tree kangaroo
months: March, April, May, June
magazines: Earth Aware, Science World, The Geographer, Wildzone
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if GiantTortoise == 1, and March == 1, and Wildzone == 1, then the photo of the giant tortoise was taken in March and published by Wildzone.

### Decision variables:
-   Animals: GiantTortoise, Orangutan, SnowLeopard, TreeKangaroo (all different, 1 to 4)
-   Months: March, April, May, June (all different, 1 to 4)
-   Magazines: EarthAware, ScienceWorld, TheGeographer, Wildzone (all different, 1 to 4)

### Constraints:
-   The photo taken in April was published by Wildzone:
    This is a direct assignment constraint:
    April == Wildzone.

-   The shot of the giant tortoise was taken 1 month before the photo published by Science World:
    For this, we will need to add a constraint for each possible assignment of the months for the giant tortoise and Science World, such that the giant tortoise's month is 1 less than Science World's month. So, the constraints will be of the form:
    m1 == GiantTortoise and m2 == ScienceWorld => m1_to_int == m2_to_int - 1, for all m1, m2 in months.

-   The photo of the orangutan was published by The Geographer:
    This is a direct assignment constraint:
    Orangutan == TheGeographer.

-   The photo of the snow leopard was taken 2 months after the photo published by The Geographer:
    For this, we will need to add a constraint for each possible assignment of the months for the snow leopard and The Geographer, such that the snow leopard's month is 2 more than The Geographer's month. So, the constraints will be of the form:
    m1 == SnowLeopard and m2 == TheGeographer => m1_to_int == m2_to_int + 2, for all m1, m2 in months.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if GiantTortoise == 1, and March == 1, and Wildzone == 1, then the photo of the giant tortoise was taken in March and published by Wildzone.

### Decision variables:
-   Animals: GiantTortoise, Orangutan, SnowLeopard, TreeKangaroo (all different, 1 to 4)
-   Months: March, April, May, June (all different, 1 to 4)
-   Magazines: EarthAware, ScienceWorld, TheGeographer, Wildzone (all different, 1 to 4)

### Constraints:
-   The photo taken in April was published by Wildzone:
    This is a direct assignment constraint:
    April == Wildzone.

-   The shot of the giant tortoise was taken 1 month before the photo published by Science World:
    For this, we will need to add a constraint for each possible assignment of the months for the giant tortoise and Science World, such that the giant tortoise's month is 1 less than Science World's month. So, the constraints will be of the form:
    m1 == GiantTortoise and m2 == ScienceWorld => m1_to_int == m2_to_int - 1, for all m1, m2 in months.

-   The photo of the orangutan was published by The Geographer:
    This is a direct assignment constraint:
    Orangutan == TheGeographer.

-   The photo of the snow leopard was taken 2 months after the photo published by The Geographer:
    For this, we will need to add a constraint for each possible assignment of the months for the snow leopard and The Geographer, such that the snow leopard's month is 2 more than The Geographer's month. So, the constraints will be of the form:
    m1 == SnowLeopard and m2 == TheGeographer => m1_to_int == m2_to_int + 2, for all m1, m2 in months.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of animal, month, and magazine)
# e.g. if giant_tortoise == 1 and march == 1 and wildzone == 1, then the photo of the giant tortoise was taken in March and published by Wildzone
giant_tortoise, orangutan, snow_leopard, tree_kangaroo = animals = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
earth_aware, science_world, the_geographer, wildzone = magazines = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
animal_to_int = None  # N/A
month_to_int = {march: 3, april: 4, may: 5, june: 6}  # in months
magazine_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def taken_before_than(var1, var2):
    """
    Formulate the constraint that var1 taken before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] < month_to_int[m2])
            for m1 in months for m2 in months]


def taken_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 taken exactly diff months before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] - diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(animals)
m += AllDifferent(months)
m += AllDifferent(magazines)

# Clue 1: The photo taken in April was published by Wildzone:
m += april == wildzone

# Clue 2: The shot of the giant tortoise was taken 1 month before the photo published by Science World:
m += taken_exactly_before_than(giant_tortoise, science_world, 1)

# Clue 3: The photo of the orangutan was published by The Geographer:
m += orangutan == the_geographer

# Clue 4: The photo of the snow leopard was taken 2 months after the photo published by The Geographer:
m += taken_exactly_before_than(snow_leopard, the_geographer, -2)

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am.
Jack's task is either the job that starts at 8:00am or the living room assignment.
Jack's job starts at 10:00am.
Kay's chore starts at 8:00am.
Jack's assignment starts 2 hours after the mud room assignment.
The laundry room assignment, the chore that starts at 8:00am and the chore that starts at 11:00am are all different jobs.

Entities:
children: Henrietta, Jack, Kay, Zachary
times: 8:00am, 9:00am, 10:00am, 11:00am
rooms: dining room, laundry room, living room, mud room
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Henrietta == 1, and 9am == 1, and dining room == 1, then Henrietta's chore starts at 9:00am in the dining room.

### Decision variables:
-   Names of the children: Henrietta, Jack, Kay, Zachary (all different, 1 to 4)
-   Start times of the chores: 8:00am, 9:00am, 10:00am, 11:00am (all different, 1 to 4)
-   Rooms for the chores: dining room, laundry room, living room, mud room (all different, 1 to 4)

### Constraints:
-   Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am:
    This is a constraint that states that Henrietta's job's start time is either 9:00am or 8:00am, but not both. So:
    Xor([Henrietta == 9am, Henrietta == 8am]).

-   Jack's task is either the job that starts at 8:00am or the living room assignment:
    This is a constraint that states that Jack's job's start time is either 8:00am or the living room assignment, but not both. So:
    Xor([Jack == 8am, Jack == living room]).

-   Jack's job starts at 10:00am:
    This is a direct assignment constraint:
    Jack == 10am.

-   Kay's chore starts at 8:00am:
    This is a direct assignment constraint:
    Kay == 8am.

-   Jack's assignment starts 2 hours after the mud room assignment:
    For this, we will need to add a constraint for each possible assignment of the start times for Jack's assignment and the mud room assignment, such that Jack's assignment's start time is 2 more than the mud room assignment's start time. So, the constraints will be of the form:
    t1 == Jack and t2 == mud room => t1_to_int == t2_to_int + 2, for all t1, t2 in start times.

-   The laundry room assignment, the chore that starts at 8:00am, and the chore that starts at 11:00am are all different jobs:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([laundry room, 8am, 11am]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Henrietta == 1, and 9am == 1, and dining room == 1, then Henrietta's chore starts at 9:00am in the dining room.

### Decision variables:
-   Names of the children: Henrietta, Jack, Kay, Zachary (all different, 1 to 4)
-   Start times of the chores: 8:00am, 9:00am, 10:00am, 11:00am (all different, 1 to 4)
-   Rooms for the chores: dining room, laundry room, living room, mud room (all different, 1 to 4)

### Constraints:
-   Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am:
    This is a constraint that states that Henrietta's job's start time is either 9:00am or 8:00am, but not both. So:
    Xor([Henrietta == 9am, Henrietta == 8am]).

-   Jack's task is either the job that starts at 8:00am or the living room assignment:
    This is a constraint that states that Jack's job's start time is either 8:00am or the living room assignment, but not both. So:
    Xor([Jack == 8am, Jack == living room]).

-   Jack's job starts at 10:00am:
    This is a direct assignment constraint:
    Jack == 10am.

-   Kay's chore starts at 8:00am:
    This is a direct assignment constraint:
    Kay == 8am.

-   Jack's assignment starts 2 hours after the mud room assignment:
    For this, we will need to add a constraint for each possible assignment of the start times for Jack's assignment and the mud room assignment, such that Jack's assignment's start time is 2 more than the mud room assignment's start time. So, the constraints will be of the form:
    t1 == Jack and t2 == mud room => t1_to_int == t2_to_int + 2, for all t1, t2 in start times.

-   The laundry room assignment, the chore that starts at 8:00am, and the chore that starts at 11:00am are all different jobs:
    This is a constraint that states that all these entities are different, thus:
    AllDifferent([laundry room, 8am, 11am]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of child, time, and room)
# e.g. if henrietta == 1 and time9am == 1 and dining_room == 1, then Henrietta's chore starts at 9:00am in the dining room
henrietta, jack, kay, zachary = children = intvar(1, 4, shape=4)
time8am, time9am, time10am, time11am = times = intvar(1, 4, shape=4)
dining_room, laundry_room, living_room, mud_room = rooms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
child_to_int = None  # N/A
time_to_int = {time8am: 8, time9am: 9, time10am: 10, time11am: 11}  # in hours
room_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts diff hours after var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] == time_to_int[t2] + diff)
            for t1 in times for t2 in times]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(children)
m += AllDifferent(times)
m += AllDifferent(rooms)

# Clue 1: Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am:
m += Xor([henrietta == time9am, henrietta == time8am])

# Clue 2: Jack's task is either the job that starts at 8:00am or the living room assignment:
m += Xor([jack == time8am, jack == living_room])

# Clue 3: Jack's job starts at 10:00am:
m += jack == time10am

# Clue 4: Kay's chore starts at 8:00am:
m += kay == time8am

# Clue 5: Jack's assignment starts 2 hours after the mud room assignment:
m += starts_after_than(jack, mud_room, 2)

# Clue 6: The laundry room assignment, the chore that starts at 8:00am, and the chore that starts at 11:00am are all different jobs:
m += AllDifferent([laundry_room, time8am, time11am])

```
True
True
True
Wrong: 0, Total: 9
---------------------------------------------------------------------------------------------

Clues:
Charlie is 9 years old.
Gracie has a wingspan of 114 inches.
The 11-year-old bird has a wingspan 8 inches shorter than Charlie.
Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches.

Entities:
names: Angel, Charlie, Gracie, Merlin
wingspans: 102 inches, 106 inches, 110 inches, 114 inches
ages: 8, 9, 10, 11
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Angel == 1, and 8 == 1, and 102 == 1, then Angel is the 8-year-old bird with a wingspan of 102 inches.

### Decision variables:
-   Names of the birds: Angel, Charlie, Gracie, Merlin (all different, 1 to 4)
-   Wingspans of the birds: 102 inches, 106 inches, 110 inches, 114 inches (all different, 1 to 4)
-   Ages of the birds: 8, 9, 10, 11 (all different, 1 to 4)

### Constraints:
-   Charlie is 9 years old:
    This is a direct assignment constraint:
    Charlie == 9.

-   Gracie has a wingspan of 114 inches:
    This is a direct assignment constraint:
    Gracie == 114.

-   The 11-year-old bird has a wingspan 8 inches shorter than Charlie:
    For this, we will need to add a constraint for each possible assignment of ages for the 11-year-old bird and Charlie, such that the 11-year-old bird's wingspan is 8 inches shorter than Charlie's wingspan. So, the constraints will be of the form:
    a1 == 11 and a2 == Charlie => w1_to_int == w2_to_int - 8, for all a1, a2 in ages.

-   Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches:
    This is a constraint that states that Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches, but not both. So:
    Xor([Angel == 8, Angel == 114]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Angel == 1, and 8 == 1, and 102 == 1, then Angel is the 8-year-old bird with a wingspan of 102 inches.

### Decision variables:
-   Names of the birds: Angel, Charlie, Gracie, Merlin (all different, 1 to 4)
-   Wingspans of the birds: 102 inches, 106 inches, 110 inches, 114 inches (all different, 1 to 4)
-   Ages of the birds: 8, 9, 10, 11 (all different, 1 to 4)

### Constraints:
-   Charlie is 9 years old:
    This is a direct assignment constraint:
    Charlie == 9.

-   Gracie has a wingspan of 114 inches:
    This is a direct assignment constraint:
    Gracie == 114.

-   The 11-year-old bird has a wingspan 8 inches shorter than Charlie:
    For this, we will need to add a constraint for each possible assignment of ages for the 11-year-old bird and Charlie, such that the 11-year-old bird's wingspan is 8 inches shorter than Charlie's wingspan. So, the constraints will be of the form:
    a1 == 11 and a2 == Charlie => w1_to_int == w2_to_int - 8, for all a1, a2 in ages.

-   Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches:
    This is a constraint that states that Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches, but not both. So:
    Xor([Angel == 8, Angel == 114]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, wingspan, and age)
# e.g. if angel == 1 and 8 == 1 and 102 == 1, then Angel is the 8-year-old bird with a wingspan of 102 inches
angel, charlie, gracie, merlin = names = intvar(1, 4, shape=4)
wingspan102, wingspan106, wingspan110, wingspan114 = wingspans = intvar(1, 4, shape=4)
age8, age9, age10, age11 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
wingspan_to_int = {wingspan102: 102, wingspan106: 106, wingspan110: 110, wingspan114: 114}  # in inches
age_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def wingspan_shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1's wingspan is diff inches shorter than var2's wingspan.
    """
    return [((w1 == var1) & (w2 == var2)).implies(wingspan_to_int[w1] == wingspan_to_int[w2] - diff)
            for w1 in wingspans for w2 in wingspans]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(wingspans)
m += AllDifferent(ages)

# Clue 1: Charlie is 9 years old:
m += charlie == age9

# Clue 2: Gracie has a wingspan of 114 inches:
m += gracie == wingspan114

# Clue 3: The 11-year-old bird has a wingspan 8 inches shorter than Charlie:
m += wingspan_shorter_than(age11, charlie, 8)

# Clue 4: Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches:
m += Xor([angel == age8, angel == wingspan114])

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The TrustCo card has an APR of 11%.
The Southwest Inc card has a limit of $2,000.
The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit.
The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card.
The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit.

Entities:
credit cards: Credit Korp, Mid Atlantic, Southwest Inc, TrustCo
APR: 8%, 9%, 10%, 11%
credit limits: $2,000, $4,000, $5,000, $20,000
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if CreditKorp == 1, and APR8 == 1, and Limit2000 == 1, then Credit Korp has an APR of 8% and a credit limit of $2,000.

### Decision variables:
-   Names of the credit cards: CreditKorp, MidAtlantic, SouthwestInc, TrustCo (all different, 1 to 4)
-   APRs of the cards: APR8, APR9, APR10, APR11 (all different, 1 to 4)
-   Credit limits of the cards: Limit2000, Limit4000, Limit5000, Limit20000 (all different, 1 to 4)

### Constraints:
-   The TrustCo card has an APR of 11%:
    This is a direct assignment constraint:
    TrustCo == APR11.

-   The Southwest Inc card has a limit of $2,000:
    This is a direct assignment constraint:
    SouthwestInc == Limit2000.

-   The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit:
    This is a constraint that states that the card with an APR of 11% is either the card with the $4,000 credit limit or the card with the $20,000 credit limit, but not both. So:
    Xor([APR11 == Limit4000, APR11 == Limit20000]).

-   The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card:
    This is a constraint that states that the card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card, but not both. So:
    Xor([APR10 == Limit4000, APR10 == TrustCo]).

-   The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit:
    For this, we will need to add a constraint for each possible assignment of APRs for Credit Korp and the card with the $2,000 credit limit, such that Credit Korp's APR is 1 less than the other card's APR. So, the constraints will be of the form:
    a1 == CreditKorp and a2 == Limit2000 => a1_to_int == a2_to_int - 1, for all a1, a2 in APRs.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if CreditKorp == 1, and APR8 == 1, and Limit2000 == 1, then Credit Korp has an APR of 8% and a credit limit of $2,000.

### Decision variables:
-   Names of the credit cards: CreditKorp, MidAtlantic, SouthwestInc, TrustCo (all different, 1 to 4)
-   APRs of the cards: APR8, APR9, APR10, APR11 (all different, 1 to 4)
-   Credit limits of the cards: Limit2000, Limit4000, Limit5000, Limit20000 (all different, 1 to 4)

### Constraints:
-   The TrustCo card has an APR of 11%:
    This is a direct assignment constraint:
    TrustCo == APR11.

-   The Southwest Inc card has a limit of $2,000:
    This is a direct assignment constraint:
    SouthwestInc == Limit2000.

-   The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit:
    This is a constraint that states that the card with an APR of 11% is either the card with the $4,000 credit limit or the card with the $20,000 credit limit, but not both. So:
    Xor([APR11 == Limit4000, APR11 == Limit20000]).

-   The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card:
    This is a constraint that states that the card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card, but not both. So:
    Xor([APR10 == Limit4000, APR10 == TrustCo]).

-   The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit:
    For this, we will need to add a constraint for each possible assignment of APRs for Credit Korp and the card with the $2,000 credit limit, such that Credit Korp's APR is 1 less than the other card's APR. So, the constraints will be of the form:
    a1 == CreditKorp and a2 == Limit2000 => a1_to_int == a2_to_int - 1, for all a1, a2 in APRs.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of credit card, APR, and credit limit)
# e.g. if credit_korp == 1 and apr8 == 1 and limit2000 == 1, then Credit Korp has an APR of 8% and a credit limit of $2,000
credit_korp, mid_atlantic, southwest_inc, trustco = credit_cards = intvar(1, 4, shape=4)
apr8, apr9, apr10, apr11 = aprs = intvar(1, 4, shape=4)
limit2000, limit4000, limit5000, limit20000 = credit_limits = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
card_to_int = None  # N/A
apr_to_int = {apr8: 8, apr9: 9, apr10: 10, apr11: 11}  # in percent
limit_to_int = {limit2000: 2000, limit4000: 4000, limit5000: 5000, limit20000: 20000}  # in dollars


# Helper functions (for formulating comparison constraints)
def apr_1_percent_lower(var1, var2):
    """
    Formulate the constraint that var1's APR is 1 percent lower than var2's APR.
    """
    return [((a1 == var1) & (a2 == var2)).implies(apr_to_int[a1] == apr_to_int[a2] - 1)
            for a1 in aprs for a2 in aprs]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(credit_cards)
m += AllDifferent(aprs)
m += AllDifferent(credit_limits)

# Clue 1: The TrustCo card has an APR of 11%:
m += trustco == apr11

# Clue 2: The Southwest Inc card has a limit of $2,000:
m += southwest_inc == limit2000

# Clue 3: The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit:
m += Xor([apr11 == limit4000, apr11 == limit20000])

# Clue 4: The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card:
m += Xor([apr10 == limit4000, apr10 == trustco])

# Clue 5: The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit:
m += apr_1_percent_lower(credit_korp, limit2000)

```
True
True
False
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The title due on September 22 is either Rosa's book or "Dancing Well".
Ebony's book was due 1 week after Rosa's book.
Aimee's book was due on September 15.
Ebony's book was "Heaven's Seal".
"Heaven's Seal" was due 1 week after "Frogs of Iowa".

Entities:
borrowers: Aimee, Ebony, Jimmy, Rosa
due dates: September 1, September 8, September 15, September 22
titles: Dancing Well, Frogs of Iowa, Heaven's Seal, Time to Burn
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Aimee == 1, and September15 == 1, and DancingWell == 1, then Aimee's book "Dancing Well" was due on September 15.

### Decision variables:
-   Names of the borrowers: Aimee, Ebony, Jimmy, Rosa (all different, 1 to 4)
-   Due dates of the books: September1, September8, September15, September22 (all different, 1 to 4)
-   Titles of the books: DancingWell, FrogsOfIowa, HeavensSeal, TimeToBurn (all different, 1 to 4)

### Constraints:
-   The title due on September 22 is either Rosa's book or "Dancing Well":
    This is a constraint that states that the book due on September 22 is either Rosa's book or "Dancing Well", but not both. So:
    Xor([September22 == Rosa, September22 == DancingWell]).

-   Ebony's book was due 1 week after Rosa's book:
    For this, we will need to add a constraint for each possible assignment of the due dates for Ebony's book and Rosa's book, such that Ebony's book's due date is 1 more than Rosa's book's due date. So, the constraints will be of the form:
    d1 == Ebony and d2 == Rosa => d1_to_int == d2_to_int + 1, for all d1, d2 in due dates.

-   Aimee's book was due on September 15:
    This is a direct assignment constraint:
    Aimee == September15.

-   Ebony's book was "Heaven's Seal":
    This is a direct assignment constraint:
    Ebony == HeavensSeal.

-   "Heaven's Seal" was due 1 week after "Frogs of Iowa":
    For this, we will need to add a constraint for each possible assignment of the due dates for "Heaven's Seal" and "Frogs of Iowa", such that "Heaven's Seal"'s due date is 1 more than "Frogs of Iowa"'s due date. So, the constraints will be of the form:
    d1 == HeavensSeal and d2 == FrogsOfIowa => d1_to_int == d2_to_int + 1, for all d1, d2 in due dates.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Aimee == 1, and September15 == 1, and DancingWell == 1, then Aimee's book "Dancing Well" was due on September 15.

### Decision variables:
-   Names of the borrowers: Aimee, Ebony, Jimmy, Rosa (all different, 1 to 4)
-   Due dates of the books: September1, September8, September15, September22 (all different, 1 to 4)
-   Titles of the books: DancingWell, FrogsOfIowa, HeavensSeal, TimeToBurn (all different, 1 to 4)

### Constraints:
-   The title due on September 22 is either Rosa's book or "Dancing Well":
    This is a constraint that states that the book due on September 22 is either Rosa's book or "Dancing Well", but not both. So:
    Xor([September22 == Rosa, September22 == DancingWell]).

-   Ebony's book was due 1 week after Rosa's book:
    For this, we will need to add a constraint for each possible assignment of the due dates for Ebony's book and Rosa's book, such that Ebony's book's due date is 1 more than Rosa's book's due date. So, the constraints will be of the form:
    d1 == Ebony and d2 == Rosa => d1_to_int == d2_to_int + 1, for all d1, d2 in due dates.

-   Aimee's book was due on September 15:
    This is a direct assignment constraint:
    Aimee == September15.

-   Ebony's book was "Heaven's Seal":
    This is a direct assignment constraint:
    Ebony == HeavensSeal.

-   "Heaven's Seal" was due 1 week after "Frogs of Iowa":
    For this, we will need to add a constraint for each possible assignment of the due dates for "Heaven's Seal" and "Frogs of Iowa", such that "Heaven's Seal"'s due date is 1 more than "Frogs of Iowa"'s due date. So, the constraints will be of the form:
    d1 == HeavensSeal and d2 == FrogsOfIowa => d1_to_int == d2_to_int + 1, for all d1, d2 in due dates.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of borrower, due date, and title)
# e.g. if aimee == 1 and sept15 == 1 and dancing_well == 1, then Aimee's book "Dancing Well" was due on September 15
aimee, ebony, jimmy, rosa = borrowers = intvar(1, 4, shape=4)
sept1, sept8, sept15, sept22 = due_dates = intvar(1, 4, shape=4)
dancing_well, frogs_of_iowa, heavens_seal, time_to_burn = titles = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
borrower_to_int = None  # N/A
due_date_to_int = {sept1: 1, sept8: 8, sept15: 15, sept22: 22}  # in days
title_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def due_after_than(var1, var2):
    """
    Formulate the constraint that var1 is due after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(due_date_to_int[d1] > due_date_to_int[d2])
            for d1 in due_dates for d2 in due_dates]


def due_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is due exactly diff days after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(due_date_to_int[d1] == due_date_to_int[d2] + diff)
            for d1 in due_dates for d2 in due_dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(borrowers)
m += AllDifferent(due_dates)
m += AllDifferent(titles)

# Clue 1: The title due on September 22 is either Rosa's book or "Dancing Well":
m += Xor([sept22 == rosa, sept22 == dancing_well])

# Clue 2: Ebony's book was due 1 week after Rosa's book:
m += due_exactly_after_than(ebony, rosa, 1)

# Clue 3: Aimee's book was due on September 15:
m += aimee == sept15

# Clue 4: Ebony's book was "Heaven's Seal":
m += ebony == heavens_seal

# Clue 5: "Heaven's Seal" was due 1 week after "Frogs of Iowa":
m += due_exactly_after_than(heavens_seal, frogs_of_iowa, 1)

```
False
False
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The siren released in 1997 is 10 decibels louder than the siren released in 1996.
The siren released in 2009 is either the Armor-Stop or the Viking 5.
The siren released in 1997 is either the Soundarm or the Viking 5.
The Armor-Stop is louder than the siren released in 2009.
The Soundarm is 110 decibels loud.

Entities:
sirens: Armor-Stop, Rip Tide, Soundarm, Viking 5
decibels: 100 decibels, 105 decibels, 110 decibels, 115 decibels
years: 1996, 1997, 2000, 2009
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if ArmorStop == 1, and Decibels100 == 1, and Year1996 == 1, then Armor-Stop was released in 1996 with 100 decibels.

### Decision variables:
-   Names of the sirens: ArmorStop, RipTide, Soundarm, Viking5 (all different, 1 to 4)
-   Decibels of the sirens: Decibels100, Decibels105, Decibels110, Decibels115 (all different, 1 to 4)
-   Years of release: Year1996, Year1997, Year2000, Year2009 (all different, 1 to 4)

### Constraints:
-   The siren released in 1997 is 10 decibels louder than the siren released in 1996:
    For this, we will need to add a constraint for each possible assignment of the decibels for the sirens released in 1996 and 1997, such that the siren released in 1997 is 10 decibels louder than the siren released in 1996. So, the constraints will be of the form:
    d1 == Year1996 and d2 == Year1997 => d2_to_int == d1_to_int + 10, for all d1, d2 in decibels.

-   The siren released in 2009 is either the Armor-Stop or the Viking 5:
    This is a constraint that states that the siren released in 2009 is either the Armor-Stop or the Viking 5, but not both. So:
    Xor([Year2009 == ArmorStop, Year2009 == Viking5]).

-   The siren released in 1997 is either the Soundarm or the Viking 5:
    This is a constraint that states that the siren released in 1997 is either the Soundarm or the Viking 5, but not both. So:
    Xor([Year1997 == Soundarm, Year1997 == Viking5]).

-   The Armor-Stop is louder than the siren released in 2009:
    For this, we will need to add a constraint for each possible assignment of the decibels for the Armor-Stop and the siren released in 2009, such that the Armor-Stop is louder than the siren released in 2009. So, the constraints will be of the form:
    d1 == ArmorStop and d2 == Year2009 => d1_to_int > d2_to_int, for all d1, d2 in decibels.

-   The Soundarm is 110 decibels loud:
    This is a direct assignment constraint:
    Soundarm == Decibels110.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if ArmorStop == 1, and Decibels100 == 1, and Year1996 == 1, then Armor-Stop was released in 1996 with 100 decibels.

### Decision variables:
-   Names of the sirens: ArmorStop, RipTide, Soundarm, Viking5 (all different, 1 to 4)
-   Decibels of the sirens: Decibels100, Decibels105, Decibels110, Decibels115 (all different, 1 to 4)
-   Years of release: Year1996, Year1997, Year2000, Year2009 (all different, 1 to 4)

### Constraints:
-   The siren released in 1997 is 10 decibels louder than the siren released in 1996:
    For this, we will need to add a constraint for each possible assignment of the decibels for the sirens released in 1996 and 1997, such that the siren released in 1997 is 10 decibels louder than the siren released in 1996. So, the constraints will be of the form:
    d1 == Year1996 and d2 == Year1997 => d2_to_int == d1_to_int + 10, for all d1, d2 in decibels.

-   The siren released in 2009 is either the Armor-Stop or the Viking 5:
    This is a constraint that states that the siren released in 2009 is either the Armor-Stop or the Viking 5, but not both. So:
    Xor([Year2009 == ArmorStop, Year2009 == Viking5]).

-   The siren released in 1997 is either the Soundarm or the Viking 5:
    This is a constraint that states that the siren released in 1997 is either the Soundarm or the Viking 5, but not both. So:
    Xor([Year1997 == Soundarm, Year1997 == Viking5]).

-   The Armor-Stop is louder than the siren released in 2009:
    For this, we will need to add a constraint for each possible assignment of the decibels for the Armor-Stop and the siren released in 2009, such that the Armor-Stop is louder than the siren released in 2009. So, the constraints will be of the form:
    d1 == ArmorStop and d2 == Year2009 => d1_to_int > d2_to_int, for all d1, d2 in decibels.

-   The Soundarm is 110 decibels loud:
    This is a direct assignment constraint:
    Soundarm == Decibels110.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of siren, decibels, and year)
# e.g. if armor_stop == 1 and decibels100 == 1 and year1996 == 1, then Armor-Stop was released in 1996 with 100 decibels
armor_stop, rip_tide, soundarm, viking5 = sirens = intvar(1, 4, shape=4)
decibels100, decibels105, decibels110, decibels115 = decibels = intvar(1, 4, shape=4)
year1996, year1997, year2000, year2009 = years = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
siren_to_int = None  # N/A
decibels_to_int = {decibels100: 100, decibels105: 105, decibels110: 110, decibels115: 115}  # in decibels
year_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def louder_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff decibels louder than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(decibels_to_int[s1] == decibels_to_int[s2] + diff)
            for s1 in decibels for s2 in decibels]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(sirens)
m += AllDifferent(decibels)
m += AllDifferent(years)

# Clue 1: The siren released in 1997 is 10 decibels louder than the siren released in 1996:
m += louder_than(year1996, year1997, -10)

# Clue 2: The siren released in 2009 is either the Armor-Stop or the Viking 5:
m += Xor([year2009 == armor_stop, year2009 == viking5])

# Clue 3: The siren released in 1997 is either the Soundarm or the Viking 5:
m += Xor([year1997 == soundarm, year1997 == viking5])

# Clue 4: The Armor-Stop is louder than the siren released in 2009:
m += decibels_to_int[armor_stop] > decibels_to_int[year2009]

# Clue 5: The Soundarm is 110 decibels loud:
m += soundarm == decibels110

```
Error: name 'IV5988' is not defined
False
False
Error: name 'IV6012' is not defined
---------------------------------------------------------------------------------------------

Clues:
The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte.
Hope paid $8.
Norman paid less than Opal.
The one who had the cafe americano paid less than Linda.
The one who had the cafe mocha paid 2 dollars more than Norman.

Entities:
names: Hope, Linda, Norman, Opal
prices: $5, $6, $7, $8
drinks: cafe americano, cafe latte, cafe mocha, espresso
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Hope == 1, and Price8 == 1, and CafeAmericano == 1, then Hope paid $8 for a cafe americano.

### Decision variables:
-   Names of the individuals: Hope, Linda, Norman, Opal (all different, 1 to 4)
-   Prices paid: Price5, Price6, Price7, Price8 (all different, 1 to 4)
-   Drinks ordered: CafeAmericano, CafeLatte, CafeMocha, Espresso (all different, 1 to 4)

### Constraints:
-   The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte:
    For this, we will need to add a constraint for each possible assignment of prices for cafe americano and cafe latte, such that the price for cafe americano is 1 more than the price for cafe latte. So, the constraints will be of the form:
    p1 == CafeAmericano and p2 == CafeLatte => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.

-   Hope paid $8:
    This is a direct assignment constraint:
    Hope == Price8.

-   Norman paid less than Opal:
    For this, we will need to add a constraint for each possible assignment of prices for Norman and Opal, such that Norman's price is less than Opal's price. So, the constraints will be of the form:
    p1 == Norman and p2 == Opal => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The one who had the cafe americano paid less than Linda:
    For this, we will need to add a constraint for each possible assignment of prices for cafe americano and Linda, such that the price for cafe americano is less than the price for Linda. So, the constraints will be of the form:
    p1 == CafeAmericano and p2 == Linda => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The one who had the cafe mocha paid 2 dollars more than Norman:
    For this, we will need to add a constraint for each possible assignment of prices for cafe mocha and Norman, such that the price for cafe mocha is 2 more than the price for Norman. So, the constraints will be of the form:
    p1 == CafeMocha and p2 == Norman => p1_to_int == p2_to_int + 2, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Hope == 1, and Price8 == 1, and CafeAmericano == 1, then Hope paid $8 for a cafe americano.

### Decision variables:
-   Names of the individuals: Hope, Linda, Norman, Opal (all different, 1 to 4)
-   Prices paid: Price5, Price6, Price7, Price8 (all different, 1 to 4)
-   Drinks ordered: CafeAmericano, CafeLatte, CafeMocha, Espresso (all different, 1 to 4)

### Constraints:
-   The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte:
    For this, we will need to add a constraint for each possible assignment of prices for cafe americano and cafe latte, such that the price for cafe americano is 1 more than the price for cafe latte. So, the constraints will be of the form:
    p1 == CafeAmericano and p2 == CafeLatte => p1_to_int == p2_to_int + 1, for all p1, p2 in prices.

-   Hope paid $8:
    This is a direct assignment constraint:
    Hope == Price8.

-   Norman paid less than Opal:
    For this, we will need to add a constraint for each possible assignment of prices for Norman and Opal, such that Norman's price is less than Opal's price. So, the constraints will be of the form:
    p1 == Norman and p2 == Opal => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The one who had the cafe americano paid less than Linda:
    For this, we will need to add a constraint for each possible assignment of prices for cafe americano and Linda, such that the price for cafe americano is less than the price for Linda. So, the constraints will be of the form:
    p1 == CafeAmericano and p2 == Linda => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   The one who had the cafe mocha paid 2 dollars more than Norman:
    For this, we will need to add a constraint for each possible assignment of prices for cafe mocha and Norman, such that the price for cafe mocha is 2 more than the price for Norman. So, the constraints will be of the form:
    p1 == CafeMocha and p2 == Norman => p1_to_int == p2_to_int + 2, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of individual, price, and drink)
# e.g. if hope == 1 and price8 == 1 and cafe_americano == 1, then Hope paid $8 for a cafe americano
hope, linda, norman, opal = individuals = intvar(1, 4, shape=4)
price5, price6, price7, price8 = prices = intvar(1, 4, shape=4)
cafe_americano, cafe_latte, cafe_mocha, espresso = drinks = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
individual_to_int = None  # N/A
price_to_int = {price5: 5, price6: 6, price7: 7, price8: 8}  # in dollars
drink_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(individuals)
m += AllDifferent(prices)
m += AllDifferent(drinks)

# Clue 1: The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte:
m += paid_exactly_more_than(cafe_americano, cafe_latte, 1)

# Clue 2: Hope paid $8:
m += hope == price8

# Clue 3: Norman paid less than Opal:
m += paid_more_than(norman, opal)

# Clue 4: The one who had the cafe americano paid less than Linda:
m += paid_more_than(cafe_americano, linda)

# Clue 5: The one who had the cafe mocha paid 2 dollars more than Norman:
m += paid_exactly_more_than(cafe_mocha, norman, 2)

```
False
False
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The ring with the aquamarine cost less than the piece with the diamond.
Opal's ring is either the piece that cost $1300 or the piece with the diamond.
The piece that cost $1400 is either the ring with the ruby or Hazel's ring.
Hazel's ring has the diamond.
Becky's piece cost more than the ring with the diamond.

Entities:
customers: Becky, Hazel, Opal, Yolanda
prices: $1100, $1200, $1300, $1400
stones: aquamarine, diamond, ruby, topaz
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Becky == 1, and Price1100 == 1, and Aquamarine == 1, then Becky bought the piece with the aquamarine for $1100.

### Decision variables:
-   Names of the customers: Becky, Hazel, Opal, Yolanda (all different, 1 to 4)
-   Prices of the pieces: Price1100, Price1200, Price1300, Price1400 (all different, 1 to 4)
-   Stones in the pieces: Aquamarine, Diamond, Ruby, Topaz (all different, 1 to 4)

### Constraints:
-   The ring with the aquamarine cost less than the piece with the diamond:
    For this, we will need to add a constraint for each possible assignment of prices for the ring with the aquamarine and the piece with the diamond, such that the price of the ring with the aquamarine is less than the price of the piece with the diamond. So, the constraints will be of the form:
    p1 == Aquamarine and p2 == Diamond => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Opal's ring is either the piece that cost $1300 or the piece with the diamond:
    This is a constraint that states that Opal's piece is either the one that costs $1300 or the one with the diamond, but not both. So:
    Xor([Opal == Price1300, Opal == Diamond]).

-   The piece that cost $1400 is either the ring with the ruby or Hazel's ring:
    This is a constraint that states that the piece that costs $1400 is either the one with the ruby or Hazel's ring, but not both. So:
    Xor([Price1400 == Ruby, Price1400 == Hazel]).

-   Hazel's ring has the diamond:
    This is a direct assignment constraint:
    Hazel == Diamond.

-   Becky's piece cost more than the ring with the diamond:
    For this, we will need to add a constraint for each possible assignment of prices for Becky's piece and the ring with the diamond, such that the price of Becky's piece is greater than the price of the ring with the diamond. So, the constraints will be of the form:
    p1 == Becky and p2 == Diamond => p1_to_int > p2_to_int, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Becky == 1, and Price1100 == 1, and Aquamarine == 1, then Becky bought the piece with the aquamarine for $1100.

### Decision variables:
-   Names of the customers: Becky, Hazel, Opal, Yolanda (all different, 1 to 4)
-   Prices of the pieces: Price1100, Price1200, Price1300, Price1400 (all different, 1 to 4)
-   Stones in the pieces: Aquamarine, Diamond, Ruby, Topaz (all different, 1 to 4)

### Constraints:
-   The ring with the aquamarine cost less than the piece with the diamond:
    For this, we will need to add a constraint for each possible assignment of prices for the ring with the aquamarine and the piece with the diamond, such that the price of the ring with the aquamarine is less than the price of the piece with the diamond. So, the constraints will be of the form:
    p1 == Aquamarine and p2 == Diamond => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Opal's ring is either the piece that cost $1300 or the piece with the diamond:
    This is a constraint that states that Opal's piece is either the one that costs $1300 or the one with the diamond, but not both. So:
    Xor([Opal == Price1300, Opal == Diamond]).

-   The piece that cost $1400 is either the ring with the ruby or Hazel's ring:
    This is a constraint that states that the piece that costs $1400 is either the one with the ruby or Hazel's ring, but not both. So:
    Xor([Price1400 == Ruby, Price1400 == Hazel]).

-   Hazel's ring has the diamond:
    This is a direct assignment constraint:
    Hazel == Diamond.

-   Becky's piece cost more than the ring with the diamond:
    For this, we will need to add a constraint for each possible assignment of prices for Becky's piece and the ring with the diamond, such that the price of Becky's piece is greater than the price of the ring with the diamond. So, the constraints will be of the form:
    p1 == Becky and p2 == Diamond => p1_to_int > p2_to_int, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, price, and stone)
# e.g. if becky == 1 and price1100 == 1 and aquamarine == 1, then Becky bought the piece with the aquamarine for $1100
becky, hazel, opal, yolanda = customers = intvar(1, 4, shape=4)
price1100, price1200, price1300, price1400 = prices = intvar(1, 4, shape=4)
aquamarine, diamond, ruby, topaz = stones = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
price_to_int = {price1100: 1100, price1200: 1200, price1300: 1300, price1400: 1400}  # in dollars
stone_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def cost_less_than(var1, var2):
    """
    Formulate the constraint that var1 cost less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(prices)
m += AllDifferent(stones)

# Clue 1: The ring with the aquamarine cost less than the piece with the diamond:
m += cost_less_than(aquamarine, diamond)

# Clue 2: Opal's ring is either the piece that cost $1300 or the piece with the diamond:
m += Xor([opal == price1300, opal == diamond])

# Clue 3: The piece that cost $1400 is either the ring with the ruby or Hazel's ring:
m += Xor([price1400 == ruby, price1400 == hazel])

# Clue 4: Hazel's ring has the diamond:
m += hazel == diamond

# Clue 5: Becky's piece cost more than the ring with the diamond:
m += cost_less_than(diamond, becky)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The wood frog was bought 1 month after Nettie's pet.
Ollie's pet is the wood frog.
The tree frog was bought 2 months after Ollie's pet.
Joann's pet is either the wood frog or the tree frog.
Ida's pet is either the animal bought in April or the bullfrog.

Entities:
names: Ida, Joann, Nettie, Ollie
months: January, February, March, April
amphibians: bullfrog, horned toad, tree frog, wood frog
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ida == 1, and January == 1, and Bullfrog == 1, then Ida's pet is the bullfrog bought in January.

### Decision variables:
-   Names of the individuals: Ida, Joann, Nettie, Ollie (all different, 1 to 4)
-   Months of purchase: January, February, March, April (all different, 1 to 4)
-   Types of amphibians: Bullfrog, HornedToad, TreeFrog, WoodFrog (all different, 1 to 4)

### Constraints:
-   The wood frog was bought 1 month after Nettie's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the wood frog and Nettie's pet, such that the wood frog's month of purchase is 1 more than Nettie's pet's month of purchase. So, the constraints will be of the form:
    m1 == WoodFrog and m2 == Nettie => m1_to_int == m2_to_int + 1, for all m1, m2 in months of purchase.

-   Ollie's pet is the wood frog:
    This is a direct assignment constraint:
    Ollie == WoodFrog.

-   The tree frog was bought 2 months after Ollie's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the tree frog and Ollie's pet, such that the tree frog's month of purchase is 2 more than Ollie's pet's month of purchase. So, the constraints will be of the form:
    m1 == TreeFrog and m2 == Ollie => m1_to_int == m2_to_int + 2, for all m1, m2 in months of purchase.

-   Joann's pet is either the wood frog or the tree frog:
    This is a constraint that states that Joann's pet is either the wood frog or the tree frog, but not both. So:
    Xor([Joann == WoodFrog, Joann == TreeFrog]).

-   Ida's pet is either the animal bought in April or the bullfrog:
    This is a constraint that states that Ida's pet is either the animal bought in April or the bullfrog, but not both. So:
    Xor([Ida == April, Ida == Bullfrog]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ida == 1, and January == 1, and Bullfrog == 1, then Ida's pet is the bullfrog bought in January.

### Decision variables:
-   Names of the individuals: Ida, Joann, Nettie, Ollie (all different, 1 to 4)
-   Months of purchase: January, February, March, April (all different, 1 to 4)
-   Types of amphibians: Bullfrog, HornedToad, TreeFrog, WoodFrog (all different, 1 to 4)

### Constraints:
-   The wood frog was bought 1 month after Nettie's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the wood frog and Nettie's pet, such that the wood frog's month of purchase is 1 more than Nettie's pet's month of purchase. So, the constraints will be of the form:
    m1 == WoodFrog and m2 == Nettie => m1_to_int == m2_to_int + 1, for all m1, m2 in months of purchase.

-   Ollie's pet is the wood frog:
    This is a direct assignment constraint:
    Ollie == WoodFrog.

-   The tree frog was bought 2 months after Ollie's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the tree frog and Ollie's pet, such that the tree frog's month of purchase is 2 more than Ollie's pet's month of purchase. So, the constraints will be of the form:
    m1 == TreeFrog and m2 == Ollie => m1_to_int == m2_to_int + 2, for all m1, m2 in months of purchase.

-   Joann's pet is either the wood frog or the tree frog:
    This is a constraint that states that Joann's pet is either the wood frog or the tree frog, but not both. So:
    Xor([Joann == WoodFrog, Joann == TreeFrog]).

-   Ida's pet is either the animal bought in April or the bullfrog:
    This is a constraint that states that Ida's pet is either the animal bought in April or the bullfrog, but not both. So:
    Xor([Ida == April, Ida == Bullfrog]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of individual, month, and amphibian)
# e.g. if ida == 1 and january == 1 and bullfrog == 1, then Ida's pet is the bullfrog bought in January
ida, joann, nettie, ollie = individuals = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
bullfrog, horned_toad, tree_frog, wood_frog = amphibians = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
individual_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
amphibian_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bought_after_than(var1, var2):
    """
    Formulate the constraint that var1 was bought after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def bought_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was bought exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(individuals)
m += AllDifferent(months)
m += AllDifferent(amphibians)

# Clue 1: The wood frog was bought 1 month after Nettie's pet:
m += bought_exactly_after_than(wood_frog, nettie, 1)

# Clue 2: Ollie's pet is the wood frog:
m += ollie == wood_frog

# Clue 3: The tree frog was bought 2 months after Ollie's pet:
m += bought_exactly_after_than(tree_frog, ollie, 2)

# Clue 4: Joann's pet is either the wood frog or the tree frog:
m += Xor([joann == wood_frog, joann == tree_frog])

# Clue 5: Ida's pet is either the animal bought in April or the bullfrog:
m += Xor([ida == april, ida == bullfrog])

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Winifred spoke for a somewhat shorter time than Omar.
Neal talked about Diocletian.
The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal and Vickie.
The student who gave the presentation on Nero spoke 2 minutes more than Vickie.
Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes.

Entities:
names: Neal, Omar, Vickie, Winifred
lengths: 6 minutes, 8 minutes, 10 minutes, 12 minutes
emperors: Diocletian, Galerius, Licinius, Nero
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Neal == 1, and 6minutes == 1, and Diocletian == 1, then Neal talked about Diocletian for 6 minutes.

### Decision variables:
-   Names of the students: Neal, Omar, Vickie, Winifred (all different, 1 to 4)
-   Lengths of the presentations: 6 minutes, 8 minutes, 10 minutes, 12 minutes (all different, 1 to 4)
-   Emperors discussed: Diocletian, Galerius, Licinius, Nero (all different, 1 to 4)

### Constraints:
-   Winifred spoke for a somewhat shorter time than Omar:
    For this, we will need to add a constraint for each possible assignment of the lengths of the presentations for Winifred and Omar, such that Winifred's presentation length is less than Omar's presentation length. So, the constraints will be of the form:
    l1 == Winifred and l2 == Omar => l1_to_int < l2_to_int, for all l1, l2 in lengths.

-   Neal talked about Diocletian:
    This is a direct assignment constraint:
    Neal == Diocletian.

-   The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal, and Vickie:
    This is a constraint that states that the four students are the ones mentioned, thus:
    AllDifferent([8minutes, Galerius, Neal, Vickie]).

-   The student who gave the presentation on Nero spoke 2 minutes more than Vickie:
    For this, we will need to add a constraint for each possible assignment of the lengths of the presentations for the student who presented on Nero and Vickie, such that the Nero presenter's presentation length is 2 more than Vickie's presentation length. So, the constraints will be of the form:
    l1 == Nero and l2 == Vickie => l1_to_int == l2_to_int + 2, for all l1, l2 in lengths.

-   Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes:
    This is a constraint that states that Omar is either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes, but not both. So:
    Xor([Omar == Nero, Omar == 10minutes]).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Neal == 1, and 6minutes == 1, and Diocletian == 1, then Neal talked about Diocletian for 6 minutes.

### Decision variables:
-   Names of the students: Neal, Omar, Vickie, Winifred (all different, 1 to 4)
-   Lengths of the presentations: 6 minutes, 8 minutes, 10 minutes, 12 minutes (all different, 1 to 4)
-   Emperors discussed: Diocletian, Galerius, Licinius, Nero (all different, 1 to 4)

### Constraints:
-   Winifred spoke for a somewhat shorter time than Omar:
    For this, we will need to add a constraint for each possible assignment of the lengths of the presentations for Winifred and Omar, such that Winifred's presentation length is less than Omar's presentation length. So, the constraints will be of the form:
    l1 == Winifred and l2 == Omar => l1_to_int < l2_to_int, for all l1, l2 in lengths.

-   Neal talked about Diocletian:
    This is a direct assignment constraint:
    Neal == Diocletian.

-   The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal, and Vickie:
    This is a constraint that states that the four students are the ones mentioned, thus:
    AllDifferent([8minutes, Galerius, Neal, Vickie]).

-   The student who gave the presentation on Nero spoke 2 minutes more than Vickie:
    For this, we will need to add a constraint for each possible assignment of the lengths of the presentations for the student who presented on Nero and Vickie, such that the Nero presenter's presentation length is 2 more than Vickie's presentation length. So, the constraints will be of the form:
    l1 == Nero and l2 == Vickie => l1_to_int == l2_to_int + 2, for all l1, l2 in lengths.

-   Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes:
    This is a constraint that states that Omar is either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes, but not both. So:
    Xor([Omar == Nero, Omar == 10minutes]).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, length, and emperor)
# e.g. if neal == 1 and six_minutes == 1 and diocletian == 1, then Neal talked about Diocletian for 6 minutes
neal, omar, vickie, winifred = students = intvar(1, 4, shape=4)
six_minutes, eight_minutes, ten_minutes, twelve_minutes = lengths = intvar(1, 4, shape=4)
diocletian, galerius, licinius, nero = emperors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
length_to_int = {six_minutes: 6, eight_minutes: 8, ten_minutes: 10, twelve_minutes: 12}  # in minutes
emperor_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def shorter_time_than(var1, var2):
    """
    Formulate the constraint that var1 spoke for a somewhat shorter time than var2.
    """
    return [((l1 == var1) & (l2 == var2)).implies(length_to_int[l1] < length_to_int[l2])
            for l1 in lengths for l2 in lengths]


def more_minutes_than(var1, var2, diff):
    """
    Formulate the constraint that var1 spoke more minutes than var2 by diff minutes.
    """
    return [((l1 == var1) & (l2 == var2)).implies(length_to_int[l1] == length_to_int[l2] + diff)
            for l1 in lengths for l2 in lengths]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(lengths)
m += AllDifferent(emperors)

# Clue 1: Winifred spoke for a somewhat shorter time than Omar:
m += shorter_time_than(winifred, omar)

# Clue 2: Neal talked about Diocletian:
m += neal == diocletian

# Clue 3: The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal, and Vickie:
m += AllDifferent([eight_minutes, galerius, neal, vickie])

# Clue 4: The student who gave the presentation on Nero spoke 2 minutes more than Vickie:
m += more_minutes_than(nero, vickie, 2)

# Clue 5: Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes:
m += Xor([omar == nero, omar == ten_minutes])

```
False
False
False
Wrong: 4, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Rosa paid somewhat more than the customer who got picked up at the Smith Tower.
The client with the $9 fare was picked up at the Smith Tower.
Neil paid 3 dollars more than Rosa.
The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della.
The person with the $15 fare was picked up at the Neptune Theatre.

Entities:
customers: Della, Neil, Rosa, Sara
fares: $6, $9, $12, $15
pickup points: Arctic Building, Fremont Library, Neptune Theatre, Smith Tower
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Della == 1, and $6 == 1, and ArcticBuilding == 1, then Della paid $6 and was picked up at the Arctic Building.

### Decision variables:
-   Names of the customers: Della, Neil, Rosa, Sara (all different, 1 to 4)
-   Fares paid: $6, $9, $12, $15 (all different, 1 to 4)
-   Pickup points: ArcticBuilding, FremontLibrary, NeptuneTheatre, SmithTower (all different, 1 to 4)

### Constraints:
-   Rosa paid somewhat more than the customer who got picked up at the Smith Tower:
    For this, we will need to add a constraint for each possible assignment of prices to Rosa and the customer picked up at the Smith Tower, such that Rosa's price is greater than the Smith Tower customer's price. So, the constraints will be of the form:
    p1 == Rosa and p2 == SmithTower => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   The client with the $9 fare was picked up at the Smith Tower:
    This is a direct assignment constraint:
    $9 == SmithTower.

-   Neil paid 3 dollars more than Rosa:
    For this, we will need to add a constraint for each possible assignment of prices to Neil and Rosa, such that Neil's price is 3 dollars more than Rosa's price. So, the constraints will be of the form:
    p1 == Neil and p2 == Rosa => p1_to_int == p2_to_int + 3, for all p1, p2 in prices.

-   The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della:
    This is a constraint that states that the customer picked up at the Fremont Library is either the one with the $9 fare or Della, but not both. So:
    Xor([FremontLibrary == $9, FremontLibrary == Della]).

-   The person with the $15 fare was picked up at the Neptune Theatre:
    This is a direct assignment constraint:
    $15 == NeptuneTheatre.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Della == 1, and $6 == 1, and ArcticBuilding == 1, then Della paid $6 and was picked up at the Arctic Building.

### Decision variables:
-   Names of the customers: Della, Neil, Rosa, Sara (all different, 1 to 4)
-   Fares paid: $6, $9, $12, $15 (all different, 1 to 4)
-   Pickup points: ArcticBuilding, FremontLibrary, NeptuneTheatre, SmithTower (all different, 1 to 4)

### Constraints:
-   Rosa paid somewhat more than the customer who got picked up at the Smith Tower:
    For this, we will need to add a constraint for each possible assignment of prices to Rosa and the customer picked up at the Smith Tower, such that Rosa's price is greater than the Smith Tower customer's price. So, the constraints will be of the form:
    p1 == Rosa and p2 == SmithTower => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   The client with the $9 fare was picked up at the Smith Tower:
    This is a direct assignment constraint:
    $9 == SmithTower.

-   Neil paid 3 dollars more than Rosa:
    For this, we will need to add a constraint for each possible assignment of prices to Neil and Rosa, such that Neil's price is 3 dollars more than Rosa's price. So, the constraints will be of the form:
    p1 == Neil and p2 == Rosa => p1_to_int == p2_to_int + 3, for all p1, p2 in prices.

-   The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della:
    This is a constraint that states that the customer picked up at the Fremont Library is either the one with the $9 fare or Della, but not both. So:
    Xor([FremontLibrary == $9, FremontLibrary == Della]).

-   The person with the $15 fare was picked up at the Neptune Theatre:
    This is a direct assignment constraint:
    $15 == NeptuneTheatre.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, fare, and pickup point)
# e.g. if della == 1 and fare6 == 1 and arctic_building == 1, then Della paid $6 and was picked up at the Arctic Building
della, neil, rosa, sara = customers = intvar(1, 4, shape=4)
fare6, fare9, fare12, fare15 = fares = intvar(1, 4, shape=4)
arctic_building, fremont_library, neptune_theatre, smith_tower = pickup_points = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
fare_to_int = {fare6: 6, fare9: 9, fare12: 12, fare15: 15}  # in dollars
pickup_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(fare_to_int[p1] > fare_to_int[p2])
            for p1 in fares for p2 in fares]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(fares)
m += AllDifferent(pickup_points)

# Clue 1: Rosa paid somewhat more than the customer who got picked up at the Smith Tower:
m += paid_more_than(rosa, smith_tower)

# Clue 2: The client with the $9 fare was picked up at the Smith Tower:
m += fare9 == smith_tower

# Clue 3: Neil paid 3 dollars more than Rosa:
m += ((neil == rosa) & (fare_to_int[neil] == fare_to_int[rosa] + 3))

# Clue 4: The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della:
m += Xor([fremont_library == fare9, fremont_library == della])

# Clue 5: The person with the $15 fare was picked up at the Neptune Theatre:
m += fare15 == neptune_theatre

```
Error: name 'IV6385' is not defined
False
False
Error: name 'IV6409' is not defined
---------------------------------------------------------------------------------------------

Clues:
The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez.
The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019.
The project headed by Dr. Salinas will go online 1 year before the Egert Facility.
The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble.
The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble.
The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC.

Entities:
names: Bale-Hahn SSC, Egert Facility, Lectra 4C, Zynga Complex
years: 2016, 2017, 2018, 2019
scientists: Dr. Alvarez, Dr. Morgan, Dr. Noble, Dr. Salinas
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if BaleHahnSSC == 1, and 2016 == 1, and DrAlvarez == 1, then the Bale-Hahn SSC project headed by Dr. Alvarez will go online in 2016.

### Decision variables:
-   Names of the projects: BaleHahnSSC, EgertFacility, Lectra4C, ZyngaComplex (all different, 1 to 4)
-   Years of going online: 2016, 2017, 2018, 2019 (all different, 1 to 4)
-   Names of the scientists: DrAlvarez, DrMorgan, DrNoble, DrSalinas (all different, 1 to 4)

### Constraints:
-   The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez:
    This is a constraint that states that the project going online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez, but not both. So:
    Xor([2019 == EgertFacility, 2019 == DrAlvarez]).

-   The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019:
    This is a constraint that states that the project headed by Dr. Morgan is either the Zynga Complex or the project going online in 2019, but not both. So:
    Xor([DrMorgan == ZyngaComplex, DrMorgan == 2019]).

-   The project headed by Dr. Salinas will go online 1 year before the Egert Facility:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Salinas and the Egert Facility, such that Dr. Salinas's project's year is 1 less than the Egert Facility's year. So, the constraints will be of the form:
    y1 == DrSalinas and y2 == EgertFacility => y1_to_int == y2_to_int - 1, for all y1, y2 in years.

-   The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble:
    For this, we will need to add a constraint for each possible assignment of the scientists for Dr. Alvarez and Dr. Noble, such that Dr. Alvarez's project goes online after Dr. Noble's project. So, the constraints will be of the form:
    s1 == DrAlvarez and s2 == DrNoble => s1_to_int > s2_to_int, for all s1, s2 in scientists.

-   The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble:
    For this, we will need to add a constraint for each possible assignment of the scientists for Dr. Salinas and Dr. Noble, such that Dr. Salinas's project goes online before Dr. Noble's project. So, the constraints will be of the form:
    s1 == DrSalinas and s2 == DrNoble => s1_to_int < s2_to_int, for all s1, s2 in scientists.

-   The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC:
    For this, we will need to add a constraint for each possible assignment of the projects for Dr. Morgan and the Bale-Hahn SSC, such that Dr. Morgan's project goes online after the Bale-Hahn SSC. So, the constraints will be of the form:
    p1 == DrMorgan and p2 == BaleHahnSSC => p1_to_int > p2_to_int, for all p1, p2 in projects.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if BaleHahnSSC == 1, and 2016 == 1, and DrAlvarez == 1, then the Bale-Hahn SSC project headed by Dr. Alvarez will go online in 2016.

### Decision variables:
-   Names of the projects: BaleHahnSSC, EgertFacility, Lectra4C, ZyngaComplex (all different, 1 to 4)
-   Years of going online: 2016, 2017, 2018, 2019 (all different, 1 to 4)
-   Names of the scientists: DrAlvarez, DrMorgan, DrNoble, DrSalinas (all different, 1 to 4)

### Constraints:
-   The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez:
    This is a constraint that states that the project going online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez, but not both. So:
    Xor([2019 == EgertFacility, 2019 == DrAlvarez]).

-   The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019:
    This is a constraint that states that the project headed by Dr. Morgan is either the Zynga Complex or the project going online in 2019, but not both. So:
    Xor([DrMorgan == ZyngaComplex, DrMorgan == 2019]).

-   The project headed by Dr. Salinas will go online 1 year before the Egert Facility:
    For this, we will need to add a constraint for each possible assignment of the years for Dr. Salinas and the Egert Facility, such that Dr. Salinas's project's year is 1 less than the Egert Facility's year. So, the constraints will be of the form:
    y1 == DrSalinas and y2 == EgertFacility => y1_to_int == y2_to_int - 1, for all y1, y2 in years.

-   The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble:
    For this, we will need to add a constraint for each possible assignment of the scientists for Dr. Alvarez and Dr. Noble, such that Dr. Alvarez's project goes online after Dr. Noble's project. So, the constraints will be of the form:
    s1 == DrAlvarez and s2 == DrNoble => s1_to_int > s2_to_int, for all s1, s2 in scientists.

-   The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble:
    For this, we will need to add a constraint for each possible assignment of the scientists for Dr. Salinas and Dr. Noble, such that Dr. Salinas's project goes online before Dr. Noble's project. So, the constraints will be of the form:
    s1 == DrSalinas and s2 == DrNoble => s1_to_int < s2_to_int, for all s1, s2 in scientists.

-   The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC:
    For this, we will need to add a constraint for each possible assignment of the projects for Dr. Morgan and the Bale-Hahn SSC, such that Dr. Morgan's project goes online after the Bale-Hahn SSC. So, the constraints will be of the form:
    p1 == DrMorgan and p2 == BaleHahnSSC => p1_to_int > p2_to_int, for all p1, p2 in projects.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of project, year, and scientist)
# e.g. if bale_hahn == 1 and year_2016 == 1 and dr_alvarez == 1, then the Bale-Hahn SSC project headed by Dr. Alvarez will go online in 2016
bale_hahn, egert, lectra, zynga = projects = intvar(1, 4, shape=4)
year_2016, year_2017, year_2018, year_2019 = years = intvar(1, 4, shape=4)
dr_alvarez, dr_morgan, dr_noble, dr_salinas = scientists = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
project_to_int = None  # N/A
year_to_int = {year_2016: 2016, year_2017: 2017, year_2018: 2018, year_2019: 2019}  # in years
scientist_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def online_after_than(var1, var2):
    """
    Formulate the constraint that var1 goes online after var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(year_to_int[p1] > year_to_int[p2])
            for p1 in years for p2 in years]


def online_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 goes online exactly diff years after var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(year_to_int[p1] == year_to_int[p2] + diff)
            for p1 in years for p2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(projects)
m += AllDifferent(years)
m += AllDifferent(scientists)

# Clue 1: The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez:
m += Xor([year_2019 == egert, year_2019 == dr_alvarez])

# Clue 2: The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019:
m += Xor([dr_morgan == zynga, dr_morgan == year_2019])

# Clue 3: The project headed by Dr. Salinas will go online 1 year before the Egert Facility:
m += online_exactly_after_than(dr_salinas, egert, -1)

# Clue 4: The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble:
m += online_after_than(dr_alvarez, dr_noble)

# Clue 5: The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble:
m += online_after_than(dr_salinas, dr_noble)

# Clue 6: The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC:
m += online_after_than(dr_morgan, bale_hahn)

```
False
False
False
Wrong: 5, Total: 9
---------------------------------------------------------------------------------------------

Clues:
Lillian scored 6 points higher than Bessie.
The dancer who performed first scored 3 points lower than the dancer who performed ninth.
Verna scored somewhat higher than the person who danced third.
The dancer who performed seventh scored 6 points higher than the person who danced ninth.

Entities:
names: Bessie, Clara, Lillian, Verna
points: 181 points, 184 points, 187 points, 190 points
orders: first, third, seventh, ninth
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bessie == 1, and 181Points == 1, and First == 1, then Bessie scored 181 points and performed first.

### Decision variables:
-   Names of the dancers: Bessie, Clara, Lillian, Verna (all different, 1 to 4)
-   Points scored: 181 points, 184 points, 187 points, 190 points (all different, 1 to 4)
-   Performance orders: first, third, seventh, ninth (all different, 1 to 4)

### Constraints:
-   Lillian scored 6 points higher than Bessie:
    For this, we will need to add a constraint for each possible assignment of points for Lillian and Bessie, such that Lillian's points are 6 more than Bessie's points. So, the constraints will be of the form:
    p1 == Lillian and p2 == Bessie => p1_to_int == p2_to_int + 6, for all p1, p2 in points.

-   The dancer who performed first scored 3 points lower than the dancer who performed ninth:
    For this, we will need to add a constraint for each possible assignment of points for the dancer who performed first and the dancer who performed ninth, such that the first performer's points are 3 less than the ninth performer's points. So, the constraints will be of the form:
    p1 == First and p2 == Ninth => p1_to_int == p2_to_int - 3, for all p1, p2 in points.

-   Verna scored somewhat higher than the person who danced third:
    For this, we will need to add a constraint for each possible assignment of points for Verna and the person who danced third, such that Verna's points are somewhat higher than the third dancer's points. So, the constraints will be of the form:
    p1 == Verna and p2 == Third => p1_to_int > p2_to_int, for all p1, p2 in points.

-   The dancer who performed seventh scored 6 points higher than the person who danced ninth:
    For this, we will need to add a constraint for each possible assignment of points for the dancer who performed seventh and the dancer who danced ninth, such that the seventh performer's points are 6 more than the ninth dancer's points. So, the constraints will be of the form:
    p1 == Seventh and p2 == Ninth => p1_to_int == p2_to_int + 6, for all p1, p2 in points.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Bessie == 1, and 181Points == 1, and First == 1, then Bessie scored 181 points and performed first.

### Decision variables:
-   Names of the dancers: Bessie, Clara, Lillian, Verna (all different, 1 to 4)
-   Points scored: 181 points, 184 points, 187 points, 190 points (all different, 1 to 4)
-   Performance orders: first, third, seventh, ninth (all different, 1 to 4)

### Constraints:
-   Lillian scored 6 points higher than Bessie:
    For this, we will need to add a constraint for each possible assignment of points for Lillian and Bessie, such that Lillian's points are 6 more than Bessie's points. So, the constraints will be of the form:
    p1 == Lillian and p2 == Bessie => p1_to_int == p2_to_int + 6, for all p1, p2 in points.

-   The dancer who performed first scored 3 points lower than the dancer who performed ninth:
    For this, we will need to add a constraint for each possible assignment of points for the dancer who performed first and the dancer who performed ninth, such that the first performer's points are 3 less than the ninth performer's points. So, the constraints will be of the form:
    p1 == First and p2 == Ninth => p1_to_int == p2_to_int - 3, for all p1, p2 in points.

-   Verna scored somewhat higher than the person who danced third:
    For this, we will need to add a constraint for each possible assignment of points for Verna and the person who danced third, such that Verna's points are somewhat higher than the third dancer's points. So, the constraints will be of the form:
    p1 == Verna and p2 == Third => p1_to_int > p2_to_int, for all p1, p2 in points.

-   The dancer who performed seventh scored 6 points higher than the person who danced ninth:
    For this, we will need to add a constraint for each possible assignment of points for the dancer who performed seventh and the dancer who danced ninth, such that the seventh performer's points are 6 more than the ninth dancer's points. So, the constraints will be of the form:
    p1 == Seventh and p2 == Ninth => p1_to_int == p2_to_int + 6, for all p1, p2 in points.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of dancer, points, and order)
# e.g. if bessie == 1 and points181 == 1 and first == 1, then Bessie scored 181 points and performed first
bessie, clara, lillian, verna = dancers = intvar(1, 4, shape=4)
points181, points184, points187, points190 = points = intvar(1, 4, shape=4)
first, third, seventh, ninth = orders = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
dancer_to_int = None  # N/A
points_to_int = {points181: 181, points184: 184, points187: 187, points190: 190}  # in points
order_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_higher_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored diff points higher than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(points_to_int[p1] == points_to_int[p2] + diff)
            for p1 in points for p2 in points]


def scored_somewhat_higher_than(var1, var2):
    """
    Formulate the constraint that var1 scored somewhat higher than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(points_to_int[p1] > points_to_int[p2])
            for p1 in points for p2 in points]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(dancers)
m += AllDifferent(points)
m += AllDifferent(orders)

# Clue 1: Lillian scored 6 points higher than Bessie:
m += scored_higher_than(lillian, bessie, 6)

# Clue 2: The dancer who performed first scored 3 points lower than the dancer who performed ninth:
m += scored_higher_than(ninth, first, 3)

# Clue 3: Verna scored somewhat higher than the person who danced third:
m += scored_somewhat_higher_than(verna, third)

# Clue 4: The dancer who performed seventh scored 6 points higher than the person who danced ninth:
m += scored_higher_than(seventh, ninth, 6)

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Evan threw the orange darts.
The player who threw the violet darts scored 7 points higher than Ira.
Ira finished with 41 points.
The player who threw the white darts finished 14 points lower than Rudy.

Entities:
players: Evan, Ira, Rudy, Zachary
scores: 41, 48, 55, 62
colors: gray, orange, violet, white
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Evan == 1, and 41 == 1, and Orange == 1, then Evan threw the orange darts and scored 41 points.

### Decision variables:
-   Names of the players: Evan, Ira, Rudy, Zachary (all different, 1 to 4)
-   Scores of the players: 41, 48, 55, 62 (all different, 1 to 4)
-   Colors of the darts: Gray, Orange, Violet, White (all different, 1 to 4)

### Constraints:
-   Evan threw the orange darts:
    This is a direct assignment constraint:
    Evan == Orange.

-   The player who threw the violet darts scored 7 points higher than Ira:
    For this, we will need to add a constraint for each possible assignment of scores for the player who threw the violet darts and Ira, such that the player who threw the violet darts scored 7 points higher than Ira. So, the constraints will be of the form:
    s1 == Violet and s2 == Ira => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.

-   Ira finished with 41 points:
    This is a direct assignment constraint:
    Ira == 41.

-   The player who threw the white darts finished 14 points lower than Rudy:
    For this, we will need to add a constraint for each possible assignment of scores for the player who threw the white darts and Rudy, such that the player who threw the white darts scored 14 points lower than Rudy. So, the constraints will be of the form:
    s1 == White and s2 == Rudy => s1_to_int == s2_to_int - 14, for all s1, s2 in scores.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Evan == 1, and 41 == 1, and Orange == 1, then Evan threw the orange darts and scored 41 points.

### Decision variables:
-   Names of the players: Evan, Ira, Rudy, Zachary (all different, 1 to 4)
-   Scores of the players: 41, 48, 55, 62 (all different, 1 to 4)
-   Colors of the darts: Gray, Orange, Violet, White (all different, 1 to 4)

### Constraints:
-   Evan threw the orange darts:
    This is a direct assignment constraint:
    Evan == Orange.

-   The player who threw the violet darts scored 7 points higher than Ira:
    For this, we will need to add a constraint for each possible assignment of scores for the player who threw the violet darts and Ira, such that the player who threw the violet darts scored 7 points higher than Ira. So, the constraints will be of the form:
    s1 == Violet and s2 == Ira => s1_to_int == s2_to_int + 7, for all s1, s2 in scores.

-   Ira finished with 41 points:
    This is a direct assignment constraint:
    Ira == 41.

-   The player who threw the white darts finished 14 points lower than Rudy:
    For this, we will need to add a constraint for each possible assignment of scores for the player who threw the white darts and Rudy, such that the player who threw the white darts scored 14 points lower than Rudy. So, the constraints will be of the form:
    s1 == White and s2 == Rudy => s1_to_int == s2_to_int - 14, for all s1, s2 in scores.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, score, and color)
# e.g. if evan == 1 and 41 == 1 and orange == 1, then Evan threw the orange darts and scored 41 points
evan, ira, rudy, zachary = players = intvar(1, 4, shape=4)
points41, points48, points55, points62 = scores = intvar(1, 4, shape=4)
gray, orange, violet, white = colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
score_to_int = {points41: 41, points48: 48, points55: 55, points62: 62}  # in points
color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_higher_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored diff points higher than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] == score_to_int[s2] + diff)
            for s1 in scores for s2 in scores]


def scored_lower_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored diff points lower than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] == score_to_int[s2] - diff)
            for s1 in scores for s2 in scores]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(scores)
m += AllDifferent(colors)

# Clue 1: Evan threw the orange darts:
m += evan == orange

# Clue 2: The player who threw the violet darts scored 7 points higher than Ira:
m += scored_higher_than(violet, ira, 7)

# Clue 3: Ira finished with 41 points:
m += ira == points41

# Clue 4: The player who threw the white darts finished 14 points lower than Rudy:
m += scored_lower_than(white, rudy, 14

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The 200 page project is either the book published in 2011 or the book published in 2010.
The book published in 2011 is either Orlando's project or Jan's project.
The book published in 2007 is 25 pages shorter than the book published in 2002.
The four projects are the book published in 2007, the 225 page assignment, Suzanne's project and the 175 page assignment.
Jan's assignment is 175 pages long.

Entities:
translators: Ebony, Jan, Orlando, Suzanne
pages: 150 pages, 175 pages, 200 pages, 225 pages
years: 2002, 2007, 2010, 2011
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ebony == 1, and 200Pages == 1, and 2010 == 1, then Ebony's project is the 200-page book published in 2010.

### Decision variables:
-   Names of the translators: Ebony, Jan, Orlando, Suzanne (all different, 1 to 4)
-   Number of pages of the projects: 150Pages, 175Pages, 200Pages, 225Pages (all different, 1 to 4)
-   Years of publication: 2002, 2007, 2010, 2011 (all different, 1 to 4)

### Constraints:
-   The 200-page project is either the book published in 2011 or the book published in 2010:
    This is a constraint that states that the 200-page project is either from 2011 or 2010, but not both. So:
    Xor([200Pages == 2011, 200Pages == 2010]).

-   The book published in 2011 is either Orlando's project or Jan's project:
    This is a constraint that states that the book published in 2011 is either Orlando's or Jan's project, but not both. So:
    Xor([2011 == Orlando, 2011 == Jan]).

-   The book published in 2007 is 25 pages shorter than the book published in 2002:
    For this, we will need to add a constraint for each possible assignment of the number of pages for the books published in 2007 and 2002, such that the book published in 2007 has 25 pages less than the book published in 2002. So, the constraints will be of the form:
    p1 == 2007 and p2 == 2002 => p2_to_int == p1_to_int + 25, for all p1, p2 in pages.

-   The four projects are the book published in 2007, the 225-page assignment, Suzanne's project, and the 175-page assignment:
    This is a constraint that states that these four entities are different, thus:
    AllDifferent([2007, 225Pages, Suzanne, 175Pages]).

-   Jan's assignment is 175 pages long:
    This is a direct assignment constraint:
    Jan == 175Pages.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ebony == 1, and 200Pages == 1, and 2010 == 1, then Ebony's project is the 200-page book published in 2010.

### Decision variables:
-   Names of the translators: Ebony, Jan, Orlando, Suzanne (all different, 1 to 4)
-   Number of pages of the projects: 150Pages, 175Pages, 200Pages, 225Pages (all different, 1 to 4)
-   Years of publication: 2002, 2007, 2010, 2011 (all different, 1 to 4)

### Constraints:
-   The 200-page project is either the book published in 2011 or the book published in 2010:
    This is a constraint that states that the 200-page project is either from 2011 or 2010, but not both. So:
    Xor([200Pages == 2011, 200Pages == 2010]).

-   The book published in 2011 is either Orlando's project or Jan's project:
    This is a constraint that states that the book published in 2011 is either Orlando's or Jan's project, but not both. So:
    Xor([2011 == Orlando, 2011 == Jan]).

-   The book published in 2007 is 25 pages shorter than the book published in 2002:
    For this, we will need to add a constraint for each possible assignment of the number of pages for the books published in 2007 and 2002, such that the book published in 2007 has 25 pages less than the book published in 2002. So, the constraints will be of the form:
    p1 == 2007 and p2 == 2002 => p2_to_int == p1_to_int + 25, for all p1, p2 in pages.

-   The four projects are the book published in 2007, the 225-page assignment, Suzanne's project, and the 175-page assignment:
    This is a constraint that states that these four entities are different, thus:
    AllDifferent([2007, 225Pages, Suzanne, 175Pages]).

-   Jan's assignment is 175 pages long:
    This is a direct assignment constraint:
    Jan == 175Pages.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of translator, pages, and year)
# e.g. if ebony == 1 and pages200 == 1 and year2010 == 1, then Ebony's project is the 200-page book published in 2010
ebony, jan, orlando, suzanne = translators = intvar(1, 4, shape=4)
pages150, pages175, pages200, pages225 = pages = intvar(1, 4, shape=4)
year2002, year2007, year2010, year2011 = years = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
translator_to_int = None  # N/A
pages_to_int = {pages150: 150, pages175: 175, pages200: 200, pages225: 225}  # in pages
year_to_int = {year2002: 2002, year2007: 2007, year2010: 2010, year2011: 2011}  # in years


# Helper functions (for formulating comparison constraints)
def shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff pages shorter than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pages_to_int[p2] == pages_to_int[p1] + diff)
            for p1 in pages for p2 in pages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(translators)
m += AllDifferent(pages)
m += AllDifferent(years)

# Clue 1: The 200-page project is either the book published in 2011 or the book published in 2010:
m += Xor([pages200 == year2011, pages200 == year2010])

# Clue 2: The book published in 2011 is either Orlando's project or Jan's project:
m += Xor([year2011 == orlando, year2011 == jan])

# Clue 3: The book published in 2007 is 25 pages shorter than the book published in 2002:
m += shorter_than(year2007, year2002, 25)

# Clue 4: The four projects are the book published in 2007, the 225-page assignment, Suzanne's project, and the 175-page assignment:
m += AllDifferent([year2007, pages225, suzanne, pages175])

# Clue 5: Jan's assignment is 175 pages long:
m += jan == pages175

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car.
The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake.
The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake.
Mrs. Nolan's cake will be in the shape of a sports car.
The October 7 delivery will be in the shape of a bowling pin.

Entities:
customers: Danielson, Estrada, Ingram, Nolan
delivery dates: October 5, October 6, October 7, October 8
cake shapes: baseball glove, bowling pin, sports car, turtle
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Danielson == 1, and October5 == 1, and BaseballGlove == 1, then Mrs. Danielson's baseball glove-shaped cake will be delivered on October 5.

### Decision variables:
-   Names of the customers: Danielson, Estrada, Ingram, Nolan (all different, 1 to 4)
-   Delivery dates: October5, October6, October7, October8 (all different, 1 to 4)
-   Cake shapes: BaseballGlove, BowlingPin, SportsCar, Turtle (all different, 1 to 4)

### Constraints:
-   Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car:
    For this, we will need to add a constraint for each possible assignment of the delivery dates for Mrs. Danielson's cake and the sports car-shaped cake, such that Mrs. Danielson's cake delivery date is 1 less than the sports car-shaped cake delivery date. So, the constraints will be of the form:
    d1 == Danielson and d2 == SportsCar => d1_to_int == d2_to_int - 1, for all d1, d2 in delivery dates.

-   The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake:
    For this, we will need to add a constraint for each possible assignment of the delivery dates for the turtle-shaped order and Mrs. Ingram's cake, such that the turtle-shaped order delivery date is 2 less than Mrs. Ingram's cake delivery date. So, the constraints will be of the form:
    d1 == Turtle and d2 == Ingram => d1_to_int == d2_to_int - 2, for all d1, d2 in delivery dates.

-   The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake:
    This is a constraint that states that the cake shaped like a bowling pin is either delivered on October 5 or the delivery date of Mrs. Ingram's cake, but not both. So:
    Xor([BowlingPin == October5, BowlingPin == Ingram]).

-   Mrs. Nolan's cake will be in the shape of a sports car:
    This is a direct assignment constraint:
    Nolan == SportsCar.

-   The October 7 delivery will be in the shape of a bowling pin:
    This is a direct assignment constraint:
    October7 == BowlingPin.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Danielson == 1, and October5 == 1, and BaseballGlove == 1, then Mrs. Danielson's baseball glove-shaped cake will be delivered on October 5.

### Decision variables:
-   Names of the customers: Danielson, Estrada, Ingram, Nolan (all different, 1 to 4)
-   Delivery dates: October5, October6, October7, October8 (all different, 1 to 4)
-   Cake shapes: BaseballGlove, BowlingPin, SportsCar, Turtle (all different, 1 to 4)

### Constraints:
-   Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car:
    For this, we will need to add a constraint for each possible assignment of the delivery dates for Mrs. Danielson's cake and the sports car-shaped cake, such that Mrs. Danielson's cake delivery date is 1 less than the sports car-shaped cake delivery date. So, the constraints will be of the form:
    d1 == Danielson and d2 == SportsCar => d1_to_int == d2_to_int - 1, for all d1, d2 in delivery dates.

-   The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake:
    For this, we will need to add a constraint for each possible assignment of the delivery dates for the turtle-shaped order and Mrs. Ingram's cake, such that the turtle-shaped order delivery date is 2 less than Mrs. Ingram's cake delivery date. So, the constraints will be of the form:
    d1 == Turtle and d2 == Ingram => d1_to_int == d2_to_int - 2, for all d1, d2 in delivery dates.

-   The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake:
    This is a constraint that states that the cake shaped like a bowling pin is either delivered on October 5 or the delivery date of Mrs. Ingram's cake, but not both. So:
    Xor([BowlingPin == October5, BowlingPin == Ingram]).

-   Mrs. Nolan's cake will be in the shape of a sports car:
    This is a direct assignment constraint:
    Nolan == SportsCar.

-   The October 7 delivery will be in the shape of a bowling pin:
    This is a direct assignment constraint:
    October7 == BowlingPin.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, delivery date, and cake shape)
# e.g. if danielson == 1 and oct5 == 1 and baseball_glove == 1, then Mrs. Danielson's baseball glove-shaped cake will be delivered on October 5
danielson, estrada, ingram, nolan = customers = intvar(1, 4, shape=4)
oct5, oct6, oct7, oct8 = delivery_dates = intvar(1, 4, shape=4)
baseball_glove, bowling_pin, sports_car, turtle = cake_shapes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
delivery_date_to_int = {oct5: 5, oct6: 6, oct7: 7, oct8: 8}  # in days
cake_shape_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def delivered_before_than(var1, var2):
    """
    Formulate the constraint that var1 delivered before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(delivery_date_to_int[d1] < delivery_date_to_int[d2])
            for d1 in delivery_dates for d2 in delivery_dates]


def delivered_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 delivered exactly diff days before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(delivery_date_to_int[d1] == delivery_date_to_int[d2] - diff)
            for d1 in delivery_dates for d2 in delivery_dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(delivery_dates)
m += AllDifferent(cake_shapes)

# Clue 1: Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car:
m += delivered_exactly_before_than(danielson, sports_car, 1)

# Clue 2: The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake:
m += delivered_exactly_before_than(turtle, ingram, 2)

# Clue 3: The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake:
m += Xor([bowling_pin == oct5, bowling_pin == ingram])

# Clue 4: Mrs. Nolan's cake will be in the shape of a sports car:
m += nolan == sports_car

# Clue 5: The October 7 delivery will be in the shape of a bowling pin:
m += oct7 == bowling_pin

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games.
The lacrosse facility holds 40 more people than Wilcox Arena.
Ingram Arena holds 230 people.
Wilcox Arena holds 80 fewer people than the soccer facility.

Entities:
arenas: Frederick, Ingram, Noble, Wilcox
capacities: 110, 150, 190, 230
sports: basketball, lacrosse, rugby, soccer
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Frederick == 1, and 110 == 1, and basketball == 1, then Frederick's arena holds 110 people and is set up for basketball games.

### Decision variables:
-   Names of the arenas: Frederick, Ingram, Noble, Wilcox (all different, 1 to 4)
-   Capacities of the arenas: 110, 150, 190, 230 (all different, 1 to 4)
-   Sports played in the arenas: basketball, lacrosse, rugby, soccer (all different, 1 to 4)

### Constraints:
-   Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games:
    This is a constraint that states that one of Ingram Arena and Noble Arena holds 150 people and the other is set up for rugby games. So, we can directly assign these values:
    (Ingram == 150 and Noble == rugby) or (Ingram == rugby and Noble == 150).

-   The lacrosse facility holds 40 more people than Wilcox Arena:
    For this, we will need to add a constraint for each possible assignment of capacities for the lacrosse facility and Wilcox Arena, such that the lacrosse facility's capacity is 40 more than Wilcox Arena's capacity. So, the constraints will be of the form:
    c1 == lacrosse and c2 == Wilcox => c1_to_int == c2_to_int + 40, for all c1, c2 in capacities.

-   Ingram Arena holds 230 people:
    This is a direct assignment constraint:
    Ingram == 230.

-   Wilcox Arena holds 80 fewer people than the soccer facility:
    For this, we will need to add a constraint for each possible assignment of capacities for Wilcox Arena and the soccer facility, such that Wilcox Arena's capacity is 80 fewer than the soccer facility's capacity. So, the constraints will be of the form:
    c1 == Wilcox and c2 == soccer => c1_to_int == c2_to_int - 80, for all c1, c2 in capacities.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Frederick == 1, and 110 == 1, and basketball == 1, then Frederick's arena holds 110 people and is set up for basketball games.

### Decision variables:
-   Names of the arenas: Frederick, Ingram, Noble, Wilcox (all different, 1 to 4)
-   Capacities of the arenas: 110, 150, 190, 230 (all different, 1 to 4)
-   Sports played in the arenas: basketball, lacrosse, rugby, soccer (all different, 1 to 4)

### Constraints:
-   Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games:
    This is a constraint that states that one of Ingram Arena and Noble Arena holds 150 people and the other is set up for rugby games. So, we can directly assign these values:
    (Ingram == 150 and Noble == rugby) or (Ingram == rugby and Noble == 150).

-   The lacrosse facility holds 40 more people than Wilcox Arena:
    For this, we will need to add a constraint for each possible assignment of capacities for the lacrosse facility and Wilcox Arena, such that the lacrosse facility's capacity is 40 more than Wilcox Arena's capacity. So, the constraints will be of the form:
    c1 == lacrosse and c2 == Wilcox => c1_to_int == c2_to_int + 40, for all c1, c2 in capacities.

-   Ingram Arena holds 230 people:
    This is a direct assignment constraint:
    Ingram == 230.

-   Wilcox Arena holds 80 fewer people than the soccer facility:
    For this, we will need to add a constraint for each possible assignment of capacities for Wilcox Arena and the soccer facility, such that Wilcox Arena's capacity is 80 fewer than the soccer facility's capacity. So, the constraints will be of the form:
    c1 == Wilcox and c2 == soccer => c1_to_int == c2_to_int - 80, for all c1, c2 in capacities.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of arena, capacity, and sport)
# e.g. if frederick == 1 and 110 == 1 and basketball == 1, then Frederick's arena holds 110 people and is set up for basketball
frederick, ingram, noble, wilcox = arenas = intvar(1, 4, shape=4)
cap110, cap150, cap190, cap230 = capacities = intvar(1, 4, shape=4)
basketball, lacrosse, rugby, soccer = sports = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
arena_to_int = None  # N/A
capacity_to_int = {cap110: 110, cap150: 150, cap190: 190, cap230: 230}  # in people
sport_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def holds_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 holds more people than var2 by diff.
    """
    return [((c1 == var1) & (c2 == var2)).implies(capacity_to_int[c1] == capacity_to_int[c2] + diff)
            for c1 in capacities for c2 in capacities]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(arenas)
m += AllDifferent(capacities)
m += AllDifferent(sports)

# Clue 1: Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games:
m += ((ingram == cap150) & (noble == rugby)) | ((ingram == rugby) & (noble == cap150))

# Clue 2: The lacrosse facility holds 40 more people than Wilcox Arena:
m += holds_more_than(lacrosse, wilcox, 40)

# Clue 3: Ingram Arena holds 230 people:
m += ingram == cap230

# Clue 4: Wilcox Arena holds 80 fewer people than the soccer facility:
m += holds_more_than(soccer, wilcox, -80)

```
False
False
False
Wrong: 2, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The $35,000 structure is 15 sq ft smaller than the $29,000 home.
The Whitehead's structure sold for $29,000.
The Kirby's house is 15 sq ft smaller than the $35,000 house.
The $36,000 house is somewhat smaller than the Gillespie's structure.
Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies.

Entities:
customers: Gillespie, Kirby, Pratt, Whitehead
sq footage: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft
prices: $25,000, $29,000, $35,000, $36,000
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Gillespie == 1, and $35,000 == 1, and 140 sq ft == 1, then Gillespie's structure with 140 sq ft was sold for $35,000.

### Decision variables:
-   Names of the customers: Gillespie, Kirby, Pratt, Whitehead (all different, 1 to 4)
-   Square footage of the homes: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft (all different, 1 to 4)
-   Prices of the homes: $25,000, $29,000, $35,000, $36,000 (all different, 1 to 4)

### Constraints:
-   The $35,000 structure is 15 sq ft smaller than the $29,000 home:
    For this, we will need to add a constraint for each possible assignment of prices to the $35,000 and $29,000 homes, such that the $35,000 home's square footage is 15 less than the $29,000 home's square footage. So, the constraints will be of the form:
    p1 == $35,000 and p2 == $29,000 => p1_to_int == p2_to_int - 15, for all p1, p2 in square footage.

-   The Whitehead's structure sold for $29,000:
    This is a direct assignment constraint:
    Whitehead == $29,000.

-   The Kirby's house is 15 sq ft smaller than the $35,000 house:
    For this, we will need to add a constraint for each possible assignment of square footage to the Kirby's house and the $35,000 house, such that the Kirby's house's square footage is 15 less than the $35,000 house's square footage. So, the constraints will be of the form:
    s1 == Kirby and s2 == $35,000 => s1_to_int == s2_to_int - 15, for all s1, s2 in square footage.

-   The $36,000 house is somewhat smaller than the Gillespie's structure:
    For this, we will need to add a constraint for each possible assignment of prices to the $36,000 house and the Gillespie's structure, such that the $36,000 house's square footage is less than the Gillespie's structure's square footage. So, the constraints will be of the form:
    p1 == $36,000 and p2 == Gillespie => p1_to_int < p2_to_int, for all p1, p2 in square footage.

-   Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies:
    This is a constraint that states that one of the homes with 110 sq ft and 140 sq ft was sold for $35,000 and the other belongs to the Gillespies. So:
    (110 == $35,000 and 140 == Gillespie) or (110 == Gillespie and 140 == $35,000).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Gillespie == 1, and $35,000 == 1, and 140 sq ft == 1, then Gillespie's structure with 140 sq ft was sold for $35,000.

### Decision variables:
-   Names of the customers: Gillespie, Kirby, Pratt, Whitehead (all different, 1 to 4)
-   Square footage of the homes: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft (all different, 1 to 4)
-   Prices of the homes: $25,000, $29,000, $35,000, $36,000 (all different, 1 to 4)

### Constraints:
-   The $35,000 structure is 15 sq ft smaller than the $29,000 home:
    For this, we will need to add a constraint for each possible assignment of prices to the $35,000 and $29,000 homes, such that the $35,000 home's square footage is 15 less than the $29,000 home's square footage. So, the constraints will be of the form:
    p1 == $35,000 and p2 == $29,000 => p1_to_int == p2_to_int - 15, for all p1, p2 in square footage.

-   The Whitehead's structure sold for $29,000:
    This is a direct assignment constraint:
    Whitehead == $29,000.

-   The Kirby's house is 15 sq ft smaller than the $35,000 house:
    For this, we will need to add a constraint for each possible assignment of square footage to the Kirby's house and the $35,000 house, such that the Kirby's house's square footage is 15 less than the $35,000 house's square footage. So, the constraints will be of the form:
    s1 == Kirby and s2 == $35,000 => s1_to_int == s2_to_int - 15, for all s1, s2 in square footage.

-   The $36,000 house is somewhat smaller than the Gillespie's structure:
    For this, we will need to add a constraint for each possible assignment of prices to the $36,000 house and the Gillespie's structure, such that the $36,000 house's square footage is less than the Gillespie's structure's square footage. So, the constraints will be of the form:
    p1 == $36,000 and p2 == Gillespie => p1_to_int < p2_to_int, for all p1, p2 in square footage.

-   Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies:
    This is a constraint that states that one of the homes with 110 sq ft and 140 sq ft was sold for $35,000 and the other belongs to the Gillespies. So:
    (110 == $35,000 and 140 == Gillespie) or (110 == Gillespie and 140 == $35,000).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, sq footage, and price)
# e.g. if gillespie == 1 and $35,000 == 1 and 140 sq ft == 1, then Gillespie's structure with 140 sq ft was sold for $35,000
gillespie, kirby, pratt, whitehead = customers = intvar(1, 4, shape=4)
sq95, sq110, sq125, sq140 = sq_footage = intvar(1, 4, shape=4)
price25k, price29k, price35k, price36k = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
sq_footage_to_int = {sq95: 95, sq110: 110, sq125: 125, sq140: 140}  # in sq ft
price_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def smaller_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff sq ft smaller than var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(sq_footage_to_int[v1] == sq_footage_to_int[v2] - diff)
            for v1 in sq_footage for v2 in sq_footage]


def smaller_than_or_equal(var1, var2):
    """
    Formulate the constraint that var1 is smaller than or equal to var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(sq_footage_to_int[v1] <= sq_footage_to_int[v2])
            for v1 in sq_footage for v2 in sq_footage]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(sq_footage)
m += AllDifferent(prices)

# Clue 1: The $35,000 structure is 15 sq ft smaller than the $29,000 home:
m += smaller_than(price35k, price29k, 15)

# Clue 2: The Whitehead's structure sold for $29,000:
m += whitehead == price29k

# Clue 3: The Kirby's house is 15 sq ft smaller than the $35,000 house:
m += smaller_than(kirby, price35k, 15)

# Clue 4: The $36,000 house is somewhat smaller than the Gillespie's structure:
m += smaller_than_or_equal(price36k, gillespie)

# Clue 5: Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies:
m += ((sq110 == price35k) & (sq140 == gillespie)) | ((sq110 == gillespie) & (sq140 == price35k)

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Nielsen's house is 30 sq ft larger than the $35,000 structure.
The 125 sq ft home is either the Whitehead's home or the $32,250 home.
The Whitehead's house sold for $29,000.
The Ewing's home sold for $32,250.
The $29,000 house is somewhat smaller than the $32,250 structure.

Entities:
customers: Ewing, Kirby, Nielsen, Whitehead
sq footage: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft
prices: $27,500, $29,000, $32,250, $35,000
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ewing == 1, and $32,250 == 1, and 110 sq ft == 1, then Ewing's house sold for $32,250 and has an area of 110 sq ft.

### Decision variables:
-   Names of the customers: Ewing, Kirby, Nielsen, Whitehead (all different, 1 to 4)
-   Square footage of the houses: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft (all different, 1 to 4)
-   Prices of the houses: $27,500, $29,000, $32,250, $35,000 (all different, 1 to 4)

### Constraints:
-   The Nielsen's house is 30 sq ft larger than the $35,000 structure:
    For this, we will need to add a constraint for each possible assignment of square footage for Nielsen's house and the $35,000 structure, such that Nielsen's house's square footage is 30 more than the $35,000 structure's square footage. So, the constraints will be of the form:
    s1 == Nielsen and s2 == $35,000 => s1_to_int == s2_to_int + 30, for all s1, s2 in square footage.

-   The 125 sq ft home is either the Whitehead's home or the $32,250 home:
    This is a constraint that states that the 125 sq ft home is either Whitehead's home or the $32,250 home, but not both. So:
    Xor([125sqft == Whitehead, 125sqft == $32,250]).

-   The Whitehead's house sold for $29,000:
    This is a direct assignment constraint:
    Whitehead == $29,000.

-   The Ewing's home sold for $32,250:
    This is a direct assignment constraint:
    Ewing == $32,250.

-   The $29,000 house is somewhat smaller than the $32,250 structure:
    For this, we will need to add a constraint for each possible assignment of prices for the $29,000 house and the $32,250 structure, such that the $29,000 house's square footage is less than the $32,250 structure's square footage. So, the constraints will be of the form:
    p1 == $29,000 and p2 == $32,250 => p1_to_int < p2_to_int, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Ewing == 1, and $32,250 == 1, and 110 sq ft == 1, then Ewing's house sold for $32,250 and has an area of 110 sq ft.

### Decision variables:
-   Names of the customers: Ewing, Kirby, Nielsen, Whitehead (all different, 1 to 4)
-   Square footage of the houses: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft (all different, 1 to 4)
-   Prices of the houses: $27,500, $29,000, $32,250, $35,000 (all different, 1 to 4)

### Constraints:
-   The Nielsen's house is 30 sq ft larger than the $35,000 structure:
    For this, we will need to add a constraint for each possible assignment of square footage for Nielsen's house and the $35,000 structure, such that Nielsen's house's square footage is 30 more than the $35,000 structure's square footage. So, the constraints will be of the form:
    s1 == Nielsen and s2 == $35,000 => s1_to_int == s2_to_int + 30, for all s1, s2 in square footage.

-   The 125 sq ft home is either the Whitehead's home or the $32,250 home:
    This is a constraint that states that the 125 sq ft home is either Whitehead's home or the $32,250 home, but not both. So:
    Xor([125sqft == Whitehead, 125sqft == $32,250]).

-   The Whitehead's house sold for $29,000:
    This is a direct assignment constraint:
    Whitehead == $29,000.

-   The Ewing's home sold for $32,250:
    This is a direct assignment constraint:
    Ewing == $32,250.

-   The $29,000 house is somewhat smaller than the $32,250 structure:
    For this, we will need to add a constraint for each possible assignment of prices for the $29,000 house and the $32,250 structure, such that the $29,000 house's square footage is less than the $32,250 structure's square footage. So, the constraints will be of the form:
    p1 == $29,000 and p2 == $32,250 => p1_to_int < p2_to_int, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, sq footage, and price)
# e.g. if ewing == 1 and $32,250 == 1 and 110 sq ft == 1, then Ewing's house sold for $32,250 and has an area of 110 sq ft
ewing, kirby, nielsen, whitehead = customers = intvar(1, 4, shape=4)
sq95, sq110, sq125, sq140 = sq_footage = intvar(1, 4, shape=4)
price27500, price29000, price32250, price35000 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
sq_footage_to_int = {sq95: 95, sq110: 110, sq125: 125, sq140: 140}  # in sq ft
price_to_int = {price27500: 27500, price29000: 29000, price32250: 32250, price35000: 35000}  # in dollars


# Helper functions (for formulating comparison constraints)
def larger_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff sq ft larger than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(sq_footage_to_int[s1] == sq_footage_to_int[s2] + diff)
            for s1 in sq_footage for s2 in sq_footage]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(sq_footage)
m += AllDifferent(prices)

# Clue 1: The Nielsen's house is 30 sq ft larger than the $35,000 structure:
m += larger_than(nielsen, price35000, 30)

# Clue 2: The 125 sq ft home is either the Whitehead's home or the $32,250 home:
m += Xor([sq125 == whitehead, sq125 == price32250])

# Clue 3: The Whitehead's house sold for $29,000:
m += whitehead == price29000

# Clue 4: The Ewing's home sold for $32,250:
m += ewing == price32250

# Clue 5: The $29,000 house is somewhat smaller than the $32,250 structure:
m += [((p1 == price29000) & (p2 == price32250)).implies(sq_footage_to_int[p1] < sq_footage_to_int[p2])
      for p1 in prices for p2 in prices]

```
Error: name 'IV6872' is not defined
False
False
Error: name 'IV6896' is not defined
---------------------------------------------------------------------------------------------

Clues:
Paulette's pair was a size 7.
Estelle's pair was by Cormano.
The Manzarita footwear was either the size 4 set or Whitney's pair.
Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6.

Entities:
customers: Estelle, Lucia, Paulette, Whitney
shoe sizes: 4, 5, 6, 7
brands: Cormano, Manzarita, Schtillet, Williford
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Estelle == 1, and Size4 == 1, and Cormano == 1, then Estelle's pair, size 4, is by Cormano.

### Decision variables:
-   Names of the customers: Estelle, Lucia, Paulette, Whitney (all different, 1 to 4)
-   Shoe sizes: Size4, Size5, Size6, Size7 (all different, 1 to 4)
-   Brands of the shoes: Cormano, Manzarita, Schtillet, Williford (all different, 1 to 4)

### Constraints:
-   Paulette's pair was a size 7:
    This is a direct assignment constraint:
    Paulette == Size7.

-   Estelle's pair was by Cormano:
    This is a direct assignment constraint:
    Estelle == Cormano.

-   The Manzarita footwear was either the size 4 set or Whitney's pair:
    This is a constraint that states that the Manzarita footwear is either size 4 or Whitney's pair, but not both. So:
    Xor([Manzarita == Size4, Manzarita == Whitney]).

-   Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6:
    This is a constraint that states that Lucia's pair and the Schtillet footwear have sizes 7 and 6, but not in the same order. So:
    (Lucia == Size7 and Schtillet == Size6) or (Lucia == Size6 and Schtillet == Size7).
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Estelle == 1, and Size4 == 1, and Cormano == 1, then Estelle's pair, size 4, is by Cormano.

### Decision variables:
-   Names of the customers: Estelle, Lucia, Paulette, Whitney (all different, 1 to 4)
-   Shoe sizes: Size4, Size5, Size6, Size7 (all different, 1 to 4)
-   Brands of the shoes: Cormano, Manzarita, Schtillet, Williford (all different, 1 to 4)

### Constraints:
-   Paulette's pair was a size 7:
    This is a direct assignment constraint:
    Paulette == Size7.

-   Estelle's pair was by Cormano:
    This is a direct assignment constraint:
    Estelle == Cormano.

-   The Manzarita footwear was either the size 4 set or Whitney's pair:
    This is a constraint that states that the Manzarita footwear is either size 4 or Whitney's pair, but not both. So:
    Xor([Manzarita == Size4, Manzarita == Whitney]).

-   Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6:
    This is a constraint that states that Lucia's pair and the Schtillet footwear have sizes 7 and 6, but not in the same order. So:
    (Lucia == Size7 and Schtillet == Size6) or (Lucia == Size6 and Schtillet == Size7).
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, size, and brand)
# e.g. if estelle == 1 and size4 == 1 and cormano == 1, then Estelle's pair, size 4, is by Cormano
estelle, lucia, paulette, whitney = customers = intvar(1, 4, shape=4)
size4, size5, size6, size7 = shoe_sizes = intvar(1, 4, shape=4)
cormano, manzarita, schtillet, williford = brands = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
size_to_int = {size4: 4, size5: 5, size6: 6, size7: 7}  # in sizes
brand_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def pair_size(var1, var2, size1, size2):
    """
    Formulate the constraint that var1's pair is size1 and var2's pair is size2.
    """
    return [(var1 == size1) & (var2 == size2), (var1 == size2) & (var2 == size1)]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(shoe_sizes)
m += AllDifferent(brands)

# Clue 1: Paulette's pair was a size 7:
m += paulette == size7

# Clue 2: Estelle's pair was by Cormano:
m += estelle == cormano

# Clue 3: The Manzarita footwear was either the size 4 set or Whitney's pair:
m += Xor([manzarita == size4, manzarita == whitney])

# Clue 4: Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6:
m += pair_size(lucia, schtillet, size7, size6)

```
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The project on the Serenity starts 1 month after Stacy's project.
Darryl's project starts 1 month after Gene's assignment.
The study beginning in April is either the study on the Liberty or the project on the Pegasus.
Lauren's project is on the Pegasus.

Entities:
students: Darryl, Gene, Lauren, Stacy
months: March, April, May, June
ships: Liberty, Osprey, Pegasus, Serenity
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Darryl == 1, and March == 1, and Liberty == 1, then Darryl's project starts in March on the Liberty.

### Decision variables:
-   Names of the students: Darryl, Gene, Lauren, Stacy (all different, 1 to 4)
-   Months of project start: March, April, May, June (all different, 1 to 4)
-   Names of the ships: Liberty, Osprey, Pegasus, Serenity (all different, 1 to 4)

### Constraints:
-   The project on the Serenity starts 1 month after Stacy's project:
    For this, we will need to add a constraint for each possible assignment of the months for the project on the Serenity and Stacy's project, such that the Serenity project starts 1 month after Stacy's project. So, the constraints will be of the form:
    m1 == Serenity and m2 == Stacy => m1_to_int == m2_to_int + 1, for all m1, m2 in months.

-   Darryl's project starts 1 month after Gene's assignment:
    For this, we will need to add a constraint for each possible assignment of the months for Darryl's project and Gene's assignment, such that Darryl's project starts 1 month after Gene's assignment. So, the constraints will be of the form:
    m1 == Darryl and m2 == Gene => m1_to_int == m2_to_int + 1, for all m1, m2 in months.

-   The study beginning in April is either the study on the Liberty or the project on the Pegasus:
    This is a constraint that states that the study beginning in April is either on the Liberty or the Pegasus, but not both. So:
    Xor([April == Liberty, April == Pegasus]).

-   Lauren's project is on the Pegasus:
    This is a direct assignment constraint:
    Lauren == Pegasus.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Darryl == 1, and March == 1, and Liberty == 1, then Darryl's project starts in March on the Liberty.

### Decision variables:
-   Names of the students: Darryl, Gene, Lauren, Stacy (all different, 1 to 4)
-   Months of project start: March, April, May, June (all different, 1 to 4)
-   Names of the ships: Liberty, Osprey, Pegasus, Serenity (all different, 1 to 4)

### Constraints:
-   The project on the Serenity starts 1 month after Stacy's project:
    For this, we will need to add a constraint for each possible assignment of the months for the project on the Serenity and Stacy's project, such that the Serenity project starts 1 month after Stacy's project. So, the constraints will be of the form:
    m1 == Serenity and m2 == Stacy => m1_to_int == m2_to_int + 1, for all m1, m2 in months.

-   Darryl's project starts 1 month after Gene's assignment:
    For this, we will need to add a constraint for each possible assignment of the months for Darryl's project and Gene's assignment, such that Darryl's project starts 1 month after Gene's assignment. So, the constraints will be of the form:
    m1 == Darryl and m2 == Gene => m1_to_int == m2_to_int + 1, for all m1, m2 in months.

-   The study beginning in April is either the study on the Liberty or the project on the Pegasus:
    This is a constraint that states that the study beginning in April is either on the Liberty or the Pegasus, but not both. So:
    Xor([April == Liberty, April == Pegasus]).

-   Lauren's project is on the Pegasus:
    This is a direct assignment constraint:
    Lauren == Pegasus.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, month, and ship)
# e.g. if darryl == 1 and march == 1 and liberty == 1, then Darryl's project starts in March on the Liberty
darryl, gene, lauren, stacy = students = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
liberty, osprey, pegasus, serenity = ships = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
month_to_int = {march: 1, april: 2, may: 3, june: 4}  # in months
ship_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2):
    """
    Formulate the constraint that var1 starts after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + 1)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(months)
m += AllDifferent(ships)

# Clue 1: The project on the Serenity starts 1 month after Stacy's project:
m += starts_after_than(serenity, stacy)

# Clue 2: Darryl's project starts 1 month after Gene's assignment:
m += starts_after_than(darryl, gene)

# Clue 3: The study beginning in April is either the study on the Liberty or the project on the Pegasus:
m += Xor([april == liberty, april == pegasus])

# Clue 4: Lauren's project is on the Pegasus:
m += lauren == pegasus

```
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Zimmerman is from the Wolverines.
The person from the Ice Hogs scored 1 goal less than the player from the Wolverines.
Klein had 9 goals this season.
The player from the Checkers scored 1 goal more than Walls.

Entities:
players: Klein, Underwood, Walls, Zimmerman
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Wolverines
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Klein == 1, and 9Goals == 1, and Wolverines == 1, then Klein from the Wolverines scored 9 goals.

### Decision variables:
-   Names of the players: Klein, Underwood, Walls, Zimmerman (all different, 1 to 4)
-   Number of goals scored: 6Goals, 7Goals, 8Goals, 9Goals (all different, 1 to 4)
-   Teams: Checkers, Comets, Ice Hogs, Wolverines (all different, 1 to 4)

### Constraints:
-   Zimmerman is from the Wolverines:
    This is a direct assignment constraint:
    Zimmerman == Wolverines.

-   The person from the Ice Hogs scored 1 goal less than the player from the Wolverines:
    For this, we will need to add a constraint for each possible assignment of goals for the player from the Ice Hogs and the player from the Wolverines, such that the Ice Hogs player's goals are 1 less than the Wolverines player's goals. So, the constraints will be of the form:
    g1 == IceHogs and g2 == Wolverines => g1_to_int == g2_to_int - 1, for all g1, g2 in goals.

-   Klein had 9 goals this season:
    This is a direct assignment constraint:
    Klein == 9Goals.

-   The player from the Checkers scored 1 goal more than Walls:
    For this, we will need to add a constraint for each possible assignment of goals for the player from the Checkers and Walls, such that the Checkers player's goals are 1 more than Walls' goals. So, the constraints will be of the form:
    g1 == Checkers and g2 == Walls => g1_to_int == g2_to_int + 1, for all g1, g2 in goals.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Klein == 1, and 9Goals == 1, and Wolverines == 1, then Klein from the Wolverines scored 9 goals.

### Decision variables:
-   Names of the players: Klein, Underwood, Walls, Zimmerman (all different, 1 to 4)
-   Number of goals scored: 6Goals, 7Goals, 8Goals, 9Goals (all different, 1 to 4)
-   Teams: Checkers, Comets, Ice Hogs, Wolverines (all different, 1 to 4)

### Constraints:
-   Zimmerman is from the Wolverines:
    This is a direct assignment constraint:
    Zimmerman == Wolverines.

-   The person from the Ice Hogs scored 1 goal less than the player from the Wolverines:
    For this, we will need to add a constraint for each possible assignment of goals for the player from the Ice Hogs and the player from the Wolverines, such that the Ice Hogs player's goals are 1 less than the Wolverines player's goals. So, the constraints will be of the form:
    g1 == IceHogs and g2 == Wolverines => g1_to_int == g2_to_int - 1, for all g1, g2 in goals.

-   Klein had 9 goals this season:
    This is a direct assignment constraint:
    Klein == 9Goals.

-   The player from the Checkers scored 1 goal more than Walls:
    For this, we will need to add a constraint for each possible assignment of goals for the player from the Checkers and Walls, such that the Checkers player's goals are 1 more than Walls' goals. So, the constraints will be of the form:
    g1 == Checkers and g2 == Walls => g1_to_int == g2_to_int + 1, for all g1, g2 in goals.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, goals, and team)
# e.g. if klein == 1 and goals9 == 1 and wolverines == 1, then Klein from the Wolverines scored 9 goals
klein, underwood, walls, zimmerman = players = intvar(1, 4, shape=4)
goals6, goals7, goals8, goals9 = goals = intvar(1, 4, shape=4)
checkers, comets, ice_hogs, wolverines = teams = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
goals_to_int = {goals6: 6, goals7: 7, goals8: 8, goals9: 9}  # number of goals
team_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_less_than(var1, var2):
    """
    Formulate the constraint that var1 scored 1 goal less than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goals_to_int[g1] == goals_to_int[g2] - 1)
            for g1 in goals for g2 in goals]


def scored_more_than(var1, var2):
    """
    Formulate the constraint that var1 scored 1 goal more than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goals_to_int[g1] == goals_to_int[g2] + 1)
            for g1 in goals for g2 in goals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(goals)
m += AllDifferent(teams)

# Clue 1: Zimmerman is from the Wolverines:
m += zimmerman == wolverines

# Clue 2: The person from the Ice Hogs scored 1 goal less than the player from the Wolverines:
m += scored_less_than(ice_hogs, wolverines)

# Clue 3: Klein had 9 goals this season:
m += klein == goals9

# Clue 4: The player from the Checkers scored 1 goal more than Walls:
m += scored_more_than(checkers, walls

```
Error: invalid syntax (<string>, line 1)
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw.
The macaw was bought 2 months before Ellen's pet.
The parakeet was bought 1 month after the finch.
Alberta's pet was bought 1 month before Gladys's pet.
The finch was bought sometime after the lovebird.

Entities:
names: Alberta, Della, Ellen, Gladys
months: January, February, March, April
birds: finch, lovebird, macaw, parakeet
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Alberta == 1, and January == 1, and Finch == 1, then Alberta's pet, a finch, was bought in January.

### Decision variables:
-   Names of the owners: Alberta, Della, Ellen, Gladys (all different, 1 to 4)
-   Months of purchase: January, February, March, April (all different, 1 to 4)
-   Types of birds: Finch, Lovebird, Macaw, Parakeet (all different, 1 to 4)

### Constraints:
-   Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw:
    This is a constraint that states that one of the birds bought in February and January is Gladys's, and the other is a macaw. So:
    Xor([Gladys == February, Gladys == January]).

-   The macaw was bought 2 months before Ellen's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the macaw and Ellen's pet, such that the macaw's month of purchase is 2 less than Ellen's pet's month of purchase. So, the constraints will be of the form:
    m1 == Macaw and m2 == Ellen => m1_to_int == m2_to_int - 2, for all m1, m2 in months of purchase.

-   The parakeet was bought 1 month after the finch:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the parakeet and the finch, such that the parakeet's month of purchase is 1 more than the finch's month of purchase. So, the constraints will be of the form:
    m1 == Parakeet and m2 == Finch => m1_to_int == m2_to_int + 1, for all m1, m2 in months of purchase.

-   Alberta's pet was bought 1 month before Gladys's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for Alberta's pet and Gladys's pet, such that Alberta's pet's month of purchase is 1 less than Gladys's pet's month of purchase. So, the constraints will be of the form:
    m1 == Alberta and m2 == Gladys => m1_to_int == m2_to_int - 1, for all m1, m2 in months of purchase.

-   The finch was bought sometime after the lovebird:
    For this, we will need to add a constraint for each possible assignment of the birds bought, such that the finch's purchase is after the lovebird's purchase. So, the constraints will be of the form:
    b1 == Finch and b2 == Lovebird => b1_to_int > b2_to_int, for all b1, b2 in birds.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Alberta == 1, and January == 1, and Finch == 1, then Alberta's pet, a finch, was bought in January.

### Decision variables:
-   Names of the owners: Alberta, Della, Ellen, Gladys (all different, 1 to 4)
-   Months of purchase: January, February, March, April (all different, 1 to 4)
-   Types of birds: Finch, Lovebird, Macaw, Parakeet (all different, 1 to 4)

### Constraints:
-   Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw:
    This is a constraint that states that one of the birds bought in February and January is Gladys's, and the other is a macaw. So:
    Xor([Gladys == February, Gladys == January]).

-   The macaw was bought 2 months before Ellen's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the macaw and Ellen's pet, such that the macaw's month of purchase is 2 less than Ellen's pet's month of purchase. So, the constraints will be of the form:
    m1 == Macaw and m2 == Ellen => m1_to_int == m2_to_int - 2, for all m1, m2 in months of purchase.

-   The parakeet was bought 1 month after the finch:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for the parakeet and the finch, such that the parakeet's month of purchase is 1 more than the finch's month of purchase. So, the constraints will be of the form:
    m1 == Parakeet and m2 == Finch => m1_to_int == m2_to_int + 1, for all m1, m2 in months of purchase.

-   Alberta's pet was bought 1 month before Gladys's pet:
    For this, we will need to add a constraint for each possible assignment of the months of purchase for Alberta's pet and Gladys's pet, such that Alberta's pet's month of purchase is 1 less than Gladys's pet's month of purchase. So, the constraints will be of the form:
    m1 == Alberta and m2 == Gladys => m1_to_int == m2_to_int - 1, for all m1, m2 in months of purchase.

-   The finch was bought sometime after the lovebird:
    For this, we will need to add a constraint for each possible assignment of the birds bought, such that the finch's purchase is after the lovebird's purchase. So, the constraints will be of the form:
    b1 == Finch and b2 == Lovebird => b1_to_int > b2_to_int, for all b1, b2 in birds.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of owner, month, and bird)
# e.g. if alberta == 1 and january == 1 and finch == 1, then Alberta's pet, a finch, was bought in January
alberta, della, ellen, gladys = owners = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
finch, lovebird, macaw, parakeet = birds = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
owner_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
bird_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bought_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 bought before var2 by diff months.
    """
    return [((v1 == var1) & (v2 == var2)).implies(month_to_int[v1] == month_to_int[v2] - diff)
            for v1 in months for v2 in months]


def bought_after_than(var1, var2):
    """
    Formulate the constraint that var1 bought after var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(month_to_int[v1] > month_to_int[v2])
            for v1 in months for v2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(owners)
m += AllDifferent(months)
m += AllDifferent(birds)

# Clue 1: Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw:
m += Xor([gladys == february, gladys == january])

# Clue 2: The macaw was bought 2 months before Ellen's pet:
m += bought_before_than(macaw, ellen, 2)

# Clue 3: The parakeet was bought 1 month after the finch:
m += bought_before_than(parakeet, finch, -1)

# Clue 4: Alberta's pet was bought 1 month before Gladys's pet:
m += bought_before_than(alberta, gladys, 1)

# Clue 5: The finch was bought sometime after the lovebird:
m += bought_after_than(finch, lovebird)

```
True
True
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016.
Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017.
The project headed by Dr. Ewing will go online sometime before the Zynga Complex.
Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC.
The Zynga Complex is headed by Dr. Baldwin.

Entities:
names: Egert Facility, Falston LCS, Tevatron LHC, Zynga Complex
years: 2016, 2017, 2018, 2019
scientists: Dr. Baldwin, Dr. Ewing, Dr. Kirk, Dr. Quinn
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EgertFacility == 1, and 2016 == 1, and DrBaldwin == 1, then the Egert Facility is the project headed by Dr. Baldwin and is scheduled to go online in 2016.

### Decision variables:
-   Names of the projects/facilities: EgertFacility, FalstonLCS, TevatronLHC, ZyngaComplex (all different, 1 to 4)
-   Years of going online: 2016, 2017, 2018, 2019 (all different, 1 to 4)
-   Names of the scientists: DrBaldwin, DrEwing, DrKirk, DrQuinn (all different, 1 to 4)

### Constraints:
-   The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016:
    This is a constraint that states that the Tevatron LHC's year of going online is either 2019 or 2016, but not both. So:
    Xor([TevatronLHC == 2019, TevatronLHC == 2016]).

-   Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017:
    This is a constraint that states that one of the projects headed by Dr. Baldwin and Dr. Quinn is the Falston LCS and the other will go online in 2017. So:
    Xor([DrBaldwin == FalstonLCS and DrQuinn == 2017, DrBaldwin == 2017 and DrQuinn == FalstonLCS]).

-   The project headed by Dr. Ewing will go online sometime before the Zynga Complex:
    For this, we will need to add a constraint for each possible assignment of the years for the project headed by Dr. Ewing and the Zynga Complex, such that Dr. Ewing's project's year of going online is less than the Zynga Complex's year of going online. So, the constraints will be of the form:
    y1 == DrEwing and y2 == ZyngaComplex => y1_to_int < y2_to_int, for all y1, y2 in years.

-   Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC:
    This is a constraint that states that one of the projects headed by Dr. Ewing and the facility scheduled to go online in 2018 is the Egert Facility and the other is the Tevatron LHC. So:
    Xor([DrEwing == EgertFacility and 2018 == TevatronLHC, DrEwing == TevatronLHC and 2018 == EgertFacility]).

-   The Zynga Complex is headed by Dr. Baldwin:
    This is a direct assignment constraint:
    ZyngaComplex == DrBaldwin.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if EgertFacility == 1, and 2016 == 1, and DrBaldwin == 1, then the Egert Facility is the project headed by Dr. Baldwin and is scheduled to go online in 2016.

### Decision variables:
-   Names of the projects/facilities: EgertFacility, FalstonLCS, TevatronLHC, ZyngaComplex (all different, 1 to 4)
-   Years of going online: 2016, 2017, 2018, 2019 (all different, 1 to 4)
-   Names of the scientists: DrBaldwin, DrEwing, DrKirk, DrQuinn (all different, 1 to 4)

### Constraints:
-   The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016:
    This is a constraint that states that the Tevatron LHC's year of going online is either 2019 or 2016, but not both. So:
    Xor([TevatronLHC == 2019, TevatronLHC == 2016]).

-   Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017:
    This is a constraint that states that one of the projects headed by Dr. Baldwin and Dr. Quinn is the Falston LCS and the other will go online in 2017. So:
    Xor([DrBaldwin == FalstonLCS and DrQuinn == 2017, DrBaldwin == 2017 and DrQuinn == FalstonLCS]).

-   The project headed by Dr. Ewing will go online sometime before the Zynga Complex:
    For this, we will need to add a constraint for each possible assignment of the years for the project headed by Dr. Ewing and the Zynga Complex, such that Dr. Ewing's project's year of going online is less than the Zynga Complex's year of going online. So, the constraints will be of the form:
    y1 == DrEwing and y2 == ZyngaComplex => y1_to_int < y2_to_int, for all y1, y2 in years.

-   Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC:
    This is a constraint that states that one of the projects headed by Dr. Ewing and the facility scheduled to go online in 2018 is the Egert Facility and the other is the Tevatron LHC. So:
    Xor([DrEwing == EgertFacility and 2018 == TevatronLHC, DrEwing == TevatronLHC and 2018 == EgertFacility]).

-   The Zynga Complex is headed by Dr. Baldwin:
    This is a direct assignment constraint:
    ZyngaComplex == DrBaldwin.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of project/facility, year, and scientist)
# e.g. if egert == 1 and year2016 == 1 and baldwin == 1, then the Egert Facility is headed by Dr. Baldwin and scheduled to go online in 2016
egert, falston, tevatron, zynga = projects = intvar(1, 4, shape=4)
year2016, year2017, year2018, year2019 = years = intvar(1, 4, shape=4)
baldwin, ewing, kirk, quinn = scientists = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
project_to_int = None  # N/A
year_to_int = {year2016: 2016, year2017: 2017, year2018: 2018, year2019: 2019}  # in years
scientist_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def online_before_than(var1, var2):
    """
    Formulate the constraint that var1 goes online before var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(year_to_int[p1] < year_to_int[p2])
            for p1 in years for p2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(projects)
m += AllDifferent(years)
m += AllDifferent(scientists)

# Clue 1: The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016:
m += Xor([tevatron == year2019, tevatron == year2016])

# Clue 2: Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017:
m += Xor([baldwin == falston and quinn == year2017, baldwin == year2017 and quinn == falston])

# Clue 3: The project headed by Dr. Ewing will go online sometime before the Zynga Complex:
m += online_before_than(ewing, zynga)

# Clue 4: Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC:
m += Xor([ewing == egert and year2018 == tevatron, ewing == tevatron and year2018 == egert])

# Clue 5: The Zynga Complex is headed by Dr. Baldwin:
m += zynga == baldwin

```
True
True
True
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The 2004 holiday is either the skydiving holiday or the holiday with Yvonne.
Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004.
The vacation with Andy was after the trip with Yvonne.
The holiday with Bill was 1 year after the trip with Andy.
The cycling trip was before the hunting vacation.

Entities:
friends: Andy, Bill, Isabel, Yvonne
years: 2001, 2002, 2003, 2004
activities: cycling, hunting, kayaking, skydiving
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Andy == 1, and 2001 == 1, and cycling == 1, then Andy went on a cycling trip in 2001.

### Decision variables:
-   Names of the friends: Andy, Bill, Isabel, Yvonne (all different, 1 to 4)
-   Years of the holidays: 2001, 2002, 2003, 2004 (all different, 1 to 4)
-   Activities of the holidays: cycling, hunting, kayaking, skydiving (all different, 1 to 4)

### Constraints:
-   The 2004 holiday is either the skydiving holiday or the holiday with Yvonne:
    This is a constraint that states that the 2004 holiday is either the skydiving holiday or the holiday with Yvonne, but not both. So:
    Xor([2004 == skydiving, 2004 == Yvonne]).

-   Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004:
    This is a constraint that states that one of the kayaking holiday and the trip with Isabel was in 2001 and the other was in 2004. So:
    (kayaking == 2001 and Isabel == 2004) or (kayaking == 2004 and Isabel == 2001).

-   The vacation with Andy was after the trip with Yvonne:
    For this, we will need to add a constraint for each possible assignment of the years for Andy and Yvonne, such that Andy's holiday year is greater than Yvonne's holiday year. So, the constraints will be of the form:
    y1 == Andy and y2 == Yvonne => y1_to_int > y2_to_int, for all y1, y2 in years.

-   The holiday with Bill was 1 year after the trip with Andy:
    For this, we will need to add a constraint for each possible assignment of the years for Bill and Andy, such that Bill's holiday year is 1 more than Andy's holiday year. So, the constraints will be of the form:
    y1 == Bill and y2 == Andy => y1_to_int == y2_to_int + 1, for all y1, y2 in years.

-   The cycling trip was before the hunting vacation:
    This is a constraint that states that the cycling trip was before the hunting vacation, thus:
    cycling < hunting.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Andy == 1, and 2001 == 1, and cycling == 1, then Andy went on a cycling trip in 2001.

### Decision variables:
-   Names of the friends: Andy, Bill, Isabel, Yvonne (all different, 1 to 4)
-   Years of the holidays: 2001, 2002, 2003, 2004 (all different, 1 to 4)
-   Activities of the holidays: cycling, hunting, kayaking, skydiving (all different, 1 to 4)

### Constraints:
-   The 2004 holiday is either the skydiving holiday or the holiday with Yvonne:
    This is a constraint that states that the 2004 holiday is either the skydiving holiday or the holiday with Yvonne, but not both. So:
    Xor([2004 == skydiving, 2004 == Yvonne]).

-   Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004:
    This is a constraint that states that one of the kayaking holiday and the trip with Isabel was in 2001 and the other was in 2004. So:
    (kayaking == 2001 and Isabel == 2004) or (kayaking == 2004 and Isabel == 2001).

-   The vacation with Andy was after the trip with Yvonne:
    For this, we will need to add a constraint for each possible assignment of the years for Andy and Yvonne, such that Andy's holiday year is greater than Yvonne's holiday year. So, the constraints will be of the form:
    y1 == Andy and y2 == Yvonne => y1_to_int > y2_to_int, for all y1, y2 in years.

-   The holiday with Bill was 1 year after the trip with Andy:
    For this, we will need to add a constraint for each possible assignment of the years for Bill and Andy, such that Bill's holiday year is 1 more than Andy's holiday year. So, the constraints will be of the form:
    y1 == Bill and y2 == Andy => y1_to_int == y2_to_int + 1, for all y1, y2 in years.

-   The cycling trip was before the hunting vacation:
    This is a constraint that states that the cycling trip was before the hunting vacation, thus:
    cycling < hunting.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of friend, year, and activity)
# e.g. if andy == 1 and year2001 == 1 and cycling == 1, then Andy went on a cycling trip in 2001
andy, bill, isabel, yvonne = friends = intvar(1, 4, shape=4)
year2001, year2002, year2003, year2004 = years = intvar(1, 4, shape=4)
cycling, hunting, kayaking, skydiving = activities = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
friend_to_int = None  # N/A
year_to_int = {year2001: 2001, year2002: 2002, year2003: 2003, year2004: 2004}  # in years
activity_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def after_than(var1, var2):
    """
    Formulate the constraint that var1 is after var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(year_to_int[v1] > year_to_int[v2])
            for v1 in years for v2 in years]


def exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff years after var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(year_to_int[v1] == year_to_int[v2] + diff)
            for v1 in years for v2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(friends)
m += AllDifferent(years)
m += AllDifferent(activities)

# Clue 1: The 2004 holiday is either the skydiving holiday or the holiday with Yvonne:
m += Xor([year2004 == skydiving, year2004 == yvonne])

# Clue 2: Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004:
m += ((kayaking == year2001) & (isabel == year2004)) | ((kayaking == year2004) & (isabel == year2001))

# Clue 3: The vacation with Andy was after the trip with Yvonne:
m += after_than(andy, yvonne)

# Clue 4: The holiday with Bill was 1 year after the trip with Andy:
m += exactly_after_than(bill, andy, 1)

# Clue 5: The cycling trip was before the hunting vacation:
m += cycling < hunting

```
False
True
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Ginger was either the person who paid $160 or Vicki's client.
Beulah paid 10 dollars more than Yvonne's client.
Hannah paid less than Debra.
Vicki's client paid more than Debra.
Debra paid less than Pam's client.

Entities:
clients: Beulah, Debra, Ginger, Hannah
prices: $150, $160, $170, $180
masseuses: Lynda, Pam, Vicki, Yvonne
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Beulah == 1, and Price150 == 1, and Lynda == 1, then Beulah paid $150 to Lynda.

### Decision variables:
-   Names of the clients: Beulah, Debra, Ginger, Hannah (all different, 1 to 4)
-   Prices paid by the clients: Price150, Price160, Price170, Price180 (all different, 1 to 4)
-   Names of the masseuses: Lynda, Pam, Vicki, Yvonne (all different, 1 to 4)

### Constraints:
-   Ginger was either the person who paid $160 or Vicki's client:
    This is a constraint that states that Ginger's price is either $160 or the price of Vicki's client, but not both. So:
    Xor([Ginger == Price160, Ginger == Vicki]).

-   Beulah paid 10 dollars more than Yvonne's client:
    For this, we will need to add a constraint for each possible assignment of prices to Beulah and Yvonne's client, such that Beulah's price is 10 dollars greater than Yvonne's client's price. So, the constraints will be of the form:
    p1 == Beulah and p2 == Yvonne => p1_to_int == p2_to_int + 10, for all p1, p2 in prices.

-   Hannah paid less than Debra:
    For this, we will need to add a constraint for each possible assignment of prices to Hannah and Debra, such that Hannah's price is less than Debra's price. So, the constraints will be of the form:
    p1 == Hannah and p2 == Debra => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Vicki's client paid more than Debra:
    For this, we will need to add a constraint for each possible assignment of prices to Vicki's client and Debra, such that Vicki's client's price is greater than Debra's price. So, the constraints will be of the form:
    p1 == Vicki and p2 == Debra => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   Debra paid less than Pam's client:
    For this, we will need to add a constraint for each possible assignment of prices to Debra and Pam's client, such that Debra's price is less than Pam's client's price. So, the constraints will be of the form:
    p1 == Debra and p2 == Pam => p1_to_int < p2_to_int, for all p1, p2 in prices.
### Plan:
Each entity will be represented by a decision variable that will take a value from 1 to 4. All decision variables with the same value will correspond to the same triplet. For example, if Beulah == 1, and Price150 == 1, and Lynda == 1, then Beulah paid $150 to Lynda.

### Decision variables:
-   Names of the clients: Beulah, Debra, Ginger, Hannah (all different, 1 to 4)
-   Prices paid by the clients: Price150, Price160, Price170, Price180 (all different, 1 to 4)
-   Names of the masseuses: Lynda, Pam, Vicki, Yvonne (all different, 1 to 4)

### Constraints:
-   Ginger was either the person who paid $160 or Vicki's client:
    This is a constraint that states that Ginger's price is either $160 or the price of Vicki's client, but not both. So:
    Xor([Ginger == Price160, Ginger == Vicki]).

-   Beulah paid 10 dollars more than Yvonne's client:
    For this, we will need to add a constraint for each possible assignment of prices to Beulah and Yvonne's client, such that Beulah's price is 10 dollars greater than Yvonne's client's price. So, the constraints will be of the form:
    p1 == Beulah and p2 == Yvonne => p1_to_int == p2_to_int + 10, for all p1, p2 in prices.

-   Hannah paid less than Debra:
    For this, we will need to add a constraint for each possible assignment of prices to Hannah and Debra, such that Hannah's price is less than Debra's price. So, the constraints will be of the form:
    p1 == Hannah and p2 == Debra => p1_to_int < p2_to_int, for all p1, p2 in prices.

-   Vicki's client paid more than Debra:
    For this, we will need to add a constraint for each possible assignment of prices to Vicki's client and Debra, such that Vicki's client's price is greater than Debra's price. So, the constraints will be of the form:
    p1 == Vicki and p2 == Debra => p1_to_int > p2_to_int, for all p1, p2 in prices.

-   Debra paid less than Pam's client:
    For this, we will need to add a constraint for each possible assignment of prices to Debra and Pam's client, such that Debra's price is less than Pam's client's price. So, the constraints will be of the form:
    p1 == Debra and p2 == Pam => p1_to_int < p2_to_int, for all p1, p2 in prices.
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of client, price, and masseuse)
# e.g. if beulah == 1 and price150 == 1 and lynda == 1, then Beulah paid $150 to Lynda
beulah, debra, ginger, hannah = clients = intvar(1, 4, shape=4)
price150, price160, price170, price180 = prices = intvar(1, 4, shape=4)
lynda, pam, vicki, yvonne = masseuses = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
client_to_int = None  # N/A
price_to_int = {price150: 150, price160: 160, price170: 170, price180: 180}  # in dollars
masseuse_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(clients)
m += AllDifferent(prices)
m += AllDifferent(masseuses)

# Clue 1: Ginger was either the person who paid $160 or Vicki's client:
m += Xor([ginger == price160, ginger == vicki])

# Clue 2: Beulah paid 10 dollars more than Yvonne's client:
m += paid_exactly_more_than(beulah, yvonne, 10)

# Clue 3: Hannah paid less than Debra:
m += paid_more_than(debra, hannah)

# Clue 4: Vicki's client paid more than Debra:
m += paid_more_than(vicki, debra)

# Clue 5: Debra paid less than Pam's client:
m += paid_more_than(pam, debra)

```
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

