Solution accuracy: 77.0%
Inverse Solution accuracy: 78.0%
Constraint accuracy: 93.65918097754293%
Model accuracy: 77.0%

Wrong solutions: 21, total: 100
Wrong inverse solutions: 22, total: 100
Wrong constraints: 41, total: 757
Wrong models: 23, total: 100
Errors: solution-level: 2, inverse solution-level: 0, constraint-level: 7, model-level: 0
---------------------------------------------------------------------------------------------

Clues:
The person who had the port paid 1 dollar more than Kurt.
Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the shiraz.
Of the person who paid $27 and Priscilla, one had the chianti and the other had the port.
Isabel paid $25.

Entities:
wines: chianti, port, riesling, shiraz
prices: $24, $25, $26, $27
names: Isabel, Kurt, Priscilla, Robin
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of wine, price, and name)
# e.g. if chianti == 1 and price24 == 1 and kurt == 1, then Kurt paid $24 for chianti
chianti, port, riesling, shiraz = wines = intvar(1, 4, shape=4)
price24, price25, price26, price27 = prices = intvar(1, 4, shape=4)
isabel, kurt, priscilla, robin = names = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
wine_to_int = None  # N/A
price_to_int = {price24: 24, price25: 25, price26: 26, price27: 27}  # in dollars
name_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(wines)
m += AllDifferent(prices)
m += AllDifferent(names)

# Clue 1: The person who had the port paid 1 dollar more than Kurt:
m += paid_exactly_more_than(port, kurt, 1)

# Clue 2: Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the shiraz:
m += Xor([
    (price25 == priscilla) & (price24 == shiraz),
    (price25 == shiraz) & (price24 == priscilla)
])

# Clue 3: Of the person who paid $27 and Priscilla, one had the chianti and the other had the port:
m += Xor([
    (price27 == priscilla) & (chianti == port),
    (price27 == port) & (chianti == priscilla)
])

# Clue 4: Isabel paid $25:
m += isabel == price25

```

[['riesling', 'price26', 'kurt'], ['port', 'price27', 'robin'], ['chianti', 'price24', 'priscilla'], ['shiraz', 'price25', 'isabel']]
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Celia used the gluten-free diet.
The friend who lost 3 pounds used the low-fat diet.
Mandy lost 2 fewer pounds than Raymond.
Mandy lost 4 more pounds than Tom.
The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds.

Entities:
pounds lost: 3, 5, 7, 9
diets: dairy-free, gluten-free, low-fat, vegan
names: Celia, Mandy, Raymond, Tom
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of pounds lost, diet, and name)
# e.g. if celia == 1 and gluten_free == 1 and pounds3 == 1, then Celia lost 3 pounds using the gluten-free diet
celia, mandy, raymond, tom = names = intvar(1, 4, shape=4)
dairy_free, gluten_free, low_fat, vegan = diets = intvar(1, 4, shape=4)
pounds3, pounds5, pounds7, pounds9 = pounds_lost = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
diet_to_int = None  # N/A
pounds_to_int = {pounds3: 3, pounds5: 5, pounds7: 7, pounds9: 9}  # in pounds


# Helper functions (for formulating comparison constraints)
def lost_exactly_more_pounds_than(var1, var2, diff):
    """
    Formulate the constraint that var1 lost exactly diff pounds more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pounds_to_int[p1] == pounds_to_int[p2] + diff)
            for p1 in pounds_lost for p2 in pounds_lost]


def lost_exactly_fewer_pounds_than(var1, var2, diff):
    """
    Formulate the constraint that var1 lost exactly diff pounds fewer than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pounds_to_int[p1] == pounds_to_int[p2] - diff)
            for p1 in pounds_lost for p2 in pounds_lost]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(diets)
m += AllDifferent(pounds_lost)

# Clue 1: Celia used the gluten-free diet:
m += celia == gluten_free

# Clue 2: The friend who lost 3 pounds used the low-fat diet:
m += pounds3 == low_fat

# Clue 3: Mandy lost 2 fewer pounds than Raymond:
m += lost_exactly_fewer_pounds_than(mandy, raymond, 2)

# Clue 4: Mandy lost 4 more pounds than Tom:
m += lost_exactly_more_pounds_than(mandy, tom, 4)

# Clue 5: The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds:
m += Xor([
    vegan == mandy,
    vegan == pounds3
])

```

[['mandy', 'vegan', 'pounds7'], ['celia', 'gluten_free', 'pounds5'], ['raymond', 'dairy_free', 'pounds9'], ['tom', 'low_fat', 'pounds3']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The four people were Shari, the performer who went fourth, the person who used batons and the performer who went third.
Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda.
The juggler who used bowling pins was either Yolanda or the juggler who went second.
Trevor performed 2 spots before the performer who used chainsaws.

Entities:
orders: first, second, third, fourth
names: Melissa, Shari, Trevor, Yolanda
items: batons, bowling pins, chainsaws, rings
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of order, name, and item)
# e.g. if shari == 1 and fourth == 1 and batons == 1, then Shari went fourth and used batons
shari, melissa, trevor, yolanda = names = intvar(1, 4, shape=4)
first, second, third, fourth = orders = intvar(1, 4, shape=4)
batons, bowling_pins, chainsaws, rings = items = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
order_to_int = {first: 1, second: 2, third: 3, fourth: 4}  # in order
item_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def performed_exactly_before(var1, var2, diff):
    """
    Formulate the constraint that var1 performed exactly diff spots before var2.
    """
    return [((o1 == var1) & (o2 == var2)).implies(order_to_int[o1] == order_to_int[o2] - diff)
            for o1 in orders for o2 in orders]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(orders)
m += AllDifferent(items)

# Clue 1: The four people were Shari, the performer who went fourth, the person who used batons and the performer who went third:
m += AllDifferent([shari, fourth, batons, third])

# Clue 2: Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda:
m += Xor([
    (bowling_pins == melissa) & (fourth == yolanda),
    (bowling_pins == yolanda) & (fourth == melissa)
])

# Clue 3: The juggler who used bowling pins was either Yolanda or the juggler who went second:
m += Xor([
    bowling_pins == yolanda,
    bowling_pins == second
])

# Clue 4: Trevor performed 2 spots before the performer who used chainsaws:
m += performed_exactly_before(trevor, chainsaws, 2)

```

[['shari', 'first', 'rings'], ['melissa', 'fourth', 'chainsaws'], ['yolanda', 'third', 'bowling_pins'], ['trevor', 'second', 'batons']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The woman with 2 losses has 3 more wins than the boxer with 8 losses.
Edna Easton has 6 more wins than Irma.
Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses.
The boxer with 12 losses is either the fighter with 33 wins or Jane.

Entities:
wins: 24, 27, 30, 33
boxers: Edna Easton, Irma, Jane, Sonia
losses: 2, 4, 8, 12
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of boxer, wins, and losses)
# e.g. if edna == 1 and wins33 == 1 and losses12 == 1, then Edna Easton has 33 wins and 12 losses
edna, irma, jane, sonia = boxers = intvar(1, 4, shape=4)
wins24, wins27, wins30, wins33 = wins = intvar(1, 4, shape=4)
losses2, losses4, losses8, losses12 = losses = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
boxer_to_int = None  # N/A
wins_to_int = {wins24: 24, wins27: 27, wins30: 30, wins33: 33}  # in wins
losses_to_int = {losses2: 2, losses4: 4, losses8: 8, losses12: 12}  # in losses


# Helper functions (for formulating comparison constraints)
def has_exactly_more_wins_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff more wins than var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(wins_to_int[w1] == wins_to_int[w2] + diff)
            for w1 in wins for w2 in wins]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(boxers)
m += AllDifferent(wins)
m += AllDifferent(losses)

# Clue 1: The woman with 2 losses has 3 more wins than the boxer with 8 losses:
m += has_exactly_more_wins_than(losses2, losses8, 3)

# Clue 2: Edna Easton has 6 more wins than Irma:
m += has_exactly_more_wins_than(edna, irma, 6)

# Clue 3: Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses:
m += Xor([
    (wins33 == sonia) & (wins27 == losses12),
    (wins33 == losses12) & (wins27 == sonia)
])

# Clue 4: The boxer with 12 losses is either the fighter with 33 wins or Jane:
m += Xor([
    losses12 == wins33,
    losses12 == jane
])

```

[['edna', 'wins30', 'losses8'], ['sonia', 'wins33', 'losses2'], ['irma', 'wins24', 'losses4'], ['jane', 'wins27', 'losses12']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The person who will publish in January is either the person who has been studying the Cheer culture or Ira.
The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture.
Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette.
Vera will publish 1 month before Luther.

Entities:
months: January, February, March, April
names: Ira, Luther, Vera, Yvette
cultures: Cheer, Garyk, Haleyito, Xozix
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, name, and culture)
# e.g. if january == 1 and ira == 1 and cheer == 1, then Ira will publish in January studying the Cheer culture
january, february, march, april = months = intvar(1, 4, shape=4)
ira, luther, vera, yvette = names = intvar(1, 4, shape=4)
cheer, garyk, haleyito, xozix = cultures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
name_to_int = None  # N/A
culture_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def published_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 published exactly diff months before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] - diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(months)
m += AllDifferent(names)
m += AllDifferent(cultures)

# Clue 1: The person who will publish in January is either the person who has been studying the Cheer culture or Ira:
m += Xor([
    january == cheer,
    january == ira
])

# Clue 2: The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture:
m += published_exactly_before_than(xozix, haleyito, 1)

# Clue 3: Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette:
m += Xor([
    (march == luther) & (xozix == yvette),
    (march == yvette) & (xozix == luther)
])

# Clue 4: Vera will publish 1 month before Luther:
m += published_exactly_before_than(vera, luther, 1)

```

[['january', 'vera', 'cheer'], ['march', 'yvette', 'haleyito'], ['february', 'luther', 'xozix'], ['april', 'ira', 'garyk']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Francis will depart from Manson.
The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg.
Ira will leave 1 day before the conductor departing from Manson.
The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio.

Entities:
days: June 10, June 11, June 12, June 13
names: Francis, Greg, Ira, Oscar
departures: Buttonwillow, Coulterville, Indio, Manson
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of day, name, and departure)
# e.g. if june12 == 1 and francis == 1 and buttonwillow == 1, then Francis will depart from Buttonwillow on June 12
june10, june11, june12, june13 = days = intvar(1, 4, shape=4)
francis, greg, ira, oscar = names = intvar(1, 4, shape=4)
buttonwillow, coulterville, indio, manson = departures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
day_to_int = {june10: 10, june11: 11, june12: 12, june13: 13}  # in days
name_to_int = None  # N/A
departure_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def leaves_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves diff days before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] == day_to_int[d2] - diff)
            for d1 in days for d2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(days)
m += AllDifferent(names)
m += AllDifferent(departures)

# Clue 1: Francis will depart from Manson:
m += francis == manson

# Clue 2: The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg:
m += Xor([
    june12 == buttonwillow,
    june12 == greg
])

# Clue 3: Ira will leave 1 day before the conductor departing from Manson:
m += leaves_exactly_before_than(ira, manson, 1)

# Clue 4: The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio:
m += leaves_exactly_before_than(buttonwillow, indio, 1)

```

[['june12', 'oscar', 'buttonwillow'], ['june13', 'greg', 'indio'], ['june11', 'francis', 'manson'], ['june10', 'ira', 'coulterville']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Vicky Estes used the catamaran.
Debra Decker took 4 fewer days to finish than the sailor in the trimaran.
Wendell Orr finished in 278 days.
The competitor in the schooner took 4 more days to finish than Vicky Estes.

Entities:
days: 270, 274, 278, 282
boat types: catamaran, ketch, schooner, trimaran
sailors: Debra Decker, Gil Baxter, Vicky Estes, Wendell Orr
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of sailor, day, and boat type)
# e.g. if vicky == 1 and days278 == 1 and catamaran == 1, then Vicky Estes used the catamaran and finished in 278 days
vicky, debra, gil, wendell = sailors = intvar(1, 4, shape=4)
days270, days274, days278, days282 = days = intvar(1, 4, shape=4)
catamaran, ketch, schooner, trimaran = boat_types = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
sailor_to_int = None  # N/A
day_to_int = {days270: 270, days274: 274, days278: 278, days282: 282}  # in days
boat_type_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def finished_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 finished exactly diff days more than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] == day_to_int[d2] + diff)
            for d1 in days for d2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(sailors)
m += AllDifferent(days)
m += AllDifferent(boat_types)

# Clue 1: Vicky Estes used the catamaran:
m += vicky == catamaran

# Clue 2: Debra Decker took 4 fewer days to finish than the sailor in the trimaran:
m += finished_exactly_more_than(debra, trimaran, -4)

# Clue 3: Wendell Orr finished in 278 days:
m += wendell == days278

# Clue 4: The competitor in the schooner took 4 more days to finish than Vicky Estes:
m += finished_exactly_more_than(schooner, vicky, 4)


```

[['vicky', 'days270', 'catamaran'], ['wendell', 'days278', 'trimaran'], ['debra', 'days274', 'schooner'], ['gil', 'days282', 'ketch']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Jorge is either the skydiver who wears the red suit or the jumper who started in 1982.
The skydiver who wears the pink suit started skydiving 1 year before Otis.
The jumper who wears the yellow suit started skydiving sometime after Philip.
The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit.
The jumper who wears the pink suit started skydiving 2 years before Shaun.

Entities:
names: Jorge, Otis, Philip, Shaun
years: 1982, 1983, 1984, 1985
suit colors: lime green, pink, red, yellow
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, year, and suit color)
# e.g. if jorge == 1 and year1982 == 1 and red == 1, then Jorge wears a red suit and started in 1982
jorge, otis, philip, shaun = names = intvar(1, 4, shape=4)
year1982, year1983, year1984, year1985 = years = intvar(1, 4, shape=4)
lime_green, pink, red, yellow = suit_colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
year_to_int = {year1982: 1982, year1983: 1983, year1984: 1984, year1985: 1985}  # in years
suit_color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2):
    """
    Formulate the constraint that var1 started skydiving after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


def started_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started skydiving exactly diff years before var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y2] == year_to_int[y1] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(years)
m += AllDifferent(suit_colors)

# Clue 1: Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
m += Xor([
    jorge == red,
    jorge == year1982
])

# Clue 2: The skydiver who wears the pink suit started skydiving 1 year before Otis:
m += started_exactly_before_than(pink, otis, 1)

# Clue 3: The jumper who wears the yellow suit started skydiving sometime after Philip:
m += started_after_than(yellow, philip)

# Clue 4: The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
m += started_after_than(lime_green, yellow)

# Clue 5: The jumper who wears the pink suit started skydiving 2 years before Shaun:
m += started_exactly_before_than(pink, shaun, 2)


```

[['jorge', 'year1985', 'red'], ['shaun', 'year1984', 'lime_green'], ['philip', 'year1982', 'pink'], ['otis', 'year1983', 'yellow']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The ambassador with the 9 day visit will leave sometime after Fitzgerald.
Quinn will leave 2 months after Bender.
The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald.
Quinn will leave 1 month before the ambassador with the 7 day visit.

Entities:
diplomats: Bender, Fitzgerald, Owens, Quinn
months: January, February, March, April
durations: 2 day, 3 day, 7 day, 9 day
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diplomat, month, and duration)
# e.g. if bender == 1 and january == 1 and days2 == 1, then Bender will leave in January and for 2 days
bender, fitzgerald, owens, quinn = diplomats = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
days2, days3, days7, days9 = durations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diplomat_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
duration_to_int = {days2: 2, days3: 3, days7: 7, days9: 9}  # in days


# Helper functions (for formulating comparison constraints)
def leaves_after_than(var1, var2):
    """
    Formulate the constraint that var1 leaves after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def leaves_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diplomats)
m += AllDifferent(months)
m += AllDifferent(durations)

# Clue 1: The ambassador with the 9 day visit will leave sometime after Fitzgerald:
m += leaves_after_than(days9, fitzgerald)

# Clue 2: Quinn will leave 2 months after Bender:
m += leaves_exactly_after_than(quinn, bender, 2)

# Clue 3: The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald:
m += Xor([
    january == days3,
    january == fitzgerald
])

# Clue 4: Quinn will leave 1 month before the ambassador with the 7 day visit:
m += leaves_exactly_after_than(days7, quinn, -1)

```

[['bender', 'february', 'days9'], ['quinn', 'april', 'days3'], ['fitzgerald', 'january', 'days2'], ['owens', 'march', 'days7']]
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Ultra Hex is Gabe Grant.
Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009.
Peter Powers began sometime before Matt Minkle.
Gabe Grant began 1 year after Wonderman.
The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009 and Matt Minkle.

Entities:
years: 2007, 2008, 2009, 2010
superheroes: Criminal Bane, Deep Shadow, Ultra Hex, Wonderman
names: Gabe Grant, Ivor Ingram, Matt Minkle, Peter Powers
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of superhero, year, and name)
# e.g. if criminal_bane == 1 and year2007 == 1 and deep_shadow == 1, then Criminal Bane started in 2007 and is Deep Shadow
criminal_bane, deep_shadow, ultra_hex, wonderman = superheroes = intvar(1, 4, shape=4)
year2007, year2008, year2009, year2010 = years = intvar(1, 4, shape=4)
gabe, ivor, matt, peter = names = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
superhero_to_int = None  # N/A
year_to_int = {year2007: 2007, year2008: 2008, year2009: 2009, year2010: 2010}  # in years
name_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2):
    """
    Formulate the constraint that var1 started after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


def started_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started exactly diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(superheroes)
m += AllDifferent(years)
m += AllDifferent(names)

# Clue 1: Ultra Hex is Gabe Grant:
m += ultra_hex == gabe

# Clue 2: Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009:
m += Xor([
    criminal_bane == year2007,
    criminal_bane == year2009
])

# Clue 3: Peter Powers began sometime before Matt Minkle:
m += started_after_than(peter, matt)

# Clue 4: Gabe Grant began 1 year after Wonderman:
m += started_exactly_after_than(gabe, wonderman, 1)

# Clue 5: The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009 and Matt Minkle:
m += AllDifferent([deep_shadow, year2007, year2009, matt])


```

[['criminal_bane', 'year2007', 'ivor'], ['ultra_hex', 'year2009', 'gabe'], ['deep_shadow', 'year2010', 'peter'], ['wonderman', 'year2008', 'matt']]
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Sancode interview is 1 day after the meeting for the copywriter position.
The Laneplex interview is on August 20th.
The meeting for the copywriter position is 2 days before the meeting for the web developer position.
The Haytouch interview is for the sales rep job.

Entities:
days: August 20th, August 21st, August 22nd, August 23rd
companies: Canway, Haytouch, Laneplex, Sancode
positions: copywriter, janitor, sales rep, web developer
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of day, company, and position)
# e.g. if aug20 == 1 and sancode == 1 and copywriter == 1, then the Sancode interview is on August 20th for the copywriter position
aug20, aug21, aug22, aug23 = days = intvar(1, 4, shape=4)
canway, haytouch, laneplex, sancode = companies = intvar(1, 4, shape=4)
copywriter, janitor, sales_rep, web_developer = positions = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
day_to_int = {aug20: 20, aug21: 21, aug22: 22, aug23: 23}  # in days
company_to_int = None  # N/A
position_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def interview_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 interview is exactly diff days after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] == day_to_int[d2] + diff)
            for d1 in days for d2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(days)
m += AllDifferent(companies)
m += AllDifferent(positions)

# Clue 1: The Sancode interview is 1 day after the meeting for the copywriter position:
m += interview_exactly_after_than(sancode, copywriter, 1)

# Clue 2: The Laneplex interview is on August 20th:
m += laneplex == aug20

# Clue 3: The meeting for the copywriter position is 2 days before the meeting for the web developer position:
m += interview_exactly_after_than(web_developer, copywriter, -2)

# Clue 4: The Haytouch interview is for the sales rep job:
m += haytouch == sales_rep

```

[['aug21', 'haytouch', 'sales_rep'], ['aug23', 'sancode', 'janitor'], ['aug20', 'laneplex', 'web_developer'], ['aug22', 'canway', 'copywriter']]
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The Quince Street project will be headed by Freda Fisher.
Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram.
Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher.
The Aspen Court project starts in May.
The Aspen Court project begins sometime after Dawn Daniels's project.

Entities:
months: April, May, June, July
streets: Aspen Court, Norway Court, Oak Road, Quince Street
managers: Bill Bonner, Dawn Daniels, Freda Fisher, Irma Ingram
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, street, and manager)
# e.g. if apsen_court == 1 and may == 1 and bill_bonner == 1, then Aspen Court project starts in May and is headed by Bill Bonner
aspen_court, norway_court, oak_road, quince_street = streets = intvar(1, 4, shape=4)
april, may, june, july = months = intvar(1, 4, shape=4)
bill_bonner, dawn_daniels, freda_fisher, irma_ingram = managers = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
street_to_int = None  # N/A
month_to_int = {april: 4, may: 5, june: 6, july: 7}  # in months
manager_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_after_than(var1, var2):
    """
    Formulate the constraint that var1 starts after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(streets)
m += AllDifferent(months)
m += AllDifferent(managers)

# Clue 1: The Quince Street project will be headed by Freda Fisher:
m += quince_street == freda_fisher

# Clue 2: Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram:
m += Xor([
    (may == dawn_daniels) & (oak_road == irma_ingram),
    (may == irma_ingram) & (oak_road == dawn_daniels)
])

# Clue 3: Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher:
m += Xor([
    (july == oak_road) & (april == freda_fisher),
    (july == freda_fisher) & (april == oak_road)
])

# Clue 4: The Aspen Court project starts in May:
m += aspen_court == may

# Clue 5: The Aspen Court project begins sometime after Dawn Daniels's project:
m += starts_after_than(aspen_court, dawn_daniels)


```

[['quince_street', 'july', 'freda_fisher'], ['oak_road', 'april', 'dawn_daniels'], ['norway_court', 'june', 'bill_bonner'], ['aspen_court', 'may', 'irma_ingram']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January.
Sophie will leave sometime before Gwen.
The passenger with the lucky hat, Gwen and Sophie are all different fliers.
Florence will leave 2 months after the passenger with the lucky hat.
The passenger leaving in April is either Gwen or the passenger with the talisman.

Entities:
months: January, February, March, April
fliers: Florence, Gwen, Olive, Sophie
lucky charms: coin, lucky hat, rabbit's foot, talisman
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of flier, month, and lucky charm)
# e.g. if florence == 1 and january == 1 and lucky_hat == 1, then Florence will leave in January with the lucky hat
florence, gwen, olive, sophie = fliers = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
coin, lucky_hat, rabbits_foot, talisman = lucky_charms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
flier_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
lucky_charm_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def leaves_before_than(var1, var2):
    """
    Formulate the constraint that var1 leaves before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] < month_to_int[m2])
            for m1 in months for m2 in months]


def leaves_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(fliers)
m += AllDifferent(months)
m += AllDifferent(lucky_charms)

# Clue 1: Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January:
m += Xor([
    (sophie == rabbits_foot) & (gwen == january),
    (sophie == january) & (gwen == rabbits_foot)
])

# Clue 2: Sophie will leave sometime before Gwen:
m += leaves_before_than(sophie, gwen)

# Clue 3: The passenger with the lucky hat, Gwen and Sophie are all different fliers:
m += AllDifferent([lucky_hat, gwen, sophie])

# Clue 4: Florence will leave 2 months after the passenger with the lucky hat:
m += leaves_exactly_after_than(florence, lucky_hat, 2)

# Clue 5: The passenger leaving in April is either Gwen or the passenger with the talisman:
m += Xor([
    april == gwen,
    april == talisman
])

```

[['florence', 'april', 'talisman'], ['gwen', 'march', 'rabbits_foot'], ['sophie', 'january', 'coin'], ['olive', 'february', 'lucky_hat']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Iunsel launched in February.
The Munei is going to Mars.
The Munei launched 1 month after the mission going to Pluto.
Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano.

Entities:
months: January, February, March, April
probes: Ateyin, Chano, Iunsel, Munei
destinations: Ganymede, Mars, Pluto, Uranus
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, probe, and destination)
# e.g. if iunsel == 1 and february == 1 and mars == 1, then Iunsel launched in February and is going to Mars
iunsel, chano, munei, ateyin = probes = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
ganymede, mars, pluto, uranus = destinations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
probe_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
destination_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def launched_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 launched exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(probes)
m += AllDifferent(months)
m += AllDifferent(destinations)

# Clue 1: The Iunsel launched in February:
m += iunsel == february

# Clue 2: The Munei is going to Mars:
m += munei == mars

# Clue 3: The Munei launched 1 month after the mission going to Pluto:
m += launched_exactly_after_than(munei, pluto, 1)

# Clue 4: Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano:
m += Xor([
    (ganymede == march) & (pluto == chano),
    (ganymede == chano) & (pluto == march)
])


```

[['iunsel', 'february', 'uranus'], ['munei', 'april', 'mars'], ['chano', 'january', 'ganymede'], ['ateyin', 'march', 'pluto']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The blue topaz sold for 10 dollars more than the gem found in the Osborne claim.
The rhodolite went for $820.
The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim.
Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800.

Entities:
prices: $790, $800, $810, $820
gems: aquamarine, blue topaz, rhodolite, tourmaline
claims: Collins, Knox, Osborne, Underwood
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of gem, price, and claim)
# e.g. if blue_topaz == 1 and price820 == 1 and osborne == 1, then Blue Topaz is in the Osborne claim and sold for $820
blue_topaz, rhodolite, tourmaline, aquamarine = gems = intvar(1, 4, shape=4)
price790, price800, price810, price820 = prices = intvar(1, 4, shape=4)
collins, knox, osborne, underwood = claims = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
gem_to_int = None  # N/A
price_to_int = {price790: 790, price800: 800, price810: 810, price820: 820}  # in dollars
claim_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def sold_for_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 sold for exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(gems)
m += AllDifferent(prices)
m += AllDifferent(claims)

# Clue 1: The blue topaz sold for 10 dollars more than the gem found in the Osborne claim:
m += sold_for_exactly_more_than(blue_topaz, osborne, 10)

# Clue 2: The rhodolite went for $820:
m += rhodolite == price820

# Clue 3: The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim:
m += Xor([
    tourmaline == price810,
    tourmaline == underwood
])

# Clue 4: Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800:
m += Xor([
    (collins == aquamarine) & (price790 == price800),
    (collins == price790) & (aquamarine == price800)
])


```

None
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The facility launching in March is the tokamak reactor.
The reactor launching in April is either the direct drive facility or the z-pinch facility.
Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10.
The Essita CBT will launch in February.
The Haramarui LV will launch 1 month before the fusor reactor.

Entities:
months: January, February, March, April
names: Essita CBT, Haramarui LV, Kuchiwa W10, Rodim-Rexit
types: direct drive, fusor, tokamak, z-pinch
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, name, and type)
# e.g. if essita == 1 and january == 1 and direct_drive == 1, then Essita CBT will launch in January and is a direct drive facility
january, february, march, april = months = intvar(1, 4, shape=4)
essita, haramarui, kuchiwa, rodim = names = intvar(1, 4, shape=4)
direct_drive, fusor, tokamak, z_pinch = types = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
name_to_int = None  # N/A
type_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def launched_after(var1, var2):
    """
    Formulate the constraint that var1 launched after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def launched_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 launched exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(months)
m += AllDifferent(names)
m += AllDifferent(types)

# Clue 1: The facility launching in March is the tokamak reactor:
m += tokamak == march

# Clue 2: The reactor launching in April is either the direct drive facility or the z-pinch facility:
m += Xor([
    direct_drive == april,
    z_pinch == april
])

# Clue 3: Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10:
m += Xor([
    fusor == february,
    z_pinch == february,
    kuchiwa == february
])

# Clue 4: The Essita CBT will launch in February:
m += essita == february

# Clue 5: The Haramarui LV will launch 1 month before the fusor reactor:
m += launched_exactly_after_than(haramarui, fusor, -1)


```

[['january', 'haramarui', 'z_pinch'], ['april', 'rodim', 'direct_drive'], ['march', 'kuchiwa', 'tokamak'], ['february', 'essita', 'fusor']]
False
True
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan.
Herbert's assignment will involve 25 fewer people than Susan's assignment.
Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday.
Herbert's event is either the event with 50 attendees or the graduation job.

Entities:
people: 50, 75, 100, 125
planners: Herbert, Joel, Susan, Teresa
events: anniversary, birthday, graduation, wedding
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of person, planner, and event)
# e.g. if herbert == 1 and person50 == 1 and anniversary == 1, then Herbert's event is the anniversary with 50 attendees
herbert, joel, susan, teresa = planners = intvar(1, 4, shape=4)
person50, person75, person100, person125 = people = intvar(1, 4, shape=4)
anniversary, birthday, graduation, wedding = events = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
person_to_int = {person50: 50, person75: 75, person100: 100, person125: 125}  # in number of attendees
planner_to_int = None  # N/A
event_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def involves_exactly_fewer_than(var1, var2, diff):
    """
    Formulate the constraint that var1 involves exactly diff fewer people than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(person_to_int[p1] == person_to_int[p2] - diff)
            for p1 in people for p2 in people]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(planners)
m += AllDifferent(people)
m += AllDifferent(events)

# Clue 1: Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan:
m += Xor([
    (anniversary == joel) & (person100 == susan),
    (anniversary == susan) & (person100 == joel)
])

# Clue 2: Herbert's assignment will involve 25 fewer people than Susan's assignment:
m += involves_exactly_fewer_than(herbert, susan, 25)

# Clue 3: Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday:
m += Xor([
    (person75 == susan) & (person100 == birthday),
    (person75 == birthday) & (person100 == susan)
])

# Clue 4: Herbert's event is either the event with 50 attendees or the graduation job:
m += Xor([
    herbert == person50,
    herbert == graduation
])


```

[['herbert', 'person50', 'wedding'], ['joel', 'person100', 'birthday'], ['susan', 'person75', 'anniversary'], ['teresa', 'person125', 'graduation']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
D. forcilitis has 500 genes.
B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes.
The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen.
Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus.

Entities:
genes: 250, 500, 750, 1000
bacteria: B. mangeris, D. forcilitis, E. carolinus, P. wellington
doctors: Jordan, Nielsen, Ortiz, Trujillo
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of bacteria, genes, and doctor)
# e.g. if b_mangeris == 1 and genes500 == 1 and ortiz == 1, then B. mangeris has 500 genes and was sequenced by Dr. Ortiz
b_mangeris, d_forcilitis, e_carolinus, p_wellington = bacteria = intvar(1, 4, shape=4)
genes250, genes500, genes750, genes1000 = genes = intvar(1, 4, shape=4)
jordan, nielsen, ortiz, trujillo = doctors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
bacteria_to_int = None  # N/A
genes_to_int = {genes250: 250, genes500: 500, genes750: 750, genes1000: 1000}  # in genes
doctor_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def has_exactly_more_genes_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff more genes than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(genes_to_int[g1] == genes_to_int[g2] + diff)
            for g1 in genes for g2 in genes]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(bacteria)
m += AllDifferent(genes)
m += AllDifferent(doctors)

# Clue 1: D. forcilitis has 500 genes:
m += d_forcilitis == genes500

# Clue 2: B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes:
m += Xor([
    b_mangeris == ortiz,
    b_mangeris == genes750
])

# Clue 3: The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen:
m += has_exactly_more_genes_than(trujillo, nielsen, 500)

# Clue 4: Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus:
m += Xor([
    (jordan == genes1000) & (trujillo == e_carolinus),
    (jordan == e_carolinus) & (trujillo == genes1000)
])


```

[['e_carolinus', 'genes750', 'jordan'], ['p_wellington', 'genes1000', 'trujillo'], ['d_forcilitis', 'genes500', 'nielsen'], ['b_mangeris', 'genes250', 'ortiz']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The mountain that is 210 feet tall was climbed by Leonard Lara.
Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall.
Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall.
Mt. York was climbed by Kermit Kramer.

Entities:
heights: 210, 340, 470, 600
mountains: Mt. Brewer, Mt. Gillespie, Mt. Quinn, Mt. York
climbers: Ben Beasley, Eddie English, Kermit Kramer, Leonard Lara
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of mountain, height, and climber)
# e.g. if mt_brewer == 1 and height210 == 1 and leonard_lara == 1, then Mt. Brewer is 210 ft tall and climbed by Leonard Lara
mt_brewer, mt_gillespie, mt_quinn, mt_york = mountains = intvar(1, 4, shape=4)
height210, height340, height470, height600 = heights = intvar(1, 4, shape=4)
ben_beasley, eddie_english, kermit_kramer, leonard_lara = climbers = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
mountain_to_int = None  # N/A
height_to_int = {height210: 210, height340: 340, height470: 470, height600: 600}  # in feet
climber_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def exactly_taller_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff ft taller than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] == height_to_int[h2] + diff)
            for h1 in heights for h2 in heights]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(mountains)
m += AllDifferent(heights)
m += AllDifferent(climbers)

# Clue 1: The mountain that is 210 feet tall was climbed by Leonard Lara:
m += mt_brewer == height210 == leonard_lara

# Clue 2: Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall:
m += Xor([
    ben_beasley == mt_brewer,
    height470 == mt_quinn
])

# Clue 3: Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall:
m += Xor([
    mt_brewer == leonard_lara,
    height600 == mt_brewer
])

# Clue 4: Mt. York was climbed by Kermit Kramer:
m += mt_york == kermit_kramer


```

[['mt_brewer', 'height600', 'ben_beasley'], ['mt_quinn', 'height210', 'leonard_lara'], ['mt_gillespie', 'height470', 'eddie_english'], ['mt_york', 'height340', 'kermit_kramer']]
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Opie Oliver's card came out in 2012.
The piece that sold for $175 came out in 1999.
Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275.
Neddy Norris's item sold for 50 dollars more than the 1987 card.

Entities:
prices: $125, $175, $225, $275
players: Finn Freeman, Mike Morales, Neddy Norris, Opie Oliver
years: 1974, 1987, 1999, 2012
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, price, and year)
# e.g. if opie == 1 and price175 == 1 and year2012 == 1, then Opie Oliver's card came out in 2012 and sold for $175
opie, finn, mike, neddy = players = intvar(1, 4, shape=4)
price125, price175, price225, price275 = prices = intvar(1, 4, shape=4)
year1974, year1987, year1999, year2012 = years = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
price_to_int = {price125: 125, price175: 175, price225: 225, price275: 275}  # in dollars
year_to_int = {year1974: 1974, year1987: 1987, year1999: 1999, year2012: 2012}  # in years


# Helper functions (for formulating comparison constraints)
def sold_for_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 sold for exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(prices)
m += AllDifferent(years)

# Clue 1: Opie Oliver's card came out in 2012:
m += opie == year2012

# Clue 2: The piece that sold for $175 came out in 1999:
m += price175 == year1999

# Clue 3: Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275:
m += Xor([
    (year2012 == mike) & (price275 == year1987),
    (year2012 == price275) & (mike == year1987)
])

# Clue 4: Neddy Norris's item sold for 50 dollars more than the 1987 card:
m += sold_for_exactly_more_than(year1987, neddy, 50)


```

[['mike', 'price225', 'year1987'], ['finn', 'price125', 'year1974'], ['neddy', 'price175', 'year1999'], ['opie', 'price275', 'year2012']]
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili.
Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie.
Karl scored 7 more points than the person who made the lemon snapper.

Entities:
scores: 42, 49, 56, 63
chefs: Karl, Nelson, Peggy, Rosalie
dishes: cajun chili, cashew tofu, lemon snapper, smoked pork
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of score, chef, and dish)
# e.g. if karl == 1 and score42 == 1 and cajun_chili == 1, then Karl scored 42 points and made the cajun chili
karl, nelson, peggy, rosalie = chefs = intvar(1, 4, shape=4)
score42, score49, score56, score63 = scores = intvar(1, 4, shape=4)
cajun_chili, cashew_tofu, lemon_snapper, smoked_pork = dishes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
chef_to_int = None  # N/A
score_to_int = {score42: 42, score49: 49, score56: 56, score63: 63}  # in points
dish_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff points more than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] == score_to_int[s2] + diff)
            for s1 in scores for s2 in scores]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(chefs)
m += AllDifferent(scores)
m += AllDifferent(dishes)

# Clue 1: Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili:
m += Xor([
    (nelson == lemon_snapper) & (score63 == cajun_chili),
    (nelson == cajun_chili) & (score63 == lemon_snapper)
])

# Clue 2: Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie:
m += Xor([
    (karl == cashew_tofu) & (score63 == rosalie),
    (karl == rosalie) & (score63 == cashew_tofu)
])

# Clue 3: Karl scored 7 more points than the person who made the lemon snapper:
m += scored_exactly_more_than(karl, lemon_snapper, 7)


```

[['peggy', 'score56', 'smoked_pork'], ['nelson', 'score42', 'lemon_snapper'], ['rosalie', 'score63', 'cajun_chili'], ['karl', 'score49', 'cashew_tofu']]
False
False
False
Wrong: 1, Total: 6
---------------------------------------------------------------------------------------------

Clues:
Alejandro's purchase cost less than Irma's purchase.
The insect that sold for $90 was either the atlas butterfly or the emperor butterfly.
The peacock butterfly cost more than Irma's purchase.
Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45.
The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45 and the butterfly that sold for $90.

Entities:
prices: $45, $60, $75, $90
winners: Alejandro, Faye, Irma, Phillip
butterflies: atlas, emperor, grayling, peacock
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of winner, butterfly, and price)
# e.g. if alejandro == 1 and atlas == 1 and price45 == 1, then Alejandro bought the atlas butterfly for $45
alejandro, faye, irma, phillip = winners = intvar(1, 4, shape=4)
atlas, emperor, grayling, peacock = butterflies = intvar(1, 4, shape=4)
price45, price60, price75, price90 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
winner_to_int = None  # N/A
butterfly_to_int = None  # N/A
price_to_int = {price45: 45, price60: 60, price75: 75, price90: 90}  # in dollars


# Helper functions (for formulating comparison constraints)
def cost_more_than(var1, var2):
    """
    Formulate the constraint that var1 cost more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(winners)
m += AllDifferent(butterflies)
m += AllDifferent(prices)

# Clue 1: Alejandro's purchase cost less than Irma's purchase:
m += cost_more_than(irma, alejandro)

# Clue 2: The insect that sold for $90 was either the atlas butterfly or the emperor butterfly:
m += Xor([
    atlas == price90,
    emperor == price90
])

# Clue 3: The peacock butterfly cost more than Irma's purchase:
m += cost_more_than(peacock, irma)

# Clue 4: Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45:
m += Xor([
    alejandro == emperor,
    irma == price45
])

# Clue 5: The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45 and the butterfly that sold for $90:
m += AllDifferent([phillip, price60, price45, price90])

```

[['alejandro', 'emperor', 'price45'], ['faye', 'atlas', 'price90'], ['irma', 'grayling', 'price60'], ['phillip', 'peacock', 'price75']]
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The athlete who traveled for 195 days started from Pescadero.
Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay .
Hilda finished in 217 days .
Walter finished 11 days before the athlete who started from Cayucos.

Entities:
durations: 184 days, 195 days, 206 days, 217 days
rowers: Antonio, Dana, Hilda, Walter
start points: Bodega Bay, Cayucos, Pescadero, Pismo Beach
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of rower, duration, and start point)
# e.g. if antonio == 1 and days195 == 1 and pescadero == 1, then Antonio started from Pescadero and traveled for 195 days
antonio, dana, hilda, walter = rowers = intvar(1, 4, shape=4)
days184, days195, days206, days217 = durations = intvar(1, 4, shape=4)
bodega_bay, cayucos, pescadero, pismo_beach = start_points = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
rower_to_int = None  # N/A
duration_to_int = {days184: 184, days195: 195, days206: 206, days217: 217}  # in days
start_point_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def finished_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 finished exactly diff days before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(duration_to_int[d1] == duration_to_int[d2] - diff)
            for d1 in durations for d2 in durations]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(rowers)
m += AllDifferent(durations)
m += AllDifferent(start_points)

# Clue 1: The athlete who traveled for 195 days started from Pescadero:
m += pescadero == days195

# Clue 2: Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay:
m += Xor([
    (dana == cayucos) & (days184 == bodega_bay),
    (dana == bodega_bay) & (days184 == cayucos)
])

# Clue 3: Hilda finished in 217 days:
m += hilda == days217

# Clue 4: Walter finished 11 days before the athlete who started from Cayucos:
m += finished_exactly_before_than(walter, cayucos, 11)


```

[['dana', 'days206', 'cayucos'], ['walter', 'days195', 'pescadero'], ['hilda', 'days217', 'pismo_beach'], ['antonio', 'days184', 'bodega_bay']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The movie that grossed 5 million was directed by Kenneth Key.
Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson.
The film directed by Kenneth Key made 3 million less than Amerigo.
Fast and Dead was directed by Kenneth Key.
Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million.

Entities:
earnings: 2 million, 5 million, 8 million, 11 million
movies: Amerigo, Fast and Dead, Let Me Out, What a World
directors: Jim Johnson, Kenneth Key, Linda Lynch, Micah Moreno
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of movie, earning, and director)
# e.g. if amerigo == 1 and million2 == 1 and kenneth_key == 1, then Amerigo was directed by Kenneth Key and grossed 2 million
amerigo, fast_and_dead, let_me_out, what_a_world = movies = intvar(1, 4, shape=4)
million2, million5, million8, million11 = earnings = intvar(1, 4, shape=4)
jim_johnson, kenneth_key, linda_lynch, micah_moreno = directors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
movie_to_int = None  # N/A
earning_to_int = {million2: 2, million5: 5, million8: 8, million11: 11}  # in millions
director_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def grossed_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 grossed exactly diff more than var2.
    """
    return [((e1 == var1) & (e2 == var2)).implies(earning_to_int[e1] == earning_to_int[e2] + diff)
            for e1 in earnings for e2 in earnings]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(movies)
m += AllDifferent(earnings)
m += AllDifferent(directors)

# Clue 1: The movie that grossed 5 million was directed by Kenneth Key:
m += million5 == kenneth_key

# Clue 2: Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson:
m += Xor([
    what_a_world == jim_johnson,
    amerigo == jim_johnson
])

# Clue 3: The film directed by Kenneth Key made 3 million less than Amerigo:
m += grossed_exactly_more_than(amerigo, kenneth_key, -3)

# Clue 4: Fast and Dead was directed by Kenneth Key:
m += fast_and_dead == kenneth_key

# Clue 5: Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million:
m += Xor([
    let_me_out == linda_lynch,
    let_me_out == million5
])


```

[['amerigo', 'million2', 'jim_johnson'], ['what_a_world', 'million11', 'micah_moreno'], ['let_me_out', 'million8', 'linda_lynch'], ['fast_and_dead', 'million5', 'kenneth_key']]
False
False
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The person who is 110 years old is a native of Connecticut.
Of Arlene and the Texas native, one is 110 years old and the other is 109 years old.
Herbert is 1 year younger than Doris.
The person who is 112 years old is either Herbert or the New Mexico native.

Entities:
ages: 109 years, 110 years, 111 years, 112 years
names: Arlene, Doris, Floyd, Herbert
states: Connecticut, Missouri, New Mexico, Texas
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of age, name, and state)
# e.g. if arlene == 1 and age109 == 1 and connecticut == 1, then Arlene is 109 years old and from Connecticut
age109, age110, age111, age112 = ages = intvar(1, 4, shape=4)
arlene, doris, floyd, herbert = names = intvar(1, 4, shape=4)
connecticut, missouri, new_mexico, texas = states = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
age_to_int = {age109: 109, age110: 110, age111: 111, age112: 112}  # in years
name_to_int = None  # N/A
state_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def younger_than(var1, var2):
    """
    Formulate the constraint that var1 is younger than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] < age_to_int[a2])
            for a1 in ages for a2 in ages]


def exactly_younger_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff years younger than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] == age_to_int[a2] - diff)
            for a1 in ages for a2 in ages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(ages)
m += AllDifferent(names)
m += AllDifferent(states)

# Clue 1: The person who is 110 years old is a native of Connecticut:
m += age110 == connecticut

# Clue 2: Of Arlene and the Texas native, one is 110 years old and the other is 109 years old:
m += Xor([
    arlene == age110,
    arlene == age109,
    texas == age110,
    texas == age109
])

# Clue 3: Herbert is 1 year younger than Doris:
m += younger_than(herbert, doris)

# Clue 4: The person who is 112 years old is either Herbert or the New Mexico native:
m += Xor([
    age112 == herbert,
    age112 == new_mexico
])

```

[['age112', 'arlene', 'new_mexico'], ['age110', 'herbert', 'connecticut'], ['age109', 'floyd', 'texas'], ['age111', 'doris', 'missouri']]
False
False
False
Wrong: 2, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Of Frances and Olga, one paid $25 and the other had the shiraz.
The one who had the port paid 2 dollars more than Kurt.
Olga had the merlot.

Entities:
prices: $24, $25, $26, $27
names: Frances, Hannah, Kurt, Olga
wines: merlot, port, riesling, shiraz
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of price, name, and wine)
# e.g. if olga == 1 and price25 == 1 and shiraz == 1, then Olga paid $25 for shiraz
frances, hannah, kurt, olga = names = intvar(1, 4, shape=4)
price24, price25, price26, price27 = prices = intvar(1, 4, shape=4)
merlot, port, riesling, shiraz = wines = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
price_to_int = {price24: 24, price25: 25, price26: 26, price27: 27}  # in dollars
wine_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(prices)
m += AllDifferent(wines)

# Clue 1: Of Frances and Olga, one paid $25 and the other had the shiraz:
m += Xor([
    (frances == price25) & (olga == shiraz),
    (frances == shiraz) & (olga == price25)
])

# Clue 2: The one who had the port paid 2 dollars more than Kurt:
m += paid_exactly_more_than(port, kurt, 2)

# Clue 3: Olga had the merlot:
m += olga == merlot


```

[['kurt', 'price24', 'riesling'], ['olga', 'price25', 'merlot'], ['hannah', 'price26', 'port'], ['frances', 'price27', 'shiraz']]
True
True
True
Wrong: 0, Total: 6
---------------------------------------------------------------------------------------------

Clues:
Regal Park is on Barbados.
Grand Echo costs 40 dollars more per night than the resort on Barbados.
Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night.
The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View.
Grand Echo costs 20 dollars less per night than Emerald View.

Entities:
prices: $175, $195, $215, $235
resorts: El Pacifico, Emerald View, Grand Echo, Regal Park
islands: Anguilla, Barbados, Martinique, St. Barts
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of price, resort, and island)
# e.g. if price175 == 1 and el_pacifico == 1 and barbados == 1, then El Pacifico is on Barbados and costs $175 per night
price175, price195, price215, price235 = prices = intvar(1, 4, shape=4)
el_pacifico, emerald_view, grand_echo, regal_park = resorts = intvar(1, 4, shape=4)
anguilla, barbados, martinique, st_barts = islands = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
price_to_int = {price175: 175, price195: 195, price215: 215, price235: 235}  # in dollars
resort_to_int = None  # N/A
island_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def costs_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


def costs_more_than(var1, var2):
    """
    Formulate the constraint that var1 costs more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(prices)
m += AllDifferent(resorts)
m += AllDifferent(islands)

# Clue 1: Regal Park is on Barbados:
m += regal_park == barbados

# Clue 2: Grand Echo costs 40 dollars more per night than the resort on Barbados:
m += costs_exactly_more_than(grand_echo, barbados, 40)

# Clue 3: Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night:
m += Xor([
    (el_pacifico == martinique) & (regal_park == price175),
    (el_pacifico == price175) & (regal_park == martinique)
])

# Clue 4: The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View:
m += Xor([
    price215 == st_barts,
    price215 == emerald_view
])

# Clue 5: Grand Echo costs 20 dollars less per night than Emerald View:
m += costs_exactly_more_than(emerald_view, grand_echo, 20)


```

[['price215', 'grand_echo', 'st_barts'], ['price235', 'emerald_view', 'anguilla'], ['price175', 'regal_park', 'barbados'], ['price195', 'el_pacifico', 'martinique']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Snappy is 18 years younger than the swoopbacked tortoise.
The 68 year old animal is the horned tortoise.
Chewie is 32 years old.
Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise.
The pitch belly tortoise is younger than Chewie.

Entities:
ages: 14, 32, 50, 68
tortoises: Chewie, Snappy, Speedy, Toredo
species: black neck, horned, pitch belly, swoopbacked
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of age, tortoise, and species)
# e.g. if chewie == 1 and age14 == 1 and black_neck == 1, then Chewie is 14 years old and is a black neck tortoise
chewie, snappy, speedy, toredo = tortoises = intvar(1, 4, shape=4)
age14, age32, age50, age68 = ages = intvar(1, 4, shape=4)
black_neck, horned, pitch_belly, swoopbacked = species = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
tortoise_to_int = None  # N/A
age_to_int = {age14: 14, age32: 32, age50: 50, age68: 68}  # in years
species_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def older_than(var1, var2):
    """
    Formulate the constraint that var1 is older than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] > age_to_int[a2])
            for a1 in ages for a2 in ages]


def exactly_younger_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff years younger than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] == age_to_int[a2] - diff)
            for a1 in ages for a2 in ages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(tortoises)
m += AllDifferent(ages)
m += AllDifferent(species)

# Clue 1: Snappy is 18 years younger than the swoopbacked tortoise:
m += exactly_younger_than(snappy, swoopbacked, 18)

# Clue 2: The 68 year old animal is the horned tortoise:
m += age68 == horned

# Clue 3: Chewie is 32 years old:
m += chewie == age32

# Clue 4: Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise:
m += Xor([
    (snappy == age14) & (toredo == horned),
    (snappy == horned) & (toredo == age14)
])

# Clue 5: The pitch belly tortoise is younger than Chewie:
m += older_than(chewie, pitch_belly)


```

[['chewie', 'age32', 'swoopbacked'], ['snappy', 'age14', 'pitch_belly'], ['toredo', 'age68', 'horned'], ['speedy', 'age50', 'black_neck']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of the parrot and the lorikeet, one was bought in April and the other is Roberta's.
Natalie's pet was bought sometime before Roberta's pet.
Laura's pet is the lovebird.
The bird bought in February is either the lorikeet or the lovebird.
Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's.

Entities:
months: January, February, March, April
names: Celia, Laura, Natalie, Roberta
birds: lorikeet, lovebird, macaw, parrot
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of month, name, and bird)
# e.g. if celia == 1 and january == 1 and lorikeet == 1, then Celia's pet was a lorikeet bought in January
celia, laura, natalie, roberta = names = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
lorikeet, lovebird, macaw, parrot = birds = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
bird_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bought_before_than(var1, var2):
    """
    Formulate the constraint that var1 was bought before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] < month_to_int[m2])
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(months)
m += AllDifferent(birds)

# Clue 1: Of the parrot and the lorikeet, one was bought in April and the other is Roberta's:
m += Xor([
    (parrot == april) & (lorikeet == roberta),
    (parrot == roberta) & (lorikeet == april)
])

# Clue 2: Natalie's pet was bought sometime before Roberta's pet:
m += bought_before_than(natalie, roberta)

# Clue 3: Laura's pet is the lovebird:
m += laura == lovebird

# Clue 4: The bird bought in February is either the lorikeet or the lovebird:
m += Xor([
    february == lorikeet,
    february == lovebird
])

# Clue 5: Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's:
m += Xor([
    (february == natalie) & (macaw == roberta),
    (february == roberta) & (macaw == natalie)
])

```

[['roberta', 'february', 'lorikeet'], ['laura', 'march', 'lovebird'], ['natalie', 'january', 'macaw'], ['celia', 'april', 'parrot']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Suzanne paid less than Margie.
Margie paid $7.
The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni.
Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma.

Entities:
prices: $6, $7, $8, $9
runners: Florence, Margie, Suzanne, Velma
pastas: fettuccine, fusilli, spaghetti, taglioni
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of runner, price, and pasta)
# e.g. if florence == 1 and price6 == 1 and fettuccine == 1, then Florence paid $6 for fettuccine
florence, margie, suzanne, velma = runners = intvar(1, 4, shape=4)
price6, price7, price8, price9 = prices = intvar(1, 4, shape=4)
fettuccine, fusilli, spaghetti, taglioni = pastas = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
runner_to_int = None  # N/A
price_to_int = {price6: 6, price7: 7, price8: 8, price9: 9}  # in dollars
pasta_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(runners)
m += AllDifferent(prices)
m += AllDifferent(pastas)

# Clue 1: Suzanne paid less than Margie:
m += paid_more_than(margie, suzanne)

# Clue 2: Margie paid $7:
m += margie == price7

# Clue 3: The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni:
m += paid_exactly_more_than(spaghetti, taglioni, 2)

# Clue 4: Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma:
m += Xor([
    (price9 == margie) & (fettuccine == velma),
    (price9 == velma) & (fettuccine == margie)
])


```

[['suzanne', 'price6', 'taglioni'], ['florence', 'price8', 'spaghetti'], ['velma', 'price9', 'fusilli'], ['margie', 'price7', 'fettuccine']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The Luzagueil is a chardonnay.
The Annata Branco is either the 1992 wine or the syrah.
The Friambliss is a syrah.
Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein.
The pinot gris was bottled 4 years after the merlot.

Entities:
vintages: 1984, 1988, 1992, 1996
wines: Annata Branco, Friambliss, Luzagueil, Zifennwein
types: chardonnay, merlot, pinot gris, syrah
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of vintage, wine, and type)
# e.g. if annata == 1 and vintage1984 == 1 and chardonnay == 1, then Annata Branco is a 1984 chardonnay
annata, friambliss, luzagueil, zifennwein = wines = intvar(1, 4, shape=4)
vintage1984, vintage1988, vintage1992, vintage1996 = vintages = intvar(1, 4, shape=4)
chardonnay, merlot, pinot_gris, syrah = types = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
wine_to_int = None  # N/A
vintage_to_int = {vintage1984: 1984, vintage1988: 1988, vintage1992: 1992, vintage1996: 1996}  # in years
type_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bottled_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was bottled exactly diff years after var2.
    """
    return [((v1 == var1) & (v2 == var2)).implies(vintage_to_int[v1] == vintage_to_int[v2] + diff)
            for v1 in vintages for v2 in vintages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(wines)
m += AllDifferent(vintages)
m += AllDifferent(types)

# Clue 1: The Luzagueil is a chardonnay:
m += luzagueil == chardonnay

# Clue 2: The Annata Branco is either the 1992 wine or the syrah:
m += Xor([
    annata == vintage1992,
    annata == syrah
])

# Clue 3: The Friambliss is a syrah:
m += friambliss == syrah

# Clue 4: Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein:
m += Xor([
    (pinot_gris == luzagueil) & (vintage1984 == zifennwein),
    (pinot_gris == zifennwein) & (vintage1984 == luzagueil)
])

# Clue 5: The pinot gris was bottled 4 years after the merlot:
m += bottled_exactly_after_than(pinot_gris, merlot, 4)

```

[['zifennwein', 'vintage1996', 'pinot_gris'], ['luzagueil', 'vintage1984', 'chardonnay'], ['friambliss', 'vintage1988', 'syrah'], ['annata', 'vintage1992', 'merlot']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hannah paid more than Teri's client.
Freda paid 20 dollars more than Lynda's client.
Hannah paid 10 dollars less than Nancy's client.
Nancy's client, Hannah and Ginger were all different clients.
Hannah was either the person who paid $180 or Lynda's client.

Entities:
Clients: Aimee, Ginger, Freda, Hannah
Prices: $150, $160, $170, $180
Masseuses: Lynda, Nancy, Teri, Whitney
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of client, masseuse, and price)
# e.g. if aimee == 1 and lynda == 1 and price150 == 1, then aimee's masseuse is lynda and the price is 150
aimee, ginger, freda, hannah = clients = intvar(1, 4, shape=4)
lynda, nancy, teri, whitney = masseuses = intvar(1, 4, shape=4)
price150, price160, price170, price180 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
client_to_int = None  # N/A
masseuse_to_int = None  # N/A
price_to_int = {price150: 150, price160: 160, price170: 170, price180: 180}  # in dollars


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(clients)
m += AllDifferent(masseuses)
m += AllDifferent(prices)

# Clue 1: Hannah paid more than Teri's client:
m += paid_more_than(hannah, teri)

# Clue 2: Freda paid 20 dollars more than Lynda's client:
m += paid_exactly_more_than(freda, lynda, 20)

# Clue 3: Hannah paid 10 dollars less than Nancy's client:
m += paid_exactly_more_than(hannah, nancy, -10)

# Clue 4: Nancy's client, Hannah and Ginger were all different clients:
m += AllDifferent([nancy, hannah, ginger])

# Clue 5: Hannah was either the person who paid $180 or Lynda's client:
m += Xor([
    hannah == price180,
    hannah == lynda
])

```

[['freda', 'whitney', 'price180'], ['hannah', 'lynda', 'price160'], ['ginger', 'teri', 'price150'], ['aimee', 'nancy', 'price170']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet.
Inawatai is 100 ft tall.
Nyalt is 10 ft taller than Rhoqua.
The waterfall in Brazil is somewhat shorter than Rhoqua.
The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria.

Entities:
waterfalls: Sihat, Rhoqua, Nyalt, Inawatai
heights: 100 ft, 105 ft, 110 ft, 115 ft
countries: Brazil, Nigeria, Tibet, Switzerland
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of waterfall, height, and country)
# e.g. if sihat == 1 and height100 == 1 and brazil == 1, then Sihat is 100 ft tall and located in Brazil
sihat, rhoqua, nyalt, inawatai = waterfalls = intvar(1, 4, shape=4)
height100, height105, height110, height115 = heights = intvar(1, 4, shape=4)
brazil, nigeria, tibet, switzerland = countries = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
waterfall_to_int = None  # N/A
height_to_int = {height100: 100, height105: 105, height110: 110, height115: 115}  # in feet
country_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def taller_than(var1, var2):
    """
    Formulate the constraint that var1 is taller than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] > height_to_int[h2])
            for h1 in heights for h2 in heights]


def exactly_taller_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff ft taller than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] == height_to_int[h2] + diff)
            for h1 in heights for h2 in heights]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(waterfalls)
m += AllDifferent(heights)
m += AllDifferent(countries)

# Clue 1: The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet:
m += Xor([
    height115 == nigeria,
    height115 == tibet
])

# Clue 2: Inawatai is 100 ft tall:
m += inawatai == height100

# Clue 3: Nyalt is 10 ft taller than Rhoqua:
m += exactly_taller_than(nyalt, rhoqua, 10)

# Clue 4: The waterfall in Brazil is somewhat shorter than Rhoqua:
m += taller_than(rhoqua, brazil)

# Clue 5: The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria:
m += exactly_taller_than(nigeria, brazil, 10)


```

[['rhoqua', 'height105', 'switzerland'], ['nyalt', 'height115', 'tibet'], ['sihat', 'height110', 'nigeria'], ['inawatai', 'height100', 'brazil']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Evan played 9 games.
Vincent played first base.
The player who played third base played 2 more games than the person who played center field.
Charles played 2 more games than the player who played center field.
Charles was either the boy who played 9 games or the person who played 10 games.

Entities:
players: Charles, Evan, Karl, Vincent
games: 8, 9, 10, 11
positions: center field, first base, shortstop, third base
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, games, and position)
# e.g. if charles == 1 and games8 == 1 and center_field == 1, then Charles played 8 games in center field
charles, evan, karl, vincent = players = intvar(1, 4, shape=4)
games8, games9, games10, games11 = games = intvar(1, 4, shape=4)
center_field, first_base, shortstop, third_base = positions = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
games_to_int = {games8: 8, games9: 9, games10: 10, games11: 11}  # in games
position_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def played_exactly_more_games_than(var1, var2, diff):
    """
    Formulate the constraint that var1 played diff more games than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(games_to_int[g1] == games_to_int[g2] + diff)
            for g1 in games for g2 in games]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(games)
m += AllDifferent(positions)

# Clue 1: Evan played 9 games:
m += evan == games9

# Clue 2: Vincent played first base:
m += vincent == first_base

# Clue 3: The player who played third base played 2 more games than the person who played center field:
m += played_exactly_more_games_than(third_base, center_field, 2)

# Clue 4: Charles played 2 more games than the player who played center field:
m += played_exactly_more_games_than(charles, center_field, 2)

# Clue 5: Charles was either the boy who played 9 games or the person who played 10 games:
m += Xor([
    charles == games9,
    charles == games10
])


```

[['charles', 'games10', 'third_base'], ['vincent', 'games11', 'first_base'], ['evan', 'games9', 'shortstop'], ['karl', 'games8', 'center_field']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Edmund paid 1 dollar less than the one who got the water.
The diner who paid $4 had the iced tea.
Angela paid more than the one who got the cream soda.
The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea.
The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer and Irene.

Entities:
names: Angela, Edmund, Homer, Irene
prices: $4, $5, $6, $7
drinks: cream soda, iced tea, root beer, water
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, price, and drink)
# e.g. if angela == 1 and price4 == 1 and cream_soda == 1, then Angela paid $4 for cream soda
angela, edmund, homer, irene = names = intvar(1, 4, shape=4)
price4, price5, price6, price7 = prices = intvar(1, 4, shape=4)
cream_soda, iced_tea, root_beer, water = drinks = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
price_to_int = {price4: 4, price5: 5, price6: 6, price7: 7}  # in dollars
drink_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(prices)
m += AllDifferent(drinks)

# Clue 1: Edmund paid 1 dollar less than the one who got the water:
m += paid_exactly_more_than(water, edmund, 1)

# Clue 2: The diner who paid $4 had the iced tea:
m += price4 == iced_tea

# Clue 3: Angela paid more than the one who got the cream soda:
m += paid_more_than(angela, cream_soda)

# Clue 4: The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea:
m += Xor([
    price5 == cream_soda,
    price5 == iced_tea
])

# Clue 5: The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer and Irene:
m += AllDifferent([price5, iced_tea, root_beer, irene])


```

[['homer', 'price4', 'iced_tea'], ['angela', 'price7', 'root_beer'], ['irene', 'price6', 'water'], ['edmund', 'price5', 'cream_soda']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Ingram had 7 goals this season.
The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers.
Parrish scored 1 goal more than Quinn.
The player with 9 goals is from the Ice Hogs.
Ingram is either the player from the Checkers or the player with 6 goals.

Entities:
players: Ingram, Parrish, Quinn, Underwood
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Monsters
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, goal, and team)
# e.g. if ingram == 1 and goals6 == 1 and checkers == 1, then Ingram scored 6 goals and is from the Checkers
ingram, parrish, quinn, underwood = players = intvar(1, 4, shape=4)
goals6, goals7, goals8, goals9 = goals = intvar(1, 4, shape=4)
checkers, comets, ice_hogs, monsters = teams = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
goal_to_int = {goals6: 6, goals7: 7, goals8: 8, goals9: 9}  # in goals
team_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff goals more than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goal_to_int[g1] == goal_to_int[g2] + diff)
            for g1 in goals for g2 in goals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(goals)
m += AllDifferent(teams)

# Clue 1: Ingram had 7 goals this season:
m += ingram == goals7

# Clue 2: The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers:
m += AllDifferent([underwood, ice_hogs, monsters, checkers])

# Clue 3: Parrish scored 1 goal more than Quinn:
m += scored_exactly_more_than(parrish, quinn, 1)

# Clue 4: The player with 9 goals is from the Ice Hogs:
m += goals9 == ice_hogs

# Clue 5: Ingram is either the player from the Checkers or the player with 6 goals:
m += Xor([
    ingram == checkers,
    ingram == goals6
])


```

[['ingram', 'goals7', 'checkers'], ['quinn', 'goals8', 'monsters'], ['underwood', 'goals6', 'comets'], ['parrish', 'goals9', 'ice_hogs']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Jorge is either the skydiver who wears the red suit or the jumper who started in 1982.
The skydiver who wears the pink suit started skydiving 1 year before Otis.
The jumper who wears the yellow suit started skydiving sometime after Philip.
The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit.
The jumper who wears the pink suit started skydiving 2 years before Shaun.

Entities:
names: Jorge, Otis, Philip, Shaun
years: 1982, 1983, 1984, 1985
suit colors: lime green, pink, red, yellow
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, year, and suit color)
# e.g. if jorge == 1 and year1982 == 1 and red == 1, then Jorge wears a red suit and started in 1982
jorge, otis, philip, shaun = names = intvar(1, 4, shape=4)
year1982, year1983, year1984, year1985 = years = intvar(1, 4, shape=4)
lime_green, pink, red, yellow = suit_colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
year_to_int = {year1982: 1982, year1983: 1983, year1984: 1984, year1985: 1985}  # in years
suit_color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2):
    """
    Formulate the constraint that var1 started skydiving after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


def started_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started skydiving exactly diff years before var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y2] == year_to_int[y1] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(years)
m += AllDifferent(suit_colors)

# Clue 1: Jorge is either the skydiver who wears the red suit or the jumper who started in 1982:
m += Xor([
    jorge == red,
    jorge == year1982
])

# Clue 2: The skydiver who wears the pink suit started skydiving 1 year before Otis:
m += started_exactly_before_than(pink, otis, 1)

# Clue 3: The jumper who wears the yellow suit started skydiving sometime after Philip:
m += started_after_than(yellow, philip)

# Clue 4: The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit:
m += started_after_than(lime_green, yellow)

# Clue 5: The jumper who wears the pink suit started skydiving 2 years before Shaun:
m += started_exactly_before_than(pink, shaun, 2)


```

[['jorge', 'year1985', 'red'], ['shaun', 'year1984', 'lime_green'], ['philip', 'year1982', 'pink'], ['otis', 'year1983', 'yellow']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The variety that requires 190 degree water costs 1 dollar less than the variety that requires 195 degree water.
The Pouchong costs 1 dollar less than the Red Robe.
The Pouchong needs 195 degree water.
The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200 degree water and the tea that requires 190 degree water.

Entities:
teas: Ali Shan, Jin Xuan, Pouchong, Red Robe
prices: $4, $5, $6, $7
temperatures: 190 degree, 195 degree, 200 degree, 215 degree
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of tea, price, and temperature)
# e.g. if ali_shan == 1 and price4 == 1 and temperature190 == 1, then Ali Shan costs $4 and requires 190 degree water
ali_shan, jin_xuan, pouchong, red_robe = teas = intvar(1, 4, shape=4)
price4, price5, price6, price7 = prices = intvar(1, 4, shape=4)
temperature190, temperature195, temperature200, temperature215 = temperatures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
tea_to_int = None  # N/A
price_to_int = {price4: 4, price5: 5, price6: 6, price7: 7}  # in dollars
temperature_to_int = {temperature190: 190, temperature195: 195, temperature200: 200, temperature215: 215}  # in degrees


# Helper functions (for formulating comparison constraints)
def costs_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


def requires_exactly_less_water(var1, var2, diff):
    """
    Formulate the constraint that var1 requires exactly diff degrees less water than var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(temperature_to_int[t1] == temperature_to_int[t2] - diff)
            for t1 in temperatures for t2 in temperatures]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(teas)
m += AllDifferent(prices)
m += AllDifferent(temperatures)

# Clue 1: The variety that requires 190 degree water costs 1 dollar less than the variety that requires 195 degree water:
m += costs_exactly_less_than(temperature190, temperature195, 1)

# Clue 2: The Pouchong costs 1 dollar less than the Red Robe:
m += costs_exactly_less_than(pouchong, red_robe, 1)

# Clue 3: The Pouchong needs 195 degree water:
m += pouchong == temperature195

# Clue 4: The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200 degree water and the tea that requires 190 degree water:
m += AllDifferent([ali_shan, price6, temperature200, temperature190])


```

[['red_robe', 'price7', 'temperature200'], ['pouchong', 'price6', 'temperature195'], ['jin_xuan', 'price5', 'temperature190'], ['ali_shan', 'price4', 'temperature215']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The flier leaving in April will bring shamrock.
The passenger with the rabbit's foot will leave 1 month after Troy.
The flier with the horseshoe will leave 1 month after Doug.
The flier with the horseshoe is either Peggy or the passenger leaving in January.

Entities:
fliers: Doug, Eloise, Peggy, Troy
months: January, February, March, April
lucky charms: coin, horseshoe, rabbit's foot, shamrock
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of flier, month, and lucky charm)
# e.g. if doug == 1 and january == 1 and horseshoe == 1, then Doug will leave in January with the horseshoe
doug, eloise, peggy, troy = fliers = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
coin, horseshoe, rabbits_foot, shamrock = lucky_charms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
flier_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
lucky_charm_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def leaves_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(fliers)
m += AllDifferent(months)
m += AllDifferent(lucky_charms)

# Clue 1: The flier leaving in April will bring shamrock:
m += april == shamrock

# Clue 2: The passenger with the rabbit's foot will leave 1 month after Troy:
m += leaves_exactly_after_than(rabbits_foot, troy, 1)

# Clue 3: The flier with the horseshoe will leave 1 month after Doug:
m += leaves_exactly_after_than(horseshoe, doug, 1)

# Clue 4: The flier with the horseshoe is either Peggy or the passenger leaving in January:
m += Xor([
    horseshoe == peggy,
    horseshoe == january
])

```

[['doug', 'february', 'rabbits_foot'], ['peggy', 'march', 'horseshoe'], ['troy', 'january', 'coin'], ['eloise', 'april', 'shamrock']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Ronda's sandwich and the sandwich with havarti cheese are different sandwiches.
Ronda's order costs $5.
Lula's order is either the 3 dollars sandwich or the order that costs 5 dollars.
The sandwich with cheddar cheese costs less than the order with havarti cheese.
Yolanda's sandwich costs 2 dollars less than the order with swiss cheese.

Entities:
customers: Lula, Ronda, Sue, Yolanda
prices: $2, $3, $4, $5
cheeses: cheddar, havarti, muenster, swiss
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, price, and cheese)
# e.g. if ronda == 1 and price5 == 1 and havarti == 1, then Ronda's sandwich costs $5 and has havarti cheese
ronda, lula, sue, yolanda = customers = intvar(1, 4, shape=4)
price2, price3, price4, price5 = prices = intvar(1, 4, shape=4)
cheddar, havarti, muenster, swiss = cheeses = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
price_to_int = {price2: 2, price3: 3, price4: 4, price5: 5}  # in dollars
cheese_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def costs_less_than(var1, var2):
    """
    Formulate the constraint that var1 costs less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


def costs_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly $diff less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(prices)
m += AllDifferent(cheeses)

# Clue 1: Ronda's sandwich and the sandwich with havarti cheese are different sandwiches:
m += ronda != havarti

# Clue 2: Ronda's order costs $5:
m += ronda == price5

# Clue 3: Lula's order is either the 3 dollars sandwich or the order that costs 5 dollars:
m += Xor([
    lula == price3,
    lula == price5
])

# Clue 4: The sandwich with cheddar cheese costs less than the order with havarti cheese:
m += costs_less_than(cheddar, havarti)

# Clue 5: Yolanda's sandwich costs 2 dollars less than the order with swiss cheese:
m += costs_exactly_less_than(yolanda, swiss, 2)

```

[['ronda', 'price5', 'muenster'], ['yolanda', 'price2', 'cheddar'], ['lula', 'price3', 'havarti'], ['sue', 'price4', 'swiss']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The rocket developed by Vexatech will launch 1 month after the Exatris.
The rocket developed by SpaceZen will launch sometime after the Beritron.
The Worul is made by Techtrin.
The Exatris will launch in January.
The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp.

Entities:
rockets: Beritron, Cornick, Exatris, Worul
months: January, February, March, April
companies: Rubicorp, SpaceZen, Techtrin, Vexatech
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of rocket, month, and company)
# e.g. if beritron == 1 and january == 1 and rubicorp == 1, then Beritron will launch in January and developed by Rubicorp
beritron, cornick, exatris, worul = rockets = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
rubicorp, spacezen, techtrin, vexatech = companies = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
rocket_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
company_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def launched_after_than(var1, var2):
    """
    Formulate the constraint that var1 launched after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def launched_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 launched exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(rockets)
m += AllDifferent(months)
m += AllDifferent(companies)

# Clue 1: The rocket developed by Vexatech will launch 1 month after the Exatris:
m += launched_exactly_after_than(vexatech, exatris, 1)

# Clue 2: The rocket developed by SpaceZen will launch sometime after the Beritron:
m += launched_after_than(spacezen, beritron)

# Clue 3: The Worul is made by Techtrin:
m += worul == techtrin

# Clue 4: The Exatris will launch in January:
m += exatris == january

# Clue 5: The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp:
m += Xor([
    cornick == april,
    cornick == rubicorp
])


```

[['beritron', 'february', 'vexatech'], ['cornick', 'april', 'spacezen'], ['exatris', 'january', 'rubicorp'], ['worul', 'march', 'techtrin']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The student who will major in Physics was awarded $5000 less than the student who will major in Biology.
Wilma will major in Mathematics.
Delores was awarded $5000 more than Anna.
Anna was awarded some amount less than the person who will major in Mathematics.
Wilma is either the person who received the 35000 dollars scholarship or the person who received the 25000 dollars scholarship.

Entities:
names: Anna, Delores, Wilma, Yvonne
scholarships: $25000, $30000, $35000, $40000
majors: Biology, Mathematics, Physics, Theology
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, scholarship, and major)
# e.g. if anna == 1 and scholarship25000 == 1 and biology == 1, then Anna received the 25000 scholarship and majored in Biology
anna, delores, wilma, yvonne = names = intvar(1, 4, shape=4)
scholarship25000, scholarship30000, scholarship35000, scholarship40000 = scholarships = intvar(1, 4, shape=4)
biology, mathematics, physics, theology = majors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
scholarship_to_int = {scholarship25000: 25000, scholarship30000: 30000, scholarship35000: 35000, scholarship40000: 40000}  # in dollars
major_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def awarded_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was awarded exactly $diff more than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] == scholarship_to_int[s2] + diff)
            for s1 in scholarships for s2 in scholarships]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(scholarships)
m += AllDifferent(majors)

# Clue 1: The student who will major in Physics was awarded $5000 less than the student who will major in Biology:
m += awarded_exactly_more_than(biology, physics, -5000)

# Clue 2: Wilma will major in Mathematics:
m += wilma == mathematics

# Clue 3: Delores was awarded $5000 more than Anna:
m += awarded_exactly_more_than(delores, anna, 5000)

# Clue 4: Anna was awarded some amount less than the person who will major in Mathematics:
m += awarded_exactly_more_than(mathematics, anna, 0)

# Clue 5: Wilma is either the person who received the 35000 dollars scholarship or the person who received the 25000 dollars scholarship:
m += Xor([
    wilma == scholarship35000,
    wilma == scholarship25000
])

```

None
False
False
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase.
Otis's purchase was either the peacock butterfly or the swallowtail butterfly.
Brandon's purchase cost 30 dollars less than Otis's purchase.
Rena's purchase cost 15 dollars less than the swallowtail butterfly.
The insect that sold for $75 was the torturix butterfly.

Entities:
winners: Brandon, Otis, Phillip, Rena
prices: $45, $60, $75, $90
butterflies: peacock, peppered, swallowtail, torturix
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of winner, price, and butterfly)
# e.g. if brandon == 1 and price45 == 1 and peppered == 1, then Brandon bought a peppered butterfly for $45
brandon, otis, phillip, rena = winners = intvar(1, 4, shape=4)
price45, price60, price75, price90 = prices = intvar(1, 4, shape=4)
peacock, peppered, swallowtail, torturix = butterflies = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
winner_to_int = None  # N/A
price_to_int = {price45: 45, price60: 60, price75: 75, price90: 90}  # in dollars
butterfly_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def cost_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 cost exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(winners)
m += AllDifferent(prices)
m += AllDifferent(butterflies)

# Clue 1: The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase:
m += AllDifferent([swallowtail, rena, price90, phillip])

# Clue 2: Otis's purchase was either the peacock butterfly or the swallowtail butterfly:
m += Xor([
    otis == peacock,
    otis == swallowtail
])

# Clue 3: Brandon's purchase cost 30 dollars less than Otis's purchase:
m += cost_exactly_less_than(brandon, otis, 30)

# Clue 4: Rena's purchase cost 15 dollars less than the swallowtail butterfly:
m += cost_exactly_less_than(rena, swallowtail, 15)

# Clue 5: The insect that sold for $75 was the torturix butterfly:
m += price75 == torturix


```

[['brandon', 'price60', 'swallowtail'], ['otis', 'price90', 'peacock'], ['rena', 'price45', 'peppered'], ['phillip', 'price75', 'torturix']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The ambassador with the 9 day visit will leave sometime after Fitzgerald.
Quinn will leave 2 months after Bender.
The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald.
Quinn will leave 1 month before the ambassador with the 7 day visit.

Entities:
diplomats: Bender, Fitzgerald, Owens, Quinn
months: January, February, March, April
durations: 2 day, 3 day, 7 day, 9 day
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diplomat, month, and duration)
# e.g. if bender == 1 and january == 1 and days2 == 1, then Bender will leave in January and for 2 days
bender, fitzgerald, owens, quinn = diplomats = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
days2, days3, days7, days9 = durations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diplomat_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
duration_to_int = {days2: 2, days3: 3, days7: 7, days9: 9}  # in days


# Helper functions (for formulating comparison constraints)
def leaves_after_than(var1, var2):
    """
    Formulate the constraint that var1 leaves after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def leaves_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diplomats)
m += AllDifferent(months)
m += AllDifferent(durations)

# Clue 1: The ambassador with the 9 day visit will leave sometime after Fitzgerald:
m += leaves_after_than(days9, fitzgerald)

# Clue 2: Quinn will leave 2 months after Bender:
m += leaves_exactly_after_than(quinn, bender, 2)

# Clue 3: The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald:
m += Xor([
    january == days3,
    january == fitzgerald
])

# Clue 4: Quinn will leave 1 month before the ambassador with the 7 day visit:
m += leaves_exactly_after_than(days7, quinn, -1)

```

[['bender', 'february', 'days9'], ['fitzgerald', 'january', 'days2'], ['owens', 'march', 'days7'], ['quinn', 'april', 'days3']]
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The person who came in at 8:00am asked for wheat bread.
Tricia came in a half-hour after Ora.
Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am.
Of the customer who ordered wheat bread; and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia.

Entities:
breads: flatbread, pumpernickel, rye bread, wheat bread
times: 7:00am, 7:30am, 8:00am, 8:30am
customers: Felicia, Isabel, Ora, Tricia
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of bread, time, and customer)
# e.g. if flatbread == 1 and time7 == 1 and felicia == 1, then Felicia came in at 7:00am and ordered flatbread
flatbread, pumpernickel, rye, wheat = breads = intvar(1, 4, shape=4)
time7, time730, time8, time830 = times = intvar(1, 4, shape=4)
felicia, isabel, ora, tricia = customers = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
bread_to_int = None  # N/A
time_to_int = {time7: 7, time730: 7.5, time8: 8, time830: 8.5}  # in hours
customer_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def came_in_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 came in diff hours after var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] == time_to_int[t2] + diff)
            for t1 in times for t2 in times]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(breads)
m += AllDifferent(times)
m += AllDifferent(customers)

# Clue 1: The person who came in at 8:00am asked for wheat bread:
m += time8 == wheat

# Clue 2: Tricia came in a half-hour after Ora:
m += came_in_after_than(tricia, ora, 0.5)

# Clue 3: Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am:
m += Xor([
    (felicia == flatbread) & (time730 == flatbread),
    (felicia == time7) & (flatbread == time730)
])

# Clue 4: Of the customer who ordered wheat bread; and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia:
m += Xor([
    (wheat == time830) & (pumpernickel == tricia),
    (wheat == tricia) & (pumpernickel == time830)
])

```

[['flatbread', 'time730', 'ora'], ['rye', 'time7', 'felicia'], ['wheat', 'time8', 'tricia'], ['pumpernickel', 'time830', 'isabel']]
True
True
True
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The 75 million year old fossil costs 500 dollars less than the pilodontus.
The senosaurus is 85 million years old.
The 75 million year old fossil costs 500 dollars less than the 78 million year old fossil.
The 75 million year old fossil costs less than the archadon.
The 69 million year old fossil costs 250 dollars more than the 78 million year old fossil.

Entities:
dinosaurs: archadon, mirasaurus, pilodontus, senosaurus
price: $500, $750, $1000, $1250
ages: 69 million, 75 million, 78 million, 85 million
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of dinosaur, price, and age)
# e.g. if archadon == 1 and price500 == 1 and age69 == 1, then the archadon is 69 million years old and costs $500
archadon, mirasaurus, pilodontus, senosaurus = dinosaurs = intvar(1, 4, shape=4)
price500, price750, price1000, price1250 = prices = intvar(1, 4, shape=4)
age69, age75, age78, age85 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
dinosaur_to_int = None  # N/A
price_to_int = {price500: 500, price750: 750, price1000: 1000, price1250: 1250}  # in dollars
age_to_int = {age69: 69, age75: 75, age78: 78, age85: 85}  # in million years


# Helper functions (for formulating comparison constraints)
def exactly_older_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff million years older than var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(age_to_int[a1] == age_to_int[a2] + diff)
            for a1 in ages for a2 in ages]


def costs_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


def costs_less_than(var1, var2):
    """
    Formulate the constraint that var1 costs less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(dinosaurs)
m += AllDifferent(prices)
m += AllDifferent(ages)

# Clue 1: The 75 million year old fossil costs 500 dollars less than the pilodontus:
m += costs_exactly_less_than(age75, pilodontus, 500)

# Clue 2: The senosaurus is 85 million years old:
m += senosaurus == age85

# Clue 3: The 75 million year old fossil costs 500 dollars less than the 78 million year old fossil:
m += costs_exactly_less_than(age75, age78, 500)

# Clue 4: The 75 million year old fossil costs less than the archadon:
m += costs_less_than(age75, archadon)

# Clue 5: The 69 million year old fossil costs 250 dollars more than the 78 million year old fossil:
m += costs_exactly_less_than(age78, age69, 250)


```

[['archadon', 'price1250', 'age69'], ['pilodontus', 'price1000', 'age78'], ['mirasaurus', 'price500', 'age75'], ['senosaurus', 'price750', 'age85']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Henrietta's task starts 2 hours after Glenn's job.
Glenn's task is the dining room.
Glenn's chore starts 1 hour after the mud room assignment.
Henrietta's task is the living room.
The mud room assignment starts sometime before Willie's assignment.

Entities:
children: Glenn, Henrietta, Olivia, Willie
times: 8:00am, 9:00am, 10:00am, 11:00am
rooms: dining room, laundry room, living room, mud room
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of child, time, and room)
# e.g. if glenn == 1 and time8 == 1 and dining_room == 1, then Glenn's task starts at 8:00am and is the dining room
glenn, henrietta, olivia, willie = children = intvar(1, 4, shape=4)
time8, time9, time10, time11 = times = intvar(1, 4, shape=4)
dining_room, laundry_room, living_room, mud_room = rooms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
child_to_int = None  # N/A
time_to_int = {time8: 8, time9: 9, time10: 10, time11: 11}  # in hours
room_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff hours after var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] == time_to_int[t2] + diff)
            for t1 in times for t2 in times]


def starts_before_than(var1, var2):
    """
    Formulate the constraint that var1 starts before var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] < time_to_int[t2])
            for t1 in times for t2 in times]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(children)
m += AllDifferent(times)
m += AllDifferent(rooms)

# Clue 1: Henrietta's task starts 2 hours after Glenn's job:
m += starts_exactly_after_than(henrietta, glenn, 2)

# Clue 2: Glenn's task is the dining room:
m += glenn == dining_room

# Clue 3: Glenn's chore starts 1 hour after the mud room assignment:
m += starts_exactly_after_than(glenn, mud_room, 1)

# Clue 4: Henrietta's task is the living room:
m += henrietta == living_room

# Clue 5: The mud room assignment starts sometime before Willie's assignment:
m += starts_before_than(mud_room, willie)

```

[['glenn', 'time9', 'dining_room'], ['willie', 'time10', 'laundry_room'], ['henrietta', 'time11', 'living_room'], ['olivia', 'time8', 'mud_room']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Mr. Ayers will dive on July 14.
Mr. Drake will dive 1 day after the diver going out with Hilda.
The customer going out on July 14 will go out with Hilda.
The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14.
The customer going out with Nadine will dive 1 day before Mr. Ayers.

Entities:
customers: Mr. Ayers, Mr. Drake, Mr. Erickson, Mr. Gallegos
dates: July 13, July 14, July 15, July 16
guides: Hilda, Jorge, Nadine, Vicki
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, date, and guide)
# e.g. if ayers == 1 and jul14 == 1 and hilda == 1, then Mr. Ayers will dive on July 14 and will go out with Hilda
ayers, drake, erickson, gallegos = customers = intvar(1, 4, shape=4)
jul13, jul14, jul15, jul16 = dates = intvar(1, 4, shape=4)
hilda, jorge, nadine, vicki = guides = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
date_to_int = {jul13: 13, jul14: 14, jul15: 15, jul16: 16}  # in days
guide_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def diving_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 dives exactly diff days after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(date_to_int[d1] == date_to_int[d2] + diff)
            for d1 in dates for d2 in dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(dates)
m += AllDifferent(guides)

# Clue 1: Mr. Ayers will dive on July 14:
m += ayers == jul14

# Clue 2: Mr. Drake will dive 1 day after the diver going out with Hilda:
m += diving_exactly_after_than(drake, hilda, 1)

# Clue 3: The customer going out on July 14 will go out with Hilda:
m += jul14 == hilda

# Clue 4: The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14:
m += Xor([
    vicki == gallegos,
    vicki == jul14
])

# Clue 5: The customer going out with Nadine will dive 1 day before Mr. Ayers:
m += diving_exactly_after_than(ayers, nadine, -1)


```

[['gallegos', 'jul16', 'vicki'], ['erickson', 'jul13', 'jorge'], ['ayers', 'jul14', 'hilda'], ['drake', 'jul15', 'nadine']]
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Ethel Street project begins 1 month after Cal Craft's project.
The job starting in May will be headed by Ed Erickson.
The Juniper Lane project starts in April.
Al Anderson's project begins 2 months before the Fred Lane project.

Entities:
Streets: Ethel Street, Fred Lane, Juniper Lane, Quince Street
managers: Al Anderson, Cal Craft, Ed Erickson, Hal Hamilton
months: April, May, June, July
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of street, manager, and month)
# e.g. if ethel == 1 and al == 1 and april == 1, then Ethel Street project begins in April and is headed by Al Anderson
ethel, fred, juniper, quince = streets = intvar(1, 4, shape=4)
al, cal, ed, hal = managers = intvar(1, 4, shape=4)
april, may, june, july = months = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
street_to_int = None  # N/A
manager_to_int = None  # N/A
month_to_int = {april: 4, may: 5, june: 6, july: 7}  # in months


# Helper functions (for formulating comparison constraints)
def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


def starts_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff months before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] - diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(streets)
m += AllDifferent(managers)
m += AllDifferent(months)

# Clue 1: The Ethel Street project begins 1 month after Cal Craft's project:
m += starts_exactly_after_than(ethel, cal, 1)

# Clue 2: The job starting in May will be headed by Ed Erickson:
m += may == ed

# Clue 3: The Juniper Lane project starts in April:
m += juniper == april

# Clue 4: Al Anderson's project begins 2 months before the Fred Lane project:
m += starts_exactly_before_than(al, fred, 2)

```

[['ethel', 'hal', 'july'], ['fred', 'cal', 'june'], ['juniper', 'al', 'april'], ['quince', 'ed', 'may']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Ingram had 7 goals this season.
The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers.
Parrish scored 1 goal more than Quinn.
The player with 9 goals is from the Ice Hogs.
Ingram is either the player from the Checkers or the player with 6 goals.

Entities:
players: Ingram, Parrish, Quinn, Underwood
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Monsters
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, goal, and team)
# e.g. if ingram == 1 and goals6 == 1 and checkers == 1, then Ingram scored 6 goals and is from the Checkers
ingram, parrish, quinn, underwood = players = intvar(1, 4, shape=4)
goals6, goals7, goals8, goals9 = goals = intvar(1, 4, shape=4)
checkers, comets, ice_hogs, monsters = teams = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
goal_to_int = {goals6: 6, goals7: 7, goals8: 8, goals9: 9}  # in goals
team_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff goals more than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goal_to_int[g1] == goal_to_int[g2] + diff)
            for g1 in goals for g2 in goals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(goals)
m += AllDifferent(teams)

# Clue 1: Ingram had 7 goals this season:
m += ingram == goals7

# Clue 2: The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers:
m += AllDifferent([underwood, ice_hogs, monsters, checkers])

# Clue 3: Parrish scored 1 goal more than Quinn:
m += scored_exactly_more_than(parrish, quinn, 1)

# Clue 4: The player with 9 goals is from the Ice Hogs:
m += goals9 == ice_hogs

# Clue 5: Ingram is either the player from the Checkers or the player with 6 goals:
m += Xor([
    ingram == checkers,
    ingram == goals6
])


```

[['ingram', 'goals7', 'checkers'], ['quinn', 'goals8', 'monsters'], ['underwood', 'goals6', 'comets'], ['parrish', 'goals9', 'ice_hogs']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Natasha's study starts 2 months after the project on the Odyssey.
Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March.
The study on the Liberty starts 2 months after Eunice's project.

Entities:
students: Eunice, Felix, Natasha, Stacy
months: March, April, May, June
ships: Escape, Liberty, Odyssey, Osprey
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, month, and ship)
# e.g. if eunice == 1 and march == 1 and escape == 1, then Eunice's project on the Escape starts in March
eunice, felix, natasha, stacy = students = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
escape, liberty, odyssey, osprey = ships = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
month_to_int = {march: 3, april: 4, may: 5, june: 6}  # in months
ship_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(months)
m += AllDifferent(ships)

# Clue 1: Natasha's study starts 2 months after the project on the Odyssey:
m += starts_exactly_after_than(natasha, odyssey, 2)

# Clue 2: Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March:
m += Xor([
    (liberty == felix) & (escape == march),
    (liberty == march) & (escape == felix)
])

# Clue 3: The study on the Liberty starts 2 months after Eunice's project:
m += starts_exactly_after_than(liberty, eunice, 2)

```

[['eunice', 'march', 'escape'], ['felix', 'may', 'liberty'], ['natasha', 'june', 'osprey'], ['stacy', 'april', 'odyssey']]
True
True
True
Wrong: 0, Total: 6
---------------------------------------------------------------------------------------------

Clues:
The project headed by Dr. Golden will go online sometime before the Zynga Complex.
The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC.
The Egert Facility will go online 1 year after the ISON-X42.
The project headed by Dr. Owens will go online 1 year after the ISON-X42.

Entities:
years: 2016, 2017, 2018, 2019
names: Bale-Hahn SSC, Egert Facility, ISON-X42, Zynga Complex
scientists: Dr. Farley, Dr. Golden, Dr. Owens, Dr. Weber
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of year, name, and scientist)
# e.g. if bale_hahn == 1 and year2016 == 1 and dr_farley == 1, then Bale-Hahn SSC will go online in 2016 and is headed by Dr. Farley
bale_hahn, egert, ison_x42, zynga = names = intvar(1, 4, shape=4)
year2016, year2017, year2018, year2019 = years = intvar(1, 4, shape=4)
dr_farley, dr_golden, dr_owens, dr_weber = scientists = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
year_to_int = {year2016: 2016, year2017: 2017, year2018: 2018, year2019: 2019}  # in years
scientist_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def goes_online_after(var1, var2):
    """
    Formulate the constraint that var1 goes online after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


def goes_online_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 goes online exactly diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(years)
m += AllDifferent(scientists)

# Clue 1: The project headed by Dr. Golden will go online sometime before the Zynga Complex:
m += goes_online_after(zynga, dr_golden)

# Clue 2: The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC:
m += goes_online_exactly_after_than(bale_hahn, dr_weber, 1)

# Clue 3: The Egert Facility will go online 1 year after the ISON-X42:
m += goes_online_exactly_after_than(egert, ison_x42, 1)

# Clue 4: The project headed by Dr. Owens will go online 1 year after the ISON-X42:
m += goes_online_exactly_after_than(dr_owens, ison_x42, 1)


```

[['bale_hahn', 'year2019', 'dr_farley'], ['ison_x42', 'year2016', 'dr_golden'], ['zynga', 'year2018', 'dr_weber'], ['egert', 'year2017', 'dr_owens']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The model made by Torvia costs 25 dollars more than the model made by Honwa.
The camera made by Honwa is either the Zenix 2C or the MX-827.
Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero.
The Zenix 2C costs less than the FC-520.

Entities:
companies: Banion, Dayero, Honwa, Torvia
prices: $550, $575, $600, $625
cameras: DM-5000, FC-520, MX-827, Zenix 2C
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of company, price, and camera)
# e.g. if banion == 1 and price550 == 1 and dm5000 == 1, then Banion makes the DM-5000 that costs $550
banion, dayero, honwa, torvia = companies = intvar(1, 4, shape=4)
price550, price575, price600, price625 = prices = intvar(1, 4, shape=4)
dm5000, fc520, mx827, zenix2c = cameras = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
company_to_int = None  # N/A
price_to_int = {price550: 550, price575: 575, price600: 600, price625: 625}  # in dollars
camera_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def costs_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


def costs_more_than(var1, var2):
    """
    Formulate the constraint that var1 costs more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(companies)
m += AllDifferent(prices)
m += AllDifferent(cameras)

# Clue 1: The model made by Torvia costs 25 dollars more than the model made by Honwa:
m += costs_exactly_more_than(torvia, honwa, 25)

# Clue 2: The camera made by Honwa is either the Zenix 2C or the MX-827:
m += Xor([
    honwa == zenix2c,
    honwa == mx827
])

# Clue 3: Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero:
m += Xor([
    (price600 == honwa) & (fc520 == dayero),
    (price600 == dayero) & (fc520 == honwa)
])

# Clue 4: The Zenix 2C costs less than the FC-520:
m += costs_more_than(fc520, zenix2c)


```

[['dayero', 'price575', 'fc520'], ['honwa', 'price600', 'mx827'], ['torvia', 'price625', 'dm5000'], ['banion', 'price550', 'zenix2c']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The football facility holds more people than Underwood Arena.
The basketball facility holds 80 more people than Vazquez Arena.
Young Arena holds 230 people.
Underwood Arena holds 40 fewer people than Vazquez Arena.
The facility with seating for 190 people is either the lacrosse facility or Underwood Arena.

Entities:
arenas: Gentry, Underwood, Vazquez, Young
capacities: 110, 150, 190, 230
sports: basketball, football, lacrosse, soccer
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of arena, capacity, and sport)
# e.g. if gentry == 1 and capacity110 == 1 and basketball == 1, then Gentry has a capacity of 110 and is for basketball
gentry, underwood, vazquez, young = arenas = intvar(1, 4, shape=4)
capacity110, capacity150, capacity190, capacity230 = capacities = intvar(1, 4, shape=4)
basketball, football, lacrosse, soccer = sports = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
arena_to_int = None  # N/A
capacity_to_int = {capacity110: 110, capacity150: 150, capacity190: 190, capacity230: 230}  # in people
sport_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def holds_more_than(var1, var2):
    """
    Formulate the constraint that var1 holds more people than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(capacity_to_int[c1] > capacity_to_int[c2])
            for c1 in capacities for c2 in capacities]


def holds_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 holds exactly diff more people than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(capacity_to_int[c1] == capacity_to_int[c2] + diff)
            for c1 in capacities for c2 in capacities]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(arenas)
m += AllDifferent(capacities)
m += AllDifferent(sports)

# Clue 1: The football facility holds more people than Underwood Arena:
m += holds_more_than(football, underwood)

# Clue 2: The basketball facility holds 80 more people than Vazquez Arena:
m += holds_exactly_more_than(basketball, vazquez, 80)

# Clue 3: Young Arena holds 230 people:
m += young == capacity230

# Clue 4: Underwood Arena holds 40 fewer people than Vazquez Arena:
m += holds_exactly_more_than(vazquez, underwood, 40)

# Clue 5: The facility with seating for 190 people is either the lacrosse facility or Underwood Arena:
m += Xor([
    capacity190 == lacrosse,
    capacity190 == underwood
])


```

[['vazquez', 'capacity150', 'football'], ['underwood', 'capacity110', 'soccer'], ['young', 'capacity230', 'basketball'], ['gentry', 'capacity190', 'lacrosse']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hope paid less than Delia.
Patricia had the cappuccino.
The one who had the cafe americano paid 1 dollar more than Patricia.
Hope paid more than the one who had the cafe americano.
The one who had the chai tea paid 1 dollar more than the one who had the cafe americano.

Entities:
names: Delia, Hope, Patricia, Wayne
prices: $5, $6, $7, $8
drinks: cafe americano, cafe latte, cappuccino, chai tea
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, price, and drink)
# e.g. if delia == 1 and price5 == 1 and americano == 1, then Delia paid $5 for a cafe americano
delia, hope, patricia, wayne = names = intvar(1, 4, shape=4)
price5, price6, price7, price8 = prices = intvar(1, 4, shape=4)
americano, latte, cappuccino, chai = drinks = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
price_to_int = {price5: 5, price6: 6, price7: 7, price8: 8}  # in dollars
drink_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(prices)
m += AllDifferent(drinks)

# Clue 1: Hope paid less than Delia:
m += paid_more_than(delia, hope)

# Clue 2: Patricia had the cappuccino:
m += patricia == cappuccino

# Clue 3: The one who had the cafe americano paid 1 dollar more than Patricia:
m += paid_exactly_more_than(americano, patricia, 1)

# Clue 4: Hope paid more than the one who had the cafe americano:
m += paid_more_than(hope, americano)

# Clue 5: The one who had the chai tea paid 1 dollar more than the one who had the cafe americano:
m += paid_exactly_more_than(chai, americano, 1)

```

[['delia', 'price8', 'latte'], ['wayne', 'price6', 'americano'], ['hope', 'price7', 'chai'], ['patricia', 'price5', 'cappuccino']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH.
The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH.
The Awick drove somewhat less than the automobile with a high speed of 81 MPH.
The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH.

Entities:
cars: Awick, Leden, Poltris, Versem
distances: 525 miles, 550 miles, 575 miles, 600 miles
speeds: 62 MPH, 69 MPH, 75 MPH, 81 MPH
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of car, distance, and speed)
# e.g. if awick == 1 and miles525 == 1 and speed62 == 1, then Awick drove 525 miles at a high speed of 62 MPH
awick, leden, poltris, versem = cars = intvar(1, 4, shape=4)
miles525, miles550, miles575, miles600 = distances = intvar(1, 4, shape=4)
speed62, speed69, speed75, speed81 = speeds = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
car_to_int = None  # N/A
distance_to_int = {miles525: 525, miles550: 550, miles575: 575, miles600: 600}  # in miles
speed_to_int = {speed62: 62, speed69: 69, speed75: 75, speed81: 81}  # in MPH


# Helper functions (for formulating comparison constraints)
def drove_farther_than(var1, var2):
    """
    Formulate the constraint that var1 drove farther than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(distance_to_int[d1] > distance_to_int[d2])
            for d1 in distances for d2 in distances]


def drove_exactly_farther_than(var1, var2, diff):
    """
    Formulate the constraint that var1 drove exactly diff miles farther than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(distance_to_int[d1] == distance_to_int[d2] + diff)
            for d1 in distances for d2 in distances]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(cars)
m += AllDifferent(distances)
m += AllDifferent(speeds)

# Clue 1: The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH:
m += drove_exactly_farther_than(leden, speed75, 25)

# Clue 2: The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH:
m += drove_exactly_farther_than(poltris, speed69, 25)

# Clue 3: The Awick drove somewhat less than the automobile with a high speed of 81 MPH:
m += drove_farther_than(speed81, awick)

# Clue 4: The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH:
m += drove_farther_than(speed69, speed81)

```

[['versem', 'miles575', 'speed69'], ['awick', 'miles525', 'speed75'], ['leden', 'miles550', 'speed81'], ['poltris', 'miles600', 'speed62']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The report from Zearing was either the August 4 report or Edith Estes's report.
Hal Harrison's report was submitted sometime after Iva Ingram's sighting.
The August 5 sighting was from Islesboro.
The report from Tarzana was submitted 1 day before the sighting from Islesboro.
Benny Baron's report was received on August 7.

Entities:
witnesses: Benny Baron, Edith Estes, Hal Harrison, Iva Ingram
dates: August 4, August 5, August 6, August 7
towns: Islesboro, Long Barn, Tarzana, Zearing
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of witness, date, and town)
# e.g. if benny == 1 and aug4 == 1 and islesboro == 1, then Benny Baron's report was received on August 4 from Islesboro
benny, edith, hal, iva = witnesses = intvar(1, 4, shape=4)
aug4, aug5, aug6, aug7 = dates = intvar(1, 4, shape=4)
islesboro, long_barn, tarzana, zearing = towns = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
witness_to_int = None  # N/A
date_to_int = {aug4: 4, aug5: 5, aug6: 6, aug7: 7}  # in days
town_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def submitted_after_than(var1, var2):
    """
    Formulate the constraint that var1 submitted after var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(date_to_int[w1] > date_to_int[w2])
            for w1 in dates for w2 in dates]


def submitted_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 submitted exactly diff days after var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(date_to_int[w1] == date_to_int[w2] + diff)
            for w1 in dates for w2 in dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(witnesses)
m += AllDifferent(dates)
m += AllDifferent(towns)

# Clue 1: The report from Zearing was either the August 4 report or Edith Estes's report:
m += Xor([
    zearing == aug4,
    zearing == edith
])

# Clue 2: Hal Harrison's report was submitted sometime after Iva Ingram's sighting:
m += submitted_after_than(hal, iva)

# Clue 3: The August 5 sighting was from Islesboro:
m += aug5 == islesboro

# Clue 4: The report from Tarzana was submitted 1 day before the sighting from Islesboro:
m += submitted_exactly_after_than(tarzana, islesboro, -1)

# Clue 5: Benny Baron's report was received on August 7:
m += benny == aug7

```

[['hal', 'aug5', 'islesboro'], ['iva', 'aug4', 'tarzana'], ['edith', 'aug6', 'zearing'], ['benny', 'aug7', 'long_barn']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird.
The condor with a wingspan of 114 inches is 5 years old.
Pepper has a wingspan of 114 inches.
The four condors are the 9-year-old bird, Pepper, Merlin and the condor with a wingspan of 106 inches.
The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird.

Entities:
wingspans: 102 inches, 106 inches, 110 inches, 114 inches
names: Merlin, Pepper, Spike, Sunshine
ages: 4, 5, 8, 9
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, wingspan, and age)
# e.g. if merlin == 1 and inches102 == 1 and age4 == 1, then Merlin has a wingspan of 102 inches and is 4 years old
merlin, pepper, spike, sunshine = names = intvar(1, 4, shape=4)
wingspan102, wingspan106, wingspan110, wingspan114 = wingspans = intvar(1, 4, shape=4)
age4, age5, age8, age9 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
wingspan_to_int = {wingspan102: 102, wingspan106: 106, wingspan110: 110, wingspan114: 114}  # in inches
age_to_int = {age4: 4, age5: 5, age8: 8, age9: 9}  # in years


# Helper functions (for formulating comparison constraints)
def wingspan_shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has a wingspan diff inches shorter than var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(wingspan_to_int[w1] == wingspan_to_int[w2] - diff)
            for w1 in wingspans for w2 in wingspans]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(wingspans)
m += AllDifferent(ages)

# Clue 1: Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird:
m += Xor([
    sunshine == wingspan102,
    sunshine == age5
])

# Clue 2: The condor with a wingspan of 114 inches is 5 years old:
m += wingspan114 == age5

# Clue 3: Pepper has a wingspan of 114 inches:
m += pepper == wingspan114

# Clue 4: The four condors are the 9-year-old bird, Pepper, Merlin and the condor with a wingspan of 106 inches:
m += AllDifferent([age9, pepper, merlin, wingspan106])

# Clue 5: The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird:
m += wingspan_shorter_than(age9, age4, 4)

```

[['spike', 'wingspan106', 'age4'], ['sunshine', 'wingspan102', 'age9'], ['pepper', 'wingspan114', 'age5'], ['merlin', 'wingspan110', 'age8']]
True
True
True
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The puzzle with the autumn leaves theme has somewhat more than the jigsaw puzzle with the rustic village theme.
The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme and the puzzle with 1000 pieces.
The jigsaw puzzle made by Buralde has the outer space theme.
The jigsaw puzzle made by Denlend has somewhat fewer than the jigsaw puzzle with the outer space theme.
The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend.

Entities:
companies: Buralde, Denlend, Irycia, Kimsight
pieces: 250, 500, 750, 1000
themes: autumn leaves, coral reef, outer space, rustic village
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of company, pieces, and theme)
# e.g. if buralde == 1 and pieces250 == 1 and autumn_leaves == 1, then Buralde made a 250-piece puzzle with an autumn leaves theme
buralde, denlend, irycia, kimsight = companies = intvar(1, 4, shape=4)
pieces250, pieces500, pieces750, pieces1000 = pieces = intvar(1, 4, shape=4)
autumn_leaves, coral_reef, outer_space, rustic_village = themes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
company_to_int = None  # N/A
pieces_to_int = {pieces250: 250, pieces500: 500, pieces750: 750, pieces1000: 1000}  # in pieces
theme_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def has_more_pieces_than(var1, var2):
    """
    Formulate the constraint that var1 has more pieces than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pieces_to_int[p1] > pieces_to_int[p2])
            for p1 in pieces for p2 in pieces]


def has_exactly_more_pieces_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff more pieces than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pieces_to_int[p1] == pieces_to_int[p2] + diff)
            for p1 in pieces for p2 in pieces]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(companies)
m += AllDifferent(pieces)
m += AllDifferent(themes)

# Clue 1: The puzzle with the autumn leaves theme has somewhat more than the jigsaw puzzle with the rustic village theme:
m += has_more_pieces_than(autumn_leaves, rustic_village)

# Clue 2: The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme and the puzzle with 1000 pieces:
m += AllDifferent([buralde, rustic_village, autumn_leaves, pieces1000])

# Clue 3: The jigsaw puzzle made by Buralde has the outer space theme:
m += buralde == outer_space

# Clue 4: The jigsaw puzzle made by Denlend has somewhat fewer than the jigsaw puzzle with the outer space theme:
m += has_more_pieces_than(outer_space, denlend)

# Clue 5: The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend:
m += has_exactly_more_pieces_than(kimsight, denlend, 250)


```

[['buralde', 'pieces750', 'outer_space'], ['denlend', 'pieces250', 'rustic_village'], ['kimsight', 'pieces500', 'autumn_leaves'], ['irycia', 'pieces1000', 'coral_reef']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The worker who works in the green section served more riders than Brett.
Peter served 25 fewer riders than Willis.
Brett served more riders than Peter.
The person who works in the yellow section served 25 more riders than the worker who works in the orange section.
Peter is either the person who served 125 riders or the person who works in the blue section.

Entities:
employees: Brett, Peter, Victor, Willis
rides: 50 riders, 75 riders, 100 riders, 125 riders
section: blue, green, orange, yellow
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of employee, rides, and section)
# e.g. if brett == 1 and rides50 == 1 and blue == 1, then Brett served 50 riders and works in the blue section
brett, peter, victor, willis = employees = intvar(1, 4, shape=4)
rides50, rides75, rides100, rides125 = rides = intvar(1, 4, shape=4)
blue, green, orange, yellow = sections = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
employee_to_int = None  # N/A
rides_to_int = {rides50: 50, rides75: 75, rides100: 100, rides125: 125}  # in number of riders
section_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def served_more_than(var1, var2):
    """
    Formulate the constraint that var1 served more riders than var2.
    """
    return [((r1 == var1) & (r2 == var2)).implies(rides_to_int[r1] > rides_to_int[r2])
            for r1 in rides for r2 in rides]


def served_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 served exactly diff riders more than var2.
    """
    return [((r1 == var1) & (r2 == var2)).implies(rides_to_int[r1] == rides_to_int[r2] + diff)
            for r1 in rides for r2 in rides]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(employees)
m += AllDifferent(rides)
m += AllDifferent(sections)

# Clue 1: The worker who works in the green section served more riders than Brett:
m += served_more_than(green, brett)

# Clue 2: Peter served 25 fewer riders than Willis:
m += served_exactly_more_than(willis, peter, 25)

# Clue 3: Brett served more riders than Peter:
m += served_more_than(brett, peter)

# Clue 4: The person who works in the yellow section served 25 more riders than the worker who works in the orange section:
m += served_exactly_more_than(yellow, orange, 25)

# Clue 5: Peter is either the person who served 125 riders or the person who works in the blue section:
m += Xor([
    peter == rides125,
    peter == blue
])


```

[['brett', 'rides100', 'yellow'], ['peter', 'rides50', 'blue'], ['willis', 'rides75', 'orange'], ['victor', 'rides125', 'green']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The team from Venezuela finished with 4 gold medals.
The squad that won 2 gold medals ended with 6 silver medals.
The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals and the squad that won 8 silver medals.
The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals.

Entities:
countries: Dominica, Jordan, Venezuela, Zimbabwe
gold medals: 1, 2, 3, 4
silver medals: 2, 5, 6, 8
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same pair of country, gold medals, and silver medals)
# e.g. if dominica == 1 and gold1 == 1 and silver2 == 1, then Dominica won 1 gold medal and 2 silver medals
dominica, jordan, venezuela, zimbabwe = countries = intvar(1, 4, shape=4)
gold1, gold2, gold3, gold4 = gold_medals = intvar(1, 4, shape=4)
silver2, silver5, silver6, silver8 = silver_medals = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
country_to_int = None  # N/A
gold_to_int = {gold1: 1, gold2: 2, gold3: 3, gold4: 4}  # in gold medals
silver_to_int = {silver2: 2, silver5: 5, silver6: 6, silver8: 8}  # in silver medals


# Helper functions (for formulating comparison constraints)
def exactly_fewer_gold_medals_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff fewer gold medals than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(gold_to_int[g1] == gold_to_int[g2] - diff)
            for g1 in gold_medals for g2 in gold_medals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(countries)
m += AllDifferent(gold_medals)
m += AllDifferent(silver_medals)

# Clue 1: The team from Venezuela finished with 4 gold medals:
m += venezuela == gold4

# Clue 2: The squad that won 2 gold medals ended with 6 silver medals:
m += gold2 == silver6

# Clue 3: The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals and the squad that won 8 silver medals:
m += AllDifferent([zimbabwe, gold3, silver6, silver8])

# Clue 4: The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals:
m += exactly_fewer_gold_medals_than(dominica, silver5, 1)

```

[['jordan', 'gold3', 'silver5'], ['venezuela', 'gold4', 'silver8'], ['dominica', 'gold2', 'silver6'], ['zimbabwe', 'gold1', 'silver2']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The Vorckin impact crater is 125 meters wide.
The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater.
The Ordovician impact crater is 25 meters wider than the Jurassic impact crater.
The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one.
The Cersay impact crater was formed during the Jurassic period.

Entities:
craters: Cersay, Moriwa, Ormagh, Vorckin
diameters: 100 meters, 125 meters, 150 meters, 175 meters
periods: Jurassic, Ordovician, Permian, Triassic
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of crater, diameter, and period)
# e.g. if cersay == 1 and meters100 == 1 and jurassic == 1, then Cersay crater is 100 meters wide and from the Jurassic period
cersay, moriwa, ormagh, vorckin = craters = intvar(1, 4, shape=4)
meters100, meters125, meters150, meters175 = diameters = intvar(1, 4, shape=4)
jurassic, ordovician, permian, triassic = periods = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
crater_to_int = None  # N/A
diameter_to_int = {meters100: 100, meters125: 125, meters150: 150, meters175: 175}  # in meters
period_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def exactly_wider_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff meters wider than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(diameter_to_int[d1] == diameter_to_int[d2] + diff)
            for d1 in diameters for d2 in diameters]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(craters)
m += AllDifferent(diameters)
m += AllDifferent(periods)

# Clue 1: The Vorckin impact crater is 125 meters wide:
m += vorckin == meters125

# Clue 2: The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater:
m += Xor([
    meters150 == ordovician,
    meters150 == permian
])

# Clue 3: The Ordovician impact crater is 25 meters wider than the Jurassic impact crater:
m += exactly_wider_than(ordovician, jurassic, 25)

# Clue 4: The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one:
m += Xor([
    triassic == ormagh,
    triassic == meters150
])

# Clue 5: The Cersay impact crater was formed during the Jurassic period:
m += cersay == jurassic


```

[['moriwa', 'meters150', 'permian'], ['cersay', 'meters100', 'jurassic'], ['ormagh', 'meters175', 'triassic'], ['vorckin', 'meters125', 'ordovician']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The butterfly that was auctioned 7th sold for 20 dollars less than the insect won by Daniel.
The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th and the butterfly won by Roland.
The butterfly won by Gabriel was the 8th lot.

Entities:
winners: Daniel, Gabriel, Roland, Vincent
prices: $250, $260, $270, $280
orders: 3rd, 4th, 7th, 8th
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of winner, price, and order)
# e.g. if daniel == 1 and price250 == 1 and order3rd == 1, then Daniel won the butterfly auctioned 3rd for $250
daniel, gabriel, roland, vincent = winners = intvar(1, 4, shape=4)
price250, price260, price270, price280 = prices = intvar(1, 4, shape=4)
order3rd, order4th, order7th, order8th = orders = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
winner_to_int = None  # N/A
price_to_int = {price250: 250, price260: 260, price270: 270, price280: 280}  # in dollars
order_to_int = {order3rd: 3, order4th: 4, order7th: 7, order8th: 8}  # in auction order


# Helper functions (for formulating comparison constraints)
def sold_for_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 sold for exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(winners)
m += AllDifferent(prices)
m += AllDifferent(orders)

# Clue 1: The butterfly that was auctioned 7th sold for 20 dollars less than the insect won by Daniel:
m += sold_for_exactly_less_than(order7th, daniel, 20)

# Clue 2: The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th and the butterfly won by Roland:
m += AllDifferent([price260, order4th, order7th, roland])

# Clue 3: The butterfly won by Gabriel was the 8th lot:
m += gabriel == order8th

```

[['gabriel', 'price260', 'order8th'], ['vincent', 'price250', 'order7th'], ['daniel', 'price270', 'order4th'], ['roland', 'price280', 'order3rd']]
True
True
True
Wrong: 0, Total: 6
---------------------------------------------------------------------------------------------

Clues:
Greg threw the red darts.
Alton scored 7 points higher than Evan.
The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts.
The player who scored 48 points threw the yellow darts.
Greg scored 7 points higher than Jeffrey.

Entities:
players: Alton, Evan, Greg, Jeffrey
scores: 41, 48, 55, 62
colors: green, red, white, yellow
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, score, and color)
# e.g. if alton == 1 and score41 == 1 and green == 1, then Alton scored 41 points and threw green darts
alton, evan, greg, jeffrey = players = intvar(1, 4, shape=4)
score41, score48, score55, score62 = scores = intvar(1, 4, shape=4)
green, red, white, yellow = colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
score_to_int = {score41: 41, score48: 48, score55: 55, score62: 62}  # in points
color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_higher_than(var1, var2):
    """
    Formulate the constraint that var1 scored higher than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] > score_to_int[s2])
            for s1 in scores for s2 in scores]


def scored_exactly_higher_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff points higher than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] == score_to_int[s2] + diff)
            for s1 in scores for s2 in scores]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(scores)
m += AllDifferent(colors)

# Clue 1: Greg threw the red darts:
m += greg == red

# Clue 2: Alton scored 7 points higher than Evan:
m += scored_exactly_higher_than(alton, evan, 7)

# Clue 3: The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts:
m += scored_higher_than(yellow, white)

# Clue 4: The player who scored 48 points threw the yellow darts:
m += score48 == yellow

# Clue 5: Greg scored 7 points higher than Jeffrey:
m += scored_exactly_higher_than(greg, jeffrey, 7)


```

[['alton', 'score48', 'yellow'], ['evan', 'score41', 'white'], ['jeffrey', 'score55', 'green'], ['greg', 'score62', 'red']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Vasquez will leave sometime after Macdonald.
Vasquez will leave 1 month before the ambassador with the 5 day visit.
Gilbert is either the person leaving in January or the ambassador with the 4 day visit.
Macdonald will leave 1 month before the ambassador with the 4 day visit.
The ambassador with the 4 day visit will leave sometime before the ambassador with the 9 day visit.

Entities:
diplomats: Gilbert, Macdonald, Pickett, Vasquez
months: January, February, March, April
durations: 4 day, 5 day, 9 day, 10 day
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of diplomat, month, and duration)
# e.g. if gilbert == 1 and january == 1 and days4 == 1, then Gilbert will leave in January and for 4 days
gilbert, macdonald, pickett, vasquez = diplomats = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
days4, days5, days9, days10 = durations = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
diplomat_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
duration_to_int = {days4: 4, days5: 5, days9: 9, days10: 10}  # in days


# Helper functions (for formulating comparison constraints)
def leaves_after(var1, var2):
    """
    Formulate the constraint that var1 leaves after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] > month_to_int[m2])
            for m1 in months for m2 in months]


def leaves_exactly_after(var1, var2, diff):
    """
    Formulate the constraint that var1 leaves exactly diff months before var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(diplomats)
m += AllDifferent(months)
m += AllDifferent(durations)

# Clue 1: Vasquez will leave sometime after Macdonald:
m += leaves_after(vasquez, macdonald)

# Clue 2: Vasquez will leave 1 month before the ambassador with the 5 day visit:
m += leaves_exactly_after(vasquez, days5, -1)

# Clue 3: Gilbert is either the person leaving in January or the ambassador with the 4 day visit:
m += Xor([
    gilbert == january,
    gilbert == days4
])

# Clue 4: Macdonald will leave 1 month before the ambassador with the 4 day visit:
m += leaves_exactly_after(macdonald, days4, -1)

# Clue 5: The ambassador with the 4 day visit will leave sometime before the ambassador with the 9 day visit:
m += leaves_after(days4, days9)


```

[['gilbert', 'january', 'days9'], ['macdonald', 'february', 'days10'], ['pickett', 'april', 'days5'], ['vasquez', 'march', 'days4']]
True
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hattie and the student who will major in Theology are different students.
The student who will major in English is either Tracy or the student who received the $25,000 scholarship.
Hattie was awarded $10,000 more than the person who will major in Physics.
The student who received the $40,000 scholarship will major in Theology.
Ora was awarded some amount less than the student who will major in Archaeology.

Entities:
names: Erma, Hattie, Ora, Tracy
scholarships: $25,000, $30,000, $35,000, $40,000
majors: Archaeology, English, Physics, Theology
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, scholarship, and major)
# e.g. if erma == 1 and theology == 1 and scholarship25000 == 1, then Erma will major in Theology and receive the $25,000 scholarship
erma, hattie, ora, tracy = names = intvar(1, 4, shape=4)
theology, english, physics, archaeology = majors = intvar(1, 4, shape=4)
scholarship25000, scholarship30000, scholarship35000, scholarship40000 = scholarships = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
scholarship_to_int = {scholarship25000: 25000, scholarship30000: 30000, scholarship35000: 35000, scholarship40000: 40000}  # in dollars
major_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def awarded_more_than(var1, var2):
    """
    Formulate the constraint that var1 was awarded more than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] > scholarship_to_int[s2])
            for s1 in scholarships for s2 in scholarships]


def awarded_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was awarded exactly $diff more than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(scholarship_to_int[s1] == scholarship_to_int[s2] + diff)
            for s1 in scholarships for s2 in scholarships]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(scholarships)
m += AllDifferent(majors)

# Clue 1: Hattie and the student who will major in Theology are different students:
m += hattie != theology

# Clue 2: The student who will major in English is either Tracy or the student who received the $25,000 scholarship:
m += Xor([
    english == tracy,
    english == scholarship25000
])

# Clue 3: Hattie was awarded $10,000 more than the person who will major in Physics:
m += awarded_exactly_more_than(hattie, physics, 10000)

# Clue 4: The student who received the $40,000 scholarship will major in Theology:
m += scholarship40000 == theology

# Clue 5: Ora was awarded some amount less than the student who will major in Archaeology:
m += awarded_more_than(archaeology, ora)

```

[['tracy', 'english', 'scholarship30000'], ['hattie', 'archaeology', 'scholarship35000'], ['ora', 'physics', 'scholarship25000'], ['erma', 'theology', 'scholarship40000']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Hatcha started 6 years after the wing back.
Kawa began playing in 1982.
Banben was the center back.
The person who started in 1985 was either Kawa or the center forward.

Entities:
players: Banben, Hatcha, Kawa, Rothvum
years: 1976, 1979, 1982, 1985
positions: center back, center forward, goalie, wing back
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, year, and position)
# e.g. if banben == 1 and year1976 == 1 and center_back == 1, then Banben started in 1976 as a center back
banben, hatcha, kawa, rothvum = players = intvar(1, 4, shape=4)
year1976, year1979, year1982, year1985 = years = intvar(1, 4, shape=4)
center_back, center_forward, goalie, wing_back = positions = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
year_to_int = {year1976: 1976, year1979: 1979, year1982: 1982, year1985: 1985}  # in years
position_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def started_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 started diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(years)
m += AllDifferent(positions)

# Clue 1: Hatcha started 6 years after the wing back:
m += started_after_than(hatcha, wing_back, 6)

# Clue 2: Kawa began playing in 1982:
m += kawa == year1982

# Clue 3: Banben was the center back:
m += banben == center_back

# Clue 4: The person who started in 1985 was either Kawa or the center forward:
m += Xor([
    year1985 == kawa,
    year1985 == center_forward
])


```

[['hatcha', 'year1985', 'center_forward'], ['banben', 'year1976', 'center_back'], ['kawa', 'year1982', 'goalie'], ['rothvum', 'year1979', 'wing_back']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The puzzle with the postage stamp theme has somewhat fewer than the puzzle made by Astury.
The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda.
The jigsaw puzzle made by Garroda has somewhat fewer than the puzzle made by Vesem.
The jigsaw puzzle with the postage stamp theme has somewhat more than the puzzle with the city skyline theme.
The jigsaw puzzle made by Vesem has 500 pieces.

Entities:
companies: Astury, Denlend, Garroda, Vesem
pieces: 250, 500, 750, 1000
themes: autumn leaves, city skyline, outer space, postage stamp
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of company, pieces, and theme)
# e.g. if astury == 1 and pieces250 == 1 and postage_stamp == 1, then Astury made a 250-piece puzzle with a postage stamp theme
astury, denlend, garroda, vesem = companies = intvar(1, 4, shape=4)
pieces250, pieces500, pieces750, pieces1000 = pieces = intvar(1, 4, shape=4)
autumn_leaves, city_skyline, outer_space, postage_stamp = themes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
company_to_int = None  # N/A
pieces_to_int = {pieces250: 250, pieces500: 500, pieces750: 750, pieces1000: 1000}  # in pieces
theme_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def has_more_pieces_than(var1, var2):
    """
    Formulate the constraint that var1 has more pieces than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pieces_to_int[p1] > pieces_to_int[p2])
            for p1 in pieces for p2 in pieces]


def has_exactly_more_pieces_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff more pieces than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(pieces_to_int[p1] == pieces_to_int[p2] + diff)
            for p1 in pieces for p2 in pieces]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(companies)
m += AllDifferent(pieces)
m += AllDifferent(themes)

# Clue 1: The puzzle with the postage stamp theme has somewhat fewer than the puzzle made by Astury:
m += has_more_pieces_than(astury, postage_stamp)

# Clue 2: The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda:
m += has_exactly_more_pieces_than(outer_space, garroda, 250)

# Clue 3: The jigsaw puzzle made by Garroda has somewhat fewer than the puzzle made by Vesem:
m += has_more_pieces_than(vesem, garroda)

# Clue 4: The jigsaw puzzle with the postage stamp theme has somewhat more than the puzzle with the city skyline theme:
m += has_more_pieces_than(postage_stamp, city_skyline)

# Clue 5: The jigsaw puzzle made by Vesem has 500 pieces:
m += vesem == pieces500

```

[['astury', 'pieces1000', 'autumn_leaves'], ['denlend', 'pieces750', 'postage_stamp'], ['vesem', 'pieces500', 'outer_space'], ['garroda', 'pieces250', 'city_skyline']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware.
The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science.
The photo of the polar bear was taken sometime before the shot of the white rhino.
The photo taken in April was published by Animal Science.
The photo of the giant tortoise was taken in June.

Entities:
animals: giant tortoise, orangutan, polar bear, white rhino
months: March, April, May, June
magazines: Animal Science, Earth Aware, Nature Monthly, Wildzone
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of animal, month, and magazine)
# e.g. if giant_tortoise == 1 and march == 1 and animal_science == 1, then the photo of the giant tortoise was taken in March and published by Animal Science
giant_tortoise, orangutan, polar_bear, white_rhino = animals = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
animal_science, earth_aware, nature_monthly, wildzone = magazines = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
animal_to_int = None  # N/A
month_to_int = {march: 3, april: 4, may: 5, june: 6}  # in months
magazine_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def taken_after_than(var1, var2):
    """
    Formulate the constraint that var1 was taken after var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(month_to_int[a1] > month_to_int[a2])
            for a1 in months for a2 in months]


def taken_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was taken exactly diff months after var2.
    """
    return [((a1 == var1) & (a2 == var2)).implies(month_to_int[a1] == month_to_int[a2] + diff)
            for a1 in months for a2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(animals)
m += AllDifferent(months)
m += AllDifferent(magazines)

# Clue 1: The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware:
m += taken_exactly_after_than(nature_monthly, earth_aware, 2)

# Clue 2: The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science:
m += Xor([
    white_rhino == earth_aware,
    white_rhino == animal_science
])

# Clue 3: The photo of the polar bear was taken sometime before the shot of the white rhino:
m += taken_after_than(polar_bear, white_rhino)

# Clue 4: The photo taken in April was published by Animal Science:
m += april == animal_science

# Clue 5: The photo of the giant tortoise was taken in June:
m += giant_tortoise == june

```

[['polar_bear', 'may', 'nature_monthly'], ['white_rhino', 'march', 'earth_aware'], ['giant_tortoise', 'june', 'wildzone'], ['orangutan', 'april', 'animal_science']]
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Oginao is either the 105 ft tall fall or the 115 ft tall waterfall.
Oginao is 5 ft shorter than Irskela.
The fall in Brazil is either Cerbel or Inawatai.
Inawatai is in New Zealand.
Cerbel is 10 ft shorter than the fall in Canada.

Entities:
names: Cerbel, Irskela, Inawatai, Oginao
heights: 100 ft, 105 ft, 110 ft, 115 ft
countries: Canada, Brazil, New Zealand, Switzerland
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, height, and country)
# e.g. if cerbel == 1 and height100 == 1 and canada == 1, then Cerbel is 100 ft tall and located in Canada
cerbel, irskela, inawatai, oginao = names = intvar(1, 4, shape=4)
height100, height105, height110, height115 = heights = intvar(1, 4, shape=4)
canada, brazil, new_zealand, switzerland = countries = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
height_to_int = {height100: 100, height105: 105, height110: 110, height115: 115}  # in feet
country_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def shorter_than(var1, var2):
    """
    Formulate the constraint that var1 is shorter than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] < height_to_int[h2])
            for h1 in heights for h2 in heights]


def exactly_shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff ft shorter than var2.
    """
    return [((h1 == var1) & (h2 == var2)).implies(height_to_int[h1] == height_to_int[h2] - diff)
            for h1 in heights for h2 in heights]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(heights)
m += AllDifferent(countries)

# Clue 1: Oginao is either the 105 ft tall fall or the 115 ft tall waterfall:
m += Xor([
    oginao == height105,
    oginao == height115
])

# Clue 2: Oginao is 5 ft shorter than Irskela:
m += exactly_shorter_than(oginao, irskela, 5)

# Clue 3: The fall in Brazil is either Cerbel or Inawatai:
m += Xor([
    brazil == cerbel,
    brazil == inawatai
])

# Clue 4: Inawatai is in New Zealand:
m += inawatai == new_zealand

# Clue 5: Cerbel is 10 ft shorter than the fall in Canada:
m += exactly_shorter_than(cerbel, canada, 10)


```

[['cerbel', 'height100', 'brazil'], ['irskela', 'height110', 'canada'], ['oginao', 'height105', 'switzerland'], ['inawatai', 'height115', 'new_zealand']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The 90 million year old fossil costs 250 dollars more than the pilodontus.
The gigasaurus costs 500 dollars more than the 78 million year old fossil.
The gigasaurus costs 250 dollars less than the 75 million year old fossil.
The mirasaurus is 90 million years old.

Entities:
dinosaurs: gigasaurus, mirasaurus, pilodontus, rotosaurus
prices: $500, $750, $1000, $1250
ages: 72 million, 75 million, 78 million, 90 million
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of dinosaur, price, and age)
# e.g. if gigasaurus == 1 and price500 == 1 and age72 == 1, then the gigasaurus is 72 million years old and costs $500
gigasaurus, mirasaurus, pilodontus, rotosaurus = dinosaurs = intvar(1, 4, shape=4)
price500, price750, price1000, price1250 = prices = intvar(1, 4, shape=4)
age72, age75, age78, age90 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
dinosaur_to_int = None  # N/A
price_to_int = {price500: 500, price750: 750, price1000: 1000, price1250: 1250}  # in dollars
age_to_int = {age72: 72, age75: 75, age78: 78, age90: 90}  # in million years


# Helper functions (for formulating comparison constraints)
def costs_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


def costs_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 costs exactly diff dollars less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] - diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(dinosaurs)
m += AllDifferent(prices)
m += AllDifferent(ages)

# Clue 1: The 90 million year old fossil costs 250 dollars more than the pilodontus:
m += costs_exactly_more_than(age90, pilodontus, 250)

# Clue 2: The gigasaurus costs 500 dollars more than the 78 million year old fossil:
m += costs_exactly_more_than(gigasaurus, age78, 500)

# Clue 3: The gigasaurus costs 250 dollars less than the 75 million year old fossil:
m += costs_exactly_less_than(gigasaurus, age75, 250)

# Clue 4: The mirasaurus is 90 million years old:
m += mirasaurus == age90


```

[['mirasaurus', 'price750', 'age90'], ['pilodontus', 'price500', 'age78'], ['rotosaurus', 'price1250', 'age75'], ['gigasaurus', 'price1000', 'age72']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The four conductors are Roderick, the conductor working on June 10, the person departing from Leland and the person departing from Indio.
The person working on June 13 will depart from Hardwick.
The conductor working on June 12 is either the conductor departing from Indio or Roderick.
Vernon is either the person working on June 11 or the conductor working on June 13.
Francis will leave sometime before the conductor departing from Leland.

Entities:
names: Francis, Luke, Roderick, Vernon
days: June 10, June 11, June 12, June 13
departures: Hardwick, Indio, Kent, Leland
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, day, and departure)
# e.g. if luke == 1 and june10 == 1 and indio == 1, then Luke is the conductor working on June 10 departing from Indio
luke, francis, roderick, vernon = names = intvar(1, 4, shape=4)
june10, june11, june12, june13 = days = intvar(1, 4, shape=4)
hardwick, indio, kent, leland = departures = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
day_to_int = {june10: 10, june11: 11, june12: 12, june13: 13}  # in days
departure_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def departed_before_than(var1, var2):
    """
    Formulate the constraint that var1 departed before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(day_to_int[d1] < day_to_int[d2])
            for d1 in days for d2 in days]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(days)
m += AllDifferent(departures)

# Clue 1: The four conductors are Roderick, the conductor working on June 10, the person departing from Leland and the person departing from Indio:
m += AllDifferent([roderick, june10, leland, indio])

# Clue 2: The person working on June 13 will depart from Hardwick:
m += june13 == hardwick

# Clue 3: The conductor working on June 12 is either the conductor departing from Indio or Roderick:
m += Xor([
    june12 == indio,
    june12 == roderick
])

# Clue 4: Vernon is either the person working on June 11 or the conductor working on June 13:
m += Xor([
    vernon == june11,
    vernon == june13
])

# Clue 5: Francis will leave sometime before the conductor departing from Leland:
m += departed_before_than(francis, leland)

```

[['francis', 'june10', 'kent'], ['vernon', 'june11', 'leland'], ['roderick', 'june13', 'hardwick'], ['luke', 'june12', 'indio']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Kia rental is for a period 1 day shorter than the Toyota rental.
The 4 day rental is for the Fiat.
Kathy Koch's reservation is either the 5 day reservation or the Fiat rental.
The 3 day rental, Irene Ingram's reservation and Kathy Koch's reservation are all different rentals.
Ann Alexander's rental is for 4 days.

Entities:
customers: Ann Alexander, Edna Erickson, Irene Ingram, Kathy Koch
contract length: 2 days, 3 days, 4 days, 5 days
cars: Fiat, Kia, Nissan, Toyota
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, contract length, and car)
# e.g. if ann == 1 and days2 == 1 and fiat == 1, then Ann Alexander's rental is for 2 days and is for the Fiat
ann, edna, irene, kathy = customers = intvar(1, 4, shape=4)
days2, days3, days4, days5 = contract_lengths = intvar(1, 4, shape=4)
fiat, kia, nissan, toyota = cars = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
contract_length_to_int = {days2: 2, days3: 3, days4: 4, days5: 5}  # in days
car_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def rental_exactly_shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 rental is exactly diff days shorter than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(contract_length_to_int[c1] == contract_length_to_int[c2] - diff)
            for c1 in contract_lengths for c2 in contract_lengths]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(contract_lengths)
m += AllDifferent(cars)

# Clue 1: The Kia rental is for a period 1 day shorter than the Toyota rental:
m += rental_exactly_shorter_than(kia, toyota, 1)

# Clue 2: The 4 day rental is for the Fiat:
m += days4 == fiat

# Clue 3: Kathy Koch's reservation is either the 5 day reservation or the Fiat rental:
m += Xor([
    kathy == days5,
    kathy == fiat
])

# Clue 4: The 3 day rental, Irene Ingram's reservation and Kathy Koch's reservation are all different rentals:
m += AllDifferent([days3, irene, kathy])

# Clue 5: Ann Alexander's rental is for 4 days:
m += ann == days4

```

[['kathy', 'days5', 'nissan'], ['irene', 'days2', 'kia'], ['ann', 'days4', 'fiat'], ['edna', 'days3', 'toyota']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections.
Yvonne has 20 fewer Facebook friends than Margie.
The four people are the one with 68 LinkedIn connections, Jonathan, Rosie and the person with 120 Facebook friends.
Rosie has 150 Facebook friends.

Entities:
Facebook: 120, 130, 140, 150
LinkedIn: 57, 68, 72, 84
names: Jonathan, Margie, Rosie, Yvonne
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, LinkedIn connections, and Facebook friends)
# e.g. if yvonne == 1 and linkedin72 == 1 and facebook120 == 1, then Yvonne has 72 LinkedIn connections and 120 Facebook friends
yvonne, margie, rosie, jonathan = names = intvar(1, 4, shape=4)
linkedin57, linkedin68, linkedin72, linkedin84 = linkedin_connections = intvar(1, 4, shape=4)
facebook120, facebook130, facebook140, facebook150 = facebook_friends = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
linkedin_to_int = {linkedin57: 57, linkedin68: 68, linkedin72: 72, linkedin84: 84}  # in connections
facebook_to_int = {facebook120: 120, facebook130: 130, facebook140: 140, facebook150: 150}  # in friends


# Helper functions (for formulating comparison constraints)
def has_exactly_fewer_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has exactly diff fewer friends than var2.
    """
    return [((f1 == var1) & (f2 == var2)).implies(facebook_to_int[f1] == facebook_to_int[f2] - diff)
            for f1 in facebook_friends for f2 in facebook_friends]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(linkedin_connections)
m += AllDifferent(facebook_friends)

# Clue 1: The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections:
m += has_exactly_fewer_than(linkedin72, linkedin84, 10)

# Clue 2: Yvonne has 20 fewer Facebook friends than Margie:
m += has_exactly_fewer_than(yvonne, margie, 20)

# Clue 3: The four people are the one with 68 LinkedIn connections, Jonathan, Rosie and the person with 120 Facebook friends:
m += AllDifferent([linkedin68, jonathan, rosie, facebook120])

# Clue 4: Rosie has 150 Facebook friends:
m += rosie == facebook150

```

[['yvonne', 'linkedin72', 'facebook120'], ['rosie', 'linkedin57', 'facebook150'], ['jonathan', 'linkedin84', 'facebook130'], ['margie', 'linkedin68', 'facebook140']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The photo taken in April was published by Wildzone.
The shot of the giant tortoise was taken 1 month before the photo published by Science World.
The photo of the orangutan was published by The Geographer.
The photo of the snow leopard was taken 2 months after the photo published by The Geographer.

Entities:
animals: giant tortoise, orangutan, snow leopard, tree kangaroo
months: March, April, May, June
magazines: Earth Aware, Science World, The Geographer, Wildzone
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of animal, month, and magazine)
# e.g. if giant_tortoise == 1 and march == 1 and wildzone == 1, then the photo of the giant tortoise was taken in March and published by Wildzone
giant_tortoise, orangutan, snow_leopard, tree_kangaroo = animals = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
earth_aware, science_world, the_geographer, wildzone = magazines = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
animal_to_int = None  # N/A
month_to_int = {march: 1, april: 2, may: 3, june: 4
None
Error when trying to check solution from predicted model: list index out of range
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am.
Jack's task is either the job that starts at 8:00am or the living room assignment.
Jack's job starts at 10:00am.
Kay's chore starts at 8:00am.
Jack's assignment starts 2 hours after the mud room assignment.
The laundry room assignment, the chore that starts at 8:00am and the chore that starts at 11:00am are all different jobs.

Entities:
children: Henrietta, Jack, Kay, Zachary
times: 8:00am, 9:00am, 10:00am, 11:00am
rooms: dining room, laundry room, living room, mud room
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of child, time, and room)
# e.g. if henrietta == 1 and eight_am == 1 and dining_room == 1, then Henrietta's job is the chore that starts at 8:00am in the dining room
henrietta, jack, kay, zachary = children = intvar(1, 4, shape=4)
eight_am, nine_am, ten_am, eleven_am = times = intvar(1, 4, shape=4)
dining_room, laundry_room, living_room, mud_room = rooms = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
child_to_int = None  # N/A
time_to_int = {eight_am: 8, nine_am: 9, ten_am: 10, eleven_am: 11}  # in hours
room_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff hours after var2.
    """
    return [((t1 == var1) & (t2 == var2)).implies(time_to_int[t1] == time_to_int[t2] + diff)
            for t1 in times for t2 in times]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(children)
m += AllDifferent(times)
m += AllDifferent(rooms)

# Clue 1: Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am:
m += Xor([
    henrietta == nine_am,
    henrietta == eight_am
])

# Clue 2: Jack's task is either the job that starts at 8:00am or the living room assignment:
m += Xor([
    jack == eight_am,
    jack == living_room
])

# Clue 3: Jack's job starts at 10:00am:
m += jack == ten_am

# Clue 4: Kay's chore starts at 8:00am:
m += kay == eight_am

# Clue 5: Jack's assignment starts 2 hours after the mud room assignment:
m += starts_exactly_after_than(jack, mud_room, 2)

# Clue 6: The laundry room assignment, the chore that starts at 8:00am and the chore that starts at 11:00am are all different jobs:
m += AllDifferent([laundry_room, eight_am, eleven_am])

```

[['kay', 'eight_am', 'mud_room'], ['jack', 'ten_am', 'living_room'], ['zachary', 'eleven_am', 'dining_room'], ['henrietta', 'nine_am', 'laundry_room']]
False
False
True
Wrong: 6, Total: 9
---------------------------------------------------------------------------------------------

Clues:
Charlie is 9 years old.
Gracie has a wingspan of 114 inches.
The 11-year-old bird has a wingspan 8 inches shorter than Charlie.
Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches.

Entities:
names: Angel, Charlie, Gracie, Merlin
wingspans: 102 inches, 106 inches, 110 inches, 114 inches
ages: 8, 9, 10, 11
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, wingspan, and age)
# e.g. if angel == 1 and inches114 == 1 and age8 == 1, then Angel is the 8-year-old bird with a wingspan of 114 inches
angel, charlie, gracie, merlin = names = intvar(1, 4, shape=4)
wingspan102, wingspan106, wingspan110, wingspan114 = wingspans = intvar(1, 4, shape=4)
age8, age9, age10, age11 = ages = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
wingspan_to_int = {wingspan102: 102, wingspan106: 106, wingspan110: 110, wingspan114: 114}  # in inches
age_to_int = {age8: 8, age9: 9, age10: 10, age11: 11}  # in years


# Helper functions (for formulating comparison constraints)
def wingspan_shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 has a wingspan diff inches shorter than var2.
    """
    return [((w1 == var1) & (w2 == var2)).implies(wingspan_to_int[w1] == wingspan_to_int[w2] - diff)
            for w1 in wingspans for w2 in wingspans]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(wingspans)
m += AllDifferent(ages)

# Clue 1: Charlie is 9 years old:
m += charlie == age9

# Clue 2: Gracie has a wingspan of 114 inches:
m += gracie == wingspan114

# Clue 3: The 11-year-old bird has a wingspan 8 inches shorter than Charlie:
m += wingspan_shorter_than(age11, charlie, 8)

# Clue 4: Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches:
m += Xor([
    angel == age8,
    angel == wingspan114
])

```

[['charlie', 'wingspan110', 'age9'], ['merlin', 'wingspan102', 'age11'], ['gracie', 'wingspan114', 'age10'], ['angel', 'wingspan106', 'age8']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The TrustCo card has an APR of 11%.
The Southwest Inc card has a limit of $2,000.
The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit.
The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card.
The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit.

Entities:
credit cards: Credit Korp, Mid Atlantic, Southwest Inc, TrustCo
APR: 8%, 9%, 10%, 11%
credit limits: $2,000, $4,000, $5,000, $20,000
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of credit card, APR, and credit limit)
# e.g. if credit_korp == 1 and apr8 == 1 and limit2000 == 1, then Credit Korp has an APR of 8% and a credit limit of $2,000
credit_korp, mid_atlantic, southwest_inc, trustco = credit_cards = intvar(1, 4, shape=4)
apr8, apr9, apr10, apr11 = APRs = intvar(1, 4, shape=4)
limit2000, limit4000, limit5000, limit20000 = credit_limits = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
credit_card_to_int = None  # N/A
APR_to_int = {apr8: 8, apr9: 9, apr10: 10, apr11: 11}  # in percent
credit_limit_to_int = {limit2000: 2000, limit4000: 4000, limit5000: 5000, limit20000: 20000}  # in dollars


# Helper functions (for formulating comparison constraints)
def has_APR(var1, var2):
    """
    Formulate the constraint that var1 has an APR of var2.
    """
    return [((c1 == var1) & (a2 == var2)).implies(APR_to_int[a2] == APR_to_int[a2])
            for c1 in credit_cards for a2 in APRs]


def has_credit_limit(var1, var2):
    """
    Formulate the constraint that var1 has a credit limit of var2.
    """
    return [((c1 == var1) & (l2 == var2)).implies(credit_limit_to_int[l2] == credit_limit_to_int[l2])
            for c1 in credit_cards for l2 in credit_limits]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(credit_cards)
m += AllDifferent(APRs)
m += AllDifferent(credit_limits)

# Clue 1: The TrustCo card has an APR of 11%:
m += has_APR(trustco, apr11)

# Clue 2: The Southwest Inc card has a limit of $2,000:
m += has_credit_limit(southwest_inc, limit2000)

# Clue 3: The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit:
m += Xor([
    has_APR(apr11, limit4000),
    has_APR(apr11, limit20000)
])

# Clue 4: The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card:
m += Xor([
    has_APR(apr10, limit4000),
    has_APR(apr10, trustco)
])

# Clue 5: The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit:
m += has_APR(credit_korp, apr8)


```

None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Wrong: 5, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The title due on September 22 is either Rosa's book or "Dancing Well".
Ebony's book was due 1 week after Rosa's book.
Aimee's book was due on September 15.
Ebony's book was "Heaven's Seal".
"Heaven's Seal" was due 1 week after "Frogs of Iowa".

Entities:
borrowers: Aimee, Ebony, Jimmy, Rosa
due dates: September 1, September 8, September 15, September 22
titles: Dancing Well, Frogs of Iowa, Heaven's Seal, Time to Burn
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of borrower, due date, and title)
# e.g. if aimee == 1 and sep15 == 1 and dancing_well == 1, then Aimee took out Dancing Well due on September 15
aimee, ebony, jimmy, rosa = borrowers = intvar(1, 4, shape=4)
sep1, sep8, sep15, sep22 = due_dates = intvar(1, 4, shape=4)
dancing_well, frogs_of_iowa, heavens_seal, time_to_burn = titles = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
borrower_to_int = None  # N/A
due_date_to_int = {sep1: 1, sep8: 8, sep15: 15, sep22: 22}  # in September dates
title_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def due_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is due exactly diff days after var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(due_date_to_int[d1] == due_date_to_int[d2] + diff)
            for d1 in due_dates for d2 in due_dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(borrowers)
m += AllDifferent(due_dates)
m += AllDifferent(titles)

# Clue 1: The title due on September 22 is either Rosa's book or "Dancing Well":
m += Xor([
    sep22 == rosa,
    sep22 == dancing_well
])

# Clue 2: Ebony's book was due 1 week after Rosa's book:
m += due_exactly_after_than(ebony, rosa, 7)

# Clue 3: Aimee's book was due on September 15:
m += aimee == sep15

# Clue 4: Ebony's book was "Heaven's Seal":
m += ebony == heavens_seal

# Clue 5: "Heaven's Seal" was due 1 week after "Frogs of Iowa":
m += due_exactly_after_than(heavens_seal, frogs_of_iowa, 7)

```

[['ebony', 'sep8', 'heavens_seal'], ['aimee', 'sep15', 'time_to_burn'], ['jimmy', 'sep22', 'dancing_well'], ['rosa', 'sep1', 'frogs_of_iowa']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The siren released in 1997 is 10 decibels louder than the siren released in 1996.
The siren released in 2009 is either the Armor-Stop or the Viking 5.
The siren released in 1997 is either the Soundarm or the Viking 5.
The Armor-Stop is louder than the siren released in 2009.
The Soundarm is 110 decibels loud.

Entities:
sirens: Armor-Stop, Rip Tide, Soundarm, Viking 5
decibels: 100 decibels, 105 decibels, 110 decibels, 115 decibels
years: 1996, 1997, 2000, 2009
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of siren, decibel, and year)
# e.g. if armor_stop == 1 and decibels100 == 1 and year1996 == 1, then Armor-Stop siren is 100 decibels and released in 1996
armor_stop, rip_tide, soundarm, viking5 = sirens = intvar(1, 4, shape=4)
decibels100, decibels105, decibels110, decibels115 = decibels = intvar(1, 4, shape=4)
year1996, year1997, year2000, year2009 = years = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
siren_to_int = None  # N/A
decibel_to_int = {decibels100: 100, decibels105: 105, decibels110: 110, decibels115: 115}  # in decibels
year_to_int = {year1996: 1996, year1997: 1997, year2000: 2000, year2009: 2009}  # in years


# Helper functions (for formulating comparison constraints)
def louder_than(var1, var2):
    """
    Formulate the constraint that var1 is louder than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(decibel_to_int[d1] > decibel_to_int[d2])
            for d1 in decibels for d2 in decibels]


def exactly_louder_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff decibels louder than var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(decibel_to_int[d1] == decibel_to_int[d2] + diff)
            for d1 in decibels for d2 in decibels]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(sirens)
m += AllDifferent(decibels)
m += AllDifferent(years)

# Clue 1: The siren released in 1997 is 10 decibels louder than the siren released in 1996:
m += exactly_louder_than(year1997, year1996, 10)

# Clue 2: The siren released in 2009 is either the Armor-Stop or the Viking 5:
m += Xor([
    year2009 == armor_stop,
    year2009 == viking5
])

# Clue 3: The siren released in 1997 is either the Soundarm or the Viking 5:
m += Xor([
    year1997 == soundarm,
    year1997 == viking5
])

# Clue 4: The Armor-Stop is louder than the siren released in 2009:
m += louder_than(armor_stop, year2009)

# Clue 5: The Soundarm is 110 decibels loud:
m += soundarm == decibels110


```

[['viking5', 'decibels105', 'year2009'], ['soundarm', 'decibels110', 'year1997'], ['armor_stop', 'decibels115', 'year2000'], ['rip_tide', 'decibels100', 'year1996']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte.
Hope paid $8.
Norman paid less than Opal.
The one who had the cafe americano paid less than Linda.
The one who had the cafe mocha paid 2 dollars more than Norman.

Entities:
names: Hope, Linda, Norman, Opal
prices: $5, $6, $7, $8
drinks: cafe americano, cafe latte, cafe mocha, espresso
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, price, and drink)
# e.g. if hope == 1 and price8 == 1 and americano == 1, then Hope paid $8 for a cafe americano
hope, linda, norman, opal = names = intvar(1, 4, shape=4)
price5, price6, price7, price8 = prices = intvar(1, 4, shape=4)
americano, latte, mocha, espresso = drinks = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
price_to_int = {price5: 5, price6: 6, price7: 7, price8: 8}  # in dollars
drink_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(prices)
m += AllDifferent(drinks)

# Clue 1: The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte:
m += paid_exactly_more_than(americano, latte, 1)

# Clue 2: Hope paid $8:
m += hope == price8

# Clue 3: Norman paid less than Opal:
m += paid_more_than(opal, norman)

# Clue 4: The one who had the cafe americano paid less than Linda:
m += paid_more_than(linda, americano)

# Clue 5: The one who had the cafe mocha paid 2 dollars more than Norman:
m += paid_exactly_more_than(mocha, norman, 2)

```

[['hope', 'price8', 'espresso'], ['opal', 'price6', 'americano'], ['linda', 'price7', 'mocha'], ['norman', 'price5', 'latte']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The ring with the aquamarine cost less than the piece with the diamond.
Opal's ring is either the piece that cost $1300 or the piece with the diamond.
The piece that cost $1400 is either the ring with the ruby or Hazel's ring.
Hazel's ring has the diamond.
Becky's piece cost more than the ring with the diamond.

Entities:
customers: Becky, Hazel, Opal, Yolanda
prices: $1100, $1200, $1300, $1400
stones: aquamarine, diamond, ruby, topaz
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, price, and stone)
# e.g. if becky == 1 and price1100 == 1 and aquamarine == 1, then Becky bought a piece with aquamarine for $1100
becky, hazel, opal, yolanda = customers = intvar(1, 4, shape=4)
price1100, price1200, price1300, price1400 = prices = intvar(1, 4, shape=4)
aquamarine, diamond, ruby, topaz = stones = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
price_to_int = {price1100: 1100, price1200: 1200, price1300: 1300, price1400: 1400}  # in dollars
stone_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def cost_less_than(var1, var2):
    """
    Formulate the constraint that var1 cost less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


def cost_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 cost exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(prices)
m += AllDifferent(stones)

# Clue 1: The ring with the aquamarine cost less than the piece with the diamond:
m += cost_less_than(aquamarine, diamond)

# Clue 2: Opal's ring is either the piece that cost $1300 or the piece with the diamond:
m += Xor([
    opal == price1300,
    opal == diamond
])

# Clue 3: The piece that cost $1400 is either the ring with the ruby or Hazel's ring:
m += Xor([
    price1400 == ruby,
    price1400 == hazel
])

# Clue 4: Hazel's ring has the diamond:
m += hazel == diamond

# Clue 5: Becky's piece cost more than the ring with the diamond:
m += cost_exactly_more_than(becky, diamond, 1)

```

None
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The wood frog was bought 1 month after Nettie's pet.
Ollie's pet is the wood frog.
The tree frog was bought 2 months after Ollie's pet.
Joann's pet is either the wood frog or the tree frog.
Ida's pet is either the animal bought in April or the bullfrog.

Entities:
names: Ida, Joann, Nettie, Ollie
months: January, February, March, April
amphibians: bullfrog, horned toad, tree frog, wood frog
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, month, and amphibian)
# e.g. if ida == 1 and january == 1 and bullfrog == 1, then Ida's pet was a bullfrog bought in January
ida, joann, nettie, ollie = names = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
bullfrog, horned_toad, tree_frog, wood_frog = amphibians = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
amphibian_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bought_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was bought exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(months)
m += AllDifferent(amphibians)

# Clue 1: The wood frog was bought 1 month after Nettie's pet:
m += bought_exactly_after_than(wood_frog, nettie, 1)

# Clue 2: Ollie's pet is the wood frog:
m += ollie == wood_frog

# Clue 3: The tree frog was bought 2 months after Ollie's pet:
m += bought_exactly_after_than(tree_frog, ollie, 2)

# Clue 4: Joann's pet is either the wood frog or the tree frog:
m += Xor([
    joann == wood_frog,
    joann == tree_frog
])

# Clue 5: Ida's pet is either the animal bought in April or the bullfrog:
m += Xor([
    ida == april,
    ida == bullfrog
])

```

[['ida', 'march', 'bullfrog'], ['joann', 'april', 'tree_frog'], ['nettie', 'january', 'horned_toad'], ['ollie', 'february', 'wood_frog']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Winifred spoke for a somewhat shorter time than Omar.
Neal talked about Diocletian.
The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal and Vickie.
The student who gave the presentation on Nero spoke 2 minutes more than Vickie.
Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes.

Entities:
names: Neal, Omar, Vickie, Winifred
lengths: 6 minutes, 8 minutes, 10 minutes, 12 minutes
emperors: Diocletian, Galerius, Licinius, Nero
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, length, and emperor)
# e.g. if neal == 1 and minutes6 == 1 and diocletian == 1, then Neal spoke for 6 minutes about Diocletian
neal, omar, vickie, winifred = names = intvar(1, 4, shape=4)
minutes6, minutes8, minutes10, minutes12 = lengths = intvar(1, 4, shape=4)
diocletian, galerius, licinius, nero = emperors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
length_to_int = {minutes6: 6, minutes8: 8, minutes10: 10, minutes12: 12}  # in minutes
emperor_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def spoke_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 spoke diff minutes more than var2.
    """
    return [((l1 == var1) & (l2 == var2)).implies(length_to_int[l1] == length_to_int[l2] + diff)
            for l1 in lengths for l2 in lengths]


def spoke_shorter_than(var1, var2):
    """
    Formulate the constraint that var1 spoke for a somewhat shorter time than var2.
    """
    return [((l1 == var1) & (l2 == var2)).implies(length_to_int[l1] < length_to_int[l2])
            for l1 in lengths for l2 in lengths]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(lengths)
m += AllDifferent(emperors)

# Clue 1: Winifred spoke for a somewhat shorter time than Omar:
m += spoke_shorter_than(winifred, omar)

# Clue 2: Neal talked about Diocletian:
m += neal == diocletian

# Clue 3: The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal and Vickie:
m += AllDifferent([minutes8, galerius, neal, vickie])

# Clue 4: The student who gave the presentation on Nero spoke 2 minutes more than Vickie:
m += spoke_exactly_more_than(nero, vickie, 2)

# Clue 5: Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes:
m += Xor([
    omar == nero,
    omar == minutes10
])

```

[['omar', 'minutes10', 'galerius'], ['winifred', 'minutes8', 'nero'], ['neal', 'minutes12', 'diocletian'], ['vickie', 'minutes6', 'licinius']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Rosa paid somewhat more than the customer who got picked up at the Smith Tower.
The client with the $9 fare was picked up at the Smith Tower.
Neil paid 3 dollars more than Rosa.
The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della.
The person with the $15 fare was picked up at the Neptune Theatre.

Entities:
customers: Della, Neil, Rosa, Sara
fares: $6, $9, $12, $15
pickup points: Arctic Building, Fremont Library, Neptune Theatre, Smith Tower
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, fare, and pickup point)
# e.g. if della == 1 and fare9 == 1 and smith_tower == 1, then Della paid $9 fare and was picked up at the Smith Tower
della, neil, rosa, sara = customers = intvar(1, 4, shape=4)
fare6, fare9, fare12, fare15 = fares = intvar(1, 4, shape=4)
arctic_building, fremont_library, neptune_theatre, smith_tower = pickup_points = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
fare_to_int = {fare6: 6, fare9: 9, fare12: 12, fare15: 15}  # in dollars
pickup_point_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((f1 == var1) & (f2 == var2)).implies(fare_to_int[f1] > fare_to_int[f2])
            for f1 in fares for f2 in fares]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((f1 == var1) & (f2 == var2)).implies(fare_to_int[f1] == fare_to_int[f2] + diff)
            for f1 in fares for f2 in fares]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(fares)
m += AllDifferent(pickup_points)

# Clue 1: Rosa paid somewhat more than the customer who got picked up at the Smith Tower:
m += paid_more_than(rosa, smith_tower)

# Clue 2: The client with the $9 fare was picked up at the Smith Tower:
m += fare9 == smith_tower

# Clue 3: Neil paid 3 dollars more than Rosa:
m += paid_exactly_more_than(neil, rosa, 3)

# Clue 4: The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della:
m += Xor([
    fremont_library == fare9,
    fremont_library == della
])

# Clue 5: The person with the $15 fare was picked up at the Neptune Theatre:
m += fare15 == neptune_theatre

```

[['rosa', 'fare12', 'arctic_building'], ['della', 'fare6', 'fremont_library'], ['neil', 'fare15', 'neptune_theatre'], ['sara', 'fare9', 'smith_tower']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez.
The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019.
The project headed by Dr. Salinas will go online 1 year before the Egert Facility.
The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble.
The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble.
The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC.

Entities:
names: Bale-Hahn SSC, Egert Facility, Lectra 4C, Zynga Complex
years: 2016, 2017, 2018, 2019
scientists: Dr. Alvarez, Dr. Morgan, Dr. Noble, Dr. Salinas
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, year, and scientist)
# e.g. if egert == 1 and year2019 == 1 and dr_alvarez == 1, then Egert Facility will go online in 2019 and is headed by Dr. Alvarez
bale_hahn, egert, lectra_4c, zynga = names = intvar(1, 4, shape=4)
year2016, year2017, year2018, year2019 = years = intvar(1, 4, shape=4)
dr_alvarez, dr_morgan, dr_noble, dr_salinas = scientists = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
year_to_int = {year2016: 2016, year2017: 2017, year2018: 2018, year2019: 2019}  # in years
scientist_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def goes_online_after(var1, var2):
    """
    Formulate the constraint that var1 goes online after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


def goes_online_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 goes online exactly diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(years)
m += AllDifferent(scientists)

# Clue 1: The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez:
m += Xor([
    year2019 == egert,
    year2019 == dr_alvarez
])

# Clue 2: The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019:
m += Xor([
    dr_morgan == zynga,
    dr_morgan == year2019
])

# Clue 3: The project headed by Dr. Salinas will go online 1 year before the Egert Facility:
m += goes_online_exactly_after_than(dr_salinas, egert, -1)

# Clue 4: The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble:
m += goes_online_after(dr_alvarez, dr_noble)

# Clue 5: The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble:
m += goes_online_after(dr_noble, dr_salinas)

# Clue 6: The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC:
m += goes_online_after(dr_morgan, bale_hahn)


```

[['bale_hahn', 'year2016', 'dr_salinas'], ['zynga', 'year2018', 'dr_morgan'], ['lectra_4c', 'year2019', 'dr_alvarez'], ['egert', 'year2017', 'dr_noble']]
True
True
True
Wrong: 0, Total: 9
---------------------------------------------------------------------------------------------

Clues:
Lillian scored 6 points higher than Bessie.
The dancer who performed first scored 3 points lower than the dancer who performed ninth.
Verna scored somewhat higher than the person who danced third.
The dancer who performed seventh scored 6 points higher than the person who danced ninth.

Entities:
names: Bessie, Clara, Lillian, Verna
points: 181 points, 184 points, 187 points, 190 points
orders: first, third, seventh, ninth
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, points, and order)
# e.g. if bessie == 1 and points181 == 1 and first == 1, then Bessie scored 181 points and danced first
bessie, clara, lillian, verna = names = intvar(1, 4, shape=4)
points181, points184, points187, points190 = points = intvar(1, 4, shape=4)
first, third, seventh, ninth = orders = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
points_to_int = {points181: 181, points184: 184, points187: 187, points190: 190}  # in points
order_to_int = {first: 1, third: 3, seventh: 7, ninth: 9}  # in order


# Helper functions (for formulating comparison constraints)
def scored_higher_than(var1, var2):
    """
    Formulate the constraint that var1 scored higher than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(points_to_int[p1] > points_to_int[p2])
            for p1 in points for p2 in points]


def scored_exactly_higher_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff points higher than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(points_to_int[p1] == points_to_int[p2] + diff)
            for p1 in points for p2 in points]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(points)
m += AllDifferent(orders)

# Clue 1: Lillian scored 6 points higher than Bessie:
m += scored_exactly_higher_than(lillian, bessie, 6)

# Clue 2: The dancer who performed first scored 3 points lower than the dancer who performed ninth:
m += scored_exactly_higher_than(ninth, first, 3)

# Clue 3: Verna scored somewhat higher than the person who danced third:
m += scored_higher_than(verna, third)

# Clue 4: The dancer who performed seventh scored 6 points higher than the person who danced ninth:
m += scored_exactly_higher_than(seventh, ninth, 6)

```

[['bessie', 'points181', 'first'], ['clara', 'points184', 'ninth'], ['lillian', 'points187', 'third'], ['verna', 'points190', 'seventh']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Evan threw the orange darts.
The player who threw the violet darts scored 7 points higher than Ira.
Ira finished with 41 points.
The player who threw the white darts finished 14 points lower than Rudy.

Entities:
players: Evan, Ira, Rudy, Zachary
scores: 41, 48, 55, 62
colors: gray, orange, violet, white
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, score, and color)
# e.g. if evan == 1 and score41 == 1 and orange == 1, then Evan scored 41 points and threw orange darts
evan, ira, rudy, zachary = players = intvar(1, 4, shape=4)
score41, score48, score55, score62 = scores = intvar(1, 4, shape=4)
gray, orange, violet, white = colors = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
score_to_int = {score41: 41, score48: 48, score55: 55, score62: 62}  # in points
color_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_higher_than(var1, var2):
    """
    Formulate the constraint that var1 scored higher than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] > score_to_int[s2])
            for s1 in scores for s2 in scores]


def scored_exactly_higher_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff points higher than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(score_to_int[s1] == score_to_int[s2] + diff)
            for s1 in scores for s2 in scores]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(scores)
m += AllDifferent(colors)

# Clue 1: Evan threw the orange darts:
m += evan == orange

# Clue 2: The player who threw the violet darts scored 7 points higher than Ira:
m += scored_exactly_higher_than(violet, ira, 7)

# Clue 3: Ira finished with 41 points:
m += ira == score41

# Clue 4: The player who threw the white darts finished 14 points lower than Rudy:
m += scored_exactly_higher_than(rudy, white, 14)


```

[['ira', 'score41', 'white'], ['evan', 'score62', 'orange'], ['rudy', 'score55', 'gray'], ['zachary', 'score48', 'violet']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The 200 page project is either the book published in 2011 or the book published in 2010.
The book published in 2011 is either Orlando's project or Jan's project.
The book published in 2007 is 25 pages shorter than the book published in 2002.
The four projects are the book published in 2007, the 225 page assignment, Suzanne's project and the 175 page assignment.
Jan's assignment is 175 pages long.

Entities:
translators: Ebony, Jan, Orlando, Suzanne
pages: 150 pages, 175 pages, 200 pages, 225 pages
years: 2002, 2007, 2010, 2011
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of translator, pages, and year)
# e.g. if ebony == 1 and pages150 == 1 and year2002 == 1, then Ebony's project is a 150-page project published in 2002
ebony, jan, orlando, suzanne = translators = intvar(1, 4, shape=4)
pages150, pages175, pages200, pages225 = pages = intvar(1, 4, shape=4)
year2002, year2007, year2010, year2011 = years = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
translator_to_int = None  # N/A
page_to_int = {pages150: 150, pages175: 175, pages200: 200, pages225: 225}  # in pages
year_to_int = {year2002: 2002, year2007: 2007, year2010: 2010, year2011: 2011}  # in years


# Helper functions (for formulating comparison constraints)
def shorter_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is diff pages shorter than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(page_to_int[p1] == page_to_int[p2] - diff)
            for p1 in pages for p2 in pages]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(translators)
m += AllDifferent(pages)
m += AllDifferent(years)

# Clue 1: The 200 page project is either the book published in 2011 or the book published in 2010:
m += Xor([
    pages200 == year2011,
    pages200 == year2010
])

# Clue 2: The book published in 2011 is either Orlando's project or Jan's project:
m += Xor([
    year2011 == orlando,
    year2011 == jan
])

# Clue 3: The book published in 2007 is 25 pages shorter than the book published in 2002:
m += shorter_than(year2007, year2002, 25)

# Clue 4: The four projects are the book published in 2007, the 225 page assignment, Suzanne's project and the 175 page assignment:
m += AllDifferent([year2007, pages225, suzanne, pages175])

# Clue 5: Jan's assignment is 175 pages long:
m += jan == pages175

```

[['jan', 'pages175', 'year2002'], ['ebony', 'pages150', 'year2007'], ['orlando', 'pages225', 'year2011'], ['suzanne', 'pages200', 'year2010']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car.
The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake.
The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake.
Mrs. Nolan's cake will be in the shape of a sports car.
The October 7 delivery will be in the shape of a bowling pin.

Entities:
customers: Danielson, Estrada, Ingram, Nolan
delivery dates: October 5, October 6, October 7, October 8
cake shapes: baseball glove, bowling pin, sports car, turtle
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, delivery date, and cake shape)
# e.g. if danielson == 1 and oct5 == 1 and baseball_glove == 1, then Danielson's cake will be delivered on October 5 in the shape of a baseball glove
danielson, estrada, ingram, nolan = customers = intvar(1, 4, shape=4)
oct5, oct6, oct7, oct8 = delivery_dates = intvar(1, 4, shape=4)
baseball_glove, bowling_pin, sports_car, turtle = cake_shapes = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
delivery_date_to_int = {oct5: 5, oct6: 6, oct7: 7, oct8: 8}  # in days
cake_shape_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def delivered_exactly_before_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is delivered exactly diff days before var2.
    """
    return [((d1 == var1) & (d2 == var2)).implies(delivery_date_to_int[d1] == delivery_date_to_int[d2] - diff)
            for d1 in delivery_dates for d2 in delivery_dates]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(delivery_dates)
m += AllDifferent(cake_shapes)

# Clue 1: Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car:
m += delivered_exactly_before_than(danielson, sports_car, 1)

# Clue 2: The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake:
m += delivered_exactly_before_than(turtle, ingram, 2)

# Clue 3: The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake:
m += Xor([
    bowling_pin == oct5,
    bowling_pin == ingram
])

# Clue 4: Mrs. Nolan's cake will be in the shape of a sports car:
m += nolan == sports_car

# Clue 5: The October 7 delivery will be in the shape of a bowling pin:
m += oct7 == bowling_pin

```

[['danielson', 'oct5', 'turtle'], ['nolan', 'oct6', 'sports_car'], ['estrada', 'oct8', 'baseball_glove'], ['ingram', 'oct7', 'bowling_pin']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games.
The lacrosse facility holds 40 more people than Wilcox Arena.
Ingram Arena holds 230 people.
Wilcox Arena holds 80 fewer people than the soccer facility.

Entities:
arenas: Frederick, Ingram, Noble, Wilcox
capacities: 110, 150, 190, 230
sports: basketball, lacrosse, rugby, soccer
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of arena, capacity, and sport)
# e.g. if frederick == 1 and capacity110 == 1 and basketball == 1, then Frederick has a capacity of 110 and is for basketball
frederick, ingram, noble, wilcox = arenas = intvar(1, 4, shape=4)
capacity110, capacity150, capacity190, capacity230 = capacities = intvar(1, 4, shape=4)
basketball, lacrosse, rugby, soccer = sports = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
arena_to_int = None  # N/A
capacity_to_int = {capacity110: 110, capacity150: 150, capacity190: 190, capacity230: 230}  # in people
sport_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def holds_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 holds exactly diff more people than var2.
    """
    return [((c1 == var1) & (c2 == var2)).implies(capacity_to_int[c1] == capacity_to_int[c2] + diff)
            for c1 in capacities for c2 in capacities]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(arenas)
m += AllDifferent(capacities)
m += AllDifferent(sports)

# Clue 1: Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games:
m += Xor([
    ingram == capacity150,
    noble == rugby
])

# Clue 2: The lacrosse facility holds 40 more people than Wilcox Arena:
m += holds_exactly_more_than(lacrosse, wilcox, 40)

# Clue 3: Ingram Arena holds 230 people:
m += ingram == capacity230

# Clue 4: Wilcox Arena holds 80 fewer people than the soccer facility:
m += holds_exactly_more_than(soccer, wilcox, 80)


```

[['noble', 'capacity110', 'rugby'], ['frederick', 'capacity190', 'lacrosse'], ['ingram', 'capacity230', 'soccer'], ['wilcox', 'capacity150', 'basketball']]
False
False
False
Wrong: 1, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The $35,000 structure is 15 sq ft smaller than the $29,000 home.
The Whitehead's structure sold for $29,000.
The Kirby's house is 15 sq ft smaller than the $35,000 house.
The $36,000 house is somewhat smaller than the Gillespie's structure.
Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies.

Entities:
customers: Gillespie, Kirby, Pratt, Whitehead
sq footage: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft
prices: $25,000, $29,000, $35,000, $36,000
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, sq footage, and price)
# e.g. if gillespie == 1 and sq110 == 1 and price35000 == 1, then Gillespie's house is 110 sq ft and sold for $35,000
gillespie, kirby, pratt, whitehead = customers = intvar(1, 4, shape=4)
sq95, sq110, sq125, sq140 = sq_footage = intvar(1, 4, shape=4)
price25000, price29000, price35000, price36000 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
sq_footage_to_int = {sq95: 95, sq110: 110, sq125: 125, sq140: 140}  # in sq ft
price_to_int = {price25000: 25000, price29000: 29000, price35000: 35000, price36000: 36000}  # in dollars


# Helper functions (for formulating comparison constraints)
def smaller_than(var1, var2):
    """
    Formulate the constraint that var1 is smaller than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(sq_footage_to_int[s1] < sq_footage_to_int[s2])
            for s1 in sq_footage for s2 in sq_footage]


def exactly_smaller_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff sq ft smaller than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(sq_footage_to_int[s1] == sq_footage_to_int[s2] - diff)
            for s1 in sq_footage for s2 in sq_footage]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(sq_footage)
m += AllDifferent(prices)

# Clue 1: The $35,000 structure is 15 sq ft smaller than the $29,000 home:
m += exactly_smaller_than(price35000, price29000, 15)

# Clue 2: The Whitehead's structure sold for $29,000:
m += whitehead == price29000

# Clue 3: The Kirby's house is 15 sq ft smaller than the $35,000 house:
m += exactly_smaller_than(kirby, price35000, 15)

# Clue 4: The $36,000 house is somewhat smaller than the Gillespie's structure:
m += smaller_than(price36000, gillespie)

# Clue 5: Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies:
m += Xor([
    (sq110 == price35000) & (sq140 == gillespie),
    (sq110 == gillespie) & (sq140 == price35000)
])


```

[['gillespie', 'sq140', 'price25000'], ['kirby', 'sq95', 'price36000'], ['pratt', 'sq110', 'price35000'], ['whitehead', 'sq125', 'price29000']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Nielsen's house is 30 sq ft larger than the $35,000 structure.
The 125 sq ft home is either the Whitehead's home or the $32,250 home.
The Whitehead's house sold for $29,000.
The Ewing's home sold for $32,250.
The $29,000 house is somewhat smaller than the $32,250 structure.

Entities:
customers: Ewing, Kirby, Nielsen, Whitehead
sq footage: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft
prices: $27,500, $29,000, $32,250, $35,000
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, sq footage, and price)
# e.g. if ewing == 1 and sq110 == 1 and price29000 == 1, then Ewing's house is 110 sq ft and sold for $29,000
ewing, kirby, nielsen, whitehead = customers = intvar(1, 4, shape=4)
sq95, sq110, sq125, sq140 = sq_footage = intvar(1, 4, shape=4)
price27500, price29000, price32250, price35000 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
sq_footage_to_int = {sq95: 95, sq110: 110, sq125: 125, sq140: 140}  # in sq ft
price_to_int = {price27500: 27500, price29000: 29000, price32250: 32250, price35000: 35000}  # in dollars


# Helper functions (for formulating comparison constraints)
def is_larger_than(var1, var2):
    """
    Formulate the constraint that var1 is larger than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(sq_footage_to_int[s1] > sq_footage_to_int[s2])
            for s1 in sq_footage for s2 in sq_footage]


def is_exactly_larger_than(var1, var2, diff):
    """
    Formulate the constraint that var1 is exactly diff sq ft larger than var2.
    """
    return [((s1 == var1) & (s2 == var2)).implies(sq_footage_to_int[s1] == sq_footage_to_int[s2] + diff)
            for s1 in sq_footage for s2 in sq_footage]


def sold_for_less_than(var1, var2):
    """
    Formulate the constraint that var1 sold for less than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] < price_to_int[p2])
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(sq_footage)
m += AllDifferent(prices)

# Clue 1: The Nielsen's house is 30 sq ft larger than the $35,000 structure:
m += is_exactly_larger_than(nielsen, price35000, 30)

# Clue 2: The 125 sq ft home is either the Whitehead's home or the $32,250 home:
m += Xor([
    sq125 == whitehead,
    sq125 == price32250
])

# Clue 3: The Whitehead's house sold for $29,000:
m += whitehead == price29000

# Clue 4: The Ewing's home sold for $32,250:
m += ewing == price32250

# Clue 5: The $29,000 house is somewhat smaller than the $32,250 structure:
m += sold_for_less_than(price29000, price32250)

```

[['ewing', 'sq95', 'price32250'], ['whitehead', 'sq125', 'price29000'], ['kirby', 'sq110', 'price35000'], ['nielsen', 'sq140', 'price27500']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Paulette's pair was a size 7.
Estelle's pair was by Cormano.
The Manzarita footwear was either the size 4 set or Whitney's pair.
Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6.

Entities:
customers: Estelle, Lucia, Paulette, Whitney
shoe sizes: 4, 5, 6, 7
brands: Cormano, Manzarita, Schtillet, Williford
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of customer, shoe size, and brand)
# e.g. if paulette == 1 and size7 == 1 and cormano == 1, then Paulette's pair was a size 7 by Cormano
paulette, estelle, lucia, whitney = customers = intvar(1, 4, shape=4)
size4, size5, size6, size7 = shoe_sizes = intvar(1, 4, shape=4)
cormano, manzarita, schtillet, williford = brands = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
customer_to_int = None  # N/A
shoe_size_to_int = {size4: 4, size5: 5, size6: 6, size7: 7}  # in sizes
brand_to_int = None  # N/A


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(customers)
m += AllDifferent(shoe_sizes)
m += AllDifferent(brands)

# Clue 1: Paulette's pair was a size 7:
m += paulette == size7

# Clue 2: Estelle's pair was by Cormano:
m += estelle == cormano

# Clue 3: The Manzarita footwear was either the size 4 set or Whitney's pair:
m += Xor([
    manzarita == size4,
    manzarita == whitney
])

# Clue 4: Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6:
m += Xor([
    (lucia == size7) & (schtillet == size6),
    (lucia == size6) & (schtillet == size7)
])

```

[['whitney', 'size5', 'manzarita'], ['paulette', 'size7', 'schtillet'], ['estelle', 'size4', 'cormano'], ['lucia', 'size6', 'williford']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
The project on the Serenity starts 1 month after Stacy's project.
Darryl's project starts 1 month after Gene's assignment.
The study beginning in April is either the study on the Liberty or the project on the Pegasus.
Lauren's project is on the Pegasus.

Entities:
students: Darryl, Gene, Lauren, Stacy
months: March, April, May, June
ships: Liberty, Osprey, Pegasus, Serenity
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of student, month, and ship)
# e.g. if darryl == 1 and may == 1 and pegasus == 1, then Darryl's project on the Pegasus starts in May
darryl, gene, lauren, stacy = students = intvar(1, 4, shape=4)
march, april, may, june = months = intvar(1, 4, shape=4)
liberty, osprey, pegasus, serenity = ships = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
student_to_int = None  # N/A
month_to_int = {march: 3, april: 4, may: 5, june: 6}  # in months
ship_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def starts_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 starts exactly diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(students)
m += AllDifferent(months)
m += AllDifferent(ships)

# Clue 1: The project on the Serenity starts 1 month after Stacy's project:
m += starts_exactly_after_than(serenity, stacy, 1)

# Clue 2: Darryl's project starts 1 month after Gene's assignment:
m += starts_exactly_after_than(darryl, gene, 1)

# Clue 3: The study beginning in April is either the study on the Liberty or the project on the Pegasus:
m += Xor([
    april == liberty,
    april == pegasus
])

# Clue 4: Lauren's project is on the Pegasus:
m += lauren == pegasus

```

[['darryl', 'june', 'osprey'], ['lauren', 'march', 'pegasus'], ['gene', 'may', 'serenity'], ['stacy', 'april', 'liberty']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Zimmerman is from the Wolverines.
The person from the Ice Hogs scored 1 goal less than the player from the Wolverines.
Klein had 9 goals this season.
The player from the Checkers scored 1 goal more than Walls.

Entities:
players: Klein, Underwood, Walls, Zimmerman
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Wolverines
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of player, goal, and team)
# e.g. if klein == 1 and goals9 == 1 and checkers == 1, then Klein scored 9 goals and is from the Checkers
klein, underwood, walls, zimmerman = players = intvar(1, 4, shape=4)
goals6, goals7, goals8, goals9 = goals = intvar(1, 4, shape=4)
checkers, comets, ice_hogs, wolverines = teams = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
player_to_int = None  # N/A
goal_to_int = {goals6: 6, goals7: 7, goals8: 8, goals9: 9}  # in goals
team_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def scored_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff goals more than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goal_to_int[g1] == goal_to_int[g2] + diff)
            for g1 in goals for g2 in goals]


def scored_exactly_less_than(var1, var2, diff):
    """
    Formulate the constraint that var1 scored exactly diff goals less than var2.
    """
    return [((g1 == var1) & (g2 == var2)).implies(goal_to_int[g1] == goal_to_int[g2] - diff)
            for g1 in goals for g2 in goals]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(players)
m += AllDifferent(goals)
m += AllDifferent(teams)

# Clue 1: Zimmerman is from the Wolverines:
m += zimmerman == wolverines

# Clue 2: The person from the Ice Hogs scored 1 goal less than the player from the Wolverines:
m += scored_exactly_less_than(ice_hogs, wolverines, 1)

# Clue 3: Klein had 9 goals this season:
m += klein == goals9

# Clue 4: The player from the Checkers scored 1 goal more than Walls:
m += scored_exactly_more_than(checkers, walls, 1)


```

[['klein', 'goals9', 'checkers'], ['walls', 'goals8', 'comets'], ['zimmerman', 'goals7', 'wolverines'], ['underwood', 'goals6', 'ice_hogs']]
True
True
True
Wrong: 0, Total: 7
---------------------------------------------------------------------------------------------

Clues:
Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw.
The macaw was bought 2 months before Ellen's pet.
The parakeet was bought 1 month after the finch.
Alberta's pet was bought 1 month before Gladys's pet.
The finch was bought sometime after the lovebird.

Entities:
names: Alberta, Della, Ellen, Gladys
months: January, February, March, April
birds: finch, lovebird, macaw, parakeet
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, month, and bird)
# e.g. if alberta == 1 and january == 1 and finch == 1, then Alberta bought a finch in January
alberta, della, ellen, gladys = names = intvar(1, 4, shape=4)
january, february, march, april = months = intvar(1, 4, shape=4)
finch, lovebird, macaw, parakeet = birds = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
month_to_int = {january: 1, february: 2, march: 3, april: 4}  # in months
bird_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def bought_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 was bought diff months after var2.
    """
    return [((m1 == var1) & (m2 == var2)).implies(month_to_int[m1] == month_to_int[m2] + diff)
            for m1 in months for m2 in months]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(months)
m += AllDifferent(birds)

# Clue 1: Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw:
m += Xor([
    (february == macaw) & (january == gladys),
    (february == gladys) & (january == macaw)
])

# Clue 2: The macaw was bought 2 months before Ellen's pet:
m += macaw == (ellen - 2)

# Clue 3: The parakeet was bought 1 month after the finch:
m += bought_exactly_after_than(parakeet, finch, 1)

# Clue 4: Alberta's pet was bought 1 month before Gladys's pet:
m += alberta == (gladys - 1)

# Clue 5: The finch was bought sometime after the lovebird:
m += bought_exactly_after_than(finch, lovebird, 1)

```

[['della', 'march', 'finch'], ['alberta', 'january', 'macaw'], ['gladys', 'february', 'lovebird'], ['ellen', 'april', 'parakeet']]
False
False
False
Wrong: 3, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016.
Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017.
The project headed by Dr. Ewing will go online sometime before the Zynga Complex.
Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC.
The Zynga Complex is headed by Dr. Baldwin.

Entities:
names: Egert Facility, Falston LCS, Tevatron LHC, Zynga Complex
years: 2016, 2017, 2018, 2019
scientists: Dr. Baldwin, Dr. Ewing, Dr. Kirk, Dr. Quinn
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of name, year, and scientist)
# e.g. if egert == 1 and year2016 == 1 and dr_baldwin == 1, then Egert Facility will go online in 2016 and is headed by Dr. Baldwin
egert, falston, tevatron, zynga = names = intvar(1, 4, shape=4)
year2016, year2017, year2018, year2019 = years = intvar(1, 4, shape=4)
dr_baldwin, dr_ewing, dr_kirk, dr_quinn = scientists = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
name_to_int = None  # N/A
year_to_int = {year2016: 2016, year2017: 2017, year2018: 2018, year2019: 2019}  # in years
scientist_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def goes_online_after(var1, var2):
    """
    Formulate the constraint that var1 goes online after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(names)
m += AllDifferent(years)
m += AllDifferent(scientists)

# Clue 1: The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016:
m += Xor([
    tevatron == year2019,
    tevatron == year2016
])

# Clue 2: Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017:
m += Xor([
    (dr_baldwin == falston) & (dr_quinn == year2017),
    (dr_baldwin == year2017) & (dr_quinn == falston)
])

# Clue 3: The project headed by Dr. Ewing will go online sometime before the Zynga Complex:
m += goes_online_after(zynga, dr_ewing)

# Clue 4: Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC:
m += Xor([
    (dr_ewing == egert) & (year2018 == tevatron),
    (dr_ewing == tevatron) & (year2018 == egert)
])

# Clue 5: The Zynga Complex is headed by Dr. Baldwin:
m += zynga == dr_baldwin


```

[['tevatron', 'year2016', 'dr_ewing'], ['zynga', 'year2017', 'dr_baldwin'], ['egert', 'year2018', 'dr_kirk'], ['falston', 'year2019', 'dr_quinn']]
True
True
True
Wrong: 0, Total: 8
---------------------------------------------------------------------------------------------

Clues:
The 2004 holiday is either the skydiving holiday or the holiday with Yvonne.
Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004.
The vacation with Andy was after the trip with Yvonne.
The holiday with Bill was 1 year after the trip with Andy.
The cycling trip was before the hunting vacation.

Entities:
friends: Andy, Bill, Isabel, Yvonne
years: 2001, 2002, 2003, 2004
activities: cycling, hunting, kayaking, skydiving
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of friend, year, and activity)
# e.g. if andy == 1 and year2001 == 1 and cycling == 1, then Andy's trip was in 2001 and it was a cycling trip
andy, bill, isabel, yvonne = friends = intvar(1, 4, shape=4)
year2001, year2002, year2003, year2004 = years = intvar(1, 4, shape=4)
cycling, hunting, kayaking, skydiving = activities = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
friend_to_int = None  # N/A
year_to_int = {year2001: 2001, year2002: 2002, year2003: 2003, year2004: 2004}  # in years
activity_to_int = None  # N/A


# Helper functions (for formulating comparison constraints)
def happened_after_than(var1, var2):
    """
    Formulate the constraint that var1 happened after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] > year_to_int[y2])
            for y1 in years for y2 in years]


def happened_exactly_after_than(var1, var2, diff):
    """
    Formulate the constraint that var1 happened exactly diff years after var2.
    """
    return [((y1 == var1) & (y2 == var2)).implies(year_to_int[y1] == year_to_int[y2] + diff)
            for y1 in years for y2 in years]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(friends)
m += AllDifferent(years)
m += AllDifferent(activities)

# Clue 1: The 2004 holiday is either the skydiving holiday or the holiday with Yvonne:
m += Xor([
    year2004 == skydiving,
    year2004 == yvonne
])

# Clue 2: Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004:
m += Xor([
    kayaking == year2001,
    kayaking == year2004
])
m += Xor([
    isabel == year2001,
    isabel == year2004
])

# Clue 3: The vacation with Andy was after the trip with Yvonne:
m += happened_after_than(andy, yvonne)

# Clue 4: The holiday with Bill was 1 year after the trip with Andy:
m += happened_exactly_after_than(bill, andy, 1)

# Clue 5: The cycling trip was before the hunting vacation:
m += happened_after_than(hunting, cycling)


```

[['isabel', 'year2001', 'kayaking'], ['bill', 'year2004', 'skydiving'], ['yvonne', 'year2002', 'cycling'], ['andy', 'year2003', 'hunting']]
False
True
False
Wrong: 2, Total: 8
---------------------------------------------------------------------------------------------

Clues:
Ginger was either the person who paid $160 or Vicki's client.
Beulah paid 10 dollars more than Yvonne's client.
Hannah paid less than Debra.
Vicki's client paid more than Debra.
Debra paid less than Pam's client.

Entities:
clients: Beulah, Debra, Ginger, Hannah
prices: $150, $160, $170, $180
masseuses: Lynda, Pam, Vicki, Yvonne
N/A
```python
from cpmpy import *

# Decision variables
# (variables with the same value will correspond to the same triplet of client, masseuse, and price)
# e.g. if beulah == 1 and lynda == 1 and price150 == 1, then beulah's masseuse is lynda and the price is 150
beulah, debra, ginger, hannah = clients = intvar(1, 4, shape=4)
lynda, pam, vicki, yvonne = masseuses = intvar(1, 4, shape=4)
price150, price160, price170, price180 = prices = intvar(1, 4, shape=4)

# Integer representation of the decision variables (for comparison constraints)
client_to_int = None  # N/A
masseuse_to_int = None  # N/A
price_to_int = {price150: 150, price160: 160, price170: 170, price180: 180}  # in dollars


# Helper functions (for formulating comparison constraints)
def paid_more_than(var1, var2):
    """
    Formulate the constraint that var1 paid more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] > price_to_int[p2])
            for p1 in prices for p2 in prices]


def paid_exactly_more_than(var1, var2, diff):
    """
    Formulate the constraint that var1 paid exactly $diff more than var2.
    """
    return [((p1 == var1) & (p2 == var2)).implies(price_to_int[p1] == price_to_int[p2] + diff)
            for p1 in prices for p2 in prices]


# Constraints
m = Model()

# All entities are different per category
m += AllDifferent(clients)
m += AllDifferent(masseuses)
m += AllDifferent(prices)

# Clue 1: Ginger was either the person who paid $160 or Vicki's client:
m += Xor([
    ginger == price160,
    ginger == vicki
])

# Clue 2: Beulah paid 10 dollars more than Yvonne's client:
m += paid_exactly_more_than(beulah, yvonne, 10)

# Clue 3: Hannah paid less than Debra:
m += paid_more_than(debra, hannah)

# Clue 4: Vicki's client paid more than Debra:
m += paid_more_than(vicki, debra)

# Clue 5: Debra paid less than Pam's client:
m += paid_more_than(debra, pam)

```

[['debra', 'lynda', 'price170'], ['beulah', 'pam', 'price160'], ['hannah', 'yvonne', 'price150'], ['ginger', 'vicki', 'price180']]
False
False
False
Wrong: 1, Total: 8
---------------------------------------------------------------------------------------------

