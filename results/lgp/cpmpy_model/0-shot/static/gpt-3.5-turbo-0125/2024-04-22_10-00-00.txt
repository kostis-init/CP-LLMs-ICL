Solution accuracy: 0.0%
Inverse Solution accuracy: 0.0%
Constraint accuracy: 0.0%
Model accuracy: 0.0%

Wrong solutions: 21, total: 100
Wrong inverse solutions: 100, total: 100
Wrong constraints: 0, total: 757
Wrong models: 100, total: 100
Errors: solution-level: 79, inverse solution-level: 0, constraint-level: 757, model-level: 0
---------------------------------------------------------------------------------------------

Clues:
The person who had the port paid 1 dollar more than Kurt.
Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the shiraz.
Of the person who paid $27 and Priscilla, one had the chianti and the other had the port.
Isabel paid $25.

Entities:
wines: chianti, port, riesling, shiraz
prices: $24, $25, $26, $27
names: Isabel, Kurt, Priscilla, Robin
N/A
```python
from cpmpy import *

# Define variables
wines = ["chianti", "port", "riesling", "shiraz"]
prices = [24, 25, 26, 27]
names = ["Isabel", "Kurt", "Priscilla", "Robin"]

wine_vars = IntVar(0, len(names)-1, shape=len(names))
price_vars = IntVar(0, len(prices)-1, shape=len(names))

# Define constraints
model = Model(
    AllDifferent(wine_vars),
    AllDifferent(price_vars),
    
    # Clues
    price_vars[names.index("Isabel")] == prices.index(25),
    
    # The person who had the port paid 1 dollar more than Kurt
    ((wine_vars == wines.index("port")) & (price_vars == prices.index(1 + prices[wines.index("port")]))) == (names.index("Kurt")),
    
    # Of the person who paid $25 and the person who paid $24, one was Priscilla and the other had the shiraz
    Xor([(price_vars == prices.index(25)) & (wine_vars == wines.index("shiraz")), 
         (price_vars == prices.index(24)) & (names == names.index("Priscilla")]),
    
    # Of the person who paid $27 and Priscilla, one had the chianti and the other had the port
    Xor([(price_vars == prices.index(27)) & (names == names.index("Priscilla")), 
         (wine_vars == wines.index("chianti")) & (names == names.index("Priscilla"))),
    Xor([(price_vars == prices.index(27)) & (wine_vars == wines.index("port")), 
         (wine_vars == wines.index("chianti")) & (price_vars == prices.index(27)])
)

print(model)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Celia used the gluten-free diet.
The friend who lost 3 pounds used the low-fat diet.
Mandy lost 2 fewer pounds than Raymond.
Mandy lost 4 more pounds than Tom.
The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds.

Entities:
pounds lost: 3, 5, 7, 9
diets: dairy-free, gluten-free, low-fat, vegan
names: Celia, Mandy, Raymond, Tom
N/A
```python
from cpmpy import *

# Entities
pounds = IntVar(3, 9, shape=4)
diets = StringVar(["dairy-free", "gluten-free", "low-fat", "vegan"], shape=4)
names = StringVar(["Celia", "Mandy", "Raymond", "Tom"], shape=4)

# Clues
model = Model(
    pounds[0] == 3,  # The friend who lost 3 pounds
    diets[0] == "gluten-free",  # Celia used the gluten-free diet
    pounds[1] == pounds[2] - 2,  # Mandy lost 2 fewer pounds than Raymond
    pounds[1] == pounds[3] + 4,  # Mandy lost 4 more pounds than Tom
    Xor([names[1] == "Mandy", diets[1] == "vegan"]),  # The dieter who used the vegan diet is either Mandy or the friend who lost 3 pounds
)

# Constraints
model += AllDifferent(pounds)
model += AllDifferent(diets)
model += AllDifferent(names)

# Solve the model
solution = model.solve()

if solution:
    print("Pounds lost:", [pounds[i].value() for i in range(4)])
    print("Diets:", [diets[i].value() for i in range(4)])
    print("Names:", [names[i].value() for i in range(4)])
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The four people were Shari, the performer who went fourth, the person who used batons and the performer who went third.
Of the performer who used bowling pins and the juggler who went fourth, one is Melissa and the other is Yolanda.
The juggler who used bowling pins was either Yolanda or the juggler who went second.
Trevor performed 2 spots before the performer who used chainsaws.

Entities:
orders: first, second, third, fourth
names: Melissa, Shari, Trevor, Yolanda
items: batons, bowling pins, chainsaws, rings
N/A
```python
from cpmpy import *

# Define variables
orders = ["first", "second", "third", "fourth"]
names = ["Melissa", "Shari", "Trevor", "Yolanda"]
items = ["batons", "bowling pins", "chainsaws", "rings"]

performer = IntVar(0, 3, shape=4)  # 0: Melissa, 1: Shari, 2: Trevor, 3: Yolanda
item = IntVar(0, 3, shape=4)  # 0: batons, 1: bowling pins, 2: chainsaws, 3: rings

# Add constraints
model = Model(
    AllDifferent(performer),
    AllDifferent(item),
    
    performer[names.index("Shari")] == item.index("batons"),
    performer.index("Melissa") != item.index("bowling pins"),
    performer.index("Yolanda") != item.index("bowling pins"),
    Xor([performer.index("Melissa") == item.index("bowling pins"), performer.index("Yolanda") == item.index("bowling pins")]),
    Xor([performer.index("Yolanda") == item.index("chainsaws"), performer.index("Yolanda") == 1]),
    Trevor == performer.index("Trevor") + 2
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i in range(4):
        print(f"{names[performer[i].value()]} performed {orders[i]} with {items[item[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The woman with 2 losses has 3 more wins than the boxer with 8 losses.
Edna Easton has 6 more wins than Irma.
Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses.
The boxer with 12 losses is either the fighter with 33 wins or Jane.

Entities:
wins: 24, 27, 30, 33
boxers: Edna Easton, Irma, Jane, Sonia
losses: 2, 4, 8, 12
N/A
```python
from cpmpy import *

# Entities
wins = IntVar(24, 33, shape=4)
boxers = ["Edna Easton", "Irma", "Jane", "Sonia"]
losses = [2, 4, 8, 12]

# Clues
woman_with_2_losses = wins.index(24)
boxer_with_8_losses = wins.index(27)
edna_index = boxers.index("Edna Easton")
irma_index = boxers.index("Irma")
sonia_index = wins.index(33)
fighter_with_27_wins_index = wins.index(27)
fighter_with_33_wins_index = wins.index(30)
boxer_with_12_losses_index = wins.index(33) if boxers.index("Jane") == wins.index(33) else wins.index(24)

model = Model(
    # The woman with 2 losses has 3 more wins than the boxer with 8 losses
    wins[woman_with_2_losses] == wins[boxer_with_8_losses] + 3,
    
    # Edna Easton has 6 more wins than Irma
    wins[edna_index] == wins[irma_index] + 6,
    
    # Of the boxer with 33 wins and the fighter with 27 wins, one is Sonia and the other has 12 losses
    Xor([wins[sonia_index] == 33, wins[fighter_with_27_wins_index] == 33]),
    Xor([losses[sonia_index] == 12, losses[fighter_with_27_wins_index] == 12]),
    
    # The boxer with 12 losses is either the fighter with 33 wins or Jane
    Xor([wins[boxer_with_12_losses_index] == 33, boxers.index("Jane") == boxer_with_12_losses_index])
)

# Solve the model
solution = model.solve()

if solution:
    for i, boxer in enumerate(boxers):
        print(f"{boxer} - Wins: {wins[i].value()} - Losses: {losses[i]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The person who will publish in January is either the person who has been studying the Cheer culture or Ira.
The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture.
Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette.
Vera will publish 1 month before Luther.

Entities:
months: January, February, March, April
names: Ira, Luther, Vera, Yvette
cultures: Cheer, Garyk, Haleyito, Xozix
N/A
```python
from cpmpy import *

# Define variables
months = ["January", "February", "March", "April"]
names = ["Ira", "Luther", "Vera", "Yvette"]
cultures = ["Cheer", "Garyk", "Haleyito", "Xozix"]

publish_month = IntVar(0, len(months)-1, shape=len(names))
study_culture = IntVar(0, len(cultures)-1, shape=len(names))

# Define constraints
model = Model(
    AllDifferent(publish_month),
    AllDifferent(study_culture),
    
    # The person who will publish in January is either the person who has been studying the Cheer culture or Ira
    ((study_culture == cultures.index("Cheer")) | (names == "Ira")) == (publish_month == months.index("January")),
    
    # The person who has been studying the Xozix culture will publish 1 month before the person who has been studying the Haleyito culture
    ((study_culture == cultures.index("Xozix")) & (publish_month == months.index("March"))) == (study_culture == cultures.index("Haleyito")),
    
    # Of the student who will publish in March and the person who has been studying the Xozix culture, one is Luther and the other is Yvette
    ((publish_month == months.index("March")) & (study_culture == cultures.index("Xozix"))) == ((names == "Luther") ^ (names == "Yvette")),
    
    # Vera will publish 1 month before Luther
    (names == "Vera") == (publish_month == (publish_month[names.index("Luther")] - 1))
)

# Solve the model
solution = model.solve()

if solution:
    for i, name in enumerate(names):
        print(f"{name} will publish in {months[solution[publish_month[i]].value()]} and has been studying the {cultures[solution[study_culture[i]].value()]} culture.")
else:
    print("No solution found.")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Francis will depart from Manson.
The conductor working on June 12 is either the conductor departing from Buttonwillow or Greg.
Ira will leave 1 day before the conductor departing from Manson.
The person departing from Buttonwillow will leave 1 day before the conductor departing from Indio.

Entities:
days: June 10, June 11, June 12, June 13
names: Francis, Greg, Ira, Oscar
departures: Buttonwillow, Coulterville, Indio, Manson
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Entities
days = ["June 10", "June 11", "June 12", "June 13"]
names = ["Francis", "Greg", "Ira", "Oscar"]
departures = ["Buttonwillow", "Coulterville", "Indio", "Manson"]

# Variables
francis_departure = intvar(0, 3)
conductor_june12 = intvar(0, 3)
ira_departure = intvar(0, 3)
buttonwillow_departure = intvar(0, 3)
conductor_indio = intvar(0, 3)

# Constraints
model = Model(
    AllDifferent([francis_departure, conductor_june12, ira_departure, buttonwillow_departure, conductor_indio]),
    francis_departure == departures.index("Manson"),
    (conductor_june12 == departures.index("Buttonwillow")) | (conductor_june12 == names.index("Greg")),
    ira_departure == francis_departure - 1,
    buttonwillow_departure == conductor_indio - 1
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Print solution
if solver.is_solution():
    for name, day_idx in zip(names, [francis_departure.value(), conductor_june12.value(), ira_departure.value(), buttonwillow_departure.value()]):
        print(f"{name} departs on {days[day_idx]}")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Vicky Estes used the catamaran.
Debra Decker took 4 fewer days to finish than the sailor in the trimaran.
Wendell Orr finished in 278 days.
The competitor in the schooner took 4 more days to finish than Vicky Estes.

Entities:
days: 270, 274, 278, 282
boat types: catamaran, ketch, schooner, trimaran
sailors: Debra Decker, Gil Baxter, Vicky Estes, Wendell Orr
N/A
```python
from cpmpy import *

days = intvar(270, 282, shape=4)
catamaran, ketch, schooner, trimaran = intvar(0, 3, shape=4)
Debra_Decker, Gil_Baxter, Vicky_Estes, Wendell_Orr = intvar(0, 3, shape=4)

model = Model(
    AllDifferent([catamaran, ketch, schooner, trimaran]),
    AllDifferent([Debra_Decker, Gil_Baxter, Vicky_Estes, Wendell_Orr]),
    
    Vicky_Estes == catamaran,
    Debra_Decker == trimaran,
    Wendell_Orr == 2,
    
    (schooner == Vicky_Estes + 1) | (schooner == Vicky_Estes - 1),
    (Debra_Decker == Wendell_Orr - 4),
)

for i in range(4):
    model += days[i] == 270 + i*4

model.solve()
print(days.value())
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Jorge is either the skydiver who wears the red suit or the jumper who started in 1982.
The skydiver who wears the pink suit started skydiving 1 year before Otis.
The jumper who wears the yellow suit started skydiving sometime after Philip.
The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit.
The jumper who wears the pink suit started skydiving 2 years before Shaun.

Entities:
names: Jorge, Otis, Philip, Shaun
years: 1982, 1983, 1984, 1985
suit colors: lime green, pink, red, yellow
N/A
```python
from cpmpy import *

# Entities
names = ["Jorge", "Otis", "Philip", "Shaun"]
years = [1982, 1983, 1984, 1985]
suit_colors = ["lime green", "pink", "red", "yellow"]

# Variables
jumper = IntVar(0, 3, shape=len(names))  # 0: skydiver, 1: jumper
wears_suit = IntVar(0, 3, shape=len(names))  # 0: lime green, 1: pink, 2: red, 3: yellow
started_year = IntVar(1982, 1985, shape=len(names))

# Constraints
model = Model(
    AllDifferent(jumper),
    AllDifferent(wears_suit),
    AllDifferent(started_year),
    
    (wears_suit[names.index("Jorge")] == 2) | (started_year[names.index("Jorge")] == 1982),
    
    (wears_suit[names.index("pink")] == 1) == (started_year[names.index("pink")] == started_year[names.index("Otis")] - 1),
    
    (wears_suit[names.index("yellow")] == 3) < (started_year[names.index("yellow")] > started_year[names.index("Philip")]),
    
    (wears_suit[names.index("lime green")] == 0) > (started_year[names.index("lime green")] > started_year[names.index("yellow")]),
    
    (wears_suit[names.index("pink")] == 1) == (started_year[names.index("pink")] == started_year[names.index("Shaun")] + 2)
)

# Solve
solution = model.solve()

# Print solution
if solution:
    for name in names:
        idx = names.index(name)
        print(f"{name} - Jumper: {jumper[idx].value()} Suit: {suit_colors[wears_suit[idx].value()]} Started: {started_year[idx].value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The ambassador with the 9 day visit will leave sometime after Fitzgerald.
Quinn will leave 2 months after Bender.
The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald.
Quinn will leave 1 month before the ambassador with the 7 day visit.

Entities:
diplomats: Bender, Fitzgerald, Owens, Quinn
months: January, February, March, April
durations: 2 day, 3 day, 7 day, 9 day
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Entities
diplomats = ["Bender", "Fitzgerald", "Owens", "Quinn"]
months = ["January", "February", "March", "April"]
durations = ["2 day", "3 day", "7 day", "9 day"]

# Decision variables
visit = intvar(2, 9, shape=len(diplomats))
leave_month = intvar(1, 4, shape=len(diplomats))

# Constraints
model = Model(
    AllDifferent(visit),
    AllDifferent(leave_month),
    visit[diplomats.index("Fitzgerald")] < visit[diplomats.index("Owens")],
    Xor(leave_month[diplomats.index("Fitzgerald")] == 1, leave_month[diplomats.index("Fitzgerald")] == 3),
    Quinn_leave_month == Bender_leave_month + 2,
    (Fitzgerald_leave_month == 1) | (Fitzgerald_leave_month == 3),
    Quinn_leave_month == Ambassador_7day_visit_leave_month - 1
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Print solution
for diplomat in diplomats:
    idx = diplomats.index(diplomat)
    print(f"{diplomat}: {months[leave_month[idx].value()-1]} - {visit[idx].value()} day visit")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Ultra Hex is Gabe Grant.
Criminal Bane is either the hero who started in 2007 or the superhero who started in 2009.
Peter Powers began sometime before Matt Minkle.
Gabe Grant began 1 year after Wonderman.
The four people are Deep Shadow, the superhero who started in 2007, the hero who started in 2009 and Matt Minkle.

Entities:
years: 2007, 2008, 2009, 2010
superheroes: Criminal Bane, Deep Shadow, Ultra Hex, Wonderman
names: Gabe Grant, Ivor Ingram, Matt Minkle, Peter Powers
N/A
```python
from cpmpy import *

years = IntVar(2007, 2010, shape=4)
superheroes = StringVar(["Criminal Bane", "Deep Shadow", "Ultra Hex", "Wonderman"], shape=4)
names = StringVar(["Gabe Grant", "Ivor Ingram", "Matt Minkle", "Peter Powers"], shape=4)

ultra_hex = superheroes.index("Ultra Hex")
criminal_bane = superheroes.index("Criminal Bane")
started_2007 = years.index(2007)
started_2009 = years.index(2009)
peter_powers = names.index("Peter Powers")
matt_minkle = names.index("Matt Minkle")
wonderman = superheroes.index("Wonderman")

model = Model(
    ultra_hex == names.index("Gabe Grant"),
    Xor([criminal_bane == started_2007, criminal_bane == started_2009]),
    peter_powers < matt_minkle,
    names.index("Wonderman") + 1 == ultra_hex,
    AllDifferent([ultra_hex, started_2007, started_2009, matt_minkle])
)

# Constraints for the given clues can be added here

```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Sancode interview is 1 day after the meeting for the copywriter position.
The Laneplex interview is on August 20th.
The meeting for the copywriter position is 2 days before the meeting for the web developer position.
The Haytouch interview is for the sales rep job.

Entities:
days: August 20th, August 21st, August 22nd, August 23rd
companies: Canway, Haytouch, Laneplex, Sancode
positions: copywriter, janitor, sales rep, web developer
N/A
```python
from cpmpy import *

days = ["August 20th", "August 21st", "August 22nd", "August 23rd"]
companies = ["Canway", "Haytouch", "Laneplex", "Sancode"]
positions = ["copywriter", "janitor", "sales rep", "web developer"]

# Variables
interview_dates = IntVar(0, len(days)-1, shape=len(companies))
meeting_dates = IntVar(0, len(days)-1, shape=len(positions))

# Constraints
model = Model(
    AllDifferent(interview_dates),
    AllDifferent(meeting_dates),
    
    interview_dates[companies.index("Laneplex")] == days.index("August 20th"),
    interview_dates[companies.index("Haytouch")] == days.index("August 21st"),
    meeting_dates[positions.index("copywriter")] == meeting_dates[positions.index("web developer")] - 2,
    meeting_dates[positions.index("sales rep")] == days.index("August 22nd"),
    interview_dates[companies.index("Sancode")] == meeting_dates[positions.index("copywriter")] + 1
)
```
None
Error when trying to check solution from predicted model: max() arg is an empty sequence
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Quince Street project will be headed by Freda Fisher.
Of the job starting in May and the Oak Road project, one will be headed by Dawn Daniels and the other will be headed by Irma Ingram.
Of the job starting in July and the job starting in April, one will focus on Oak Road and the other will be headed by Freda Fisher.
The Aspen Court project starts in May.
The Aspen Court project begins sometime after Dawn Daniels's project.

Entities:
months: April, May, June, July
streets: Aspen Court, Norway Court, Oak Road, Quince Street
managers: Bill Bonner, Dawn Daniels, Freda Fisher, Irma Ingram
N/A
```python
from cpmpy import *

# Entities
months = ["April", "May", "June", "July"]
streets = ["Aspen Court", "Norway Court", "Oak Road", "Quince Street"]
managers = ["Bill Bonner", "Dawn Daniels", "Freda Fisher", "Irma Ingram"]

# Variables
project_manager = IntVar(0, len(managers)-1, shape=len(streets))
project_month = IntVar(0, len(months)-1, shape=len(streets))

# Constraints
model = Model(
    AllDifferent(project_manager),
    AllDifferent(project_month),
    
    project_manager[streets.index("Quince Street")] == managers.index("Freda Fisher"),
    
    Xor(project_manager[streets.index("Oak Road")] == managers.index("Dawn Daniels"),
        project_manager[streets.index("May")] == managers.index("Dawn Daniels")),
    
    Xor(project_manager[project_month.index("July")] == managers.index("Freda Fisher"),
        project_manager[project_month.index("April")] == managers.index("Freda Fisher")),
    
    project_month[streets.index("Aspen Court")] == months.index("May"),
    
    project_month[streets.index("Aspen Court")] > project_month[streets.index("Dawn Daniels")]
)

# Solve
solution = model.solve()

if solution:
    for street, manager_idx, month_idx in zip(streets, project_manager, project_month):
        print(f"{street} project will be headed by {managers[manager_idx.value()]} and starts in {months[month_idx.value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of Sophie and Gwen, one will bring their rabbit's foot and the other will leave in January.
Sophie will leave sometime before Gwen.
The passenger with the lucky hat, Gwen and Sophie are all different fliers.
Florence will leave 2 months after the passenger with the lucky hat.
The passenger leaving in April is either Gwen or the passenger with the talisman.

Entities:
months: January, February, March, April
fliers: Florence, Gwen, Olive, Sophie
lucky charms: coin, lucky hat, rabbit's foot, talisman
N/A
```python
from cpmpy import *

# Define entities
months = ["January", "February", "March", "April"]
fliers = ["Florence", "Gwen", "Olive", "Sophie"]
lucky_charms = ["coin", "lucky hat", "rabbit's foot", "talisman"]

# Define decision variables
flier_charm = IntVar(0, len(lucky_charms)-1, shape=len(fliers))
flier_month = IntVar(0, len(months)-1, shape=len(fliers))

# Define constraints
model = Model(
    AllDifferent(flier_charm),
    AllDifferent(flier_month),
    flier_charm[fliers.index("Sophie")] != lucky_charms.index("rabbit's foot"),
    flier_charm[fliers.index("Gwen")] != months.index("January"),
    flier_month[fliers.index("Sophie")] < flier_month[fliers.index("Gwen")],
    flier_charm[fliers.index("Florence")] == flier_charm[fliers.index("Gwen")] + 2,
    (flier_month[fliers.index("Gwen")] == months.index("April")) | (flier_charm[fliers.index("Gwen")] == lucky_charms.index("talisman"))
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for flier in fliers:
        idx = fliers.index(flier)
        print(f"{flier} will leave in {months[flier_month[idx].value()]} with {lucky_charms[flier_charm[idx].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Iunsel launched in February.
The Munei is going to Mars.
The Munei launched 1 month after the mission going to Pluto.
Of the mission going to Ganymede and the mission going to Pluto, one launched in March and the other is the Chano.

Entities:
months: January, February, March, April
probes: Ateyin, Chano, Iunsel, Munei
destinations: Ganymede, Mars, Pluto, Uranus
N/A
```python
from cpmpy import *

# Define entities
months = ["January", "February", "March", "April"]
probes = ["Ateyin", "Chano", "Iunsel", "Munei"]
destinations = ["Ganymede", "Mars", "Pluto", "Uranus"]

# Define variables
launch_month = IntVar(1, 4, shape=len(probes))
destination = IntVar(0, 3, shape=len(probes))

# Define constraints
model = Model(
    AllDifferent(launch_month),
    AllDifferent(destination),
    
    launch_month[probes.index("Iunsel")] == months.index("February"),
    destination[probes.index("Munei")] == destinations.index("Mars"),
    
    (destination[probes.index("Munei")] == destinations.index("Pluto")).implies(
        launch_month[probes.index("Munei")] == months.index("March")
    ),
    
    Xor([
        (destination[probes.index("Chano")] == destinations.index("Ganymede")),
        (destination[probes.index("Chano")] == destinations.index("Pluto"))
    ]),
    
    (destination[probes.index("Chano")] == destinations.index("Ganymede")).implies(
        launch_month[probes.index("Chano")] == months.index("March")
    ),
    (destination[probes.index("Chano")] == destinations.index("Pluto")).implies(
        probes.index("Chano") == probes.index("Chano")
    )
)

# Solve the model
solution = model.solve()

if solution:
    for probe in probes:
        print(f"{probe} - Launch Month: {months[launch_month[probes.index(probe)].value()]}, Destination: {destinations[destination[probes.index(probe)].value()]}")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The blue topaz sold for 10 dollars more than the gem found in the Osborne claim.
The rhodolite went for $820.
The tourmaline is either the gem that sold for $810 or the gem found in the Underwood claim.
Of the gem found in the Collins claim and the aquamarine, one went for $790 and the other went for $800.

Entities:
prices: $790, $800, $810, $820
gems: aquamarine, blue topaz, rhodolite, tourmaline
claims: Collins, Knox, Osborne, Underwood
N/A
```python
from cpmpy import *

# Define variables
prices = IntVar(790, 820, shape=4)
gems = StringVar(['aquamarine', 'blue topaz', 'rhodolite', 'tourmaline'], shape=4)
claims = StringVar(['Collins', 'Knox', 'Osborne', 'Underwood'], shape=4)

# Define constraints
model = Model(
    AllDifferent(prices),
    AllDifferent(gems),
    AllDifferent(claims),
    
    (gems.index('blue topaz') == claims.index('Osborne')) & (prices[gems.index('blue topaz')] == prices[gems.index('Osborne')] + 10),
    prices[gems.index('rhodolite')] == 820,
    Xor([prices[gems.index('tourmaline')] == 810, claims.index('tourmaline') == claims.index('Underwood')]),
    Xor([prices[gems.index('aquamarine')] == 790, prices[gems.index('Collins')] == 790]),
    Xor([prices[gems.index('aquamarine')] == 800, prices[gems.index('Collins')] == 800])
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for gem, claim, price in zip(gems, claims, prices):
        print(f"The {gem.value()} found in the {claim.value()} claim was sold for ${price.value()}.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The facility launching in March is the tokamak reactor.
The reactor launching in April is either the direct drive facility or the z-pinch facility.
Of the fusor reactor and the z-pinch facility, one will launch in February and the other is the Kuchiwa W10.
The Essita CBT will launch in February.
The Haramarui LV will launch 1 month before the fusor reactor.

Entities:
months: January, February, March, April
names: Essita CBT, Haramarui LV, Kuchiwa W10, Rodim-Rexit
types: direct drive, fusor, tokamak, z-pinch
N/A
```python
from cpmpy import *

# Define entities
months = ["January", "February", "March", "April"]
names = ["Essita CBT", "Haramarui LV", "Kuchiwa W10", "Rodim-Rexit"]
types = ["direct drive", "fusor", "tokamak", "z-pinch"]

# Define variables
launch_month = IntVar(0, len(months)-1, shape=len(names))
launch_type = IntVar(0, len(types)-1, shape=len(names))

# Define constraints
model = Model(
    AllDifferent(launch_month),
    AllDifferent(launch_type),
    
    launch_month[names.index("Essita CBT")] == months.index("February"),
    
    launch_month[names.index("Haramarui LV")] == launch_month[names.index("fusor")] - 1,
    
    launch_type[names.index("Kuchiwa W10")] == launch_type[names.index("fusor")] ^ 1,
    
    launch_type[names.index("tokamak")] == months.index("March"),
    
    Xor([launch_type[names.index("direct drive")], launch_type[names.index("z-pinch")], launch_month[names.index("direct drive")] == months.index("April"), launch_month[names.index("z-pinch")] == months.index("April")])
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for name in names:
        print(f"{name} will launch in {months[launch_month[names.index(name)].value]} and is a {types[launch_type[names.index(name)].value]} reactor.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan.
Herbert's assignment will involve 25 fewer people than Susan's assignment.
Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday.
Herbert's event is either the event with 50 attendees or the graduation job.

Entities:
people: 50, 75, 100, 125
planners: Herbert, Joel, Susan, Teresa
events: anniversary, birthday, graduation, wedding
N/A
```python
from cpmpy import *

people = [50, 75, 100, 125]
planners = ["Herbert", "Joel", "Susan", "Teresa"]
events = ["anniversary", "birthday", "graduation", "wedding"]

# Define decision variables
assignments = intvar(people, shape=len(events))
planner_assignments = intvar(1, len(planners), shape=len(events))

# Clues
model = Model(
    AllDifferent(assignments),
    AllDifferent(planner_assignments),
    
    # Of the anniversary event and the event with 100 attendees, one will be handled by Joel and the other will be handled by Susan
    (assignments[events.index("anniversary")] == 100) & (planner_assignments[events.index("anniversary")] == planners.index("Joel")),
    (assignments[events.index("wedding")] == 100) & (planner_assignments[events.index("wedding")] == planners.index("Susan")),
    
    # Herbert's assignment will involve 25 fewer people than Susan's assignment
    (assignments[events.index("anniversary")] == 100) & (assignments[events.index("wedding")] == 125),
    
    # Of the assignment with 75 attendees and the assignment with 100 attendees, one will be handled by Susan and the other is the birthday
    (assignments[events.index("birthday")] == 75) & (planner_assignments[events.index("birthday")] == planners.index("Susan")),
    
    # Herbert's event is either the event with 50 attendees or the graduation job
    Xor([assignments[events.index("graduation")] == 50, planner_assignments[events.index("graduation")] == planners.index("Herbert")])
)

print(model)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
D. forcilitis has 500 genes.
B. mangeris was either the one sequenced by Dr. Ortiz or the organism with 750 genes.
The organism sequenced by Dr. Trujillo has 500 more genes than the bacteria sequenced by Dr. Nielsen.
Of the bacteria sequenced by Dr. Jordan and the bacteria sequenced by Dr. Trujillo, one has 1000 genes and the other is E. carolinus.

Entities:
genes: 250, 500, 750, 1000
bacteria: B. mangeris, D. forcilitis, E. carolinus, P. wellington
doctors: Jordan, Nielsen, Ortiz, Trujillo
N/A
```python
from cpmpy import *

# Entities
genes = IntVar(250, 1000, shape=4)
bacteria = StringVar(['B. mangeris', 'D. forcilitis', 'E. carolinus', 'P. wellington'])
doctors = StringVar(['Jordan', 'Nielsen', 'Ortiz', 'Trujillo'])

# Clues
model = Model(
    genes[bacteria.index('D. forcilitis')] == 500,
    Xor(genes[bacteria.index('B. mangeris')] == 750, doctors[bacteria.index('B. mangeris')] == 'Ortiz'),
    genes[doctors.index('Trujillo')] == genes[doctors.index('Nielsen')] + 500,
    Xor(genes[doctors.index('Jordan')] == 1000, bacteria[doctors.index('Jordan')] == 'E. carolinus'),
    Xor(genes[doctors.index('Trujillo')] == 1000, bacteria[doctors.index('Trujillo')] == 'E. carolinus')
)

# Solve the model
solution = model.solve()

if solution:
    print("Solution found:")
    for var in [genes, bacteria, doctors]:
        for i in range(4):
            print(var[i], "=", var.value(i))
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The mountain that is 210 feet tall was climbed by Leonard Lara.
Of Mt. Brewer and Mt. Quinn, one was climbed by Ben Beasley and the other is 470 feet tall.
Mt. Brewer is either the mountain summited by Leonard Lara or the peak that is 600 feet tall.
Mt. York was climbed by Kermit Kramer.

Entities:
heights: 210, 340, 470, 600
mountains: Mt. Brewer, Mt. Gillespie, Mt. Quinn, Mt. York
climbers: Ben Beasley, Eddie English, Kermit Kramer, Leonard Lara
N/A
```python
from cpmpy import *

# Entities
heights = [210, 340, 470, 600]
mountains = ['Mt. Brewer', 'Mt. Gillespie', 'Mt. Quinn', 'Mt. York']
climbers = ['Ben Beasley', 'Eddie English', 'Kermit Kramer', 'Leonard Lara']

# Variables
height = intvar(210, 600, shape=len(mountains))
climber = intvar(0, len(climbers)-1, shape=len(mountains))

# Clues
model = Model(
    height[0] == 210,
    climber[0] == climbers.index('Leonard Lara'),
    (height[1] == 470) & (height[2] == 340),
    (climber[1] == climbers.index('Ben Beasley')) & (climber[2] != climbers.index('Ben Beasley')),
    (height[1] == 600) | (mountains[1] == 'Mt. Brewer'),
    climber[3] == climbers.index('Kermit Kramer')
)

# Constraints
model += AllDifferent(height)
model += AllDifferent(climber)

# Solve
solution = model.solve()

if solution:
    for i, mountain in enumerate(mountains):
        print(f"{mountain}: Height {height[i].value()}, Climber {climbers[climber[i].value()]}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Opie Oliver's card came out in 2012.
The piece that sold for $175 came out in 1999.
Of the 2012 card and the 1987 item, one featured Mike Morales and the other sold for $275.
Neddy Norris's item sold for 50 dollars more than the 1987 card.

Entities:
prices: $125, $175, $225, $275
players: Finn Freeman, Mike Morales, Neddy Norris, Opie Oliver
years: 1974, 1987, 1999, 2012
N/A
```python
from cpmpy import *

# Define entities
prices = ["$125", "$175", "$225", "$275"]
players = ["Finn Freeman", "Mike Morales", "Neddy Norris", "Opie Oliver"]
years = [1974, 1987, 1999, 2012]

# Define variables
opie_year = intvar(2012, 2012)
price_175_year = intvar(1999, 1999)
price_175 = "$175"
price_275 = "$275"
mike_year = intvar(1987, 1987)
neddy_price = intvar(175, 275)
neddy_price_diff = 50

# Define constraints
model = Model(
    opie_year == 2012,
    price_175_year == 1999,
    (opie_year == mike_year) | (price_175 == price_275),
    (neddy_price == price_175 + neddy_price_diff),
    AllDifferent([opie_year, price_175_year, mike_year, neddy_price]),
)

# Solve the model
solution = model.solve()

if solution:
    for player in players:
        print(f"{player}'s item: {opie_year.value() if player == 'Opie Oliver' else price_175_year.value() if player == 'Finn Freeman' else mike_year.value() if player == 'Mike Morales' else neddy_price.value()} ({price_175 if player == 'Finn Freeman' or player == 'Mike Morales' else '$' + str(neddy_price.value())})")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of Nelson and the cook who scored 63 points, one made the lemon snapper and the other made the cajun chili.
Of the chef who scored 42 points and the cook who scored 63 points, one made the cashew tofu and the other was Rosalie.
Karl scored 7 more points than the person who made the lemon snapper.

Entities:
scores: 42, 49, 56, 63
chefs: Karl, Nelson, Peggy, Rosalie
dishes: cajun chili, cashew tofu, lemon snapper, smoked pork
N/A
```python
from cpmpy import *

# Entities
scores = [42, 49, 56, 63]
chefs = ["Karl", "Nelson", "Peggy", "Rosalie"]
dishes = ["cajun chili", "cashew tofu", "lemon snapper", "smoked pork"]

# Variables
chef_dish = IntVar(0, len(chefs)-1, shape=len(dishes))
chef_score = IntVar(0, len(scores)-1, shape=len(chefs))

# Constraints
model = Model(
    AllDifferent(chef_dish),
    AllDifferent(chef_score),
    
    # Clues
    (chef_dish[dishes.index("lemon snapper")] == chefs.index("Karl") + 1) | (chef_dish[dishes.index("lemon snapper")] == chefs.index("Nelson") + 1),
    (chef_score[chefs.index("Nelson")] == scores.index(63)) | (chef_score[chefs.index("cook")] == scores.index(63)),
    (chef_score[chefs.index("chef")] == scores.index(42)) | (chef_score[chefs.index("cook")] == scores.index(63)),
    (chef_dish[dishes.index("lemon snapper")] == chefs.index("Karl") + 1) & (chef_score[chefs.index("Karl")] == scores.index(49))
)

# Solve
model.solve()
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Alejandro's purchase cost less than Irma's purchase.
The insect that sold for $90 was either the atlas butterfly or the emperor butterfly.
The peacock butterfly cost more than Irma's purchase.
Of Alejandro's purchase and Irma's purchase, one was the emperor butterfly and the other sold for $45.
The four butterflies were Phillip's purchase, the insect that sold for $60, the butterfly that sold for $45 and the butterfly that sold for $90.

Entities:
prices: $45, $60, $75, $90
winners: Alejandro, Faye, Irma, Phillip
butterflies: atlas, emperor, grayling, peacock
N/A
```python
from cpmpy import *

# Define variables
prices = ["$45", "$60", "$75", "$90"]
winners = ["Alejandro", "Faye", "Irma", "Phillip"]
butterflies = ["atlas", "emperor", "grayling", "peacock"]

alejandro_purchase = IntVar(0, 3)
irma_purchase = IntVar(0, 3)
atlas_price = IntVar(0, 3)
emperor_price = IntVar(0, 3)
peacock_price = IntVar(0, 3)
phillip_purchase = IntVar(0, 3)
price_45 = IntVar(0, 3)
price_60 = IntVar(0, 3)
price_75 = IntVar(0, 3)
price_90 = IntVar(0, 3)

# Define constraints
model = Model(
    AllDifferent([alejandro_purchase, irma_purchase, atlas_price, emperor_price, peacock_price, phillip_purchase, price_45, price_60, price_75, price_90]),
    
    alejandro_purchase != irma_purchase,
    (atlas_price == 3) | (emperor_price == 3),
    peacock_price > irma_purchase,
    (alejandro_purchase == atlas_price) ^ (irma_purchase == atlas_price),
    (alejandro_purchase == price_45) ^ (irma_purchase == price_45),
    (alejandro_purchase == price_60) ^ (irma_purchase == price_60),
    (alejandro_purchase == price_75) ^ (irma_purchase == price_75),
    (alejandro_purchase == price_90) ^ (irma_purchase == price_90),
    
    phillip_purchase != 1,
    price_60 != 1,
    price_45 != 1,
    price_90 != 1
)

# Solve the model
solution = model.solve()

if solution:
    # Retrieve and print the values
    for entity in [alejandro_purchase, irma_purchase, atlas_price, emperor_price, peacock_price, phillip_purchase, price_45, price_60, price_75, price_90]:
        print(f"{entity.name()}: {entity.value()}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The athlete who traveled for 195 days started from Pescadero.
Of Dana and the athlete who traveled for 184 days, one started from Cayucos and the other started from Bodega Bay .
Hilda finished in 217 days .
Walter finished 11 days before the athlete who started from Cayucos.

Entities:
durations: 184 days, 195 days, 206 days, 217 days
rowers: Antonio, Dana, Hilda, Walter
start points: Bodega Bay, Cayucos, Pescadero, Pismo Beach
N/A
```python
from cpmpy import *

# Entities
durations = [184, 195, 206, 217]
rowers = ['Antonio', 'Dana', 'Hilda', 'Walter']
start_points = ['Bodega Bay', 'Cayucos', 'Pescadero', 'Pismo Beach']

# Variables
athlete_duration = IntVar(184, 217)
athlete_rower = StringVar(rowers)
athlete_start_point = StringVar(start_points)

# Constraints
model = Model(
    # Each duration, rower, and start point is assigned to exactly one athlete
    AllDifferent([athlete_duration[i] for i in range(len(rowers))]),
    AllDifferent([athlete_rower[i] for i in range(len(rowers))]),
    AllDifferent([athlete_start_point[i] for i in range(len(rowers))]),

    # Clues
    athlete_duration[rowers.index('Antonio')] == 195,
    athlete_start_point[rowers.index('Antonio')] == 'Pescadero',

    Xor(athlete_start_point[rowers.index('Dana')] == 'Cayucos', athlete_start_point[rowers.index('Dana')] == 'Bodega Bay'),

    athlete_rower[durations.index(217)] == 'Hilda',
    
    athlete_duration[rowers.index('Walter')] == athlete_duration[rowers.index('Cayucos')] - 11
)

# Solve the model
solution = model.solve()

if solution:
    for i in range(len(rowers)):
        print(f"{rowers[i]} traveled for {athlete_duration[i].value()} days, starting from {athlete_start_point[i].value()}.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The movie that grossed 5 million was directed by Kenneth Key.
Of What a World and Amerigo, one made 2 million and the other was directed by Jim Johnson.
The film directed by Kenneth Key made 3 million less than Amerigo.
Fast and Dead was directed by Kenneth Key.
Let Me Out is either the movie directed by Linda Lynch or the movie that grossed 5 million.

Entities:
earnings: 2 million, 5 million, 8 million, 11 million
movies: Amerigo, Fast and Dead, Let Me Out, What a World
directors: Jim Johnson, Kenneth Key, Linda Lynch, Micah Moreno
N/A
```python
from cpmpy import *

earnings = ["2 million", "5 million", "8 million", "11 million"]
movies = ["Amerigo", "Fast and Dead", "Let Me Out", "What a World"]
directors = ["Jim Johnson", "Kenneth Key", "Linda Lynch", "Micah Moreno"]

# Define decision variables
movie_director = IntVar(0, len(directors)-1, shape=len(movies))
movie_earnings = IntVar(0, len(earnings)-1, shape=len(movies))

# Clues
model = Model(
    movie_director[movies.index("Fast and Dead")] == directors.index("Kenneth Key"),
    movie_earnings[movies.index("Let Me Out")] == earnings.index("5 million"),
    (movie_director[movies.index("Let Me Out")] == directors.index("Linda Lynch")) | (movie_earnings[movies.index("Let Me Out")] == earnings.index("5 million")),
    (movie_earnings[movies.index("Amerigo")] == earnings.index("2 million")) ^ (movie_earnings[movies.index("What a World")] == earnings.index("2 million")),
    (movie_director[movies.index("Amerigo")] == directors.index("Jim Johnson")) ^ (movie_director[movies.index("What a World")] == directors.index("Jim Johnson")),
    movie_earnings[movies.index("Kenneth Key")] == earnings.index("5 million"),
    movie_earnings[movies.index("Amerigo")] == movie_earnings[movies.index("Kenneth Key")] - 3
)

# Constraints
model += AllDifferent(movie_director)
model += AllDifferent(movie_earnings)

# Solve the model
solution = model.solve()

if solution:
    for movie in movies:
        idx = movies.index(movie)
        print(f"{movie} - Director: {directors[movie_director[idx].value()]} - Earnings: {earnings[movie_earnings[idx].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The person who is 110 years old is a native of Connecticut.
Of Arlene and the Texas native, one is 110 years old and the other is 109 years old.
Herbert is 1 year younger than Doris.
The person who is 112 years old is either Herbert or the New Mexico native.

Entities:
ages: 109 years, 110 years, 111 years, 112 years
names: Arlene, Doris, Floyd, Herbert
states: Connecticut, Missouri, New Mexico, Texas
N/A
```python
from cpmpy import *

# Entities
ages = IntVar(109, 112, shape=4)
names = ["Arlene", "Doris", "Floyd", "Herbert"]
states = ["Connecticut", "Missouri", "New Mexico", "Texas"]

# Variables
arlene_age, doris_age, floyd_age, herbert_age = ages
arlene_state, doris_state, floyd_state, herbert_state = IntVar(0, 3, shape=4)

# Clues
model = Model(
    AllDifferent(ages),
    AllDifferent([arlene_state, doris_state, floyd_state, herbert_state]),
    
    arlene_state == states.index("Texas") | arlene_state == 110,
    doris_state == states.index("Texas") | doris_state == 109,
    
    herbert_age == doris_age - 1,
    
    (herbert_age == 112) | (herbert_state == states.index("New Mexico"))
)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of Frances and Olga, one paid $25 and the other had the shiraz.
The one who had the port paid 2 dollars more than Kurt.
Olga had the merlot.

Entities:
prices: $24, $25, $26, $27
names: Frances, Hannah, Kurt, Olga
wines: merlot, port, riesling, shiraz
N/A
```python
from cpmpy import *

# Define variables
prices = IntVar(24, 27, shape=4)
names = ["Frances", "Hannah", "Kurt", "Olga"]
wines = ["merlot", "port", "riesling", "shiraz"]

# Define constraints
model = Model(
    AllDifferent(prices),
    (prices[names.index("Frances")] == 25) & (prices[names.index("Olga")] == 24),
    (prices[wines.index("port")] == prices[names.index("Kurt")] + 2),
    prices[names.index("Olga")] == prices[wines.index("merlot")]
)

# Solve and print solution
solution = model.solve()
if solution:
    for name, price in zip(names, prices):
        print(name, "paid $", price.value())
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Regal Park is on Barbados.
Grand Echo costs 40 dollars more per night than the resort on Barbados.
Of El Pacifico and Regal Park, one is on Martinique and the other costs $175 per night.
The hotel that costs $215 per night is either the hotel on St. Barts or Emerald View.
Grand Echo costs 20 dollars less per night than Emerald View.

Entities:
prices: $175, $195, $215, $235
resorts: El Pacifico, Emerald View, Grand Echo, Regal Park
islands: Anguilla, Barbados, Martinique, St. Barts
N/A
```python
from cpmpy import *

# Entities
prices = [175, 195, 215, 235]
resorts = ["El Pacifico", "Emerald View", "Grand Echo", "Regal Park"]
islands = ["Anguilla", "Barbados", "Martinique", "St. Barts"]

# Variables
barbados_resort = IntVar(0, len(resorts)-1)
grand_echo_price = IntVar(0, len(prices)-1)
el_pacifico_price = IntVar(0, len(prices)-1)
regal_park_island = IntVar(0, len(islands)-1)
regal_park_price = IntVar(0, len(prices)-1)
st_barts_hotel = IntVar(0, len(resorts)-1)
emerald_view_price = IntVar(0, len(prices)-1)

# Constraints
model = Model(
    AllDifferent([barbados_resort, grand_echo_price, el_pacifico_price, regal_park_island, regal_park_price, st_barts_hotel, emerald_view_price]),
    
    barbados_resort == islands.index("Barbados"),
    
    grand_echo_price == el_pacifico_price + 40,
    
    (regal_park_island == islands.index("Martinique")) & (regal_park_price == 175) | (regal_park_island != islands.index("Martinique")) & (regal_park_price != 175),
    
    (emerald_view_price == 215) | (emerald_view_price == 235),
    
    grand_echo_price == emerald_view_price - 20
)

# Solve the model
solution = model.solve()

if solution:
    for i, resort in enumerate(resorts):
        print(f"{resort}: {islands[barbados_resort.value()]} - ${prices[grand_echo_price.value()]}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Snappy is 18 years younger than the swoopbacked tortoise.
The 68 year old animal is the horned tortoise.
Chewie is 32 years old.
Of Snappy and Toredo, one is 14 years old and the other is the horned tortoise.
The pitch belly tortoise is younger than Chewie.

Entities:
ages: 14, 32, 50, 68
tortoises: Chewie, Snappy, Speedy, Toredo
species: black neck, horned, pitch belly, swoopbacked
N/A
```python
from cpmpy import *

ages = IntVar(14, 68, shape=4)
tortoises = ["Chewie", "Snappy", "Speedy", "Toredo"]
species = ["black neck", "horned", "pitch belly", "swoopbacked"]

age_dict = {t: a for t, a in zip(tortoises, ages)}

model = Model(
    AllDifferent(ages),
    age_dict["Snappy"] == age_dict["swoopbacked"] - 18,
    age_dict["horned"] == 68,
    age_dict["Chewie"] == 32,
    (age_dict["Snappy"] == 14) != (age_dict["horned"] == "horned"),
    (age_dict["Toredo"] == 14) != (age_dict["horned"] == "horned"),
    age_dict["pitch belly"] < age_dict["Chewie"]
)
```
None
Error when trying to check solution from predicted model: 'in <string>' requires string as left operand, not NoneType
False
False
Error in constraint evaluation: too many values to unpack (expected 2)
---------------------------------------------------------------------------------------------

Clues:
Of the parrot and the lorikeet, one was bought in April and the other is Roberta's.
Natalie's pet was bought sometime before Roberta's pet.
Laura's pet is the lovebird.
The bird bought in February is either the lorikeet or the lovebird.
Of the bird bought in February and the macaw, one is Natalie's and the other is Roberta's.

Entities:
months: January, February, March, April
names: Celia, Laura, Natalie, Roberta
birds: lorikeet, lovebird, macaw, parrot
N/A
```python
from cpmpy import *

# Define entities
months = ["January", "February", "March", "April"]
names = ["Celia", "Laura", "Natalie", "Roberta"]
birds = ["lorikeet", "lovebird", "macaw", "parrot"]

# Define variables
bird_month = IntVar(0, len(birds)-1, shape=len(birds), name="bird_month")
bird_owner = IntVar(0, len(names)-1, shape=len(birds), name="bird_owner")

# Define constraints
model = Model(
    # Each bird is bought in a different month
    AllDifferent(bird_month),
    
    # Each person has only one bird
    AllDifferent(bird_owner),
    
    # Clues
    bird_month[birds.index("parrot")] != bird_month[birds.index("lorikeet")],
    bird_owner[birds.index("parrot")] != bird_owner[birds.index("lorikeet")],
    
    (bird_owner[birds.index("parrot")] == names.index("Roberta")) | (bird_owner[birds.index("lorikeet")] == names.index("Roberta")),
    
    bird_owner[birds.index("lorikeet")] < bird_owner[birds.index("Roberta")],
    
    bird_owner[birds.index("lovebird")] == names.index("Laura"),
    
    (bird_month[birds.index("lorikeet")] == months.index("February")) | (bird_month[birds.index("lovebird")] == months.index("February")),
    
    (bird_owner[birds.index("lorikeet")] == names.index("Natalie")) ^ (bird_owner[birds.index("macaw")] == names.index("Natalie"))
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i, bird in enumerate(birds):
        print(f"{bird} was bought in {months[bird_month[i].value()]} and belongs to {names[bird_owner[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Suzanne paid less than Margie.
Margie paid $7.
The competitor who ordered spaghetti paid 2 dollars more than the competitor who ordered taglioni.
Of the runner who paid $9 and the contestant who ordered fettuccine, one was Margie and the other was Velma.

Entities:
prices: $6, $7, $8, $9
runners: Florence, Margie, Suzanne, Velma
pastas: fettuccine, fusilli, spaghetti, taglioni
N/A
```python
from cpmpy import *

# Define variables
prices = VarArray(4, 6, 9)
runners = VarArray(4, 0, 3)
pastas = VarArray(4, 0, 3)

# Clues
model = Model(
    prices[1] == 7,  # Margie paid $7
    prices[2] == prices[0] + 2,  # Competitor who ordered spaghetti paid $2 more than taglioni
    (prices[3] == 9) & (pastas[3] == 0) | (runners[3] == 1),  # Runner who paid $9 and contestant who ordered fettuccine
    AllDifferent(prices),  # All prices are different
    AllDifferent(runners),  # All runners are different
    AllDifferent(pastas),  # All pastas are different
    Suzanne < Margie,  # Suzanne paid less than Margie
    (Margie == runners[0]) & (Velma == pastas[0]) | (Margie == pastas[0]) & (Velma == runners[0])  # Margie and Velma are paired with $9 and fettuccine
)

# Solve the model
solution = model.solve()

if solution:
    for i in range(4):
        print(f"Runner {runners[i].value()} paid ${prices[i].value()} for {pastas[i].value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Luzagueil is a chardonnay.
The Annata Branco is either the 1992 wine or the syrah.
The Friambliss is a syrah.
Of the pinot gris and the 1984 bottle, one is the Luzagueil and the other is the Zifennwein.
The pinot gris was bottled 4 years after the merlot.

Entities:
vintages: 1984, 1988, 1992, 1996
wines: Annata Branco, Friambliss, Luzagueil, Zifennwein
types: chardonnay, merlot, pinot gris, syrah
N/A
```python
from cpmpy import *

# Define entities
vintages = IntVar(1984, 1996, shape=4)
wines = ["Annata Branco", "Friambliss", "Luzagueil", "Zifennwein"]
types = ["chardonnay", "merlot", "pinot gris", "syrah"]

# Define variables
wine_type = StringVar(shape=4)
wine_vintage = StringVar(shape=4)

# Define constraints
model = Model(
    # Clues
    wine_type[wines.index("Luzagueil")] == "chardonnay",
    (wine_type[wines.index("Annata Branco")] == "syrah") | (wine_vintage[wines.index("Annata Branco")] == 1992),
    wine_type[wines.index("Friambliss")] == "syrah",
    ((wine_type[wines.index("pinot gris")] == "Luzagueil") & (wine_type[wines.index("1984")] == "Zifennwein")) |
    ((wine_type[wines.index("pinot gris")] == "Zifennwein") & (wine_type[wines.index("1984")] == "Luzagueil")),
    (wine_type[wines.index("pinot gris")] == "merlot") | (wine_vintage[wines.index("pinot gris")] == vintages[vintages.index(1984)+4])
)

# Add constraint that all types are different
model += AllDifferent(wine_type)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for wine in wines:
        print(f"{wine}: {wine_type[wines.index(wine)].value()}, {wine_vintage[wines.index(wine)].value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Hannah paid more than Teri's client.
Freda paid 20 dollars more than Lynda's client.
Hannah paid 10 dollars less than Nancy's client.
Nancy's client, Hannah and Ginger were all different clients.
Hannah was either the person who paid $180 or Lynda's client.

Entities:
Clients: Aimee, Ginger, Freda, Hannah
Prices: $150, $160, $170, $180
Masseuses: Lynda, Nancy, Teri, Whitney
N/A
```python
from cpmpy import *

# Entities
clients = ["Aimee", "Ginger", "Freda", "Hannah"]
prices = [150, 160, 170, 180]
masseuses = ["Lynda", "Nancy", "Teri", "Whitney"]

# Variables
client_prices = intvar(150, 180, shape=len(clients))
client_masseuses = intvar(0, len(masseuses)-1, shape=len(clients))

# Clues
model = Model(
    # Hannah paid more than Teri's client
    client_prices[clients.index("Hannah")] > client_prices[clients.index("Teri")],
    
    # Freda paid 20 dollars more than Lynda's client
    client_prices[clients.index("Freda")] == client_prices[clients.index("Lynda")] + 20,
    
    # Hannah paid 10 dollars less than Nancy's client
    client_prices[clients.index("Hannah")] == client_prices[clients.index("Nancy")] - 10,
    
    # Nancy's client, Hannah and Ginger were all different clients
    AllDifferent([client_masseuses[clients.index("Nancy")], client_masseuses[clients.index("Hannah")], client_masseuses[clients.index("Ginger")]),
    
    # Hannah was either the person who paid $180 or Lynda's client
    Xor([client_prices[clients.index("Hannah")] == 180, client_masseuses[clients.index("Hannah")] == masseuses.index("Lynda")])
)

# Solve the model
solution = model.solve()

if solution:
    for client in clients:
        idx = clients.index(client)
        print(f"{client} paid ${solution[client_prices[idx]]} and was massaged by {masseuses[solution[client_masseuses[idx]]]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The 115 ft tall waterfall is either the waterfall in Nigeria or the waterfall located in Tibet.
Inawatai is 100 ft tall.
Nyalt is 10 ft taller than Rhoqua.
The waterfall in Brazil is somewhat shorter than Rhoqua.
The waterfall in Brazil is 10 ft shorter than the waterfall located in Nigeria.

Entities:
waterfalls: Sihat, Rhoqua, Nyalt, Inawatai
heights: 100 ft, 105 ft, 110 ft, 115 ft
countries: Brazil, Nigeria, Tibet, Switzerland
N/A
```python
from cpmpy import *

# Entities
waterfalls = ["Sihat", "Rhoqua", "Nyalt", "Inawatai"]
heights = [100, 105, 110, 115]
countries = ["Brazil", "Nigeria", "Tibet", "Switzerland"]

# Variables
height = intvar(100, 115, shape=len(waterfalls))
country = intvar(0, len(countries)-1, shape=len(waterfalls))

# Constraints
model = Model(
    AllDifferent(height),
    AllDifferent(country),
    
    # Clues
    (height[0] == 115) | (height[2] == 115),
    height[3] == 100,
    height[2] == height[1] + 10,
    height[0] == height[1] - 10,
    
    (country[0] == countries.index("Nigeria")) | (country[2] == countries.index("Tibet")),
    
    country[1] == countries.index("Brazil"),
    height[1] > height[0],
    height[1] > height[2],
    height[1] > height[3]
)

# Solve
solution = model.solve()

if solution:
    for i, w in enumerate(waterfalls):
        print(f"{w}: {height[i].value()} ft, {countries[country[i].value()]}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Evan played 9 games.
Vincent played first base.
The player who played third base played 2 more games than the person who played center field.
Charles played 2 more games than the player who played center field.
Charles was either the boy who played 9 games or the person who played 10 games.

Entities:
players: Charles, Evan, Karl, Vincent
games: 8, 9, 10, 11
positions: center field, first base, shortstop, third base
N/A
```python
from cpmpy import *

# Define entities
players = ["Charles", "Evan", "Karl", "Vincent"]
games = [8, 9, 10, 11]
positions = ["center field", "first base", "shortstop", "third base"]

# Define variables
player_games = IntVar(8, 11, shape=len(players))
player_positions = IntVar(0, 3, shape=len(players))

# Define constraints
model = Model(
    AllDifferent(player_games),
    AllDifferent(player_positions),
    
    player_games[players.index("Evan")] == 9,
    player_positions[players.index("Vincent")] == positions.index("first base"),
    
    (player_games[player_positions.index(positions.index("third base"))] ==
     player_games[player_positions.index(positions.index("center field"))] + 2),
    
    (player_games[players.index("Charles")] ==
     player_games[player_positions.index(positions.index("center field"))] + 2),
    
    Xor([player_games[players.index("Charles")] == 9,
         player_games[players.index("Charles")] == 10])
)

# Solve the model
model.solve()
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Edmund paid 1 dollar less than the one who got the water.
The diner who paid $4 had the iced tea.
Angela paid more than the one who got the cream soda.
The diner who paid $5 was either the one who got the cream soda or the one who got the iced tea.
The four diners were the diner who paid $5, the one who got the iced tea, the one who got the root beer and Irene.

Entities:
names: Angela, Edmund, Homer, Irene
prices: $4, $5, $6, $7
drinks: cream soda, iced tea, root beer, water
N/A
```python
from cpmpy import *

# Define entities
names = ["Angela", "Edmund", "Homer", "Irene"]
prices = ["$4", "$5", "$6", "$7"]
drinks = ["cream soda", "iced tea", "root beer", "water"]

# Define variables
angela_price = IntVar(4, 7)
edmund_price = IntVar(4, 7)
homer_price = IntVar(4, 7)
irene_price = IntVar(4, 7)

cream_soda_drink = BoolVar()
iced_tea_drink = BoolVar()
root_beer_drink = BoolVar()
water_drink = BoolVar()

# Define constraints
constraints = [
    AllDifferent([angela_price, edmund_price, homer_price, irene_price]),
    angela_price > cream_soda_drink,
    edmund_price == iced_tea_drink + 1,
    iced_tea_drink == 4,
    angela_price > root_beer_drink,
    (irene_price == 5) | (irene_price == 6),
    (irene_price == 5) == (cream_soda_drink | iced_tea_drink),
    (irene_price == 5) == (root_beer_drink | iced_tea_drink),
]

# Define the problem
problem = Model(constraints)

# Find a solution
solution = CPM_ortools(problem)

# Print the solution
if solution.solve():
    for name in names:
        price = locals()[f"{name.lower()}_price"].value()
        drink = [d for d in drinks if locals()[f"{d.lower().replace(' ', '_')}_drink"].value()][0]
        print(f"{name} paid {price}, got {drink}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Ingram had 7 goals this season.
The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers.
Parrish scored 1 goal more than Quinn.
The player with 9 goals is from the Ice Hogs.
Ingram is either the player from the Checkers or the player with 6 goals.

Entities:
players: Ingram, Parrish, Quinn, Underwood
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Monsters
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define entities
players = ["Ingram", "Parrish", "Quinn", "Underwood"]
goals = [6, 7, 8, 9]
teams = ["Checkers", "Comets", "Ice Hogs", "Monsters"]

# Define variables
player_goals = intvar(6, 9, shape=len(players))
player_teams = intvar(0, 3, shape=len(players))

# Define constraints
model = Model(
    AllDifferent(player_goals),
    AllDifferent(player_teams),
    player_goals[players.index("Ingram")] == 7,
    player_goals[players.index("Parrish")] == player_goals[players.index("Quinn")] + 1,
    player_goals[players.index("Underwood")] != 9,
    player_teams[players.index("Underwood")] != teams.index("Ice Hogs"),
    player_teams[players.index("Parrish")] == teams.index("Ice Hogs"),
    (player_teams[players.index("Ingram")] == teams.index("Checkers")) | (player_goals[players.index("Ingram")] == 6)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Print solution
for player in players:
    print(f"{player} - Goals: {player_goals[players.index(player)].value()} - Team: {teams[player_teams[players.index(player)].value()]}")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Jorge is either the skydiver who wears the red suit or the jumper who started in 1982.
The skydiver who wears the pink suit started skydiving 1 year before Otis.
The jumper who wears the yellow suit started skydiving sometime after Philip.
The jumper who wears the lime green suit started skydiving sometime after the jumper who wears the yellow suit.
The jumper who wears the pink suit started skydiving 2 years before Shaun.

Entities:
names: Jorge, Otis, Philip, Shaun
years: 1982, 1983, 1984, 1985
suit colors: lime green, pink, red, yellow
N/A
```python
from cpmpy import *

# Entities
names = ["Jorge", "Otis", "Philip", "Shaun"]
years = [1982, 1983, 1984, 1985]
suit_colors = ["lime green", "pink", "red", "yellow"]

# Variables
jumper = IntVar(0, 3, shape=len(names))  # 0: Jorge, 1: Otis, 2: Philip, 3: Shaun
start_year = IntVar(0, 3, shape=len(names))  # 0: 1982, 1: 1983, 2: 1984, 3: 1985
suit_color = IntVar(0, 3, shape=len(names))  # 0: lime green, 1: pink, 2: red, 3: yellow

# Constraints
model = Model(
    AllDifferent(jumper),
    AllDifferent(start_year),
    AllDifferent(suit_color),
    (jumper[names.index("Jorge")] == suit_color.index("red")) | (start_year[names.index("Jorge")] == years.index(1982)),
    (suit_color[names.index("pink")] == start_year.index(years.index(1985) - 1)),
    (start_year[names.index("pink")] == start_year.index(years.index(1985) - 2)),
    (start_year[names.index("lime green")] > start_year.index("yellow")),
    (suit_color[names.index("lime green")] > suit_color.index("yellow"))
)

# Solve
solution = model.solve()

# Print solution
if solution:
    for i, name in enumerate(names):
        print(f"{name}: {suit_colors[suit_color[i].value()]} suit, {years[start_year[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The variety that requires 190 degree water costs 1 dollar less than the variety that requires 195 degree water.
The Pouchong costs 1 dollar less than the Red Robe.
The Pouchong needs 195 degree water.
The four teas are the Ali Shan, the variety that costs $6, the variety that requires 200 degree water and the tea that requires 190 degree water.

Entities:
teas: Ali Shan, Jin Xuan, Pouchong, Red Robe
prices: $4, $5, $6, $7
temperatures: 190 degree, 195 degree, 200 degree, 215 degree
N/A
```python
from cpmpy import *

# Define variables
teas = ["Ali Shan", "Jin Xuan", "Pouchong", "Red Robe"]
prices = ["$4", "$5", "$6", "$7"]
temperatures = ["190 degree", "195 degree", "200 degree", "215 degree"]

ali_shan_price = IntVar(4, 7)
jin_xuan_price = IntVar(4, 7)
pouchong_price = IntVar(4, 7)
red_robe_price = IntVar(4, 7)

ali_shan_temp = StringVar(temperatures)
jin_xuan_temp = StringVar(temperatures)
pouchong_temp = StringVar(temperatures)
red_robe_temp = StringVar(temperatures)

# Add constraints
model = Model(
    AllDifferent([ali_shan_price, jin_xuan_price, pouchong_price, red_robe_price]),
    AllDifferent([ali_shan_temp, jin_xuan_temp, pouchong_temp, red_robe_temp]),
    
    pouchong_temp == "195 degree",
    
    ali_shan_price == 6,
    jin_xuan_price == 4,
    pouchong_price == red_robe_price - 1,
    
    (pouchong_temp == "190 degree") | (jin_xuan_temp == "190 degree") | (ali_shan_temp == "190 degree") | (red_robe_temp == "190 degree"),
    (pouchong_temp == "200 degree") | (jin_xuan_temp == "200 degree") | (ali_shan_temp == "200 degree") | (red_robe_temp == "200 degree"),
    
    (pouchong_price == 6) | (jin_xuan_price == 6) | (ali_shan_price == 6) | (red_robe_price == 6)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for tea in teas:
        print(tea, ":", end=' ')
        for var in [ali_shan_price, jin_xuan_price, pouchong_price, red_robe_price]:
            if tea.lower() in var.name.lower():
                print(prices[var.value()], end=' ')
        for var in [ali_shan_temp, jin_xuan_temp, pouchong_temp, red_robe_temp]:
            if tea.lower() in var.name.lower():
                print(var.value())
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The flier leaving in April will bring shamrock.
The passenger with the rabbit's foot will leave 1 month after Troy.
The flier with the horseshoe will leave 1 month after Doug.
The flier with the horseshoe is either Peggy or the passenger leaving in January.

Entities:
fliers: Doug, Eloise, Peggy, Troy
months: January, February, March, April
lucky charms: coin, horseshoe, rabbit's foot, shamrock
N/A
```python
from cpmpy import *

# Entities
fliers = ["Doug", "Eloise", "Peggy", "Troy"]
months = ["January", "February", "March", "April"]
lucky_charms = ["coin", "horseshoe", "rabbit's foot", "shamrock"]

# Variables
flier_month = IntVar(0, len(months)-1, shape=len(fliers))
flier_charm = IntVar(0, len(lucky_charms)-1, shape=len(fliers))

# Constraints
model = Model(
    AllDifferent(flier_month),
    AllDifferent(flier_charm),
    
    # Clues
    (flier_month[fliers.index("Peggy")] == months.index("January")) | (flier_charm[fliers.index("Peggy")] == lucky_charms.index("horseshoe")),
    (flier_month[fliers.index("Troy")] + 1 == flier_month[fliers.index("Eloise")]) & (flier_charm[fliers.index("Eloise")] == lucky_charms.index("rabbit's foot")),
    (flier_month[fliers.index("Doug")] + 1 == flier_month[fliers.index("Peggy")]) & (flier_charm[fliers.index("Doug")] == lucky_charms.index("horseshoe")),
    (flier_month[fliers.index("Peggy")] == months.index("April")) & (flier_charm[fliers.index("Peggy")] == lucky_charms.index("shamrock"))
)

# Solve
solution = model.solve()

if solution:
    for flier in fliers:
        idx = fliers.index(flier)
        print(f"{flier} leaves in {months[flier_month[idx].value()]} with {lucky_charms[flier_charm[idx].value()]}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Ronda's sandwich and the sandwich with havarti cheese are different sandwiches.
Ronda's order costs $5.
Lula's order is either the 3 dollars sandwich or the order that costs 5 dollars.
The sandwich with cheddar cheese costs less than the order with havarti cheese.
Yolanda's sandwich costs 2 dollars less than the order with swiss cheese.

Entities:
customers: Lula, Ronda, Sue, Yolanda
prices: $2, $3, $4, $5
cheeses: cheddar, havarti, muenster, swiss
N/A
```python
from cpmpy import *

customers = ["Lula", "Ronda", "Sue", "Yolanda"]
prices = ["$2", "$3", "$4", "$5"]
cheeses = ["cheddar", "havarti", "muenster", "swiss"]

sandwich = intvar(0, 3, shape=len(customers))
order = intvar(0, 3, shape=len(customers))
cheese = intvar(0, 3, shape=len(customers))

model = Model(
    AllDifferent(sandwich),
    AllDifferent(order),
    AllDifferent(cheese),
    
    sandwich[customers.index("Ronda")] == 0,
    order[customers.index("Ronda")] == prices.index("$5"),
    
    (order[customers.index("Lula")] == prices.index("$3")) | (order[customers.index("Lula")] == prices.index("$5")),
    
    cheese[customers.index("Yolanda")] == cheese.index("swiss") - 2,
    
    cheese[customers.index("cheddar")] < cheese[customers.index("havarti")]
)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The rocket developed by Vexatech will launch 1 month after the Exatris.
The rocket developed by SpaceZen will launch sometime after the Beritron.
The Worul is made by Techtrin.
The Exatris will launch in January.
The Cornick is either the rocket that will launch in April or the rocket developed by Rubicorp.

Entities:
rockets: Beritron, Cornick, Exatris, Worul
months: January, February, March, April
companies: Rubicorp, SpaceZen, Techtrin, Vexatech
N/A
```python
from cpmpy import *

# Entities
rockets = ["Beritron", "Cornick", "Exatris", "Worul"]
months = ["January", "February", "March", "April"]
companies = ["Rubicorp", "SpaceZen", "Techtrin", "Vexatech"]

# Variables
launch_dates = intvar(1, 4, shape=len(rockets))
rocket_company = intvar(0, 3, shape=len(rockets))

# Constraints
model = Model(
    AllDifferent(launch_dates),
    AllDifferent(rocket_company),
    
    launch_dates[rockets.index("Exatris")] == months.index("January"),
    
    launch_dates[rockets.index("Cornick")] == months.index("April") | (rocket_company[rockets.index("Cornick")] == companies.index("Rubicorp")),
    
    launch_dates[rockets.index("Worul")] == rocket_company[rockets.index("Techtrin")],
    
    launch_dates[rockets.index("Vexatech")] == launch_dates[rockets.index("Exatris")] + 1,
    
    launch_dates[rockets.index("SpaceZen")] > launch_dates[rockets.index("Beritron")]
)

# Solve
solution = model.solve()

if solution:
    for i, rocket in enumerate(rockets):
        print(f"{rocket} will launch in {months[launch_dates[i].value()]} and is developed by {companies[rocket_company[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The student who will major in Physics was awarded $5000 less than the student who will major in Biology.
Wilma will major in Mathematics.
Delores was awarded $5000 more than Anna.
Anna was awarded some amount less than the person who will major in Mathematics.
Wilma is either the person who received the 35000 dollars scholarship or the person who received the 25000 dollars scholarship.

Entities:
names: Anna, Delores, Wilma, Yvonne
scholarships: $25000, $30000, $35000, $40000
majors: Biology, Mathematics, Physics, Theology
N/A
```python
from cpmpy import *

# Entities
names = ["Anna", "Delores", "Wilma", "Yvonne"]
scholarships = [25000, 30000, 35000, 40000]
majors = ["Biology", "Mathematics", "Physics", "Theology"]

# Variables
scholarship = intvar(25000, 40000, shape=len(names))
major = intvar(0, len(majors)-1, shape=len(names))

# Constraints
model = Model(
    AllDifferent(scholarship),
    AllDifferent(major),
    
    # The student who will major in Physics was awarded $5000 less than the student who will major in Biology
    (major.index("Physics") == major.index("Biology") + 1) & (scholarship.index("Physics") == scholarship.index("Biology") - 5000),
    
    # Wilma will major in Mathematics
    major[names.index("Wilma")] == majors.index("Mathematics"),
    
    # Delores was awarded $5000 more than Anna
    scholarship[names.index("Delores")] == scholarship[names.index("Anna")] + 5000,
    
    # Anna was awarded some amount less than the person who will major in Mathematics
    scholarship[names.index("Anna")] < scholarship[major.index(majors.index("Mathematics"))],
    
    # Wilma is either the person who received the $35000 scholarship or the person who received the $25000 scholarship
    Xor(scholarship[names.index("Wilma")] == 35000, scholarship[names.index("Wilma")] == 25000)
)

print(model)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The four butterflies were the swallowtail butterfly, Rena's purchase, the insect that sold for $90, and Phillip's purchase.
Otis's purchase was either the peacock butterfly or the swallowtail butterfly.
Brandon's purchase cost 30 dollars less than Otis's purchase.
Rena's purchase cost 15 dollars less than the swallowtail butterfly.
The insect that sold for $75 was the torturix butterfly.

Entities:
winners: Brandon, Otis, Phillip, Rena
prices: $45, $60, $75, $90
butterflies: peacock, peppered, swallowtail, torturix
N/A
```python
from cpmpy import *

# Entities
winners = ["Brandon", "Otis", "Phillip", "Rena"]
prices = [45, 60, 75, 90]
butterflies = ["peacock", "peppered", "swallowtail", "torturix"]

# Variables
winner_vars = intvar(0, 3, shape=len(winners))
price_vars = intvar(0, 3, shape=len(prices))
butterfly_vars = intvar(0, 3, shape=len(butterflies))

# Constraints
model = Model(
    AllDifferent(winner_vars),
    AllDifferent(price_vars),
    AllDifferent(butterfly_vars),
    
    # Assigning entities to variables
    winner_vars[winners.index("Brandon")] == 0,
    winner_vars[winners.index("Otis")] == 1,
    winner_vars[winners.index("Phillip")] == 2,
    winner_vars[winners.index("Rena")] == 3,
    
    price_vars[prices.index(45)] == 0,
    price_vars[prices.index(60)] == 1,
    price_vars[prices.index(75)] == 2,
    price_vars[prices.index(90)] == 3,
    
    butterfly_vars[butterflies.index("peacock")] == 0,
    butterfly_vars[butterflies.index("peppered")] == 1,
    butterfly_vars[butterflies.index("swallowtail")] == 2,
    butterfly_vars[butterflies.index("torturix")] == 3,
    
    # Otis's purchase was either the peacock butterfly or the swallowtail butterfly
    Xor([butterfly_vars[butterflies.index("peacock")], butterfly_vars[butterflies.index("swallowtail")]),
    
    # Brandon's purchase cost 30 dollars less than Otis's purchase
    price_vars[price_vars.index(60)] == price_vars[price_vars.index(0)] + 30,
    
    # Rena's purchase cost 15 dollars less than the swallowtail butterfly
    price_vars[price_vars.index(60)] == price_vars[price_vars.index(2)] - 15,
    
    # The insect that sold for $75 was the torturix butterfly
    price_vars[price_vars.index(75)] == price_vars[price_vars.index(3)]
)

# Solve the model
solution = model.solve()

if solution:
    for i, winner in enumerate(winners):
        print(f"{winner} won with a purchase of ${prices[price_vars[i].value()]} for the {butterflies[butterfly_vars[i].value()]} butterfly.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The ambassador with the 9 day visit will leave sometime after Fitzgerald.
Quinn will leave 2 months after Bender.
The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald.
Quinn will leave 1 month before the ambassador with the 7 day visit.

Entities:
diplomats: Bender, Fitzgerald, Owens, Quinn
months: January, February, March, April
durations: 2 day, 3 day, 7 day, 9 day
N/A
```python
from cpmpy import *

# Entities
diplomats = ["Bender", "Fitzgerald", "Owens", "Quinn"]
months = ["January", "February", "March", "April"]
durations = ["2 day", "3 day", "7 day", "9 day"]

# Variables
visit = IntVar(1, 4, shape=len(diplomats))  # 1: 2 day, 2: 3 day, 3: 7 day, 4: 9 day
leave_month = IntVar(1, 4, shape=len(diplomats))  # 1: January, 2: February, 3: March, 4: April

# Constraints
model = Model(
    AllDifferent(visit),
    AllDifferent(leave_month),
    
    # The ambassador with the 9 day visit will leave sometime after Fitzgerald
    (visit.index(4) > visit[diplomats.index("Fitzgerald")]),
    
    # Quinn will leave 2 months after Bender
    (leave_month[diplomats.index("Quinn")] == leave_month[diplomats.index("Bender")] + 2),
    
    # The person leaving in January is either the ambassador with the 3 day visit or Fitzgerald
    Xor(leave_month[diplomats.index("Fitzgerald")] == 1, visit[diplomats.index("Fitzgerald")] == 2),
    
    # Quinn will leave 1 month before the ambassador with the 7 day visit
    (leave_month[diplomats.index("Quinn")] == leave_month[visit.index(3)] - 1)
)

# Solve the model
solution = model.solve()

if solution:
    for i, diplomat in enumerate(diplomats):
        print(f"{diplomat}: {durations[visit[i].value()-1]}, {months[leave_month[i].value()-1]}")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The person who came in at 8:00am asked for wheat bread.
Tricia came in a half-hour after Ora.
Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am.
Of the customer who ordered wheat bread; and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia.

Entities:
breads: flatbread, pumpernickel, rye bread, wheat bread
times: 7:00am, 7:30am, 8:00am, 8:30am
customers: Felicia, Isabel, Ora, Tricia
N/A
```python
from cpmpy import *

# Define entities
breads = ["flatbread", "pumpernickel", "rye bread", "wheat bread"]
times = ["7:00am", "7:30am", "8:00am", "8:30am"]
customers = ["Felicia", "Isabel", "Ora", "Tricia"]

# Define variables
customer_time = IntVar(0, 3, shape=len(customers))
customer_bread = IntVar(0, 3, shape=len(customers))

# Define constraints
model = Model(
    AllDifferent(customer_time),
    AllDifferent(customer_bread),
    
    # The person who came in at 8:00am asked for wheat bread
    (customer_time == 2) == (customer_bread == breads.index("wheat bread")),
    
    # Tricia came in a half-hour after Ora
    (customer_time[customers.index("Tricia")] == customer_time[customers.index("Ora")] + 1),
    
    # Of Felicia and the customer who ordered flatbread, one came in at 7:30am and the other came in at 7:00am
    Xor([
        (customer_time[customers.index("Felicia")] == 1) & (customer_bread[customers.index("Felicia")] == breads.index("flatbread")),
        (customer_time[customers.index("Felicia")] == 0) & (customer_bread[customers.index("Felicia")] == breads.index("flatbread"))
    ]),
    
    # Of the customer who ordered wheat bread and the person who ordered pumpernickel, one came in at 8:30am and the other was Tricia
    Xor([
        (customer_time[customer_bread.index(breads.index("wheat bread"))] == 3) & (customers[customer_bread.index(breads.index("pumpernickel"))] == "Tricia"),
        (customer_time[customer_bread.index(breads.index("wheat bread"))] == 2) & (customers[customer_bread.index(breads.index("pumpernickel"))] == "Tricia")
    ])
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i, customer in enumerate(customers):
        print(f"{customer} came in at {times[solution[customer_time[i]].value]} and ordered {breads[solution[customer_bread[i]].value]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The 75 million year old fossil costs 500 dollars less than the pilodontus.
The senosaurus is 85 million years old.
The 75 million year old fossil costs 500 dollars less than the 78 million year old fossil.
The 75 million year old fossil costs less than the archadon.
The 69 million year old fossil costs 250 dollars more than the 78 million year old fossil.

Entities:
dinosaurs: archadon, mirasaurus, pilodontus, senosaurus
price: $500, $750, $1000, $1250
ages: 69 million, 75 million, 78 million, 85 million
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Entities
dinosaurs = ["archadon", "mirasaurus", "pilodontus", "senosaurus"]
prices = [500, 750, 1000, 1250]
ages = [69, 75, 78, 85]

# Variables
archadon_price = intvar(500, 1250)
mirasaurus_price = intvar(500, 1250)
pilodontus_price = intvar(500, 1250)
senosaurus_price = intvar(500, 1250)

archadon_age = intvar(69, 85)
mirasaurus_age = intvar(69, 85)
pilodontus_age = intvar(69, 85)
senosaurus_age = intvar(69, 85)

# Constraints
model = Model(
    AllDifferent([archadon_price, mirasaurus_price, pilodontus_price, senosaurus_price]),
    AllDifferent([archadon_age, mirasaurus_age, pilodontus_age, senosaurus_age]),
    
    senosaurus_age == 85,
    
    (pilodontus_age == 75) & (mirasaurus_age == 78) & (archadon_age == 69),
    
    (pilodontus_price == 750) & (senosaurus_price == 1000),
    
    (archadon_price == pilodontus_price + 500),
    (pilodontus_price == 75) & (archadon_price == 1250),
    (pilodontus_price == 78) & (mirasaurus_price == 69)
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output the solution
for dino in dinosaurs:
    dino_price = eval(f"{dino}_price.value()")
    dino_age = eval(f"{dino}_age.value()")
    print(f"{dino.capitalize()}: Price - ${dino_price}, Age - {dino_age} million years")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Henrietta's task starts 2 hours after Glenn's job.
Glenn's task is the dining room.
Glenn's chore starts 1 hour after the mud room assignment.
Henrietta's task is the living room.
The mud room assignment starts sometime before Willie's assignment.

Entities:
children: Glenn, Henrietta, Olivia, Willie
times: 8:00am, 9:00am, 10:00am, 11:00am
rooms: dining room, laundry room, living room, mud room
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

children = ["Glenn", "Henrietta", "Olivia", "Willie"]
times = ["8:00am", "9:00am", "10:00am", "11:00am"]
rooms = ["dining room", "laundry room", "living room", "mud room"]

# Variables
glenn_time = intvar(0, 3)
henrietta_time = intvar(0, 3)
olivia_time = intvar(0, 3)
willie_time = intvar(0, 3)

glenn_room = stringvar(rooms)
henrietta_room = stringvar(rooms)
olivia_room = stringvar(rooms)
willie_room = stringvar(rooms)

# Constraints
model = Model(
    AllDifferent([glenn_time, henrietta_time, olivia_time, willie_time]),
    AllDifferent([glenn_room, henrietta_room, olivia_room, willie_room]),
    
    glenn_room == "dining room",
    henrietta_room == "living room",
    
    glenn_time + 2 == henrietta_time,
    glenn_time + 1 == olivia_time,
    
    (willie_room == "mud room") & (willie_time < olivia_time)
)

# Solve and print the solution
solver = CPM_ortools(model)
if solver.solve():
    for child in children:
        print(f"{child}'s task is in {eval(child+'_room').value()} at {times[eval(child+'_time').value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Mr. Ayers will dive on July 14.
Mr. Drake will dive 1 day after the diver going out with Hilda.
The customer going out on July 14 will go out with Hilda.
The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14.
The customer going out with Nadine will dive 1 day before Mr. Ayers.

Entities:
customers: Mr. Ayers, Mr. Drake, Mr. Erickson, Mr. Gallegos
dates: July 13, July 14, July 15, July 16
guides: Hilda, Jorge, Nadine, Vicki
N/A
```python
from cpmpy import *

customers = ["Ayers", "Drake", "Erickson", "Gallegos"]
dates = ["13", "14", "15", "16"]
guides = ["Hilda", "Jorge", "Nadine", "Vicki"]

# Variables
Ay = boolvar(shape=len(dates))
Dr = boolvar(shape=len(dates))
E = boolvar(shape=len(dates))
Ga = boolvar(shape=len(dates))

# Constraints
model = Model(
    # Each customer goes out on a different date
    AllDifferent(Ay + Dr + E + Ga),
    
    # Mr. Ayers will dive on July 14
    Ay[dates.index("14")] == 1,
    
    # Mr. Drake will dive 1 day after the diver going out with Hilda
    (Dr[dates.index("13")] == 1).implies((Ay[dates.index("14")] == 1)),
    
    # The customer going out on July 14 will go out with Hilda
    Ay[dates.index("14")] == 1,
    
    # The customer going out with Vicki is either Mr. Gallegos or the customer going out on July 14
    Xor(Ga[dates.index("13")] == 1, Ay[dates.index("14")] == 1),
    
    # The customer going out with Nadine will dive 1 day before Mr. Ayers
    (E[dates.index("13")] == 1).implies((Ay[dates.index("14")] == 1))
)

# Solve the model
solution = model.solve()

if solution:
    for i, customer in enumerate(customers):
        for j, date in enumerate(dates):
            if Ay[j].value() == 1 and customer == "Ayers":
                print(f"Mr. {customer} will dive on July {date}")
            if Dr[j].value() == 1 and customer == "Drake":
                print(f"Mr. {customer} will dive on July {date}")
            if E[j].value() == 1 and customer == "Erickson":
                print(f"Mr. {customer} will dive on July {date}")
            if Ga[j].value() == 1 and customer == "Gallegos":
                print(f"Mr. {customer} will dive on July {date}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Ethel Street project begins 1 month after Cal Craft's project.
The job starting in May will be headed by Ed Erickson.
The Juniper Lane project starts in April.
Al Anderson's project begins 2 months before the Fred Lane project.

Entities:
Streets: Ethel Street, Fred Lane, Juniper Lane, Quince Street
managers: Al Anderson, Cal Craft, Ed Erickson, Hal Hamilton
months: April, May, June, July
N/A
```python
from cpmpy import *

# Entities
streets = ["Ethel Street", "Fred Lane", "Juniper Lane", "Quince Street"]
managers = ["Al Anderson", "Cal Craft", "Ed Erickson", "Hal Hamilton"]
months = ["April", "May", "June", "July"]

# Variables
start_month = IntVar(1, 4, shape=len(streets))
manager = IntVar(0, 3, shape=len(streets))

# Constraints
model = Model(
    start_month[streets.index("Ethel Street")] == start_month[streets.index("Cal Craft")] + 1,
    manager[streets.index("Fred Lane")] == manager[streets.index("Ed Erickson")],
    start_month[streets.index("Juniper Lane")] == months.index("April") + 1,
    start_month[streets.index("Al Anderson")] == start_month[streets.index("Fred Lane")] - 2
)

# Solve
solution = model.solve()

# Output
if solution:
    for street in streets:
        print(f"{street} starts in {months[start_month[streets.index(street)].value()]} and is managed by {managers[manager[streets.index(street)].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Ingram had 7 goals this season.
The four players are Underwood, the player from the Ice Hogs, the player from the Monsters and the player from the Checkers.
Parrish scored 1 goal more than Quinn.
The player with 9 goals is from the Ice Hogs.
Ingram is either the player from the Checkers or the player with 6 goals.

Entities:
players: Ingram, Parrish, Quinn, Underwood
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Monsters
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
players = ["Ingram", "Parrish", "Quinn", "Underwood"]
goals = [6, 7, 8, 9]
teams = ["Checkers", "Comets", "Ice Hogs", "Monsters"]

ingram_goals = intvar(6, 9)
parrish_goals = intvar(6, 9)
quinn_goals = intvar(6, 9)
underwood_goals = intvar(6, 9)

# Define constraints
model = Model(
    AllDifferent([ingram_goals, parrish_goals, quinn_goals, underwood_goals]),
    ingram_goals == 7,
    parrish_goals == quinn_goals + 1,
    any([team == "Ice Hogs" for team in [teams[ingram_goals.index], teams[parrish_goals.index], teams[quinn_goals.index], teams[underwood_goals.index]]]),
    any([player == "Checkers" for player in [players[ingram_goals.index], players[parrish_goals.index], players[quinn_goals.index], players[underwood_goals.index]]]),
    Xor([ingram_goals == 6, players.index("Ingram") == ingram_goals.index])
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Print the solution
for player, goal, team in zip(players, [ingram_goals, parrish_goals, quinn_goals, underwood_goals], [teams[ingram_goals.value], teams[parrish_goals.value], teams[quinn_goals.value], teams[underwood_goals.value]]):
    print(f"{player} scored {goal.value()} goals and is from {team}")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Natasha's study starts 2 months after the project on the Odyssey.
Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March.
The study on the Liberty starts 2 months after Eunice's project.

Entities:
students: Eunice, Felix, Natasha, Stacy
months: March, April, May, June
ships: Escape, Liberty, Odyssey, Osprey
N/A
```python
from cpmpy import *

# Define variables
students = ["Eunice", "Felix", "Natasha", "Stacy"]
months = ["March", "April", "May", "June"]
ships = ["Escape", "Liberty", "Odyssey", "Osprey"]

study_start = IntVar(1, 4, shape=len(students))
assignment_start = IntVar(1, 4, shape=len(students))
study_ship = IntVar(1, 4, shape=len(students))
assignment_ship = IntVar(1, 4, shape=len(students))

# Define constraints
model = Model(
    AllDifferent(study_start),
    AllDifferent(assignment_start),
    AllDifferent(study_ship),
    AllDifferent(assignment_ship),
    
    # Natasha's study starts 2 months after the project on the Odyssey
    (study_start[students.index("Natasha")] == assignment_start[ships.index("Odyssey")] + 2),
    
    # The study on the Liberty starts 2 months after Eunice's project
    (study_start[students.index("Natasha")] == assignment_start[ships.index("Odyssey")] + 2),
    
    # Of the assignment on the Liberty and the assignment on the Escape, one is Felix's assignment and the other starts in March
    Xor([
        And(assignment_ship[students.index("Felix")] == ships.index("Liberty"), assignment_start[students.index("Felix")] == months.index("March")),
        And(assignment_ship[students.index("Felix")] == ships.index("Escape"), assignment_start[students.index("Felix")] == months.index("March"))
    ])
)

# Solve the model
solution = model.solve()

if solution:
    for student in students:
        print(f"{student}: Study on {ships[study_ship[students.index(student)].value()]} starting in {months[study_start[students.index(student)].value()]}")
        print(f"   Assignment on {ships[assignment_ship[students.index(student)].value()]} starting in {months[assignment_start[students.index(student)].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The project headed by Dr. Golden will go online sometime before the Zynga Complex.
The project headed by Dr. Weber will go online 1 year before the Bale-Hahn SSC.
The Egert Facility will go online 1 year after the ISON-X42.
The project headed by Dr. Owens will go online 1 year after the ISON-X42.

Entities:
years: 2016, 2017, 2018, 2019
names: Bale-Hahn SSC, Egert Facility, ISON-X42, Zynga Complex
scientists: Dr. Farley, Dr. Golden, Dr. Owens, Dr. Weber
N/A
```python
from cpmpy import *

years = ["2016", "2017", "2018", "2019"]
names = ["Bale-Hahn SSC", "Egert Facility", "ISON-X42", "Zynga Complex"]
scientists = ["Dr. Farley", "Dr. Golden", "Dr. Owens", "Dr. Weber"]

project_year = IntVar(2016, 2019, shape=len(names))
dr_golden_idx = scientists.index("Dr. Golden")
zynga_complex_idx = names.index("Zynga Complex")
dr_weber_idx = scientists.index("Dr. Weber")
bale_hahn_idx = names.index("Bale-Hahn SSC")
egert_idx = names.index("Egert Facility")
ison_x42_idx = names.index("ISON-X42")
dr_owens_idx = scientists.index("Dr. Owens")

model = Model(
    AllDifferent(project_year),
    project_year[dr_golden_idx] < project_year[zynga_complex_idx],
    project_year[dr_weber_idx] == project_year[bale_hahn_idx] - 1,
    project_year[egert_idx] == project_year[ison_x42_idx] + 1,
    project_year[dr_owens_idx] == project_year[ison_x42_idx] + 1
)
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The model made by Torvia costs 25 dollars more than the model made by Honwa.
The camera made by Honwa is either the Zenix 2C or the MX-827.
Of the $600 model and the FC-520, one is made by Honwa and the other is made by Dayero.
The Zenix 2C costs less than the FC-520.

Entities:
companies: Banion, Dayero, Honwa, Torvia
prices: $550, $575, $600, $625
cameras: DM-5000, FC-520, MX-827, Zenix 2C
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define entities
companies = ["Banion", "Dayero", "Honwa", "Torvia"]
prices = [550, 575, 600, 625]
cameras = ["DM-5000", "FC-520", "MX-827", "Zenix 2C"]

# Define variables
model_made_by = intvar(0, len(companies)-1, shape=len(cameras))
price_of_model = intvar(0, len(prices)-1, shape=len(cameras))

# Constraints
model_made_by[cameras.index("Zenix 2C")] <= model_made_by[cameras.index("FC-520")]
model_made_by[cameras.index("Zenix 2C")] != model_made_by[cameras.index("FC-520")]

price_of_model[cameras.index("Zenix 2C")] < price_of_model[cameras.index("$600")]
price_of_model[cameras.index("FC-520")] != price_of_model[cameras.index("$600")]

(model_made_by[cameras.index("$600")] == model_made_by[cameras.index("Honwa")]) & \
(model_made_by[cameras.index("FC-520")] == model_made_by[cameras.index("Dayero")])

(price_of_model[cameras.index("Torvia")] == price_of_model[cameras.index("Honwa")] + 25)

# Solve the problem
model = Model(
    model_made_by,
    price_of_model
)

# Solve with the CP-SAT solver
solver = CPM_ortools(model)
solver.solve()
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The football facility holds more people than Underwood Arena.
The basketball facility holds 80 more people than Vazquez Arena.
Young Arena holds 230 people.
Underwood Arena holds 40 fewer people than Vazquez Arena.
The facility with seating for 190 people is either the lacrosse facility or Underwood Arena.

Entities:
arenas: Gentry, Underwood, Vazquez, Young
capacities: 110, 150, 190, 230
sports: basketball, football, lacrosse, soccer
N/A
```python
from cpmpy import *

# Define entities
arenas = ["Gentry", "Underwood", "Vazquez", "Young"]
capacities = [110, 150, 190, 230]
sports = ["basketball", "football", "lacrosse", "soccer"]

# Define variables
arena_capacities = intvar(110, 230, shape=len(arenas))

# Define constraints
model = Model(
    AllDifferent(arena_capacities),
    arena_capacities[arenas.index("Young")] == 230,
    arena_capacities[arenas.index("Underwood")] == arena_capacities[arenas.index("Vazquez")] - 40,
    arena_capacities[arenas.index("Vazquez")] == arena_capacities[arenas.index("basketball")] + 80,
    (arena_capacities[arenas.index("football")] > arena_capacities[arenas.index("Underwood")]),
    ((arena_capacities[arenas.index("lacrosse")] == 190) | (arena_capacities[arenas.index("Underwood")] == 190))
)

# Solve the model
solution = model.solve()

if solution:
    for arena, capacity in zip(arenas, arena_capacities):
        print(f"{arena} has a capacity of {capacity.value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Hope paid less than Delia.
Patricia had the cappuccino.
The one who had the cafe americano paid 1 dollar more than Patricia.
Hope paid more than the one who had the cafe americano.
The one who had the chai tea paid 1 dollar more than the one who had the cafe americano.

Entities:
names: Delia, Hope, Patricia, Wayne
prices: $5, $6, $7, $8
drinks: cafe americano, cafe latte, cappuccino, chai tea
N/A
```python
from cpmpy import *

# Define variables
names = ["Delia", "Hope", "Patricia", "Wayne"]
prices = [5, 6, 7, 8]
drinks = ["cafe americano", "cafe latte", "cappuccino", "chai tea"]

hope, delia, patricia, wayne = IntVar(0, 3, shape=4, name="name")
price_hope, price_delia, price_patricia, price_wayne = IntVar(0, 3, shape=4, name="price")
drink_hope, drink_delia, drink_patricia, drink_wayne = IntVar(0, 3, shape=4, name="drink")

# Define constraints
model = Model(
    AllDifferent(hope, delia, patricia, wayne),
    AllDifferent(price_hope, price_delia, price_patricia, price_wayne),
    AllDifferent(drink_hope, drink_delia, drink_patricia, drink_wayne),
    
    hope != delia,
    patricia == drink_patricia,
    
    (drink_hope == 0) | (drink_delia == 0) | (drink_patricia == 0) | (drink_wayne == 0),
    (price_hope == price_patricia + 1),
    (price_hope > price_delia),
    (drink_chai_tea == drink_cafe_americano + 1)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i, name in enumerate(names):
        print(f"{name} paid ${prices[solution[price[i]].value()]} for {drinks[solution[drink[i]].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Leden drove 25 miles farther than the automobile with a high speed of 75 MPH.
The Poltris drove 25 miles farther than the automobile with a high speed of 69 MPH.
The Awick drove somewhat less than the automobile with a high speed of 81 MPH.
The car with a high speed of 69 MPH drove somewhat farther than the automobile with a high speed of 81 MPH.

Entities:
cars: Awick, Leden, Poltris, Versem
distances: 525 miles, 550 miles, 575 miles, 600 miles
speeds: 62 MPH, 69 MPH, 75 MPH, 81 MPH
N/A
```python
from cpmpy import *

# Entities
cars = ["Awick", "Leden", "Poltris", "Versem"]
distances = [525, 550, 575, 600]
speeds = [62, 69, 75, 81]

# Variables
Awick_distance, Leden_distance, Poltris_distance, Versem_distance = intvar(525, 600, shape=4)
Awick_speed, Leden_speed, Poltris_speed, Versem_speed = intvar(62, 81, shape=4)

# Constraints
constraints = [
    AllDifferent([Awick_distance, Leden_distance, Poltris_distance, Versem_distance]),
    AllDifferent([Awick_speed, Leden_speed, Poltris_speed, Versem_speed]),
    
    Leden_distance == Poltris_distance + 25,
    Poltris_distance == Awick_distance - 25,
    Leden_speed == 75,
    Poltris_speed == 69,
    Awick_speed < 81,
    Poltris_speed > Awick_speed,
]

model = Model(constraints)
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The report from Zearing was either the August 4 report or Edith Estes's report.
Hal Harrison's report was submitted sometime after Iva Ingram's sighting.
The August 5 sighting was from Islesboro.
The report from Tarzana was submitted 1 day before the sighting from Islesboro.
Benny Baron's report was received on August 7.

Entities:
witnesses: Benny Baron, Edith Estes, Hal Harrison, Iva Ingram
dates: August 4, August 5, August 6, August 7
towns: Islesboro, Long Barn, Tarzana, Zearing
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Entities
witnesses = ["Benny Baron", "Edith Estes", "Hal Harrison", "Iva Ingram"]
dates = ["August 4", "August 5", "August 6", "August 7"]
towns = ["Islesboro", "Long Barn", "Tarzana", "Zearing"]

# Variables
report = intvar(0, 3, shape=len(witnesses))
sighting = intvar(0, 3, shape=len(witnesses))

# Clues
model = Model(
    report[witnesses.index("Zearing")] == dates.index("August 4") | report[witnesses.index("Edith Estes")],
    report[witnesses.index("Hal Harrison")] > sighting[witnesses.index("Iva Ingram")],
    sighting[witnesses.index("August 5")] == towns.index("Islesboro"),
    report[witnesses.index("Tarzana")] == sighting[witnesses.index("Islesboro")] - 1,
    report[witnesses.index("Benny Baron")] == dates.index("August 7")
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Get the results
for w in witnesses:
    print(w, "reported on", dates[report[witnesses.index(w)].value()], "after sighting on", dates[sighting[witnesses.index(w)].value()])
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird.
The condor with a wingspan of 114 inches is 5 years old.
Pepper has a wingspan of 114 inches.
The four condors are the 9-year-old bird, Pepper, Merlin and the condor with a wingspan of 106 inches.
The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird.

Entities:
wingspans: 102 inches, 106 inches, 110 inches, 114 inches
names: Merlin, Pepper, Spike, Sunshine
ages: 4, 5, 8, 9
N/A
```python
from cpmpy import *

# Define entities
wingspans = [102, 106, 110, 114]
names = ['Merlin', 'Pepper', 'Spike', 'Sunshine']
ages = [4, 5, 8, 9]

# Define variables
condor_wingspan = IntVar(102, 114, shape=len(names))
condor_age = IntVar(4, 9, shape=len(names))

# Define constraints
model = Model(
    # Sunshine is either the condor with a wingspan of 102 inches or the 5-year-old bird
    ((condor_wingspan == 102) | (condor_age == 5))[names.index('Sunshine')],
    
    # The condor with a wingspan of 114 inches is 5 years old
    (condor_wingspan == 114) == (condor_age == 5),
    
    # Pepper has a wingspan of 114 inches
    condor_wingspan[names.index('Pepper')] == 114,
    
    # The four condors are the 9-year-old bird, Pepper, Merlin and the condor with a wingspan of 106 inches
    (condor_age == 9).sum() == 1,
    (condor_wingspan == 106).sum() == 1,
    (condor_wingspan == 114).sum() == 1,
    (condor_wingspan == 102).sum() == 1,
    
    # The 9-year-old bird has a wingspan 4 inches shorter than the 4-year-old bird
    (condor_age == 9).implies(condor_wingspan == 110),
    (condor_age == 4).implies(condor_wingspan == 114)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i, name in enumerate(names):
        print(f"{name}: wingspan {condor_wingspan[i].value()}, age {condor_age[i].value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The puzzle with the autumn leaves theme has somewhat more than the jigsaw puzzle with the rustic village theme.
The four puzzles are the puzzle made by Buralde, the jigsaw puzzle with the rustic village theme, the puzzle with the autumn leaves theme and the puzzle with 1000 pieces.
The jigsaw puzzle made by Buralde has the outer space theme.
The jigsaw puzzle made by Denlend has somewhat fewer than the jigsaw puzzle with the outer space theme.
The jigsaw puzzle made by Kimsight has 250 more pieces than the puzzle made by Denlend.

Entities:
companies: Buralde, Denlend, Irycia, Kimsight
pieces: 250, 500, 750, 1000
themes: autumn leaves, coral reef, outer space, rustic village
N/A
```python
from cpmpy import *

# Define entities
companies = ["Buralde", "Denlend", "Irycia", "Kimsight"]
pieces = [250, 500, 750, 1000]
themes = ["autumn leaves", "coral reef", "outer space", "rustic village"]

# Define variables
puzzle_theme = IntVar(0, 3, shape=len(companies))
puzzle_pieces = IntVar(0, 3, shape=len(companies))

# Define constraints
model = Model(
    AllDifferent(puzzle_theme),
    AllDifferent(puzzle_pieces),
    
    # Clues
    puzzle_pieces[0] > puzzle_pieces[3],
    puzzle_theme.index("Buralde") == puzzle_theme.index("outer space"),
    puzzle_theme.index("Denlend") < puzzle_theme.index("outer space"),
    puzzle_pieces[puzzle_theme.index("Kimsight")] == puzzle_pieces[puzzle_theme.index("Denlend")] + 250
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i, company in enumerate(companies):
        print(f"{company} made a {pieces[puzzle_pieces[i].value()]}-piece puzzle with the theme {themes[puzzle_theme[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The worker who works in the green section served more riders than Brett.
Peter served 25 fewer riders than Willis.
Brett served more riders than Peter.
The person who works in the yellow section served 25 more riders than the worker who works in the orange section.
Peter is either the person who served 125 riders or the person who works in the blue section.

Entities:
employees: Brett, Peter, Victor, Willis
rides: 50 riders, 75 riders, 100 riders, 125 riders
section: blue, green, orange, yellow
N/A
```python
from cpmpy import *

# Define variables
employees = ["Brett", "Peter", "Victor", "Willis"]
rides = [50, 75, 100, 125]
section = ["blue", "green", "orange", "yellow"]

brett, peter, victor, willis = IntVar(0, 3, shape=4)
blue, green, orange, yellow = IntVar(0, 3, shape=4)
rides_brett, rides_peter, rides_victor, rides_willis = IntVar(0, 3, shape=4)

# Define constraints
model = Model(
    AllDifferent([brett, peter, victor, willis]),
    AllDifferent([blue, green, orange, yellow]),
    
    green > brett,
    rides_willis == rides_peter - 25,
    brett > peter,
    (yellow == rides_green + 25) | (yellow == rides_orange + 25),
    (peter == 0) | (blue == 0)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for emp, ride, sec in zip(employees, rides, section):
        print(f"{emp} served {ride} riders and works in the {section[solution.index(emp)]} section.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The team from Venezuela finished with 4 gold medals.
The squad that won 2 gold medals ended with 6 silver medals.
The four teams were the squad from Zimbabwe, the team that won 3 gold medals, the squad that won 6 silver medals and the squad that won 8 silver medals.
The team from Dominica ended the games with 1 fewer gold medal than the squad that won 5 silver medals.

Entities:
countries: Dominica, Jordan, Venezuela, Zimbabwe
gold medals: 1, 2, 3, 4
silver medals: 2, 5, 6, 8
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

countries = ["Dominica", "Jordan", "Venezuela", "Zimbabwe"]
gold_medals = [1, 2, 3, 4]
silver_medals = [2, 5, 6, 8]

# Define decision variables
dominica_gold = intvar(1, 4)
jordan_gold = intvar(1, 4)
venezuela_gold = intvar(1, 4)
zimbabwe_gold = intvar(1, 4)

dominica_silver = intvar(2, 8)
jordan_silver = intvar(2, 8)
venezuela_silver = intvar(2, 8)
zimbabwe_silver = intvar(2, 8)

# Constraints
model = Model(
    AllDifferent([dominica_gold, jordan_gold, venezuela_gold, zimbabwe_gold]),
    AllDifferent([dominica_silver, jordan_silver, venezuela_silver, zimbabwe_silver]),
    
    venezuela_gold == 4,
    (jordan_gold == 2) & (jordan_silver == 6),
    
    (zimbabwe_gold == 3) | (zimbabwe_silver == 6) | (zimbabwe_silver == 8),
    
    dominica_gold == jordan_silver - 1
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Retrieve the solution
for country in countries:
    print(f"{country}: gold {eval(country.lower()+'_gold')}, silver {eval(country.lower()+'_silver')}")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Vorckin impact crater is 125 meters wide.
The 150 meters wide one is either the Ordovician impact crater or the Permian impact crater.
The Ordovician impact crater is 25 meters wider than the Jurassic impact crater.
The Triassic impact crater is either the Ormagh impact crater or the 150 meters wide one.
The Cersay impact crater was formed during the Jurassic period.

Entities:
craters: Cersay, Moriwa, Ormagh, Vorckin
diameters: 100 meters, 125 meters, 150 meters, 175 meters
periods: Jurassic, Ordovician, Permian, Triassic
N/A
```python
from cpmpy import *

# Entities
craters = ["Cersay", "Moriwa", "Ormagh", "Vorckin"]
diameters = [100, 125, 150, 175]
periods = ["Jurassic", "Ordovician", "Permian", "Triassic"]

# Variables
crater_diameter = intvar(100, 175, shape=len(craters))
crater_period = intvar(0, 3, shape=len(craters))

# Constraints
model = Model(
    # Clues
    crater_diameter[craters.index("Vorckin")] == 125,
    ((crater_diameter[craters.index("Ordovician")] == 150) | (crater_diameter[craters.index("Permian")] == 150)),
    crater_diameter[craters.index("Ordovician")] == crater_diameter[craters.index("Jurassic")] + 25,
    ((crater_period[craters.index("Triassic")] == crater_period[craters.index("Ormagh")]) | (crater_diameter[craters.index("Triassic")] == 150)),
    crater_period[craters.index("Cersay")] == periods.index("Jurassic"),

    # All different diameters and periods
    AllDifferent(crater_diameter),
    AllDifferent(crater_period)
)

# Solve the model
solution = model.solve()

if solution:
    for i, crater in enumerate(craters):
        print(f"{crater} - Diameter: {crater_diameter[i].value()} meters, Period: {periods[crater_period[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The butterfly that was auctioned 7th sold for 20 dollars less than the insect won by Daniel.
The four butterflies were the insect that sold for $260, the butterfly that was auctioned 4th, the butterfly that was auctioned 7th and the butterfly won by Roland.
The butterfly won by Gabriel was the 8th lot.

Entities:
winners: Daniel, Gabriel, Roland, Vincent
prices: $250, $260, $270, $280
orders: 3rd, 4th, 7th, 8th
N/A
```python
from cpmpy import *

# Entities
winners = ["Daniel", "Gabriel", "Roland", "Vincent"]
prices = [250, 260, 270, 280]
orders = [3, 4, 7, 8]

# Variables
butterfly_prices = intvar(250, 280, shape=4)
butterfly_orders = intvar(3, 8, shape=4)

# Constraints
model = Model(
    AllDifferent(butterfly_prices),
    AllDifferent(butterfly_orders),
    
    butterfly_prices[1] == butterfly_prices[0] + 20,
    
    butterfly_prices.index(260) == butterfly_orders.index(4),
    butterfly_orders.index(7) == butterfly_orders.index(8),
    
    butterfly_orders[2] == 7,
    butterfly_orders[3] == 8,
    
    butterfly_orders.index(8) == winners.index("Gabriel")
)

# Solve
solution = model.solve()

if solution:
    for i in range(4):
        print(f"Butterfly auctioned {butterfly_orders[i].value()}th was won by {winners[i]} and sold for ${butterfly_prices[i].value()}.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Greg threw the red darts.
Alton scored 7 points higher than Evan.
The contestant who threw the yellow darts scored somewhat higher than the player who threw the white darts.
The player who scored 48 points threw the yellow darts.
Greg scored 7 points higher than Jeffrey.

Entities:
players: Alton, Evan, Greg, Jeffrey
scores: 41, 48, 55, 62
colors: green, red, white, yellow
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

players = ["Alton", "Evan", "Greg", "Jeffrey"]
scores = [41, 48, 55, 62]
colors = ["green", "red", "white", "yellow"]

# Define decision variables
dart_color = intvar(0, 3, shape=len(players))
score = intvar(41, 62, shape=len(players))

model = Model(
    AllDifferent(dart_color),
    AllDifferent(score),
    
    # Clues
    dart_color[players.index("Greg")] == colors.index("red"),
    score[players.index("Alton")] == score[players.index("Evan")] + 7,
    (dart_color.index(colors.index("yellow")) > dart_color.index(colors.index("white"))),
    score[dart_color.index(colors.index("yellow"))] == 48,
    score[players.index("Greg")] == score[players.index("Jeffrey")] + 7
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Print the solution
for player in players:
    player_idx = players.index(player)
    print(f"{player} threw the {colors[dart_color[player_idx].value()]} darts and scored {score[player_idx].value()} points.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Vasquez will leave sometime after Macdonald.
Vasquez will leave 1 month before the ambassador with the 5 day visit.
Gilbert is either the person leaving in January or the ambassador with the 4 day visit.
Macdonald will leave 1 month before the ambassador with the 4 day visit.
The ambassador with the 4 day visit will leave sometime before the ambassador with the 9 day visit.

Entities:
diplomats: Gilbert, Macdonald, Pickett, Vasquez
months: January, February, March, April
durations: 4 day, 5 day, 9 day, 10 day
N/A
```python
from cpmpy import *

# Entities
diplomats = ["Gilbert", "Macdonald", "Pickett", "Vasquez"]
months = ["January", "February", "March", "April"]
durations = ["4 day", "5 day", "9 day", "10 day"]

# Variables
leave_time = IntVar(1, 4, shape=len(diplomats))
ambassador_duration = IntVar(1, 4, shape=len(durations))

# Constraints
model = Model(
    AllDifferent(leave_time),
    AllDifferent(ambassador_duration),
    
    # Vasquez will leave sometime after Macdonald
    (leave_time[diplomats.index("Vasquez")] > leave_time[diplomats.index("Macdonald")]),
    
    # Vasquez will leave 1 month before the ambassador with the 5 day visit
    (leave_time[diplomats.index("Vasquez")] == ambassador_duration[durations.index("5 day")] - 1),
    
    # Gilbert is either the person leaving in January or the ambassador with the 4 day visit
    Xor([(leave_time[diplomats.index("Gilbert")] == months.index("January")), 
         (ambassador_duration[durations.index("4 day")] == diplomats.index("Gilbert"))]),
    
    # Macdonald will leave 1 month before the ambassador with the 4 day visit
    (leave_time[diplomats.index("Macdonald")] == ambassador_duration[durations.index("4 day")] - 1),
    
    # The ambassador with the 4 day visit will leave sometime before the ambassador with the 9 day visit
    (leave_time[ambassador_duration.index(durations.index("4 day"))] < leave_time[ambassador_duration.index(durations.index("9 day"))])
)

# Solve the model
solution = model.solve()

if solution:
    for i, diplomat in enumerate(diplomats):
        print(f"{diplomat} will leave in {months[leave_time[i].value() - 1]} and the ambassador with the {durations[ambassador_duration[i].value() - 1]} visit.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Hattie and the student who will major in Theology are different students.
The student who will major in English is either Tracy or the student who received the $25,000 scholarship.
Hattie was awarded $10,000 more than the person who will major in Physics.
The student who received the $40,000 scholarship will major in Theology.
Ora was awarded some amount less than the student who will major in Archaeology.

Entities:
names: Erma, Hattie, Ora, Tracy
scholarships: $25,000, $30,000, $35,000, $40,000
majors: Archaeology, English, Physics, Theology
N/A
```python
from cpmpy import *

# Define entities
names = ["Erma", "Hattie", "Ora", "Tracy"]
scholarships = ["$25,000", "$30,000", "$35,000", "$40,000"]
majors = ["Archaeology", "English", "Physics", "Theology"]

# Define variables
student_major = intvar(0, 3, shape=len(names))  # 0: Archaeology, 1: English, 2: Physics, 3: Theology
student_scholarship = intvar(0, 3, shape=len(names))  # 0: $25,000, 1: $30,000, 2: $35,000, 3: $40,000

# Clues
model = Model(
    AllDifferent(student_major),
    AllDifferent(student_scholarship),
    
    # Hattie and the student majoring in Theology are different
    (student_major[names.index("Hattie")] != 3),
    
    # The student majoring in English is either Tracy or the student who received the $25,000 scholarship
    Xor(student_major[names.index("Tracy")] == 1, student_scholarship[names.index("$25,000")] == 1),
    
    # Hattie was awarded $10,000 more than the person majoring in Physics
    student_scholarship[student_major.index(2)] + 10 == student_scholarship[names.index("Hattie")],
    
    # The student who received the $40,000 scholarship will major in Theology
    student_major[student_scholarship.index(3)] == 3,
    
    # Ora was awarded some amount less than the student majoring in Archaeology
    student_scholarship[student_major.index(0)] > student_scholarship[names.index("Ora")]
)

# Solve the model
solution = model.solve()

if solution:
    for name in names:
        idx = names.index(name)
        print(f"{name}: Major - {majors[student_major[idx].value()]}, Scholarship - {scholarships[student_scholarship[idx].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Hatcha started 6 years after the wing back.
Kawa began playing in 1982.
Banben was the center back.
The person who started in 1985 was either Kawa or the center forward.

Entities:
players: Banben, Hatcha, Kawa, Rothvum
years: 1976, 1979, 1982, 1985
positions: center back, center forward, goalie, wing back
N/A
```python
from cpmpy import *

players = ["Banben", "Hatcha", "Kawa", "Rothvum"]
years = [1976, 1979, 1982, 1985]
positions = ["center back", "center forward", "goalie", "wing back"]

# Define variables
start_year = IntVar(1976, 1985, shape=len(players))
position = IntVar(0, len(positions)-1, shape=len(players))

# Clues
model = Model(
    AllDifferent(start_year),
    AllDifferent(position),
    
    # Hatcha started 6 years after the wing back
    (start_year[players.index("Hatcha")] - start_year[players.index("Rothvum")] == 6),
    
    # Kawa began playing in 1982
    (start_year[players.index("Kawa")] == 1982),
    
    # Banben was the center back
    (position[players.index("Banben")] == positions.index("center back")),
    
    # The person who started in 1985 was either Kawa or the center forward
    Xor([
        (start_year[players.index("Kawa")] == 1985),
        (position[players.index("Kawa")] == positions.index("center forward"))
    ])
)

print(model)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The puzzle with the postage stamp theme has somewhat fewer than the puzzle made by Astury.
The jigsaw puzzle with the outer space theme has 250 more pieces than the puzzle made by Garroda.
The jigsaw puzzle made by Garroda has somewhat fewer than the puzzle made by Vesem.
The jigsaw puzzle with the postage stamp theme has somewhat more than the puzzle with the city skyline theme.
The jigsaw puzzle made by Vesem has 500 pieces.

Entities:
companies: Astury, Denlend, Garroda, Vesem
pieces: 250, 500, 750, 1000
themes: autumn leaves, city skyline, outer space, postage stamp
N/A
```python
from cpmpy import *

# Define entities
companies = ["Astury", "Denlend", "Garroda", "Vesem"]
pieces = [250, 500, 750, 1000]
themes = ["autumn leaves", "city skyline", "outer space", "postage stamp"]

# Define variables
puzzle_theme = IntVar(0, 3, shape=len(companies))
puzzle_pieces = IntVar(0, 3, shape=len(companies))

# Constraints
model = Model(
    AllDifferent(puzzle_theme),
    AllDifferent(puzzle_pieces),
    
    puzzle_pieces[themes.index("postage stamp")] < puzzle_pieces[themes.index("Astury")],
    puzzle_theme[themes.index("outer space")] == puzzle_pieces[companies.index("Garroda")] + 250,
    puzzle_pieces[companies.index("Garroda")] < puzzle_pieces[companies.index("Vesem")],
    puzzle_theme[themes.index("postage stamp")] > puzzle_theme[themes.index("city skyline")],
    puzzle_pieces[companies.index("Vesem")] == 500
)

# Solve the model
solution = model.solve()

if solution:
    for i, company in enumerate(companies):
        print(f"{company} made a {puzzle_pieces[i].value()} piece puzzle with the theme {themes[puzzle_theme[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware.
The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science.
The photo of the polar bear was taken sometime before the shot of the white rhino.
The photo taken in April was published by Animal Science.
The photo of the giant tortoise was taken in June.

Entities:
animals: giant tortoise, orangutan, polar bear, white rhino
months: March, April, May, June
magazines: Animal Science, Earth Aware, Nature Monthly, Wildzone
N/A
```python
from cpmpy import *

# Entities
animals = ["giant tortoise", "orangutan", "polar bear", "white rhino"]
months = ["March", "April", "May", "June"]
magazines = ["Animal Science", "Earth Aware", "Nature Monthly", "Wildzone"]

# Variables
photo_month = IntVar(1, 4, shape=(4,))  # 1: March, 2: April, 3: May, 4: June
photo_magazine = IntVar(1, 4, shape=(4,))  # 1: Animal Science, 2: Earth Aware, 3: Nature Monthly, 4: Wildzone

# Constraints
model = Model(
    AllDifferent(photo_month),
    AllDifferent(photo_magazine),
    
    photo_month[1] == photo_month[2] + 2,  # The photo published by Nature Monthly was taken 2 months after the photo published by Earth Aware
    Xor(photo_magazine == 2, photo_magazine == 1),  # The shot of the white rhino was either the photo published by Earth Aware or the photo published by Animal Science
    photo_month[3] < photo_month[4],  # The photo of the polar bear was taken sometime before the shot of the white rhino
    photo_month[2] == 2,  # The photo taken in April was published by Animal Science
    photo_month[4] == 4  # The photo of the giant tortoise was taken in June
)

# Solve and print solution
solution = model.solve()
if solution:
    for i, animal in enumerate(animals):
        print(f"{animal} was photographed in {months[photo_month.value()[i] - 1]} and published in {magazines[photo_magazine.value()[i] - 1]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Oginao is either the 105 ft tall fall or the 115 ft tall waterfall.
Oginao is 5 ft shorter than Irskela.
The fall in Brazil is either Cerbel or Inawatai.
Inawatai is in New Zealand.
Cerbel is 10 ft shorter than the fall in Canada.

Entities:
names: Cerbel, Irskela, Inawatai, Oginao
heights: 100 ft, 105 ft, 110 ft, 115 ft
countries: Canada, Brazil, New Zealand, Switzerland
N/A
```python
from cpmpy import *

# Entities
names = ["Cerbel", "Irskela", "Inawatai", "Oginao"]
heights = [100, 105, 110, 115]
countries = ["Canada", "Brazil", "New Zealand", "Switzerland"]

# Variables
height = intvar(100, 115, shape=len(names))
country = intvar(0, 3, shape=len(names))

# Constraints
model = Model(
    AllDifferent(height),
    AllDifferent(country),
    
    # Oginao is either the 105 ft tall fall or the 115 ft tall waterfall
    ((height == 105) | (height == 115))[names.index("Oginao")],
    
    # Oginao is 5 ft shorter than Irskela
    (height[names.index("Oginao")] == height[names.index("Irskela")] - 5),
    
    # The fall in Brazil is either Cerbel or Inawatai
    ((country == countries.index("Brazil")) == ((names.index("Cerbel") | names.index("Inawatai")))),
    
    # Inawatai is in New Zealand
    (country[names.index("Inawatai")] == countries.index("New Zealand")),
    
    # Cerbel is 10 ft shorter than the fall in Canada
    (height[names.index("Cerbel")] == height[names.index("Canada")] - 10)
)

# Solve the model
solution = model.solve()

if solution:
    for i, name in enumerate(names):
        print(f"{name}: {height[i].value()} ft, {countries[country[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The 90 million year old fossil costs 250 dollars more than the pilodontus.
The gigasaurus costs 500 dollars more than the 78 million year old fossil.
The gigasaurus costs 250 dollars less than the 75 million year old fossil.
The mirasaurus is 90 million years old.

Entities:
dinosaurs: gigasaurus, mirasaurus, pilodontus, rotosaurus
prices: $500, $750, $1000, $1250
ages: 72 million, 75 million, 78 million, 90 million
N/A
```python
from cpmpy import *

# Entities
dinosaurs = ["gigasaurus", "mirasaurus", "pilodontus", "rotosaurus"]
prices = [500, 750, 1000, 1250]
ages = [72, 75, 78, 90]

# Variables
fossil = IntVar(0, 3)  # 90 million year old fossil
gigasaurus = IntVar(0, 3)
mirasaurus = IntVar(0, 3)
pilodontus = IntVar(0, 3)
rotosaurus = IntVar(0, 3)

# Constraints
model = Model(
    fossil == 3,  # The 90 million year old fossil is the mirasaurus
    fossil != pilodontus,  # The 90 million year old fossil is not the pilodontus
    gigasaurus == fossil + 1,  # The gigasaurus is one year older than the 90 million year old fossil
    gigasaurus == 2,  # The gigasaurus is 78 million years old
    gigasaurus == mirasaurus - 1,  # The gigasaurus is 250 dollars less than the 75 million year old fossil
    mirasaurus == 3,  # The mirasaurus is 90 million years old
    prices[fossil] == prices[pilodontus] + 250,  # The 90 million year old fossil costs 250 dollars more than the pilodontus
    prices[gigasaurus] == prices[2] + 500  # The gigasaurus costs 500 dollars more than the 78 million year old fossil
)

# Solve
solution = model.solve()

if solution:
    for dino in dinosaurs:
        print(dino, ":", ages[model[dino]], "million years old, $", prices[model[dino]])
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The four conductors are Roderick, the conductor working on June 10, the person departing from Leland and the person departing from Indio.
The person working on June 13 will depart from Hardwick.
The conductor working on June 12 is either the conductor departing from Indio or Roderick.
Vernon is either the person working on June 11 or the conductor working on June 13.
Francis will leave sometime before the conductor departing from Leland.

Entities:
names: Francis, Luke, Roderick, Vernon
days: June 10, June 11, June 12, June 13
departures: Hardwick, Indio, Kent, Leland
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Entities
names = ["Francis", "Luke", "Roderick", "Vernon"]
days = ["June 10", "June 11", "June 12", "June 13"]
departures = ["Hardwick", "Indio", "Kent", "Leland"]

# Define variables
conductor = intvar(0, 3, shape=len(names))
working_day = intvar(0, 3, shape=len(names))
departure_location = intvar(0, 3, shape=len(names))

# Clues
model = Model(
    # The four conductors are Roderick, the conductor working on June 10, the person departing from Leland and the person departing from Indio.
    AllDifferent([conductor[n] for n in range(len(names))]),
    [conductor[n] == names.index("Roderick") for n in range(len(names))],
    [conductor[n] == working_day.index(days.index("June 10")) for n in range(len(names))],
    [conductor[n] == departure_location.index(departures.index("Leland")) for n in range(len(names))],
    [conductor[n] == departure_location.index(departures.index("Indio")) for n in range(len(names))],
    
    # The person working on June 13 will depart from Hardwick.
    [working_day[n] == days.index("June 13") for n in range(len(names))].implies(
        [departure_location[n] == departures.index("Hardwick") for n in range(len(names))]
    ),
    
    # The conductor working on June 12 is either the conductor departing from Indio or Roderick.
    [working_day[n] == days.index("June 12") for n in range(len(names))].implies(
        Xor([conductor[n] == departure_location.index(departures.index("Indio")) for n in range(len(names))],
            [conductor[n] == names.index("Roderick") for n in range(len(names))]
        )
    ),
    
    # Vernon is either the person working on June 11 or the conductor working on June 13.
    [names.index("Vernon") == working_day.index(days.index("June 11"))].implies(
        [names.index("Vernon") == conductor.index(days.index("June 13"))]
    ),
    
    # Francis will leave sometime before the conductor departing from Leland.
    [names.index("Francis") == departure_location.index(departures.index("Leland"))].implies(
        [working_day.index(days.index("June 10")) < conductor.index(departure_location.index(departures.index("Leland")))]
    )
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Print the solution
for n in range(len(names)):
    print(f"{names[n]}: conductor {conductor[n].value()}, working on {days[working_day[n].value()]}, departing from {departures[departure_location[n].value()]}")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Kia rental is for a period 1 day shorter than the Toyota rental.
The 4 day rental is for the Fiat.
Kathy Koch's reservation is either the 5 day reservation or the Fiat rental.
The 3 day rental, Irene Ingram's reservation and Kathy Koch's reservation are all different rentals.
Ann Alexander's rental is for 4 days.

Entities:
customers: Ann Alexander, Edna Erickson, Irene Ingram, Kathy Koch
contract length: 2 days, 3 days, 4 days, 5 days
cars: Fiat, Kia, Nissan, Toyota
N/A
```python
from cpmpy import *

customers = ["Ann Alexander", "Edna Erickson", "Irene Ingram", "Kathy Koch"]
contract_lengths = [2, 3, 4, 5]
cars = ["Fiat", "Kia", "Nissan", "Toyota"]

# Variables
rental = IntVar(0, len(customers)-1, shape=len(customers))  # Index of the car for each customer
duration = IntVar(0, len(contract_lengths)-1, shape=len(customers))  # Index of the contract length for each customer

# Constraints
model = Model(
    AllDifferent(rental),
    AllDifferent(duration),
    rental[customers.index("Ann Alexander")] == cars.index("Fiat"),
    duration[customers.index("Ann Alexander")] == contract_lengths.index(4),
    rental[customers.index("Kathy Koch")] == cars.index("Fiat") | (duration[customers.index("Kathy Koch")] == contract_lengths.index(5)),
    duration[customers.index("Kathy Koch")] != contract_lengths.index(4),
    duration[customers.index("Irene Ingram")] != contract_lengths.index(3),
    rental[customers.index("Irene Ingram")] != rental[customers.index("Kathy Koch")],
    rental[customers.index("Irene Ingram")] != rental[customers.index("Ann Alexander")],
    duration[customers.index("Irene Ingram")] != duration[customers.index("Kathy Koch")],
    duration[customers.index("Irene Ingram")] != duration[customers.index("Ann Alexander")],
    rental[customers.index("Irene Ingram")] != cars.index("Fiat"),
    rental[customers.index("Kathy Koch")] != cars.index("Fiat"),
    rental[customers.index("Kia")] == cars.index("Kia"),
    rental[customers.index("Toyota")] == cars.index("Toyota"),
    duration[customers.index("Kia")] == duration[customers.index("Toyota")] - 1
)

# Solve
model.solve()
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections.
Yvonne has 20 fewer Facebook friends than Margie.
The four people are the one with 68 LinkedIn connections, Jonathan, Rosie and the person with 120 Facebook friends.
Rosie has 150 Facebook friends.

Entities:
Facebook: 120, 130, 140, 150
LinkedIn: 57, 68, 72, 84
names: Jonathan, Margie, Rosie, Yvonne
N/A
```python
from cpmpy import *

# Entities
facebook = IntVar(120, 150)
linkedin = IntVar(57, 84)
names = ["Jonathan", "Margie", "Rosie", "Yvonne"]

# Clues
clues = Model(
    # The person with 72 LinkedIn connections has 10 fewer Facebook friends than the person with 84 LinkedIn connections
    ((linkedin == 72) & (facebook == 84 - 10)) | ((linkedin == 84) & (facebook == 84)),

    # Yvonne has 20 fewer Facebook friends than Margie
    ((names.index("Yvonne") == names.index("Margie")) & (facebook == facebook + 20)),

    # The four people are the one with 68 LinkedIn connections, Jonathan, Rosie and the person with 120 Facebook friends
    ((linkedin == 68) | (names.index("Jonathan") == 0) | (names.index("Rosie") == 0) | (facebook == 120)),

    # Rosie has 150 Facebook friends
    ((names.index("Rosie") == 2) & (facebook == 150))
)

# Constraints
constraints = Model(
    AllDifferent([facebook, linkedin]),
    (names.index("Yvonne") == names.index("Margie") + 1)
)

# Final model
model = Model(clues, constraints)
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The photo taken in April was published by Wildzone.
The shot of the giant tortoise was taken 1 month before the photo published by Science World.
The photo of the orangutan was published by The Geographer.
The photo of the snow leopard was taken 2 months after the photo published by The Geographer.

Entities:
animals: giant tortoise, orangutan, snow leopard, tree kangaroo
months: March, April, May, June
magazines: Earth Aware, Science World, The Geographer, Wildzone
N/A
```python
from cpmpy import *

# Entities
animals = ["giant tortoise", "orangutan", "snow leopard", "tree kangaroo"]
months = ["March", "April", "May", "June"]
magazines = ["Earth Aware", "Science World", "The Geographer", "Wildzone"]

# Variables
photo_month = IntVar(1, 4, shape=len(animals))
photo_magazine = IntVar(1, 4, shape=len(animals))

# Constraints
model = Model(
    AllDifferent(photo_month),
    AllDifferent(photo_magazine),
    
    # Clues
    photo_magazine[months.index("April")] == magazines.index("Wildzone"),
    
    (photo_month[animals.index("giant tortoise")] == photo_month[animals.index("tree kangaroo")] - 1) |
    (photo_month[animals.index("giant tortoise")] == photo_month[animals.index("tree kangaroo")] + 1),
    
    photo_magazine[animals.index("orangutan")] == magazines.index("The Geographer"),
    
    (photo_month[animals.index("snow leopard")] == photo_month[animals.index("orangutan")] + 2)
)

# Solve
solution = model.solve()

if solution:
    for i, animal in enumerate(animals):
        print(f"The photo of {animal} was taken in {months[photo_month[i].value() - 1]} and published by {magazines[photo_magazine[i].value() - 1]}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am.
Jack's task is either the job that starts at 8:00am or the living room assignment.
Jack's job starts at 10:00am.
Kay's chore starts at 8:00am.
Jack's assignment starts 2 hours after the mud room assignment.
The laundry room assignment, the chore that starts at 8:00am and the chore that starts at 11:00am are all different jobs.

Entities:
children: Henrietta, Jack, Kay, Zachary
times: 8:00am, 9:00am, 10:00am, 11:00am
rooms: dining room, laundry room, living room, mud room
N/A
```python
from cpmpy import *

children = ["Henrietta", "Jack", "Kay", "Zachary"]
times = ["8:00am", "9:00am", "10:00am", "11:00am"]
rooms = ["dining room", "laundry room", "living room", "mud room"]

# Variables
henrietta_job = boolvar(shape=len(times))
jack_job = boolvar(shape=len(rooms))
kay_job = boolvar(shape=len(times))
zachary_job = boolvar(shape=len(rooms))

# Constraints
model = Model(
    # Henrietta's job is either the chore that starts at 9:00am or the chore that starts at 8:00am
    (henrietta_job[1] == 1) | (henrietta_job[0] == 1),
    
    # Jack's task is either the job that starts at 8:00am or the living room assignment
    (jack_job[0] == 1) | (jack_job[2] == 1),
    
    # Jack's job starts at 10:00am
    jack_job[2] == 1,
    
    # Kay's chore starts at 8:00am
    kay_job[0] == 1,
    
    # Jack's assignment starts 2 hours after the mud room assignment
    (jack_job[3] == 1) == (jack_job[2] == 1),
    
    # The laundry room assignment, the chore that starts at 8:00am and the chore that starts at 11:00am are all different jobs
    AllDifferent([zachary_job[1], kay_job[0], zachary_job[3]])
)

# Solve the model
solution = model.solve()

if solution:
    for i, child in enumerate(children):
        for j, time in enumerate(times):
            if eval(f"{child}_job[{j}]"):
                print(f"{child}'s job is the chore that starts at {time}")
    for i, child in enumerate(children):
        for j, room in enumerate(rooms):
            if eval(f"{child}_job[{j}]"):
                print(f"{child}'s job is in the {room}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Charlie is 9 years old.
Gracie has a wingspan of 114 inches.
The 11-year-old bird has a wingspan 8 inches shorter than Charlie.
Angel is either the 8-year-old bird or the bird with a wingspan of 114 inches.

Entities:
names: Angel, Charlie, Gracie, Merlin
wingspans: 102 inches, 106 inches, 110 inches, 114 inches
ages: 8, 9, 10, 11
N/A
```python
from cpmpy import *
from cpmpy.constraints import *

# Define entities
names = ["Angel", "Charlie", "Gracie", "Merlin"]
wingspans = [102, 106, 110, 114]
ages = [8, 9, 10, 11]

# Define variables
angel_name = intvar(0, 3)
charlie_name = intvar(0, 3)
gracie_name = intvar(0, 3)
merlin_name = intvar(0, 3)

angel_wingspan = intvar(0, 3)
charlie_wingspan = intvar(0, 3)
gracie_wingspan = intvar(0, 3)
merlin_wingspan = intvar(0, 3)

angel_age = intvar(0, 3)
charlie_age = intvar(0, 3)
gracie_age = intvar(0, 3)
merlin_age = intvar(0, 3)

# Define constraints
model = Model(
    AllDifferent([angel_name, charlie_name, gracie_name, merlin_name]),
    AllDifferent([angel_wingspan, charlie_wingspan, gracie_wingspan, merlin_wingspan]),
    AllDifferent([angel_age, charlie_age, gracie_age, merlin_age]),

    angel_name == 0,
    charlie_name == 1,
    gracie_name == 2,
    merlin_name == 3,

    angel_wingspan == 3,
    charlie_wingspan == 0,
    gracie_wingspan == 2,
    merlin_wingspan == 1,

    angel_age == 0 | angel_wingspan == 3,
    charlie_age == 1,
    gracie_age == 2,
    merlin_age == 3,

    charlie_age == 9,
    gracie_wingspan == 3,
    (merlin_age == 11) & (merlin_wingspan == charlie_wingspan - 8)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for name, wingspan, age in zip(names, wingspans, ages):
        print(f"{name}:")
        print(f"  Wingspan: {wingspan} inches")
        print(f"  Age: {age} years")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The TrustCo card has an APR of 11%.
The Southwest Inc card has a limit of $2,000.
The card with an APR of 11% is either the card with the $4,000 credit limit or the one with the $20,000 credit limit.
The card with an APR of 10% is either the card with the $4,000 credit limit or the TrustCo card.
The Credit Korp card has an APR 1 percent lower than the one with the $2,000 credit limit.

Entities:
credit cards: Credit Korp, Mid Atlantic, Southwest Inc, TrustCo
APR: 8%, 9%, 10%, 11%
credit limits: $2,000, $4,000, $5,000, $20,000
N/A
```python
from cpmpy import *

# Entities
cards = ["Credit Korp", "Mid Atlantic", "Southwest Inc", "TrustCo"]
aprs = [8, 9, 10, 11]
limits = [2000, 4000, 5000, 20000]

# Variables
card_apr = IntVar(cards)
card_limit = IntVar(cards)

# Constraints
model = Model(
    # Clues
    card_apr["TrustCo"] == 11,
    card_limit["Southwest Inc"] == 2000,
    ((card_apr["TrustCo"] == 11) & ((card_limit["TrustCo"] == 4000) | (card_limit["TrustCo"] == 20000))) |
    ((card_apr["TrustCo"] == 10) & ((card_limit["TrustCo"] == 4000) | (card_apr["TrustCo"] == 11))),
    card_apr["Credit Korp"] == card_apr["Southwest Inc"] - 1
)

# Solve the model
solution = model.solve()

if solution:
    for card in cards:
        print(f"{card}: APR {card_apr[card].value()}%, Limit ${card_limit[card].value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The title due on September 22 is either Rosa's book or "Dancing Well".
Ebony's book was due 1 week after Rosa's book.
Aimee's book was due on September 15.
Ebony's book was "Heaven's Seal".
"Heaven's Seal" was due 1 week after "Frogs of Iowa".

Entities:
borrowers: Aimee, Ebony, Jimmy, Rosa
due dates: September 1, September 8, September 15, September 22
titles: Dancing Well, Frogs of Iowa, Heaven's Seal, Time to Burn
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

borrowers = ["Aimee", "Ebony", "Jimmy", "Rosa"]
due_dates = ["September 1", "September 8", "September 15", "September 22"]
titles = ["Dancing Well", "Frogs of Iowa", "Heaven's Seal", "Time to Burn"]

# Variables
rosa_due = boolvar(shape=len(due_dates))
ebony_due = boolvar(shape=len(due_dates))
aimee_due = boolvar(shape=len(due_dates))
jimmy_due = boolvar(shape=len(due_dates))

rosa_book = boolvar(shape=len(titles))
ebony_book = boolvar(shape=len(titles))
heavens_seal = boolvar(shape=len(titles))
frogs_of_iowa = boolvar(shape=len(titles))

# Constraints
model = Model(
    # Each book is due on exactly one due date
    AllDifferent([rosa_due[i] for i in range(len(due_dates))]),
    AllDifferent([ebony_due[i] for i in range(len(due_dates))]),
    AllDifferent([aimee_due[i] for i in range(len(due_dates))]),
    AllDifferent([jimmy_due[i] for i in range(len(due_dates))]),

    # Each borrower has exactly one book
    AllDifferent([rosa_book[i] for i in range(len(titles))]),
    AllDifferent([ebony_book[i] for i in range(len(titles))]),
    AllDifferent([heavens_seal[i] for i in range(len(titles))]),
    AllDifferent([frogs_of_iowa[i] for i in range(len(titles))]),

    # Assign due dates to books
    (rosa_due[due_dates.index("September 22")] == rosa_book[titles.index("Dancing Well")) |
    (rosa_due[due_dates.index("September 22")] == rosa_book[titles.index("Frogs of Iowa")]),
    
    (ebony_due[due_dates.index("September 22")] == ebony_book[titles.index("Heaven's Seal")]),
    
    (aimee_due[due_dates.index("September 15")] == rosa_book[titles.index("Dancing Well")) |
    (aimee_due[due_dates.index("September 15")] == rosa_book[titles.index("Frogs of Iowa")]),
    
    (heavens_seal[titles.index("Heaven's Seal")] == frogs_of_iowa[titles.index("Frogs of Iowa")]),
    
    # Ebony's book was due 1 week after Rosa's book
    (ebony_due[due_dates.index("September 8")] == rosa_due[due_dates.index("September 1")]),
    
    # Heaven's Seal was due 1 week after Frogs of Iowa
    (heavens_seal[titles.index("Heaven's Seal")] == frogs_of_iowa[titles.index("Frogs of Iowa") + 1])
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The siren released in 1997 is 10 decibels louder than the siren released in 1996.
The siren released in 2009 is either the Armor-Stop or the Viking 5.
The siren released in 1997 is either the Soundarm or the Viking 5.
The Armor-Stop is louder than the siren released in 2009.
The Soundarm is 110 decibels loud.

Entities:
sirens: Armor-Stop, Rip Tide, Soundarm, Viking 5
decibels: 100 decibels, 105 decibels, 110 decibels, 115 decibels
years: 1996, 1997, 2000, 2009
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

sirens = ["Armor-Stop", "Rip Tide", "Soundarm", "Viking 5"]
decibels = [100, 105, 110, 115]
years = [1996, 1997, 2000, 2009]

siren_year = IntVar(1996, 2009, shape=len(sirens))
siren_decibel = IntVar(100, 115, shape=len(sirens))

model = Model(
    AllDifferent(siren_year),
    AllDifferent(siren_decibel),
    
    siren_year[sirens.index("Soundarm")] == 1997,
    siren_decibel[sirens.index("Soundarm")] == 110,
    
    siren_year[sirens.index("Armor-Stop")] > siren_year[sirens.index("Viking 5")],
    
    (siren_year[sirens.index("Viking 5")] == 2009) | (siren_year[sirens.index("Armor-Stop")] == 2009),
    
    (siren_year[sirens.index("Soundarm")] == 1997) | (siren_year[sirens.index("Viking 5")] == 1997),
    
    siren_decibel[sirens.index("Rip Tide")] == siren_decibel[sirens.index("Soundarm")] + 10
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Retrieve the solution
for siren in sirens:
    idx = sirens.index(siren)
    print(f"{siren} - Year: {siren_year[idx].value()} - Decibel: {siren_decibel[idx].value()}")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The one who had the cafe americano paid 1 dollar more than the one who had the cafe latte.
Hope paid $8.
Norman paid less than Opal.
The one who had the cafe americano paid less than Linda.
The one who had the cafe mocha paid 2 dollars more than Norman.

Entities:
names: Hope, Linda, Norman, Opal
prices: $5, $6, $7, $8
drinks: cafe americano, cafe latte, cafe mocha, espresso
N/A
```python
from cpmpy import *

# Define variables
names = ["Hope", "Linda", "Norman", "Opal"]
prices = [5, 6, 7, 8]
drinks = ["cafe americano", "cafe latte", "cafe mocha", "espresso"]

hope, linda, norman, opal = IntVar(0, 3, shape=4)
price_hope, price_linda, price_norman, price_opal = IntVar(0, 3, shape=4)
drink_hope, drink_linda, drink_norman, drink_opal = IntVar(0, 3, shape=4)

# Define constraints
model = Model(
    AllDifferent([hope, linda, norman, opal]),
    AllDifferent([price_hope, price_linda, price_norman, price_opal]),
    AllDifferent([drink_hope, drink_linda, drink_norman, drink_opal]),
    
    hope == names.index("Hope"),
    linda == names.index("Linda"),
    norman == names.index("Norman"),
    opal == names.index("Opal"),
    
    price_hope == 8,
    price_opal > price_norman,
    
    (drink_hope == 0) == (price_hope == 8),
    (drink_linda == 0) == (price_linda == 6),
    (drink_norman == 0) == (price_norman == 7),
    (drink_opal == 0) == (price_opal == 5),
    
    (drink_hope == 0) < (drink_linda == 0),
    (drink_hope == 0) < (drink_linda == 0),
    (drink_hope == 0) < (drink_linda == 0),
    (drink_hope == 0) < (drink_linda == 0),
    
    (drink_norman == 2) == (price_norman == 7),
)

# Solve the model
solution = model.solve()

if solution:
    for name in names:
        index = names.index(name)
        price = prices[solution.eval(price_vars[index])]
        drink = drinks[solution.eval(drink_vars[index])]
        print(f"{name} paid ${price} for {drink}.")
else:
    print("No solution found.")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The ring with the aquamarine cost less than the piece with the diamond.
Opal's ring is either the piece that cost $1300 or the piece with the diamond.
The piece that cost $1400 is either the ring with the ruby or Hazel's ring.
Hazel's ring has the diamond.
Becky's piece cost more than the ring with the diamond.

Entities:
customers: Becky, Hazel, Opal, Yolanda
prices: $1100, $1200, $1300, $1400
stones: aquamarine, diamond, ruby, topaz
N/A
```python
from cpmpy import *

# Entities
customers = ["Becky", "Hazel", "Opal", "Yolanda"]
prices = ["$1100", "$1200", "$1300", "$1400"]
stones = ["aquamarine", "diamond", "ruby", "topaz"]

# Variables
ring_stone = IntVar(0, len(stones)-1, shape=len(customers))
ring_price = IntVar(0, len(prices)-1, shape=len(customers))

# Constraints
model = Model(
    AllDifferent(ring_stone),
    AllDifferent(ring_price),
    
    ring_price[stones.index("aquamarine")] < ring_price[stones.index("diamond")],
    
    Xor(ring_price[stones.index("opal")] == prices.index("$1300"), ring_stone[stones.index("opal")] == stones.index("diamond")),
    
    Xor(ring_price[stones.index("ruby")] == prices.index("$1400"), ring_stone[stones.index("ruby")] == stones.index("hazel")),
    
    ring_stone[stones.index("hazel")] == stones.index("diamond"),
    
    ring_price[stones.index("diamond")] < ring_price[stones.index("becky")]
)

# Solve
solution = model.solve()

if solution:
    for i, customer in enumerate(customers):
        print(f"{customer}'s ring: {stones[ring_stone[i].value()]} with price {prices[ring_price[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The wood frog was bought 1 month after Nettie's pet.
Ollie's pet is the wood frog.
The tree frog was bought 2 months after Ollie's pet.
Joann's pet is either the wood frog or the tree frog.
Ida's pet is either the animal bought in April or the bullfrog.

Entities:
names: Ida, Joann, Nettie, Ollie
months: January, February, March, April
amphibians: bullfrog, horned toad, tree frog, wood frog
N/A
```python
from cpmpy import *

# Entities
names = ["Ida", "Joann", "Nettie", "Ollie"]
months = ["January", "February", "March", "April"]
amphibians = ["bullfrog", "horned toad", "tree frog", "wood frog"]

# Define variables
pet = intvar(0, 3, shape=len(names))  # 0: bullfrog, 1: horned toad, 2: tree frog, 3: wood frog
purchase_month = intvar(0, 3, shape=len(names))  # 0: January, 1: February, 2: March, 3: April

# Clues
model = Model(
    # The wood frog was bought 1 month after Nettie's pet
    (purchase_month[names.index("Nettie")] + 1 == purchase_month[names.index("Ollie")]) & (pet[names.index("Ollie")] == 3),
    
    # The tree frog was bought 2 months after Ollie's pet
    (purchase_month[names.index("Ollie")] + 2 == purchase_month[names.index("Joann")]) & (pet[names.index("Joann")] == 2),
    
    # Joann's pet is either the wood frog or the tree frog
    (pet[names.index("Joann")] == 2) | (pet[names.index("Joann")] == 3),
    
    # Ida's pet is either the animal bought in April or the bullfrog
    (pet[names.index("Ida")] == 0) | (purchase_month[names.index("Ida")] == 3)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for i, name in enumerate(names):
        print(f"{name}'s pet is the {amphibians[solution[pet[i]].value()]} bought in {months[solution[purchase_month[i]].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Winifred spoke for a somewhat shorter time than Omar.
Neal talked about Diocletian.
The four students were the presenter who spoke for 8 minutes, the student who gave the presentation on Galerius, Neal and Vickie.
The student who gave the presentation on Nero spoke 2 minutes more than Vickie.
Omar was either the presenter who gave the presentation on Nero or the presenter who spoke for 10 minutes.

Entities:
names: Neal, Omar, Vickie, Winifred
lengths: 6 minutes, 8 minutes, 10 minutes, 12 minutes
emperors: Diocletian, Galerius, Licinius, Nero
N/A
```python
from cpmpy import *

# Entities
names = ["Neal", "Omar", "Vickie", "Winifred"]
lengths = [6, 8, 10, 12]
emperors = ["Diocletian", "Galerius", "Licinius", "Nero"]

# Variables
presenter = IntVar(0, 3)  # 0: Neal, 1: Omar, 2: Vickie, 3: Winifred
time = IntVar(0, 3)  # 0: 6 minutes, 1: 8 minutes, 2: 10 minutes, 3: 12 minutes
presentation = IntVar(0, 3)  # 0: Diocletian, 1: Galerius, 2: Licinius, 3: Nero

# Constraints
constraints = [
    AllDifferent([presenter, time, presentation]),
    Winifred < Omar,
    Neal == presentation,
    (presenter == 1) | (presentation == 1) | (time == 1) | (presenter == 2) | (presenter == 3),
    (presentation == 3) == (time == 3 + 2),
    (presenter == 1) | (time == 2)
]

# Model
model = Model(constraints)

# Solve
solution = model.solve()

if solution:
    for i, name in enumerate(names):
        print(f"{name} - {lengths[time.value()]} minutes - {emperors[presentation.value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Rosa paid somewhat more than the customer who got picked up at the Smith Tower.
The client with the $9 fare was picked up at the Smith Tower.
Neil paid 3 dollars more than Rosa.
The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della.
The person with the $15 fare was picked up at the Neptune Theatre.

Entities:
customers: Della, Neil, Rosa, Sara
fares: $6, $9, $12, $15
pickup points: Arctic Building, Fremont Library, Neptune Theatre, Smith Tower
N/A
```python
from cpmpy import *

customers = ["Della", "Neil", "Rosa", "Sara"]
fares = ["$6", "$9", "$12", "$15"]
pickup_points = ["Arctic Building", "Fremont Library", "Neptune Theatre", "Smith Tower"]

# Define decision variables
customer_vars = IntVar(0, len(customers)-1, shape=len(customers))
fare_vars = IntVar(0, len(fares)-1, shape=len(fares))
pickup_vars = IntVar(0, len(pickup_points)-1, shape=len(pickup_points))

# Clues
model = Model(
    # Rosa paid somewhat more than the customer who got picked up at the Smith Tower
    (customer_vars["Rosa"] == pickup_vars["Smith Tower"]) & (fare_vars["Rosa"] > fare_vars[pickup_vars.index("Smith Tower")]),
    
    # The client with the $9 fare was picked up at the Smith Tower
    (fare_vars.index("$9") == fare_vars[pickup_vars.index("Smith Tower")]),
    
    # Neil paid 3 dollars more than Rosa
    (fare_vars["Neil"] == fare_vars["Rosa"] + 3),
    
    # The customer who got picked up at the Fremont Library was either the client with the $9 fare or Della
    (pickup_vars.index("Fremont Library") == pickup_vars.index("Smith Tower")) | (customer_vars.index("Della") == pickup_vars.index("Fremont Library")),
    
    # The person with the $15 fare was picked up at the Neptune Theatre
    (fare_vars.index("$15") == fare_vars[pickup_vars.index("Neptune Theatre")])
)

# Constraints
model += AllDifferent(customer_vars)
model += AllDifferent(fare_vars)
model += AllDifferent(pickup_vars)

# Solve the model
solution = model.solve()

if solution:
    for i, customer in enumerate(customers):
        print(f"{customer} - Fare: {fares[fare_vars[i].value()]} - Pickup Point: {pickup_points[pickup_vars[i].value()]}")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The facility scheduled to go online in 2019 is either the Egert Facility or the project headed by Dr. Alvarez.
The project headed by Dr. Morgan is either the Zynga Complex or the facility scheduled to go online in 2019.
The project headed by Dr. Salinas will go online 1 year before the Egert Facility.
The project headed by Dr. Alvarez will go online sometime after the project headed by Dr. Noble.
The project headed by Dr. Salinas will go online sometime before the project headed by Dr. Noble.
The project headed by Dr. Morgan will go online sometime after the Bale-Hahn SSC.

Entities:
names: Bale-Hahn SSC, Egert Facility, Lectra 4C, Zynga Complex
years: 2016, 2017, 2018, 2019
scientists: Dr. Alvarez, Dr. Morgan, Dr. Noble, Dr. Salinas
N/A
```python
from cpmpy import *

# Entities
names = ["Bale-Hahn SSC", "Egert Facility", "Lectra 4C", "Zynga Complex"]
years = [2016, 2017, 2018, 2019]
scientists = ["Dr. Alvarez", "Dr. Morgan", "Dr. Noble", "Dr. Salinas"]

# Variables
schedule = intvar(2016, 2019, shape=len(names))
head = intvar(0, len(scientists)-1, shape=len(names))

# Constraints
model = Model(
    AllDifferent(schedule),
    AllDifferent(head),
    
    (schedule[names.index("Egert Facility")] == 2019) | (schedule[names.index("Egert Facility")] == head[scientists.index("Dr. Salinas")] - 1),
    (schedule[names.index("Zynga Complex")] == head[scientists.index("Dr. Morgan")]) | (schedule[names.index("Zynga Complex")] == 2019),
    (head[scientists.index("Dr. Alvarez")] > head[scientists.index("Dr. Noble")]),
    (head[scientists.index("Dr. Salinas")] < head[scientists.index("Dr. Noble")]),
    (head[scientists.index("Dr. Morgan")] > schedule[names.index("Bale-Hahn SSC")])
)

# Solve
solution = model.solve()

# Print solution
if solution:
    for name, year, scientist in zip(names, schedule, scientists):
        print(f"{name} is scheduled to go online in {year} and is headed by {scientist}.")
else:
    print("No solution found.")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Lillian scored 6 points higher than Bessie.
The dancer who performed first scored 3 points lower than the dancer who performed ninth.
Verna scored somewhat higher than the person who danced third.
The dancer who performed seventh scored 6 points higher than the person who danced ninth.

Entities:
names: Bessie, Clara, Lillian, Verna
points: 181 points, 184 points, 187 points, 190 points
orders: first, third, seventh, ninth
N/A
```python
from cpmpy import *

# Entities
names = ["Bessie", "Clara", "Lillian", "Verna"]
points = [181, 184, 187, 190]
orders = ["first", "third", "seventh", "ninth"]

# Variables
bessie_points = intvar(181, 190)
clara_points = intvar(181, 190)
lillian_points = intvar(181, 190)
verna_points = intvar(181, 190)

first_points = intvar(181, 190)
third_points = intvar(181, 190)
seventh_points = intvar(181, 190)
ninth_points = intvar(181, 190)

# Constraints
constraints = [
    AllDifferent([bessie_points, clara_points, lillian_points, verna_points]),
    AllDifferent([first_points, third_points, seventh_points, ninth_points]),
    
    lillian_points == bessie_points + 6,
    first_points == ninth_points + 3,
    verna_points >= third_points,
    seventh_points == ninth_points + 6
]

model = Model(constraints)
```
bessie_points', 'third_points'], ['verna_points', 'ninth_points'], ['clara_points'], [], ['first_points'], [], ['lillian_points'], ['seventh_points']]
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Evan threw the orange darts.
The player who threw the violet darts scored 7 points higher than Ira.
Ira finished with 41 points.
The player who threw the white darts finished 14 points lower than Rudy.

Entities:
players: Evan, Ira, Rudy, Zachary
scores: 41, 48, 55, 62
colors: gray, orange, violet, white
N/A
```python
from cpmpy import *

players = ["Evan", "Ira", "Rudy", "Zachary"]
scores = [41, 48, 55, 62]
colors = ["gray", "orange", "violet", "white"]

# Variables
dart_color = intvar(0, 3, shape=len(players))
player_score = intvar(41, 62, shape=len(players))

# Constraints
model = Model(
    AllDifferent(dart_color),
    AllDifferent(player_score),
    
    dart_color[players.index("Evan")] == colors.index("orange"),
    player_score[players.index("Ira")] == 41,
    
    (player_score[players.index("violet")] == player_score[players.index("Ira")] + 7),
    (player_score[players.index("white")] == player_score[players.index("Rudy")] - 14)
)

# Solve and print solution
solution = model.solve()
if solution:
    for i, player in enumerate(players):
        print(f"{player} threw the {colors[dart_color[i].value()]} darts and scored {player_score[i].value()} points.")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The 200 page project is either the book published in 2011 or the book published in 2010.
The book published in 2011 is either Orlando's project or Jan's project.
The book published in 2007 is 25 pages shorter than the book published in 2002.
The four projects are the book published in 2007, the 225 page assignment, Suzanne's project and the 175 page assignment.
Jan's assignment is 175 pages long.

Entities:
translators: Ebony, Jan, Orlando, Suzanne
pages: 150 pages, 175 pages, 200 pages, 225 pages
years: 2002, 2007, 2010, 2011
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Entities
translators = ["Ebony", "Jan", "Orlando", "Suzanne"]
pages = [150, 175, 200, 225]
years = [2002, 2007, 2010, 2011]

# Variables
project = intvar(0, 3, shape=len(pages))
translator = intvar(0, 3, shape=len(pages))
year = intvar(0, 3, shape=len(pages))

# Constraints
model = Model(
    AllDifferent(project),
    AllDifferent(translator),
    AllDifferent(year),
    
    # The 200 page project is either the book published in 2011 or the book published in 2010
    Xor([year[i] == 2 for i in range(len(pages))]),
    Xor([year[i] == 3 for i in range(len(pages))]),
    
    # The book published in 2011 is either Orlando's project or Jan's project
    Xor([translator[i] == 2 and year[i] == 3 for i in range(len(pages))]),
    Xor([translator[i] == 1 and year[i] == 3 for i in range(len(pages))]),
    
    # The book published in 2007 is 25 pages shorter than the book published in 2002
    [(year[i] == 1) & (year[j] == 0) & (pages[j] == pages[i] + 25) for i in range(len(pages)) for j in range(len(pages))],
    
    # The four projects are the book published in 2007, the 225 page assignment, Suzanne's project and the 175 page assignment
    [(project[i] == 1) | (pages[i] == 225) | (translator[i] == 3) | (pages[i] == 175) for i in range(len(pages))],
    
    # Jan's assignment is 175 pages long
    [pages[i] == 175 for i in range(len(pages)) if translator[i] == 1]
)

# Solve and print solution
solver = CPM_ortools(model)
if solver.solve():
    for i in range(len(pages)):
        print(f"Project: {project[i].value()}, Translator: {translators[translator[i].value()]}, Pages: {pages[i]}, Year: {years[year[i].value()]}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car.
The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake.
The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake.
Mrs. Nolan's cake will be in the shape of a sports car.
The October 7 delivery will be in the shape of a bowling pin.

Entities:
customers: Danielson, Estrada, Ingram, Nolan
delivery dates: October 5, October 6, October 7, October 8
cake shapes: baseball glove, bowling pin, sports car, turtle
N/A
```python
from cpmpy import *

customers = ["Danielson", "Estrada", "Ingram", "Nolan"]
dates = ["October 5", "October 6", "October 7", "October 8"]
shapes = ["baseball glove", "bowling pin", "sports car", "turtle"]

# Variables
cake_delivery = intvar(5, 8, shape=(4,))
cake_shape = intvar(0, 3, shape=(4,))

# Constraints
model = Model(
    AllDifferent(cake_delivery),
    AllDifferent(cake_shape),
    
    # Mrs. Danielson's cake will be delivered 1 day before the order shaped like a sports car
    (cake_shape[customers.index("Danielson")] == shapes.index("sports car")) == (cake_delivery[customers.index("Danielson")] == cake_delivery[shapes.index("sports car")] - 1),
    
    # The order shaped like a turtle will be delivered 2 days before Mrs. Ingram's cake
    (cake_shape[customers.index("Ingram")] == shapes.index("turtle")) == (cake_delivery[customers.index("Ingram")] == cake_delivery[shapes.index("turtle")] + 2),
    
    # The cake shaped like a bowling pin is either the October 5 delivery or Mrs. Ingram's cake
    Xor(cake_delivery[shapes.index("bowling pin")] == dates.index("October 5"), cake_shape[customers.index("Ingram")] == shapes.index("bowling pin")),
    
    # Mrs. Nolan's cake will be in the shape of a sports car
    cake_shape[customers.index("Nolan")] == shapes.index("sports car"),
    
    # The October 7 delivery will be in the shape of a bowling pin
    cake_delivery[shapes.index("bowling pin")] == dates.index("October 7")
)

print(model)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of Ingram Arena and Noble Arena, one holds 150 people and the other is set up for rugby games.
The lacrosse facility holds 40 more people than Wilcox Arena.
Ingram Arena holds 230 people.
Wilcox Arena holds 80 fewer people than the soccer facility.

Entities:
arenas: Frederick, Ingram, Noble, Wilcox
capacities: 110, 150, 190, 230
sports: basketball, lacrosse, rugby, soccer
N/A
```python
from cpmpy import *

# Define entities
arenas = ["Frederick", "Ingram", "Noble", "Wilcox"]
capacities = [110, 150, 190, 230]
sports = ["basketball", "lacrosse", "rugby", "soccer"]

# Define variables
arena_capacities = intvar(110, 230, shape=len(arenas))

# Define constraints
model = Model(
    AllDifferent(arena_capacities),
    arena_capacities[arenas.index("Ingram")] == 230,
    arena_capacities[arenas.index("Noble")] != 230,
    Xor(arena_capacities[arenas.index("Ingram")] == 150, arena_capacities[arenas.index("Noble")] == 150),
    Xor(arena_capacities[arenas.index("Ingram")] == 190, arena_capacities[arenas.index("Noble")] == 190),
    Xor(arena_capacities[arenas.index("Ingram")] == 110, arena_capacities[arenas.index("Noble")] == 110),
    arena_capacities[arenas.index("Wilcox")] == arena_capacities[arenas.index("soccer")] - 80,
    arena_capacities[arenas.index("lacrosse")] == arena_capacities[arenas.index("Wilcox")] + 40
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    for arena, capacity in zip(arenas, arena_capacities):
        print(f"{arena} has a capacity of {capacity.value()}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The $35,000 structure is 15 sq ft smaller than the $29,000 home.
The Whitehead's structure sold for $29,000.
The Kirby's house is 15 sq ft smaller than the $35,000 house.
The $36,000 house is somewhat smaller than the Gillespie's structure.
Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies.

Entities:
customers: Gillespie, Kirby, Pratt, Whitehead
sq footage: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft
prices: $25,000, $29,000, $35,000, $36,000
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

customers = ["Gillespie", "Kirby", "Pratt", "Whitehead"]
sq_footage = [95, 110, 125, 140]
prices = [25000, 29000, 35000, 36000]

# Define decision variables
structure = intvar(0, 3, shape=len(customers))
sq_ft = intvar(0, 3, shape=len(sq_footage))
price = intvar(0, 3, shape=len(prices))

model = Model(
    # Clues
    price[0] == 29000,  # The Whitehead's structure sold for $29,000.
    sq_ft[0] == 1,  # The $35,000 structure is 15 sq ft smaller than the $29,000 home.
    sq_ft[1] == 0,  # The Kirby's house is 15 sq ft smaller than the $35,000 house.
    price[2] == 35000,  # Of the 110 sq ft home and the 140 sq ft home, one sold for $35,000 and the other is for the Gillespies.
    Xor([And(sq_ft[1] == 2, price[2] == 3), And(sq_ft[3] == 2, price[3] == 2)]),
    price[3] == 36000,  # The $36,000 house is somewhat smaller than the Gillespie's structure.
    price[1] < price[0],  # The $35,000 structure is 15 sq ft smaller than the $29,000 home.
    sq_ft[2] < sq_ft[0],  # The Kirby's house is 15 sq ft smaller than the $35,000 house.
    sq_ft[3] < sq_ft[0],  # The $36,000 house is somewhat smaller than the Gillespie's structure.
    
    # Constraints
    AllDifferent(structure),
    AllDifferent(sq_ft),
    AllDifferent(price)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

if solution:
    for i, customer in enumerate(customers):
        print(f"{customer}'s structure: {sq_footage[sq_ft[i].value()]} sq ft, ${prices[price[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Nielsen's house is 30 sq ft larger than the $35,000 structure.
The 125 sq ft home is either the Whitehead's home or the $32,250 home.
The Whitehead's house sold for $29,000.
The Ewing's home sold for $32,250.
The $29,000 house is somewhat smaller than the $32,250 structure.

Entities:
customers: Ewing, Kirby, Nielsen, Whitehead
sq footage: 95 sq ft, 110 sq ft, 125 sq ft, 140 sq ft
prices: $27,500, $29,000, $32,250, $35,000
N/A
```python
from cpmpy import *

customers = ["Ewing", "Kirby", "Nielsen", "Whitehead"]
sq_footage = [95, 110, 125, 140]
prices = [27500, 29000, 32250, 35000]

# Define variables
Ewing_sq_ft = IntVar(sq_footage)
Ewing_price = IntVar(prices)
Kirby_sq_ft = IntVar(sq_footage)
Kirby_price = IntVar(prices)
Nielsen_sq_ft = IntVar(sq_footage)
Nielsen_price = IntVar(prices)
Whitehead_sq_ft = IntVar(sq_footage)
Whitehead_price = IntVar(prices)

# Constraints
model = Model(
    Nielsen_sq_ft == 30 + 35000,
    (Whitehead_sq_ft == 125) | (Whitehead_price == 32250),
    Whitehead_price == 29000,
    Ewing_price == 32250,
    (Ewing_price == 29000) < (Whitehead_price == 32250)
)

# Additional constraints
model += AllDifferent([Ewing_sq_ft, Kirby_sq_ft, Nielsen_sq_ft, Whitehead_sq_ft])
model += AllDifferent([Ewing_price, Kirby_price, Nielsen_price, Whitehead_price])

# Solve the model
solution = model.solve()

if solution:
    print("Solution found:")
    print("Ewing: sq ft =", Ewing_sq_ft.value(), "price =", Ewing_price.value())
    print("Kirby: sq ft =", Kirby_sq_ft.value(), "price =", Kirby_price.value())
    print("Nielsen: sq ft =", Nielsen_sq_ft.value(), "price =", Nielsen_price.value())
    print("Whitehead: sq ft =", Whitehead_sq_ft.value(), "price =", Whitehead_price.value())
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Paulette's pair was a size 7.
Estelle's pair was by Cormano.
The Manzarita footwear was either the size 4 set or Whitney's pair.
Of Lucia's pair and the Schtillet footwear, one was a size 7 and the other was a size 6.

Entities:
customers: Estelle, Lucia, Paulette, Whitney
shoe sizes: 4, 5, 6, 7
brands: Cormano, Manzarita, Schtillet, Williford
N/A
```python
from cpmpy import *

customers = ["Estelle", "Lucia", "Paulette", "Whitney"]
shoe_sizes = [4, 5, 6, 7]
brands = ["Cormano", "Manzarita", "Schtillet", "Williford"]

# Variables
pair_sizes = IntVar(1, 4, shape=len(customers))  # 1: size 4, 2: size 5, 3: size 6, 4: size 7
pair_brands = IntVar(1, 4, shape=len(customers))  # 1: Cormano, 2: Manzarita, 3: Schtillet, 4: Williford

# Constraints
model = Model(
    AllDifferent(pair_sizes),
    AllDifferent(pair_brands),
    pair_sizes[customers.index("Paulette")] == 4,  # Paulette's pair was a size 7
    pair_brands[customers.index("Estelle")] == 1,  # Estelle's pair was by Cormano
    Xor(pair_sizes[customers.index("Lucia")] == 3, pair_sizes[customers.index("Schtillet")] == 3),  # One was size 7 and the other was size 6
    Xor(pair_sizes[customers.index("Lucia")] == 4, pair_sizes[customers.index("Schtillet")] == 4),
    Xor(pair_brands[customers.index("Lucia")] == 3, pair_brands[customers.index("Schtillet")] == 3),  # One was size 7 and the other was size 6
    Xor(pair_brands[customers.index("Lucia")] == 4, pair_brands[customers.index("Schtillet")] == 4),
    Xor(pair_sizes[brands.index("Manzarita")] == 1, pair_sizes[customers.index("Whitney")] == 1)  # Manzarita footwear was size 4 or Whitney's pair
)

# Solve
solution = model.solve()

if solution:
    for i, customer in enumerate(customers):
        print(f"{customer}: Size {pair_sizes[i].value()} - Brand {brands[pair_brands[i].value()-1]}")
else:
    print("No solution found.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The project on the Serenity starts 1 month after Stacy's project.
Darryl's project starts 1 month after Gene's assignment.
The study beginning in April is either the study on the Liberty or the project on the Pegasus.
Lauren's project is on the Pegasus.

Entities:
students: Darryl, Gene, Lauren, Stacy
months: March, April, May, June
ships: Liberty, Osprey, Pegasus, Serenity
N/A
```python
from cpmpy import *

# Define variables
students = ["Darryl", "Gene", "Lauren", "Stacy"]
months = ["March", "April", "May", "June"]
ships = ["Liberty", "Osprey", "Pegasus", "Serenity"]

project_starts = IntVar(1, 4, shape=len(students))
study_begins = IntVar(1, 4, shape=len(students))

# Define constraints
model = Model(
    AllDifferent(project_starts),
    AllDifferent(study_begins),
    
    # The project on the Serenity starts 1 month after Stacy's project
    (project_starts[students.index("Serenity")] == project_starts[students.index("Stacy")] + 1),
    
    # Darryl's project starts 1 month after Gene's assignment
    (project_starts[students.index("Darryl")] == project_starts[students.index("Gene")] + 1),
    
    # The study beginning in April is either the study on the Liberty or the project on the Pegasus
    Xor([study_begins[i] == months.index("April") for i in range(len(students))]),
    Xor([study_begins[i] == ships.index("Liberty") or study_begins[i] == ships.index("Pegasus") for i in range(len(students)]),
    
    # Lauren's project is on the Pegasus
    (project_starts[students.index("Lauren")] == ships.index("Pegasus"))
)

# Solve the model
solution = model.solve()

if solution:
    for student in students:
        print(f"{student}'s project starts in {months[project_starts[students.index(student)].value()]} on the {ships[project_starts[students.index(student)].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Zimmerman is from the Wolverines.
The person from the Ice Hogs scored 1 goal less than the player from the Wolverines.
Klein had 9 goals this season.
The player from the Checkers scored 1 goal more than Walls.

Entities:
players: Klein, Underwood, Walls, Zimmerman
goals: 6, 7, 8, 9
teams: Checkers, Comets, Ice Hogs, Wolverines
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define entities
players = ["Klein", "Underwood", "Walls", "Zimmerman"]
goals = [6, 7, 8, 9]
teams = ["Checkers", "Comets", "Ice Hogs", "Wolverines"]

# Define variables
player_team = intvar(0, 3, shape=len(players))
player_goals = intvar(6, 9, shape=len(players))

# Define constraints
model = Model(
    AllDifferent(player_team),
    AllDifferent(player_goals),
    
    player_goals[players.index("Klein")] == 9,
    
    player_goals[players.index("Walls")] + 1 == player_goals[players.index("Checkers")],
    
    player_team[players.index("Zimmerman")] == teams.index("Wolverines"),
    
    (player_team[players.index("Ice Hogs")] == teams.index("Ice Hogs")) & 
    (player_goals[players.index("Ice Hogs")] == player_goals[players.index("Wolverines")] - 1)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the results
for player in players:
    idx = players.index(player)
    print(f"{player} plays for {teams[player_team[idx].value()]} and scored {player_goals[idx].value()} goals.")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw.
The macaw was bought 2 months before Ellen's pet.
The parakeet was bought 1 month after the finch.
Alberta's pet was bought 1 month before Gladys's pet.
The finch was bought sometime after the lovebird.

Entities:
names: Alberta, Della, Ellen, Gladys
months: January, February, March, April
birds: finch, lovebird, macaw, parakeet
N/A
```python
from cpmpy import *

# Define entities
names = ["Alberta", "Della", "Ellen", "Gladys"]
months = ["January", "February", "March", "April"]
birds = ["finch", "lovebird", "macaw", "parakeet"]

# Define decision variables
bird_month = intvar(1, 4, shape=len(birds), name="bird_month")
bird_owner = intvar(0, 3, shape=len(birds), name="bird_owner")

# Clues
model = Model(
    # Of the bird bought in February and the bird bought in January, one is Gladys's and the other is the macaw
    ((bird_month[birds.index("macaw")] == months.index("February")) | (bird_month[birds.index("macaw")] == months.index("January"))) &
    ((bird_month[birds.index("macaw")] == months.index("February")) != (bird_month[birds.index("January")] == months.index("February"))) &
    ((bird_owner[birds.index("macaw")] == names.index("Gladys")) != (bird_owner[birds.index("macaw")] == birds.index("macaw"))) &
    ((bird_owner[birds.index("macaw")] == names.index("Gladys")) != (bird_owner[birds.index("January")] == birds.index("macaw"))),

    # The macaw was bought 2 months before Ellen's pet
    (bird_month[birds.index("macaw")] + 2 == bird_month[birds.index("Ellen's pet")]),

    # The parakeet was bought 1 month after the finch
    (bird_month[birds.index("parakeet")] == bird_month[birds.index("finch")] + 1),

    # Alberta's pet was bought 1 month before Gladys's pet
    (bird_month[birds.index("Alberta's pet")] == bird_month[birds.index("Gladys's pet")] - 1),

    # The finch was bought sometime after the lovebird
    (bird_month[birds.index("finch")] > bird_month[birds.index("lovebird")])
)

# Constraints
model += AllDifferent(bird_month)
model += AllDifferent(bird_owner)

# Solve the model
solution = model.solve()

if solution:
    for i, bird in enumerate(birds):
        print(f"{bird} was bought in {months[bird_month[i].value()]} and belongs to {names[bird_owner[i].value()]}")
else:
    print("No solution found")
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The Tevatron LHC is either the facility scheduled to go online in 2019 or the accelerator scheduled to go online in 2016.
Of the project headed by Dr. Baldwin and the project headed by Dr. Quinn, one is the Falston LCS and the other will go online in 2017.
The project headed by Dr. Ewing will go online sometime before the Zynga Complex.
Of the project headed by Dr. Ewing and the facility scheduled to go online in 2018, one is the Egert Facility and the other is the Tevatron LHC.
The Zynga Complex is headed by Dr. Baldwin.

Entities:
names: Egert Facility, Falston LCS, Tevatron LHC, Zynga Complex
years: 2016, 2017, 2018, 2019
scientists: Dr. Baldwin, Dr. Ewing, Dr. Kirk, Dr. Quinn
N/A
```python
from cpmpy import *

# Entities
names = ["Egert Facility", "Falston LCS", "Tevatron LHC", "Zynga Complex"]
years = [2016, 2017, 2018, 2019]
scientists = ["Dr. Baldwin", "Dr. Ewing", "Dr. Kirk", "Dr. Quinn"]

# Variables
tevatron_year = intvar(2016, 2019)
falston_year = intvar(2016, 2019)
ewing_year = intvar(2016, 2019)
zynga_year = intvar(2016, 2019)

# Constraints
model = Model(
    AllDifferent([tevatron_year, falston_year, ewing_year, zynga_year]),
    (tevatron_year == 2019) | (tevatron_year == 2016),
    (falston_year == 2017) | (falston_year == 2016),
    (zynga_year == 2018),
    (ewing_year < zynga_year),
    (ewing_year == 2018) | (tevatron_year == 2018),
    (zynga_year == 2018),
    (zynga_year == 2018).implies(tevatron_year == 2018),
    (scientists.index("Dr. Baldwin") == names.index("Zynga Complex")),
    (scientists.index("Dr. Baldwin") == names.index("Tevatron LHC")),
    (scientists.index("Dr. Ewing") == names.index("Egert Facility")),
    (scientists.index("Dr. Quinn") == names.index("Falston LCS"))
)

# Solve and print solution
solution = model.solve()
if solution:
    for name, year, scientist in zip(names, [tevatron_year, falston_year, ewing_year, zynga_year], scientists):
        print(f"{name} - Year: {year.value()} - Scientist: {scientist}")
else:
    print("No solution found")
```
None
False
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
The 2004 holiday is either the skydiving holiday or the holiday with Yvonne.
Of the kayaking holiday and the trip with Isabel, one was in 2001 and the other was in 2004.
The vacation with Andy was after the trip with Yvonne.
The holiday with Bill was 1 year after the trip with Andy.
The cycling trip was before the hunting vacation.

Entities:
friends: Andy, Bill, Isabel, Yvonne
years: 2001, 2002, 2003, 2004
activities: cycling, hunting, kayaking, skydiving
N/A
```python
from cpmpy import *

friends = ["Andy", "Bill", "Isabel", "Yvonne"]
years = [2001, 2002, 2003, 2004]
activities = ["cycling", "hunting", "kayaking", "skydiving"]

# Define decision variables
holiday = intvar(2001, 2004, shape=len(friends))
activity = stringvar(activities, shape=len(friends))

# Clues
model = Model(
    AllDifferent(holiday),
    AllDifferent(activity),
    
    (holiday == 2004) == (activity == "skydiving" | activity == "Yvonne"),
    
    ((activity == "kayaking") == (holiday == 2001)) & ((activity == "trip with Isabel") == (holiday == 2004)),
    
    (activity == "cycling").implies(activity.index("cycling") < activity.index("hunting")),
    
    (activity == "trip with Andy").implies(holiday.index("Andy") < holiday.index("Yvonne")),
    
    (activity == "trip with Bill").implies(holiday.index("Bill") == holiday.index("Andy") + 1)
)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Clues:
Ginger was either the person who paid $160 or Vicki's client.
Beulah paid 10 dollars more than Yvonne's client.
Hannah paid less than Debra.
Vicki's client paid more than Debra.
Debra paid less than Pam's client.

Entities:
clients: Beulah, Debra, Ginger, Hannah
prices: $150, $160, $170, $180
masseuses: Lynda, Pam, Vicki, Yvonne
N/A
```python
from cpmpy import *

clients = ["Beulah", "Debra", "Ginger", "Hannah"]
prices = [150, 160, 170, 180]
masseuses = ["Lynda", "Pam", "Vicki", "Yvonne"]

client = IntVar(0, len(clients)-1, shape=len(masseuses))
price = IntVar(0, len(prices)-1, shape=len(masseuses))

model = Model(
    AllDifferent(client),
    AllDifferent(price),
    
    # Ginger was either the person who paid $160 or Vicki's client
    Xor([client[i] == clients.index("Ginger") for i in range(len(masseuses))]),
    Xor([price[i] == prices.index(160) for i in range(len(masseuses))]),
    Xor([client[i] == clients.index("Vicki") for i in range(len(masseuses))]),
    
    # Beulah paid 10 dollars more than Yvonne's client
    (price[client.index(clients.index("Beulah"))] == price[client.index(clients.index("Yvonne"))] + 1),
    
    # Hannah paid less than Debra
    price[client.index(clients.index("Hannah"))] < price[client.index(clients.index("Debra"))],
    
    # Vicki's client paid more than Debra
    price[client.index(clients.index("Vicki"))] > price[client.index(clients.index("Debra"))],
    
    # Debra paid less than Pam's client
    price[client.index(clients.index("Debra"))] < price[client.index(clients.index("Pam"))]
)
```
None
Error when trying to check solution from predicted model: invalid syntax (<string>, line 1)
False
False
Error in constraint evaluation: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

