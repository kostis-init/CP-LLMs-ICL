Solution accuracy: 2.422145328719722%
Constraint accuracy: 0.0%
Model accuracy: 0.0%

Wrong solutions: 7, error solutions: 275
Wrong constraints: 0, error constraints: 1132, total: 1132
Wrong models: 286, error models: 3
---------------------------------------------------------------------------------------------

A fishery wants to transport their catch. They can either use local sled dogs or trucks. Local sled dogs can take 100 fish per trip while trucks can take 300 fish per trip. The cost per trip for sled dogs is $50 while the cost per trip for a truck is $100. The budget is at most $1000 and the number of sled dog trips must be less than the number of truck trips. Formulate an LP to maximize the number of fish that can be transported.
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
num_sled_dog_trips = intvar(0, 10)  # Number of sled dog trips
num_truck_trips = intvar(0, 10)  # Number of truck trips

# Define the objective function to maximize the number of fish transported
total_fish_transported = 100*num_sled_dog_trips + 300*num_truck_trips

# Define the constraints
cost_sled_dog_trips = 50*num_sled_dog_trips  # Cost of sled dog trips
cost_truck_trips = 100*num_truck_trips  # Cost of truck trips
total_cost = cost_sled_dog_trips + cost_truck_trips

# Budget constraint
budget_constraint = total_cost <= 1000

# Number of sled dog trips must be less than the number of truck trips
num_sled_dog_trips_less_than_truck_trips = num_sled_dog_trips < num_truck_trips

# Define the problem
problem = Model(
    maximize(total_fish_transported),
    [budget_constraint, num_sled_dog_trips_less_than_truck_trips]
)

# Solve the problem
cpmpy.solvers.cplex(problem)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An office supply company makes two types of printers: color printers and black and white printers. Different sections of the factory with different teams produce each printer. The color printer team can produce at most 20 color printers per day while the black and white printer team can produce at most 30 black and white printers per day. Both teams require use of the same paper tray installing machine and this machine can make at most 35 printers of either type each day. Color printers generate a profit of $200 per printer while black and white printers generate a profit of $70 per printer. How many of each printer should be made to maximize the company's profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
color_printers = intvar(0, 20)
bw_printers = intvar(0, 30)

# Define the constraint that the total number of printers produced should not exceed the capacity of the paper tray installing machine
constraint_total_printers = color_printers + bw_printers <= 35

# Define the constraint that the profit generated should be maximized
profit = 200*color_printers + 70*bw_printers

# Define the model
model = Model(
    constraint_total_printers,
    maximize(profit)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of color printers to be made: {color_printers.value()}")
    print(f"Number of black and white printers to be made: {bw_printers.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An accounting firm has senior accountants earning $3000 per week and junior accountants earning $1000 per week. The contracts with companies to provide accounting services require at least 100 accountants, of whom at least 5 must be senior accountants. To make sure there is enough experience on the accounting team, the number of senior accountants should be at least a third of the number to junior accountants. The firm wants to keep the weekly wage bill below $150000. Formulate an LP to minimize the wage bill.
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define variables
senior_accountants = intvar(0, 100, name="senior_accountants")
junior_accountants = intvar(0, 100, name="junior_accountants")

# Define constraints
at_least_100_accountants = senior_accountants + junior_accountants >= 100
at_least_5_senior_accountants = senior_accountants >= 5
senior_to_junior_ratio = senior_accountants >= junior_accountants / 3
weekly_wage_limit = 3000*senior_accountants + 1000*junior_accountants <= 150000

# Define objective
total_wage = 3000*senior_accountants + 1000*junior_accountants
minimize(total_wage)

# Solve the problem
model = Model(at_least_100_accountants, at_least_5_senior_accountants, senior_to_junior_ratio, weekly_wage_limit, total_wage)
cpmpy.solvers.cplex(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Ben is growing apples and pears on his orchard. He has 50 acres available on which he must grow a minimum of 5 acres of apples and a minimum of 10 acres of pears to meet demands. The profit per apple is $2 and the profit per pear is $4. He prefers to grow more pears than apples but limitations in his workforce allow him to grow at most twice the amount of pears as apples. How many of each fruit should Ben grow in order to maximize his profit? What is that profit?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the model
model = cp.CpModel()

# Decision variables
apples = intvar(0, 50, name="apples")
pears = intvar(0, 50, name="pears")

# Constraints
model += apples >= 5
model += pears >= 10
model += apples + pears <= 50
model += pears <= 2 * apples

# Objective function
profit = 2 * apples + 4 * pears
model += maximize(profit)

# Solve the model
status = model.solve()

if status:
    # Get the optimal values
    optimal_apples = apples.value()
    optimal_pears = pears.value()
    optimal_profit = profit.value()

    print("Optimal number of apples:", optimal_apples)
    print("Optimal number of pears:", optimal_pears)
    print("Maximum profit:", optimal_profit)
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A lighting company makes desk-lamps and night-lamps. There is an expected demand of at least 30 desk-lamps and 50 night-lamps each day. However, due to the size of their factory, they can make at most 150 desk-lamps and 180 night-lamps per day. To satisfy a contract, a minimum of 100 lamps must be made each day. If the profit per desk-lamp sold is $5 and the profit per night-lamp sold is $8, how many lamps of each type should be made to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
desk_lamps = intvar(30, 150, name="desk_lamps")
night_lamps = intvar(50, 180, name="night_lamps")

# Define the objective function to maximize profit
profit_desk_lamps = 5 * desk_lamps
profit_night_lamps = 8 * night_lamps
total_profit = profit_desk_lamps + profit_night_lamps

# Define constraints
at_least_desk_lamps = desk_lamps >= 30
at_least_night_lamps = night_lamps >= 50
total_lamps = desk_lamps + night_lamps >= 100

# Create the CP model
model = Model(
    at_least_desk_lamps,
    at_least_night_lamps,
    total_lamps,
    total_profit
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of desk-lamps to be made: {desk_lamps.value()}")
    print(f"Number of night-lamps to be made: {night_lamps.value()}")
    print(f"Maximum profit: ${total_profit.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Mr. Roberts want to invest in the telecom and healthcare industries. He has $100000 to invest. He has decided that the amount invested in telecom be at least three times as much as the amount invested in healthcare. But the money invested in telecom must be at most $70000. If investments in telecom earn 3% and investments in healthcare earn 1%, how much should Mr. Roberts invest in each to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
telecom = intvar(0, 70000)  # amount invested in telecom
healthcare = intvar(0, 33333)  # amount invested in healthcare (at least 1/3 of telecom)

# Define the total investment constraint
total_investment = telecom + healthcare == 100000

# Define the profit constraint
profit = 0.03 * telecom + 0.01 * healthcare

# Define the problem
model = Model(
    total_investment,
    profit
)

# Solve the problem
minimize(
    -profit,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer has 140 hectares available to grow tomatoes and potatoes. She prefers to plant more tomatoes than potatoes, but the soil and weather conditions allow her to grow at most twice the amount of tomatoes to that of potatoes. In addition, she must grow at least 20 hectares of tomatoes and at least 30 hectares of potatoes to meet community demands. If the profit per hectare of tomatoes is $350 and the profit per hectare of potatoes is $600, how many hectares of each crop should she plant to maximize profit? What is this profit?
N/A
```python
from cpmpy import *

# Define decision variables
tomatoes = intvar(20, 100, name="tomatoes")
potatoes = intvar(30, 70, name="potatoes")

# Define the objective function to maximize profit
profit = 350*tomatoes + 600*potatoes

# Define the constraints
problem = Model(
    tomatoes + potatoes <= 140,  # Total available hectares
    tomatoes <= 2*potatoes,  # Tomatoes should be at most twice the amount of potatoes
)

# Additional constraints to meet community demands
problem += tomatoes >= 20
problem += potatoes >= 30

# Define the objective
problem += maximize(profit)

# Solve the problem
solution = CPM_ortools(problem)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A audio company make two types of headphones: wired headphones and wireless headphones. Two different teams make each type of headphones. The wired team can make at most 100 wired headphones per day and the wireless team can make at most 170 wireless headphones per day. Both teams require use of a shared audio testing machine, and this machine can be used to make a maximum of 150 headphones per day. The profit per wired headphone is $50 and the profit per wireless headphone $20. How many of each headphone should be made to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
wired_headphones = intvar(0, 100)
wireless_headphones = intvar(0, 170)

# Define the constraints
model = Model([
    wired_headphones <= 100,
    wireless_headphones <= 170,
    wired_headphones + wireless_headphones <= 150
])

# Define the objective function
profit = 50*wired_headphones + 20*wireless_headphones
model.maximize(profit)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of wired headphones: {wired_headphones.value()}")
    print(f"Optimal number of wireless headphones: {wireless_headphones.value()}")
    print(f"Maximum profit: ${profit.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Jacob has $3000 to invest. He has decided to invest in his favorite clothing company and his favorite tech company. He has decided that the money invested in his favorite clothing company must be at least four times as much as the amount invested in his favorite tech company. He has also limited himself to invest at most $500 in his favorite tech company. If the money invested in his favorite clothing company earns 7% and the money invested in his favorite tech company earns 10%, how much should he invest in each to maximize his profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
clothing_investment = intvar(0, 3000)
tech_investment = intvar(0, 500)

# Define the problem
model = Model(
    clothing_investment >= 4 * tech_investment,  # The money invested in clothing company must be at least four times as much as in tech company
    clothing_investment + tech_investment <= 3000,  # Total investment should not exceed $3000
    tech_investment <= 500  # Investment in tech company should not exceed $500
)

# Define the objective function to maximize profit
profit = 0.07 * clothing_investment + 0.10 * tech_investment
model.maximize(profit)

# Solve the problem
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_clothing_investment = clothing_investment.value()
optimal_tech_investment = tech_investment.value()

print("Optimal investment in clothing company: $", optimal_clothing_investment)
print("Optimal investment in tech company: $", optimal_tech_investment)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Each month a store owner can spend at most $500 on carrots and cucumbers. A carrot costs the store owner $0.30 and a cucumber costs the store owner $0.50. Each carrot is sold for a profit of $0.75 and each cucumber is sold for a profit of $0.80. The owner estimates that the number of cucumbers sold is at most a third of the number of carrots sold. He also estimates that at least 300 carrots but at most 500 carrots are sold each month. How many of each, carrots and cucumbers, should be sold in order to maximize the profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_carrots = intvar(300, 500, name="num_carrots")
num_cucumbers = intvar(0, 166, name="num_cucumbers")  # At most a third of the number of carrots

# Define the constraints
cost_constraint = 0.30*num_carrots + 0.50*num_cucumbers <= 500
profit_constraint = 0.75*num_carrots + 0.80*num_cucumbers

# Define the objective
maximize(profit_constraint)

# Solve the problem
model = Model(cost_constraint, profit_constraint)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of carrots to be sold: {num_carrots.value()}")
    print(f"Number of cucumbers to be sold: {num_cucumbers.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer wants to manufacture a special plant nutrition using fertilizers A and B. Each kg of fertilizer A contains 13 units of nitrogen, 5 units of phosphoric acid, 6 units of vitamin A and 5 units of vitamin D. Each kg of fertilizer B contains 8 units of nitrogen, 14 units of phosphoric acid, 6 units of vitamin A and 9 units of vitamin D. To be effective, the plant nutrition requires a minimum 220 units of nitrogen, a minimum of 160 units of phosphoric acid, and no more than 350 units of vitamin A. How many kg of each fertilizer should be used to minimize the amount of vitamin D in the nutrition? What is the minimum amount of vitamin D?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
kg_A = intvar(0, 100, shape=1)
kg_B = intvar(0, 100, shape=1)

# Define the constraints
nitrogen_constraint = 13*kg_A + 8*kg_B >= 220
phosphoric_acid_constraint = 5*kg_A + 14*kg_B >= 160
vitamin_A_constraint = 6*kg_A + 6*kg_B <= 350

# Define the objective function to minimize the amount of vitamin D
vitamin_D = 5*kg_A + 9*kg_B

# Define the model
model = Model(minimize=vitamin_D, constraints=[nitrogen_constraint, phosphoric_acid_constraint, vitamin_A_constraint])

# Solve the model
solution = model.solve()

# Output the results
if solution:
    print("Minimum amount of vitamin D:", vitamin_D.value())
    print("kg of fertilizer A:", kg_A.value())
    print("kg of fertilizer B:", kg_B.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Mrs. Watson wants to invest in the real-estate market and has a total budget of at most $760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a $0.50 profit and each dollar invested in detached houses yields a $1 profit. A minimum of 20% of all money invested must be in condos, and at least $20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
condos_investment = intvar(0, 760000, name="condos_investment")
houses_investment = intvar(0, 760000, name="houses_investment")

# Define the problem
model = Model(
    # Objective function to maximize total profit
    maximize(0.5 * condos_investment + houses_investment),

    # Total budget constraint
    condos_investment + houses_investment <= 760000,

    # Minimum 20% of total investment in condos
    condos_investment >= 0.2 * (condos_investment + houses_investment),

    # At least $20000 investment in detached houses
    houses_investment >= 20000
)

# Solve the problem
solver = CPM_ortools(model)
solver.solve()

# Print the optimal values
print("Optimal investment in condos:", condos_investment.value())
print("Optimal investment in detached houses:", houses_investment.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of $3 per regular sandwich and a profit of $4 per special sandwich. How many of each sandwich should be made to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
regular_sandwiches = intvar(0, 100, shape=1)
special_sandwiches = intvar(0, 100, shape=1)

# Define the constraints
problem = Model(
    regular_sandwiches*2 + special_sandwiches*3 <= 40,  # Eggs constraint
    regular_sandwiches*3 + special_sandwiches*5 <= 70   # Bacon constraint
)

# Define the objective function
profit = regular_sandwiches*3 + special_sandwiches*4

# Solve the problem
minimize(profit, solver=CPM_ortools())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A cleaning company located in Edmonton wants to get the best exposure possible for promoting their new dishwashing detergent without exceeding their $250,000 advertising budget. To do so, the company decides to spend their money on two forms of advertising: (1) radio ads and (2) social media ads. Each radio ad costs $5,000; each social media ad costs $9,150. The expected exposure, based on industry ratings, is 60,500 viewers for each radio ad. Additionally, the expected exposure for each social media ad is 50,000 viewers. The company decides that at least 15 but no more than 40 radio ads should be ordered, and that at least 35 social media ads should be contracted. How many ads of each type should be run to obtain maximum exposure while staying within the budget?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Parameters
radio_ad_cost = 5000
social_media_ad_cost = 9150
radio_ad_exposure = 60500
social_media_ad_exposure = 50000
budget = 250000
min_radio_ads = 15
max_radio_ads = 40
min_social_media_ads = 35

# Decision variables
num_radio_ads = intvar(min_radio_ads, max_radio_ads, name="num_radio_ads")
num_social_media_ads = intvar(min_social_media_ads, budget//social_media_ad_cost, name="num_social_media_ads")

# Constraints
total_cost = (num_radio_ads * radio_ad_cost) + (num_social_media_ads * social_media_ad_cost) <= budget
total_exposure = (num_radio_ads * radio_ad_exposure) + (num_social_media_ads * social_media_ad_exposure)

# Model
model = Model(total_cost, total_exposure)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
print(f"Number of radio ads: {num_radio_ads.value()}")
print(f"Number of social media ads: {num_social_media_ads.value()}")
```
Error: unexpected EOF while parsing (<string>, line 0)
False
Error: unexpected EOF while parsing (<string>, line 0)
---------------------------------------------------------------------------------------------

There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a $12 profit and each short cable sold results in a $5 profit, how many of each type of cable should be made to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
long_cables = intvar(0, 1000 // 10, name="long_cables")
short_cables = intvar(0, 1000 // 7, name="short_cables")

# Define constraints
model = Model(
    long_cables * 10 + short_cables * 7 <= 1000,  # Total gold constraint
    short_cables >= 5 * long_cables,  # At least 5 times more short cables than long cables
    long_cables >= 10  # At least 10 long cables
)

# Define objective function
profit = long_cables * 12 + short_cables * 5

# Solve the problem
model.maximize(profit)

# Get the optimal solution
solver = CPM_ortools(model)
solver.solve()

# Print the optimal number of each type of cable
print(f"Number of long cables: {long_cables.value()}")
print(f"Number of short cables: {short_cables.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A store employs senior citizens who earn $500 per week and young adults who earn $750 per week. The store must keep the weekly wage bill below $30000. On any day, the store requires at least 50 workers, of whom at least 10 must be young adults. To ensure the store runs smoothly, the number of young adults should be at least a third the number of senior citizens. Formulate a LP to minimize the wage bill.
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define variables
senior_citizens = intvar(0, 50, shape=1)
young_adults = intvar(0, 50, shape=1)

# Define constraints
model = Model(
    # Weekly wage bill constraint
    500*senior_citizens + 750*young_adults <= 30000,
    
    # Minimum number of workers constraint
    senior_citizens + young_adults >= 50,
    
    # Minimum number of young adults constraint
    young_adults >= 10,
    
    # Ratio constraint between young adults and senior citizens
    young_adults >= senior_citizens / 3
)

# Define objective
objective = 500*senior_citizens + 750*young_adults
model.minimize(objective)

# Solve the model
cpmpy.solvers.cplex(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs $1000 and attracts 400,000 viewers. On soorchle, each ad costs $200 and attracts 5,000 viewers. On wassa, each ad costs $100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is $10000. How many advertisements should be run in each of the three types of media to maximize the total audience?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Data
cost_ztube = 1000
viewers_ztube = 400000
cost_soorchle = 200
viewers_soorchle = 5000
cost_wassa = 100
viewers_wassa = 3000
budget = 10000
max_soorchle_ads = 15

# Variables
num_ztube_ads = intvar(0, budget // cost_ztube, name="num_ztube_ads")
num_soorchle_ads = intvar(0, max_soorchle_ads, name="num_soorchle_ads")
num_wassa_ads = intvar(0, budget // cost_wassa // 3, name="num_wassa_ads")

# Constraints
total_cost = num_ztube_ads * cost_ztube + num_soorchle_ads * cost_soorchle + num_wassa_ads * cost_wassa
total_viewers = num_ztube_ads * viewers_ztube + num_soorchle_ads * viewers_soorchle + num_wassa_ads * viewers_wassa

# Budget constraint
constraint_budget = total_cost <= budget

# Advertising balance constraints
constraint_ztube_percentage = num_ztube_ads >= 0.05 * (num_ztube_ads + num_soorchle_ads + num_wassa_ads)
constraint_wassa_percentage = num_wassa_ads <= (num_ztube_ads + num_soorchle_ads + num_wassa_ads) // 3

# Solve
model = Model(constraint_budget, constraint_ztube_percentage, constraint_wassa_percentage)
maximize(total_viewers)
```

Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chair produced by Elm Furniture yields a profit of $43, while every dresser yields a $52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
num_chairs = intvar(0, 100, name="num_chairs")
num_dressers = intvar(0, 100, name="num_dressers")

# Define constraints
constraint_stain = num_chairs*1.4 + num_dressers*1.1 <= 17
constraint_wood = num_chairs*2 + num_dressers*3 <= 11

# Define objective function
profit_chairs = num_chairs * 43
profit_dressers = num_dressers * 52
total_profit = profit_chairs + profit_dressers

# Model
model = Model(
    constraint_stain,
    constraint_wood,
    maximize(total_profit)
)

# Solve
solver = CPM_ortools(model)
solver.solve()

print("Maximum profit: $", total_profit.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs $100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs $80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
x = intvar(0, 100, shape=2)  # amount of Feed A and Feed B in kilograms

# Define constraints
protein_constraint = 10*x[0] + 7*x[1] >= 30
fat_constraint = 8*x[0] + 15*x[1] >= 50

# Define cost function
cost = 100*x[0] + 80*x[1]

# Define the CP model
model = Model(minimize=cost, constraints=[protein_constraint, fat_constraint])

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Get the minimum cost
min_cost = cost.value()

print("Minimum cost of the mixture: $", min_cost)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is $5 and the profit per stubby jar is $9. How many jars of each type should the artisan make to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
thin_jars = intvar(0, 100, name="thin_jars")
stubby_jars = intvar(0, 100, name="stubby_jars")

# Define constraints
shaping_time_thin = 50 * thin_jars
shaping_time_stubby = 30 * stubby_jars
baking_time_thin = 90 * thin_jars
baking_time_stubby = 150 * stubby_jars

model = Model(
    shaping_time_thin + shaping_time_stubby <= 3000,
    baking_time_thin + baking_time_stubby <= 4000
)

# Define objective function
profit_thin = 5 * thin_jars
profit_stubby = 9 * stubby_jars
total_profit = profit_thin + profit_stubby

model.maximize(total_profit)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

print("Optimal number of thin jars:", thin_jars.value())
print("Optimal number of stubby jars:", stubby_jars.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
bananahaters = intvar(0, 10, shape=2, name="bananahaters")  # Quantity of banana-haters packages
combo = intvar(0, 10, shape=2, name="combo")  # Quantity of combo packages

# Define the constraints
model = Model(
    bananahaters[0] <= 10,  # Limit on apples for banana-haters package
    bananahaters[1] <= 30,  # Limit on grapes for banana-haters package
    combo[0] <= 10,  # Limit on apples for combo package
    combo[1] <= 20,  # Limit on bananas for combo package
    combo[2] <= 80,  # Limit on grapes for combo package
)

# Define the objective function to maximize profit
profit_bananahaters = 6  # Profit from selling one banana-haters package
profit_combo = 7  # Profit from selling one combo package
total_profit = profit_bananahaters * sum(bananahaters) + profit_combo * sum(combo)
model.maximize(total_profit)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_bananahaters = [bananahaters[0].value(), bananahaters[1].value()]
optimal_combo = [combo[0].value(), combo[1].value(), combo[2].value()]

print("Optimal quantity of banana-haters packages:", optimal_bananahaters)
print("Optimal quantity of combo packages:", optimal_combo)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is $5 and the profit per batch of cookies is $3. How should the bakery operate to maximize total profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
max_hours_per_machine = 3000
profit_per_bread = 5
profit_per_cookie = 3
hours_bread_mixer = 1
hours_bread_oven = 3
hours_cookie_mixer = 0.5
hours_cookie_oven = 1

# Variables
num_bread = int(max_hours_per_machine / hours_bread_mixer)
num_cookie = int(max_hours_per_machine / hours_cookie_mixer)

bread = intvar(0, num_bread, name="bread")
cookie = intvar(0, num_cookie, name="cookie")

# Constraints
model = Model(
    [bread*hours_bread_mixer + cookie*hours_cookie_mixer <= max_hours_per_machine,
     bread*hours_bread_oven + cookie*hours_cookie_oven <= max_hours_per_machine]
)

# Objective
total_profit = bread*profit_per_bread + cookie*profit_per_cookie
model.maximize(total_profit)

# Solve
solver = CPM_ortools(model)
solver.solve()

print("Maximized Total Profit: $", total_profit.value())
print("Number of loaves of bread to bake:", bread.value())
print("Number of batches of cookies to bake:", cookie.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is $8 and the profit per pane of tempered glass is $10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define decision variables
regular_panes = intvar(0, 300, name="regular_panes")
tempered_panes = intvar(0, 300, name="tempered_panes")

# Define constraints
heating_time_regular = 3 * regular_panes + 5 * tempered_panes <= 300
cooling_time_regular = 5 * regular_panes + 8 * tempered_panes <= 300

# Define objective function
profit_regular = 8 * regular_panes
profit_tempered = 10 * tempered_panes
total_profit = profit_regular + profit_tempered

# Define the CP model
model = Model(
    heating_time_regular,
    cooling_time_regular,
    total_profit
)

# Find the optimal solution
cpmpy.solvers.cbc(model)

# Print the optimal solution
print("Optimal number of regular glass panes:", regular_panes.value())
print("Optimal number of tempered glass panes:", tempered_panes.value())
print("Maximum profit:", total_profit.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is $5 and the profit per tiger sold is $4. How many of each should be made in order to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
elephants = intvar(0, 100, shape=1)
tigers = intvar(0, 100, shape=1)

# Define the constraints
wood_constraint = 50*elephants + 40*tigers <= 5000
plastic_constraint = 20*elephants + 30*tigers <= 4000

# Define the objective function
profit = 5*elephants + 4*tigers

# Model instantiation
model = Model(
    wood_constraint,
    plastic_constraint,
    maximize(profit)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Output the solution
if solution:
    print(f"Number of elephants to make: {elephants.value()}")
    print(f"Number of tigers to make: {tigers.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is $30 and the profit per small art piece is $15, how many of each should be made to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_large = intvar(5, 100, name="num_large")
num_small = intvar(5, 100, name="num_small")

# Define the constraints
paint_constraint = 4*num_large + 2*num_small <= 100
glitter_constraint = 3*num_large + num_small <= 50
glue_constraint = 5*num_large + 2*num_small <= 70

# Define the objective function
profit = 30*num_large + 15*num_small

# Define the problem
model = Model(
    paint_constraint,
    glitter_constraint,
    glue_constraint,
    profit
)

# Solve the problem
minimize(profit, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

My family has decided to invest in real state for the first time. Currently, they have $600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than $200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses.  If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the amount of money to invest in apartments and townhouses
apartments = intvar(0, 200000)
townhouses = intvar(0, 400000)

# Total amount of money available to invest
total_investment = apartments + townhouses

# Objective function to maximize profit
profit = 0.10 * apartments + 0.15 * townhouses

# Constraints
constraints = [
    total_investment == 600000,
    apartments >= townhouses / 2
]

# Model
model = Model(
    maximize(profit),
    constraints
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_apartments = apartments.value()
optimal_townhouses = townhouses.value()

print("Optimal amount to invest in apartments: $", optimal_apartments)
print("Optimal amount to invest in townhouses: $", optimal_townhouses)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is $1 and the cost per pill of Sunny is $3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
zodiac_z1 = intvar(0, 100, name="zodiac_z1")  # number of Zodiac pills containing Z1
sunny_z1 = intvar(0, 100, name="sunny_z1")    # number of Sunny pills containing Z1
zodiac_d3 = intvar(0, 100, name="zodiac_d3")  # number of Zodiac pills containing D3
sunny_d3 = intvar(0, 100, name="sunny_d3")    # number of Sunny pills containing D3

# Define constraints
problem = Model(
    zodiac_z1*1.3 + sunny_z1*1.2 >= 5,  # at least 5 grams of Z1
    zodiac_d3*1.5 + sunny_d3*5 >= 10,    # at least 10 grams of D3
    zodiac_z1 + sunny_z1 + zodiac_d3 + sunny_d3 == 2,  # total number of pills is 2
)

# Define objective
cost_zodiac = 1  # cost per pill of Zodiac
cost_sunny = 3   # cost per pill of Sunny
cost = zodiac_z1*cost_zodiac + sunny_z1*cost_sunny + zodiac_d3*cost_zodiac + sunny_d3*cost_sunny

# Solve the problem
minimize(cost, problem, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is $8 and the profit per model plane is $10, how many of each should be made to maximize his profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_trains = intvar(0, 120, name="num_trains")
num_planes = intvar(0, 90, name="num_planes")

# Define the constraints
wood_constraint = 3*num_trains + 4*num_planes <= 120
paint_constraint = 3*num_trains + 2*num_planes <= 90

# Define the objective function
profit = 8*num_trains + 10*num_planes

# Define the model
model = Model(
    wood_constraint,
    paint_constraint,
    maximize(profit)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_trains = num_trains.value()
optimal_num_planes = num_planes.value()

print("Optimal number of model trains to make:", optimal_num_trains)
print("Optimal number of model planes to make:", optimal_num_planes)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store $120 in profits, and a laptop will earn $40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs $400 for the store, and a laptop, $100. The store wants to spend at most $6000. Formulate an LP that can be used to maximize the store's profit.
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define decision variables
phones = intvar(0, 400, name="phones")
laptops = intvar(0, 400, name="laptops")

# Define constraints
total_floor_space = phones + 4*laptops <= 400
at_least_80_percent_laptops = laptops >= 0.8*(phones + laptops)
total_cost = 400*phones + 100*laptops <= 6000

# Define objective function
total_profit = 120*phones + 40*laptops

# Define the CP model
model = Model(
    total_floor_space,
    at_least_80_percent_laptops,
    total_cost,
    maximize(total_profit)
)

# Solve the CP model
solution = model.solve()

# Print the optimal values of decision variables
print("Optimal number of phones:", phones.value())
print("Optimal number of laptops:", laptops.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is $3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is $5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
regular_candy_per_kg_regular_mix = 0.8
sour_candy_per_kg_regular_mix = 0.2
profit_regular_mix = 3
regular_candy_per_kg_sour_surprise_mix = 0.1
sour_candy_per_kg_sour_surprise_mix = 0.9
profit_sour_surprise_mix = 5
available_regular_candy = 80
available_sour_candy = 60

# Decision variables
regular_mix_kg = intvar(0, 80)
sour_surprise_mix_kg = intvar(0, 60)

# Constraints
regular_candy_constraint = regular_candy_per_kg_regular_mix * regular_mix_kg + regular_candy_per_kg_sour_surprise_mix * sour_surprise_mix_kg <= available_regular_candy
sour_candy_constraint = sour_candy_per_kg_regular_mix * regular_mix_kg + sour_candy_per_kg_sour_surprise_mix * sour_surprise_mix_kg <= available_sour_candy

# Objective
total_profit = profit_regular_mix * regular_mix_kg + profit_sour_surprise_mix * sour_surprise_mix_kg
maximize(total_profit)

# Solve the problem
model = Model(regular_candy_constraint, sour_candy_constraint, total_profit)
solver = CPM_ortools(model)
solver.solve()
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost $12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost $15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of $50 per sq. foot while laptops produce a net revenue of $70 per sq. foot. The factory wants to spend at most $5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
phone_space = intvar(0, 100, shape=1)
laptop_space = intvar(0, 100, shape=1)

# Define the constraints
model = Model(
    phone_space*12 + laptop_space*15 <= 5000,  # total cost constraint
    phone_space*2 + laptop_space*3 <= 2000,    # total labor constraint
    phone_space*50 + laptop_space*70 == maximize(phone_space*50 + laptop_space*70)  # maximize revenue
)

# Solve the model
cpmpy.solvers.cbc(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store $2000 to make and yields a profit of $500. Each regular desktop costs the store $1000 to make and yields a profit of $300. The store sells at most 200 desktops each month and wants to spend at most $300000 on making the desktops. How many of each should be made and sold to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
premium_desktops = intvar(0, 200, name="premium_desktops")
regular_desktops = intvar(0, 200, name="regular_desktops")

# Define constraints
cost_premium = 2000 * premium_desktops
cost_regular = 1000 * regular_desktops
total_cost = cost_premium + cost_regular <= 300000
total_desktops = premium_desktops + regular_desktops <= 200

# Define objective function
profit_premium = 500 * premium_desktops
profit_regular = 300 * regular_desktops
total_profit = profit_premium + profit_regular

# Model
model = Model(
    total_cost,
    total_desktops,
    maximize(total_profit)
)

# Solve
solver = CPM_ortools(model)
solution = solver.solve()

# Output
if solution:
    print(f"Number of premium desktops to make and sell: {premium_desktops.value()}")
    print(f"Number of regular desktops to make and sell: {regular_desktops.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is $5000 and the profit per premium model is $8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
x1 = intvar(0, 8)  # number of regular models
x2 = intvar(0, 6)  # number of premium models

# Define constraints
profit_regular = 5000 * x1
profit_premium = 8500 * x2
total_profit = profit_regular + profit_premium

# Demand constraints
demand_regular = x1 <= 8
demand_premium = x2 <= 6

# Maximum production constraints
max_production = (x1 <= 12) & (x2 <= 12)

# Define the objective function
model = Model(
    maximize(total_profit),
    demand_regular,
    demand_premium,
    max_production
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Optimal number of regular models:", x1.value())
    print("Optimal number of premium models:", x2.value())
    print("Optimal profit:", total_profit.value())
```
Error: invalid syntax (<string>, line 1)
Error: list.remove(x): x not in list
Error: list.remove(x): x not in list
---------------------------------------------------------------------------------------------

You are designing an office space with two types of desks: long desks and short desks. You can spend at most $2000. Long desks cost $300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
num_long_desks = intvar(0, 2000 // 300, name="num_long_desks")
num_short_desks = intvar(0, 2000 // 100, name="num_short_desks")

# Define constraints
cost_constraint = num_long_desks * 300 + num_short_desks * 100 <= 2000
space_constraint = num_long_desks * 10 + num_short_desks * 4 <= 200
seating_constraint = num_long_desks * 6 + num_short_desks * 2

# Define objective
maximize(seating_constraint)

# Solve the problem
model = Model(cost_constraint, space_constraint, seating_constraint)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of long desks: {num_long_desks.value()}")
    print(f"Number of short desks: {num_short_desks.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost $2 and $3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
kg_C = intvar(0, 100, shape=1)
kg_Y = intvar(0, 100, shape=1)

# Define constraints
nitrous_oxide_constraint = kg_C*1.5 + kg_Y*5 >= 5
vitamin_mix_constraint = kg_C*3 + kg_Y*1 >= 8

# Define objective function
cost_C = 2
cost_Y = 3
cost = cost_C*kg_C + cost_Y*kg_Y

# Define the CP model
model = Model(minimize=cost, constraints=[nitrous_oxide_constraint, vitamin_mix_constraint])

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_cost = cost.value()
print("Minimum cost of Ayse's compound: $", optimal_cost)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is $4 and the cost per pill for pill B is $5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_pill_A = intvar(0, 100, name="num_pill_A")
num_pill_B = intvar(0, 100, name="num_pill_B")

# Define constraints
sleep_inducing_med_A = 3
anti_inflammatory_med_A = 5
sleep_inducing_med_B = 6
anti_inflammatory_med_B = 1

total_sleep_inducing_med = num_pill_A * sleep_inducing_med_A + num_pill_B * sleep_inducing_med_B
total_anti_inflammatory_med = num_pill_A * anti_inflammatory_med_A + num_pill_B * anti_inflammatory_med_B

# Patient must consume at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine
constraint1 = total_sleep_inducing_med >= 40
constraint2 = total_anti_inflammatory_med >= 50

# Define objective function to minimize cost
cost_per_pill_A = 4
cost_per_pill_B = 5
total_cost = num_pill_A * cost_per_pill_A + num_pill_B * cost_per_pill_B

# Define and solve the problem
model = Model(minimize=total_cost, constraints=[constraint1, constraint2])
solver = CPM_ortools(model)
solver.solve()

print("Minimum cost for the patient: $", total_cost.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is $10 and the profit per container of Oil Max Pro is $15. How many containers of each of oil should the car manufacturer make to maximize profit?
N/A
```python
from cpmpy import *

# Define the variables
oil_max = intvar(0, 1000, name="oil_max")
oil_max_pro = intvar(0, 1000, name="oil_max_pro")

# Define the constraints
substance_a = 46*oil_max + 13*oil_max_pro <= 1345
substance_b = 43*oil_max + 4*oil_max_pro <= 346
substance_c = 56*oil_max + 45*oil_max_pro <= 1643

# Define the objective function
profit = 10*oil_max + 15*oil_max_pro

# Define the problem
model = Model(
    substance_a,
    substance_b,
    substance_c,
    maximize(profit)
)

# Solve the problem
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Number of containers of Oil Max: {oil_max.value()}")
    print(f"Number of containers of Oil Max Pro: {oil_max_pro.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A food truck owner can spend at most $20000 on mangos and guavas. A mango costs the food truck owner $5 and a guava costs him $3. Spices are added and each mango is sold for a profit of $3 while each guava is sold for a profit of $4. The owner estimates that at least 100 mangos but at the most 150 are sold each month. He also estimates that the number of guavas sold is at most a third of the mangos sold. How many mangos and guavas should be sold in order to maximize the profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
max_budget = 20000
mango_cost = 5
guava_cost = 3
mango_profit = 3
guava_profit = 4
min_mangos_sold = 100
max_mangos_sold = 150

# Decision variables
num_mangos = intvar(min_mangos_sold, max_mangos_sold, name="num_mangos")
num_guavas = intvar(0, num_mangos // 3, name="num_guavas")

# Constraints
cost_constraint = mango_cost * num_mangos + guava_cost * num_guavas <= max_budget
profit_constraint = mango_profit * num_mangos + guava_profit * num_guavas
objective = -profit_constraint  # Maximize profit, so we minimize the negative profit

# Model
model = Model(
    cost_constraint,
    objective
)

# Solve
solver = CPM_ortools(model)
solution = solver.solve()

if solution:
    print(f"Number of mangos to sell: {num_mangos.value()}")
    print(f"Number of guavas to sell: {num_guavas.value()}")
    print(f"Maximum profit: {-objective.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A nutritionist is making a special vitamin mix using two drinks: A and B. The vitamin mix must contain at least 150 units of Vitamin A, at least 300 units of vitamin D, and at most 400 units of vitamin E. A cup of drink A contains 8 units of Vitamin A, 6 units of Vitamin D, 10 units of Vitamin E, and 4 units of Vitamin K. A cup of drink B contains 15 units of Vitamin A, 2 units of Vitamin D, 20 units of Vitamin E, and 12 units of Vitamin K. How many cups of each drink should be used to make the vitamin mix in order to minimize the amount of Vitamin K?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
cups_A = intvar(0, 100, shape=1)
cups_B = intvar(0, 100, shape=1)

# Define the problem
model = Model(
    cups_A * 4 + cups_B * 12  # Total amount of Vitamin K
)

# Add constraints
model += cups_A * 8 + cups_B * 15 >= 150  # At least 150 units of Vitamin A
model += cups_A * 6 + cups_B * 2 >= 300  # At least 300 units of Vitamin D
model += cups_A * 10 + cups_B * 20 <= 400  # At most 400 units of Vitamin E

# Solve the problem
minimize(
    model,
    solver=CPM_ortools()
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An ice cream store makes chocolate and vanilla ice cream by the gallon. In a week, they must make at least 5 gallons of each type but at most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream. It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available to make ice cream. In addition at least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time. If the profit per gallon of chocolate ice cream is $200 and the profit per gallon of vanilla ice cream is $300, how many gallons of each should be made to maximize profit?
N/A
```python
from cpmpy import *

# Define variables
chocolate = intvar(5, 10, name="chocolate")
vanilla = intvar(5, 8, name="vanilla")

# Define constraints
hours_chocolate = chocolate * 1
hours_vanilla = vanilla * 2
total_hours = hours_chocolate + hours_vanilla <= 30

workers_chocolate = chocolate >= 5
workers_vanilla = vanilla >= 10

# Define objective function
profit_chocolate = 200 * chocolate
profit_vanilla = 300 * vanilla
total_profit = profit_chocolate + profit_vanilla

# Define and solve the problem
model = Model(
    total_hours,
    workers_chocolate,
    workers_vanilla,
    maximize(total_profit)
)

# Print the model
print(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is $500 and the profit per acre of cucumbers is $650, how many acres of each should he grow to maximize his profit? What is that profit?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Create model
model = Model()

# Variables
potatoes = intvar(12, 50, shape=1, name="potatoes")
cucumbers = intvar(15, 25, shape=1, name="cucumbers")

# Constraints
model += potatoes + cucumbers <= 50
model += potatoes >= 12
model += cucumbers >= 15
model += cucumbers <= 2 * potatoes

# Objective function
profit_potatoes = 500 * potatoes
profit_cucumbers = 650 * cucumbers
total_profit = profit_potatoes + profit_cucumbers

model.maximize(total_profit)

# Solve model
cpmpy.solvers.cplex.solve(model)

# Get optimal solution
optimal_potatoes = potatoes.value()
optimal_cucumbers = cucumbers.value()
max_profit = total_profit.value()

print("Optimal acres of potatoes:", optimal_potatoes)
print("Optimal acres of cucumbers:", optimal_cucumbers)
print("Maximum profit:", max_profit)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000  square feet of vinyl  can be produced weekly. If a square foot of hardwood flooring yields a profit of $2.5 and a square foot of vinyl planks produces a $3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define decision variables
hardwood = intvar(0, 50000, shape=1, name="hardwood")
vinyl = intvar(0, 30000, shape=1, name="vinyl")

# Define the objective function to maximize profit
profit = 2.5*hardwood + 3*vinyl

# Define the constraints
demand_hardwood = hardwood >= 20000
demand_vinyl = vinyl >= 10000
total_demand = hardwood + vinyl >= 60000
production_limit_hardwood = hardwood <= 50000
production_limit_vinyl = vinyl <= 30000

# Define the problem
problem = cp.MAXIMIZE(profit)
problem += [demand_hardwood, demand_vinyl, total_demand, production_limit_hardwood, production_limit_vinyl]

# Solve the problem
model = cp.CpModel(problem)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A berry farmer has two farms, an old and new farm, where he grows raspberries, blueberries, and strawberries. He has a contract to provide a local store with 10 kg of raspberries, 9 kg of blueberries, and 15 kg of strawberries. At his old farm, it cost $300 to operate per day and he can harvest and deliver 2 kg of raspberries, 2 kg of blueberries, and 4 kg of strawberries in a day. At his new farm, it costs $200 to operate per day and he can harvest and deliver 4 kg of raspberries, 1 kg of blueberries, and 2 kg of strawberries in a day. Formulate a LP to meet his contract while minimizing his cost.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
raspberries_old = intvar(0, 10, name="raspberries_old")
blueberries_old = intvar(0, 9, name="blueberries_old")
strawberries_old = intvar(0, 15, name="strawberries_old")

raspberries_new = intvar(0, 10, name="raspberries_new")
blueberries_new = intvar(0, 9, name="blueberries_new")
strawberries_new = intvar(0, 15, name="strawberries_new")

# Define constraints
cost_old = 300 * (raspberries_old/2 + blueberries_old/2 + strawberries_old/4)
cost_new = 200 * (raspberries_new/4 + blueberries_new + strawberries_new/2)

constraint_raspberries = raspberries_old + raspberries_new == 10
constraint_blueberries = blueberries_old + blueberries_new == 9
constraint_strawberries = strawberries_old + strawberries_new == 15

# Objective function
total_cost = cost_old + cost_new

# Define the CP model
model = Model(
    minimize(total_cost),
    constraint_raspberries,
    constraint_blueberries,
    constraint_strawberries
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice.  Assume that each serving of Rice costs $3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs $2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
rice_servings = intvar(0, 100, shape=1, name="rice_servings")
kebab_servings = intvar(0, 100, shape=1, name="kebab_servings")

# Define the objective function to minimize the cost
cost = 3*rice_servings + 2*kebab_servings

# Define the constraints
total_calories = 300*rice_servings + 200*kebab_servings >= 2200
total_protein = 4.5*rice_servings + 4*kebab_servings >= 30

# Define the optimization problem
model = Model(minimize=cost, constraints=[total_calories, total_protein])

# Solve the optimization problem
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Optimal cost: ${solution.cost_value}")
    print(f"Number of rice servings: {solution[rice_servings][0]}")
    print(f"Number of kebab servings: {solution[kebab_servings][0]}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A company sells custom scooters and bikes for customers. The profit per scooter is $200 and the profit per bike is $300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define decision variables
num_scooters = intvar(0, 1000, name="num_scooters")
num_bikes = intvar(0, 1000, name="num_bikes")

# Define the objective function to maximize profit
profit_scooters = 200 * num_scooters
profit_bikes = 300 * num_bikes
total_profit = profit_scooters + profit_bikes

# Define the constraints
design_hours_scooters = 2 * num_scooters
design_hours_bikes = 4 * num_bikes
engineering_hours_scooters = 3 * num_scooters
engineering_hours_bikes = 5 * num_bikes

# Total hours constraint
model += design_hours_scooters + design_hours_bikes <= 5000
model += engineering_hours_scooters + engineering_hours_bikes <= 6000

# Define the CPMPy model
model = cp.Model(
    cp.Maximize(total_profit),
    [design_hours_scooters + design_hours_bikes <= 5000,
     engineering_hours_scooters + engineering_hours_bikes <= 6000]
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Number of scooters to produce: {num_scooters.value()}")
    print(f"Number of bikes to produce: {num_bikes.value()}")
    print(f"Maximum profit: {total_profit.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

John has a 300 acre berry farm on which to plant blueberries and raspberries. John has $10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and $22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and $25 in watering costs is required. The profit per acre of blueberries is $56 and the profit per acre of raspberries is $75. Formulate an LP problem in order to maximize profit.
N/A
```python
from cpmpy import *
import cpmpy.model as cpm

# Define the variables
blueberries_acres = cpm.integer_var(0, 300, name="blueberries_acres")
raspberries_acres = cpm.integer_var(0, 300, name="raspberries_acres")

# Define the objective function to maximize profit
profit = 56 * blueberries_acres + 75 * raspberries_acres

# Define the constraints
labor_constraint = 6 * blueberries_acres + 3 * raspberries_acres <= 575
watering_constraint = 22 * blueberries_acres + 25 * raspberries_acres <= 10000

# Define the LP problem
model = cpm.model({
    cpm.maximize(profit),
    labor_constraint,
    watering_constraint
})

# Solve the LP problem
solution = model.solve()

# Print the optimal solution
if solution:
    print("Optimal profit: $", solution.objective_value)
    print("Acres of blueberries: ", solution[blueberries_acres])
    print("Acres of raspberries: ", solution[raspberries_acres])
else:
    print("No solution found")
```
Error: list index out of range
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A man  only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost $3 per serving and fruits cost $5 per serving, how many servings of each should he eat to minimize his cost?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
veggies = intvar(0, 100, shape=1)  # Number of servings of vegetables
fruits = intvar(0, 100, shape=1)   # Number of servings of fruits

# Define the constraints
model = Model(
    veggies*2 + fruits*4 >= 20,  # At least 20 units of vitamins
    veggies*3 + fruits*1 >= 30   # At least 30 units of minerals
)

# Define the objective function to minimize the cost
cost = veggies*3 + fruits*5

# Solve the problem
minimize_model(model, cost, solver=CPM_ortools())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $20 and $40 respectively for a batch of bagels and a batch of croissants.
N/A
```python
from cpmpy import *

# Constants
profit_bagels = 20
profit_croissants = 40
oven_time_bagels = 2
chef_time_bagels = 0.25
oven_time_croissants = 1
chef_time_croissants = 2
max_oven_time = 70
max_chef_time = 32

# Variables
num_bagels = int(max_oven_time / oven_time_bagels)
num_croissants = int(max_chef_time / chef_time_croissants)

# Decision variables
bagels = intvar(0, num_bagels, name="bagels")
croissants = intvar(0, num_croissants, name="croissants")

# Constraints
model = Model(
    bagels * oven_time_bagels + croissants * oven_time_croissants <= max_oven_time,
    bagels * chef_time_bagels + croissants * chef_time_croissants <= max_chef_time
)

# Objective
total_profit = profit_bagels * bagels + profit_croissants * croissants
model.maximize(total_profit)

print(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs $300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs $600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
factory1_hours = intvar(0, 100)  # hours running factory 1
factory2_hours = intvar(0, 100)  # hours running factory 2

# Define constraints
factory1_cost = factory1_hours * 300
factory2_cost = factory2_hours * 600

factory1_black = factory1_hours * 5
factory1_white = factory1_hours * 6
factory1_brown = factory1_hours * 3

factory2_black = factory2_hours * 10
factory2_white = factory2_hours * 10

total_black = factory1_black + factory2_black
total_white = factory1_white + factory2_white
total_brown = factory1_brown

# Demand constraints
demand_black = total_black >= 20
demand_white = total_white >= 5
demand_brown = total_brown >= 15

# Minimize cost
cost = factory1_cost + factory2_cost

# Define the CP model
model = Model(minimize=cost, constraints=[demand_black, demand_white, demand_brown])

# Solve the CP model
solver = CPM_ortools(model)
solver.solve()

# Print the optimal solution
print("Optimal cost:", cost.value())
print("Factory 1 hours:", factory1_hours.value())
print("Factory 2 hours:", factory2_hours.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and $80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and $50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and $34000 available to spend on pesticide. If the revenue per acre of turnips is $300 and the revenue per acre of pumpkins is $450, how many acres of each should he grow to maximize his revenue.
N/A
```python
from cpmpy import *
import numpy as np

# Constants
total_acres = 500
total_watering_minutes = 40000
total_pesticide_budget = 34000
revenue_turnips = 300
revenue_pumpkins = 450
watering_turnips = 50
watering_pumpkins = 90
pesticide_turnips = 80
pesticide_pumpkins = 50

# Decision variables
acres_turnips = intvar(0, total_acres)
acres_pumpkins = intvar(0, total_acres)

# Constraints
model = Model(
    [acres_turnips + acres_pumpkins <= total_acres,
     acres_turnips * watering_turnips + acres_pumpkins * watering_pumpkins <= total_watering_minutes,
     acres_turnips * pesticide_turnips + acres_pumpkins * pesticide_pumpkins <= total_pesticide_budget]
)

# Objective function
revenue = acres_turnips * revenue_turnips + acres_pumpkins * revenue_pumpkins
model.maximize(revenue)

print(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A school employs staff and substitute teachers. Per shift, staff teachers work 6 hours and get paid $300. Per shift, substitute teachers work 3 hours and get paid $100. For the summer term, the school requires 1000 hours of teaching availability. If the school has a budget of $40000, how many of each teacher should be hired to minimize the total number of teachers?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
staff_teachers = intvar(0, 100)  # number of staff teachers
substitute_teachers = intvar(0, 100)  # number of substitute teachers

# Define the constraints
hours_constraint = 6 * staff_teachers + 3 * substitute_teachers >= 1000  # total hours constraint
budget_constraint = 300 * staff_teachers + 100 * substitute_teachers <= 40000  # budget constraint

# Define the objective (minimize the total number of teachers)
total_teachers = staff_teachers + substitute_teachers

# Define the model
model = Model(minimize=total_teachers, constraints=[hours_constraint, budget_constraint])

# Solve the model
solution = model.solve()

# Print the optimal number of staff and substitute teachers
if solution:
    print("Optimal number of staff teachers:", staff_teachers.value())
    print("Optimal number of substitute teachers:", substitute_teachers.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
high_intensity_drills = intvar(0, 8)  # at most 40% of the drills
low_intensity_drills = intvar(10, 20)  # at least 10 low intensity drills

# Define the constraints
model = Model(
    high_intensity_drills * 50 + low_intensity_drills * 30 == 800,  # total gems processed
    high_intensity_drills * 50 + low_intensity_drills * 20 <= 700  # total water used
)

# Define the objective
objective = high_intensity_drills + low_intensity_drills

# Solve the problem
minimize(objective, model, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_dine_in = intvar(0, 5, name="num_dine_in")  # Number of dine-in places
num_food_truck = intvar(0, 10, name="num_food_truck")  # Number of food trucks

# Define the constraints
sandwiches_dine_in = num_dine_in * 100
sandwiches_food_truck = num_food_truck * 50
total_sandwiches = sandwiches_dine_in + sandwiches_food_truck >= 500

employees_dine_in = num_dine_in * 8
employees_food_truck = num_food_truck * 3
total_employees = employees_dine_in + employees_food_truck <= 35

# Define the objective (minimize the total number of stores)
total_stores = num_dine_in + num_food_truck
minimize(total_stores)

# Solve the problem
model = Model(total_sandwiches, total_employees, total_stores)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_dine_in = num_dine_in.value()
optimal_num_food_truck = num_food_truck.value()

print("Optimal number of dine-in places:", optimal_num_dine_in)
print("Optimal number of food trucks:", optimal_num_food_truck)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_process_A = intvar(0, 500, name="num_process_A")
num_process_B = intvar(0, 500, name="num_process_B")

# Define the constraints
model = Model(
    num_process_A * 3 + num_process_B * 5 <= 500,  # Gold constraint
    num_process_A * 2 + num_process_B * 3 <= 300  # Wires constraint
)

# Define the objective
total_coins_plated = num_process_A * 5 + num_process_B * 7
model.maximize(total_coins_plated)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of process A: {num_process_A.value()}")
    print(f"Number of process B: {num_process_B.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
miter_saw = intvar(0, 1500, name="miter_saw")
circular_saw = intvar(0, 1500, name="circular_saw")

# Define the constraints
cutting_constraint = miter_saw*50 + circular_saw*70 >= 1500
sawdust_constraint = miter_saw*60 + circular_saw*100 <= 2000

# Define the objective
total_saws = miter_saw + circular_saw
minimize(total_saws)

# Solve the problem
model = Model(cutting_constraint, sawdust_constraint, minimize(total_saws))
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of miter saws needed: {miter_saw.value()}")
    print(f"Number of circular saws needed: {circular_saw.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
acres_windrower = intvar(0, 200, name="acres_windrower")
acres_harvester = intvar(0, 200, name="acres_harvester")

# Define the constraints
model = Model(
    acres_windrower * 10 + acres_harvester * 8 <= 200,  # Total acres constraint
    acres_windrower * 5 + acres_harvester * 3 <= 800,    # Total methane gas constraint
    acres_windrower * 2 + acres_harvester <= 300         # Total fuel constraint
)

# Define the objective
objective = -1 * (acres_windrower + acres_harvester)  # Maximize the amount of hay processed

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Acres for windrower:", acres_windrower.value())
    print("Acres for harvester:", acres_harvester.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
wraps = intvar(0, 1000, shape=1)
platters = intvar(0, 1000, shape=1)

# Define the constraints
model = Model(
    wraps >= 3*platters,
    5*wraps + 7*platters >= 3000,
    3*wraps + 5*platters >= 2500
)

# Define the objective
total_time = 10*wraps + 8*platters
model.minimize(total_time)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_wraps = wraps.value()
optimal_platters = platters.value()

print("Optimal number of wraps:", optimal_wraps)
print("Optimal number of platters:", optimal_platters)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An amusement park is installing ticket machines, both cash-based and card-only machines. A cash-based machine can process 20 people per hour while a card-only machine can process 30 people per hour. The cash-based machine needs 4 rolls of paper per hour while the card-only machine requires 5 rolls of paper per hour. The amusement park needs to be able to process at least 500 people per hour but can use at most 90 rolls of paper per hour. Since most people prefer to pay by cash, the number of card-only machines must not exceed the number of cash-based machines. How many of each machine should be bought to minimize the total number of machines in the park?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
cash_based_machines = intvar(0, 100, shape=1, name="cash_based_machines")
card_only_machines = intvar(0, 100, shape=1, name="card_only_machines")

# Define the constraints
model = Model(
    cash_based_machines * 20 + card_only_machines * 30 >= 500,
    cash_based_machines * 4 + card_only_machines * 5 <= 90,
    card_only_machines <= cash_based_machines
)

# Define the objective
objective = cash_based_machines + card_only_machines

# Solve the problem
minimize(objective, model, solver=CPM_ortools())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_glass_jars = intvar(20, 100, name="num_glass_jars")
num_plastic_jars = intvar(40, 200, name="num_plastic_jars")

# Define the constraint that glass jars can hold 250 ml and plastic jars can hold 300 ml of honey
glass_capacity = 250
plastic_capacity = 300

# Define the constraint that the total amount of honey is 20000 ml
total_honey_constraint = glass_capacity * num_glass_jars + plastic_capacity * num_plastic_jars == 20000

# Define the constraint that at least twice as many plastic jars must be filled as glass jars
twice_as_many_constraint = num_plastic_jars >= 2 * num_glass_jars

# Define the objective to maximize the total number of jars filled
total_jars_filled = num_glass_jars + num_plastic_jars
model = Model(
    total_honey_constraint,
    twice_as_many_constraint,
    maximize(total_jars_filled)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal number of glass and plastic jars filled
optimal_num_glass_jars = num_glass_jars.value()
optimal_num_plastic_jars = num_plastic_jars.value()

print("Optimal number of glass jars:", optimal_num_glass_jars)
print("Optimal number of plastic jars:", optimal_num_plastic_jars)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
mango_teas = intvar(0, 1000, shape=1)
lychee_teas = intvar(0, 1000, shape=1)

# Define the constraints
model = Model([
    mango_teas * 4 + lychee_teas * 6 <= 2000,  # Mango juice constraint
    mango_teas * 8 + lychee_teas * 6 <= 3000,  # Lychee juice constraint
    lychee_teas >= 0.4 * (mango_teas + lychee_teas),  # At least 40% lychee teas
    mango_teas > lychee_teas  # Mango teas should be more than lychee teas
])

# Define the objective
total_tea = mango_teas * 8 + lychee_teas * 6
model.minimize(total_tea)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_mango_teas = mango_teas.value()
optimal_lychee_teas = lychee_teas.value()

print("Optimal number of mango bubble teas:", optimal_mango_teas)
print("Optimal number of lychee bubble teas:", optimal_lychee_teas)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid $120. A permanent snow remover works 10 hours per shift and gets paid $250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of $6500, how many of each type of worker should be hired to minimize the total number of snow removers?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
seasonal_workers = intvar(0, 100, shape=1)  # number of seasonal snow removers
permanent_workers = intvar(0, 100, shape=1)  # number of permanent snow removers

# Define constraints
hours_worked = 6 * seasonal_workers + 10 * permanent_workers
budget_constraint = 120 * seasonal_workers + 250 * permanent_workers <= 6500
total_hours_constraint = hours_worked == 300

# Define objective
total_workers = seasonal_workers + permanent_workers
minimize(total_workers)

# Solve the problem
model = Model(minimize(total_workers), total_hours_constraint, budget_constraint)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
opt_seasonal_workers = seasonal_workers.value()
opt_permanent_workers = permanent_workers.value()

print("Optimal number of seasonal workers:", opt_seasonal_workers)
print("Optimal number of permanent workers:", opt_permanent_workers)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A high rise building is buying two types of furnaces, a new model and an old model. A new model furnace can heat 10 apartments and consumes 200 kWh per day. An old model can heat 15 apartments and consumes 250 kWh per day. Since the old model is harder to find, at most 35% of the furnaces can be the old model and at least 5 new model furnaces should be used. If the high rise needs to heat at least 200 apartments and has 3500 kWh of electricity available, how many of each furnace should be purchase to minimize the total number of furnaces?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_new_model = intvar(0, 100, shape=1, name="num_new_model")
num_old_model = intvar(0, 100, shape=1, name="num_old_model")

# Define the constraints
num_apartments = 200
num_apartments_per_new = 10
num_apartments_per_old = 15
electricity_per_new = 200
electricity_per_old = 250
electricity_available = 3500
max_old_percentage = 0.35
min_new_model = 5

model = Model(
    num_new_model >= min_new_model,
    num_apartments <= num_new_model * num_apartments_per_new + num_old_model * num_apartments_per_old,
    num_new_model * electricity_per_new + num_old_model * electricity_per_old <= electricity_available,
    num_old_model <= (num_new_model + num_old_model) * max_old_percentage
)

# Define the objective
total_furnaces = num_new_model + num_old_model
objective = minimize(total_furnaces)

# Add the objective to the model
model.add(objective)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print("Number of new model furnaces: ", num_new_model.value())
    print("Number of old model furnaces: ", num_old_model.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
rural_factories = intvar(0, 260, shape=1)
urban_factories = intvar(0, 260, shape=1)

# Define constraints
managers_constraint = 8*rural_factories + 20*urban_factories <= 260
phones_constraint = 100*rural_factories + 200*urban_factories >= 3000

# Define objective
total_factories = rural_factories + urban_factories
minimize(total_factories)

# Solve the problem
model = Model(managers_constraint, phones_constraint, total_factories)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of rural factories:", rural_factories.value())
    print("Number of urban factories:", urban_factories.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
countertop = intvar(0, 5, shape=1)  # Number of counter-top sized machines
fridge = intvar(0, 5, shape=1)  # Number of fridge sized machines

# Define constraints
heat_countertop = 50 * countertop  # Total heat output of counter-top sized machines
heat_fridge = 70 * fridge  # Total heat output of fridge sized machines
heat_constraint = heat_countertop + heat_fridge <= 500  # Total heat output constraint

ice_cream_countertop = 80 * countertop  # Total ice cream output of counter-top sized machines
ice_cream_fridge = 150 * fridge  # Total ice cream output of fridge sized machines
ice_cream_constraint = ice_cream_countertop + ice_cream_fridge >= 1000  # Total ice cream output constraint

# Define objective
total_machines = countertop + fridge

# Define model
model = Model(
    heat_constraint,
    ice_cream_constraint,
    total_machines
)

# Solve model
solver = CPM_ortools(model)
solution = solver.solve()

# Print solution
if solution:
    print("Number of counter-top sized machines:", countertop.value())
    print("Number of fridge sized machines:", fridge.value())
    print("Total number of machines needed:", total_machines.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
small_container = intvar(0, 500, name="small_container")
large_container = intvar(0, 700, name="large_container")

# Define constraints
water_constraint = 10*small_container + 20*large_container <= 500
pill_constraint = 15*small_container + 20*large_container <= 700

# Define objective function
total_paste = 20*small_container + 30*large_container

# Define the model
model = Model(
    water_constraint,
    pill_constraint,
    maximize(total_paste)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of small containers: {small_container.value()}")
    print(f"Number of large containers: {large_container.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
small_well_acres = intvar(0, 300, shape=1)
large_well_acres = intvar(0, 300, shape=1)

# Define the constraints
total_drill_bits = 5*small_well_acres + 10*large_well_acres <= 2500
total_pollution = 10*small_well_acres + 20*large_well_acres <= 4500

# Define the objective function to maximize total oil production
total_oil_production = 2*small_well_acres + 5*large_well_acres

# Define the model
model = Model(
    total_drill_bits,
    total_pollution,
    maximize(total_oil_production)
)

# Solve the model
solution = model.solve()

# Get the optimal solution
optimal_small_well_acres = small_well_acres.value()
optimal_large_well_acres = large_well_acres.value()

print("Optimal number of acres for small oil well:", optimal_small_well_acres)
print("Optimal number of acres for large oil well:", optimal_large_well_acres)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
almond_croissants = intvar(0, 100, name="almond_croissants")
pistachio_croissants = intvar(0, 100, name="pistachio_croissants")

# Define the constraints
butter_constraint = 5*almond_croissants + 3*pistachio_croissants <= 600
flour_constraint = 8*almond_croissants + 6*pistachio_croissants <= 800
popularity_constraint = almond_croissants >= 3*pistachio_croissants

# Define the objective function
production_time = 12*almond_croissants + 10*pistachio_croissants

# Define the model
model = Model(
    butter_constraint,
    flour_constraint,
    popularity_constraint,
    production_time
)

# Solve the model
minimize(production_time)

# Print the optimal solution
print("Optimal production plan:")
print("Almond Croissants:", almond_croissants.value())
print("Pistachio Croissants:", pistachio_croissants.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A burger chain is buying both gas and electric grills to make burger patties. A gas grill can cook 20 patties per minute while an electric grill can cook 30 patties per minute. The gas grill requires 20 units of cooking oil per minute while the electric grill requires 25 units of cooking oil per minute. Since the gas grill patties taste better, the number of electric grills must be less than the number of gas grills. Further, the burger chain wants to be able to make at least 150 patties per minute and use at most 140 units of cooking oil per minute. How many of each grill should be bought to minimize the total number of grills in the store?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_gas_grills = intvar(0, 10, name="num_gas_grills")  # maximum number of gas grills is 10
num_electric_grills = intvar(0, 10, name="num_electric_grills")  # maximum number of electric grills is 10

# Define constraints
model = Model(
    num_gas_grills >= num_electric_grills,  # number of electric grills must be less than gas grills
    20*num_gas_grills + 30*num_electric_grills >= 150,  # total patties per minute constraint
    20*num_gas_grills + 25*num_electric_grills <= 140  # total cooking oil per minute constraint
)

# Define objective
total_grills = num_gas_grills + num_electric_grills
model.minimize(total_grills)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of gas grills: {num_gas_grills.value()}")
    print(f"Number of electric grills: {num_electric_grills.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A cough syrup company sells cough syrup in kids and adult size bottles. A kids size bottle can hold 100 ml of cough syrup while an adult size bottle can hold 300 ml of cough syrup. Since there is no difference in concentration of medical ingredients between the two bottles, at least 3 times as many adult size bottle must be made as kids size bottles. However, at least 50 kids size bottles must be made. If the company has 25000 ml of cough syrup available, how many bottles of each should be made to maximize the total number of bottles?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
kids_bottles = intvar(50, 100, name="kids_bottles")
adult_bottles = intvar(3*kids_bottles, 1000, name="adult_bottles")

# Define the constraints
problem = Model(
    kids_bottles*100 + adult_bottles*300 <= 25000,
    adult_bottles >= 3*kids_bottles
)

# Define the objective
total_bottles = kids_bottles + adult_bottles
maximize(total_bottles)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of kids size bottles: {kids_bottles.value()}")
    print(f"Number of adult size bottles: {adult_bottles.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bakery makes fiber supplemented brownies and lemon squares. Each brownie requires 5 units of chocolate mix and 4 units of fiber. Each lemon square requires 7 units of lemon mix and 6 units of fiber. Lemon squares sell much faster and thus the number of lemon squares made must be larger than the number of brownies made. However, to please all customers, at least 40% of the items made must be brownies. If the bakery has 2500 units of chocolate mix and 3300 units of lemon mix, how many of each should be made to minimize the total amount of fiber needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
brownies = intvar(0, 1000, shape=1)  # Number of brownies made
lemon_squares = intvar(0, 1000, shape=1)  # Number of lemon squares made

# Define the constraints
model = Model(
    brownies * 5 + lemon_squares * 7 <= 2500,  # Constraint on chocolate mix
    brownies * 4 + lemon_squares * 6 <= 3300,  # Constraint on lemon mix
    lemon_squares > brownies,  # Lemon squares made must be larger than brownies made
    brownies >= 0.4 * (brownies + lemon_squares)  # At least 40% of items made must be brownies
)

# Define the objective
fiber_used = brownies * 4 + lemon_squares * 6
model.minimize(fiber_used)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Number of brownies made:", brownies.value())
    print("Number of lemon squares made:", lemon_squares.value())
    print("Minimum total amount of fiber needed:", fiber_used.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinic employs nurses and pharmacists to deliver shots to patients. A nurse works 5 hours per shift while a pharmacist works 7 hours per shift. Nurses are paid $250 per shift while pharmacists are paid $300 per shift. Currently, the clinic needs 200 hours of healthcare labor to meet needs. If the firm has a budget of $9000, how many of each healthcare worker should be scheduled to minimize the total number of workers?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
num_nurses = intvar(0, 100, name="num_nurses")
num_pharmacists = intvar(0, 100, name="num_pharmacists")

# Define the constraints
hours_nurses = num_nurses * 5
hours_pharmacists = num_pharmacists * 7
total_hours = hours_nurses + hours_pharmacists
total_cost = num_nurses * 250 + num_pharmacists * 300

model = Model(
    total_hours == 200,
    total_cost <= 9000
)

# Define the objective
objective = minimize(num_nurses + num_pharmacists)

# Solve the problem
minimize(objective, model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash 50 items per day while the front-loading model can wash 75 items per day. The top-loading model consumes 85 kWh per day while the front-loading model consumes 100 kWh per day. The laundromat must be able to wash at least 5000 items per day and has available 7000 kWh per day. Since the top-loading machine are harder to use, at most 40% of the machines can be top-loading. Further, at least 10 machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?
N/A
```python
from cpmpy import *

# Define variables
top_loading = intvar(0, 10)  # Number of top-loading machines
front_loading = intvar(10, 20)  # Number of front-loading machines

# Define constraints
items_constraint = top_loading*50 + front_loading*75 >= 5000
kwh_constraint = top_loading*85 + front_loading*100 <= 7000
top_loading_percentage_constraint = top_loading <= 0.4 * (top_loading + front_loading)

# Define objective
total_machines = top_loading + front_loading
minimize(total_machines)

# Solve the problem
model = Model(items_constraint, kwh_constraint, top_loading_percentage_constraint)
minimize(total_machines)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_branches = intvar(0, 20)  # maximum number of small branches that can be built
num_large_branches = intvar(0, 20)  # maximum number of large branches that can be built

# Define the constraints
num_customers = num_small_branches * 50 + num_large_branches * 100 >= 1200
num_tellers = num_small_branches * 10 + num_large_branches * 15 <= 200

# Define the objective (minimize the total number of branches)
total_branches = num_small_branches + num_large_branches
minimize(total_branches)

# Solve the problem
model = Model(num_customers, num_tellers, total_branches)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of small branches:", num_small_branches.value())
    print("Number of large branches:", num_large_branches.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
regular_vans = intvar(0, 100)  # Number of regular vans
hybrid_vans = intvar(0, 100)   # Number of hybrid vans

# Define the constraints
packages_delivered = regular_vans * 500 + hybrid_vans * 300 >= 20000
pollutants_produced = regular_vans * 200 + hybrid_vans * 100 <= 7000

# Define the objective (minimize the total number of vans)
total_vans = regular_vans + hybrid_vans
objective = minimize(total_vans)

# Create the model
model = Model(
    packages_delivered,
    pollutants_produced,
    objective
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of regular vans: {regular_vans.value()}")
    print(f"Number of hybrid vans: {hybrid_vans.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
process_with_catalyst = intvar(0, 300, name="process_with_catalyst")
process_without_catalyst = intvar(0, 300, name="process_without_catalyst")

# Define constraints
wood_with_catalyst = 10 * process_with_catalyst
oxygen_with_catalyst = 20 * process_with_catalyst
co2_with_catalyst = 15 * process_with_catalyst

wood_without_catalyst = 15 * process_without_catalyst
oxygen_without_catalyst = 12 * process_without_catalyst
co2_without_catalyst = 18 * process_without_catalyst

wood_constraint = wood_with_catalyst + wood_without_catalyst <= 300
oxygen_constraint = oxygen_with_catalyst + oxygen_without_catalyst <= 300

# Define objective function
total_co2 = co2_with_catalyst + co2_without_catalyst

# Define and solve the problem
model = Model(
    wood_constraint,
    oxygen_constraint,
    maximize(total_co2)
)

solver = CPM_ortools(model)
solver.solve()

print("Optimal amount of process with catalyst:", process_with_catalyst.value())
print("Optimal amount of process without catalyst:", process_without_catalyst.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Constants
total_land = 500
traditional_pick_rate = 30
traditional_waste = 10
traditional_fuel = 20
modern_pick_rate = 40
modern_waste = 15
modern_fuel = 15
max_fuel = 9000
max_waste = 6000

# Variables
traditional_acres = intvar(0, total_land)
modern_acres = intvar(0, total_land)

# Constraints
model = Model([
    traditional_acres + modern_acres <= total_land,
    traditional_pick_rate * traditional_acres + modern_pick_rate * modern_acres,
    traditional_waste * traditional_acres + modern_waste * modern_acres <= max_waste,
    traditional_fuel * traditional_acres + modern_fuel * modern_acres <= max_fuel
])

# Objective
model.maximize(traditional_pick_rate * traditional_acres + modern_pick_rate * modern_acres)

# Solve the model
cpmpy.solvers.cbc(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A grilled cheese shop sells a light and heavy grilled cheese sandwich. A light grilled cheese sandwich requires 2 slices of bread and 3 slices of cheese. A heavy grilled cheese sandwich requires 3 slices of bread and 5 slices of cheese. Since most people who come to the store love grilled cheese, the store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches. The store has available 300 slices of bread and 500 slices of cheese. If a light grilled cheese sandwich takes 10 minutes to make and a heavy grilled cheese sandwich takes 15 minutes to make, how many of each should they make to minimize the total production time?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
light_sandwiches = intvar(0, 100, shape=1, name="light_sandwiches")
heavy_sandwiches = intvar(0, 100, shape=1, name="heavy_sandwiches")

# Define the constraints
model = Model(
    light_sandwiches*2 + heavy_sandwiches*3 <= 300,  # Bread constraint
    light_sandwiches*3 + heavy_sandwiches*5 <= 500,  # Cheese constraint
    heavy_sandwiches >= 3 * light_sandwiches  # At least 3 times as many heavy sandwiches as light sandwiches
)

# Define the objective
total_time = light_sandwiches*10 + heavy_sandwiches*15
model.minimize(total_time)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Optimal number of light sandwiches:", light_sandwiches.value())
    print("Optimal number of heavy sandwiches:", heavy_sandwiches.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A post office is buying stamping machines and they can buy a dual or single model stamping machine. A dual model stamping machine can stamp 50 letters per minute while a single model stamping machine can stamp 30 letters per minute. The dual model stamping machine requires 20 units of glue per minute while the single model stamping machine requires 15 units of glue per minute. Since the single model stamping machine is quieter, the number of single model stamping machines must be more than the number of dual model stamping machines. Further, the post office wants to make sure they can stamp at least 300 letters per minute and use at most 135 units of glue per minute. How many of each stamping machine should they purchase to minimize the total number of stamping machines?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
dual = intvar(0, 10, name="dual")  # number of dual model stamping machines
single = intvar(1, 10, name="single")  # number of single model stamping machines

# Define the constraints
glue_used = dual*20 + single*15 <= 135  # total units of glue used per minute
letters_stamped = dual*50 + single*30 >= 300  # total letters stamped per minute
single_more_than_dual = single > dual  # number of single model machines must be more than dual model machines

# Define the objective (minimize total number of stamping machines)
total_machines = dual + single

# Model
model = Model(minimize=total_machines, constraints=[glue_used, letters_stamped, single_more_than_dual])

# Solve
solver = CPM_ortools(model)
solution = solver.solve()

# Print solution
if solution:
    print(f"Number of dual model stamping machines: {dual.value()}")
    print(f"Number of single model stamping machines: {single.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A banana company sells their bananas in small and large crates. A small crate can hold 20 bananas while a large crate can hole 50 bananas. Since large crates are more manageable, the number of large crates must be at least twice the number of small crates. However, at least 5 small crates should be used. If the company has available 500 bananas, how many of each crate should the company use to maximize the total number of crates produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
small_crates = intvar(5, 25, name="small_crates")  # at least 5 small crates
large_crates = intvar(10, 50, name="large_crates")  # at least twice the number of small crates

# Define the constraint that the total number of bananas should be 500
problem.add(small_crates*20 + large_crates*50 == 500)

# Define the constraint that the number of large crates must be at least twice the number of small crates
problem.add(large_crates >= 2*small_crates)

# Define the objective to maximize the total number of crates produced
problem.maximize(small_crates + large_crates)

# Solve the problem
model = CPM_ortools(problem)
stats = model.solve()

# Print the solution
if stats and stats['status'] == 'optimal':
    print(f"Number of small crates: {small_crates.value()}")
    print(f"Number of large crates: {large_crates.value()}")
```
Error: list index out of range
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
choco_crepes = intvar(0, 100, shape=1, name="choco_crepes")
peanut_crepes = intvar(0, 100, shape=1, name="peanut_crepes")

# Define the constraints
model = Model(
    choco_crepes >= 0,
    peanut_crepes >= 0,
    choco_crepes >= 0.25 * (choco_crepes + peanut_crepes),
    peanut_crepes > choco_crepes,
    3 * choco_crepes + 4 * peanut_crepes <= 400,  # Chocolate spread constraint
    6 * choco_crepes + 7 * peanut_crepes <= 450  # Peanut butter spread constraint
)

# Define the objective
total_mix = 6 * choco_crepes + 7 * peanut_crepes
model.minimize(total_mix)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Number of chocolate crepes: {choco_crepes.value()}")
    print(f"Number of peanut butter crepes: {peanut_crepes.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns $300. An emergency fire fighter works 6 hours per shift and earns $100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of $7000, how many of each should the fire department hire to minimize the total number of fire fighters?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
regular_firefighters = intvar(0, 100, name="regular_firefighters")
emergency_firefighters = intvar(0, 100, name="emergency_firefighters")

# Define the constraints
hours_regular = regular_firefighters * 10
hours_emergency = emergency_firefighters * 6
total_hours = hours_regular + hours_emergency >= 300

cost_regular = regular_firefighters * 300
cost_emergency = emergency_firefighters * 100
total_cost = cost_regular + cost_emergency <= 7000

# Define the objective
model = Model(minimize=regular_firefighters + emergency_firefighters)

# Solve the problem
model += [total_hours, total_cost]
solver = CPM_ortools(model)
solver.solve()

print("Regular Firefighters:", regular_firefighters.value())
print("Emergency Firefighters:", emergency_firefighters.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mall buys two types of hand sanitizer machines, a motion activated one and a manual one. The motion activated one can deliver 50 drops per minute and consumes 30 kWh. The manual one can deliver 75 drops per minute and consumes 20 kWh. Since the motion activated one is more hygienic, at most 40% of the machines can be manual. In addition, at least 3 should be motion activated. If the mall must be able to deliver at least 1000 drops per minute and can use at most 500 kWh per minute, how many of each machine should they buy to minimize the total number of machines?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
num_motion_activated = intvar(0, 100, name="num_motion_activated")
num_manual = intvar(0, 100, name="num_manual")

# Define the constraints
# Motion activated machine delivers 50 drops per minute and consumes 30 kWh
# Manual machine delivers 75 drops per minute and consumes 20 kWh
drops_per_minute = num_motion_activated * 50 + num_manual * 75 >= 1000
kwh_per_minute = num_motion_activated * 30 + num_manual * 20 <= 500

# At most 40% of the machines can be manual
at_most_manual = num_manual <= 0.4 * (num_motion_activated + num_manual)

# At least 3 machines should be motion activated
at_least_motion_activated = num_motion_activated >= 3

# Define the objective (minimize the total number of machines)
total_machines = num_motion_activated + num_manual
minimize(total_machines)

# Solve the problem
model = Model(drops_per_minute, kwh_per_minute, at_most_manual, at_least_motion_activated)
stats = model.solve()

# Print the optimal number of each machine
if stats and stats['status'] == 'optimal':
    print(f"Number of motion activated machines: {num_motion_activated.value()}")
    print(f"Number of manual machines: {num_manual.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A hot dog company can build two types of butcher shops, a small shop and a large shop. A small shop can make 30 hot dogs per day and requires 2 workers. A large shop can make 70 hot dogs per day and requires 4 workers. The company must make at least 500 hot dogs per day but they only have available 30 workers. How many of each butcher shop should the company build to minimize the total number of butcher shops?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_shops = intvar(0, 10)  # number of small butcher shops
num_large_shops = intvar(0, 10)  # number of large butcher shops

# Define the constraints
workers_constraint = num_small_shops*2 + num_large_shops*4 <= 30
hotdogs_constraint = num_small_shops*30 + num_large_shops*70 >= 500

# Define the objective (minimize the total number of butcher shops)
total_shops = num_small_shops + num_large_shops

# Define the model
model = Model(
    workers_constraint,
    hotdogs_constraint,
    total_shops
)

# Solve the model
minimize(
    sum(total_shops)
)

# Print the optimal solution
print(f"Number of small butcher shops: {num_small_shops.value()}")
print(f"Number of large butcher shops: {num_large_shops.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An airport buys two types of vehicles, a 4-wheeler and 3-wheeler, to help move luggage. A 4-wheeler vehicle can move 60 luggage per day and produces 30 units of pollutant per day. A 3-wheeler vehicle can move 40 luggage per day and produces 15 units of pollutant per day. The airport needs to be able to move at least 1000 luggage per day. To avoid over-polluting the airport, they can produce at most 430 units of pollutant per day. How many of each vehicle should the airport buy to minimize the total number of vehicles needed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
num_4wheeler = intvar(0, 100)  # number of 4-wheeler vehicles
num_3wheeler = intvar(0, 100)  # number of 3-wheeler vehicles

# Define constraints
constraint_luggage = num_4wheeler * 60 + num_3wheeler * 40 >= 1000
constraint_pollutant = num_4wheeler * 30 + num_3wheeler * 15 <= 430

# Define objective function
total_vehicles = num_4wheeler + num_3wheeler

# Define the CP model
model = Model(
    constraint_luggage,
    constraint_pollutant,
    minimize=total_vehicles
)

# Solve the CP model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of 4-wheeler vehicles: {num_4wheeler.value()}")
    print(f"Number of 3-wheeler vehicles: {num_3wheeler.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A scientist is conducting two experiments to produce electricity, experiment alpha and experiment beta. In experiment alpha, 3 units of metal and 5 units of acid are required to produce 8 units of electricity. In experiment beta, 5 units of metal and 4 units of acid are required to produced 10 units of electricity. The lab has 800 units of metal and 750 units of acid available. How many of each experiment should the scientist conduct to maximize the total amount of electricity produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
alpha = intvar(0, 800, name="alpha")  # number of experiments of type alpha
beta = intvar(0, 800, name="beta")  # number of experiments of type beta

# Define the constraints
metal_constraint = 3*alpha + 5*beta <= 800
acid_constraint = 5*alpha + 4*beta <= 750

# Define the objective function to maximize
total_electricity = 8*alpha + 10*beta
maximize(total_electricity)

# Solve the problem
model = Model(metal_constraint, acid_constraint)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of experiments of type alpha: {alpha.value()}")
    print(f"Number of experiments of type beta: {beta.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A man fishes in a 250 acre lake and can catch fish either using a net or fishing line. For each acre of the lake, using a net will catch 8 fish and requires 4 units of bait but also causes 2 units of pain for the fisherman. For each acre of the lake, using a fishing line will catch 5 fish and requires 3 units of bait but also causes 1 unit of pain for the fisherman. The fisherman has available 800 units of bait and can tolerate at most 350 units of pain. For how many acres each should he use each fishing method to maximize the amount of fish he can catch?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
net_acres = intvar(0, 250)
line_acres = intvar(0, 250)

# Define the constraints
model = Model(
    net_acres*8 + line_acres*5 <= 800,  # bait constraint
    net_acres*2 + line_acres <= 350  # pain constraint
)

# Define the objective
objective = -1*(net_acres*8 + line_acres*5)  # maximize the amount of fish caught

# Solve the problem
model.minimize(objective)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Optimal acres for using net:", net_acres.value())
    print("Optimal acres for using fishing line:", line_acres.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A coffee shop sells mochas and regular coffees. Each mocha requires 3 units of coffee powder and 6 units of milk. Each regular coffee requires 6 units of coffee powder and 2 units of milk. The shop has available 400 units of coffee powder and 500 units of milk. Making a mocha takes 5 minutes and making a regular coffee takes 3 minutes. Since mochas are more popular among people, the shop must make at least 3 times as many mochas as regular coffees. How many of each should they make to minimize the total production time?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_mochas = intvar(0, 100, name="num_mochas")
num_regular_coffees = intvar(0, 100, name="num_regular_coffees")

# Define the constraints
model = Model(
    num_mochas*3 + num_regular_coffees*6 <= 400,  # Coffee powder constraint
    num_mochas*6 + num_regular_coffees*2 <= 500,  # Milk constraint
    num_mochas >= 3*num_regular_coffees  # Mochas must be at least 3 times regular coffees
)

# Define the objective function
total_time = num_mochas*5 + num_regular_coffees*3

# Minimize the total production time
model.minimize(total_time)

# Solve the model
stats = model.solve()

# Print the optimal solution
if stats and stats.is_solution:
    print(f"Number of mochas to make: {num_mochas.value()}")
    print(f"Number of regular coffees to make: {num_regular_coffees.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A butcher shop is buying meat slicers for their shop, a manual and automatic slicer. The manual slicer can cut 5 slices per minute while the automatic slicer can cut 8 slices per minute. In addition, to make sure all the parts operate smoothly, the manual slicer requires 3 units of grease per minute while the automatic slicer requires 6 units of grease per minute. Since the automatic slicer does not need someone to operate it, the number of manual slicers must be less than the number of automatic slicers. In addition, the butcher shop needs to be able to cut at least 50 slices per minute but can use at most 35 units of grease per minute. How many of each slicer should the butcher shop buy to minimize the total number of slicers in the shop?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_manual_slicers = intvar(0, 10)  # Number of manual slicers
num_automatic_slicers = intvar(0, 10)  # Number of automatic slicers

# Define the constraints
# The total number of slices per minute should be at least 50
constraint_slices = 5*num_manual_slicers + 8*num_automatic_slicers >= 50

# The total amount of grease used per minute should be at most 35
constraint_grease = 3*num_manual_slicers + 6*num_automatic_slicers <= 35

# The number of manual slicers must be less than the number of automatic slicers
constraint_num_slicers = num_manual_slicers < num_automatic_slicers

# Define the objective function to minimize the total number of slicers
objective = num_manual_slicers + num_automatic_slicers

# Define the model
model = Model(
    constraint_slices,
    constraint_grease,
    constraint_num_slicers,
    minimize=objective
)

# Get the solver and solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
opt_num_manual_slicers = num_manual_slicers.value()
opt_num_automatic_slicers = num_automatic_slicers.value()

print("Optimal number of manual slicers:", opt_num_manual_slicers)
print("Optimal number of automatic slicers:", opt_num_automatic_slicers)
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A water company sells water in glass and plastic bottles. A glass bottle can hole 500 ml of water while a plastic bottle can hold 750 ml of water. Because most customer prefer plastic bottles, the number of plastic bottles must be at least 3 times the number of glass bottles. However, there must be at least 20 glass bottles. If the company has available 250000 ml of water, how many of each bottle should be made to maximize the total number of bottles?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
glass_bottles = intvar(20, 1000, name="glass_bottles")
plastic_bottles = intvar(60, 3000, name="plastic_bottles")

# Define the problem
problem = Model(
    glass_bottles * 500 + plastic_bottles * 750 <= 250000,
    plastic_bottles >= 3 * glass_bottles
)

# Maximize the total number of bottles
objective = -1 * (glass_bottles + plastic_bottles)
problem.add(maximize(objective))

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of glass bottles: {glass_bottles.value()}")
    print(f"Number of plastic bottles: {plastic_bottles.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
goat_curry = intvar(0, 1000, name="goat_curry")
chicken_curry = intvar(0, 1000, name="chicken_curry")

# Define the problem
model = Model(
    goat_curry >= chicken_curry,  # Number of goat curry bowls must be larger than chicken curry bowls
    chicken_curry >= 0.25 * (goat_curry + chicken_curry),  # At least 25% of the bowls must be chicken curry
    3 * goat_curry + 5 * chicken_curry <= 1500,  # Total units of goat meat constraint
    6 * goat_curry + 5 * chicken_curry <= 2000  # Total units of chicken meat constraint
)

# Define the objective
objective = minimize(6 * goat_curry + 5 * chicken_curry)  # Minimize the total amount of curry base used

# Solve the problem
model += objective
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of goat curry bowls: {goat_curry.value()}")
    print(f"Number of chicken curry bowls: {chicken_curry.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An accounting firm employs part time workers and full time workers. Full time workers work 8 hours per shift while part time workers work 4 hours per shift. In addition, full time workers are paid $300 per shift while part time workers are paid $100 per shift. Currently, the accounting firm has a project requiring 500 hours of labor. If the firm has a budget of $15000, how many of each type of worker should be scheduled to minimize the total number of workers.
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_full_time = intvar(0, 500//8, name="num_full_time")
num_part_time = intvar(0, 500//4, name="num_part_time")

# Define the constraints
model = Model(
    num_full_time*8 + num_part_time*4 == 500,  # Total hours constraint
    num_full_time*300 + num_part_time*100 <= 15000  # Budget constraint
)

# Define the objective
total_workers = num_full_time + num_part_time
model.minimize(total_workers)

# Solve the model
solution = CPM_ortools(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
num_machines_A = intvar(5, 100, name="num_machines_A")  # at least 5 machines of type A
num_machines_B = intvar(0, 30, name="num_machines_B")  # at most 30% of the machines can be of type B

# Define the constraints
items_produced_A = 30 * num_machines_A
items_produced_B = 50 * num_machines_B
total_items_produced = items_produced_A + items_produced_B >= 1000

energy_consumed_A = 100 * num_machines_A
energy_consumed_B = 120 * num_machines_B
total_energy_consumed = energy_consumed_A + energy_consumed_B <= 3000

# Define the objective
total_machines = num_machines_A + num_machines_B

# Define the model
model = Model(minimize=total_machines, constraints=[total_items_produced, total_energy_consumed])

# Solve the model
cpmpy.solvers.cbc(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_medium_factories = intvar(0, 10)  # Number of medium sized factories
num_small_factories = intvar(0, 10)   # Number of small factories

# Define constraints
toy_production = num_medium_factories * 50 + num_small_factories * 35 >= 250
operator_constraint = num_medium_factories * 3 + num_small_factories * 2 <= 16

# Define objective
total_factories = num_medium_factories + num_small_factories

# Define CP model
model = Model(toy_production, operator_constraint, total_factories)

# Solve model
solver = CPM_ortools(model)
solution = solver.solve()

# Print solution
if solution:
    print("Number of medium sized factories:", num_medium_factories.value())
    print("Number of small factories:", num_small_factories.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chemical plant can buy two types of generators, generator A and generator B, which use two different processes to generate hydrogen. Generator A uses an electrolysis process and produces 40 cubic meters of hydrogen as well as 300 units of pollutants every day. Generator B uses a fermentation process to produce 30 cubic meters of hydrogen per day while outputting 200 units of pollutants. The chemical plant must make a minimum of 1000 cubic meters of hydrogen per day but due to environmental restrictions they can produce at most 3000 units of pollutant. How many of each type of generator should they buy to minimize the number of generators needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_generators_A = intvar(0, 100)  # Number of generator A to buy
num_generators_B = intvar(0, 100)  # Number of generator B to buy

# Define constraints
# Total hydrogen produced per day
hydrogen_A = 40 * num_generators_A
hydrogen_B = 30 * num_generators_B
total_hydrogen = hydrogen_A + hydrogen_B >= 1000

# Total pollutants produced per day
pollutants_A = 300 * num_generators_A
pollutants_B = 200 * num_generators_B
total_pollutants = pollutants_A + pollutants_B <= 3000

# Define objective (minimize number of generators)
objective = num_generators_A + num_generators_B

# Model
model = Model(
    total_hydrogen,
    total_pollutants,
    minimize=objective
)

# Solve model
solver = CPM_ortools(model)
solution = solver.solve()

# Print solution
if solution:
    print(f"Number of generator A to buy: {num_generators_A.value()}")
    print(f"Number of generator B to buy: {num_generators_B.value()}")
else:
    print("No solution found")
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There are two chemical reactions, chemical reaction A and chemical reaction B. Chemical reaction A requires 5 units of rare inert gas and 6 units of treated water to produce 10 units of a rare compound. Chemical reaction B requires 7 units of rare inert gas and 3 units of treater water to produce 8 units of a rare compound. There are 1000 units of the rare inert gas and 800 units of treated water available in the lab. How many reactions of each type should be done to maximize the amount of rare compound produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_reactions_A = intvar(0, 1000, name="num_reactions_A")
num_reactions_B = intvar(0, 1000, name="num_reactions_B")

# Define the constraints
constraint_gas = 5*num_reactions_A + 7*num_reactions_B <= 1000
constraint_water = 6*num_reactions_A + 3*num_reactions_B <= 800

# Define the objective function to maximize the amount of rare compound produced
objective = -10*num_reactions_A - 8*num_reactions_B

# Define the model
model = Model(
    constraint_gas,
    constraint_water,
    maximize(objective)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of reactions of type A: {num_reactions_A.value()}")
    print(f"Number of reactions of type B: {num_reactions_B.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mining company has available a total of 100 square miles of mining sites and considering the use of two mining techniques: heap leaching and vat leaching. For each square mile of land, heap leaching technique can have a daily production of 3 tons of rare earth oxide per square miles but it also creates 8 tons of polluted wastewater and requires 10 extraction machines. On the other hand, vat leaching technique produces 5 tons of rare earth oxide per square miles per day while creating 17 tons of polluted wastewater and requiring 20 extraction machines. There are 100 machines available and due to environmental regulations, the amount of polluted wastewater must be at most 90 tons daily. Find the proportion of lands that use each mining technique in order to maximize the daily production of rare earth oxide.
N/A
```python
from cpmpy import *
import numpy as np

# Constants
total_square_miles = 100
daily_wastewater_limit = 90
heap_leaching_production = 3
heap_leaching_wastewater = 8
heap_leaching_machines = 10
vat_leaching_production = 5
vat_leaching_wastewater = 17
vat_leaching_machines = 20
total_machines = 100

# Variables
heap_leaching_proportion = intvar(0, total_square_miles)
vat_leaching_proportion = total_square_miles - heap_leaching_proportion

# Constraints
production_constraint = heap_leaching_proportion * heap_leaching_production + vat_leaching_proportion * vat_leaching_production
wastewater_constraint = heap_leaching_proportion * heap_leaching_wastewater + vat_leaching_proportion * vat_leaching_wastewater <= daily_wastewater_limit
machine_constraint = heap_leaching_proportion * heap_leaching_machines + vat_leaching_proportion * vat_leaching_machines <= total_machines

# Model
model = Model(
    production_constraint,
    wastewater_constraint,
    machine_constraint
)

# Objective
model.maximize(production_constraint)

# Solve the model
solution = model.solve()

# Get the optimal solution
optimal_heap_leaching_proportion = solution[heap_leaching_proportion]
optimal_vat_leaching_proportion = solution[vat_leaching_proportion]

print("Optimal proportion of lands using heap leaching technique:", optimal_heap_leaching_proportion)
print("Optimal proportion of lands using vat leaching technique:", optimal_vat_leaching_proportion)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars.  If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
milk_chocolate_bars = intvar(0, 1000, shape=1, name="milk_chocolate_bars")
dark_chocolate_bars = intvar(0, 1000, shape=1, name="dark_chocolate_bars")

# Define the constraints
model = Model(
    milk_chocolate_bars * 4 + dark_chocolate_bars * 6 <= 2000,  # Cocoa constraint
    milk_chocolate_bars * 7 + dark_chocolate_bars * 3 <= 1750,  # Milk constraint
    milk_chocolate_bars >= 2 * dark_chocolate_bars,  # At least 2 times as many milk chocolate bars as dark chocolate bars
)

# Define the objective function
total_production_time = milk_chocolate_bars * 15 + dark_chocolate_bars * 12
model.minimize(total_production_time)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of milk chocolate bars: {milk_chocolate_bars.value()}")
    print(f"Optimal number of dark chocolate bars: {dark_chocolate_bars.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute.  Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
premium_printers = intvar(0, 100, shape=1, name="premium_printers")
regular_printers = intvar(0, 100, shape=1, name="regular_printers")

# Define constraints
model = Model(
    premium_printers >= 0,
    regular_printers >= 0,
    premium_printers >= regular_printers,
    30 * premium_printers + 20 * regular_printers >= 200,
    4 * premium_printers + 3 * regular_printers <= 35
)

# Define objective
objective = premium_printers + regular_printers

# Solve the problem
minimize(objective, model, solver=CPM_ortools())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A vine company sells vine in vintage and regular bottles. A vintage bottle can hold 500 ml of vine while a regular bottle can hold 750 ml of vine. The company has available 100000 ml of vine. Because vintage bottles are mostly bought by collectors, the number of regular bottles must be at least 4 times as much as the number of vintage bottles. However, at least 10 vintage bottles must be made. How many of each should be made to maximize the total number of bottles produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_vintage = intvar(10, 100, name="num_vintage")
num_regular = intvar(40, 400, name="num_regular")

# Define the constraints
vine_used = 500*num_vintage + 750*num_regular <= 100000
regular_bottles_at_least_4_times = num_regular >= 4*num_vintage

# Define the objective
total_bottles = num_vintage + num_regular

# Define the model
model = Model(vine_used, regular_bottles_at_least_4_times)

# Solve the model
model.minimize(-total_bottles)  # Maximizing the total number of bottles

# Get the solution
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of vintage bottles: {num_vintage.value()}")
    print(f"Number of regular bottles: {num_regular.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
peach_packs = intvar(0, 1000, shape=1)
cherry_packs = intvar(0, 1000, shape=1)

# Define the constraints
model = Model(
    peach_packs >= cherry_packs + 1,  # Peach candy packs must be larger than cherry candy packs
    cherry_packs >= 0.3 * (peach_packs + cherry_packs),  # At least 30% of the packs must be cherry flavored
    3 * peach_packs + 5 * cherry_packs <= 3000,  # Peach flavoring constraint
    5 * cherry_packs + 4 * peach_packs <= 4000  # Cherry flavoring constraint
)

# Define the objective
objective = 5 * cherry_packs + 4 * peach_packs

# Minimize the total amount of special syrup used
model.minimize(objective)
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A patient in the hospital can take two pills, Pill 1 and Pill 2. Per pill, pill 1 provides 0.2 units of pain medication and 0.3 units of anxiety medication. Per pill, pill 2 provides 0.6 units of pain medication and 0.2 units of anxiety medication. In addition, pill 1 causes 0.3 units of discharge while pill 2 causes 0.1 units of discharge. At most 6 units of pain medication can be provided and at least 3 units of anxiety medication must be provided. How many pills of each should the patient be given to minimize the total amount of discharge?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
pill1 = intvar(0, 6, shape=1)
pill2 = intvar(0, 6, shape=1)

# Define constraints
pain_medication = pill1*0.2 + pill2*0.6 <= 6
anxiety_medication = pill1*0.3 + pill2*0.2 >= 3
minimize_discharge = pill1*0.3 + pill2*0.1

# Define the model
model = Model(minimize_discharge, pain_medication, anxiety_medication)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Pill 1: {pill1.value()}")
    print(f"Pill 2: {pill2.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
alpha_bottles = intvar(0, 100, name="alpha_bottles")
omega_bottles = intvar(0, 100, name="omega_bottles")

# Define the constraints
protein_constraint = 30*alpha_bottles + 20*omega_bottles >= 100
calories_constraint = 350*alpha_bottles + 300*omega_bottles >= 2000
caffeine_constraint = omega_bottles <= 0.35*(alpha_bottles + omega_bottles)

# Objective function to minimize sugar intake
sugar_intake = 20*alpha_bottles + 15*omega_bottles

# Define the model
model = Model(
    protein_constraint,
    calories_constraint,
    caffeine_constraint,
    minimize(sugar_intake)
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of alpha bottles: {alpha_bottles.value()}")
    print(f"Optimal number of omega bottles: {omega_bottles.value()}")
    print(f"Minimum sugar intake: {sugar_intake.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A summer camps does science experiments in two pre filled beakers, beaker 1 and beaker 2. Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime. Beaker 2 uses 6 units of flour and 3 units of special liquid to make 3 units of slime.  However, beaker 1 creates 4 units of waste while beaker 2 creates 2 units of waste. The summer camp has available 150 units of flour and 100 units of special liquid. If at most 30 units of waste can be produced, how many of each beaker should be used to maximize the amount of slime produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
beaker1 = intvar(0, 100, name="beaker1")  # units of beaker 1 used
beaker2 = intvar(0, 100, name="beaker2")  # units of beaker 2 used

# Define constraints
constraint_flour = beaker1*4 + beaker2*6 <= 150  # total flour constraint
constraint_liquid = beaker1*6 + beaker2*3 <= 100  # total special liquid constraint
constraint_waste = beaker1*4 + beaker2*2 <= 30  # total waste constraint

# Define objective function to maximize slime produced
slime_produced = beaker1*5 + beaker2*3

# Model
model = Model(
    constraint_flour,
    constraint_liquid,
    constraint_waste,
    maximize(slime_produced)
)

# Solve model
solver = CPM_ortools(model)
solver.solve()

# Get optimal values
optimal_beaker1 = beaker1.value()
optimal_beaker2 = beaker2.value()

print("Optimal units of beaker 1 used:", optimal_beaker1)
print("Optimal units of beaker 2 used:", optimal_beaker2)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An dog hospital has 2000 units of tooth medication to make both small and large bones. A small bone requires 10 units of tooth medication and 12 units of meat. A large bone requires 15 units of tooth medication and 15 units of meat. Since most dogs prefer the small bones, at least 50% of the bones made must be small. In addition, the hospital must make at least 30 large bones. How many of each bone should be made to minimize the amount of meat needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
small_bones = intvar(0, 2000, name="small_bones")
large_bones = intvar(0, 2000, name="large_bones")

# Define the problem
model = Model(
    small_bones >= 0,
    large_bones >= 0,
    small_bones + large_bones <= 2000,  # Total units of tooth medication constraint
    10*small_bones + 15*large_bones <= 2000,  # Total units of meat constraint
    small_bones >= 0.5*(small_bones + large_bones),  # At least 50% of bones must be small
    large_bones >= 30  # At least 30 large bones constraint
)

# Define the objective
objective = minimize(10*small_bones + 15*large_bones)

# Solve the problem
model += objective
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of small bones to make: {small_bones.value()}")
    print(f"Number of large bones to make: {large_bones.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A scientist in the arctic needs to get enough vitamin D and vitamin C in his diet by drinking orange and apple juice. Each box of orange juice contains 10 units of vitamin D and 8 units of vitamin C. Each box of apple juice contains 12 units of vitamin D and 6 units of vitamin C. Since the scientist prefers apple juice, he must drink at least 3 times as many apple juice boxes and orange juice boxes. However, he must also drink at least 3 orange juice boxes. To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C. How many of each juice box should he drink to maximize his total vitamin D intake?
N/A
```python
from cpmpy import *

# Define the variables
orange_boxes = intvar(3, 100, name="orange_boxes")
apple_boxes = intvar(9, 300, name="apple_boxes")

# Define the constraints
model = Model(
    orange_boxes >= 3,
    apple_boxes >= 3 * orange_boxes,
    10 * orange_boxes + 12 * apple_boxes <= 300
)

# Define the objective
total_vitamin_D = 10 * orange_boxes + 12 * apple_boxes
model.maximize(total_vitamin_D)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print(f"Number of orange juice boxes: {orange_boxes.value()}")
    print(f"Number of apple juice boxes: {apple_boxes.value()}")
    print(f"Total vitamin D intake: {total_vitamin_D.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A cleaning company uses a cleansing chemical and odor-removing chemical to clean a house. Each unit of the cleansing chemical takes 4 units to be effective while each unit of the odor-removing chemical takes 6 minutes to be effective. The company must use at least 100 units of the cleansing chemical. In total, at least 300 units of chemicals can be used per house. Further, because the cleansing chemical is strong, there can be at most twice the amount of cleansing chemical as odor-removing chemical. How many units of each should be used to minimize the total time it takes for a house to be cleaned?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
cleansing_chemical = intvar(100, 200, name="cleansing_chemical")
odor_removing_chemical = intvar(0, 100, name="odor_removing_chemical")

# Define constraints
model = Model(
    cleansing_chemical * 4 + odor_removing_chemical * 6 <= 300,  # Total units of chemicals constraint
    cleansing_chemical >= 100,  # Minimum units of cleansing chemical constraint
    cleansing_chemical <= 2 * odor_removing_chemical  # Maximum ratio constraint
)

# Define objective
total_time = cleansing_chemical * 4 + odor_removing_chemical * 6
model.minimize(total_time)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Optimal units of cleansing chemical: {cleansing_chemical.value()}")
    print(f"Optimal units of odor-removing chemical: {odor_removing_chemical.value()}")
    print(f"Minimum total time: {total_time.value()}")
else:
    print("No solution found")
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A drug company is making allergy pills and fever reducing pills in two factories, factory 1 and factory 2. Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour. Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour.  Factory 1 is much more efficient and only requires 20 units of a rare compound while factory 2 requires 30 units of a rare compound. The company only has available 1000 units of the rare compound. If the company must make at least 700 allergy pills and 600 fever reducing pills, how many hours should each factory be run to minimize the total time needed?
N/A
```python
from cpmpy import *
import cpmpy.model as cpm

# Define variables
hours_factory1 = intvar(0, 1000, name="hours_factory1")
hours_factory2 = intvar(0, 1000, name="hours_factory2")

# Define constraints
# Production constraints
production_allergy_pills = 20*hours_factory1 + 10*hours_factory2 >= 700
production_fever_pills = 15*hours_factory1 + 30*hours_factory2 >= 600

# Rare compound constraint
rare_compound_constraint = 20*hours_factory1 + 30*hours_factory2 <= 1000

# Objective function (to minimize total time)
total_time = hours_factory1 + hours_factory2

# Define the model
model = cpm.Model([production_allergy_pills, production_fever_pills, rare_compound_constraint, total_time])

# Find the optimal solution
minimize(total_time)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
fish_meals = intvar(0, 100, name="fish_meals")
chicken_meals = intvar(0, 100, name="chicken_meals")

# Define constraints
protein_constraint = 10*fish_meals + 15*chicken_meals >= 130
iron_constraint = 12*fish_meals + 8*chicken_meals >= 120
fat_constraint = 7*fish_meals + 10*chicken_meals == min(7*fish_meals + 10*chicken_meals)

# Preference constraint
chicken_preference = chicken_meals >= 2*fish_meals

# Define objective
model = Model(minimize=fat_constraint)

# Solve the problem
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of fish meals:", fish_meals.value())
    print("Number of chicken meals:", chicken_meals.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmaceutical company makes skin cream in batches, a regular batch and premium batch, to sell to hospitals. The regular batch requires 50 units of medicinal ingredients and 40 units of rehydration product. A premium batch requires 40 units of medicinal ingredients and 60 units of rehydration product. The company has available 3000 units of medicinal ingredients and 3500 units of rehydration product. Since the premium batch sells better, the number of regular batches must be less than the number of premium batches. In addition, the company must make at least 10 regular batches. If a regular batch can treat 50 people and a premium batch can treat 30 people, how many of each batch should be made to maximize the number of people that can be treated?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
regular_batches = intvar(10, 100, shape=1)
premium_batches = intvar(0, 100, shape=1)

# Define constraints
medicinal_ingredients_regular = 50 * regular_batches
medicinal_ingredients_premium = 40 * premium_batches
rehydration_regular = 40 * regular_batches
rehydration_premium = 60 * premium_batches

model = Model(
    medicinal_ingredients_regular + medicinal_ingredients_premium <= 3000,
    rehydration_regular + rehydration_premium <= 3500,
    regular_batches < premium_batches,
    regular_batches >= 10
)

# Define objective
people_treated_regular = 50 * regular_batches
people_treated_premium = 30 * premium_batches
total_people_treated = people_treated_regular + people_treated_premium

model.maximize(total_people_treated)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

print("Regular batches:", regular_batches.value())
print("Premium batches:", premium_batches.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinic takes patient blood pressure either using an automatic machine or a manual machine. The automatic machine takes 10 minutes per patient while the manual machine takes 15 minutes per patient. Since the automatic machine frequently breaks, at least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine. However, at least 20 patient can be processed by the automatic machine. If the clinic is open for 20000 minutes, maximize the number of patients whose blood pressure can be taken.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
automatic_patients = intvar(0, 20)  # number of patients processed by automatic machine
manual_patients = intvar(0, 2*automatic_patients)  # number of patients processed by manual machine

# Define the constraints
model = Model([
    automatic_patients*10 + manual_patients*15 <= 20000,  # total time constraint
    automatic_patients >= 20,  # at least 20 patients processed by automatic machine
    manual_patients >= 2*automatic_patients  # at least twice as many patients processed by manual machine
])

# Define the objective
objective = -automatic_patients - manual_patients  # maximize the number of patients processed

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_automatic_patients = automatic_patients.value()
optimal_manual_patients = manual_patients.value()

print("Optimal number of patients processed by automatic machine:", optimal_automatic_patients)
print("Optimal number of patients processed by manual machine:", optimal_manual_patients)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A patient with a sore throat can drink two syrups, syrup 1 and syrup 2 for treatment. Per serving, syrup 1 delivers 0.5 units of medicine to the throat and 0.4 units of medicine to the lungs. Per serving, syrup 2 delivers 0.2 units of medicine to the throat and 0.5 units of medicine to the lungs. Furthermore, syrup 1 contains 0.5 units of sugar while syrup 2 contains 0.3 units of sugar per serving. The patient can get at most 5 units of medicine for the throat and at least 4 units of medicine to the lungs. How many servings of each should the patient take to minimize his sugar intake?
N/A
```python
from cpmpy import *

# Define the variables
syrup1_servings = intvar(0, 10)  # servings of syrup 1
syrup2_servings = intvar(0, 10)  # servings of syrup 2

# Define the constraints
model = Model(
    syrup1_servings * 0.5 + syrup2_servings * 0.2 <= 5,  # total medicine for throat <= 5
    syrup1_servings * 0.4 + syrup2_servings * 0.5 >= 4,  # total medicine for lungs >= 4
    syrup1_servings * 0.5 + syrup2_servings * 0.3 == 0.5 * syrup1_servings + 0.3 * syrup2_servings  # minimize sugar intake
)

# Find the optimal solution
minimize(sum(syrup1_servings + syrup2_servings), model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A sailor can eat either a crab cakes or a lobster roll for his meals. He needs to ensure he gets at least 80 units of vitamin A and 100 units of vitamin C. Each crab cake contains 5 units of vitamin A and 7 units of vitamin C. Each lobster roll contains 8 units of vitamin A and 4 units of vitamin C. In addition, since lobster is more expensive, at most 40% of his meals should be lobster rolls. If each crab cake contains 4 units of unsaturated fat and each lobster roll contains 6 units of unsaturated fat, how many of each should he eat to minimize his unsaturated fat intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_crab_cakes = intvar(0, 100, name="num_crab_cakes")
num_lobster_rolls = intvar(0, 100, name="num_lobster_rolls")

# Define the constraints
# Vitamin A constraint
vitamin_a_constraint = 5*num_crab_cakes + 8*num_lobster_rolls >= 80

# Vitamin C constraint
vitamin_c_constraint = 7*num_crab_cakes + 4*num_lobster_rolls >= 100

# Percentage constraint for lobster rolls
lobster_percentage_constraint = num_lobster_rolls <= 0.4*(num_crab_cakes + num_lobster_rolls)

# Unsaturated fat constraint
unsaturated_fat_constraint = 4*num_crab_cakes + 6*num_lobster_rolls

# Define the objective (minimize unsaturated fat intake)
model = Model(minimize=unsaturated_fat_constraint, constraints=[vitamin_a_constraint, vitamin_c_constraint, lobster_percentage_constraint])

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of crab cakes: {num_crab_cakes.value()}")
    print(f"Number of lobster rolls: {num_lobster_rolls.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A science show preforms two different demonstrations, demonstration 1 and demonstration 2. In demonstration 1, 10 units of mint and 20 units of the active ingredient is used to make 25 units of minty foam. In demonstration 2, 12 units of mint and 15 units of the active ingredient is used to make 18 units of minty foam. In addition, demonstration 1 creates 5 units of black tar while demonstration 2 creates 3 units of black tar. The show has available 120 units of mint and 100 units of active ingredients. If at most 50 units of black tar can be produced, how many of each demonstration should be done to maximize the amount of minty foam produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
demo1 = intvar(0, 10, shape=1)
demo2 = intvar(0, 10, shape=1)

# Define constraints
mint_constraint = 10*demo1 + 12*demo2 <= 120
active_ingredient_constraint = 20*demo1 + 15*demo2 <= 100
black_tar_constraint = 5*demo1 + 3*demo2 <= 50

# Objective function
total_foam = 25*demo1 + 18*demo2

# Define the model
model = Model(
    mint_constraint,
    active_ingredient_constraint,
    black_tar_constraint,
    total_foam
)

# Solve the model
minimize(
    -total_foam,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A lab has 20000 mg of mRNA anti-viral available to make children's and adult vaccines. Each children's vaccine contains 50 mg of mRNA and 50 mg of fever suppressant. Each adult vaccine contains 75 mg of mRNA and 75 mg of fever suppressant. Since adult vaccines are more essential, at least 70% of vaccines should be adult vaccines. However, at least 50 children's vaccines should be made. How many of each vaccine should be made to minimize the amount of fever suppressant used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
total_mRNA = 20000
mRNA_children = 50
mRNA_adult = 75
fever_suppressant_children = 50
fever_suppressant_adult = 75
min_children_vaccines = 50
min_adult_percentage = 0.7

# Variables
children_vaccines = intvar(0, total_mRNA // mRNA_children, name="children_vaccines")
adult_vaccines = intvar(0, total_mRNA // mRNA_adult, name="adult_vaccines")

# Constraints
total_mRNA_constraint = children_vaccines * mRNA_children + adult_vaccines * mRNA_adult <= total_mRNA
min_children_vaccines_constraint = children_vaccines >= min_children_vaccines
min_adult_percentage_constraint = adult_vaccines >= min_adult_percentage * (children_vaccines + adult_vaccines)

# Objective
total_fever_suppressant = children_vaccines * fever_suppressant_children + adult_vaccines * fever_suppressant_adult
minimize(total_fever_suppressant)

# Model
model = Model(total_mRNA_constraint, min_children_vaccines_constraint, min_adult_percentage_constraint)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
print(f"Number of children's vaccines: {children_vaccines.value()}")
print(f"Number of adult vaccines: {adult_vaccines.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A parent feeds their baby two flavors of baby food, apple and carrot, in order to meet the babies fat and folate requirements. Each serving of apple flavored baby food contains 2 units of fat and 5 units of folate. Each serving of carrot flavored baby food contains 4 units of fat and 3 units of folate. The baby does not like the carrot flavor, and therefore he must eat three times as many apple flavored baby food as carrot flavored baby food. However, he must eat at least 2 servings of carrot flavored baby food. If the baby can consume at most 100 units of folate, how many servings of each should he eat to maximize his fat intake?
N/A
```python
from cpmpy import *

# Define the variables
apple_servings = intvar(0, 100, shape=1, name="apple_servings")
carrot_servings = intvar(2, 100, shape=1, name="carrot_servings")

# Define the constraints
fat_in_apple = 2
fat_in_carrot = 4
folate_in_apple = 5
folate_in_carrot = 3

model = Model(
    apple_servings == 3 * carrot_servings,
    folate_in_apple * apple_servings + folate_in_carrot * carrot_servings <= 100
)

# Define the objective
maximize(
    fat_in_apple * apple_servings + fat_in_carrot * carrot_servings
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both fertilizer and seeds need to be added to a lawn. One unit of fertilizer takes 0.5 minutes to be effective while one unit of seeds takes 1.5 minutes to be effective. There can be at most 300 units of fertilizer and seeds combined added to the lawn. In addition at least 50 units of fertilizer need to be added. Since the lawn is really patchy, there can be at most twice the amount of fertilizer as seeds. How many units of each should be added to minimize the total time it takes for the lawn to be ready?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
fertilizer = intvar(50, 300, name="fertilizer")
seeds = intvar(0, 150, name="seeds")

# Define the model
model = Model(
    fertilizer + seeds <= 300,  # Total units of fertilizer and seeds should be at most 300
    fertilizer >= 50,  # At least 50 units of fertilizer need to be added
    fertilizer <= 2 * seeds,  # At most twice the amount of fertilizer as seeds
)

# Define the objective function to minimize the total time
total_time = 0.5 * fertilizer + 1.5 * seeds
model.minimize(total_time)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal values
if solution:
    print("Optimal number of units of fertilizer:", fertilizer.value())
    print("Optimal number of units of seeds:", seeds.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmacy has two factories, factory 1 and factory 2, where they make acne cream and anti-bacterial cream. Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour. Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour. Factory 1 requires 30 units of base gel per hour while factory 2 requires 45 units of base gel per hour. The pharmacy has available 5000 units of base gel. Further, they must make at least 800 units of acne cream and 1000 units of anti-bacterial cream. How many hours should each factory be run to minimize the total time needed?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
hours_factory1 = intvar(0, 5000, name="hours_factory1")
hours_factory2 = intvar(0, 5000, name="hours_factory2")

# Define the problem
model = Model(
    hours_factory1 * 30 + hours_factory2 * 45 <= 5000,  # Base gel constraint
    hours_factory1 * 12 + hours_factory2 * 20 >= 800,  # Acne cream production constraint
    hours_factory1 * 15 + hours_factory2 * 10 >= 1000,  # Anti-bacterial cream production constraint
)

# Define the objective (minimize total time)
total_time = hours_factory1 + hours_factory2
model.minimize(total_time)

# Solve the problem
solution = model.solve()

# Print the optimal solution
if solution:
    print("Optimal solution:")
    print("Hours for factory 1:", hours_factory1.value())
    print("Hours for factory 2:", hours_factory2.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?
N/A
```python
from cpmpy import *

# Define decision variables
burgers = intvar(0, 100, name="burgers")
pizza_slices = intvar(0, 100, name="pizza_slices")

# Define constraints
problem = Model(
    burgers*10 + pizza_slices*8 >= 130,  # at least 130 units of fat
    burgers*300 + pizza_slices*250 >= 3000,  # at least 3000 calories
    burgers*12 + pizza_slices*10 == Minimize(burgers*12 + pizza_slices*10),  # minimize cholesterol intake
    pizza_slices >= 2*burgers  # at least twice as many slices of pizza as burgers
)

# Solve the problem
solution = CPM_ortools(problem)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinic makes batches of vitamin shots and pills. Each batch of vitamin shots requires 30 units of vitamin C and 40 units of vitamin D. Each batch of vitamin pills requires 50 units of vitamin C and 30 units of vitamin D. Since pills are more popular, the number of batches of vitamin pills must be larger than the number of batches of vitamin shots. Further, the clinic can make at most 10 batches of vitamin shots. The clinic has available 1200 units of vitamin C and 1500 units of vitamin D. If each batch of vitamin shots can supply 10 people and each batch of vitamin pills can supply 7 people, how many batches of each should be made to maximize the number of people that can be supplied?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_shots = intvar(0, 10, shape=1)
num_pills = intvar(0, 10, shape=1)

# Define the constraints
constraint1 = num_shots*30 + num_pills*50 <= 1200  # Vitamin C constraint
constraint2 = num_shots*40 + num_pills*30 <= 1500  # Vitamin D constraint
constraint3 = num_pills > num_shots  # Number of pills must be larger than number of shots

# Define the objective function
num_people_shots = num_shots*10
num_people_pills = num_pills*7
objective = -1*(num_people_shots + num_people_pills)  # Maximize the number of people supplied

# Define the model
model = Model(
    constraint1,
    constraint2,
    constraint3,
    maximize(objective)
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print("Number of batches of shots:", int(num_shots.value()))
    print("Number of batches of pills:", int(num_pills.value()))
    print("Maximum number of people supplied:", -1*int(model.objective_value()))
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A doctor's office takes the  temperature of patients one by one either by using an electronic or regular thermometer. The electronic thermometer takes 3 minutes to make a reading while the regular thermometer takes 2 minutes to make a reading. Since the electronic thermometer is more accurate, at least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer. Since the electronic thermometer has a cooldown time, at least 50 patients should have their temperature checked by a regular thermometer. If the office is open for 15000 minutes, maximize the number of patients whose temperature can be taken?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_patients_electronic = intvar(0, 10000)  # number of patients checked with electronic thermometer
num_patients_regular = intvar(50, 5000)  # number of patients checked with regular thermometer

# Define the constraints
model = Model(
    num_patients_electronic >= 2 * num_patients_regular,  # at least twice as many patients checked with electronic thermometer
    num_patients_regular >= 50,  # at least 50 patients checked with regular thermometer
    3 * num_patients_electronic + 2 * num_patients_regular <= 15000  # total time constraint
)

# Define the objective
maximize(sum([num_patients_electronic, num_patients_regular]))

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_num_patients_electronic = num_patients_electronic.value()
optimal_num_patients_regular = num_patients_regular.value()

print("Optimal number of patients checked with electronic thermometer:", optimal_num_patients_electronic)
print("Optimal number of patients checked with regular thermometer:", optimal_num_patients_regular)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A patient can be hooked up to two machines to have medicine delivered, machine 1 and machine 2. Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain. Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain. In addition however, machine 1 creates 0.3 units of waste per minute while machine 2 creates 0.5 units of waste per minute. If at most 8 units of medicine can be received by the heart and at least 4 units of medicine should be received by the brain, how many minutes should each machine be used to minimize the total amount of waste produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
minutes_machine1 = intvar(0, 8)
minutes_machine2 = intvar(0, 8)

# Define constraints
heart_medicine_machine1 = 0.5 * minutes_machine1 + 0.3 * minutes_machine1
heart_medicine_machine2 = 0.3 * minutes_machine2
brain_medicine_machine1 = 0.8 * minutes_machine1
brain_medicine_machine2 = 1 * minutes_machine2

total_heart_medicine = heart_medicine_machine1 + heart_medicine_machine2 <= 8
total_brain_medicine = brain_medicine_machine1 + brain_medicine_machine2 >= 4

total_waste_machine1 = 0.3 * minutes_machine1
total_waste_machine2 = 0.5 * minutes_machine2

# Define objective
total_waste = total_waste_machine1 + total_waste_machine2

# Define model
model = Model(
    total_heart_medicine,
    total_brain_medicine,
    total_waste
)

# Solve model
minimize(
    model,
    minimize=total_waste,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
ramen = intvar(0, 10)  # number of packs of ramen
fries = intvar(0, 10)  # number of packs of fries

# Define constraints
calories = 400*ramen + 300*fries >= 3000
protein = 20*ramen + 10*fries >= 80
sodium = 100*ramen + 75*fries

# At most 30% of meals can be ramen
ramen_percentage = ramen / (ramen + fries) <= 0.3

# Define objective (minimize sodium intake)
model = Model(minimize=sodium)

# Solve the problem
model.solve()

# Print the optimal solution
print("Optimal number of packs of ramen:", ramen.value())
print("Optimal number of packs of fries:", fries.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A science store makes two boxes, a cheap and expensive box. The cheap box contains 3 units of metal and 5 units of acid which can be mixed to create 8 units of foam. The expensive box contains 5 units of metal and 8 units of acid which can be mixed to create 10 units of foam. The cheap box however gives off 2 units of heat while the expensive box gives off 3 units of heat. The science store has available 200 units of metal and 300 units of acid. If at most 50 units of heat can be given off, how many of each box should the store make to maximize the amount of foam produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
cheap_boxes = intvar(0, 100, shape=1)
expensive_boxes = intvar(0, 100, shape=1)

# Define constraints
metal_constraint = cheap_boxes*3 + expensive_boxes*5 <= 200
acid_constraint = cheap_boxes*5 + expensive_boxes*8 <= 300
heat_constraint = cheap_boxes*2 + expensive_boxes*3 <= 50

# Objective function to maximize foam production
foam_production = cheap_boxes*8 + expensive_boxes*10
maximize(foam_production)

# Solve the problem
model = Model(metal_constraint, acid_constraint, heat_constraint)
solver = CPM_ortools(model)
solver.solve()

# Output the solution
print("Number of cheap boxes:", cheap_boxes.value())
print("Number of expensive boxes:", expensive_boxes.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
painkiller_pills = intvar(50, 100, name="painkiller_pills")
sleeping_pills = intvar(0, 50, name="sleeping_pills")

# Define constraints
total_morphine = 10*painkiller_pills + 6*sleeping_pills <= 3000
total_digestive_medicine = 3*painkiller_pills + 5*sleeping_pills

# At least 70% of the pills should be sleeping pills
at_least_70_percent = sleeping_pills >= 0.7*(painkiller_pills + sleeping_pills)

# Define objective
model = Model(minimize=total_digestive_medicine)

# Solve the problem
model += [total_morphine, at_least_70_percent]
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_painkiller_pills = painkiller_pills.value()
optimal_sleeping_pills = sleeping_pills.value()

print("Optimal number of painkiller pills:", optimal_painkiller_pills)
print("Optimal number of sleeping pills:", optimal_sleeping_pills)
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A boy needs to get enough magnesium and zinc in his diet by eating chewable gummies and taking pills. Each gummy contains 3 units of magnesium and 4 units of zinc. Each pill contains 2 units of magnesium and 5 units of zinc. The boy must take at least 10 pills. Since he prefers gummies more, he must eat at least 3 times the amount of gummies as pills. If the boy can consume at most 200 units of magnesium, how many of each should he eat to maximize his zinc intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_gummies = intvar(0, 100, name="num_gummies")
num_pills = intvar(10, 100, name="num_pills")

# Define constraints
model = Model(
    num_gummies >= 3 * num_pills,  # The boy must eat at least 3 times the amount of gummies as pills
    3 * num_gummies * 3 + 2 * num_pills * 2 <= 200,  # The boy can consume at most 200 units of magnesium
    num_pills >= 10  # The boy must take at least 10 pills
)

# Define objective
objective = -1 * (4 * num_gummies + 5 * num_pills)  # Maximize zinc intake

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_gummies = num_gummies.value()
optimal_num_pills = num_pills.value()

print("Optimal number of gummies:", optimal_num_gummies)
print("Optimal number of pills:", optimal_num_pills)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A patient takes anxiety medication and anti-depressants one after the other. Each unit of anxiety medication takes 3 minutes to be effective while each unit of anti-depressant takes 5 minutes to be effective. The patient must take at least 100 units of medication and at least 30 should be anxiety medication. Since the anxiety medication is strong, the patient can take at most twice the amount of anxiety medication as anti-depressants. How many units of each should the patient take to minimize the total time it take for the medication to be effective?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
anxiety_medication = intvar(0, 100, name="anxiety_medication")
anti_depressants = intvar(0, 100, name="anti_depressants")

# Define constraints
model = Model(
    anxiety_medication >= 30,
    anxiety_medication + anti_depressants >= 100,
    anxiety_medication <= 2 * anti_depressants
)

# Define objective
total_time = 3 * anxiety_medication + 5 * anti_depressants
model.minimize(total_time)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Minimum total time: {total_time.value()}")
    print(f"Units of anxiety medication: {anxiety_medication.value()}")
    print(f"Units of anti-depressants: {anti_depressants.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can  make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?
N/A
```python
from cpmpy import *
import numpy as np

# Define variables
hours_machine1 = intvar(0, 100)  # hours to use machine 1
hours_machine2 = intvar(0, 100)  # hours to use machine 2

# Define constraints
water_constraint = hours_machine1*20 + hours_machine2*15 <= 1200
eye_cream_constraint = hours_machine1*30 + hours_machine2*45 >= 1300
foot_cream_constraint = hours_machine1*60 + hours_machine2*30 >= 1500

# Define objective
total_time = hours_machine1 + hours_machine2

# Define CP model
model = Model(
    water_constraint,
    eye_cream_constraint,
    foot_cream_constraint,
    total_time
)

# Find optimal solution
minimize(
    sum(total_time)
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_almonds = intvar(0, 100, name="num_almonds")
num_cashews = intvar(0, 100, name="num_cashews")

# Define the constraints
calories_almonds = 200 * num_almonds
calories_cashews = 300 * num_cashews
protein_almonds = 20 * num_almonds
protein_cashews = 25 * num_cashews
fat_almonds = 15 * num_almonds
fat_cashews = 12 * num_cashews

# Total calories and protein constraints
total_calories = calories_almonds + calories_cashews >= 10000
total_protein = protein_almonds + protein_cashews >= 800

# At least twice as many servings of almonds as cashews
twice_as_many = num_almonds >= 2 * num_cashews

# Objective: minimize fat intake
model = Model(
    total_calories,
    total_protein,
    twice_as_many,
    minimize=fat_almonds + fat_cashews
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal number of servings
optimal_num_almonds = num_almonds.value()
optimal_num_cashews = num_cashews.value()

print("Optimal number of servings of almonds:", optimal_num_almonds)
print("Optimal number of servings of cashews:", optimal_num_cashews)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
liquid_sanitizers = intvar(0, 30, name="liquid_sanitizers")
foam_sanitizers = intvar(1, 30, name="foam_sanitizers")

# Define constraints
water_constraint = 40 * liquid_sanitizers + 60 * foam_sanitizers <= 2000
alcohol_constraint = 50 * liquid_sanitizers + 40 * foam_sanitizers <= 2100

# Objective function
hands_cleaned = 30 * liquid_sanitizers + 20 * foam_sanitizers

# Define the model
model = Model(
    water_constraint,
    alcohol_constraint,
    hands_cleaned
)

# Solve the model
minimize(
    -hands_cleaned,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinic is conducting a throat or nasal swabs on each patient. A throat swab takes 5 minutes while a nasal swab takes 3 minutes. The clinic must administer at least 30 nasal swabs. Since the nasal swab is more uncomfortable, at least 4 times as many throat swabs must be done as nasal swabs. If the clinic is only operational for 20000 minutes, how many of each swab should be done to maximize the number of patients seen?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
nasal_swabs = intvar(0, 10000, name="nasal_swabs")
throat_swabs = intvar(0, 40000, name="throat_swabs")

# Define the problem
model = Model(
    nasal_swabs * 3 + throat_swabs * 5 <= 20000,  # Total time constraint
    nasal_swabs >= 30,  # At least 30 nasal swabs
    throat_swabs >= 4 * nasal_swabs  # At least 4 times as many throat swabs as nasal swabs
)

# Define the objective
objective = -nasal_swabs - throat_swabs  # Maximize the number of patients seen

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_nasal_swabs = nasal_swabs.value()
optimal_throat_swabs = throat_swabs.value()

print("Optimal number of nasal swabs:", optimal_nasal_swabs)
print("Optimal number of throat swabs:", optimal_throat_swabs)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
dose_painkiller1 = intvar(0, 10)  # number of doses of pain killer 1
dose_painkiller2 = intvar(0, 10)  # number of doses of pain killer 2

# Define constraints
legs_medicine_painkiller1 = 0.5 * dose_painkiller1
legs_medicine_painkiller2 = 0.7 * dose_painkiller2
back_medicine_painkiller1 = 0.8 * dose_painkiller1
back_medicine_painkiller2 = 0.4 * dose_painkiller2
sleeping_medicine_painkiller1 = 0.3 * dose_painkiller1
sleeping_medicine_painkiller2 = 0.6 * dose_painkiller2

# Total sleeping medicine should be at most 8 units
constraint_sleeping_medicine = sleeping_medicine_painkiller1 + sleeping_medicine_painkiller2 <= 8

# At least 4 units of medicine should be delivered to the legs
constraint_legs_medicine = legs_medicine_painkiller1 + legs_medicine_painkiller2 >= 4

# Objective: maximize the amount of medicine delivered to the back
objective = -1 * (back_medicine_painkiller1 + back_medicine_painkiller2)

# Define the model
model = Model(
    constraint_sleeping_medicine,
    constraint_legs_medicine,
    maximize(objective)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_dose_painkiller1 = dose_painkiller1.value()
optimal_dose_painkiller2 = dose_painkiller2.value()

print("Optimal number of doses of pain killer 1:", optimal_dose_painkiller1)
print("Optimal number of doses of pain killer 2:", optimal_dose_painkiller2)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar.  The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
bananas = intvar(0, 100, shape=1)
mangoes = intvar(0, 100, shape=1)

# Define the constraints
calories_bananas = 80 * bananas
calories_mangoes = 100 * mangoes
total_calories = calories_bananas + calories_mangoes >= 4000

potassium_bananas = 20 * bananas
potassium_mangoes = 15 * mangoes
total_potassium = potassium_bananas + potassium_mangoes >= 150

sugar_bananas = 10 * bananas
sugar_mangoes = 8 * mangoes
total_sugar = sugar_bananas + sugar_mangoes <= 0.33 * (sugar_bananas + sugar_mangoes)

# Define the objective
sugar_intake = sugar_bananas + sugar_mangoes

# Define the model
model = Model(
    total_calories,
    total_potassium,
    total_sugar,
    minimize(sugar_intake)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of bananas: {bananas.value()}")
    print(f"Number of mangoes: {mangoes.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

In a science club, there are two tables that can be set up to make slime. At table 1, 3 units of powder and 5 units of glue are used to make 4 units of slime. At table 2, 8 units of powder and 6 units of glue are used to make 5 units of slime. However, table 1 produces 2 units of mess while table 2 produces 4 units of mess. The science club has available 100 units of powder and 90 units of glue.  If at most 30 units of mess can be made, how many of each table should be set up to maximize the amount of slime produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
table1 = intvar(0, 100, shape=1)
table2 = intvar(0, 100, shape=1)

# Define constraints
model = Model(
    table1[0]*3 + table2[0]*8 <= 100,  # Powder constraint
    table1[0]*5 + table2[0]*6 <= 90,   # Glue constraint
    table1[0]*2 + table2[0]*4 <= 30,   # Mess constraint
)

# Objective function
slime_produced = table1[0]*4 + table2[0]*5
model.maximize(slime_produced)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
opt_table1 = table1[0].value()
opt_table2 = table2[0].value()

print("Optimal number of table 1:", opt_table1)
print("Optimal number of table 2:", opt_table2)
```

Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmaceutical company has 800 units of painkiller medicine and makes daytime and nighttime painkiller. A daytime pill has 6 units of painkiller medicine and 2 units of sleep medicine. A nighttime pill has 5 units of painkiller medicine and 5 units of sleep medicine. Since some people don’t want the sleeping effect, at least 40% of the pills must be daytime pills. However at least 200 nighttime pills must be made. How many of each pill should be made to minimize the total amount of sleep medicine required?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
total_painkiller_units = 800
min_daytime_percentage = 0.4
min_nighttime_pills = 200

# Decision variables
daytime_pills = intvar(0, total_painkiller_units // 6, name="daytime_pills")
nighttime_pills = intvar(min_nighttime_pills, total_painkiller_units // 5, name="nighttime_pills")

# Constraints
problem = Model(
    daytime_pills * 6 + nighttime_pills * 5 <= total_painkiller_units,  # Total painkiller units constraint
    daytime_pills >= min_daytime_percentage * (daytime_pills + nighttime_pills),  # At least 40% daytime pills constraint
)

# Objective
total_sleep_medicine = daytime_pills * 2 + nighttime_pills * 5
minimize(total_sleep_medicine)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Output the solution
if solution:
    print(f"Number of daytime pills: {daytime_pills.value()}")
    print(f"Number of nighttime pills: {nighttime_pills.value()}")
else:
    print("No solution found")
```
Error: unexpected EOF while parsing (<string>, line 0)
False
Error: unexpected EOF while parsing (<string>, line 0)
---------------------------------------------------------------------------------------------

A competitive eater challenges himself to eat slices of cheesecake and caramel cake. Each slice of cheesecake contains 200 calories and 40 grams of sugar. Each slice of caramel cake contains 250 calories and 50 grams of sugar. He prefers cheesecake and decides to eat at least 3 times as many slices of cheesecake as caramel cake. However, he must also eat at least 3 slices of caramel cake. If he can consume at most 10000 calories in one day, how many slices of each cake should he eat to maximize the total amount of sugar he consumes?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
cheesecake_slices = intvar(0, 100, shape=1)
caramel_slices = intvar(0, 100, shape=1)

# Define the constraints
calories_cheesecake = 200 * cheesecake_slices
calories_caramel = 250 * caramel_slices
total_calories = calories_cheesecake + calories_caramel <= 10000

sugar_cheesecake = 40 * cheesecake_slices
sugar_caramel = 50 * caramel_slices

eat_at_least_3_cheesecake = cheesecake_slices >= 3 * caramel_slices
eat_at_least_3_caramel = caramel_slices >= 3

# Define the objective
total_sugar = sugar_cheesecake + sugar_caramel
model = Model(
    total_calories,
    eat_at_least_3_cheesecake,
    eat_at_least_3_caramel,
    maximize(total_sugar)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of cheesecake slices: {cheesecake_slices.value()}")
    print(f"Optimal number of caramel cake slices: {caramel_slices.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both sulfate and ginger need to be added to a shampoo. One unit of sulfate takes 0.5 minutes to be effective while one unit of ginger takes 0.75 minutes to be effective. The shampoo must contain at least 100 units of sulfates and a total of 400 units of both ingredient. Since too much sulfate can damage the hair, there can be at most twice the amount of sulfate as ginger in the shampoo. How many units of each should be added to the shampoo to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
sulfate = intvar(100, 266, name="sulfate")  # at least 100 units, at most twice the amount of ginger
ginger = intvar(50, 200, name="ginger")  # total of 400 units

# Define constraints
model = Model(
    sulfate + ginger == 400,  # total of 400 units
    sulfate <= 2 * ginger,  # at most twice the amount of ginger
)

# Define objective
time_sulfate = 0.5 * sulfate
time_ginger = 0.75 * ginger
total_time = time_sulfate + time_ginger

# Define solver
solver = CPM_ortools(model)

# Find optimal solution
solution = solver.minimize(total_time)

print("Minimum total time:", total_time.value())
print("Units of sulfate:", sulfate.value())
print("Units of ginger:", ginger.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmaceutical company has two labs, lab 1 and lab 2, where they make heart and lung medication in pill form. At lab 1, they can produce 20 heart medication pills and 30 lung medication pills per hour. At lab 2, they can produce 30 heart medication pills and 40 lung medication pills per hour. Each session at lab 1 requires 3 hours of worker labor while each session at lab 2 requires 5 hours of worker labor. The company has 1500 worker hours available and must make at least 20000 heart medication pills and at least 30000 lung medication pills. How many hours at each lab should be run to minimize the total time needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
hours_lab1 = intvar(0, 1500)  # hours to run lab 1
hours_lab2 = intvar(0, 1500)  # hours to run lab 2

# Define constraints
worker_hours_constraint = hours_lab1*3 + hours_lab2*5 <= 1500
heart_medication_constraint = hours_lab1*20 + hours_lab2*30 >= 20000
lung_medication_constraint = hours_lab1*30 + hours_lab2*40 >= 30000

# Define objective (minimize total time)
total_time = hours_lab1 + hours_lab2

# Define CP model
model = Model(
    worker_hours_constraint,
    heart_medication_constraint,
    lung_medication_constraint,
    minimize=total_time
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print solution
if solution:
    print("Hours to run lab 1:", hours_lab1.value())
    print("Hours to run lab 2:", hours_lab2.value())
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A doctor suggests that his patient eat oranges and grapefruit to meet his vitamin C and vitamin A requirements. One orange contains 5 units of vitamin C, 3 units of vitamin A, and 5 grams of sugar. One grapefruit contains 7 units of vitamin C, 5 units of vitamin A, and 6 grams of sugar. The patient must get at least 80 units of vitamin C and 70 units of vitamin A. Since the patent prefers oranges, he must eat at least 2 times as many oranges as grapefruit. How many of each should he eat to minimize his sugar intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
oranges = intvar(0, 100, shape=1)  # number of oranges
grapefruits = intvar(0, 100, shape=1)  # number of grapefruits

# Define constraints
model = Model(
    oranges >= 2 * grapefruits,  # patient must eat at least 2 times as many oranges as grapefruit
    5 * oranges + 7 * grapefruits >= 80,  # at least 80 units of vitamin C
    3 * oranges + 5 * grapefruits >= 70  # at least 70 units of vitamin A
)

# Define objective (minimize sugar intake)
sugar_intake = 5 * oranges + 6 * grapefruits
model.minimize(sugar_intake)

# Solve the problem
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of oranges: {oranges.value()}")
    print(f"Number of grapefruits: {grapefruits.value()}")
    print(f"Minimum sugar intake: {sugar_intake.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A university research lab can make two types of diabetes medicine, medicine A and medicine B. Per dose, medicine A takes 30 units of imported material and 50 units of mRNA to make. Per dose, medicine B takes 40 units of imported material and 30 units of mRNA to take. The lab has available at most 300 units of imported material and 400 units of mRNA. The lab can make at most 5 doses of medicine A and the number of doses of medicine B must be larger than the number of dosed of medicine A. If one dose of medicine A can treat 12 people and one dose of medicine B can treat 8 people, how many doses of each should be made to maximize the number of people that can be treated?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_doses_A = intvar(0, 5)  # Number of doses of medicine A
num_doses_B = intvar(1, 5)  # Number of doses of medicine B

# Define the constraints
model = Model(
    num_doses_A * 30 + num_doses_B * 40 <= 300,  # Constraint on imported material
    num_doses_A * 50 + num_doses_B * 30 <= 400,  # Constraint on mRNA
    num_doses_A <= 5,  # Constraint on maximum doses of medicine A
    num_doses_B > num_doses_A  # Constraint on number of doses of medicine B
)

# Define the objective function to maximize the number of people treated
num_people_treated = 12 * num_doses_A + 8 * num_doses_B
model.maximize(num_people_treated)

# Solve the model
stats = model.solve()

# Get the optimal solution
if stats and stats.is_sat:
    optimal_num_doses_A = num_doses_A.value()
    optimal_num_doses_B = num_doses_B.value()
    optimal_num_people_treated = num_people_treated.value()
    print("Optimal number of doses of medicine A:", optimal_num_doses_A)
    print("Optimal number of doses of medicine B:", optimal_num_doses_B)
    print("Maximum number of people treated:", optimal_num_people_treated)
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A popup clinic is doing virus testing with either spit tests or swabs. A spit test takes 10 minutes to administer while a  swab takes 15 minutes to administer. Since the spit test is more accurate, at least twice as many spit tests should be given as  swabs. However, at least 20  swabs must be administers. If the popup clinic operates for 8000 minutes, maximize the number of tests that can be administered.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_spit_tests = intvar(0, 8000 // 10)  # Maximum number of spit tests that can be administered
num_swab_tests = intvar(0, 8000 // 15)  # Maximum number of swab tests that can be administered

# Define the constraints
model = Model(
    num_spit_tests >= 2 * num_swab_tests,  # At least twice as many spit tests as swab tests
    num_swab_tests >= 20,  # At least 20 swab tests
    10 * num_spit_tests + 15 * num_swab_tests <= 8000  # Total time constraint
)

# Maximize the total number of tests administered
model.maximize(num_spit_tests + num_swab_tests)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_num_spit_tests = num_spit_tests.value()
optimal_num_swab_tests = num_swab_tests.value()

print("Optimal number of spit tests:", optimal_num_spit_tests)
print("Optimal number of swab tests:", optimal_num_swab_tests)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin.  In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor.  How many minutes of each beam should be used to minimize the total radiation received by the pancreas?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
beam1_pancreas = intvar(0, 100, name="beam1_pancreas")  # minutes of beam 1 to pancreas
beam1_skin = intvar(0, 100, name="beam1_skin")  # minutes of beam 1 to skin
beam2_pancreas = intvar(0, 100, name="beam2_pancreas")  # minutes of beam 2 to pancreas
beam2_skin = intvar(0, 100, name="beam2_skin")  # minutes of beam 2 to skin

# Define constraints
total_pancreas_dose = beam1_pancreas * 0.3 + beam2_pancreas * 0.2
total_skin_dose = beam1_skin * 0.2 + beam2_skin * 0.1
total_tumor_dose = beam1_pancreas * 0.6 + beam2_pancreas * 0.4

# Constraints for total dose received by the skin
total_skin_dose_constraint = total_skin_dose <= 4

# Constraints for total dose delivered to the tumor
total_tumor_dose_constraint = total_tumor_dose >= 3

# Objective: minimize total radiation received by the pancreas
total_pancreas_dose_obj = total_pancreas_dose

# Model
model = Model(
    total_skin_dose_constraint,
    total_tumor_dose_constraint,
    minimize(total_pancreas_dose_obj)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_beam1_pancreas = beam1_pancreas.value()
optimal_beam1_skin = beam1_skin.value()
optimal_beam2_pancreas = beam2_pancreas.value()
optimal_beam2_skin = beam2_skin.value()

print("Optimal minutes of Beam 1 to pancreas:", optimal_beam1_pancreas)
print("Optimal minutes of Beam 1 to skin:", optimal_beam1_skin)
print("Optimal minutes of Beam 2 to pancreas:", optimal_beam2_pancreas)
print("Optimal minutes of Beam 2 to skin:", optimal_beam2_skin)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A body builder buys pre prepared meals, a turkey dinner and a tuna salad sandwich. The turkey dinner contains 20 grams of protein, 30 grams of carbs, and 12 grams of fat. The tuna salad sandwich contains 18 grams of protein, 25 grams of carbs, and 8 grams of fat. The bodybuilder wants to get at least 150 grams of protein and 200 grams of carbs. In addition because the turkey dinner is expensive, at most 40% of the meals should be turkey dinner. How many of each meal should he eat if he wants to minimize his fat intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
turkey_dinner = intvar(0, 1)  # 1 if the is turkey dinner, 0 if not
tuna_sandwich = intvar(0, 1)  # 1 if the is tuna sandwich, 0 if not

# Define the constraints
protein = 20 * turkey_dinner + 18 * tuna_sandwich >= 150
carbs = 30 * turkey_dinner + 25 * tuna_sandwich >= 200
fat_limit = 12 * turkey_dinner + 8 * tuna_sandwich == min(12 * turkey_dinner + 8 * tuna_sandwich)

# At most 40%  should be turkey dinner
turkey_limit = turkey_dinner <= 0.4 * (turkey_dinner + tuna_sandwich)

# Define the objective
model = Model(minimize=fat_limit)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of turkey dinners:", turkey_dinner.value())
    print("Number of tuna salad sandwiches:", tuna_sandwich.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas.  The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
exp1 = intvar(0, 10)  # number of experiment 1
exp2 = intvar(0, 10)  # number of experiment 2

# Define constraints
red_liquid_exp1 = 3 * exp1
blue_liquid_exp1 = 4 * exp1
green_gas_exp1 = 5 * exp1
smelly_gas_exp1 = 1 * exp1

red_liquid_exp2 = 5 * exp2
blue_liquid_exp2 = 3 * exp2
green_gas_exp2 = 6 * exp2
smelly_gas_exp2 = 2 * exp2

# Total amount of red and blue liquid constraints
total_red_liquid = red_liquid_exp1 + red_liquid_exp2 <= 80
total_blue_liquid = blue_liquid_exp1 + blue_liquid_exp2 <= 70

# Total amount of smelly gas constraint
total_smelly_gas = smelly_gas_exp1 + smelly_gas_exp2 <= 10

# Objective function to maximize total green gas produced
total_green_gas = green_gas_exp1 + green_gas_exp2

# Model
model = Model(
    total_red_liquid,
    total_blue_liquid,
    total_smelly_gas,
    maximize(total_green_gas)
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_exp1 = exp1.value()
optimal_exp2 = exp2.value()

print("Number of experiments of each:")
print("Experiment 1:", optimal_exp1)
print("Experiment 2:", optimal_exp2)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Create variables
num_large_pills = intvar(100, 1000, name="num_large_pills")
num_small_pills = intvar(0, 900, name="num_small_pills")

# Constraints
medicinal_ingredients_constraint = 3*num_large_pills + 2*num_small_pills <= 1000
filler_constraint = 2*num_large_pills + num_small_pills <= 1000
large_pills_constraint = num_large_pills >= 100
small_pills_constraint = num_small_pills >= 0.6*(num_large_pills + num_small_pills)

# Objective
filler_material = 2*num_large_pills + num_small_pills

# Model
model = Model(
    medicinal_ingredients_constraint,
    filler_constraint,
    large_pills_constraint,
    small_pills_constraint,
    minimize(filler_material)
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
opt_num_large_pills = num_large_pills.value()
opt_num_small_pills = num_small_pills.value()

print("Optimal number of large pills:", opt_num_large_pills)
print("Optimal number of small pills:", opt_num_small_pills)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both chorine and water softener need to be added to a pool. One unit of chlorine takes 1 minute to be effective while one unit of water softener takes 2 minutes to be effective. Because too much chlorine can burn your eyes, there has to at most half as much chlorine as water softener in the pool. If there has to be at least 200 units of chlorine in the water and a total of 500 units of chemicals in the water, how many units of each should be added to minimize the total time it takes for the pool to be ready? (Note: chlorine must be added before water softener or vice versa).
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
chlorine = intvar(200, 250, name="chlorine")
softener = intvar(0, 500, name="softener")

# Define constraints
model = Model(
    chlorine <= 0.5 * softener,  # At most half as much chlorine as softener
    chlorine >= 200,  # At least 200 units of chlorine
    chlorine + softener == 500  # Total of 500 units of chemicals
)

# Define objective
time = 1 * chlorine + 2 * softener  # Total time to be minimized

# Solve the problem
minimize(time, model, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A drug company is making pain killers and sleeping pills using two processes, process 1 and process 2. Process 1 produces 35 units of pain killers and 12 units of sleeping pills per hour. Process 2 produces 50 units of pain killers and 30 units of sleeping pills per hour. Process 1 requires 50 units of preliminary material while process 2 requires 60 units of preliminary material. The drug company has available 2000 units of preliminary material and must make at least 1200 units of pain killers and 1200 units of sleeping pills. How many of each process should be run to minimize the total time needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
process1 = intvar(0, 1000, shape=1)
process2 = intvar(0, 1000, shape=1)

# Define constraints
preliminary_material_constraint = process1*50 + process2*60 <= 2000
pain_killers_constraint = process1*35 + process2*50 >= 1200
sleeping_pills_constraint = process1*12 + process2*30 >= 1200

# Define objective
total_time = process1 + process2

# Define CP model
model = Model(
    preliminary_material_constraint,
    pain_killers_constraint,
    sleeping_pills_constraint,
    total_time
)

# Solve the CP model
minimize(
    sum(total_time)
)

# Print the optimal solution
print(f"Optimal number of process 1: {process1.value()}")
print(f"Optimal number of process 2: {process2.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
blueberries = intvar(0, 100, shape=1)
strawberries = intvar(0, 100, shape=1)

# Define the constraints
model = Model(
    blueberries * 3 + strawberries >= 90,  # at least 90 units of anti-oxidants
    blueberries * 5 + strawberries * 7 >= 100,  # at least 100 units of minerals
    strawberries >= 3 * blueberries  # at least 3 times as many packs of strawberries as blueberries
)

# Define the objective (minimize sugar intake)
objective = 5 * blueberries + 7 * strawberries
model.minimize(objective)

# Solve the problem
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_blueberries = blueberries.value()
optimal_strawberries = strawberries.value()

print("Optimal packs of blueberries:", optimal_blueberries)
print("Optimal packs of strawberries:", optimal_strawberries)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_beam_bridges = intvar(0, 5, name="num_beam_bridges")
num_truss_bridges = intvar(0, 5, name="num_truss_bridges")

# Define the constraints
sticks_per_beam = 30
glue_per_beam = 5
sticks_per_truss = 50
glue_per_truss = 8
max_sticks = 600
max_glue = 100

model = Model(
    num_beam_bridges*sticks_per_beam + num_truss_bridges*sticks_per_truss <= max_sticks,
    num_beam_bridges*glue_per_beam + num_truss_bridges*glue_per_truss <= max_glue,
    num_truss_bridges <= 5,
    num_beam_bridges > num_truss_bridges
)

# Define the objective
mass_per_beam = 40
mass_per_truss = 60
total_mass = num_beam_bridges*mass_per_beam + num_truss_bridges*mass_per_truss
model.maximize(total_mass)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_beam_bridges = num_beam_bridges.value()
optimal_num_truss_bridges = num_truss_bridges.value()

print("Optimal number of beam bridges:", optimal_num_beam_bridges)
print("Optimal number of truss bridges:", optimal_num_truss_bridges)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_pill = intvar(30, 10000 // 10, name="num_pill")
num_shot = intvar(3 * num_pill.min(), 10000 // 20, name="num_shot")

# Define the constraint model
model = Model(
    num_pill >= 30,
    num_shot >= 3 * num_pill,
    10 * num_pill + 20 * num_shot <= 10000
)

# Maximize the number of patients that can be vaccinated
model.maximize(num_pill + num_shot)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_num_pill = num_pill.value()
optimal_num_shot = num_shot.value()

print("Optimal number of pill vaccines:", optimal_num_pill)
print("Optimal number of shot vaccines:", optimal_num_shot)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is $30 while the cost per truck trip is $50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of $1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
num_van_trips = intvar(0, 30)  # Number of trips by vans
num_truck_trips = intvar(0, 30)  # Number of trips by trucks

# Define the constraints
problem = Model(
    num_van_trips*50 + num_truck_trips*80 >= 1500,  # At least 1500 boxes need to be transported
    num_van_trips*30 + num_truck_trips*50 <= 1000,  # Budget constraint
    num_van_trips > num_truck_trips  # Number of van trips must be larger than number of truck trips
)

# Define the objective (minimize total number of trips)
objective = num_van_trips + num_truck_trips
problem.minimize(objective)

# Solve the problem
solution = CPM_ortools(problem)
stats = solution.solve()

# Print the optimal number of trips by vans and trucks
if stats and stats['status'] == 'optimal':
    print(f"Number of trips by vans: {num_van_trips.value()}")
    print(f"Number of trips by trucks: {num_truck_trips.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?
N/A
```python
from cpmpy import *

# Define the variables
num_small_bottles = intvar(0, 300, name="num_small_bottles")
num_large_bottles = intvar(0, 100, name="num_large_bottles")

# Define the constraints
at_least_twice_as_many_small_bottles = num_small_bottles >= 2 * num_large_bottles
total_num_bottles = num_small_bottles + num_large_bottles
at_most_200_bottles_total = total_num_bottles <= 200
at_least_50_large_bottles = num_large_bottles >= 50

# Define the objective function to maximize the total amount of honey
total_honey = 5 * num_small_bottles + 20 * num_large_bottles
maximize(total_honey)

# Define the model
model = Model(at_least_twice_as_many_small_bottles, at_most_200_bottles_total, at_least_50_large_bottles)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print("Number of small bottles:", num_small_bottles.value())
    print("Number of large bottles:", num_large_bottles.value())
    print("Total amount of honey transported:", total_honey.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
ship_trips = intvar(0, 10)  # number of ship trips
plane_trips = intvar(0, 10)  # number of plane trips

# Define the constraints
problem = Model(
    ship_trips + plane_trips >= 500 // 40,  # at least 500 containers worth of goods
    plane_trips <= 10,  # at most 10 plane trips
    ship_trips >= 0.5 * (ship_trips + plane_trips),  # at least 50% of trips made by ship
)

# Define the objective function to minimize the total amount of fuel consumed
total_fuel = 500 * ship_trips + 300 * plane_trips
minimize(total_fuel)

# Solve the problem
solution = CPM_ortools(problem)
stats = solution.solve()

# Print the optimal number of ship and plane trips
if stats and stats['status'] == 'optimal':
    print(f"Number of ship trips: {ship_trips.value()}")
    print(f"Number of plane trips: {plane_trips.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_boats = intvar(0, 12)
num_canoes = intvar(0, 12)

# Define the constraints
total_ducks = num_boats * 10 + num_canoes * 8 >= 300
total_trips = num_boats + num_canoes <= 12
at_least_60_percent_canoes = num_canoes >= num_boats * 0.6
time_constraint = num_boats * 20 + num_canoes * 40

# Define the objective
model = Model(
    minimize(time_constraint)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of boats: {num_boats.value()}")
    print(f"Number of canoes: {num_canoes.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
old_vans = intvar(0, 30, shape=1)
new_vans = intvar(0, 30, shape=1)

# Define constraints
bottles_constraint = old_vans*100 + new_vans*80 >= 5000
pollution_constraint = old_vans*50 + new_vans*30

# Define objective
model = Model(minimize=pollution_constraint)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of old vans: {old_vans.value()}")
    print(f"Number of new vans: {new_vans.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_teams = intvar(10, 100, name="num_small_teams")  # at least 10 small teams
num_large_teams = intvar(6, 50, name="num_large_teams")  # at least 6 large teams

# Define the constraints
employees_constraint = num_small_teams*3 + num_large_teams*5 <= 150  # total number of employees constraint
small_teams_constraint = num_small_teams >= 3*num_large_teams  # number of small teams must be at least 3 times the number of large teams

# Define the objective function to maximize the area mowed
area_mowed = num_small_teams*50 + num_large_teams*80

# Define the model
model = Model(
    employees_constraint,
    small_teams_constraint,
    area_mowed
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal number of small and large teams
if solution:
    print("Number of small teams:", num_small_teams.value())
    print("Number of large teams:", num_large_teams.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_otters = intvar(0, 60)  # at most 30% of performers
num_dolphins = intvar(10, 100)  # at least 10 dolphins
num_tricks_otters = num_otters * 3
num_tricks_dolphins = num_dolphins

# Define the constraints
model = Model(
    num_tricks_otters * 3 + num_tricks_dolphins <= 200  # total treats available
)

# Define the objective
objective = -1 * (num_tricks_otters + num_tricks_dolphins)  # maximize total number of tricks

# Solve the problem
model += minimize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_num_otters = num_otters.value()
optimal_num_dolphins = num_dolphins.value()
optimal_total_tricks = optimal_num_otters * 3 + optimal_num_dolphins

print("Optimal number of otters:", optimal_num_otters)
print("Optimal number of dolphins:", optimal_num_dolphins)
print("Maximized total number of tricks:", optimal_total_tricks)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used.  Find the minimum number of vans that can be used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_vans = intvar(0, 100)  # Number of vans used
num_trucks = intvar(0, 100)  # Number of trucks used

# Define the constraints
problem = Model(
    num_vans*50 + num_trucks*100 >= 2000,  # Total number of shoes transported must be at least 2000
    num_trucks <= num_vans  # Number of trucks used cannot exceed number of vans used
)

# Find the minimum number of vans
minimize(num_vans)

# Solve the problem
solver = CPM_ortools(problem)
solver.solve()

# Get the optimal number of vans
optimal_num_vans = num_vans.value()
print("Minimum number of vans needed:", optimal_num_vans)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_containers = intvar(15, 100, name="num_containers")
num_trucks = intvar(0, 50, name="num_trucks")

# Define constraints
problem = Model(
    num_containers*30 + num_trucks*40 >= 2000,  # at least 2000 units of oil
    num_containers >= 15,  # at least 15 containers used
    num_trucks <= num_containers // 2  # number of trucks used at most half the number of containers used
)

# Define objective
objective = num_containers + num_trucks

# Solve the problem
model = CPM_ortools(problem, minimize=objective)
```

Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students.  The school needs to provide transportation for at least 500 students.  In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_buses = intvar(0, 100)  # number of small buses
num_large_buses = intvar(0, 100)  # number of large buses

# Define the constraints
problem = Model(
    num_small_buses*20 + num_large_buses*50 >= 500,  # total number of students constraint
    num_large_buses <= 0.2*(num_small_buses + num_large_buses)  # maximum 20% of buses can be large buses
)

# Define the objective
objective = num_small_buses + num_large_buses

# Solve the problem
minimize(objective, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of $300 per trip. Each van can take 500 patties at a cost of $100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of $12500. How should they plan their shipment to minimize the total number of trips?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_trucks = intvar(0, 10)  # Number of trucks
num_vans = intvar(0, 10)  # Number of vans

# Define the cost of each trip
cost_truck = 300
cost_van = 100

# Define the capacity of each vehicle
capacity_truck = 1000
capacity_van = 500

# Define the total number of patties to be shipped and the budget
total_patties = 50000
total_budget = 12500

# Define the constraint for the total number of trips
total_trips = num_trucks + num_vans

# Define the constraint for the total cost
total_cost = cost_truck * num_trucks + cost_van * num_vans

# Define the constraint for the total number of patties
total_patties_shipped = capacity_truck * num_trucks + capacity_van * num_vans

# Define the constraint that the number of trucks must not exceed the number of vans
trucks_not_exceed_vans = num_trucks <= num_vans

# Define the objective to minimize the total number of trips
minimize(total_trips)

# Define the constraints
constraints = [
    total_patties_shipped >= total_patties,
    total_cost <= total_budget,
    trucks_not_exceed_vans
]

# Define the model
model = Model(constraints)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Number of trucks: {num_trucks.value()}")
    print(f"Number of vans: {num_vans.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_bouquets = intvar(0, 80)
num_large_bouquets = intvar(20, 50)

# Define the constraint that the total number of bouquets is at most 70
total_bouquets = num_small_bouquets + num_large_bouquets
constraint_total_bouquets = total_bouquets <= 70

# Define the constraint that the florist must transport at least twice as many small bouquets as large bouquets
constraint_twice_as_many = num_small_bouquets >= 2 * num_large_bouquets

# Define the objective function to maximize the total number of flowers
total_flowers = 5 * num_small_bouquets + 10 * num_large_bouquets

# Define the model
model = Model(
    constraint_total_bouquets,
    constraint_twice_as_many,
    maximize(total_flowers)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal number of small and large bouquets
if solution:
    print("Number of small bouquets:", num_small_bouquets.value())
    print("Number of large bouquets:", num_large_bouquets.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
trips_new = intvar(0, 15)  # number of trips made by the new company
trips_old = intvar(0, 100)  # number of trips made by the old company

# Define constraints
total_gifts = trips_new * 50 + trips_old * 70 >= 1000
total_trips = trips_new + trips_old <= 15
at_least_old_trips = trips_old >= 0.4 * (trips_new + trips_old)

# Define objective
diesel_used_new = trips_new * 30
diesel_used_old = trips_old * 40
total_diesel_used = diesel_used_new + diesel_used_old

# Define and solve the problem
model = Model(minimize=total_diesel_used, constraints=[total_gifts, total_trips, at_least_old_trips])
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_trips_new = trips_new.value()
optimal_trips_old = trips_old.value()

print("Optimal number of trips for the new company:", optimal_trips_new)
print("Optimal number of trips for the old company:", optimal_trips_old)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?
N/A
```python
from cpmpy import *
import numpy as np

# Constants
total_monkeys = 300
bus_capacity = 20
bus_time = 30
car_capacity = 6
car_time = 15
max_bus_trips = 10
min_car_trips_percentage = 0.6

# Decision variables
bus_trips = intvar(0, max_bus_trips)
car_trips = intvar(0, total_monkeys // car_capacity)

# Constraints
model = Model(
    total_monkeys == bus_capacity * bus_trips + car_capacity * car_trips,
    sum([bus_time * bus_trips, car_time * car_trips]) == min(
        [bus_time * max_bus_trips, car_time * total_monkeys // car_capacity]),
    car_trips >= total_monkeys * min_car_trips_percentage / car_capacity
)

# Objective
model.minimize(sum([bus_time * bus_trips, car_time * car_trips]))

print(model)
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ort

# Define the variables
num_helicopter_trips = intvar(0, 27)  # maximum number of helicopter trips needed to transport 80 cows
num_truck_trips = intvar(0, 8)  # maximum number of truck trips allowed

# Define the constraints
model = Model(
    num_helicopter_trips*3 + num_truck_trips*7 == 80,  # total number of cows to transport is 80
    num_helicopter_trips*5 + num_truck_trips*10 == minimize,  # minimize the total pollution produced
)

# Solve the problem
minimize = sum(num_helicopter_trips*5, num_truck_trips*10)
model.minimize(minimize)
solver = CPM_ort()
solver.solve(model)

# Get the optimal solution
optimal_num_helicopter_trips = num_helicopter_trips.value()
optimal_num_truck_trips = num_truck_trips.value()

print("Optimal number of helicopter trips:", optimal_num_helicopter_trips)
print("Optimal number of truck trips:", optimal_num_truck_trips)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
num_small_containers = intvar(5, 100, name="num_small_containers")
num_large_containers = intvar(3, 33, name="num_large_containers")

# Define the constraints
num_people_required = num_small_containers + 3*num_large_containers <= 100
amount_of_sand_delivered = 20*num_small_containers + 50*num_large_containers

# Define the objective
maximize(amount_of_sand_delivered)

# Solve the problem
model = Model(num_people_required, amount_of_sand_delivered)
cpmpy.solvers.cbc(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
num_bikes = intvar(0, 200, name="num_bikes")
num_scooters = intvar(0, 200, name="num_scooters")

# Define the constraint model
model = Model(
    num_bikes * 3 + num_scooters * 2 <= 200,  # total charge constraint
    num_bikes <= 0.3 * (num_bikes + num_scooters),  # at most 30% of vehicles can be bikes
    num_scooters >= 20  # at least 20 scooters must be used
)

# Define the objective function
objective = -num_bikes - num_scooters  # maximize the number of meals delivered

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solution = solver.solve()

# Output the optimal solution
if solution:
    print(f"Number of bikes: {num_bikes.value()}")
    print(f"Number of scooters: {num_scooters.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_large_planes = intvar(0, 10)  # Maximum number of large planes needed
num_small_planes = intvar(0, 30)  # Maximum number of small planes needed

# Define the constraints
model = Model(
    num_large_planes < num_small_planes,  # Large planes must be less than small planes
    30*num_large_planes + 10*num_small_planes >= 300  # Total number of cars must be at least 300
)

# Find the minimum number of planes needed
minimize(sum([num_large_planes, num_small_planes]))

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal number of planes
optimal_num_large_planes = num_large_planes.value()
optimal_num_small_planes = num_small_planes.value()

print("Minimum number of planes needed:")
print("Large planes:", optimal_num_large_planes)
print("Small planes:", optimal_num_small_planes)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_wagons = intvar(0, 100, shape=1)
num_large_wagons = intvar(10, 100, shape=1)

# Define the constraints
model = Model(
    num_small_wagons >= 2*num_large_wagons,
    20*num_small_wagons + 50*num_large_wagons == 2000
)

# Define the objective
total_wagons = num_small_wagons + num_large_wagons

# Solve the problem
minimize(total_wagons, model, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_scooters = intvar(0, 100)  # maximum number of scooters
num_rickshaws = intvar(0, 100)  # maximum number of rickshaws

# Define the constraints
num_visitors = num_scooters*2 + num_rickshaws*3 >= 300  # at least 300 visitors need to be transported
max_rickshaws = num_rickshaws <= 0.4*(num_scooters + num_rickshaws)  # at most 40% of vehicles can be rickshaws

# Define the objective
minimize(num_scooters)  # minimize the total number of scooters used

# Solve the problem
model = Model(num_visitors, max_rickshaws)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of scooters used: {num_scooters.value()}")
    print(f"Number of rickshaws used: {num_rickshaws.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_camels = intvar(0, 20)  # maximum number of camels needed to deliver 1000 packages
num_horses = intvar(0, 20)  # maximum number of horses needed to deliver 1000 packages

# Define constraints
problem = Model(
    num_camels*50 + num_horses*60 >= 1000,  # at least 1000 packages need to be delivered
    num_camels*20 + num_horses*30 <= 450,  # total units of food available is 450
    num_horses <= num_camels  # number of horses cannot exceed number of camels
)

# Define objective
total_animals = num_camels + num_horses
minimize_objective = minimize(total_animals)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Number of camels:", num_camels.value())
    print("Number of horses:", num_horses.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_suitcases = intvar(0, 70, name="num_small_suitcases")
num_large_suitcases = intvar(15, 50, name="num_large_suitcases")

# Define the constraints
constraints = [
    num_small_suitcases >= 2 * num_large_suitcases,  # at least twice as many small suitcases as large suitcases
    num_small_suitcases + num_large_suitcases <= 70,  # at most 70 suitcases in total
]

# Define the objective function to maximize the total number of snacks
total_snacks = 50 * num_small_suitcases + 80 * num_large_suitcases
maximize(total_snacks)

# Solve the problem
model = Model(constraints)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of small suitcases: {num_small_suitcases.value()}")
    print(f"Number of large suitcases: {num_large_suitcases.value()}")
    print(f"Total number of snacks: {total_snacks.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
regular_trips = intvar(0, 20)  # number of regular boat trips
speed_trips = intvar(0, 20)    # number of speed boat trips

# Define the constraints
model = Model(
    regular_trips * 20 + speed_trips * 30 >= 1000,  # total mail delivered constraint
    regular_trips + speed_trips <= 20,               # total trips constraint
    speed_trips >= regular_trips / 2                 # at least 50% of trips made by speed boats
)

# Define the objective (minimize total gas consumed)
objective = regular_trips * 10 + speed_trips * 20
model.minimize(objective)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Regular boat trips:", regular_trips.value())
    print("Speed boat trips:", speed_trips.value())
    print("Total gas consumed:", objective.value())
else:
    print("No solution found")
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
bus_trips = intvar(0, 10)
car_trips = intvar(0, 10)
total_time = intvar(0, 100)

# Define the constraints
problem = Model(
    bus_trips*100 + car_trips*40 == 1200,  # total number of chicken
    bus_trips*2 + car_trips*1.5 == total_time,  # total time taken
    car_trips >= 0.6*(bus_trips + car_trips),  # at least 60% of trips by car
)

# Define the objective
minimize(
    total_time
)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the optimal number of trips for bus and car
print("Number of bus trips:", bus_trips.value())
print("Number of car trips:", car_trips.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_vans = intvar(0, 10)  # Number of vans used
num_minibuses = intvar(0, 10)  # Number of minibuses used

# Define the constraints
problem = Model(
    num_vans * 6 + num_minibuses * 10 >= 150,  # At least 150 kids need to go to school
    num_minibuses <= 10,  # At most 10 minibuses can be used
    num_vans > num_minibuses  # Number of vans used must exceed the number of minibuses
)

# Define the objective (minimize total pollution produced)
total_pollution = num_vans * 7 + num_minibuses * 10
minimize(problem, total_pollution)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of vans: {num_vans.value()}")
    print(f"Number of minibuses: {num_minibuses.value()}")
    print(f"Total pollution produced: {total_pollution.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_bins = intvar(10, 100, name="num_small_bins")
num_large_bins = intvar(4, 33, name="num_large_bins")

# Define the constraint that the number of small bins must be three times the number of large bins
constraint1 = num_small_bins == 3 * num_large_bins

# Define the constraint that the total number of workers used does not exceed 100
constraint2 = 2*num_small_bins + 5*num_large_bins <= 100

# Define the objective function to maximize the total amount of recycling material collected
total_recycling_material = 25*num_small_bins + 60*num_large_bins
maximize(total_recycling_material)

# Solve the problem
model = Model(constraint1, constraint2)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of small bins: {num_small_bins.value()}")
    print(f"Number of large bins: {num_large_bins.value()}")
    print(f"Total recycling material collected: {total_recycling_material.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
seasonal_volunteers = intvar(0, 100, shape=1)
fulltime_volunteers = intvar(0, 100, shape=1)

# Define the constraints
points_constraint = 2 * seasonal_volunteers + 5 * fulltime_volunteers <= 200
seasonal_constraint = seasonal_volunteers <= 0.3 * (seasonal_volunteers + fulltime_volunteers)
fulltime_constraint = fulltime_volunteers >= 10

# Define the objective function
total_gifts_delivered = 5 * seasonal_volunteers + 8 * fulltime_volunteers

# Define the model
model = Model(
    points_constraint,
    seasonal_constraint,
    fulltime_constraint,
    total_gifts_delivered
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of seasonal volunteers needed: {seasonal_volunteers.value()}")
    print(f"Number of full-time volunteers needed: {fulltime_volunteers.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the model
model = Model()

# Define the variables
num_small_jars = intvar(0, 2000, name="num_small_jars")  # maximum number of small jars to reach 100000 ml
num_large_jars = intvar(0, 1000, name="num_large_jars")  # maximum number of large jars to reach 100000 ml

# Define the constraints
model += num_small_jars * 50 + num_large_jars * 200 >= 100000  # total jam should be at least 100000 ml
model += num_large_jars <= num_small_jars  # number of large jars cannot exceed number of small jars

# Define the objective (minimize the total number of jars used)
model.minimize(num_small_jars + num_large_jars)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
min_num_jars = num_small_jars.value() + num_large_jars.value()
print("Minimum number of jars needed:", min_num_jars)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A corn farmer sends his corn to the city by either tractor or car.  A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.
N/A
```python
from cpmpy import *

# Define the variables
num_tractors = intvar(0, 100)  # number of tractors used
num_cars = intvar(0, 100)  # number of cars used

# Define the constraints
problem = Model(
    num_tractors*40 + num_cars*20 >= 500,  # at least 500 kg of corn need to be sent
    num_cars >= 2*num_tractors  # number of cars used has to be at least twice the number of tractors used
)

# Define the objective
objective = num_tractors + num_cars

# Minimize the total number of tractors and cars needed
minimize(objective)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
num_bikes = intvar(0, 100)  # number of bikes used
num_cars = intvar(0, 100)   # number of cars used

# Define the constraints
problem = Model(
    num_bikes >= 0,
    num_cars >= 0,
    num_bikes*3 + num_cars*5 >= 500,  # total number of people transported
    num_cars <= 0.4*(num_bikes + num_cars)  # at most 40% of vehicles can be cars
)

# Define the objective
objective = minimize(num_bikes)

# Solve the problem
solution = cp.CpSolver()
solution.solve(problem)

# Get the optimal number of bikes and cars
optimal_num_bikes = num_bikes.value()
optimal_num_cars = num_cars.value()

print("Optimal number of bikes:", optimal_num_bikes)
print("Optimal number of cars:", optimal_num_cars)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs $1000. Each ultrawide truck can transport 6 tires per trip and costs $700. The company needs to transport at least 200 tires and has available $22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
plane_trips = intvar(0, 20)  # Number of cargo plane trips
truck_trips = intvar(0, 20)  # Number of ultrawide truck trips

# Define the constraints
problem = Model(
    plane_trips <= truck_trips,  # Number of plane trips cannot exceed number of truck trips
    10 * plane_trips + 6 * truck_trips >= 200,  # At least 200 tires need to be transported
    1000 * plane_trips + 700 * truck_trips <= 22000  # Total cost should not exceed $22000
)

# Define the objective (to minimize the total number of trips)
objective = minimize(plane_trips + truck_trips)

# Solve the problem
problem += objective
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
small_kegs = intvar(0, 30)
large_kegs = intvar(5, 10)
total_kegs = small_kegs + large_kegs

# Constraints
at_least_twice_small_kegs = 2 * large_kegs <= small_kegs
at_most_total_kegs = total_kegs <= 25

# Objective function
total_water = 40 * small_kegs + 100 * large_kegs

# Model
model = Model(
    maximize(total_water),
    at_least_twice_small_kegs,
    at_most_total_kegs
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_small_kegs = small_kegs.value()
optimal_large_kegs = large_kegs.value()

print("Optimal number of small kegs:", optimal_small_kegs)
print("Optimal number of large kegs:", optimal_large_kegs)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
submarine_trips = intvar(0, 6)
boat_trips = intvar(0, 6)

# Define the constraints
total_mail = submarine_trips * 100 + boat_trips * 80 >= 1000
total_trips = submarine_trips + boat_trips >= 2
boat_percentage = boat_trips >= 0.5 * (submarine_trips + boat_trips)

# Define the objective
total_gas_used = submarine_trips * 30 + boat_trips * 25

# Define the model
model = Model(minimize=total_gas_used, constraints=[total_mail, total_trips, boat_percentage])

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of submarine trips: {submarine_trips.value()}")
    print(f"Number of boat trips: {boat_trips.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_helicopter_trips = intvar(0, 5)
num_car_trips = intvar(0, 100)  # There can be at most 5 helicopter trips, so at most 100 car trips

# Define the constraints
num_fish_helicopter = num_helicopter_trips * 30
num_fish_car = num_car_trips * 20

# At least 300 fish need to be transported
constraint_num_fish = num_fish_helicopter + num_fish_car >= 300

# At least 60% of the trips should be by car
constraint_car_percentage = num_car_trips >= 0.6 * (num_helicopter_trips + num_car_trips)

# Define the objective function to minimize the total time
time_helicopter = num_helicopter_trips * 40
time_car = num_car_trips * 30
total_time = time_helicopter + time_car

# Define the model
model = Model(
    constraint_num_fish,
    constraint_car_percentage,
    minimize=total_time
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Number of helicopter trips:", num_helicopter_trips.value())
    print("Number of car trips:", num_car_trips.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_balloon_rides = intvar(0, 10, name="num_balloon_rides")
num_gondola_rides = intvar(0, 10, name="num_gondola_rides")

# Define the constraints
total_visitors = num_balloon_rides*4 + num_gondola_rides*6 >= 70
total_pollution = num_balloon_rides*10 + num_gondola_rides*15

# Define the objective
minimize(total_pollution)

# Solve the problem
model = Model(total_visitors, total_pollution)
solver = CPM_ortools(model)
solution = solver.solve()

print("Number of hot air balloon rides:", num_balloon_rides.value())
print("Number of gondola lift rides:", num_gondola_rides.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice.  The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_medium_carts = intvar(5, 100, name="num_medium_carts")
num_large_carts = intvar(5, 100, name="num_large_carts")

# Define the constraints
num_horses = 2*num_medium_carts + 4*num_large_carts <= 60
num_medium_large_relation = num_medium_carts == 3*num_large_carts

# Define the objective function
total_rice_transport = 30*num_medium_carts + 70*num_large_carts

# Model
model = Model(
    num_horses,
    num_medium_large_relation,
    total_rice_transport
)

# Solve
minimize(
    -total_rice_transport,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_labradors = intvar(0, 100)  # number of labradors
num_golden_retrievers = intvar(50, 100)  # number of golden retrievers

# Define the constraints
num_newspapers_labrador = 7
num_newspapers_golden_retriever = 10
num_small_bone_treats_labrador = 5
num_small_bone_treats_golden_retriever = 6
total_small_bone_treats_available = 1500

# Constraint: Total small bone treats used by labradors and golden retrievers should not exceed the total available
constraint1 = num_labradors * num_small_bone_treats_labrador + num_golden_retrievers * num_small_bone_treats_golden_retriever <= total_small_bone_treats_available

# Constraint: At least 50 golden retrievers must be used
constraint2 = num_golden_retrievers >= 50

# Constraint: At most 60% of the dogs can be labradors
constraint3 = num_labradors <= 0.6 * (num_labradors + num_golden_retrievers)

# Objective: Maximize the number of newspapers that can be delivered
objective = -1 * (num_labradors * num_newspapers_labrador + num_golden_retrievers * num_newspapers_golden_retriever)

# Define the model
model = Model(
    constraint1,
    constraint2,
    constraint3,
    objective
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal number of labradors and golden retrievers
if solution:
    print("Number of Labradors:", num_labradors.value())
    print("Number of Golden Retrievers:", num_golden_retrievers.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used..
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_cows = intvar(0, 100)  # maximum number of cows
num_elephants = intvar(0, 50)  # maximum number of elephants

# Define the constraints
model = Model(
    num_cows*20 + num_elephants*50 >= 1000,  # total number of bricks needed to transport
    num_elephants <= num_cows,  # number of elephants cannot exceed number of cows
    num_cows <= 2*num_elephants  # at most twice the number of cows as elephants
)

# Find the minimum number of animals
minimize(sum([num_cows, num_elephants]))

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_num_cows = num_cows.value()
optimal_num_elephants = num_elephants.value()

print("Minimum number of cows:", optimal_num_cows)
print("Minimum number of elephants:", optimal_num_elephants)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_ferry_trips = intvar(0, 25)  # maximum number of ferry trips needed
num_rail_trips = intvar(0, 100)  # maximum number of light rail trips needed

# Define the constraints
problem = Model(
    num_ferry_trips*20 + num_rail_trips*15 >= 500,  # total number of boxes constraint
    num_rail_trips >= 4*num_ferry_trips  # light rail trips at least 4 times ferry trips
)

# Define the objective
objective = num_ferry_trips + num_rail_trips  # minimize the total number of trips

# Solve the problem
model = CPM_ortools(problem, objective=objective)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_taxi_rides = intvar(0, 100)  # number of taxi rides
num_car_rides = intvar(30, 100)  # number of company car rides

# Define the constraints
problem = Model(
    num_taxi_rides * 2 + num_car_rides * 3 >= 500,  # total number of employees transported
    num_car_rides >= 30,  # at least 30 company car rides
    num_car_rides <= 0.6 * (num_taxi_rides + num_car_rides)  # at most 60% of rides can be company car rides
)

# Define the objective
objective = minimize(num_taxi_rides)

# Solve the problem
problem += objective
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chemical company is transporting their hydrogen using two different methods, high pressure tube trailers and liquefied hydrogen tankers. The first method is a high-pressure tube trailer which can transport 50 cubic meters each per trip at a cost of $500. The second method is using liquefied hydrogen tankers which can transport 30 cubic meters each per trip at a cost of $200. The company needs to transport at least 1000 cubic meters of hydrogen and they have budget of $3750 available. In addition, the number of transports done by the high pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method. How many of each transportation method should they use to minimize the total number of trips?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
tube_trailers = intvar(0, 1000, name="tube_trailers")
tankers = intvar(0, 1000, name="tankers")

# Define constraints
problem = Model(
    tube_trailers * 50 + tankers * 30 >= 1000,  # At least 1000 cubic meters of hydrogen
    tube_trailers * 500 + tankers * 200 <= 3750,  # Budget constraint
    tube_trailers < tankers  # Number of tube trailers should be less than tankers
)

# Define objective
objective = tube_trailers + tankers

# Solve the problem
minimize(objective, problem, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500.  Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the model
model = cp.CpModel()

# Define decision variables
num_small_crates = intvar(0, 100, name="num_small_crates")
num_large_crates = intvar(0, 50, name="num_large_crates")

# Constraints
model += num_small_crates >= 3 * num_large_crates
model += num_small_crates * 200 + num_large_crates * 500 <= 60 * 200
model += num_large_crates >= 10

# Objective function
total_grapes = num_small_crates * 200 + num_large_crates * 500
model.maximize(total_grapes)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print("Number of small crates: ", num_small_crates.value())
    print("Number of large crates: ", num_large_crates.value())
    print("Total number of grapes: ", total_grapes.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
truck_trips = intvar(0, 5)
car_trips = intvar(0, 100)  # There is no upper bound on car trips

# Define the constraints
total_packages = 50*truck_trips + 30*car_trips >= 500
at_least_30_percent_car_trips = car_trips >= 0.3*(truck_trips + car_trips)

# Define the objective function to minimize the total amount of gas consumed
total_gas = 20*truck_trips + 15*car_trips

# Define the model
model = Model(
    total_packages,
    at_least_30_percent_car_trips,
    total_gas
)

# Solve the model
minimize(
    model,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_helicopter_trips = intvar(0, 10)
num_bus_trips = intvar(0, 10)

# Constraints
num_patients = num_helicopter_trips * 5 + num_bus_trips * 8 >= 120
at_least_30_percent_helicopter_trips = num_helicopter_trips >= (num_helicopter_trips + num_bus_trips) * 0.3
at_most_10_bus_trips = num_bus_trips <= 10

# Objective
total_time = num_helicopter_trips * 1 + num_bus_trips * 3

# Model
model = Model(
    num_patients,
    at_least_30_percent_helicopter_trips,
    at_most_10_bus_trips,
    total_time
)

# Solve
minimize(
    model,
    minimize=total_time,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ort

# Define the variables
car_count = intvar(0, 75)  # Maximum number of cars needed is 75 (300 employees / 4 employees per car)
bus_count = intvar(0, 4)  # Maximum number of buses is 4

# Define the constraints
problem = Model(
    car_count * 4 + bus_count * 20 >= 300,  # At least 300 employees need to be transported
    car_count * 10 + bus_count * 30 == minimize(car_count * 10 + bus_count * 30)  # Minimize the total pollution produced
)

# Solve the problem
solver = CPM_ort()
solver.solve(problem)

# Get the optimal solution
optimal_car_count = car_count.value()
optimal_bus_count = bus_count.value()

print("Optimal number of cars:", optimal_car_count)
print("Optimal number of buses:", optimal_bus_count)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A snow removal company removes snow from neighborhoods using small trucks and large trucks. A small truck requires 2 people to shovel the snow and can carry 30 units of snow. A large truck require 4 people to shovel the snow and car carry 50 units of snow. The company has available 30 people. In addition, because some neighbourhood don’t allow big trucks, at least 10 trucks must be small. There must be at least 3 large trucks as well and the number of small trucks must be twice as much as the number of large trucks. How many of each truck should be used to maximize the total amount of snow that can be transported?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_trucks = intvar(10, 20)  # at least 10 small trucks
num_large_trucks = intvar(3, 10)   # at least 3 large trucks

# Define the constraints
model = Model(
    num_small_trucks >= 2*num_large_trucks,  # number of small trucks must be twice as much as the number of large trucks
    num_small_trucks + num_large_trucks <= 30,  # total number of trucks cannot exceed 30
)

# Define the objective function to maximize the total amount of snow that can be transported
total_snow = 30*num_small_trucks + 50*num_large_trucks
model.maximize(total_snow)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of small trucks:", num_small_trucks.value())
    print("Number of large trucks:", num_large_trucks.value())
    print("Total amount of snow that can be transported:", total_snow.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service.  At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_carrier_pigeons = intvar(20, 100, name="num_carrier_pigeons")
num_owls = intvar(0, 40, name="num_owls")

# Define the constraints
total_treats = 3*num_carrier_pigeons + 5*num_owls <= 1000
total_letters = 2*num_carrier_pigeons + 5*num_owls

# At most 40% of the birds can be owls
at_most_40_percent_owls = num_owls <= 0.4*(num_carrier_pigeons + num_owls)

# Objective function
maximize(total_letters)

# Solve the problem
model = Model(total_treats, at_most_40_percent_owls, maximize(total_letters))
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of carrier pigeons: {num_carrier_pigeons.value()}")
    print(f"Number of owls: {num_owls.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_large_ships = intvar(0, 10)  # maximum number of large ships to carry 500 containers
num_small_ships = intvar(0, 10)  # maximum number of small ships to carry 200 containers

# Define the constraints
problem = Model(
    num_large_ships * 500 + num_small_ships * 200 >= 3000,  # total number of containers to transport
    num_large_ships <= num_small_ships  # number of large ships cannot exceed number of small ships
)

# Find the minimum number of ships
minimize(
    num_large_ships + num_small_ships
)

# Solve the problem
solver = CPM_ortools(problem)
solver.solve()

# Get the optimal solution
optimal_num_large_ships = num_large_ships.value()
optimal_num_small_ships = num_small_ships.value()

print("Minimum number of ships needed:")
print("Large ships:", optimal_num_large_ships)
print("Small ships:", optimal_num_small_ships)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If  at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
canoes = intvar(0, 1000, shape=1, name="canoes")
diesel_boats = intvar(0, 1000, shape=1, name="diesel_boats")

# Define the constraints
model = Model(
    canoes >= 3 * diesel_boats,  # Number of canoes should be at least 3 times the number of diesel boats
    10 * canoes + 15 * diesel_boats >= 1000  # Total number of fish transported should be at least 1000
)

# Define the objective
objective = canoes + diesel_boats

# Solve the problem
model.minimize(objective)
solver = CPM_ortools(model)
solver.solve()

# Print the optimal solution
print(f"Optimal number of canoes: {canoes.value()}")
print(f"Optimal number of diesel boats: {diesel_boats.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people.  They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?
N/A
```python
from cpmpy import *
import math

# Define the variables
num_vans = intvar(0, math.ceil(0.3 * (200 // 6)))
num_cars = intvar(0, 200 // 3)

# Define the constraints
total_voters = num_vans * 6 + num_cars * 3 >= 200

# Define the objective
minimize(sum(num_cars))

# Create the model
model = Model(total_voters, minimize)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Number of vans: {num_vans.value()}")
    print(f"Number of cars: {num_cars.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs $6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
num_hamburgers = intvar(0, 10, name="num_hamburgers")
num_wraps = intvar(0, 10, name="num_wraps")

# Define constraints
calories = 800*num_hamburgers + 450*num_wraps >= 2200
protein = 19*num_hamburgers + 12*num_wraps >= 50
carbs = 20*num_hamburgers + 10*num_wraps >= 70

# Define objective
cost_hamburgers = 6.5*num_hamburgers
cost_wraps = 4*num_wraps
total_cost = cost_hamburgers + cost_wraps

# Define and solve the problem
model = Model(minimize=total_cost, constraints=[calories, protein, carbs])
solver = CPM_ortools(model)
solver.solve()

print(f"Minimum cost diet: ${solver.objective_value()}")
print(f"Number of hamburgers: {num_hamburgers.value()}")
print(f"Number of wraps: {num_wraps.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is $150 and the profit per batch of pork ribs is $300, how many batches of each should be made to maximize profit?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
ham_batches = intvar(0, 4000)
rib_batches = intvar(0, 4000)

# Define the constraints
model = Model([
    4 * ham_batches + 2 * rib_batches <= 4000,  # Meat slicer constraint
    2.5 * ham_batches + 3.5 * rib_batches <= 4000,  # Meat packer constraint
])

# Define the objective function
profit = 150 * ham_batches + 300 * rib_batches
model.maximize(profit)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of batches of hams: {ham_batches.value()}")
    print(f"Optimal number of batches of pork ribs: {rib_batches.value()}")
    print(f"Maximum profit: ${profit.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is $400 and the profit per stove is $260, how many of each should they sell in order to maximize profit?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define decision variables
refrigerators = intvar(0, 100)  # number of refrigerators to sell
stoves = intvar(0, 100)  # number of stoves to sell

# Define constraints
mover_time_constraint = 60*refrigerators + 45*stoves <= 20000
setup_time_constraint = 20*refrigerators + 25*stoves <= 13000

# Define objective function
profit = 400*refrigerators + 260*stoves

# Define and solve the CP model
model = Model(
    mover_time_constraint,
    setup_time_constraint,
    maximize(profit)
)

# Print the model
print(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is $100 and the profit per drawer is $90, how many of each should the company make to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
num_desks = intvar(0, 1000, name="num_desks")
num_drawers = intvar(0, 1000, name="num_drawers")

# Define constraints
assembly_time_desks = 40 * num_desks
assembly_time_drawers = 30 * num_drawers
sanding_time_desks = 20 * num_desks
sanding_time_drawers = 10 * num_drawers

model = Model(
    assembly_time_desks + assembly_time_drawers <= 4000,
    sanding_time_desks + sanding_time_drawers <= 3500
)

# Define objective function
profit_desks = 100 * num_desks
profit_drawers = 90 * num_drawers
total_profit = profit_desks + profit_drawers

model.maximize(total_profit)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

print(f"Number of desks to make: {num_desks.value()}")
print(f"Number of drawers to make: {num_drawers.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is $7.5 and the profit from each bottle of matcha milk tea sold is $5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
black_milk_tea = intvar(0, 100, name="black_milk_tea")
matcha_milk_tea = intvar(0, 100, name="matcha_milk_tea")

# Define the constraints
milk_constraint = 600*black_milk_tea + 525*matcha_milk_tea <= 30000
honey_constraint = 10*black_milk_tea + 5*matcha_milk_tea <= 500

# Define the objective function
profit = 7.5*black_milk_tea + 5*matcha_milk_tea

# Define the problem
model = Model(
    milk_constraint,
    honey_constraint,
    maximize(profit)
)

# Solve the problem
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of bottles of black milk tea: {black_milk_tea.value()}")
    print(f"Optimal number of bottles of matcha milk tea: {matcha_milk_tea.value()}")
    print(f"Maximum profit: ${profit.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs $1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs $2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ort

# Define variables
milk = intvar(0, 100, shape=1)
vegetables = intvar(0, 100, shape=1)

# Define constraints
problem = Model(
    [milk*40 + vegetables*15 >= 100,
     milk*25 + vegetables*30 >= 50]
)

# Define objective
cost = milk*1 + vegetables*2
min_cost = minimize(cost)

# Solve the problem
problem += min_cost
solver = CPM_ort()
solver.solve(problem)

# Get the optimal solution
optimal_milk = milk.value()
optimal_vegetables = vegetables.value()

print("Optimal amount of milk: ", optimal_milk)
print("Optimal amount of vegetables: ", optimal_vegetables)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs $5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs $2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
n_noodles = intvar(0, 100, shape=1, name="n_noodles")
n_protein_bars = intvar(0, 100, shape=1, name="n_protein_bars")

# Define the cost of each item
cost_noodles = 5
cost_protein_bar = 2.5

# Define the calories and protein content of each item
calories_noodles = 600
calories_protein_bar = 250
protein_noodles = 1.5
protein_protein_bar = 5

# Define the total cost
total_cost = cost_noodles * n_noodles + cost_protein_bar * n_protein_bars

# Define the total calories and protein content
total_calories = calories_noodles * n_noodles + calories_protein_bar * n_protein_bars
total_protein = protein_noodles * n_noodles + protein_protein_bar * n_protein_bars

# Define the constraints
constraints = [
    total_calories >= 2000,
    total_protein >= 16
]

# Define the objective
objective = minimize(total_cost)

# Create the model
model = Model(
    objective,
    constraints
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A toy store sells plush toys and dolls. Each plush toy costs the store $3 and each doll costs the store $2. The store owner can spend at most $700 on inventory. Each plush toy is then sold for a profit of $4 while each doll is sold for a profit of $2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_plush_toys = intvar(90, 190, name="num_plush_toys")
num_dolls = intvar(0, 2*num_plush_toys, name="num_dolls")

# Define the constraints
cost_constraint = 3*num_plush_toys + 2*num_dolls <= 700
profit_constraint = 4*num_plush_toys + 2*num_dolls
quantity_constraint = num_dolls <= 2*num_plush_toys

# Define the objective function
objective = -profit_constraint

# Solve the problem
model = Model(
    minimize(objective),
    cost_constraint,
    quantity_constraint
)

solver = CPM_ortools(model)
solution = solver.solve()

if solution:
    print(f"Number of plush toys to buy and sell: {num_plush_toys.value()}")
    print(f"Number of dolls to buy and sell: {num_dolls.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of $4 and a package of music paper at a profit of $2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
graph_paper_profit = 4
music_paper_profit = 2.5
printing_machine_capacity = 350
scanning_machine_capacity = 350

# Variables
graph_paper_reams = intvar(0, printing_machine_capacity // 3, name="graph_paper_reams")
music_paper_reams = intvar(0, printing_machine_capacity // 1.5, name="music_paper_reams")

# Constraints
printing_machine_constraint = graph_paper_reams * 3 + music_paper_reams * 1.5 <= printing_machine_capacity
scanning_machine_constraint = graph_paper_reams * 5.5 + music_paper_reams * 3 <= scanning_machine_capacity

# Objective
total_profit = graph_paper_reams * graph_paper_profit + music_paper_reams * music_paper_profit

# Model
model = Model(
    printing_machine_constraint,
    scanning_machine_constraint,
    maximize(total_profit)
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
print(f"Number of reams of graph paper to produce: {graph_paper_reams.value()}")
print(f"Number of reams of music paper to produce: {music_paper_reams.value()}")
print(f"Maximum profit: ${total_profit.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is $14 and the cost per health supplement for health supplement B is $25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
servings_A = intvar(0, 10)  # Number of servings of health supplement A
servings_B = intvar(0, 10)  # Number of servings of health supplement B

# Define constraints
constraint_calcium = servings_A * 30 + servings_B * 60 >= 400
constraint_magnesium = servings_A * 50 + servings_B * 10 >= 50

# Define objective function to minimize cost
cost_A = 14 * servings_A
cost_B = 25 * servings_B
total_cost = cost_A + cost_B

# Define the model
model = Model(
    constraint_calcium,
    constraint_magnesium,
    total_cost
)

# Solve the model
min_cost = model.minimize(total_cost)

# Print the optimal solution
print("Minimum cost:", min_cost)
print("Number of servings of health supplement A:", servings_A.value())
print("Number of servings of health supplement B:", servings_B.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Lucy has a dog and she wants his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs $20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
regular_bags = intvar(0, 100, shape=1, name="regular_bags")
premium_bags = intvar(0, 100, shape=1, name="premium_bags")

# Define constraints
calcium_constraint = 4 * regular_bags + 12 * premium_bags >= 15
vitamin_constraint = 7 * regular_bags + 10 * premium_bags >= 20
protein_constraint = 10 * regular_bags + 16 * premium_bags >= 20

# Define objective function
cost_regular = 20 * regular_bags
cost_premium = 35 * premium_bags
total_cost = cost_regular + cost_premium

# Define the CP model
model = Model(
    calcium_constraint,
    vitamin_constraint,
    protein_constraint,
    total_cost
)

# Solve the CP model
minimize(
    model,
    solver=CPM_ortools()
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of $550, each tank of non-sticky oil produces a net revenue of $750, and each tank of heavy oil produces a net revenue of $950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ort

# Define the variables
light_oil_tanks = intvar(0, 100)  # Number of tanks of light oil
non_sticky_oil_tanks = intvar(0, 100)  # Number of tanks of non-sticky oil
heavy_oil_tanks = intvar(0, 100)  # Number of tanks of heavy oil

# Define the constraints
compound_A_constraint = 3*light_oil_tanks + 6*non_sticky_oil_tanks + 9*heavy_oil_tanks <= 250
compound_B_constraint = 3*light_oil_tanks + 2*non_sticky_oil_tanks + 3*heavy_oil_tanks <= 150

# Define the objective function to maximize revenue
revenue = 550*light_oil_tanks + 750*non_sticky_oil_tanks + 950*heavy_oil_tanks
maximize(revenue)

# Solve the problem
model = Model(compound_A_constraint, compound_B_constraint)
solver = CPM_ort()
solver.solve(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a $2.1 profit and a square foot of carpets yields a $3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define decision variables
laminate_planks = intvar(0, 40000, shape=1)
carpets = intvar(0, 20000, shape=1)

# Define the objective function to maximize profit
profit = 2.1 * laminate_planks + 3.3 * carpets
maximize(profit)

# Define constraints
demand_constraint = laminate_planks >= 15000
carpets_demand_constraint = carpets >= 5000
total_demand_constraint = laminate_planks + carpets >= 50000
laminate_planks_limit = laminate_planks <= 40000
carpets_limit = carpets <= 20000

# Create the model
model = Model(demand_constraint, carpets_demand_constraint, total_demand_constraint, laminate_planks_limit, carpets_limit)

# Solve the model
cpmpy.solvers.cplex(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium.  The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is $2 and the cost per pill of supplement B is  $3, how many of each should he buy to minimize costs?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
num_pills_A = intvar(0, 100, name="num_pills_A")  # Number of pills of supplement A
num_pills_B = intvar(0, 100, name="num_pills_B")  # Number of pills of supplement B

# Define the constraints
iron_constraint = 5*num_pills_A + 4*num_pills_B >= 40  # At least 40 units of iron needed
calcium_constraint = 10*num_pills_A + 15*num_pills_B >= 50  # At least 50 units of calcium needed

# Define the objective function
cost_A = 2*num_pills_A  # Cost of pills of supplement A
cost_B = 3*num_pills_B  # Cost of pills of supplement B
total_cost = cost_A + cost_B  # Total cost to minimize

# Define the problem
problem = cp.problem(
    minimize=total_cost,
    constraints=[iron_constraint, calcium_constraint]
)

# Solve the problem
solution = problem.solve()

# Print the optimal solution
if solution:
    print(f"Number of pills of supplement A: {num_pills_A.value()}")
    print(f"Number of pills of supplement B: {num_pills_B.value()}")
else:
    print("No solution found")
```
Error: list index out of range
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of $30 each and premium handbags at a profit of $180 each. The total monthly cost of manufacturing is $200 per regular handbag and $447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
regular_handbags = intvar(0, 475, name="regular_handbags")
premium_handbags = intvar(0, 475, name="premium_handbags")

# Define the constraints
cost_regular = 200 * regular_handbags
cost_premium = 447 * premium_handbags
total_cost = cost_regular + cost_premium <= 250000

total_handbags = regular_handbags + premium_handbags <= 475

# Define the objective function
profit_regular = 30 * regular_handbags
profit_premium = 180 * premium_handbags
total_profit = profit_regular + profit_premium

# Define the model
model = Model(
    total_cost,
    total_handbags,
    maximize=total_profit
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of regular handbags to sell: {regular_handbags.value()}")
    print(f"Optimal number of premium handbags to sell: {premium_handbags.value()}")
    print(f"Maximum monthly profit: ${total_profit.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A woman has $100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be $1.2 for basketball tournament, $0.5 for horse race, and $0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
total_money = 100000
payouts = [1.2, 0.5, 0.1]
loss_probabilities = [0.5, 0.25, 0.1]
max_avg_loss_probability = 0.3

# Decision variables
bet_amounts = intvar(0, total_money, shape=3)

# Constraints
total_bet_constraint = sum(bet_amounts) == total_money
average_loss_constraint = sum(bet_amounts[i] * loss_probabilities[i] for i in range(3)) <= total_money * max_avg_loss_probability

# Objective
total_payout = sum(bet_amounts[i] * payouts[i] for i in range(3))

# Model
model = Model(total_bet_constraint, average_loss_constraint, maximize=total_payout)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
for i in range(3):
    print(f"Amount to bet on {'Basketball' if i == 0 else 'Horse Race' if i == 1 else 'Soccer Game'}: ${bet_amounts[i].value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him $250 and each freezer repaired earns his $375, how many of each appliance should he fix to maximize his earnings?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_washing_machines = intvar(0, 100)  # number of washing machines to fix
num_freezers = intvar(0, 100)  # number of freezers to fix

# Define the constraints
inspection_time = 30*num_washing_machines + 20*num_freezers <= 5000
fixing_time = 90*num_washing_machines + 125*num_freezers <= 20000

# Define the objective function
total_earnings = 250*num_washing_machines + 375*num_freezers

# Define the problem
model = Model(
    inspection_time,
    fixing_time,
    maximize(total_earnings)
)

# Solve the problem
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_washing_machines = num_washing_machines.value()
optimal_num_freezers = num_freezers.value()

print("Optimal number of washing machines to fix:", optimal_num_washing_machines)
print("Optimal number of freezers to fix:", optimal_num_freezers)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is $12, the profit per sponge cake is $10, and the profit per birthday cake is $15, how many of each should the bakery make to maximize their profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
batter_per_unit = [400, 500, 450]
milk_per_unit = [200, 300, 350]
profit_per_unit = [12, 10, 15]
total_batter = 20000
total_milk = 14000

# Variables
crepe_cakes = intvar(0, total_batter // batter_per_unit[0])
sponge_cakes = intvar(0, total_batter // batter_per_unit[1])
birthday_cakes = intvar(0, total_batter // batter_per_unit[2])

# Constraints
model = Model(
    sum(crepe_cakes * batter_per_unit[0], sponge_cakes * batter_per_unit[1], birthday_cakes * batter_per_unit[2]) <= total_batter,
    sum(crepe_cakes * milk_per_unit[0], sponge_cakes * milk_per_unit[1], birthday_cakes * milk_per_unit[2]) <= total_milk
)

# Objective
total_profit = sum(crepe_cakes * profit_per_unit[0], sponge_cakes * profit_per_unit[1], birthday_cakes * profit_per_unit[2])
model.maximize(total_profit)

# Solve
solver = CPM_ortools(model)
solver.solve()

print(f"Number of crepe cakes: {crepe_cakes.value()}")
print(f"Number of sponge cakes: {sponge_cakes.value()}")
print(f"Number of birthday cakes: {birthday_cakes.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
cat_paw_profit = 12
gold_shark_profit = 15
cat_paw_available = 20
gold_shark_available = 50

# Decision variables
cat_paw_first_mix = intvar(0, cat_paw_available)
gold_shark_first_mix = intvar(0, gold_shark_available)
cat_paw_second_mix = intvar(0, cat_paw_available)
gold_shark_second_mix = intvar(0, gold_shark_available)

# Constraints
model = Model(
    cat_paw_first_mix == 0.2 * (cat_paw_first_mix + gold_shark_first_mix),
    gold_shark_first_mix == 0.8 * (cat_paw_first_mix + gold_shark_first_mix),
    cat_paw_second_mix == 0.35 * (cat_paw_second_mix + gold_shark_second_mix),
    gold_shark_second_mix == 0.65 * (cat_paw_second_mix + gold_shark_second_mix),
    cat_paw_first_mix + cat_paw_second_mix <= cat_paw_available,
    gold_shark_first_mix + gold_shark_second_mix <= gold_shark_available
)

# Objective function
profit = cat_paw_profit * (cat_paw_first_mix + cat_paw_second_mix) + gold_shark_profit * (gold_shark_first_mix + gold_shark_second_mix)
model.maximize(profit)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Output the solution
print("Cat paw snacks in first mix:", cat_paw_first_mix.value())
print("Gold shark snacks in first mix:", gold_shark_first_mix.value())
print("Cat paw snacks in second mix:", cat_paw_second_mix.value())
print("Gold shark snacks in second mix:", gold_shark_second_mix.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of $2.50 each and x2 deluxe tacos at a profit of $3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
x1 = intvar(0, 50, name='regular_tacos')
x2 = intvar(0, 40, name='deluxe_tacos')

# Define the objective function to maximize profit
profit = 2.50*x1 + 3.55*x2

# Define the constraints
constraint_demand_regular = x1 <= 50
constraint_demand_deluxe = x2 <= 40
constraint_total_demand = x1 + x2 <= 70

# Create the model
model = Model(
    maximize(profit),
    constraint_demand_regular,
    constraint_demand_deluxe,
    constraint_total_demand
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal values
if solution:
    print(f"Optimal number of regular tacos: {x1.value()}")
    print(f"Optimal number of deluxe tacos: {x2.value()}")
```
Error: invalid syntax (<string>, line 1)
Error: list.remove(x): x not in list
Error: list.remove(x): x not in list
---------------------------------------------------------------------------------------------

A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is $15 and the profit per English workbook is $17, how many of each should the company make to maximize profit?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
math_workbooks = intvar(40, 140, name="math_workbooks")
english_workbooks = intvar(60, 170, name="english_workbooks")

# Define the constraints
at_least_total_workbooks = math_workbooks + english_workbooks >= 200
at_least_math_workbooks = math_workbooks >= 40
at_least_english_workbooks = english_workbooks >= 60
at_most_total_math_workbooks = math_workbooks <= 140
at_most_total_english_workbooks = english_workbooks <= 170

# Define the objective function
profit_per_math_workbook = 15
profit_per_english_workbook = 17
total_profit = profit_per_math_workbook * math_workbooks + profit_per_english_workbook * english_workbooks

# Define the model
model = Model(
    at_least_total_workbooks,
    at_least_math_workbooks,
    at_least_english_workbooks,
    at_most_total_math_workbooks,
    at_most_total_english_workbooks,
    maximize(total_profit)
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of math workbooks: {math_workbooks.value()}")
    print(f"Optimal number of english workbooks: {english_workbooks.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for $2800 and $2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?
N/A
```python
from cpmpy import *
import cpmpy.model

# Constants
full_weighted_price = 2800
semi_weighted_price = 2400
total_oscillator_chips = 3500
full_weighted_chip_requirement = 20
semi_weighted_chip_requirement = 15
total_working_hours = 6
production_time = 1.2

# Variables
full_weighted_quantity = intvar(0, total_oscillator_chips // full_weighted_chip_requirement, name="full_weighted_quantity")
semi_weighted_quantity = intvar(0, total_oscillator_chips // semi_weighted_chip_requirement, name="semi_weighted_quantity")

# Constraints
model = Model(
    full_weighted_quantity * full_weighted_chip_requirement + semi_weighted_quantity * semi_weighted_chip_requirement <= total_oscillator_chips,
    full_weighted_quantity * production_time + semi_weighted_quantity * production_time <= total_working_hours
)

# Objective
total_revenue = full_weighted_quantity * full_weighted_price + semi_weighted_quantity * semi_weighted_price
model.maximize(total_revenue)

print(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost $550 and $2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is $450 and the profit per commercial version is $1200. If the company does not want to spend more than $400000, how many of each software package should they produce to maximize the profits.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Decision variables
personal_licenses = intvar(0, 300, name="personal_licenses")
commercial_licenses = intvar(0, 300, name="commercial_licenses")

# Constraints
cost_constraint = 550*personal_licenses + 2000*commercial_licenses <= 400000
total_licenses_constraint = personal_licenses + commercial_licenses <= 300

# Objective function
profit = 450*personal_licenses + 1200*commercial_licenses

# Model
model = Model(
    cost_constraint,
    total_licenses_constraint,
    maximize(profit)
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
print(f"Number of personal licenses to produce: {personal_licenses.value()}")
print(f"Number of commercial licenses to produce: {commercial_licenses.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of $5.5 each, and x2 sugar cookies, at a profit of $12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
x1 = intvar(0, 100)  # number of strawberry cookies
x2 = intvar(0, 100)  # number of sugar cookies

# Define constraints
profit_strawberry = 5.5 * x1
profit_sugar = 12 * x2

# Daily demand constraints
demand_strawberry = x1 <= 100
demand_sugar = x2 <= 80

# Maximum cookies that can be made constraint
max_cookies = x1 + x2 <= 100

# Objective function
total_profit = profit_strawberry + profit_sugar

# Model
model = Model(
    maximize(total_profit),
    demand_strawberry,
    demand_sugar,
    max_cookies
)

# Solve model
solver = CPM_ortools(model)
solution = solver.solve()

# Print solution
if solution:
    print(f"Number of strawberry cookies to make: {x1.value()}")
    print(f"Number of sugar cookies to make: {x2.value()}")
    print(f"Maximum profit: ${total_profit.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
Error: list.remove(x): x not in list
Error: list.remove(x): x not in list
---------------------------------------------------------------------------------------------

A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs $1200 and attracts 2000 viewers. On Beta Video, a commercial costs $2000 and attracts 5000 viewers. On Gamma Live, a commercial costs $4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is $20000, how many commercials should be run in each of the three possible choices in order to maximize audience?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Data
costs = [1200, 2000, 4000]
audience_reach = [2000, 5000, 9000]
budget = 20000
max_beta_commercials = 8
total_commercials = 3

# Variables
pi_tv_commercials = intvar(0, total_commercials)
beta_video_commercials = intvar(0, total_commercials)
gamma_live_commercials = intvar(0, total_commercials)

# Constraints
cost_constraint = costs[0]*pi_tv_commercials + costs[1]*beta_video_commercials + costs[2]*gamma_live_commercials <= budget
beta_commercial_limit = beta_video_commercials <= max_beta_commercials
gamma_live_limit = gamma_live_commercials <= total_commercials // 3
pi_tv_min_percentage = pi_tv_commercials >= total_commercials * 0.2

# Objective
audience = audience_reach[0]*pi_tv_commercials + audience_reach[1]*beta_video_commercials + audience_reach[2]*gamma_live_commercials
maximize(audience)

# Model
model = Model(cost_constraint, beta_commercial_limit, gamma_live_limit, pi_tv_min_percentage)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
print(f"Number of commercials on Pi TV: {pi_tv_commercials.value()}")
print(f"Number of commercials on Beta Video: {beta_video_commercials.value()}")
print(f"Number of commercials on Gamma Live: {gamma_live_commercials.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_temp_checks = intvar(0, 22000//2)  # number of temperature checks
num_blood_tests = intvar(45, 22000//10)  # number of blood tests

# Define the constraints
model = Model(
    num_temp_checks >= 5*num_blood_tests,  # temperature checks should be at least 5 times as many as blood tests
    2*num_temp_checks + 10*num_blood_tests <= 22000  # total staff minutes constraint
)

# Define the objective
objective = -num_temp_checks - num_blood_tests  # maximize the number of patients seen

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_temp_checks = num_temp_checks.value()
optimal_num_blood_tests = num_blood_tests.value()

print("Optimal number of temperature checks:", optimal_num_temp_checks)
print("Optimal number of blood tests:", optimal_num_blood_tests)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_wide_pipes = intvar(5, 100, name="num_wide_pipes")  # at least 5 wide pipes
num_narrow_pipes = intvar(1, 300, name="num_narrow_pipes")
total_pipes = num_wide_pipes + num_narrow_pipes

# Define the constraints
problem = Model(
    num_wide_pipes >= 5,  # at least 5 wide pipes
    num_wide_pipes <= num_narrow_pipes / 3,  # number of wide pipes can be at most a third the number of narrow pipes
    25*num_wide_pipes + 15*num_narrow_pipes >= 900  # at least 900 units of water transported every minute
)

# Define the objective
minimize(total_pipes)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Total number of pipes required: {total_pipes.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
carts = intvar(0, 100, shape=1, name="carts")
trolleys = intvar(12, 100, shape=1, name="trolleys")

# Define the constraints
workers_carts = 2 * carts <= 100
workers_trolleys = 4 * trolleys <= 100
total_equipment_constraint = 5 * carts + 7 * trolleys >= 100
trolleys_percentage_constraint = trolleys <= 0.4 * (carts + trolleys)

# Define the objective
total_workers = 2 * carts + 4 * trolleys

# Define the model
model = Model(
    workers_carts,
    workers_trolleys,
    total_equipment_constraint,
    trolleys_percentage_constraint,
    total_workers
)

# Find the optimal solution
minimize(
    sum(total_workers)
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
subsoil = intvar(0, 150, name="subsoil")
topsoil = intvar(10, 150, name="topsoil")

# Define the constraints
problem = Model(
    subsoil + topsoil <= 150,  # total bags of subsoil and topsoil should not exceed 150
    topsoil >= 10,  # at least 10 bags of topsoil must be used
    topsoil <= 0.3 * (subsoil + topsoil)  # at most 30% of all bags of soil can be topsoil
)

# Define the objective function to minimize the total amount of water required
water_subsoil = 10 * subsoil
water_topsoil = 6 * topsoil
total_water = water_subsoil + water_topsoil
minimize_objective = minimize(total_water)

# Solve the problem
problem += minimize_objective
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of bags of subsoil: {subsoil.value()}")
    print(f"Number of bags of topsoil: {topsoil.value()}")
    print(f"Total amount of water required: {total_water.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute.  The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_dense_lifts = intvar(0, 100, name="num_dense_lifts")
num_loose_lifts = intvar(5, 100, name="num_loose_lifts")

# Define the constraints
num_guests_dense = num_dense_lifts * 45
num_guests_loose = num_loose_lifts * 20

total_guests = num_guests_dense + num_guests_loose
total_lifts = num_dense_lifts + num_loose_lifts

constraint_num_guests = total_guests >= 1000
constraint_electricity = num_dense_lifts * 30 + num_loose_lifts * 22 <= 940

# Define the objective
model = Model(
    minimize=total_lifts,
    constraints=[
        constraint_num_guests,
        constraint_electricity
    ]
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of densely-seated ski lifts: {num_dense_lifts.value()}")
    print(f"Number of loosely-seated ski lifts: {num_loose_lifts.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A strata-management company is looking into purchasing two types of air conditioners, a low-power and a high-power model. A low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity every day. A high-power model can cool down 17 housing units and uses 250 units of electricity every day. Since the low-powered model is not good for the aesthetics, the strata decided to limit the number of low-powered models to only 30% and at least 7 high-powered models must be used. If the apartment needs to condition at least 250 housing units and has 3400 units of electricity available, how many of each air conditioner should the strata company buy to minimize the total number of air conditioners?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
low_power = intvar(0, 250, name="low_power")
high_power = intvar(0, 250, name="high_power")

# Define the problem
model = Model(
    low_power >= 0,
    high_power >= 0,
    low_power <= 0.3 * (low_power + high_power),  # Limit the number of low-powered models to 30%
    high_power >= 7,  # At least 7 high-powered models
    low_power * 12 + high_power * 17 >= 250,  # Condition at least 250 housing units
    low_power * 150 + high_power * 250 <= 3400,  # Total electricity available is 3400 units
    minimize=low_power + high_power  # Minimize the total number of air conditioners
)

# Solve the problem
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of low-powered air conditioners: {low_power.value()}")
    print(f"Number of high-powered air conditioners: {high_power.value()}")
else:
    print("No solution found")
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
calcium_pills = intvar(0, 130)
vitamin_d_pills = intvar(0, 130)

# Define the model
model = Model(
    calcium_pills >= 40,
    calcium_pills >= vitamin_d_pills,
    calcium_pills + vitamin_d_pills >= 130
)

# Define the objective function
total_time = 5 * calcium_pills + 6 * vitamin_d_pills
model.minimize(total_time)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of calcium pills: {calcium_pills.value()}")
    print(f"Number of vitamin D pills: {vitamin_d_pills.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park $2 in prizes per hour whereas climbing games cost $3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
throwing_games = intvar(0, 100, name="throwing_games")
climbing_games = intvar(5, 100, name="climbing_games")

# Define the constraints
model = Model(
    throwing_games >= 2 * climbing_games,
    throwing_games >= 0,
    climbing_games >= 5,
    throwing_games * 2 + climbing_games * 3 <= 100
)

# Define the objective
total_customers = 15 * throwing_games + 8 * climbing_games
model.maximize(total_customers)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_throwing_games = throwing_games.value()
optimal_climbing_games = climbing_games.value()
optimal_total_customers = total_customers.value()

print("Optimal number of throwing games:", optimal_throwing_games)
print("Optimal number of climbing games:", optimal_climbing_games)
print("Optimal total number of customers attracted per hour:", optimal_total_customers)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

In a science fair, there are two types of tables that can be used to display the children’s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_circular_tables = intvar(0, 100, name="num_circular_tables")
num_rectangular_tables = intvar(0, 100, name="num_rectangular_tables")

# Define the constraints
space_taken_circular = 15 * num_circular_tables
space_taken_rectangular = 20 * num_rectangular_tables

num_participants_circular = 5 * num_circular_tables
num_participants_rectangular = 4 * num_rectangular_tables

num_poster_boards_circular = 4 * num_circular_tables
num_poster_boards_rectangular = 4 * num_rectangular_tables

# Total number of participants and poster boards constraints
participants_constraint = num_participants_circular + num_participants_rectangular >= 500
poster_boards_constraint = num_poster_boards_circular + num_poster_boards_rectangular >= 300

# Total space constraint
space_constraint = space_taken_circular + space_taken_rectangular <= 1900

# Objective function
total_guests_catered = 8 * num_circular_tables + 12 * num_rectangular_tables

# Define the model
model = Model(
    participants_constraint,
    poster_boards_constraint,
    space_constraint,
    maximize(total_guests_catered)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of circular tables: {num_circular_tables.value()}")
    print(f"Number of rectangular tables: {num_rectangular_tables.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
high_volume_pipes = intvar(0, 160, name="high_volume_pipes")
low_volume_pipes = intvar(8, 160, name="low_volume_pipes")

# Define the constraints
problem = Model(
    high_volume_pipes * 10000 + low_volume_pipes * 5000 >= 150000,  # total gas demand constraint
    high_volume_pipes * 12 + low_volume_pipes * 5 <= 160,  # total technicians constraint
    high_volume_pipes <= 0.35 * (high_volume_pipes + low_volume_pipes),  # maximum percentage of high-volume pipes
)

# Define the objective (minimize the total number of pipes)
objective = high_volume_pipes + low_volume_pipes
problem.set_objective(minimize=objective)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of high-volume pipes: {high_volume_pipes.value()}")
    print(f"Number of low-volume pipes: {low_volume_pipes.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A hospital hires ultrasound technicians and graduate researchers to image patients. An ultrasound technician works 8 hours per shift while a graduate researcher works 5 hours per shift. Ultrasound technicians are paid $300 per shift while graduate researchers are paid $100 per shift. However, due to regulations, there must be twice as many ultrasound technician shifts than graduate researcher shifts. Currently, the hospital needs 500 hours of ultrasound services to meet needs. If the hospital has a budget of $14000, how many of each worker certified to use the ultrasound should be scheduled to reduce the total number of workers?
N/A
```python
from cpmpy import *
import cpmpy.discrete_var as discrete_var

# Define decision variables
ultrasound_tech_shifts = discrete_var(0, 100, shape=1, name="ultrasound_tech_shifts")
researcher_shifts = discrete_var(0, 50, shape=1, name="researcher_shifts")

# Define constraints
model = Model([
    ultrasound_tech_shifts == 2 * researcher_shifts,
    8 * ultrasound_tech_shifts + 5 * researcher_shifts == 500,
    300 * ultrasound_tech_shifts + 100 * researcher_shifts <= 14000
])

# Objective function (not needed for constraint programming)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print(f"Number of ultrasound technician shifts: {ultrasound_tech_shifts.value()}")
    print(f"Number of graduate researcher shifts: {researcher_shifts.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_molars = intvar(0, 3000, name="num_molars")
num_canines = intvar(0, 3000, name="num_canines")

# Define the constraints
resin_used = 20*num_molars + 15*num_canines <= 3000
pain_killer_used = 3*num_molars + 2.3*num_canines

# At least 60% of cavities filled must be in canines
at_least_60_percent_canines = num_canines >= 0.6*(num_molars + num_canines)

# Reserve materials to fill at least 45 molars
at_least_45_molars = num_molars >= 45

# Objective: minimize the amount of pain killer needed
model = Model(
    resin_used,
    pain_killer_used,
    at_least_60_percent_canines,
    at_least_45_molars,
    minimize=pain_killer_used
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_num_molars = num_molars.value()
optimal_num_canines = num_canines.value()

print("Optimal number of molars to schedule:", optimal_num_molars)
print("Optimal number of canines to schedule:", optimal_num_canines)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in $50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in $43 on tips.  The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define decision variables
bike_shifts = intvar(0, 40, name="bike_shifts")
scooter_shifts = intvar(5, 40, name="scooter_shifts")

# Define constraints
energy_used_bike = 5 * bike_shifts
energy_used_scooter = 6 * scooter_shifts
total_orders = 10 * bike_shifts + 7 * scooter_shifts

model = Model(
    energy_used_bike <= 230,
    energy_used_scooter <= 230,
    total_orders >= 320
)

# Objective function
tips_bike = 50 * bike_shifts
tips_scooter = 43 * scooter_shifts
total_tips = tips_bike + tips_scooter

model.maximize(total_tips)

print(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_pop_concerts = intvar(0, 100, shape=1)
num_rnb_concerts = intvar(0, 100, shape=1)

# Define the constraints
audience_constraint = num_pop_concerts*100 + num_rnb_concerts*240 >= 10000
practice_days_constraint = num_pop_concerts*2 + num_rnb_concerts*4 <= 180
rnb_percentage_constraint = num_rnb_concerts <= (num_pop_concerts + num_rnb_concerts) * 0.4

# Define the objective
total_concerts = num_pop_concerts + num_rnb_concerts
model = Model(minimize=total_concerts)

# Add constraints to the model
model.add(audience_constraint)
model.add(practice_days_constraint)
model.add(rnb_percentage_constraint)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print("Number of pop concerts:", num_pop_concerts.value())
    print("Number of R&B concerts:", num_rnb_concerts.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?
N/A
```python
from cpmpy import *

# Define the variables
num_large_pizzas = intvar(0, 1000, name="num_large_pizzas")
num_medium_pizzas = intvar(200, 1000, name="num_medium_pizzas")

# Define the constraints
dough_constraint = 12*num_large_pizzas + 8*num_medium_pizzas >= 10000
toppings_constraint = 5*num_large_pizzas + 4*num_medium_pizzas >= 4400
medium_pizzas_constraint = num_medium_pizzas >= 200
large_pizzas_constraint = num_large_pizzas >= 2*num_medium_pizzas

# Define the objective (minimize time spent baking)
time_spent_baking = 12*num_large_pizzas + 8*num_medium_pizzas

# Define the model
model = Model(
    dough_constraint,
    toppings_constraint,
    medium_pizzas_constraint,
    large_pizzas_constraint,
    minimize(time_spent_baking)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print(f"Number of large pizzas: {num_large_pizzas.value()}")
    print(f"Number of medium pizzas: {num_medium_pizzas.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_limousines = intvar(0, 400, name="num_limousines")
num_buses = intvar(0, 400, name="num_buses")

# Define the constraints
problem = Model(
    num_limousines + num_buses >= 400,  # At least 400 people need to be transported
    num_limousines >= 0.7 * (num_limousines + num_buses),  # At least 70% of vehicles must be limousines
)

# Define the objective
objective = num_limousines + num_buses

# Solve the problem
minimize(objective, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
num_prevention_pills = intvar(0, 5000, name="num_prevention_pills")
num_treatment_pills = intvar(50, 2500, name="num_treatment_pills")

# Define the constraints
model = Model(
    num_prevention_pills >= 2*num_treatment_pills,  # At least two times as many prevention pills as treatment pills
    num_treatment_pills >= 50,  # At least 50 treatment pills
    15*num_prevention_pills + 25*num_treatment_pills <= 10000  # Budget constraint
)

# Define the objective
model.maximize(num_treatment_pills)

# Solve the model
cp.solve(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
cart_deliveries = intvar(0, 100)  # number of deliveries by cart
hand_deliveries = intvar(0, 100)  # number of deliveries by hand

# Define constraints
num_servers_hand = hand_deliveries >= 3  # at least 3 servers delivering by hand
total_interactions = 70*cart_deliveries + 85*hand_deliveries == 4000  # total customer interactions per hour
cart_percentage = cart_deliveries >= 0.7*(cart_deliveries + hand_deliveries)  # at least 70% of delivery shifts by cart

# Objective function: minimize the total number of refills per hour
total_refills = 5*cart_deliveries + 20*hand_deliveries

# Define the model
model = Model(minimize=total_refills, constraints=[num_servers_hand, total_interactions, cart_percentage])

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of deliveries by cart: {cart_deliveries.value()}")
    print(f"Number of deliveries by hand: {hand_deliveries.value()}")
    print(f"Total number of refills per hour: {total_refills.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_salmon = intvar(0, 100, name="num_salmon")  # number of bowls of salmon
num_eggs = intvar(0, 100, name="num_eggs")  # number of bowls of eggs

# Define the constraints
calories_salmon = 300 * num_salmon
calories_eggs = 200 * num_eggs
total_calories = calories_salmon + calories_eggs >= 2000

protein_salmon = 15 * num_salmon
protein_eggs = 8 * num_eggs
total_protein = protein_salmon + protein_eggs >= 90

sodium_salmon = 80 * num_salmon
sodium_eggs = 20 * num_eggs
total_sodium = sodium_salmon + sodium_eggs

# At most 40% of meals can be eggs
at_most_eggs = num_eggs <= 0.4 * (num_salmon + num_eggs)

# Define the objective (minimize sodium intake)
model = Model(
    minimize(total_sodium),
    total_calories,
    total_protein,
    at_most_eggs
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_num_salmon = num_salmon.value()
optimal_num_eggs = num_eggs.value()

print("Optimal number of bowls of salmon:", optimal_num_salmon)
print("Optimal number of bowls of eggs:", optimal_num_eggs)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
original_meals = intvar(0, 100, name="original_meals")
experimental_meals = intvar(0, 100, name="experimental_meals")

# Define the constraints
food_waste_constraint = 20*original_meals + 25*experimental_meals <= 800
wrapping_waste_constraint = 45*original_meals + 35*experimental_meals <= 900

# Define the objective
cooking_time = 10*original_meals + 15*experimental_meals
minimize(cooking_time)

# Solve the problem
model = Model(food_waste_constraint, wrapping_waste_constraint)
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of original meals: {original_meals.value()}")
    print(f"Number of experimental meals: {experimental_meals.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day.  The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?
N/A
```python
from cpmpy import *

# Define variables
chop_saw = intvar(0, 10, name="chop_saw")  # number of chop saws
steel_cutter = intvar(0, 10, name="steel_cutter")  # number of steel cutters

# Define constraints
# Total pounds of steel cut every day
total_steel_cut = 25 * chop_saw + 5 * steel_cutter == 520

# Total units of waste generated every day
total_waste = 25 * chop_saw + 3 * steel_cutter <= 400

# Define objective (minimize total number of metal-working equipment)
total_machines = chop_saw + steel_cutter

# Define CP model
model = Model(
    total_steel_cut,
    total_waste,
    minimize=total_machines
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print(f"Optimal number of chop saws: {chop_saw.value()}")
    print(f"Optimal number of steel cutters: {steel_cutter.value()}")
else:
    print("No solution found")
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
large_trips = intvar(0, 7)  # Number of large cruise ship trips
small_trips = intvar(0, 100)  # Number of small cruise ship trips

# Define constraints
total_customers = large_trips * 2000 + small_trips * 800 >= 20000
total_trips = large_trips + small_trips >= 0.4 * (large_trips + small_trips)

# Define objective function to minimize total pollution
total_pollution = large_trips * 20 + small_trips * 15

# Define CP model
model = Model(
    total_customers,
    total_trips,
    total_pollution,
    minimize=total_pollution
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of large cruise ship trips: {large_trips.value()}")
    print(f"Number of small cruise ship trips: {small_trips.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
led_count = intvar(0, 300, name="led_count")
fluorescence_count = intvar(0, 300, name="fluorescence_count")

# Define the constraints
total_fixtures = led_count + fluorescence_count >= 300
total_electricity = 5*led_count + 8*fluorescence_count <= 2000
fluorescence_percentage = (fluorescence_count / (led_count + fluorescence_count)) >= 0.3

# Define the objective (minimize the total number of light changes)
total_changes = 3*led_count + 4*fluorescence_count

# Define the model
model = Model(
    total_fixtures,
    total_electricity,
    fluorescence_percentage,
    minimize(total_changes)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of LED fixtures to install: {led_count.value()}")
    print(f"Number of fluorescence lamps to install: {fluorescence_count.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A market owner wants to start a jam business. He can either sell one unit of jam to customers in a set of small packets or jugs. A set of small packets can hold 1000 ml of jam while a jug can hold 1250 ml of jam. Since a set of small packets are more expensive to make, at least three times as many jugs must be used than sets of small packets. On the other hand, at least 35 sets of small packets should be filled. If the market owner has 65000 ml of jam, how many sets of small packets or jugs should be selected to maximize the total number of units that he can sell to his customers?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
total_jam = 65000
packet_capacity = 1000
jug_capacity = 1250
packet_cost = 1
jug_cost = 0.8

# Variables
num_packets = intvar(0, total_jam // packet_capacity, name="num_packets")
num_jugs = intvar(0, total_jam // jug_capacity, name="num_jugs")

# Constraints
model = Model(
    num_packets * packet_capacity + num_jugs * jug_capacity <= total_jam,
    num_jugs >= 3 * num_packets,
    num_packets >= 35
)

# Objective
total_units = num_packets + num_jugs
maximize(total_units)

# Solve
solver = CPM_ortools(model)
solver.solve()

print(f"Number of sets of small packets: {num_packets.value()}")
print(f"Number of jugs: {num_jugs.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A navy ship is stocking food onto their submarine and their staff can eat either a salad or fruit bowl for their fibre and vitamin intake. The nutritionist in charge of this voyage needs to ensure that their staff gets at least 90 units of vitamin and 110 units of fibre each. Each salad contains 7 units of vitamins and 12 units of fibre. Each fruit bowl contains 15 units of vitamin and 3 units of fibre. In addition, since fruit bowls take longer to prepare, at most 30% of their meals should be fruit bowls. If each salad contains 2 units of potassium and each fruit bowl contains 8 units of potassium, how many of each should they prepare for each staff to maximize their potassium intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
num_salads = intvar(0, 100, name="num_salads")
num_fruit_bowls = intvar(0, 100, name="num_fruit_bowls")

# Define constraints
vitamin_constraint = 7*num_salads + 15*num_fruit_bowls >= 90
fibre_constraint = 12*num_salads + 3*num_fruit_bowls >= 110
potassium_constraint = 2*num_salads + 8*num_fruit_bowls  # Objective function

# Additional constraint
fruit_bowl_percentage_constraint = num_fruit_bowls <= 0.3*(num_salads + num_fruit_bowls)

# Define the CP model
model = Model(vitamin_constraint, fibre_constraint, potassium_constraint, fruit_bowl_percentage_constraint)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of salads: ", num_salads.value())
    print("Number of fruit bowls: ", num_fruit_bowls.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_retail_stores = intvar(0, 10, shape=1)
num_outlet_stores = intvar(0, 10, shape=1)

# Define the constraints
num_customers_retail = 200 * num_retail_stores
num_customers_outlet = 80 * num_outlet_stores
total_customers = num_customers_retail + num_customers_outlet >= 1200

num_employees_retail = 6 * num_retail_stores
num_employees_outlet = 4 * num_outlet_stores
total_employees = num_employees_retail + num_employees_outlet <= 50

# Define the objective (minimize the number of stores open)
num_stores_open = num_retail_stores + num_outlet_stores

# Solve the problem
model = Model(total_customers, total_employees, minimize=num_stores_open)
solver = CPM_ortools(model)
solver.solve()
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A soda company sells soda in two types of containers: cans and glass bottles. A can holds 250 ml of soda whereas a bottle holds 1000 ml of soda. The soda company needs to bottle at least 1000000 ml of soda every day and due to the ability to sell soda cans as packs, there must be at least three times more cans than glass bottles. However, because of previous contracts with gas stations, there must be at least 100 glass bottles made. How many of each should be made to maximize the total number of units produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_cans = intvar(0, 10000, shape=1, name="num_cans")
num_bottles = intvar(0, 10000, shape=1, name="num_bottles")

# Define the constraints
problem = Model(
    num_cans*250 + num_bottles*1000 >= 1000000,  # Total soda volume constraint
    num_cans >= 3*num_bottles,  # At least three times more cans than bottles
    num_bottles >= 100  # At least 100 glass bottles
)

# Define the objective
total_units = num_cans + num_bottles

# Define the solver
solver = CPM_ortools(problem, minimize=-total_units)

# Solve the problem
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Number of cans:", num_cans.value())
    print("Number of bottles:", num_bottles.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is $300 while the cost over air for each trip is $550. The company needs to transport at least 200 tons of candles and they have a budget of $20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define decision variables
freight_trips = intvar(5, 100)  # number of trips using freight
air_trips = intvar(0, 100)  # number of trips using air

# Define constraints
total_candles = freight_trips * 5 + air_trips * 3 >= 200  # at least 200 tons of candles
total_cost = freight_trips * 300 + air_trips * 550 <= 20000  # budget constraint
air_percentage = air_trips * 3 >= 0.3 * (freight_trips * 5 + air_trips * 3)  # at least 30% of tons through air
min_freight_trips = freight_trips >= 5  # at least 5 trips through freight

# Define objective
minimize(freight_trips + air_trips)  # minimize the total number of trips

# Solve the problem
model = Model(total_candles, total_cost, air_percentage, min_freight_trips)
stats = model.solve()

# Print the optimal solution
if stats and stats['status'] == 'optimal':
    print("Optimal number of trips using freight:", freight_trips.value())
    print("Optimal number of trips using air:", air_trips.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the problem data
total_people = 80
large_unit_capacity = 6
small_unit_capacity = 2
large_unit_parking = 2
small_unit_parking = 1
min_small_units = 5
min_large_percentage = 0.75

# Define the variables
num_large_units = intvar(0, total_people // large_unit_capacity, name="num_large_units")
num_small_units = intvar(min_small_units, total_people // small_unit_capacity, name="num_small_units")

# Define the constraints
problem = Model(
    num_large_units >= total_people * min_large_percentage // large_unit_capacity,
    num_small_units >= min_small_units,
    num_large_units + num_small_units == total_people // small_unit_capacity,
)

# Define the objective
total_parking_spots = num_large_units * large_unit_parking + num_small_units * small_unit_parking
minimize_objective = minimize(total_parking_spots)

# Solve the problem
solver = CPM_ortools(problem)
solver.solve()

# Get the optimal solution
optimal_num_large_units = num_large_units.value()
optimal_num_small_units = num_small_units.value()
optimal_total_parking_spots = total_parking_spots.value()

print("Optimal number of large units:", optimal_num_large_units)
print("Optimal number of small units:", optimal_num_small_units)
print("Total parking spots required:", optimal_total_parking_spots)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_small_boxes = intvar(0, 100, shape=1)
num_large_boxes = intvar(5, 100, shape=1)

# Define the constraints
model = Model(
    num_small_boxes >= 3 * num_large_boxes,
    25 * num_small_boxes + 45 * num_large_boxes >= 750
)

# Define the objective
total_boxes = num_small_boxes + num_large_boxes

# Define the solver
solver = CPM_ortools(model)

# Find the optimal solution
solution = solver.minimize(total_boxes)

print("Number of small boxes:", num_small_boxes.value())
print("Number of large boxes:", num_large_boxes.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Grain is transported from a farm to local grocery stores in either large bags or tiny bags. Large bags can hold 25 kg of grain and requires 4 units of energy to transport. Tiny bags can hold 6 kg of grain and requires 1.5 units of energy to transport. The distribution process has access to 110 units of energy. Because of popularity of buying in bulk, there must be twice as many large bags as tiny bags of rice. Additionally, there must be at least 20 tiny bags of rice. How many of each size of rice bags should be used to maximize the total amount of grain in weight?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_large_bags = intvar(0, 100, name="num_large_bags")  # maximum number of large bags
num_tiny_bags = intvar(20, 50, name="num_tiny_bags")  # minimum number of tiny bags

# Define the objective function to maximize total weight of grain
total_weight = 25*num_large_bags + 6*num_tiny_bags

# Define the constraint for total energy available
energy_constraint = 4*num_large_bags + 1.5*num_tiny_bags <= 110

# Constraint for twice as many large bags as tiny bags
twice_as_many_constraint = num_large_bags == 2*num_tiny_bags

# Model definition
model = Model(
    maximize(total_weight),
    energy_constraint,
    twice_as_many_constraint
)

# Solve the model
solver = CPM_ortools(model)
solver.solve()

# Output the optimal solution
print(f"Number of large bags: {num_large_bags.value()}")
print(f"Number of tiny bags: {num_tiny_bags.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?
N/A
```python
from cpmpy import *

# Define the variables
electric_jacks = intvar(0, 15)  # number of automatic electric jacks
gas_jacks = intvar(0, 100)  # number of gas-powered jacks

# Define the constraints
# Processing capacity constraints
processing_capacity_constraint = electric_jacks * 5 + gas_jacks * 4 <= 80

# Resource constraints
electricity_constraint = electric_jacks * 6 <= 50
gas_constraint = gas_jacks * 7 <= 80

# Objective function
total_cars_processed = electric_jacks * 5 + gas_jacks * 4

# Define the model
model = Model(
    processing_capacity_constraint,
    electricity_constraint,
    gas_constraint,
    maximize(total_cars_processed)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print("Number of automatic electric jacks:", electric_jacks.value())
    print("Number of gas-powered jacks:", gas_jacks.value())
    print("Total cars processed per hour:", total_cars_processed.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_trains = intvar(0, 10)  # maximum number of trains
num_trams = intvar(0, 20)  # maximum number of trams

# Define the constraints
model = Model(
    num_trains * 120 + num_trams * 30 >= 600,  # total number of people transported per hour
    num_trams >= 2 * num_trains  # number of trams must be at least twice the number of trains
)

# Define the objective
total_units = num_trains + num_trams
model.minimize(total_units)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Optimal number of trains:", num_trains.value())
    print("Optimal number of trams:", num_trams.value())
    print("Total number of transportation units required:", total_units.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
palladium_heavy = intvar(0, 450, name="palladium_heavy")
platinum_heavy = intvar(0, 390, name="platinum_heavy")

# Define the constraints
model = Model(
    palladium_heavy * 25 + platinum_heavy * 14 <= 390,  # Palladium constraint
    palladium_heavy * 15 + platinum_heavy * 20 <= 450  # Platinum constraint
)

# Define the objective function to maximize the amount converted into carbon dioxide
objective = - (palladium_heavy * 5 + platinum_heavy * 4)

# Solve the problem
minimize(objective, model, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_J = intvar(0, 1000)  # number of times process J is used
num_P = intvar(0, 1000)  # number of times process P is used

# Define the constraints
water_constraint = 8*num_J + 6*num_P <= 1500
pollution_constraint = 3*num_J + 5*num_P <= 1350

# Define the objective function to maximize the amount of metal extracted
metal_extracted = 5*num_J + 9*num_P

# Define the model
model = Model(
    water_constraint,
    pollution_constraint,
    maximize(metal_extracted)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of times process J is used: {num_J.value()}")
    print(f"Number of times process P is used: {num_P.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
escalators = intvar(0, 100, shape=1, name="escalators")
elevators = intvar(0, 100, shape=1, name="elevators")

# Define the constraints
problem = Model(
    escalators * 20 + elevators * 8 >= 400,  # total capacity constraint
    escalators >= 3 * elevators,  # at least three times more escalators than elevators
    elevators >= 2  # at least 2 elevators must be used
)

# Define the objective
objective = escalators * 5 + elevators * 2

# Minimize the total units of space taken
problem.minimize(objective)
```
True
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
method_A = intvar(0, 1000, name="method_A")  # Number of hours to use method A
method_B = intvar(0, 1000, name="method_B")  # Number of hours to use method B

# Define the constraints
special_element_constraint = 60*method_A + 65*method_B <= 3500
fabric_constraint = 25*method_A + 45*method_B >= 1400
plastic_constraint = 14*method_A + 25*method_B >= 1000

# Define the objective (minimize total time)
total_time = method_A + method_B

# Define the CP model
model = Model(
    special_element_constraint,
    fabric_constraint,
    plastic_constraint,
    total_time
)

# Solve the CP model
minimize(
    model,
    solver=CPM_ortools()
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A taxi company will purchase vehicles to rent to their drivers. They are interested in purchasing either motorcycles or sedans. A motorcycle can transport 30 people, produces 4 units of pollution, and earns the taxi company $100 per shift. A sedan can transport 70 people, produces 15 units of pollution and earns the company $225 per shift. Because not every customer is comfortable with a motorcycle, at most 25% of vehicles can be motorcycles. Additionally, the company has committed to producing less than 200 units of pollution. The company needs to transport at least 1200 people every shift. How many of each type of vehicle should be used to maximize the total earnings for the taxi company per shift?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define decision variables
num_motorcycles = intvar(0, 100, name="num_motorcycles")
num_sedans = intvar(0, 100, name="num_sedans")

# Define constraints
total_people_constraint = num_motorcycles*30 + num_sedans*70 >= 1200
pollution_constraint = num_motorcycles*4 + num_sedans*15 <= 200
motorcycle_percentage_constraint = num_motorcycles <= 0.25*(num_motorcycles + num_sedans)

# Define objective function
total_earnings = num_motorcycles*100 + num_sedans*225

# Define and solve the CP model
model = cp.CpModel()
model.add(total_people_constraint)
model.add(pollution_constraint)
model.add(motorcycle_percentage_constraint)
model.maximize(total_earnings)

# Get the solution
solver = cp.CpSolver()
status = solver.solve(model)

if status == cp.OPTIMAL:
    optimal_num_motorcycles = solver.get_value(num_motorcycles)
    optimal_num_sedans = solver.get_value(num_sedans)
    print("Optimal number of motorcycles:", optimal_num_motorcycles)
    print("Optimal number of sedans:", optimal_num_sedans)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_kayaks = intvar(0, 550, name="num_kayaks")
num_motorboats = intvar(0, 550, name="num_motorboats")

# Define the constraints
num_people = num_kayaks*4 + num_motorboats*5 >= 550
num_motorboat_trips = num_motorboats <= 25
at_least_kayak_trips = num_kayaks*5 >= 0.75*(num_kayaks*5 + num_motorboats*3)

# Define the objective function to minimize the total time
total_time = num_kayaks*5 + num_motorboats*3

# Define the model
model = Model(
    num_people,
    num_motorboat_trips,
    at_least_kayak_trips,
    minimize=total_time
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print(f"Number of kayaks: {num_kayaks.value()}")
    print(f"Number of motorboats: {num_motorboats.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
blood_tests = intvar(0, 7525 // 30)  # Number of blood tests
ear_tests = intvar(12, 7525 // 5)  # Number of ear tests

# Define the constraints
model = Model(
    blood_tests >= 3 * ear_tests,  # At least three times as many blood tests as ear tests
    blood_tests * 30 + ear_tests * 5 <= 7525  # Total time constraint
)

# Define the objective
objective = -1 * (blood_tests + ear_tests)  # Maximize the number of tests

# Solve the problem
model += minimize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_blood_tests = blood_tests.value()
optimal_ear_tests = ear_tests.value()

print("Optimal number of blood tests:", optimal_blood_tests)
print("Optimal number of ear tests:", optimal_ear_tests)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges $100 per hour and the common company charges $72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Constants
rate_specialized = 60  # images per hour
rate_common = 40  # images per hour
cost_specialized = 100  # dollars per hour
cost_common = 72  # dollars per hour
total_images = 10000  # total number of images
special_images = total_images // 3  # at least a third of work must be allocated to the specialized company

# Variables
specialized_hours = intvar(0, total_images // rate_specialized)  # hours allocated to specialized company
common_hours = intvar(0, total_images // rate_common)  # hours allocated to common company

# Constraints
model = Model(
    specialized_hours * rate_specialized + common_hours * rate_common >= total_images,  # total number of images annotated
    specialized_hours >= special_images,  # at least a third of work allocated to specialized company
)

# Objective
total_cost = specialized_hours * cost_specialized + common_hours * cost_common
model.minimize(total_cost)

# Solve the model
cpmpy.solvers.cbc(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_guests = 80
num_golf_carts = int(num_guests / 4)  # Let's assume all guests are transported by golf carts initially
num_pull_carts = num_guests - num_golf_carts * 4

# Define the constraints
model = Model(
    num_golf_carts <= 0.6 * (num_golf_carts + num_pull_carts),  # At most 60% of carts can be golf carts
    num_guests == num_golf_carts * 4 + num_pull_carts,  # Total number of guests transported
    num_guests >= 80,  # At least 80 guests need to be transported
)

# Define the objective (minimize the total number of carts)
objective = num_golf_carts + num_pull_carts
model.minimize(objective)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the optimal solution
if solution:
    print("Number of golf carts:", num_golf_carts.value())
    print("Number of pull carts:", num_pull_carts.value())
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
acai_berry_smoothies = intvar(0, 1000, name="acai_berry_smoothies")
banana_chocolate_smoothies = intvar(0, 1000, name="banana_chocolate_smoothies")

# Define the constraints
problem = Model(
    acai_berry_smoothies * 7 + banana_chocolate_smoothies * 6 <= 3500,  # Acai berries constraint
    acai_berry_smoothies * 3 + banana_chocolate_smoothies * 4 <= 3200,  # Banana chocolate constraint
    acai_berry_smoothies <= banana_chocolate_smoothies,  # More banana chocolate smoothies constraint
    acai_berry_smoothies >= 0.35 * (acai_berry_smoothies + banana_chocolate_smoothies)  # At least 35% acai berry smoothies constraint
)

# Define the objective
total_water = acai_berry_smoothies * 3 + banana_chocolate_smoothies * 4
problem.set_objective(Minimize(total_water))

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Acai Berry Smoothies: {acai_berry_smoothies.value()}")
    print(f"Banana Chocolate Smoothies: {banana_chocolate_smoothies.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
num_basketballs = intvar(0, 1000, name="num_basketballs")
num_footballs = intvar(0, 1000, name="num_footballs")

# Define the constraints
materials_constraint = 5*num_basketballs + 3*num_footballs <= 1500
hours_constraint = num_basketballs + 2*num_footballs <= 750
minimum_footballs_constraint = num_footballs >= 50
minimum_basketballs_constraint = num_basketballs >= 3*num_footballs

# Define the objective function
total_sports_equipment = num_basketballs + num_footballs
maximize(total_sports_equipment)

# Define the model
model = Model(
    materials_constraint,
    hours_constraint,
    minimum_footballs_constraint,
    minimum_basketballs_constraint
)

# Solve the model
cpmpy.solvers.cbc(model)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
in_vivo = intvar(0, 10, name="in_vivo")  # Number of in-vivo experiments
ex_vivo = intvar(0, 10, name="ex_vivo")  # Number of ex-vivo experiments

# Define constraints
model = Model(
    in_vivo*30 + ex_vivo*45 <= 400,  # Total time for preparation
    in_vivo*60 + ex_vivo*30 <= 500,  # Total time for execution
    # Total radiation received
    in_vivo*2 + ex_vivo*3 == min(in_vivo*2 + ex_vivo*3)
)

# Solve the problem
minimize(
    sum(in_vivo*2 + ex_vivo*3),
    model = model,
    solver = CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?
N/A
```python
from cpmpy import *
import numpy as np

# Define the variables
num_runners = intvar(4, 100, name="num_runners")
num_canoers = intvar(0, 33, name="num_canoers")

# Define the constraints
total_hours_runners = num_runners * 4
total_hours_canoers = num_canoers * 2
total_hours_constraint = total_hours_runners + total_hours_canoers <= 200

total_bags_runners = num_runners * 3
total_bags_canoers = num_canoers * 10
total_bags_constraint = total_bags_runners + total_bags_canoers <= 100

# Additional constraints
at_least_4_runners = num_runners >= 4

# Objective function
total_bags_delivered = total_bags_runners + total_bags_canoers

# Define the model
model = Model(
    total_hours_constraint,
    total_bags_constraint,
    at_least_4_runners,
    maximize(total_bags_delivered)
)

# Solve the model
solution = model.solve()

# Print the solution
if solution:
    print(f"Number of runners: {num_runners.value()}")
    print(f"Number of canoers: {num_canoers.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
smoothie = intvar(0, 10)  # Number of smoothies
protein_bar = intvar(0, 20)  # Number of protein bars

# Define the constraints
model = Model(
    smoothie * 2 + protein_bar * 7 <= 2000,  # Total calories constraint
    smoothie * 2 + protein_bar * 7 == 2 * protein_bar * 2  # Protein intake constraint
)

# Define the objective
objective = -1 * (smoothie * 2 + protein_bar * 7)  # Maximize protein intake

# Solve the problem
model += maximize(objective)
solver = CPM_ortools(model)
solver.solve()

# Get the optimal solution
optimal_smoothies = smoothie.value()
optimal_protein_bars = protein_bar.value()

print("Optimal number of smoothies:", optimal_smoothies)
print("Optimal number of protein bars:", optimal_protein_bars)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
hours_northern = intvar(0, 10000)  # Number of hours the northern factory is run
hours_western = intvar(0, 10000)  # Number of hours the western factory is run

# Define constraints
constraint_plastic = hours_northern*40 + hours_western*35 <= 60000
constraint_anti_itch = hours_northern*800 + hours_western*650 >= 800000
constraint_topical_cream = hours_northern*700 + hours_western*750 >= 700000

# Define objective
total_time = hours_northern + hours_western

# Define CP model
model = Model(
    constraint_plastic,
    constraint_anti_itch,
    constraint_topical_cream,
    total_time
)

# Solve the model
minimize(
    model,
    time_limit=10,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
medication_patches = intvar(0, 100, name="medication_patches")
antibiotic_creams = intvar(0, 100, name="antibiotic_creams")

# Define the constraints
model = Model(
    medication_patches*3 + antibiotic_creams*5 <= 400,  # Staff time constraint
    medication_patches*5 + antibiotic_creams*6 <= 530,  # Materials constraint
    antibiotic_creams >= 2*medication_patches,  # At least twice as many antibiotic creams as medication patches
    medication_patches + antibiotic_creams <= 100  # Total batches constraint
)

# Define the objective
num_people_treated = medication_patches*3 + antibiotic_creams*2
model.maximize(num_people_treated)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of medication patches: {medication_patches.value()}")
    print(f"Number of antibiotic creams: {antibiotic_creams.value()}")
    print(f"Maximum number of people treated: {num_people_treated.value()}")
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks.  If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
num_caravans = intvar(0, 30)  # number of camel caravans
num_trucks = intvar(0, 10)  # number of desert trucks

# Define the constraints
model = Model(
    num_caravans*50 + num_trucks*150 == 1500,  # total units of goods to deliver
    num_caravans*12 + num_trucks*5 == minimize(num_caravans*12 + num_trucks*5)  # minimize total hours
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of camel caravans: {num_caravans.value()}")
    print(f"Number of desert trucks: {num_trucks.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Constants
antibiotics_available = 35000
gelatine_first_dose = 20
gelatine_second_dose = 60
min_second_dose = 40

# Variables
first_dose = intvar(0, antibiotics_available // 30)
second_dose = intvar(min_second_dose, antibiotics_available // 65)

# Constraints
model = Model(
    first_dose >= second_dose,
    sum(first_dose*gelatine_first_dose, second_dose*gelatine_second_dose) <= antibiotics_available
)

# Objective
minimize(
    sum(first_dose*gelatine_first_dose, second_dose*gelatine_second_dose)
)

# Solve
solver = CPM_ortools(model)
solver.solve()

# Output
print(f"Number of first-dose vaccines: {first_dose.value()}")
print(f"Number of second-dose vaccines: {second_dose.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define variables
chemical_A = intvar(300, 1000, name="chemical_A")  # at least 300 units of chemical A
chemical_B = intvar(900, 3000, name="chemical_B")  # at least 1500 units of total chemicals
time_A = 30
time_B = 45

# Define constraints
model = Model(
    chemical_A <= chemical_B // 3,  # at most a third as much chemical A as chemical B
    chemical_A * time_A + chemical_B * time_B  # minimize the total time
)

# Solve the problem
minimize(
    model,
    time_A * chemical_A + time_B * chemical_B,
    solver=CPM_ortools
)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A senior home has snacks of spinach and soybeans to increase their intake of iron. A cup of spinach contains 100 units of fibre and 5 mg of iron. A cup of soybeans contains 80 units of fibre and 12 mg of iron. Due to other nutritional requirements, the nurses decided that the number of cups of spinach must exceed the number of cups of soybeans. Furthermore, a cup of spinach contains 30 calories while a cup of soybeans contains 100 calories. If they schedule that the elderly need in total at least 12000 units of fibre and 300 mg of iron, how many cups of each should the nurses schedule to maximize the seniors’ total caloric intake?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
spinach = intvar(0, 100, shape=1, name="spinach")
soybeans = intvar(0, 100, shape=1, name="soybeans")

# Define constraints
fiber_constraint = spinach*100 + soybeans*80 >= 12000
iron_constraint = spinach*5 + soybeans*12 >= 300
calories_constraint = spinach*30 + soybeans*100 == maximize(spinach*30 + soybeans*100)
spinach_greater_than_soybeans = spinach > soybeans

# Define the problem
model = Model(fiber_constraint, iron_constraint, calories_constraint, spinach_greater_than_soybeans)

# Solve the problem
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print("Number of cups of spinach:", spinach.value())
    print("Number of cups of soybeans:", soybeans.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A keyboard manufacturer makes mechanical and standard keyboards. Mechanical keyboards are becoming more popular and thus the manufacturer aims to have five times as many mechanical than standard keyboards. A mechanical keyboard costs five units of plastic and two units of solder whereas a standard keyboard costs two units of plastic and one unit of solder. There are still customers that prefer a less noisy alternative. Therefore, there must be at least 30 standard keyboards. If the company has available 1000 units of plastic and 250 units of solder, how many of each type should be manufactured to maximize the total number of keyboards?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
mechanical_keyboards = intvar(0, 1000, name="mechanical_keyboards")
standard_keyboards = intvar(30, 1000, name="standard_keyboards")

# Define the constraints
problem = Model(
    mechanical_keyboards == 5 * standard_keyboards,
    5 * mechanical_keyboards + 2 * standard_keyboards <= 1000,
    2 * mechanical_keyboards + standard_keyboards <= 250
)

# Define the objective
total_keyboards = mechanical_keyboards + standard_keyboards
maximize(total_keyboards)

# Solve the problem
solver = CPM_ortools(problem)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of mechanical keyboards: {mechanical_keyboards.value()}")
    print(f"Number of standard keyboards: {standard_keyboards.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?
N/A
```python
from cpmpy import *
import cpmpy as cp

# Define the variables
num_sedans = intvar(0, 100)  # number of sedans to purchase
num_buses = intvar(0, 100)  # number of buses to purchase

# Define the constraints
pollution_constraint = 10*num_sedans + 40*num_buses <= 800  # total pollution should be at most 800 units
customer_constraint = 50*num_sedans + 250*num_buses >= 4600  # total customers should be at least 4600

# Define the objective (minimize the total number of vehicles)
total_vehicles = num_sedans + num_buses

# Create the model
model = cp.CpModel()

# Add the constraints to the model
model.add(pollution_constraint)
model.add(customer_constraint)

# Define the solver
solver = cp.CpSolver()

# Find the optimal solution
status = solver.solve(model)

if status == cp.OPTIMAL:
    optimal_num_sedans = solver.get_value(num_sedans)
    optimal_num_buses = solver.get_value(num_buses)
    print("Optimal number of sedans to purchase:", optimal_num_sedans)
    print("Optimal number of buses to purchase:", optimal_num_buses)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A dessert shop is popular for their only two desserts - matcha ice cream and orange sorbet. Two units of flavouring and four units of ice cream is required to make one order of matcha ice cream. Four units of flavouring and three units of water is required to make an order of orange sorbet. The dessert shop has recently been getting more orders online for orange sorbet and therefore, there should be more orange sorbet made than matcha ice cream. However, at least fifteen percent of desserts made must be matcha ice cream. The dessert shop has available 600 units of ice cream and 550 units of water. How many of each dessert should the shop make to minimize the total amount of flavouring needed?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
matcha_ice_cream = intvar(0, 100)  # Number of matcha ice cream orders
orange_sorbet = intvar(0, 100)  # Number of orange sorbet orders

# Define the constraints
flavouring_matcha = 2 * matcha_ice_cream  # Total units of flavouring for matcha ice cream
flavouring_orange = 4 * orange_sorbet  # Total units of flavouring for orange sorbet

ice_cream_total = 4 * matcha_ice_cream + 3 * orange_sorbet  # Total units of ice cream
water_total = 4 * orange_sorbet  # Total units of water

# The dessert shop has available resources
ice_cream_constraint = ice_cream_total <= 600
water_constraint = water_total <= 550

# More orange sorbet should be made than matcha ice cream
more_orange_than_matcha = orange_sorbet >= matcha_ice_cream

# At least 15% of desserts made must be matcha ice cream
at_least_15_percent_matcha = matcha_ice_cream >= 0.15 * (matcha_ice_cream + orange_sorbet)

# Objective: minimize the total amount of flavouring needed
objective = flavouring_matcha + flavouring_orange

# Define the model
model = Model(
    ice_cream_constraint,
    water_constraint,
    more_orange_than_matcha,
    at_least_15_percent_matcha,
    minimize(objective)
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print("Number of matcha ice cream orders:", matcha_ice_cream.value())
    print("Number of orange sorbet orders:", orange_sorbet.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A daycare center has children they must pick up and can use two types of vehicles: bus or a personal car. A bus can carry 9 children while a personal car can carry 4 children. The daycare has to pick up at least 100 children. Additionally, due to limitations of pollution, there must be more buses than personal cars. But some children require extra attention. Therefore, there must be at least 5 personal cars. How many of each form of transportation should the daycare center schedule for to minimize the total number of vehicles?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
bus_count = intvar(0, 100, shape=1, name="bus_count")
car_count = intvar(0, 100, shape=1, name="car_count")

# Define the constraints
problem = Model(
    bus_count*9 + car_count*4 >= 100,  # At least 100 children
    bus_count > car_count,  # More buses than personal cars
    car_count >= 5  # At least 5 personal cars
)

# Define the objective
objective = bus_count + car_count

# Solve the problem
model = CPM_ortools(problem, minimize=objective)
stats = model.solve()

# Get the optimal solution
optimal_bus_count = bus_count.value()
optimal_car_count = car_count.value()

print("Optimal number of buses:", optimal_bus_count)
print("Optimal number of personal cars:", optimal_car_count)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both coconut oil and lavender need to be added to a body wash. One unit of coconut oil takes 0.7 minutes to be effective while one unit of lavender takes 0.9 minutes to be effective. The body wash must contain at least 300 units of coconut oil and at most 550 units of both ingredients. Since too much coconut oil can make the body wash too oily, there can be at most thrice the amount of coconut oil as lavenders in the body wash. How many units of each should be added to the body wash to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)
N/A
```python
from cpmpy import *

# Define variables
coconut_oil = intvar(300, 550, name="coconut_oil")
lavender = intvar(1, 183, name="lavender")  # At most 1/3 of coconut oil

# Define constraints
model = Model(
    coconut_oil * 0.7 + lavender * 0.9 == min(coconut_oil * 0.7, lavender * 0.9),  # One must be added before the other
    coconut_oil + lavender <= 550,  # Total amount of both ingredients at most 550 units
    coconut_oil >= 300,  # Body wash must contain at least 300 units of coconut oil
    lavender <= coconut_oil / 3  # At most thrice the amount of coconut oil as lavenders
)

# Minimize the total amount of time
model.minimize(coconut_oil * 0.7 + lavender * 0.9)

# Solve the model
solution = model.solve()

# Print the optimal values
if solution:
    print("Optimal number of units of coconut oil:", coconut_oil.value())
    print("Optimal number of units of lavender:", lavender.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A chemical company uses two tests, a salinity test and a pH test. Each unit of the salinity test requires three probes. Whereas each unit of the pH test requires two probes. The chemical company must perform at least 250 pH tests. In total, at least 400 tests must be performed. Further, because of the importance of the salinity test, there must be at most 1.5 times more pH tests than salinity tests. How many times should each test be performed to minimize the total number of probes used?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
salinity_tests = intvar(0, 400, name="salinity_tests")
ph_tests = intvar(250, 400, name="ph_tests")

# Define the constraints
model = Model(
    salinity_tests*3 + ph_tests*2 >= 400,  # Total number of tests
    ph_tests <= 1.5*salinity_tests  # At most 1.5 times more pH tests than salinity tests
)

# Define the objective
objective = salinity_tests + ph_tests

# Solve the problem
minimize(objective, model, solver=CPM_ortools)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A municipality hires full-time and part-time staff to deliver mail. Part-time staff works 15 hours per week and gets paid 450 dollars whereas a full-time staff works 40 hours every week and gets paid 1280 dollars  for that week.  Since it is the week leading up to a holiday, planning ahead, the municipality needs 1000 hours of mail staff labor. The municipality has a budget of 31500 dollars for mail delivery for this season. How many of each type of staff should the municipality hire to decrease the total number of staff?
N/A
```python
from cpmpy import *
import cpmpy.model

# Define the variables
num_full_time_staff = intvar(0, 100)  # number of full-time staff to hire
num_part_time_staff = intvar(0, 100)  # number of part-time staff to hire

# Define the constraints
hours_full_time = num_full_time_staff * 40  # total hours worked by full-time staff
hours_part_time = num_part_time_staff * 15  # total hours worked by part-time staff

# Total hours worked should be at least 1000
constraint_total_hours = hours_full_time + hours_part_time >= 1000

# Total cost should not exceed the budget of 31500 dollars
cost_full_time = num_full_time_staff * 1280  # total cost of full-time staff
cost_part_time = num_part_time_staff * 450  # total cost of part-time staff

constraint_budget = cost_full_time + cost_part_time <= 31500

# Define the objective (minimize the total number of staff)
objective = num_full_time_staff + num_part_time_staff

# Define the CPMPy model
model = cpmpy.model.Model(
    [constraint_total_hours, constraint_budget],
    minimize=objective
)

# Solve the model
solution = model.solve()

# Print the optimal solution
if solution:
    print("Number of full-time staff to hire:", num_full_time_staff.value())
    print("Number of part-time staff to hire:", num_part_time_staff.value())
else:
    print("No solution found")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A landscaper has 2500 square feet of grass land in a customer’s backyard where they need to cut grass using either a heavy-duty yard machine or a gas lawn mower. For each square foot of land, the heavy-duty yard machine requires 2 seconds while the gas lawn mower takes 5 seconds. Per square foot, the heavy-duty yard machine produces 12 units of pollution and requires 3 units of fuel. Conversely, the gas lawn mower generates 10 units of pollution for each square foot and requires 2 units of fuel. There are 450 units of fuel available and the landscaper can produce no more than 2000 units of pollution. For how many square feet should each machine be used to minimize the time required to cut this customer’s backyard?
N/A
```python
from cpmpy import *
import cpmpy.solvers

# Define the variables
heavy_duty_sqft = intvar(0, 2500, name="heavy_duty_sqft")
gas_sqft = intvar(0, 2500, name="gas_sqft")

# Define the constraints
time_constraint = 2 * heavy_duty_sqft + 5 * gas_sqft <= 2500
fuel_constraint = 3 * heavy_duty_sqft + 2 * gas_sqft <= 450
pollution_constraint = 12 * heavy_duty_sqft + 10 * gas_sqft <= 2000

# Define the objective (minimize time)
time = 2 * heavy_duty_sqft + 5 * gas_sqft

# Define the model
model = Model(minimize=time, constraints=[time_constraint, fuel_constraint, pollution_constraint])

# Solve the model
solver = cpmpy.solvers.CpSolver()
solver.solve(model)

# Get the optimal values
optimal_heavy_duty_sqft = solver.get_value(heavy_duty_sqft)
optimal_gas_sqft = solver.get_value(gas_sqft)

print("Optimal square feet for heavy-duty yard machine:", optimal_heavy_duty_sqft)
print("Optimal square feet for gas lawn mower:", optimal_gas_sqft)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A park is designing their trails and can either create a wide trail or a narrow trail. A wide trail can take 50 visitors every day while the narrow trail expects 20 visitors every day. The wide trail will introduce 6 units of garbage and the narrow trail will introduce 3 units of garbage. There can be at most 3 wide trails and the park hopes to have at most 225 visitors every day. How many of each type of trail should the park construct to minimize the total amount of garbage produced.
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
wide_trail = intvar(0, 3, shape=1)
narrow_trail = intvar(0, 10, shape=1)  # There is no explicit upper limit for narrow trails

# Define constraints
visitors_constraint = wide_trail*50 + narrow_trail*20 <= 225
garbage_constraint = wide_trail*6 + narrow_trail*3

# Define objective
model = Model(minimize=garbage_constraint)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
print("Number of wide trails:", wide_trail.value())
print("Number of narrow trails:", narrow_trail.value())
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A brewery can ferment their product into either wine or kombucha. Each unit of wine requires 3 units of fruit and 8 units of water. Each unit of kombucha requires 5 units of fruit and 7 units of tea. The company has available 7000 units of water and 9000 units of tea. Wine sells for more, therefore the number of wine must be larger than the number of kombucha. Additionally, at least 20% of their products made must be kombucha. How many of each should the brewery make to minimize the total units of fruit required?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define the variables
wine = intvar(0, 1000, shape=1)
kombucha = intvar(0, 1000, shape=1)

# Define the constraints
fruit_wine = 3 * wine
fruit_kombucha = 5 * kombucha
water = 8 * wine + 7 * kombucha
tea = 5 * kombucha

model = Model(
    fruit_wine + fruit_kombucha <= 9000,  # Total fruit constraint
    water <= 7000,  # Water constraint
    tea <= 9000,  # Tea constraint
    wine > kombucha,  # Wine must be larger than kombucha
    kombucha >= 0.2 * (wine + kombucha)  # At least 20% must be kombucha
)

# Define the objective
objective = minimize(fruit_wine + fruit_kombucha)

# Solve the problem
model += objective
solver = CPM_ortools(model)
solver.solve()

# Get the optimal values
optimal_wine = wine.value()
optimal_kombucha = kombucha.value()

print("Optimal number of wine units:", optimal_wine)
print("Optimal number of kombucha units:", optimal_kombucha)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A hospital can transport their patients either using a type II ambulance or hospital van. The hospital needs to transport 320 patients every day. A type II ambulance is mounted on a truck-style chassis and can move 20 patients every shift and costs the hospital (including gas and salary) $820. A hospital van can move 15 patients and costs the hospital $550 every shift. The hospital can have at most 60% of shifts be hospital vans due to union limitations of the type II ambulance drivers. How many of shift using each type of vehicle should be scheduled to minimize the total cost to the hospital?
N/A
```python
from cpmpy import *
import numpy as np

# Constants
total_patients = 320
ambulance_capacity = 20
van_capacity = 15
ambulance_cost = 820
van_cost = 550
max_van_shifts = 0.6

# Decision variables
ambulance_shifts = intvar(0, total_patients//ambulance_capacity)
van_shifts = intvar(0, total_patients//van_capacity)

# Constraints
model = Model(
    ambulance_shifts * ambulance_capacity + van_shifts * van_capacity == total_patients,
    ambulance_shifts <= (1 - max_van_shifts) * (ambulance_shifts + van_shifts)
)

# Objective
total_cost = ambulance_shifts * ambulance_cost + van_shifts * van_cost
model.minimize(total_cost)
```
False
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An incandescent bulb manufacturing company uses either an argon gas approach or halogen gas approach to fill their light bulbs. The argon gas approach uses 10 units of gas and 12 units of glass to make 2 light bulbs. The halogen gas approach uses 12 units of gas and 8 units of glass to make 3 light bulbs. Additionally, the argon gas approach generates 3 units of heat while the halogen gas approach creates 4 units of heat. The manufacturing company has available 150 units of gas and 120 units of glass. If at most 28 units of heat can be generated during the manufacturing process, how many of each method should be used to maximize the number of light bulbs produced?
N/A
```python
from cpmpy import *
from cpmpy.solvers import CPM_ortools

# Define decision variables
argon_bulbs = intvar(0, 100, name="argon_bulbs")
halogen_bulbs = intvar(0, 100, name="halogen_bulbs")

# Define constraints
gas_constraint = argon_bulbs*10 + halogen_bulbs*12 <= 150
glass_constraint = argon_bulbs*12 + halogen_bulbs*8 <= 120
heat_constraint = argon_bulbs*3 + halogen_bulbs*4 <= 28

# Define objective function
num_bulbs = argon_bulbs*2 + halogen_bulbs*3

# Define the model
model = Model(
    gas_constraint,
    glass_constraint,
    heat_constraint,
    maximize(num_bulbs)
)

# Solve the model
solver = CPM_ortools(model)
solution = solver.solve()

# Print the solution
if solution:
    print(f"Number of light bulbs produced using argon gas approach: {argon_bulbs.value()}")
    print(f"Number of light bulbs produced using halogen gas approach: {halogen_bulbs.value()}")
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

