Solution accuracy: 77.16262975778547%
Constraint accuracy: 85.60070671378092%
Model accuracy: 75.08650519031141%

Wrong solutions: 55, error solutions: 11
Wrong constraints: 126, error constraints: 37, total: 1132
Wrong models: 72, error models: 0
---------------------------------------------------------------------------------------------

A fishery wants to transport their catch. They can either use local sled dogs or trucks. Local sled dogs can take 100 fish per trip while trucks can take 300 fish per trip. The cost per trip for sled dogs is $50 while the cost per trip for a truck is $100. The budget is at most $1000 and the number of sled dog trips must be less than the number of truck trips. Formulate an LP to maximize the number of fish that can be transported.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SledDogTrips = intvar(0, 10)  # Number of trips taken by sled dogs
TruckTrips = intvar(0, 10)  # Number of trips taken by trucks

# Constraints
m = Model()

# Cost constraint: total cost should be at most $1000
m += 50 * SledDogTrips + 100 * TruckTrips <= 1000
# Number of sled dog trips must be less than the number of truck trips
m += SledDogTrips < TruckTrips

# Objective
# Maximize the number of fish that can be transported
m.maximize(100 * SledDogTrips + 300 * TruckTrips)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An office supply company makes two types of printers: color printers and black and white printers. Different sections of the factory with different teams produce each printer. The color printer team can produce at most 20 color printers per day while the black and white printer team can produce at most 30 black and white printers per day. Both teams require use of the same paper tray installing machine and this machine can make at most 35 printers of either type each day. Color printers generate a profit of $200 per printer while black and white printers generate a profit of $70 per printer. How many of each printer should be made to maximize the company's profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ColorPrinters = intvar(0, 999999999)  # Number of color printers produced
BWPrinters = intvar(0, 999999999)  # Number of black and white printers produced

# Constraints
m = Model()

# Color printer team can produce at most 20 color printers per day:
m += ColorPrinters <= 20
# Black and white printer team can produce at most 30 black and white printers per day:
m += BWPrinters <= 30
# Paper tray installing machine can make at most 35 printers of either type each day:
m += ColorPrinters + BWPrinters <= 35

# Objective
# Maximize profit ($200 profit per color printer, $70 profit per black and white printer):
m.maximize(200 * ColorPrinters + 70 * BWPrinters)

```
False
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An accounting firm has senior accountants earning $3000 per week and junior accountants earning $1000 per week. The contracts with companies to provide accounting services require at least 100 accountants, of whom at least 5 must be senior accountants. To make sure there is enough experience on the accounting team, the number of senior accountants should be at least a third of the number to junior accountants. The firm wants to keep the weekly wage bill below $150000. Formulate an LP to minimize the wage bill.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SeniorAccountants = intvar(0, 100)  # Number of senior accountants
JuniorAccountants = intvar(0, 100)  # Number of junior accountants

# Constraints
m = Model()

# Total number of accountants should be at least 100:
m += SeniorAccountants + JuniorAccountants >= 100
# At least 5 accountants must be senior:
m += SeniorAccountants >= 5
# Number of senior accountants should be at least a third of the number of junior accountants:
m += SeniorAccountants >= 1/3 * JuniorAccountants
# Weekly wage bill should be below $150000:
m += 3000 * SeniorAccountants + 1000 * JuniorAccountants <= 150000

# Objective
# Minimize the wage bill:
m.minimize(3000 * SeniorAccountants + 1000 * JuniorAccountants)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

Ben is growing apples and pears on his orchard. He has 50 acres available on which he must grow a minimum of 5 acres of apples and a minimum of 10 acres of pears to meet demands. The profit per apple is $2 and the profit per pear is $4. He prefers to grow more pears than apples but limitations in his workforce allow him to grow at most twice the amount of pears as apples. How many of each fruit should Ben grow in order to maximize his profit? What is that profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Apples = intvar(0, 999999999)  # Number of acres planted with apples
Pears = intvar(0, 999999999)  # Number of acres planted with pears

# Constraints
m = Model()

# Total acres planted should not exceed 50:
m += Apples + Pears <= 50
# At least 5 acres of apples:
m += Apples >= 5
# At least 10 acres of pears:
m += Pears >= 10
# Pears planted should be at most twice the quantity of apples planted:
m += Pears <= 2 * Apples

# Objective
# Maximize profit ($2 profit per apple, $4 profit per pear):
m.maximize(2 * Apples + 4 * Pears)

```
True
False
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A lighting company makes desk-lamps and night-lamps. There is an expected demand of at least 30 desk-lamps and 50 night-lamps each day. However, due to the size of their factory, they can make at most 150 desk-lamps and 180 night-lamps per day. To satisfy a contract, a minimum of 100 lamps must be made each day. If the profit per desk-lamp sold is $5 and the profit per night-lamp sold is $8, how many lamps of each type should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DeskLamps = intvar(0, 999999999)  # Number of desk-lamps made
NightLamps = intvar(0, 999999999)  # Number of night-lamps made

# Constraints
m = Model()

# Expected demand of at least 30 desk-lamps and 50 night-lamps each day:
m += DeskLamps >= 30
m += NightLamps >= 50
# Maximum production limits:
m += DeskLamps <= 150
m += NightLamps <= 180
# Minimum of 100 lamps must be made each day:
m += DeskLamps + NightLamps >= 100

# Objective
# Maximize profit ($5 profit per desk-lamp, $8 profit per night-lamp):
m.maximize(5 * DeskLamps + 8 * NightLamps)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

Mr. Roberts want to invest in the telecom and healthcare industries. He has $100000 to invest. He has decided that the amount invested in telecom be at least three times as much as the amount invested in healthcare. But the money invested in telecom must be at most $70000. If investments in telecom earn 3% and investments in healthcare earn 1%, how much should Mr. Roberts invest in each to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TelecomInvestment = intvar(0, 70000)  # Amount invested in telecom
HealthcareInvestment = intvar(0, 100000)  # Amount invested in healthcare

# Constraints
m = Model()

# Total investment should not exceed $100000:
m += TelecomInvestment + HealthcareInvestment <= 100000
# The amount invested in telecom should be at least three times as much as the amount invested in healthcare:
m += TelecomInvestment >= 3 * HealthcareInvestment
# The amount invested in telecom must be at most $70000:
m += TelecomInvestment <= 70000

# Objective
# Maximize profit (3% return on telecom investment, 1% return on healthcare investment):
m.maximize(0.03 * TelecomInvestment + 0.01 * HealthcareInvestment)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer has 140 hectares available to grow tomatoes and potatoes. She prefers to plant more tomatoes than potatoes, but the soil and weather conditions allow her to grow at most twice the amount of tomatoes to that of potatoes. In addition, she must grow at least 20 hectares of tomatoes and at least 30 hectares of potatoes to meet community demands. If the profit per hectare of tomatoes is $350 and the profit per hectare of potatoes is $600, how many hectares of each crop should she plant to maximize profit? What is this profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Tomatoes = intvar(0, 999999999)  # Number of hectares planted with tomatoes
Potatoes = intvar(0, 999999999)  # Number of hectares planted with potatoes

# Constraints
m = Model()

# Total hectares planted should not exceed 140:
m += Tomatoes + Potatoes <= 140
# At least 20 hectares of tomatoes:
m += Tomatoes >= 20
# At least 30 hectares of potatoes:
m += Potatoes >= 30
# Tomatoes planted should be at most twice the quantity of potatoes planted:
m += Tomatoes <= 2 * Potatoes

# Objective
# Maximize profit ($350 profit per hectare of tomatoes, $600 profit per hectare of potatoes):
profit = 350 * Tomatoes + 600 * Potatoes
m.maximize(profit)

```
False
False
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A audio company make two types of headphones: wired headphones and wireless headphones. Two different teams make each type of headphones. The wired team can make at most 100 wired headphones per day and the wireless team can make at most 170 wireless headphones per day. Both teams require use of a shared audio testing machine, and this machine can be used to make a maximum of 150 headphones per day. The profit per wired headphone is $50 and the profit per wireless headphone $20. How many of each headphone should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
WiredHeadphones = intvar(0, 100)  # Number of wired headphones made
WirelessHeadphones = intvar(0, 170)  # Number of wireless headphones made

# Constraints
m = Model()

# The wired team can make at most 100 wired headphones per day:
m += WiredHeadphones <= 100
# The wireless team can make at most 170 wireless headphones per day:
m += WirelessHeadphones <= 170
# The shared audio testing machine can make a maximum of 150 headphones per day:
m += WiredHeadphones + WirelessHeadphones <= 150

# Objective
# Maximize profit ($50 profit per wired headphone, $20 profit per wireless headphone):
m.maximize(50 * WiredHeadphones + 20 * WirelessHeadphones)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Jacob has $3000 to invest. He has decided to invest in his favorite clothing company and his favorite tech company. He has decided that the money invested in his favorite clothing company must be at least four times as much as the amount invested in his favorite tech company. He has also limited himself to invest at most $500 in his favorite tech company. If the money invested in his favorite clothing company earns 7% and the money invested in his favorite tech company earns 10%, how much should he invest in each to maximize his profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ClothingInvestment = intvar(0, 3000)  # Amount invested in the clothing company
TechInvestment = intvar(0, 500)  # Amount invested in the tech company

# Constraints
m = Model()

# Total investment should not exceed $3000:
m += ClothingInvestment + TechInvestment <= 3000
# The money invested in the clothing company must be at least four times as much as the amount invested in the tech company:
m += ClothingInvestment >= 4 * TechInvestment
# Limited to invest at most $500 in the tech company:
m += TechInvestment <= 500

# Objective
# Maximize profit (7% return on investment in the clothing company, 10% return on investment in the tech company):
m.maximize(0.07 * ClothingInvestment + 0.10 * TechInvestment)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Each month a store owner can spend at most $500 on carrots and cucumbers. A carrot costs the store owner $0.30 and a cucumber costs the store owner $0.50. Each carrot is sold for a profit of $0.75 and each cucumber is sold for a profit of $0.80. The owner estimates that the number of cucumbers sold is at most a third of the number of carrots sold. He also estimates that at least 300 carrots but at most 500 carrots are sold each month. How many of each, carrots and cucumbers, should be sold in order to maximize the profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Carrots = intvar(0, 999999999)  # Number of carrots bought and sold
Cucumbers = intvar(0, 999999999)  # Number of cucumbers bought and sold

# Constraints
m = Model()

# The store owner can spend at most $500:
m += 0.30 * Carrots + 0.50 * Cucumbers <= 500
# At least 300 but at most 500 carrots are sold each month:
m += Carrots >= 300
m += Carrots <= 500
# The number of cucumbers sold is at most a third of the number of carrots sold:
m += Cucumbers <= 1/3 * Carrots

# Objective
# Maximize profit ($0.75 profit per carrot, $0.80 profit per cucumber):
m.maximize(0.75 * Carrots + 0.80 * Cucumbers)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer wants to manufacture a special plant nutrition using fertilizers A and B. Each kg of fertilizer A contains 13 units of nitrogen, 5 units of phosphoric acid, 6 units of vitamin A and 5 units of vitamin D. Each kg of fertilizer B contains 8 units of nitrogen, 14 units of phosphoric acid, 6 units of vitamin A and 9 units of vitamin D. To be effective, the plant nutrition requires a minimum 220 units of nitrogen, a minimum of 160 units of phosphoric acid, and no more than 350 units of vitamin A. How many kg of each fertilizer should be used to minimize the amount of vitamin D in the nutrition? What is the minimum amount of vitamin D?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FertilizerA = intvar(0, 999999999)  # Amount of fertilizer A used (in kg)
FertilizerB = intvar(0, 999999999)  # Amount of fertilizer B used (in kg)

# Constraints
m = Model()

# Nutrient requirements:
# Minimum 220 units of nitrogen:
m += 13 * FertilizerA + 8 * FertilizerB >= 220
# Minimum 160 units of phosphoric acid:
m += 5 * FertilizerA + 14 * FertilizerB >= 160
# Maximum 350 units of vitamin A:
m += 6 * FertilizerA + 6 * FertilizerB <= 350

# Objective
# Minimize the amount of vitamin D:
m.minimize(5 * FertilizerA + 9 * FertilizerB)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Mrs. Watson wants to invest in the real-estate market and has a total budget of at most $760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a $0.50 profit and each dollar invested in detached houses yields a $1 profit. A minimum of 20% of all money invested must be in condos, and at least $20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CondosInvestment = intvar(0, 760000)  # Amount invested in condos
DetachedHousesInvestment = intvar(0, 760000)  # Amount invested in detached houses

# Constraints
m = Model()

# Total budget of at most $760000:
m += CondosInvestment + DetachedHousesInvestment <= 760000
# Minimum of 20% of all money invested must be in condos:
m += CondosInvestment >= 0.2 * (CondosInvestment + DetachedHousesInvestment)
# At least $20000 must be in detached houses:
m += DetachedHousesInvestment >= 20000

# Objective
# Maximize total profit ($0.50 profit per dollar invested in condos, $1 profit per dollar invested in detached houses):
m.maximize(0.50 * CondosInvestment + 1 * DetachedHousesInvestment)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of $3 per regular sandwich and a profit of $4 per special sandwich. How many of each sandwich should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularSandwiches = intvar(0, 999999999)  # Number of regular sandwiches made
SpecialSandwiches = intvar(0, 999999999)  # Number of special sandwiches made

# Constraints
m = Model()

# Total number of eggs and bacon available:
m += 2 * RegularSandwiches + 3 * SpecialSandwiches <= 40  # Eggs
m += 3 * RegularSandwiches + 5 * SpecialSandwiches <= 70  # Bacon

# Objective
# Maximize profit ($3 profit per regular sandwich, $4 profit per special sandwich):
m.maximize(3 * RegularSandwiches + 4 * SpecialSandwiches)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A cleaning company located in Edmonton wants to get the best exposure possible for promoting their new dishwashing detergent without exceeding their $250,000 advertising budget. To do so, the company decides to spend their money on two forms of advertising: (1) radio ads and (2) social media ads. Each radio ad costs $5,000; each social media ad costs $9,150. The expected exposure, based on industry ratings, is 60,500 viewers for each radio ad. Additionally, the expected exposure for each social media ad is 50,000 viewers. The company decides that at least 15 but no more than 40 radio ads should be ordered, and that at least 35 social media ads should be contracted. How many ads of each type should be run to obtain maximum exposure while staying within the budget?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RadioAds = intvar(0, 999999999)  # Number of radio ads ordered
SocialMediaAds = intvar(0, 999999999)  # Number of social media ads ordered

# Constraints
m = Model()

# The advertising budget should not exceed $250,000:
m += 5000 * RadioAds + 9150 * SocialMediaAds <= 250000
# At least 15 but no more than 40 radio ads should be ordered:
m += RadioAds >= 15
m += RadioAds <= 40
# At least 35 social media ads should be contracted:
m += SocialMediaAds >= 35

# Objective
# Maximize exposure (60,500 viewers per radio ad, 50,000 viewers per social media ad):
m.maximize(60500 * RadioAds + 50000 * SocialMediaAds)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a $12 profit and each short cable sold results in a $5 profit, how many of each type of cable should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LongCables = intvar(0, 999999999)  # Number of long cables made
ShortCables = intvar(0, 999999999)  # Number of short cables made

# Constraints
m = Model()

# Total gold available is 1000 mg:
m += 10 * LongCables + 7 * ShortCables <= 1000
# At least 5 times the number of short cables are needed than the long cables:
m += ShortCables >= 5 * LongCables
# At least 10 long cables need to be made:
m += LongCables >= 10

# Objective
# Maximize profit ($12 profit per long cable, $5 profit per short cable):
m.maximize(12 * LongCables + 5 * ShortCables)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A store employs senior citizens who earn $500 per week and young adults who earn $750 per week. The store must keep the weekly wage bill below $30000. On any day, the store requires at least 50 workers, of whom at least 10 must be young adults. To ensure the store runs smoothly, the number of young adults should be at least a third the number of senior citizens. Formulate a LP to minimize the wage bill.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SeniorCitizens = intvar(0, 999999999)  # Number of senior citizens employed
YoungAdults = intvar(0, 999999999)  # Number of young adults employed

# Constraints
m = Model()

# Weekly wage bill should be below $30000:
m += 500 * SeniorCitizens + 750 * YoungAdults <= 30000
# At least 50 workers are required:
m += SeniorCitizens + YoungAdults >= 50
# At least 10 workers must be young adults:
m += YoungAdults >= 10
# Number of young adults should be at least a third the number of senior citizens:
m += YoungAdults >= SeniorCitizens / 3

# Objective
# Minimize the wage bill:
m.minimize(500 * SeniorCitizens + 750 * YoungAdults)

```
False
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs $1000 and attracts 400,000 viewers. On soorchle, each ad costs $200 and attracts 5,000 viewers. On wassa, each ad costs $100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is $10000. How many advertisements should be run in each of the three types of media to maximize the total audience?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ZtubeAds = intvar(0, 999999999)  # Number of ads on Z-tube
SoorchleAds = intvar(0, 999999999)  # Number of ads on Soorchle
WassaAds = intvar(0, 999999999)  # Number of ads on Wassa

# Constraints
m = Model()

# Cost and viewers for each type of advertisement
CostZtube = 1000
ViewersZtube = 400000
CostSoorchle = 200
ViewersSoorchle = 5000
CostWassa = 100
ViewersWassa = 3000

# Total weekly advertising budget is $10000:
m += CostZtube * ZtubeAds + CostSoorchle * SoorchleAds + CostWassa * WassaAds <= 10000

# Soorchle limits the number of advertisements to fifteen:
m += SoorchleAds <= 15

# At most a third of the total number of advertisements should occur on Wassa:
m += WassaAds <= (ZtubeAds + SoorchleAds + WassaAds) / 3

# At least 5% should occur on Z-tube:
m += ZtubeAds >= 0.05 * (ZtubeAds + SoorchleAds + WassaAds)

# Objective
# Maximize total audience
m.maximize(ViewersZtube * ZtubeAds + ViewersSoorchle * SoorchleAds + ViewersWassa * WassaAds)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A chair produced by Elm Furniture yields a profit of $43, while every dresser yields a $52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Chairs = intvar(0, 999999999)  # Number of chairs produced
Dressers = intvar(0, 999999999)  # Number of dressers produced

# Constraints
m = Model()

# Stain constraint:
m += 1.4 * Chairs + 1.1 * Dressers <= 17
# Oak wood constraint:
m += 2 * Chairs + 3 * Dressers <= 11

# Objective
# Maximize profit ($43 profit per chair, $52 profit per dresser):
m.maximize(43 * Chairs + 52 * Dressers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs $100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs $80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
KgFeedA = intvar(0, 999999999)  # Kilograms of Feed A in the mixture
KgFeedB = intvar(0, 999999999)  # Kilograms of Feed B in the mixture

# Constraints
m = Model()

# Mixture should contain at least 30 units of protein:
m += 10 * KgFeedA + 7 * KgFeedB >= 30
# Mixture should contain at least 50 units of fat:
m += 8 * KgFeedA + 15 * KgFeedB >= 50

# Objective
# Minimize cost ($100 per kilogram of Feed A, $80 per kilogram of Feed B):
m.minimize(100 * KgFeedA + 80 * KgFeedB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is $5 and the profit per stubby jar is $9. How many jars of each type should the artisan make to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ThinJars = intvar(0, 999999999)  # Number of thin jars made
StubbyJars = intvar(0, 999999999)  # Number of stubby jars made

# Constraints
m = Model()

# Shaping time constraint:
m += 50 * ThinJars + 30 * StubbyJars <= 3000
# Baking time constraint:
m += 90 * ThinJars + 150 * StubbyJars <= 4000

# Objective
# Maximize profit ($5 profit per thin jar, $9 profit per stubby jar):
m.maximize(5 * ThinJars + 9 * StubbyJars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BananaHatersPackages = intvar(0, 999999999)  # Number of banana-haters packages prepared
ComboPackages = intvar(0, 999999999)  # Number of combo packages prepared

# Constraints
m = Model()

# Liquidate stock of 10 apples, 20 bananas, and 80 grapes:
m += 10 - 6 * BananaHatersPackages - 5 * ComboPackages >= 0
m += 20 - 6 * ComboPackages >= 0
m += 80 - 30 * BananaHatersPackages - 20 * ComboPackages >= 0

# Objective
# Maximize net profit (6 euros profit per banana-haters package, 7 euros profit per combo package):
m.maximize(6 * BananaHatersPackages + 7 * ComboPackages)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is $5 and the profit per batch of cookies is $3. How should the bakery operate to maximize total profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Bread = intvar(0, 3000)  # Number of loaves of bread baked
Cookies = intvar(0, 3000)  # Number of batches of cookies baked

# Constraints
m = Model()

# Stand-mixer and oven can run for at most 3000 hours per year:
m += Bread + 0.5 * Cookies <= 3000
m += 3 * Bread + Cookies <= 3000

# Objective
# Maximize profit ($5 profit per loaf of bread, $3 profit per batch of cookies):
m.maximize(5 * Bread + 3 * Cookies)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is $8 and the profit per pane of tempered glass is $10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularGlass = intvar(0, 999999999)  # Number of regular glass panes produced
TemperedGlass = intvar(0, 999999999)  # Number of tempered glass panes produced

# Constraints
m = Model()

# Time constraints:
# Heating time constraint:
m += 3 * RegularGlass + 5 * TemperedGlass <= 300
# Cooling time constraint:
m += 5 * RegularGlass + 8 * TemperedGlass <= 300

# Objective
# Maximize profit ($8 profit per regular glass pane, $10 profit per tempered glass pane):
m.maximize(8 * RegularGlass + 10 * TemperedGlass)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is $5 and the profit per tiger sold is $4. How many of each should be made in order to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Elephants = intvar(0, 999999999)  # Number of wooden elephants made
Tigers = intvar(0, 999999999)  # Number of wooden tigers made

# Constraints
m = Model()

# Wood and plastic constraints:
# Each elephant requires 50 grams of wood and 20 grams of plastic:
m += 50 * Elephants + 40 * Tigers <= 5000
# Each tiger requires 40 grams of wood and 30 grams of plastic:
m += 20 * Elephants + 30 * Tigers <= 4000

# Objective
# Maximize profit ($5 profit per elephant, $4 profit per tiger):
m.maximize(5 * Elephants + 4 * Tigers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is $30 and the profit per small art piece is $15, how many of each should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargeArtPieces = intvar(0, 999999999)  # Number of large art pieces made
SmallArtPieces = intvar(0, 999999999)  # Number of small art pieces made

# Constraints
m = Model()

# Available resources:
m += 4 * LargeArtPieces + 2 * SmallArtPieces <= 100  # Paint
m += 3 * LargeArtPieces + 1 * SmallArtPieces <= 50  # Glitter
m += 5 * LargeArtPieces + 2 * SmallArtPieces <= 70  # Glue

# At least 5 units of each large and small art pieces:
m += LargeArtPieces >= 5
m += SmallArtPieces >= 5

# Objective
# Maximize profit ($30 profit per large art piece, $15 profit per small art piece):
m.maximize(30 * LargeArtPieces + 15 * SmallArtPieces)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

My family has decided to invest in real state for the first time. Currently, they have $600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than $200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses.  If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Apartments = intvar(0, 200000)  # Amount of money invested in apartments
Townhouses = intvar(0, 400000)  # Amount of money invested in townhouses

# Constraints
m = Model()

# Total investment should not exceed $600,000:
m += Apartments + Townhouses <= 600000
# The money invested in apartments must be at least half as much as that in townhouses:
m += Apartments >= 0.5 * Townhouses
# The money invested in apartments must not be greater than $200,000:
m += Apartments <= 200000

# Objective
# Maximize profit (10% profit for apartments, 15% profit for townhouses):
m.maximize(0.10 * Apartments + 0.15 * Townhouses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is $1 and the cost per pill of Sunny is $3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ZodiacPills = intvar(0, 999999999)  # Number of pills of Zodiac
SunnyPills = intvar(0, 999999999)  # Number of pills of Sunny

# Constraints
m = Model()

# At least 5 grams of Z1 required:
m += 1.3 * ZodiacPills + 1.2 * SunnyPills >= 5
# At least 10 grams of D3 required:
m += 1.5 * ZodiacPills + 5 * SunnyPills >= 10

# Objective
# Minimize cost ($1 per pill of Zodiac, $3 per pill of Sunny):
m.minimize(ZodiacPills + 3 * SunnyPills)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is $8 and the profit per model plane is $10, how many of each should be made to maximize his profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Trains = intvar(0, 999999999)  # Number of model trains made
Planes = intvar(0, 999999999)  # Number of model planes made

# Constraints
m = Model()

# Available resources:
# Wood constraint:
m += 3 * Trains + 4 * Planes <= 120
# Paint constraint:
m += 3 * Trains + 2 * Planes <= 90

# Objective
# Maximize profit ($8 profit per model train, $10 profit per model plane):
m.maximize(8 * Trains + 10 * Planes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store $120 in profits, and a laptop will earn $40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs $400 for the store, and a laptop, $100. The store wants to spend at most $6000. Formulate an LP that can be used to maximize the store's profit.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Phones = intvar(0, 999999999)  # Number of phones in inventory
Laptops = intvar(0, 999999999)  # Number of laptops in inventory

# Constraints
m = Model()

# Total floor space should not exceed 400 sq ft:
m += Phones + 4 * Laptops <= 400
# At least 80% of all appliances in stock should be laptops:
m += Laptops >= 0.8 * (Phones + Laptops)
# Cost constraint: total cost should not exceed $6000:
m += 400 * Phones + 100 * Laptops <= 6000

# Objective
# Maximize profit ($120 profit per phone, $40 profit per laptop):
m.maximize(120 * Phones + 40 * Laptops)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is $3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is $5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularMix = intvar(0, 999999999)  # Kilograms of regular mix to be created
SourSurpriseMix = intvar(0, 999999999)  # Kilograms of sour surprise mix to be created

# Constraints
m = Model()

# Regular candy constraint:
m += 0.8 * RegularMix + 0.1 * SourSurpriseMix <= 80
# Sour candy constraint:
m += 0.2 * RegularMix + 0.9 * SourSurpriseMix <= 60

# Objective
# Maximize profit ($3 profit per kilogram of regular mix, $5 profit per kilogram of sour surprise mix):
m.maximize(3 * RegularMix + 5 * SourSurpriseMix)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost $12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost $15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of $50 per sq. foot while laptops produce a net revenue of $70 per sq. foot. The factory wants to spend at most $5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PhoneSpace = intvar(0, 100)  # Sq. feet of space allocated for phone production
LaptopSpace = intvar(0, 100)  # Sq. feet of space allocated for laptop production

# Constraints
m = Model()

# Total space should not exceed 100 sq. feet:
m += PhoneSpace + LaptopSpace <= 100
# Cost constraint: total cost should not exceed $5000
m += 12 * PhoneSpace + 15 * LaptopSpace <= 5000
# Labor constraint: total labor hours should not exceed 2000
m += 2 * PhoneSpace + 3 * LaptopSpace <= 2000

# Objective
# Maximize revenue ($50 revenue per sq. foot for phones, $70 revenue per sq. foot for laptops):
m.maximize(50 * PhoneSpace + 70 * LaptopSpace)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store $2000 to make and yields a profit of $500. Each regular desktop costs the store $1000 to make and yields a profit of $300. The store sells at most 200 desktops each month and wants to spend at most $300000 on making the desktops. How many of each should be made and sold to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PremiumDesktops = intvar(0, 200)  # Number of premium desktops made and sold
RegularDesktops = intvar(0, 200)  # Number of regular desktops made and sold

# Constraints
m = Model()

# The store sells at most 200 desktops each month:
m += PremiumDesktops + RegularDesktops <= 200
# The store wants to spend at most $300000 on making the desktops:
m += 2000 * PremiumDesktops + 1000 * RegularDesktops <= 300000

# Objective
# Maximize profit ($500 profit per premium desktop, $300 profit per regular desktop):
m.maximize(500 * PremiumDesktops + 300 * RegularDesktops)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is $5000 and the profit per premium model is $8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularModels = intvar(0, 12)  # Number of regular models produced per day
PremiumModels = intvar(0, 12)  # Number of premium models produced per day

# Constraints
m = Model()

# Daily demand constraints:
m += RegularModels <= 8
m += PremiumModels <= 6

# Total number of cars produced should not exceed 12:
m += RegularModels + PremiumModels <= 12

# Objective
# Maximize profit ($5000 profit per regular model, $8500 profit per premium model):
m.maximize(5000 * RegularModels + 8500 * PremiumModels)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

You are designing an office space with two types of desks: long desks and short desks. You can spend at most $2000. Long desks cost $300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LongDesks = intvar(0, 999999999)  # Number of long desks bought
ShortDesks = intvar(0, 999999999)  # Number of short desks bought

# Constraints
m = Model()

# Total cost should not exceed $2000:
m += 300 * LongDesks + 100 * ShortDesks <= 2000
# Total square feet of desks should not exceed 200:
m += 10 * LongDesks + 4 * ShortDesks <= 200

# Objective
# Maximize seating availability (6 employees per long desk, 2 employees per short desk):
m.maximize(6 * LongDesks + 2 * ShortDesks)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost $2 and $3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FertilizerC = intvar(0, 999999999)  # Amount of fertilizer C used (in kg)
FertilizerY = intvar(0, 999999999)  # Amount of fertilizer Y used (in kg)

# Constraints
m = Model()

# The compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix:
m += 1.5 * FertilizerC + 5 * FertilizerY >= 5
m += 3 * FertilizerC + 1 * FertilizerY >= 8

# Objective
# Minimize cost ($2 per kg of fertilizer C, $3 per kg of fertilizer Y):
m.minimize(2 * FertilizerC + 3 * FertilizerY)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is $4 and the cost per pill for pill B is $5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PillA = intvar(0, 999999999)  # Number of pill A consumed
PillB = intvar(0, 999999999)  # Number of pill B consumed

# Constraints
m = Model()

# Each pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine:
# Each pill B contains 6 units of sleep inducing medicine and 1 unit of anti-inflammatory medicine:
# The patient must consume at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine:
m += 3 * PillA + 6 * PillB >= 40
m += 5 * PillA + 1 * PillB >= 50

# Objective
# Minimize cost ($4 per pill A, $5 per pill B):
m.minimize(4 * PillA + 5 * PillB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is $10 and the profit per container of Oil Max Pro is $15. How many containers of each of oil should the car manufacturer make to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
OilMaxContainers = intvar(0, 999999999)  # Number of containers of Oil Max produced
OilMaxProContainers = intvar(0, 999999999)  # Number of containers of Oil Max Pro produced

# Constraints
m = Model()

# Substance A constraint:
m += 46 * OilMaxContainers + 13 * OilMaxProContainers <= 1345
# Substance B constraint:
m += 43 * OilMaxContainers + 4 * OilMaxProContainers <= 346
# Substance C constraint:
m += 56 * OilMaxContainers + 45 * OilMaxProContainers <= 1643

# Objective
# Maximize profit ($10 profit per container of Oil Max, $15 profit per container of Oil Max Pro):
m.maximize(10 * OilMaxContainers + 15 * OilMaxProContainers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A food truck owner can spend at most $20000 on mangos and guavas. A mango costs the food truck owner $5 and a guava costs him $3. Spices are added and each mango is sold for a profit of $3 while each guava is sold for a profit of $4. The owner estimates that at least 100 mangos but at the most 150 are sold each month. He also estimates that the number of guavas sold is at most a third of the mangos sold. How many mangos and guavas should be sold in order to maximize the profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Mangos = intvar(0, 999999999)  # Number of mangos sold
Guavas = intvar(0, 999999999)  # Number of guavas sold

# Constraints
m = Model()

# The food truck owner can spend at most $20000:
m += 5 * Mangos + 3 * Guavas <= 20000
# At least 100 but at most 150 mangos are sold each month:
m += Mangos >= 100
m += Mangos <= 150
# The number of guavas sold is at most a third of the mangos sold:
m += Guavas <= 1/3 * Mangos

# Objective
# Maximize profit ($3 profit per mango, $4 profit per guava):
m.maximize(3 * Mangos + 4 * Guavas)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A nutritionist is making a special vitamin mix using two drinks: A and B. The vitamin mix must contain at least 150 units of Vitamin A, at least 300 units of vitamin D, and at most 400 units of vitamin E. A cup of drink A contains 8 units of Vitamin A, 6 units of Vitamin D, 10 units of Vitamin E, and 4 units of Vitamin K. A cup of drink B contains 15 units of Vitamin A, 2 units of Vitamin D, 20 units of Vitamin E, and 12 units of Vitamin K. How many cups of each drink should be used to make the vitamin mix in order to minimize the amount of Vitamin K?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CupsA = intvar(0, 999999999)  # Number of cups of drink A used
CupsB = intvar(0, 999999999)  # Number of cups of drink B used

# Constraints
m = Model()

# Vitamin A constraint:
m += 8 * CupsA + 15 * CupsB >= 150
# Vitamin D constraint:
m += 6 * CupsA + 2 * CupsB >= 300
# Vitamin E constraint:
m += 10 * CupsA + 20 * CupsB <= 400

# Objective
# Minimize the amount of Vitamin K (4 units in drink A, 12 units in drink B):
m.minimize(4 * CupsA + 12 * CupsB)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An ice cream store makes chocolate and vanilla ice cream by the gallon. In a week, they must make at least 5 gallons of each type but at most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream. It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available to make ice cream. In addition at least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time. If the profit per gallon of chocolate ice cream is $200 and the profit per gallon of vanilla ice cream is $300, how many gallons of each should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ChocolateIceCream = intvar(0, 999999999)  # Number of gallons of chocolate ice cream made
VanillaIceCream = intvar(0, 999999999)  # Number of gallons of vanilla ice cream made

# Constraints
m = Model()

# At least 5 gallons of each type must be made:
m += ChocolateIceCream >= 5
m += VanillaIceCream >= 5
# At most 10 gallons of chocolate ice cream and 8 gallons of vanilla ice cream can be made:
m += ChocolateIceCream <= 10
m += VanillaIceCream <= 8
# It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream:
m += ChocolateIceCream + 2 * VanillaIceCream <= 30
# At least 6 workers are needed with 1 working on chocolate ice cream and 2 on vanilla ice cream at any time:
m += ChocolateIceCream + 2 * VanillaIceCream >= 6

# Objective
# Maximize profit ($200 profit per gallon of chocolate ice cream, $300 profit per gallon of vanilla ice cream):
m.maximize(200 * ChocolateIceCream + 300 * VanillaIceCream)

```
True
True
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is $500 and the profit per acre of cucumbers is $650, how many acres of each should he grow to maximize his profit? What is that profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Potatoes = intvar(0, 999999999)  # Number of acres planted with potatoes
Cucumbers = intvar(0, 999999999)  # Number of acres planted with cucumbers

# Constraints
m = Model()

# Total acres planted should not exceed 50:
m += Potatoes + Cucumbers <= 50
# At least 12 acres of potatoes:
m += Potatoes >= 12
# At least 15 acres of cucumbers:
m += Cucumbers >= 15
# Cucumbers planted should be at most twice the quantity of potatoes planted:
m += Cucumbers <= 2 * Potatoes

# Objective
# Maximize profit ($500 profit per acre of potatoes, $650 profit per acre of cucumbers):
m.maximize(500 * Potatoes + 650 * Cucumbers)

```
True
False
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000  square feet of vinyl  can be produced weekly. If a square foot of hardwood flooring yields a profit of $2.5 and a square foot of vinyl planks produces a $3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Hardwood = intvar(0, 50000)  # Square feet of hardwood flooring produced weekly
VinylPlanks = intvar(0, 30000)  # Square feet of vinyl planks produced weekly

# Constraints
m = Model()

# Expected demand of at least 20,000 square feet of hardwood and 10,000 square feet of vinyl planks each week:
m += Hardwood >= 20000
m += VinylPlanks >= 10000
# Total of at least 60,000 square feet of flooring must be shipped each week:
m += Hardwood + VinylPlanks >= 60000
# No more than 50,000 square feet of hardwood and 30,000 square feet of vinyl can be produced weekly:
m += Hardwood <= 50000
m += VinylPlanks <= 30000

# Objective
# Maximize profit ($2.5 profit per square foot of hardwood, $3 profit per square foot of vinyl planks):
m.maximize(2.5 * Hardwood + 3 * VinylPlanks)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A berry farmer has two farms, an old and new farm, where he grows raspberries, blueberries, and strawberries. He has a contract to provide a local store with 10 kg of raspberries, 9 kg of blueberries, and 15 kg of strawberries. At his old farm, it cost $300 to operate per day and he can harvest and deliver 2 kg of raspberries, 2 kg of blueberries, and 4 kg of strawberries in a day. At his new farm, it costs $200 to operate per day and he can harvest and deliver 4 kg of raspberries, 1 kg of blueberries, and 2 kg of strawberries in a day. Formulate a LP to meet his contract while minimizing his cost.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
OldFarmDays = intvar(0, 7)  # Number of days the old farm operates per week
NewFarmDays = intvar(0, 7)  # Number of days the new farm operates per week

# Constraints
m = Model()

# Raspberries requirement per week:
m += 2 * OldFarmDays + 4 * NewFarmDays >= 10
# Blueberries requirement per week:
m += 2 * OldFarmDays + 1 * NewFarmDays >= 9
# Strawberries requirement per week:
m += 4 * OldFarmDays + 2 * NewFarmDays >= 15

# Objective
# Minimize cost (Old farm costs $300 per day, New farm costs $200 per day):
m.minimize(300 * OldFarmDays + 200 * NewFarmDays)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice.  Assume that each serving of Rice costs $3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs $2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RiceServings = intvar(0, 999999999)  # Number of servings of Rice
KebabServings = intvar(0, 999999999)  # Number of servings of Kebab

# Constraints
m = Model()

# Cost constraint:
m += 3 * RiceServings + 2 * KebabServings  # Total cost

# Calorie constraint:
m += 300 * RiceServings + 200 * KebabServings >= 2200

# Protein constraint:
m += 4.5 * RiceServings + 4 * KebabServings >= 30

# Objective
# Minimize cost:
m.minimize(3 * RiceServings + 2 * KebabServings)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A company sells custom scooters and bikes for customers. The profit per scooter is $200 and the profit per bike is $300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Scooters = intvar(0, 999999999)  # Number of scooters produced per month
Bikes = intvar(0, 999999999)  # Number of bikes produced per month

# Constraints
m = Model()

# Time constraints with the design team:
m += 2 * Scooters + 4 * Bikes <= 5000
# Time constraints with the engineering team:
m += 3 * Scooters + 5 * Bikes <= 6000

# Objective
# Maximize profit ($200 profit per scooter, $300 profit per bike):
m.maximize(200 * Scooters + 300 * Bikes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

John has a 300 acre berry farm on which to plant blueberries and raspberries. John has $10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and $22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and $25 in watering costs is required. The profit per acre of blueberries is $56 and the profit per acre of raspberries is $75. Formulate an LP problem in order to maximize profit.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Blueberries = intvar(0, 300)  # Number of acres planted with blueberries
Raspberries = intvar(0, 300)  # Number of acres planted with raspberries

# Constraints
m = Model()

# Total acres planted should not exceed 300:
m += Blueberries + Raspberries <= 300
# Labor constraint: 6 days of labor per acre of blueberries and 3 days of labor per acre of raspberries:
m += 6 * Blueberries + 3 * Raspberries <= 575
# Watering cost constraint: $22 per acre of blueberries and $25 per acre of raspberries:
m += 22 * Blueberries + 25 * Raspberries <= 10000

# Objective
# Maximize profit ($56 profit per acre of blueberries, $75 profit per acre of raspberries):
m.maximize(56 * Blueberries + 75 * Raspberries)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A man  only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost $3 per serving and fruits cost $5 per serving, how many servings of each should he eat to minimize his cost?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Vegetables = intvar(0, 999999999)  # Number of servings of vegetables
Fruits = intvar(0, 999999999)  # Number of servings of fruits

# Constraints
m = Model()

# At least 20 units of vitamins and 30 units of minerals are required:
m += 2 * Vegetables + 4 * Fruits >= 20
m += 3 * Vegetables + Fruits >= 30

# Objective
# Minimize cost ($3 per serving of vegetables, $5 per serving of fruits):
m.minimize(3 * Vegetables + 5 * Fruits)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $20 and $40 respectively for a batch of bagels and a batch of croissants.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Bagels = intvar(0, 999999999)  # Number of batches of bagels baked
Croissants = intvar(0, 999999999)  # Number of batches of croissants baked

# Constraints
m = Model()

# At most 70 hours available for the oven:
m += 2 * Bagels + 1 * Croissants <= 70
# At most 32 pastry chef hours available:
m += 0.25 * Bagels + 2 * Croissants <= 32

# Objective
# Maximize profit ($20 profit per batch of bagels, $40 profit per batch of croissants):
m.maximize(20 * Bagels + 40 * Croissants)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs $300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs $600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Factory1Hours = intvar(0, 24)  # Number of hours factory 1 runs daily
Factory2Hours = intvar(0, 24)  # Number of hours factory 2 runs daily

# Constraints
m = Model()

# Black teddy bears requirement per day:
m += 5 * Factory1Hours + 10 * Factory2Hours >= 20
# White teddy bears requirement per day:
m += 6 * Factory1Hours + 10 * Factory2Hours >= 5
# Brown teddy bears requirement per day:
m += 3 * Factory1Hours >= 15

# Objective
# Minimize cost ($300 per hour for factory 1, $600 per hour for factory 2):
m.minimize(300 * Factory1Hours + 600 * Factory2Hours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and $80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and $50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and $34000 available to spend on pesticide. If the revenue per acre of turnips is $300 and the revenue per acre of pumpkins is $450, how many acres of each should he grow to maximize his revenue.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Turnips = intvar(0, 500)  # Number of acres planted with turnips
Pumpkins = intvar(0, 500)  # Number of acres planted with pumpkins

# Constraints
m = Model()

# Total acres planted should not exceed 500:
m += Turnips + Pumpkins <= 500
# Watering constraint: 50 minutes for turnips and 90 minutes for pumpkins per acre
m += 50 * Turnips + 90 * Pumpkins <= 40000
# Pesticide constraint: $80 for turnips and $50 for pumpkins per acre
m += 80 * Turnips + 50 * Pumpkins <= 34000

# Objective
# Maximize revenue ($300 revenue per acre of turnips, $450 revenue per acre of pumpkins):
m.maximize(300 * Turnips + 450 * Pumpkins)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A school employs staff and substitute teachers. Per shift, staff teachers work 6 hours and get paid $300. Per shift, substitute teachers work 3 hours and get paid $100. For the summer term, the school requires 1000 hours of teaching availability. If the school has a budget of $40000, how many of each teacher should be hired to minimize the total number of teachers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
StaffTeachers = intvar(0, 999999999)  # Number of staff teachers hired
SubstituteTeachers = intvar(0, 999999999)  # Number of substitute teachers hired

# Constraints
m = Model()

# Staff teachers work 6 hours per shift, substitute teachers work 3 hours per shift:
m += 6 * StaffTeachers + 3 * SubstituteTeachers == 1000
# Staff teachers get paid $300 per shift, substitute teachers get paid $100 per shift:
m += 300 * StaffTeachers + 100 * SubstituteTeachers <= 40000

# Objective
# Minimize the total number of teachers hired:
m.minimize(StaffTeachers + SubstituteTeachers)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HighIntensityDrills = intvar(0, 800)  # Number of high intensity drills used
LowIntensityDrills = intvar(0, 800)  # Number of low intensity drills used

# Constraints
m = Model()

# Each day, the high intensity drill can process 50 gems and requires 50 units of water:
m += 50 * HighIntensityDrills <= 800
m += 50 * HighIntensityDrills <= 700
# Each day, the low intensity drill can process 30 gems and requires 20 units of water:
m += 30 * LowIntensityDrills <= 800
m += 20 * LowIntensityDrills <= 700
# The factory must process 800 gems per day:
m += 50 * HighIntensityDrills + 30 * LowIntensityDrills == 800
# At most 40% of the drills can be high intensity ones:
m += HighIntensityDrills <= 0.4 * (HighIntensityDrills + LowIntensityDrills)
# At least 10 should be low intensity drills:
m += LowIntensityDrills >= 10

# Objective
# Minimize the total number of drills needed:
m.minimize(HighIntensityDrills + LowIntensityDrills)

```
True
False
Wrong: 4, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DineInStores = intvar(0, 999999999)  # Number of dine-in places opened
FoodTruckStores = intvar(0, 999999999)  # Number of food-truck stores opened

# Constraints
m = Model()

# Dine-in place can make 100 sandwiches per day and requires 8 employees:
m += 100 * DineInStores + 50 * FoodTruckStores >= 500
m += 8 * DineInStores + 3 * FoodTruckStores <= 35

# Objective
# Minimize the total number of stores opened:
m.minimize(DineInStores + FoodTruckStores)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ProcessA = intvar(0, 999999999)  # Number of times process A is run
ProcessB = intvar(0, 999999999)  # Number of times process B is run

# Constraints
m = Model()

# Process A requires 3 units of gold, 2 wires, and can plate 5 coins:
m += 3 * ProcessA + 5 * ProcessB <= 500  # Gold constraint
m += 2 * ProcessA + 3 * ProcessB <= 300  # Wires constraint

# Objective
# Maximize the total number of coins that can be plated (5 coins per process A, 7 coins per process B):
m.maximize(5 * ProcessA + 7 * ProcessB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MiterSaws = intvar(0, 999999999)  # Number of miter saws purchased
CircularSaws = intvar(0, 999999999)  # Number of circular saws purchased

# Constraints
m = Model()

# A miter saw can cut 50 planks of wood per day:
m += 50 * MiterSaws + 70 * CircularSaws >= 1500
# A miter saw produces 60 units of sawdust per day:
m += 60 * MiterSaws + 100 * CircularSaws <= 2000

# Objective
# Minimize the total number of saws needed:
m.minimize(MiterSaws + CircularSaws)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
WindrowerAcres = intvar(0, 200)  # Number of acres processed by windrower
HayHarvesterAcres = intvar(0, 200)  # Number of acres processed by hay harvester

# Constraints
m = Model()

# Total acres of land available is 200:
m += WindrowerAcres + HayHarvesterAcres <= 200
# Windrower processes 10 kg of hay per acre, hay harvester processes 8 kg of hay per acre:
m += 10 * WindrowerAcres + 8 * HayHarvesterAcres <= 2000
# Windrower produces 5 kg of methane gas per acre, hay harvester produces 3 kg of methane gas per acre:
m += 5 * WindrowerAcres + 3 * HayHarvesterAcres <= 800
# Windrower requires 2 kg of fuel per acre, hay harvester requires 1 kg of fuel per acre:
m += 2 * WindrowerAcres + 1 * HayHarvesterAcres <= 300

# Objective
# Maximize the amount of hay processed:
m.maximize(WindrowerAcres + HayHarvesterAcres)

```
False
False
Wrong: 1, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Wraps = intvar(0, 999999999)  # Number of wraps made
Platters = intvar(0, 999999999)  # Number of platters made

# Constraints
m = Model()

# Meat and rice requirements:
# Each wrap requires 5 units of meat and 3 units of rice:
m += 5 * Wraps + 7 * Platters >= 3000  # At least 3000 units of meat
m += 3 * Wraps + 5 * Platters >= 2500  # At least 2500 units of rice

# Production time constraints:
# Each wrap takes 10 minutes to make, each platter takes 8 minutes to make:
m += 10 * Wraps + 8 * Platters

# At least 3 times as many wraps need to be made as platters:
m += Wraps >= 3 * Platters

# Objective
# Minimize total production time:
m.minimize(10 * Wraps + 8 * Platters)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An amusement park is installing ticket machines, both cash-based and card-only machines. A cash-based machine can process 20 people per hour while a card-only machine can process 30 people per hour. The cash-based machine needs 4 rolls of paper per hour while the card-only machine requires 5 rolls of paper per hour. The amusement park needs to be able to process at least 500 people per hour but can use at most 90 rolls of paper per hour. Since most people prefer to pay by cash, the number of card-only machines must not exceed the number of cash-based machines. How many of each machine should be bought to minimize the total number of machines in the park?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CashMachines = intvar(0, 999999999)  # Number of cash-based machines
CardMachines = intvar(0, 999999999)  # Number of card-only machines

# Constraints
m = Model()

# The total number of people processed per hour should be at least 500:
m += 20 * CashMachines + 30 * CardMachines >= 500
# The total number of rolls of paper used per hour should be at most 90:
m += 4 * CashMachines + 5 * CardMachines <= 90
# The number of card-only machines must not exceed the number of cash-based machines:
m += CardMachines <= CashMachines

# Objective
# Minimize the total number of machines:
m.minimize(CashMachines + CardMachines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GlassJars = intvar(0, 999999999)  # Number of glass jars filled
PlasticJars = intvar(0, 999999999)  # Number of plastic jars filled

# Constraints
m = Model()

# Total honey available is 20000 ml:
m += 250 * GlassJars + 300 * PlasticJars == 20000
# At least 20 glass jars should be filled:
m += GlassJars >= 20
# At least twice as many plastic jars must be filled as glass jars:
m += PlasticJars >= 2 * GlassJars

# Objective
# Maximize the total number of bottles filled:
m.maximize(GlassJars + PlasticJars)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MangoTea = intvar(0, 999999999)  # Number of mango bubble teas made
LycheeTea = intvar(0, 999999999)  # Number of lychee bubble teas made

# Constraints
m = Model()

# Mango bubble tea requires 4 units of mango juice and 8 units of tea:
m += 4 * MangoTea <= 2000
# Lychee bubble tea requires 6 units of lychee juice and 6 units of tea:
m += 6 * LycheeTea <= 3000
# At least 40% of the bubble teas made must be lychee flavored:
m += LycheeTea >= 0.4 * (MangoTea + LycheeTea)
# The number of mango bubble teas made must be larger than the number of lychee bubble teas made:
m += MangoTea >= LycheeTea

# Objective
# Minimize the total amount of tea needed:
m.minimize(8 * MangoTea + 6 * LycheeTea)

```
False
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid $120. A permanent snow remover works 10 hours per shift and gets paid $250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of $6500, how many of each type of worker should be hired to minimize the total number of snow removers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SeasonalWorkers = intvar(0, 999999999)  # Number of seasonal snow removers hired
PermanentWorkers = intvar(0, 999999999)  # Number of permanent snow removers hired

# Constraints
m = Model()

# Total hours of snow remover labor needed is 300 hours:
m += 6 * SeasonalWorkers + 10 * PermanentWorkers == 300
# The city has a budget of $6500:
m += 120 * SeasonalWorkers + 250 * PermanentWorkers <= 6500

# Objective
# Minimize the total number of snow removers hired:
m.minimize(SeasonalWorkers + PermanentWorkers)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A high rise building is buying two types of furnaces, a new model and an old model. A new model furnace can heat 10 apartments and consumes 200 kWh per day. An old model can heat 15 apartments and consumes 250 kWh per day. Since the old model is harder to find, at most 35% of the furnaces can be the old model and at least 5 new model furnaces should be used. If the high rise needs to heat at least 200 apartments and has 3500 kWh of electricity available, how many of each furnace should be purchase to minimize the total number of furnaces?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
NewModelFurnaces = intvar(0, 999999999)  # Number of new model furnaces purchased
OldModelFurnaces = intvar(0, 999999999)  # Number of old model furnaces purchased

# Constraints
m = Model()

# New model furnace heats 10 apartments, old model furnace heats 15 apartments:
m += 10 * NewModelFurnaces + 15 * OldModelFurnaces >= 200
# New model furnace consumes 200 kWh per day, old model furnace consumes 250 kWh per day:
m += 200 * NewModelFurnaces + 250 * OldModelFurnaces <= 3500
# At least 5 new model furnaces should be used:
m += NewModelFurnaces >= 5
# At most 35% of the furnaces can be the old model:
m += OldModelFurnaces <= 0.35 * (NewModelFurnaces + OldModelFurnaces)

# Objective
# Minimize the total number of furnaces:
m.minimize(NewModelFurnaces + OldModelFurnaces)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RuralFactories = intvar(0, 999999999)  # Number of rural factories to build
UrbanFactories = intvar(0, 999999999)  # Number of urban factories to build

# Constraints
m = Model()

# Total number of managers available is 260:
m += 8 * RuralFactories + 20 * UrbanFactories <= 260
# The company must make at least 3000 phones per day:
m += 100 * RuralFactories + 200 * UrbanFactories >= 3000

# Objective
# Minimize the total number of factories:
m.minimize(RuralFactories + UrbanFactories)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CountertopMachines = intvar(0, 999999999)  # Number of counter-top sized machines bought
FridgeMachines = intvar(0, 999999999)  # Number of fridge sized machines bought

# Constraints
m = Model()

# Total heat output should not exceed 500 units per day:
m += 50 * CountertopMachines + 70 * FridgeMachines <= 500
# At least 1000 cones worth of ice cream must be produced:
m += 80 * CountertopMachines + 150 * FridgeMachines >= 1000

# Objective
# Minimize the total number of machines needed:
m.minimize(CountertopMachines + FridgeMachines)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallContainers = intvar(0, 999999999)  # Number of small containers used
LargeContainers = intvar(0, 999999999)  # Number of large containers used

# Constraints
m = Model()

# Water constraint:
m += 10 * SmallContainers + 20 * LargeContainers <= 500
# Powdered pill constraint:
m += 15 * SmallContainers + 20 * LargeContainers <= 700

# Objective
# Maximize the amount of paste that can be made (20 units from small container, 30 units from large container):
m.maximize(20 * SmallContainers + 30 * LargeContainers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallWells = intvar(0, 300)  # Number of acres used for small oil wells
LargeWells = intvar(0, 300)  # Number of acres used for large oil wells

# Constraints
m = Model()

# Total acres used should not exceed 300:
m += SmallWells + LargeWells <= 300
# Small oil well produces 10 units of pollution per acre, large oil well produces 20 units of pollution per acre:
m += 10 * SmallWells + 20 * LargeWells <= 4500
# Small oil well requires 5 drill bits per acre, large oil well requires 10 drill bits per acre:
m += 5 * SmallWells + 10 * LargeWells <= 2500

# Objective
# Maximize total production of oil (2 barrels per acre for small well, 5 barrels per acre for large well):
m.maximize(2 * SmallWells + 5 * LargeWells)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AlmondCroissants = intvar(0, 999999999)  # Number of almond croissants made
PistachioCroissants = intvar(0, 999999999)  # Number of pistachio croissants made

# Constraints
m = Model()

# Butter and flour constraints:
m += 5 * AlmondCroissants + 3 * PistachioCroissants <= 600  # Butter constraint
m += 8 * AlmondCroissants + 6 * PistachioCroissants <= 800  # Flour constraint

# Almond croissants should be made at least 3 times as many as pistachio croissants:
m += AlmondCroissants >= 3 * PistachioCroissants

# Objective
# Minimize total production time (12 minutes for almond croissant, 10 minutes for pistachio croissant):
m.minimize(12 * AlmondCroissants + 10 * PistachioCroissants)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A burger chain is buying both gas and electric grills to make burger patties. A gas grill can cook 20 patties per minute while an electric grill can cook 30 patties per minute. The gas grill requires 20 units of cooking oil per minute while the electric grill requires 25 units of cooking oil per minute. Since the gas grill patties taste better, the number of electric grills must be less than the number of gas grills. Further, the burger chain wants to be able to make at least 150 patties per minute and use at most 140 units of cooking oil per minute. How many of each grill should be bought to minimize the total number of grills in the store?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GasGrills = intvar(0, 999999999)  # Number of gas grills bought
ElectricGrills = intvar(0, 999999999)  # Number of electric grills bought

# Constraints
m = Model()

# Gas grill cooks 20 patties per minute, electric grill cooks 30 patties per minute:
m += 20 * GasGrills + 30 * ElectricGrills >= 150
# Gas grill requires 20 units of cooking oil per minute, electric grill requires 25 units:
m += 20 * GasGrills + 25 * ElectricGrills <= 140
# Number of electric grills must be less than the number of gas grills:
m += ElectricGrills < GasGrills

# Objective
# Minimize the total number of grills in the store:
m.minimize(GasGrills + ElectricGrills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A cough syrup company sells cough syrup in kids and adult size bottles. A kids size bottle can hold 100 ml of cough syrup while an adult size bottle can hold 300 ml of cough syrup. Since there is no difference in concentration of medical ingredients between the two bottles, at least 3 times as many adult size bottle must be made as kids size bottles. However, at least 50 kids size bottles must be made. If the company has 25000 ml of cough syrup available, how many bottles of each should be made to maximize the total number of bottles?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
KidsBottles = intvar(0, 999999999)  # Number of kids size bottles made
AdultBottles = intvar(0, 999999999)  # Number of adult size bottles made

# Constraints
m = Model()

# Total ml of cough syrup available is 25000 ml:
m += 100 * KidsBottles + 300 * AdultBottles <= 25000
# At least 3 times as many adult size bottles as kids size bottles:
m += AdultBottles >= 3 * KidsBottles
# At least 50 kids size bottles must be made:
m += KidsBottles >= 50

# Objective
# Maximize the total number of bottles:
m.maximize(KidsBottles + AdultBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery makes fiber supplemented brownies and lemon squares. Each brownie requires 5 units of chocolate mix and 4 units of fiber. Each lemon square requires 7 units of lemon mix and 6 units of fiber. Lemon squares sell much faster and thus the number of lemon squares made must be larger than the number of brownies made. However, to please all customers, at least 40% of the items made must be brownies. If the bakery has 2500 units of chocolate mix and 3300 units of lemon mix, how many of each should be made to minimize the total amount of fiber needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Brownies = intvar(0, 999999999)  # Number of brownies made
LemonSquares = intvar(0, 999999999)  # Number of lemon squares made

# Constraints
m = Model()

# Each brownie requires 5 units of chocolate mix and 4 units of fiber:
m += 5 * Brownies <= 2500
# Each lemon square requires 7 units of lemon mix and 6 units of fiber:
m += 7 * LemonSquares <= 3300
# Lemon squares made must be larger than the number of brownies made:
m += LemonSquares >= Brownies
# At least 40% of the items made must be brownies:
m += Brownies >= 0.4 * (Brownies + LemonSquares)

# Objective
# Minimize total amount of fiber needed:
m.minimize(4 * Brownies + 6 * LemonSquares)

```
False
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic employs nurses and pharmacists to deliver shots to patients. A nurse works 5 hours per shift while a pharmacist works 7 hours per shift. Nurses are paid $250 per shift while pharmacists are paid $300 per shift. Currently, the clinic needs 200 hours of healthcare labor to meet needs. If the firm has a budget of $9000, how many of each healthcare worker should be scheduled to minimize the total number of workers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Nurses = intvar(0, 999999999)  # Number of nurses scheduled
Pharmacists = intvar(0, 999999999)  # Number of pharmacists scheduled

# Constraints
m = Model()

# A nurse works 5 hours per shift and a pharmacist works 7 hours per shift:
m += 5 * Nurses + 7 * Pharmacists == 200
# Nurses are paid $250 per shift and pharmacists are paid $300 per shift:
m += 250 * Nurses + 300 * Pharmacists <= 9000

# Objective
# Minimize the total number of workers (nurses + pharmacists):
m.minimize(Nurses + Pharmacists)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash 50 items per day while the front-loading model can wash 75 items per day. The top-loading model consumes 85 kWh per day while the front-loading model consumes 100 kWh per day. The laundromat must be able to wash at least 5000 items per day and has available 7000 kWh per day. Since the top-loading machine are harder to use, at most 40% of the machines can be top-loading. Further, at least 10 machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TopLoadingMachines = intvar(0, 999999999)  # Number of top-loading machines bought
FrontLoadingMachines = intvar(0, 999999999)  # Number of front-loading machines bought

# Constraints
m = Model()

# Total number of items washed per day should be at least 5000:
m += 50 * TopLoadingMachines + 75 * FrontLoadingMachines >= 5000
# Total kWh consumed per day should not exceed 7000:
m += 85 * TopLoadingMachines + 100 * FrontLoadingMachines <= 7000
# At most 40% of the machines can be top-loading:
m += TopLoadingMachines <= 0.4 * (TopLoadingMachines + FrontLoadingMachines)
# At least 10 machines should be front-loading:
m += FrontLoadingMachines >= 10

# Objective
# Minimize the total number of washing machines:
m.minimize(TopLoadingMachines + FrontLoadingMachines)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBranches = intvar(0, 999999999)  # Number of small branches to build
LargeBranches = intvar(0, 999999999)  # Number of large branches to build

# Constraints
m = Model()

# Total number of bank tellers available is 200:
m += 10 * SmallBranches + 15 * LargeBranches <= 200
# The bank needs to serve at least 1200 customers per day:
m += 50 * SmallBranches + 100 * LargeBranches >= 1200

# Objective
# Minimize the total number of branches needed:
m.minimize(SmallBranches + LargeBranches)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularVans = intvar(0, 999999999)  # Number of regular vans purchased
HybridVans = intvar(0, 999999999)  # Number of hybrid vans purchased

# Constraints
m = Model()

# Total pollutants produced should be at most 7000 units per day:
m += 200 * RegularVans + 100 * HybridVans <= 7000
# Total packages delivered should be at least 20000 per day:
m += 500 * RegularVans + 300 * HybridVans >= 20000

# Objective
# Minimize the total number of vans needed:
m.minimize(RegularVans + HybridVans)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
WithCatalyst = intvar(0, 300)  # Number of units of wood burned with a catalyst
WithoutCatalyst = intvar(0, 300)  # Number of units of wood burned without a catalyst

# Constraints
m = Model()

# Wood and oxygen availability:
m += 10 * WithCatalyst + 15 * WithoutCatalyst <= 300  # Wood
m += 20 * WithCatalyst + 12 * WithoutCatalyst <= 300  # Oxygen

# Objective
# Maximize the amount of carbon dioxide produced:
m.maximize(15 * WithCatalyst + 18 * WithoutCatalyst)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TraditionalMachineAcres = intvar(0, 500)  # Number of acres picked using the traditional machine
ModernMachineAcres = intvar(0, 500)  # Number of acres picked using the modern machine

# Constraints
m = Model()

# Total available land is 500 acres:
m += TraditionalMachineAcres + ModernMachineAcres <= 500
# Fuel constraint (20 liters per acre for traditional machine, 15 liters per acre for modern machine):
m += 20 * TraditionalMachineAcres + 15 * ModernMachineAcres <= 9000
# Waste constraint (10 kg per acre for traditional machine, 15 kg per acre for modern machine):
m += 10 * TraditionalMachineAcres + 15 * ModernMachineAcres <= 6000

# Objective
# Maximize the total amount of tea leaves picked (30 kg per acre for traditional machine, 40 kg per acre for modern machine):
m.maximize(30 * TraditionalMachineAcres + 40 * ModernMachineAcres)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A grilled cheese shop sells a light and heavy grilled cheese sandwich. A light grilled cheese sandwich requires 2 slices of bread and 3 slices of cheese. A heavy grilled cheese sandwich requires 3 slices of bread and 5 slices of cheese. Since most people who come to the store love grilled cheese, the store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches. The store has available 300 slices of bread and 500 slices of cheese. If a light grilled cheese sandwich takes 10 minutes to make and a heavy grilled cheese sandwich takes 15 minutes to make, how many of each should they make to minimize the total production time?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LightSandwiches = intvar(0, 999999999)  # Number of light grilled cheese sandwiches made
HeavySandwiches = intvar(0, 999999999)  # Number of heavy grilled cheese sandwiches made

# Constraints
m = Model()

# Bread and cheese constraints:
# Light sandwich: 2 slices of bread, 3 slices of cheese
# Heavy sandwich: 3 slices of bread, 5 slices of cheese
m += 2 * LightSandwiches + 3 * HeavySandwiches <= 300  # Bread constraint
m += 3 * LightSandwiches + 5 * HeavySandwiches <= 500  # Cheese constraint

# At least 3 times as many heavy sandwiches as light sandwiches:
m += HeavySandwiches >= 3 * LightSandwiches

# Objective
# Minimize total production time (10 minutes for light sandwich, 15 minutes for heavy sandwich):
m.minimize(10 * LightSandwiches + 15 * HeavySandwiches)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A post office is buying stamping machines and they can buy a dual or single model stamping machine. A dual model stamping machine can stamp 50 letters per minute while a single model stamping machine can stamp 30 letters per minute. The dual model stamping machine requires 20 units of glue per minute while the single model stamping machine requires 15 units of glue per minute. Since the single model stamping machine is quieter, the number of single model stamping machines must be more than the number of dual model stamping machines. Further, the post office wants to make sure they can stamp at least 300 letters per minute and use at most 135 units of glue per minute. How many of each stamping machine should they purchase to minimize the total number of stamping machines?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DualMachines = intvar(0, 999999999)  # Number of dual model stamping machines purchased
SingleMachines = intvar(0, 999999999)  # Number of single model stamping machines purchased

# Constraints
m = Model()

# Dual model stamping machine can stamp 50 letters per minute, single model stamping machine can stamp 30 letters per minute:
m += 50 * DualMachines + 30 * SingleMachines >= 300
# Dual model stamping machine requires 20 units of glue per minute, single model stamping machine requires 15 units of glue per minute:
m += 20 * DualMachines + 15 * SingleMachines <= 135
# Number of single model stamping machines must be more than the number of dual model stamping machines:
m += SingleMachines >= DualMachines

# Objective
# Minimize the total number of stamping machines:
m.minimize(DualMachines + SingleMachines)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A banana company sells their bananas in small and large crates. A small crate can hold 20 bananas while a large crate can hole 50 bananas. Since large crates are more manageable, the number of large crates must be at least twice the number of small crates. However, at least 5 small crates should be used. If the company has available 500 bananas, how many of each crate should the company use to maximize the total number of crates produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallCrates = intvar(0, 999999999)  # Number of small crates used
LargeCrates = intvar(0, 999999999)  # Number of large crates used

# Constraints
m = Model()

# Total number of bananas available is 500:
m += 20 * SmallCrates + 50 * LargeCrates == 500
# The number of large crates must be at least twice the number of small crates:
m += LargeCrates >= 2 * SmallCrates
# At least 5 small crates should be used:
m += SmallCrates >= 5

# Objective
# Maximize the total number of crates produced:
m.maximize(SmallCrates + LargeCrates)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ChocolateCrepes = intvar(0, 999999999)  # Number of chocolate crepes made
PeanutButterCrepes = intvar(0, 999999999)  # Number of peanut butter crepes made

# Constraints
m = Model()

# Chocolate spread and peanut butter spread constraints:
m += 3 * ChocolateCrepes + 4 * PeanutButterCrepes <= 400  # Chocolate spread constraint
m += 6 * ChocolateCrepes + 7 * PeanutButterCrepes <= 450  # Peanut butter spread constraint

# Number of peanut butter crepes made must exceed the number of chocolate crepes made:
m += PeanutButterCrepes >= ChocolateCrepes
# At least 25% of the crepes made should be chocolate:
m += ChocolateCrepes >= 0.25 * (ChocolateCrepes + PeanutButterCrepes)

# Objective
# Minimize the total amount of crepe mix needed (6 units for chocolate, 7 units for peanut butter):
m.minimize(6 * ChocolateCrepes + 7 * PeanutButterCrepes)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns $300. An emergency fire fighter works 6 hours per shift and earns $100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of $7000, how many of each should the fire department hire to minimize the total number of fire fighters?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularFirefighters = intvar(0, 999999999)  # Number of regular fire fighters hired
EmergencyFirefighters = intvar(0, 999999999)  # Number of emergency fire fighters hired

# Constraints
m = Model()

# Total number of hours worked should be at least 300:
m += 10 * RegularFirefighters + 6 * EmergencyFirefighters >= 300
# The fire department has a budget of $7000:
m += 300 * RegularFirefighters + 100 * EmergencyFirefighters <= 7000

# Objective
# Minimize the total number of fire fighters hired:
m.minimize(RegularFirefighters + EmergencyFirefighters)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A mall buys two types of hand sanitizer machines, a motion activated one and a manual one. The motion activated one can deliver 50 drops per minute and consumes 30 kWh. The manual one can deliver 75 drops per minute and consumes 20 kWh. Since the motion activated one is more hygienic, at most 40% of the machines can be manual. In addition, at least 3 should be motion activated. If the mall must be able to deliver at least 1000 drops per minute and can use at most 500 kWh per minute, how many of each machine should they buy to minimize the total number of machines?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MotionActivated = intvar(0, 999999999)  # Number of motion activated hand sanitizer machines
Manual = intvar(0, 999999999)  # Number of manual hand sanitizer machines

# Constraints
m = Model()

# Motion activated machine delivers 50 drops per minute and consumes 30 kWh:
# Manual machine delivers 75 drops per minute and consumes 20 kWh:
# The mall must be able to deliver at least 1000 drops per minute:
m += 50 * MotionActivated + 75 * Manual >= 1000
# The mall can use at most 500 kWh per minute:
m += 30 * MotionActivated + 20 * Manual <= 500
# At least 3 machines should be motion activated:
m += MotionActivated >= 3
# At most 40% of the machines can be manual:
m += Manual <= 0.4 * (MotionActivated + Manual)

# Objective
# Minimize the total number of machines:
m.minimize(MotionActivated + Manual)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A hot dog company can build two types of butcher shops, a small shop and a large shop. A small shop can make 30 hot dogs per day and requires 2 workers. A large shop can make 70 hot dogs per day and requires 4 workers. The company must make at least 500 hot dogs per day but they only have available 30 workers. How many of each butcher shop should the company build to minimize the total number of butcher shops?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallShops = intvar(0, 30)  # Number of small butcher shops to build
LargeShops = intvar(0, 30)  # Number of large butcher shops to build

# Constraints
m = Model()

# Total number of hot dogs made per day should be at least 500:
m += 30 * SmallShops + 70 * LargeShops >= 500
# Total number of workers available is 30:
m += 2 * SmallShops + 4 * LargeShops <= 30

# Objective
# Minimize the total number of butcher shops:
m.minimize(SmallShops + LargeShops)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An airport buys two types of vehicles, a 4-wheeler and 3-wheeler, to help move luggage. A 4-wheeler vehicle can move 60 luggage per day and produces 30 units of pollutant per day. A 3-wheeler vehicle can move 40 luggage per day and produces 15 units of pollutant per day. The airport needs to be able to move at least 1000 luggage per day. To avoid over-polluting the airport, they can produce at most 430 units of pollutant per day. How many of each vehicle should the airport buy to minimize the total number of vehicles needed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FourWheelers = intvar(0, 999999999)  # Number of 4-wheeler vehicles bought
ThreeWheelers = intvar(0, 999999999)  # Number of 3-wheeler vehicles bought

# Constraints
m = Model()

# Total luggage moved per day should be at least 1000:
m += 60 * FourWheelers + 40 * ThreeWheelers >= 1000
# Total pollutant produced per day should be at most 430:
m += 30 * FourWheelers + 15 * ThreeWheelers <= 430

# Objective
# Minimize the total number of vehicles needed:
m.minimize(FourWheelers + ThreeWheelers)

```
False
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A scientist is conducting two experiments to produce electricity, experiment alpha and experiment beta. In experiment alpha, 3 units of metal and 5 units of acid are required to produce 8 units of electricity. In experiment beta, 5 units of metal and 4 units of acid are required to produced 10 units of electricity. The lab has 800 units of metal and 750 units of acid available. How many of each experiment should the scientist conduct to maximize the total amount of electricity produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Alpha = intvar(0, 999999999)  # Number of times experiment alpha is conducted
Beta = intvar(0, 999999999)  # Number of times experiment beta is conducted

# Constraints
m = Model()

# Metal and acid constraints:
# Experiment alpha: 3 units of metal and 5 units of acid produce 8 units of electricity
m += 3 * Alpha <= 800  # Metal constraint
m += 5 * Alpha <= 750  # Acid constraint
# Experiment beta: 5 units of metal and 4 units of acid produce 10 units of electricity
m += 5 * Beta <= 800  # Metal constraint
m += 4 * Beta <= 750  # Acid constraint

# Objective
# Maximize total electricity produced
m.maximize(8 * Alpha + 10 * Beta)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A man fishes in a 250 acre lake and can catch fish either using a net or fishing line. For each acre of the lake, using a net will catch 8 fish and requires 4 units of bait but also causes 2 units of pain for the fisherman. For each acre of the lake, using a fishing line will catch 5 fish and requires 3 units of bait but also causes 1 unit of pain for the fisherman. The fisherman has available 800 units of bait and can tolerate at most 350 units of pain. For how many acres each should he use each fishing method to maximize the amount of fish he can catch?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
NetAcres = intvar(0, 250)  # Number of acres used for fishing with a net
LineAcres = intvar(0, 250)  # Number of acres used for fishing with a fishing line

# Constraints
m = Model()

# Total acres used for fishing should not exceed 250:
m += NetAcres + LineAcres <= 250
# Bait constraint: 4 units of bait per acre for using a net, 3 units of bait per acre for using a fishing line:
m += 4 * NetAcres + 3 * LineAcres <= 800
# Pain constraint: 2 units of pain per acre for using a net, 1 unit of pain per acre for using a fishing line:
m += 2 * NetAcres + LineAcres <= 350

# Objective
# Maximize the number of fish caught (8 fish per acre using a net, 5 fish per acre using a fishing line):
m.maximize(8 * NetAcres + 5 * LineAcres)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A coffee shop sells mochas and regular coffees. Each mocha requires 3 units of coffee powder and 6 units of milk. Each regular coffee requires 6 units of coffee powder and 2 units of milk. The shop has available 400 units of coffee powder and 500 units of milk. Making a mocha takes 5 minutes and making a regular coffee takes 3 minutes. Since mochas are more popular among people, the shop must make at least 3 times as many mochas as regular coffees. How many of each should they make to minimize the total production time?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Mochas = intvar(0, 999999999)  # Number of mochas made
RegularCoffees = intvar(0, 999999999)  # Number of regular coffees made

# Constraints
m = Model()

# Coffee powder and milk availability:
m += 3 * Mochas + 6 * RegularCoffees <= 400  # Coffee powder
m += 6 * Mochas + 2 * RegularCoffees <= 500  # Milk
# At least 3 times as many mochas as regular coffees:
m += Mochas >= 3 * RegularCoffees

# Objective
# Minimize total production time (5 minutes per mocha, 3 minutes per regular coffee):
m.minimize(5 * Mochas + 3 * RegularCoffees)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A butcher shop is buying meat slicers for their shop, a manual and automatic slicer. The manual slicer can cut 5 slices per minute while the automatic slicer can cut 8 slices per minute. In addition, to make sure all the parts operate smoothly, the manual slicer requires 3 units of grease per minute while the automatic slicer requires 6 units of grease per minute. Since the automatic slicer does not need someone to operate it, the number of manual slicers must be less than the number of automatic slicers. In addition, the butcher shop needs to be able to cut at least 50 slices per minute but can use at most 35 units of grease per minute. How many of each slicer should the butcher shop buy to minimize the total number of slicers in the shop?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ManualSlicers = intvar(0, 999999999)  # Number of manual slicers bought
AutomaticSlicers = intvar(0, 999999999)  # Number of automatic slicers bought

# Constraints
m = Model()

# The butcher shop needs to be able to cut at least 50 slices per minute:
m += 5 * ManualSlicers + 8 * AutomaticSlicers >= 50
# The butcher shop can use at most 35 units of grease per minute:
m += 3 * ManualSlicers + 6 * AutomaticSlicers <= 35
# The number of manual slicers must be less than the number of automatic slicers:
m += ManualSlicers < AutomaticSlicers

# Objective
# Minimize the total number of slicers in the shop:
m.minimize(ManualSlicers + AutomaticSlicers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A water company sells water in glass and plastic bottles. A glass bottle can hole 500 ml of water while a plastic bottle can hold 750 ml of water. Because most customer prefer plastic bottles, the number of plastic bottles must be at least 3 times the number of glass bottles. However, there must be at least 20 glass bottles. If the company has available 250000 ml of water, how many of each bottle should be made to maximize the total number of bottles?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GlassBottles = intvar(0, 999999999)  # Number of glass bottles produced
PlasticBottles = intvar(0, 999999999)  # Number of plastic bottles produced

# Constraints
m = Model()

# Total amount of water available is 250000 ml:
m += 500 * GlassBottles + 750 * PlasticBottles <= 250000
# The number of plastic bottles must be at least 3 times the number of glass bottles:
m += PlasticBottles >= 3 * GlassBottles
# There must be at least 20 glass bottles:
m += GlassBottles >= 20

# Objective
# Maximize the total number of bottles:
m.maximize(GlassBottles + PlasticBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GoatCurryBowls = intvar(0, 999999999)  # Number of bowls of goat curry made
ChickenCurryBowls = intvar(0, 999999999)  # Number of bowls of chicken curry made

# Constraints
m = Model()

# Units of goat meat and chicken meat available:
m += 3 * GoatCurryBowls + 5 * ChickenCurryBowls <= 1500  # Goat meat
m += 6 * GoatCurryBowls + 5 * ChickenCurryBowls <= 2000  # Chicken meat

# At least 25% of the bowls made must be chicken curry:
m += ChickenCurryBowls >= 0.25 * (GoatCurryBowls + ChickenCurryBowls)

# The number of goat curry bowls must be larger than the number of chicken curry bowls:
m += GoatCurryBowls >= ChickenCurryBowls

# Objective
# Minimize the total amount of curry base used (6 units for goat curry, 5 units for chicken curry):
m.minimize(6 * GoatCurryBowls + 5 * ChickenCurryBowls)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

An accounting firm employs part time workers and full time workers. Full time workers work 8 hours per shift while part time workers work 4 hours per shift. In addition, full time workers are paid $300 per shift while part time workers are paid $100 per shift. Currently, the accounting firm has a project requiring 500 hours of labor. If the firm has a budget of $15000, how many of each type of worker should be scheduled to minimize the total number of workers.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FullTimeWorkers = intvar(0, 999999999)  # Number of full time workers scheduled
PartTimeWorkers = intvar(0, 999999999)  # Number of part time workers scheduled

# Constraints
m = Model()

# Full time workers work 8 hours per shift, part time workers work 4 hours per shift:
m += 8 * FullTimeWorkers + 4 * PartTimeWorkers == 500
# Full time workers are paid $300 per shift, part time workers are paid $100 per shift:
m += 300 * FullTimeWorkers + 100 * PartTimeWorkers <= 15000

# Objective
# Minimize the total number of workers scheduled:
m.minimize(FullTimeWorkers + PartTimeWorkers)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MachinesA = intvar(0, 999999999)  # Number of machines of type A used
MachinesB = intvar(0, 999999999)  # Number of machines of type B used

# Constraints
m = Model()

# Machine A can make 30 items and consumes 100 kWh per day:
m += 30 * MachinesA <= 1000 * MachinesA
# Machine B can make 50 items and consumes 120 kWh per day:
m += 50 * MachinesB <= 1200 * MachinesB
# The factory must produce at least 1000 items per day:
m += 30 * MachinesA + 50 * MachinesB >= 1000
# The factory has 3000 kWh of electricity available per day:
m += 100 * MachinesA + 120 * MachinesB <= 3000
# At most 30% of the machines must be of type B:
m += MachinesB <= 0.3 * (MachinesA + MachinesB)
# At least 5 machines of type A should be used:
m += MachinesA >= 5

# Objective
# Minimize the total number of machines used:
m.minimize(MachinesA + MachinesB)

```
True
True
Wrong: 2, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MediumFactories = intvar(0, 999999999)  # Number of medium sized factories
SmallFactories = intvar(0, 999999999)  # Number of small factories

# Constraints
m = Model()

# Total number of toys made per day should be at least 250:
m += 50 * MediumFactories + 35 * SmallFactories >= 250
# Total number of operators available is 16:
m += 3 * MediumFactories + 2 * SmallFactories <= 16

# Objective
# Minimize the total number of factories:
m.minimize(MediumFactories + SmallFactories)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemical plant can buy two types of generators, generator A and generator B, which use two different processes to generate hydrogen. Generator A uses an electrolysis process and produces 40 cubic meters of hydrogen as well as 300 units of pollutants every day. Generator B uses a fermentation process to produce 30 cubic meters of hydrogen per day while outputting 200 units of pollutants. The chemical plant must make a minimum of 1000 cubic meters of hydrogen per day but due to environmental restrictions they can produce at most 3000 units of pollutant. How many of each type of generator should they buy to minimize the number of generators needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GeneratorsA = intvar(0, 999999999)  # Number of generator A
GeneratorsB = intvar(0, 999999999)  # Number of generator B

# Constraints
m = Model()

# Generator A produces 40 cubic meters of hydrogen and 300 units of pollutants per day:
m += 40 * GeneratorsA <= 1000  # At least 1000 cubic meters of hydrogen per day
m += 300 * GeneratorsA <= 3000  # At most 3000 units of pollutants per day

# Generator B produces 30 cubic meters of hydrogen and 200 units of pollutants per day:
m += 30 * GeneratorsB <= 1000  # At least 1000 cubic meters of hydrogen per day
m += 200 * GeneratorsB <= 3000  # At most 3000 units of pollutants per day

# Objective
# Minimize the number of generators needed:
m.minimize(GeneratorsA + GeneratorsB)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two chemical reactions, chemical reaction A and chemical reaction B. Chemical reaction A requires 5 units of rare inert gas and 6 units of treated water to produce 10 units of a rare compound. Chemical reaction B requires 7 units of rare inert gas and 3 units of treater water to produce 8 units of a rare compound. There are 1000 units of the rare inert gas and 800 units of treated water available in the lab. How many reactions of each type should be done to maximize the amount of rare compound produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ReactionsA = intvar(0, 999999999)  # Number of chemical reaction A
ReactionsB = intvar(0, 999999999)  # Number of chemical reaction B

# Constraints
m = Model()

# Rare inert gas constraint:
m += 5 * ReactionsA + 7 * ReactionsB <= 1000
# Treated water constraint:
m += 6 * ReactionsA + 3 * ReactionsB <= 800

# Objective
# Maximize the amount of rare compound produced:
m.maximize(10 * ReactionsA + 8 * ReactionsB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A mining company has available a total of 100 square miles of mining sites and considering the use of two mining techniques: heap leaching and vat leaching. For each square mile of land, heap leaching technique can have a daily production of 3 tons of rare earth oxide per square miles but it also creates 8 tons of polluted wastewater and requires 10 extraction machines. On the other hand, vat leaching technique produces 5 tons of rare earth oxide per square miles per day while creating 17 tons of polluted wastewater and requiring 20 extraction machines. There are 100 machines available and due to environmental regulations, the amount of polluted wastewater must be at most 90 tons daily. Find the proportion of lands that use each mining technique in order to maximize the daily production of rare earth oxide.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HeapLeachingLand = intvar(0, 100)  # Number of square miles of land using heap leaching
VatLeachingLand = intvar(0, 100)  # Number of square miles of land using vat leaching

# Constraints
m = Model()

# Total available land is 100 square miles:
m += HeapLeachingLand + VatLeachingLand <= 100
# Heap leaching daily polluted wastewater should not exceed 90 tons:
m += 8 * HeapLeachingLand + 17 * VatLeachingLand <= 90
# Heap leaching requires 10 extraction machines per square mile, vat leaching requires 20 extraction machines per square mile:
m += 10 * HeapLeachingLand + 20 * VatLeachingLand <= 100

# Objective
# Maximize daily production of rare earth oxide (3 tons per square mile for heap leaching, 5 tons per square mile for vat leaching):
m.maximize(3 * HeapLeachingLand + 5 * VatLeachingLand)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars.  If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MilkChocBars = intvar(0, 999999999)  # Number of milk chocolate bars made
DarkChocBars = intvar(0, 999999999)  # Number of dark chocolate bars made

# Constraints
m = Model()

# Cocoa and milk constraints:
m += 4 * MilkChocBars + 6 * DarkChocBars <= 2000  # Cocoa constraint
m += 7 * MilkChocBars + 3 * DarkChocBars <= 1750  # Milk constraint

# At least 2 times as many milk chocolate bars need to be made as dark chocolate bars:
m += MilkChocBars >= 2 * DarkChocBars

# Objective
# Minimize total production time (15 minutes per milk chocolate bar, 12 minutes per dark chocolate bar):
m.minimize(15 * MilkChocBars + 12 * DarkChocBars)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute.  Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PremiumPrinters = intvar(0, 999999999)  # Number of premium printers bought
RegularPrinters = intvar(0, 999999999)  # Number of regular printers bought

# Constraints
m = Model()

# At least 200 pages can be printed per minute:
m += 30 * PremiumPrinters + 20 * RegularPrinters >= 200
# At most 35 units of ink are used per minute:
m += 4 * PremiumPrinters + 3 * RegularPrinters <= 35
# The number of regular printers must be less than the number of premium printers:
m += RegularPrinters < PremiumPrinters

# Objective
# Minimize the total number of printers:
m.minimize(PremiumPrinters + RegularPrinters)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A vine company sells vine in vintage and regular bottles. A vintage bottle can hold 500 ml of vine while a regular bottle can hold 750 ml of vine. The company has available 100000 ml of vine. Because vintage bottles are mostly bought by collectors, the number of regular bottles must be at least 4 times as much as the number of vintage bottles. However, at least 10 vintage bottles must be made. How many of each should be made to maximize the total number of bottles produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
VintageBottles = intvar(0, 999999999)  # Number of vintage bottles produced
RegularBottles = intvar(0, 999999999)  # Number of regular bottles produced

# Constraints
m = Model()

# Total vine available is 100000 ml:
m += 500 * VintageBottles + 750 * RegularBottles <= 100000
# At least 10 vintage bottles must be made:
m += VintageBottles >= 10
# The number of regular bottles must be at least 4 times the number of vintage bottles:
m += RegularBottles >= 4 * VintageBottles

# Objective
# Maximize the total number of bottles produced:
m.maximize(VintageBottles + RegularBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PeachCandyPacks = intvar(0, 999999999)  # Number of packs of peach flavored candy
CherryCandyPacks = intvar(0, 999999999)  # Number of packs of cherry flavored candy

# Constraints
m = Model()

# Peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup per pack:
m += 3 * PeachCandyPacks <= 3000
m += 5 * PeachCandyPacks <= 4000
# Cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup per pack:
m += 5 * CherryCandyPacks <= 3000
m += 4 * CherryCandyPacks <= 4000
# Peach candy packs must be larger than cherry candy packs:
m += PeachCandyPacks >= CherryCandyPacks
# At least 30% of the packs must be cherry flavored:
m += CherryCandyPacks >= 0.3 * (PeachCandyPacks + CherryCandyPacks)

# Objective
# Minimize total amount of special syrup used:
m.minimize(5 * PeachCandyPacks + 4 * CherryCandyPacks)

```
False
False
Wrong: 4, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient in the hospital can take two pills, Pill 1 and Pill 2. Per pill, pill 1 provides 0.2 units of pain medication and 0.3 units of anxiety medication. Per pill, pill 2 provides 0.6 units of pain medication and 0.2 units of anxiety medication. In addition, pill 1 causes 0.3 units of discharge while pill 2 causes 0.1 units of discharge. At most 6 units of pain medication can be provided and at least 3 units of anxiety medication must be provided. How many pills of each should the patient be given to minimize the total amount of discharge?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Pill1 = intvar(0, 999999999)  # Number of Pill 1 taken
Pill2 = intvar(0, 999999999)  # Number of Pill 2 taken

# Constraints
m = Model()

# Pain medication constraint:
m += 0.2 * Pill1 + 0.6 * Pill2 <= 6
# Anxiety medication constraint:
m += 0.3 * Pill1 + 0.2 * Pill2 >= 3

# Objective
# Minimize total amount of discharge (0.3 units per Pill 1, 0.1 units per Pill 2):
m.minimize(0.3 * Pill1 + 0.1 * Pill2)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AlphaBottles = intvar(0, 999999999)  # Number of alpha brand bottles consumed
OmegaBottles = intvar(0, 999999999)  # Number of omega brand bottles consumed

# Constraints
m = Model()

# Protein constraint:
m += 30 * AlphaBottles + 20 * OmegaBottles >= 100
# Calorie constraint:
m += 350 * AlphaBottles + 300 * OmegaBottles >= 2000
# Omega brand should be at most 35% of the total drink:
m += OmegaBottles <= 0.35 * (AlphaBottles + OmegaBottles)

# Objective
# Minimize sugar intake (20 grams of sugar in alpha brand, 15 grams of sugar in omega brand):
m.minimize(20 * AlphaBottles + 15 * OmegaBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A summer camps does science experiments in two pre filled beakers, beaker 1 and beaker 2. Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime. Beaker 2 uses 6 units of flour and 3 units of special liquid to make 3 units of slime.  However, beaker 1 creates 4 units of waste while beaker 2 creates 2 units of waste. The summer camp has available 150 units of flour and 100 units of special liquid. If at most 30 units of waste can be produced, how many of each beaker should be used to maximize the amount of slime produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Beaker1 = intvar(0, 999999999)  # Number of times beaker 1 is used
Beaker2 = intvar(0, 999999999)  # Number of times beaker 2 is used

# Constraints
m = Model()

# Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime:
m += 4 * Beaker1 + 6 * Beaker2 <= 150  # Total flour constraint
m += 6 * Beaker1 + 3 * Beaker2 <= 100  # Total special liquid constraint
m += 4 * Beaker1 + 2 * Beaker2 <= 30  # Total waste constraint

# Objective
# Maximize the amount of slime produced (5 units from beaker 1, 3 units from beaker 2):
m.maximize(5 * Beaker1 + 3 * Beaker2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An dog hospital has 2000 units of tooth medication to make both small and large bones. A small bone requires 10 units of tooth medication and 12 units of meat. A large bone requires 15 units of tooth medication and 15 units of meat. Since most dogs prefer the small bones, at least 50% of the bones made must be small. In addition, the hospital must make at least 30 large bones. How many of each bone should be made to minimize the amount of meat needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBones = intvar(0, 999999999)  # Number of small bones made
LargeBones = intvar(0, 999999999)  # Number of large bones made

# Constraints
m = Model()

# Total units of tooth medication available is 2000:
m += 10 * SmallBones + 15 * LargeBones <= 2000
# At least 50% of the bones made must be small:
m += SmallBones >= 0.5 * (SmallBones + LargeBones)
# At least 30 large bones must be made:
m += LargeBones >= 30

# Objective
# Minimize the amount of meat needed (12 units for small bone, 15 units for large bone):
m.minimize(12 * SmallBones + 15 * LargeBones)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A scientist in the arctic needs to get enough vitamin D and vitamin C in his diet by drinking orange and apple juice. Each box of orange juice contains 10 units of vitamin D and 8 units of vitamin C. Each box of apple juice contains 12 units of vitamin D and 6 units of vitamin C. Since the scientist prefers apple juice, he must drink at least 3 times as many apple juice boxes and orange juice boxes. However, he must also drink at least 3 orange juice boxes. To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C. How many of each juice box should he drink to maximize his total vitamin D intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
OrangeJuiceBoxes = intvar(0, 999999999)  # Number of boxes of orange juice
AppleJuiceBoxes = intvar(0, 999999999)  # Number of boxes of apple juice

# Constraints
m = Model()

# Vitamin D and Vitamin C content in each box of orange juice and apple juice:
VitaminDOrange = 10
VitaminCOrange = 8
VitaminDApple = 12
VitaminCApple = 6

# The scientist must drink at least 3 orange juice boxes:
m += OrangeJuiceBoxes >= 3
# The scientist must drink at least 3 times as many apple juice boxes as orange juice boxes:
m += AppleJuiceBoxes >= 3 * OrangeJuiceBoxes
# The scientist can consume at most 300 units of vitamin C:
m += VitaminCOrange * OrangeJuiceBoxes + VitaminCApple * AppleJuiceBoxes <= 300

# Objective
# Maximize total vitamin D intake:
m.maximize(VitaminDOrange * OrangeJuiceBoxes + VitaminDApple * AppleJuiceBoxes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A cleaning company uses a cleansing chemical and odor-removing chemical to clean a house. Each unit of the cleansing chemical takes 4 units to be effective while each unit of the odor-removing chemical takes 6 minutes to be effective. The company must use at least 100 units of the cleansing chemical. In total, at least 300 units of chemicals can be used per house. Further, because the cleansing chemical is strong, there can be at most twice the amount of cleansing chemical as odor-removing chemical. How many units of each should be used to minimize the total time it takes for a house to be cleaned?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CleansingChemical = intvar(0, 999999999)  # Units of cleansing chemical used
OdorRemovingChemical = intvar(0, 999999999)  # Units of odor-removing chemical used

# Constraints
m = Model()

# Each unit of cleansing chemical takes 4 units of time, each unit of odor-removing chemical takes 6 units of time:
TotalTime = 4 * CleansingChemical + 6 * OdorRemovingChemical

# At least 100 units of cleansing chemical must be used:
m += CleansingChemical >= 100
# Total units of chemicals used must be at least 300:
m += CleansingChemical + OdorRemovingChemical >= 300
# There can be at most twice the amount of cleansing chemical as odor-removing chemical:
m += CleansingChemical <= 2 * OdorRemovingChemical

# Objective
# Minimize total time taken to clean the house:
m.minimize(TotalTime)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A drug company is making allergy pills and fever reducing pills in two factories, factory 1 and factory 2. Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour. Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour.  Factory 1 is much more efficient and only requires 20 units of a rare compound while factory 2 requires 30 units of a rare compound. The company only has available 1000 units of the rare compound. If the company must make at least 700 allergy pills and 600 fever reducing pills, how many hours should each factory be run to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Factory1Hours = intvar(0, 1000)  # Number of hours factory 1 is run
Factory2Hours = intvar(0, 1000)  # Number of hours factory 2 is run

# Constraints
m = Model()

# Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour:
m += 20 * Factory1Hours >= 700  # At least 700 allergy pills
m += 15 * Factory1Hours >= 600  # At least 600 fever reducing pills
# Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour:
m += 10 * Factory2Hours >= 700  # At least 700 allergy pills
m += 30 * Factory2Hours >= 600  # At least 600 fever reducing pills
# Factory 1 requires 20 units of rare compound per hour, Factory 2 requires 30 units:
m += 20 * Factory1Hours + 30 * Factory2Hours <= 1000  # Total rare compound units available

# Objective
# Minimize total time needed (sum of hours for both factories):
m.minimize(Factory1Hours + Factory2Hours)

```
False
False
Wrong: 3, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FishMeals = intvar(0, 999999999)  # Number of fish meals consumed
ChickenMeals = intvar(0, 999999999)  # Number of chicken meals consumed

# Constraints
m = Model()

# Protein and iron intake requirements:
m += 10 * FishMeals + 15 * ChickenMeals >= 130  # Protein
m += 12 * FishMeals + 8 * ChickenMeals >= 120  # Iron
# At least twice as many chicken meals as fish meals:
m += ChickenMeals >= 2 * FishMeals

# Objective
# Minimize fat intake (7 units of fat per fish meal, 10 units of fat per chicken meal):
m.minimize(7 * FishMeals + 10 * ChickenMeals)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmaceutical company makes skin cream in batches, a regular batch and premium batch, to sell to hospitals. The regular batch requires 50 units of medicinal ingredients and 40 units of rehydration product. A premium batch requires 40 units of medicinal ingredients and 60 units of rehydration product. The company has available 3000 units of medicinal ingredients and 3500 units of rehydration product. Since the premium batch sells better, the number of regular batches must be less than the number of premium batches. In addition, the company must make at least 10 regular batches. If a regular batch can treat 50 people and a premium batch can treat 30 people, how many of each batch should be made to maximize the number of people that can be treated?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularBatches = intvar(0, 999999999)  # Number of regular batches made
PremiumBatches = intvar(0, 999999999)  # Number of premium batches made

# Constraints
m = Model()

# Medicinal ingredients and rehydration product constraints:
m += 50 * RegularBatches + 40 * PremiumBatches <= 3000  # Medicinal ingredients constraint
m += 40 * RegularBatches + 60 * PremiumBatches <= 3500  # Rehydration product constraint

# At least 10 regular batches must be made:
m += RegularBatches >= 10

# Regular batches must be less than premium batches:
m += RegularBatches < PremiumBatches

# Objective
# Maximize the number of people that can be treated (50 people per regular batch, 30 people per premium batch):
m.maximize(50 * RegularBatches + 30 * PremiumBatches)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic takes patient blood pressure either using an automatic machine or a manual machine. The automatic machine takes 10 minutes per patient while the manual machine takes 15 minutes per patient. Since the automatic machine frequently breaks, at least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine. However, at least 20 patient can be processed by the automatic machine. If the clinic is open for 20000 minutes, maximize the number of patients whose blood pressure can be taken.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AutomaticPatients = intvar(0, 999999999)  # Number of patients using the automatic machine
ManualPatients = intvar(0, 999999999)  # Number of patients using the manual machine

# Constraints
m = Model()

# Total time constraint (10 minutes per automatic patient, 15 minutes per manual patient):
m += 10 * AutomaticPatients + 15 * ManualPatients <= 20000
# At least 20 patients can be processed by the automatic machine:
m += AutomaticPatients >= 20
# At least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine:
m += ManualPatients >= 2 * AutomaticPatients

# Objective
# Maximize the number of patients whose blood pressure can be taken:
m.maximize(AutomaticPatients + ManualPatients)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient with a sore throat can drink two syrups, syrup 1 and syrup 2 for treatment. Per serving, syrup 1 delivers 0.5 units of medicine to the throat and 0.4 units of medicine to the lungs. Per serving, syrup 2 delivers 0.2 units of medicine to the throat and 0.5 units of medicine to the lungs. Furthermore, syrup 1 contains 0.5 units of sugar while syrup 2 contains 0.3 units of sugar per serving. The patient can get at most 5 units of medicine for the throat and at least 4 units of medicine to the lungs. How many servings of each should the patient take to minimize his sugar intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ServingsSyrup1 = intvar(0, 999999999)  # Number of servings of syrup 1
ServingsSyrup2 = intvar(0, 999999999)  # Number of servings of syrup 2

# Constraints
m = Model()

# Medicine delivered to the throat should be at most 5 units:
m += 0.5 * ServingsSyrup1 + 0.2 * ServingsSyrup2 <= 5
# Medicine delivered to the lungs should be at least 4 units:
m += 0.4 * ServingsSyrup1 + 0.5 * ServingsSyrup2 >= 4

# Objective
# Minimize sugar intake (0.5 units of sugar in syrup 1, 0.3 units of sugar in syrup 2):
m.minimize(0.5 * ServingsSyrup1 + 0.3 * ServingsSyrup2)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A sailor can eat either a crab cakes or a lobster roll for his meals. He needs to ensure he gets at least 80 units of vitamin A and 100 units of vitamin C. Each crab cake contains 5 units of vitamin A and 7 units of vitamin C. Each lobster roll contains 8 units of vitamin A and 4 units of vitamin C. In addition, since lobster is more expensive, at most 40% of his meals should be lobster rolls. If each crab cake contains 4 units of unsaturated fat and each lobster roll contains 6 units of unsaturated fat, how many of each should he eat to minimize his unsaturated fat intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CrabCakes = intvar(0, 999999999)  # Number of crab cakes eaten
LobsterRolls = intvar(0, 999999999)  # Number of lobster rolls eaten

# Constraints
m = Model()

# Vitamin A constraint:
m += 5 * CrabCakes + 8 * LobsterRolls >= 80
# Vitamin C constraint:
m += 7 * CrabCakes + 4 * LobsterRolls >= 100
# At most 40% of meals should be lobster rolls:
m += LobsterRolls <= 0.4 * (CrabCakes + LobsterRolls)

# Objective
# Minimize unsaturated fat intake (4 units per crab cake, 6 units per lobster roll):
m.minimize(4 * CrabCakes + 6 * LobsterRolls)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A science show preforms two different demonstrations, demonstration 1 and demonstration 2. In demonstration 1, 10 units of mint and 20 units of the active ingredient is used to make 25 units of minty foam. In demonstration 2, 12 units of mint and 15 units of the active ingredient is used to make 18 units of minty foam. In addition, demonstration 1 creates 5 units of black tar while demonstration 2 creates 3 units of black tar. The show has available 120 units of mint and 100 units of active ingredients. If at most 50 units of black tar can be produced, how many of each demonstration should be done to maximize the amount of minty foam produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Demo1 = intvar(0, 999999999)  # Number of times demonstration 1 is performed
Demo2 = intvar(0, 999999999)  # Number of times demonstration 2 is performed

# Constraints
m = Model()

# Mint constraint:
m += 10 * Demo1 + 12 * Demo2 <= 120
# Active ingredient constraint:
m += 20 * Demo1 + 15 * Demo2 <= 100
# Black tar constraint:
m += 5 * Demo1 + 3 * Demo2 <= 50

# Objective
# Maximize the amount of minty foam produced (25 units from demo 1, 18 units from demo 2):
m.maximize(25 * Demo1 + 18 * Demo2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A lab has 20000 mg of mRNA anti-viral available to make children's and adult vaccines. Each children's vaccine contains 50 mg of mRNA and 50 mg of fever suppressant. Each adult vaccine contains 75 mg of mRNA and 75 mg of fever suppressant. Since adult vaccines are more essential, at least 70% of vaccines should be adult vaccines. However, at least 50 children's vaccines should be made. How many of each vaccine should be made to minimize the amount of fever suppressant used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ChildrenVaccines = intvar(0, 999999999)  # Number of children's vaccines made
AdultVaccines = intvar(0, 999999999)  # Number of adult vaccines made

# Constraints
m = Model()

# Total amount of mRNA used should not exceed 20000 mg:
m += 50 * ChildrenVaccines + 75 * AdultVaccines <= 20000
# At least 50 children's vaccines should be made:
m += ChildrenVaccines >= 50
# At least 70% of vaccines should be adult vaccines:
m += AdultVaccines >= 0.7 * (ChildrenVaccines + AdultVaccines)

# Objective
# Minimize the amount of fever suppressant used (50 mg per children's vaccine, 75 mg per adult vaccine):
m.minimize(50 * ChildrenVaccines + 75 * AdultVaccines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A parent feeds their baby two flavors of baby food, apple and carrot, in order to meet the babies fat and folate requirements. Each serving of apple flavored baby food contains 2 units of fat and 5 units of folate. Each serving of carrot flavored baby food contains 4 units of fat and 3 units of folate. The baby does not like the carrot flavor, and therefore he must eat three times as many apple flavored baby food as carrot flavored baby food. However, he must eat at least 2 servings of carrot flavored baby food. If the baby can consume at most 100 units of folate, how many servings of each should he eat to maximize his fat intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AppleServings = intvar(0, 999999999)  # Number of servings of apple flavored baby food
CarrotServings = intvar(0, 999999999)  # Number of servings of carrot flavored baby food

# Constraints
m = Model()

# Fat and folate requirements:
# Fat: 2 units in apple, 4 units in carrot
# Folate: 5 units in apple, 3 units in carrot
# The baby must eat at least 2 servings of carrot flavored baby food:
m += CarrotServings >= 2
# The baby must eat three times as many apple flavored baby food as carrot flavored baby food:
m += AppleServings == 3 * CarrotServings
# Folate constraint:
m += 5 * AppleServings + 3 * CarrotServings <= 100

# Objective
# Maximize fat intake (2 units of fat in apple, 4 units of fat in carrot):
m.maximize(2 * AppleServings + 4 * CarrotServings)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both fertilizer and seeds need to be added to a lawn. One unit of fertilizer takes 0.5 minutes to be effective while one unit of seeds takes 1.5 minutes to be effective. There can be at most 300 units of fertilizer and seeds combined added to the lawn. In addition at least 50 units of fertilizer need to be added. Since the lawn is really patchy, there can be at most twice the amount of fertilizer as seeds. How many units of each should be added to minimize the total time it takes for the lawn to be ready?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Fertilizer = intvar(0, 999999999)  # Units of fertilizer added to the lawn
Seeds = intvar(0, 999999999)  # Units of seeds added to the lawn

# Constraints
m = Model()

# Total units of fertilizer and seeds should be at most 300:
m += Fertilizer + Seeds <= 300
# At least 50 units of fertilizer need to be added:
m += Fertilizer >= 50
# There can be at most twice the amount of fertilizer as seeds:
m += Fertilizer <= 2 * Seeds

# Objective
# Minimize total time (0.5 minutes per unit of fertilizer, 1.5 minutes per unit of seeds):
m.minimize(0.5 * Fertilizer + 1.5 * Seeds)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmacy has two factories, factory 1 and factory 2, where they make acne cream and anti-bacterial cream. Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour. Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour. Factory 1 requires 30 units of base gel per hour while factory 2 requires 45 units of base gel per hour. The pharmacy has available 5000 units of base gel. Further, they must make at least 800 units of acne cream and 1000 units of anti-bacterial cream. How many hours should each factory be run to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Factory1Hours = intvar(0, 999999999)  # Number of hours factory 1 runs
Factory2Hours = intvar(0, 999999999)  # Number of hours factory 2 runs

# Constraints
m = Model()

# Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour:
m += 12 * Factory1Hours >= 800  # At least 800 units of acne cream
m += 15 * Factory1Hours >= 1000  # At least 1000 units of anti-bacterial cream
# Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour:
m += 20 * Factory2Hours >= 800  # At least 800 units of acne cream
m += 10 * Factory2Hours >= 1000  # At least 1000 units of anti-bacterial cream
# Factory 1 requires 30 units of base gel per hour, Factory 2 requires 45 units of base gel per hour:
m += 30 * Factory1Hours + 45 * Factory2Hours <= 5000  # Available 5000 units of base gel

# Objective
# Minimize total time needed (total hours of both factories):
m.minimize(Factory1Hours + Factory2Hours)

```
False
False
Wrong: 3, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Burgers = intvar(0, 999999999)  # Number of burgers eaten
PizzaSlices = intvar(0, 999999999)  # Number of pizza slices eaten

# Constraints
m = Model()

# Total fat intake should be at least 130 units:
m += 10 * Burgers + 8 * PizzaSlices >= 130
# Total calorie intake should be at least 3000:
m += 300 * Burgers + 250 * PizzaSlices >= 3000
# Total cholesterol intake should be minimized:
m.minimize(12 * Burgers + 10 * PizzaSlices)
# The man decides to eat at least twice as many slices of pizza as burgers:
m += PizzaSlices >= 2 * Burgers

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic makes batches of vitamin shots and pills. Each batch of vitamin shots requires 30 units of vitamin C and 40 units of vitamin D. Each batch of vitamin pills requires 50 units of vitamin C and 30 units of vitamin D. Since pills are more popular, the number of batches of vitamin pills must be larger than the number of batches of vitamin shots. Further, the clinic can make at most 10 batches of vitamin shots. The clinic has available 1200 units of vitamin C and 1500 units of vitamin D. If each batch of vitamin shots can supply 10 people and each batch of vitamin pills can supply 7 people, how many batches of each should be made to maximize the number of people that can be supplied?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
VitaminShots = intvar(0, 10)  # Number of batches of vitamin shots made
VitaminPills = intvar(0, 999999999)  # Number of batches of vitamin pills made

# Constraints
m = Model()

# Vitamin C and D constraints:
m += 30 * VitaminShots + 50 * VitaminPills <= 1200  # Vitamin C constraint
m += 40 * VitaminShots + 30 * VitaminPills <= 1500  # Vitamin D constraint

# Number of batches of vitamin pills must be larger than the number of batches of vitamin shots:
m += VitaminPills >= VitaminShots

# Clinic can make at most 10 batches of vitamin shots:
m += VitaminShots <= 10

# Objective
# Maximize the number of people that can be supplied (10 people per batch of shots, 7 people per batch of pills):
m.maximize(10 * VitaminShots + 7 * VitaminPills)

```
True
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor's office takes the  temperature of patients one by one either by using an electronic or regular thermometer. The electronic thermometer takes 3 minutes to make a reading while the regular thermometer takes 2 minutes to make a reading. Since the electronic thermometer is more accurate, at least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer. Since the electronic thermometer has a cooldown time, at least 50 patients should have their temperature checked by a regular thermometer. If the office is open for 15000 minutes, maximize the number of patients whose temperature can be taken?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ElectronicPatients = intvar(0, 999999999)  # Number of patients checked with electronic thermometer
RegularPatients = intvar(0, 999999999)  # Number of patients checked with regular thermometer

# Constraints
m = Model()

# Time constraints:
# Electronic thermometer takes 3 minutes, regular thermometer takes 2 minutes
m += 3 * ElectronicPatients + 2 * RegularPatients <= 15000

# At least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer:
m += ElectronicPatients >= 2 * RegularPatients

# At least 50 patients should have their temperature checked by a regular thermometer:
m += RegularPatients >= 50

# Objective
# Maximize the total number of patients whose temperature can be taken:
m.maximize(ElectronicPatients + RegularPatients)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient can be hooked up to two machines to have medicine delivered, machine 1 and machine 2. Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain. Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain. In addition however, machine 1 creates 0.3 units of waste per minute while machine 2 creates 0.5 units of waste per minute. If at most 8 units of medicine can be received by the heart and at least 4 units of medicine should be received by the brain, how many minutes should each machine be used to minimize the total amount of waste produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Machine1Minutes = intvar(0, 999999999)  # Number of minutes machine 1 is used
Machine2Minutes = intvar(0, 999999999)  # Number of minutes machine 2 is used

# Constraints
m = Model()

# Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain:
m += 0.5 * Machine1Minutes <= 8  # At most 8 units of medicine can be received by the heart
m += 0.8 * Machine1Minutes >= 4  # At least 4 units of medicine should be received by the brain

# Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain:
m += 0.3 * Machine2Minutes <= 8  # At most 8 units of medicine can be received by the heart
m += 1 * Machine2Minutes >= 4  # At least 4 units of medicine should be received by the brain

# Machine 1 creates 0.3 units of waste per minute and machine 2 creates 0.5 units of waste per minute:
TotalWaste = 0.3 * Machine1Minutes + 0.5 * Machine2Minutes

# Objective
# Minimize total amount of waste produced:
m.minimize(TotalWaste)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RamenPacks = intvar(0, 999999999)  # Number of packs of ramen eaten
FriesPacks = intvar(0, 999999999)  # Number of packs of fries eaten

# Constants
RamenCalories = 400
RamenProtein = 20
RamenSodium = 100
FriesCalories = 300
FriesProtein = 10
FriesSodium = 75

# Constraints
m = Model()

# At most 30% of meals can be ramen:
m += RamenPacks <= 0.3 * (RamenPacks + FriesPacks)
# Total calories should be at least 3000:
m += RamenPacks * RamenCalories + FriesPacks * FriesCalories >= 3000
# Total protein should be at least 80 grams:
m += RamenPacks * RamenProtein + FriesPacks * FriesProtein >= 80

# Objective
# Minimize sodium intake:
m.minimize(RamenPacks * RamenSodium + FriesPacks * FriesSodium)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A science store makes two boxes, a cheap and expensive box. The cheap box contains 3 units of metal and 5 units of acid which can be mixed to create 8 units of foam. The expensive box contains 5 units of metal and 8 units of acid which can be mixed to create 10 units of foam. The cheap box however gives off 2 units of heat while the expensive box gives off 3 units of heat. The science store has available 200 units of metal and 300 units of acid. If at most 50 units of heat can be given off, how many of each box should the store make to maximize the amount of foam produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CheapBoxes = intvar(0, 999999999)  # Number of cheap boxes produced
ExpensiveBoxes = intvar(0, 999999999)  # Number of expensive boxes produced

# Constraints
m = Model()

# Metal and acid constraints:
# Cheap box: 3 units of metal, 5 units of acid
# Expensive box: 5 units of metal, 8 units of acid
m += 3 * CheapBoxes + 5 * ExpensiveBoxes <= 200  # Metal constraint
m += 5 * CheapBoxes + 8 * ExpensiveBoxes <= 300  # Acid constraint

# Heat constraint:
# Cheap box gives off 2 units of heat, expensive box gives off 3 units of heat
m += 2 * CheapBoxes + 3 * ExpensiveBoxes <= 50

# Objective
# Maximize the amount of foam produced:
# Cheap box produces 8 units of foam, expensive box produces 10 units of foam
m.maximize(8 * CheapBoxes + 10 * ExpensiveBoxes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Painkillers = intvar(0, 999999999)  # Number of painkiller pills made
SleepingPills = intvar(0, 999999999)  # Number of sleeping pills made

# Constraints
m = Model()

# Total amount of morphine used should not exceed 3000 mg:
m += 10 * Painkillers + 6 * SleepingPills <= 3000
# At least 50 painkiller pills should be made:
m += Painkillers >= 50
# At least 70% of the pills should be sleeping pills:
m += SleepingPills >= 0.7 * (Painkillers + SleepingPills)

# Objective
# Minimize the total amount of digestive medicine needed (3 units for painkiller, 5 units for sleeping pill):
m.minimize(3 * Painkillers + 5 * SleepingPills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A boy needs to get enough magnesium and zinc in his diet by eating chewable gummies and taking pills. Each gummy contains 3 units of magnesium and 4 units of zinc. Each pill contains 2 units of magnesium and 5 units of zinc. The boy must take at least 10 pills. Since he prefers gummies more, he must eat at least 3 times the amount of gummies as pills. If the boy can consume at most 200 units of magnesium, how many of each should he eat to maximize his zinc intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Gummies = intvar(0, 999999999)  # Number of gummies eaten
Pills = intvar(0, 999999999)  # Number of pills taken

# Constraints
m = Model()

# Total magnesium consumed should be at most 200 units:
m += 3 * Gummies + 2 * Pills <= 200
# At least 10 pills are taken:
m += Pills >= 10
# The boy must eat at least 3 times the amount of gummies as pills:
m += Gummies >= 3 * Pills

# Objective
# Maximize zinc intake (4 units of zinc per gummy, 5 units of zinc per pill):
m.maximize(4 * Gummies + 5 * Pills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient takes anxiety medication and anti-depressants one after the other. Each unit of anxiety medication takes 3 minutes to be effective while each unit of anti-depressant takes 5 minutes to be effective. The patient must take at least 100 units of medication and at least 30 should be anxiety medication. Since the anxiety medication is strong, the patient can take at most twice the amount of anxiety medication as anti-depressants. How many units of each should the patient take to minimize the total time it take for the medication to be effective?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AnxietyMeds = intvar(0, 999999999)  # Units of anxiety medication taken
AntiDepressants = intvar(0, 999999999)  # Units of anti-depressants taken

# Constraints
m = Model()

# Total units of medication should be at least 100:
m += AnxietyMeds + AntiDepressants >= 100
# At least 30 units should be anxiety medication:
m += AnxietyMeds >= 30
# The patient can take at most twice the amount of anxiety medication as anti-depressants:
m += AnxietyMeds <= 2 * AntiDepressants

# Objective
# Minimize total time for medication to be effective (3 minutes for anxiety meds, 5 minutes for anti-depressants):
m.minimize(3 * AnxietyMeds + 5 * AntiDepressants)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can  make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Machine1Hours = intvar(0, 999999999)  # Number of hours machine 1 is used
Machine2Hours = intvar(0, 999999999)  # Number of hours machine 2 is used

# Constraints
m = Model()

# Distilled water constraint:
m += 20 * Machine1Hours + 15 * Machine2Hours <= 1200
# Eye cream production constraint:
m += 30 * Machine1Hours + 45 * Machine2Hours >= 1300
# Foot cream production constraint:
m += 60 * Machine1Hours + 30 * Machine2Hours >= 1500

# Objective
# Minimize total time needed:
m.minimize(Machine1Hours + Machine2Hours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AlmondsServings = intvar(0, 999999999)  # Number of servings of almonds eaten
CashewsServings = intvar(0, 999999999)  # Number of servings of cashews eaten

# Constraints
m = Model()

# Calorie constraint:
m += 200 * AlmondsServings + 300 * CashewsServings >= 10000
# Protein constraint:
m += 20 * AlmondsServings + 25 * CashewsServings >= 800
# Almonds servings should be at least twice as many as cashews servings:
m += AlmondsServings >= 2 * CashewsServings

# Objective
# Minimize fat intake (15 grams of fat per serving of almonds, 12 grams of fat per serving of cashews):
m.minimize(15 * AlmondsServings + 12 * CashewsServings)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LiquidSanitizers = intvar(0, 30)  # Number of liquid hand sanitizers made
FoamSanitizers = intvar(0, 999999999)  # Number of foam hand sanitizers made

# Constraints
m = Model()

# Water and alcohol constraints:
m += 40 * LiquidSanitizers + 60 * FoamSanitizers <= 2000  # Water constraint
m += 50 * LiquidSanitizers + 40 * FoamSanitizers <= 2100  # Alcohol constraint

# The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers:
m += FoamSanitizers >= LiquidSanitizers
# At most 30 liquid hand sanitizers can be made:
m += LiquidSanitizers <= 30

# Objective
# Maximize the number of hands that can be cleaned (30 hands per liquid sanitizer, 20 hands per foam sanitizer):
m.maximize(30 * LiquidSanitizers + 20 * FoamSanitizers)

```
False
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic is conducting a throat or nasal swabs on each patient. A throat swab takes 5 minutes while a nasal swab takes 3 minutes. The clinic must administer at least 30 nasal swabs. Since the nasal swab is more uncomfortable, at least 4 times as many throat swabs must be done as nasal swabs. If the clinic is only operational for 20000 minutes, how many of each swab should be done to maximize the number of patients seen?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ThroatSwabs = intvar(0, 999999999)  # Number of throat swabs administered
NasalSwabs = intvar(0, 999999999)  # Number of nasal swabs administered

# Constraints
m = Model()

# Time constraint: 5 minutes for a throat swab, 3 minutes for a nasal swab, total operational time is 20000 minutes
m += 5 * ThroatSwabs + 3 * NasalSwabs <= 20000
# At least 30 nasal swabs must be administered:
m += NasalSwabs >= 30
# At least 4 times as many throat swabs must be done as nasal swabs:
m += ThroatSwabs >= 4 * NasalSwabs

# Objective
# Maximize the number of patients seen (each patient requires one swab):
m.maximize(ThroatSwabs + NasalSwabs)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DosesPainKiller1 = intvar(0, 999999999)  # Number of doses of pain killer 1 taken
DosesPainKiller2 = intvar(0, 999999999)  # Number of doses of pain killer 2 taken

# Constraints
m = Model()

# Medicine delivered to the legs should be at least 4 units:
m += 0.5 * DosesPainKiller1 + 0.7 * DosesPainKiller2 >= 4
# Medicine delivered to the back should be maximized:
m += 0.8 * DosesPainKiller1 + 0.4 * DosesPainKiller2
# At most 8 units of sleep medicine should be delivered:
m += 0.3 * DosesPainKiller1 + 0.6 * DosesPainKiller2 <= 8

# Objective
# Maximize the amount of medicine delivered to the back:
m.maximize(0.8 * DosesPainKiller1 + 0.4 * DosesPainKiller2)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar.  The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Bananas = intvar(0, 999999999)  # Number of bananas consumed
Mangoes = intvar(0, 999999999)  # Number of mangoes consumed

# Constraints
m = Model()

# Calorie constraint:
m += 80 * Bananas + 100 * Mangoes >= 4000
# Potassium constraint:
m += 20 * Bananas + 15 * Mangoes >= 150
# Sugar constraint:
m += 10 * Bananas + 8 * Mangoes <= 0  # To minimize sugar intake

# Mangoes should be at most 33% of the total fruits consumed:
m += Mangoes <= 0.33 * (Bananas + Mangoes)

# Objective
# Minimize sugar intake:
m.minimize(10 * Bananas + 8 * Mangoes)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

In a science club, there are two tables that can be set up to make slime. At table 1, 3 units of powder and 5 units of glue are used to make 4 units of slime. At table 2, 8 units of powder and 6 units of glue are used to make 5 units of slime. However, table 1 produces 2 units of mess while table 2 produces 4 units of mess. The science club has available 100 units of powder and 90 units of glue.  If at most 30 units of mess can be made, how many of each table should be set up to maximize the amount of slime produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Table1 = intvar(0, 999999999)  # Number of times table 1 is set up
Table2 = intvar(0, 999999999)  # Number of times table 2 is set up

# Constraints
m = Model()

# Powder and glue constraints:
m += 3 * Table1 + 8 * Table2 <= 100  # Powder constraint
m += 5 * Table1 + 6 * Table2 <= 90  # Glue constraint

# Slime production constraints:
m += 4 * Table1 + 5 * Table2 <= 30  # Mess constraint

# Objective
# Maximize the amount of slime produced (4 units of slime at table 1, 5 units of slime at table 2):
m.maximize(4 * Table1 + 5 * Table2)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmaceutical company has 800 units of painkiller medicine and makes daytime and nighttime painkiller. A daytime pill has 6 units of painkiller medicine and 2 units of sleep medicine. A nighttime pill has 5 units of painkiller medicine and 5 units of sleep medicine. Since some people don’t want the sleeping effect, at least 40% of the pills must be daytime pills. However at least 200 nighttime pills must be made. How many of each pill should be made to minimize the total amount of sleep medicine required?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DaytimePills = intvar(0, 800)  # Number of daytime pills produced
NighttimePills = intvar(0, 800)  # Number of nighttime pills produced

# Constraints
m = Model()

# Total units of painkiller medicine available is 800:
m += 6 * DaytimePills + 5 * NighttimePills <= 800
# Total units of sleep medicine available is 800:
m += 2 * DaytimePills + 5 * NighttimePills <= 800
# At least 40% of the pills must be daytime pills:
m += DaytimePills >= 0.4 * (DaytimePills + NighttimePills)
# At least 200 nighttime pills must be made:
m += NighttimePills >= 200

# Objective
# Minimize the total amount of sleep medicine required:
m.minimize(2 * DaytimePills + 5 * NighttimePills)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A competitive eater challenges himself to eat slices of cheesecake and caramel cake. Each slice of cheesecake contains 200 calories and 40 grams of sugar. Each slice of caramel cake contains 250 calories and 50 grams of sugar. He prefers cheesecake and decides to eat at least 3 times as many slices of cheesecake as caramel cake. However, he must also eat at least 3 slices of caramel cake. If he can consume at most 10000 calories in one day, how many slices of each cake should he eat to maximize the total amount of sugar he consumes?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CheesecakeSlices = intvar(0, 999999999)  # Number of slices of cheesecake eaten
CaramelCakeSlices = intvar(0, 999999999)  # Number of slices of caramel cake eaten

# Constraints
m = Model()

# Calories constraint (at most 10000 calories):
m += 200 * CheesecakeSlices + 250 * CaramelCakeSlices <= 10000
# He must eat at least 3 slices of caramel cake:
m += CaramelCakeSlices >= 3
# He must eat at least 3 times as many slices of cheesecake as caramel cake:
m += CheesecakeSlices >= 3 * CaramelCakeSlices

# Objective
# Maximize total amount of sugar consumed (40 grams per slice of cheesecake, 50 grams per slice of caramel cake):
m.maximize(40 * CheesecakeSlices + 50 * CaramelCakeSlices)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both sulfate and ginger need to be added to a shampoo. One unit of sulfate takes 0.5 minutes to be effective while one unit of ginger takes 0.75 minutes to be effective. The shampoo must contain at least 100 units of sulfates and a total of 400 units of both ingredient. Since too much sulfate can damage the hair, there can be at most twice the amount of sulfate as ginger in the shampoo. How many units of each should be added to the shampoo to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Sulfate = intvar(0, 999999999)  # Units of sulfate added to the shampoo
Ginger = intvar(0, 999999999)  # Units of ginger added to the shampoo

# Constraints
m = Model()

# At least 100 units of sulfate and a total of 400 units of both ingredients:
m += Sulfate >= 100
m += Sulfate + Ginger == 400
# At most twice the amount of sulfate as ginger:
m += Sulfate <= 2 * Ginger

# Objective
# Minimize the total amount of time it takes for the mixture to be effective (0.5 minutes for sulfate, 0.75 minutes for ginger):
m.minimize(0.5 * Sulfate + 0.75 * Ginger)

```
False
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmaceutical company has two labs, lab 1 and lab 2, where they make heart and lung medication in pill form. At lab 1, they can produce 20 heart medication pills and 30 lung medication pills per hour. At lab 2, they can produce 30 heart medication pills and 40 lung medication pills per hour. Each session at lab 1 requires 3 hours of worker labor while each session at lab 2 requires 5 hours of worker labor. The company has 1500 worker hours available and must make at least 20000 heart medication pills and at least 30000 lung medication pills. How many hours at each lab should be run to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Lab1Hours = intvar(0, 1500)  # Number of hours lab 1 is run
Lab2Hours = intvar(0, 1500)  # Number of hours lab 2 is run

# Constraints
m = Model()

# Worker hours available is 1500:
m += 3 * Lab1Hours + 5 * Lab2Hours <= 1500
# At least 20000 heart medication pills must be made:
m += 20 * Lab1Hours + 30 * Lab2Hours >= 20000
# At least 30000 lung medication pills must be made:
m += 30 * Lab1Hours + 40 * Lab2Hours >= 30000

# Objective
# Minimize total time needed:
m.minimize(Lab1Hours + Lab2Hours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor suggests that his patient eat oranges and grapefruit to meet his vitamin C and vitamin A requirements. One orange contains 5 units of vitamin C, 3 units of vitamin A, and 5 grams of sugar. One grapefruit contains 7 units of vitamin C, 5 units of vitamin A, and 6 grams of sugar. The patient must get at least 80 units of vitamin C and 70 units of vitamin A. Since the patent prefers oranges, he must eat at least 2 times as many oranges as grapefruit. How many of each should he eat to minimize his sugar intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Oranges = intvar(0, 999999999)  # Number of oranges eaten
Grapefruits = intvar(0, 999999999)  # Number of grapefruits eaten

# Constraints
m = Model()

# Vitamin C requirement:
m += 5 * Oranges + 7 * Grapefruits >= 80
# Vitamin A requirement:
m += 3 * Oranges + 5 * Grapefruits >= 70
# The patient must eat at least 2 times as many oranges as grapefruits:
m += Oranges >= 2 * Grapefruits

# Objective
# Minimize sugar intake (5 grams of sugar in an orange, 6 grams of sugar in a grapefruit):
m.minimize(5 * Oranges + 6 * Grapefruits)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A university research lab can make two types of diabetes medicine, medicine A and medicine B. Per dose, medicine A takes 30 units of imported material and 50 units of mRNA to make. Per dose, medicine B takes 40 units of imported material and 30 units of mRNA to take. The lab has available at most 300 units of imported material and 400 units of mRNA. The lab can make at most 5 doses of medicine A and the number of doses of medicine B must be larger than the number of dosed of medicine A. If one dose of medicine A can treat 12 people and one dose of medicine B can treat 8 people, how many doses of each should be made to maximize the number of people that can be treated?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DosesA = intvar(0, 5)  # Number of doses of medicine A made
DosesB = intvar(0, 5)  # Number of doses of medicine B made

# Constraints
m = Model()

# Imported material constraint:
m += 30 * DosesA + 40 * DosesB <= 300
# mRNA constraint:
m += 50 * DosesA + 30 * DosesB <= 400
# Number of doses of medicine B must be larger than the number of doses of medicine A:
m += DosesB >= DosesA
# Objective
# Maximize the number of people that can be treated (12 people per dose of medicine A, 8 people per dose of medicine B):
m.maximize(12 * DosesA + 8 * DosesB)

```
False
False
Wrong: 2, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A popup clinic is doing virus testing with either spit tests or swabs. A spit test takes 10 minutes to administer while a  swab takes 15 minutes to administer. Since the spit test is more accurate, at least twice as many spit tests should be given as  swabs. However, at least 20  swabs must be administers. If the popup clinic operates for 8000 minutes, maximize the number of tests that can be administered.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SpitTests = intvar(0, 999999999)  # Number of spit tests administered
SwabTests = intvar(0, 999999999)  # Number of swab tests administered

# Constraints
m = Model()

# Total time should not exceed 8000 minutes:
m += 10 * SpitTests + 15 * SwabTests <= 8000
# At least twice as many spit tests as swab tests:
m += SpitTests >= 2 * SwabTests
# At least 20 swab tests must be administered:
m += SwabTests >= 20

# Objective
# Maximize the number of tests administered:
m.maximize(SpitTests + SwabTests)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin.  In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor.  How many minutes of each beam should be used to minimize the total radiation received by the pancreas?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Beam1Minutes = intvar(0, 999999999)  # Minutes of Beam 1 used
Beam2Minutes = intvar(0, 999999999)  # Minutes of Beam 2 used

# Constraints
m = Model()

# Total units of medicine received by the skin should be at most 4:
m += 0.2 * Beam1Minutes + 0.1 * Beam2Minutes <= 4
# Total units of medicine delivered to the tumor should be at least 3:
m += 0.6 * Beam1Minutes + 0.4 * Beam2Minutes >= 3

# Objective
# Minimize total radiation received by the pancreas (0.3 units per minute from Beam 1, 0.2 units per minute from Beam 2):
m.minimize(0.3 * Beam1Minutes + 0.2 * Beam2Minutes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A body builder buys pre prepared meals, a turkey dinner and a tuna salad sandwich. The turkey dinner contains 20 grams of protein, 30 grams of carbs, and 12 grams of fat. The tuna salad sandwich contains 18 grams of protein, 25 grams of carbs, and 8 grams of fat. The bodybuilder wants to get at least 150 grams of protein and 200 grams of carbs. In addition because the turkey dinner is expensive, at most 40% of the meals should be turkey dinner. How many of each meal should he eat if he wants to minimize his fat intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TurkeyDinner = intvar(0, 999999999)  # Number of turkey dinners eaten
TunaSalad = intvar(0, 999999999)  # Number of tuna salad sandwiches eaten

# Constraints
m = Model()

# Protein constraint:
m += 20 * TurkeyDinner + 18 * TunaSalad >= 150
# Carb constraint:
m += 30 * TurkeyDinner + 25 * TunaSalad >= 200
# Fat constraint:
m += 12 * TurkeyDinner + 8 * TunaSalad <= 999999999  # No upper bound for fat intake

# At most 40% of the meals should be turkey dinner:
m += TurkeyDinner <= 0.4 * (TurkeyDinner + TunaSalad)

# Objective
# Minimize fat intake:
m.minimize(12 * TurkeyDinner + 8 * TunaSalad)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas.  The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Exp1 = intvar(0, 999999999)  # Number of times experiment 1 is done
Exp2 = intvar(0, 999999999)  # Number of times experiment 2 is done

# Constraints
m = Model()

# Red liquid constraint:
m += 3 * Exp1 + 5 * Exp2 <= 80
# Blue liquid constraint:
m += 4 * Exp1 + 3 * Exp2 <= 70
# Smelly gas constraint:
m += Exp1 + 2 * Exp2 <= 10

# Objective
# Maximize total amount of green gas produced (5 units from experiment 1, 6 units from experiment 2):
m.maximize(5 * Exp1 + 6 * Exp2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargePills = intvar(0, 999999999)  # Number of large pills made
SmallPills = intvar(0, 999999999)  # Number of small pills made

# Constraints
m = Model()

# Total units of medicinal ingredients available is 1000:
m += 3 * LargePills + 2 * SmallPills <= 1000
# At least 100 large pills must be made:
m += LargePills >= 100
# At least 60% of the total number of pills must be small:
m += SmallPills >= 0.6 * (LargePills + SmallPills)

# Objective
# Minimize total number of filler material needed (2 units for large pill, 1 unit for small pill):
m.minimize(2 * LargePills + 1 * SmallPills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both chorine and water softener need to be added to a pool. One unit of chlorine takes 1 minute to be effective while one unit of water softener takes 2 minutes to be effective. Because too much chlorine can burn your eyes, there has to at most half as much chlorine as water softener in the pool. If there has to be at least 200 units of chlorine in the water and a total of 500 units of chemicals in the water, how many units of each should be added to minimize the total time it takes for the pool to be ready? (Note: chlorine must be added before water softener or vice versa).
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Chlorine = intvar(0, 999999999)  # Units of chlorine added to the pool
WaterSoftener = intvar(0, 999999999)  # Units of water softener added to the pool

# Constraints
m = Model()

# Total units of chemicals in the water should be 500:
m += Chlorine + WaterSoftener == 500
# At most half as much chlorine as water softener in the pool:
m += Chlorine <= 0.5 * WaterSoftener
# There has to be at least 200 units of chlorine in the water:
m += Chlorine >= 200

# Objective
# Minimize the total time it takes for the pool to be ready (1 minute for chlorine, 2 minutes for water softener):
m.minimize(Chlorine + 2 * WaterSoftener)

```
False
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A drug company is making pain killers and sleeping pills using two processes, process 1 and process 2. Process 1 produces 35 units of pain killers and 12 units of sleeping pills per hour. Process 2 produces 50 units of pain killers and 30 units of sleeping pills per hour. Process 1 requires 50 units of preliminary material while process 2 requires 60 units of preliminary material. The drug company has available 2000 units of preliminary material and must make at least 1200 units of pain killers and 1200 units of sleeping pills. How many of each process should be run to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Process1Hours = intvar(0, 999999999)  # Number of hours process 1 is run
Process2Hours = intvar(0, 999999999)  # Number of hours process 2 is run

# Constraints
m = Model()

# Preliminary material constraint:
m += 50 * Process1Hours + 60 * Process2Hours <= 2000
# Pain killers production constraint:
m += 35 * Process1Hours + 50 * Process2Hours >= 1200
# Sleeping pills production constraint:
m += 12 * Process1Hours + 30 * Process2Hours >= 1200

# Objective
# Minimize total time needed:
m.minimize(Process1Hours + Process2Hours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Blueberries = intvar(0, 999999999)  # Number of packs of blueberries consumed
Strawberries = intvar(0, 999999999)  # Number of packs of strawberries consumed

# Constraints
m = Model()

# At least 90 units of anti-oxidants and 100 units of minerals are required:
m += 3 * Blueberries + Strawberries >= 90  # Anti-oxidants constraint
m += 5 * Blueberries + 7 * Strawberries >= 100  # Minerals constraint
# At least 3 times as many packs of strawberries as blueberries are recommended:
m += Strawberries >= 3 * Blueberries

# Objective
# Minimize sugar intake (5 grams of sugar per pack of blueberries, 7 grams of sugar per pack of strawberries):
m.minimize(5 * Blueberries + 7 * Strawberries)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BeamBridges = intvar(0, 999999999)  # Number of beam bridges built
TrussBridges = intvar(0, 999999999)  # Number of truss bridges built

# Constraints
m = Model()

# Each team has at most 600 Popsicle sticks and 100 units of glue:
m += 30 * BeamBridges + 50 * TrussBridges <= 600  # Popsicle sticks constraint
m += 5 * BeamBridges + 8 * TrussBridges <= 100  # Glue constraint
# Each team can build at most 5 truss bridges:
m += TrussBridges <= 5
# Number of beam bridges must be larger than the number of truss bridges:
m += BeamBridges >= TrussBridges

# Objective
# Maximize total mass that can be supported (40 grams for beam bridge, 60 grams for truss bridge):
m.maximize(40 * BeamBridges + 60 * TrussBridges)

```
True
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PillVaccines = intvar(0, 999999999)  # Number of pill vaccines administered
ShotVaccines = intvar(0, 999999999)  # Number of shot vaccines administered

# Constraints
m = Model()

# Pill vaccine takes 10 minutes, shot vaccine takes 20 minutes, and the clinic operates for 10000 minutes:
m += 10 * PillVaccines + 20 * ShotVaccines <= 10000
# The clinic must deliver at least 3 times as many shots as pill vaccines:
m += ShotVaccines >= 3 * PillVaccines
# The clinic must administer at least 30 pill vaccines:
m += PillVaccines >= 30

# Objective
# Maximize the number of patients vaccinated:
m.maximize(PillVaccines + ShotVaccines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is $30 while the cost per truck trip is $50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of $1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
VanTrips = intvar(0, 999999999)  # Number of trips made by vans
TruckTrips = intvar(0, 999999999)  # Number of trips made by trucks

# Constraints
m = Model()

# The company needs to transport at least 1500 boxes of chocolate:
m += 50 * VanTrips + 80 * TruckTrips >= 1500
# The cost per van trip is $30 and the cost per truck trip is $50:
m += 30 * VanTrips + 50 * TruckTrips <= 1000
# The number of trips by van must be larger than the number of trips by trucks:
m += VanTrips >= TruckTrips

# Objective
# Minimize the total number of trips:
m.minimize(VanTrips + TruckTrips)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBottles = intvar(0, 999999999)  # Number of small bottles used
LargeBottles = intvar(0, 999999999)  # Number of large bottles used

# Constraints
m = Model()

# Total number of bottles should not exceed 200:
m += SmallBottles + LargeBottles <= 200
# At most 300 small bottles available:
m += SmallBottles <= 300
# At most 100 large bottles available:
m += LargeBottles <= 100
# At least twice as many small bottles as large bottles:
m += SmallBottles >= 2 * LargeBottles
# At least 50 large bottles used:
m += LargeBottles >= 50

# Objective
# Maximize total amount of honey transported (5 units per small bottle, 20 units per large bottle):
m.maximize(5 * SmallBottles + 20 * LargeBottles)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ShipTrips = intvar(0, 999999999)  # Number of trips made by ship
PlaneTrips = intvar(0, 999999999)  # Number of trips made by plane

# Constraints
m = Model()

# Total number of containers transported should be at least 500:
m += 40 * ShipTrips + 20 * PlaneTrips >= 500
# At most 10 plane trips:
m += PlaneTrips <= 10
# At least 50% of the trips made must be by ship:
m += ShipTrips >= 0.5 * (ShipTrips + PlaneTrips)

# Objective
# Minimize total amount of fuel consumed (500 liters per ship trip, 300 liters per plane trip):
m.minimize(500 * ShipTrips + 300 * PlaneTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BoatTrips = intvar(0, 12)  # Number of boat trips
CanoeTrips = intvar(0, 12)  # Number of canoe trips

# Constraints
m = Model()

# Total number of ducks taken to shore should be at least 300:
m += 10 * BoatTrips + 8 * CanoeTrips >= 300
# At most 12 boat trips:
m += BoatTrips <= 12
# At least 60% of the trips should be by canoe:
m += CanoeTrips >= 0.6 * (BoatTrips + CanoeTrips)

# Objective
# Minimize total time needed to transport the ducks (20 minutes per boat trip, 40 minutes per canoe trip):
m.minimize(20 * BoatTrips + 40 * CanoeTrips)

```
False
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
OldVans = intvar(0, 999999999)  # Number of old vans used
NewVans = intvar(0, 30)  # Number of new vans used

# Constraints
m = Model()

# Total number of bottles sent should be at least 5000:
m += 100 * OldVans + 80 * NewVans >= 5000
# Total pollution produced by old vans and new vans:
m += 50 * OldVans + 30 * NewVans

# Objective
# Minimize total pollution produced:
m.minimize(50 * OldVans + 30 * NewVans)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallTeams = intvar(0, 999999999)  # Number of small teams used
LargeTeams = intvar(0, 999999999)  # Number of large teams used

# Constraints
m = Model()

# Total number of employees available is 150:
m += 3 * SmallTeams + 5 * LargeTeams <= 150
# Number of small teams must be at least 3 times as much as the number of large teams:
m += SmallTeams >= 3 * LargeTeams
# At least 6 large teams and 10 small teams:
m += LargeTeams >= 6
m += SmallTeams >= 10

# Objective
# Maximize the amount of lawn that can be mowed (50 sq ft per small team, 80 sq ft per large team):
m.maximize(50 * 3 * SmallTeams + 80 * 5 * LargeTeams)

```
False
False
Wrong: 0, Total: 4, Is objective correct: False
---------------------------------------------------------------------------------------------

An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Otters = intvar(0, 999999999)  # Number of otters used
Dolphins = intvar(0, 999999999)  # Number of dolphins used

# Constraints
m = Model()

# An otter will do 3 tricks at a time and requires 3 treats:
m += 3 * Otters <= 3 * Otters
# A dolphin will do 1 trick at a time and requires 5 treats:
m += 1 * Dolphins <= 5 * Dolphins
# At least 10 dolphins must be used:
m += Dolphins >= 10
# At most 30% of the performers can be otters:
m += Otters <= 0.3 * (Otters + Dolphins)
# Total treats available is 200:
m += 3 * Otters + 5 * Dolphins <= 200

# Objective
# Maximize the total number of tricks that can be performed:
m.maximize(3 * Otters + Dolphins)

```
True
True
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used.  Find the minimum number of vans that can be used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Vans = intvar(0, 999999999)  # Number of vans used to transport shoes
Trucks = intvar(0, 999999999)  # Number of trucks used to transport shoes

# Constraints
m = Model()

# The company must supply a minimum of 2000 pairs of shoes:
m += 50 * Vans + 100 * Trucks >= 2000
# The number of trucks used cannot exceed the number of vans used:
m += Trucks <= Vans

# Objective
# Minimize the number of vans used:
m.minimize(Vans)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Containers = intvar(0, 999999999)  # Number of containers used
Trucks = intvar(0, 999999999)  # Number of trucks used

# Constraints
m = Model()

# Total units of oil sent to the port should be at least 2000:
m += 30 * Containers + 40 * Trucks >= 2000
# At least 15 containers need to be used:
m += Containers >= 15
# Number of trucks used has to be at most half the number of containers used:
m += Trucks <= 0.5 * Containers

# Objective
# Minimize the total number of containers and trucks needed:
m.minimize(Containers + Trucks)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students.  The school needs to provide transportation for at least 500 students.  In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBuses = intvar(0, 999999999)  # Number of small buses hired
LargeBuses = intvar(0, 999999999)  # Number of large buses hired

# Constraints
m = Model()

# Total number of students to transport should be at least 500:
m += 20 * SmallBuses + 50 * LargeBuses >= 500
# Maximum of 20% of the buses can be large buses:
m += LargeBuses <= 0.2 * (SmallBuses + LargeBuses)

# Objective
# Minimize the total number of buses:
m.minimize(SmallBuses + LargeBuses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of $300 per trip. Each van can take 500 patties at a cost of $100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of $12500. How should they plan their shipment to minimize the total number of trips?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Trucks = intvar(0, 999999999)  # Number of trips made by trucks
Vans = intvar(0, 999999999)  # Number of trips made by vans

# Constraints
m = Model()

# Each truck can take 1000 patties and costs $300 per trip:
# Each van can take 500 patties and costs $100 per trip:
# The number of trucks must not exceed the number of vans:
m += Trucks <= Vans
# The meat shop has to ship at least 50000 patties:
m += 1000 * Trucks + 500 * Vans >= 50000
# The meat shop has a budget of $12500:
m += 300 * Trucks + 100 * Vans <= 12500

# Objective
# Minimize the total number of trips:
m.minimize(Trucks + Vans)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBouquets = intvar(0, 80)  # Number of small bouquets transported
LargeBouquets = intvar(0, 50)  # Number of large bouquets transported

# Constraints
m = Model()

# Total number of bouquets should not exceed 70:
m += SmallBouquets + LargeBouquets <= 70
# At most 80 small bouquets can be transported:
m += SmallBouquets <= 80
# At most 50 large bouquets can be transported:
m += LargeBouquets <= 50
# At least 20 large bouquets must be transported:
m += LargeBouquets >= 20
# At least twice as many small bouquets as large bouquets must be transported:
m += SmallBouquets >= 2 * LargeBouquets

# Objective
# Maximize the total number of flowers transported (5 flowers per small bouquet, 10 flowers per large bouquet):
m.maximize(5 * SmallBouquets + 10 * LargeBouquets)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
NewCompanyTrips = intvar(0, 15)  # Number of trips made by the new company
OldCompanyTrips = intvar(0, 999999999)  # Number of trips made by the old company

# Constraints
m = Model()

# Total number of gifts to deliver should be at least 1000:
m += 50 * NewCompanyTrips + 70 * OldCompanyTrips >= 1000
# At least 40% of all trips must be made by the old company:
m += OldCompanyTrips >= 0.4 * (NewCompanyTrips + OldCompanyTrips)

# Objective
# Minimize total amount of diesel used (30 liters per trip for the new company, 40 liters per trip for the old company):
m.minimize(30 * NewCompanyTrips + 40 * OldCompanyTrips)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BusTrips = intvar(0, 10)  # Number of bus trips
CarTrips = intvar(0, 10)  # Number of car trips

# Constraints
m = Model()

# Total number of monkeys to transport is 300:
m += 20 * BusTrips + 6 * CarTrips == 300
# Total time taken by bus and car should be minimized:
m.minimize(30 * BusTrips + 15 * CarTrips)
# There can be at most 10 bus trips:
m += BusTrips <= 10
# At least 60% of the trips should be by car:
m += CarTrips >= 0.6 * (BusTrips + CarTrips)

```
False
True
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HelicopterTrips = intvar(0, 999999999)  # Number of helicopter trips
TruckTrips = intvar(0, 8)  # Number of truck trips (at most 8 trips)

# Constraints
m = Model()

# Total number of cows to transport is 80:
m += 3 * HelicopterTrips + 7 * TruckTrips == 80
# Helicopter creates 5 units of pollution per trip, truck creates 10 units of pollution per trip:
m += 5 * HelicopterTrips + 10 * TruckTrips

# Objective
# Minimize total pollution produced:
m.minimize(5 * HelicopterTrips + 10 * TruckTrips)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallContainers = intvar(0, 999999999)  # Number of small containers used
LargeContainers = intvar(0, 999999999)  # Number of large containers used

# Constraints
m = Model()

# Each small container requires 1 person to unload, each large container requires 3 people:
m += SmallContainers + 3 * LargeContainers <= 100
# Number of small containers used must be thrice the number of large containers used:
m += SmallContainers == 3 * LargeContainers
# At least 5 small containers and 3 large containers used:
m += SmallContainers >= 5
m += LargeContainers >= 3

# Objective
# Maximize the amount of sand delivered (20 units per small container, 50 units per large container):
m.maximize(20 * SmallContainers + 50 * LargeContainers)

```
False
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Bikes = intvar(0, 999999999)  # Number of electric bikes used
Scooters = intvar(0, 999999999)  # Number of scooters used

# Constraints
m = Model()

# A bike can hold 8 meals and requires 3 units of charge:
# A scooter can hold 5 meals and requires 2 units of charge:
# Total units of charge available is 200:
m += 3 * Bikes + 2 * Scooters <= 200
# At most 30% of the electric vehicles can be bikes:
m += Bikes <= 0.3 * (Bikes + Scooters)
# At least 20 scooters must be used:
m += Scooters >= 20

# Objective
# Maximize the number of meals that can be delivered:
m.maximize(8 * Bikes + 5 * Scooters)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargePlanes = intvar(0, 999999999)  # Number of large planes used
SmallPlanes = intvar(0, 999999999)  # Number of small planes used

# Constraints
m = Model()

# Total number of cars delivered should be at least 300:
m += 30 * LargePlanes + 10 * SmallPlanes >= 300
# Number of large planes must be less than the number of small planes:
m += LargePlanes < SmallPlanes

# Objective
# Minimize the total number of planes used:
m.minimize(LargePlanes + SmallPlanes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallWagons = intvar(0, 999999999)  # Number of small wagons used
LargeWagons = intvar(0, 999999999)  # Number of large wagons used

# Constraints
m = Model()

# Total units of ore taken to the surface is 2000:
m += 20 * SmallWagons + 50 * LargeWagons == 2000
# The number of small wagons must be at least twice as much as the number of large wagons:
m += SmallWagons >= 2 * LargeWagons
# At least 10 large wagons must be used:
m += LargeWagons >= 10

# Objective
# Minimize the total number of wagons needed:
m.minimize(SmallWagons + LargeWagons)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Scooters = intvar(0, 999999999)  # Number of scooters used
Rickshaws = intvar(0, 999999999)  # Number of rickshaws used

# Constraints
m = Model()

# Total number of visitors to transport should be at least 300:
m += 2 * Scooters + 3 * Rickshaws >= 300
# At most 40% of the vehicles used can be rickshaws:
m += Rickshaws <= 0.4 * (Scooters + Rickshaws)

# Objective
# Minimize the total number of scooters used:
m.minimize(Scooters)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Camels = intvar(0, 999999999)  # Number of camels used for delivery
Horses = intvar(0, 999999999)  # Number of horses used for delivery

# Constraints
m = Model()

# A camel can carry 50 packages, a horse can carry 60 packages:
m += 50 * Camels + 60 * Horses >= 1000
# A camel requires 20 units of food, a horse requires 30 units of food:
m += 20 * Camels + 30 * Horses <= 450
# The number of horses cannot exceed the number of camels:
m += Horses <= Camels

# Objective
# Minimize the total number of animals used:
m.minimize(Camels + Horses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallSuitcases = intvar(0, 70)  # Number of small suitcases used
LargeSuitcases = intvar(0, 50)  # Number of large suitcases used

# Constraints
m = Model()

# Total number of suitcases should be at most 70:
m += SmallSuitcases + LargeSuitcases <= 70
# At least 15 large suitcases must be used:
m += LargeSuitcases >= 15
# At least twice as many small suitcases as large suitcases must be used:
m += SmallSuitcases >= 2 * LargeSuitcases

# Objective
# Maximize the total number of snacks delivered (50 snacks per small suitcase, 80 snacks per large suitcase):
m.maximize(50 * SmallSuitcases + 80 * LargeSuitcases)

```
True
True
Wrong: 2, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularTrips = intvar(0, 20)  # Number of trips made by regular boats
SpeedTrips = intvar(0, 20)  # Number of trips made by speed boats

# Constraints
m = Model()

# Total number of trips should be at most 20:
m += RegularTrips + SpeedTrips <= 20
# At least 50% of the trips must be made by speed boats:
m += SpeedTrips >= 0.5 * (RegularTrips + SpeedTrips)
# Total number of pieces of mail to deliver is 1000:
m += 20 * RegularTrips + 30 * SpeedTrips >= 1000

# Objective
# Minimize total amount of gas consumed (10 liters per regular boat trip, 20 liters per speed boat trip):
m.minimize(10 * RegularTrips + 20 * SpeedTrips)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BusTrips = intvar(0, 10)  # Number of trips made by bus
CarTrips = intvar(0, 10)  # Number of trips made by car

# Constraints
m = Model()

# Total number of chicken to transport is 1200:
m += 100 * BusTrips + 40 * CarTrips == 1200
# Total number of trips should not exceed 10:
m += BusTrips + CarTrips <= 10
# At least 60% of the trips must be by car:
m += CarTrips >= 0.6 * (BusTrips + CarTrips)

# Objective
# Minimize total time (2 hours per bus trip, 1.5 hours per car trip):
m.minimize(2 * BusTrips + 1.5 * CarTrips)

```
False
True
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Vans = intvar(0, 999999999)  # Number of vans used
Minibuses = intvar(0, 10)  # Number of minibuses used

# Constraints
m = Model()

# At least 150 kids need to go to school:
m += 6 * Vans + 10 * Minibuses >= 150
# The number of vans used must exceed the number of minibuses:
m += Vans > Minibuses
# At most 10 minibuses can be used:
m += Minibuses <= 10

# Objective
# Minimize total pollution (7 units per van, 10 units per minibus):
m.minimize(7 * Vans + 10 * Minibuses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBins = intvar(0, 999999999)  # Number of small bins used
LargeBins = intvar(0, 999999999)  # Number of large bins used

# Constraints
m = Model()

# Total number of workers available is 100:
m += 2 * SmallBins + 5 * LargeBins <= 100
# Number of small bins must be three times the number of large bins:
m += SmallBins == 3 * LargeBins
# At least 10 small bins and 4 large bins:
m += SmallBins >= 10
m += LargeBins >= 4

# Objective
# Maximize the total amount of recycling material collected (25 units per small bin, 60 units per large bin):
m.maximize(25 * SmallBins + 60 * LargeBins)

```
False
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SeasonalVolunteers = intvar(0, 999999999)  # Number of seasonal volunteers
FullTimeVolunteers = intvar(0, 999999999)  # Number of full-time volunteers

# Constraints
m = Model()

# Total points given out should not exceed 200:
m += 2 * SeasonalVolunteers + 5 * FullTimeVolunteers <= 200
# Maximum of 30% of volunteers can be seasonal:
m += SeasonalVolunteers <= 0.3 * (SeasonalVolunteers + FullTimeVolunteers)
# At least 10 volunteers must be full-time:
m += FullTimeVolunteers >= 10

# Objective
# Maximize the total number of gifts that can be delivered (5 gifts per seasonal volunteer, 8 gifts per full-time volunteer):
m.maximize(5 * SeasonalVolunteers + 8 * FullTimeVolunteers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallJars = intvar(0, 999999999)  # Number of small jars used
LargeJars = intvar(0, 999999999)  # Number of large jars used

# Constraints
m = Model()

# Total amount of jam should be at least 100000 ml:
m += 50 * SmallJars + 200 * LargeJars >= 100000
# Number of large jars cannot exceed the number of small jars:
m += LargeJars <= SmallJars

# Objective
# Minimize the total number of jars used:
m.minimize(SmallJars + LargeJars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A corn farmer sends his corn to the city by either tractor or car.  A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Tractors = intvar(0, 999999999)  # Number of tractors used
Cars = intvar(0, 999999999)  # Number of cars used

# Constraints
m = Model()

# Total weight of corn sent to the city should be at least 500 kg:
m += 40 * Tractors + 20 * Cars >= 500
# Number of cars used has to be at least twice the number of tractors used:
m += Cars >= 2 * Tractors

# Objective
# Minimize the total number of tractors and cars needed:
m.minimize(Tractors + Cars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Bikes = intvar(0, 999999999)  # Number of bikes used
Cars = intvar(0, 999999999)  # Number of cars used

# Constraints
m = Model()

# Each bike can take 3 people and each car can take 5 people:
m += 3 * Bikes + 5 * Cars >= 500
# At most 40% of the vehicles can be cars:
m += Cars <= 0.4 * (Bikes + Cars)

# Objective
# Minimize the total number of bikes needed:
m.minimize(Bikes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs $1000. Each ultrawide truck can transport 6 tires per trip and costs $700. The company needs to transport at least 200 tires and has available $22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PlaneTrips = intvar(0, 999999999)  # Number of trips made by cargo planes
TruckTrips = intvar(0, 999999999)  # Number of trips made by ultrawide trucks

# Constraints
m = Model()

# Each cargo plane can transport 10 tires per trip and each ultrawide truck can transport 6 tires per trip:
m += 10 * PlaneTrips + 6 * TruckTrips >= 200
# Each cargo plane costs $1000 and each ultrawide truck costs $700:
m += 1000 * PlaneTrips + 700 * TruckTrips <= 22000
# The number of plane trips cannot exceed the number of ultrawide truck trips:
m += PlaneTrips <= TruckTrips

# Objective
# Minimize the total number of trips:
m.minimize(PlaneTrips + TruckTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallKegs = intvar(0, 30)  # Number of small kegs used
LargeKegs = intvar(0, 10)  # Number of large kegs used

# Constraints
m = Model()

# Total number of kegs should be at most 25:
m += SmallKegs + LargeKegs <= 25
# At least 5 kegs must be large:
m += LargeKegs >= 5
# Small kegs used must be at least twice the number of large kegs used:
m += SmallKegs >= 2 * LargeKegs
# Total number of small kegs should be at most 30:
m += SmallKegs <= 30

# Objective
# Maximize the total amount of glacial water transported (40 liters per small keg, 100 liters per large keg):
m.maximize(40 * SmallKegs + 100 * LargeKegs)

```
True
True
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SubmarineTrips = intvar(0, 6)  # Number of submarine trips
BoatTrips = intvar(0, 6)  # Number of boat trips

# Constraints
m = Model()

# Total number of pieces of mail transported should be at least 1000:
m += 100 * SubmarineTrips + 80 * BoatTrips >= 1000
# At most 6 submarine trips:
m += SubmarineTrips <= 6
# At least 50% of the trips must be by boat:
m += BoatTrips >= 0.5 * (SubmarineTrips + BoatTrips)

# Objective
# Minimize total amount of gas used (30 liters per submarine trip, 25 liters per boat trip):
m.minimize(30 * SubmarineTrips + 25 * BoatTrips)

```
False
True
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HelicopterTrips = intvar(0, 5)  # Number of trips taken by helicopter
CarTrips = intvar(0, 999999999)  # Number of trips taken by car

# Constraints
m = Model()

# At least 300 fish need to be transported:
m += 30 * HelicopterTrips + 20 * CarTrips >= 300
# At least 60% of the trips should be by car:
m += CarTrips >= 0.6 * (HelicopterTrips + CarTrips)

# Objective
# Minimize total time (40 minutes per helicopter trip, 30 minutes per car trip):
m.minimize(40 * HelicopterTrips + 30 * CarTrips)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HotAirBalloonRides = intvar(0, 10)  # Number of hot air balloon rides
GondolaLiftRides = intvar(0, 999999999)  # Number of gondola lift rides

# Constraints
m = Model()

# Total number of visitors transported should be at least 70:
m += 4 * HotAirBalloonRides + 6 * GondolaLiftRides >= 70
# Total pollution produced should be minimized:
m.minimize(10 * HotAirBalloonRides + 15 * GondolaLiftRides)

```
True
True
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice.  The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MediumCarts = intvar(0, 999999999)  # Number of medium sized carts used
LargeCarts = intvar(0, 999999999)  # Number of large sized carts used

# Constraints
m = Model()

# Total number of horses available is 60:
m += 2 * MediumCarts + 4 * LargeCarts <= 60
# Number of medium sized carts must be three times the number of large sized carts:
m += MediumCarts == 3 * LargeCarts
# At least 5 medium sized carts and at least 5 large sized carts:
m += MediumCarts >= 5
m += LargeCarts >= 5

# Objective
# Maximize the amount of rice that can be transported (30 kg per medium cart, 70 kg per large cart):
m.maximize(30 * MediumCarts + 70 * LargeCarts)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Labradors = intvar(0, 999999999)  # Number of labradors used
GoldenRetrievers = intvar(0, 999999999)  # Number of golden retrievers used

# Constraints
m = Model()

# Total number of small bone treats available is 1500:
m += 5 * Labradors + 6 * GoldenRetrievers <= 1500
# At least 50 golden retrievers must be used:
m += GoldenRetrievers >= 50
# At most 60% of the dogs can be labradors:
m += Labradors <= 0.6 * (Labradors + GoldenRetrievers)

# Objective
# Maximize the number of newspapers that can be delivered (7 newspapers per labrador, 10 newspapers per golden retriever):
m.maximize(7 * Labradors + 10 * GoldenRetrievers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used..
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Cows = intvar(0, 999999999)  # Number of cows used
Elephants = intvar(0, 999999999)  # Number of elephants used

# Constraints
m = Model()

# Total number of bricks transported should be at least 1000:
m += 20 * Cows + 50 * Elephants >= 1000
# The number of elephants cannot exceed the number of cows:
m += Elephants <= Cows
# There can be at most twice the number of cows as elephants:
m += Cows <= 2 * Elephants

# Objective
# Minimize the total number of animals used:
m.minimize(Cows + Elephants)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FerryTrips = intvar(0, 999999999)  # Number of ferry trips
LightRailTrips = intvar(0, 999999999)  # Number of light rail trips

# Constraints
m = Model()

# Each ferry trip can take 20 boxes of corn, each light rail trip can take 15 boxes of corn:
m += 20 * FerryTrips + 15 * LightRailTrips >= 500
# Number of light rail trips has to be at least 4 times the number of ferry trips:
m += LightRailTrips >= 4 * FerryTrips

# Objective
# Minimize the total number of trips of either type needed:
m.minimize(FerryTrips + LightRailTrips)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TaxiRides = intvar(0, 999999999)  # Number of taxi rides
CarRides = intvar(0, 999999999)  # Number of company car rides

# Constraints
m = Model()

# Each taxi ride can take 2 employees and each company car ride can take 3 employees:
m += 2 * TaxiRides + 3 * CarRides >= 500
# At most 60% of the rides can be company car rides:
m += CarRides <= 0.6 * (TaxiRides + CarRides)
# At least 30 company car rides:
m += CarRides >= 30

# Objective
# Minimize the total number of taxi rides:
m.minimize(TaxiRides)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemical company is transporting their hydrogen using two different methods, high pressure tube trailers and liquefied hydrogen tankers. The first method is a high-pressure tube trailer which can transport 50 cubic meters each per trip at a cost of $500. The second method is using liquefied hydrogen tankers which can transport 30 cubic meters each per trip at a cost of $200. The company needs to transport at least 1000 cubic meters of hydrogen and they have budget of $3750 available. In addition, the number of transports done by the high pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method. How many of each transportation method should they use to minimize the total number of trips?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TubeTrailers = intvar(0, 999999999)  # Number of trips using high-pressure tube trailers
Tankers = intvar(0, 999999999)  # Number of trips using liquefied hydrogen tankers

# Constraints
m = Model()

# Total volume of hydrogen transported should be at least 1000 cubic meters:
m += 50 * TubeTrailers + 30 * Tankers >= 1000
# Total cost should not exceed $3750:
m += 500 * TubeTrailers + 200 * Tankers <= 3750
# Number of transports using tube trailers should be less than number of transports using tankers:
m += TubeTrailers < Tankers

# Objective
# Minimize the total number of trips:
m.minimize(TubeTrailers + Tankers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500.  Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallCrates = intvar(0, 100)  # Number of small crates used
LargeCrates = intvar(0, 50)  # Number of large crates used

# Constraints
m = Model()

# A small crate can take 200 grapes and a large crate can take 500 grapes:
m += 200 * SmallCrates + 500 * LargeCrates <= 60 * 500  # Total grapes transported should be at most 60 crates worth
# At least 3 times as many small crates must be used than large crates:
m += SmallCrates >= 3 * LargeCrates
# At most 100 small crates and at most 50 large crates available:
m += SmallCrates <= 100
m += LargeCrates <= 50
# At least 10 large crates must be used:
m += LargeCrates >= 10

# Objective
# Maximize the total number of grapes transported:
m.maximize(200 * SmallCrates + 500 * LargeCrates)

```
False
False
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TruckTrips = intvar(0, 5)  # Number of trips made by truck
CarTrips = intvar(0, 999999999)  # Number of trips made by car

# Constraints
m = Model()

# Total number of packages transported should be at least 500:
m += 50 * TruckTrips + 30 * CarTrips >= 500
# At least 30% of all trips must be made by car:
m += CarTrips >= 0.3 * (TruckTrips + CarTrips)
# At most 5 truck trips can be made:
m += TruckTrips <= 5

# Objective
# Minimize total amount of gas consumed (20 liters per truck trip, 15 liters per car trip):
m.minimize(20 * TruckTrips + 15 * CarTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HelicopterTrips = intvar(0, 999999999)  # Number of trips made by helicopter
BusTrips = intvar(0, 999999999)  # Number of trips made by bus

# Constraints
m = Model()

# At least 120 patients need to be transported:
m += 5 * HelicopterTrips + 8 * BusTrips >= 120
# At least 30% of the trips should be by helicopter:
m += HelicopterTrips >= 0.3 * (HelicopterTrips + BusTrips)
# There can be at most 10 bus trips:
m += BusTrips <= 10

# Objective
# Minimize total time to transport the patients (1 hour per helicopter trip, 3 hours per bus trip):
m.minimize(HelicopterTrips + 3 * BusTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Cars = intvar(0, 999999999)  # Number of cars used
Buses = intvar(0, 4)  # Number of buses used

# Constraints
m = Model()

# At least 300 employees need to be transported:
m += 4 * Cars + 20 * Buses >= 300
# At most 4 buses can be used:
m += Buses <= 4

# Objective
# Minimize total pollution (10 units per car, 30 units per bus):
m.minimize(10 * 4 * Cars + 30 * 20 * Buses)

```
False
False
Wrong: 0, Total: 2, Is objective correct: False
---------------------------------------------------------------------------------------------

A snow removal company removes snow from neighborhoods using small trucks and large trucks. A small truck requires 2 people to shovel the snow and can carry 30 units of snow. A large truck require 4 people to shovel the snow and car carry 50 units of snow. The company has available 30 people. In addition, because some neighbourhood don’t allow big trucks, at least 10 trucks must be small. There must be at least 3 large trucks as well and the number of small trucks must be twice as much as the number of large trucks. How many of each truck should be used to maximize the total amount of snow that can be transported?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallTrucks = intvar(0, 999999999)  # Number of small trucks used
LargeTrucks = intvar(0, 999999999)  # Number of large trucks used

# Constraints
m = Model()

# Total number of people available is 30:
m += 2 * SmallTrucks + 4 * LargeTrucks <= 30
# At least 10 trucks must be small:
m += SmallTrucks >= 10
# At least 3 large trucks:
m += LargeTrucks >= 3
# Number of small trucks must be twice as much as the number of large trucks:
m += SmallTrucks == 2 * LargeTrucks

# Objective
# Maximize the total amount of snow that can be transported (30 units per small truck, 50 units per large truck):
m.maximize(30 * SmallTrucks + 50 * LargeTrucks)

```
True
True
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service.  At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CarrierPigeons = intvar(0, 999999999)  # Number of carrier pigeons used
Owls = intvar(0, 999999999)  # Number of owls used

# Constraints
m = Model()

# A carrier pigeon can carry 2 letters and requires 3 treats:
m += 2 * CarrierPigeons + 5 * Owls <= 1000
# An owl can carry 5 letters and requires 5 treats:
m += 3 * CarrierPigeons + 5 * Owls <= 1000
# At most 40% of the birds can be owls:
m += Owls <= 0.4 * (CarrierPigeons + Owls)
# At least 20 carrier pigeons must be used:
m += CarrierPigeons >= 20

# Objective
# Maximize the total number of letters that can be sent:
m.maximize(2 * CarrierPigeons + 5 * Owls)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargeShips = intvar(0, 999999999)  # Number of large ships used
SmallShips = intvar(0, 999999999)  # Number of small ships used

# Constraints
m = Model()

# Total number of containers transported should be at least 3000:
m += 500 * LargeShips + 200 * SmallShips >= 3000
# Number of large ships cannot exceed the number of small ships:
m += LargeShips <= SmallShips

# Objective
# Minimize the total number of ships used:
m.minimize(LargeShips + SmallShips)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If  at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Canoes = intvar(0, 999999999)  # Number of small canoes used
DieselBoats = intvar(0, 999999999)  # Number of small diesel boats used

# Constraints
m = Model()

# Total number of fish transported to shore should be at least 1000:
m += 10 * Canoes + 15 * DieselBoats >= 1000
# Number of small canoes used has to be at least 3 times as many as the number of diesel boats used:
m += Canoes >= 3 * DieselBoats

# Objective
# Minimize the total number of canoes and diesel boats needed:
m.minimize(Canoes + DieselBoats)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people.  They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Vans = intvar(0, 999999999)  # Number of vans used
Cars = intvar(0, 999999999)  # Number of cars used

# Constraints
m = Model()

# Each van can carry 6 people and each car can carry 3 people:
m += 6 * Vans + 3 * Cars >= 200
# At most 30% of the vehicles can be vans:
m += Vans <= 0.3 * (Vans + Cars)

# Objective
# Minimize the total number of cars used:
m.minimize(Cars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs $6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Hamburgers = intvar(0, 999999999)  # Number of hamburgers provided
ChickenWraps = intvar(0, 999999999)  # Number of chicken wraps provided

# Constraints
m = Model()

# Nutritional requirements:
# At least 2200 calories:
m += 800 * Hamburgers + 450 * ChickenWraps >= 2200
# At least 50 grams of protein:
m += 19 * Hamburgers + 12 * ChickenWraps >= 50
# At least 70 grams of carbs:
m += 20 * Hamburgers + 10 * ChickenWraps >= 70

# Objective
# Minimize cost ($6.5 per hamburger, $4 per chicken wrap):
m.minimize(6.5 * Hamburgers + 4 * ChickenWraps)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is $150 and the profit per batch of pork ribs is $300, how many batches of each should be made to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Hams = intvar(0, 999999999)  # Number of batches of hams produced
PorkRibs = intvar(0, 999999999)  # Number of batches of pork ribs produced

# Constraints
m = Model()

# Time constraints for meat slicer and meat packer:
# To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer
m += 4 * Hams + 2.5 * Hams <= 4000
# To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer
m += 2 * PorkRibs + 3.5 * PorkRibs <= 4000

# Objective
# Maximize profit ($150 profit per batch of hams, $300 profit per batch of pork ribs):
m.maximize(150 * Hams + 300 * PorkRibs)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is $400 and the profit per stove is $260, how many of each should they sell in order to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Refrigerators = intvar(0, 999999999)  # Number of refrigerators sold
Stoves = intvar(0, 999999999)  # Number of stoves sold

# Constraints
m = Model()

# Mover time constraint:
m += 60 * Refrigerators + 45 * Stoves <= 20000
# Setup time constraint:
m += 20 * Refrigerators + 25 * Stoves <= 13000

# Objective
# Maximize profit ($400 profit per refrigerator, $260 profit per stove):
m.maximize(400 * Refrigerators + 260 * Stoves)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is $100 and the profit per drawer is $90, how many of each should the company make to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Desks = intvar(0, 999999999)  # Number of desks made
Drawers = intvar(0, 999999999)  # Number of drawers made

# Constraints
m = Model()

# Time constraints:
# Assembly time constraint:
m += 40 * Desks + 30 * Drawers <= 4000
# Sanding time constraint:
m += 20 * Desks + 10 * Drawers <= 3500

# Objective
# Maximize profit ($100 profit per desk, $90 profit per drawer):
m.maximize(100 * Desks + 90 * Drawers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is $7.5 and the profit from each bottle of matcha milk tea sold is $5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BlackMilkTea = intvar(0, 999999999)  # Number of bottles of black milk tea produced
MatchaMilkTea = intvar(0, 999999999)  # Number of bottles of matcha milk tea produced

# Constraints
m = Model()

# Total production must not exceed available stock:
m += 600 * BlackMilkTea + 525 * MatchaMilkTea <= 30000  # Milk constraint
m += 10 * BlackMilkTea + 5 * MatchaMilkTea <= 500  # Honey constraint

# Objective
# Maximize profit ($7.5 profit per bottle of black milk tea, $5 profit per bottle of matcha milk tea):
m.maximize(7.5 * BlackMilkTea + 5 * MatchaMilkTea)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs $1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs $2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Milk = intvar(0, 999999999)  # Number of glasses of milk consumed
Vegetables = intvar(0, 999999999)  # Number of plates of vegetables consumed

# Constraints
m = Model()

# Minimum daily requirement of calcium and iron:
m += 40 * Milk + 15 * Vegetables >= 100  # Calcium
m += 25 * Milk + 30 * Vegetables >= 50  # Iron

# Objective
# Minimize cost ($1 per glass of milk, $2 per plate of vegetables):
m.minimize(Milk + 2 * Vegetables)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs $5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs $2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
NoodlesServings = intvar(0, 999999999)  # Number of servings of noodles
ProteinBarServings = intvar(0, 999999999)  # Number of servings of protein bars

# Constraints
m = Model()

# Cost constraint:
m += 5 * NoodlesServings + 2.5 * ProteinBarServings  # Total cost

# Calorie constraint:
m += 600 * NoodlesServings + 250 * ProteinBarServings >= 2000

# Protein constraint:
m += 1.5 * NoodlesServings + 5 * ProteinBarServings >= 16

# Objective
# Minimize cost:
m.minimize(5 * NoodlesServings + 2.5 * ProteinBarServings)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A toy store sells plush toys and dolls. Each plush toy costs the store $3 and each doll costs the store $2. The store owner can spend at most $700 on inventory. Each plush toy is then sold for a profit of $4 while each doll is sold for a profit of $2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PlushToys = intvar(0, 999999999)  # Number of plush toys bought and sold
Dolls = intvar(0, 999999999)  # Number of dolls bought and sold

# Constraints
m = Model()

# The store owner can spend at most $700 on inventory:
m += 3 * PlushToys + 2 * Dolls <= 700
# At least 90 but at most 190 plush toys are sold each month:
m += PlushToys >= 90
m += PlushToys <= 190
# The number of dolls sold is at most twice the amount of plush toys sold:
m += Dolls <= 2 * PlushToys

# Objective
# Maximize profit ($4 profit per plush toy, $2 profit per doll):
m.maximize(4 * PlushToys + 2 * Dolls)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of $4 and a package of music paper at a profit of $2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GraphPaper = intvar(0, 999999999)  # Number of reams of graph paper produced
MusicPaper = intvar(0, 999999999)  # Number of reams of music paper produced

# Constraints
m = Model()

# Time constraints for printing and scanning machines:
# Graph paper: 3 minutes on printing machine, 5.5 minutes on scanning machine
m += 3 * GraphPaper + 5.5 * GraphPaper <= 350
# Music paper: 1.5 minutes on printing machine, 3 minutes on scanning machine
m += 1.5 * MusicPaper + 3 * MusicPaper <= 350

# Objective
# Maximize profit ($4 profit per ream of graph paper, $2.5 profit per ream of music paper):
m.maximize(4 * GraphPaper + 2.5 * MusicPaper)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is $14 and the cost per health supplement for health supplement B is $25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ServingsA = intvar(0, 999999999)  # Number of servings of health supplement A
ServingsB = intvar(0, 999999999)  # Number of servings of health supplement B

# Constraints
m = Model()

# Calcium constraint: at least 400 grams of Calcium per day
m += 30 * ServingsA + 60 * ServingsB >= 400
# Magnesium constraint: at least 50 grams of Magnesium per day
m += 50 * ServingsA + 10 * ServingsB >= 50

# Objective
# Minimize cost ($14 per serving of health supplement A, $25 per serving of health supplement B)
m.minimize(14 * ServingsA + 25 * ServingsB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Lucy has a dog and she wants his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs $20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularBags = intvar(0, 999999999)  # Number of bags of regular brand
PremiumBags = intvar(0, 999999999)  # Number of bags of premium brand

# Constraints
m = Model()

# Minimum requirements for calcium, vitamin mix, and protein:
m += 4 * RegularBags + 12 * PremiumBags >= 15  # Calcium
m += 7 * RegularBags + 10 * PremiumBags >= 20  # Vitamin mix
m += 10 * RegularBags + 16 * PremiumBags >= 20  # Protein

# Objective
# Minimize cost ($20 per regular bag, $35 per premium bag):
m.minimize(20 * RegularBags + 35 * PremiumBags)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of $550, each tank of non-sticky oil produces a net revenue of $750, and each tank of heavy oil produces a net revenue of $950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LightOilTanks = intvar(0, 999999999)  # Number of tanks of light oil processed
NonStickyOilTanks = intvar(0, 999999999)  # Number of tanks of non-sticky oil processed
HeavyOilTanks = intvar(0, 999999999)  # Number of tanks of heavy oil processed

# Constraints
m = Model()

# Compound A constraint:
m += 3 * LightOilTanks + 6 * NonStickyOilTanks + 9 * HeavyOilTanks <= 250
# Compound B constraint:
m += 3 * LightOilTanks + 2 * NonStickyOilTanks + 3 * HeavyOilTanks <= 150

# Objective
# Maximize net revenue ($550 per tank of light oil, $750 per tank of non-sticky oil, $950 per tank of heavy oil):
m.maximize(550 * LightOilTanks + 750 * NonStickyOilTanks + 950 * HeavyOilTanks)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a $2.1 profit and a square foot of carpets yields a $3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LaminatePlanks = intvar(0, 40000)  # Square feet of laminate planks produced weekly
Carpets = intvar(0, 20000)  # Square feet of carpets produced weekly

# Constraints
m = Model()

# Expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week:
m += LaminatePlanks >= 15000
m += Carpets >= 5000
# Total of at least 50,000 square feet of products each week:
m += LaminatePlanks + Carpets >= 50000
# No more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly:
m += LaminatePlanks <= 40000
m += Carpets <= 20000

# Objective
# Maximize profit ($2.1 profit per square foot of laminate planks, $3.3 profit per square foot of carpets):
m.maximize(2.1 * LaminatePlanks + 3.3 * Carpets)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium.  The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is $2 and the cost per pill of supplement B is  $3, how many of each should he buy to minimize costs?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SupplementA = intvar(0, 999999999)  # Number of pills of supplement A
SupplementB = intvar(0, 999999999)  # Number of pills of supplement B

# Constraints
m = Model()

# Daily iron requirement is at least 40 units:
m += 5 * SupplementA + 4 * SupplementB >= 40
# Daily calcium requirement is at least 50 units:
m += 10 * SupplementA + 15 * SupplementB >= 50

# Objective
# Minimize cost ($2 per pill of supplement A, $3 per pill of supplement B):
m.minimize(2 * SupplementA + 3 * SupplementB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of $30 each and premium handbags at a profit of $180 each. The total monthly cost of manufacturing is $200 per regular handbag and $447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RegularHandbags = intvar(0, 475)  # Number of regular handbags sold
PremiumHandbags = intvar(0, 475)  # Number of premium handbags sold

# Constraints
m = Model()

# Total monthly cost should not exceed $250000:
m += 200 * RegularHandbags + 447 * PremiumHandbags <= 250000
# Total number of handbags sold should be at most 475:
m += RegularHandbags + PremiumHandbags <= 475

# Objective
# Maximize profit ($30 profit per regular handbag, $180 profit per premium handbag):
m.maximize(30 * RegularHandbags + 180 * PremiumHandbags)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A woman has $100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be $1.2 for basketball tournament, $0.5 for horse race, and $0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BasketballBet = intvar(0, 100000)  # Amount of money to bet on basketball tournament
HorseBet = intvar(0, 100000)  # Amount of money to bet on horse race
SoccerBet = intvar(0, 100000)  # Amount of money to bet on soccer game

# Constraints
m = Model()

# Total amount of money should not exceed $100000:
m += BasketballBet + HorseBet + SoccerBet <= 100000
# Average chance of losing money should be at most 30%:
m += 0.5 * BasketballBet + 0.25 * HorseBet + 0.1 * SoccerBet <= 0.3 * (BasketballBet + HorseBet + SoccerBet)

# Objective
# Maximize average payout ($1.2 payout per dollar on basketball, $0.5 payout per dollar on horse race, $0.1 payout per dollar on soccer game):
m.maximize(1.2 * BasketballBet + 0.5 * HorseBet + 0.1 * SoccerBet)

```
Error: Not an integer: 2.5
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him $250 and each freezer repaired earns his $375, how many of each appliance should he fix to maximize his earnings?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
WashingMachines = intvar(0, 999999999)  # Number of washing machines fixed
Freezers = intvar(0, 999999999)  # Number of freezers fixed

# Constraints
m = Model()

# Time constraints:
# Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time:
m += 30 * WashingMachines + 90 * WashingMachines <= 5000
# Each freezer takes 20 minutes of inspection and 125 minutes of fixing time:
m += 20 * Freezers + 125 * Freezers <= 5000
# Total available time constraint:
m += 30 * WashingMachines + 90 * WashingMachines + 20 * Freezers + 125 * Freezers <= 20000

# Objective
# Maximize earnings ($250 per washing machine fixed, $375 per freezer fixed):
m.maximize(250 * WashingMachines + 375 * Freezers)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is $12, the profit per sponge cake is $10, and the profit per birthday cake is $15, how many of each should the bakery make to maximize their profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CrepeCakes = intvar(0, 999999999)  # Number of crepe cakes made
SpongeCakes = intvar(0, 999999999)  # Number of sponge cakes made
BirthdayCakes = intvar(0, 999999999)  # Number of birthday cakes made

# Constraints
m = Model()

# Batter and milk constraints:
m += 400 * CrepeCakes + 500 * SpongeCakes + 450 * BirthdayCakes <= 20000  # Batter constraint
m += 200 * CrepeCakes + 300 * SpongeCakes + 350 * BirthdayCakes <= 14000  # Milk constraint

# Objective
# Maximize profit ($12 profit per crepe cake, $10 profit per sponge cake, $15 profit per birthday cake):
m.maximize(12 * CrepeCakes + 10 * SpongeCakes + 15 * BirthdayCakes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FirstMixCatPaw = intvar(0, 999999999)  # kg of cat paw snacks in the first mix
FirstMixGoldShark = intvar(0, 999999999)  # kg of gold shark snacks in the first mix
SecondMixCatPaw = intvar(0, 999999999)  # kg of cat paw snacks in the second mix
SecondMixGoldShark = intvar(0, 999999999)  # kg of gold shark snacks in the second mix

# Constraints
m = Model()

# Total amount of cat paw snacks available is 20 kg:
m += FirstMixCatPaw + SecondMixCatPaw <= 20
# Total amount of gold shark snacks available is 50 kg:
m += FirstMixGoldShark + SecondMixGoldShark <= 50

# The first mix contains 20% cat paw snacks and 80% gold shark snacks:
m += FirstMixCatPaw == 0.2 * (FirstMixCatPaw + FirstMixGoldShark)
m += FirstMixGoldShark == 0.8 * (FirstMixCatPaw + FirstMixGoldShark)

# The second mix contains 35% cat paw snacks and 65% gold shark snacks:
m += SecondMixCatPaw == 0.35 * (SecondMixCatPaw + SecondMixGoldShark)
m += SecondMixGoldShark == 0.65 * (SecondMixCatPaw + SecondMixGoldShark)

# Objective
# Maximize profit ($12 profit per kg of the first mix, $15 profit per kg of the second mix):
m.maximize(12 * (FirstMixCatPaw + FirstMixGoldShark) + 15 * (SecondMixCatPaw + SecondMixGoldShark))

```
False
False
Wrong: 2, Total: 2, Is objective correct: False
---------------------------------------------------------------------------------------------

A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of $2.50 each and x2 deluxe tacos at a profit of $3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?
N/A
```python

from cpmpy import Model, floatvar

# Decision Variables
RegularTacos = floatvar(0, 50)  # Number of regular tacos sold
DeluxeTacos = floatvar(0, 40)  # Number of deluxe tacos sold

# Constraints
m = Model()

# Total number of tacos sold should be at most 70:
m += RegularTacos + DeluxeTacos <= 70
# Demand for at most 50 regular tacos:
m += RegularTacos <= 50
# Demand for at most 40 deluxe tacos:
m += DeluxeTacos <= 40

# Objective
# Maximize profit ($2.50 profit per regular taco, $3.55 profit per deluxe taco):
m.maximize(2.50 * RegularTacos + 3.55 * DeluxeTacos)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is $15 and the profit per English workbook is $17, how many of each should the company make to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MathWorkbooks = intvar(0, 999999999)  # Number of math workbooks produced
EnglishWorkbooks = intvar(0, 999999999)  # Number of English workbooks produced

# Constraints
m = Model()

# At least 40 math workbooks and 60 English workbooks must be made:
m += MathWorkbooks >= 40
m += EnglishWorkbooks >= 60
# At most 140 math workbooks and 170 English workbooks can be made:
m += MathWorkbooks <= 140
m += EnglishWorkbooks <= 170
# At least 200 workbooks of either type must be sent:
m += MathWorkbooks + EnglishWorkbooks >= 200

# Objective
# Maximize profit ($15 profit per math workbook, $17 profit per English workbook):
m.maximize(15 * MathWorkbooks + 17 * EnglishWorkbooks)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for $2800 and $2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FullWeightedKeyboards = intvar(0, 999999999)  # Number of full-weighted keyboards produced
SemiWeightedKeyboards = intvar(0, 999999999)  # Number of semi-weighted keyboards produced

# Constraints
m = Model()

# Total number of oscillator chips available is 3500 per day:
m += 20 * FullWeightedKeyboards + 15 * SemiWeightedKeyboards <= 3500
# Total working hours available is 6 hours per day:
m += 1.2 * (FullWeightedKeyboards + SemiWeightedKeyboards) <= 6

# Objective
# Maximize total revenue ($2800 per full-weighted keyboard, $2400 per semi-weighted keyboard):
m.maximize(2800 * FullWeightedKeyboards + 2400 * SemiWeightedKeyboards)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost $550 and $2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is $450 and the profit per commercial version is $1200. If the company does not want to spend more than $400000, how many of each software package should they produce to maximize the profits.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PersonalLicenses = intvar(0, 999999999)  # Number of personal licenses produced
CommercialLicenses = intvar(0, 999999999)  # Number of commercial licenses produced

# Constraints
m = Model()

# The company can sell at most 300 licenses for both versions combined a month:
m += PersonalLicenses + CommercialLicenses <= 300
# Cost constraint: the company does not want to spend more than $400000:
m += 550 * PersonalLicenses + 2000 * CommercialLicenses <= 400000

# Objective
# Maximize profit ($450 profit per personal license, $1200 profit per commercial license):
m.maximize(450 * PersonalLicenses + 1200 * CommercialLicenses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of $5.5 each, and x2 sugar cookies, at a profit of $12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
StrawberryCookies = intvar(0, 100)  # Number of strawberry cookies made
SugarCookies = intvar(0, 100)  # Number of sugar cookies made

# Constraints
m = Model()

# Daily demand constraints:
m += StrawberryCookies <= 100
m += SugarCookies <= 80

# Maximum of 100 cookies of either type can be made per day:
m += StrawberryCookies + SugarCookies <= 100

# Objective
# Maximize profit ($5.5 profit per strawberry cookie, $12 profit per sugar cookie):
m.maximize(5.5 * StrawberryCookies + 12 * SugarCookies)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs $1200 and attracts 2000 viewers. On Beta Video, a commercial costs $2000 and attracts 5000 viewers. On Gamma Live, a commercial costs $4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is $20000, how many commercials should be run in each of the three possible choices in order to maximize audience?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PiTVCommercials = intvar(0, 999999999)  # Number of commercials on Pi TV
BetaVideoCommercials = intvar(0, 999999999)  # Number of commercials on Beta Video
GammaLiveCommercials = intvar(0, 999999999)  # Number of commercials on Gamma Live

# Constraints
m = Model()

# Cost and audience reach constraints:
m += 1200 * PiTVCommercials + 2000 * BetaVideoCommercials + 4000 * GammaLiveCommercials <= 20000
# At most 8 commercials on Beta Video:
m += BetaVideoCommercials <= 8
# At most a third of all commercials on Gamma Live:
m += GammaLiveCommercials <= (PiTVCommercials + BetaVideoCommercials + GammaLiveCommercials) / 3
# At least 20% of commercials on Pi TV:
m += PiTVCommercials >= 0.2 * (PiTVCommercials + BetaVideoCommercials + GammaLiveCommercials)

# Objective
# Maximize audience reach (2000 viewers per Pi TV commercial, 5000 viewers per Beta Video commercial, 9000 viewers per Gamma Live commercial):
m.maximize(2000 * PiTVCommercials + 5000 * BetaVideoCommercials + 9000 * GammaLiveCommercials)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
TemperatureChecks = intvar(0, 999999999)  # Number of temperature checks conducted
BloodTests = intvar(0, 999999999)  # Number of blood tests conducted

# Constraints
m = Model()

# A temperature check takes 2 minutes and a blood test takes 10 minutes:
m += 2 * TemperatureChecks + 10 * BloodTests <= 22000
# At least 45 blood tests must be conducted:
m += BloodTests >= 45
# Temperature check is performed at least 5 times as many as the blood test:
m += TemperatureChecks >= 5 * BloodTests

# Objective
# Maximize the number of patients seen (each patient requires either a temperature check or a blood test):
m.maximize(TemperatureChecks + BloodTests)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
WidePipes = intvar(0, 999999999)  # Number of wide pipes used
NarrowPipes = intvar(0, 999999999)  # Number of narrow pipes used

# Constraints
m = Model()

# Water transported through wide pipes: 25 units per minute
# Water transported through narrow pipes: 15 units per minute
# Total water transported per minute should be at least 900 units:
m += 25 * WidePipes + 15 * NarrowPipes >= 900
# At least 5 wide pipes must be used:
m += WidePipes >= 5
# The number of wide pipes can be at most a third the number of narrow pipes:
m += WidePipes <= 1/3 * NarrowPipes

# Objective
# Minimize the total number of pipes required:
m.minimize(WidePipes + NarrowPipes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Carts = intvar(0, 999999999)  # Number of carts used
Trolleys = intvar(0, 999999999)  # Number of trolleys used

# Constraints
m = Model()

# Carts can transport 5 kg/min and require 2 workers:
m += 5 * Carts + 7 * Trolleys == 100
m += 2 * Carts + 4 * Trolleys == 0.4 * (2 * Carts + 4 * Trolleys)  # Maximum 40% using trolleys
m += Trolleys >= 12  # At least 12 trolleys

# Objective
# Minimize total number of workers (2 workers per cart, 4 workers per trolley):
m.minimize(2 * Carts + 4 * Trolleys)

```
False
False
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SubsoilBags = intvar(0, 150)  # Number of bags of subsoil bought
TopsoilBags = intvar(0, 150)  # Number of bags of topsoil bought

# Constraints
m = Model()

# Total bags of topsoil and subsoil should not exceed 150:
m += SubsoilBags + TopsoilBags <= 150
# At least 10 bags of topsoil must be used:
m += TopsoilBags >= 10
# At most 30% of all bags of soil can be topsoil:
m += TopsoilBags <= 0.3 * (SubsoilBags + TopsoilBags)

# Objective
# Minimize total amount of water required to hydrate the garden bed (10 units per subsoil bag, 6 units per topsoil bag):
m.minimize(10 * SubsoilBags + 6 * TopsoilBags)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute.  The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
DenselySeatedLifts = intvar(0, 999999999)  # Number of densely-seated ski lifts
LooselySeatedLifts = intvar(0, 999999999)  # Number of loosely-seated ski lifts

# Constraints
m = Model()

# Total number of guests transported per minute should be at least 1000:
m += 45 * DenselySeatedLifts + 20 * LooselySeatedLifts >= 1000
# Total units of electricity used should not exceed 940:
m += 30 * DenselySeatedLifts + 22 * LooselySeatedLifts <= 940
# At least 5 loosely-seated ski lifts:
m += LooselySeatedLifts >= 5

# Objective
# Minimize the total number of ski lifts needed:
m.minimize(DenselySeatedLifts + LooselySeatedLifts)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A strata-management company is looking into purchasing two types of air conditioners, a low-power and a high-power model. A low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity every day. A high-power model can cool down 17 housing units and uses 250 units of electricity every day. Since the low-powered model is not good for the aesthetics, the strata decided to limit the number of low-powered models to only 30% and at least 7 high-powered models must be used. If the apartment needs to condition at least 250 housing units and has 3400 units of electricity available, how many of each air conditioner should the strata company buy to minimize the total number of air conditioners?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LowPowerAC = intvar(0, 999999999)  # Number of low-power air conditioners purchased
HighPowerAC = intvar(0, 999999999)  # Number of high-power air conditioners purchased

# Constraints
m = Model()

# Low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity:
m += 12 * LowPowerAC + 17 * HighPowerAC >= 250
m += 150 * LowPowerAC + 250 * HighPowerAC <= 3400
# Limit the number of low-powered models to only 30%:
m += LowPowerAC <= 0.3 * (LowPowerAC + HighPowerAC)
# At least 7 high-powered models must be used:
m += HighPowerAC >= 7

# Objective
# Minimize the total number of air conditioners:
m.minimize(LowPowerAC + HighPowerAC)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CalciumPills = intvar(0, 999999999)  # Number of calcium pills taken
VitaminDPills = intvar(0, 999999999)  # Number of vitamin D pills taken

# Constraints
m = Model()

# Total number of pills taken should be at least 130:
m += CalciumPills + VitaminDPills >= 130
# At least 40 pills should be vitamin D pills:
m += VitaminDPills >= 40
# The student must take more calcium pills than vitamin D pills:
m += CalciumPills >= VitaminDPills

# Objective
# Minimize total time for medication to be effective (5 minutes for calcium, 6 minutes for vitamin D):
m.minimize(5 * CalciumPills + 6 * VitaminDPills)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park $2 in prizes per hour whereas climbing games cost $3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ThrowingGames = intvar(0, 999999999)  # Number of throwing games
ClimbingGames = intvar(0, 999999999)  # Number of climbing games

# Constraints
m = Model()

# Throwing games attract 15 customers every hour, climbing games attract 8 customers every hour:
TotalCustomers = 15 * ThrowingGames + 8 * ClimbingGames

# Throwing games cost $2 in prizes per hour, climbing games cost $3 in prizes per hour:
m += 2 * ThrowingGames + 3 * ClimbingGames <= 100
# At least twice as many throwing games as climbing games:
m += ThrowingGames >= 2 * ClimbingGames
# At least 5 climbing games:
m += ClimbingGames >= 5

# Objective
# Maximize total number of customers attracted every hour:
m.maximize(TotalCustomers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

In a science fair, there are two types of tables that can be used to display the children’s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CircularTables = intvar(0, 999999999)  # Number of circular tables set up
RectangularTables = intvar(0, 999999999)  # Number of rectangular tables set up

# Constraints
m = Model()

# Each circular table takes up 15 units of space, each rectangular table takes up 20 units of space:
m += 15 * CircularTables + 20 * RectangularTables <= 1900
# Each circular table caters to 8 guests, each rectangular table caters to 12 guests:
m += 8 * CircularTables + 12 * RectangularTables >= 500
# Each circular table uses 4 poster boards, each rectangular table uses 4 poster boards:
m += 4 * CircularTables + 4 * RectangularTables >= 300

# Objective
# Maximize the number of catered guests:
m.maximize(8 * CircularTables + 12 * RectangularTables)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HighVolumePipes = intvar(0, 160)  # Number of high-volume pipes used
LowVolumePipes = intvar(0, 160)  # Number of low-volume pipes used

# Constraints
m = Model()

# Total number of pipes should not exceed the total number of technicians (160):
m += HighVolumePipes + LowVolumePipes <= 160
# High-volume pipe requires 12 technicians per day:
m += 12 * HighVolumePipes <= 160
# Low-volume pipe requires 5 technicians per day:
m += 5 * LowVolumePipes <= 160
# Total gas demand should be met (at least 150000 US gallons per day):
m += 10000 * HighVolumePipes + 5000 * LowVolumePipes >= 150000
# At most 35% of the pipes can be high-volume ones:
m += HighVolumePipes <= 0.35 * (HighVolumePipes + LowVolumePipes)
# At least 8 low-volume pipes:
m += LowVolumePipes >= 8

# Objective
# Minimize the total number of pipes used:
m.minimize(HighVolumePipes + LowVolumePipes)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital hires ultrasound technicians and graduate researchers to image patients. An ultrasound technician works 8 hours per shift while a graduate researcher works 5 hours per shift. Ultrasound technicians are paid $300 per shift while graduate researchers are paid $100 per shift. However, due to regulations, there must be twice as many ultrasound technician shifts than graduate researcher shifts. Currently, the hospital needs 500 hours of ultrasound services to meet needs. If the hospital has a budget of $14000, how many of each worker certified to use the ultrasound should be scheduled to reduce the total number of workers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
UltrasoundTechShifts = intvar(0, 999999999)  # Number of ultrasound technician shifts scheduled
GraduateResearcherShifts = intvar(0, 999999999)  # Number of graduate researcher shifts scheduled

# Constraints
m = Model()

# An ultrasound technician works 8 hours per shift and a graduate researcher works 5 hours per shift:
m += 8 * UltrasoundTechShifts + 5 * GraduateResearcherShifts == 500
# Ultrasound technicians are paid $300 per shift and graduate researchers are paid $100 per shift:
m += 300 * UltrasoundTechShifts + 100 * GraduateResearcherShifts <= 14000
# There must be twice as many ultrasound technician shifts than graduate researcher shifts:
m += UltrasoundTechShifts == 2 * GraduateResearcherShifts

# Objective
# Minimize the total number of workers scheduled:
m.minimize(UltrasoundTechShifts + GraduateResearcherShifts)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Molars = intvar(0, 999999999)  # Number of molars scheduled to fill
Canines = intvar(0, 999999999)  # Number of canines scheduled to fill

# Constraints
m = Model()

# Total units of resin used should not exceed 3000:
m += 20 * Molars + 15 * Canines <= 3000
# Total units of pain killer used should be minimized:
m.minimize(3 * Molars + 2.3 * Canines)
# At least 60% of cavities filled must be in canines:
m += Canines >= 0.6 * (Molars + Canines)
# At least 45 molars must be filled:
m += Molars >= 45

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in $50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in $43 on tips.  The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BikeShifts = intvar(0, 40)  # Number of shifts on bikes
ScooterShifts = intvar(0, 40)  # Number of shifts on scooters

# Constraints
m = Model()

# Total shifts should not exceed 40:
m += BikeShifts + ScooterShifts <= 40
# Total energy available is 230 units:
m += 5 * BikeShifts + 6 * ScooterShifts <= 230
# Total orders should be at least 320:
m += 10 * BikeShifts + 7 * ScooterShifts >= 320
# At least 5 shifts on a scooter:
m += ScooterShifts >= 5

# Objective
# Maximize tips received ($50 per bike shift, $43 per scooter shift):
m.maximize(50 * BikeShifts + 43 * ScooterShifts)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PopConcerts = intvar(0, 999999999)  # Number of pop concerts
RBConcerts = intvar(0, 999999999)  # Number of R&B concerts

# Constraints
m = Model()

# Total audience members should be at least 10000:
m += 100 * PopConcerts + 240 * RBConcerts >= 10000
# Total days for practice should not exceed 180:
m += 2 * PopConcerts + 4 * RBConcerts <= 180
# At most 40% of concerts can be R&B:
m += RBConcerts <= 0.4 * (PopConcerts + RBConcerts)

# Objective
# Minimize the total number of concerts:
m.minimize(PopConcerts + RBConcerts)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargePizzas = intvar(0, 999999999)  # Number of large pizzas made
MediumPizzas = intvar(0, 999999999)  # Number of medium pizzas made

# Constraints
m = Model()

# Dough and toppings constraints:
m += 12 * LargePizzas + 8 * MediumPizzas >= 10000  # Dough constraint
m += 5 * LargePizzas + 4 * MediumPizzas >= 4400  # Toppings constraint

# At least 200 medium pizzas must be made:
m += MediumPizzas >= 200

# At least two times as many large pizzas should be made than medium pizzas:
m += LargePizzas >= 2 * MediumPizzas

# Objective
# Minimize time spent baking (12 minutes for large pizzas, 8 minutes for medium pizzas):
m.minimize(12 * LargePizzas + 8 * MediumPizzas)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Limousines = intvar(0, 999999999)  # Number of limousines used
Buses = intvar(0, 999999999)  # Number of buses used

# Constraints
m = Model()

# Total number of people to transport should be at least 400:
m += 12 * Limousines + 18 * Buses >= 400
# At least 70% of the vehicles must be limousines:
m += Limousines >= 0.7 * (Limousines + Buses)

# Objective
# Minimize the total number of limousines and buses used:
m.minimize(Limousines + Buses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PreventionPills = intvar(0, 999999999)  # Number of prevention pills purchased
TreatmentPills = intvar(0, 999999999)  # Number of treatment pills purchased

# Constraints
m = Model()

# The hospital has a budget of $10000:
m += 15 * PreventionPills + 25 * TreatmentPills <= 10000
# The hospital must purchase at least two times as many prevention pills as treatment pills:
m += PreventionPills >= 2 * TreatmentPills
# The hospital must purchase at least 50 treatment pills:
m += TreatmentPills >= 50

# Objective
# Maximize the number of patients that can be treated:
m.maximize(TreatmentPills)

```
False
False
Wrong: 0, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CartDeliveries = intvar(0, 999999999)  # Number of deliveries by cart
HandDeliveries = intvar(0, 999999999)  # Number of deliveries by hand

# Constraints
m = Model()

# Total number of customer interactions should be 4000 per hour:
m += 70 * CartDeliveries + 85 * HandDeliveries == 4000
# At least 70% of delivery shifts must be by cart:
m += CartDeliveries >= 0.7 * (CartDeliveries + HandDeliveries)
# At least 3 servers delivering by hand:
m += HandDeliveries >= 3
# Total number of refills should be minimized:
m.minimize(5 * CartDeliveries + 20 * HandDeliveries)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SalmonBowls = intvar(0, 999999999)  # Number of bowls of salmon eaten
EggBowls = intvar(0, 999999999)  # Number of bowls of eggs eaten

# Constants
SalmonCalories = 300
SalmonProtein = 15
SalmonSodium = 80
EggCalories = 200
EggProtein = 8
EggSodium = 20

# Constraints
m = Model()

# Total calories consumed should be at least 2000:
m += SalmonCalories * SalmonBowls + EggCalories * EggBowls >= 2000
# Total protein consumed should be at least 90 grams:
m += SalmonProtein * SalmonBowls + EggProtein * EggBowls >= 90
# At most 40% of meals can be eggs:
m += EggBowls <= 0.4 * (SalmonBowls + EggBowls)

# Objective
# Minimize sodium intake:
m.minimize(SalmonSodium * SalmonBowls + EggSodium * EggBowls)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
OriginalCombos = intvar(0, 999999999)  # Number of original combos pushed by waiting staff
ExperimentalCombos = intvar(0, 999999999)  # Number of experimental combos pushed by waiting staff

# Constraints
m = Model()

# Food waste constraint:
m += 20 * OriginalCombos + 25 * ExperimentalCombos <= 800
# Wrapping waste constraint:
m += 45 * OriginalCombos + 35 * ExperimentalCombos <= 900

# Objective
# Minimize cooking time (10 minutes for original combo, 15 minutes for experimental combo):
m.minimize(10 * OriginalCombos + 15 * ExperimentalCombos)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day.  The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ChopSaw = intvar(0, 999999999)  # Number of chop saws purchased
SteelCutter = intvar(0, 999999999)  # Number of steel cutters purchased

# Constraints
m = Model()

# A chop saw can work 25 pounds of steel and generates 25 units of waste every day:
m += 25 * ChopSaw + 5 * SteelCutter >= 520
m += 25 * ChopSaw <= 400  # Waste limitation

# Objective
# Minimize the total number of metal-working equipment needed:
m.minimize(ChopSaw + SteelCutter)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargeTrips = intvar(0, 7)  # Number of large cruise ship trips
SmallTrips = intvar(0, 999999999)  # Number of small cruise ship trips

# Constraints
m = Model()

# Total number of customers transported should be at least 20000:
m += 2000 * LargeTrips + 800 * SmallTrips >= 20000
# At least 40% of the total trips must be made by small cruise ships:
m += SmallTrips >= 0.4 * (LargeTrips + SmallTrips)

# Objective
# Minimize total pollution produced (20 units per large cruise ship trip, 15 units per small cruise ship trip):
m.minimize(20 * LargeTrips + 15 * SmallTrips)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LEDLights = intvar(0, 999999999)  # Number of LED fixtures installed
FluorescenceLamps = intvar(0, 999999999)  # Number of fluorescence lamps installed

# Constraints
m = Model()

# Total number of light fixtures should be at least 300:
m += LEDLights + FluorescenceLamps >= 300
# Total units of electricity used should be at most 2000:
m += 5 * LEDLights + 8 * FluorescenceLamps <= 2000
# At least 30% of the implemented lights must be fluorescence lamps:
m += FluorescenceLamps >= 0.3 * (LEDLights + FluorescenceLamps)

# Objective
# Minimize the total number of light changes (LED light changes 3 times, fluorescence lamp changes 4 times):
m.minimize(3 * LEDLights + 4 * FluorescenceLamps)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A market owner wants to start a jam business. He can either sell one unit of jam to customers in a set of small packets or jugs. A set of small packets can hold 1000 ml of jam while a jug can hold 1250 ml of jam. Since a set of small packets are more expensive to make, at least three times as many jugs must be used than sets of small packets. On the other hand, at least 35 sets of small packets should be filled. If the market owner has 65000 ml of jam, how many sets of small packets or jugs should be selected to maximize the total number of units that he can sell to his customers?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallPackets = intvar(0, 999999999)  # Number of sets of small packets selected
Jugs = intvar(0, 999999999)  # Number of jugs selected

# Constraints
m = Model()

# Total amount of jam available is 65000 ml:
m += 1000 * SmallPackets + 1250 * Jugs <= 65000
# At least 35 sets of small packets should be filled:
m += SmallPackets >= 35
# At least three times as many jugs must be used than sets of small packets:
m += Jugs >= 3 * SmallPackets

# Objective
# Maximize the total number of units that can be sold:
m.maximize(SmallPackets + Jugs)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A navy ship is stocking food onto their submarine and their staff can eat either a salad or fruit bowl for their fibre and vitamin intake. The nutritionist in charge of this voyage needs to ensure that their staff gets at least 90 units of vitamin and 110 units of fibre each. Each salad contains 7 units of vitamins and 12 units of fibre. Each fruit bowl contains 15 units of vitamin and 3 units of fibre. In addition, since fruit bowls take longer to prepare, at most 30% of their meals should be fruit bowls. If each salad contains 2 units of potassium and each fruit bowl contains 8 units of potassium, how many of each should they prepare for each staff to maximize their potassium intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Salads = intvar(0, 999999999)  # Number of salads prepared
FruitBowls = intvar(0, 999999999)  # Number of fruit bowls prepared

# Constraints
m = Model()

# Vitamin intake constraint:
m += 7 * Salads + 15 * FruitBowls >= 90
# Fibre intake constraint:
m += 12 * Salads + 3 * FruitBowls >= 110
# At most 30% of meals should be fruit bowls:
m += FruitBowls <= 0.3 * (Salads + FruitBowls)

# Objective
# Maximize potassium intake (2 units per salad, 8 units per fruit bowl):
m.maximize(2 * Salads + 8 * FruitBowls)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
RetailStores = intvar(0, 10)  # Number of retail stores open
FactoryOutlets = intvar(0, 10)  # Number of factory outlets open

# Constraints
m = Model()

# Total number of customers should be at least 1200:
m += 200 * RetailStores + 80 * FactoryOutlets >= 1200
# Total number of employees should not exceed 50:
m += 6 * RetailStores + 4 * FactoryOutlets <= 50

# Objective
# Minimize the number of stores that must be open:
m.minimize(RetailStores + FactoryOutlets)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A soda company sells soda in two types of containers: cans and glass bottles. A can holds 250 ml of soda whereas a bottle holds 1000 ml of soda. The soda company needs to bottle at least 1000000 ml of soda every day and due to the ability to sell soda cans as packs, there must be at least three times more cans than glass bottles. However, because of previous contracts with gas stations, there must be at least 100 glass bottles made. How many of each should be made to maximize the total number of units produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Cans = intvar(0, 999999999)  # Number of cans produced
GlassBottles = intvar(0, 999999999)  # Number of glass bottles produced

# Constraints
m = Model()

# Total soda bottled should be at least 1000000 ml:
m += 250 * Cans + 1000 * GlassBottles >= 1000000
# At least 100 glass bottles made:
m += GlassBottles >= 100
# There must be at least three times more cans than glass bottles:
m += Cans >= 3 * GlassBottles

# Objective
# Maximize the total number of units produced:
m.maximize(Cans + GlassBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is $300 while the cost over air for each trip is $550. The company needs to transport at least 200 tons of candles and they have a budget of $20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FreightTrips = intvar(0, 999999999)  # Number of trips using freight
AirTrips = intvar(0, 999999999)  # Number of trips using air

# Constraints
m = Model()

# Total tons of candles to transport should be at least 200:
m += 5 * FreightTrips + 3 * AirTrips >= 200
# The company has a budget of $20000:
m += 300 * FreightTrips + 550 * AirTrips <= 20000
# At least 30% of tons of candles must be transported through air:
m += 3 * AirTrips >= 0.3 * (5 * FreightTrips + 3 * AirTrips)
# At least 5 trips through freight:
m += FreightTrips >= 5

# Objective
# Minimize the total number of trips:
m.minimize(FreightTrips + AirTrips)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargeUnits = intvar(0, 999999999)  # Number of large mobile production units
SmallUnits = intvar(0, 999999999)  # Number of small mobile production units

# Constraints
m = Model()

# Large mobile production units can hold 6 people, small units can hold 2 people:
m += 6 * LargeUnits + 2 * SmallUnits == 80
# Large mobile production units take up 2 parking spots, small units take up 1 parking spot:
m += 2 * LargeUnits + SmallUnits == TotalParkingSpots
# At least 5 units must be small mobile units:
m += SmallUnits >= 5
# Large units must make up at least 75% of all vehicles:
m += LargeUnits >= 0.75 * (LargeUnits + SmallUnits)

# Objective
# Minimize the total number of parking spots required:
m.minimize(TotalParkingSpots)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBoxes = intvar(0, 999999999)  # Number of small boxes used
LargeBoxes = intvar(0, 999999999)  # Number of large boxes used

# Constraints
m = Model()

# Total number of masks distributed should be at least 750:
m += 25 * SmallBoxes + 45 * LargeBoxes >= 750
# At least 5 large boxes must be used:
m += LargeBoxes >= 5
# There must be at least three times as many small boxes as large boxes:
m += SmallBoxes >= 3 * LargeBoxes

# Objective
# Minimize the total number of boxes used:
m.minimize(SmallBoxes + LargeBoxes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Grain is transported from a farm to local grocery stores in either large bags or tiny bags. Large bags can hold 25 kg of grain and requires 4 units of energy to transport. Tiny bags can hold 6 kg of grain and requires 1.5 units of energy to transport. The distribution process has access to 110 units of energy. Because of popularity of buying in bulk, there must be twice as many large bags as tiny bags of rice. Additionally, there must be at least 20 tiny bags of rice. How many of each size of rice bags should be used to maximize the total amount of grain in weight?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
LargeBags = intvar(0, 999999999)  # Number of large bags used
TinyBags = intvar(0, 999999999)  # Number of tiny bags used

# Constraints
m = Model()

# Total energy available is 110 units:
m += 4 * LargeBags + 1.5 * TinyBags <= 110
# There must be twice as many large bags as tiny bags:
m += LargeBags == 2 * TinyBags
# At least 20 tiny bags of rice:
m += TinyBags >= 20

# Objective
# Maximize the total amount of grain in weight (25 kg per large bag, 6 kg per tiny bag):
m.maximize(25 * LargeBags + 6 * TinyBags)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ElectricJacks = intvar(0, 14)  # Number of automatic electric car jacks
GasJacks = intvar(0, 999999999)  # Number of gas-powered car jacks

# Constraints
m = Model()

# Automatic electric jacks can process 5 cars every hour and use 6 units of electricity:
m += 5 * ElectricJacks <= 50
# Gas-powered jacks can process 4 cars each hour and use 7 units of gas:
m += 4 * GasJacks <= 80
# The shop must use less than 15 automatic electric jacks:
m += ElectricJacks <= 15

# Objective
# Maximize the number of cars processed every hour:
m.maximize(5 * ElectricJacks + 4 * GasJacks)

```
False
False
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Trains = intvar(0, 999999999)  # Number of trains
Trams = intvar(0, 999999999)  # Number of trams

# Constraints
m = Model()

# Each train can transport 120 people per hour and each tram can transport 30 people per hour:
m += 120 * Trains + 30 * Trams >= 600
# The number of trams must be at least twice the number of trains:
m += Trams >= 2 * Trains

# Objective
# Minimize the total number of transportation units required:
m.minimize(Trains + Trams)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
PalladiumHeavy = intvar(0, 999999999)  # Number of palladium-heavy catalyst used
PlatinumHeavy = intvar(0, 999999999)  # Number of platinum-heavy catalyst used

# Constraints
m = Model()

# Available resources:
# Platinum: 450 units available
m += 15 * PalladiumHeavy + 20 * PlatinumHeavy <= 450
# Palladium: 390 units available
m += 25 * PalladiumHeavy + 14 * PlatinumHeavy <= 390

# Conversion rate constraints:
# Palladium-heavy catalyst converts at a rate of 5 units per second
# Platinum-heavy catalyst converts at a rate of 4 units per second
m += 5 * PalladiumHeavy >= 4 * PlatinumHeavy

# Objective
# Maximize the amount converted into carbon dioxide
m.maximize(5 * PalladiumHeavy)

```
False
False
Wrong: 1, Total: 2, Is objective correct: False
---------------------------------------------------------------------------------------------

There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ProcessJ = intvar(0, 999999999)  # Number of times process J is performed
ProcessP = intvar(0, 999999999)  # Number of times process P is performed

# Constraints
m = Model()

# Process J: 5 units of metal, 8 units of water, 3 units of pollution
# Process P: 9 units of metal, 6 units of water, 5 units of pollution

# Total units of water should be at most 1500:
m += 8 * ProcessJ + 6 * ProcessP <= 1500
# Total units of pollution should be at most 1350:
m += 3 * ProcessJ + 5 * ProcessP <= 1350

# Objective
# Maximize the amount of metal extracted (5 units per process J, 9 units per process P):
m.maximize(5 * ProcessJ + 9 * ProcessP)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Escalators = intvar(0, 999999999)  # Number of escalators installed
Elevators = intvar(0, 999999999)  # Number of elevators installed

# Constraints
m = Model()

# Total capacity should be at least 400 people per minute:
m += 20 * Escalators + 8 * Elevators >= 400
# At least three times more escalators than elevators:
m += Escalators >= 3 * Elevators
# At least 2 elevators must be used:
m += Elevators >= 2

# Objective
# Minimize total units of space taken (5 units for escalators, 2 units for elevators):
m.minimize(5 * Escalators + 2 * Elevators)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MethodA = intvar(0, 999999999)  # Number of hours method A is executed
MethodB = intvar(0, 999999999)  # Number of hours method B is executed

# Constraints
m = Model()

# Special element constraint:
m += 60 * MethodA + 65 * MethodB <= 3500
# Fabric production constraint:
m += 25 * MethodA + 45 * MethodB >= 1400
# Plastic production constraint:
m += 14 * MethodA + 25 * MethodB >= 1000

# Objective
# Minimize total time needed:
m.minimize(MethodA + MethodB)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A taxi company will purchase vehicles to rent to their drivers. They are interested in purchasing either motorcycles or sedans. A motorcycle can transport 30 people, produces 4 units of pollution, and earns the taxi company $100 per shift. A sedan can transport 70 people, produces 15 units of pollution and earns the company $225 per shift. Because not every customer is comfortable with a motorcycle, at most 25% of vehicles can be motorcycles. Additionally, the company has committed to producing less than 200 units of pollution. The company needs to transport at least 1200 people every shift. How many of each type of vehicle should be used to maximize the total earnings for the taxi company per shift?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Motorcycles = intvar(0, 999999999)  # Number of motorcycles used per shift
Sedans = intvar(0, 999999999)  # Number of sedans used per shift

# Constraints
m = Model()

# At most 25% of vehicles can be motorcycles:
m += Motorcycles <= 0.25 * (Motorcycles + Sedans)
# Total pollution produced should be less than 200 units:
m += 4 * Motorcycles + 15 * Sedans <= 200
# Total number of people transported should be at least 1200:
m += 30 * Motorcycles + 70 * Sedans >= 1200

# Objective
# Maximize total earnings ($100 per motorcycle, $225 per sedan):
m.maximize(100 * Motorcycles + 225 * Sedans)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
KayakTrips = intvar(0, 999999999)  # Number of trips made by kayak
MotorboatTrips = intvar(0, 999999999)  # Number of trips made by motorboat

# Constraints
m = Model()

# Total number of locals to be moved is at least 550:
m += 4 * KayakTrips + 5 * MotorboatTrips >= 550
# There can be at most 25 motorboat trips:
m += MotorboatTrips <= 25
# At least 75% of the trips should be by kayak:
m += KayakTrips >= 0.75 * (KayakTrips + MotorboatTrips)

# Objective
# Minimize total time needed to transport all the locals (5 minutes per kayak trip, 3 minutes per motorboat trip):
m.minimize(5 * KayakTrips + 3 * MotorboatTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
BloodTests = intvar(0, 999999999)  # Number of blood tests performed
EarTests = intvar(0, 999999999)  # Number of ear tests performed

# Constraints
m = Model()

# Time constraint: Blood test takes 30 minutes, ear test takes 5 minutes, total operating time is 7525 minutes
m += 30 * BloodTests + 5 * EarTests <= 7525
# At least 12 ear tests must be administered:
m += EarTests >= 12
# At least three times as many blood tests should be performed as ear tests:
m += BloodTests >= 3 * EarTests

# Objective
# Maximize the number of tests performed
m.maximize(BloodTests + EarTests)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges $100 per hour and the common company charges $72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SpecializedHours = intvar(0, 999999999)  # Number of hours allocated to the specialized company
CommonHours = intvar(0, 999999999)  # Number of hours allocated to the common company

# Constraints
m = Model()

# The total number of images to annotate is at least 10,000:
m += 60 * SpecializedHours + 40 * CommonHours >= 10000
# At least a third of work must be allocated to the specialized company:
m += SpecializedHours >= (SpecializedHours + CommonHours) / 3

# Objective
# Minimize cost ($100 per hour for specialized company, $72 per hour for common company):
m.minimize(100 * SpecializedHours + 72 * CommonHours)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
GolfCarts = intvar(0, 999999999)  # Number of golf carts used
PullCarts = intvar(0, 999999999)  # Number of pull carts used

# Constraints
m = Model()

# Golf cart can take 4 guests, pull cart can take 1 guest:
# Total number of guests to transport should be at least 80:
m += 4 * GolfCarts + PullCarts >= 80
# At most 60% of carts can be golf carts:
m += GolfCarts <= 0.6 * (GolfCarts + PullCarts)

# Objective
# Minimize the total number of carts needed:
m.minimize(GolfCarts + PullCarts)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AcaiBerrySmoothies = intvar(0, 999999999)  # Number of acai berry smoothies made
BananaChocolateSmoothies = intvar(0, 999999999)  # Number of banana chocolate smoothies made

# Constraints
m = Model()

# Acai berry smoothie requires 7 units of acai berries and 3 units of water:
m += 7 * AcaiBerrySmoothies + 6 * BananaChocolateSmoothies <= 3500
# Banana chocolate smoothie requires 3 units of acai berries and 4 units of water:
m += 3 * AcaiBerrySmoothies + 4 * BananaChocolateSmoothies <= 3200
# At least 35% of the smoothies made must be acai berry smoothies:
m += AcaiBerrySmoothies >= 0.35 * (AcaiBerrySmoothies + BananaChocolateSmoothies)
# Banana chocolate smoothies made must be more than acai berry smoothies made:
m += BananaChocolateSmoothies >= AcaiBerrySmoothies

# Objective
# Minimize the total amount of water used:
m.minimize(3 * AcaiBerrySmoothies + 4 * BananaChocolateSmoothies)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Basketballs = intvar(0, 999999999)  # Number of basketballs produced
Footballs = intvar(0, 999999999)  # Number of footballs produced

# Constraints
m = Model()

# Materials constraint:
m += 5 * Basketballs + 3 * Footballs <= 1500
# Hours constraint:
m += 1 * Basketballs + 2 * Footballs <= 750
# At least three times as many basketballs as footballs:
m += Basketballs >= 3 * Footballs
# At least 50 footballs:
m += Footballs >= 50

# Objective
# Maximize the total number of sports equipment produced:
m.maximize(Basketballs + Footballs)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
InVivoExperiments = intvar(0, 999999999)  # Number of in-vivo experiments scheduled
ExVivoExperiments = intvar(0, 999999999)  # Number of ex-vivo experiments scheduled

# Constraints
m = Model()

# Total time for preparation and execution should not exceed 400 and 500 minutes respectively:
m += 30 * InVivoExperiments + 45 * ExVivoExperiments <= 400
m += 60 * InVivoExperiments + 30 * ExVivoExperiments <= 500

# Objective
# Minimize total radiation received (2 units for in-vivo, 3 units for ex-vivo):
m.minimize(2 * InVivoExperiments + 3 * ExVivoExperiments)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Runners = intvar(0, 999999999)  # Number of deliveries by runners
Canoers = intvar(0, 999999999)  # Number of deliveries by canoers

# Constraints
m = Model()

# Runners can carry three bags of mail each time and takes 4 hours:
m += 3 * Runners * 4 + 10 * Canoers * 2 <= 200
# At most 33% of deliveries can be by canoe:
m += Canoers <= 0.33 * (Runners + Canoers)
# At least 4 runners must be used:
m += Runners >= 4

# Objective
# Maximize the total amount of mail that can be delivered:
m.maximize(3 * Runners + 10 * Canoers)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Smoothies = intvar(0, 999999999)  # Number of smoothies consumed
ProteinBars = intvar(0, 999999999)  # Number of protein bars consumed

# Constraints
m = Model()

# Each smoothie contains 2 units of protein and 300 calories:
# Each protein bar contains 7 units of protein and 250 calories:
# The woman must eat 2 times more protein bars than smoothies:
m += 2 * ProteinBars == Smoothies
# The woman can consume at most 2000 calories:
m += 300 * Smoothies + 250 * ProteinBars <= 2000

# Objective
# Maximize protein intake:
m.maximize(2 * Smoothies + 7 * ProteinBars)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
NorthernHours = intvar(0, 999999999)  # Number of hours the northern factory runs
WesternHours = intvar(0, 999999999)  # Number of hours the western factory runs

# Constraints
m = Model()

# Plastic constraint:
m += 40 * NorthernHours + 35 * WesternHours <= 60000
# Anti-itch injections requirement:
m += 800 * NorthernHours + 650 * WesternHours >= 800000
# Topical cream requirement:
m += 700 * NorthernHours + 750 * WesternHours >= 700000

# Objective
# Minimize total time needed:
m.minimize(NorthernHours + WesternHours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MedicationPatches = intvar(0, 100)  # Number of batches of medication patches
AntibioticCreams = intvar(0, 100)  # Number of batches of antibiotic creams

# Constraints
m = Model()

# Time constraint: 3 minutes per medication patch, 5 minutes per antibiotic cream, total available staff time is 400 minutes:
m += 3 * MedicationPatches + 5 * AntibioticCreams <= 400
# Material constraint: 5 units per medication patch, 6 units per antibiotic cream, total available units is 530:
m += 5 * MedicationPatches + 6 * AntibioticCreams <= 530
# At least twice as many antibiotic creams as medication patches:
m += AntibioticCreams >= 2 * MedicationPatches
# Total batches should be at most 100:
m += MedicationPatches + AntibioticCreams <= 100

# Objective
# Maximize the number of people treated (3 people per medication patch, 2 people per antibiotic cream):
m.maximize(3 * MedicationPatches + 2 * AntibioticCreams)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks.  If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CamelCaravans = intvar(0, 999999999)  # Number of camel caravans organized
DesertTrucks = intvar(0, 999999999)  # Number of desert trucks organized

# Constraints
m = Model()

# Total units of goods to deliver is 1500:
m += 50 * CamelCaravans + 150 * DesertTrucks == 1500
# Camel caravan delivers 50 units per trip, desert truck delivers 150 units per trip:
# 50 * CamelCaravans + 150 * DesertTrucks = 1500
# 50 * CamelCaravans = 1500 - 150 * DesertTrucks
# CamelCaravans = (1500 - 150 * DesertTrucks) / 50
# Camel caravans should be more than desert trucks:
m += CamelCaravans >= DesertTrucks

# Objective
# Minimize total number of hours (12 hours per camel caravan trip, 5 hours per desert truck trip):
m.minimize(12 * CamelCaravans + 5 * DesertTrucks)

```
True
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FirstDoseVaccines = intvar(0, 999999999)  # Number of first-dose vaccines manufactured
SecondDoseVaccines = intvar(0, 999999999)  # Number of second-dose vaccines manufactured

# Constraints
m = Model()

# Total units of antibiotics available is 35,000:
m += 30 * FirstDoseVaccines + 65 * SecondDoseVaccines <= 35000
# Total mg of gelatine available is not considered as a constraint

# More first-dose vaccines than second-dose vaccines:
m += FirstDoseVaccines >= SecondDoseVaccines
# At least 40 second-dose vaccines must be made:
m += SecondDoseVaccines >= 40

# Objective
# Minimize the amount of gelatine used (20 mg per first-dose vaccine, 60 mg per second-dose vaccine):
m.minimize(20 * FirstDoseVaccines + 60 * SecondDoseVaccines)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ChemicalA = intvar(0, 999999999)  # Units of chemical A added to the mixer
ChemicalB = intvar(0, 999999999)  # Units of chemical B added to the mixer

# Constraints
m = Model()

# Chemical A takes 30 seconds to be effective, Chemical B takes 45 seconds to be effective
# Total time taken should be minimized
TotalTime = 30 * ChemicalA + 45 * ChemicalB

# There has to be at most a third as much chemical A as chemical B in the mixer
m += ChemicalA <= 1/3 * ChemicalB

# There has to be at least 300 units of chemical A in the mixer
m += ChemicalA >= 300

# There has to be at least 1500 units of total chemicals in the mixer
m += ChemicalA + ChemicalB >= 1500

# Objective
# Minimize the total time it takes for the mixed bread to be ready
m.minimize(TotalTime)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A senior home has snacks of spinach and soybeans to increase their intake of iron. A cup of spinach contains 100 units of fibre and 5 mg of iron. A cup of soybeans contains 80 units of fibre and 12 mg of iron. Due to other nutritional requirements, the nurses decided that the number of cups of spinach must exceed the number of cups of soybeans. Furthermore, a cup of spinach contains 30 calories while a cup of soybeans contains 100 calories. If they schedule that the elderly need in total at least 12000 units of fibre and 300 mg of iron, how many cups of each should the nurses schedule to maximize the seniors’ total caloric intake?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SpinachCups = intvar(0, 999999999)  # Number of cups of spinach scheduled
SoybeansCups = intvar(0, 999999999)  # Number of cups of soybeans scheduled

# Constraints
m = Model()

# Nutritional requirements:
# At least 12000 units of fibre:
m += 100 * SpinachCups + 80 * SoybeansCups >= 12000
# At least 300 mg of iron:
m += 5 * SpinachCups + 12 * SoybeansCups >= 300
# Number of cups of spinach must exceed the number of cups of soybeans:
m += SpinachCups >= SoybeansCups

# Objective
# Maximize total caloric intake (30 calories per cup of spinach, 100 calories per cup of soybeans):
m.maximize(30 * SpinachCups + 100 * SoybeansCups)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A keyboard manufacturer makes mechanical and standard keyboards. Mechanical keyboards are becoming more popular and thus the manufacturer aims to have five times as many mechanical than standard keyboards. A mechanical keyboard costs five units of plastic and two units of solder whereas a standard keyboard costs two units of plastic and one unit of solder. There are still customers that prefer a less noisy alternative. Therefore, there must be at least 30 standard keyboards. If the company has available 1000 units of plastic and 250 units of solder, how many of each type should be manufactured to maximize the total number of keyboards?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MechanicalKeyboards = intvar(0, 999999999)  # Number of mechanical keyboards manufactured
StandardKeyboards = intvar(0, 999999999)  # Number of standard keyboards manufactured

# Constraints
m = Model()

# Each mechanical keyboard costs 5 units of plastic and 2 units of solder:
m += 5 * MechanicalKeyboards <= 1000
m += 2 * MechanicalKeyboards <= 250
# Each standard keyboard costs 2 units of plastic and 1 unit of solder:
m += 2 * StandardKeyboards <= 1000
m += 1 * StandardKeyboards <= 250
# There must be at least 30 standard keyboards:
m += StandardKeyboards >= 30
# The manufacturer aims to have five times as many mechanical keyboards as standard keyboards:
m += MechanicalKeyboards == 5 * StandardKeyboards

# Objective
# Maximize the total number of keyboards:
m.maximize(MechanicalKeyboards + StandardKeyboards)

```
True
True
Wrong: 4, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Sedans = intvar(0, 999999999)  # Number of sedans purchased
Buses = intvar(0, 999999999)  # Number of buses purchased

# Constraints
m = Model()

# Total units of pollution should not exceed 800:
m += 10 * Sedans + 40 * Buses <= 800
# Total number of customers should be at least 4600:
m += 50 * Sedans + 250 * Buses >= 4600

# Objective
# Minimize the total number of vehicles needed (sedans and buses):
m.minimize(Sedans + Buses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A dessert shop is popular for their only two desserts - matcha ice cream and orange sorbet. Two units of flavouring and four units of ice cream is required to make one order of matcha ice cream. Four units of flavouring and three units of water is required to make an order of orange sorbet. The dessert shop has recently been getting more orders online for orange sorbet and therefore, there should be more orange sorbet made than matcha ice cream. However, at least fifteen percent of desserts made must be matcha ice cream. The dessert shop has available 600 units of ice cream and 550 units of water. How many of each dessert should the shop make to minimize the total amount of flavouring needed?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
MatchaIceCream = intvar(0, 999999999)  # Number of orders of matcha ice cream
OrangeSorbet = intvar(0, 999999999)  # Number of orders of orange sorbet

# Constraints
m = Model()

# Ingredients availability:
# Two units of flavouring and four units of ice cream are required for one order of matcha ice cream:
m += 2 * MatchaIceCream <= 600
# Four units of flavouring and three units of water are required for one order of orange sorbet:
m += 4 * OrangeSorbet <= 550

# More orange sorbet should be made than matcha ice cream:
m += OrangeSorbet >= MatchaIceCream
# At least fifteen percent of desserts made must be matcha ice cream:
m += MatchaIceCream >= 0.15 * (MatchaIceCream + OrangeSorbet)

# Objective
# Minimize the total amount of flavouring needed:
m.minimize(2 * MatchaIceCream + 4 * OrangeSorbet)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A daycare center has children they must pick up and can use two types of vehicles: bus or a personal car. A bus can carry 9 children while a personal car can carry 4 children. The daycare has to pick up at least 100 children. Additionally, due to limitations of pollution, there must be more buses than personal cars. But some children require extra attention. Therefore, there must be at least 5 personal cars. How many of each form of transportation should the daycare center schedule for to minimize the total number of vehicles?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Buses = intvar(0, 999999999)  # Number of buses scheduled
Cars = intvar(0, 999999999)  # Number of personal cars scheduled

# Constraints
m = Model()

# Total number of children to pick up should be at least 100:
m += 9 * Buses + 4 * Cars >= 100
# There must be more buses than personal cars:
m += Buses > Cars
# At least 5 personal cars are required:
m += Cars >= 5

# Objective
# Minimize the total number of vehicles:
m.minimize(Buses + Cars)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both coconut oil and lavender need to be added to a body wash. One unit of coconut oil takes 0.7 minutes to be effective while one unit of lavender takes 0.9 minutes to be effective. The body wash must contain at least 300 units of coconut oil and at most 550 units of both ingredients. Since too much coconut oil can make the body wash too oily, there can be at most thrice the amount of coconut oil as lavenders in the body wash. How many units of each should be added to the body wash to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
CoconutOil = intvar(0, 999999999)  # Units of coconut oil added to body wash
Lavender = intvar(0, 999999999)  # Units of lavender added to body wash

# Constraints
m = Model()

# Total units of both ingredients should be at most 550:
m += CoconutOil + Lavender <= 550
# At least 300 units of coconut oil:
m += CoconutOil >= 300
# There can be at most thrice the amount of coconut oil as lavenders:
m += CoconutOil <= 3 * Lavender

# Objective
# Minimize total time (0.7 minutes per unit of coconut oil, 0.9 minutes per unit of lavender):
m.minimize(0.7 * CoconutOil + 0.9 * Lavender)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemical company uses two tests, a salinity test and a pH test. Each unit of the salinity test requires three probes. Whereas each unit of the pH test requires two probes. The chemical company must perform at least 250 pH tests. In total, at least 400 tests must be performed. Further, because of the importance of the salinity test, there must be at most 1.5 times more pH tests than salinity tests. How many times should each test be performed to minimize the total number of probes used?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
SalinityTests = intvar(0, 999999999)  # Number of salinity tests performed
pHTests = intvar(0, 999999999)  # Number of pH tests performed

# Constraints
m = Model()

# Each unit of the salinity test requires 3 probes:
# Each unit of the pH test requires 2 probes:
# Total number of probes used should be minimized:
m += 3 * SalinityTests + 2 * pHTests

# At least 250 pH tests must be performed:
m += pHTests >= 250
# At least 400 tests must be performed in total:
m += SalinityTests + pHTests >= 400
# There must be at most 1.5 times more pH tests than salinity tests:
m += pHTests <= 1.5 * SalinityTests

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A municipality hires full-time and part-time staff to deliver mail. Part-time staff works 15 hours per week and gets paid 450 dollars whereas a full-time staff works 40 hours every week and gets paid 1280 dollars  for that week.  Since it is the week leading up to a holiday, planning ahead, the municipality needs 1000 hours of mail staff labor. The municipality has a budget of 31500 dollars for mail delivery for this season. How many of each type of staff should the municipality hire to decrease the total number of staff?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
FullTimeStaff = intvar(0, 999999999)  # Number of full-time staff hired
PartTimeStaff = intvar(0, 999999999)  # Number of part-time staff hired

# Constraints
m = Model()

# Full-time staff works 40 hours per week, part-time staff works 15 hours per week:
m += 40 * FullTimeStaff + 15 * PartTimeStaff == 1000
# Full-time staff gets paid 1280 dollars, part-time staff gets paid 450 dollars:
m += 1280 * FullTimeStaff + 450 * PartTimeStaff <= 31500

# Objective
# Minimize the total number of staff hired:
m.minimize(FullTimeStaff + PartTimeStaff)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A landscaper has 2500 square feet of grass land in a customer’s backyard where they need to cut grass using either a heavy-duty yard machine or a gas lawn mower. For each square foot of land, the heavy-duty yard machine requires 2 seconds while the gas lawn mower takes 5 seconds. Per square foot, the heavy-duty yard machine produces 12 units of pollution and requires 3 units of fuel. Conversely, the gas lawn mower generates 10 units of pollution for each square foot and requires 2 units of fuel. There are 450 units of fuel available and the landscaper can produce no more than 2000 units of pollution. For how many square feet should each machine be used to minimize the time required to cut this customer’s backyard?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
HeavyDutyMachineArea = intvar(0, 2500)  # Square feet of land cut by the heavy-duty yard machine
GasLawnMowerArea = intvar(0, 2500)  # Square feet of land cut by the gas lawn mower

# Constraints
m = Model()

# Total square feet of land should not exceed 2500:
m += HeavyDutyMachineArea + GasLawnMowerArea <= 2500
# Fuel constraint (3 units of fuel per square foot for the heavy-duty machine, 2 units for the gas lawn mower):
m += 3 * HeavyDutyMachineArea + 2 * GasLawnMowerArea <= 450
# Pollution constraint (12 units per square foot for the heavy-duty machine, 10 units for the gas lawn mower):
m += 12 * HeavyDutyMachineArea + 10 * GasLawnMowerArea <= 2000

# Objective
# Minimize time (2 seconds per square foot for the heavy-duty machine, 5 seconds for the gas lawn mower):
m.minimize(2 * HeavyDutyMachineArea + 5 * GasLawnMowerArea)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A park is designing their trails and can either create a wide trail or a narrow trail. A wide trail can take 50 visitors every day while the narrow trail expects 20 visitors every day. The wide trail will introduce 6 units of garbage and the narrow trail will introduce 3 units of garbage. There can be at most 3 wide trails and the park hopes to have at most 225 visitors every day. How many of each type of trail should the park construct to minimize the total amount of garbage produced.
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
WideTrails = intvar(0, 3)  # Number of wide trails constructed
NarrowTrails = intvar(0, 999999999)  # Number of narrow trails constructed

# Constraints
m = Model()

# Total number of visitors should be at most 225:
m += 50 * WideTrails + 20 * NarrowTrails <= 225
# Wide trail introduces 6 units of garbage, narrow trail introduces 3 units of garbage:
TotalGarbage = 6 * WideTrails + 3 * NarrowTrails

# Objective
# Minimize total amount of garbage produced:
m.minimize(TotalGarbage)

```
True
True
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A brewery can ferment their product into either wine or kombucha. Each unit of wine requires 3 units of fruit and 8 units of water. Each unit of kombucha requires 5 units of fruit and 7 units of tea. The company has available 7000 units of water and 9000 units of tea. Wine sells for more, therefore the number of wine must be larger than the number of kombucha. Additionally, at least 20% of their products made must be kombucha. How many of each should the brewery make to minimize the total units of fruit required?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
Wine = intvar(0, 999999999)  # Number of units of wine produced
Kombucha = intvar(0, 999999999)  # Number of units of kombucha produced

# Constraints
m = Model()

# Units of fruit and water required for wine and kombucha:
# Fruit: 3 units for wine, 5 units for kombucha
m += 3 * Wine + 5 * Kombucha <= 9000
# Water: 8 units for wine, 7 units for kombucha
m += 8 * Wine + 7 * Kombucha <= 7000

# Wine must be larger than kombucha:
m += Wine >= Kombucha
# At least 20% of products made must be kombucha:
m += Kombucha >= 0.2 * (Wine + Kombucha)

# Objective
# Minimize total units of fruit required:
m.minimize(3 * Wine + 5 * Kombucha)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital can transport their patients either using a type II ambulance or hospital van. The hospital needs to transport 320 patients every day. A type II ambulance is mounted on a truck-style chassis and can move 20 patients every shift and costs the hospital (including gas and salary) $820. A hospital van can move 15 patients and costs the hospital $550 every shift. The hospital can have at most 60% of shifts be hospital vans due to union limitations of the type II ambulance drivers. How many of shift using each type of vehicle should be scheduled to minimize the total cost to the hospital?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
AmbulanceShifts = intvar(0, 999999999)  # Number of shifts using type II ambulance
VanShifts = intvar(0, 999999999)  # Number of shifts using hospital van

# Constraints
m = Model()

# Total number of patients to transport is 320 every day:
m += 20 * AmbulanceShifts + 15 * VanShifts == 320
# Cost of type II ambulance is $820 per shift, cost of hospital van is $550 per shift:
m += 820 * AmbulanceShifts + 550 * VanShifts

# At most 60% of shifts can be hospital vans:
m += VanShifts <= 0.6 * (AmbulanceShifts + VanShifts)

# Objective
# Minimize total cost to the hospital:
m.minimize(820 * AmbulanceShifts + 550 * VanShifts)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An incandescent bulb manufacturing company uses either an argon gas approach or halogen gas approach to fill their light bulbs. The argon gas approach uses 10 units of gas and 12 units of glass to make 2 light bulbs. The halogen gas approach uses 12 units of gas and 8 units of glass to make 3 light bulbs. Additionally, the argon gas approach generates 3 units of heat while the halogen gas approach creates 4 units of heat. The manufacturing company has available 150 units of gas and 120 units of glass. If at most 28 units of heat can be generated during the manufacturing process, how many of each method should be used to maximize the number of light bulbs produced?
N/A
```python

from cpmpy import Model, intvar

# Decision Variables
ArgonApproach = intvar(0, 999999999)  # Number of light bulbs produced using argon gas approach
HalogenApproach = intvar(0, 999999999)  # Number of light bulbs produced using halogen gas approach

# Constraints
m = Model()

# Gas constraint:
m += 10 * ArgonApproach + 12 * HalogenApproach <= 150
# Glass constraint:
m += 12 * ArgonApproach + 8 * HalogenApproach <= 120
# Heat constraint:
m += 3 * ArgonApproach + 4 * HalogenApproach <= 28

# Objective
# Maximize the number of light bulbs produced:
m.maximize(ArgonApproach + HalogenApproach)

```
False
False
Wrong: 0, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

