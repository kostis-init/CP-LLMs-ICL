Solution accuracy: 84.42906574394463%
Constraint accuracy: 87.27915194346289%
Model accuracy: 79.93079584775086%

Wrong solutions: 30, error solutions: 15
Wrong constraints: 87, error constraints: 57, total: 1132
Wrong models: 58, error models: 0
---------------------------------------------------------------------------------------------

A fishery wants to transport their catch. They can either use local sled dogs or trucks. Local sled dogs can take 100 fish per trip while trucks can take 300 fish per trip. The cost per trip for sled dogs is $50 while the cost per trip for a truck is $100. The budget is at most $1000 and the number of sled dog trips must be less than the number of truck trips. Formulate an LP to maximize the number of fish that can be transported.

Decision Variables:
- Number of sled dog trips: SledDogs
- Number of truck trips: Trucks

Constraints:
- The budget for transportation is at most $1000:
  50 * SledDogs + 100 * Trucks <= 1000
- The number of sled dog trips must be less than the number of truck trips:
  SledDogs < Trucks

Objective:
- Maximize the number of fish that can be transported (100 fish per sled dog trip, 300 fish per truck trip):
  100 * SledDogs + 300 * Trucks
```python

from cpmpy import Model, intvar

# Decision Variables
SledDogs = intvar(0, 999999999)  # Number of sled dog trips
Trucks = intvar(0, 999999999)  # Number of truck trips

# Constraints
m = Model()

# The budget for transportation is at most $1000:
m += 50 * SledDogs + 100 * Trucks <= 1000
# The number of sled dog trips must be less than the number of truck trips:
m += SledDogs < Trucks

# Objective
# Maximize the number of fish that can be transported (100 fish per sled dog trip, 300 fish per truck trip):
m.maximize(100 * SledDogs + 300 * Trucks)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An office supply company makes two types of printers: color printers and black and white printers. Different sections of the factory with different teams produce each printer. The color printer team can produce at most 20 color printers per day while the black and white printer team can produce at most 30 black and white printers per day. Both teams require use of the same paper tray installing machine and this machine can make at most 35 printers of either type each day. Color printers generate a profit of $200 per printer while black and white printers generate a profit of $70 per printer. How many of each printer should be made to maximize the company's profit?
Decision Variables:
- Number of color printers made per day: ColorPrinters
- Number of black and white printers made per day: BWPrinters

Constraints:
- Maximum production rate for color printers is 20 per day:
  ColorPrinters <= 20
- Maximum production rate for black and white printers is 30 per day:
  BWPrinters <= 30
- The paper tray installing machine can process at most 35 printers per day of either type:
  ColorPrinters + BWPrinters <= 35

Objective:
- Maximize profit (200 dollars per color printer, 70 dollars per black and white printer):
  200 * ColorPrinters + 70 * BWPrinters
```python

from cpmpy import Model, intvar

# Decision Variables
ColorPrinters = intvar(0, 999999999)  # Number of color printers made per day
BWPrinters = intvar(0, 999999999)  # Number of black and white printers made per day

# Constraints
m = Model()

# Maximum production rate for color printers is 20 per day:
m += ColorPrinters <= 20
# Maximum production rate for black and white printers is 30 per day:
m += BWPrinters <= 30
# The paper tray installing machine can process at most 35 printers per day of either type:
m += ColorPrinters + BWPrinters <= 35

# Objective
# Maximize profit (200 dollars per color printer, 70 dollars per black and white printer):
m.maximize(200 * ColorPrinters + 70 * BWPrinters)

```
False
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An accounting firm has senior accountants earning $3000 per week and junior accountants earning $1000 per week. The contracts with companies to provide accounting services require at least 100 accountants, of whom at least 5 must be senior accountants. To make sure there is enough experience on the accounting team, the number of senior accountants should be at least a third of the number to junior accountants. The firm wants to keep the weekly wage bill below $150000. Formulate an LP to minimize the wage bill.
Decision Variables:
- Number of senior accountants: SeniorAccountants
- Number of junior accountants: JuniorAccountants

Constraints:
- Weekly wage bill should be below $150000:
  3000 * SeniorAccountants + 1000 * JuniorAccountants <= 150000
- Total number of accountants should be at least 100:
  SeniorAccountants + JuniorAccountants >= 100
- At least 5 senior accountants:
  SeniorAccountants >= 5
- Number of senior accountants should be at least a third of the number of junior accountants:
  SeniorAccountants >= 1/3 * JuniorAccountants

Objective:
- Minimize the wage bill:
  3000 * SeniorAccountants + 1000 * JuniorAccountants
```python

from cpmpy import Model, intvar

# Decision Variables
SeniorAccountants = intvar(0, 999999999)  # Number of senior accountants
JuniorAccountants = intvar(0, 999999999)  # Number of junior accountants

# Constraints
m = Model()

# Weekly wage bill should be below $150000:
m += 3000 * SeniorAccountants + 1000 * JuniorAccountants <= 150000
# Total number of accountants should be at least 100:
m += SeniorAccountants + JuniorAccountants >= 100
# At least 5 senior accountants:
m += SeniorAccountants >= 5
# The number of senior accountants should be at least a third of the number of junior accountants:
m += SeniorAccountants >= (1/3) * JuniorAccountants

# Objective
# Minimize the wage bill:
m.minimize(3000 * SeniorAccountants + 1000 * JuniorAccountants)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

Ben is growing apples and pears on his orchard. He has 50 acres available on which he must grow a minimum of 5 acres of apples and a minimum of 10 acres of pears to meet demands. The profit per apple is $2 and the profit per pear is $4. He prefers to grow more pears than apples but limitations in his workforce allow him to grow at most twice the amount of pears as apples. How many of each fruit should Ben grow in order to maximize his profit? What is that profit?
Decision Variables:
- Number of acres for apples: AppleAcres
- Number of acres for pears: PearAcres

Constraints:
- Total acres used should not exceed 50:
  AppleAcres + PearAcres <= 50
- At least 5 acres of apples must be grown:
  AppleAcres >= 5
- At least 10 acres of pears must be grown:
  PearAcres >= 10
- Workforce limitation (at most twice the amount of pears as apples):
  PearAcres <= 2 * AppleAcres

Objective:
- Maximize profit ($2 per acre for apples and $4 per acre for pears):
  2 * AppleAcres + 4 * PearAcres
```python

from cpmpy import Model, intvar

# Decision Variables
AppleAcres = intvar(5, 50)  # Number of acres for apples
PearAcres = intvar(10, 50)  # Number of acres for pears

# Constraints
m = Model()

# Total acres used should not exceed 50:
m += AppleAcres + PearAcres <= 50
# Workforce limitation (at most twice the amount of pears as apples):
m += PearAcres <= 2 * AppleAcres

# Objective
# Maximize profit ($2 per acre for apples and $4 per acre for pears):
m.maximize(2 * AppleAcres + 4 * PearAcres)

```
True
False
Wrong: 3, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A lighting company makes desk-lamps and night-lamps. There is an expected demand of at least 30 desk-lamps and 50 night-lamps each day. However, due to the size of their factory, they can make at most 150 desk-lamps and 180 night-lamps per day. To satisfy a contract, a minimum of 100 lamps must be made each day. If the profit per desk-lamp sold is $5 and the profit per night-lamp sold is $8, how many lamps of each type should be made to maximize profit?
Decision Variables:
- Number of desk-lamps made per day: DeskLamps
- Number of night-lamps made per day: NightLamps

Constraints:
- Expected demand of at least 30 desk-lamps and 50 night-lamps each day:
  DeskLamps >= 30
  NightLamps >= 50
- Maximum production capacity of 150 desk-lamps and 180 night-lamps per day:
  DeskLamps <= 150
  NightLamps <= 180
- Minimum of 100 lamps must be made each day:
  DeskLamps + NightLamps >= 100

Objective:
- Maximize profit ($5 profit per desk-lamp, $8 profit per night-lamp):
  5 * DeskLamps + 8 * NightLamps
```python

from cpmpy import Model, intvar

# Decision Variables
DeskLamps = intvar(0, 999999999)  # Number of desk-lamps made per day
NightLamps = intvar(0, 999999999)  # Number of night-lamps made per day

# Constraints
m = Model()

# Expected demand of at least 30 desk-lamps and 50 night-lamps each day:
m += DeskLamps >= 30
m += NightLamps >= 50
# Maximum production capacity of 150 desk-lamps and 180 night-lamps per day:
m += DeskLamps <= 150
m += NightLamps <= 180
# Minimum of 100 lamps must be made each day:
m += DeskLamps + NightLamps >= 100

# Objective
# Maximize profit ($5 profit per desk-lamp, $8 profit per night-lamp):
m.maximize(5 * DeskLamps + 8 * NightLamps)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

Mr. Roberts want to invest in the telecom and healthcare industries. He has $100000 to invest. He has decided that the amount invested in telecom be at least three times as much as the amount invested in healthcare. But the money invested in telecom must be at most $70000. If investments in telecom earn 3% and investments in healthcare earn 1%, how much should Mr. Roberts invest in each to maximize profit?
Decision Variables:
- Amount invested in the telecom industry: Telecom
- Amount invested in the healthcare industry: Healthcare

Constraints:
- Total investment should not exceed $100000:
  Telecom + Healthcare <= 100000
- The amount invested in telecom must be at least three times the amount invested in healthcare:
  Telecom >= 3 * Healthcare
- The amount invested in telecom must be at most $70000:
  Telecom <= 70000

Objective:
- Maximize profit (3% return for telecom, 1% return for healthcare):
  0.03 * Telecom + 0.01 * Healthcare
```python

from cpmpy import Model, intvar

# Decision Variables
Telecom = intvar(0, 70000)  # Amount invested in the telecom industry
Healthcare = intvar(0, 100000)  # Amount invested in the healthcare industry

# Constraints
m = Model()

# Total investment should not exceed $100000:
m += Telecom + Healthcare <= 100000
# The amount invested in telecom must be at least three times the amount invested in healthcare:
m += Telecom >= 3 * Healthcare
# The amount invested in telecom must be at most $70000:
m += Telecom <= 70000

# Objective
# Maximize profit (3% return for telecom, 1% return for healthcare):
m.maximize(0.03 * Telecom + 0.01 * Healthcare)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer has 140 hectares available to grow tomatoes and potatoes. She prefers to plant more tomatoes than potatoes, but the soil and weather conditions allow her to grow at most twice the amount of tomatoes to that of potatoes. In addition, she must grow at least 20 hectares of tomatoes and at least 30 hectares of potatoes to meet community demands. If the profit per hectare of tomatoes is $350 and the profit per hectare of potatoes is $600, how many hectares of each crop should she plant to maximize profit? What is this profit?
Decision Variables:
- Hectares of tomatoes planted: Tomatoes
- Hectares of potatoes planted: Potatoes

Constraints:
- Total hectares used should not exceed 140:
  Tomatoes + Potatoes <= 140
- Tomatoes should be at least 20 hectares:
  Tomatoes >= 20
- Potatoes should be at least 30 hectares:
  Potatoes >= 30
- Tomatoes should be at most twice the amount of potatoes:
  Tomatoes <= 2 * Potatoes

Objective:
- Maximize profit (350 dollars per hectare of tomatoes, 600 dollars per hectare of potatoes):
  350 * Tomatoes + 600 * Potatoes
```python

from cpmpy import Model, intvar

# Decision Variables
Tomatoes = intvar(0, 999999999)  # hectares of tomatoes
Potatoes = intvar(0, 999999999)  # hectares of potatoes

# Constraints
m = Model()

# Total hectares used should not exceed 140:
m += Tomatoes + Potatoes <= 140
# Tomatoes should be at least 20 hectares:
m += Tomatoes >= 20
# Potatoes should be at least 30 hectares:
m += Potatoes >= 30
# Tomatoes should be at most twice the amount of potatoes:
m += Tomatoes <= 2 * Potatoes

# Objective
# Maximize profit (350 dollars per hectare of tomatoes, 600 dollars per hectare of potatoes):
m.maximize(350 * Tomatoes + 600 * Potatoes)

```
False
False
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A audio company make two types of headphones: wired headphones and wireless headphones. Two different teams make each type of headphones. The wired team can make at most 100 wired headphones per day and the wireless team can make at most 170 wireless headphones per day. Both teams require use of a shared audio testing machine, and this machine can be used to make a maximum of 150 headphones per day. The profit per wired headphone is $50 and the profit per wireless headphone $20. How many of each headphone should be made to maximize profit?
Decision Variables:
- Number of wired headphones made per day: WiredHeadphones
- Number of wireless headphones made per day: WirelessHeadphones

Constraints:
- Total number of headphones made by both teams should not exceed 150 per day:
  WiredHeadphones + WirelessHeadphones <= 150
- Team A can make at most 100 wired headphones per day:
  WiredHeadphones <= 100
- Team B can make at most 170 wireless headphones per day:
  WirelessHeadphones <= 170

Objective:
- Maximize profit (50 dollars per wired headphone, 20 dollars per wireless headphone):
  50 * WiredHeadphones + 20 * WirelessHeadphones
```python

from cpmpy import Model, intvar

# Decision Variables
WiredHeadphones = intvar(0, 999999999)  # Number of wired headphones made per day
WirelessHeadphones = intvar(0, 999999999)  # Number of wireless headphones made per day

# Constraints
m = Model()

# Total number of headphones made by both teams should not exceed 150 per day:
m += WiredHeadphones + WirelessHeadphones <= 150
# Team A can make at most 100 wired headphones per day:
m += WiredHeadphones <= 100
# Team B can make at most 170 wireless headphones per day:
m += WirelessHeadphones <= 170

# Objective
# Maximize profit (50 dollars per wired headphone, 20 dollars per wireless headphone):
m.maximize(50 * WiredHeadphones + 20 * WirelessHeadphones)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Jacob has $3000 to invest. He has decided to invest in his favorite clothing company and his favorite tech company. He has decided that the money invested in his favorite clothing company must be at least four times as much as the amount invested in his favorite tech company. He has also limited himself to invest at most $500 in his favorite tech company. If the money invested in his favorite clothing company earns 7% and the money invested in his favorite tech company earns 10%, how much should he invest in each to maximize his profit?
Decision Variables:
- Amount invested in favorite clothing company: ClothingCompany
- Amount invested in favorite tech company: TechCompany

Constraints:
- Total investment should not exceed $3000:
  ClothingCompany + TechCompany <= 3000
- The amount invested in favorite clothing company must be at least four times as much as the amount invested in favorite tech company:
  ClothingCompany >= 4 * TechCompany
- At most $500 can be invested in favorite tech company:
  TechCompany <= 500

Objective:
- Maximize profit (7% return from favorite clothing company, 10% return from favorite tech company):
  0.07 * ClothingCompany + 0.10 * TechCompany
```python

from cpmpy import Model, intvar

# Decision Variables
ClothingCompany = intvar(0, 999999999)  # Amount invested in favorite clothing company
TechCompany = intvar(0, 500)  # Amount invested in favorite tech company

# Constraints
m = Model()

# Total investment should not exceed $3000:
m += ClothingCompany + TechCompany <= 3000
# The amount invested in favorite clothing company must be at least four times as much as the amount invested in favorite tech company:
m += ClothingCompany >= 4 * TechCompany
# At most $500 can be invested in favorite tech company:
m += TechCompany <= 500

# Objective
# Maximize profit (7% return from favorite clothing company, 10% return from favorite tech company):
m.maximize(0.07 * ClothingCompany + 0.10 * TechCompany)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Each month a store owner can spend at most $500 on carrots and cucumbers. A carrot costs the store owner $0.30 and a cucumber costs the store owner $0.50. Each carrot is sold for a profit of $0.75 and each cucumber is sold for a profit of $0.80. The owner estimates that the number of cucumbers sold is at most a third of the number of carrots sold. He also estimates that at least 300 carrots but at most 500 carrots are sold each month. How many of each, carrots and cucumbers, should be sold in order to maximize the profit?
Decision Variables:
- Number of carrots sold: Carrots
- Number of cucumbers sold: Cucumbers

Constraints:
- The total cost for carrots and cucumbers should not exceed $500 (Carrots cost $0.30 each, Cucumbers cost $0.50 each):
  0.3 * Carrots + 0.5 * Cucumbers <= 500
- At least 300 carrots are sold each month:
  Carrots >= 300
- At most 500 carrots are sold each month:
  Carrots <= 500
- The number of cucumbers sold is at most a third of the number of carrots sold:
  Cucumbers <= Carrots / 3

Objective:
- Maximize profit (0.75 dollars profit per carrot, 0.80 dollars profit per cucumber):
  0.75 * Carrots + 0.80 * Cucumbers
```python

from cpmpy import Model, intvar

# Decision Variables
Carrots = intvar(0, 999999999)  # Number of carrots sold
Cucumbers = intvar(0, 999999999)  # Number of cucumbers sold

# Constraints
m = Model()

# The total cost for carrots and cucumbers should not exceed $500:
m += 0.30 * Carrots + 0.50 * Cucumbers <= 500
# At least 300 carrots are sold each month:
m += Carrots >= 300
# At most 500 carrots are sold each month:
m += Carrots <= 500
# The number of cucumbers sold is at most a third of the number of carrots sold:
m += Cucumbers <= Carrots / 3

# Objective
# Maximize profit (0.75 dollars profit per carrot, 0.80 dollars profit per cucumber):
m.maximize(0.75 * Carrots + 0.80 * Cucumbers)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer wants to manufacture a special plant nutrition using fertilizers A and B. Each kg of fertilizer A contains 13 units of nitrogen, 5 units of phosphoric acid, 6 units of vitamin A and 5 units of vitamin D. Each kg of fertilizer B contains 8 units of nitrogen, 14 units of phosphoric acid, 6 units of vitamin A and 9 units of vitamin D. To be effective, the plant nutrition requires a minimum 220 units of nitrogen, a minimum of 160 units of phosphoric acid, and no more than 350 units of vitamin A. How many kg of each fertilizer should be used to minimize the amount of vitamin D in the nutrition? What is the minimum amount of vitamin D?

Decision Variables:
- kg of fertilizer A used: A
- kg of fertilizer B used: B

Constraints:
- Minimum 220 units of nitrogen required:
  13 * A + 8 * B >= 220
- Minimum 160 units of phosphoric acid required:
  5 * A + 14 * B >= 160
- No more than 350 units of vitamin A allowed:
  6 * A + 6 * B <= 350

Objective:
- Minimize the amount of vitamin D in the nutrition (5 units per kg of A, 9 units per kg of B):
  5 * A + 9 * B
```python

from cpmpy import Model, intvar

# Decision Variables
A = intvar(0, 999999999)  # kg of fertilizer A used
B = intvar(0, 999999999)  # kg of fertilizer B used

# Constraints
m = Model()

# Minimum 220 units of nitrogen required:
m += 13 * A + 8 * B >= 220
# Minimum 160 units of phosphoric acid required:
m += 5 * A + 14 * B >= 160
# No more than 350 units of vitamin A allowed:
m += 6 * A + 6 * B <= 350

# Objective
# Minimize the amount of vitamin D in the nutrition (5 units per kg of A, 9 units per kg of B):
m.minimize(5 * A + 9 * B)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Mrs. Watson wants to invest in the real-estate market and has a total budget of at most $760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a $0.50 profit and each dollar invested in detached houses yields a $1 profit. A minimum of 20% of all money invested must be in condos, and at least $20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.
Decision Variables:
- Money invested in condos: Condos
- Money invested in detached houses: DetachedHouses

Constraints:
- Total investment should not exceed 760000 dollars:
  Condos + DetachedHouses <= 760000
- At least 20% of all money invested must be in condos:
  Condos >= 0.20 * (Condos + DetachedHouses)
- At least 20000 dollars must be invested in detached houses:
  DetachedHouses >= 20000

Objective:
- Maximize total profit (0.50 profit per dollar invested in condos, 1 profit per dollar invested in detached houses):
  0.50 * Condos + 1 * DetachedHouses
```python

from cpmpy import Model, intvar

# Decision Variables
Condos = intvar(0, 999999999)  # Money invested in condos
DetachedHouses = intvar(0, 999999999)  # Money invested in detached houses

# Constraints
m = Model()

# Total investment should not exceed $760000:
m += Condos + DetachedHouses <= 760000
# At least 20% of all money invested must be in condos:
m += Condos >= 0.20 * (Condos + DetachedHouses)
# At least $20000 must be invested in detached houses:
m += DetachedHouses >= 20000

# Objective
# Maximize total profit (0.50 profit per dollar invested in condos, 1 profit per dollar invested in detached houses):
m.maximize(0.50 * Condos + 1 * DetachedHouses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of $3 per regular sandwich and a profit of $4 per special sandwich. How many of each sandwich should be made to maximize profit?
Decision Variables:
- Number of regular sandwiches made: RegularSandwich
- Number of special sandwiches made: SpecialSandwich

Constraints:
- The joint has a total of 40 eggs, and each regular sandwich requires 2 eggs while each special sandwich requires 3 eggs:
  2 * RegularSandwich + 3 * SpecialSandwich <= 40
- The joint has a total of 70 slices of bacon, and each regular sandwich requires 3 slices of bacon while each special sandwich requires 5 slices of bacon:
  3 * RegularSandwich + 5 * SpecialSandwich <= 70

Objective:
- Maximize profit (3 dollars per regular sandwich, 4 dollars per special sandwich):
  3 * RegularSandwich + 4 * SpecialSandwich
```python

from cpmpy import Model, intvar

# Decision Variables
RegularSandwich = intvar(0, 999999999)  # Number of regular sandwiches made
SpecialSandwich = intvar(0, 999999999)  # Number of special sandwiches made

# Constraints
m = Model()

# The joint has a total of 40 eggs:
m += 2 * RegularSandwich + 3 * SpecialSandwich <= 40
# The joint has a total of 70 slices of bacon:
m += 3 * RegularSandwich + 5 * SpecialSandwich <= 70

# Objective
# Maximize profit (3 dollars per regular sandwich, 4 dollars per special sandwich):
m.maximize(3 * RegularSandwich + 4 * SpecialSandwich)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A cleaning company located in Edmonton wants to get the best exposure possible for promoting their new dishwashing detergent without exceeding their $250,000 advertising budget. To do so, the company decides to spend their money on two forms of advertising: (1) radio ads and (2) social media ads. Each radio ad costs $5,000; each social media ad costs $9,150. The expected exposure, based on industry ratings, is 60,500 viewers for each radio ad. Additionally, the expected exposure for each social media ad is 50,000 viewers. The company decides that at least 15 but no more than 40 radio ads should be ordered, and that at least 35 social media ads should be contracted. How many ads of each type should be run to obtain maximum exposure while staying within the budget?
Decision Variables:
- Number of radio ads: RadioAds (at least 15 but no more than 40)
- Number of social media ads: SocialMediaAds (at least 35)

Constraints:
- Total budget constraint: $5,000 per radio ad and $9,150 per social media ad should not exceed $250,000:
  5000 * RadioAds + 9150 * SocialMediaAds <= 250000
- Exposure constraint: At least 60,500 viewers per radio ad and 50,000 viewers per social media ad:
  60500 * RadioAds + 50000 * SocialMediaAds

Objective:
- Maximize exposure: 60,500 viewers per radio ad and 50,000 viewers per social media ad:
  60500 * RadioAds + 50000 * SocialMediaAds
```python

from cpmpy import Model, intvar

# Decision Variables
RadioAds = intvar(0, 999999999)  # Number of radio ads
SocialMediaAds = intvar(0, 999999999)  # Number of social media ads

# Constraints
m = Model()

# Budget constraint: $5,000 per radio ad and $9,150 per social media ad should not exceed $250,000
m += 5000 * RadioAds + 9150 * SocialMediaAds <= 250000
# Exposure constraint: At least 60,500 viewers per radio ad and 50,000 viewers per social media ad
m += 60500 * RadioAds + 50000 * SocialMediaAds

# Objective
# Maximize exposure: 60,500 viewers per radio ad and 50,000 viewers per social media ad
m.maximize(60500 * RadioAds + 50000 * SocialMediaAds)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a $12 profit and each short cable sold results in a $5 profit, how many of each type of cable should be made to maximize profit?

Decision Variables:
- Number of long cables made: LongCables
- Number of short cables made: ShortCables

Constraints:
- Total gold used should not exceed 1000 mg (10 mg per long cable, 7 mg per short cable):
  10 * LongCables + 7 * ShortCables <= 1000
- At least 5 times the number of short cables as long cables:
  ShortCables >= 5 * LongCables
- At least 10 long cables should be made:
  LongCables >= 10

Objective:
- Maximize profit (12 dollars per long cable, 5 dollars per short cable):
  12 * LongCables + 5 * ShortCables
```python

from cpmpy import Model, intvar

# Decision Variables
LongCables = intvar(0, 999999999)  # Number of long cables made
ShortCables = intvar(0, 999999999)  # Number of short cables made

# Constraints
m = Model()

# Total gold used should not exceed 1000 mg (10 mg per long cable, 7 mg per short cable):
m += 10 * LongCables + 7 * ShortCables <= 1000
# At least 5 times the number of short cables as long cables:
m += ShortCables >= 5 * LongCables
# At least 10 long cables should be made:
m += LongCables >= 10

# Objective
# Maximize profit (12 dollars per long cable, 5 dollars per short cable):
m.maximize(12 * LongCables + 5 * ShortCables)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A store employs senior citizens who earn $500 per week and young adults who earn $750 per week. The store must keep the weekly wage bill below $30000. On any day, the store requires at least 50 workers, of whom at least 10 must be young adults. To ensure the store runs smoothly, the number of young adults should be at least a third the number of senior citizens. Formulate a LP to minimize the wage bill.
Decision Variables:
- Number of senior citizens employed: SeniorCitizens
- Number of young adults employed: YoungAdults

Constraints:
- Total number of workers should be at least 50:
  SeniorCitizens + YoungAdults >= 50
- At least 10 workers must be young adults:
  YoungAdults >= 10
- The number of young adults should be at least a third of the number of senior citizens:
  YoungAdults >= 1/3 * SeniorCitizens
- Weekly wage bill should be below $30000 (Senior citizens earn $500 per week and young adults earn $750 per week):
  500 * SeniorCitizens + 750 * YoungAdults <= 30000

Objective:
- Minimize the wage bill:
  500 * SeniorCitizens + 750 * YoungAdults
```python

from cpmpy import Model, intvar

# Decision Variables
SeniorCitizens = intvar(0, 999999999)  # Number of senior citizens employed
YoungAdults = intvar(0, 999999999)  # Number of young adults employed

# Constraints
m = Model()

# The store requires at least 50 workers:
m += SeniorCitizens + YoungAdults >= 50
# At least 10 workers must be young adults:
m += YoungAdults >= 10
# The number of young adults should be at least a third of the number of senior citizens:
m += YoungAdults >= (1/3) * SeniorCitizens
# Keep the weekly wage bill below $30000 (Senior citizens earn $500 per week and young adults earn $750 per week):
m += 500 * SeniorCitizens + 750 * YoungAdults <= 30000

# Objective
# Minimize the wage bill:
m.minimize(500 * SeniorCitizens + 750 * YoungAdults)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs $1000 and attracts 400,000 viewers. On soorchle, each ad costs $200 and attracts 5,000 viewers. On wassa, each ad costs $100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is $10000. How many advertisements should be run in each of the three types of media to maximize the total audience?
Decision Variables:
- Number of ads on z-tube: ZTubeAds
- Number of ads on soorchle engine: SoorchleAds
- Number of ads on wassa: WassaAds

Constraints:
- Weekly advertising budget should not exceed $10000:
  1000 * ZTubeAds + 200 * SoorchleAds + 100 * WassaAds <= 10000
- Soorchle limits the number of advertisements to fifteen:
  SoorchleAds <= 15
- At most a third of the total number of advertisements should occur on wassa:
  WassaAds <= 1/3 * (ZTubeAds + SoorchleAds + WassaAds)
- At least 5% of the advertisements should occur on z-tube:
  ZTubeAds >= 0.05 * (ZTubeAds + SoorchleAds + WassaAds)

Objective:
- Maximize total audience (400,000 viewers per z-tube ad, 5,000 viewers per soorchle ad, 3,000 viewers per wassa ad):
  400000 * ZTubeAds + 5000 * SoorchleAds + 3000 * WassaAds
```python

from cpmpy import Model, intvar

# Decision Variables
ZTubeAds = intvar(0, 999999999)  # Number of ads on z-tube
SoorchleAds = intvar(0, 999999999)  # Number of ads on soorchle engine
WassaAds = intvar(0, 999999999)  # Number of ads on wassa

# Constraints
m = Model()

# Weekly advertising budget constraint ($10000):
m += 1000 * ZTubeAds + 200 * SoorchleAds + 100 * WassaAds <= 10000
# Soorchle limits the number of advertisements to fifteen:
m += SoorchleAds <= 15
# At most a third of the total number of advertisements should occur on wassa:
m += WassaAds <= (1/3) * (ZTubeAds + SoorchleAds + WassaAds)
# At least 5% of the advertisements should occur on z-tube:
m += ZTubeAds >= 0.05 * (ZTubeAds + SoorchleAds + WassaAds)

# Objective
# Maximize total audience (400,000 viewers per z-tube ad, 5,000 viewers per soorchle ad, 3,000 viewers per wassa ad):
m.maximize(400000 * ZTubeAds + 5000 * SoorchleAds + 3000 * WassaAds)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A chair produced by Elm Furniture yields a profit of $43, while every dresser yields a $52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.
Decision Variables:
- Number of chairs produced: Chairs
- Number of dressers produced: Dressers

Constraints:
- Stain usage for all products should not exceed 17 gallons (1.4 gallons per chair, 1.1 gallons per dresser):
  1.4 * Chairs + 1.1 * Dressers <= 17
- Oak wood usage for all products should not exceed 11 lengths (2 lengths per chair, 3 lengths per dresser):
  2 * Chairs + 3 * Dressers <= 11

Objective:
- Maximize profit ($43 profit per chair, $52 profit per dresser):
  43 * Chairs + 52 * Dressers
```python

from cpmpy import Model, intvar

# Decision Variables
Chairs = intvar(0, 999999999)  # Number of chairs produced
Dressers = intvar(0, 999999999)  # Number of dressers produced

# Constraints
m = Model()

# Stain constraint: 1.4 gallons per chair and 1.1 gallons per dresser, with 17 gallons available:
m += 1.4 * Chairs + 1.1 * Dressers <= 17
# Oak wood constraint: 2 lengths per chair and 3 lengths per dresser, with 11 lengths available:
m += 2 * Chairs + 3 * Dressers <= 11

# Objective
# Maximize profit ($43 per chair and $52 per dresser):
m.maximize(43 * Chairs + 52 * Dressers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs $100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs $80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.

Decision Variables:
- Kilograms of Feed A used: FeedA
- Kilograms of Feed B used: FeedB

Constraints:
- Protein requirement (minimum of 30 units):
  10 * FeedA + 7 * FeedB >= 30
- Fat requirement (minimum of 50 units):
  8 * FeedA + 15 * FeedB >= 50

Objective:
- Minimize cost (Feed A costs $100 per kilogram, Feed B costs $80 per kilogram):
  100 * FeedA + 80 * FeedB
```python

from cpmpy import Model, intvar

# Decision Variables
FeedA = intvar(0, 999999999)  # Kilograms of Feed A used
FeedB = intvar(0, 999999999)  # Kilograms of Feed B used

# Constraints
m = Model()

# Protein requirement (minimum of 30 units):
m += 10 * FeedA + 7 * FeedB >= 30
# Fat requirement (minimum of 50 units):
m += 8 * FeedA + 15 * FeedB >= 50

# Objective
# Minimize cost (Feed A costs $100 per kilogram, Feed B costs $80 per kilogram):
m.minimize(100 * FeedA + 80 * FeedB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is $5 and the profit per stubby jar is $9. How many jars of each type should the artisan make to maximize profit?
Decision Variables:
- Number of thin jars made per week: ThinJar
- Number of stubby jars made per week: StubbyJar

Constraints:
- Total shaping time for all jars should not exceed 3000 minutes per week:
  50 * ThinJar + 30 * StubbyJar <= 3000
- Total baking time for all jars should not exceed 4000 minutes per week:
  90 * ThinJar + 150 * StubbyJar <= 4000

Objective:
- Maximize profit (5 dollars per thin jar, 9 dollars per stubby jar):
  5 * ThinJar + 9 * StubbyJar
```python

from cpmpy import Model, intvar

# Decision Variables
ThinJar = intvar(0, 999999999)  # Number of thin jars made per week
StubbyJar = intvar(0, 999999999)  # Number of stubby jars made per week

# Constraints
m = Model()

# Total shaping time for all jars should not exceed 3000 minutes per week:
m += 50 * ThinJar + 30 * StubbyJar <= 3000
# Total baking time for all jars should not exceed 4000 minutes per week:
m += 90 * ThinJar + 150 * StubbyJar <= 4000

# Objective
# Maximize profit (5 dollars per thin jar, 9 dollars per stubby jar):
m.maximize(5 * ThinJar + 9 * StubbyJar)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?
Decision Variables:
- Number of banana-haters packages prepared: BananaHatersPackages
- Number of combo packages prepared: ComboPackages

Constraints:
- Stock limit for apples (10 apples):
  6 * BananaHatersPackages + 5 * ComboPackages <= 10
- Stock limit for bananas (20 bananas):
  0 * BananaHatersPackages + 6 * ComboPackages <= 20
- Stock limit for grapes (80 grapes):
  30 * BananaHatersPackages + 20 * ComboPackages <= 80

Objective:
- Maximize net profit (6 euros per banana-haters package, 7 euros per combo package):
  6 * BananaHatersPackages + 7 * ComboPackages
```python

from cpmpy import Model, intvar

# Decision Variables
BananaHatersPackages = intvar(0, 999999999)  # Number of banana-haters packages prepared
ComboPackages = intvar(0, 999999999)  # Number of combo packages prepared

# Constraints
m = Model()

# The store has a stock limit of 10 apples:
m += 6 * BananaHatersPackages + 5 * ComboPackages <= 10
# The store has a stock limit of 20 bananas:
m += 0 * BananaHatersPackages + 6 * ComboPackages <= 20
# The store has a stock limit of 80 grapes:
m += 30 * BananaHatersPackages + 20 * ComboPackages <= 80

# Objective
# Maximize net profit (6 euros per banana-haters package, 7 euros per combo package):
m.maximize(6 * BananaHatersPackages + 7 * ComboPackages)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is $5 and the profit per batch of cookies is $3. How should the bakery operate to maximize total profit?

Decision Variables:
- Number of loaves of bread baked: Bread
- Number of batches of cookies baked: Cookies

Constraints:
- Stand mixer usage for both bread and cookies should not exceed 3000 hours per year:
  1 * Bread + 0.5 * Cookies <= 3000
- Oven usage for both bread and cookies should not exceed 3000 hours per year:
  3 * Bread + 1 * Cookies <= 3000

Objective:
- Maximize profit (5 dollars per loaf of bread, 3 dollars per batch of cookies):
  5 * Bread + 3 * Cookies
```python

from cpmpy import Model, intvar

# Decision Variables
Bread = intvar(0, 999999999)  # Number of loaves of bread baked
Cookies = intvar(0, 999999999)  # Number of batches of cookies baked

# Constraints
m = Model()

# Stand mixer usage for both bread and cookies should not exceed 3000 hours per year:
m += 1 * Bread + 0.5 * Cookies <= 3000
# Oven usage for both bread and cookies should not exceed 3000 hours per year:
m += 3 * Bread + 1 * Cookies <= 3000

# Objective
# Maximize profit (5 dollars per loaf of bread, 3 dollars per batch of cookies):
m.maximize(5 * Bread + 3 * Cookies)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is $8 and the profit per pane of tempered glass is $10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?
Decision Variables:
- Number of regular glass panes made: RegularGlass
- Number of tempered glass panes made: TemperedGlass

Constraints:
- Heating machine time for both types of glass panes should not exceed 300 minutes per day:
  3 * RegularGlass + 5 * TemperedGlass <= 300
- Cooling machine time for both types of glass panes should not exceed 300 minutes per day:
  5 * RegularGlass + 8 * TemperedGlass <= 300

Objective:
- Maximize profit (8 dollars per regular glass pane, 10 dollars per tempered glass pane):
  8 * RegularGlass + 10 * TemperedGlass
```python

from cpmpy import Model, intvar

# Decision Variables
RegularGlass = intvar(0, 999999999)  # Number of regular glass panes made
TemperedGlass = intvar(0, 999999999)  # Number of tempered glass panes made

# Constraints
m = Model()

# Time constraints for heating machine (3 minutes for regular, 5 minutes for tempered, max 300 minutes):
m += 3 * RegularGlass + 5 * TemperedGlass <= 300
# Time constraints for cooling machine (5 minutes for regular, 8 minutes for tempered, max 300 minutes):
m += 5 * RegularGlass + 8 * TemperedGlass <= 300

# Objective
# Maximize profit (8 dollars per regular glass pane, 10 dollars per tempered glass pane):
m.maximize(8 * RegularGlass + 10 * TemperedGlass)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is $5 and the profit per tiger sold is $4. How many of each should be made in order to maximize profit?
Decision Variables:
- Number of wooden elephants made: Elephants
- Number of wooden tigers made: Tigers

Constraints:
- Total wood used should not exceed 5000 grams (50 grams per elephant, 40 grams per tiger):
  50 * Elephants + 40 * Tigers <= 5000
- Total plastic used should not exceed 4000 grams (20 grams per elephant, 30 grams per tiger):
  20 * Elephants + 30 * Tigers <= 4000

Objective:
- Maximize profit ($5 per elephant, $4 per tiger):
  5 * Elephants + 4 * Tigers
```python

from cpmpy import Model, intvar

# Decision Variables
Elephants = intvar(0, 999999999)  # Number of wooden elephants made
Tigers = intvar(0, 999999999)  # Number of wooden tigers made

# Constraints
m = Model()

# Total wood used should not exceed 5000 grams:
m += 50 * Elephants + 40 * Tigers <= 5000
# Total plastic used should not exceed 4000 grams:
m += 20 * Elephants + 30 * Tigers <= 4000

# Objective
# Maximize profit ($5 per elephant, $4 per tiger):
m.maximize(5 * Elephants + 4 * Tigers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is $30 and the profit per small art piece is $15, how many of each should be made to maximize profit?
Decision Variables:
- Number of large art pieces made: LargeArtPieces
- Number of small art pieces made: SmallArtPieces

Constraints:
- Paint constraint (100 units available):
  4 * LargeArtPieces + 2 * SmallArtPieces <= 100
- Glitter constraint (50 units available):
  3 * LargeArtPieces + 1 * SmallArtPieces <= 50
- Glue constraint (70 units available):
  5 * LargeArtPieces + 2 * SmallArtPieces <= 70
- At least 5 large art pieces must be made:
  LargeArtPieces >= 5
- At least 5 small art pieces must be made:
  SmallArtPieces >= 5

Objective:
- Maximize profit (30 dollars per large art piece, 15 dollars per small art piece):
  30 * LargeArtPieces + 15 * SmallArtPieces
```python

from cpmpy import Model, intvar

# Decision Variables
LargeArtPieces = intvar(0, 999999999)  # Number of large art pieces made
SmallArtPieces = intvar(0, 999999999)  # Number of small art pieces made

# Constraints
m = Model()

# Resource constraints based on available materials:
# Paint constraint (100 units available):
m += 4 * LargeArtPieces + 2 * SmallArtPieces <= 100
# Glitter constraint (50 units available):
m += 3 * LargeArtPieces + 1 * SmallArtPieces <= 50
# Glue constraint (70 units available):
m += 5 * LargeArtPieces + 2 * SmallArtPieces <= 70

# Production constraints:
# At least 5 large art pieces must be made:
m += LargeArtPieces >= 5
# At least 5 small art pieces must be made:
m += SmallArtPieces >= 5

# Objective
# Maximize profit (30 dollars per large art piece, 15 dollars per small art piece):
m.maximize(30 * LargeArtPieces + 15 * SmallArtPieces)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

My family has decided to invest in real state for the first time. Currently, they have $600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than $200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses.  If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?
Decision Variables:
- Amount invested in apartments: Apartments
- Amount invested in townhouses: Townhouses

Constraints:
- Total investment should not exceed $600,000:
  Apartments + Townhouses <= 600000
- Amount invested in apartments must not exceed $200,000:
  Apartments <= 200000
- Amount invested in apartments must be at least half as much as that in townhouses:
  Apartments >= 0.5 * Townhouses

Objective:
- Maximize profit (10% return from apartments, 15% return from townhouses):
  0.10 * Apartments + 0.15 * Townhouses
```python

from cpmpy import Model, intvar

# Decision Variables
Apartments = intvar(0, 200000)  # Amount invested in apartments
Townhouses = intvar(0, 600000)  # Amount invested in townhouses

# Constraints
m = Model()

# Total investment should not exceed $600,000:
m += Apartments + Townhouses <= 600000
# Amount invested in apartments must be at least half as much as that in townhouses:
m += Apartments >= 0.5 * Townhouses
# Amount invested in apartments must not exceed $200,000:
m += Apartments <= 200000

# Objective
# Maximize profit (10% return from apartments, 15% return from townhouses):
m.maximize(0.10 * Apartments + 0.15 * Townhouses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is $1 and the cost per pill of Sunny is $3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.

Decision Variables:
- Number of Zodiac pills: Zodiac
- Number of Sunny pills: Sunny

Constraints:
- Grandma needs at least 5 grams of Z1 every day:
  1.3 * Zodiac + 1.2 * Sunny >= 5
- Grandma needs at least 10 grams of D3 every day:
  1.5 * Zodiac + 5 * Sunny >= 10

Objective:
- Minimize the total cost (Zodiac pills cost $1 each, Sunny pills cost $3 each):
  1 * Zodiac + 3 * Sunny
```python

from cpmpy import Model, intvar

# Decision Variables
Zodiac = intvar(0, 999999999)  # Number of Zodiac pills
Sunny = intvar(0, 999999999)  # Number of Sunny pills

# Constraints
m = Model()

# Grandma needs to take at least 5 grams of Z1 every day:
m += 1.3 * Zodiac + 1.2 * Sunny >= 5
# Grandma needs to take at least 10 grams of D3 every day:
m += 1.5 * Zodiac + 5 * Sunny >= 10

# Objective
# Minimize the total cost (Zodiac pills cost $1 each, Sunny pills cost $3 each):
m.minimize(1 * Zodiac + 3 * Sunny)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is $8 and the profit per model plane is $10, how many of each should be made to maximize his profit?
Decision Variables:
- Number of model trains made: ModelTrains
- Number of model planes made: ModelPlanes

Constraints:
- Total units of wood used should not exceed 120 units:
  3 * ModelTrains + 4 * ModelPlanes <= 120
- Total units of paint used should not exceed 90 units:
  3 * ModelTrains + 2 * ModelPlanes <= 90

Objective:
- Maximize profit (8 dollars per model train, 10 dollars per model plane):
  8 * ModelTrains + 10 * ModelPlanes
```python

from cpmpy import Model, intvar

# Decision Variables
ModelTrains = intvar(0, 999999999)  # Number of model trains made
ModelPlanes = intvar(0, 999999999)  # Number of model planes made

# Constraints
m = Model()

# Wood constraint: 3 units per model train and 4 units per model plane, with 120 units available
m += 3 * ModelTrains + 4 * ModelPlanes <= 120
# Paint constraint: 3 units per model train and 2 units per model plane, with 90 units available
m += 3 * ModelTrains + 2 * ModelPlanes <= 90

# Objective
# Maximize profit ($8 per model train and $10 per model plane)
m.maximize(8 * ModelTrains + 10 * ModelPlanes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store $120 in profits, and a laptop will earn $40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs $400 for the store, and a laptop, $100. The store wants to spend at most $6000. Formulate an LP that can be used to maximize the store's profit.

Decision Variables:
- Number of phones in inventory: Phones
- Number of laptops in inventory: Laptops

Constraints:
- Total floor space used by phones and laptops should not exceed 400 sq ft:
  1 * Phones + 4 * Laptops <= 400
- At least 80% of all appliances in stock must be laptops:
  Laptops >= 0.8 * (Phones + Laptops)
- The total cost of phones and laptops should not exceed $6000:
  400 * Phones + 100 * Laptops <= 6000

Objective:
- Maximize profit (120 dollars profit per phone, 40 dollars profit per laptop):
  120 * Phones + 40 * Laptops
```python

from cpmpy import Model, intvar

# Decision Variables
Phones = intvar(0, 999999999)  # Number of phones
Laptops = intvar(0, 999999999)  # Number of laptops

# Constraints
m = Model()

# Total floor space used by phones and laptops should not exceed 400 sq ft:
m += 1 * Phones + 4 * Laptops <= 400
# At least 80% of all appliances in stock must be laptops:
m += Laptops >= 0.8 * (Phones + Laptops)
# The total cost of phones and laptops should not exceed $6000:
m += 400 * Phones + 100 * Laptops <= 6000

# Objective
# Maximize profit (120 dollars profit per phone, 40 dollars profit per laptop):
m.maximize(120 * Phones + 40 * Laptops)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is $3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is $5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?
Decision Variables:
- Kilograms of regular mix produced: RegularMix
- Kilograms of sour surprise mix produced: SourSurpriseMix

Constraints:
- Total regular candy used in both mixes should not exceed 80 kg (0.8 kg in regular mix, 0.1 kg in sour surprise mix):
  0.8 * RegularMix + 0.1 * SourSurpriseMix <= 80
- Total sour candy used in both mixes should not exceed 60 kg (0.2 kg in regular mix, 0.9 kg in sour surprise mix):
  0.2 * RegularMix + 0.9 * SourSurpriseMix <= 60

Objective:
- Maximize profit ($3 per kilogram of regular mix, $5 per kilogram of sour surprise mix):
  3 * RegularMix + 5 * SourSurpriseMix
```python

from cpmpy import Model, intvar

# Decision Variables
RegularMix = intvar(0, 999999999)  # Kilograms of regular mix produced
SourSurpriseMix = intvar(0, 999999999)  # Kilograms of sour surprise mix produced

# Constraints
m = Model()

# Total regular candy used in both mixes should not exceed 80 kg:
m += 0.8 * RegularMix + 0.1 * SourSurpriseMix <= 80

# Total sour candy used in both mixes should not exceed 60 kg:
m += 0.2 * RegularMix + 0.9 * SourSurpriseMix <= 60

# Objective
# Maximize profit ($3 per kilogram of regular mix, $5 per kilogram of sour surprise mix):
m.maximize(3 * RegularMix + 5 * SourSurpriseMix)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost $12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost $15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of $50 per sq. foot while laptops produce a net revenue of $70 per sq. foot. The factory wants to spend at most $5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?
Decision Variables:
- Square feet allocated for phone production: Phones
- Square feet allocated for laptop production: Laptops

Constraints:
- Total space allocated should not exceed 100 sq. feet:
  Phones + Laptops <= 100
- Total labor hours should not exceed 2000 hours (2 hours for phones, 3 hours for laptops):
  2 * Phones + 3 * Laptops <= 2000
- Total cost should not exceed $5000 ($12/sq. foot for phones, $15/sq. foot for laptops):
  12 * Phones + 15 * Laptops <= 5000

Objective:
- Maximize revenue ($50/sq. foot for phones, $70/sq. foot for laptops):
  50 * Phones + 70 * Laptops
```python

from cpmpy import Model, intvar

# Decision Variables
Phones = intvar(0, 999999999)  # sq. feet allocated for phone production
Laptops = intvar(0, 999999999)  # sq. feet allocated for laptop production

# Constraints
m = Model()

# The total space allocated should not exceed 100 sq. feet:
m += Phones + Laptops <= 100
# The total labor hours should not exceed 2000 hours (2 hours for phones, 3 hours for laptops):
m += 2 * Phones + 3 * Laptops <= 2000
# The total cost should not exceed $5000 ($12/sq. foot for phones, $15/sq. foot for laptops):
m += 12 * Phones + 15 * Laptops <= 5000

# Objective
# Maximize revenue ($50/sq. foot for phones, $70/sq. foot for laptops):
m.maximize(50 * Phones + 70 * Laptops)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store $2000 to make and yields a profit of $500. Each regular desktop costs the store $1000 to make and yields a profit of $300. The store sells at most 200 desktops each month and wants to spend at most $300000 on making the desktops. How many of each should be made and sold to maximize profit?
Decision Variables:
- Number of premium desktops made and sold: PremiumDesktops
- Number of regular desktops made and sold: RegularDesktops

Constraints:
- The store can spend at most $300,000 on making the desktops (each premium desktop costs $2000 and each regular desktop costs $1000):
  2000 * PremiumDesktops + 1000 * RegularDesktops <= 300000
- The store sells at most 200 desktops each month:
  PremiumDesktops + RegularDesktops <= 200

Objective:
- Maximize profit (profit per premium desktop sold is $500 and per regular desktop sold is $300):
  500 * PremiumDesktops + 300 * RegularDesktops
```python

from cpmpy import Model, intvar

# Decision Variables
PremiumDesktops = intvar(0, 999999999)  # Number of premium desktops made and sold
RegularDesktops = intvar(0, 999999999)  # Number of regular desktops made and sold

# Constraints
m = Model()

# The store can spend at most $300,000 on making the desktops:
m += 2000 * PremiumDesktops + 1000 * RegularDesktops <= 300000
# The store sells at most 200 desktops each month:
m += PremiumDesktops + RegularDesktops <= 200

# Objective
# Maximize profit (profit per premium desktop sold is $500 and per regular desktop sold is $300):
m.maximize(500 * PremiumDesktops + 300 * RegularDesktops)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is $5000 and the profit per premium model is $8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?
Decision Variables:
- Number of regular models made per day: RegularModels
- Number of premium models made per day: PremiumModels

Constraints:
- Total number of regular and premium models made should not exceed 12 per day:
  RegularModels + PremiumModels <= 12
- At most 8 regular models per day:
  RegularModels <= 8
- At most 6 premium models per day:
  PremiumModels <= 6

Objective:
- Maximize profit (5000 dollars per regular model, 8500 dollars per premium model):
  5000 * RegularModels + 8500 * PremiumModels
```python

from cpmpy import Model, intvar

# Decision Variables
RegularModels = intvar(0, 999999999)  # Number of regular models made per day
PremiumModels = intvar(0, 999999999)  # Number of premium models made per day

# Constraints
m = Model()

# Total number of regular and premium models made should not exceed 12 per day:
m += RegularModels + PremiumModels <= 12
# Number of regular models made should be at most 8 per day:
m += RegularModels <= 8
# Number of premium models made should be at most 6 per day:
m += PremiumModels <= 6

# Objective
# Maximize profit (5000 dollars per regular model, 8500 dollars per premium model):
m.maximize(5000 * RegularModels + 8500 * PremiumModels)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

You are designing an office space with two types of desks: long desks and short desks. You can spend at most $2000. Long desks cost $300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?
Decision Variables:
- Number of long desks: LongDesks
- Number of short desks: ShortDesks

Constraints:
- Total cost should not exceed $2000 (Long desks cost $300, Short desks cost $100):
  300 * LongDesks + 100 * ShortDesks <= 2000
- Total space should not exceed 200 square feet (Long desks take up 10 sq ft, Short desks take up 4 sq ft):
  10 * LongDesks + 4 * ShortDesks <= 200

Objective:
- Maximize seating availability (6 seats per long desk, 2 seats per short desk):
  6 * LongDesks + 2 * ShortDesks
```python

from cpmpy import Model, intvar

# Decision Variables
LongDesks = intvar(0, 999999999)  # Number of long desks
ShortDesks = intvar(0, 999999999)  # Number of short desks

# Constraints
m = Model()

# The company can spend at most $2000:
m += 300 * LongDesks + 100 * ShortDesks <= 2000
# The office can have at most 200 square feet of desks:
m += 10 * LongDesks + 4 * ShortDesks <= 200

# Objective
# Maximize seating availability (6 seats per long desk, 2 seats per short desk):
m.maximize(6 * LongDesks + 2 * ShortDesks)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost $2 and $3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.

Decision Variables:
- kg of fertilizer C used: C
- kg of fertilizer Y used: Y

Constraints:
- The compound must contain at least 5 units of nitrous oxide:
  1.5 * C + 5 * Y >= 5
- The compound must contain at least 8 units of vitamin mix:
  3 * C + 1 * Y >= 8

Objective:
- Minimize the cost of the compound (Fertilizer C costs $2 per kg, Fertilizer Y costs $3 per kg):
  2 * C + 3 * Y
```python

from cpmpy import Model, intvar

# Decision Variables
C = intvar(0, 999999999)  # kg of fertilizer C used
Y = intvar(0, 999999999)  # kg of fertilizer Y used

# Constraints
m = Model()

# The growth compound must contain at least 5 units of nitrous oxide:
m += 1.5 * C + 5 * Y >= 5
# The growth compound must contain at least 8 units of vitamin mix:
m += 3 * C + 1 * Y >= 8

# Objective
# Minimize the cost of the compound (Fertilizer C costs $2 per kg, Fertilizer Y costs $3 per kg):
m.minimize(2 * C + 3 * Y)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is $4 and the cost per pill for pill B is $5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.
Decision Variables:
- Number of Pill A bought: PillA
- Number of Pill B bought: PillB

Constraints:
- At least 40 units of sleep-inducing medicine required:
  3 * PillA + 6 * PillB >= 40
- At least 50 units of anti-inflammatory medicine required:
  5 * PillA + 1 * PillB >= 50

Objective:
- Minimize cost (Pill A costs $4 per pill, Pill B costs $5 per pill):
  4 * PillA + 5 * PillB
```python

from cpmpy import Model, intvar

# Decision Variables
PillA = intvar(0, 999999999)  # Number of Pill A
PillB = intvar(0, 999999999)  # Number of Pill B

# Constraints
m = Model()

# The patient must consume at least 40 units of sleep-inducing medicine:
m += 3 * PillA + 6 * PillB >= 40
# The patient must consume at least 50 units of anti-inflammatory medicine:
m += 5 * PillA + 1 * PillB >= 50

# Objective
# Minimize cost (Pill A costs $4 per pill, Pill B costs $5 per pill):
m.minimize(4 * PillA + 5 * PillB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is $10 and the profit per container of Oil Max Pro is $15. How many containers of each of oil should the car manufacturer make to maximize profit?
Decision Variables:
- Number of containers of Oil Max: OilMax
- Number of containers of Oil Max Pro: OilMaxPro

Constraints:
- The total grams of substance A used should not exceed 1345 grams:
  46 * OilMax + 13 * OilMaxPro <= 1345
- The total grams of substance B used should not exceed 346 grams:
  43 * OilMax + 4 * OilMaxPro <= 346
- The total grams of substance C used should not exceed 1643 grams:
  56 * OilMax + 45 * OilMaxPro <= 1643

Objective:
- Maximize profit (10 dollars per container of Oil Max, 15 dollars per container of Oil Max Pro):
  10 * OilMax + 15 * OilMaxPro
```python

from cpmpy import Model, intvar

# Decision Variables
OilMax = intvar(0, 999999999)  # Number of containers of Oil Max
OilMaxPro = intvar(0, 999999999)  # Number of containers of Oil Max Pro

# Constraints
m = Model()

# Substance A limit:
m += 46 * OilMax + 13 * OilMaxPro <= 1345
# Substance B limit:
m += 43 * OilMax + 4 * OilMaxPro <= 346
# Substance C limit:
m += 56 * OilMax + 45 * OilMaxPro <= 1643

# Objective
# Maximize profit (10 dollars per container of Oil Max, 15 dollars per container of Oil Max Pro):
m.maximize(10 * OilMax + 15 * OilMaxPro)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A food truck owner can spend at most $20000 on mangos and guavas. A mango costs the food truck owner $5 and a guava costs him $3. Spices are added and each mango is sold for a profit of $3 while each guava is sold for a profit of $4. The owner estimates that at least 100 mangos but at the most 150 are sold each month. He also estimates that the number of guavas sold is at most a third of the mangos sold. How many mangos and guavas should be sold in order to maximize the profit?
Decision Variables:
- Number of mangos sold: Mangos
- Number of guavas sold: Guavas

Constraints:
- The total cost for mangos and guavas should not exceed $20000 (Mangos cost $5 each, Guavas cost $3 each):
  5 * Mangos + 3 * Guavas <= 20000
- At least 100 mangos are sold each month:
  Mangos >= 100
- At most 150 mangos are sold each month:
  Mangos <= 150
- The number of guavas sold is at most a third of the mangos sold:
  Guavas <= Mangos / 3

Objective:
- Maximize profit (3 dollars profit per mango, 4 dollars profit per guava):
  3 * Mangos + 4 * Guavas
```python

from cpmpy import Model, intvar

# Decision Variables
Mangos = intvar(0, 999999999)  # Number of mangos sold
Guavas = intvar(0, 999999999)  # Number of guavas sold

# Constraints
m = Model()

# The total cost of mangos and guavas should not exceed $20000:
m += 5 * Mangos + 3 * Guavas <= 20000
# At least 100 mangos are sold:
m += Mangos >= 100
# At most 150 mangos are sold:
m += Mangos <= 150
# The number of guavas sold is at most a third of the mangos sold:
m += Guavas <= Mangos / 3

# Objective
# Maximize profit (3 dollars profit per mango, 4 dollars profit per guava):
m.maximize(3 * Mangos + 4 * Guavas)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A nutritionist is making a special vitamin mix using two drinks: A and B. The vitamin mix must contain at least 150 units of Vitamin A, at least 300 units of vitamin D, and at most 400 units of vitamin E. A cup of drink A contains 8 units of Vitamin A, 6 units of Vitamin D, 10 units of Vitamin E, and 4 units of Vitamin K. A cup of drink B contains 15 units of Vitamin A, 2 units of Vitamin D, 20 units of Vitamin E, and 12 units of Vitamin K. How many cups of each drink should be used to make the vitamin mix in order to minimize the amount of Vitamin K?
Decision Variables:
- Number of cups of drink A: DrinkA
- Number of cups of drink B: DrinkB

Constraints:
- Vitamin A requirement (at least 150 units):
  8 * DrinkA + 15 * DrinkB >= 150
- Vitamin D requirement (at least 300 units):
  6 * DrinkA + 2 * DrinkB >= 300
- Vitamin E requirement (at most 400 units):
  10 * DrinkA + 20 * DrinkB <= 400

Objective:
- Minimize the amount of Vitamin K (4 units per cup of drink A, 12 units per cup of drink B):
  4 * DrinkA + 12 * DrinkB
```python

from cpmpy import Model, intvar

# Decision Variables
DrinkA = intvar(0, 999999999)  # Number of cups of drink A
DrinkB = intvar(0, 999999999)  # Number of cups of drink B

# Constraints
m = Model()

# Vitamin A requirement (at least 150 units):
m += 8 * DrinkA + 15 * DrinkB >= 150
# Vitamin D requirement (at least 300 units):
m += 6 * DrinkA + 2 * DrinkB >= 300
# Vitamin E requirement (at most 400 units):
m += 10 * DrinkA + 20 * DrinkB <= 400

# Objective
# Minimize the amount of Vitamin K (4 units per cup of drink A, 12 units per cup of drink B):
m.minimize(4 * DrinkA + 12 * DrinkB)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An ice cream store makes chocolate and vanilla ice cream by the gallon. In a week, they must make at least 5 gallons of each type but at most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream. It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available to make ice cream. In addition at least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time. If the profit per gallon of chocolate ice cream is $200 and the profit per gallon of vanilla ice cream is $300, how many gallons of each should be made to maximize profit?
Decision Variables:
- Number of gallons of chocolate ice cream made: ChocolateIceCream
- Number of gallons of vanilla ice cream made: VanillaIceCream

Constraints:
- Minimum and maximum production limits:
  5 <= ChocolateIceCream <= 10
  5 <= VanillaIceCream <= 8
- Production time constraint (30 hours available):
  1 * ChocolateIceCream + 2 * VanillaIceCream <= 30
- Worker constraint (at least 6 workers needed):
  ChocolateIceCream + 2 * VanillaIceCream >= 6

Objective:
- Maximize profit ($200 per gallon of chocolate ice cream, $300 per gallon of vanilla ice cream):
  200 * ChocolateIceCream + 300 * VanillaIceCream
```python

from cpmpy import Model, intvar

# Decision Variables
ChocolateIceCream = intvar(0, 999999999)  # Number of gallons of chocolate ice cream made
VanillaIceCream = intvar(0, 999999999)  # Number of gallons of vanilla ice cream made

# Constraints
m = Model()

# Minimum and maximum production limits:
m += 5 <= ChocolateIceCream <= 10
m += 5 <= VanillaIceCream <= 8

# Production time constraint (30 hours available):
m += 1 * ChocolateIceCream + 2 * VanillaIceCream <= 30

# Worker constraint (at least 6 workers needed):
m += ChocolateIceCream + 2 * VanillaIceCream >= 6

# Objective
# Maximize profit ($200 per gallon of chocolate ice cream, $300 per gallon of vanilla ice cream):
m.maximize(200 * ChocolateIceCream + 300 * VanillaIceCream)

```
True
False
Wrong: 2, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is $500 and the profit per acre of cucumbers is $650, how many acres of each should he grow to maximize his profit? What is that profit?
Decision Variables:
- Number of acres of potatoes grown: Potatoes
- Number of acres of cucumbers grown: Cucumbers

Constraints:
- Total acres used should not exceed 50:
  Potatoes + Cucumbers <= 50
- At least 12 acres of potatoes should be grown:
  Potatoes >= 12
- At least 15 acres of cucumbers should be grown:
  Cucumbers >= 15
- Cucumbers grown should be at most twice the amount of potatoes:
  Cucumbers <= 2 * Potatoes

Objective:
- Maximize profit (profit of $500 per acre of potatoes, $650 per acre of cucumbers):
  500 * Potatoes + 650 * Cucumbers
```python

from cpmpy import Model, intvar

# Decision Variables
Potatoes = intvar(0, 999999999)  # Number of acres of potatoes grown
Cucumbers = intvar(0, 999999999)  # Number of acres of cucumbers grown

# Constraints
m = Model()

# Total acres used should not exceed 50:
m += Potatoes + Cucumbers <= 50
# At least 12 acres of potatoes should be grown:
m += Potatoes >= 12
# At least 15 acres of cucumbers should be grown:
m += Cucumbers >= 15
# Cucumbers grown should be at most twice the amount of potatoes:
m += Cucumbers <= 2 * Potatoes

# Objective
# Maximize profit (profit of $500 per acre of potatoes, $650 per acre of cucumbers):
m.maximize(500 * Potatoes + 650 * Cucumbers)

```
True
False
Wrong: 1, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000  square feet of vinyl  can be produced weekly. If a square foot of hardwood flooring yields a profit of $2.5 and a square foot of vinyl planks produces a $3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?
Decision Variables:
- Number of square feet of engineered hardwood produced per week: Hardwood
- Number of square feet of vinyl planks produced per week: Vinyl

Constraints:
- Total demand constraint:
  Hardwood >= 20,000
  Vinyl >= 10,000
- Total shipping constraint:
  Hardwood + Vinyl >= 60,000
- Production limit constraint:
  Hardwood <= 50,000
  Vinyl <= 30,000

Objective:
- Maximize profit (2.5 dollars profit per square foot of hardwood, 3 dollars profit per square foot of vinyl):
  2.5 * Hardwood + 3 * Vinyl
```python

from cpmpy import Model, intvar

# Decision Variables
Hardwood = intvar(0, 999999999)  # Number of square feet of engineered hardwood produced per week
Vinyl = intvar(0, 999999999)  # Number of square feet of vinyl planks produced per week

# Constraints
m = Model()

# Total demand constraint
m += Hardwood >= 20000
m += Vinyl >= 10000

# Total shipping constraint
m += Hardwood + Vinyl >= 60000

# Production limit constraint
m += Hardwood <= 50000
m += Vinyl <= 30000

# Objective
# Maximize profit (2.5 dollars profit per square foot of hardwood, 3 dollars profit per square foot of vinyl)
m.maximize(2.5 * Hardwood + 3 * Vinyl)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A berry farmer has two farms, an old and new farm, where he grows raspberries, blueberries, and strawberries. He has a contract to provide a local store with 10 kg of raspberries, 9 kg of blueberries, and 15 kg of strawberries. At his old farm, it cost $300 to operate per day and he can harvest and deliver 2 kg of raspberries, 2 kg of blueberries, and 4 kg of strawberries in a day. At his new farm, it costs $200 to operate per day and he can harvest and deliver 4 kg of raspberries, 1 kg of blueberries, and 2 kg of strawberries in a day. Formulate a LP to meet his contract while minimizing his cost.
Decision Variables:
- Number of days the old farm operates: OldFarmDays
- Number of days the new farm operates: NewFarmDays

Constraints:
- To meet the contract for raspberries (10 kg):
  2 * OldFarmDays + 4 * NewFarmDays >= 10
- To meet the contract for blueberries (9 kg):
  2 * OldFarmDays + 1 * NewFarmDays >= 9
- To meet the contract for strawberries (15 kg):
  4 * OldFarmDays + 2 * NewFarmDays >= 15

Objective:
- Minimize cost ($300 per day for old farm, $200 per day for new farm):
  300 * OldFarmDays + 200 * NewFarmDays
```python

from cpmpy import Model, intvar

# Decision Variables
OldFarmDays = intvar(0, 999999999)  # Number of days the old farm operates
NewFarmDays = intvar(0, 999999999)  # Number of days the new farm operates

# Constraints
m = Model()

# To meet the contract for raspberries (10 kg):
m += 2 * OldFarmDays + 4 * NewFarmDays >= 10
# To meet the contract for blueberries (9 kg):
m += 2 * OldFarmDays + 1 * NewFarmDays >= 9
# To meet the contract for strawberries (15 kg):
m += 4 * OldFarmDays + 2 * NewFarmDays >= 15

# Objective
# Minimize cost ($300 per day for old farm, $200 per day for new farm):
m.minimize(300 * OldFarmDays + 200 * NewFarmDays)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice.  Assume that each serving of Rice costs $3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs $2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.
Decision Variables:
- Number of servings of Rice consumed per day: Rice
- Number of servings of Kebab consumed per day: Kebab

Constraints:
- Calorie requirement (at least 2200 calories per day):
  300 * Rice + 200 * Kebab >= 2200
- Protein requirement (at least 30 grams per day):
  4.5 * Rice + 4 * Kebab >= 30

Objective:
- Minimize cost (Rice costs $3 per serving, Kebab costs $2 per serving):
  3 * Rice + 2 * Kebab
```python

from cpmpy import Model, intvar

# Decision Variables
Rice = intvar(0, 999999999)  # Number of servings of Rice consumed per day
Kebab = intvar(0, 999999999)  # Number of servings of Kebab consumed per day

# Constraints
m = Model()

# Calorie requirement (at least 2200 calories per day):
m += 300 * Rice + 200 * Kebab >= 2200
# Protein requirement (at least 30 grams per day):
m += 4.5 * Rice + 4 * Kebab >= 30

# Objective
# Minimize cost (Rice costs $3 per serving, Kebab costs $2 per serving):
m.minimize(3 * Rice + 2 * Kebab)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A company sells custom scooters and bikes for customers. The profit per scooter is $200 and the profit per bike is $300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?
Decision Variables:
- Number of scooters produced per month: Scooters
- Number of bikes produced per month: Bikes

Constraints:
- Design team hours should not exceed 5000 hours per month (2 hours for a scooter, 4 hours for a bike):
  2 * Scooters + 4 * Bikes <= 5000
- Engineering team hours should not exceed 6000 hours per month (3 hours for a scooter, 5 hours for a bike):
  3 * Scooters + 5 * Bikes <= 6000

Objective:
- Maximize profit ($200 per scooter, $300 per bike):
  200 * Scooters + 300 * Bikes
```python

from cpmpy import Model, intvar

# Decision Variables
Scooters = intvar(0, 999999999)  # Number of scooters produced per month
Bikes = intvar(0, 999999999)  # Number of bikes produced per month

# Constraints
m = Model()

# Design team hours should not exceed 5000 hours per month (2 hours for a scooter, 4 hours for a bike):
m += 2 * Scooters + 4 * Bikes <= 5000
# Engineering team hours should not exceed 6000 hours per month (3 hours for a scooter, 5 hours for a bike):
m += 3 * Scooters + 5 * Bikes <= 6000

# Objective
# Maximize profit ($200 per scooter, $300 per bike):
m.maximize(200 * Scooters + 300 * Bikes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

John has a 300 acre berry farm on which to plant blueberries and raspberries. John has $10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and $22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and $25 in watering costs is required. The profit per acre of blueberries is $56 and the profit per acre of raspberries is $75. Formulate an LP problem in order to maximize profit.
Decision Variables:
- Number of acres of blueberries: Blueberries
- Number of acres of raspberries: Raspberries

Constraints:
- Total acres of blueberries and raspberries should not exceed 300:
  Blueberries + Raspberries <= 300
- Labor constraint (6 days per acre of blueberries and 3 days per acre of raspberries should not exceed 575 days):
  6 * Blueberries + 3 * Raspberries <= 575
- Watering cost constraint ($22 per acre of blueberries and $25 per acre of raspberries should not exceed $10000):
  22 * Blueberries + 25 * Raspberries <= 10000

Objective:
- Maximize profit ($56 per acre of blueberries and $75 per acre of raspberries):
  56 * Blueberries + 75 * Raspberries
```python

from cpmpy import Model, intvar

# Decision Variables
Blueberries = intvar(0, 999999999)  # Number of acres of blueberries
Raspberries = intvar(0, 999999999)  # Number of acres of raspberries

# Constraints
m = Model()

# Total acres of blueberries and raspberries should not exceed 300:
m += Blueberries + Raspberries <= 300
# Labor constraint: 6 days per acre of blueberries and 3 days per acre of raspberries should not exceed 575 days:
m += 6 * Blueberries + 3 * Raspberries <= 575
# Watering cost constraint: $22 per acre of blueberries and $25 per acre of raspberries should not exceed $10000:
m += 22 * Blueberries + 25 * Raspberries <= 10000

# Objective
# Maximize profit ($56 per acre of blueberries and $75 per acre of raspberries):
m.maximize(56 * Blueberries + 75 * Raspberries)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A man  only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost $3 per serving and fruits cost $5 per serving, how many servings of each should he eat to minimize his cost?
Decision Variables:
- Number of servings of vegetables eaten: Vegetables
- Number of servings of fruits eaten: Fruits

Constraints:
- Vitamin requirement (at least 20 units):
  2 * Vegetables + 4 * Fruits >= 20
- Mineral requirement (at least 30 units):
  3 * Vegetables + 1 * Fruits >= 30

Objective:
- Minimize cost (3 dollars per serving of vegetables, 5 dollars per serving of fruits):
  3 * Vegetables + 5 * Fruits
```python

from cpmpy import Model, intvar

# Decision Variables
Vegetables = intvar(0, 999999999)  # Number of servings of vegetables eaten
Fruits = intvar(0, 999999999)  # Number of servings of fruits eaten

# Constraints
m = Model()

# Vitamin requirement (at least 20 units):
m += 2 * Vegetables + 4 * Fruits >= 20
# Mineral requirement (at least 30 units):
m += 3 * Vegetables + 1 * Fruits >= 30

# Objective
# Minimize cost (3 dollars per serving of vegetables, 5 dollars per serving of fruits):
m.minimize(3 * Vegetables + 5 * Fruits)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $20 and $40 respectively for a batch of bagels and a batch of croissants.
Decision Variables:
- Number of batches of bagels: Bagels
- Number of batches of croissants: Croissants

Constraints:
- Oven time should not exceed 70 hours:
  2 * Bagels + 1 * Croissants <= 70
- Pastry chef time should not exceed 32 hours:
  0.25 * Bagels + 2 * Croissants <= 32

Objective:
- Maximize profit ($20 per batch of bagels and $40 per batch of croissants):
  20 * Bagels + 40 * Croissants
```python

from cpmpy import Model, intvar

# Decision Variables
Bagels = intvar(0, 999999999)  # Number of batches of bagels
Croissants = intvar(0, 999999999)  # Number of batches of croissants

# Constraints
m = Model()

# Oven time constraint (at most 70 hours available):
m += 2 * Bagels + 1 * Croissants <= 70
# Pastry chef time constraint (at most 32 hours available):
m += 0.25 * Bagels + 2 * Croissants <= 32

# Objective
# Maximize profit ($20 per batch of bagels and $40 per batch of croissants):
m.maximize(20 * Bagels + 40 * Croissants)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs $300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs $600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.
Decision Variables:
- Hours factory 1 runs: Factory1Hours
- Hours factory 2 runs: Factory2Hours

Constraints:
- Black teddy bear production: 5 black teddy bears from factory 1 and 10 black teddy bears from factory 2 should sum up to at least 20:
  5 * Factory1Hours + 10 * Factory2Hours >= 20
- White teddy bear production: 6 white teddy bears from factory 1 and 10 white teddy bears from factory 2 should sum up to at least 5:
  6 * Factory1Hours + 10 * Factory2Hours >= 5
- Brown teddy bear production: 3 brown teddy bears from factory 1 should sum up to at least 15:
  3 * Factory1Hours >= 15

Objective:
- Minimize the total cost (Running factory 1 costs $300 per hour, running factory 2 costs $600 per hour):
  300 * Factory1Hours + 600 * Factory2Hours
```python

from cpmpy import Model, intvar

# Decision Variables
Factory1Hours = intvar(0, 999999999)  # Hours factory 1 runs
Factory2Hours = intvar(0, 999999999)  # Hours factory 2 runs

# Constraints
m = Model()

# Black teddy bear production constraint
m += 5 * Factory1Hours + 10 * Factory2Hours >= 20
# White teddy bear production constraint
m += 6 * Factory1Hours + 10 * Factory2Hours >= 5
# Brown teddy bear production constraint
m += 3 * Factory1Hours >= 15

# Objective
# Minimize the total cost (Running factory 1 costs $300 per hour, running factory 2 costs $600 per hour)
m.minimize(300 * Factory1Hours + 600 * Factory2Hours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and $80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and $50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and $34000 available to spend on pesticide. If the revenue per acre of turnips is $300 and the revenue per acre of pumpkins is $450, how many acres of each should he grow to maximize his revenue.
Decision Variables:
- Number of acres of turnips grown: Turnips
- Number of acres of pumpkins grown: Pumpkins

Constraints:
- Total acres used should not exceed 500:
  Turnips + Pumpkins <= 500
- Total minutes spent on watering should not exceed 40000 minutes (50 minutes per acre of turnips, 90 minutes per acre of pumpkins):
  50 * Turnips + 90 * Pumpkins <= 40000
- Total amount spent on pesticide should not exceed $34000 (80 dollars per acre of turnips, 50 dollars per acre of pumpkins):
  80 * Turnips + 50 * Pumpkins <= 34000

Objective:
- Maximize revenue (300 dollars per acre of turnips, 450 dollars per acre of pumpkins):
  300 * Turnips + 450 * Pumpkins
```python

from cpmpy import Model, intvar

# Decision Variables
Turnips = intvar(0, 999999999)  # Number of acres of turnips grown
Pumpkins = intvar(0, 999999999)  # Number of acres of pumpkins grown

# Constraints
m = Model()

# Total acres used should not exceed 500:
m += Turnips + Pumpkins <= 500
# Total minutes spent on watering should not exceed 40000 minutes:
m += 50 * Turnips + 90 * Pumpkins <= 40000
# Total amount spent on pesticide should not exceed $34000:
m += 80 * Turnips + 50 * Pumpkins <= 34000

# Objective
# Maximize revenue (300 dollars per acre of turnips, 450 dollars per acre of pumpkins):
m.maximize(300 * Turnips + 450 * Pumpkins)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A school employs staff and substitute teachers. Per shift, staff teachers work 6 hours and get paid $300. Per shift, substitute teachers work 3 hours and get paid $100. For the summer term, the school requires 1000 hours of teaching availability. If the school has a budget of $40000, how many of each teacher should be hired to minimize the total number of teachers?
Decision Variables:
- Number of staff teachers hired: StaffTeachers
- Number of substitute teachers hired: SubstituteTeachers

Constraints:
- Total teaching hours should be at least 1000 hours:
  6 * StaffTeachers + 3 * SubstituteTeachers >= 1000
- The school has a budget of $40000:
  300 * StaffTeachers + 100 * SubstituteTeachers <= 40000

Objective:
- Minimize the total number of teachers (Staff teachers + Substitute teachers):
  StaffTeachers + SubstituteTeachers
```python

from cpmpy import Model, intvar

# Decision Variables
StaffTeachers = intvar(0, 999999999)  # Number of staff teachers hired
SubstituteTeachers = intvar(0, 999999999)  # Number of substitute teachers hired

# Constraints
m = Model()

# Total teaching hours should be at least 1000 hours:
m += 6 * StaffTeachers + 3 * SubstituteTeachers >= 1000
# The school has a budget of $40000:
m += 300 * StaffTeachers + 100 * SubstituteTeachers <= 40000

# Objective
# Minimize the total number of teachers (Staff teachers + Substitute teachers):
m.minimize(StaffTeachers + SubstituteTeachers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?
Decision Variables:
- Number of high intensity drills used: HighIntensityDrills
- Number of low intensity drills used: LowIntensityDrills

Constraints:
- Total number of gems processed by high intensity drills should be at most 50 * HighIntensityDrills:
  50 * HighIntensityDrills <= 800
- Total number of gems processed by low intensity drills should be at most 30 * LowIntensityDrills:
  30 * LowIntensityDrills <= 800
- Total units of water used by high intensity drills should be at most 50 * HighIntensityDrills:
  50 * HighIntensityDrills <= 700
- Total units of water used by low intensity drills should be at most 20 * LowIntensityDrills:
  20 * LowIntensityDrills <= 700
- At most 40% of the drills can be high intensity:
  HighIntensityDrills <= 0.4 * (HighIntensityDrills + LowIntensityDrills)
- At least 10 drills should be low intensity:
  LowIntensityDrills >= 10

Objective:
- Minimize the total number of drills used:
  HighIntensityDrills + LowIntensityDrills
```python

from cpmpy import Model, intvar

# Decision Variables
HighIntensityDrills = intvar(0, 999999999)  # Number of high intensity drills used
LowIntensityDrills = intvar(0, 999999999)  # Number of low intensity drills used

# Constraints
m = Model()

# Total number of gems processed by high intensity drills should be at most 50 * HighIntensityDrills:
m += 50 * HighIntensityDrills <= 800
# Total number of gems processed by low intensity drills should be at most 30 * LowIntensityDrills:
m += 30 * LowIntensityDrills <= 800
# Total units of water used by high intensity drills should be at most 50 * HighIntensityDrills:
m += 50 * HighIntensityDrills <= 700
# Total units of water used by low intensity drills should be at most 20 * LowIntensityDrills:
m += 20 * LowIntensityDrills <= 700
# At most 40% of the drills can be high intensity:
m += HighIntensityDrills <= 0.4 * (HighIntensityDrills + LowIntensityDrills)
# At least 10 drills should be low intensity:
m += LowIntensityDrills >= 10

# Objective
# Minimize the total number of drills used:
m.minimize(HighIntensityDrills + LowIntensityDrills)

```
False
False
Wrong: 4, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?
Decision Variables:
- Number of dine-in places opened: DineInPlaces
- Number of food-trucks opened: FoodTrucks

Constraints:
- Total sandwiches made per day should be at least 500:
  100 * DineInPlaces + 50 * FoodTrucks >= 500
- Total number of employees should not exceed 35:
  8 * DineInPlaces + 3 * FoodTrucks <= 35

Objective:
- Minimize the total number of stores opened:
  DineInPlaces + FoodTrucks
```python

from cpmpy import Model, intvar

# Decision Variables
DineInPlaces = intvar(0, 999999999)  # Number of dine-in places opened
FoodTrucks = intvar(0, 999999999)  # Number of food-trucks opened

# Constraints
m = Model()

# The company must make at least 500 sandwiches per day:
m += 100 * DineInPlaces + 50 * FoodTrucks >= 500
# The total number of employees should not exceed 35:
m += 8 * DineInPlaces + 3 * FoodTrucks <= 35

# Objective
# Minimize the total number of stores opened:
m.minimize(DineInPlaces + FoodTrucks)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?
Decision Variables:
- Number of times process A is run: ProcessA
- Number of times process B is run: ProcessB

Constraints:
- Total units of gold used by process A and process B should not exceed 500 units:
  3 * ProcessA + 5 * ProcessB <= 500
- Total wires used by process A and process B should not exceed 300 wires:
  2 * ProcessA + 3 * ProcessB <= 300

Objective:
- Maximize the total number of coins plated (5 coins per process A, 7 coins per process B):
  5 * ProcessA + 7 * ProcessB
```python

from cpmpy import Model, intvar

# Decision Variables
ProcessA = intvar(0, 999999999)  # Number of times process A is run
ProcessB = intvar(0, 999999999)  # Number of times process B is run

# Constraints
m = Model()

# Total units of gold used by process A and process B should not exceed 500 units:
m += 3 * ProcessA + 5 * ProcessB <= 500
# Total wires used by process A and process B should not exceed 300 wires:
m += 2 * ProcessA + 3 * ProcessB <= 300

# Objective
# Maximize the total number of coins plated (5 coins per process A, 7 coins per process B):
m.maximize(5 * ProcessA + 7 * ProcessB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?
Decision Variables:
- Number of miter saws purchased: MiterSaws
- Number of circular saws purchased: CircularSaws

Constraints:
- Planks of wood cut per day constraint (at least 1500 planks of wood per day):
  50 * MiterSaws + 70 * CircularSaws >= 1500
- Sawdust units produced per day constraint (at most 2000 units of sawdust per day):
  60 * MiterSaws + 100 * CircularSaws <= 2000

Objective:
- Minimize the total number of saws needed:
  MiterSaws + CircularSaws
```python

from cpmpy import Model, intvar

# Decision Variables
MiterSaws = intvar(0, 999999999)  # Number of miter saws purchased
CircularSaws = intvar(0, 999999999)  # Number of circular saws purchased

# Constraints
m = Model()

# Planks of wood cut per day constraint (at least 1500 planks of wood per day):
m += 50 * MiterSaws + 70 * CircularSaws >= 1500

# Sawdust units produced per day constraint (at most 2000 units of sawdust per day):
m += 60 * MiterSaws + 100 * CircularSaws <= 2000

# Objective
# Minimize the total number of saws needed:
m.minimize(MiterSaws + CircularSaws)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?
Decision Variables:
- Acres of land processed by the windrower: WindrowerAcres
- Acres of land processed by the hay harvester: HarvesterAcres

Constraints:
- Total acres of land processed should not exceed 200 acres:
  WindrowerAcres + HarvesterAcres <= 200
- Total fuel used should not exceed 300 kg:
  2 * WindrowerAcres + 1 * HarvesterAcres <= 300
- Total methane gas produced should not exceed 800 kg:
  5 * WindrowerAcres + 3 * HarvesterAcres <= 800

Objective:
- Maximize the amount of hay processed:
  10 * WindrowerAcres + 8 * HarvesterAcres
```python

from cpmpy import Model, intvar

# Decision Variables
WindrowerAcres = intvar(0, 200)  # Acres of land processed by the windrower
HarvesterAcres = intvar(0, 200)  # Acres of land processed by the hay harvester

# Constraints
m = Model()

# Total acres of land processed should not exceed 200 acres:
m += WindrowerAcres + HarvesterAcres <= 200
# Total fuel used should not exceed 300 kg:
m += 2 * WindrowerAcres + 1 * HarvesterAcres <= 300
# Total methane gas produced should not exceed 800 kg:
m += 5 * WindrowerAcres + 3 * HarvesterAcres <= 800

# Objective
# Maximize the amount of hay processed:
m.maximize(10 * WindrowerAcres + 8 * HarvesterAcres)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?
Decision Variables:
- Number of wraps made: Wraps
- Number of platters made: Platters

Constraints:
- Meat constraint (at least 3000 units required):
  5 * Wraps + 7 * Platters >= 3000
- Rice constraint (at least 2500 units required):
  3 * Wraps + 5 * Platters >= 2500
- Wraps should be made at least 3 times as many as platters:
  Wraps >= 3 * Platters

Objective:
- Minimize total production time (10 minutes per wrap, 8 minutes per platter):
  10 * Wraps + 8 * Platters
```python

from cpmpy import Model, intvar

# Decision Variables
Wraps = intvar(0, 999999999)  # Number of wraps made
Platters = intvar(0, 999999999)  # Number of platters made

# Constraints
m = Model()

# Meat constraint (at least 3000 units required):
m += 5 * Wraps + 7 * Platters >= 3000

# Rice constraint (at least 2500 units required):
m += 3 * Wraps + 5 * Platters >= 2500

# Wraps should be made at least 3 times as many as platters:
m += Wraps >= 3 * Platters

# Objective
# Minimize total production time (10 minutes per wrap, 8 minutes per platter):
m.minimize(10 * Wraps + 8 * Platters)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An amusement park is installing ticket machines, both cash-based and card-only machines. A cash-based machine can process 20 people per hour while a card-only machine can process 30 people per hour. The cash-based machine needs 4 rolls of paper per hour while the card-only machine requires 5 rolls of paper per hour. The amusement park needs to be able to process at least 500 people per hour but can use at most 90 rolls of paper per hour. Since most people prefer to pay by cash, the number of card-only machines must not exceed the number of cash-based machines. How many of each machine should be bought to minimize the total number of machines in the park?
Decision Variables:
- Number of cash-based ticket machines: CashMachines
- Number of card-only ticket machines: CardMachines

Constraints:
- Total number of people processed per hour should be at least 500:
  20 * CashMachines + 30 * CardMachines >= 500
- Total number of rolls of paper used per hour should be at most 90:
  4 * CashMachines + 5 * CardMachines <= 90
- Number of card-only machines should not exceed the number of cash-based machines:
  CardMachines <= CashMachines

Objective:
- Minimize the total number of machines in the park:
  CashMachines + CardMachines
```python

from cpmpy import Model, intvar

# Decision Variables
CashMachines = intvar(0, 999999999)  # Number of cash-based ticket machines
CardMachines = intvar(0, 999999999)  # Number of card-only ticket machines

# Constraints
m = Model()

# The amusement park needs to process at least 500 people per hour:
m += 20 * CashMachines + 30 * CardMachines >= 500
# The amusement park can use at most 90 rolls of paper per hour:
m += 4 * CashMachines + 5 * CardMachines <= 90
# The number of card-only machines should not exceed the number of cash-based machines:
m += CardMachines <= CashMachines

# Objective
# Minimize the total number of machines in the park:
m.minimize(CashMachines + CardMachines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?
Decision Variables:
- Number of glass jars filled: GlassJars
- Number of plastic jars filled: PlasticJars

Constraints:
- At least 20 glass jars must be filled:
  GlassJars >= 20
- Total honey available is 20000 ml (250 ml per glass jar, 300 ml per plastic jar):
  250 * GlassJars + 300 * PlasticJars <= 20000
- At least twice as many plastic jars must be filled as glass jars:
  PlasticJars >= 2 * GlassJars

Objective:
- Maximize the total number of bottles filled:
  GlassJars + PlasticJars
```python

from cpmpy import Model, intvar

# Decision Variables
GlassJars = intvar(0, 999999999)  # Number of glass jars filled
PlasticJars = intvar(0, 999999999)  # Number of plastic jars filled

# Constraints
m = Model()

# At least 20 glass jars must be filled:
m += GlassJars >= 20
# Total honey available is 20000 ml (250 ml per glass jar, 300 ml per plastic jar):
m += 250 * GlassJars + 300 * PlasticJars <= 20000
# At least twice as many plastic jars must be filled as glass jars:
m += PlasticJars >= 2 * GlassJars

# Objective
# Maximize the total number of bottles filled:
m.maximize(GlassJars + PlasticJars)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?
Decision Variables:
- Number of mango bubble teas made: MangoBubbleTea
- Number of lychee bubble teas made: LycheeBubbleTea

Constraints:
- The shop has available 2000 units of mango juice, each mango bubble tea requires 4 units of mango juice:
  4 * MangoBubbleTea <= 2000
- The shop has available 3000 units of lychee juice, each lychee bubble tea requires 6 units of lychee juice:
  6 * LycheeBubbleTea <= 3000
- At least 40% of the total bubble teas made must be lychee flavored:
  LycheeBubbleTea >= 0.4 * (MangoBubbleTea + LycheeBubbleTea)
- The number of mango bubble teas made must be larger than the number of lychee bubble teas made:
  MangoBubbleTea > LycheeBubbleTea

Objective:
- Minimize the total amount of tea needed (8 units per mango bubble tea, 6 units per lychee bubble tea):
  8 * MangoBubbleTea + 6 * LycheeBubbleTea
```python

from cpmpy import Model, intvar

# Decision Variables
MangoBubbleTea = intvar(0, 999999999)  # Number of mango bubble teas made
LycheeBubbleTea = intvar(0, 999999999)  # Number of lychee bubble teas made

# Constraints
m = Model()

# The shop has available 2000 units of mango juice:
m += 4 * MangoBubbleTea <= 2000
# The shop has available 3000 units of lychee juice:
m += 6 * LycheeBubbleTea <= 3000
# At least 40% of the total bubble teas made must be lychee flavored:
m += LycheeBubbleTea >= 0.4 * (MangoBubbleTea + LycheeBubbleTea)
# The number of mango bubble teas made must be larger than the number of lychee bubble teas made:
m += MangoBubbleTea > LycheeBubbleTea

# Objective
# Minimize the total amount of tea needed (8 units per mango bubble tea, 6 units per lychee bubble tea):
m.minimize(8 * MangoBubbleTea + 6 * LycheeBubbleTea)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid $120. A permanent snow remover works 10 hours per shift and gets paid $250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of $6500, how many of each type of worker should be hired to minimize the total number of snow removers?
Decision Variables:
- Number of seasonal snow removers hired: SeasonalRemovers
- Number of permanent snow removers hired: PermanentRemovers

Constraints:
- Total hours of labor required should be 300 hours:
  6 * SeasonalRemovers + 10 * PermanentRemovers = 300
- Total cost should not exceed the budget of $6500:
  120 * SeasonalRemovers + 250 * PermanentRemovers <= 6500

Objective:
- Minimize the total number of snow removers:
  Minimize SeasonalRemovers + PermanentRemovers
```python

from cpmpy import Model, intvar

# Decision Variables
SeasonalRemovers = intvar(0, 999999999)  # Number of seasonal snow removers hired
PermanentRemovers = intvar(0, 999999999)  # Number of permanent snow removers hired

# Constraints
m = Model()

# Total hours of labor required should be 300 hours:
m += 6 * SeasonalRemovers + 10 * PermanentRemovers == 300

# Total cost should not exceed the budget of $6500:
m += 120 * SeasonalRemovers + 250 * PermanentRemovers <= 6500

# Objective
# Minimize the total number of snow removers:
m.minimize(SeasonalRemovers + PermanentRemovers)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A high rise building is buying two types of furnaces, a new model and an old model. A new model furnace can heat 10 apartments and consumes 200 kWh per day. An old model can heat 15 apartments and consumes 250 kWh per day. Since the old model is harder to find, at most 35% of the furnaces can be the old model and at least 5 new model furnaces should be used. If the high rise needs to heat at least 200 apartments and has 3500 kWh of electricity available, how many of each furnace should be purchase to minimize the total number of furnaces?
Decision Variables:
- Number of new model furnaces purchased: NewModelFurnaces
- Number of old model furnaces purchased: OldModelFurnaces

Constraints:
- Total number of apartments heated should be at least 200:
  10 * NewModelFurnaces + 15 * OldModelFurnaces >= 200
- Total electricity consumption should not exceed 3500 kWh:
  200 * NewModelFurnaces + 250 * OldModelFurnaces <= 3500
- At least 5 new model furnaces should be used:
  NewModelFurnaces >= 5
- At most 35% of the furnaces can be the old model:
  OldModelFurnaces <= 0.35 * (NewModelFurnaces + OldModelFurnaces)

Objective:
- Minimize the total number of furnaces:
  NewModelFurnaces + OldModelFurnaces
```python

from cpmpy import Model, intvar

# Decision Variables
NewModelFurnaces = intvar(0, 999999999)  # Number of new model furnaces purchased
OldModelFurnaces = intvar(0, 999999999)  # Number of old model furnaces purchased

# Constraints
m = Model()

# Total number of apartments heated should be at least 200:
m += 10 * NewModelFurnaces + 15 * OldModelFurnaces >= 200
# Total electricity consumption should not exceed 3500 kWh:
m += 200 * NewModelFurnaces + 250 * OldModelFurnaces <= 3500
# At least 5 new model furnaces should be used:
m += NewModelFurnaces >= 5
# At most 35% of the furnaces can be the old model:
m += OldModelFurnaces <= 0.35 * (NewModelFurnaces + OldModelFurnaces)

# Objective
# Minimize the total number of furnaces:
m.minimize(NewModelFurnaces + OldModelFurnaces)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?
Decision Variables:
- Number of rural factories to be built: RuralFactories
- Number of urban factories to be built: UrbanFactories

Constraints:
- Total number of managers available is 260:
  8 * RuralFactories + 20 * UrbanFactories <= 260
- Total number of phones produced per day should be at least 3000:
  100 * RuralFactories + 200 * UrbanFactories >= 3000

Objective:
- Minimize the total number of factories:
  RuralFactories + UrbanFactories
```python

from cpmpy import Model, intvar

# Decision Variables
RuralFactories = intvar(0, 999999999)  # Number of rural factories to be built
UrbanFactories = intvar(0, 999999999)  # Number of urban factories to be built

# Constraints
m = Model()

# Total number of managers available is 260:
m += 8 * RuralFactories + 20 * UrbanFactories <= 260

# Total number of phones produced per day should be at least 3000:
m += 100 * RuralFactories + 200 * UrbanFactories >= 3000

# Objective
# Minimize the total number of factories:
m.minimize(RuralFactories + UrbanFactories)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?
Decision Variables:
- Number of counter-top sized machines bought: CountertopMachines
- Number of fridge sized machines bought: FridgeMachines

Constraints:
- The total number of cones produced should be at least 1000:
  80 * CountertopMachines + 150 * FridgeMachines >= 1000
- The total heat output should not exceed 500 units:
  50 * CountertopMachines + 70 * FridgeMachines <= 500

Objective:
- Minimize the total number of machines needed:
  CountertopMachines + FridgeMachines
```python

from cpmpy import Model, intvar

# Decision Variables
CountertopMachines = intvar(0, 999999999)  # Number of counter-top sized machines bought
FridgeMachines = intvar(0, 999999999)  # Number of fridge sized machines bought

# Constraints
m = Model()

# The total number of cones produced should be at least 1000:
m += 80 * CountertopMachines + 150 * FridgeMachines >= 1000

# The total heat output should not exceed 500 units:
m += 50 * CountertopMachines + 70 * FridgeMachines <= 500

# Objective
# Minimize the total number of machines needed:
m.minimize(CountertopMachines + FridgeMachines)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?
Decision Variables:
- Number of small containers used: SmallContainers
- Number of large containers used: LargeContainers

Constraints:
- Total units of water used (10 units per small container, 20 units per large container) should not exceed 500:
  10 * SmallContainers + 20 * LargeContainers <= 500
- Total units of powdered pill used (15 units per small container, 20 units per large container) should not exceed 700:
  15 * SmallContainers + 20 * LargeContainers <= 700

Objective:
- Maximize the amount of paste that can be made (20 units per small container, 30 units per large container):
  20 * SmallContainers + 30 * LargeContainers
```python

from cpmpy import Model, intvar

# Decision Variables
SmallContainers = intvar(0, 999999999)  # Number of small containers used
LargeContainers = intvar(0, 999999999)  # Number of large containers used

# Constraints
m = Model()

# Total units of water used should not exceed 500:
m += 10 * SmallContainers + 20 * LargeContainers <= 500
# Total units of powdered pill used should not exceed 700:
m += 15 * SmallContainers + 20 * LargeContainers <= 700

# Objective
# Maximize the amount of paste that can be made (20 units per small container, 30 units per large container):
m.maximize(20 * SmallContainers + 30 * LargeContainers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?
Decision Variables:
- Number of acres of land used for small oil wells: SmallWells
- Number of acres of land used for large oil wells: LargeWells

Constraints:
- Total number of drill bits used should not exceed 2500:
  5 * SmallWells + 10 * LargeWells <= 2500
- Total pollution produced should not exceed 4500 units:
  10 * SmallWells + 20 * LargeWells <= 4500

Objective:
- Maximize total production of oil (2 barrels per acre for small oil wells, 5 barrels per acre for large oil wells):
  2 * SmallWells + 5 * LargeWells
```python

from cpmpy import Model, intvar

# Decision Variables
SmallWells = intvar(0, 999999999)  # Number of acres of land used for small oil wells
LargeWells = intvar(0, 999999999)  # Number of acres of land used for large oil wells

# Constraints
m = Model()

# Drill bits constraint (2500 available, small well requires 5, large well requires 10):
m += 5 * SmallWells + 10 * LargeWells <= 2500
# Pollution constraint (4500 units allowed, small well produces 10, large well produces 20):
m += 10 * SmallWells + 20 * LargeWells <= 4500

# Objective
# Maximize total production of oil (2 barrels per acre for small oil wells, 5 barrels per acre for large oil wells):
m.maximize(2 * SmallWells + 5 * LargeWells)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?
Decision Variables:
- Number of almond croissants made: AlmondCroissants
- Number of pistachio croissants made: PistachioCroissants

Constraints:
- Butter usage should not exceed 600 units:
  5 * AlmondCroissants + 3 * PistachioCroissants <= 600
- Flour usage should not exceed 800 units:
  8 * AlmondCroissants + 6 * PistachioCroissants <= 800
- Almond croissants should be made at least 3 times as many as pistachio croissants:
  AlmondCroissants >= 3 * PistachioCroissants

Objective:
- Minimize total production time (12 minutes per almond croissant, 10 minutes per pistachio croissant):
  12 * AlmondCroissants + 10 * PistachioCroissants
```python

from cpmpy import Model, intvar

# Decision Variables
AlmondCroissants = intvar(0, 999999999)  # Number of almond croissants made
PistachioCroissants = intvar(0, 999999999)  # Number of pistachio croissants made

# Constraints
m = Model()

# Butter usage should not exceed 600 units:
m += 5 * AlmondCroissants + 3 * PistachioCroissants <= 600
# Flour usage should not exceed 800 units:
m += 8 * AlmondCroissants + 6 * PistachioCroissants <= 800
# Almond croissants should be made at least 3 times as many as pistachio croissants:
m += AlmondCroissants >= 3 * PistachioCroissants

# Objective
# Minimize total production time (12 minutes per almond croissant, 10 minutes per pistachio croissant):
m.minimize(12 * AlmondCroissants + 10 * PistachioCroissants)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A burger chain is buying both gas and electric grills to make burger patties. A gas grill can cook 20 patties per minute while an electric grill can cook 30 patties per minute. The gas grill requires 20 units of cooking oil per minute while the electric grill requires 25 units of cooking oil per minute. Since the gas grill patties taste better, the number of electric grills must be less than the number of gas grills. Further, the burger chain wants to be able to make at least 150 patties per minute and use at most 140 units of cooking oil per minute. How many of each grill should be bought to minimize the total number of grills in the store?
Decision Variables:
- Number of gas grills bought: GasGrills
- Number of electric grills bought: ElectricGrills

Constraints:
- Total number of patties cooked per minute should be at least 150:
  20 * GasGrills + 30 * ElectricGrills >= 150
- Total units of cooking oil used per minute should be at most 140:
  20 * GasGrills + 25 * ElectricGrills <= 140
- Number of electric grills must be less than the number of gas grills:
  ElectricGrills < GasGrills

Objective:
- Minimize the total number of grills in the store:
  GasGrills + ElectricGrills
```python

from cpmpy import Model, intvar

# Decision Variables
GasGrills = intvar(0, 999999999)  # Number of gas grills bought
ElectricGrills = intvar(0, 999999999)  # Number of electric grills bought

# Constraints
m = Model()

# Total number of patties cooked per minute should be at least 150:
m += 20 * GasGrills + 30 * ElectricGrills >= 150
# Total units of cooking oil used per minute should be at most 140:
m += 20 * GasGrills + 25 * ElectricGrills <= 140
# Number of electric grills must be less than the number of gas grills:
m += ElectricGrills < GasGrills

# Objective
# Minimize the total number of grills in the store:
m.minimize(GasGrills + ElectricGrills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A cough syrup company sells cough syrup in kids and adult size bottles. A kids size bottle can hold 100 ml of cough syrup while an adult size bottle can hold 300 ml of cough syrup. Since there is no difference in concentration of medical ingredients between the two bottles, at least 3 times as many adult size bottle must be made as kids size bottles. However, at least 50 kids size bottles must be made. If the company has 25000 ml of cough syrup available, how many bottles of each should be made to maximize the total number of bottles?
Decision Variables:
- Number of kids size bottles made: KidsBottles
- Number of adult size bottles made: AdultBottles

Constraints:
- Total volume of cough syrup used should not exceed 25000 ml (100 ml per kids bottle, 300 ml per adult bottle):
  100 * KidsBottles + 300 * AdultBottles <= 25000
- At least three times as many adult size bottles must be made as kids size bottles:
  AdultBottles >= 3 * KidsBottles
- At least 50 kids size bottles must be made:
  KidsBottles >= 50

Objective:
- Maximize the total number of bottles (kids and adult bottles):
  KidsBottles + AdultBottles
```python

from cpmpy import Model, intvar

# Decision Variables
KidsBottles = intvar(0, 999999999)  # Number of kids size bottles made
AdultBottles = intvar(0, 999999999)  # Number of adult size bottles made

# Constraints
m = Model()

# Total volume of cough syrup used should not exceed 25000 ml:
m += 100 * KidsBottles + 300 * AdultBottles <= 25000
# At least three times as many adult size bottles must be made as kids size bottles:
m += AdultBottles >= 3 * KidsBottles
# At least 50 kids size bottles must be made:
m += KidsBottles >= 50

# Objective
# Maximize the total number of bottles (kids and adult bottles):
m.maximize(KidsBottles + AdultBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bakery makes fiber supplemented brownies and lemon squares. Each brownie requires 5 units of chocolate mix and 4 units of fiber. Each lemon square requires 7 units of lemon mix and 6 units of fiber. Lemon squares sell much faster and thus the number of lemon squares made must be larger than the number of brownies made. However, to please all customers, at least 40% of the items made must be brownies. If the bakery has 2500 units of chocolate mix and 3300 units of lemon mix, how many of each should be made to minimize the total amount of fiber needed?
Decision Variables:
- Number of brownies made: Brownies
- Number of lemon squares made: LemonSquares

Constraints:
- Chocolate mix constraint (2500 units available):
  5 * Brownies + 7 * LemonSquares <= 2500
- Fiber constraint:
  4 * Brownies + 6 * LemonSquares <= TotalFiber
- Lemon mix constraint (3300 units available):
  0 * Brownies + 7 * LemonSquares <= 3300
- Number of lemon squares made must be larger than the number of brownies made:
  LemonSquares >= Brownies
- At least 40% of the items made must be brownies:
  Brownies >= 0.4 * (Brownies + LemonSquares)

Objective:
- Minimize total amount of fiber needed:
  4 * Brownies + 6 * LemonSquares
```python

from cpmpy import Model, intvar

# Decision Variables
Brownies = intvar(0, 999999999)  # Number of brownies made
LemonSquares = intvar(0, 999999999)  # Number of lemon squares made

# Constants
TotalFiber = 4 * Brownies + 6 * LemonSquares

# Constraints
m = Model()

# Chocolate mix constraint (2500 units available):
m += 5 * Brownies + 7 * LemonSquares <= 2500
# Fiber constraint:
m += TotalFiber <= TotalFiber
# Lemon mix constraint (3300 units available):
m += 0 * Brownies + 7 * LemonSquares <= 3300
# Number of lemon squares made must be larger than the number of brownies made:
m += LemonSquares >= Brownies
# At least 40% of the items made must be brownies:
m += Brownies >= 0.4 * (Brownies + LemonSquares)

# Objective
# Minimize total amount of fiber needed:
m.minimize(TotalFiber)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic employs nurses and pharmacists to deliver shots to patients. A nurse works 5 hours per shift while a pharmacist works 7 hours per shift. Nurses are paid $250 per shift while pharmacists are paid $300 per shift. Currently, the clinic needs 200 hours of healthcare labor to meet needs. If the firm has a budget of $9000, how many of each healthcare worker should be scheduled to minimize the total number of workers?
Decision Variables:
- Number of nurses scheduled: Nurses
- Number of pharmacists scheduled: Pharmacists

Constraints:
- Total hours of healthcare labor needed is 200 hours:
  5 * Nurses + 7 * Pharmacists = 200
- Total cost should not exceed $9000 (Nurses are paid $250 per shift, Pharmacists are paid $300 per shift):
  250 * Nurses + 300 * Pharmacists <= 9000

Objective:
- Minimize the total number of workers scheduled:
  Nurses + Pharmacists
```python

from cpmpy import Model, intvar

# Decision Variables
Nurses = intvar(0, 999999999)  # Number of nurses scheduled
Pharmacists = intvar(0, 999999999)  # Number of pharmacists scheduled

# Constraints
m = Model()

# Total hours of healthcare labor needed is 200 hours:
m += 5 * Nurses + 7 * Pharmacists == 200
# Total cost should not exceed $9000 (Nurses are paid $250 per shift, Pharmacists are paid $300 per shift):
m += 250 * Nurses + 300 * Pharmacists <= 9000

# Objective
# Minimize the total number of workers scheduled:
m.minimize(Nurses + Pharmacists)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash 50 items per day while the front-loading model can wash 75 items per day. The top-loading model consumes 85 kWh per day while the front-loading model consumes 100 kWh per day. The laundromat must be able to wash at least 5000 items per day and has available 7000 kWh per day. Since the top-loading machine are harder to use, at most 40% of the machines can be top-loading. Further, at least 10 machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?
Decision Variables:
- Number of top-loading washing machines bought: TopLoadingMachines
- Number of front-loading washing machines bought: FrontLoadingMachines

Constraints:
- Total items washed per day should be at least 5000:
  50 * TopLoadingMachines + 75 * FrontLoadingMachines >= 5000
- Total kWh consumed per day should not exceed 7000:
  85 * TopLoadingMachines + 100 * FrontLoadingMachines <= 7000
- At most 40% of the machines can be top-loading:
  TopLoadingMachines <= 0.4 * (TopLoadingMachines + FrontLoadingMachines)
- At least 10 machines should be front-loading:
  FrontLoadingMachines >= 10

Objective:
- Minimize the total number of washing machines:
  TopLoadingMachines + FrontLoadingMachines
```python

from cpmpy import Model, intvar

# Decision Variables
TopLoadingMachines = intvar(0, 999999999)  # Number of top-loading washing machines bought
FrontLoadingMachines = intvar(0, 999999999)  # Number of front-loading washing machines bought

# Constraints
m = Model()

# Total items washed per day should be at least 5000:
m += 50 * TopLoadingMachines + 75 * FrontLoadingMachines >= 5000

# Total kWh consumed per day should not exceed 7000:
m += 85 * TopLoadingMachines + 100 * FrontLoadingMachines <= 7000

# At most 40% of the machines can be top-loading:
m += TopLoadingMachines <= 0.4 * (TopLoadingMachines + FrontLoadingMachines)

# At least 10 machines should be front-loading:
m += FrontLoadingMachines >= 10

# Objective
# Minimize the total number of washing machines:
m.minimize(TopLoadingMachines + FrontLoadingMachines)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?
Decision Variables:
- Number of small branches: SmallBranches
- Number of large branches: LargeBranches

Constraints:
- Total number of bank tellers used by small and large branches should not exceed 200:
  10 * SmallBranches + 15 * LargeBranches <= 200
- Total number of customers served by small and large branches should be at least 1200:
  50 * SmallBranches + 100 * LargeBranches >= 1200

Objective:
- Minimize the total number of branches needed:
  SmallBranches + LargeBranches
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBranches = intvar(0, 999999999)  # Number of small branches
LargeBranches = intvar(0, 999999999)  # Number of large branches

# Constraints
m = Model()

# Total number of bank tellers used by small and large branches should not exceed 200:
m += 10 * SmallBranches + 15 * LargeBranches <= 200
# Total number of customers served by small and large branches should be at least 1200:
m += 50 * SmallBranches + 100 * LargeBranches >= 1200

# Objective
# Minimize the total number of branches needed:
m.minimize(SmallBranches + LargeBranches)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?
Decision Variables:
- Number of regular vans purchased: RegularVans
- Number of hybrid vans purchased: HybridVans

Constraints:
- Total number of packages delivered per day should be at least 20000:
  500 * RegularVans + 300 * HybridVans >= 20000
- Total units of pollutants produced per day should not exceed 7000:
  200 * RegularVans + 100 * HybridVans <= 7000

Objective:
- Minimize the total number of vans needed:
  RegularVans + HybridVans
```python

from cpmpy import Model, intvar

# Decision Variables
RegularVans = intvar(0, 999999999)  # Number of regular vans purchased
HybridVans = intvar(0, 999999999)  # Number of hybrid vans purchased

# Constraints
m = Model()

# Total number of packages delivered per day should be at least 20000:
m += 500 * RegularVans + 300 * HybridVans >= 20000
# Total units of pollutants produced per day should not exceed 7000:
m += 200 * RegularVans + 100 * HybridVans <= 7000

# Objective
# Minimize the total number of vans needed:
m.minimize(RegularVans + HybridVans)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?
Decision Variables:
- Number of processes with a catalyst: CatalystProcesses
- Number of processes without a catalyst: NoCatalystProcesses

Constraints:
- Wood usage constraint: 
  10 * CatalystProcesses + 15 * NoCatalystProcesses <= 300
- Oxygen usage constraint:
  20 * CatalystProcesses + 12 * NoCatalystProcesses <= 300

Objective:
- Maximize carbon dioxide production (15 units per process with a catalyst, 18 units per process without a catalyst):
  15 * CatalystProcesses + 18 * NoCatalystProcesses
```python

from cpmpy import Model, intvar

# Decision Variables
CatalystProcesses = intvar(0, 999999999)  # Number of processes with a catalyst
NoCatalystProcesses = intvar(0, 999999999)  # Number of processes without a catalyst

# Constraints
m = Model()

# Wood usage constraint:
m += 10 * CatalystProcesses + 15 * NoCatalystProcesses <= 300
# Oxygen usage constraint:
m += 20 * CatalystProcesses + 12 * NoCatalystProcesses <= 300

# Objective
# Maximize carbon dioxide production (15 units per process with a catalyst, 18 units per process without a catalyst):
m.maximize(15 * CatalystProcesses + 18 * NoCatalystProcesses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?
Decision Variables:
- Number of acres of land to be picked using the traditional machine: TraditionalMachineAcres
- Number of acres of land to be picked using the modern machine: ModernMachineAcres

Constraints:
- Total acres of land used should not exceed 500:
  TraditionalMachineAcres + ModernMachineAcres <= 500
- Total fuel used should not exceed 9000 liters (20 liters per acre for the traditional machine, 15 liters per acre for the modern machine):
  20 * TraditionalMachineAcres + 15 * ModernMachineAcres <= 9000
- Total waste created should not exceed 6000 kg (10 kg per acre for the traditional machine, 15 kg per acre for the modern machine):
  10 * TraditionalMachineAcres + 15 * ModernMachineAcres <= 6000

Objective:
- Maximize the total amount of tea leaves picked (30 kg per acre for the traditional machine, 40 kg per acre for the modern machine):
  30 * TraditionalMachineAcres + 40 * ModernMachineAcres
```python

from cpmpy import Model, intvar

# Decision Variables
TraditionalMachineAcres = intvar(0, 500)  # Number of acres of land to be picked using the traditional machine
ModernMachineAcres = intvar(0, 500)  # Number of acres of land to be picked using the modern machine

# Constraints
m = Model()

# Total acres of land used should not exceed 500:
m += TraditionalMachineAcres + ModernMachineAcres <= 500
# Total fuel used should not exceed 9000 liters:
m += 20 * TraditionalMachineAcres + 15 * ModernMachineAcres <= 9000
# Total waste created should not exceed 6000 kg:
m += 10 * TraditionalMachineAcres + 15 * ModernMachineAcres <= 6000

# Objective
# Maximize the total amount of tea leaves picked (30 kg per acre for the traditional machine, 40 kg per acre for the modern machine):
m.maximize(30 * TraditionalMachineAcres + 40 * ModernMachineAcres)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A grilled cheese shop sells a light and heavy grilled cheese sandwich. A light grilled cheese sandwich requires 2 slices of bread and 3 slices of cheese. A heavy grilled cheese sandwich requires 3 slices of bread and 5 slices of cheese. Since most people who come to the store love grilled cheese, the store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches. The store has available 300 slices of bread and 500 slices of cheese. If a light grilled cheese sandwich takes 10 minutes to make and a heavy grilled cheese sandwich takes 15 minutes to make, how many of each should they make to minimize the total production time?
Decision Variables:
- Number of light grilled cheese sandwiches made: LightSandwiches
- Number of heavy grilled cheese sandwiches made: HeavySandwiches

Constraints:
- Total slices of bread used should not exceed 300 slices (2 slices per light sandwich, 3 slices per heavy sandwich):
  2 * LightSandwiches + 3 * HeavySandwiches <= 300
- Total slices of cheese used should not exceed 500 slices (3 slices per light sandwich, 5 slices per heavy sandwich):
  3 * LightSandwiches + 5 * HeavySandwiches <= 500
- At least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches:
  HeavySandwiches >= 3 * LightSandwiches

Objective:
- Minimize total production time (10 minutes per light sandwich, 15 minutes per heavy sandwich):
  10 * LightSandwiches + 15 * HeavySandwiches
```python

from cpmpy import Model, intvar

# Decision Variables
LightSandwiches = intvar(0, 999999999)  # Number of light grilled cheese sandwiches made
HeavySandwiches = intvar(0, 999999999)  # Number of heavy grilled cheese sandwiches made

# Constraints
m = Model()

# Total slices of bread used should not exceed 300 slices:
m += 2 * LightSandwiches + 3 * HeavySandwiches <= 300

# Total slices of cheese used should not exceed 500 slices:
m += 3 * LightSandwiches + 5 * HeavySandwiches <= 500

# At least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches:
m += HeavySandwiches >= 3 * LightSandwiches

# Objective
# Minimize total production time (10 minutes per light sandwich, 15 minutes per heavy sandwich):
m.minimize(10 * LightSandwiches + 15 * HeavySandwiches)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A post office is buying stamping machines and they can buy a dual or single model stamping machine. A dual model stamping machine can stamp 50 letters per minute while a single model stamping machine can stamp 30 letters per minute. The dual model stamping machine requires 20 units of glue per minute while the single model stamping machine requires 15 units of glue per minute. Since the single model stamping machine is quieter, the number of single model stamping machines must be more than the number of dual model stamping machines. Further, the post office wants to make sure they can stamp at least 300 letters per minute and use at most 135 units of glue per minute. How many of each stamping machine should they purchase to minimize the total number of stamping machines?
Decision Variables:
- Number of dual model stamping machines purchased: DualMachines
- Number of single model stamping machines purchased: SingleMachines

Constraints:
- Total number of letters stamped per minute should be at least 300:
  50 * DualMachines + 30 * SingleMachines >= 300
- Total units of glue used per minute should be at most 135:
  20 * DualMachines + 15 * SingleMachines <= 135
- Number of single model stamping machines must be more than the number of dual model stamping machines:
  SingleMachines > DualMachines

Objective:
- Minimize the total number of stamping machines:
  DualMachines + SingleMachines
```python

from cpmpy import Model, intvar

# Decision Variables
DualMachines = intvar(0, 999999999)  # Number of dual model stamping machines
SingleMachines = intvar(0, 999999999)  # Number of single model stamping machines

# Constraints
m = Model()

# Total number of letters stamped per minute should be at least 300:
m += 50 * DualMachines + 30 * SingleMachines >= 300
# Total units of glue used per minute should be at most 135:
m += 20 * DualMachines + 15 * SingleMachines <= 135
# Number of single model stamping machines must be more than the number of dual model stamping machines:
m += SingleMachines > DualMachines

# Objective
# Minimize the total number of stamping machines:
m.minimize(DualMachines + SingleMachines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A banana company sells their bananas in small and large crates. A small crate can hold 20 bananas while a large crate can hole 50 bananas. Since large crates are more manageable, the number of large crates must be at least twice the number of small crates. However, at least 5 small crates should be used. If the company has available 500 bananas, how many of each crate should the company use to maximize the total number of crates produced?
Decision Variables:
- Number of small crates used: SmallCrates
- Number of large crates used: LargeCrates

Constraints:
- Total number of bananas used in crates should not exceed 500 (20 bananas per small crate, 50 bananas per large crate):
  20 * SmallCrates + 50 * LargeCrates <= 500
- Number of large crates must be at least twice the number of small crates:
  LargeCrates >= 2 * SmallCrates
- At least 5 small crates should be used:
  SmallCrates >= 5

Objective:
- Maximize the total number of crates produced:
  SmallCrates + LargeCrates
```python

from cpmpy import Model, intvar

# Decision Variables
SmallCrates = intvar(0, 999999999)  # Number of small crates used
LargeCrates = intvar(0, 999999999)  # Number of large crates used

# Constraints
m = Model()

# Total number of bananas used in crates should not exceed 500:
m += 20 * SmallCrates + 50 * LargeCrates <= 500
# Number of large crates must be at least twice the number of small crates:
m += LargeCrates >= 2 * SmallCrates
# At least 5 small crates should be used:
m += SmallCrates >= 5

# Objective
# Maximize the total number of crates produced:
m.maximize(SmallCrates + LargeCrates)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?
Decision Variables:
- Number of chocolate crepes made: ChocolateCrepes
- Number of peanut butter crepes made: PeanutButterCrepes

Constraints:
- Total units of chocolate spread used should not exceed 400:
  3 * ChocolateCrepes + 4 * PeanutButterCrepes <= 400
- Total units of peanut butter spread used should not exceed 450:
  6 * ChocolateCrepes + 7 * PeanutButterCrepes <= 450
- Number of peanut butter crepes made must exceed the number of chocolate crepes made:
  PeanutButterCrepes > ChocolateCrepes
- At least 25% of the crepes made should be chocolate:
  ChocolateCrepes >= 0.25 * (ChocolateCrepes + PeanutButterCrepes)

Objective:
- Minimize total amount of crepe mix needed (6 units per chocolate crepe, 7 units per peanut butter crepe):
  6 * ChocolateCrepes + 7 * PeanutButterCrepes
```python

from cpmpy import Model, intvar

# Decision Variables
ChocolateCrepes = intvar(0, 999999999)  # Number of chocolate crepes made
PeanutButterCrepes = intvar(0, 999999999)  # Number of peanut butter crepes made

# Constraints
m = Model()

# Total units of chocolate spread used should not exceed 400:
m += 3 * ChocolateCrepes + 4 * PeanutButterCrepes <= 400
# Total units of peanut butter spread used should not exceed 450:
m += 6 * ChocolateCrepes + 7 * PeanutButterCrepes <= 450
# Number of peanut butter crepes made must exceed the number of chocolate crepes made:
m += PeanutButterCrepes > ChocolateCrepes
# At least 25% of the crepes made should be chocolate:
m += ChocolateCrepes >= 0.25 * (ChocolateCrepes + PeanutButterCrepes)

# Objective
# Minimize total amount of crepe mix needed (6 units per chocolate crepe, 7 units per peanut butter crepe):
m.minimize(6 * ChocolateCrepes + 7 * PeanutButterCrepes)

```
True
False
Wrong: 2, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns $300. An emergency fire fighter works 6 hours per shift and earns $100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of $7000, how many of each should the fire department hire to minimize the total number of fire fighters?
Decision Variables:
- Number of regular fire fighters hired: RegularFireFighters
- Number of emergency fire fighters hired: EmergencyFireFighters

Constraints:
- Total hours of fire fighter time should be at least 300 hours (10 hours per regular fire fighter, 6 hours per emergency fire fighter):
  10 * RegularFireFighters + 6 * EmergencyFireFighters >= 300
- The total cost of hiring fire fighters should not exceed the budget of $7000 (Regular fire fighter earns $300, Emergency fire fighter earns $100):
  300 * RegularFireFighters + 100 * EmergencyFireFighters <= 7000

Objective:
- Minimize the total number of fire fighters hired (Regular fire fighter + Emergency fire fighter):
  RegularFireFighters + EmergencyFireFighters
```python

from cpmpy import Model, intvar

# Decision Variables
RegularFireFighters = intvar(0, 999999999)  # Number of regular fire fighters hired
EmergencyFireFighters = intvar(0, 999999999)  # Number of emergency fire fighters hired

# Constraints
m = Model()

# The fire department needs at least 300 hours of fire fighter time:
m += 10 * RegularFireFighters + 6 * EmergencyFireFighters >= 300
# The total cost of hiring fire fighters should not exceed the budget of $7000:
m += 300 * RegularFireFighters + 100 * EmergencyFireFighters <= 7000

# Objective
# Minimize the total number of fire fighters hired:
m.minimize(RegularFireFighters + EmergencyFireFighters)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A mall buys two types of hand sanitizer machines, a motion activated one and a manual one. The motion activated one can deliver 50 drops per minute and consumes 30 kWh. The manual one can deliver 75 drops per minute and consumes 20 kWh. Since the motion activated one is more hygienic, at most 40% of the machines can be manual. In addition, at least 3 should be motion activated. If the mall must be able to deliver at least 1000 drops per minute and can use at most 500 kWh per minute, how many of each machine should they buy to minimize the total number of machines?
Decision Variables:
- Number of motion activated hand sanitizer machines: MotionActivatedMachines
- Number of manual hand sanitizer machines: ManualMachines

Constraints:
- Motion activated hand sanitizer machines deliver 50 drops per minute:
  50 * MotionActivatedMachines + 75 * ManualMachines >= 1000
- Motion activated hand sanitizer machines consume 30 kWh per minute, manual machines consume 20 kWh per minute:
  30 * MotionActivatedMachines + 20 * ManualMachines <= 500
- At most 40% of the machines can be manual:
  ManualMachines <= 0.4 * (MotionActivatedMachines + ManualMachines)
- At least 3 machines should be motion activated:
  MotionActivatedMachines >= 3

Objective:
- Minimize the total number of machines:
  MotionActivatedMachines + ManualMachines
```python

from cpmpy import Model, intvar

# Decision Variables
MotionActivatedMachines = intvar(0, 999999999)  # Number of motion activated hand sanitizer machines
ManualMachines = intvar(0, 999999999)  # Number of manual hand sanitizer machines

# Constraints
m = Model()

# The mall must be able to deliver at least 1000 drops per minute:
m += 50 * MotionActivatedMachines + 75 * ManualMachines >= 1000
# The mall can use at most 500 kWh per minute:
m += 30 * MotionActivatedMachines + 20 * ManualMachines <= 500
# At most 40% of the machines can be manual:
m += ManualMachines <= 0.4 * (MotionActivatedMachines + ManualMachines)
# At least 3 machines should be motion activated:
m += MotionActivatedMachines >= 3

# Objective
# Minimize the total number of machines:
m.minimize(MotionActivatedMachines + ManualMachines)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A hot dog company can build two types of butcher shops, a small shop and a large shop. A small shop can make 30 hot dogs per day and requires 2 workers. A large shop can make 70 hot dogs per day and requires 4 workers. The company must make at least 500 hot dogs per day but they only have available 30 workers. How many of each butcher shop should the company build to minimize the total number of butcher shops?
Decision Variables:
- Number of small butcher shops to build: SmallShops
- Number of large butcher shops to build: LargeShops

Constraints:
- Total number of hot dogs made per day should be at least 500:
  30 * SmallShops + 70 * LargeShops >= 500
- Total number of workers available is 30:
  2 * SmallShops + 4 * LargeShops <= 30

Objective:
- Minimize the total number of butcher shops:
  SmallShops + LargeShops
```python

from cpmpy import Model, intvar

# Decision Variables
SmallShops = intvar(0, 999999999)  # Number of small butcher shops to build
LargeShops = intvar(0, 999999999)  # Number of large butcher shops to build

# Constraints
m = Model()

# Total number of hot dogs made per day should be at least 500:
m += 30 * SmallShops + 70 * LargeShops >= 500
# Total number of workers available is 30:
m += 2 * SmallShops + 4 * LargeShops <= 30

# Objective
# Minimize the total number of butcher shops:
m.minimize(SmallShops + LargeShops)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An airport buys two types of vehicles, a 4-wheeler and 3-wheeler, to help move luggage. A 4-wheeler vehicle can move 60 luggage per day and produces 30 units of pollutant per day. A 3-wheeler vehicle can move 40 luggage per day and produces 15 units of pollutant per day. The airport needs to be able to move at least 1000 luggage per day. To avoid over-polluting the airport, they can produce at most 430 units of pollutant per day. How many of each vehicle should the airport buy to minimize the total number of vehicles needed.
Decision Variables:
- Number of 4-wheeler vehicles bought: FourWheelers
- Number of 3-wheeler vehicles bought: ThreeWheelers

Constraints:
- Total luggage moved per day should be at least 1000 (60 luggage per 4-wheeler, 40 luggage per 3-wheeler):
  60 * FourWheelers + 40 * ThreeWheelers >= 1000
- Total pollutant produced per day should be at most 430 units (30 units per 4-wheeler, 15 units per 3-wheeler):
  30 * FourWheelers + 15 * ThreeWheelers <= 430

Objective:
- Minimize the total number of vehicles needed:
  FourWheelers + ThreeWheelers
```python

from cpmpy import Model, intvar

# Decision Variables
FourWheelers = intvar(0, 999999999)  # Number of 4-wheeler vehicles bought
ThreeWheelers = intvar(0, 999999999)  # Number of 3-wheeler vehicles bought

# Constraints
m = Model()

# Total luggage moved per day should be at least 1000 (60 luggage per 4-wheeler, 40 luggage per 3-wheeler):
m += 60 * FourWheelers + 40 * ThreeWheelers >= 1000
# Total pollutant produced per day should be at most 430 units (30 units per 4-wheeler, 15 units per 3-wheeler):
m += 30 * FourWheelers + 15 * ThreeWheelers <= 430

# Objective
# Minimize the total number of vehicles needed:
m.minimize(FourWheelers + ThreeWheelers)

```
False
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A scientist is conducting two experiments to produce electricity, experiment alpha and experiment beta. In experiment alpha, 3 units of metal and 5 units of acid are required to produce 8 units of electricity. In experiment beta, 5 units of metal and 4 units of acid are required to produced 10 units of electricity. The lab has 800 units of metal and 750 units of acid available. How many of each experiment should the scientist conduct to maximize the total amount of electricity produced?
Decision Variables:
- Number of experiments alpha conducted: Alpha
- Number of experiments beta conducted: Beta

Constraints:
- Metal constraint: 3 units of metal for each unit of experiment alpha and 5 units of metal for each unit of experiment beta:
  3 * Alpha + 5 * Beta <= 800
- Acid constraint: 5 units of acid for each unit of experiment alpha and 4 units of acid for each unit of experiment beta:
  5 * Alpha + 4 * Beta <= 750

Objective:
- Maximize total electricity produced (8 units per experiment alpha, 10 units per experiment beta):
  8 * Alpha + 10 * Beta
```python

from cpmpy import Model, intvar

# Decision Variables
Alpha = intvar(0, 999999999)  # Number of experiments alpha conducted
Beta = intvar(0, 999999999)  # Number of experiments beta conducted

# Constraints
m = Model()

# Metal constraint: 3 units of metal for each unit of experiment alpha and 5 units of metal for each unit of experiment beta:
m += 3 * Alpha + 5 * Beta <= 800
# Acid constraint: 5 units of acid for each unit of experiment alpha and 4 units of acid for each unit of experiment beta:
m += 5 * Alpha + 4 * Beta <= 750

# Objective
# Maximize total electricity produced (8 units per experiment alpha, 10 units per experiment beta):
m.maximize(8 * Alpha + 10 * Beta)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A man fishes in a 250 acre lake and can catch fish either using a net or fishing line. For each acre of the lake, using a net will catch 8 fish and requires 4 units of bait but also causes 2 units of pain for the fisherman. For each acre of the lake, using a fishing line will catch 5 fish and requires 3 units of bait but also causes 1 unit of pain for the fisherman. The fisherman has available 800 units of bait and can tolerate at most 350 units of pain. For how many acres each should he use each fishing method to maximize the amount of fish he can catch?
Decision Variables:
- Acres of the lake to fish using a net: NetAcres
- Acres of the lake to fish using a fishing line: LineAcres

Constraints:
- Total acres used should not exceed 250:
  NetAcres + LineAcres <= 250
- Total units of bait used should not exceed 800 units:
  4 * NetAcres + 3 * LineAcres <= 800
- Total units of pain should not exceed 350 units:
  2 * NetAcres + LineAcres <= 350

Objective:
- Maximize the total number of fish caught:
  8 * NetAcres + 5 * LineAcres
```python

from cpmpy import Model, intvar

# Decision Variables
NetAcres = intvar(0, 250)  # Acres of the lake to fish using a net
LineAcres = intvar(0, 250)  # Acres of the lake to fish using a fishing line

# Constraints
m = Model()

# Total acres used should not exceed 250:
m += NetAcres + LineAcres <= 250
# Total units of bait used should not exceed 800 units:
m += 4 * NetAcres + 3 * LineAcres <= 800
# Total units of pain should not exceed 350 units:
m += 2 * NetAcres + LineAcres <= 350

# Objective
# Maximize the total number of fish caught:
m.maximize(8 * NetAcres + 5 * LineAcres)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A coffee shop sells mochas and regular coffees. Each mocha requires 3 units of coffee powder and 6 units of milk. Each regular coffee requires 6 units of coffee powder and 2 units of milk. The shop has available 400 units of coffee powder and 500 units of milk. Making a mocha takes 5 minutes and making a regular coffee takes 3 minutes. Since mochas are more popular among people, the shop must make at least 3 times as many mochas as regular coffees. How many of each should they make to minimize the total production time?
Decision Variables:
- Number of mochas made: Mochas
- Number of regular coffees made: RegularCoffees

Constraints:
- Coffee powder constraint (3 units per mocha, 6 units per regular coffee, 400 units total):
  3*Mochas + 6*RegularCoffees <= 400
- Milk constraint (6 units per mocha, 2 units per regular coffee, 500 units total):
  6*Mochas + 2*RegularCoffees <= 500
- Mocha popularity constraint (at least 3 times as many mochas as regular coffees):
  Mochas >= 3*RegularCoffees

Objective:
- Minimize total production time (5 minutes per mocha, 3 minutes per regular coffee):
  5*Mochas + 3*RegularCoffees
```python

from cpmpy import Model, intvar

# Decision Variables
Mochas = intvar(0, 999999999)  # Number of mochas made
RegularCoffees = intvar(0, 999999999)  # Number of regular coffees made

# Constraints
m = Model()

# Coffee powder constraint:
m += 3*Mochas + 6*RegularCoffees <= 400
# Milk constraint:
m += 6*Mochas + 2*RegularCoffees <= 500
# Mocha popularity constraint:
m += Mochas >= 3*RegularCoffees

# Objective
# Minimize total production time (5 minutes per mocha, 3 minutes per regular coffee):
m.minimize(5*Mochas + 3*RegularCoffees)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A butcher shop is buying meat slicers for their shop, a manual and automatic slicer. The manual slicer can cut 5 slices per minute while the automatic slicer can cut 8 slices per minute. In addition, to make sure all the parts operate smoothly, the manual slicer requires 3 units of grease per minute while the automatic slicer requires 6 units of grease per minute. Since the automatic slicer does not need someone to operate it, the number of manual slicers must be less than the number of automatic slicers. In addition, the butcher shop needs to be able to cut at least 50 slices per minute but can use at most 35 units of grease per minute. How many of each slicer should the butcher shop buy to minimize the total number of slicers in the shop?
Decision Variables:
- Number of manual slicers bought: ManualSlicers
- Number of automatic slicers bought: AutomaticSlicers

Constraints:
- Slicing capacity constraint (at least 50 slices per minute):
  5 * ManualSlicers + 8 * AutomaticSlicers >= 50
- Grease usage constraint (at most 35 units of grease per minute):
  3 * ManualSlicers + 6 * AutomaticSlicers <= 35
- Manual slicers should be less than automatic slicers:
  ManualSlicers < AutomaticSlicers

Objective:
- Minimize the total number of slicers in the shop:
  ManualSlicers + AutomaticSlicers
```python

from cpmpy import Model, intvar

# Decision Variables
ManualSlicers = intvar(0, 999999999)  # Number of manual slicers bought
AutomaticSlicers = intvar(0, 999999999)  # Number of automatic slicers bought

# Constraints
m = Model()

# Slicing capacity constraint (at least 50 slices per minute):
m += 5 * ManualSlicers + 8 * AutomaticSlicers >= 50

# Grease usage constraint (at most 35 units of grease per minute):
m += 3 * ManualSlicers + 6 * AutomaticSlicers <= 35

# Manual slicers should be less than automatic slicers:
m += ManualSlicers < AutomaticSlicers

# Objective
# Minimize the total number of slicers in the shop:
m.minimize(ManualSlicers + AutomaticSlicers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A water company sells water in glass and plastic bottles. A glass bottle can hole 500 ml of water while a plastic bottle can hold 750 ml of water. Because most customer prefer plastic bottles, the number of plastic bottles must be at least 3 times the number of glass bottles. However, there must be at least 20 glass bottles. If the company has available 250000 ml of water, how many of each bottle should be made to maximize the total number of bottles?
Decision Variables:
- Number of glass bottles produced: GlassBottles
- Number of plastic bottles produced: PlasticBottles

Constraints:
- At least 20 glass bottles must be produced:
  GlassBottles >= 20
- The number of plastic bottles must be at least 3 times the number of glass bottles:
  PlasticBottles >= 3 * GlassBottles
- Total water available is 250000 ml (500 ml per glass bottle, 750 ml per plastic bottle):
  500 * GlassBottles + 750 * PlasticBottles <= 250000

Objective:
- Maximize the total number of bottles produced:
  GlassBottles + PlasticBottles
```python

from cpmpy import Model, intvar

# Decision Variables
GlassBottles = intvar(0, 999999999)  # Number of glass bottles produced
PlasticBottles = intvar(0, 999999999)  # Number of plastic bottles produced

# Constraints
m = Model()

# At least 20 glass bottles must be produced:
m += GlassBottles >= 20
# The number of plastic bottles must be at least 3 times the number of glass bottles:
m += PlasticBottles >= 3 * GlassBottles
# Total water available is 250000 ml (500 ml per glass bottle, 750 ml per plastic bottle):
m += 500 * GlassBottles + 750 * PlasticBottles <= 250000

# Objective
# Maximize the total number of bottles produced:
m.maximize(GlassBottles + PlasticBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?
Decision Variables:
- Number of goat curry bowls made: GoatCurry
- Number of chicken curry bowls made: ChickenCurry

Constraints:
- Limit on goat meat (1500 units available):
  3 * GoatCurry + 5 * ChickenCurry <= 1500
- Limit on chicken meat (2000 units available):
  6 * GoatCurry + 5 * ChickenCurry <= 2000
- At least 25% of the bowls must be chicken curry:
  ChickenCurry >= 0.25 * (GoatCurry + ChickenCurry)
- Number of goat curry bowls must be larger than chicken curry bowls:
  GoatCurry > ChickenCurry

Objective:
- Minimize the total amount of curry base used:
  6 * GoatCurry + 5 * ChickenCurry
```python

from cpmpy import Model, intvar

# Decision Variables
GoatCurry = intvar(0, 999999999)  # Number of goat curry bowls made
ChickenCurry = intvar(0, 999999999)  # Number of chicken curry bowls made

# Constraints
m = Model()

# The restaurant has available 1500 units of goat meat:
m += 3 * GoatCurry + 5 * ChickenCurry <= 1500
# The restaurant has available 2000 units of chicken meat:
m += 6 * GoatCurry + 5 * ChickenCurry <= 2000
# At least 25% of the bowls must be chicken curry:
m += ChickenCurry >= 0.25 * (GoatCurry + ChickenCurry)
# Number of goat curry bowls must be larger than chicken curry bowls:
m += GoatCurry > ChickenCurry

# Objective
# Minimize the total amount of curry base used:
m.minimize(6 * GoatCurry + 5 * ChickenCurry)

```
True
False
Wrong: 2, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

An accounting firm employs part time workers and full time workers. Full time workers work 8 hours per shift while part time workers work 4 hours per shift. In addition, full time workers are paid $300 per shift while part time workers are paid $100 per shift. Currently, the accounting firm has a project requiring 500 hours of labor. If the firm has a budget of $15000, how many of each type of worker should be scheduled to minimize the total number of workers.
Decision Variables:
- Number of full-time workers: FullTimeWorkers
- Number of part-time workers: PartTimeWorkers

Constraints:
- Total hours of labor required for the project is 500 hours:
  8 * FullTimeWorkers + 4 * PartTimeWorkers = 500
- The total cost should not exceed the budget of $15000:
  300 * FullTimeWorkers + 100 * PartTimeWorkers <= 15000

Objective:
- Minimize the total number of workers:
  FullTimeWorkers + PartTimeWorkers
```python

from cpmpy import Model, intvar

# Decision Variables
FullTimeWorkers = intvar(0, 999999999)  # Number of full-time workers
PartTimeWorkers = intvar(0, 999999999)  # Number of part-time workers

# Constraints
m = Model()

# Total hours of labor required for the project is 500 hours:
m += 8 * FullTimeWorkers + 4 * PartTimeWorkers == 500
# The total cost should not exceed the budget of $15000:
m += 300 * FullTimeWorkers + 100 * PartTimeWorkers <= 15000

# Objective
# Minimize the total number of workers:
m.minimize(FullTimeWorkers + PartTimeWorkers)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?
Decision Variables:
- Number of machines of type A: MachinesA
- Number of machines of type B: MachinesB

Constraints:
- Machine A can make 30 items per day:
  30 * MachinesA >= 1000
- Machine B can make 50 items per day:
  50 * MachinesB >= 1000
- Total items produced per day should be at least 1000:
  30 * MachinesA + 50 * MachinesB >= 1000
- Machine A consumes 100 kWh per day:
  100 * MachinesA <= 3000
- Machine B consumes 120 kWh per day:
  120 * MachinesB <= 3000
- At most 30% of the machines can be of type B:
  MachinesB <= 0.3 * (MachinesA + MachinesB)
- At least 5 machines of type A should be used:
  MachinesA >= 5

Objective:
- Minimize the total number of machines:
  MachinesA + MachinesB
```python

from cpmpy import Model, intvar

# Decision Variables
MachinesA = intvar(0, 999999999)  # Number of machines of type A
MachinesB = intvar(0, 999999999)  # Number of machines of type B

# Constraints
m = Model()

# Machine A can make 30 items per day
m += 30 * MachinesA >= 1000
# Machine B can make 50 items per day
m += 50 * MachinesB >= 1000
# Total items produced per day should be at least 1000
m += 30 * MachinesA + 50 * MachinesB >= 1000
# Machine A consumes 100 kWh per day
m += 100 * MachinesA <= 3000
# Machine B consumes 120 kWh per day
m += 120 * MachinesB <= 3000
# At most 30% of the machines can be of type B
m += MachinesB <= 0.3 * (MachinesA + MachinesB)
# At least 5 machines of type A should be used
m += MachinesA >= 5

# Objective
# Minimize the total number of machines
m.minimize(MachinesA + MachinesB)

```
False
False
Wrong: 4, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?
Decision Variables:
- Number of medium sized factories: MediumFactories
- Number of small factories: SmallFactories

Constraints:
- To make at least 250 toys per day:
  50 * MediumFactories + 35 * SmallFactories >= 250
- Using a maximum of 16 operators:
  3 * MediumFactories + 2 * SmallFactories <= 16

Objective:
- Minimize the total number of factories:
  MediumFactories + SmallFactories
```python

from cpmpy import Model, intvar

# Decision Variables
MediumFactories = intvar(0, 999999999)  # Number of medium sized factories
SmallFactories = intvar(0, 999999999)  # Number of small factories

# Constraints
m = Model()

# To make at least 250 toys per day:
m += 50 * MediumFactories + 35 * SmallFactories >= 250
# Using a maximum of 16 operators:
m += 3 * MediumFactories + 2 * SmallFactories <= 16

# Objective
# Minimize the total number of factories:
m.minimize(MediumFactories + SmallFactories)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemical plant can buy two types of generators, generator A and generator B, which use two different processes to generate hydrogen. Generator A uses an electrolysis process and produces 40 cubic meters of hydrogen as well as 300 units of pollutants every day. Generator B uses a fermentation process to produce 30 cubic meters of hydrogen per day while outputting 200 units of pollutants. The chemical plant must make a minimum of 1000 cubic meters of hydrogen per day but due to environmental restrictions they can produce at most 3000 units of pollutant. How many of each type of generator should they buy to minimize the number of generators needed?
Decision Variables:
- Number of generator A units bought: GenA
- Number of generator B units bought: GenB

Constraints:
- Total hydrogen produced should be at least 1000 cubic meters per day:
  40 * GenA + 30 * GenB >= 1000
- Total pollutants produced should be at most 3000 units per day:
  300 * GenA + 200 * GenB <= 3000

Objective:
- Minimize the number of generators needed (GenA + GenB)
```python

from cpmpy import Model, intvar

# Decision Variables
GenA = intvar(0, 999999999)  # Number of generator A units bought
GenB = intvar(0, 999999999)  # Number of generator B units bought

# Constraints
m = Model()

# Total hydrogen produced should be at least 1000 cubic meters per day:
m += 40 * GenA + 30 * GenB >= 1000
# Total pollutants produced should be at most 3000 units per day:
m += 300 * GenA + 200 * GenB <= 3000

# Objective
# Minimize the number of generators needed (GenA + GenB):
m.minimize(GenA + GenB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two chemical reactions, chemical reaction A and chemical reaction B. Chemical reaction A requires 5 units of rare inert gas and 6 units of treated water to produce 10 units of a rare compound. Chemical reaction B requires 7 units of rare inert gas and 3 units of treater water to produce 8 units of a rare compound. There are 1000 units of the rare inert gas and 800 units of treated water available in the lab. How many reactions of each type should be done to maximize the amount of rare compound produced?
Decision Variables:
- Number of chemical reactions A: ReactionA
- Number of chemical reactions B: ReactionB

Constraints:
- Rare inert gas usage should not exceed 1000 units:
  5*ReactionA + 7*ReactionB <= 1000
- Treated water usage should not exceed 800 units:
  6*ReactionA + 3*ReactionB <= 800

Objective:
- Maximize the amount of rare compound produced (10 units per reaction of A, 8 units per reaction of B):
  10*ReactionA + 8*ReactionB
```python

from cpmpy import Model, intvar

# Decision Variables
ReactionA = intvar(0, 999999999)  # Number of chemical reactions A
ReactionB = intvar(0, 999999999)  # Number of chemical reactions B

# Constraints
m = Model()

# Rare inert gas usage should not exceed 1000 units:
m += 5*ReactionA + 7*ReactionB <= 1000
# Treated water usage should not exceed 800 units:
m += 6*ReactionA + 3*ReactionB <= 800

# Objective
# Maximize the amount of rare compound produced (10 units per reaction of A, 8 units per reaction of B):
m.maximize(10*ReactionA + 8*ReactionB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A mining company has available a total of 100 square miles of mining sites and considering the use of two mining techniques: heap leaching and vat leaching. For each square mile of land, heap leaching technique can have a daily production of 3 tons of rare earth oxide per square miles but it also creates 8 tons of polluted wastewater and requires 10 extraction machines. On the other hand, vat leaching technique produces 5 tons of rare earth oxide per square miles per day while creating 17 tons of polluted wastewater and requiring 20 extraction machines. There are 100 machines available and due to environmental regulations, the amount of polluted wastewater must be at most 90 tons daily. Find the proportion of lands that use each mining technique in order to maximize the daily production of rare earth oxide.
Decision Variables:
- Number of square miles of land allocated to heap leaching: HeapLeachingLand
- Number of square miles of land allocated to vat leaching: VatLeachingLand

Constraints:
- Total land allocation constraint:
  HeapLeachingLand + VatLeachingLand <= 100
- Daily rare earth oxide production constraint:
  3 * HeapLeachingLand + 5 * VatLeachingLand
- Daily polluted wastewater constraint:
  8 * HeapLeachingLand + 17 * VatLeachingLand <= 90
- Extraction machine constraint:
  10 * HeapLeachingLand + 20 * VatLeachingLand <= 100

Objective:
- Maximize the daily production of rare earth oxide:
  3 * HeapLeachingLand + 5 * VatLeachingLand
```python

from cpmpy import Model, intvar

# Decision Variables
HeapLeachingLand = intvar(0, 100)  # Number of square miles of land allocated to heap leaching
VatLeachingLand = intvar(0, 100)  # Number of square miles of land allocated to vat leaching

# Constraints
m = Model()

# Total land allocation constraint:
m += HeapLeachingLand + VatLeachingLand <= 100
# Daily rare earth oxide production constraint:
m += 3 * HeapLeachingLand + 5 * VatLeachingLand
# Daily polluted wastewater constraint:
m += 8 * HeapLeachingLand + 17 * VatLeachingLand <= 90
# Extraction machine constraint:
m += 10 * HeapLeachingLand + 20 * VatLeachingLand <= 100

# Objective
# Maximize the daily production of rare earth oxide:
m.maximize(3 * HeapLeachingLand + 5 * VatLeachingLand)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars.  If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?
Decision Variables:
- Number of milk chocolate bars made: MilkChocolateBars
- Number of dark chocolate bars made: DarkChocolateBars

Constraints:
- Available cocoa constraint:
  4 * MilkChocolateBars + 6 * DarkChocolateBars <= 2000
- Available milk constraint:
  7 * MilkChocolateBars + 3 * DarkChocolateBars <= 1750
- Milk chocolate bars should be at least twice the number of dark chocolate bars:
  MilkChocolateBars >= 2 * DarkChocolateBars

Objective:
- Minimize total production time (15 minutes per milk chocolate bar, 12 minutes per dark chocolate bar):
  15 * MilkChocolateBars + 12 * DarkChocolateBars
```python

from cpmpy import Model, intvar

# Decision Variables
MilkChocolateBars = intvar(0, 999999999)  # Number of milk chocolate bars made
DarkChocolateBars = intvar(0, 999999999)  # Number of dark chocolate bars made

# Constraints
m = Model()

# Available cocoa constraint:
m += 4 * MilkChocolateBars + 6 * DarkChocolateBars <= 2000
# Available milk constraint:
m += 7 * MilkChocolateBars + 3 * DarkChocolateBars <= 1750
# Milk chocolate bars should be at least twice the number of dark chocolate bars:
m += MilkChocolateBars >= 2 * DarkChocolateBars

# Objective
# Minimize total production time (15 minutes per milk chocolate bar, 12 minutes per dark chocolate bar):
m.minimize(15 * MilkChocolateBars + 12 * DarkChocolateBars)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute.  Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?
Decision Variables:
- Number of premium printers purchased: PremiumPrinters
- Number of regular printers purchased: RegularPrinters

Constraints:
- Total printing capacity should be at least 200 pages per minute:
  30 * PremiumPrinters + 20 * RegularPrinters >= 200
- Total ink usage should be at most 35 units per minute:
  4 * PremiumPrinters + 3 * RegularPrinters <= 35
- Number of regular printers must be less than the number of premium printers:
  RegularPrinters < PremiumPrinters

Objective:
- Minimize total number of printers in the office (PremiumPrinters + RegularPrinters)
```python

from cpmpy import Model, intvar

# Decision Variables
PremiumPrinters = intvar(0, 999999999)  # Number of premium printers
RegularPrinters = intvar(0, 999999999)  # Number of regular printers

# Constraints
m = Model()

# Total printing capacity should be at least 200 pages per minute:
m += 30 * PremiumPrinters + 20 * RegularPrinters >= 200
# Total ink usage should be at most 35 units per minute:
m += 4 * PremiumPrinters + 3 * RegularPrinters <= 35
# Number of regular printers must be less than the number of premium printers:
m += RegularPrinters < PremiumPrinters

# Objective
# Minimize total number of printers in the office (PremiumPrinters + RegularPrinters)
m.minimize(PremiumPrinters + RegularPrinters)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A vine company sells vine in vintage and regular bottles. A vintage bottle can hold 500 ml of vine while a regular bottle can hold 750 ml of vine. The company has available 100000 ml of vine. Because vintage bottles are mostly bought by collectors, the number of regular bottles must be at least 4 times as much as the number of vintage bottles. However, at least 10 vintage bottles must be made. How many of each should be made to maximize the total number of bottles produced?
Decision Variables:
- Number of vintage bottles produced: VintageBottles
- Number of regular bottles produced: RegularBottles

Constraints:
- Total amount of vine available is 100000 ml (500 ml per vintage bottle, 750 ml per regular bottle):
  500 * VintageBottles + 750 * RegularBottles <= 100000
- Number of regular bottles must be at least 4 times the number of vintage bottles:
  RegularBottles >= 4 * VintageBottles
- At least 10 vintage bottles must be made:
  VintageBottles >= 10

Objective:
- Maximize total number of bottles produced:
  VintageBottles + RegularBottles
```python

from cpmpy import Model, intvar

# Decision Variables
VintageBottles = intvar(0, 999999999)  # Number of vintage bottles produced
RegularBottles = intvar(0, 999999999)  # Number of regular bottles produced

# Constraints
m = Model()

# Total amount of vine available is 100000 ml (500 ml per vintage bottle, 750 ml per regular bottle):
m += 500 * VintageBottles + 750 * RegularBottles <= 100000
# Number of regular bottles must be at least 4 times the number of vintage bottles:
m += RegularBottles >= 4 * VintageBottles
# At least 10 vintage bottles must be made:
m += VintageBottles >= 10

# Objective
# Maximize total number of bottles produced:
m.maximize(VintageBottles + RegularBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?
Decision Variables:
- Number of packs of peach flavored candy: PeachCandy
- Number of packs of cherry flavored candy: CherryCandy

Constraints:
- Available peach flavoring constraint:
  3 * PeachCandy <= 3000
- Available cherry flavoring constraint:
  5 * CherryCandy <= 4000
- Peach candy packs must be more than cherry candy packs:
  PeachCandy > CherryCandy
- At least 30% of the total packs must be cherry flavored:
  CherryCandy >= 0.3 * (PeachCandy + CherryCandy)

Objective:
- Minimize total amount of special syrup used (5 units per peach candy pack, 4 units per cherry candy pack):
  5 * PeachCandy + 4 * CherryCandy
```python

from cpmpy import Model, intvar

# Decision Variables
PeachCandy = intvar(0, 999999999)  # Number of packs of peach flavored candy
CherryCandy = intvar(0, 999999999)  # Number of packs of cherry flavored candy

# Constraints
m = Model()

# Available peach flavoring constraint:
m += 3 * PeachCandy <= 3000
# Available cherry flavoring constraint:
m += 5 * CherryCandy <= 4000
# Peach candy packs must be more than cherry candy packs:
m += PeachCandy > CherryCandy
# At least 30% of the total packs must be cherry flavored:
m += CherryCandy >= 0.3 * (PeachCandy + CherryCandy)

# Objective
# Minimize total amount of special syrup used (5 units per peach candy pack, 4 units per cherry candy pack):
m.minimize(5 * PeachCandy + 4 * CherryCandy)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient in the hospital can take two pills, Pill 1 and Pill 2. Per pill, pill 1 provides 0.2 units of pain medication and 0.3 units of anxiety medication. Per pill, pill 2 provides 0.6 units of pain medication and 0.2 units of anxiety medication. In addition, pill 1 causes 0.3 units of discharge while pill 2 causes 0.1 units of discharge. At most 6 units of pain medication can be provided and at least 3 units of anxiety medication must be provided. How many pills of each should the patient be given to minimize the total amount of discharge?
Decision Variables:
- Number of Pill 1 taken: Pill1
- Number of Pill 2 taken: Pill2

Constraints:
- At most 6 units of pain medication can be provided:
  0.2 * Pill1 + 0.6 * Pill2 <= 6
- At least 3 units of anxiety medication must be provided:
  0.3 * Pill1 + 0.2 * Pill2 >= 3

Objective:
- Minimize total amount of discharge (0.3 units per Pill 1, 0.1 units per Pill 2):
  0.3 * Pill1 + 0.1 * Pill2
```python

from cpmpy import Model, intvar

# Decision Variables
Pill1 = intvar(0, 999999999)  # Number of Pill 1 taken
Pill2 = intvar(0, 999999999)  # Number of Pill 2 taken

# Constraints
m = Model()

# At most 6 units of pain medication can be provided:
m += 0.2 * Pill1 + 0.6 * Pill2 <= 6
# At least 3 units of anxiety medication must be provided:
m += 0.3 * Pill1 + 0.2 * Pill2 >= 3

# Objective
# Minimize total amount of discharge (0.3 units per Pill 1, 0.1 units per Pill 2):
m.minimize(0.3 * Pill1 + 0.1 * Pill2)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?
Decision Variables:
- Number of bottles of alpha brand drink: AlphaBottles
- Number of bottles of omega brand drink: OmegaBottles

Constraints:
- Protein requirement: at least 100 grams of protein
  30 * AlphaBottles + 20 * OmegaBottles >= 100
- Calorie requirement: at least 2000 calories
  350 * AlphaBottles + 300 * OmegaBottles >= 2000
- Omega brand limit: at most 35% of the total drink
  OmegaBottles <= 0.35 * (AlphaBottles + OmegaBottles)

Objective:
- Minimize sugar intake
  20 * AlphaBottles + 15 * OmegaBottles
```python

from cpmpy import Model, intvar

# Decision Variables
AlphaBottles = intvar(0, 999999999)  # Number of bottles of alpha brand drink
OmegaBottles = intvar(0, 999999999)  # Number of bottles of omega brand drink

# Constraints
m = Model()

# Protein requirement: at least 100 grams of protein
m += 30 * AlphaBottles + 20 * OmegaBottles >= 100
# Calorie requirement: at least 2000 calories
m += 350 * AlphaBottles + 300 * OmegaBottles >= 2000
# Omega brand limit: at most 35% of the total drink
m += OmegaBottles <= 0.35 * (AlphaBottles + OmegaBottles)

# Objective
# Minimize sugar intake
m.minimize(20 * AlphaBottles + 15 * OmegaBottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A summer camps does science experiments in two pre filled beakers, beaker 1 and beaker 2. Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime. Beaker 2 uses 6 units of flour and 3 units of special liquid to make 3 units of slime.  However, beaker 1 creates 4 units of waste while beaker 2 creates 2 units of waste. The summer camp has available 150 units of flour and 100 units of special liquid. If at most 30 units of waste can be produced, how many of each beaker should be used to maximize the amount of slime produced?

Decision Variables:
- Number of times Beaker 1 is used: Beaker1
- Number of times Beaker 2 is used: Beaker2

Constraints:
- Flour usage constraint (at most 150 units available):
  4 * Beaker1 + 6 * Beaker2 <= 150
- Special liquid usage constraint (at most 100 units available):
  6 * Beaker1 + 3 * Beaker2 <= 100
- Waste constraint (at most 30 units allowed):
  4 * Beaker1 + 2 * Beaker2 <= 30

Objective:
- Maximize the amount of slime produced (5 units per Beaker 1, 3 units per Beaker 2):
  5 * Beaker1 + 3 * Beaker2
```python

from cpmpy import Model, intvar

# Decision Variables
Beaker1 = intvar(0, 999999999)  # Number of times Beaker 1 is used
Beaker2 = intvar(0, 999999999)  # Number of times Beaker 2 is used

# Constraints
m = Model()

# Flour usage constraint: 4 units for Beaker 1, 6 units for Beaker 2, with at most 150 units available
m += 4 * Beaker1 + 6 * Beaker2 <= 150
# Special liquid usage constraint: 6 units for Beaker 1, 3 units for Beaker 2, with at most 100 units available
m += 6 * Beaker1 + 3 * Beaker2 <= 100
# Waste constraint: 4 units for Beaker 1, 2 units for Beaker 2, with at most 30 units allowed
m += 4 * Beaker1 + 2 * Beaker2 <= 30

# Objective
# Maximize the amount of slime produced: 5 units per Beaker 1, 3 units per Beaker 2
m.maximize(5 * Beaker1 + 3 * Beaker2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An dog hospital has 2000 units of tooth medication to make both small and large bones. A small bone requires 10 units of tooth medication and 12 units of meat. A large bone requires 15 units of tooth medication and 15 units of meat. Since most dogs prefer the small bones, at least 50% of the bones made must be small. In addition, the hospital must make at least 30 large bones. How many of each bone should be made to minimize the amount of meat needed?
Decision Variables:
- Number of small bones made: SmallBones
- Number of large bones made: LargeBones

Constraints:
- Total tooth medication used should not exceed 2000 units:
  10 * SmallBones + 15 * LargeBones <= 2000
- Total meat used should not exceed available meat:
  12 * SmallBones + 15 * LargeBones <= MeatAvailable
- At least 50% of the bones made must be small:
  SmallBones >= 0.5 * (SmallBones + LargeBones)
- At least 30 large bones must be made:
  LargeBones >= 30

Objective:
- Minimize the amount of meat needed:
  12 * SmallBones + 15 * LargeBones
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBones = intvar(0, 999999999)  # Number of small bones made
LargeBones = intvar(0, 999999999)  # Number of large bones made

# Constants
MeatAvailable = 2000  # Total units of meat available

# Constraints
m = Model()

# Total tooth medication used should not exceed 2000 units:
m += 10 * SmallBones + 15 * LargeBones <= 2000
# Total meat used should not exceed available meat:
m += 12 * SmallBones + 15 * LargeBones <= MeatAvailable
# At least 50% of the bones made must be small:
m += SmallBones >= 0.5 * (SmallBones + LargeBones)
# At least 30 large bones must be made:
m += LargeBones >= 30

# Objective
# Minimize the amount of meat needed:
m.minimize(12 * SmallBones + 15 * LargeBones)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A scientist in the arctic needs to get enough vitamin D and vitamin C in his diet by drinking orange and apple juice. Each box of orange juice contains 10 units of vitamin D and 8 units of vitamin C. Each box of apple juice contains 12 units of vitamin D and 6 units of vitamin C. Since the scientist prefers apple juice, he must drink at least 3 times as many apple juice boxes and orange juice boxes. However, he must also drink at least 3 orange juice boxes. To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C. How many of each juice box should he drink to maximize his total vitamin D intake?
Decision Variables:
- Number of boxes of orange juice: OrangeJuice
- Number of boxes of apple juice: AppleJuice

Constraints:
- Vitamin D intake constraint:
  10 * OrangeJuice + 12 * AppleJuice >= 0  (This constraint ensures that the scientist can get enough vitamin D)
- Vitamin C intake constraint:
  8 * OrangeJuice + 6 * AppleJuice <= 300  (To avoid a vitamin C overdose)
- Preference constraint:
  AppleJuice >= 3 * OrangeJuice  (The scientist prefers apple juice at least 3 times more than orange juice)
- Minimum orange juice consumption constraint:
  OrangeJuice >= 3  (The scientist must drink at least 3 orange juice boxes)

Objective:
- Maximize total vitamin D intake:
  10 * OrangeJuice + 12 * AppleJuice
```python

from cpmpy import Model, intvar

# Decision Variables
OrangeJuice = intvar(0, 999999999)  # Number of boxes of orange juice
AppleJuice = intvar(0, 999999999)  # Number of boxes of apple juice

# Constraints
m = Model()

# Vitamin D intake constraint:
m += 10 * OrangeJuice + 12 * AppleJuice >= 0
# Vitamin C intake constraint:
m += 8 * OrangeJuice + 6 * AppleJuice <= 300
# Preference constraint:
m += AppleJuice >= 3 * OrangeJuice
# Minimum orange juice consumption constraint:
m += OrangeJuice >= 3

# Objective
# Maximize total vitamin D intake:
m.maximize(10 * OrangeJuice + 12 * AppleJuice)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A cleaning company uses a cleansing chemical and odor-removing chemical to clean a house. Each unit of the cleansing chemical takes 4 units to be effective while each unit of the odor-removing chemical takes 6 minutes to be effective. The company must use at least 100 units of the cleansing chemical. In total, at least 300 units of chemicals can be used per house. Further, because the cleansing chemical is strong, there can be at most twice the amount of cleansing chemical as odor-removing chemical. How many units of each should be used to minimize the total time it takes for a house to be cleaned?
Decision Variables:
- Number of units of cleansing chemical used: CleansingChemical
- Number of units of odor-removing chemical used: OdorRemovingChemical

Constraints:
- At least 100 units of cleansing chemical must be used:
  CleansingChemical >= 100
- Total units of chemicals used should be at least 300:
  CleansingChemical + OdorRemovingChemical >= 300
- The amount of cleansing chemical used should be at most twice the amount of odor-removing chemical used:
  CleansingChemical <= 2 * OdorRemovingChemical

Objective:
- Minimize total time to clean the house (4 minutes per unit of cleansing chemical, 6 minutes per unit of odor-removing chemical):
  4 * CleansingChemical + 6 * OdorRemovingChemical
```python

from cpmpy import Model, intvar

# Decision Variables
CleansingChemical = intvar(0, 999999999)  # Number of units of cleansing chemical used
OdorRemovingChemical = intvar(0, 999999999)  # Number of units of odor-removing chemical used

# Constraints
m = Model()

# At least 100 units of cleansing chemical must be used:
m += CleansingChemical >= 100
# Total units of chemicals used should be at least 300:
m += CleansingChemical + OdorRemovingChemical >= 300
# The amount of cleansing chemical used should be at most twice the amount of odor-removing chemical used:
m += CleansingChemical <= 2 * OdorRemovingChemical

# Objective
# Minimize total time to clean the house (4 minutes per unit of cleansing chemical, 6 minutes per unit of odor-removing chemical):
m.minimize(4 * CleansingChemical + 6 * OdorRemovingChemical)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A drug company is making allergy pills and fever reducing pills in two factories, factory 1 and factory 2. Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour. Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour.  Factory 1 is much more efficient and only requires 20 units of a rare compound while factory 2 requires 30 units of a rare compound. The company only has available 1000 units of the rare compound. If the company must make at least 700 allergy pills and 600 fever reducing pills, how many hours should each factory be run to minimize the total time needed?
Decision Variables:
- Hours factory 1 runs: Factory1Hours
- Hours factory 2 runs: Factory2Hours

Constraints:
- Total units of rare compound used by factory 1 and factory 2 should not exceed 1000 units:
  20 * Factory1Hours + 10 * Factory2Hours <= 1000
- Total number of allergy pills produced by factory 1 and factory 2 should be at least 700:
  20 * Factory1Hours + 10 * Factory2Hours >= 700
- Total number of fever reducing pills produced by factory 1 and factory 2 should be at least 600:
  15 * Factory1Hours + 30 * Factory2Hours >= 600

Objective:
- Minimize the total time needed (hours) to run both factories:
  Factory1Hours + Factory2Hours
```python

from cpmpy import Model, intvar

# Decision Variables
Factory1Hours = intvar(0, 999999999)  # Hours factory 1 runs
Factory2Hours = intvar(0, 999999999)  # Hours factory 2 runs

# Constraints
m = Model()

# Total units of rare compound used by factory 1 and factory 2 should not exceed 1000 units:
m += 20 * Factory1Hours + 10 * Factory2Hours <= 1000
# Total number of allergy pills produced by factory 1 and factory 2 should be at least 700:
m += 20 * Factory1Hours + 10 * Factory2Hours >= 700
# Total number of fever reducing pills produced by factory 1 and factory 2 should be at least 600:
m += 15 * Factory1Hours + 30 * Factory2Hours >= 600

# Objective
# Minimize the total time needed (hours) to run both factories:
m.minimize(Factory1Hours + Factory2Hours)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?
Decision Variables:
- Number of fish meals: FishMeals
- Number of chicken meals: ChickenMeals

Constraints:
- Protein requirement (at least 130 units):
  10 * FishMeals + 15 * ChickenMeals >= 130
- Iron requirement (at least 120 units):
  12 * FishMeals + 8 * ChickenMeals >= 120
- Preference for chicken meals (at least twice as many chicken meals as fish meals):
  ChickenMeals >= 2 * FishMeals
- Fat intake limit (at most 7 units from fish meals and 10 units from chicken meals):
  7 * FishMeals + 10 * ChickenMeals

Objective:
- Minimize fat intake:
  7 * FishMeals + 10 * ChickenMeals
```python

from cpmpy import Model, intvar

# Decision Variables
FishMeals = intvar(0, 999999999)  # Number of fish meals
ChickenMeals = intvar(0, 999999999)  # Number of chicken meals

# Constraints
m = Model()

# Protein requirement (at least 130 units):
m += 10 * FishMeals + 15 * ChickenMeals >= 130
# Iron requirement (at least 120 units):
m += 12 * FishMeals + 8 * ChickenMeals >= 120
# Preference for chicken meals (at least twice as many chicken meals as fish meals):
m += ChickenMeals >= 2 * FishMeals
# Fat intake limit (at most 7 units from fish meals and 10 units from chicken meals):
m += 7 * FishMeals + 10 * ChickenMeals

# Objective
# Minimize fat intake:
m.minimize(7 * FishMeals + 10 * ChickenMeals)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmaceutical company makes skin cream in batches, a regular batch and premium batch, to sell to hospitals. The regular batch requires 50 units of medicinal ingredients and 40 units of rehydration product. A premium batch requires 40 units of medicinal ingredients and 60 units of rehydration product. The company has available 3000 units of medicinal ingredients and 3500 units of rehydration product. Since the premium batch sells better, the number of regular batches must be less than the number of premium batches. In addition, the company must make at least 10 regular batches. If a regular batch can treat 50 people and a premium batch can treat 30 people, how many of each batch should be made to maximize the number of people that can be treated?
Decision Variables:
- Number of regular batches made: RegularBatches
- Number of premium batches made: PremiumBatches

Constraints:
- Medicinal ingredients constraint:
  50 * RegularBatches + 40 * PremiumBatches <= 3000
- Rehydration product constraint:
  40 * RegularBatches + 60 * PremiumBatches <= 3500
- Regular batches must be at least 10:
  RegularBatches >= 10
- Regular batches must be less than premium batches:
  RegularBatches < PremiumBatches

Objective:
- Maximize the number of people treated (50 people per regular batch, 30 people per premium batch):
  50 * RegularBatches + 30 * PremiumBatches
```python

from cpmpy import Model, intvar

# Decision Variables
RegularBatches = intvar(10, 999999999)  # Number of regular batches made
PremiumBatches = intvar(0, 999999999)  # Number of premium batches made

# Constraints
m = Model()

# Medicinal ingredients constraint:
m += 50 * RegularBatches + 40 * PremiumBatches <= 3000
# Rehydration product constraint:
m += 40 * RegularBatches + 60 * PremiumBatches <= 3500
# Regular batches must be at least 10:
m += RegularBatches >= 10
# Regular batches must be less than premium batches:
m += RegularBatches < PremiumBatches

# Objective
# Maximize the number of people treated (50 people per regular batch, 30 people per premium batch):
m.maximize(50 * RegularBatches + 30 * PremiumBatches)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic takes patient blood pressure either using an automatic machine or a manual machine. The automatic machine takes 10 minutes per patient while the manual machine takes 15 minutes per patient. Since the automatic machine frequently breaks, at least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine. However, at least 20 patient can be processed by the automatic machine. If the clinic is open for 20000 minutes, maximize the number of patients whose blood pressure can be taken.
Decision Variables:
- Number of patients whose blood pressure is taken by the automatic machine: AutomaticPatients
- Number of patients whose blood pressure is taken by the manual machine: ManualPatients

Constraints:
- Total time taken by the automatic machine should not exceed 20000 minutes:
  10 * AutomaticPatients <= 20000
- Total time taken by the manual machine should not exceed 20000 minutes:
  15 * ManualPatients <= 20000
- At least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine:
  ManualPatients >= 2 * AutomaticPatients
- At least 20 patients must be processed by the automatic machine:
  AutomaticPatients >= 20

Objective:
- Maximize the total number of patients whose blood pressure is taken:
  AutomaticPatients + ManualPatients
```python

from cpmpy import Model, intvar

# Decision Variables
AutomaticPatients = intvar(20, 999999999)  # Number of patients whose blood pressure is taken by the automatic machine
ManualPatients = intvar(40, 999999999)  # Number of patients whose blood pressure is taken by the manual machine

# Constraints
m = Model()

# Total time taken by the automatic machine should not exceed 20000 minutes:
m += 10 * AutomaticPatients <= 20000
# Total time taken by the manual machine should not exceed 20000 minutes:
m += 15 * ManualPatients <= 20000
# At least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine:
m += ManualPatients >= 2 * AutomaticPatients
# At least 20 patients must be processed by the automatic machine:
m += AutomaticPatients >= 20

# Objective
# Maximize the total number of patients whose blood pressure is taken:
m.maximize(AutomaticPatients + ManualPatients)

```
False
False
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient with a sore throat can drink two syrups, syrup 1 and syrup 2 for treatment. Per serving, syrup 1 delivers 0.5 units of medicine to the throat and 0.4 units of medicine to the lungs. Per serving, syrup 2 delivers 0.2 units of medicine to the throat and 0.5 units of medicine to the lungs. Furthermore, syrup 1 contains 0.5 units of sugar while syrup 2 contains 0.3 units of sugar per serving. The patient can get at most 5 units of medicine for the throat and at least 4 units of medicine to the lungs. How many servings of each should the patient take to minimize his sugar intake?

Decision Variables:
- Number of servings of syrup 1: Syrup1
- Number of servings of syrup 2: Syrup2

Constraints:
- Maximum 5 units of medicine for the throat:
  0.5 * Syrup1 + 0.2 * Syrup2 <= 5
- At least 4 units of medicine for the lungs:
  0.4 * Syrup1 + 0.5 * Syrup2 >= 4

Objective:
- Minimize sugar intake (0.5 units of sugar in syrup 1, 0.3 units of sugar in syrup 2):
  0.5 * Syrup1 + 0.3 * Syrup2
```python

from cpmpy import Model, intvar

# Decision Variables
Syrup1 = intvar(0, 999999999)  # Number of servings of syrup 1
Syrup2 = intvar(0, 999999999)  # Number of servings of syrup 2

# Constraints
m = Model()

# Maximum 5 units of medicine for the throat:
m += 0.5 * Syrup1 + 0.2 * Syrup2 <= 5
# At least 4 units of medicine for the lungs:
m += 0.4 * Syrup1 + 0.5 * Syrup2 >= 4

# Objective
# Minimize sugar intake (0.5 units of sugar in syrup 1, 0.3 units of sugar in syrup 2):
m.minimize(0.5 * Syrup1 + 0.3 * Syrup2)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A sailor can eat either a crab cakes or a lobster roll for his meals. He needs to ensure he gets at least 80 units of vitamin A and 100 units of vitamin C. Each crab cake contains 5 units of vitamin A and 7 units of vitamin C. Each lobster roll contains 8 units of vitamin A and 4 units of vitamin C. In addition, since lobster is more expensive, at most 40% of his meals should be lobster rolls. If each crab cake contains 4 units of unsaturated fat and each lobster roll contains 6 units of unsaturated fat, how many of each should he eat to minimize his unsaturated fat intake?
Decision Variables:
- Number of crab cakes eaten: CrabCakes
- Number of lobster rolls eaten: LobsterRolls

Constraints:
- Vitamin A requirement (at least 80 units):
  5 * CrabCakes + 8 * LobsterRolls >= 80
- Vitamin C requirement (at least 100 units):
  7 * CrabCakes + 4 * LobsterRolls >= 100
- At most 40% of meals should be lobster rolls:
  LobsterRolls <= 0.4 * (CrabCakes + LobsterRolls)

Objective:
- Minimize unsaturated fat intake (4 units per crab cake, 6 units per lobster roll):
  4 * CrabCakes + 6 * LobsterRolls
```python

from cpmpy import Model, intvar

# Decision Variables
CrabCakes = intvar(0, 999999999)  # Number of crab cakes eaten
LobsterRolls = intvar(0, 999999999)  # Number of lobster rolls eaten

# Constraints
m = Model()

# Vitamin A requirement (at least 80 units):
m += 5 * CrabCakes + 8 * LobsterRolls >= 80
# Vitamin C requirement (at least 100 units):
m += 7 * CrabCakes + 4 * LobsterRolls >= 100
# At most 40% of meals should be lobster rolls:
m += LobsterRolls <= 0.4 * (CrabCakes + LobsterRolls)

# Objective
# Minimize unsaturated fat intake (4 units per crab cake, 6 units per lobster roll):
m.minimize(4 * CrabCakes + 6 * LobsterRolls)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A science show preforms two different demonstrations, demonstration 1 and demonstration 2. In demonstration 1, 10 units of mint and 20 units of the active ingredient is used to make 25 units of minty foam. In demonstration 2, 12 units of mint and 15 units of the active ingredient is used to make 18 units of minty foam. In addition, demonstration 1 creates 5 units of black tar while demonstration 2 creates 3 units of black tar. The show has available 120 units of mint and 100 units of active ingredients. If at most 50 units of black tar can be produced, how many of each demonstration should be done to maximize the amount of minty foam produced?
Decision Variables:
- Number of demonstration 1 performed: Demo1
- Number of demonstration 2 performed: Demo2

Constraints:
- Mint constraint: 
  10 * Demo1 + 12 * Demo2 <= 120
- Active ingredient constraint:
  20 * Demo1 + 15 * Demo2 <= 100
- Black tar constraint:
  5 * Demo1 + 3 * Demo2 <= 50
- Non-negativity constraint:
  Demo1 >= 0
  Demo2 >= 0

Objective:
- Maximize the amount of minty foam produced:
  25 * Demo1 + 18 * Demo2
```python

from cpmpy import Model, intvar

# Decision Variables
Demo1 = intvar(0, 999999999)  # Number of demonstration 1 performed
Demo2 = intvar(0, 999999999)  # Number of demonstration 2 performed

# Constraints
m = Model()

# Mint constraint: at most 120 units of mint available
m += 10 * Demo1 + 12 * Demo2 <= 120

# Active ingredient constraint: at most 100 units of active ingredient available
m += 20 * Demo1 + 15 * Demo2 <= 100

# Black tar constraint: at most 50 units of black tar can be produced
m += 5 * Demo1 + 3 * Demo2 <= 50

# Non-negativity constraint
m += Demo1 >= 0
m += Demo2 >= 0

# Objective
# Maximize the amount of minty foam produced
m.maximize(25 * Demo1 + 18 * Demo2)

```
True
True
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A lab has 20000 mg of mRNA anti-viral available to make children's and adult vaccines. Each children's vaccine contains 50 mg of mRNA and 50 mg of fever suppressant. Each adult vaccine contains 75 mg of mRNA and 75 mg of fever suppressant. Since adult vaccines are more essential, at least 70% of vaccines should be adult vaccines. However, at least 50 children's vaccines should be made. How many of each vaccine should be made to minimize the amount of fever suppressant used?
Decision Variables:
- Number of children's vaccines made: ChildrenVaccines
- Number of adult vaccines made: AdultVaccines

Constraints:
- Total amount of mRNA used should not exceed 20000 mg (50 mg per children's vaccine, 75 mg per adult vaccine):
  50 * ChildrenVaccines + 75 * AdultVaccines <= 20000
- At least 70% of vaccines should be adult vaccines:
  AdultVaccines >= 0.7 * (ChildrenVaccines + AdultVaccines)
- At least 50 children's vaccines should be made:
  ChildrenVaccines >= 50

Objective:
- Minimize the amount of fever suppressant used (50 mg per children's vaccine, 75 mg per adult vaccine):
  50 * ChildrenVaccines + 75 * AdultVaccines
```python

from cpmpy import Model, intvar

# Decision Variables
ChildrenVaccines = intvar(0, 999999999)  # Number of children's vaccines made
AdultVaccines = intvar(0, 999999999)  # Number of adult vaccines made

# Constraints
m = Model()

# Total amount of mRNA used should not exceed 20000 mg:
m += 50 * ChildrenVaccines + 75 * AdultVaccines <= 20000
# At least 70% of vaccines should be adult vaccines:
m += AdultVaccines >= 0.7 * (ChildrenVaccines + AdultVaccines)
# At least 50 children's vaccines should be made:
m += ChildrenVaccines >= 50

# Objective
# Minimize the amount of fever suppressant used (50 mg per children's vaccine, 75 mg per adult vaccine):
m.minimize(50 * ChildrenVaccines + 75 * AdultVaccines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A parent feeds their baby two flavors of baby food, apple and carrot, in order to meet the babies fat and folate requirements. Each serving of apple flavored baby food contains 2 units of fat and 5 units of folate. Each serving of carrot flavored baby food contains 4 units of fat and 3 units of folate. The baby does not like the carrot flavor, and therefore he must eat three times as many apple flavored baby food as carrot flavored baby food. However, he must eat at least 2 servings of carrot flavored baby food. If the baby can consume at most 100 units of folate, how many servings of each should he eat to maximize his fat intake?
Decision Variables:
- Number of servings of apple flavored baby food: AppleServings
- Number of servings of carrot flavored baby food: CarrotServings

Constraints:
- Fat requirement: The baby must eat three times as many apple flavored baby food as carrot flavored baby food:
  AppleServings == 3 * CarrotServings
- Minimum servings of carrot flavored baby food:
  CarrotServings >= 2
- Folate constraint: The baby can consume at most 100 units of folate:
  5 * AppleServings + 3 * CarrotServings <= 100

Objective:
- Maximize fat intake (2 units per serving of apple flavored baby food, 4 units per serving of carrot flavored baby food):
  2 * AppleServings + 4 * CarrotServings
```python

from cpmpy import Model, intvar

# Decision Variables
AppleServings = intvar(0, 999999999)  # Number of servings of apple flavored baby food
CarrotServings = intvar(0, 999999999)  # Number of servings of carrot flavored baby food

# Constraints
m = Model()

# The baby must eat three times as many apple flavored baby food as carrot flavored baby food:
m += AppleServings == 3 * CarrotServings
# Minimum servings of carrot flavored baby food:
m += CarrotServings >= 2
# Folate constraint: The baby can consume at most 100 units of folate:
m += 5 * AppleServings + 3 * CarrotServings <= 100

# Objective
# Maximize fat intake (2 units per serving of apple flavored baby food, 4 units per serving of carrot flavored baby food):
m.maximize(2 * AppleServings + 4 * CarrotServings)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both fertilizer and seeds need to be added to a lawn. One unit of fertilizer takes 0.5 minutes to be effective while one unit of seeds takes 1.5 minutes to be effective. There can be at most 300 units of fertilizer and seeds combined added to the lawn. In addition at least 50 units of fertilizer need to be added. Since the lawn is really patchy, there can be at most twice the amount of fertilizer as seeds. How many units of each should be added to minimize the total time it takes for the lawn to be ready?
Decision Variables:
- Units of fertilizer added: Fertilizer
- Units of seeds added: Seeds

Constraints:
- Total units of fertilizer and seeds should not exceed 300:
  Fertilizer + Seeds <= 300
- At least 50 units of fertilizer need to be added:
  Fertilizer >= 50
- There can be at most twice the amount of fertilizer as seeds:
  Fertilizer <= 2 * Seeds

Objective:
- Minimize the total time it takes for the lawn to be ready (0.5 minutes per unit of fertilizer, 1.5 minutes per unit of seeds):
  0.5 * Fertilizer + 1.5 * Seeds
```python

from cpmpy import Model, intvar

# Decision Variables
Fertilizer = intvar(0, 300)  # Units of fertilizer added
Seeds = intvar(0, 300)  # Units of seeds added

# Constraints
m = Model()

# Total units of fertilizer and seeds should not exceed 300:
m += Fertilizer + Seeds <= 300
# At least 50 units of fertilizer need to be added:
m += Fertilizer >= 50
# There can be at most twice the amount of fertilizer as seeds:
m += Fertilizer <= 2 * Seeds

# Objective
# Minimize the total time it takes for the lawn to be ready (0.5 minutes per unit of fertilizer, 1.5 minutes per unit of seeds):
m.minimize(0.5 * Fertilizer + 1.5 * Seeds)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmacy has two factories, factory 1 and factory 2, where they make acne cream and anti-bacterial cream. Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour. Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour. Factory 1 requires 30 units of base gel per hour while factory 2 requires 45 units of base gel per hour. The pharmacy has available 5000 units of base gel. Further, they must make at least 800 units of acne cream and 1000 units of anti-bacterial cream. How many hours should each factory be run to minimize the total time needed?
Decision Variables:
- Hours factory 1 runs: Factory1Hours
- Hours factory 2 runs: Factory2Hours

Constraints:
- Total units of base gel used by factory 1 and factory 2 should not exceed 5000 units:
  30 * Factory1Hours + 45 * Factory2Hours <= 5000
- At least 800 units of acne cream must be produced:
  12 * Factory1Hours + 20 * Factory2Hours >= 800
- At least 1000 units of anti-bacterial cream must be produced:
  15 * Factory1Hours + 10 * Factory2Hours >= 1000

Objective:
- Minimize total time needed (hours):
  Factory1Hours + Factory2Hours
```python

from cpmpy import Model, intvar

# Decision Variables
Factory1Hours = intvar(0, 999999999)  # Hours factory 1 runs
Factory2Hours = intvar(0, 999999999)  # Hours factory 2 runs

# Constraints
m = Model()

# Total units of base gel used by factory 1 and factory 2 should not exceed 5000 units:
m += 30 * Factory1Hours + 45 * Factory2Hours <= 5000
# At least 800 units of acne cream must be produced:
m += 12 * Factory1Hours + 20 * Factory2Hours >= 800
# At least 1000 units of anti-bacterial cream must be produced:
m += 15 * Factory1Hours + 10 * Factory2Hours >= 1000

# Objective
# Minimize total time needed (hours):
m.minimize(Factory1Hours + Factory2Hours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?
Decision Variables:
- Number of burgers eaten: Burgers
- Number of slices of pizza eaten: PizzaSlices

Constraints:
- Fat intake requirement (at least 130 units):
  10 * Burgers + 8 * PizzaSlices >= 130
- Calorie intake requirement (at least 3000 calories):
  300 * Burgers + 250 * PizzaSlices >= 3000
- Cholesterol intake:
  12 * Burgers + 10 * PizzaSlices

Additional Constraint:
- The man eats at least twice as many slices of pizza as burgers:
  PizzaSlices >= 2 * Burgers

Objective:
- Minimize cholesterol intake:
  12 * Burgers + 10 * PizzaSlices
```python

from cpmpy import Model, intvar

# Decision Variables
Burgers = intvar(0, 999999999)  # Number of burgers eaten
PizzaSlices = intvar(0, 999999999)  # Number of slices of pizza eaten

# Constraints
m = Model()

# Fat intake requirement (at least 130 units):
m += 10 * Burgers + 8 * PizzaSlices >= 130
# Calorie intake requirement (at least 3000 calories):
m += 300 * Burgers + 250 * PizzaSlices >= 3000
# Cholesterol intake:
m += 12 * Burgers + 10 * PizzaSlices

# Additional Constraint
# The man eats at least twice as many slices of pizza as burgers:
m += PizzaSlices >= 2 * Burgers

# Objective
# Minimize cholesterol intake:
m.minimize(12 * Burgers + 10 * PizzaSlices)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinic makes batches of vitamin shots and pills. Each batch of vitamin shots requires 30 units of vitamin C and 40 units of vitamin D. Each batch of vitamin pills requires 50 units of vitamin C and 30 units of vitamin D. Since pills are more popular, the number of batches of vitamin pills must be larger than the number of batches of vitamin shots. Further, the clinic can make at most 10 batches of vitamin shots. The clinic has available 1200 units of vitamin C and 1500 units of vitamin D. If each batch of vitamin shots can supply 10 people and each batch of vitamin pills can supply 7 people, how many batches of each should be made to maximize the number of people that can be supplied?
Decision Variables:
- Number of batches of vitamin shots: ShotsBatches
- Number of batches of vitamin pills: PillsBatches

Constraints:
- Vitamin C constraint:
  30 * ShotsBatches + 50 * PillsBatches <= 1200
- Vitamin D constraint:
  40 * ShotsBatches + 30 * PillsBatches <= 1500
- Number of shots batches should be at most 10:
  ShotsBatches <= 10
- Number of pills batches should be greater than shots batches:
  PillsBatches > ShotsBatches

Objective:
- Maximize the number of people supplied (10 people per shots batch, 7 people per pills batch):
  10 * ShotsBatches + 7 * PillsBatches
```python

from cpmpy import Model, intvar

# Decision Variables
ShotsBatches = intvar(0, 10)  # Number of batches of vitamin shots
PillsBatches = intvar(1, 999999999)  # Number of batches of vitamin pills

# Constraints
m = Model()

# Vitamin C constraint:
m += 30 * ShotsBatches + 50 * PillsBatches <= 1200
# Vitamin D constraint:
m += 40 * ShotsBatches + 30 * PillsBatches <= 1500
# Number of shots batches should be at most 10:
m += ShotsBatches <= 10
# Number of pills batches should be greater than shots batches:
m += PillsBatches > ShotsBatches

# Objective
# Maximize the number of people supplied (10 people per shots batch, 7 people per pills batch):
m.maximize(10 * ShotsBatches + 7 * PillsBatches)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor's office takes the  temperature of patients one by one either by using an electronic or regular thermometer. The electronic thermometer takes 3 minutes to make a reading while the regular thermometer takes 2 minutes to make a reading. Since the electronic thermometer is more accurate, at least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer. Since the electronic thermometer has a cooldown time, at least 50 patients should have their temperature checked by a regular thermometer. If the office is open for 15000 minutes, maximize the number of patients whose temperature can be taken?
Decision Variables:
- Number of patients checked with the electronic thermometer: ElectronicPatients
- Number of patients checked with the regular thermometer: RegularPatients

Constraints:
- Total time spent on electronic thermometer readings and regular thermometer readings should not exceed 15000 minutes:
  3 * ElectronicPatients + 2 * RegularPatients <= 15000
- At least twice as many patients should be checked with the electronic thermometer than the regular thermometer:
  ElectronicPatients >= 2 * RegularPatients
- At least 50 patients should be checked with the regular thermometer:
  RegularPatients >= 50

Objective:
- Maximize the total number of patients whose temperature is taken:
  ElectronicPatients + RegularPatients
```python

from cpmpy import Model, intvar

# Decision Variables
ElectronicPatients = intvar(0, 999999999)  # Number of patients checked with the electronic thermometer
RegularPatients = intvar(0, 999999999)  # Number of patients checked with the regular thermometer

# Constraints
m = Model()

# Total time spent on electronic thermometer readings and regular thermometer readings should not exceed 15000 minutes:
m += 3 * ElectronicPatients + 2 * RegularPatients <= 15000
# At least twice as many patients should be checked with the electronic thermometer than the regular thermometer:
m += ElectronicPatients >= 2 * RegularPatients
# At least 50 patients should be checked with the regular thermometer:
m += RegularPatients >= 50

# Objective
# Maximize the total number of patients whose temperature is taken:
m.maximize(ElectronicPatients + RegularPatients)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient can be hooked up to two machines to have medicine delivered, machine 1 and machine 2. Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain. Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain. In addition however, machine 1 creates 0.3 units of waste per minute while machine 2 creates 0.5 units of waste per minute. If at most 8 units of medicine can be received by the heart and at least 4 units of medicine should be received by the brain, how many minutes should each machine be used to minimize the total amount of waste produced?
Decision Variables:
- Minutes machine 1 is used: MinutesMachine1
- Minutes machine 2 is used: MinutesMachine2

Constraints:
- Total medicine delivered to the heart should be at most 8 units:
  0.5 * MinutesMachine1 + 0.3 * MinutesMachine2 <= 8
- Total medicine delivered to the brain should be at least 4 units:
  0.8 * MinutesMachine1 + 1 * MinutesMachine2 >= 4

Objective:
- Minimize total waste produced (0.3 units of waste per minute for machine 1, 0.5 units of waste per minute for machine 2):
  0.3 * MinutesMachine1 + 0.5 * MinutesMachine2
```python

from cpmpy import Model, intvar

# Decision Variables
MinutesMachine1 = intvar(0, 999999999)  # Minutes machine 1 is used
MinutesMachine2 = intvar(0, 999999999)  # Minutes machine 2 is used

# Constraints
m = Model()

# Total medicine delivered to the heart should be at most 8 units:
m += 0.5 * MinutesMachine1 + 0.3 * MinutesMachine2 <= 8
# Total medicine delivered to the brain should be at least 4 units:
m += 0.8 * MinutesMachine1 + 1 * MinutesMachine2 >= 4

# Objective
# Minimize total waste produced (0.3 units of waste per minute for machine 1, 0.5 units of waste per minute for machine 2):
m.minimize(0.3 * MinutesMachine1 + 0.5 * MinutesMachine2)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?
Decision Variables:
- Number of packs of ramen eaten: Ramen
- Number of packs of fries eaten: Fries

Constraints:
- At most 30% of meals can be ramen:
  Ramen <= 0.3 * (Ramen + Fries)
- Calorie intake should be at least 3000:
  400 * Ramen + 300 * Fries >= 3000
- Protein intake should be at least 80 grams:
  20 * Ramen + 10 * Fries >= 80

Objective:
- Minimize sodium intake (100 mg of sodium in ramen, 75 mg of sodium in fries):
  100 * Ramen + 75 * Fries
```python

from cpmpy import Model, intvar

# Decision Variables
Ramen = intvar(0, 999999999)  # Number of packs of ramen eaten
Fries = intvar(0, 999999999)  # Number of packs of fries eaten

# Constraints
m = Model()

# At most 30% of meals can be ramen:
m += Ramen <= 0.3 * (Ramen + Fries)
# Calorie intake should be at least 3000:
m += 400 * Ramen + 300 * Fries >= 3000
# Protein intake should be at least 80 grams:
m += 20 * Ramen + 10 * Fries >= 80

# Objective
# Minimize sodium intake (100 mg of sodium in ramen, 75 mg of sodium in fries):
m.minimize(100 * Ramen + 75 * Fries)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A science store makes two boxes, a cheap and expensive box. The cheap box contains 3 units of metal and 5 units of acid which can be mixed to create 8 units of foam. The expensive box contains 5 units of metal and 8 units of acid which can be mixed to create 10 units of foam. The cheap box however gives off 2 units of heat while the expensive box gives off 3 units of heat. The science store has available 200 units of metal and 300 units of acid. If at most 50 units of heat can be given off, how many of each box should the store make to maximize the amount of foam produced?
Decision Variables:
- Number of cheap boxes produced: CheapBoxes
- Number of expensive boxes produced: ExpensiveBoxes

Constraints:
- Metal constraint: Total metal used should not exceed 200 units:
  3 * CheapBoxes + 5 * ExpensiveBoxes <= 200
- Acid constraint: Total acid used should not exceed 300 units:
  5 * CheapBoxes + 8 * ExpensiveBoxes <= 300
- Heat constraint: Total heat given off should not exceed 50 units:
  2 * CheapBoxes + 3 * ExpensiveBoxes <= 50

Objective:
- Maximize the amount of foam produced (8 units per cheap box, 10 units per expensive box):
  8 * CheapBoxes + 10 * ExpensiveBoxes
```python

from cpmpy import Model, intvar

# Decision Variables
CheapBoxes = intvar(0, 999999999)  # Number of cheap boxes produced
ExpensiveBoxes = intvar(0, 999999999)  # Number of expensive boxes produced

# Constraints
m = Model()

# Metal constraint: Total metal used should not exceed 200 units
m += 3 * CheapBoxes + 5 * ExpensiveBoxes <= 200
# Acid constraint: Total acid used should not exceed 300 units
m += 5 * CheapBoxes + 8 * ExpensiveBoxes <= 300
# Heat constraint: Total heat given off should not exceed 50 units
m += 2 * CheapBoxes + 3 * ExpensiveBoxes <= 50

# Objective
# Maximize the amount of foam produced (8 units per cheap box, 10 units per expensive box)
m.maximize(8 * CheapBoxes + 10 * ExpensiveBoxes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?
Decision Variables:
- Number of painkiller pills produced: Painkillers
- Number of sleeping pills produced: SleepingPills

Constraints:
- Total morphine used for painkillers and sleeping pills should not exceed 3000 mg:
  10 * Painkillers + 6 * SleepingPills <= 3000
- Total digestive medicine used for painkillers and sleeping pills should be enough for each pill:
  3 * Painkillers + 5 * SleepingPills >= 50
- At least 70% of the total pills should be sleeping pills:
  SleepingPills >= 0.7 * (Painkillers + SleepingPills)

Objective:
- Minimize the total amount of digestive medicine needed:
  3 * Painkillers + 5 * SleepingPills
```python

from cpmpy import Model, intvar

# Decision Variables
Painkillers = intvar(0, 999999999)  # Number of painkiller pills produced
SleepingPills = intvar(0, 999999999)  # Number of sleeping pills produced

# Constraints
m = Model()

# Total morphine used should not exceed 3000 mg:
m += 10 * Painkillers + 6 * SleepingPills <= 3000
# Total digestive medicine used should be enough for each pill:
m += 3 * Painkillers + 5 * SleepingPills >= 50
# At least 70% of the total pills should be sleeping pills:
m += SleepingPills >= 0.7 * (Painkillers + SleepingPills)

# Objective
# Minimize the total amount of digestive medicine needed:
m.minimize(3 * Painkillers + 5 * SleepingPills)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A boy needs to get enough magnesium and zinc in his diet by eating chewable gummies and taking pills. Each gummy contains 3 units of magnesium and 4 units of zinc. Each pill contains 2 units of magnesium and 5 units of zinc. The boy must take at least 10 pills. Since he prefers gummies more, he must eat at least 3 times the amount of gummies as pills. If the boy can consume at most 200 units of magnesium, how many of each should he eat to maximize his zinc intake?
Decision Variables:
- Number of chewable gummies consumed: Gummies
- Number of pills taken: Pills

Constraints:
- Magnesium constraint (at most 200 units):
  3 * Gummies + 2 * Pills <= 200
- At least 10 pills must be taken:
  Pills >= 10
- Gummies must be consumed at least 3 times the amount of pills:
  Gummies >= 3 * Pills

Objective:
- Maximize zinc intake:
  Maximize: 4 * Gummies + 5 * Pills
```python

from cpmpy import Model, intvar

# Decision Variables
Gummies = intvar(0, 999999999)  # Number of chewable gummies consumed
Pills = intvar(0, 999999999)  # Number of pills taken

# Constraints
m = Model()

# Magnesium constraint (at most 200 units):
m += 3 * Gummies + 2 * Pills <= 200
# At least 10 pills must be taken:
m += Pills >= 10
# Gummies must be consumed at least 3 times the amount of pills:
m += Gummies >= 3 * Pills

# Objective
# Maximize zinc intake: 4 units per gummy, 5 units per pill
m.maximize(4 * Gummies + 5 * Pills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient takes anxiety medication and anti-depressants one after the other. Each unit of anxiety medication takes 3 minutes to be effective while each unit of anti-depressant takes 5 minutes to be effective. The patient must take at least 100 units of medication and at least 30 should be anxiety medication. Since the anxiety medication is strong, the patient can take at most twice the amount of anxiety medication as anti-depressants. How many units of each should the patient take to minimize the total time it take for the medication to be effective?
Decision Variables:
- Number of units of anxiety medication taken: AnxietyMeds
- Number of units of anti-depressants taken: AntiDepressants

Constraints:
- Total units of medication taken should be at least 100:
  AnxietyMeds + AntiDepressants >= 100
- At least 30 units of anxiety medication should be taken:
  AnxietyMeds >= 30
- The patient can take at most twice the amount of anxiety medication as anti-depressants:
  AnxietyMeds <= 2 * AntiDepressants

Objective:
- Minimize total time for medication to be effective (3 minutes per unit of anxiety medication, 5 minutes per unit of anti-depressants):
  3 * AnxietyMeds + 5 * AntiDepressants
```python

from cpmpy import Model, intvar

# Decision Variables
AnxietyMeds = intvar(0, 999999999)  # Number of units of anxiety medication taken
AntiDepressants = intvar(0, 999999999)  # Number of units of anti-depressants taken

# Constraints
m = Model()

# Total units of medication taken should be at least 100:
m += AnxietyMeds + AntiDepressants >= 100
# At least 30 units of anxiety medication should be taken:
m += AnxietyMeds >= 30
# The patient can take at most twice the amount of anxiety medication as anti-depressants:
m += AnxietyMeds <= 2 * AntiDepressants

# Objective
# Minimize total time for medication to be effective (3 minutes per unit of anxiety medication, 5 minutes per unit of anti-depressants):
m.minimize(3 * AnxietyMeds + 5 * AntiDepressants)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can  make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?
Decision Variables:
- Hours of operation for machine 1: HoursMachine1
- Hours of operation for machine 2: HoursMachine2

Constraints:
- Production of eye cream should be at least 1300 ml:
  30 * HoursMachine1 + 45 * HoursMachine2 >= 1300
- Production of foot cream should be at least 1500 ml:
  60 * HoursMachine1 + 30 * HoursMachine2 >= 1500
- Total distilled water used should not exceed 1200 ml:
  20 * HoursMachine1 + 15 * HoursMachine2 <= 1200

Objective:
- Minimize total time needed:
  HoursMachine1 + HoursMachine2
```python

from cpmpy import Model, intvar

# Decision Variables
HoursMachine1 = intvar(0, 999999999)  # Hours of operation for machine 1
HoursMachine2 = intvar(0, 999999999)  # Hours of operation for machine 2

# Constraints
m = Model()

# Production of eye cream should be at least 1300 ml:
m += 30 * HoursMachine1 + 45 * HoursMachine2 >= 1300
# Production of foot cream should be at least 1500 ml:
m += 60 * HoursMachine1 + 30 * HoursMachine2 >= 1500
# Total distilled water used should not exceed 1200 ml:
m += 20 * HoursMachine1 + 15 * HoursMachine2 <= 1200

# Objective
# Minimize total time needed:
m.minimize(HoursMachine1 + HoursMachine2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?
Decision Variables:
- Number of servings of almonds: Almonds
- Number of servings of cashews: Cashews

Constraints:
- Calorie intake requirement (at least 10000 calories):
  200 * Almonds + 300 * Cashews >= 10000
- Protein intake requirement (at least 800 grams):
  20 * Almonds + 25 * Cashews >= 800
- Almonds should be eaten at least twice as many as cashews:
  Almonds >= 2 * Cashews

Objective:
- Minimize fat intake (15 grams of fat per serving of almonds, 12 grams of fat per serving of cashews):
  15 * Almonds + 12 * Cashews
```python

from cpmpy import Model, intvar

# Decision Variables
Almonds = intvar(0, 999999999)  # Number of servings of almonds
Cashews = intvar(0, 999999999)  # Number of servings of cashews

# Constraints
m = Model()

# Calorie intake requirement (at least 10000 calories):
m += 200 * Almonds + 300 * Cashews >= 10000
# Protein intake requirement (at least 800 grams):
m += 20 * Almonds + 25 * Cashews >= 800
# Almonds should be eaten at least twice as many as cashews:
m += Almonds >= 2 * Cashews

# Objective
# Minimize fat intake (15 grams of fat per serving of almonds, 12 grams of fat per serving of cashews):
m.minimize(15 * Almonds + 12 * Cashews)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?
Decision Variables:
- Number of liquid hand sanitizers made: LiquidHandSanitizers
- Number of foam hand sanitizers made: FoamHandSanitizers

Constraints:
- Water constraint (40 units for liquid, 60 units for foam, total available 2000 units):
  40 * LiquidHandSanitizers + 60 * FoamHandSanitizers <= 2000
- Alcohol constraint (50 units for liquid, 40 units for foam, total available 2100 units):
  50 * LiquidHandSanitizers + 40 * FoamHandSanitizers <= 2100
- Number of foam hand sanitizers made must exceed the number of liquid hand sanitizers:
  FoamHandSanitizers > LiquidHandSanitizers
- At most 30 liquid hand sanitizers can be made:
  LiquidHandSanitizers <= 30

Objective:
- Maximize the number of hands that can be cleaned (30 hands per liquid sanitizer, 20 hands per foam sanitizer):
  30 * LiquidHandSanitizers + 20 * FoamHandSanitizers
```python

from cpmpy import Model, intvar

# Decision Variables
LiquidHandSanitizers = intvar(0, 999999999)  # Number of liquid hand sanitizers made
FoamHandSanitizers = intvar(0, 999999999)  # Number of foam hand sanitizers made

# Constraints
m = Model()

# Water constraint (40 units for liquid, 60 units for foam, total available 2000 units):
m += 40 * LiquidHandSanitizers + 60 * FoamHandSanitizers <= 2000
# Alcohol constraint (50 units for liquid, 40 units for foam, total available 2100 units):
m += 50 * LiquidHandSanitizers + 40 * FoamHandSanitizers <= 2100
# Number of foam hand sanitizers made must exceed the number of liquid hand sanitizers:
m += FoamHandSanitizers > LiquidHandSanitizers
# At most 30 liquid hand sanitizers can be made:
m += LiquidHandSanitizers <= 30

# Objective
# Maximize the number of hands that can be cleaned (30 hands per liquid sanitizer, 20 hands per foam sanitizer):
m.maximize(30 * LiquidHandSanitizers + 20 * FoamHandSanitizers)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic is conducting a throat or nasal swabs on each patient. A throat swab takes 5 minutes while a nasal swab takes 3 minutes. The clinic must administer at least 30 nasal swabs. Since the nasal swab is more uncomfortable, at least 4 times as many throat swabs must be done as nasal swabs. If the clinic is only operational for 20000 minutes, how many of each swab should be done to maximize the number of patients seen?
Decision Variables:
- Number of throat swabs conducted: ThroatSwabs
- Number of nasal swabs conducted: NasalSwabs

Constraints:
- Total time taken for throat swabs and nasal swabs should not exceed 20000 minutes:
  5 * ThroatSwabs + 3 * NasalSwabs <= 20000
- At least 30 nasal swabs must be administered:
  NasalSwabs >= 30
- Number of throat swabs must be at least 4 times the number of nasal swabs:
  ThroatSwabs >= 4 * NasalSwabs

Objective:
- Maximize the number of patients seen (total number of swabs conducted):
  ThroatSwabs + NasalSwabs
```python

from cpmpy import Model, intvar

# Decision Variables
ThroatSwabs = intvar(0, 999999999)  # Number of throat swabs conducted
NasalSwabs = intvar(0, 999999999)  # Number of nasal swabs conducted

# Constraints
m = Model()

# Total time taken for throat swabs and nasal swabs should not exceed 20000 minutes:
m += 5 * ThroatSwabs + 3 * NasalSwabs <= 20000
# At least 30 nasal swabs must be administered:
m += NasalSwabs >= 30
# Number of throat swabs must be at least 4 times the number of nasal swabs:
m += ThroatSwabs >= 4 * NasalSwabs

# Objective
# Maximize the number of patients seen (total number of swabs conducted):
m.maximize(ThroatSwabs + NasalSwabs)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?
Decision Variables:
- Number of doses of pain killer 1 taken: Doses1
- Number of doses of pain killer 2 taken: Doses2

Constraints:
- At least 4 units of medicine should be delivered to the legs:
  0.5 * Doses1 + 0.7 * Doses2 >= 4
- At most 8 units of sleep medicine should be delivered:
  0.3 * Doses1 + 0.6 * Doses2 <= 8

Objective:
- Maximize the amount of medicine delivered to the back (0.8 units per dose for pain killer 1, 0.4 units per dose for pain killer 2):
  0.8 * Doses1 + 0.4 * Doses2
```python

from cpmpy import Model, intvar

# Decision Variables
Doses1 = intvar(0, 999999999)  # Number of doses of pain killer 1 taken
Doses2 = intvar(0, 999999999)  # Number of doses of pain killer 2 taken

# Constraints
m = Model()

# At least 4 units of medicine should be delivered to the legs:
m += 0.5 * Doses1 + 0.7 * Doses2 >= 4
# At most 8 units of sleep medicine should be delivered:
m += 0.3 * Doses1 + 0.6 * Doses2 <= 8

# Objective
# Maximize the amount of medicine delivered to the back (0.8 units per dose for pain killer 1, 0.4 units per dose for pain killer 2):
m.maximize(0.8 * Doses1 + 0.4 * Doses2)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar.  The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?
Decision Variables:
- Number of bananas consumed: Bananas
- Number of mangoes consumed: Mangoes

Constraints:
- Total calories consumed should be at least 4000:
  80 * Bananas + 100 * Mangoes >= 4000
- Total potassium consumed should be at least 150 grams:
  20 * Bananas + 15 * Mangoes >= 150
- Limit on the percentage of mangoes consumed:
  Mangoes <= 0.33 * (Bananas + Mangoes)
- Sugar intake should be minimized:
  10 * Bananas + 8 * Mangoes

Objective:
- Minimize sugar intake:
  10 * Bananas + 8 * Mangoes
```python

from cpmpy import Model, intvar

# Decision Variables
Bananas = intvar(0, 999999999)  # Number of bananas consumed
Mangoes = intvar(0, 999999999)  # Number of mangoes consumed

# Constraints
m = Model()

# Total calories consumed should be at least 4000:
m += 80 * Bananas + 100 * Mangoes >= 4000
# Total potassium consumed should be at least 150 grams:
m += 20 * Bananas + 15 * Mangoes >= 150
# Limit on the percentage of mangoes consumed:
m += Mangoes <= 0.33 * (Bananas + Mangoes)

# Objective
# Minimize sugar intake:
m.minimize(10 * Bananas + 8 * Mangoes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

In a science club, there are two tables that can be set up to make slime. At table 1, 3 units of powder and 5 units of glue are used to make 4 units of slime. At table 2, 8 units of powder and 6 units of glue are used to make 5 units of slime. However, table 1 produces 2 units of mess while table 2 produces 4 units of mess. The science club has available 100 units of powder and 90 units of glue.  If at most 30 units of mess can be made, how many of each table should be set up to maximize the amount of slime produced?

Decision Variables:
- Number of times Table 1 is set up: Table1
- Number of times Table 2 is set up: Table2

Constraints:
- Powder constraint (100 units available):
  3 * Table1 + 8 * Table2 <= 100
- Glue constraint (90 units available):
  5 * Table1 + 6 * Table2 <= 90
- Mess constraint (at most 30 units allowed):
  2 * Table1 + 4 * Table2 <= 30

Objective:
- Maximize slime production (4 units of slime per setup at Table 1, 5 units of slime per setup at Table 2):
  4 * Table1 + 5 * Table2
```python

from cpmpy import Model, intvar

# Decision Variables
Table1 = intvar(0, 999999999)  # Number of times Table 1 is set up
Table2 = intvar(0, 999999999)  # Number of times Table 2 is set up

# Constraints
m = Model()

# Powder constraint (100 units available):
m += 3 * Table1 + 8 * Table2 <= 100
# Glue constraint (90 units available):
m += 5 * Table1 + 6 * Table2 <= 90
# Mess constraint (at most 30 units allowed):
m += 2 * Table1 + 4 * Table2 <= 30

# Objective
# Maximize slime production (4 units of slime per setup at Table 1, 5 units of slime per setup at Table 2):
m.maximize(4 * Table1 + 5 * Table2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A pharmaceutical company has 800 units of painkiller medicine and makes daytime and nighttime painkiller. A daytime pill has 6 units of painkiller medicine and 2 units of sleep medicine. A nighttime pill has 5 units of painkiller medicine and 5 units of sleep medicine. Since some people don’t want the sleeping effect, at least 40% of the pills must be daytime pills. However at least 200 nighttime pills must be made. How many of each pill should be made to minimize the total amount of sleep medicine required?
Decision Variables:
- Number of daytime pills produced: DaytimePills
- Number of nighttime pills produced: NighttimePills

Constraints:
- Total units of painkiller medicine used for daytime and nighttime pills should not exceed 800 units:
  6 * DaytimePills + 5 * NighttimePills <= 800
- Total units of sleep medicine used for daytime and nighttime pills should be minimized:
  2 * DaytimePills + 5 * NighttimePills
- At least 40% of the total pills should be daytime pills:
  DaytimePills >= 0.4 * (DaytimePills + NighttimePills)
- At least 200 nighttime pills must be made:
  NighttimePills >= 200

Objective:
- Minimize total amount of sleep medicine required:
  2 * DaytimePills + 5 * NighttimePills
```python

from cpmpy import Model, intvar

# Decision Variables
DaytimePills = intvar(0, 999999999)  # Number of daytime pills produced
NighttimePills = intvar(0, 999999999)  # Number of nighttime pills produced

# Constraints
m = Model()

# Total units of painkiller medicine used for daytime and nighttime pills should not exceed 800 units:
m += 6 * DaytimePills + 5 * NighttimePills <= 800
# Total units of sleep medicine used for daytime and nighttime pills should be minimized:
m += 2 * DaytimePills + 5 * NighttimePills
# At least 40% of the total pills should be daytime pills:
m += DaytimePills >= 0.4 * (DaytimePills + NighttimePills)
# At least 200 nighttime pills must be made:
m += NighttimePills >= 200

# Objective
# Minimize total amount of sleep medicine required:
m.minimize(2 * DaytimePills + 5 * NighttimePills)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A competitive eater challenges himself to eat slices of cheesecake and caramel cake. Each slice of cheesecake contains 200 calories and 40 grams of sugar. Each slice of caramel cake contains 250 calories and 50 grams of sugar. He prefers cheesecake and decides to eat at least 3 times as many slices of cheesecake as caramel cake. However, he must also eat at least 3 slices of caramel cake. If he can consume at most 10000 calories in one day, how many slices of each cake should he eat to maximize the total amount of sugar he consumes?
Decision Variables:
- Number of slices of cheesecake eaten: CheesecakeSlices
- Number of slices of caramel cake eaten: CaramelCakeSlices

Constraints:
- The competitive eater must eat at least 3 times as many slices of cheesecake as caramel cake:
  CheesecakeSlices >= 3 * CaramelCakeSlices
- The competitive eater must eat at least 3 slices of caramel cake:
  CaramelCakeSlices >= 3
- The total calories consumed must be at most 10000:
  200 * CheesecakeSlices + 250 * CaramelCakeSlices <= 10000

Objective:
- Maximize the total amount of sugar consumed (40 grams per slice of cheesecake, 50 grams per slice of caramel cake):
  40 * CheesecakeSlices + 50 * CaramelCakeSlices
```python

from cpmpy import Model, intvar

# Decision Variables
CheesecakeSlices = intvar(0, 999999999)  # Number of slices of cheesecake eaten
CaramelCakeSlices = intvar(0, 999999999)  # Number of slices of caramel cake eaten

# Constraints
m = Model()

# The competitive eater must eat at least 3 times as many slices of cheesecake as caramel cake:
m += CheesecakeSlices >= 3 * CaramelCakeSlices
# The competitive eater must eat at least 3 slices of caramel cake:
m += CaramelCakeSlices >= 3
# The total calories consumed must be at most 10000:
m += 200 * CheesecakeSlices + 250 * CaramelCakeSlices <= 10000

# Objective
# Maximize the total amount of sugar consumed (40 grams per slice of cheesecake, 50 grams per slice of caramel cake):
m.maximize(40 * CheesecakeSlices + 50 * CaramelCakeSlices)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both sulfate and ginger need to be added to a shampoo. One unit of sulfate takes 0.5 minutes to be effective while one unit of ginger takes 0.75 minutes to be effective. The shampoo must contain at least 100 units of sulfates and a total of 400 units of both ingredient. Since too much sulfate can damage the hair, there can be at most twice the amount of sulfate as ginger in the shampoo. How many units of each should be added to the shampoo to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)
Decision Variables:
- Units of sulfate added first: SulfateFirst
- Units of ginger added first: GingerFirst

Constraints:
- Total units of sulfate and ginger should be 400:
  SulfateFirst + GingerFirst + SulfateSecond + GingerSecond = 400
- At least 100 units of sulfate should be added:
  SulfateFirst + SulfateSecond >= 100
- Total time for sulfate and ginger to be effective:
  0.5 * SulfateFirst + 0.75 * GingerFirst + 0.5 * SulfateSecond + 0.75 * GingerSecond

Additional Constraint:
- The amount of sulfate should be at most twice the amount of ginger:
  SulfateFirst + SulfateSecond <= 2 * (GingerFirst + GingerSecond)

Objective:
- Minimize the total amount of time for the mixture to be effective.
```python

from cpmpy import Model, intvar

# Decision Variables
SulfateFirst = intvar(0, 400)  # Units of sulfate added first
GingerFirst = intvar(0, 400)  # Units of ginger added first
SulfateSecond = intvar(0, 400)  # Units of sulfate added second
GingerSecond = intvar(0, 400)  # Units of ginger added second

# Constraints
m = Model()

# Total units of sulfate and ginger should be 400:
m += SulfateFirst + GingerFirst + SulfateSecond + GingerSecond == 400
# At least 100 units of sulfate should be added:
m += SulfateFirst + SulfateSecond >= 100
# Total time for sulfate and ginger to be effective:
m += 0.5 * SulfateFirst + 0.75 * GingerFirst + 0.5 * SulfateSecond + 0.75 * GingerSecond
# The amount of sulfate should be at most twice the amount of ginger:
m += SulfateFirst + SulfateSecond <= 2 * (GingerFirst + GingerSecond)

# Objective
# Minimize the total amount of time for the mixture to be effective.
m.minimize(0.5 * SulfateFirst + 0.75 * GingerFirst + 0.5 * SulfateSecond + 0.75 * GingerSecond)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A pharmaceutical company has two labs, lab 1 and lab 2, where they make heart and lung medication in pill form. At lab 1, they can produce 20 heart medication pills and 30 lung medication pills per hour. At lab 2, they can produce 30 heart medication pills and 40 lung medication pills per hour. Each session at lab 1 requires 3 hours of worker labor while each session at lab 2 requires 5 hours of worker labor. The company has 1500 worker hours available and must make at least 20000 heart medication pills and at least 30000 lung medication pills. How many hours at each lab should be run to minimize the total time needed?
Decision Variables:
- Hours to run lab 1: HoursLab1
- Hours to run lab 2: HoursLab2

Constraints:
- Total worker hours available is 1500:
  3 * HoursLab1 + 5 * HoursLab2 <= 1500
- At least 20000 heart medication pills must be produced:
  20 * HoursLab1 + 30 * HoursLab2 >= 20000
- At least 30000 lung medication pills must be produced:
  30 * HoursLab1 + 40 * HoursLab2 >= 30000

Objective:
- Minimize the total time needed:
  HoursLab1 + HoursLab2
```python

from cpmpy import Model, intvar

# Decision Variables
HoursLab1 = intvar(0, 999999999)  # Hours to run lab 1
HoursLab2 = intvar(0, 999999999)  # Hours to run lab 2

# Constraints
m = Model()

# Total worker hours available is 1500:
m += 3 * HoursLab1 + 5 * HoursLab2 <= 1500
# At least 20000 heart medication pills must be produced:
m += 20 * HoursLab1 + 30 * HoursLab2 >= 20000
# At least 30000 lung medication pills must be produced:
m += 30 * HoursLab1 + 40 * HoursLab2 >= 30000

# Objective
# Minimize the total time needed:
m.minimize(HoursLab1 + HoursLab2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A doctor suggests that his patient eat oranges and grapefruit to meet his vitamin C and vitamin A requirements. One orange contains 5 units of vitamin C, 3 units of vitamin A, and 5 grams of sugar. One grapefruit contains 7 units of vitamin C, 5 units of vitamin A, and 6 grams of sugar. The patient must get at least 80 units of vitamin C and 70 units of vitamin A. Since the patent prefers oranges, he must eat at least 2 times as many oranges as grapefruit. How many of each should he eat to minimize his sugar intake?
Decision Variables:
- Number of oranges eaten: Oranges
- Number of grapefruits eaten: Grapefruits

Constraints:
- Vitamin C requirement (at least 80 units):
  5 * Oranges + 7 * Grapefruits >= 80
- Vitamin A requirement (at least 70 units):
  3 * Oranges + 5 * Grapefruits >= 70
- Oranges should be eaten at least twice as many as grapefruits:
  Oranges >= 2 * Grapefruits

Objective:
- Minimize sugar intake (5 grams per orange, 6 grams per grapefruit):
  5 * Oranges + 6 * Grapefruits
```python

from cpmpy import Model, intvar

# Decision Variables
Oranges = intvar(0, 999999999)  # Number of oranges eaten
Grapefruits = intvar(0, 999999999)  # Number of grapefruits eaten

# Constraints
m = Model()

# Vitamin C requirement (at least 80 units):
m += 5 * Oranges + 7 * Grapefruits >= 80
# Vitamin A requirement (at least 70 units):
m += 3 * Oranges + 5 * Grapefruits >= 70
# Oranges should be eaten at least twice as many as grapefruits:
m += Oranges >= 2 * Grapefruits

# Objective
# Minimize sugar intake (5 grams per orange, 6 grams per grapefruit):
m.minimize(5 * Oranges + 6 * Grapefruits)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A university research lab can make two types of diabetes medicine, medicine A and medicine B. Per dose, medicine A takes 30 units of imported material and 50 units of mRNA to make. Per dose, medicine B takes 40 units of imported material and 30 units of mRNA to take. The lab has available at most 300 units of imported material and 400 units of mRNA. The lab can make at most 5 doses of medicine A and the number of doses of medicine B must be larger than the number of dosed of medicine A. If one dose of medicine A can treat 12 people and one dose of medicine B can treat 8 people, how many doses of each should be made to maximize the number of people that can be treated?

Decision Variables:
- Number of doses of medicine A: MedicineA
- Number of doses of medicine B: MedicineB

Constraints:
- Available imported material constraint:
  30 * MedicineA + 40 * MedicineB <= 300
- Available mRNA constraint:
  50 * MedicineA + 30 * MedicineB <= 400
- Limit on the number of doses of medicine A:
  MedicineA <= 5
- Number of doses of medicine B must be larger than the number of doses of medicine A:
  MedicineB > MedicineA

Objective:
- Maximize the number of people treated (12 people per dose of medicine A, 8 people per dose of medicine B):
  12 * MedicineA + 8 * MedicineB
```python

from cpmpy import Model, intvar

# Decision Variables
MedicineA = intvar(0, 5)  # Number of doses of medicine A
MedicineB = intvar(0, 5)  # Number of doses of medicine B

# Constraints
m = Model()

# Available imported material constraint:
m += 30 * MedicineA + 40 * MedicineB <= 300
# Available mRNA constraint:
m += 50 * MedicineA + 30 * MedicineB <= 400
# Limit on the number of doses of medicine A:
m += MedicineA <= 5
# Number of doses of medicine B must be larger than the number of doses of medicine A:
m += MedicineB > MedicineA

# Objective
# Maximize the number of people treated (12 people per dose of medicine A, 8 people per dose of medicine B):
m.maximize(12 * MedicineA + 8 * MedicineB)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A popup clinic is doing virus testing with either spit tests or swabs. A spit test takes 10 minutes to administer while a  swab takes 15 minutes to administer. Since the spit test is more accurate, at least twice as many spit tests should be given as  swabs. However, at least 20  swabs must be administers. If the popup clinic operates for 8000 minutes, maximize the number of tests that can be administered.
Decision Variables:
- Number of spit tests administered: SpitTests
- Number of swab tests administered: SwabTests

Constraints:
- Total time constraint (10 minutes per spit test, 15 minutes per swab test, total operating time 8000 minutes):
  10 * SpitTests + 15 * SwabTests <= 8000
- At least twice as many spit tests as swab tests:
  SpitTests >= 2 * SwabTests
- At least 20 swab tests administered:
  SwabTests >= 20

Objective:
- Maximize the total number of tests administered:
  SpitTests + SwabTests
```python

from cpmpy import Model, intvar

# Decision Variables
SpitTests = intvar(0, 999999999)  # Number of spit tests administered
SwabTests = intvar(0, 999999999)  # Number of swab tests administered

# Constraints
m = Model()

# Total time constraint (8000 minutes operating time):
m += 10 * SpitTests + 15 * SwabTests <= 8000
# At least twice as many spit tests as swab tests:
m += SpitTests >= 2 * SwabTests
# At least 20 swab tests administered:
m += SwabTests >= 20

# Objective
# Maximize the total number of tests administered:
m.maximize(SpitTests + SwabTests)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin.  In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor.  How many minutes of each beam should be used to minimize the total radiation received by the pancreas?
Decision Variables:
- Minutes of Beam 1 used: Beam1
- Minutes of Beam 2 used: Beam2

Constraints:
- Total medicine delivered to the benign area of the pancreas:
  0.3 * Beam1 + 0.2 * Beam2 <= TotalPancreasMedicine
- Total medicine delivered to the benign area of the skin should not exceed 4 units:
  0.2 * Beam1 + 0.1 * Beam2 <= 4
- Total medicine delivered to the tumor should be at least 3 units:
  0.6 * Beam1 + 0.4 * Beam2 >= 3

Objective:
- Minimize total radiation received by the pancreas:
  0.3 * Beam1 + 0.2 * Beam2
```python

from cpmpy import Model, intvar

# Decision Variables
Beam1 = intvar(0, 999999999)  # Minutes of Beam 1 used
Beam2 = intvar(0, 999999999)  # Minutes of Beam 2 used

# Constants
TotalPancreasMedicine = 4  # Total medicine delivered to the benign area of the pancreas

# Constraints
m = Model()

# Total medicine delivered to the benign area of the pancreas:
m += 0.3 * Beam1 + 0.2 * Beam2 <= TotalPancreasMedicine
# Total medicine delivered to the benign area of the skin should not exceed 4 units:
m += 0.2 * Beam1 + 0.1 * Beam2 <= 4
# Total medicine delivered to the tumor should be at least 3 units:
m += 0.6 * Beam1 + 0.4 * Beam2 >= 3

# Objective
# Minimize total radiation received by the pancreas:
m.minimize(0.3 * Beam1 + 0.2 * Beam2)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A body builder buys pre prepared meals, a turkey dinner and a tuna salad sandwich. The turkey dinner contains 20 grams of protein, 30 grams of carbs, and 12 grams of fat. The tuna salad sandwich contains 18 grams of protein, 25 grams of carbs, and 8 grams of fat. The bodybuilder wants to get at least 150 grams of protein and 200 grams of carbs. In addition because the turkey dinner is expensive, at most 40% of the meals should be turkey dinner. How many of each meal should he eat if he wants to minimize his fat intake?
Decision Variables:
- Number of turkey dinners: TurkeyDinners
- Number of tuna salad sandwiches: TunaSandwiches

Constraints:
- Protein requirement (at least 150 grams):
  20 * TurkeyDinners + 18 * TunaSandwiches >= 150
- Carb requirement (at least 200 grams):
  30 * TurkeyDinners + 25 * TunaSandwiches >= 200
- Turkey dinner limit (at most 40% of total meals):
  TurkeyDinners <= 0.4 * (TurkeyDinners + TunaSandwiches)

Objective:
- Minimize fat intake:
  12 * TurkeyDinners + 8 * TunaSandwiches
```python

from cpmpy import Model, intvar

# Decision Variables
TurkeyDinners = intvar(0, 999999999)  # Number of turkey dinners
TunaSandwiches = intvar(0, 999999999)  # Number of tuna salad sandwiches

# Constraints
m = Model()

# Protein requirement (at least 150 grams):
m += 20 * TurkeyDinners + 18 * TunaSandwiches >= 150
# Carb requirement (at least 200 grams):
m += 30 * TurkeyDinners + 25 * TunaSandwiches >= 200
# Turkey dinner limit (at most 40% of total meals):
m += TurkeyDinners <= 0.4 * (TurkeyDinners + TunaSandwiches)

# Objective
# Minimize fat intake:
m.minimize(12 * TurkeyDinners + 8 * TunaSandwiches)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas.  The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?
Decision Variables:
- Number of experiment 1 conducted: Experiment1
- Number of experiment 2 conducted: Experiment2

Constraints:
- Red liquid usage constraint: 3 * Experiment1 + 5 * Experiment2 <= 80
- Blue liquid usage constraint: 4 * Experiment1 + 3 * Experiment2 <= 70
- Smelly gas production constraint: Experiment1 + 2 * Experiment2 <= 10

Objective:
- Maximize total amount of green gas produced: 5 * Experiment1 + 6 * Experiment2
```python

from cpmpy import Model, intvar

# Decision Variables
Experiment1 = intvar(0, 999999999)  # Number of experiment 1 conducted
Experiment2 = intvar(0, 999999999)  # Number of experiment 2 conducted

# Constraints
m = Model()

# Red liquid usage constraint (80 units available):
m += 3 * Experiment1 + 5 * Experiment2 <= 80
# Blue liquid usage constraint (70 units available):
m += 4 * Experiment1 + 3 * Experiment2 <= 70
# Smelly gas production constraint (at most 10 units):
m += Experiment1 + 2 * Experiment2 <= 10

# Objective
# Maximize total amount of green gas produced:
m.maximize(5 * Experiment1 + 6 * Experiment2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?
Decision Variables:
- Number of large pills: LargePills
- Number of small pills: SmallPills

Constraints:
- Each large pill requires 3 units of medicinal ingredients and 2 units of filler:
  3 * LargePills + 2 * LargePills <= 1000
- Each small pill requires 2 units of medicinal ingredients and 1 unit of filler:
  2 * SmallPills + 1 * SmallPills <= 1000
- At least 100 large pills must be made:
  LargePills >= 100
- At least 60% of the total number of pills must be small:
  SmallPills >= 0.6 * (LargePills + SmallPills)

Objective:
- Minimize the total number of filler material needed:
  2 * LargePills + 1 * SmallPills
```python

from cpmpy import Model, intvar

# Decision Variables
LargePills = intvar(100, 999999999)  # Number of large pills
SmallPills = intvar(0, 999999999)  # Number of small pills

# Constraints
m = Model()

# Each large pill requires 3 units of medicinal ingredients and 2 units of filler:
m += 3 * LargePills + 2 * LargePills <= 1000
# Each small pill requires 2 units of medicinal ingredients and 1 unit of filler:
m += 2 * SmallPills + 1 * SmallPills <= 1000
# At least 100 large pills must be made:
m += LargePills >= 100
# At least 60% of the total number of pills must be small:
m += SmallPills >= 0.6 * (LargePills + SmallPills)

# Objective
# Minimize the total number of filler material needed:
m.minimize(2 * LargePills + 1 * SmallPills)

```
True
False
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both chorine and water softener need to be added to a pool. One unit of chlorine takes 1 minute to be effective while one unit of water softener takes 2 minutes to be effective. Because too much chlorine can burn your eyes, there has to at most half as much chlorine as water softener in the pool. If there has to be at least 200 units of chlorine in the water and a total of 500 units of chemicals in the water, how many units of each should be added to minimize the total time it takes for the pool to be ready? (Note: chlorine must be added before water softener or vice versa).
Decision Variables:
- Units of chlorine added to the pool: Chlorine
- Units of water softener added to the pool: WaterSoftener

Constraints:
- Total units of chemicals in the water should be at most 500:
  Chlorine + WaterSoftener <= 500
- At least 200 units of chlorine should be added:
  Chlorine >= 200
- The ratio of chlorine to water softener should be at most 1:2:
  Chlorine <= 2 * WaterSoftener

Objective:
- Minimize the total time it takes for the pool to be ready (1 minute for chlorine, 2 minutes for water softener):
  Chlorine + 2 * WaterSoftener
```python

from cpmpy import Model, intvar

# Decision Variables
Chlorine = intvar(200, 500)  # Units of chlorine added to the pool
WaterSoftener = intvar(0, 500)  # Units of water softener added to the pool

# Constraints
m = Model()

# Total units of chemicals in the water should be at most 500:
m += Chlorine + WaterSoftener <= 500
# At least 200 units of chlorine should be added:
m += Chlorine >= 200
# The ratio of chlorine to water softener should be at most 1:2:
m += Chlorine <= 2 * WaterSoftener

# Objective
# Minimize the total time it takes for the pool to be ready (1 minute for chlorine, 2 minutes for water softener):
m.minimize(Chlorine + 2 * WaterSoftener)

```
False
False
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A drug company is making pain killers and sleeping pills using two processes, process 1 and process 2. Process 1 produces 35 units of pain killers and 12 units of sleeping pills per hour. Process 2 produces 50 units of pain killers and 30 units of sleeping pills per hour. Process 1 requires 50 units of preliminary material while process 2 requires 60 units of preliminary material. The drug company has available 2000 units of preliminary material and must make at least 1200 units of pain killers and 1200 units of sleeping pills. How many of each process should be run to minimize the total time needed?
Decision Variables:
- Number of hours process 1 is run: HoursProcess1
- Number of hours process 2 is run: HoursProcess2

Constraints:
- Total preliminary material used by process 1 and process 2 should not exceed 2000 units:
  50 * HoursProcess1 + 60 * HoursProcess2 <= 2000
- Minimum of 1200 units of pain killers must be produced:
  35 * HoursProcess1 + 50 * HoursProcess2 >= 1200
- Minimum of 1200 units of sleeping pills must be produced:
  12 * HoursProcess1 + 30 * HoursProcess2 >= 1200

Objective:
- Minimize total time needed (considering 1 hour per unit of each product):
  HoursProcess1 + HoursProcess2
```python

from cpmpy import Model, intvar

# Decision Variables
HoursProcess1 = intvar(0, 999999999)  # Number of hours process 1 is run
HoursProcess2 = intvar(0, 999999999)  # Number of hours process 2 is run

# Constraints
m = Model()

# Total preliminary material used by process 1 and process 2 should not exceed 2000 units:
m += 50 * HoursProcess1 + 60 * HoursProcess2 <= 2000
# Minimum of 1200 units of pain killers must be produced:
m += 35 * HoursProcess1 + 50 * HoursProcess2 >= 1200
# Minimum of 1200 units of sleeping pills must be produced:
m += 12 * HoursProcess1 + 30 * HoursProcess2 >= 1200

# Objective
# Minimize total time needed (considering 1 hour per unit of each product):
m.minimize(HoursProcess1 + HoursProcess2)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?
Decision Variables:
- Number of packs of blueberries consumed: Blueberries
- Number of packs of strawberries consumed: Strawberries

Constraints:
- To meet the anti-oxidant requirement (at least 90 units):
  3 * Blueberries + 1 * Strawberries >= 90
- To meet the mineral requirement (at least 100 units):
  5 * Blueberries + 7 * Strawberries >= 100
- Relationship between the number of packs of strawberries and blueberries:
  Strawberries >= 3 * Blueberries

Objective:
- Minimize sugar intake (5 grams per pack of blueberries, 7 grams per pack of strawberries):
  5 * Blueberries + 7 * Strawberries
```python-fs
from cpmpy import Model, intvar

# Decision Variables
Blueberries = intvar(0, 999999999)  # Number of packs of blueberries consumed
Strawberries = intvar(0, 999999999)  # Number of packs of strawberries consumed

# Constraints
m = Model()

# Anti-oxidant requirement (at least 90 units):
m += 3 * Blueberries + 1 * Strawberries >= 90
# Mineral requirement (at least 100 units):
m += 5 * Blueberries + 7 * Strawberries >= 100
# Relationship between the number of packs of strawberries and blueberries:
m += Strawberries >= 3 * Blueberries

# Objective
# Minimize sugar intake (5 grams per pack of blueberries, 7 grams per pack of strawberries):
m.minimize(5 * Blueberries + 7 * Strawberries)
```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?
Decision Variables:
- Number of beam bridges built: BeamBridges
- Number of truss bridges built: TrussBridges

Constraints:
- Total Popsicle sticks used should not exceed 600:
  30 * BeamBridges + 50 * TrussBridges <= 600
- Total units of glue used should not exceed 100:
  5 * BeamBridges + 8 * TrussBridges <= 100
- Number of truss bridges built should be at most 5:
  TrussBridges <= 5
- Number of beam bridges must be larger than the number of truss bridges:
  BeamBridges > TrussBridges

Objective:
- Maximize total mass that can be supported (40 grams per beam bridge, 60 grams per truss bridge):
  40 * BeamBridges + 60 * TrussBridges
```python

from cpmpy import Model, intvar

# Decision Variables
BeamBridges = intvar(0, 999999999)  # Number of beam bridges built
TrussBridges = intvar(0, 999999999)  # Number of truss bridges built

# Constraints
m = Model()

# Total Popsicle sticks used should not exceed 600:
m += 30 * BeamBridges + 50 * TrussBridges <= 600
# Total units of glue used should not exceed 100:
m += 5 * BeamBridges + 8 * TrussBridges <= 100
# Number of truss bridges built should be at most 5:
m += TrussBridges <= 5
# Number of beam bridges must be larger than the number of truss bridges:
m += BeamBridges > TrussBridges

# Objective
# Maximize total mass that can be supported (40 grams per beam bridge, 60 grams per truss bridge):
m.maximize(40 * BeamBridges + 60 * TrussBridges)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.
Decision Variables:
- Number of pill vaccines administered: PillVaccines
- Number of shot vaccines administered: ShotVaccines

Constraints:
- Total time for administering pill vaccines (10 minutes per pill vaccine) should not exceed 10000 minutes:
  10 * PillVaccines + 20 * ShotVaccines <= 10000
- The clinic must deliver at least 3 times as many shots as pills:
  ShotVaccines >= 3 * PillVaccines
- The clinic must administer at least 30 pill vaccines:
  PillVaccines >= 30

Objective:
- Maximize the total number of patients vaccinated:
  PillVaccines + ShotVaccines
```python

from cpmpy import Model, intvar

# Decision Variables
PillVaccines = intvar(0, 999999999)  # Number of pill vaccines administered
ShotVaccines = intvar(0, 999999999)  # Number of shot vaccines administered

# Constraints
m = Model()

# Total time for administering pill vaccines should not exceed 10000 minutes:
m += 10 * PillVaccines + 20 * ShotVaccines <= 10000
# The clinic must deliver at least 3 times as many shots as pills:
m += ShotVaccines >= 3 * PillVaccines
# The clinic must administer at least 30 pill vaccines:
m += PillVaccines >= 30

# Objective
# Maximize the total number of patients vaccinated:
m.maximize(PillVaccines + ShotVaccines)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is $30 while the cost per truck trip is $50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of $1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?
Decision Variables:
- Number of trips by vans: VansTrips
- Number of trips by trucks: TrucksTrips

Constraints:
- Total number of boxes transported must be at least 1500 (50 boxes per van trip, 80 boxes per truck trip):
  50 * VansTrips + 80 * TrucksTrips >= 1500
- Total cost of trips should not exceed $1000 (Cost: $30 per van trip, $50 per truck trip):
  30 * VansTrips + 50 * TrucksTrips <= 1000
- Number of trips by vans must be larger than the number of trips by trucks:
  VansTrips > TrucksTrips

Objective:
- Minimize the total number of trips:
  VansTrips + TrucksTrips
```python

from cpmpy import Model, intvar

# Decision Variables
VansTrips = intvar(0, 999999999)  # Number of trips by vans
TrucksTrips = intvar(0, 999999999)  # Number of trips by trucks

# Constraints
m = Model()

# Total number of boxes transported must be at least 1500:
m += 50 * VansTrips + 80 * TrucksTrips >= 1500
# Total cost of trips should not exceed $1000:
m += 30 * VansTrips + 50 * TrucksTrips <= 1000
# Number of trips by vans must be larger than the number of trips by trucks:
m += VansTrips > TrucksTrips

# Objective
# Minimize the total number of trips:
m.minimize(VansTrips + TrucksTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?
Decision Variables:
- Number of small bottles used: SmallBottles
- Number of large bottles used: LargeBottles

Constraints:
- Total number of small bottles used should be at most 300:
  SmallBottles <= 300
- Total number of large bottles used should be at most 100:
  LargeBottles <= 100
- At least twice as many small bottles must be used than large bottles:
  SmallBottles >= 2 * LargeBottles
- Total number of bottles used should be at most 200:
  SmallBottles + LargeBottles <= 200
- At least 50 bottles must be large bottles:
  LargeBottles >= 50

Objective:
- Maximize the total amount of honey transported (5 units per small bottle, 20 units per large bottle):
  5 * SmallBottles + 20 * LargeBottles
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBottles = intvar(0, 999999999)  # Number of small bottles used
LargeBottles = intvar(0, 999999999)  # Number of large bottles used

# Constraints
m = Model()

# Total number of small bottles used should be at most 300:
m += SmallBottles <= 300
# Total number of large bottles used should be at most 100:
m += LargeBottles <= 100
# At least twice as many small bottles must be used than large bottles:
m += SmallBottles >= 2 * LargeBottles
# Total number of bottles used should be at most 200:
m += SmallBottles + LargeBottles <= 200
# At least 50 bottles must be large bottles:
m += LargeBottles >= 50

# Objective
# Maximize the total amount of honey transported (5 units per small bottle, 20 units per large bottle):
m.maximize(5 * SmallBottles + 20 * LargeBottles)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?
Decision Variables:
- Number of ship trips: ShipTrips
- Number of plane trips: PlaneTrips

Constraints:
- At least 500 containers worth of goods need to be transported:
  40 * ShipTrips + 20 * PlaneTrips >= 500
- At most 10 plane trips can be made:
  PlaneTrips <= 10
- At least 50% of the trips must be made by ship:
  ShipTrips >= 0.5 * (ShipTrips + PlaneTrips)

Objective:
- Minimize the total amount of fuel consumed (500 liters per ship trip, 300 liters per plane trip):
  500 * ShipTrips + 300 * PlaneTrips
```python

from cpmpy import Model, intvar

# Decision Variables
ShipTrips = intvar(0, 999999999)  # Number of ship trips
PlaneTrips = intvar(0, 999999999)  # Number of plane trips

# Constraints
m = Model()

# At least 500 containers worth of goods need to be transported:
m += 40 * ShipTrips + 20 * PlaneTrips >= 500
# At most 10 plane trips can be made:
m += PlaneTrips <= 10
# At least 50% of the trips must be made by ship:
m += ShipTrips >= 0.5 * (ShipTrips + PlaneTrips)

# Objective
# Minimize the total amount of fuel consumed (500 liters per ship trip, 300 liters per plane trip):
m.minimize(500 * ShipTrips + 300 * PlaneTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?
Decision Variables:
- Number of boat trips: BoatTrips
- Number of canoe trips: CanoeTrips

Constraints:
- Total number of ducks transported should be at least 300:
  10 * BoatTrips + 8 * CanoeTrips >= 300
- Total number of trips should not exceed 12:
  BoatTrips + CanoeTrips <= 12
- At least 60% of the trips should be by canoe:
  CanoeTrips >= 0.6 * (BoatTrips + CanoeTrips)

Objective:
- Minimize total time (20 minutes per boat trip, 40 minutes per canoe trip):
  20 * BoatTrips + 40 * CanoeTrips
```python

from cpmpy import Model, intvar

# Decision Variables
BoatTrips = intvar(0, 12)  # Number of boat trips
CanoeTrips = intvar(0, 12)  # Number of canoe trips

# Constraints
m = Model()

# Total number of ducks transported should be at least 300:
m += 10 * BoatTrips + 8 * CanoeTrips >= 300
# Total number of trips should not exceed 12:
m += BoatTrips + CanoeTrips <= 12
# At least 60% of the trips should be by canoe:
m += CanoeTrips >= 0.6 * (BoatTrips + CanoeTrips)

# Objective
# Minimize total time (20 minutes per boat trip, 40 minutes per canoe trip):
m.minimize(20 * BoatTrips + 40 * CanoeTrips)

```
False
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?
Decision Variables:
- Number of old vans used: OldVans
- Number of new vans used: NewVans

Constraints:
- At least 5000 bottles need to be sent (100 bottles per old van, 80 bottles per new van):
  100 * OldVans + 80 * NewVans >= 5000
- At most 30 new vans can be used:
  NewVans <= 30

Objective:
- Minimize total pollution produced (50 units per old van, 30 units per new van):
  50 * OldVans + 30 * NewVans
```python

from cpmpy import Model, intvar

# Decision Variables
OldVans = intvar(0, 999999999)  # Number of old vans used
NewVans = intvar(0, 30)  # Number of new vans used (at most 30)

# Constraints
m = Model()

# At least 5000 bottles need to be sent (100 bottles per old van, 80 bottles per new van):
m += 100 * OldVans + 80 * NewVans >= 5000
# At most 30 new vans can be used:
m += NewVans <= 30

# Objective
# Minimize total pollution produced (50 units per old van, 30 units per new van):
m.minimize(50 * OldVans + 30 * NewVans)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?
Decision Variables:
- Number of small teams: SmallTeams
- Number of large teams: LargeTeams

Constraints:
- Total number of employees should not exceed 150:
  3 * SmallTeams + 5 * LargeTeams <= 150
- Number of small teams must be at least 3 times the number of large teams:
  SmallTeams >= 3 * LargeTeams
- At least 6 large teams:
  LargeTeams >= 6
- At least 10 small teams:
  SmallTeams >= 10

Objective:
- Maximize the total area of lawn mowed (50 sq ft per small team, 80 sq ft per large team):
  50 * 3 * SmallTeams + 80 * 5 * LargeTeams
```python

from cpmpy import Model, intvar

# Decision Variables
SmallTeams = intvar(0, 999999999)  # Number of small teams
LargeTeams = intvar(0, 999999999)  # Number of large teams

# Constraints
m = Model()

# Total number of employees should not exceed 150:
m += 3 * SmallTeams + 5 * LargeTeams <= 150
# Number of small teams must be at least 3 times the number of large teams:
m += SmallTeams >= 3 * LargeTeams
# At least 6 large teams:
m += LargeTeams >= 6
# At least 10 small teams:
m += SmallTeams >= 10

# Objective
# Maximize the total area of lawn mowed (50 sq ft per small team, 80 sq ft per large team):
m.maximize(50 * 3 * SmallTeams + 80 * 5 * LargeTeams)

```
False
False
Wrong: 0, Total: 4, Is objective correct: False
---------------------------------------------------------------------------------------------

An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.
Decision Variables:
- Number of otters used: Otters
- Number of dolphins used: Dolphins

Constraints:
- Total number of treats used should not exceed 200:
  3 * Otters + 5 * Dolphins <= 200
- At least 10 dolphins must be used:
  Dolphins >= 10
- At most 30% of the performers can be otters:
  Otters <= 0.3 * (Otters + Dolphins)

Objective:
- Maximize total number of tricks performed (3 tricks per otter, 1 trick per dolphin):
  3 * Otters + 1 * Dolphins
```python

from cpmpy import Model, intvar

# Decision Variables
Otters = intvar(0, 999999999)  # Number of otters used
Dolphins = intvar(0, 999999999)  # Number of dolphins used

# Constraints
m = Model()

# Total number of treats used should not exceed 200:
# An otter will do 3 tricks at a time and requires 3 treats to do so
# A dolphin will do 1 trick at a time and requires 5 treats to do so
m += 3 * Otters + 5 * Dolphins <= 200

# At least 10 dolphins must be used:
m += Dolphins >= 10

# At most 30% of the performers can be otters:
m += Otters <= 0.3 * (Otters + Dolphins)

# Objective
# Maximize total number of tricks performed (3 tricks per otter, 1 trick per dolphin):
m.maximize(3 * Otters + 1 * Dolphins)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used.  Find the minimum number of vans that can be used?
Decision Variables:
- Number of vans used: Vans

Constraints:
- Total number of pairs of shoes transported must be at least 2000 (50 pairs per van, 100 pairs per truck):
  50 * Vans + 100 * Vans >= 2000
- The number of trucks used must be less than or equal to the number of vans used:
  Vans >= 0

Objective:
- Minimize the number of vans used to meet the minimum requirement of 2000 pairs of shoes.
```python

from cpmpy import Model, intvar

# Decision Variables
Vans = intvar(0, 999999999)  # Number of vans used

# Constraints
m = Model()

# Total number of pairs of shoes transported must be at least 2000 (50 pairs per van, 100 pairs per truck):
m += 50 * Vans + 100 * Vans >= 2000
# The number of trucks used must be less than or equal to the number of vans used:
# This constraint is implicitly defined by the decision variable domain

# Objective
# Minimize the number of vans used to meet the minimum requirement of 2000 pairs of shoes:
m.minimize(Vans)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.
Decision Variables:
- Number of containers used: Containers
- Number of trucks used: Trucks

Constraints:
- Total units of oil sent should be at least 2000:
  30 * Containers + 40 * Trucks >= 2000
- At least 15 containers need to be used:
  Containers >= 15
- Number of trucks used has to be at most half the number of containers used:
  Trucks <= 0.5 * Containers

Objective:
- Minimize the total number of containers and trucks needed:
  Containers + Trucks
```python

from cpmpy import Model, intvar

# Decision Variables
Containers = intvar(0, 999999999)  # Number of containers used
Trucks = intvar(0, 999999999)  # Number of trucks used

# Constraints
m = Model()

# Total units of oil sent should be at least 2000:
m += 30 * Containers + 40 * Trucks >= 2000
# At least 15 containers need to be used:
m += Containers >= 15
# Number of trucks used has to be at most half the number of containers used:
m += Trucks <= 0.5 * Containers

# Objective
# Minimize the total number of containers and trucks needed:
m.minimize(Containers + Trucks)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students.  The school needs to provide transportation for at least 500 students.  In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?
Decision Variables:
- Number of small buses hired: SmallBuses
- Number of large buses hired: LargeBuses

Constraints:
- Total number of students transported should be at least 500:
  20 * SmallBuses + 50 * LargeBuses >= 500
- At most 20% of the buses can be large buses:
  LargeBuses <= 0.20 * (SmallBuses + LargeBuses)

Objective:
- Minimize the total number of buses hired:
  SmallBuses + LargeBuses
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBuses = intvar(0, 999999999)  # Number of small buses hired
LargeBuses = intvar(0, 999999999)  # Number of large buses hired

# Constraints
m = Model()

# Total number of students transported should be at least 500:
m += 20 * SmallBuses + 50 * LargeBuses >= 500

# At most 20% of the buses can be large buses:
m += LargeBuses <= 0.20 * (SmallBuses + LargeBuses)

# Objective
# Minimize the total number of buses hired:
m.minimize(SmallBuses + LargeBuses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of $300 per trip. Each van can take 500 patties at a cost of $100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of $12500. How should they plan their shipment to minimize the total number of trips?
Decision Variables:
- Number of trips using refrigerated trucks: TrucksTrips
- Number of trips using vans: VansTrips

Constraints:
- Total cost of trips should not exceed $12500 (cost per truck trip is $300, cost per van trip is $100):
  300 * TrucksTrips + 100 * VansTrips <= 12500
- Number of trucks must not exceed the number of vans:
  TrucksTrips <= VansTrips
- At least 50000 patties need to be shipped:
  1000 * TrucksTrips + 500 * VansTrips >= 50000

Objective:
- Minimize the total number of trips:
  TrucksTrips + VansTrips
```python

from cpmpy import Model, intvar

# Decision Variables
TrucksTrips = intvar(0, 999999999)  # Number of trips using refrigerated trucks
VansTrips = intvar(0, 999999999)  # Number of trips using vans

# Constraints
m = Model()

# Total cost should not exceed $12500:
m += 300 * TrucksTrips + 100 * VansTrips <= 12500
# Number of trucks must not exceed the number of vans:
m += TrucksTrips <= VansTrips
# At least 50000 patties need to be shipped:
m += 1000 * TrucksTrips + 500 * VansTrips >= 50000

# Objective
# Minimize the total number of trips:
m.minimize(TrucksTrips + VansTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?
Decision Variables:
- Number of small bouquets transported: SmallBouquets
- Number of large bouquets transported: LargeBouquets

Constraints:
- Total number of small bouquets should not exceed 80:
  SmallBouquets <= 80
- Total number of large bouquets should not exceed 50:
  LargeBouquets <= 50
- Total number of bouquets should not exceed 70:
  SmallBouquets + LargeBouquets <= 70
- At least 20 large bouquets must be transported:
  LargeBouquets >= 20
- Number of small bouquets should be at least twice the number of large bouquets:
  SmallBouquets >= 2 * LargeBouquets

Objective:
- Maximize the total number of flowers that reach the stores:
  5 * SmallBouquets + 10 * LargeBouquets
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBouquets = intvar(0, 999999999)  # Number of small bouquets transported
LargeBouquets = intvar(0, 999999999)  # Number of large bouquets transported

# Constraints
m = Model()

# Total number of small bouquets should not exceed 80:
m += SmallBouquets <= 80
# Total number of large bouquets should not exceed 50:
m += LargeBouquets <= 50
# Total number of bouquets should not exceed 70:
m += SmallBouquets + LargeBouquets <= 70
# At least 20 large bouquets must be transported:
m += LargeBouquets >= 20
# Number of small bouquets should be at least twice the number of large bouquets:
m += SmallBouquets >= 2 * LargeBouquets

# Objective
# Maximize the total number of flowers that reach the stores:
m.maximize(5 * SmallBouquets + 10 * LargeBouquets)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?
Decision Variables:
- Number of trips made by the new company: NewCompanyTrips
- Number of trips made by the old company: OldCompanyTrips

Constraints:
- Total number of gifts delivered should be at least 1000:
  50 * NewCompanyTrips + 70 * OldCompanyTrips >= 1000
- Maximum 15 trips can be made by the new company:
  NewCompanyTrips <= 15
- At least 40% of all trips must be made by the old company:
  OldCompanyTrips >= 0.4 * (NewCompanyTrips + OldCompanyTrips)

Objective:
- Minimize the total amount of diesel used (30 liters per trip for the new company, 40 liters per trip for the old company):
  30 * NewCompanyTrips + 40 * OldCompanyTrips
```python

from cpmpy import Model, intvar

# Decision Variables
NewCompanyTrips = intvar(0, 999999999)  # Number of trips made by the new company
OldCompanyTrips = intvar(0, 999999999)  # Number of trips made by the old company

# Constraints
m = Model()

# Total number of gifts delivered should be at least 1000:
m += 50 * NewCompanyTrips + 70 * OldCompanyTrips >= 1000
# Maximum 15 trips can be made by the new company:
m += NewCompanyTrips <= 15
# At least 40% of all trips must be made by the old company:
m += OldCompanyTrips >= 0.4 * (NewCompanyTrips + OldCompanyTrips)

# Objective
# Minimize the total amount of diesel used (30 liters per trip for the new company, 40 liters per trip for the old company):
m.minimize(30 * NewCompanyTrips + 40 * OldCompanyTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?
Decision Variables:
- Number of bus trips: BusTrips
- Number of car trips: CarTrips

Constraints:
- Total number of monkeys to be transported is 300:
  20 * BusTrips + 6 * CarTrips = 300
- Total time for bus trips should not exceed 10 trips (30 minutes per bus trip):
  30 * BusTrips <= 10 * 60
- At least 60% of the trips should be by car:
  CarTrips >= 0.60 * (BusTrips + CarTrips)

Objective:
- Minimize total time required to transport the monkeys (15 minutes per car trip):
  15 * CarTrips
```python

from cpmpy import Model, intvar

# Decision Variables
BusTrips = intvar(0, 10)  # Number of bus trips
CarTrips = intvar(0, 999999999)  # Number of car trips

# Constraints
m = Model()

# Total number of monkeys to be transported is 300:
m += 20 * BusTrips + 6 * CarTrips == 300
# Total time for bus trips should not exceed 10 trips (30 minutes per bus trip):
m += 30 * BusTrips <= 10 * 60
# At least 60% of the trips should be by car:
m += CarTrips >= 0.60 * (BusTrips + CarTrips)

# Objective
# Minimize total time required to transport the monkeys (15 minutes per car trip):
m.minimize(15 * CarTrips)

```
False
False
Wrong: 2, Total: 2, Is objective correct: False
---------------------------------------------------------------------------------------------

A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?
Decision Variables:
- Number of helicopter trips: HelicopterTrips
- Number of truck trips: TruckTrips

Constraints:
- Total number of cows to transport is 80:
  3 * HelicopterTrips + 7 * TruckTrips = 80
- The farmer can take at most 8 truck trips:
  TruckTrips <= 8

Objective:
- Minimize the total amount of pollution produced (5 units per helicopter trip, 10 units per truck trip):
  5 * HelicopterTrips + 10 * TruckTrips
```python

from cpmpy import Model, intvar

# Decision Variables
HelicopterTrips = intvar(0, 999999999)  # Number of helicopter trips
TruckTrips = intvar(0, 999999999)  # Number of truck trips

# Constraints
m = Model()

# Total number of cows to transport is 80:
m += 3 * HelicopterTrips + 7 * TruckTrips == 80
# The farmer can take at most 8 truck trips:
m += TruckTrips <= 8

# Objective
# Minimize the total amount of pollution produced (5 units per helicopter trip, 10 units per truck trip):
m.minimize(5 * HelicopterTrips + 10 * TruckTrips)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.
Decision Variables:
- Number of small containers used: SmallContainers
- Number of large containers used: LargeContainers

Constraints:
- Total number of people available is 100:
  1 * SmallContainers + 3 * LargeContainers <= 100
- Number of small containers used must be thrice the number of large containers used:
  SmallContainers == 3 * LargeContainers
- At least 5 small containers must be used:
  SmallContainers >= 5
- At least 3 large containers must be used:
  LargeContainers >= 3

Objective:
- Maximize the amount of sand delivered (20 units of sand per small container, 50 units of sand per large container):
  20 * SmallContainers + 50 * LargeContainers
```python

from cpmpy import Model, intvar

# Decision Variables
SmallContainers = intvar(0, 999999999)  # Number of small containers used
LargeContainers = intvar(0, 999999999)  # Number of large containers used

# Constraints
m = Model()

# Total number of people available is 100:
m += 1 * SmallContainers + 3 * LargeContainers <= 100

# Number of small containers used must be thrice the number of large containers used:
m += SmallContainers == 3 * LargeContainers

# At least 5 small containers must be used:
m += SmallContainers >= 5

# At least 3 large containers must be used:
m += LargeContainers >= 3

# Objective
# Maximize the amount of sand delivered (20 units of sand per small container, 50 units of sand per large container):
m.maximize(20 * SmallContainers + 50 * LargeContainers)

```
False
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?
Decision Variables:
- Number of electric bikes used: Bikes
- Number of scooters used: Scooters

Constraints:
- Total charge used by electric bikes and scooters should not exceed 200 units:
  3 * Bikes + 2 * Scooters <= 200
- At most 30% of the electric vehicles can be bikes:
  Bikes <= 0.3 * (Bikes + Scooters)
- At least 20 scooters must be used:
  Scooters >= 20

Objective:
- Maximize the number of meals that can be delivered (8 meals per bike, 5 meals per scooter):
  8 * Bikes + 5 * Scooters
```python

from cpmpy import Model, intvar

# Decision Variables
Bikes = intvar(0, 999999999)  # Number of electric bikes used
Scooters = intvar(0, 999999999)  # Number of scooters used

# Constraints
m = Model()

# Total charge used by electric bikes and scooters should not exceed 200 units:
# (Bike requires 3 units, Scooter requires 2 units)
m += 3 * Bikes + 2 * Scooters <= 200

# At most 30% of the electric vehicles can be bikes:
m += Bikes <= 0.3 * (Bikes + Scooters)

# At least 20 scooters must be used:
m += Scooters >= 20

# Objective
# Maximize the number of meals that can be delivered (8 meals per bike, 5 meals per scooter):
m.maximize(8 * Bikes + 5 * Scooters)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.
Decision Variables:
- Number of large planes used: LargePlanes
- Number of small planes used: SmallPlanes

Constraints:
- Total number of cars delivered should be at least 300:
  30 * LargePlanes + 10 * SmallPlanes >= 300
- Number of large planes must be less than the number of small planes:
  LargePlanes < SmallPlanes

Objective:
- Minimize the total number of planes used:
  LargePlanes + SmallPlanes
```python

from cpmpy import Model, intvar

# Decision Variables
LargePlanes = intvar(0, 999999999)  # Number of large planes used
SmallPlanes = intvar(0, 999999999)  # Number of small planes used

# Constraints
m = Model()

# Total number of cars delivered should be at least 300:
# (Large plane can carry 30 cars, Small plane can carry 10 cars)
m += 30 * LargePlanes + 10 * SmallPlanes >= 300

# Number of large planes must be less than the number of small planes:
m += LargePlanes < SmallPlanes

# Objective
# Minimize the total number of planes used:
m.minimize(LargePlanes + SmallPlanes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.
Decision Variables:
- Number of small wagons used: SmallWagons
- Number of large wagons used: LargeWagons

Constraints:
- Total units of ore transported should be 2000:
  20 * SmallWagons + 50 * LargeWagons = 2000
- Number of small wagons must be at least twice the number of large wagons:
  SmallWagons >= 2 * LargeWagons
- At least 10 large wagons must be used:
  LargeWagons >= 10

Objective:
- Minimize the total number of wagons used:
  SmallWagons + LargeWagons
```python

from cpmpy import Model, intvar

# Decision Variables
SmallWagons = intvar(0, 999999999)  # Number of small wagons used
LargeWagons = intvar(0, 999999999)  # Number of large wagons used

# Constraints
m = Model()

# Total units of ore transported should be 2000:
# (Small wagon holds 20 units, Large wagon holds 50 units)
m += 20 * SmallWagons + 50 * LargeWagons == 2000

# Number of small wagons must be at least twice the number of large wagons:
m += SmallWagons >= 2 * LargeWagons

# At least 10 large wagons must be used:
m += LargeWagons >= 10

# Objective
# Minimize the total number of wagons used:
m.minimize(SmallWagons + LargeWagons)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.
Decision Variables:
- Number of scooters used: Scooters
- Number of rickshaws used: Rickshaws

Constraints:
- Total number of visitors transported should be at least 300 (2 people per scooter, 3 people per rickshaw):
  2 * Scooters + 3 * Rickshaws >= 300
- At most 40% of the vehicles used can be rickshaws:
  Rickshaws <= 0.40 * (Scooters + Rickshaws)

Objective:
- Minimize the total number of scooters used:
  Scooters
```python

from cpmpy import Model, intvar

# Decision Variables
Scooters = intvar(0, 999999999)  # Number of scooters used
Rickshaws = intvar(0, 999999999)  # Number of rickshaws used

# Constraints
m = Model()

# Total number of visitors transported should be at least 300 (2 people per scooter, 3 people per rickshaw):
m += 2 * Scooters + 3 * Rickshaws >= 300
# At most 40% of the vehicles used can be rickshaws:
m += Rickshaws <= 0.40 * (Scooters + Rickshaws)

# Objective
# Minimize the total number of scooters used:
m.minimize(Scooters)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?
Decision Variables:
- Number of camels used: Camels
- Number of horses used: Horses

Constraints:
- At least 1000 packages need to be delivered:
  50 * Camels + 60 * Horses >= 1000
- Food constraint (20 units of food per camel, 30 units of food per horse, with 450 units of food available):
  20 * Camels + 30 * Horses <= 450
- The number of horses cannot exceed the number of camels:
  Horses <= Camels

Objective:
- Minimize the total number of animals used:
  Camels + Horses
```python

from cpmpy import Model, intvar

# Decision Variables
Camels = intvar(0, 999999999)  # Number of camels used
Horses = intvar(0, 999999999)  # Number of horses used

# Constraints
m = Model()

# At least 1000 packages need to be delivered:
m += 50 * Camels + 60 * Horses >= 1000
# Food constraint (20 units of food per camel, 30 units of food per horse, with 450 units of food available):
m += 20 * Camels + 30 * Horses <= 450
# The number of horses cannot exceed the number of camels:
m += Horses <= Camels

# Objective
# Minimize the total number of animals used:
m.minimize(Camels + Horses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?
Decision Variables:
- Number of small suitcases sent: SmallSuitcases
- Number of large suitcases sent: LargeSuitcases

Constraints:
- Each small suitcase can hold 50 snacks:
  SmallSuitcases * 50 <= TotalSnacks
- Each large suitcase can hold 80 snacks:
  LargeSuitcases * 80 <= TotalSnacks
- At least twice as many small suitcases must be used as large suitcases:
  SmallSuitcases >= 2 * LargeSuitcases
- Available small suitcases are at most 70:
  SmallSuitcases <= 70
- Available large suitcases are at most 50:
  LargeSuitcases <= 50
- At least 15 large suitcases must be sent:
  LargeSuitcases >= 15
- Total number of suitcases sent is at most 70:
  SmallSuitcases + LargeSuitcases <= 70

Objective:
- Maximize the total number of snacks that can be delivered:
  TotalSnacks = SmallSuitcases * 50 + LargeSuitcases * 80
```python

from cpmpy import Model, intvar

# Decision Variables
SmallSuitcases = intvar(0, 999999999)  # Number of small suitcases sent
LargeSuitcases = intvar(0, 999999999)  # Number of large suitcases sent

# Constraints
m = Model()

# Each small suitcase can hold 50 snacks:
m += SmallSuitcases * 50 <= TotalSnacks
# Each large suitcase can hold 80 snacks:
m += LargeSuitcases * 80 <= TotalSnacks
# At least twice as many small suitcases must be used as large suitcases:
m += SmallSuitcases >= 2 * LargeSuitcases
# Available small suitcases are at most 70:
m += SmallSuitcases <= 70
# Available large suitcases are at most 50:
m += LargeSuitcases <= 50
# At least 15 large suitcases must be sent:
m += LargeSuitcases >= 15
# Total number of suitcases sent is at most 70:
m += SmallSuitcases + LargeSuitcases <= 70

# Objective
# Maximize the total number of snacks that can be delivered:
TotalSnacks = SmallSuitcases * 50 + LargeSuitcases * 80
m.maximize(TotalSnacks)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?
Decision Variables:
- Number of regular boat trips: RegularTrips
- Number of speed boat trips: SpeedTrips

Constraints:
- Total number of mail pieces delivered should be 1000:
  20 * RegularTrips + 30 * SpeedTrips = 1000
- There can be at most 20 regular boat trips:
  RegularTrips <= 20
- At least 50% of the trips must be made by speed boats:
  SpeedTrips >= 0.5 * (RegularTrips + SpeedTrips)

Objective:
- Minimize the total amount of gas consumed (10 liters per regular boat trip, 20 liters per speed boat trip):
  10 * RegularTrips + 20 * SpeedTrips
```python

from cpmpy import Model, intvar

# Decision Variables
RegularTrips = intvar(0, 20)  # Number of regular boat trips
SpeedTrips = intvar(0, 20)  # Number of speed boat trips

# Constraints
m = Model()

# Total number of mail pieces delivered should be 1000:
m += 20 * RegularTrips + 30 * SpeedTrips == 1000
# There can be at most 20 regular boat trips:
m += RegularTrips <= 20
# At least 50% of the trips must be made by speed boats:
m += SpeedTrips >= 0.5 * (RegularTrips + SpeedTrips)

# Objective
# Minimize the total amount of gas consumed (10 liters per regular boat trip, 20 liters per speed boat trip):
m.minimize(10 * RegularTrips + 20 * SpeedTrips)

```
True
True
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?
Decision Variables:
- Number of bus trips: BusTrips
- Number of car trips: CarTrips

Constraints:
- Total number of chicken to be transported is 1200:
  100 * BusTrips + 40 * CarTrips = 1200
- Each bus trip takes 2 hours and each car trip takes 1.5 hours:
  2 * BusTrips + 1.5 * CarTrips = TotalTime
- There can be at most 10 bus trips:
  BusTrips <= 10
- At least 60% of the trips must be by car:
  CarTrips >= 0.6 * (BusTrips + CarTrips)

Objective:
- Minimize the total time needed to transport the chicken:
  TotalTime
```python

from cpmpy import Model, intvar

# Decision Variables
BusTrips = intvar(0, 10)  # Number of bus trips
CarTrips = intvar(0, 999999999)  # Number of car trips

# Constraints
m = Model()

# Total number of chicken to be transported is 1200:
m += 100 * BusTrips + 40 * CarTrips == 1200
# Each bus trip takes 2 hours and each car trip takes 1.5 hours:
m += 2 * BusTrips + 1.5 * CarTrips == TotalTime
# There can be at most 10 bus trips:
m += BusTrips <= 10
# At least 60% of the trips must be by car:
m += CarTrips >= 0.6 * (BusTrips + CarTrips)

# Objective
# Minimize the total time needed to transport the chicken:
m.minimize(TotalTime)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?

Decision Variables:
- Number of vans used: Vans
- Number of minibuses used: Minibuses

Constraints:
- At least 150 kids need to go to school:
  6 * Vans + 10 * Minibuses >= 150
- At most 10 minibuses can be used:
  Minibuses <= 10
- The number of vans used must exceed the number of minibuses:
  Vans > Minibuses

Objective:
- Minimize total pollution produced (7 units per van, 10 units per minibus):
  7 * Vans + 10 * Minibuses
```python

from cpmpy import Model, intvar

# Decision Variables
Vans = intvar(0, 999999999)  # Number of vans used
Minibuses = intvar(0, 10)  # Number of minibuses used

# Constraints
m = Model()

# At least 150 kids need to go to school:
m += 6 * Vans + 10 * Minibuses >= 150
# At most 10 minibuses can be used:
m += Minibuses <= 10
# The number of vans used must exceed the number of minibuses:
m += Vans > Minibuses

# Objective
# Minimize total pollution produced (7 units per van, 10 units per minibus):
m.minimize(7 * Vans + 10 * Minibuses)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?
Decision Variables:
- Number of small bins used: SmallBins
- Number of large bins used: LargeBins

Constraints:
- Total number of workers used should not exceed 100 workers (2 workers per small bin, 5 workers per large bin):
  2 * SmallBins + 5 * LargeBins <= 100
- Number of small bins must be three times the number of large bins:
  SmallBins == 3 * LargeBins
- There must be at least 10 small bins and 4 large bins:
  SmallBins >= 10
  LargeBins >= 4

Objective:
- Maximize the total amount of recycling material collected (25 units per small bin, 60 units per large bin):
  25 * SmallBins + 60 * LargeBins
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBins = intvar(0, 999999999)  # Number of small bins used
LargeBins = intvar(0, 999999999)  # Number of large bins used

# Constraints
m = Model()

# Total number of workers used should not exceed 100 workers:
m += 2 * SmallBins + 5 * LargeBins <= 100
# Number of small bins must be three times the number of large bins:
m += SmallBins == 3 * LargeBins
# There must be at least 10 small bins and 4 large bins:
m += SmallBins >= 10
m += LargeBins >= 4

# Objective
# Maximize the total amount of recycling material collected (25 units per small bin, 60 units per large bin):
m.maximize(25 * SmallBins + 60 * LargeBins)

```
False
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?
Decision Variables:
- Number of seasonal volunteers: SeasonalVolunteers
- Number of full-time volunteers: FullTimeVolunteers

Constraints:
- Total points given out should not exceed 200:
  2 * SeasonalVolunteers + 5 * FullTimeVolunteers <= 200
- Maximum 30% of volunteers can be seasonal:
  SeasonalVolunteers <= 0.3 * (SeasonalVolunteers + FullTimeVolunteers)
- At least 10 volunteers must be full-time:
  FullTimeVolunteers >= 10

Objective:
- Maximize the total number of gifts that can be delivered:
  5 * SeasonalVolunteers + 8 * FullTimeVolunteers
```python

from cpmpy import Model, intvar

# Decision Variables
SeasonalVolunteers = intvar(0, 999999999)  # Number of seasonal volunteers
FullTimeVolunteers = intvar(0, 999999999)  # Number of full-time volunteers

# Constraints
m = Model()

# Total points given out should not exceed 200:
m += 2 * SeasonalVolunteers + 5 * FullTimeVolunteers <= 200
# Maximum 30% of volunteers can be seasonal:
m += SeasonalVolunteers <= 0.3 * (SeasonalVolunteers + FullTimeVolunteers)
# At least 10 volunteers must be full-time:
m += FullTimeVolunteers >= 10

# Objective
# Maximize the total number of gifts that can be delivered:
m.maximize(5 * SeasonalVolunteers + 8 * FullTimeVolunteers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.
Decision Variables:
- Number of small jars used: SmallJars
- Number of large jars used: LargeJars

Constraints:
- Total volume of jam shipped should be at least 100000 ml (50 ml per small jar, 200 ml per large jar):
  50 * SmallJars + 200 * LargeJars >= 100000
- Number of large jars cannot exceed the number of small jars:
  LargeJars <= SmallJars

Objective:
- Minimize the total number of jars used:
  SmallJars + LargeJars
```python

from cpmpy import Model, intvar

# Decision Variables
SmallJars = intvar(0, 999999999)  # Number of small jars used
LargeJars = intvar(0, 999999999)  # Number of large jars used

# Constraints
m = Model()

# Total volume of jam shipped should be at least 100000 ml:
m += 50 * SmallJars + 200 * LargeJars >= 100000
# Number of large jars cannot exceed the number of small jars:
m += LargeJars <= SmallJars

# Objective
# Minimize the total number of jars used:
m.minimize(SmallJars + LargeJars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A corn farmer sends his corn to the city by either tractor or car.  A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.
Decision Variables:
- Number of tractors used: Tractors
- Number of cars used: Cars

Constraints:
- Total weight of corn sent to the city should be at least 500 kg:
  40 * Tractors + 20 * Cars >= 500
- Number of cars used has to be at least twice the number of tractors used:
  Cars >= 2 * Tractors

Objective:
- Minimize the total number of tractors and cars needed:
  Tractors + Cars
```python

from cpmpy import Model, intvar

# Decision Variables
Tractors = intvar(0, 999999999)  # Number of tractors used
Cars = intvar(0, 999999999)  # Number of cars used

# Constraints
m = Model()

# Total weight of corn sent to the city should be at least 500 kg:
m += 40 * Tractors + 20 * Cars >= 500
# Number of cars used has to be at least twice the number of tractors used:
m += Cars >= 2 * Tractors

# Objective
# Minimize the total number of tractors and cars needed:
m.minimize(Tractors + Cars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?
Decision Variables:
- Number of bikes used: Bikes
- Number of cars used: Cars

Constraints:
- Total number of people transported should be at least 500:
  3 * Bikes + 5 * Cars >= 500
- At most 40% of the vehicles can be cars:
  Cars <= 0.4 * (Bikes + Cars)

Objective:
- Minimize the total number of bikes used:
  Bikes
```python

from cpmpy import Model, intvar

# Decision Variables
Bikes = intvar(0, 999999999)  # Number of bikes used
Cars = intvar(0, 999999999)  # Number of cars used

# Constraints
m = Model()

# Total number of people transported should be at least 500 (3 people per bike, 5 people per car):
m += 3 * Bikes + 5 * Cars >= 500
# At most 40% of the vehicles can be cars:
m += Cars <= 0.4 * (Bikes + Cars)

# Objective
# Minimize the total number of bikes used:
m.minimize(Bikes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs $1000. Each ultrawide truck can transport 6 tires per trip and costs $700. The company needs to transport at least 200 tires and has available $22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?
Decision Variables:
- Number of trips by cargo planes: PlaneTrips
- Number of trips by ultrawide trucks: TruckTrips

Constraints:
- Total number of tires transported should be at least 200:
  10 * PlaneTrips + 6 * TruckTrips >= 200
- Total cost of trips should not exceed $22000 (cost per plane trip is $1000, cost per truck trip is $700):
  1000 * PlaneTrips + 700 * TruckTrips <= 22000
- Number of plane trips should not exceed the number of truck trips:
  PlaneTrips <= TruckTrips

Objective:
- Minimize the total number of trips:
  PlaneTrips + TruckTrips
```python

from cpmpy import Model, intvar

# Decision Variables
PlaneTrips = intvar(0, 999999999)  # Number of trips by cargo planes
TruckTrips = intvar(0, 999999999)  # Number of trips by ultrawide trucks

# Constraints
m = Model()

# Total number of tires transported should be at least 200:
m += 10 * PlaneTrips + 6 * TruckTrips >= 200
# Total cost of trips should not exceed $22000 ($1000 per plane trip, $700 per truck trip):
m += 1000 * PlaneTrips + 700 * TruckTrips <= 22000
# Number of plane trips should not exceed the number of truck trips:
m += PlaneTrips <= TruckTrips

# Objective
# Minimize the total number of trips:
m.minimize(PlaneTrips + TruckTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?
Decision Variables:
- Number of small kegs used: SmallKegs
- Number of large kegs used: LargeKegs

Constraints:
- Total number of kegs used should be at most 25:
  SmallKegs + LargeKegs <= 25
- At least 5 kegs must be large:
  LargeKegs >= 5
- At most 30 small kegs are available:
  SmallKegs <= 30
- At most 10 large kegs are available:
  LargeKegs <= 10
- At least twice as many small kegs must be used than large kegs:
  SmallKegs >= 2 * LargeKegs

Objective:
- Maximize the total amount of glacial water transported (40 liters per small keg, 100 liters per large keg):
  40 * SmallKegs + 100 * LargeKegs
```python

from cpmpy import Model, intvar

# Decision Variables
SmallKegs = intvar(0, 999999999)  # Number of small kegs used
LargeKegs = intvar(0, 999999999)  # Number of large kegs used

# Constraints
m = Model()

# Total number of kegs used should be at most 25:
m += SmallKegs + LargeKegs <= 25
# At least 5 kegs must be large:
m += LargeKegs >= 5
# At most 30 small kegs are available:
m += SmallKegs <= 30
# At most 10 large kegs are available:
m += LargeKegs <= 10
# At least twice as many small kegs must be used than large kegs:
m += SmallKegs >= 2 * LargeKegs

# Objective
# Maximize the total amount of glacial water transported (40 liters per small keg, 100 liters per large keg):
m.maximize(40 * SmallKegs + 100 * LargeKegs)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?
Decision Variables:
- Number of submarine trips: SubmarineTrips
- Number of boat trips: BoatTrips

Constraints:
- At least 1000 pieces of mail need to be transported:
  100 * SubmarineTrips + 80 * BoatTrips >= 1000
- There can be at most 6 submarine trips:
  SubmarineTrips <= 6
- At least 50% of the trips must be by boat:
  BoatTrips >= 0.5 * (SubmarineTrips + BoatTrips)

Objective:
- Minimize the total amount of gas used (30 liters per submarine trip, 25 liters per boat trip):
  30 * SubmarineTrips + 25 * BoatTrips
```python

from cpmpy import Model, intvar

# Decision Variables
SubmarineTrips = intvar(0, 6)  # Number of submarine trips
BoatTrips = intvar(0, 999999999)  # Number of boat trips

# Constraints
m = Model()

# At least 1000 pieces of mail need to be transported:
m += 100 * SubmarineTrips + 80 * BoatTrips >= 1000
# There can be at most 6 submarine trips:
m += SubmarineTrips <= 6
# At least 50% of the trips must be by boat:
m += BoatTrips >= 0.5 * (SubmarineTrips + BoatTrips)

# Objective
# Minimize the total amount of gas used (30 liters per submarine trip, 25 liters per boat trip):
m.minimize(30 * SubmarineTrips + 25 * BoatTrips)

```
True
True
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?
Decision Variables:
- Number of helicopter trips: HelicopterTrips
- Number of car trips: CarTrips

Constraints:
- At most 5 helicopter trips:
  HelicopterTrips <= 5
- At least 60% of the trips should be by car:
  CarTrips >= 0.6 * (HelicopterTrips + CarTrips)
- At least 300 fish need to be transported:
  30 * HelicopterTrips + 20 * CarTrips >= 300

Objective:
- Minimize the total time needed (40 minutes per helicopter trip, 30 minutes per car trip):
  40 * HelicopterTrips + 30 * CarTrips
```python

from cpmpy import Model, intvar

# Decision Variables
HelicopterTrips = intvar(0, 5)  # Number of helicopter trips
CarTrips = intvar(0, 999999999)  # Number of car trips

# Constraints
m = Model()

# At least 60% of the trips should be by car:
m += CarTrips >= 0.6 * (HelicopterTrips + CarTrips)
# At least 300 fish need to be transported:
m += 30 * HelicopterTrips + 20 * CarTrips >= 300

# Objective
# Minimize the total time needed (40 minutes per helicopter trip, 30 minutes per car trip):
m.minimize(40 * HelicopterTrips + 30 * CarTrips)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?

Decision Variables:
- Number of hot air balloon rides: BalloonRides
- Number of gondola lift rides: GondolaRides

Constraints:
- Total number of visitors transported should be at least 70:
  4 * BalloonRides + 6 * GondolaRides >= 70
- Total number of rides should not exceed 10:
  BalloonRides + GondolaRides <= 10

Objective:
- Minimize total pollution (10 units per hot air balloon ride, 15 units per gondola lift ride):
  10 * BalloonRides + 15 * GondolaRides
```python

from cpmpy import Model, intvar

# Decision Variables
BalloonRides = intvar(0, 10)  # Number of hot air balloon rides, limited to 10
GondolaRides = intvar(0, 10)  # Number of gondola lift rides, limited to 10

# Constraints
m = Model()

# Total number of visitors transported should be at least 70:
m += 4 * BalloonRides + 6 * GondolaRides >= 70
# Total number of rides should not exceed 10:
m += BalloonRides + GondolaRides <= 10

# Objective
# Minimize total pollution (10 units per hot air balloon ride, 15 units per gondola lift ride):
m.minimize(10 * BalloonRides + 15 * GondolaRides)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice.  The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?
Decision Variables:
- Number of medium-sized carts used: MediumCarts
- Number of large-sized carts used: LargeCarts

Constraints:
- Total number of horses available is 60:
  2 * MediumCarts + 4 * LargeCarts <= 60
- Number of medium-sized carts must be three times the number of large-sized carts:
  MediumCarts == 3 * LargeCarts
- At least 5 medium-sized carts must be used:
  MediumCarts >= 5
- At least 5 large-sized carts must be used:
  LargeCarts >= 5

Objective:
- Maximize the amount of rice that can be transported (30 kg per medium-sized cart, 70 kg per large-sized cart):
  30 * MediumCarts + 70 * LargeCarts
```python

from cpmpy import Model, intvar

# Decision Variables
MediumCarts = intvar(0, 999999999)  # Number of medium-sized carts used
LargeCarts = intvar(0, 999999999)  # Number of large-sized carts used

# Constraints
m = Model()

# Total number of horses available is 60:
# (Medium-sized cart requires 2 horses, Large-sized cart requires 4 horses)
m += 2 * MediumCarts + 4 * LargeCarts <= 60

# Number of medium-sized carts must be three times the number of large-sized carts:
m += MediumCarts == 3 * LargeCarts

# At least 5 medium-sized carts must be used:
m += MediumCarts >= 5

# At least 5 large-sized carts must be used:
m += LargeCarts >= 5

# Objective
# Maximize the amount of rice that can be transported (30 kg per medium-sized cart, 70 kg per large-sized cart):
m.maximize(30 * MediumCarts + 70 * LargeCarts)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?
Decision Variables:
- Number of labradors used: Labradors
- Number of golden retrievers used: GoldenRetrievers

Constraints:
- Total number of small bone treats used should not exceed 1500:
  5 * Labradors + 6 * GoldenRetrievers <= 1500
- At least 50 golden retrievers must be used:
  GoldenRetrievers >= 50
- At most 60% of the dogs can be labradors:
  Labradors <= 0.6 * (Labradors + GoldenRetrievers)

Objective:
- Maximize the number of newspapers delivered:
  7 * Labradors + 10 * GoldenRetrievers
```python

from cpmpy import Model, intvar

# Decision Variables
Labradors = intvar(0, 999999999)  # Number of labradors used
GoldenRetrievers = intvar(0, 999999999)  # Number of golden retrievers used

# Constraints
m = Model()

# Total number of small bone treats used should not exceed 1500:
m += 5 * Labradors + 6 * GoldenRetrievers <= 1500
# At least 50 golden retrievers must be used:
m += GoldenRetrievers >= 50
# At most 60% of the dogs can be labradors:
m += Labradors <= 0.6 * (Labradors + GoldenRetrievers)

# Objective
# Maximize the number of newspapers delivered:
m.maximize(7 * Labradors + 10 * GoldenRetrievers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used..
Decision Variables:
- Number of cows used: Cows
- Number of elephants used: Elephants

Constraints:
- Total number of bricks carried should be at least 1000 (20 bricks per cow, 50 bricks per elephant):
  20 * Cows + 50 * Elephants >= 1000
- Number of elephants cannot exceed the number of cows:
  Elephants <= Cows
- Number of cows should be at most twice the number of elephants:
  Cows <= 2 * Elephants

Objective:
- Minimize the total number of animals used:
  Cows + Elephants
```python

from cpmpy import Model, intvar

# Decision Variables
Cows = intvar(0, 999999999)  # Number of cows used
Elephants = intvar(0, 999999999)  # Number of elephants used

# Constraints
m = Model()

# The company needs to transport at least 1000 bricks:
m += 20 * Cows + 50 * Elephants >= 1000
# Number of elephants cannot exceed the number of cows:
m += Elephants <= Cows
# Number of cows should be at most twice the number of elephants:
m += Cows <= 2 * Elephants

# Objective
# Minimize the total number of animals used:
m.minimize(Cows + Elephants)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.
Decision Variables:
- Number of ferry trips: FerryTrips
- Number of light rail trips: RailTrips

Constraints:
- Total number of boxes of corn sent must be at least 500:
  20 * FerryTrips + 15 * RailTrips >= 500
- Number of light rail trips has to be at least 4 times the number of ferry trips:
  RailTrips >= 4 * FerryTrips

Objective:
- Minimize the total number of trips of either type needed:
  FerryTrips + RailTrips
```python

from cpmpy import Model, intvar

# Decision Variables
FerryTrips = intvar(0, 999999999)  # Number of ferry trips
RailTrips = intvar(0, 999999999)  # Number of light rail trips

# Constraints
m = Model()

# Total number of boxes of corn sent must be at least 500:
m += 20 * FerryTrips + 15 * RailTrips >= 500
# Number of light rail trips has to be at least 4 times the number of ferry trips:
m += RailTrips >= 4 * FerryTrips

# Objective
# Minimize the total number of trips of either type needed:
m.minimize(FerryTrips + RailTrips)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.
Decision Variables:
- Number of taxi rides: TaxiRides
- Number of company car rides: CarRides

Constraints:
- Total number of employees transported should be at least 500:
  2 * TaxiRides + 3 * CarRides >= 500
- At most 60% of the rides can be company car rides:
  CarRides <= 0.6 * (TaxiRides + CarRides)
- There has to be at least 30 company car rides:
  CarRides >= 30

Objective:
- Minimize the total number of taxi rides:
  TaxiRides
```python

from cpmpy import Model, intvar

# Decision Variables
TaxiRides = intvar(0, 999999999)  # Number of taxi rides
CarRides = intvar(0, 999999999)  # Number of company car rides

# Constraints
m = Model()

# Total number of employees transported should be at least 500:
m += 2 * TaxiRides + 3 * CarRides >= 500
# At most 60% of the rides can be company car rides:
m += CarRides <= 0.6 * (TaxiRides + CarRides)
# There has to be at least 30 company car rides:
m += CarRides >= 30

# Objective
# Minimize the total number of taxi rides:
m.minimize(TaxiRides)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemical company is transporting their hydrogen using two different methods, high pressure tube trailers and liquefied hydrogen tankers. The first method is a high-pressure tube trailer which can transport 50 cubic meters each per trip at a cost of $500. The second method is using liquefied hydrogen tankers which can transport 30 cubic meters each per trip at a cost of $200. The company needs to transport at least 1000 cubic meters of hydrogen and they have budget of $3750 available. In addition, the number of transports done by the high pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method. How many of each transportation method should they use to minimize the total number of trips?
Decision Variables:
- Number of trips using high-pressure tube trailers: TubeTrips
- Number of trips using liquefied hydrogen tankers: TankerTrips

Constraints:
- Total volume of hydrogen transported should be at least 1000 cubic meters:
  50 * TubeTrips + 30 * TankerTrips >= 1000
- Total cost should not exceed $3750:
  500 * TubeTrips + 200 * TankerTrips <= 3750
- Number of tube trips should be less than the number of tanker trips:
  TubeTrips < TankerTrips

Objective:
- Minimize the total number of trips:
  TubeTrips + TankerTrips
```python

from cpmpy import Model, intvar

# Decision Variables
TubeTrips = intvar(0, 999999999)  # Number of trips using high-pressure tube trailers
TankerTrips = intvar(0, 999999999)  # Number of trips using liquefied hydrogen tankers

# Constraints
m = Model()

# Total volume of hydrogen transported should be at least 1000 cubic meters:
m += 50 * TubeTrips + 30 * TankerTrips >= 1000
# Total cost should not exceed $3750:
m += 500 * TubeTrips + 200 * TankerTrips <= 3750
# Number of tube trips should be less than the number of tanker trips:
m += TubeTrips < TankerTrips

# Objective
# Minimize the total number of trips:
m.minimize(TubeTrips + TankerTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500.  Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?
Decision Variables:
- Number of small crates used: SmallCrates
- Number of large crates used: LargeCrates

Constraints:
- Total number of small crates used should be at most 100:
  SmallCrates <= 100
- Total number of large crates used should be at most 50:
  LargeCrates <= 50
- Total number of crates used should be at most 60:
  SmallCrates + LargeCrates <= 60
- At least 10 large crates must be used:
  LargeCrates >= 10
- At least 3 times as many small crates as large crates must be used:
  SmallCrates >= 3 * LargeCrates

Objective:
- Maximize the total number of grapes transported (200 grapes per small crate, 500 grapes per large crate):
  200 * SmallCrates + 500 * LargeCrates
```python

from cpmpy import Model, intvar

# Decision Variables
SmallCrates = intvar(0, 100)  # Number of small crates used
LargeCrates = intvar(0, 50)  # Number of large crates used

# Constraints
m = Model()

# Total number of small crates used should be at most 100:
m += SmallCrates <= 100
# Total number of large crates used should be at most 50:
m += LargeCrates <= 50
# Total number of crates used should be at most 60:
m += SmallCrates + LargeCrates <= 60
# At least 10 large crates must be used:
m += LargeCrates >= 10
# At least 3 times as many small crates as large crates must be used:
m += SmallCrates >= 3 * LargeCrates

# Objective
# Maximize the total number of grapes transported (200 grapes per small crate, 500 grapes per large crate):
m.maximize(200 * SmallCrates + 500 * LargeCrates)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?
Decision Variables:
- Number of truck trips: TruckTrips
- Number of car trips: CarTrips

Constraints:
- At least 30% of all trips must be made by car:
  CarTrips >= 0.3 * (TruckTrips + CarTrips)
- Total number of packages transported must be at least 500:
  50 * TruckTrips + 30 * CarTrips >= 500
- There can be at most 5 truck trips made:
  TruckTrips <= 5

Objective:
- Minimize the total amount of gas consumed (20 liters per truck trip, 15 liters per car trip):
  20 * TruckTrips + 15 * CarTrips
```python

from cpmpy import Model, intvar

# Decision Variables
TruckTrips = intvar(0, 5)  # Number of truck trips
CarTrips = intvar(0, 999999999)  # Number of car trips

# Constraints
m = Model()

# At least 30% of all trips must be made by car:
m += CarTrips >= 0.3 * (TruckTrips + CarTrips)
# Total number of packages transported must be at least 500:
m += 50 * TruckTrips + 30 * CarTrips >= 500
# There can be at most 5 truck trips made:
m += TruckTrips <= 5

# Objective
# Minimize the total amount of gas consumed (20 liters per truck trip, 15 liters per car trip):
m.minimize(20 * TruckTrips + 15 * CarTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?
Decision Variables:
- Number of trips by helicopter: HelicopterTrips
- Number of trips by bus: BusTrips

Constraints:
- Total number of patients to be transported is at least 120:
  5 * HelicopterTrips + 8 * BusTrips >= 120
- At least 30% of the trips should be by helicopter:
  HelicopterTrips >= 0.3 * (HelicopterTrips + BusTrips)
- At most 10 bus trips allowed:
  BusTrips <= 10

Objective:
- Minimize total time to transport the patients (1 hour per helicopter trip, 3 hours per bus trip):
  1 * HelicopterTrips + 3 * BusTrips
```python

from cpmpy import Model, intvar

# Decision Variables
HelicopterTrips = intvar(0, 999999999)  # Number of trips by helicopter
BusTrips = intvar(0, 999999999)  # Number of trips by bus

# Constraints
m = Model()

# Total number of patients to be transported is at least 120:
m += 5 * HelicopterTrips + 8 * BusTrips >= 120
# At least 30% of the trips should be by helicopter:
m += HelicopterTrips >= 0.3 * (HelicopterTrips + BusTrips)
# At most 10 bus trips allowed:
m += BusTrips <= 10

# Objective
# Minimize total time to transport the patients (1 hour per helicopter trip, 3 hours per bus trip):
m.minimize(1 * HelicopterTrips + 3 * BusTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.
Decision Variables:
- Number of cars used: Cars
- Number of buses used: Buses

Constraints:
- Total number of employees transported should be at least 300:
  4 * Cars + 20 * Buses >= 300
- At most 4 buses can be used:
  Buses <= 4

Objective:
- Minimize total pollution produced (10 units per car, 30 units per bus):
  10 * Cars + 30 * Buses
```python

from cpmpy import Model, intvar

# Decision Variables
Cars = intvar(0, 999999999)  # Number of cars used
Buses = intvar(0, 999999999)  # Number of buses used

# Constraints
m = Model()

# Total number of employees transported should be at least 300:
m += 4 * Cars + 20 * Buses >= 300
# At most 4 buses can be used:
m += Buses <= 4

# Objective
# Minimize total pollution produced (10 units per car, 30 units per bus):
m.minimize(10 * Cars + 30 * Buses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A snow removal company removes snow from neighborhoods using small trucks and large trucks. A small truck requires 2 people to shovel the snow and can carry 30 units of snow. A large truck require 4 people to shovel the snow and car carry 50 units of snow. The company has available 30 people. In addition, because some neighbourhood don’t allow big trucks, at least 10 trucks must be small. There must be at least 3 large trucks as well and the number of small trucks must be twice as much as the number of large trucks. How many of each truck should be used to maximize the total amount of snow that can be transported?
Decision Variables:
- Number of small trucks used: SmallTrucks
- Number of large trucks used: LargeTrucks

Constraints:
- Total number of people available is 30:
  2 * SmallTrucks + 4 * LargeTrucks <= 30
- At least 10 trucks must be small:
  SmallTrucks >= 10
- At least 3 trucks must be large:
  LargeTrucks >= 3
- Number of small trucks must be twice the number of large trucks:
  SmallTrucks == 2 * LargeTrucks

Objective:
- Maximize the total amount of snow that can be transported:
  30 * SmallTrucks + 50 * LargeTrucks
```python

from cpmpy import Model, intvar

# Decision Variables
SmallTrucks = intvar(0, 999999999)  # Number of small trucks used
LargeTrucks = intvar(0, 999999999)  # Number of large trucks used

# Constraints
m = Model()

# Total number of people available is 30:
m += 2 * SmallTrucks + 4 * LargeTrucks <= 30

# At least 10 trucks must be small:
m += SmallTrucks >= 10

# At least 3 trucks must be large:
m += LargeTrucks >= 3

# Number of small trucks must be twice the number of large trucks:
m += SmallTrucks == 2 * LargeTrucks

# Objective
# Maximize the total amount of snow that can be transported:
m.maximize(30 * SmallTrucks + 50 * LargeTrucks)

```
True
True
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service.  At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.
Decision Variables:
- Number of carrier pigeons used: CarrierPigeons
- Number of owls used: Owls

Constraints:
- At least 20 carrier pigeons must be used:
  CarrierPigeons >= 20
- At most 40% of the birds can be owls:
  Owls <= 0.4 * (CarrierPigeons + Owls)
- Total treats available is 1000 (3 treats per carrier pigeon, 5 treats per owl):
  3 * CarrierPigeons + 5 * Owls <= 1000

Objective:
- Maximize the total number of letters sent (2 letters per carrier pigeon, 5 letters per owl):
  2 * CarrierPigeons + 5 * Owls
```python

from cpmpy import Model, intvar

# Decision Variables
CarrierPigeons = intvar(20, 999999999)  # Number of carrier pigeons used, at least 20
Owls = intvar(0, 999999999)  # Number of owls used

# Constraints
m = Model()

# At least 20 carrier pigeons must be used:
m += CarrierPigeons >= 20
# At most 40% of the birds can be owls:
m += Owls <= 0.4 * (CarrierPigeons + Owls)
# Total treats available is 1000 (3 treats per carrier pigeon, 5 treats per owl):
m += 3 * CarrierPigeons + 5 * Owls <= 1000

# Objective
# Maximize the total number of letters sent (2 letters per carrier pigeon, 5 letters per owl):
m.maximize(2 * CarrierPigeons + 5 * Owls)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.
Decision Variables:
- Number of large ships used: LargeShips
- Number of small ships used: SmallShips

Constraints:
- The total number of containers transported should be at least 3000:
  500 * LargeShips + 200 * SmallShips >= 3000
- The number of large ships used cannot exceed the number of small ships used:
  LargeShips <= SmallShips

Objective:
- Minimize the total number of ships used:
  LargeShips + SmallShips
```python

from cpmpy import Model, intvar

# Decision Variables
LargeShips = intvar(0, 999999999)  # Number of large ships used
SmallShips = intvar(0, 999999999)  # Number of small ships used

# Constraints
m = Model()

# The total number of containers transported should be at least 3000:
m += 500 * LargeShips + 200 * SmallShips >= 3000
# The number of large ships used cannot exceed the number of small ships used:
m += LargeShips <= SmallShips

# Objective
# Minimize the total number of ships used:
m.minimize(LargeShips + SmallShips)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If  at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.
Decision Variables:
- Number of small canoes used: Canoes
- Number of small diesel boats used: DieselBoats

Constraints:
- Total number of fish transported to shore should be at least 1000:
  10 * Canoes + 15 * DieselBoats >= 1000
- Number of small canoes used has to be at least 3 times as many as the number of diesel boats used:
  Canoes >= 3 * DieselBoats

Objective:
- Minimize the total number of canoes and diesel boats used:
  Canoes + DieselBoats
```python

from cpmpy import Model, intvar

# Decision Variables
Canoes = intvar(0, 999999999)  # Number of small canoes used
DieselBoats = intvar(0, 999999999)  # Number of small diesel boats used

# Constraints
m = Model()

# Total number of fish transported to shore should be at least 1000:
m += 10 * Canoes + 15 * DieselBoats >= 1000
# Number of small canoes used has to be at least 3 times as many as the number of diesel boats used:
m += Canoes >= 3 * DieselBoats

# Objective
# Minimize the total number of canoes and diesel boats used:
m.minimize(Canoes + DieselBoats)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people.  They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?
Decision Variables:
- Number of vans used: Vans
- Number of cars used: Cars

Constraints:
- Total number of voters transported should be at least 200 (6 people per van, 3 people per car):
  6 * Vans + 3 * Cars >= 200
- At most 30% of the vehicles can be vans:
  Vans <= 0.3 * (Vans + Cars)

Objective:
- Minimize the total number of cars used:
  Cars
```python

from cpmpy import Model, intvar

# Decision Variables
Vans = intvar(0, 999999999)  # Number of vans used
Cars = intvar(0, 999999999)  # Number of cars used

# Constraints
m = Model()

# Total number of voters transported should be at least 200 (6 people per van, 3 people per car):
m += 6 * Vans + 3 * Cars >= 200
# At most 30% of the vehicles can be vans:
m += Vans <= 0.3 * (Vans + Cars)

# Objective
# Minimize the total number of cars used:
m.minimize(Cars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs $6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?
Decision Variables:
- Number of hamburgers served: Hamburgers
- Number of chicken wraps served: ChickenWraps

Constraints:
- Calorie requirement (at least 2200 calories):
  800 * Hamburgers + 450 * ChickenWraps >= 2200
- Protein requirement (at least 50 grams):
  19 * Hamburgers + 12 * ChickenWraps >= 50
- Carb requirement (at least 70 grams):
  20 * Hamburgers + 10 * ChickenWraps >= 70

Objective:
- Minimize cost (6.5 dollars per hamburger, 4 dollars per chicken wrap):
  6.5 * Hamburgers + 4 * ChickenWraps
```python

from cpmpy import Model, intvar

# Decision Variables
Hamburgers = intvar(0, 999999999)  # Number of hamburgers served
ChickenWraps = intvar(0, 999999999)  # Number of chicken wraps served

# Constraints
m = Model()

# Calorie requirement (at least 2200 calories):
m += 800 * Hamburgers + 450 * ChickenWraps >= 2200
# Protein requirement (at least 50 grams):
m += 19 * Hamburgers + 12 * ChickenWraps >= 50
# Carb requirement (at least 70 grams):
m += 20 * Hamburgers + 10 * ChickenWraps >= 70

# Objective
# Minimize cost ($6.5 per hamburger, $4 per chicken wrap):
m.minimize(6.5 * Hamburgers + 4 * ChickenWraps)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is $150 and the profit per batch of pork ribs is $300, how many batches of each should be made to maximize profit?
Decision Variables:
- Number of batches of hams produced: Hams
- Number of batches of pork ribs produced: PorkRibs

Constraints:
- Meat slicer usage for both products should not exceed 4000 hours per year:
  4 * Hams + 2 * PorkRibs <= 4000
- Meat packer usage for both products should not exceed 4000 hours per year:
  2.5 * Hams + 3.5 * PorkRibs <= 4000

Objective:
- Maximize profit (150 dollars per batch of hams, 300 dollars per batch of pork ribs):
  150 * Hams + 300 * PorkRibs
```python

from cpmpy import Model, intvar

# Decision Variables
Hams = intvar(0, 999999999)  # Number of batches of hams produced
PorkRibs = intvar(0, 999999999)  # Number of batches of pork ribs produced

# Constraints
m = Model()

# Machine hours constraints
# Meat slicer: 4 hours for hams, 2 hours for pork ribs, at most 4000 hours per year
m += 4 * Hams + 2 * PorkRibs <= 4000
# Meat packer: 2.5 hours for hams, 3.5 hours for pork ribs, at most 4000 hours per year
m += 2.5 * Hams + 3.5 * PorkRibs <= 4000

# Objective
# Maximize profit ($150 per batch of hams, $300 per batch of pork ribs)
m.maximize(150 * Hams + 300 * PorkRibs)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is $400 and the profit per stove is $260, how many of each should they sell in order to maximize profit?
Decision Variables:
- Number of refrigerators sold: Refrigerators
- Number of stoves sold: Stoves

Constraints:
- Total mover time for refrigerators and stoves should not exceed 20000 minutes:
  60 * Refrigerators + 45 * Stoves <= 20000
- Total setup time for refrigerators and stoves should not exceed 13000 minutes:
  20 * Refrigerators + 25 * Stoves <= 13000

Objective:
- Maximize profit ($400 per refrigerator, $260 per stove):
  400 * Refrigerators + 260 * Stoves
```python

from cpmpy import Model, intvar

# Decision Variables
Refrigerators = intvar(0, 999999999)  # Number of refrigerators sold
Stoves = intvar(0, 999999999)  # Number of stoves sold

# Constraints
m = Model()

# Total mover time for refrigerators and stoves should not exceed 20000 minutes:
m += 60 * Refrigerators + 45 * Stoves <= 20000
# Total setup time for refrigerators and stoves should not exceed 13000 minutes:
m += 20 * Refrigerators + 25 * Stoves <= 13000

# Objective
# Maximize profit ($400 per refrigerator, $260 per stove):
m.maximize(400 * Refrigerators + 260 * Stoves)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is $100 and the profit per drawer is $90, how many of each should the company make to maximize profit?
Decision Variables:
- Number of desks made: Desks
- Number of drawers made: Drawers

Constraints:
- Total assembly time for desks and drawers should not exceed 4000 minutes:
  40 * Desks + 30 * Drawers <= 4000
- Total sanding time for desks and drawers should not exceed 3500 minutes:
  20 * Desks + 10 * Drawers <= 3500

Objective:
- Maximize profit ($100 per desk, $90 per drawer):
  100 * Desks + 90 * Drawers
```python

from cpmpy import Model, intvar

# Decision Variables
Desks = intvar(0, 999999999)  # Number of desks made
Drawers = intvar(0, 999999999)  # Number of drawers made

# Constraints
m = Model()

# Total assembly time should not exceed 4000 minutes:
m += 40 * Desks + 30 * Drawers <= 4000
# Total sanding time should not exceed 3500 minutes:
m += 20 * Desks + 10 * Drawers <= 3500

# Objective
# Maximize profit ($100 per desk, $90 per drawer):
m.maximize(100 * Desks + 90 * Drawers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is $7.5 and the profit from each bottle of matcha milk tea sold is $5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?
Decision Variables:
- Number of bottles of black milk tea: BlackMilkTea
- Number of bottles of matcha milk tea: MatchaMilkTea

Constraints:
- Total milk used should not exceed 30000 grams (600 grams per bottle of black milk tea, 525 grams per bottle of matcha milk tea):
  600 * BlackMilkTea + 525 * MatchaMilkTea <= 30000
- Total honey used should not exceed 500 grams (10 grams per bottle of black milk tea, 5 grams per bottle of matcha milk tea):
  10 * BlackMilkTea + 5 * MatchaMilkTea <= 500

Objective:
- Maximize profit (7.5 dollars per bottle of black milk tea, 5 dollars per bottle of matcha milk tea):
  7.5 * BlackMilkTea + 5 * MatchaMilkTea
```python

from cpmpy import Model, intvar

# Decision Variables
BlackMilkTea = intvar(0, 999999999)  # Number of bottles of black milk tea
MatchaMilkTea = intvar(0, 999999999)  # Number of bottles of matcha milk tea

# Constraints
m = Model()

# Total milk used should not exceed 30000 grams:
m += 600 * BlackMilkTea + 525 * MatchaMilkTea <= 30000
# Total honey used should not exceed 500 grams:
m += 10 * BlackMilkTea + 5 * MatchaMilkTea <= 500

# Objective
# Maximize profit (7.5 dollars per bottle of black milk tea, 5 dollars per bottle of matcha milk tea):
m.maximize(7.5 * BlackMilkTea + 5 * MatchaMilkTea)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs $1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs $2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?
Decision Variables:
- Number of glasses of milk consumed per day: Milk
- Number of plates of vegetables consumed per day: Vegetables

Constraints:
- Minimum daily requirement for calcium (at least 100 units):
  40 * Milk + 15 * Vegetables >= 100
- Minimum daily requirement for iron (at least 50 units):
  25 * Milk + 30 * Vegetables >= 50

Objective:
- Minimize cost ($1 per glass of milk, $2 per plate of vegetables):
  1 * Milk + 2 * Vegetables
```python

from cpmpy import Model, intvar

# Decision Variables
Milk = intvar(0, 999999999)  # Number of glasses of milk consumed per day
Vegetables = intvar(0, 999999999)  # Number of plates of vegetables consumed per day

# Constraints
m = Model()

# Minimum daily requirement for calcium (at least 100 units):
m += 40 * Milk + 15 * Vegetables >= 100
# Minimum daily requirement for iron (at least 50 units):
m += 25 * Milk + 30 * Vegetables >= 50

# Objective
# Minimize cost ($1 per glass of milk, $2 per plate of vegetables):
m.minimize(1 * Milk + 2 * Vegetables)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs $5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs $2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.
Decision Variables:
- Number of servings of noodles: Noodles
- Number of servings of protein bars: ProteinBars

Constraints:
- Total calories should be at least 2000 per day:
  600 * Noodles + 250 * ProteinBars >= 2000
- Total protein should be at least 16 grams per day:
  1.5 * Noodles + 5 * ProteinBars >= 16

Objective:
- Minimize cost ($5 per serving of noodles, $2.5 per serving of protein bars):
  5 * Noodles + 2.5 * ProteinBars
```python

from cpmpy import Model, intvar

# Decision Variables
Noodles = intvar(0, 999999999)  # Number of servings of noodles
ProteinBars = intvar(0, 999999999)  # Number of servings of protein bars

# Constraints
m = Model()

# Calorie constraint: at least 2000 calories per day
m += 600 * Noodles + 250 * ProteinBars >= 2000
# Protein constraint: at least 16 grams of protein per day
m += 1.5 * Noodles + 5 * ProteinBars >= 16

# Objective
# Minimize cost ($5 per serving of noodles, $2.5 per serving of protein bars)
m.minimize(5 * Noodles + 2.5 * ProteinBars)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A toy store sells plush toys and dolls. Each plush toy costs the store $3 and each doll costs the store $2. The store owner can spend at most $700 on inventory. Each plush toy is then sold for a profit of $4 while each doll is sold for a profit of $2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?
Decision Variables:
- Number of plush toys bought and sold: PlushToys
- Number of dolls bought and sold: Dolls

Constraints:
- Inventory cost limit (each plush toy costs $3 and each doll costs $2, total cost <= $700):
  3 * PlushToys + 2 * Dolls <= 700
- Plush toys sold per month should be at least 90 but no more than 190:
  90 <= PlushToys <= 190
- Number of dolls sold should not exceed twice the number of plush toys sold:
  Dolls <= 2 * PlushToys

Objective:
- Maximize profit (profit of $4 per plush toy and $2 per doll):
  4 * PlushToys + 2 * Dolls
```python

from cpmpy import Model, intvar

# Decision Variables
PlushToys = intvar(90, 190)  # Number of plush toys bought and sold
Dolls = intvar(0, 380)  # Number of dolls bought and sold, at most twice the number of plush toys

# Constraints
m = Model()

# Inventory cost limit: $3 per plush toy and $2 per doll, total cost <= $700
m += 3 * PlushToys + 2 * Dolls <= 700

# Plush toys sold per month should be at least 90 but no more than 190
m += PlushToys >= 90
m += PlushToys <= 190

# Number of dolls sold should not exceed twice the number of plush toys sold
m += Dolls <= 2 * PlushToys

# Objective
# Maximize profit: $4 per plush toy and $2 per doll
m.maximize(4 * PlushToys + 2 * Dolls)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of $4 and a package of music paper at a profit of $2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?
Decision Variables:
- Number of reams of graph paper produced daily: GraphPaper
- Number of reams of music paper produced daily: MusicPaper

Constraints:
- Printing machine time constraint (350 minutes available):
  3 * GraphPaper + 1.5 * MusicPaper <= 350
- Scanning machine time constraint (350 minutes available):
  5.5 * GraphPaper + 3 * MusicPaper <= 350

Objective:
- Maximize profit ($4 per ream of graph paper, $2.5 per ream of music paper):
  4 * GraphPaper + 2.5 * MusicPaper

The company should produce an optimal number of reams of graph paper and music paper to maximize profit. The profit obtained from this production plan can be calculated using the objective function.
```python

from cpmpy import Model, intvar

# Decision Variables
GraphPaper = intvar(0, 999999999)  # Number of reams of graph paper produced daily
MusicPaper = intvar(0, 999999999)  # Number of reams of music paper produced daily

# Constraints
m = Model()

# Printing machine time constraint (3 minutes per ream of graph paper, 1.5 minutes per ream of music paper, 350 minutes available per day):
m += 3 * GraphPaper + 1.5 * MusicPaper <= 350
# Scanning machine time constraint (5.5 minutes per ream of graph paper, 3 minutes per ream of music paper, 350 minutes available per day):
m += 5.5 * GraphPaper + 3 * MusicPaper <= 350

# Objective
# Maximize profit ($4 per ream of graph paper, $2.5 per ream of music paper):
m.maximize(4 * GraphPaper + 2.5 * MusicPaper)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is $14 and the cost per health supplement for health supplement B is $25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.
Decision Variables:
- Number of servings of health supplement A: SupplementA
- Number of servings of health supplement B: SupplementB

Constraints:
- At least 400 grams of Calcium required:
  30 * SupplementA + 60 * SupplementB >= 400
- At least 50 grams of Magnesium required:
  50 * SupplementA + 10 * SupplementB >= 50

Objective:
- Minimize cost (14 dollars per serving of health supplement A, 25 dollars per serving of health supplement B):
  14 * SupplementA + 25 * SupplementB
```python

from cpmpy import Model, intvar

# Decision Variables
SupplementA = intvar(0, 999999999)  # Number of servings of health supplement A
SupplementB = intvar(0, 999999999)  # Number of servings of health supplement B

# Constraints
m = Model()

# At least 400 grams of Calcium required:
m += 30 * SupplementA + 60 * SupplementB >= 400
# At least 50 grams of Magnesium required:
m += 50 * SupplementA + 10 * SupplementB >= 50

# Objective
# Minimize cost (14 dollars per serving of health supplement A, 25 dollars per serving of health supplement B):
m.minimize(14 * SupplementA + 25 * SupplementB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Lucy has a dog and she wants his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs $20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.
Decision Variables:
- Number of regular brand bags: RegularBrand
- Number of premium brand bags: PremiumBrand

Constraints:
- Minimum of 15 units of calcium required:
  4 * RegularBrand + 12 * PremiumBrand >= 15
- Minimum of 20 units of vitamin mix required:
  7 * RegularBrand + 10 * PremiumBrand >= 20
- Minimum of 20 units of protein required:
  10 * RegularBrand + 16 * PremiumBrand >= 20

Objective:
- Minimize cost (20 dollars per regular brand bag, 35 dollars per premium brand bag):
  20 * RegularBrand + 35 * PremiumBrand
```python

from cpmpy import Model, intvar

# Decision Variables
RegularBrand = intvar(0, 999999999)  # Number of regular brand bags
PremiumBrand = intvar(0, 999999999)  # Number of premium brand bags

# Constraints
m = Model()

# Minimum of 15 units of calcium required:
m += 4 * RegularBrand + 12 * PremiumBrand >= 15
# Minimum of 20 units of vitamin mix required:
m += 7 * RegularBrand + 10 * PremiumBrand >= 20
# Minimum of 20 units of protein required:
m += 10 * RegularBrand + 16 * PremiumBrand >= 20

# Objective
# Minimize cost (20 dollars per regular brand bag, 35 dollars per premium brand bag):
m.minimize(20 * RegularBrand + 35 * PremiumBrand)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of $550, each tank of non-sticky oil produces a net revenue of $750, and each tank of heavy oil produces a net revenue of $950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?

Decision Variables:
- Number of tanks of light oil processed: LightOil
- Number of tanks of non-sticky oil processed: NonStickyOil
- Number of tanks of heavy oil processed: HeavyOil

Constraints:
- Compound A usage should not exceed 250 units:
  3*LightOil + 6*NonStickyOil + 9*HeavyOil <= 250
- Compound B usage should not exceed 150 units:
  3*LightOil + 2*NonStickyOil + 3*HeavyOil <= 150

Objective:
- Maximize net revenue (550 dollars per tank of light oil, 750 dollars per tank of non-sticky oil, 950 dollars per tank of heavy oil):
  550*LightOil + 750*NonStickyOil + 950*HeavyOil
```python

from cpmpy import Model, intvar

# Decision Variables
LightOil = intvar(0, 999999999)  # Number of tanks of light oil processed
NonStickyOil = intvar(0, 999999999)  # Number of tanks of non-sticky oil processed
HeavyOil = intvar(0, 999999999)  # Number of tanks of heavy oil processed

# Constraints
m = Model()

# Compound A constraint (250 units available):
m += 3*LightOil + 6*NonStickyOil + 9*HeavyOil <= 250
# Compound B constraint (150 units available):
m += 3*LightOil + 2*NonStickyOil + 3*HeavyOil <= 150

# Objective
# Maximize net revenue:
m.maximize(550*LightOil + 750*NonStickyOil + 950*HeavyOil)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a $2.1 profit and a square foot of carpets yields a $3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?
Decision Variables:
- Number of square feet of laminate planks produced weekly: LaminatePlanks
- Number of square feet of carpets produced weekly: Carpets

Constraints:
- Expected demand of at least 15,000 square feet of laminate planks:
  LaminatePlanks >= 15,000
- Expected demand of at least 5,000 square feet of carpets:
  Carpets >= 5,000
- Total shipping contract requirement of at least 50,000 square feet:
  LaminatePlanks + Carpets >= 50,000
- Maximum production limit of 40,000 square feet of laminate planks:
  LaminatePlanks <= 40,000
- Maximum production limit of 20,000 square feet of carpets:
  Carpets <= 20,000

Objective:
- Maximize profit ($2.1 profit per square foot of laminate planks, $3.3 profit per square foot of carpets):
  2.1 * LaminatePlanks + 3.3 * Carpets
```python

from cpmpy import Model, intvar

# Decision Variables
LaminatePlanks = intvar(0, 40000)  # Number of square feet of laminate planks produced weekly
Carpets = intvar(0, 20000)  # Number of square feet of carpets produced weekly

# Constraints
m = Model()

# Expected demand constraints
m += LaminatePlanks >= 15000  # Expected demand of at least 15,000 square feet of laminate planks
m += Carpets >= 5000  # Expected demand of at least 5,000 square feet of carpets

# Shipping contract requirement
m += LaminatePlanks + Carpets >= 50000  # Total shipping contract requirement of at least 50,000 square feet

# Production limits
m += LaminatePlanks <= 40000  # Maximum production limit of 40,000 square feet of laminate planks
m += Carpets <= 20000  # Maximum production limit of 20,000 square feet of carpets

# Objective
# Maximize profit ($2.1 profit per square foot of laminate planks, $3.3 profit per square foot of carpets)
m.maximize(2.1 * LaminatePlanks + 3.3 * Carpets)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium.  The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is $2 and the cost per pill of supplement B is  $3, how many of each should he buy to minimize costs?
Decision Variables:
- Number of pills of supplement A: SupplementA
- Number of pills of supplement B: SupplementB

Constraints:
- Iron requirement (minimum of 40 units):
  5 * SupplementA + 4 * SupplementB >= 40
- Calcium requirement (minimum of 50 units):
  10 * SupplementA + 15 * SupplementB >= 50

Objective:
- Minimize cost (Supplement A costs $2 per pill, Supplement B costs $3 per pill):
  2 * SupplementA + 3 * SupplementB
```python

from cpmpy import Model, intvar

# Decision Variables
SupplementA = intvar(0, 999999999)  # Number of pills of supplement A
SupplementB = intvar(0, 999999999)  # Number of pills of supplement B

# Constraints
m = Model()

# Iron requirement (minimum of 40 units):
m += 5 * SupplementA + 4 * SupplementB >= 40
# Calcium requirement (minimum of 50 units):
m += 10 * SupplementA + 15 * SupplementB >= 50

# Objective
# Minimize cost (Supplement A costs $2 per pill, Supplement B costs $3 per pill):
m.minimize(2 * SupplementA + 3 * SupplementB)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of $30 each and premium handbags at a profit of $180 each. The total monthly cost of manufacturing is $200 per regular handbag and $447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?
Decision Variables:
- Number of regular handbags sold per month: RegularHandbags
- Number of premium handbags sold per month: PremiumHandbags

Constraints:
- Total cost of manufacturing regular and premium handbags should not exceed the budget of $250000:
  200 * RegularHandbags + 447 * PremiumHandbags <= 250000
- Total number of regular and premium handbags sold should not exceed 475 per month:
  RegularHandbags + PremiumHandbags <= 475

Objective:
- Maximize monthly profit (30 dollars profit per regular handbag, 180 dollars profit per premium handbag):
  30 * RegularHandbags + 180 * PremiumHandbags
```python

from cpmpy import Model, intvar

# Decision Variables
RegularHandbags = intvar(0, 999999999)  # Number of regular handbags sold per month
PremiumHandbags = intvar(0, 999999999)  # Number of premium handbags sold per month

# Constraints
m = Model()

# Total cost of manufacturing regular and premium handbags should not exceed the budget of $250000:
m += 200 * RegularHandbags + 447 * PremiumHandbags <= 250000
# Total number of regular and premium handbags sold should not exceed 475 per month:
m += RegularHandbags + PremiumHandbags <= 475

# Objective
# Maximize monthly profit (30 dollars profit per regular handbag, 180 dollars profit per premium handbag):
m.maximize(30 * RegularHandbags + 180 * PremiumHandbags)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A woman has $100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be $1.2 for basketball tournament, $0.5 for horse race, and $0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?
Decision Variables:
- Amount of money to put on basketball tournament: BasketballBet
- Amount of money to put on horse race: HorseRaceBet
- Amount of money to put on soccer game: SoccerBet

Constraints:
- Total amount of money available is $100000:
  BasketballBet + HorseRaceBet + SoccerBet == 100000
- Average chance of losing money should be at most 30%:
  0.5 * BasketballBet + 0.25 * HorseRaceBet + 0.1 * SoccerBet <= 0.3 * 100000

Objective:
- Maximize average payout ($1.2 payout for each dollar on basketball tournament, $0.5 payout for each dollar on horse race, $0.1 payout for each dollar on soccer game):
  1.2 * BasketballBet + 0.5 * HorseRaceBet + 0.1 * SoccerBet
```python

from cpmpy import Model, intvar

# Decision Variables
BasketballBet = intvar(0, 100000)  # Amount of money to put on basketball tournament
HorseRaceBet = intvar(0, 100000)  # Amount of money to put on horse race
SoccerBet = intvar(0, 100000)  # Amount of money to put on soccer game

# Constraints
m = Model()

# Total amount of money available is $100000:
m += BasketballBet + HorseRaceBet + SoccerBet == 100000
# Average chance of losing money should be at most 30%:
m += 0.5 * BasketballBet + 0.25 * HorseRaceBet + 0.1 * SoccerBet <= 0.3 * 100000

# Objective
# Maximize average payout ($1.2 payout for each dollar on basketball tournament, $0.5 payout for each dollar on horse race, $0.1 payout for each dollar on soccer game):
m.maximize(1.2 * BasketballBet + 0.5 * HorseRaceBet + 0.1 * SoccerBet)

```
Error: Not an integer: 2.5
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him $250 and each freezer repaired earns his $375, how many of each appliance should he fix to maximize his earnings?

Decision Variables:
- Number of washing machines fixed: WashingMachines
- Number of freezers fixed: Freezers

Constraints:
- Total inspection time for washing machines and freezers should not exceed 5000 minutes:
  30 * WashingMachines + 20 * Freezers <= 5000
- Total fixing time for washing machines and freezers should not exceed 20000 minutes:
  90 * WashingMachines + 125 * Freezers <= 20000

Objective:
- Maximize earnings ($250 per washing machine fixed, $375 per freezer fixed):
  250 * WashingMachines + 375 * Freezers
```python

from cpmpy import Model, intvar

# Decision Variables
WashingMachines = intvar(0, 999999999)  # Number of washing machines fixed
Freezers = intvar(0, 999999999)  # Number of freezers fixed

# Constraints
m = Model()

# Total inspection time for washing machines and freezers should not exceed 5000 minutes:
m += 30 * WashingMachines + 20 * Freezers <= 5000

# Total fixing time for washing machines and freezers should not exceed 20000 minutes:
m += 90 * WashingMachines + 125 * Freezers <= 20000

# Objective
# Maximize earnings ($250 per washing machine fixed, $375 per freezer fixed):
m.maximize(250 * WashingMachines + 375 * Freezers)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is $12, the profit per sponge cake is $10, and the profit per birthday cake is $15, how many of each should the bakery make to maximize their profit?
Decision Variables:
- Number of crepe cakes made: CrepeCakes
- Number of sponge cakes made: SpongeCakes
- Number of birthday cakes made: BirthdayCakes

Constraints:
- Total batter used should not exceed 20000 grams (400 grams per crepe cake, 500 grams per sponge cake, 450 grams per birthday cake):
  400 * CrepeCakes + 500 * SpongeCakes + 450 * BirthdayCakes <= 20000
- Total milk used should not exceed 14000 grams (200 grams per crepe cake, 300 grams per sponge cake, 350 grams per birthday cake):
  200 * CrepeCakes + 300 * SpongeCakes + 350 * BirthdayCakes <= 14000

Objective:
- Maximize profit (12 dollars per crepe cake, 10 dollars per sponge cake, 15 dollars per birthday cake):
  12 * CrepeCakes + 10 * SpongeCakes + 15 * BirthdayCakes
```python

from cpmpy import Model, intvar

# Decision Variables
CrepeCakes = intvar(0, 999999999)  # Number of crepe cakes made
SpongeCakes = intvar(0, 999999999)  # Number of sponge cakes made
BirthdayCakes = intvar(0, 999999999)  # Number of birthday cakes made

# Constraints
m = Model()

# Total batter used should not exceed 20000 grams:
m += 400 * CrepeCakes + 500 * SpongeCakes + 450 * BirthdayCakes <= 20000
# Total milk used should not exceed 14000 grams:
m += 200 * CrepeCakes + 300 * SpongeCakes + 350 * BirthdayCakes <= 14000

# Objective
# Maximize profit (12 dollars per crepe cake, 10 dollars per sponge cake, 15 dollars per birthday cake):
m.maximize(12 * CrepeCakes + 10 * SpongeCakes + 15 * BirthdayCakes)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?
Decision Variables:
- kg of the first mix prepared: FirstMix
- kg of the second mix prepared: SecondMix

Constraints:
- The store has on hand 20 kg of cat paw snacks (20% of FirstMix and 35% of SecondMix should not exceed 20 kg):
  0.20 * FirstMix + 0.35 * SecondMix <= 20
- The store has on hand 50 kg of gold shark snacks (80% of FirstMix and 65% of SecondMix should not exceed 50 kg):
  0.80 * FirstMix + 0.65 * SecondMix <= 50

Objective:
- Maximize profit ($12 per kg of the first mix, $15 per kg of the second mix):
  12 * FirstMix + 15 * SecondMix
```python

from cpmpy import Model, intvar

# Decision Variables
FirstMix = intvar(0, 999999999)  # kg of the first mix prepared
SecondMix = intvar(0, 999999999)  # kg of the second mix prepared

# Constraints
m = Model()

# The store has on hand 20 kg of cat paw snacks:
m += 0.20 * FirstMix + 0.35 * SecondMix <= 20
# The store has on hand 50 kg of gold shark snacks:
m += 0.80 * FirstMix + 0.65 * SecondMix <= 50

# Objective
# Maximize profit ($12 per kg of the first mix, $15 per kg of the second mix):
m.maximize(12 * FirstMix + 15 * SecondMix)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of $2.50 each and x2 deluxe tacos at a profit of $3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?
Decision Variables:
- Number of regular tacos made: RegularTacos
- Number of deluxe tacos made: DeluxeTacos

Constraints:
- At most 50 regular tacos can be made:
  RegularTacos <= 50
- At most 40 deluxe tacos can be made:
  DeluxeTacos <= 40
- Total number of tacos made should not exceed 70:
  RegularTacos + DeluxeTacos <= 70

Objective:
- Maximize profit (2.50 dollars per regular taco, 3.55 dollars per deluxe taco):
  2.50 * RegularTacos + 3.55 * DeluxeTacos
```python
from cpmpy import Model, intvar

# Decision Variables
RegularTacos = intvar(0, 999999999)  # Number of regular tacos made
DeluxeTacos = intvar(0, 999999999)  # Number of deluxe tacos made

# Constraints
m = Model()

# At most 50 regular tacos can be made:
m += RegularTacos <= 50
# At most 40 deluxe tacos can be made:
m += DeluxeTacos <= 40
# Total number of tacos made should not exceed 70:
m += RegularTacos + DeluxeTacos <= 70

# Objective
# Maximize profit (2.50 dollars per regular taco, 3.55 dollars per deluxe taco):
m.maximize(2.50 * RegularTacos + 3.55 * DeluxeTacos)
```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is $15 and the profit per English workbook is $17, how many of each should the company make to maximize profit?
Decision Variables:
- Number of math workbooks produced: MathWorkbooks
- Number of English workbooks produced: EnglishWorkbooks

Constraints:
- At least 40 math workbooks must be made:
  MathWorkbooks >= 40
- At least 60 English workbooks must be made:
  EnglishWorkbooks >= 60
- At most 140 math workbooks can be made:
  MathWorkbooks <= 140
- At most 170 English workbooks can be made:
  EnglishWorkbooks <= 170
- At least 200 workbooks of either type must be sent:
  MathWorkbooks + EnglishWorkbooks >= 200

Objective:
- Maximize profit ($15 profit per math workbook, $17 profit per English workbook):
  15 * MathWorkbooks + 17 * EnglishWorkbooks
```python

from cpmpy import Model, intvar

# Decision Variables
MathWorkbooks = intvar(0, 999999999)  # Number of math workbooks produced
EnglishWorkbooks = intvar(0, 999999999)  # Number of English workbooks produced

# Constraints
m = Model()

# At least 40 math workbooks must be made:
m += MathWorkbooks >= 40
# At least 60 English workbooks must be made:
m += EnglishWorkbooks >= 60
# At most 140 math workbooks can be made:
m += MathWorkbooks <= 140
# At most 170 English workbooks can be made:
m += EnglishWorkbooks <= 170
# At least 200 workbooks of either type must be sent:
m += MathWorkbooks + EnglishWorkbooks >= 200

# Objective
# Maximize profit ($15 profit per math workbook, $17 profit per English workbook):
m.maximize(15 * MathWorkbooks + 17 * EnglishWorkbooks)

```
True
True
Wrong: 0, Total: 5, Is objective correct: True
---------------------------------------------------------------------------------------------

A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for $2800 and $2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?

Decision Variables:
- Number of full-weighted keyboards produced: FullWeighted
- Number of semi-weighted keyboards produced: SemiWeighted

Constraints:
- Total oscillator chips used should not exceed 3500 (full-weighted uses 20 chips, semi-weighted uses 15 chips):
  20 * FullWeighted + 15 * SemiWeighted <= 3500
- Total production time should not exceed 6 hours (both keyboards require 1.2 hours each):
  1.2 * FullWeighted + 1.2 * SemiWeighted <= 6

Objective:
- Maximize total revenue (full-weighted sold for $2800, semi-weighted sold for $2400):
  2800 * FullWeighted + 2400 * SemiWeighted
```python

from cpmpy import Model, intvar

# Decision Variables
FullWeighted = intvar(0, 999999999)  # Number of full-weighted keyboards produced
SemiWeighted = intvar(0, 999999999)  # Number of semi-weighted keyboards produced

# Constraints
m = Model()

# Oscillator chips constraint (3500 chips available, full-weighted uses 20 chips, semi-weighted uses 15 chips):
m += 20 * FullWeighted + 15 * SemiWeighted <= 3500
# Working hours constraint (6 hours available, both keyboards require 1.2 hours each):
m += 1.2 * FullWeighted + 1.2 * SemiWeighted <= 6

# Objective
# Maximize total revenue (full-weighted sold for $2800, semi-weighted sold for $2400):
m.maximize(2800 * FullWeighted + 2400 * SemiWeighted)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost $550 and $2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is $450 and the profit per commercial version is $1200. If the company does not want to spend more than $400000, how many of each software package should they produce to maximize the profits.

Decision Variables:
- Number of personal license packages produced: PersonalLicense
- Number of commercial license packages produced: CommercialLicense

Constraints:
- Total production cost should not exceed $400000:
  550 * PersonalLicense + 2000 * CommercialLicense <= 400000
- At most 300 licenses for both versions combined can be sold a month:
  PersonalLicense + CommercialLicense <= 300

Objective:
- Maximize profits (Profit per personal license is $450, and per commercial license is $1200):
  450 * PersonalLicense + 1200 * CommercialLicense
```python

from cpmpy import Model, intvar

# Decision Variables
PersonalLicense = intvar(0, 999999999)  # Number of personal license packages produced
CommercialLicense = intvar(0, 999999999)  # Number of commercial license packages produced

# Constraints
m = Model()

# Total production cost should not exceed $400000:
m += 550 * PersonalLicense + 2000 * CommercialLicense <= 400000
# At most 300 licenses for both versions combined can be sold a month:
m += PersonalLicense + CommercialLicense <= 300

# Objective
# Maximize profits (Profit per personal license is $450, and per commercial license is $1200):
m.maximize(450 * PersonalLicense + 1200 * CommercialLicense)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of $5.5 each, and x2 sugar cookies, at a profit of $12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?

Decision Variables:
- Number of strawberry cookies made per day: StrawberryCookies
- Number of sugar cookies made per day: SugarCookies

Constraints:
- Total number of strawberry and sugar cookies made should not exceed 100 per day:
  StrawberryCookies + SugarCookies <= 100
- At most 100 strawberry cookies per day:
  StrawberryCookies <= 100
- At most 80 sugar cookies per day:
  SugarCookies <= 80

Objective:
- Maximize profit (5.5 dollars per strawberry cookie, 12 dollars per sugar cookie):
  5.5 * StrawberryCookies + 12 * SugarCookies
```python

from cpmpy import Model, intvar

# Decision Variables
StrawberryCookies = intvar(0, 999999999)  # Number of strawberry cookies made per day
SugarCookies = intvar(0, 999999999)  # Number of sugar cookies made per day

# Constraints
m = Model()

# Total number of strawberry and sugar cookies made should not exceed 100 per day:
m += StrawberryCookies + SugarCookies <= 100
# Number of strawberry cookies made should be at most 100 per day:
m += StrawberryCookies <= 100
# Number of sugar cookies made should be at most 80 per day:
m += SugarCookies <= 80

# Objective
# Maximize profit (5.5 dollars per strawberry cookie, 12 dollars per sugar cookie):
m.maximize(5.5 * StrawberryCookies + 12 * SugarCookies)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs $1200 and attracts 2000 viewers. On Beta Video, a commercial costs $2000 and attracts 5000 viewers. On Gamma Live, a commercial costs $4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is $20000, how many commercials should be run in each of the three possible choices in order to maximize audience?
Decision Variables:
- Number of commercials on Pi TV: PiTVCommercials
- Number of commercials on Beta Video: BetaVideoCommercials
- Number of commercials on Gamma Live: GammaLiveCommercials

Constraints:
- Weekly budget constraint ($20000):
  1200 * PiTVCommercials + 2000 * BetaVideoCommercials + 4000 * GammaLiveCommercials <= 20000
- Beta Video limits the number of commercials to 8:
  BetaVideoCommercials <= 8
- At most a third of all commercials should occur on Gamma Live:
  GammaLiveCommercials <= 1/3 * (PiTVCommercials + BetaVideoCommercials + GammaLiveCommercials)
- At least 20% of commercials should occur on Pi TV:
  PiTVCommercials >= 0.20 * (PiTVCommercials + BetaVideoCommercials + GammaLiveCommercials)

Objective:
- Maximize audience reach (2000 viewers per Pi TV commercial, 5000 viewers per Beta Video commercial, 9000 viewers per Gamma Live commercial):
  2000 * PiTVCommercials + 5000 * BetaVideoCommercials + 9000 * GammaLiveCommercials
```python

from cpmpy import Model, intvar

# Decision Variables
PiTVCommercials = intvar(0, 999999999)  # Number of commercials on Pi TV
BetaVideoCommercials = intvar(0, 999999999)  # Number of commercials on Beta Video
GammaLiveCommercials = intvar(0, 999999999)  # Number of commercials on Gamma Live

# Constraints
m = Model()

# Weekly budget constraint ($20000):
m += 1200 * PiTVCommercials + 2000 * BetaVideoCommercials + 4000 * GammaLiveCommercials <= 20000
# Beta Video limits the number of commercials to 8:
m += BetaVideoCommercials <= 8
# At most a third of all commercials should occur on Gamma Live:
m += GammaLiveCommercials <= (1/3) * (PiTVCommercials + BetaVideoCommercials + GammaLiveCommercials)
# At least 20% of commercials should occur on Pi TV:
m += PiTVCommercials >= 0.20 * (PiTVCommercials + BetaVideoCommercials + GammaLiveCommercials)

# Objective
# Maximize audience reach (2000 viewers per Pi TV commercial, 5000 viewers per Beta Video commercial, 9000 viewers per Gamma Live commercial):
m.maximize(2000 * PiTVCommercials + 5000 * BetaVideoCommercials + 9000 * GammaLiveCommercials)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?
Decision Variables:
- Number of temperature checks performed: TemperatureCheck
- Number of blood tests conducted: BloodTest

Constraints:
- Total staff minutes available is 22000:
  2 * TemperatureCheck + 10 * BloodTest <= 22000
- At least 45 blood tests must be conducted:
  BloodTest >= 45
- Temperature check should be performed at least 5 times as many as the blood test:
  TemperatureCheck >= 5 * BloodTest

Objective:
- Maximize the number of patients seen (sum of temperature checks and blood tests):
  TemperatureCheck + BloodTest
```python

from cpmpy import Model, intvar

# Decision Variables
TemperatureCheck = intvar(0, 999999999)  # Number of temperature checks performed
BloodTest = intvar(0, 999999999)  # Number of blood tests conducted

# Constraints
m = Model()

# Total staff minutes available is 22000:
m += 2 * TemperatureCheck + 10 * BloodTest <= 22000
# At least 45 blood tests must be conducted:
m += BloodTest >= 45
# Temperature check should be performed at least 5 times as many as the blood test:
m += TemperatureCheck >= 5 * BloodTest

# Objective
# Maximize the number of patients seen (sum of temperature checks and blood tests):
m.maximize(TemperatureCheck + BloodTest)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.
Decision Variables:
- Number of wide pipes used: WidePipes
- Number of narrow pipes used: NarrowPipes

Constraints:
- Total water transported by wide pipes and narrow pipes should be at least 900 units per minute:
  25 * WidePipes + 15 * NarrowPipes >= 900
- Number of wide pipes used must be at least 5:
  WidePipes >= 5
- Number of wide pipes used can be at most a third of the number of narrow pipes:
  WidePipes <= (1/3) * NarrowPipes

Objective:
- Minimize the total number of pipes required:
  WidePipes + NarrowPipes
```python

from cpmpy import Model, intvar

# Decision Variables
WidePipes = intvar(5, 999999999)  # Number of wide pipes used
NarrowPipes = intvar(0, 999999999)  # Number of narrow pipes used

# Constraints
m = Model()

# Total water transported should be at least 900 units per minute:
m += 25 * WidePipes + 15 * NarrowPipes >= 900
# Number of wide pipes used must be at least 5:
m += WidePipes >= 5
# Number of wide pipes used can be at most a third of the number of narrow pipes:
m += WidePipes <= (1/3) * NarrowPipes

# Objective
# Minimize the total number of pipes required:
m.minimize(WidePipes + NarrowPipes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?
Decision Variables:
- Number of carts used: Carts
- Number of trolleys used: Trolleys

Constraints:
- Total transportation rate constraint (5 kg/min per cart, 7 kg/min per trolley, total rate required is 100 kg/min):
  5 * Carts + 7 * Trolleys = 100
- Worker constraint (2 workers per cart, 4 workers per trolley):
  2 * Carts + 4 * Trolleys = Total number of workers
- At least 12 trolleys must be used:
  Trolleys >= 12
- Maximum 40% of transportation using trolleys:
  Trolleys <= 0.4 * (Carts + Trolleys)

Objective:
- Minimize total number of workers:
  Total number of workers
```python

from cpmpy import Model, intvar

# Decision Variables
Carts = intvar(0, 999999999)  # Number of carts used
Trolleys = intvar(0, 999999999)  # Number of trolleys used

# Constraints
m = Model()

# Total transportation rate constraint (5 kg/min per cart, 7 kg/min per trolley, total rate required is 100 kg/min):
m += 5 * Carts + 7 * Trolleys == 100
# Worker constraint (2 workers per cart, 4 workers per trolley):
m += 2 * Carts + 4 * Trolleys == Carts + Trolleys
# At least 12 trolleys must be used:
m += Trolleys >= 12
# Maximum 40% of transportation using trolleys:
m += Trolleys <= 0.4 * (Carts + Trolleys)

# Objective
# Minimize total number of workers:
m.minimize(Carts + Trolleys)

```
False
False
Wrong: 2, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?
Decision Variables:
- Number of bags of subsoil to be bought: Subsoil
- Number of bags of topsoil to be bought: Topsoil

Constraints:
- Total number of bags should not exceed 150:
  Subsoil + Topsoil <= 150
- At least 10 bags of topsoil must be used:
  Topsoil >= 10
- At most 30% of all bags can be topsoil:
  Topsoil <= 0.3 * (Subsoil + Topsoil)

Objective:
- Minimize total amount of water required to hydrate the garden bed (10 units per bag of subsoil, 6 units per bag of topsoil):
  10 * Subsoil + 6 * Topsoil
```python

from cpmpy import Model, intvar

# Decision Variables
Subsoil = intvar(0, 150)  # Number of bags of subsoil to be bought
Topsoil = intvar(0, 150)  # Number of bags of topsoil to be bought

# Constraints
m = Model()

# Total number of bags should not exceed 150:
m += Subsoil + Topsoil <= 150
# At least 10 bags of topsoil must be used:
m += Topsoil >= 10
# At most 30% of all bags can be topsoil:
m += Topsoil <= 0.3 * (Subsoil + Topsoil)

# Objective
# Minimize total amount of water required to hydrate the garden bed (10 units per bag of subsoil, 6 units per bag of topsoil):
m.minimize(10 * Subsoil + 6 * Topsoil)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute.  The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?

Decision Variables:
- Number of densely-seated ski lifts: DenselySeated
- Number of loosely-seated ski lifts: LooselySeated

Constraints:
- Total number of guests transported per minute should be at least 1000:
  45 * DenselySeated + 20 * LooselySeated >= 1000
- Electricity usage should not exceed 940 units:
  30 * DenselySeated + 22 * LooselySeated <= 940
- At least 5 loosely-seated ski lifts must be installed:
  LooselySeated >= 5

Objective:
- Minimize the total number of ski lifts needed:
  DenselySeated + LooselySeated
```python

from cpmpy import Model, intvar

# Decision Variables
DenselySeated = intvar(0, 999999999)  # Number of densely-seated ski lifts
LooselySeated = intvar(0, 999999999)  # Number of loosely-seated ski lifts

# Constraints
m = Model()

# The ski resort needs at least 1000 guests every minute:
m += 45 * DenselySeated + 20 * LooselySeated >= 1000
# The electricity usage should not exceed 940 units:
m += 30 * DenselySeated + 22 * LooselySeated <= 940
# At least 5 loosely-seated ski lifts must be installed:
m += LooselySeated >= 5

# Objective
# Minimize the total number of ski lifts needed:
m.minimize(DenselySeated + LooselySeated)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A strata-management company is looking into purchasing two types of air conditioners, a low-power and a high-power model. A low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity every day. A high-power model can cool down 17 housing units and uses 250 units of electricity every day. Since the low-powered model is not good for the aesthetics, the strata decided to limit the number of low-powered models to only 30% and at least 7 high-powered models must be used. If the apartment needs to condition at least 250 housing units and has 3400 units of electricity available, how many of each air conditioner should the strata company buy to minimize the total number of air conditioners?
Decision Variables:
- Number of low-power air conditioners purchased: LowPowerAC
- Number of high-power air conditioners purchased: HighPowerAC

Constraints:
- Total number of housing units cooled by low-power ACs should not exceed 30% of the total:
  12 * LowPowerAC <= 0.3 * (12 * LowPowerAC + 17 * HighPowerAC)
- At least 7 high-power air conditioners must be used:
  HighPowerAC >= 7
- Total number of housing units cooled by the air conditioners should be at least 250:
  12 * LowPowerAC + 17 * HighPowerAC >= 250
- Total units of electricity used should not exceed 3400:
  150 * LowPowerAC + 250 * HighPowerAC <= 3400

Objective:
- Minimize the total number of air conditioners purchased:
  LowPowerAC + HighPowerAC
```python

from cpmpy import Model, intvar

# Decision Variables
LowPowerAC = intvar(0, 999999999)  # Number of low-power air conditioners purchased
HighPowerAC = intvar(0, 999999999)  # Number of high-power air conditioners purchased

# Constraints
m = Model()

# Limit the number of low-power models to 30% of the total:
m += 12 * LowPowerAC <= 0.3 * (12 * LowPowerAC + 17 * HighPowerAC)
# At least 7 high-power models must be used:
m += HighPowerAC >= 7
# Total number of housing units cooled by the air conditioners should be at least 250:
m += 12 * LowPowerAC + 17 * HighPowerAC >= 250
# Total units of electricity used should not exceed 3400:
m += 150 * LowPowerAC + 250 * HighPowerAC <= 3400

# Objective
# Minimize the total number of air conditioners purchased:
m.minimize(LowPowerAC + HighPowerAC)

```
True
True
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?
Decision Variables:
- Number of calcium pills: CalciumPills
- Number of vitamin D pills: VitaminDPills

Constraints:
- Total number of pills taken should be at least 130:
  CalciumPills + VitaminDPills >= 130
- At least 40 pills should be vitamin D pills:
  VitaminDPills >= 40
- The student must take more calcium pills than vitamin D pills:
  CalciumPills > VitaminDPills

Objective:
- Minimize the total time for medication to be effective (5 minutes per calcium pill, 6 minutes per vitamin D pill):
  5 * CalciumPills + 6 * VitaminDPills
```python

from cpmpy import Model, intvar

# Decision Variables
CalciumPills = intvar(0, 999999999)  # Number of calcium pills
VitaminDPills = intvar(0, 999999999)  # Number of vitamin D pills

# Constraints
m = Model()

# Total number of pills taken should be at least 130:
m += CalciumPills + VitaminDPills >= 130
# At least 40 pills should be vitamin D pills:
m += VitaminDPills >= 40
# The student must take more calcium pills than vitamin D pills:
m += CalciumPills > VitaminDPills

# Objective
# Minimize the total time for medication to be effective (5 minutes per calcium pill, 6 minutes per vitamin D pill):
m.minimize(5 * CalciumPills + 6 * VitaminDPills)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park $2 in prizes per hour whereas climbing games cost $3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.
Decision Variables:
- Number of throwing games: ThrowingGames
- Number of climbing games: ClimbingGames

Constraints:
- Total cost of prizes should not exceed $100:
  2 * ThrowingGames + 3 * ClimbingGames <= 100
- At least 5 climbing games:
  ClimbingGames >= 5
- At least twice as many throwing games as climbing games:
  ThrowingGames >= 2 * ClimbingGames

Objective:
- Maximize total number of customers attracted every hour (15 customers per throwing game, 8 customers per climbing game):
  15 * ThrowingGames + 8 * ClimbingGames
```python

from cpmpy import Model, intvar

# Decision Variables
ThrowingGames = intvar(0, 999999999)  # Number of throwing games
ClimbingGames = intvar(0, 999999999)  # Number of climbing games

# Constraints
m = Model()

# Total cost of prizes should not exceed $100:
m += 2 * ThrowingGames + 3 * ClimbingGames <= 100
# At least 5 climbing games:
m += ClimbingGames >= 5
# At least twice as many throwing games as climbing games:
m += ThrowingGames >= 2 * ClimbingGames

# Objective
# Maximize total number of customers attracted every hour (15 customers per throwing game, 8 customers per climbing game):
m.maximize(15 * ThrowingGames + 8 * ClimbingGames)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

In a science fair, there are two types of tables that can be used to display the children’s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?
Decision Variables:
- Number of circular tables set up: CircularTables
- Number of rectangular tables set up: RectangularTables

Constraints:
- Total number of participants catered by circular tables and rectangular tables should be at least 500:
  5 * CircularTables + 4 * RectangularTables >= 500
- Total number of poster boards catered by circular tables and rectangular tables should be at least 300:
  4 * CircularTables + 4 * RectangularTables >= 300
- Total units of space used by circular tables and rectangular tables should not exceed 1900 units:
  15 * CircularTables + 20 * RectangularTables <= 1900

Objective:
- Maximize the number of catered guests (8 guests per circular table, 12 guests per rectangular table):
  8 * CircularTables + 12 * RectangularTables
```python

from cpmpy import Model, intvar

# Decision Variables
CircularTables = intvar(0, 999999999)  # Number of circular tables set up
RectangularTables = intvar(0, 999999999)  # Number of rectangular tables set up

# Constraints
m = Model()

# Total number of participants catered by circular tables and rectangular tables should be at least 500:
m += 5 * CircularTables + 4 * RectangularTables >= 500
# Total number of poster boards catered by circular tables and rectangular tables should be at least 300:
m += 4 * CircularTables + 4 * RectangularTables >= 300
# Total units of space used by circular tables and rectangular tables should not exceed 1900 units:
m += 15 * CircularTables + 20 * RectangularTables <= 1900

# Objective
# Maximize the number of catered guests (8 guests per circular table, 12 guests per rectangular table):
m.maximize(8 * CircularTables + 12 * RectangularTables)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?
Decision Variables:
- Number of high-volume pipes used: HighVolume
- Number of low-volume pipes used: LowVolume

Constraints:
- Total gas demand should be met (10000 gallons per high-volume pipe, 5000 gallons per low-volume pipe):
  10000 * HighVolume + 5000 * LowVolume >= 150000
- Total number of technicians available should be sufficient (12 technicians per high-volume pipe, 5 technicians per low-volume pipe):
  12 * HighVolume + 5 * LowVolume <= 160
- At most 35% of the pipes can be high-volume:
  HighVolume <= 0.35 * (HighVolume + LowVolume)
- At least 8 low-volume pipes:
  LowVolume >= 8

Objective:
- Minimize the total number of pipes required:
  HighVolume + LowVolume
```python

from cpmpy import Model, intvar

# Decision Variables
HighVolume = intvar(0, 999999999)  # Number of high-volume pipes used
LowVolume = intvar(0, 999999999)  # Number of low-volume pipes used

# Constraints
m = Model()

# Total gas demand should be met:
m += 10000 * HighVolume + 5000 * LowVolume >= 150000
# Total number of technicians available should be sufficient:
m += 12 * HighVolume + 5 * LowVolume <= 160
# At most 35% of the pipes can be high-volume:
m += HighVolume <= 0.35 * (HighVolume + LowVolume)
# At least 8 low-volume pipes:
m += LowVolume >= 8

# Objective
# Minimize the total number of pipes required:
m.minimize(HighVolume + LowVolume)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital hires ultrasound technicians and graduate researchers to image patients. An ultrasound technician works 8 hours per shift while a graduate researcher works 5 hours per shift. Ultrasound technicians are paid $300 per shift while graduate researchers are paid $100 per shift. However, due to regulations, there must be twice as many ultrasound technician shifts than graduate researcher shifts. Currently, the hospital needs 500 hours of ultrasound services to meet needs. If the hospital has a budget of $14000, how many of each worker certified to use the ultrasound should be scheduled to reduce the total number of workers?
Decision Variables:
- Number of ultrasound technician shifts: UltrasoundTechnicianShifts
- Number of graduate researcher shifts: GraduateResearcherShifts

Constraints:
- Total number of hours worked by ultrasound technicians should be 500 hours:
  8 * UltrasoundTechnicianShifts = 500
- Ultrasound technician shifts should be twice as many as graduate researcher shifts:
  UltrasoundTechnicianShifts = 2 * GraduateResearcherShifts
- Total cost should not exceed the budget of $14000 (Ultrasound technicians are paid $300 per shift and graduate researchers are paid $100 per shift):
  300 * UltrasoundTechnicianShifts + 100 * GraduateResearcherShifts <= 14000

Objective:
- Minimize the total number of workers:
  UltrasoundTechnicianShifts + GraduateResearcherShifts
```python

from cpmpy import Model, intvar

# Decision Variables
UltrasoundTechnicianShifts = intvar(0, 999999999)  # Number of ultrasound technician shifts
GraduateResearcherShifts = intvar(0, 999999999)  # Number of graduate researcher shifts

# Constraints
m = Model()

# Total number of hours worked by ultrasound technicians should be 500 hours:
m += 8 * UltrasoundTechnicianShifts == 500
# Ultrasound technician shifts should be twice as many as graduate researcher shifts:
m += UltrasoundTechnicianShifts == 2 * GraduateResearcherShifts
# Total cost should not exceed the budget of $14000 (Ultrasound technicians are paid $300 per shift and graduate researchers are paid $100 per shift):
m += 300 * UltrasoundTechnicianShifts + 100 * GraduateResearcherShifts <= 14000

# Objective
# Minimize the total number of workers:
m.minimize(UltrasoundTechnicianShifts + GraduateResearcherShifts)

```
True
True
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?
Decision Variables:
- Number of molars filled: Molars
- Number of canines filled: Canines

Constraints:
- Total resin used for molars and canines should not exceed 3000 units:
  20 * Molars + 15 * Canines <= 3000
- Total pain killer used for molars and canines should not exceed available amount:
  3 * Molars + 2.3 * Canines <= available_painkiller
- At least 60% of cavities filled must be in canines:
  Canines >= 0.6 * (Molars + Canines)
- At least 45 molars must be filled:
  Molars >= 45

Objective:
- Minimize the amount of pain killer needed:
  3 * Molars + 2.3 * Canines
```python

from cpmpy import Model, intvar

# Decision Variables
Molars = intvar(0, 999999999)  # Number of molars filled
Canines = intvar(0, 999999999)  # Number of canines filled

# Constraints
m = Model()

# Total resin constraint
m += 20 * Molars + 15 * Canines <= 3000

# Total pain killer constraint
m += 3 * Molars + 2.3 * Canines <= available_painkiller

# At least 60% of cavities filled must be in canines
m += Canines >= 0.6 * (Molars + Canines)

# At least 45 molars must be filled
m += Molars >= 45

# Objective
m.minimize(3 * Molars + 2.3 * Canines)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in $50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in $43 on tips.  The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?
Decision Variables:
- Number of shifts on bikes: BikeShifts
- Number of shifts on scooters: ScooterShifts

Constraints:
- Total number of shifts should not exceed 40:
  BikeShifts + ScooterShifts <= 40
- Total energy used should not exceed 230 units (5 units for a bike shift, 6 units for a scooter shift):
  5 * BikeShifts + 6 * ScooterShifts <= 230
- Total number of orders should be at least 320 (10 orders for a bike shift, 7 orders for a scooter shift):
  10 * BikeShifts + 7 * ScooterShifts >= 320
- Number of shifts on scooters should be at least 5:
  ScooterShifts >= 5

Objective:
- Maximize tips received ($50 per bike shift, $43 per scooter shift):
  50 * BikeShifts + 43 * ScooterShifts
```python

from cpmpy import Model, intvar

# Decision Variables
BikeShifts = intvar(0, 40)  # Number of shifts on bikes
ScooterShifts = intvar(0, 40)  # Number of shifts on scooters

# Constraints
m = Model()

# Total number of shifts should not exceed 40:
m += BikeShifts + ScooterShifts <= 40
# Total energy used should not exceed 230 units (5 units for a bike shift, 6 units for a scooter shift):
m += 5 * BikeShifts + 6 * ScooterShifts <= 230
# Total number of orders should be at least 320 (10 orders for a bike shift, 7 orders for a scooter shift):
m += 10 * BikeShifts + 7 * ScooterShifts >= 320
# Number of shifts on scooters should be at least 5:
m += ScooterShifts >= 5

# Objective
# Maximize tips received ($50 per bike shift, $43 per scooter shift):
m.maximize(50 * BikeShifts + 43 * ScooterShifts)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?
Decision Variables:
- Number of pop concerts: PopConcerts
- Number of R&B concerts: RBConcerts

Constraints:
- Total audience members should be at least 10000:
  100 * PopConcerts + 240 * RBConcerts >= 10000
- Total days for practice should not exceed 180:
  2 * PopConcerts + 4 * RBConcerts <= 180
- At most 40% of concerts can be R&B:
  RBConcerts <= 0.40 * (PopConcerts + RBConcerts)

Objective:
- Minimize the total number of concerts:
  PopConcerts + RBConcerts
```python

from cpmpy import Model, intvar

# Decision Variables
PopConcerts = intvar(0, 999999999)  # Number of pop concerts
RBConcerts = intvar(0, 999999999)  # Number of R&B concerts

# Constraints
m = Model()

# Total audience members should be at least 10000:
m += 100 * PopConcerts + 240 * RBConcerts >= 10000
# Total days for practice should not exceed 180:
m += 2 * PopConcerts + 4 * RBConcerts <= 180
# At most 40% of concerts can be R&B:
m += RBConcerts <= 0.40 * (PopConcerts + RBConcerts)

# Objective
# Minimize the total number of concerts:
m.minimize(PopConcerts + RBConcerts)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?
Decision Variables:
- Number of large pizzas made: LargePizzas
- Number of medium pizzas made: MediumPizzas

Constraints:
- Total dough used should be at least 10000 units:
  12 * LargePizzas + 8 * MediumPizzas >= 10000
- Total toppings used should be at least 4400 units:
  5 * LargePizzas + 4 * MediumPizzas >= 4400
- At least 200 medium pizzas must be made:
  MediumPizzas >= 200
- At least two times as many large pizzas should be made than medium pizzas:
  LargePizzas >= 2 * MediumPizzas

Objective:
- Minimize total baking time (12 minutes per large pizza, 8 minutes per medium pizza):
  12 * LargePizzas + 8 * MediumPizzas
```python

from cpmpy import Model, intvar

# Decision Variables
LargePizzas = intvar(0, 999999999)  # Number of large pizzas made
MediumPizzas = intvar(0, 999999999)  # Number of medium pizzas made

# Constraints
m = Model()

# Total dough used should be at least 10000 units:
m += 12 * LargePizzas + 8 * MediumPizzas >= 10000
# Total toppings used should be at least 4400 units:
m += 5 * LargePizzas + 4 * MediumPizzas >= 4400
# At least 200 medium pizzas must be made:
m += MediumPizzas >= 200
# At least two times as many large pizzas should be made than medium pizzas:
m += LargePizzas >= 2 * MediumPizzas

# Objective
# Minimize total baking time (12 minutes per large pizza, 8 minutes per medium pizza):
m.minimize(12 * LargePizzas + 8 * MediumPizzas)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?
Decision Variables:
- Number of limousines used: Limousines
- Number of buses used: Buses

Constraints:
- Total number of people transported should be at least 400:
  12 * Limousines + 18 * Buses >= 400
- At least 70% of the vehicles must be limousines:
  Limousines >= 0.7 * (Limousines + Buses)

Objective:
- Minimize the total number of vehicles used (limousines and buses):
  Limousines + Buses
```python

from cpmpy import Model, intvar

# Decision Variables
Limousines = intvar(0, 999999999)  # Number of limousines used
Buses = intvar(0, 999999999)  # Number of buses used

# Constraints
m = Model()

# Total number of people transported should be at least 400:
m += 12 * Limousines + 18 * Buses >= 400
# At least 70% of the vehicles must be limousines:
m += Limousines >= 0.7 * (Limousines + Buses)

# Objective
# Minimize the total number of vehicles used (limousines and buses):
m.minimize(Limousines + Buses)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.
Decision Variables:
- Number of prevention pills purchased: PreventionPills
- Number of treatment pills purchased: TreatmentPills

Constraints:
- Total cost of purchasing pills should not exceed the budget of 10000 dollars:
  15 * PreventionPills + 25 * TreatmentPills <= 10000
- At least two times as many prevention pills must be purchased as treatment pills:
  PreventionPills >= 2 * TreatmentPills
- At least 50 treatment pills must be purchased:
  TreatmentPills >= 50

Objective:
- Maximize the number of patients that can be treated (each patient requires one prevention pill and one treatment pill):
  min(PreventionPills, TreatmentPills)
```python

from cpmpy import Model, intvar

# Decision Variables
PreventionPills = intvar(0, 999999999)  # Number of prevention pills purchased
TreatmentPills = intvar(0, 999999999)  # Number of treatment pills purchased

# Constraints
m = Model()

# Total cost of purchasing pills should not exceed the budget of 10000 dollars:
m += 15 * PreventionPills + 25 * TreatmentPills <= 10000
# At least two times as many prevention pills must be purchased as treatment pills:
m += PreventionPills >= 2 * TreatmentPills
# At least 50 treatment pills must be purchased:
m += TreatmentPills >= 50

# Objective
# Maximize the number of patients that can be treated (each patient requires one prevention pill and one treatment pill):
m.minimize(min(PreventionPills, TreatmentPills))

```
Error: invalid syntax (<string>, line 1)
False
Wrong: 0, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?
Decision Variables:
- Number of servers delivering by cart: CartServers
- Number of servers delivering by hand: HandServers

Constraints:
- Total customer interactions should be 4000 per hour:
  70 * CartServers + 85 * HandServers = 4000
- At least 70% of delivery shifts must be by cart:
  CartServers >= 0.7 * (CartServers + HandServers)
- At least 3 servers delivering by hand:
  HandServers >= 3
- Number of refills for cart servers:
  5 * CartServers <= TotalRefills
- Number of refills for hand servers:
  20 * HandServers <= TotalRefills

Objective:
- Minimize the total number of refills per hour:
  TotalRefills
```python

from cpmpy import Model, intvar

# Decision Variables
CartServers = intvar(0, 999999999)  # Number of servers delivering by cart
HandServers = intvar(0, 999999999)  # Number of servers delivering by hand
TotalRefills = intvar(0, 999999999)  # Total number of refills per hour

# Constraints
m = Model()

# Total customer interactions should be 4000 per hour:
m += 70 * CartServers + 85 * HandServers == 4000
# At least 70% of delivery shifts must be by cart:
m += CartServers >= 0.7 * (CartServers + HandServers)
# At least 3 servers delivering by hand:
m += HandServers >= 3
# Number of refills for cart servers:
m += 5 * CartServers <= TotalRefills
# Number of refills for hand servers:
m += 20 * HandServers <= TotalRefills

# Objective
# Minimize the total number of refills per hour:
m.minimize(TotalRefills)

```
False
False
Wrong: 3, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?
Decision Variables:
- Number of bowls of salmon: SalmonBowls
- Number of bowls of eggs: EggBowls

Constraints:
- Calorie requirement (at least 2000 calories):
  300 * SalmonBowls + 200 * EggBowls >= 2000
- Protein requirement (at least 90 grams):
  15 * SalmonBowls + 8 * EggBowls >= 90
- Sodium limit (at most 80 mg from salmon, 20 mg from eggs):
  80 * SalmonBowls + 20 * EggBowls

Additional Constraint:
- At most 40% of meals can be eggs:
  EggBowls <= 0.4 * (SalmonBowls + EggBowls)

Objective:
- Minimize sodium intake (80 mg from salmon, 20 mg from eggs):
  80 * SalmonBowls + 20 * EggBowls
```python

from cpmpy import Model, intvar

# Decision Variables
SalmonBowls = intvar(0, 999999999)  # Number of bowls of salmon
EggBowls = intvar(0, 999999999)  # Number of bowls of eggs

# Constraints
m = Model()

# Calorie requirement (at least 2000 calories):
m += 300 * SalmonBowls + 200 * EggBowls >= 2000
# Protein requirement (at least 90 grams):
m += 15 * SalmonBowls + 8 * EggBowls >= 90
# Sodium limit (at most 80 mg from salmon, 20 mg from eggs):
m += 80 * SalmonBowls + 20 * EggBowls

# Additional Constraint: At most 40% of meals can be eggs
m += EggBowls <= 0.4 * (SalmonBowls + EggBowls)

# Objective
# Minimize sodium intake (80 mg from salmon, 20 mg from eggs):
m.minimize(80 * SalmonBowls + 20 * EggBowls)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?
Decision Variables:
- Number of original meals sold: OriginalMeals
- Number of experimental meals sold: ExperimentalMeals

Constraints:
- Total food waste should not exceed 800 units:
  20 * OriginalMeals + 25 * ExperimentalMeals <= 800
- Total wrapping waste should not exceed 900 units:
  45 * OriginalMeals + 35 * ExperimentalMeals <= 900

Objective:
- Minimize cooking time (10 minutes for original meal, 15 minutes for experimental meal):
  10 * OriginalMeals + 15 * ExperimentalMeals
```python

from cpmpy import Model, intvar

# Decision Variables
OriginalMeals = intvar(0, 999999999)  # Number of original meals sold
ExperimentalMeals = intvar(0, 999999999)  # Number of experimental meals sold

# Constraints
m = Model()

# Total food waste should not exceed 800 units:
# (20 units for original meal, 25 units for experimental meal)
m += 20 * OriginalMeals + 25 * ExperimentalMeals <= 800

# Total wrapping waste should not exceed 900 units:
# (45 units for original meal, 35 units for experimental meal)
m += 45 * OriginalMeals + 35 * ExperimentalMeals <= 900

# Objective
# Minimize cooking time (10 minutes for original meal, 15 minutes for experimental meal):
m.minimize(10 * OriginalMeals + 15 * ExperimentalMeals)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day.  The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?
Decision Variables:
- Number of chop saws purchased: ChopSaws
- Number of steel cutters purchased: SteelCutters

Constraints:
- Total pounds of steel cut by chop saws and steel cutters should be at least 520 pounds per day:
  25 * ChopSaws + 5 * SteelCutters >= 520
- Total units of waste generated by chop saws and steel cutters should not exceed 400 units per day:
  25 * ChopSaws + 3 * SteelCutters <= 400

Objective:
- Minimize the total number of metal-working equipment needed:
  ChopSaws + SteelCutters
```python

from cpmpy import Model, intvar

# Decision Variables
ChopSaws = intvar(0, 999999999)  # Number of chop saws purchased
SteelCutters = intvar(0, 999999999)  # Number of steel cutters purchased

# Constraints
m = Model()

# Total pounds of steel cut constraint (at least 520 pounds per day):
m += 25 * ChopSaws + 5 * SteelCutters >= 520
# Total units of waste generated constraint (not exceed 400 units per day):
m += 25 * ChopSaws + 3 * SteelCutters <= 400

# Objective
# Minimize the total number of metal-working equipment needed:
m.minimize(ChopSaws + SteelCutters)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?
Decision Variables:
- Number of large cruise ship trips: LargeTrips
- Number of small cruise ship trips: SmallTrips

Constraints:
- Total number of customers transported should be at least 20000:
  2000 * LargeTrips + 800 * SmallTrips >= 20000
- At most 7 large cruise ship trips:
  LargeTrips <= 7
- At least 40% of the total trips should be made by small cruise ships:
  SmallTrips >= 0.4 * (LargeTrips + SmallTrips)

Objective:
- Minimize total pollution produced (20 units per large cruise ship trip, 15 units per small cruise ship trip):
  20 * LargeTrips + 15 * SmallTrips
```python

from cpmpy import Model, intvar

# Decision Variables
LargeTrips = intvar(0, 999999999)  # Number of large cruise ship trips
SmallTrips = intvar(0, 999999999)  # Number of small cruise ship trips

# Constraints
m = Model()

# Total number of customers transported should be at least 20000:
m += 2000 * LargeTrips + 800 * SmallTrips >= 20000
# At most 7 large cruise ship trips:
m += LargeTrips <= 7
# At least 40% of the total trips should be made by small cruise ships:
m += SmallTrips >= 0.4 * (LargeTrips + SmallTrips)

# Objective
# Minimize total pollution produced (20 units per large cruise ship trip, 15 units per small cruise ship trip):
m.minimize(20 * LargeTrips + 15 * SmallTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?
Decision Variables:
- Number of LED fixtures installed: LED
- Number of fluorescence lamp fixtures installed: Fluorescence

Constraints:
- Total number of light fixtures installed should be at least 300:
  LED + Fluorescence >= 300
- Total units of electricity used by all fixtures should be at most 2000:
  5 * LED + 8 * Fluorescence <= 2000
- At least 30% of the installed lights must be fluorescence lamps:
  Fluorescence >= 0.3 * (LED + Fluorescence)

Objective:
- Minimize the total number of light changes (3 changes per decade for LED, 4 changes per decade for fluorescence):
  3 * LED + 4 * Fluorescence
```python

from cpmpy import Model, intvar

# Decision Variables
LED = intvar(0, 999999999)  # Number of LED fixtures installed
Fluorescence = intvar(0, 999999999)  # Number of fluorescence lamp fixtures installed

# Constraints
m = Model()

# Total number of light fixtures installed should be at least 300:
m += LED + Fluorescence >= 300

# Total units of electricity used by all fixtures should be at most 2000:
m += 5 * LED + 8 * Fluorescence <= 2000

# At least 30% of the installed lights must be fluorescence lamps:
m += Fluorescence >= 0.3 * (LED + Fluorescence)

# Objective
# Minimize the total number of light changes (3 changes per decade for LED, 4 changes per decade for fluorescence):
m.minimize(3 * LED + 4 * Fluorescence)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A market owner wants to start a jam business. He can either sell one unit of jam to customers in a set of small packets or jugs. A set of small packets can hold 1000 ml of jam while a jug can hold 1250 ml of jam. Since a set of small packets are more expensive to make, at least three times as many jugs must be used than sets of small packets. On the other hand, at least 35 sets of small packets should be filled. If the market owner has 65000 ml of jam, how many sets of small packets or jugs should be selected to maximize the total number of units that he can sell to his customers?
Decision Variables:
- Number of sets of small packets: SmallPackets
- Number of jugs: Jugs

Constraints:
- Total amount of jam available is 65000 ml:
  1000 * SmallPackets + 1250 * Jugs <= 65000
- At least 35 sets of small packets should be filled:
  SmallPackets >= 35
- At least three times as many jugs must be used than sets of small packets:
  Jugs >= 3 * SmallPackets

Objective:
- Maximize the total number of units that can be sold to customers:
  SmallPackets + Jugs
```python

from cpmpy import Model, intvar

# Decision Variables
SmallPackets = intvar(0, 999999999)  # Number of sets of small packets
Jugs = intvar(0, 999999999)  # Number of jugs

# Constraints
m = Model()

# Total amount of jam available is 65000 ml:
m += 1000 * SmallPackets + 1250 * Jugs <= 65000
# At least 35 sets of small packets should be filled:
m += SmallPackets >= 35
# At least three times as many jugs must be used than sets of small packets:
m += Jugs >= 3 * SmallPackets

# Objective
# Maximize the total number of units that can be sold to customers:
m.maximize(SmallPackets + Jugs)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A navy ship is stocking food onto their submarine and their staff can eat either a salad or fruit bowl for their fibre and vitamin intake. The nutritionist in charge of this voyage needs to ensure that their staff gets at least 90 units of vitamin and 110 units of fibre each. Each salad contains 7 units of vitamins and 12 units of fibre. Each fruit bowl contains 15 units of vitamin and 3 units of fibre. In addition, since fruit bowls take longer to prepare, at most 30% of their meals should be fruit bowls. If each salad contains 2 units of potassium and each fruit bowl contains 8 units of potassium, how many of each should they prepare for each staff to maximize their potassium intake?
Decision Variables:
- Number of salads prepared: Salads
- Number of fruit bowls prepared: FruitBowls

Constraints:
- Vitamin intake requirement (at least 90 units):
  7 * Salads + 15 * FruitBowls >= 90
- Fibre intake requirement (at least 110 units):
  12 * Salads + 3 * FruitBowls >= 110
- Fruit bowl proportion constraint (at most 30% of total meals):
  FruitBowls <= 0.3 * (Salads + FruitBowls)

Objective:
- Maximize potassium intake (2 units per salad, 8 units per fruit bowl):
  2 * Salads + 8 * FruitBowls
```python

from cpmpy import Model, intvar

# Decision Variables
Salads = intvar(0, 999999999)  # Number of salads prepared
FruitBowls = intvar(0, 999999999)  # Number of fruit bowls prepared

# Constraints
m = Model()

# Vitamin intake requirement (at least 90 units):
m += 7 * Salads + 15 * FruitBowls >= 90
# Fibre intake requirement (at least 110 units):
m += 12 * Salads + 3 * FruitBowls >= 110
# Fruit bowl proportion constraint (at most 30% of total meals):
m += FruitBowls <= 0.3 * (Salads + FruitBowls)

# Objective
# Maximize potassium intake (2 units per salad, 8 units per fruit bowl):
m.maximize(2 * Salads + 8 * FruitBowls)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?
Decision Variables:
- Number of retail stores open: RetailStores
- Number of factory outlets open: FactoryOutlets

Constraints:
- Total number of customers must be at least 1200 every day:
  200 * RetailStores + 80 * FactoryOutlets >= 1200
- Total number of employees available is 50:
  6 * RetailStores + 4 * FactoryOutlets <= 50

Objective:
- Minimize the total number of stores open:
  RetailStores + FactoryOutlets
```python

from cpmpy import Model, intvar

# Decision Variables
RetailStores = intvar(0, 999999999)  # Number of retail stores open
FactoryOutlets = intvar(0, 999999999)  # Number of factory outlets open

# Constraints
m = Model()

# Total number of customers must be at least 1200 every day:
m += 200 * RetailStores + 80 * FactoryOutlets >= 1200
# Total number of employees available is 50:
m += 6 * RetailStores + 4 * FactoryOutlets <= 50

# Objective
# Minimize the total number of stores open:
m.minimize(RetailStores + FactoryOutlets)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A soda company sells soda in two types of containers: cans and glass bottles. A can holds 250 ml of soda whereas a bottle holds 1000 ml of soda. The soda company needs to bottle at least 1000000 ml of soda every day and due to the ability to sell soda cans as packs, there must be at least three times more cans than glass bottles. However, because of previous contracts with gas stations, there must be at least 100 glass bottles made. How many of each should be made to maximize the total number of units produced?
Decision Variables:
- Number of cans produced: Cans
- Number of glass bottles produced: Bottles

Constraints:
- Total soda bottled must be at least 1000000 ml:
  250 * Cans + 1000 * Bottles >= 1000000
- At least three times more cans than glass bottles:
  Cans >= 3 * Bottles
- At least 100 glass bottles must be made:
  Bottles >= 100

Objective:
- Maximize total number of units produced:
  Cans + Bottles
```python

from cpmpy import Model, intvar

# Decision Variables
Cans = intvar(0, 999999999)  # Number of cans produced
Bottles = intvar(0, 999999999)  # Number of glass bottles produced

# Constraints
m = Model()

# Total soda bottled must be at least 1000000 ml:
m += 250 * Cans + 1000 * Bottles >= 1000000
# At least three times more cans than glass bottles:
m += Cans >= 3 * Bottles
# At least 100 glass bottles must be made:
m += Bottles >= 100

# Objective
# Maximize total number of units produced:
m.maximize(Cans + Bottles)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is $300 while the cost over air for each trip is $550. The company needs to transport at least 200 tons of candles and they have a budget of $20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?
Decision Variables:
- Number of freight trips: FreightTrips
- Number of air trips: AirTrips

Constraints:
- Total tons of candles transported should be at least 200 tons:
  5 * FreightTrips + 3 * AirTrips >= 200
- Total cost should not exceed the budget of $20000 (cost per freight trip is $300, cost per air trip is $550):
  300 * FreightTrips + 550 * AirTrips <= 20000
- At least 30% of tons of candles must be transported through air:
  3 * AirTrips >= 0.3 * (5 * FreightTrips + 3 * AirTrips)
- At least 5 trips through freight:
  FreightTrips >= 5

Objective:
- Minimize the total number of trips:
  FreightTrips + AirTrips
```python

from cpmpy import Model, intvar

# Decision Variables
FreightTrips = intvar(5, 999999999)  # Number of freight trips, at least 5 trips
AirTrips = intvar(0, 999999999)  # Number of air trips

# Constraints
m = Model()

# Total tons of candles transported should be at least 200 tons:
m += 5 * FreightTrips + 3 * AirTrips >= 200
# Total cost should not exceed the budget of $20000:
m += 300 * FreightTrips + 550 * AirTrips <= 20000
# At least 30% of tons of candles must be transported through air:
m += 3 * AirTrips >= 0.3 * (5 * FreightTrips + 3 * AirTrips)
# At least 5 trips through freight:
m += FreightTrips >= 5

# Objective
# Minimize the total number of trips:
m.minimize(FreightTrips + AirTrips)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.

Decision Variables:
- Number of large mobile production units used: LargeUnits
- Number of small mobile production units used: SmallUnits

Constraints:
- Total number of people transported should be 80:
  6 * LargeUnits + 2 * SmallUnits = 80
- At least 5 units must be small mobile units:
  SmallUnits >= 5
- Large mobile production units must make up at least 75% of all vehicles:
  LargeUnits >= 0.75 * (LargeUnits + SmallUnits)

Objective:
- Minimize the total number of parking spots required:
  LargeUnits * 2 + SmallUnits * 1
```python

from cpmpy import Model, intvar

# Decision Variables
LargeUnits = intvar(0, 999999999)  # Number of large mobile production units used
SmallUnits = intvar(0, 999999999)  # Number of small mobile production units used

# Constraints
m = Model()

# Total number of people transported should be 80:
m += 6 * LargeUnits + 2 * SmallUnits == 80

# At least 5 units must be small mobile units:
m += SmallUnits >= 5

# Large mobile production units must make up at least 75% of all vehicles:
m += LargeUnits >= 0.75 * (LargeUnits + SmallUnits)

# Objective
# Minimize the total number of parking spots required:
m.minimize(LargeUnits * 2 + SmallUnits * 1)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?
Decision Variables:
- Number of small boxes used: SmallBoxes
- Number of large boxes used: LargeBoxes

Constraints:
- Total number of masks distributed should be at least 750:
  25 * SmallBoxes + 45 * LargeBoxes >= 750
- There must be at least three times as many small boxes as large boxes:
  SmallBoxes >= 3 * LargeBoxes
- At least 5 large boxes must be used:
  LargeBoxes >= 5

Objective:
- Minimize the total number of boxes used:
  SmallBoxes + LargeBoxes
```python

from cpmpy import Model, intvar

# Decision Variables
SmallBoxes = intvar(0, 999999999)  # Number of small boxes used
LargeBoxes = intvar(0, 999999999)  # Number of large boxes used

# Constraints
m = Model()

# Total number of masks distributed should be at least 750:
m += 25 * SmallBoxes + 45 * LargeBoxes >= 750
# There must be at least three times as many small boxes as large boxes:
m += SmallBoxes >= 3 * LargeBoxes
# At least 5 large boxes must be used:
m += LargeBoxes >= 5

# Objective
# Minimize the total number of boxes used:
m.minimize(SmallBoxes + LargeBoxes)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Grain is transported from a farm to local grocery stores in either large bags or tiny bags. Large bags can hold 25 kg of grain and requires 4 units of energy to transport. Tiny bags can hold 6 kg of grain and requires 1.5 units of energy to transport. The distribution process has access to 110 units of energy. Because of popularity of buying in bulk, there must be twice as many large bags as tiny bags of rice. Additionally, there must be at least 20 tiny bags of rice. How many of each size of rice bags should be used to maximize the total amount of grain in weight?
Decision Variables:
- Number of large bags of grain: LargeBags
- Number of tiny bags of grain: TinyBags

Constraints:
- Energy constraint (110 units available):
  4 * LargeBags + 1.5 * TinyBags <= 110
- Large bags to tiny bags ratio constraint (twice as many large bags as tiny bags):
  LargeBags >= 2 * TinyBags
- Minimum number of tiny bags constraint (at least 20 tiny bags):
  TinyBags >= 20

Objective:
- Maximize total weight of grain transported:
  25 * LargeBags + 6 * TinyBags
```python

from cpmpy import Model, intvar

# Decision Variables
LargeBags = intvar(0, 999999999)  # Number of large bags of grain
TinyBags = intvar(0, 999999999)  # Number of tiny bags of grain

# Constraints
m = Model()

# Energy constraint (110 units available):
m += 4 * LargeBags + 1.5 * TinyBags <= 110
# Large bags to tiny bags ratio constraint (twice as many large bags as tiny bags):
m += LargeBags >= 2 * TinyBags
# Minimum number of tiny bags constraint (at least 20 tiny bags):
m += TinyBags >= 20

# Objective
# Maximize total weight of grain transported:
m.maximize(25 * LargeBags + 6 * TinyBags)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?
Decision Variables:
- Number of automatic electric car jacks purchased: ElectricJacks
- Number of gas-powered car jacks purchased: GasJacks

Constraints:
- Limit on the number of automatic electric car jacks:
  ElectricJacks <= 15
- Electricity usage constraint:
  6 * ElectricJacks + 7 * GasJacks <= 50
- Gas usage constraint:
  6 * ElectricJacks + 7 * GasJacks <= 80

Objective:
- Maximize the number of cars processed every hour (5 cars per hour for automatic electric jacks, 4 cars per hour for gas-powered jacks):
  5 * ElectricJacks + 4 * GasJacks
```python

from cpmpy import Model, intvar

# Decision Variables
ElectricJacks = intvar(0, 15)  # Number of automatic electric car jacks purchased
GasJacks = intvar(0, 999999999)  # Number of gas-powered car jacks purchased

# Constraints
m = Model()

# Limit on the number of automatic electric car jacks:
m += ElectricJacks <= 15
# Electricity usage constraint:
m += 6 * ElectricJacks + 7 * GasJacks <= 50
# Gas usage constraint:
m += 6 * ElectricJacks + 7 * GasJacks <= 80

# Objective
# Maximize the number of cars processed every hour (5 cars per hour for automatic electric jacks, 4 cars per hour for gas-powered jacks):
m.maximize(5 * ElectricJacks + 4 * GasJacks)

```
False
False
Wrong: 3, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.
Decision Variables:
- Number of trains: Trains
- Number of trams: Trams

Constraints:
- Total number of people transported should be at least 600 per hour:
  120 * Trains + 30 * Trams >= 600
- Number of trams must be at least twice the number of trains:
  Trams >= 2 * Trains

Objective:
- Minimize the total number of transportation units required (trains and trams):
  Trains + Trams
```python

from cpmpy import Model, intvar

# Decision Variables
Trains = intvar(0, 999999999)  # Number of trains
Trams = intvar(0, 999999999)  # Number of trams

# Constraints
m = Model()

# Total number of people transported should be at least 600 per hour:
m += 120 * Trains + 30 * Trams >= 600
# Number of trams must be at least twice the number of trains:
m += Trams >= 2 * Trains

# Objective
# Minimize the total number of transportation units required (trains and trams):
m.minimize(Trains + Trams)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?
Decision Variables:
- Number of palladium-heavy catalysts used: PalladiumHeavy
- Number of platinum-heavy catalysts used: PlatinumHeavy

Constraints:
- Total platinum used should not exceed 450 units:
  15 * PalladiumHeavy + 20 * PlatinumHeavy <= 450
- Total palladium used should not exceed 390 units:
  25 * PalladiumHeavy + 14 * PlatinumHeavy <= 390

Objective:
- Maximize the amount converted into carbon dioxide (5 units per second for palladium-heavy, 4 units per second for platinum-heavy):
  5 * PalladiumHeavy + 4 * PlatinumHeavy
```python

from cpmpy import Model, intvar

# Decision Variables
PalladiumHeavy = intvar(0, 999999999)  # Number of palladium-heavy catalysts used
PlatinumHeavy = intvar(0, 999999999)  # Number of platinum-heavy catalysts used

# Constraints
m = Model()

# Total platinum used should not exceed 450 units:
m += 15 * PalladiumHeavy + 20 * PlatinumHeavy <= 450
# Total palladium used should not exceed 390 units:
m += 25 * PalladiumHeavy + 14 * PlatinumHeavy <= 390

# Objective
# Maximize the amount converted into carbon dioxide (5 units per second for palladium-heavy, 4 units per second for platinum-heavy):
m.maximize(5 * PalladiumHeavy + 4 * PlatinumHeavy)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?
Decision Variables:
- Number of times process J is performed: ProcessJ
- Number of times process P is performed: ProcessP

Constraints:
- Water usage should not exceed 1500 units:
  8 * ProcessJ + 6 * ProcessP <= 1500
- Pollution produced should not exceed 1350 units:
  3 * ProcessJ + 5 * ProcessP <= 1350

Objective:
- Maximize metal extracted (5 units per process J, 9 units per process P):
  5 * ProcessJ + 9 * ProcessP
```python

from cpmpy import Model, intvar

# Decision Variables
ProcessJ = intvar(0, 999999999)  # Number of times process J is performed
ProcessP = intvar(0, 999999999)  # Number of times process P is performed

# Constraints
m = Model()

# Water usage should not exceed 1500 units:
m += 8 * ProcessJ + 6 * ProcessP <= 1500

# Pollution produced should not exceed 1350 units:
m += 3 * ProcessJ + 5 * ProcessP <= 1350

# Objective
# Maximize metal extracted (5 units per process J, 9 units per process P):
m.maximize(5 * ProcessJ + 9 * ProcessP)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?
Decision Variables:
- Number of escalators installed: Escalators
- Number of elevators installed: Elevators

Constraints:
- Total capacity should be at least 400 people per minute (escalators transport 20 people per minute, elevators transport 8 people per minute):
  20 * Escalators + 8 * Elevators >= 400
- At least 2 elevators must be used:
  Elevators >= 2
- At least three times more escalators than elevators:
  Escalators >= 3 * Elevators

Objective:
- Minimize the total units of space taken (escalators take up 5 units of space, elevators take up 2 units of space):
  5 * Escalators + 2 * Elevators
```python

from cpmpy import Model, intvar

# Decision Variables
Escalators = intvar(0, 999999999)  # Number of escalators installed
Elevators = intvar(0, 999999999)  # Number of elevators installed

# Constraints
m = Model()

# Total capacity should be at least 400 people per minute:
m += 20 * Escalators + 8 * Elevators >= 400
# At least 2 elevators must be used:
m += Elevators >= 2
# At least three times more escalators than elevators:
m += Escalators >= 3 * Elevators

# Objective
# Minimize the total units of space taken (escalators take up 5 units of space, elevators take up 2 units of space):
m.minimize(5 * Escalators + 2 * Elevators)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?
Decision Variables:
- Number of hours method A is executed: HoursA
- Number of hours method B is executed: HoursB

Constraints:
- Special element usage should not exceed 3500 units:
  60 * HoursA + 65 * HoursB <= 3500
- Fabric production should be at least 1400 units:
  25 * HoursA + 45 * HoursB >= 1400
- Plastic production should be at least 1000 units:
  14 * HoursA + 25 * HoursB >= 1000

Objective:
- Minimize total time needed (considering 1 hour per method execution):
  HoursA + HoursB
```python

from cpmpy import Model, intvar

# Decision Variables
HoursA = intvar(0, 999999999)  # Number of hours method A is executed
HoursB = intvar(0, 999999999)  # Number of hours method B is executed

# Constraints
m = Model()

# Special element usage should not exceed 3500 units:
m += 60 * HoursA + 65 * HoursB <= 3500
# Fabric production should be at least 1400 units:
m += 25 * HoursA + 45 * HoursB >= 1400
# Plastic production should be at least 1000 units:
m += 14 * HoursA + 25 * HoursB >= 1000

# Objective
# Minimize total time needed (considering 1 hour per method execution):
m.minimize(HoursA + HoursB)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A taxi company will purchase vehicles to rent to their drivers. They are interested in purchasing either motorcycles or sedans. A motorcycle can transport 30 people, produces 4 units of pollution, and earns the taxi company $100 per shift. A sedan can transport 70 people, produces 15 units of pollution and earns the company $225 per shift. Because not every customer is comfortable with a motorcycle, at most 25% of vehicles can be motorcycles. Additionally, the company has committed to producing less than 200 units of pollution. The company needs to transport at least 1200 people every shift. How many of each type of vehicle should be used to maximize the total earnings for the taxi company per shift?

Decision Variables:
- Number of motorcycles used: Motorcycles
- Number of sedans used: Sedans

Constraints:
- Total number of vehicles should not exceed 100%:
  Motorcycles + Sedans <= 1
- Total pollution produced should be less than 200 units:
  4 * Motorcycles + 15 * Sedans <= 200
- Total number of people transported should be at least 1200:
  30 * Motorcycles + 70 * Sedans >= 1200

Objective:
- Maximize total earnings per shift (100 dollars per motorcycle, 225 dollars per sedan):
  100 * Motorcycles + 225 * Sedans
```python

from cpmpy import Model, intvar

# Decision Variables
Motorcycles = intvar(0, 999999999)  # Number of motorcycles used
Sedans = intvar(0, 999999999)  # Number of sedans used

# Constraints
m = Model()

# Total number of vehicles should not exceed 100%:
m += Motorcycles + Sedans <= 1
# Total pollution produced should be less than 200 units:
m += 4 * Motorcycles + 15 * Sedans <= 200
# Total number of people transported should be at least 1200:
m += 30 * Motorcycles + 70 * Sedans >= 1200

# Objective
# Maximize total earnings per shift (100 dollars per motorcycle, 225 dollars per sedan):
m.maximize(100 * Motorcycles + 225 * Sedans)

```
True
True
Wrong: 2, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?
Decision Variables:
- Number of kayak trips: KayakTrips
- Number of motorboat trips: MotorboatTrips

Constraints:
- Total number of locals to be moved is at least 550:
  4 * KayakTrips + 5 * MotorboatTrips >= 550
- Total number of motorboat trips should be at most 25:
  MotorboatTrips <= 25
- At least 75% of the trips should be by kayak:
  KayakTrips >= 0.75 * (KayakTrips + MotorboatTrips)

Objective:
- Minimize the total amount of time needed to transport all the locals (5 minutes per kayak trip, 3 minutes per motorboat trip):
  5 * KayakTrips + 3 * MotorboatTrips
```python

from cpmpy import Model, intvar

# Decision Variables
KayakTrips = intvar(0, 999999999)  # Number of kayak trips
MotorboatTrips = intvar(0, 999999999)  # Number of motorboat trips

# Constraints
m = Model()

# Total number of locals to be moved is at least 550:
m += 4 * KayakTrips + 5 * MotorboatTrips >= 550
# Total number of motorboat trips should be at most 25:
m += MotorboatTrips <= 25
# At least 75% of the trips should be by kayak:
m += KayakTrips >= 0.75 * (KayakTrips + MotorboatTrips)

# Objective
# Minimize the total amount of time needed to transport all the locals (5 minutes per kayak trip, 3 minutes per motorboat trip):
m.minimize(5 * KayakTrips + 3 * MotorboatTrips)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.
Decision Variables:
- Number of blood tests performed: BloodTests
- Number of ear tests performed: EarTests

Constraints:
- Time constraint (7525 minutes available):
  30 * BloodTests + 5 * EarTests <= 7525
- Blood tests should be at least three times the number of ear tests:
  BloodTests >= 3 * EarTests
- At least 12 ear tests must be administered:
  EarTests >= 12

Objective:
- Maximize the total number of tests performed:
  BloodTests + EarTests
```python

from cpmpy import Model, intvar

# Decision Variables
BloodTests = intvar(0, 999999999)  # Number of blood tests performed
EarTests = intvar(0, 999999999)  # Number of ear tests performed

# Constraints
m = Model()

# Time constraint (7525 minutes available):
m += 30 * BloodTests + 5 * EarTests <= 7525
# Blood tests should be at least three times the number of ear tests:
m += BloodTests >= 3 * EarTests
# At least 12 ear tests must be administered:
m += EarTests >= 12

# Objective
# Maximize the total number of tests performed:
m.maximize(BloodTests + EarTests)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges $100 per hour and the common company charges $72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?
Decision Variables:
- Number of hours allocated to the specialized company: HoursSpecialized
- Number of hours allocated to the common company: HoursCommon

Constraints:
- Total number of images to be annotated is at least 10,000:
  60 * HoursSpecialized + 40 * HoursCommon >= 10000
- At least a third of the work must be allocated to the specialized company:
  HoursSpecialized >= 1/3 * (HoursSpecialized + HoursCommon)

Objective:
- Minimize the cost of annotating the whole dataset (Specialized company charges $100 per hour and common company charges $72 per hour):
  100 * HoursSpecialized + 72 * HoursCommon
```python

from cpmpy import Model, intvar

# Decision Variables
HoursSpecialized = intvar(0, 999999999)  # Number of hours allocated to the specialized company
HoursCommon = intvar(0, 999999999)  # Number of hours allocated to the common company

# Constraints
m = Model()

# Total number of images to be annotated is at least 10,000:
m += 60 * HoursSpecialized + 40 * HoursCommon >= 10000
# At least a third of the work must be allocated to the specialized company:
m += HoursSpecialized >= (1/3) * (HoursSpecialized + HoursCommon)

# Objective
# Minimize the cost of annotating the whole dataset (Specialized company charges $100 per hour and common company charges $72 per hour):
m.minimize(100 * HoursSpecialized + 72 * HoursCommon)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?
Decision Variables:
- Number of golf carts used: GolfCarts
- Number of pull carts used: PullCarts

Constraints:
- Total number of guests to be transported should be at least 80:
  4 * GolfCarts + PullCarts >= 80
- At most 60% of carts can be golf carts:
  GolfCarts <= 0.6 * (GolfCarts + PullCarts)

Objective:
- Minimize the total number of carts used:
  GolfCarts + PullCarts
```python

from cpmpy import Model, intvar

# Decision Variables
GolfCarts = intvar(0, 999999999)  # Number of golf carts used
PullCarts = intvar(0, 999999999)  # Number of pull carts used

# Constraints
m = Model()

# Total number of guests to be transported should be at least 80:
m += 4 * GolfCarts + PullCarts >= 80
# At most 60% of carts can be golf carts:
m += GolfCarts <= 0.6 * (GolfCarts + PullCarts)

# Objective
# Minimize the total number of carts used:
m.minimize(GolfCarts + PullCarts)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?
Decision Variables:
- Number of acai berry smoothies made: AcaiBerrySmoothies
- Number of banana chocolate smoothies made: BananaChocolateSmoothies

Constraints:
- Acai berry smoothie requires 7 units of acai berries and 3 units of water:
  7 * AcaiBerrySmoothies + 6 * BananaChocolateSmoothies <= 3500 (acai berries constraint)
  3 * AcaiBerrySmoothies + 4 * BananaChocolateSmoothies <= 3200 (banana chocolate constraint)
- At least 35% of the total smoothies made must be acai berry smoothies:
  AcaiBerrySmoothies >= 0.35 * (AcaiBerrySmoothies + BananaChocolateSmoothies)
- Number of banana chocolate smoothies made must be more than acai berry smoothies:
  BananaChocolateSmoothies >= AcaiBerrySmoothies

Objective:
- Minimize the total amount of water used:
  3 * AcaiBerrySmoothies + 4 * BananaChocolateSmoothies
```python

from cpmpy import Model, intvar

# Decision Variables
AcaiBerrySmoothies = intvar(0, 999999999)  # Number of acai berry smoothies made
BananaChocolateSmoothies = intvar(0, 999999999)  # Number of banana chocolate smoothies made

# Constraints
m = Model()

# Acai berry smoothie requires 7 units of acai berries and 3 units of water:
m += 7 * AcaiBerrySmoothies + 6 * BananaChocolateSmoothies <= 3500  # Acai berries constraint
m += 3 * AcaiBerrySmoothies + 4 * BananaChocolateSmoothies <= 3200  # Banana chocolate constraint

# At least 35% of the total smoothies made must be acai berry smoothies:
m += AcaiBerrySmoothies >= 0.35 * (AcaiBerrySmoothies + BananaChocolateSmoothies)

# Number of banana chocolate smoothies made must be more than acai berry smoothies:
m += BananaChocolateSmoothies >= AcaiBerrySmoothies

# Objective
# Minimize the total amount of water used:
m.minimize(3 * AcaiBerrySmoothies + 4 * BananaChocolateSmoothies)

```
False
False
Wrong: 3, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?
Decision Variables:
- Number of basketballs made: Basketballs
- Number of footballs made: Footballs

Constraints:
- Materials constraint: 
  5 * Basketballs + 3 * Footballs <= 1500
- Working hours constraint:
  1 * Basketballs + 2 * Footballs <= 750
- Basketball to football ratio constraint:
  Basketballs >= 3 * Footballs
- Minimum footballs constraint:
  Footballs >= 50

Objective:
- Maximize the total number of sports equipment produced:
  Basketballs + Footballs
```python

from cpmpy import Model, intvar

# Decision Variables
Basketballs = intvar(0, 999999999)  # Number of basketballs made
Footballs = intvar(0, 999999999)  # Number of footballs made

# Constraints
m = Model()

# Materials constraint (5 units for basketballs, 3 units for footballs, at most 1500 units available):
m += 5 * Basketballs + 3 * Footballs <= 1500

# Working hours constraint (1 hour for basketballs, 2 hours for footballs, at most 750 hours available):
m += 1 * Basketballs + 2 * Footballs <= 750

# Basketball to football ratio constraint (at least 3 times as many basketballs as footballs):
m += Basketballs >= 3 * Footballs

# Minimum footballs constraint (at least 50 footballs):
m += Footballs >= 50

# Objective
# Maximize the total number of sports equipment produced:
m.maximize(Basketballs + Footballs)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?
Decision Variables:
- Number of in-vivo experiments scheduled: InVivoExperiments
- Number of ex-vivo experiments scheduled: ExVivoExperiments

Constraints:
- Total preparation time for in-vivo and ex-vivo experiments should not exceed 400 minutes:
  30 * InVivoExperiments + 45 * ExVivoExperiments <= 400
- Total execution time for in-vivo and ex-vivo experiments should not exceed 500 minutes:
  60 * InVivoExperiments + 30 * ExVivoExperiments <= 500

Objective:
- Minimize total radiation received by the researcher (2 units per in-vivo experiment, 3 units per ex-vivo experiment):
  2 * InVivoExperiments + 3 * ExVivoExperiments
```python

from cpmpy import Model, intvar

# Decision Variables
InVivoExperiments = intvar(0, 999999999)  # Number of in-vivo experiments scheduled
ExVivoExperiments = intvar(0, 999999999)  # Number of ex-vivo experiments scheduled

# Constraints
m = Model()

# Total preparation time for in-vivo and ex-vivo experiments should not exceed 400 minutes:
m += 30 * InVivoExperiments + 45 * ExVivoExperiments <= 400

# Total execution time for in-vivo and ex-vivo experiments should not exceed 500 minutes:
m += 60 * InVivoExperiments + 30 * ExVivoExperiments <= 500

# Objective
# Minimize total radiation received by the researcher (2 units per in-vivo experiment, 3 units per ex-vivo experiment):
m.minimize(2 * InVivoExperiments + 3 * ExVivoExperiments)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?
Decision Variables:
- Number of runners used: Runners
- Number of canoers used: Canoers

Constraints:
- Total number of hours used should not exceed 200 hours (runners take 4 hours, canoers take 2 hours):
  4 * Runners + 2 * Canoers <= 200
- At least 4 runners must be used:
  Runners >= 4
- At most 33% of deliveries can be by canoe:
  Canoers <= 0.33 * (Runners + Canoers)

Objective:
- Maximize the total amount of mail delivered (3 bags per runner, 10 bags per canoer):
  3 * Runners + 10 * Canoers
```python

from cpmpy import Model, intvar

# Decision Variables
Runners = intvar(4, 999999999)  # Number of runners used
Canoers = intvar(0, 999999999)  # Number of canoers used

# Constraints
m = Model()

# Total number of hours used should not exceed 200 hours:
m += 4 * Runners + 2 * Canoers <= 200
# At least 4 runners must be used:
m += Runners >= 4
# At most 33% of deliveries can be by canoe:
m += Canoers <= 0.33 * (Runners + Canoers)

# Objective
# Maximize the total amount of mail delivered (3 bags per runner, 10 bags per canoer):
m.maximize(3 * Runners + 10 * Canoers)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?
Decision Variables:
- Number of smoothies consumed: Smoothies
- Number of protein bars consumed: ProteinBars

Constraints:
- Protein content constraint:
  2 * Smoothies + 7 * ProteinBars
- Calorie constraint (at most 2000 calories):
  300 * Smoothies + 250 * ProteinBars <= 2000
- Protein bars consumption constraint (2 times more protein bars than smoothies):
  ProteinBars == 2 * Smoothies

Objective:
- Maximize protein intake:
  maximize(2 * Smoothies + 7 * ProteinBars)
```python

from cpmpy import Model, intvar

# Decision Variables
Smoothies = intvar(0, 999999999)  # Number of smoothies consumed
ProteinBars = intvar(0, 999999999)  # Number of protein bars consumed

# Constraints
m = Model()

# Protein content constraint
m += 2 * Smoothies + 7 * ProteinBars
# Calorie constraint (at most 2000 calories)
m += 300 * Smoothies + 250 * ProteinBars <= 2000
# Protein bars consumption constraint (2 times more protein bars than smoothies)
m += ProteinBars == 2 * Smoothies

# Objective
# Maximize protein intake
m.maximize(2 * Smoothies + 7 * ProteinBars)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?

Decision Variables:
- Number of hours the northern factory operates: NorthernHours
- Number of hours the western factory operates: WesternHours

Constraints:
- Plastic units constraint: 
  40 * NorthernHours + 35 * WesternHours <= 60000
- Production constraint for anti-itch injections:
  800 * NorthernHours + 650 * WesternHours >= 800000
- Production constraint for topical cream:
  700 * NorthernHours + 750 * WesternHours >= 700000

Objective:
- Minimize total time needed (sum of hours for both factories):
  NorthernHours + WesternHours
```python

from cpmpy import Model, intvar

# Decision Variables
NorthernHours = intvar(0, 999999999)  # Number of hours the northern factory operates
WesternHours = intvar(0, 999999999)  # Number of hours the western factory operates

# Constraints
m = Model()

# Plastic units constraint:
m += 40 * NorthernHours + 35 * WesternHours <= 60000
# Production constraint for anti-itch injections:
m += 800 * NorthernHours + 650 * WesternHours >= 800000
# Production constraint for topical cream:
m += 700 * NorthernHours + 750 * WesternHours >= 700000

# Objective
# Minimize total time needed (sum of hours for both factories):
m.minimize(NorthernHours + WesternHours)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?
Decision Variables:
- Number of batches of medication patches: Patches
- Number of batches of anti-biotic creams: Creams

Constraints:
- Total time for preparing medication patches and anti-biotic creams should not exceed 400 minutes:
  3 * Patches + 5 * Creams <= 400
- Total units of materials used for medication patches and anti-biotic creams should not exceed 530 units:
  5 * Patches + 6 * Creams <= 530
- Number of anti-biotic creams should be at least twice the number of medication patches:
  Creams >= 2 * Patches
- Total number of batches should be at most 100:
  Patches + Creams <= 100

Objective:
- Maximize the number of people that can be treated (3 people per batch of medication patches, 2 people per batch of anti-biotic creams):
  3 * Patches + 2 * Creams
```python

from cpmpy import Model, intvar

# Decision Variables
Patches = intvar(0, 100)  # Number of batches of medication patches
Creams = intvar(0, 100)  # Number of batches of anti-biotic creams

# Constraints
m = Model()

# Total time for preparing medication patches and anti-biotic creams should not exceed 400 minutes:
m += 3 * Patches + 5 * Creams <= 400
# Total units of materials used for medication patches and anti-biotic creams should not exceed 530 units:
m += 5 * Patches + 6 * Creams <= 530
# Number of anti-biotic creams should be at least twice the number of medication patches:
m += Creams >= 2 * Patches
# Total number of batches should be at most 100:
m += Patches + Creams <= 100

# Objective
# Maximize the number of people that can be treated (3 people per batch of medication patches, 2 people per batch of anti-biotic creams):
m.maximize(3 * Patches + 2 * Creams)

```
True
True
Wrong: 0, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks.  If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?
Decision Variables:
- Number of camel caravans organized: Camels
- Number of desert trucks organized: Trucks

Constraints:
- Total units of goods delivered should be 1500:
  50 * Camels + 150 * Trucks = 1500
- Total hours spent on camel caravans and desert trucks should be minimized:
  12 * Camels + 5 * Trucks

Objective:
- Minimize the total number of hours required for transportation:
  12 * Camels + 5 * Trucks
```python

from cpmpy import Model, intvar

# Decision Variables
Camels = intvar(0, 30)  # Number of camel caravans organized
Trucks = intvar(0, 10)  # Number of desert trucks organized

# Constraints
m = Model()

# Total units of goods delivered should be 1500:
m += 50 * Camels + 150 * Trucks == 1500
# Total hours spent on camel caravans and desert trucks should be minimized:
m.minimize(12 * Camels + 5 * Trucks)

```
False
False
Wrong: 2, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?
Decision Variables:
- Number of first-dose vaccines manufactured: FirstDoseVaccines
- Number of second-dose vaccines manufactured: SecondDoseVaccines

Constraints:
- Total units of antibiotics used should not exceed 35,000 units (30 units per first-dose vaccine, 65 units per second-dose vaccine):
  30 * FirstDoseVaccines + 65 * SecondDoseVaccines <= 35000
- Total amount of gelatine used should be minimized (20 mg per first-dose vaccine, 60 mg per second-dose vaccine):
  20 * FirstDoseVaccines + 60 * SecondDoseVaccines

- More first-dose vaccines than second-dose vaccines:
  FirstDoseVaccines > SecondDoseVaccines
- At least 40 second-dose vaccines must be made:
  SecondDoseVaccines >= 40

Objective:
- Minimize the amount of gelatine used.
```python

from cpmpy import Model, intvar

# Decision Variables
FirstDoseVaccines = intvar(0, 999999999)  # Number of first-dose vaccines manufactured
SecondDoseVaccines = intvar(0, 999999999)  # Number of second-dose vaccines manufactured

# Constraints
m = Model()

# Total units of antibiotics used should not exceed 35,000 units:
m += 30 * FirstDoseVaccines + 65 * SecondDoseVaccines <= 35000
# Total amount of gelatine used should be minimized:
m += 20 * FirstDoseVaccines + 60 * SecondDoseVaccines

# More first-dose vaccines than second-dose vaccines:
m += FirstDoseVaccines > SecondDoseVaccines
# At least 40 second-dose vaccines must be made:
m += SecondDoseVaccines >= 40

# Objective
# Minimize the amount of gelatine used:
m.minimize(20 * FirstDoseVaccines + 60 * SecondDoseVaccines)

```
Error: invalid syntax (<string>, line 1)
False
Error: invalid syntax (<string>, line 1)
---------------------------------------------------------------------------------------------

Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?
Decision Variables:
- Number of units of chemical A added to the mixer: ChemicalA
- Number of units of chemical B added to the mixer: ChemicalB

Constraints:
- Total time for chemical A and chemical B to be effective should not exceed 1500 seconds:
  30 * ChemicalA + 45 * ChemicalB <= 1500
- There has to be at most a third as much chemical A as chemical B in the mixer:
  ChemicalA <= 1/3 * ChemicalB
- At least 300 units of chemical A should be added to the mixer:
  ChemicalA >= 300
- At least 1500 units of total chemicals should be in the mixer:
  ChemicalA + ChemicalB >= 1500

Objective:
- Minimize the total time it takes for the mixed bread to be ready:
  30 * ChemicalA + 45 * ChemicalB
```python

from cpmpy import Model, intvar

# Decision Variables
ChemicalA = intvar(300, 999999999)  # Number of units of chemical A added to the mixer
ChemicalB = intvar(0, 999999999)  # Number of units of chemical B added to the mixer

# Constraints
m = Model()

# Total time for chemical A and chemical B to be effective should not exceed 1500 seconds:
m += 30 * ChemicalA + 45 * ChemicalB <= 1500
# There has to be at most a third as much chemical A as chemical B in the mixer:
m += ChemicalA <= 1/3 * ChemicalB
# At least 300 units of chemical A should be added to the mixer:
m += ChemicalA >= 300
# At least 1500 units of total chemicals should be in the mixer:
m += ChemicalA + ChemicalB >= 1500

# Objective
# Minimize the total time it takes for the mixed bread to be ready:
m.minimize(30 * ChemicalA + 45 * ChemicalB)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A senior home has snacks of spinach and soybeans to increase their intake of iron. A cup of spinach contains 100 units of fibre and 5 mg of iron. A cup of soybeans contains 80 units of fibre and 12 mg of iron. Due to other nutritional requirements, the nurses decided that the number of cups of spinach must exceed the number of cups of soybeans. Furthermore, a cup of spinach contains 30 calories while a cup of soybeans contains 100 calories. If they schedule that the elderly need in total at least 12000 units of fibre and 300 mg of iron, how many cups of each should the nurses schedule to maximize the seniors’ total caloric intake?
Decision Variables:
- Number of cups of spinach: Spinach
- Number of cups of soybeans: Soybeans

Constraints:
- Total fibre requirement (at least 12000 units):
  100 * Spinach + 80 * Soybeans >= 12000
- Total iron requirement (at least 300 mg):
  5 * Spinach + 12 * Soybeans >= 300
- Number of cups of spinach must exceed the number of cups of soybeans:
  Spinach >= Soybeans

Objective:
- Maximize total caloric intake (30 calories per cup of spinach, 100 calories per cup of soybeans):
  30 * Spinach + 100 * Soybeans
```python

from cpmpy import Model, intvar

# Decision Variables
Spinach = intvar(0, 999999999)  # Number of cups of spinach
Soybeans = intvar(0, 999999999)  # Number of cups of soybeans

# Constraints
m = Model()

# Total fibre requirement (at least 12000 units):
m += 100 * Spinach + 80 * Soybeans >= 12000
# Total iron requirement (at least 300 mg):
m += 5 * Spinach + 12 * Soybeans >= 300
# Number of cups of spinach must exceed the number of cups of soybeans:
m += Spinach >= Soybeans

# Objective
# Maximize total caloric intake (30 calories per cup of spinach, 100 calories per cup of soybeans):
m.maximize(30 * Spinach + 100 * Soybeans)

```
False
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A keyboard manufacturer makes mechanical and standard keyboards. Mechanical keyboards are becoming more popular and thus the manufacturer aims to have five times as many mechanical than standard keyboards. A mechanical keyboard costs five units of plastic and two units of solder whereas a standard keyboard costs two units of plastic and one unit of solder. There are still customers that prefer a less noisy alternative. Therefore, there must be at least 30 standard keyboards. If the company has available 1000 units of plastic and 250 units of solder, how many of each type should be manufactured to maximize the total number of keyboards?
Decision Variables:
- Number of mechanical keyboards produced: MechanicalKeyboards
- Number of standard keyboards produced: StandardKeyboards

Constraints:
- Ratio constraint:
  MechanicalKeyboards == 5 * StandardKeyboards

- Resource constraints:
  - Plastic usage constraint: 5 * MechanicalKeyboards + 2 * StandardKeyboards <= 1000
  - Solder usage constraint: 2 * MechanicalKeyboards + StandardKeyboards <= 250

- Demand constraint:
  - At least 30 standard keyboards: StandardKeyboards >= 30

Objective:
- Maximize the total number of keyboards produced:
  MechanicalKeyboards + StandardKeyboards
```python

from cpmpy import Model, intvar

# Decision Variables
MechanicalKeyboards = intvar(0, 999999999)  # Number of mechanical keyboards produced
StandardKeyboards = intvar(0, 999999999)  # Number of standard keyboards produced

# Constraints
m = Model()

# Ratio constraint: MechanicalKeyboards == 5 * StandardKeyboards
m += MechanicalKeyboards == 5 * StandardKeyboards

# Resource constraints:
m += 5 * MechanicalKeyboards + 2 * StandardKeyboards <= 1000  # Plastic usage constraint
m += 2 * MechanicalKeyboards + StandardKeyboards <= 250  # Solder usage constraint

# Demand constraint:
m += StandardKeyboards >= 30  # At least 30 standard keyboards

# Objective
# Maximize the total number of keyboards produced:
m.maximize(MechanicalKeyboards + StandardKeyboards)

```
True
True
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?
Decision Variables:
- Number of sedans purchased: Sedans
- Number of buses purchased: Buses

Constraints:
- Total units of pollution from sedans and buses should not exceed 800 units per day:
  10 * Sedans + 40 * Buses <= 800
- Total number of customers served by sedans and buses should be at least 4600 per day:
  50 * Sedans + 250 * Buses >= 4600

Objective:
- Minimize the total number of vehicles needed (sedans and buses) to decrease costs.
```python

from cpmpy import Model, intvar

# Decision Variables
Sedans = intvar(0, 999999999)  # Number of sedans purchased
Buses = intvar(0, 999999999)  # Number of buses purchased

# Constraints
m = Model()

# Total units of pollution from sedans and buses should not exceed 800 units per day:
m += 10 * Sedans + 40 * Buses <= 800
# Total number of customers served by sedans and buses should be at least 4600 per day:
m += 50 * Sedans + 250 * Buses >= 4600

# Objective
# Minimize the total number of vehicles needed (sedans and buses) to decrease costs.

```
False
False
Wrong: 0, Total: 2, Is objective correct: False
---------------------------------------------------------------------------------------------

A dessert shop is popular for their only two desserts - matcha ice cream and orange sorbet. Two units of flavouring and four units of ice cream is required to make one order of matcha ice cream. Four units of flavouring and three units of water is required to make an order of orange sorbet. The dessert shop has recently been getting more orders online for orange sorbet and therefore, there should be more orange sorbet made than matcha ice cream. However, at least fifteen percent of desserts made must be matcha ice cream. The dessert shop has available 600 units of ice cream and 550 units of water. How many of each dessert should the shop make to minimize the total amount of flavouring needed?
Decision Variables:
- Number of orders of matcha ice cream: MatchaIceCream
- Number of orders of orange sorbet: OrangeSorbet

Constraints:
- Flavoring constraint: 
  2 * MatchaIceCream + 4 * OrangeSorbet <= TotalFlavoring
- Ice cream constraint:
  4 * MatchaIceCream <= 600
- Water constraint:
  3 * OrangeSorbet <= 550
- Percentage constraint:
  MatchaIceCream >= 0.15 * (MatchaIceCream + OrangeSorbet)
- Orange sorbet should be more than matcha ice cream:
  OrangeSorbet >= MatchaIceCream

Objective:
- Minimize total amount of flavoring needed:
  2 * MatchaIceCream + 4 * OrangeSorbet
```python

from cpmpy import Model, intvar

# Decision Variables
MatchaIceCream = intvar(0, 999999999)  # Number of orders of matcha ice cream
OrangeSorbet = intvar(0, 999999999)  # Number of orders of orange sorbet

# Constants
TotalFlavoring = 600  # Total units of flavoring available
TotalWater = 550  # Total units of water available

# Constraints
m = Model()

# Flavoring constraint
m += 2 * MatchaIceCream + 4 * OrangeSorbet <= TotalFlavoring
# Ice cream constraint
m += 4 * MatchaIceCream <= 600
# Water constraint
m += 3 * OrangeSorbet <= 550
# Percentage constraint
m += MatchaIceCream >= 0.15 * (MatchaIceCream + OrangeSorbet)
# Orange sorbet should be more than matcha ice cream
m += OrangeSorbet >= MatchaIceCream

# Objective
# Minimize total amount of flavoring needed
m.minimize(2 * MatchaIceCream + 4 * OrangeSorbet)

```
False
False
Wrong: 2, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A daycare center has children they must pick up and can use two types of vehicles: bus or a personal car. A bus can carry 9 children while a personal car can carry 4 children. The daycare has to pick up at least 100 children. Additionally, due to limitations of pollution, there must be more buses than personal cars. But some children require extra attention. Therefore, there must be at least 5 personal cars. How many of each form of transportation should the daycare center schedule for to minimize the total number of vehicles?
Decision Variables:
- Number of buses scheduled: Buses
- Number of personal cars scheduled: Cars

Constraints:
- Total number of children to be picked up should be at least 100:
  9 * Buses + 4 * Cars >= 100
- There must be more buses than personal cars:
  Buses > Cars
- There must be at least 5 personal cars:
  Cars >= 5

Objective:
- Minimize the total number of vehicles scheduled:
  Buses + Cars
```python

from cpmpy import Model, intvar

# Decision Variables
Buses = intvar(0, 999999999)  # Number of buses scheduled
Cars = intvar(0, 999999999)  # Number of personal cars scheduled

# Constraints
m = Model()

# Total number of children to be picked up should be at least 100:
m += 9 * Buses + 4 * Cars >= 100
# There must be more buses than personal cars:
m += Buses > Cars
# There must be at least 5 personal cars:
m += Cars >= 5

# Objective
# Minimize the total number of vehicles scheduled:
m.minimize(Buses + Cars)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

Both coconut oil and lavender need to be added to a body wash. One unit of coconut oil takes 0.7 minutes to be effective while one unit of lavender takes 0.9 minutes to be effective. The body wash must contain at least 300 units of coconut oil and at most 550 units of both ingredients. Since too much coconut oil can make the body wash too oily, there can be at most thrice the amount of coconut oil as lavenders in the body wash. How many units of each should be added to the body wash to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)
Decision Variables:
- Number of units of coconut oil added: CoconutOil
- Number of units of lavender added: Lavender

Constraints:
- The body wash must contain at least 300 units of coconut oil:
  CoconutOil >= 300
- The total amount of both ingredients should be at most 550 units:
  CoconutOil + Lavender <= 550
- There can be at most thrice the amount of coconut oil as lavenders:
  CoconutOil <= 3 * Lavender

Objective:
- Minimize the total amount of time it takes for the mixture to be effective (0.7 minutes per unit of coconut oil, 0.9 minutes per unit of lavender):
  0.7 * CoconutOil + 0.9 * Lavender
```python

from cpmpy import Model, intvar

# Decision Variables
CoconutOil = intvar(0, 999999999)  # Number of units of coconut oil added
Lavender = intvar(0, 999999999)  # Number of units of lavender added

# Constraints
m = Model()

# The body wash must contain at least 300 units of coconut oil:
m += CoconutOil >= 300
# The total amount of both ingredients should be at most 550 units:
m += CoconutOil + Lavender <= 550
# There can be at most thrice the amount of coconut oil as lavenders:
m += CoconutOil <= 3 * Lavender

# Objective
# Minimize the total amount of time it takes for the mixture to be effective (0.7 minutes per unit of coconut oil, 0.9 minutes per unit of lavender):
m.minimize(0.7 * CoconutOil + 0.9 * Lavender)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A chemical company uses two tests, a salinity test and a pH test. Each unit of the salinity test requires three probes. Whereas each unit of the pH test requires two probes. The chemical company must perform at least 250 pH tests. In total, at least 400 tests must be performed. Further, because of the importance of the salinity test, there must be at most 1.5 times more pH tests than salinity tests. How many times should each test be performed to minimize the total number of probes used?
Decision Variables:
- Number of salinity tests performed: SalinityTests
- Number of pH tests performed: pHTests

Constraints:
- Total number of tests performed should be at least 400:
  SalinityTests + pHTests >= 400
- At least 250 pH tests must be performed:
  pHTests >= 250
- There must be at most 1.5 times more pH tests than salinity tests:
  pHTests <= 1.5 * SalinityTests

Objective:
- Minimize the total number of probes used (3 probes for each salinity test and 2 probes for each pH test):
  3 * SalinityTests + 2 * pHTests
```python

from cpmpy import Model, intvar

# Decision Variables
SalinityTests = intvar(0, 999999999)  # Number of salinity tests performed
pHTests = intvar(0, 999999999)  # Number of pH tests performed

# Constraints
m = Model()

# Total number of tests performed should be at least 400:
m += SalinityTests + pHTests >= 400
# At least 250 pH tests must be performed:
m += pHTests >= 250
# There must be at most 1.5 times more pH tests than salinity tests:
m += pHTests <= 1.5 * SalinityTests

# Objective
# Minimize the total number of probes used (3 probes for each salinity test and 2 probes for each pH test):
m.minimize(3 * SalinityTests + 2 * pHTests)

```
True
True
Wrong: 0, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A municipality hires full-time and part-time staff to deliver mail. Part-time staff works 15 hours per week and gets paid 450 dollars whereas a full-time staff works 40 hours every week and gets paid 1280 dollars  for that week.  Since it is the week leading up to a holiday, planning ahead, the municipality needs 1000 hours of mail staff labor. The municipality has a budget of 31500 dollars for mail delivery for this season. How many of each type of staff should the municipality hire to decrease the total number of staff?
Decision Variables:
- Number of full-time staff hired: FullTimeStaff
- Number of part-time staff hired: PartTimeStaff

Constraints:
- Total labor hours required should be 1000 hours:
  40 * FullTimeStaff + 15 * PartTimeStaff = 1000
- Total cost should not exceed $31500:
  1280 * FullTimeStaff + 450 * PartTimeStaff <= 31500

Objective:
- Minimize the total number of staff:
  FullTimeStaff + PartTimeStaff
```python

from cpmpy import Model, intvar

# Decision Variables
FullTimeStaff = intvar(0, 999999999)  # Number of full-time staff hired
PartTimeStaff = intvar(0, 999999999)  # Number of part-time staff hired

# Constraints
m = Model()

# Total labor hours required should be 1000 hours:
m += 40 * FullTimeStaff + 15 * PartTimeStaff == 1000
# Total cost should not exceed $31500:
m += 1280 * FullTimeStaff + 450 * PartTimeStaff <= 31500

# Objective
# Minimize the total number of staff:
m.minimize(FullTimeStaff + PartTimeStaff)

```
True
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A landscaper has 2500 square feet of grass land in a customer’s backyard where they need to cut grass using either a heavy-duty yard machine or a gas lawn mower. For each square foot of land, the heavy-duty yard machine requires 2 seconds while the gas lawn mower takes 5 seconds. Per square foot, the heavy-duty yard machine produces 12 units of pollution and requires 3 units of fuel. Conversely, the gas lawn mower generates 10 units of pollution for each square foot and requires 2 units of fuel. There are 450 units of fuel available and the landscaper can produce no more than 2000 units of pollution. For how many square feet should each machine be used to minimize the time required to cut this customer’s backyard?
Decision Variables:
- Square feet of land cut by the heavy-duty yard machine: HeavyDutyMachine
- Square feet of land cut by the gas lawn mower: GasLawnMower

Constraints:
- Total square feet of land cut should not exceed 2500:
  HeavyDutyMachine + GasLawnMower <= 2500
- Total fuel used should not exceed 450 units:
  3 * HeavyDutyMachine + 2 * GasLawnMower <= 450
- Total pollution generated should not exceed 2000 units:
  12 * HeavyDutyMachine + 10 * GasLawnMower <= 2000

Objective:
- Minimize the total time required to cut the backyard (2 seconds per square foot for the heavy-duty yard machine, 5 seconds per square foot for the gas lawn mower):
  2 * HeavyDutyMachine + 5 * GasLawnMower
```python

from cpmpy import Model, intvar

# Decision Variables
HeavyDutyMachine = intvar(0, 2500)  # Square feet of land cut by the heavy-duty yard machine
GasLawnMower = intvar(0, 2500)  # Square feet of land cut by the gas lawn mower

# Constraints
m = Model()

# Total square feet of land cut should not exceed 2500
m += HeavyDutyMachine + GasLawnMower <= 2500
# Total fuel used should not exceed 450 units
m += 3 * HeavyDutyMachine + 2 * GasLawnMower <= 450
# Total pollution generated should not exceed 2000 units
m += 12 * HeavyDutyMachine + 10 * GasLawnMower <= 2000

# Objective
# Minimize the total time required to cut the backyard (2 seconds per square foot for the heavy-duty yard machine, 5 seconds per square foot for the gas lawn mower)
m.minimize(2 * HeavyDutyMachine + 5 * GasLawnMower)

```
True
False
Wrong: 1, Total: 3, Is objective correct: True
---------------------------------------------------------------------------------------------

A park is designing their trails and can either create a wide trail or a narrow trail. A wide trail can take 50 visitors every day while the narrow trail expects 20 visitors every day. The wide trail will introduce 6 units of garbage and the narrow trail will introduce 3 units of garbage. There can be at most 3 wide trails and the park hopes to have at most 225 visitors every day. How many of each type of trail should the park construct to minimize the total amount of garbage produced.
Decision Variables:
- Number of wide trails constructed: WideTrails
- Number of narrow trails constructed: NarrowTrails

Constraints:
- Total number of visitors should not exceed 225:
  50 * WideTrails + 20 * NarrowTrails <= 225
- Number of wide trails should be at most 3:
  WideTrails <= 3

Objective:
- Minimize total amount of garbage produced (6 units of garbage for each wide trail, 3 units of garbage for each narrow trail):
  6 * WideTrails + 3 * NarrowTrails
```python

from cpmpy import Model, intvar

# Decision Variables
WideTrails = intvar(0, 3)  # Number of wide trails constructed
NarrowTrails = intvar(0, 999999999)  # Number of narrow trails constructed

# Constraints
m = Model()

# Total number of visitors should not exceed 225:
m += 50 * WideTrails + 20 * NarrowTrails <= 225
# Number of wide trails should be at most 3:
m += WideTrails <= 3

# Objective
# Minimize total amount of garbage produced (6 units of garbage for each wide trail, 3 units of garbage for each narrow trail):
m.minimize(6 * WideTrails + 3 * NarrowTrails)

```
True
True
Wrong: 0, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

A brewery can ferment their product into either wine or kombucha. Each unit of wine requires 3 units of fruit and 8 units of water. Each unit of kombucha requires 5 units of fruit and 7 units of tea. The company has available 7000 units of water and 9000 units of tea. Wine sells for more, therefore the number of wine must be larger than the number of kombucha. Additionally, at least 20% of their products made must be kombucha. How many of each should the brewery make to minimize the total units of fruit required?
Decision Variables:
- Number of units of wine produced: Wine
- Number of units of kombucha produced: Kombucha

Constraints:
- Water constraint: 
  8 * Wine + 7 * Kombucha <= 7000
- Tea constraint:
  7 * Kombucha <= 9000
- Wine must be more than kombucha:
  Wine > Kombucha
- At least 20% of total production must be kombucha:
  Kombucha >= 0.2 * (Wine + Kombucha)

Objective:
- Minimize the total units of fruit required:
  3 * Wine + 5 * Kombucha
```python

from cpmpy import Model, intvar

# Decision Variables
Wine = intvar(0, 999999999)  # Number of units of wine produced
Kombucha = intvar(0, 999999999)  # Number of units of kombucha produced

# Constraints
m = Model()

# Water constraint:
m += 8 * Wine + 7 * Kombucha <= 7000
# Tea constraint:
m += 7 * Kombucha <= 9000
# Wine must be more than kombucha:
m += Wine > Kombucha
# At least 20% of total production must be kombucha:
m += Kombucha >= 0.2 * (Wine + Kombucha)

# Objective
# Minimize the total units of fruit required:
m.minimize(3 * Wine + 5 * Kombucha)

```
True
False
Wrong: 1, Total: 4, Is objective correct: True
---------------------------------------------------------------------------------------------

A hospital can transport their patients either using a type II ambulance or hospital van. The hospital needs to transport 320 patients every day. A type II ambulance is mounted on a truck-style chassis and can move 20 patients every shift and costs the hospital (including gas and salary) $820. A hospital van can move 15 patients and costs the hospital $550 every shift. The hospital can have at most 60% of shifts be hospital vans due to union limitations of the type II ambulance drivers. How many of shift using each type of vehicle should be scheduled to minimize the total cost to the hospital?
Decision Variables:
- Number of shifts using type II ambulance: AmbulanceShifts
- Number of shifts using hospital van: VanShifts

Constraints:
- Total number of patients transported daily should be 320:
  20 * AmbulanceShifts + 15 * VanShifts = 320
- The hospital can have at most 60% of shifts be hospital vans:
  VanShifts <= 0.60 * (AmbulanceShifts + VanShifts)

Objective:
- Minimize total cost (Cost: $820 per type II ambulance shift, $550 per hospital van shift):
  820 * AmbulanceShifts + 550 * VanShifts
```python

from cpmpy import Model, intvar

# Decision Variables
AmbulanceShifts = intvar(0, 999999999)  # Number of shifts using type II ambulance
VanShifts = intvar(0, 999999999)  # Number of shifts using hospital van

# Constraints
m = Model()

# Total number of patients transported daily should be 320:
m += 20 * AmbulanceShifts + 15 * VanShifts == 320
# The hospital can have at most 60% of shifts be hospital vans:
m += VanShifts <= 0.60 * (AmbulanceShifts + VanShifts)

# Objective
# Minimize total cost (Cost: $820 per type II ambulance shift, $550 per hospital van shift):
m.minimize(820 * AmbulanceShifts + 550 * VanShifts)

```
False
False
Wrong: 1, Total: 2, Is objective correct: True
---------------------------------------------------------------------------------------------

An incandescent bulb manufacturing company uses either an argon gas approach or halogen gas approach to fill their light bulbs. The argon gas approach uses 10 units of gas and 12 units of glass to make 2 light bulbs. The halogen gas approach uses 12 units of gas and 8 units of glass to make 3 light bulbs. Additionally, the argon gas approach generates 3 units of heat while the halogen gas approach creates 4 units of heat. The manufacturing company has available 150 units of gas and 120 units of glass. If at most 28 units of heat can be generated during the manufacturing process, how many of each method should be used to maximize the number of light bulbs produced?
Decision Variables:
- Number of light bulbs produced using the argon gas approach: ArgonBulbs
- Number of light bulbs produced using the halogen gas approach: HalogenBulbs

Constraints:
- Gas usage constraint: 
  10 * ArgonBulbs + 12 * HalogenBulbs <= 150
- Glass usage constraint:
  12 * ArgonBulbs + 8 * HalogenBulbs <= 120
- Heat generation constraint:
  3 * ArgonBulbs + 4 * HalogenBulbs <= 28

Objective:
- Maximize the total number of light bulbs produced:
  ArgonBulbs + HalogenBulbs
```python

from cpmpy import Model, intvar

# Decision Variables
ArgonBulbs = intvar(0, 999999999)  # Number of light bulbs produced using the argon gas approach
HalogenBulbs = intvar(0, 999999999)  # Number of light bulbs produced using the halogen gas approach

# Constraints
m = Model()

# Gas usage constraint:
m += 10 * ArgonBulbs + 12 * HalogenBulbs <= 150
# Glass usage constraint:
m += 12 * ArgonBulbs + 8 * HalogenBulbs <= 120
# Heat generation constraint:
m += 3 * ArgonBulbs + 4 * HalogenBulbs <= 28

# Objective
# Maximize the total number of light bulbs produced:
m.maximize(ArgonBulbs + HalogenBulbs)

```
False
False
Wrong: 0, Total: 3, Is objective correct: False
---------------------------------------------------------------------------------------------

